----STARTUP---- (10 December 2020 16:53:09) as /home/belu/Documents/ING_SOFT/linux64/CuisUniversity-4383.image!


----End fileIn of /home/belu/Documents/ING_SOFT/linux64/ISW1-2020-2C-2doParcial.st----!

----End fileIn of /home/belu/Documents/ING_SOFT/linux64/ISW1-2020-1C-2doParcial.st----!

TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'BT 12/10/2020 17:33:28'!
TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'BT 12/10/2020 17:36:07'!
Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 17:36:00'!
test01
	self should: [Room ofHigh: -1 andLenght: 1.]
	raise: Error  
	withMessageText: Room invalidHighOrLenghtWhenCreatingRoomErrorMessage.
! !
!Room class methodsFor: 'error messages' stamp: 'BT 12/10/2020 17:36:31'!
invalidHighOrLenghtWhenCreatingRoomErrorMessage
	self shouldBeImplemented.! !
!Room class methodsFor: 'error messages' stamp: 'BT 12/10/2020 17:36:50' prior: 50872210!
invalidHighOrLenghtWhenCreatingRoomErrorMessage
	^ 'Invalid high or lenght when creating room!!'! !

!testRun: #RoomTest #test01 stamp: 'BT 12/10/2020 17:36:52'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'BT 12/10/2020 17:37:15'!
ofHigh: aSmallInteger andLenght: aSmallInteger2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeOfHigh: aSmallInteger andLenght: aSmallInteger2 ! !
!Room class methodsFor: 'instance creation' stamp: 'BT 12/10/2020 17:38:05' prior: 50872224!
ofHigh: aHigh andLenght: aLenght 
	^self new initializeWithHigh: aHigh andLenght: aLenght ! !

!testRun: #RoomTest #test01 stamp: 'BT 12/10/2020 17:38:08'!
FAILURE!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'BT 12/10/2020 17:38:31'!
Object subclass: #Room
	instanceVariableNames: 'high'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'BT 12/10/2020 17:38:32'!
Object subclass: #Room
	instanceVariableNames: 'high lenght'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'initialization' stamp: 'BT 12/10/2020 17:38:32'!
initializeWithHigh: aHigh andLenght: aLenght 
	self shouldBeImplemented.
	high := aHigh.
	lenght := aLenght.! !
!Room methodsFor: 'initialization' stamp: 'BT 12/10/2020 17:38:37' prior: 50872256!
initializeWithHigh: aHigh andLenght: aLenght 
	high := aHigh.
	lenght := aLenght.! !

!testRun: #RoomTest #test01 stamp: 'BT 12/10/2020 17:38:40'!
FAILURE!
!Room methodsFor: 'initialization' stamp: 'BT 12/10/2020 17:39:30' prior: 50872263!
initializeWithHigh: aHigh andLenght: aLenght 
	self error: self class invalidHighOrLenghtWhenCreatingRoomErrorMessage.
	
	high := aHigh.
	lenght := aLenght.! !

!testRun: #RoomTest #test01 stamp: 'BT 12/10/2020 17:39:32'!
PASSED!

!testRun: #RoomTest #test01 stamp: 'BT 12/10/2020 17:39:34'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 17:40:24' prior: 50872203!
test01
	self should: [Room ofHigh: -1 andLenght: 1.]
	raise: Error  
	withMessageText: Room invalidHighOrLenghtWhenCreatingRoomErrorMessage.
! !
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 17:40:34' prior: 50872283!
test01
	self should: [Room ofHigh: 0 andLenght: 1.]
	raise: Error  
	withMessageText: Room invalidHighOrLenghtWhenCreatingRoomErrorMessage.
! !

!testRun: #RoomTest #test01 stamp: 'BT 12/10/2020 17:40:35'!
PASSED!

!testRun: #RoomTest #test01 stamp: 'BT 12/10/2020 17:40:35'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 17:40:55'!
test02
	self should: [Room ofHigh: 1 andLenght: 0.]
	raise: Error  
	withMessageText: Room invalidHighOrLenghtWhenCreatingRoomErrorMessage.
! !

!testRun: #RoomTest #test02 stamp: 'BT 12/10/2020 17:40:56'!
PASSED!

!testRun: #RoomTest #test01 stamp: 'BT 12/10/2020 17:40:56'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'BT 12/10/2020 17:40:56'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 17:41:47'!
test03
	self should: [Room ofHigh: 2.5 andLenght: 0.]
	raise: Error  
	withMessageText: Room invalidHighOrLenghtWhenCreatingRoomErrorMessage.
! !
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 17:41:53' prior: 50872315!
test03
	self should: [Room ofHigh: 2 andLenght: 2.5.]
	raise: Error  
	withMessageText: Room invalidHighOrLenghtWhenCreatingRoomErrorMessage.
! !
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 17:42:09'!
test04
	self should: [Room ofHigh: 2 andLenght: 2.]
	raise: Error  
	withMessageText: Room invalidHighOrLenghtWhenCreatingRoomErrorMessage.
! !
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 17:42:22' prior: 50872330!
test04
	self should: [Room ofHigh: 2.5 andLenght: 2.]
	raise: Error  
	withMessageText: Room invalidHighOrLenghtWhenCreatingRoomErrorMessage.
! !

!testRun: #RoomTest #test04 stamp: 'BT 12/10/2020 17:42:24'!
PASSED!

!testRun: #RoomTest #test01 stamp: 'BT 12/10/2020 17:42:24'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'BT 12/10/2020 17:42:24'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'BT 12/10/2020 17:42:24'!
PASSED!

!testRun: #RoomTest #test04 stamp: 'BT 12/10/2020 17:42:24'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 17:43:19'!
test05
	| aRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	

	! !
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 17:47:49' prior: 50872355!
test05
	| aRoom anObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. .
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	self assert: (aRoom at: 0@0) equals: anObjetToPlaceInRoom.
	
	
	

	! !

!testRun: #RoomTest #test01 stamp: 'BT 12/10/2020 17:47:57'!
PASSED!

!testRun: #RoomTest #test05 stamp: 'BT 12/10/2020 17:48:02'!
ERROR!
!Room methodsFor: 'initialization' stamp: 'BT 12/10/2020 17:50:58' prior: 50872271!
initializeWithHigh: aHigh andLenght: aLenght 
	
	(aHigh isInteger) ifFalse: [ self signalInvalidHIghOrLenght].
	
	high := aHigh.
	lenght := aLenght.
	
	! !
!Room methodsFor: 'signals' stamp: 'BT 12/10/2020 17:51:47'!
signalinvalidHighOrLenght
	self error: self class invalidHighOrLenghtWhenCreatingRoomErrorMessage.! !
!Room methodsFor: 'initialization' stamp: 'BT 12/10/2020 17:54:16' prior: 50872376!
initializeWithHigh: aHigh andLenght: aLenght 
	
	(aHigh isInteger and:( aLenght isInteger)) ifFalse: [ self signalInvalidHIghOrLenght].
	(aHigh > 0 and:( aLenght > 0)) ifFalse: [ self signalInvalidHIghOrLenght].
	
	high := aHigh.
	lenght := aLenght.
	
	! !
!Room methodsFor: 'object ubication' stamp: 'BT 12/10/2020 17:55:32'!
place: aPointsPortableObject at: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'object ubication' stamp: 'BT 12/10/2020 17:55:51' prior: 50872400!
place: aPointsPortableObject at: aPoint 
	! !

!testRun: #RoomTest #test05 stamp: 'BT 12/10/2020 17:55:54'!
ERROR!

!testRun: #RoomTest #test01 stamp: 'BT 12/10/2020 17:56:03'!
FAILURE!

!testRun: #RoomTest #test01 stamp: 'BT 12/10/2020 17:56:03'!
FAILURE!

aHigh > 0!
!Room methodsFor: 'signals' stamp: 'BT 12/10/2020 17:57:06'!
signalInvalidHIghOrLenght
	self error: self class invalidHighOrLenghtWhenCreatingRoomErrorMessage.! !

!methodRemoval: Room #signalinvalidHighOrLenght stamp: 'BT 12/10/2020 17:57:12'!
signalinvalidHighOrLenght
	self error: self class invalidHighOrLenghtWhenCreatingRoomErrorMessage.!

!testRun: #RoomTest #test01 stamp: 'BT 12/10/2020 17:57:27'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'BT 12/10/2020 17:57:29'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'BT 12/10/2020 17:57:30'!
PASSED!

!testRun: #RoomTest #test04 stamp: 'BT 12/10/2020 17:57:32'!
PASSED!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'BT 12/10/2020 17:58:24'!
Object subclass: #Room
	instanceVariableNames: 'high lenght object'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'object ubication' stamp: 'BT 12/10/2020 17:58:20' prior: 50872405!
place: aPointsPortableObject at: aPoint 
	object := aPointsPortableObject ! !
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 17:59:10' prior: 50872360!
test05
	| aRoom anObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. .
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
	
	
	

	! !
!Room methodsFor: 'accesing' stamp: 'BT 12/10/2020 17:59:32'!
atPosition: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'accesing' stamp: 'BT 12/10/2020 17:59:52' prior: 50872461!
atPosition: aPoint 
	^ object ! !

!testRun: #RoomTest #test05 stamp: 'BT 12/10/2020 17:59:55'!
PASSED!

!testRun: #RoomTest #test01 stamp: 'BT 12/10/2020 18:00:02'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'BT 12/10/2020 18:00:02'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'BT 12/10/2020 18:00:02'!
PASSED!

!testRun: #RoomTest #test04 stamp: 'BT 12/10/2020 18:00:02'!
PASSED!

!testRun: #RoomTest #test05 stamp: 'BT 12/10/2020 18:00:02'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 18:00:42' prior: 50872449!
test05
	| aRoom anObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. .
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	self assert: (aRoom isEmptyAt: 0@0).
	self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
	
	
	

	! !
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 18:01:23' prior: 50872482!
test05
	| aRoom anObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. .
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	self deny: (aRoom isEmptyAt: 0@0).
	self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
	
	
	

	! !
!Room methodsFor: 'testing' stamp: 'BT 12/10/2020 18:02:00'!
isEmptyAt: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'testing' stamp: 'BT 12/10/2020 18:02:06' prior: 50872508!
isEmptyAt: aPoint 
	^ false.! !

!testRun: #RoomTest #test05 stamp: 'BT 12/10/2020 18:02:07'!
FAILURE!

!testRun: #RoomTest #test05 stamp: 'BT 12/10/2020 18:02:23'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 18:05:26'!
test06
	| aRoom anObjetToPlaceInRoom otherObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	otherObjetToPlaceInRoom := PointsPortableObject named: 'juguete' weighing: 2  worth: 1. 
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	aRoom place: anObjetToPlaceInRoom at: 1@1.
	
	self deny: (aRoom isEmptyAt: 1@1).
	self deny: (aRoom isEmptyAt: 0@0).
	self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
	self assert: (aRoom atPosition: 1@1) equals: otherObjetToPlaceInRoom.
	
	

	! !

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'BT 12/10/2020 18:08:42'!
Object subclass: #Room
	instanceVariableNames: 'high lenght object placedObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'initialization' stamp: 'BT 12/10/2020 18:08:40' prior: 50872389!
initializeWithHigh: aHigh andLenght: aLenght 
	
	(aHigh isInteger and:( aLenght isInteger)) ifFalse: [ self signalInvalidHIghOrLenght].
	(aHigh > 0 and:( aLenght > 0)) ifFalse: [ self signalInvalidHIghOrLenght].
	
	high := aHigh.
	lenght := aLenght.
	placedObjects := Dictionary new.
	
	! !
!Room methodsFor: 'object ubication' stamp: 'BT 12/10/2020 18:10:06' prior: 50872444!
place: aPointsPortableObject at: aPositionInRoomWhereToPlaceObject 
	placedObjects at: aPositionInRoomWhereToPlaceObject ! !
!Room methodsFor: 'object ubication' stamp: 'BT 12/10/2020 18:10:23' prior: 50872562!
place: anObjectToPlace at: aPositionInRoomWhereToPlaceObject 
	placedObjects at: aPositionInRoomWhereToPlaceObject ! !
!Room methodsFor: 'object ubication' stamp: 'BT 12/10/2020 18:10:38' prior: 50872569!
place: anObjectToPlace at: aPositionInRoomWhereToPlaceObject 
	placedObjects at: aPositionInRoomWhereToPlaceObject put: anObjectToPlace.! !

!testRun: #RoomTest #test06 stamp: 'BT 12/10/2020 18:10:43'!
ERROR!
!Room methodsFor: 'testing' stamp: 'BT 12/10/2020 18:12:29' prior: 50872512!
isEmptyAt: aPoint 
	^ placedObjects at: aPoint ifPresent: [^ true] ifAbsent: [false].! !

!testRun: #RoomTest #test06 stamp: 'BT 12/10/2020 18:12:30'!
ERROR!

aRoom isEmptyAt: 1@1!

!testRun: #RoomTest #test06 stamp: 'BT 12/10/2020 18:13:21'!
ERROR!

!testRun: #RoomTest #test06 stamp: 'BT 12/10/2020 18:13:39'!
ERROR!
!Room methodsFor: 'testing' stamp: 'BT 12/10/2020 18:13:59' prior: 50872585!
isEmptyAt: aPoint 
	^ placedObjects at: aPoint ifPresent: [^ true] ifAbsent: [^ false].! !

!testRun: #RoomTest #test06 stamp: 'BT 12/10/2020 18:14:16'!
ERROR!

placedObjects at: aPoint!

!testRun: #RoomTest #test06 stamp: 'BT 12/10/2020 18:16:37'!
ERROR!
!Room methodsFor: 'testing' stamp: 'BT 12/10/2020 18:17:15' prior: 50872598!
isEmptyAt: aPoint 
	^ placedObjects at: aPoint ifPresent: [true] ifAbsent: [false].! !

!testRun: #RoomTest #test06 stamp: 'BT 12/10/2020 18:17:18'!
ERROR!

a := Dictionary new.!

a at: 1 put: 2.!

a at: 1 ifPresent: 1  ifAbsent: 2 !

a at: 1 put: 2. 2 !

a at: 1 ifPresent: [1]  ifAbsent: [2]. !
!Room methodsFor: 'testing' stamp: 'BT 12/10/2020 18:21:36' prior: 50872609!
isEmptyAt: aPoint 
	^ placedObjects at: aPoint ifPresent: [^ true] ifAbsent: [^ false].! !

!testRun: #RoomTest #test06 stamp: 'BT 12/10/2020 18:21:38'!
ERROR!
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 18:24:40' prior: 50872520!
test06
	| aRoom anObjetToPlaceInRoom otherObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	otherObjetToPlaceInRoom := PointsPortableObject named: 'juguete' weighing: 2  worth: 1. 
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	aRoom place: anObjetToPlaceInRoom at: 1@1.
	
	
	self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
	self assert: (aRoom atPosition: 1@1) equals: otherObjetToPlaceInRoom.
	self deny: (aRoom isEmptyAt: 1@1).
	self deny: (aRoom isEmptyAt: 0@0).
	

	! !
!Room methodsFor: 'accesing' stamp: 'BT 12/10/2020 18:25:29' prior: 50872465!
atPosition: aPosition 
	^ placedObjects at: aPosition.! !

!testRun: #RoomTest #test06 stamp: 'BT 12/10/2020 18:25:31'!
FAILURE!
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 18:25:42' prior: 50872629!
test06
	| aRoom anObjetToPlaceInRoom otherObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	otherObjetToPlaceInRoom := PointsPortableObject named: 'juguete' weighing: 2  worth: 1. 
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	aRoom place: anObjetToPlaceInRoom at: 1@1.
	
	
	self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
	self assert: (aRoom atPosition: 1@1) equals: otherObjetToPlaceInRoom.
	"self deny: (aRoom isEmptyAt: 1@1).
	self deny: (aRoom isEmptyAt: 0@0)."
	

	! !

!testRun: #RoomTest #test06 stamp: 'BT 12/10/2020 18:25:50'!
FAILURE!
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 18:26:22' prior: 50872657!
test06
	| aRoom anObjetToPlaceInRoom otherObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	otherObjetToPlaceInRoom := PointsPortableObject named: 'juguete' weighing: 2  worth: 1. 
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	aRoom place: otherObjetToPlaceInRoom at: 1@1.
	
	self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
	self assert: (aRoom atPosition: 1@1) equals: otherObjetToPlaceInRoom.
	"self deny: (aRoom isEmptyAt: 1@1).
	self deny: (aRoom isEmptyAt: 0@0)."
	

	! !
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 18:27:45' prior: 50872681!
test06
	| aRoom anObjetToPlaceInRoom otherObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	otherObjetToPlaceInRoom := PointsPortableObject named: 'juguete' weighing: 2  worth: 1. 
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	aRoom place: otherObjetToPlaceInRoom at: 1@1.
	
	self deny: (aRoom isEmptyAt: 1@1).
	self deny: (aRoom isEmptyAt: 0@0).
	self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
	self assert: (aRoom atPosition: 1@1) equals: otherObjetToPlaceInRoom.
	
	

	! !

	^ placedObjects at: aPoint ifPresent: [^ true] ifAbsent: [^ false].!
!Room methodsFor: 'testing' stamp: 'BT 12/10/2020 18:29:19' prior: 50872621!
isEmptyAt: aPoint 
	^ placedObjects at: aPoint ifPresent: [:aP | ^ true] ifAbsent: [^ false].! !
!Room methodsFor: 'testing' stamp: 'BT 12/10/2020 18:30:31' prior: 50872727!
isEmptyAt: aPoint 
	^ placedObjects includesKey: aPoint.! !
!Room methodsFor: 'testing' stamp: 'BT 12/10/2020 18:30:40' prior: 50872733!
isEmptyAt: aPosition 
	^ placedObjects includesKey: aPosition.! !

!testRun: #RoomTest #test06 stamp: 'BT 12/10/2020 18:30:42'!
FAILURE!

!testRun: #RoomTest #test06 stamp: 'BT 12/10/2020 18:30:47'!
FAILURE!

!testRun: #RoomTest #test06 stamp: 'BT 12/10/2020 18:31:01'!
FAILURE!
!Room methodsFor: 'testing' stamp: 'BT 12/10/2020 18:31:40' prior: 50872738!
isEmptyAt: aPosition 
	^ (placedObjects includesKey: aPosition) not.! !

!testRun: #RoomTest #test06 stamp: 'BT 12/10/2020 18:32:03'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 18:36:47'!
test07
	| aRoom anObjetToPlaceInRoom otherObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	otherObjetToPlaceInRoom := PointsPortableObject named: 'juguete' weighing: 2  worth: 1. 
	
	self should: [aRoom place: otherObjetToPlaceInRoom at: 0@0.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError errorMessage equals: Room canNotPlaceObjectsAtSamePositionErrorMessage).
		self deny: (aRoom isEmptyAt: 0@0).
		self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
		]
	
	
	
	

	! !
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 18:36:55' prior: 50872757!
test07
	| aRoom anObjetToPlaceInRoom otherObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	otherObjetToPlaceInRoom := PointsPortableObject named: 'juguete' weighing: 2  worth: 1. 
	
	self should: [aRoom place: otherObjetToPlaceInRoom at: 0@0.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError errorMessage equals: Room canNotPlaceObjectsAtSamePositionErrorMessage).
		self deny: (aRoom isEmptyAt: 0@0).
		self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
		]
	
	
	
	

	! !
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 18:37:24' prior: 50872781!
test07
	| aRoom anObjetToPlaceInRoom anObjetToPlaceWhereOtherIsPlaced |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	anObjetToPlaceWhereOtherIsPlaced := PointsPortableObject named: 'juguete' weighing: 2  worth: 1. 
	
	self should: [aRoom place: anObjetToPlaceWhereOtherIsPlaced at: 0@0.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError errorMessage equals: Room canNotPlaceObjectsAtSamePositionErrorMessage).
		self deny: (aRoom isEmptyAt: 0@0).
		self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
		]
	
	
	
	

	! !
!Room methodsFor: 'object ubication' stamp: 'BT 12/10/2020 18:41:07' prior: 50872576!
place: anObjectToPlace at: aPositionInRoomWhereToPlaceObject 
	(placedObjects includesKey: aPositionInRoomWhereToPlaceObject) ifTrue: [ self error: self canNotPlaceObjectsAtSamePositionErrorMessage].
			! !
!Room methodsFor: 'error messages' stamp: 'BT 12/10/2020 18:41:27'!
canNotPlaceObjectsAtSamePositionErrorMessage
	self shouldBeImplemented.! !
!Room methodsFor: 'error messages' stamp: 'BT 12/10/2020 18:42:08' prior: 50872839!
canNotPlaceObjectsAtSamePositionErrorMessage
	^ 'cannot place objects at same position'! !

!testRun: #RoomTest #test07 stamp: 'BT 12/10/2020 18:43:07'!
FAILURE!
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 18:43:42' prior: 50872805!
test07
	| aRoom anObjetToPlaceInRoom anObjetToPlaceWhereOtherIsPlaced |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	anObjetToPlaceWhereOtherIsPlaced := PointsPortableObject named: 'juguete' weighing: 2  worth: 1. 
	
	self should: [aRoom place: anObjetToPlaceWhereOtherIsPlaced at: 0@0.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError errorMessage = Room canNotPlaceObjectsAtSamePositionErrorMessage).
		self deny: (aRoom isEmptyAt: 0@0).
		self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
		]
	
	
	
	

	! !

!testRun: #RoomTest #test07 stamp: 'BT 12/10/2020 18:43:53'!
FAILURE!

!testRun: #RoomTest #test07 stamp: 'BT 12/10/2020 18:44:13'!
FAILURE!

placedObjects includesKey: aPositionInRoomWhereToPlaceObject!

placedObjects includesKey: aPositionInRoomWhereToPlaceObject!
!Room methodsFor: 'object ubication' stamp: 'BT 12/10/2020 18:46:16' prior: 50872830!
place: anObjectToPlace at: aPositionInRoomWhereToPlaceObject 
	(placedObjects includesKey: aPositionInRoomWhereToPlaceObject) ifTrue: [ self error: self canNotPlaceObjectsAtSamePositionErrorMessage].
	placedObjects at: aPositionInRoomWhereToPlaceObject put: anObjectToPlace.
			! !

!testRun: #RoomTest #test07 stamp: 'BT 12/10/2020 18:46:18'!
ERROR!
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 18:46:34' prior: 50872852!
test07
	| aRoom anObjetToPlaceInRoom anObjetToPlaceWhereOtherIsPlaced |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	anObjetToPlaceWhereOtherIsPlaced := PointsPortableObject named: 'juguete' weighing: 2  worth: 1. 
	
	self should: [aRoom place: anObjetToPlaceWhereOtherIsPlaced at: 0@0.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError errorMessage = Room canNotPlaceObjectsAtSamePositionErrorMessage).
		self deny: (aRoom isEmptyAt: 0@0).
		self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
		]
	
	
	
	

	! !

!testRun: #RoomTest #test07 stamp: 'BT 12/10/2020 18:46:45'!
ERROR!
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 18:48:32' prior: 50872899!
test07
	| aRoom anObjetToPlaceInRoom anObjetToPlaceWhereOtherIsPlaced |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	anObjetToPlaceWhereOtherIsPlaced := PointsPortableObject named: 'juguete' weighing: 2  worth: 1. 
	
	self should: [aRoom place: anObjetToPlaceWhereOtherIsPlaced at: 0@0.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceObjectsAtSamePositionErrorMessage).
		self deny: (aRoom isEmptyAt: 0@0).
		self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
		]
	
	
	
	

	! !

!testRun: #RoomTest #test07 stamp: 'BT 12/10/2020 18:48:40'!
ERROR!

!testRun: #RoomTest #test07 stamp: 'BT 12/10/2020 18:48:56'!
ERROR!
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 18:49:26' prior: 50872925!
test07
	| aRoom anObjetToPlaceInRoom anObjetToPlaceWhereOtherIsPlaced |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	anObjetToPlaceWhereOtherIsPlaced := PointsPortableObject named: 'juguete' weighing: 2  worth: 1. 
	
	self should: [aRoom place: anObjetToPlaceWhereOtherIsPlaced at: 0@0.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceObjectsAtSamePositionErrorMessage).
		self deny: (aRoom isEmptyAt: 0@0).
		self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
		]
	
	
	
	

	! !
!Room class methodsFor: 'error messages' stamp: 'BT 12/10/2020 18:49:56'!
canNotPlaceObjectsAtSamePositionErrorMessage
	^ 'cannot place more than one object at the same position!!'! !
!Room methodsFor: 'object ubication' stamp: 'BT 12/10/2020 18:50:20' prior: 50872885!
place: anObjectToPlace at: aPositionInRoomWhereToPlaceObject 
	(placedObjects includesKey: aPositionInRoomWhereToPlaceObject) ifTrue: [ self error: self class canNotPlaceObjectsAtSamePositionErrorMessage].
	placedObjects at: aPositionInRoomWhereToPlaceObject put: anObjectToPlace.
			! !

!methodRemoval: Room #canNotPlaceObjectsAtSamePositionErrorMessage stamp: 'BT 12/10/2020 18:50:23'!
canNotPlaceObjectsAtSamePositionErrorMessage
	^ 'cannot place objects at same position'!

!testRun: #RoomTest #test07 stamp: 'BT 12/10/2020 18:50:27'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 18:53:26'!
test01CannotCreateRoomWithHIghZero
	self should: [Room ofHigh: 0 andLenght: 1.]
	raise: Error  
	withMessageText: Room invalidHighOrLenghtWhenCreatingRoomErrorMessage.
! !

!methodRemoval: RoomTest #test01 stamp: 'BT 12/10/2020 18:53:26'!
test01
	self should: [Room ofHigh: 0 andLenght: 1.]
	raise: Error  
	withMessageText: Room invalidHighOrLenghtWhenCreatingRoomErrorMessage.
!
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 18:53:52'!
test02CannotCreateRoomWithLenghtZero
	self should: [Room ofHigh: 1 andLenght: 0.]
	raise: Error  
	withMessageText: Room invalidHighOrLenghtWhenCreatingRoomErrorMessage.
! !
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 18:54:34'!
test03CannotCreateRoomWithNotIntegerLenght
	self should: [Room ofHigh: 2 andLenght: 2.5.]
	raise: Error  
	withMessageText: Room invalidHighOrLenghtWhenCreatingRoomErrorMessage.
! !
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 18:54:51'!
test04CannotCreateRoomWithNotIntegerHigh
	self should: [Room ofHigh: 2.5 andLenght: 2.]
	raise: Error  
	withMessageText: Room invalidHighOrLenghtWhenCreatingRoomErrorMessage.
! !

!methodRemoval: RoomTest #test02 stamp: 'BT 12/10/2020 18:55:06'!
test02
	self should: [Room ofHigh: 1 andLenght: 0.]
	raise: Error  
	withMessageText: Room invalidHighOrLenghtWhenCreatingRoomErrorMessage.
!

!methodRemoval: RoomTest #test03 stamp: 'BT 12/10/2020 18:55:08'!
test03
	self should: [Room ofHigh: 2 andLenght: 2.5.]
	raise: Error  
	withMessageText: Room invalidHighOrLenghtWhenCreatingRoomErrorMessage.
!
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 18:55:17'!
test01CannotCreateRoomWithHighZero
	self should: [Room ofHigh: 0 andLenght: 1.]
	raise: Error  
	withMessageText: Room invalidHighOrLenghtWhenCreatingRoomErrorMessage.
! !

!methodRemoval: RoomTest #test01CannotCreateRoomWithHIghZero stamp: 'BT 12/10/2020 18:55:17'!
test01CannotCreateRoomWithHIghZero
	self should: [Room ofHigh: 0 andLenght: 1.]
	raise: Error  
	withMessageText: Room invalidHighOrLenghtWhenCreatingRoomErrorMessage.
!
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 18:56:12'!
test03CannotCreateRoomWithNegativeHigh
	self should: [Room ofHigh: -1 andLenght: 1.]
	raise: Error  
	withMessageText: Room invalidHighOrLenghtWhenCreatingRoomErrorMessage.
! !
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 18:56:30'!
test04CannotCreateRoomWithNegativeLenght
	self should: [Room ofHigh: 1 andLenght: -1.]
	raise: Error  
	withMessageText: Room invalidHighOrLenghtWhenCreatingRoomErrorMessage.
! !
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 18:56:59'!
test06CannotCreateRoomWithNotIntegerHigh
	self should: [Room ofHigh: 2.5 andLenght: 2.]
	raise: Error  
	withMessageText: Room invalidHighOrLenghtWhenCreatingRoomErrorMessage.
! !
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 18:57:22'!
test00CannotCreateRoomWithNotIntegerLenght
	self should: [Room ofHigh: 2 andLenght: 2.5.]
	raise: Error  
	withMessageText: Room invalidHighOrLenghtWhenCreatingRoomErrorMessage.
! !

!methodRemoval: RoomTest #test03CannotCreateRoomWithNotIntegerLenght stamp: 'BT 12/10/2020 18:57:22'!
test03CannotCreateRoomWithNotIntegerLenght
	self should: [Room ofHigh: 2 andLenght: 2.5.]
	raise: Error  
	withMessageText: Room invalidHighOrLenghtWhenCreatingRoomErrorMessage.
!

!methodRemoval: RoomTest #test04 stamp: 'BT 12/10/2020 18:57:34'!
test04
	self should: [Room ofHigh: 2.5 andLenght: 2.]
	raise: Error  
	withMessageText: Room invalidHighOrLenghtWhenCreatingRoomErrorMessage.
!
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 18:57:49'!
test05CannotCreateRoomWithNotIntegerHigh
	self should: [Room ofHigh: 2.5 andLenght: 2.]
	raise: Error  
	withMessageText: Room invalidHighOrLenghtWhenCreatingRoomErrorMessage.
! !

!methodRemoval: RoomTest #test06CannotCreateRoomWithNotIntegerHigh stamp: 'BT 12/10/2020 18:57:49'!
test06CannotCreateRoomWithNotIntegerHigh
	self should: [Room ofHigh: 2.5 andLenght: 2.]
	raise: Error  
	withMessageText: Room invalidHighOrLenghtWhenCreatingRoomErrorMessage.
!

!methodRemoval: RoomTest #test05CannotCreateRoomWithNotIntegerHigh stamp: 'BT 12/10/2020 18:58:26'!
test05CannotCreateRoomWithNotIntegerHigh
	self should: [Room ofHigh: 2.5 andLenght: 2.]
	raise: Error  
	withMessageText: Room invalidHighOrLenghtWhenCreatingRoomErrorMessage.
!
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 18:58:44'!
test05CannotCreateRoomWithNotIntegerHigh
	self should: [Room ofHigh: 2.5 andLenght: 2.]
	raise: Error  
	withMessageText: Room invalidHighOrLenghtWhenCreatingRoomErrorMessage.
! !

!methodRemoval: RoomTest #test04CannotCreateRoomWithNotIntegerHigh stamp: 'BT 12/10/2020 18:58:44'!
test04CannotCreateRoomWithNotIntegerHigh
	self should: [Room ofHigh: 2.5 andLenght: 2.]
	raise: Error  
	withMessageText: Room invalidHighOrLenghtWhenCreatingRoomErrorMessage.
!
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 18:59:15'!
test06CannotCreateRoomWithNotIntegerLenght
	self should: [Room ofHigh: 2 andLenght: 2.5.]
	raise: Error  
	withMessageText: Room invalidHighOrLenghtWhenCreatingRoomErrorMessage.
! !

!methodRemoval: RoomTest #test00CannotCreateRoomWithNotIntegerLenght stamp: 'BT 12/10/2020 18:59:15'!
test00CannotCreateRoomWithNotIntegerLenght
	self should: [Room ofHigh: 2 andLenght: 2.5.]
	raise: Error  
	withMessageText: Room invalidHighOrLenghtWhenCreatingRoomErrorMessage.
!
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 19:00:00'!
test05PlacingInRoomOneObjectWorksCorrectly
	| aRoom anObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. .
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	self deny: (aRoom isEmptyAt: 0@0).
	self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
	
	
	

	! !
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 19:00:12'!
test07PlacingInRoomOneObjectWorksCorrectly
	| aRoom anObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. .
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	self deny: (aRoom isEmptyAt: 0@0).
	self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
	
	
	

	! !

!methodRemoval: RoomTest #test05PlacingInRoomOneObjectWorksCorrectly stamp: 'BT 12/10/2020 19:00:12'!
test05PlacingInRoomOneObjectWorksCorrectly
	| aRoom anObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. .
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	self deny: (aRoom isEmptyAt: 0@0).
	self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
	
	
	

	!

!methodRemoval: RoomTest #test05 stamp: 'BT 12/10/2020 19:00:20'!
test05
	| aRoom anObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. .
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	self deny: (aRoom isEmptyAt: 0@0).
	self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
	
	
	

	!
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 19:01:02'!
test08PlacingInRoomManyObjectsAtDifferentPositionsWorksCorrectly
	| aRoom anObjetToPlaceInRoom otherObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	otherObjetToPlaceInRoom := PointsPortableObject named: 'juguete' weighing: 2  worth: 1. 
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	aRoom place: otherObjetToPlaceInRoom at: 1@1.
	
	self deny: (aRoom isEmptyAt: 1@1).
	self deny: (aRoom isEmptyAt: 0@0).
	self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
	self assert: (aRoom atPosition: 1@1) equals: otherObjetToPlaceInRoom.
	
	

	! !

!methodRemoval: RoomTest #test06 stamp: 'BT 12/10/2020 19:01:05'!
test06
	| aRoom anObjetToPlaceInRoom otherObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	otherObjetToPlaceInRoom := PointsPortableObject named: 'juguete' weighing: 2  worth: 1. 
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	aRoom place: otherObjetToPlaceInRoom at: 1@1.
	
	self deny: (aRoom isEmptyAt: 1@1).
	self deny: (aRoom isEmptyAt: 0@0).
	self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
	self assert: (aRoom atPosition: 1@1) equals: otherObjetToPlaceInRoom.
	
	

	!
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 19:01:55'!
test09PlaceinInRoomObjectAtSamePositionRaisesError
	| aRoom anObjetToPlaceInRoom anObjetToPlaceWhereOtherIsPlaced |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	anObjetToPlaceWhereOtherIsPlaced := PointsPortableObject named: 'juguete' weighing: 2  worth: 1. 
	
	self should: [aRoom place: anObjetToPlaceWhereOtherIsPlaced at: 0@0.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceObjectsAtSamePositionErrorMessage).
		self deny: (aRoom isEmptyAt: 0@0).
		self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
		]
	
	
	
	

	! !

!methodRemoval: RoomTest #test07 stamp: 'BT 12/10/2020 19:01:55'!
test07
	| aRoom anObjetToPlaceInRoom anObjetToPlaceWhereOtherIsPlaced |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	anObjetToPlaceWhereOtherIsPlaced := PointsPortableObject named: 'juguete' weighing: 2  worth: 1. 
	
	self should: [aRoom place: anObjetToPlaceWhereOtherIsPlaced at: 0@0.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceObjectsAtSamePositionErrorMessage).
		self deny: (aRoom isEmptyAt: 0@0).
		self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
		]
	
	
	
	

	!
!RoomTest methodsFor: 'tests' stamp: 'BT 12/10/2020 19:02:18'!
test09CannotPlaceinInRoomObjectAtSamePosition
	| aRoom anObjetToPlaceInRoom anObjetToPlaceWhereOtherIsPlaced |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	anObjetToPlaceWhereOtherIsPlaced := PointsPortableObject named: 'juguete' weighing: 2  worth: 1. 
	
	self should: [aRoom place: anObjetToPlaceWhereOtherIsPlaced at: 0@0.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceObjectsAtSamePositionErrorMessage).
		self deny: (aRoom isEmptyAt: 0@0).
		self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
		]
	
	
	
	

	! !

!methodRemoval: RoomTest #test09PlaceinInRoomObjectAtSamePositionRaisesError stamp: 'BT 12/10/2020 19:02:18'!
test09PlaceinInRoomObjectAtSamePositionRaisesError
	| aRoom anObjetToPlaceInRoom anObjetToPlaceWhereOtherIsPlaced |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	anObjetToPlaceWhereOtherIsPlaced := PointsPortableObject named: 'juguete' weighing: 2  worth: 1. 
	
	self should: [aRoom place: anObjetToPlaceWhereOtherIsPlaced at: 0@0.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceObjectsAtSamePositionErrorMessage).
		self deny: (aRoom isEmptyAt: 0@0).
		self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
		]
	
	
	
	

	!
!RoomTest methodsFor: 'place objects tests' stamp: 'BT 12/10/2020 19:05:58'!
test10CannotPlaceinInRoomObjectsOutsideTheRoom
	| aRoom anObjetToPlaceInRoom anObjetToPlaceWhereOtherIsPlaced |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	aRoom place: anObjetToPlaceInRoom at: 10@10.
	
	anObjetToPlaceWhereOtherIsPlaced := PointsPortableObject named: 'juguete' weighing: 2  worth: 1. 
	
	self should: [aRoom place: anObjetToPlaceWhereOtherIsPlaced at: 0@0.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceObjectsAtSamePositionErrorMessage).
		self deny: (aRoom isEmptyAt: 0@0).
		self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
		]
	
 
	
	
	

	! !
!RoomTest methodsFor: 'place objects tests' stamp: 'BT 12/10/2020 19:07:12' prior: 50873379!
test10CannotPlaceinInRoomObjectsOutsideTheRoom
	| aRoom anObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	self should: [aRoom place: anObjetToPlaceInRoom at: 10@10.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceObjectsOutsideTheRoomErrorMessage).
		self assert: (aRoom isEmptyAt: 10@10).
		]
	
 
	
	
	

	! !
!Room methodsFor: 'object ubication' stamp: 'BT 12/10/2020 19:09:55' prior: 50872985!
place: anObjectToPlace at: aPositionInRoomWhereToPlaceObject 
	((aPositionInRoomWhereToPlaceObject x >= lenght) or:[ aPositionInRoomWhereToPlaceObject y >= high ]) ifTrue: [ self error: self class canNotPlaceObjectsOutsideTheRoomErrorMessage].
	(placedObjects includesKey: aPositionInRoomWhereToPlaceObject) ifTrue: [ self error: self class canNotPlaceObjectsAtSamePositionErrorMessage].
	placedObjects at: aPositionInRoomWhereToPlaceObject put: anObjectToPlace.
			! !

aPositionInRoomWhereToPlaceObject x >= lenght!
!Room class methodsFor: 'error messages' stamp: 'BT 12/10/2020 19:10:26'!
canNotPlaceObjectsOutsideTheRoomErrorMessage
	self shouldBeImplemented.! !
!Room class methodsFor: 'error messages' stamp: 'BT 12/10/2020 19:10:46' prior: 50873442!
canNotPlaceObjectsOutsideTheRoomErrorMessage
	^ 'Can not place object outside the room sizes!!'! !

!testRun: #RoomTest #test10CannotPlaceinInRoomObjectsOutsideTheRoom stamp: 'BT 12/10/2020 19:11:01'!
PASSED!

!testRun: #RoomTest #test01CannotCreateRoomWithHighZero stamp: 'BT 12/10/2020 19:11:01'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithLenghtZero stamp: 'BT 12/10/2020 19:11:01'!
PASSED!

!testRun: #RoomTest #test03CannotCreateRoomWithNegativeHigh stamp: 'BT 12/10/2020 19:11:01'!
PASSED!

!testRun: #RoomTest #test04CannotCreateRoomWithNegativeLenght stamp: 'BT 12/10/2020 19:11:01'!
PASSED!

!testRun: #RoomTest #test05CannotCreateRoomWithNotIntegerHigh stamp: 'BT 12/10/2020 19:11:01'!
PASSED!

!testRun: #RoomTest #test06CannotCreateRoomWithNotIntegerLenght stamp: 'BT 12/10/2020 19:11:01'!
PASSED!

!testRun: #RoomTest #test07PlacingInRoomOneObjectWorksCorrectly stamp: 'BT 12/10/2020 19:11:01'!
PASSED!

!testRun: #RoomTest #test08PlacingInRoomManyObjectsAtDifferentPositionsWorksCorrectly stamp: 'BT 12/10/2020 19:11:01'!
PASSED!

!testRun: #RoomTest #test09CannotPlaceinInRoomObjectAtSamePosition stamp: 'BT 12/10/2020 19:11:01'!
PASSED!

!testRun: #RoomTest #test10CannotPlaceinInRoomObjectsOutsideTheRoom stamp: 'BT 12/10/2020 19:11:01'!
PASSED!
!RoomTest methodsFor: 'place objects tests' stamp: 'BT 12/10/2020 19:12:11'!
test11CannotPlaceinInRoomAnObjectAtAnInvalidPosition
	| aRoom anObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	self should: [aRoom place: anObjetToPlaceInRoom at: -1@-1.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceObjectsAtInvalidPositionsErrorMessage).
		self assert: (aRoom isEmptyAt: 10@10).
		]
	
 
	
	
	

	! !
!Room methodsFor: 'object ubication' stamp: 'BT 12/10/2020 19:15:06' prior: 50873423!
place: anObjectToPlace at: aPositionInRoomWhereToPlaceObject
	((aPositionInRoomWhereToPlaceObject x < 0) or: [ aPositionInRoomWhereToPlaceObject y < 0 ]) ifTrue: [ self error: self canNotPlaceObjectsAtInvalidPositionsErrorMessage].
	((aPositionInRoomWhereToPlaceObject x >= lenght) or:[ aPositionInRoomWhereToPlaceObject y >= high ]) ifTrue: [ self error: self class canNotPlaceObjectsOutsideTheRoomErrorMessage].
	(placedObjects includesKey: aPositionInRoomWhereToPlaceObject) ifTrue: [ self error: self class canNotPlaceObjectsAtSamePositionErrorMessage].
	placedObjects at: aPositionInRoomWhereToPlaceObject put: anObjectToPlace.
			! !

aPositionInRoomWhereToPlaceObject x < 0!
!Room methodsFor: 'error messages' stamp: 'BT 12/10/2020 19:15:41'!
canNotPlaceObjectsAtInvalidPositionsErrorMessage
	self shouldBeImplemented.! !
!Room methodsFor: 'error messages' stamp: 'BT 12/10/2020 19:16:28' prior: 50873533!
canNotPlaceObjectsAtInvalidPositionsErrorMessage
	^ 'Invalid position where placing objects!!'! !

!testRun: #RoomTest #test11CannotPlaceinInRoomAnObjectAtAnInvalidPosition stamp: 'BT 12/10/2020 19:16:35'!
ERROR!

!testRun: #RoomTest #test11CannotPlaceinInRoomAnObjectAtAnInvalidPosition stamp: 'BT 12/10/2020 19:16:35'!
ERROR!
!Room methodsFor: 'object ubication' stamp: 'BT 12/10/2020 19:17:09' prior: 50873509!
place: anObjectToPlace at: aPositionInRoomWhereToPlaceObject
	((aPositionInRoomWhereToPlaceObject x < 0) or: [ aPositionInRoomWhereToPlaceObject y < 0 ]) ifTrue: [ self error: self class canNotPlaceObjectsAtInvalidPositionsErrorMessage].
	((aPositionInRoomWhereToPlaceObject x >= lenght) or:[ aPositionInRoomWhereToPlaceObject y >= high ]) ifTrue: [ self error: self class canNotPlaceObjectsOutsideTheRoomErrorMessage].
	(placedObjects includesKey: aPositionInRoomWhereToPlaceObject) ifTrue: [ self error: self class canNotPlaceObjectsAtSamePositionErrorMessage].
	placedObjects at: aPositionInRoomWhereToPlaceObject put: anObjectToPlace.
			! !
!Room class methodsFor: 'error messages' stamp: 'BT 12/10/2020 19:17:25'!
canNotPlaceObjectsAtInvalidPositionsErrorMessage
	self shouldBeImplemented.! !
!Room class methodsFor: 'error messages' stamp: 'BT 12/10/2020 19:18:05' prior: 50873575!
canNotPlaceObjectsAtInvalidPositionsErrorMessage
	^ 'Cannot place object at invalid positions, must be positive or zero coordinates'! !

!testRun: #RoomTest #test11CannotPlaceinInRoomAnObjectAtAnInvalidPosition stamp: 'BT 12/10/2020 19:18:07'!
PASSED!

!testRun: #RoomTest #test11CannotPlaceinInRoomAnObjectAtAnInvalidPosition stamp: 'BT 12/10/2020 19:18:09'!
PASSED!
!RoomTest methodsFor: 'place objects tests' stamp: 'BT 12/10/2020 19:19:24' prior: 50873491!
test11CannotPlaceinInRoomAnObjectAtAnInvalidPosition
	| aRoom anObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	self should: [aRoom place: anObjetToPlaceInRoom at: -1@-1.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceObjectsAtInvalidPositionsErrorMessage).
		self assert: (aRoom isEmptyAt: 10@10).
		]
	
 
	
	
	

	! !
!RoomTest methodsFor: 'place objects tests' stamp: 'BT 12/10/2020 19:22:28'!
test02CannotPlaceinInRoomObjectAtSamePosition
	| aRoom anObjetToPlaceInRoom aCharacterToPlaceAtAnObjectPosition |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	aCharacterToPlaceAtAnObjectPosition := PlayableCharacter named: 'Belu' using: (Backpack containingUpTo: 5 limitingPointsTo: 5) heading: #North.
	
	self should: [aRoom place: aCharacterToPlaceAtAnObjectPosition at: 0@0.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceObjectsAtSamePositionErrorMessage).
		self deny: (aRoom isEmptyAt: 0@0).
		self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
		]
	
	
	
	

	! !
!RoomTest methodsFor: 'place objects tests' stamp: 'BT 12/10/2020 19:22:56'!
test12CannotPlaceinInRoomObjectAtSamePosition
	| aRoom anObjetToPlaceInRoom aCharacterToPlaceAtAnObjectPosition |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	aCharacterToPlaceAtAnObjectPosition := PlayableCharacter named: 'Belu' using: (Backpack containingUpTo: 5 limitingPointsTo: 5) heading: #North.
	
	self should: [aRoom place: aCharacterToPlaceAtAnObjectPosition at: 0@0.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceObjectsAtSamePositionErrorMessage).
		self deny: (aRoom isEmptyAt: 0@0).
		self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
		]
	
	
	
	

	! !

!methodRemoval: RoomTest #test02CannotPlaceinInRoomObjectAtSamePosition stamp: 'BT 12/10/2020 19:22:56'!
test02CannotPlaceinInRoomObjectAtSamePosition
	| aRoom anObjetToPlaceInRoom aCharacterToPlaceAtAnObjectPosition |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	aCharacterToPlaceAtAnObjectPosition := PlayableCharacter named: 'Belu' using: (Backpack containingUpTo: 5 limitingPointsTo: 5) heading: #North.
	
	self should: [aRoom place: aCharacterToPlaceAtAnObjectPosition at: 0@0.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceObjectsAtSamePositionErrorMessage).
		self deny: (aRoom isEmptyAt: 0@0).
		self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
		]
	
	
	
	

	!

!testRun: #RoomTest #test12CannotPlaceinInRoomObjectAtSamePosition stamp: 'BT 12/10/2020 19:23:19'!
ERROR!
!RoomTest methodsFor: 'place objects tests' stamp: 'BT 12/10/2020 19:23:53' prior: 50873641!
test12CannotPlaceinInRoomObjectAtSamePosition
	| aRoom anObjetToPlaceInRoom aCharacterToPlaceAtAnObjectPosition |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	aCharacterToPlaceAtAnObjectPosition := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North .
	
	self should: [aRoom place: aCharacterToPlaceAtAnObjectPosition at: 0@0.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceObjectsAtSamePositionErrorMessage).
		self deny: (aRoom isEmptyAt: 0@0).
		self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
		]
	
	
	
	

	! !

!testRun: #RoomTest #test12CannotPlaceinInRoomObjectAtSamePosition stamp: 'BT 12/10/2020 19:23:55'!
ERROR!
!RoomTest methodsFor: 'place objects tests' stamp: 'BT 12/10/2020 19:24:20' prior: 50873700!
test12CannotPlaceinInRoomObjectAtSamePosition
	| aRoom anObjetToPlaceInRoom aCharacterToPlaceAtAnObjectPosition |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	aCharacterToPlaceAtAnObjectPosition := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #North .
	
	self should: [aRoom place: aCharacterToPlaceAtAnObjectPosition at: 0@0.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceObjectsAtSamePositionErrorMessage).
		self deny: (aRoom isEmptyAt: 0@0).
		self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
		]
	
	
	
	

	! !

!testRun: #RoomTest #test12CannotPlaceinInRoomObjectAtSamePosition stamp: 'BT 12/10/2020 19:24:21'!
PASSED!

!testRun: #RoomTest #test01CannotCreateRoomWithHighZero stamp: 'BT 12/10/2020 19:24:21'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithLenghtZero stamp: 'BT 12/10/2020 19:24:21'!
PASSED!

!testRun: #RoomTest #test03CannotCreateRoomWithNegativeHigh stamp: 'BT 12/10/2020 19:24:21'!
PASSED!

!testRun: #RoomTest #test04CannotCreateRoomWithNegativeLenght stamp: 'BT 12/10/2020 19:24:21'!
PASSED!

!testRun: #RoomTest #test05CannotCreateRoomWithNotIntegerHigh stamp: 'BT 12/10/2020 19:24:21'!
PASSED!

!testRun: #RoomTest #test06CannotCreateRoomWithNotIntegerLenght stamp: 'BT 12/10/2020 19:24:21'!
PASSED!

!testRun: #RoomTest #test07PlacingInRoomOneObjectWorksCorrectly stamp: 'BT 12/10/2020 19:24:21'!
PASSED!

!testRun: #RoomTest #test08PlacingInRoomManyObjectsAtDifferentPositionsWorksCorrectly stamp: 'BT 12/10/2020 19:24:21'!
PASSED!

!testRun: #RoomTest #test09CannotPlaceinInRoomObjectAtSamePosition stamp: 'BT 12/10/2020 19:24:21'!
PASSED!

!testRun: #RoomTest #test10CannotPlaceinInRoomObjectsOutsideTheRoom stamp: 'BT 12/10/2020 19:24:21'!
PASSED!

!testRun: #RoomTest #test11CannotPlaceinInRoomAnObjectAtAnInvalidPosition stamp: 'BT 12/10/2020 19:24:21'!
PASSED!

!testRun: #RoomTest #test12CannotPlaceinInRoomObjectAtSamePosition stamp: 'BT 12/10/2020 19:24:21'!
PASSED!
!RoomTest methodsFor: 'place objects tests' stamp: 'BT 12/10/2020 19:24:57' prior: 50873731!
test12CannotPlaceinInRoomObjectAtSamePosition
	| aRoom anObjetToPlaceInRoom aCharacterToPlaceAtAnObjectPosition |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	aCharacterToPlaceAtAnObjectPosition := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #North .
	
	self should: [aRoom place: aCharacterToPlaceAtAnObjectPosition at: 0@0.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceObjectsAtSamePositionErrorMessage).
		self deny: (aRoom isEmptyAt: 0@0).
		self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
		]
	"corrio bien de una por como lo habia hecho con objects pero lo dejo por las dudas"
	
	
	
	

	! !
!RoomTest methodsFor: 'place objects tests' stamp: 'BT 12/10/2020 19:25:22' prior: 50873803!
test12CannotPlaceinInRoomObjectAtSamePosition
	| aRoom anObjetToPlaceInRoom aCharacterToPlaceAtAnObjectPosition |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	aCharacterToPlaceAtAnObjectPosition := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #North .
	
	self should: [aRoom place: aCharacterToPlaceAtAnObjectPosition at: 0@0.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceObjectsAtSamePositionErrorMessage).
		self deny: (aRoom isEmptyAt: 0@0).
		self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
		]
	"corrio bien de una por como lo habia hecho con objects pero lo dejo por las dudas"
	
	
	
	

	! !
!Room methodsFor: 'error messages' stamp: 'BT 12/10/2020 19:26:30'!
canNotPlaceAnythingAtAnOccupiedPositionsErrorMessage
	^ 'Invalid position where placing objects!!'! !
!Room class methodsFor: 'error messages' stamp: 'BT 12/10/2020 19:26:30'!
canNotPlaceAnythingAtAnOccupiedPositionsErrorMessage
	^ 'Cannot place object at invalid positions, must be positive or zero coordinates'! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'BT 12/10/2020 19:26:30' prior: 50873596!
test11CannotPlaceinInRoomAnObjectAtAnInvalidPosition
	| aRoom anObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	self should: [aRoom place: anObjetToPlaceInRoom at: -1@-1.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceAnythingAtAnOccupiedPositionsErrorMessage).
		self assert: (aRoom isEmptyAt: 10@10).
		]
	
 
	
	
	

	! !
!Room methodsFor: 'as yet unclassified' stamp: 'BT 12/10/2020 19:26:30' prior: 50873552!
place: anObjectToPlace at: aPositionInRoomWhereToPlaceObject
	((aPositionInRoomWhereToPlaceObject x < 0) or: [ aPositionInRoomWhereToPlaceObject y < 0 ]) ifTrue: [ self error: self class canNotPlaceAnythingAtAnOccupiedPositionsErrorMessage].
	((aPositionInRoomWhereToPlaceObject x >= lenght) or:[ aPositionInRoomWhereToPlaceObject y >= high ]) ifTrue: [ self error: self class canNotPlaceObjectsOutsideTheRoomErrorMessage].
	(placedObjects includesKey: aPositionInRoomWhereToPlaceObject) ifTrue: [ self error: self class canNotPlaceObjectsAtSamePositionErrorMessage].
	placedObjects at: aPositionInRoomWhereToPlaceObject put: anObjectToPlace.
			! !

!methodRemoval: Room #canNotPlaceObjectsAtInvalidPositionsErrorMessage stamp: 'BT 12/10/2020 19:26:30'!
canNotPlaceObjectsAtInvalidPositionsErrorMessage
	^ 'Invalid position where placing objects!!'!

!methodRemoval: Room class #canNotPlaceObjectsAtInvalidPositionsErrorMessage stamp: 'BT 12/10/2020 19:26:30'!
canNotPlaceObjectsAtInvalidPositionsErrorMessage
	^ 'Cannot place object at invalid positions, must be positive or zero coordinates'!
!RoomTest methodsFor: 'place objects tests' stamp: 'BT 12/10/2020 19:40:05'!
test13PlayableCharacterMovingWorksCorrectly
	| aRoom aPlayableCharacter |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #East .
	
	aRoom placeCharacter: aPlayableCharacter at: 1@2.
	
	aPlayableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: aRoom hasAPlayingCharacter.
	self deny: aRoom isEmptyAt: 2@2.
	self assert: (aRoom atPosition: 2@1) equals: aPlayableCharacter.
	
	
	

	! !
!RoomTest methodsFor: 'place objects tests' stamp: 'BT 12/10/2020 19:42:08'!
test14CannotPlaceinInRoomObjectAtSamePosition
	| aRoom anObjetToPlaceInRoom aCharacterToPlaceAtAnObjectPosition |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	aCharacterToPlaceAtAnObjectPosition := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #North .
	
	self should: [aRoom placeCharacter: aCharacterToPlaceAtAnObjectPosition at: 0@0.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceCharacterAtAnOccupiedPositionErrorMessage).
		self deny: (aRoom isEmptyAt: 0@0).
		self deny: (aRoom hasAPlayingCharacter)
		self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
		]
	
	
	
	

	! !
!RoomTest methodsFor: 'place objects tests' stamp: 'BT 12/10/2020 19:42:55'!
test13CannotPlaceCharacterAtAnOccupiedPosition
	| aRoom anObjetToPlaceInRoom aCharacterToPlaceAtAnObjectPosition |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	aCharacterToPlaceAtAnObjectPosition := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #North .
	
	self should: [aRoom placeCharacter: aCharacterToPlaceAtAnObjectPosition at: 0@0.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceCharacterAtAnOccupiedPositionErrorMessage).
		self deny: (aRoom isEmptyAt: 0@0).
		self deny: (aRoom hasAPlayingCharacter)
		self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
		]
	
	
	
	

	! !

!methodRemoval: RoomTest #test14CannotPlaceinInRoomObjectAtSamePosition stamp: 'BT 12/10/2020 19:42:55'!
test14CannotPlaceinInRoomObjectAtSamePosition
	| aRoom anObjetToPlaceInRoom aCharacterToPlaceAtAnObjectPosition |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	aCharacterToPlaceAtAnObjectPosition := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #North .
	
	self should: [aRoom placeCharacter: aCharacterToPlaceAtAnObjectPosition at: 0@0.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceCharacterAtAnOccupiedPositionErrorMessage).
		self deny: (aRoom isEmptyAt: 0@0).
		self deny: (aRoom hasAPlayingCharacter)
		self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
		]
	
	
	
	

	!
!Room methodsFor: 'character' stamp: 'BT 12/10/2020 19:43:46'!
placeCharacter: aPlayableCharacter at: aPoint 
	self shouldBeImplemented.! !

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'BT 12/10/2020 19:46:38'!
Object subclass: #Room
	instanceVariableNames: 'high lenght object placedObjects playingCharacter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'character' stamp: 'BT 12/10/2020 19:46:36' prior: 50874044!
placeCharacter: aPlayableCharacter at: aPoint 
	(placedObjects includes: aPoint) ifTrue: [self error: self class canNotPlaceCharacterAtAnOccupiedPositionErrorMessage ].
	"Vamos a suponer que todos los objetos fueron puestos cuando se ubica al jugador. Es decir, no puedo ubicar objetos si ya est� el caracter
	en el room. Ser�a raro que aparezcan cosas de la nada. O tal vez no."
	playingCharacter := aPlayableCharacter.! !

placedObjects includes: aPoint!
!Room methodsFor: 'character' stamp: 'BT 12/10/2020 19:47:30' prior: 50874058!
placeCharacter: aPlayableCharacter at: aPoint 
	(placedObjects includesKey: aPoint) ifTrue: [self error: self class canNotPlaceCharacterAtAnOccupiedPositionErrorMessage ].
	"Vamos a suponer que todos los objetos fueron puestos cuando se ubica al jugador. Es decir, no puedo ubicar objetos si ya est� el caracter
	en el room. Ser�a raro que aparezcan cosas de la nada. O tal vez no."
	playingCharacter := aPlayableCharacter.! !
!Room class methodsFor: 'error messages' stamp: 'BT 12/10/2020 19:47:47'!
canNotPlaceCharacterAtAnOccupiedPositionErrorMessage
	self shouldBeImplemented.! !
!Room class methodsFor: 'error messages' stamp: 'BT 12/10/2020 19:48:03' prior: 50874091!
canNotPlaceCharacterAtAnOccupiedPositionErrorMessage
	^ 'Cannot place character at an occupied position!!'! !

!testRun: #RoomTest #test13CannotPlaceCharacterAtAnOccupiedPosition stamp: 'BT 12/10/2020 19:48:06'!
ERROR!
!RoomTest methodsFor: 'place objects tests' stamp: 'BT 12/10/2020 19:48:53' prior: 50873985!
test13CannotPlaceCharacterAtAnOccupiedPosition
	| aRoom anObjetToPlaceInRoom aCharacterToPlaceAtAnObjectPosition |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	aCharacterToPlaceAtAnObjectPosition := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #North .
	
	self should: [aRoom placeCharacter: aCharacterToPlaceAtAnObjectPosition at: 0@0.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceCharacterAtAnOccupiedPositionErrorMessage).
		self deny: (aRoom isEmptyAt: 0@0).
		self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
		]
	
	
	
	

	! !

!testRun: #RoomTest #test13CannotPlaceCharacterAtAnOccupiedPosition stamp: 'BT 12/10/2020 19:49:22'!
PASSED!
!RoomTest methodsFor: 'place objects tests' stamp: 'BT 12/10/2020 19:49:51'!
test14PlayableCharacterMovingWorksCorrectly
	| aRoom aPlayableCharacter |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #East .
	
	aRoom placeCharacter: aPlayableCharacter at: 1@2.
	
	aPlayableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: aRoom hasAPlayingCharacter.
	self deny: aRoom isEmptyAt: 2@2.
	self assert: (aRoom atPosition: 2@1) equals: aPlayableCharacter.
	
	
	

	! !

!methodRemoval: RoomTest #test13PlayableCharacterMovingWorksCorrectly stamp: 'BT 12/10/2020 19:49:51'!
test13PlayableCharacterMovingWorksCorrectly
	| aRoom aPlayableCharacter |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #East .
	
	aRoom placeCharacter: aPlayableCharacter at: 1@2.
	
	aPlayableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: aRoom hasAPlayingCharacter.
	self deny: aRoom isEmptyAt: 2@2.
	self assert: (aRoom atPosition: 2@1) equals: aPlayableCharacter.
	
	
	

	!
!RoomTest methodsFor: 'place objects tests' stamp: 'BT 12/10/2020 19:50:00'!
test13PlayableCharacterMovingWorksCorrectly
	| aRoom aPlayableCharacter |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #East .
	
	aRoom placeCharacter: aPlayableCharacter at: 1@2.
	
	aPlayableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: aRoom hasAPlayingCharacter.
	self deny: aRoom isEmptyAt: 2@2.
	self assert: (aRoom atPosition: 2@1) equals: aPlayableCharacter.
	
	
	

	! !

!methodRemoval: RoomTest #test13PlayableCharacterMovingWorksCorrectly stamp: 'BT 12/10/2020 19:50:04'!
test13PlayableCharacterMovingWorksCorrectly
	| aRoom aPlayableCharacter |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #East .
	
	aRoom placeCharacter: aPlayableCharacter at: 1@2.
	
	aPlayableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: aRoom hasAPlayingCharacter.
	self deny: aRoom isEmptyAt: 2@2.
	self assert: (aRoom atPosition: 2@1) equals: aPlayableCharacter.
	
	
	

	!
!RoomTest methodsFor: 'place objects tests' stamp: 'BT 12/10/2020 19:50:14' prior: 50874139!
test14PlayableCharacterMovingWorksCorrectly
	| aRoom aPlayableCharacter |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #East .
	
	aRoom placeCharacter: aPlayableCharacter at: 1@2.
	
	aPlayableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self deny: aRoom isEmptyAt: 2@2.
	self assert: (aRoom atPosition: 2@1) equals: aPlayableCharacter.
	
	
	

	! !
!RoomTest methodsFor: 'place objects tests' stamp: 'BT 12/10/2020 19:51:04' prior: 50874224!
test14PlayableCharacterMovingWorksCorrectly
	| aRoom aPlayableCharacter |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #East .
	
	aRoom placeCharacter: aPlayableCharacter at: 1@2.
	
	aPlayableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.
		
	self assert: (aPlayableCharacter isAt: 2@2 heading: #North).
	self deny: (aRoom isEmptyAt: 2@2).
	self assert: (aRoom atPosition: 2@1) equals: aPlayableCharacter.
	
	
	

	! !

!testRun: #RoomTest #test14PlayableCharacterMovingWorksCorrectly stamp: 'BT 12/10/2020 19:51:18'!
FAILURE!

aRoom isEmptyAt: 2@2!
!PlayableCharacter methodsFor: 'testing' stamp: 'BT 12/10/2020 19:53:26'!
isAt: aPosition 

	^position = aPosition! !
!Room methodsFor: 'testing' stamp: 'BT 12/10/2020 19:56:06' prior: 50872750!
isEmptyAt: aPosition 
	^ (placedObjects includesKey: aPosition) not and: [ (playingCharacter at: aPosition) not].! !

!testRun: #RoomTest #test14PlayableCharacterMovingWorksCorrectly stamp: 'BT 12/10/2020 19:56:16'!
ERROR!

playingCharacter at: aPosition!

!testRun: #RoomTest #test14PlayableCharacterMovingWorksCorrectly stamp: 'BT 12/10/2020 19:57:30'!
ERROR!
!Room methodsFor: 'testing' stamp: 'BT 12/10/2020 19:57:41' prior: 50874274!
isEmptyAt: aPosition 
	^ (placedObjects includesKey: aPosition) not and: [ (playingCharacter isAt: aPosition) not].! !

aRoom atPosition: 2@1!

placedObjects at: aPosition!
!Room methodsFor: 'accesing' stamp: 'BT 12/10/2020 20:01:36' prior: 50872650!
atPosition: aPosition 
	^ placedObjects at: aPosition.! !
!RoomTest methodsFor: 'place objects tests' stamp: 'BT 12/10/2020 20:04:27' prior: 50874244!
test14PlayableCharacterMovingWorksCorrectly
	| aRoom aPlayableCharacter |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #East .
	
	aRoom placeCharacter: aPlayableCharacter at: 1@2.
	
	aPlayableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.
		
	self assert: (aPlayableCharacter isAt: 2@2 heading: #North).
	self deny: (aRoom isEmptyAt: 2@2).
	self assert: (aRoom isPlayingCharacterAt: 2@2).
	
	
	

	! !
!RoomTest methodsFor: 'place objects tests' stamp: 'BT 12/10/2020 20:07:30' prior: 50874301!
test14PlayableCharacterMovingWorksCorrectly
	| aRoom aPlayableCharacter |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #East .
	
	aRoom placeCharacter: aPlayableCharacter at: 1@2.
	
	aPlayableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.
		
	self assert: (aPlayableCharacter isAt: 2@2 heading: #North).
	self deny: (aRoom isEmptyAt: 2@2).
	self assert: (aRoom isCharacter: aPlayableCharacter at: 2@2).
	
	
	

	! !
!Room methodsFor: 'character' stamp: 'BT 12/10/2020 20:07:59'!
isCharacter: aPlayableCharacter at: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'character' stamp: 'BT 12/10/2020 20:10:00' prior: 50874344!
isCharacter: aPlayableCharacter at: aPosition 
	(aPlayableCharacter = playingCharacter) ifTrue: [^ playingCharacter isAt: aPosition].
	self error: self class unknownPlayableCharacterErrorMessage.! !
!RoomTest methodsFor: 'character action test' stamp: 'BT 12/10/2020 20:12:40'!
test15PlayableCharacterCannotMoveOutsideTheRoom
	| aRoom aPlayableCharacter |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #East .
	
	aRoom placeCharacter: aPlayableCharacter at: 1@2.
	
	aPlayableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.
		
	self assert: (aPlayableCharacter isAt: 2@2 heading: #North).
	self deny: (aRoom isEmptyAt: 2@2).
	self assert: (aRoom isCharacter: aPlayableCharacter at: 2@2).
	
	
	

	! !
!RoomTest methodsFor: 'character action test' stamp: 'BT 12/10/2020 20:12:59'!
test145PlayableCharacterMovingWorksCorrectly
	| aRoom aPlayableCharacter |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #East .
	
	aRoom placeCharacter: aPlayableCharacter at: 1@2.
	
	aPlayableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.
		
	self assert: (aPlayableCharacter isAt: 2@2 heading: #North).
	self deny: (aRoom isEmptyAt: 2@2).
	self assert: (aRoom isCharacter: aPlayableCharacter at: 2@2).
	
	
	

	! !

!methodRemoval: RoomTest #test14PlayableCharacterMovingWorksCorrectly stamp: 'BT 12/10/2020 20:12:59'!
test14PlayableCharacterMovingWorksCorrectly
	| aRoom aPlayableCharacter |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #East .
	
	aRoom placeCharacter: aPlayableCharacter at: 1@2.
	
	aPlayableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.
		
	self assert: (aPlayableCharacter isAt: 2@2 heading: #North).
	self deny: (aRoom isEmptyAt: 2@2).
	self assert: (aRoom isCharacter: aPlayableCharacter at: 2@2).
	
	
	

	!
!RoomTest methodsFor: 'character action test' stamp: 'BT 12/10/2020 20:13:07'!
test15PlayableCharacterMovingWorksCorrectly
	| aRoom aPlayableCharacter |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #East .
	
	aRoom placeCharacter: aPlayableCharacter at: 1@2.
	
	aPlayableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.
		
	self assert: (aPlayableCharacter isAt: 2@2 heading: #North).
	self deny: (aRoom isEmptyAt: 2@2).
	self assert: (aRoom isCharacter: aPlayableCharacter at: 2@2).
	
	
	

	! !

!methodRemoval: RoomTest #test145PlayableCharacterMovingWorksCorrectly stamp: 'BT 12/10/2020 20:13:07'!
test145PlayableCharacterMovingWorksCorrectly
	| aRoom aPlayableCharacter |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #East .
	
	aRoom placeCharacter: aPlayableCharacter at: 1@2.
	
	aPlayableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.
		
	self assert: (aPlayableCharacter isAt: 2@2 heading: #North).
	self deny: (aRoom isEmptyAt: 2@2).
	self assert: (aRoom isCharacter: aPlayableCharacter at: 2@2).
	
	
	

	!
!RoomTest methodsFor: 'character action test' stamp: 'BT 12/10/2020 20:14:33' prior: 50874107!
test13CannotPlaceCharacterAtAnOccupiedPosition
	| aRoom anObjetToPlaceInRoom aCharacterToPlaceAtAnObjectPosition |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	aCharacterToPlaceAtAnObjectPosition := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #North .
	
	self should: [aRoom placeCharacter: aCharacterToPlaceAtAnObjectPosition at: 0@0.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceCharacterAtAnOccupiedPositionErrorMessage).
		self deny: (aRoom isEmptyAt: 0@0).
		self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
		]
	
	
	
	

	! !
!RoomTest methodsFor: 'character action test' stamp: 'BT 12/10/2020 20:15:14' prior: 50874468!
test13CannotPlaceCharacterAtAnOccupiedPosition
	| aRoom anObjetToPlaceInRoom aCharacterToPlaceAtAnObjectPosition |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	aCharacterToPlaceAtAnObjectPosition := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #North .
	
	self should: [aRoom placeCharacter: aCharacterToPlaceAtAnObjectPosition at: 0@0.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceCharacterAtAnOccupiedPositionErrorMessage).
		self deny: (aRoom isEmptyAt: 0@0).
		self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
		]
	
	
	
	

	! !
!RoomTest methodsFor: 'character action test' stamp: 'BT 12/10/2020 20:17:45' prior: 50874497!
test13CannotPlaceCharacterAtAnOccupiedPosition
	| aRoom anObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	self should: [PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 0@0 heading: #North in: aRoom.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceCharacterAtAnOccupiedPositionErrorMessage).
		self deny: (aRoom isEmptyAt: 0@0).
		self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
		]
	
	
	
	

	! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'BT 12/10/2020 20:18:20'!
named: aString using: aBackpack at: aPoint heading: aSymbol in: aRoom 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString using: aBackpack at: aPoint heading: aSymbol in: aRoom ! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'BT 12/10/2020 20:18:51' prior: 50874550!
named: aString using: aBackpack at: aPoint heading: aSymbol in: aRoom 
	^self new initializeNamed: aString using: aBackpack at: aPoint heading: aSymbol in: aRoom. ! !

!classDefinition: #PlayableCharacter category: 'ISW1-2020-2C-2doParcial' stamp: 'BT 12/10/2020 20:19:14'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name string'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #PlayableCharacter category: 'ISW1-2020-2C-2doParcial' stamp: 'BT 12/10/2020 20:19:14'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name string point'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #PlayableCharacter category: 'ISW1-2020-2C-2doParcial' stamp: 'BT 12/10/2020 20:19:14'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name string point symbol'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #PlayableCharacter category: 'ISW1-2020-2C-2doParcial' stamp: 'BT 12/10/2020 20:19:14'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name string point symbol room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacter methodsFor: 'initialization' stamp: 'BT 12/10/2020 20:19:14'!
initializeNamed: aString using: aBackpack at: aPoint heading: aSymbol in: aRoom 
	self shouldBeImplemented.
	string := aString.
	backpack := aBackpack.
	point := aPoint.
	symbol := aSymbol.
	room := aRoom.! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'BT 12/10/2020 20:20:14' prior: 50874608!
initializeNamed: aString using: aBackpack at: aPoint heading: aSymbol in: aRoom 
	aRoom placeCharacter: self at: 1.
	string := aString.
	backpack := aBackpack.
	point := aPoint.
	symbol := aSymbol.
	room := aRoom.! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'BT 12/10/2020 20:20:22' prior: 50874618!
initializeNamed: aString using: aBackpack at: aPosition heading: aSymbol in: aRoom 
	aRoom placeCharacter: self at: 1.
	string := aString.
	backpack := aBackpack.
	point := aPosition.
	symbol := aSymbol.
	room := aRoom.! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'BT 12/10/2020 20:20:28' prior: 50874628!
initializeNamed: aName using: aBackpack at: aPosition heading: aSymbol in: aRoom 
	aRoom placeCharacter: self at: 1.
	string := aName.
	backpack := aBackpack.
	point := aPosition.
	symbol := aSymbol.
	room := aRoom.! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'BT 12/10/2020 20:20:40' prior: 50874638!
initializeNamed: aName using: aBackpack at: aPosition heading: aCharacterHeading in: aRoom 
	aRoom placeCharacter: self at: 1.
	string := aName.
	backpack := aBackpack.
	point := aPosition.
	symbol := aCharacterHeading.
	room := aRoom.! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'BT 12/10/2020 20:21:00' prior: 50874648!
initializeNamed: aName using: aBackpack at: aPosition heading: aCharacterHeading in: aRoom 
	
	aRoom placeCharacter: self at: aPosition.
	
	string := aName.
	backpack := aBackpack.
	point := aPosition.
	symbol := aCharacterHeading.
	room := aRoom.! !

!testRun: #RoomTest #test13CannotPlaceCharacterAtAnOccupiedPosition stamp: 'BT 12/10/2020 20:21:30'!
PASSED!
!RoomTest methodsFor: 'character action test' stamp: 'BT 12/10/2020 20:22:24'!
test14CannotPlaceCharacterAtAnInvalidPosition
	| aRoom anObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	self should: [PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 0@0 heading: #North in: aRoom.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceCharacterAtAnOccupiedPositionErrorMessage).
		self deny: (aRoom isEmptyAt: 0@0).
		self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
		]
	
	
	
	

	! !
!RoomTest methodsFor: 'character action test' stamp: 'BT 12/10/2020 20:22:41' prior: 50874673!
test14CannotPlaceCharacterAtAnInvalidPosition
	| aRoom anObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	self should: [PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 10@10 heading: #North in: aRoom.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceCharacterAtAnOccupiedPositionErrorMessage).
		self deny: (aRoom isEmptyAt: 0@0).
		self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
		]
	
	
	
	

	! !

!testRun: #RoomTest #test14CannotPlaceCharacterAtAnInvalidPosition stamp: 'BT 12/10/2020 20:22:49'!
FAILURE!
!RoomTest methodsFor: 'character action test' stamp: 'BT 12/10/2020 20:23:02' prior: 50874698!
test14CannotPlaceCharacterAtAnInvalidPosition
	| aRoom anObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	self should: [PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 10@10 heading: #North in: aRoom.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceCharacterAtAnInvalidPositionErrorMessage).
		self deny: (aRoom isEmptyAt: 0@0).
		self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
		]
	
	
	
	

	! !

!testRun: #RoomTest #test14CannotPlaceCharacterAtAnInvalidPosition stamp: 'BT 12/10/2020 20:23:10'!
FAILURE!
!RoomTest methodsFor: 'character action test' stamp: 'BT 12/10/2020 20:24:41' prior: 50874726!
test14CannotPlaceCharacterAtAnInvalidPosition
	| aRoom  |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	self should: [PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 10@10 heading: #North in: aRoom.] 
	raise: Error 
	withMessageText: Room canNotPlaceCharacterAtAnInvalidPositionErrorMessage.
	
	
	
	
	

	! !
!Room class methodsFor: 'error messages' stamp: 'BT 12/10/2020 20:25:13'!
canNotPlaceCharacterAtAnInvalidPositionErrorMessage
	self shouldBeImplemented.! !
!Room class methodsFor: 'error messages' stamp: 'BT 12/10/2020 20:25:31' prior: 50874768!
canNotPlaceCharacterAtAnInvalidPositionErrorMessage
	^ 'can not place character at an invalid position'! !
!Room methodsFor: 'placing' stamp: 'BT 12/10/2020 20:28:11'!
assertValidPositionInRoom: aPositionInRoomWhereToPlaceObject

	((aPositionInRoomWhereToPlaceObject x < 0) or: [ aPositionInRoomWhereToPlaceObject y < 0 ]) ifTrue: [ self error: self class canNotPlaceAnythingAtAnOccupiedPositionsErrorMessage].
	((aPositionInRoomWhereToPlaceObject x >= lenght) or:[ aPositionInRoomWhereToPlaceObject y >= high ]) ifTrue: [ self error: self class canNotPlaceObjectsOutsideTheRoomErrorMessage]! !
!Room methodsFor: 'placing' stamp: 'BT 12/10/2020 20:28:11' prior: 50873897!
place: anObjectToPlace at: aPositionInRoomWhereToPlaceObject
	self assertValidPositionInRoom: aPositionInRoomWhereToPlaceObject.
	(placedObjects includesKey: aPositionInRoomWhereToPlaceObject) ifTrue: [ self error: self class canNotPlaceObjectsAtSamePositionErrorMessage].
	placedObjects at: aPositionInRoomWhereToPlaceObject put: anObjectToPlace.
			! !
!Room methodsFor: 'placing' stamp: 'BT 12/10/2020 20:28:59'!
assertNotAlreadyOccupiedPosition: aPositionInRoomWhereToPlaceObject

	^ (placedObjects includesKey: aPositionInRoomWhereToPlaceObject) ifTrue: [ self error: self class canNotPlaceObjectsAtSamePositionErrorMessage]! !
!Room methodsFor: 'placing' stamp: 'BT 12/10/2020 20:28:59' prior: 50874796!
place: anObjectToPlace at: aPositionInRoomWhereToPlaceObject
	self assertValidPositionInRoom: aPositionInRoomWhereToPlaceObject.
	self assertNotAlreadyOccupiedPosition: aPositionInRoomWhereToPlaceObject.
	placedObjects at: aPositionInRoomWhereToPlaceObject put: anObjectToPlace.
			! !
!Room methodsFor: 'character' stamp: 'BT 12/10/2020 20:31:18' prior: 50874075!
placeCharacter: aPlayableCharacter at: aPoint 
	self assertValidPositionInRoom: aPoint.
	(placedObjects includesKey: aPoint) ifTrue: [self error: self class canNotPlaceCharacterAtAnOccupiedPositionErrorMessage ].
	"Vamos a suponer que todos los objetos fueron puestos cuando se ubica al jugador. Es decir, no puedo ubicar objetos si ya est� el caracter
	en el room. Ser�a raro que aparezcan cosas de la nada. O tal vez no."
	playingCharacter := aPlayableCharacter.! !
!Room methodsFor: 'character' stamp: 'BT 12/10/2020 20:31:23' prior: 50874831!
placeCharacter: aPlayableCharacter at: aPosition 
	self assertValidPositionInRoom: aPosition.
	(placedObjects includesKey: aPosition) ifTrue: [self error: self class canNotPlaceCharacterAtAnOccupiedPositionErrorMessage ].
	"Vamos a suponer que todos los objetos fueron puestos cuando se ubica al jugador. Es decir, no puedo ubicar objetos si ya est� el caracter
	en el room. Ser�a raro que aparezcan cosas de la nada. O tal vez no."
	playingCharacter := aPlayableCharacter.! !
!Room methodsFor: 'assertions' stamp: 'BT 12/10/2020 20:32:35' prior: 50874780!
assertValidPositionInRoom: aPositionInRoomWhereToPlaceObject

	((aPositionInRoomWhereToPlaceObject x < 0) or: [ aPositionInRoomWhereToPlaceObject y < 0 ]) ifTrue: [ self error: self class canNotPlaceCharacterAtAnInvalidPositionErrorMessage ].	
	((aPositionInRoomWhereToPlaceObject x >= lenght) or:[ aPositionInRoomWhereToPlaceObject y >= high ]) ifTrue: [ self error: self class canNotPlaceObjectsOutsideTheRoomErrorMessage]! !
!Room methodsFor: 'assertions' stamp: 'BT 12/10/2020 20:32:46' prior: 50874867!
assertValidPositionInRoom: aPositionInRoomWhereToPlaceObject

	((aPositionInRoomWhereToPlaceObject x < 0) or: [ aPositionInRoomWhereToPlaceObject y < 0 ]) ifTrue: [ self error: self class canNotPlaceAnythingAtAnInvalidPositionErrorMessage ].	
	((aPositionInRoomWhereToPlaceObject x >= lenght) or:[ aPositionInRoomWhereToPlaceObject y >= high ]) ifTrue: [ self error: self class canNotPlaceObjectsOutsideTheRoomErrorMessage]! !
!Room methodsFor: 'error messages' stamp: 'BT 12/10/2020 20:33:01'!
canNotPlaceAnythingAtAnInvalidPositionErrorMessage
	^ 'Invalid position where placing objects!!'! !
!Room class methodsFor: 'error messages' stamp: 'BT 12/10/2020 20:33:01'!
canNotPlaceAnythingAtAnInvalidPositionErrorMessage
	^ 'Cannot place object at invalid positions, must be positive or zero coordinates'! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'BT 12/10/2020 20:33:01' prior: 50873878!
test11CannotPlaceinInRoomAnObjectAtAnInvalidPosition
	| aRoom anObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	self should: [aRoom place: anObjetToPlaceInRoom at: -1@-1.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceAnythingAtAnInvalidPositionErrorMessage).
		self assert: (aRoom isEmptyAt: 10@10).
		]
	
 
	
	
	

	! !

!methodRemoval: Room #canNotPlaceAnythingAtAnOccupiedPositionsErrorMessage stamp: 'BT 12/10/2020 20:33:01'!
canNotPlaceAnythingAtAnOccupiedPositionsErrorMessage
	^ 'Invalid position where placing objects!!'!

!methodRemoval: Room class #canNotPlaceAnythingAtAnOccupiedPositionsErrorMessage stamp: 'BT 12/10/2020 20:33:01'!
canNotPlaceAnythingAtAnOccupiedPositionsErrorMessage
	^ 'Cannot place object at invalid positions, must be positive or zero coordinates'!

!methodRemoval: Room class #canNotPlaceCharacterAtAnInvalidPositionErrorMessage stamp: 'BT 12/10/2020 20:33:16'!
canNotPlaceCharacterAtAnInvalidPositionErrorMessage
	^ 'can not place character at an invalid position'!
!RoomTest methodsFor: 'character action test' stamp: 'BT 12/10/2020 20:33:26' prior: 50874754!
test14CannotPlaceCharacterAtAnInvalidPosition
	| aRoom  |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	self should: [PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 10@10 heading: #North in: aRoom.] 
	raise: Error 
	withMessageText: Room canNotPlaceAnythingAtAnInvalidPositionErrorMessage .
	
	
	
	
	

	! !

!testRun: #RoomTest #test14CannotPlaceCharacterAtAnInvalidPosition stamp: 'BT 12/10/2020 20:33:36'!
FAILURE!

!testRun: #RoomTest #test14CannotPlaceCharacterAtAnInvalidPosition stamp: 'BT 12/10/2020 20:33:36'!
FAILURE!
!Room class methodsFor: 'error messages' stamp: 'BT 12/10/2020 20:34:36'!
canNotPlaceOutsideTheRoomErrorMessage
	^ 'Can not place object outside the room sizes!!'! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'BT 12/10/2020 20:34:36' prior: 50873405!
test10CannotPlaceinInRoomObjectsOutsideTheRoom
	| aRoom anObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	self should: [aRoom place: anObjetToPlaceInRoom at: 10@10.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceOutsideTheRoomErrorMessage).
		self assert: (aRoom isEmptyAt: 10@10).
		]
	
 
	
	
	

	! !
!Room methodsFor: 'as yet unclassified' stamp: 'BT 12/10/2020 20:34:36' prior: 50874883!
assertValidPositionInRoom: aPositionInRoomWhereToPlaceObject

	((aPositionInRoomWhereToPlaceObject x < 0) or: [ aPositionInRoomWhereToPlaceObject y < 0 ]) ifTrue: [ self error: self class canNotPlaceAnythingAtAnInvalidPositionErrorMessage ].	
	((aPositionInRoomWhereToPlaceObject x >= lenght) or:[ aPositionInRoomWhereToPlaceObject y >= high ]) ifTrue: [ self error: self class canNotPlaceOutsideTheRoomErrorMessage]! !

!methodRemoval: Room class #canNotPlaceObjectsOutsideTheRoomErrorMessage stamp: 'BT 12/10/2020 20:34:36'!
canNotPlaceObjectsOutsideTheRoomErrorMessage
	^ 'Can not place object outside the room sizes!!'!
!RoomTest methodsFor: 'character action test' stamp: 'BT 12/10/2020 20:34:49' prior: 50874953!
test14CannotPlaceCharacterAtAnInvalidPosition
	| aRoom  |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	self should: [PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 10@10 heading: #North in: aRoom.] 
	raise: Error 
	withMessageText: Room canNotPlaceOutsideTheRoomErrorMessage.
	
	
	
	
	

	! !

!testRun: #RoomTest #test14CannotPlaceCharacterAtAnInvalidPosition stamp: 'BT 12/10/2020 20:34:53'!
PASSED!

!testRun: #RoomTest #test13CannotPlaceCharacterAtAnOccupiedPosition stamp: 'BT 12/10/2020 20:34:56'!
PASSED!

!testRun: #RoomTest #test01CannotCreateRoomWithHighZero stamp: 'BT 12/10/2020 20:34:59'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithLenghtZero stamp: 'BT 12/10/2020 20:34:59'!
PASSED!

!testRun: #RoomTest #test03CannotCreateRoomWithNegativeHigh stamp: 'BT 12/10/2020 20:34:59'!
PASSED!

!testRun: #RoomTest #test04CannotCreateRoomWithNegativeLenght stamp: 'BT 12/10/2020 20:34:59'!
PASSED!

!testRun: #RoomTest #test05CannotCreateRoomWithNotIntegerHigh stamp: 'BT 12/10/2020 20:34:59'!
PASSED!

!testRun: #RoomTest #test06CannotCreateRoomWithNotIntegerLenght stamp: 'BT 12/10/2020 20:34:59'!
PASSED!

!testRun: #RoomTest #test07PlacingInRoomOneObjectWorksCorrectly stamp: 'BT 12/10/2020 20:35:02'!
PASSED!

!testRun: #RoomTest #test08PlacingInRoomManyObjectsAtDifferentPositionsWorksCorrectly stamp: 'BT 12/10/2020 20:35:02'!
PASSED!

!testRun: #RoomTest #test09CannotPlaceinInRoomObjectAtSamePosition stamp: 'BT 12/10/2020 20:35:02'!
PASSED!

!testRun: #RoomTest #test10CannotPlaceinInRoomObjectsOutsideTheRoom stamp: 'BT 12/10/2020 20:35:02'!
ERROR!

!testRun: #RoomTest #test11CannotPlaceinInRoomAnObjectAtAnInvalidPosition stamp: 'BT 12/10/2020 20:35:02'!
ERROR!

!testRun: #RoomTest #test12CannotPlaceinInRoomObjectAtSamePosition stamp: 'BT 12/10/2020 20:35:02'!
PASSED!

!testRun: #RoomTest #test10CannotPlaceinInRoomObjectsOutsideTheRoom stamp: 'BT 12/10/2020 20:35:23'!
ERROR!

!testRun: #RoomTest #test11CannotPlaceinInRoomAnObjectAtAnInvalidPosition stamp: 'BT 12/10/2020 20:35:47'!
ERROR!

!testRun: #RoomTest #test14CannotPlaceCharacterAtAnInvalidPosition stamp: 'BT 12/10/2020 20:36:10'!
PASSED!

!testRun: #RoomTest #test15PlayableCharacterCannotMoveOutsideTheRoom stamp: 'BT 12/10/2020 20:36:16'!
PASSED!

!testRun: #RoomTest #test15PlayableCharacterMovingWorksCorrectly stamp: 'BT 12/10/2020 20:36:24'!
PASSED!
!RoomTest methodsFor: 'character action test' stamp: 'BT 12/10/2020 20:36:31'!
test16PlayableCharacterMovingWorksCorrectly
	| aRoom aPlayableCharacter |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #East .
	
	aRoom placeCharacter: aPlayableCharacter at: 1@2.
	
	aPlayableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.
		
	self assert: (aPlayableCharacter isAt: 2@2 heading: #North).
	self deny: (aRoom isEmptyAt: 2@2).
	self assert: (aRoom isCharacter: aPlayableCharacter at: 2@2).
	
	
	

	! !

!methodRemoval: RoomTest #test15PlayableCharacterMovingWorksCorrectly stamp: 'BT 12/10/2020 20:36:31'!
test15PlayableCharacterMovingWorksCorrectly
	| aRoom aPlayableCharacter |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #East .
	
	aRoom placeCharacter: aPlayableCharacter at: 1@2.
	
	aPlayableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.
		
	self assert: (aPlayableCharacter isAt: 2@2 heading: #North).
	self deny: (aRoom isEmptyAt: 2@2).
	self assert: (aRoom isCharacter: aPlayableCharacter at: 2@2).
	
	
	

	!
!Room methodsFor: 'character' stamp: 'BT 12/10/2020 20:37:16' prior: 50874349!
isCharacter: aPlayableCharacter at: aPosition 
	(aPlayableCharacter = playingCharacter) ifTrue: [^ playingCharacter isAt: aPosition].
	! !
!Room methodsFor: 'character' stamp: 'BT 12/10/2020 20:37:23' prior: 50875143!
isCharacter: aPlayableCharacter at: aPosition 
	(aPlayableCharacter = playingCharacter) ifTrue: [^ playingCharacter isAt: aPosition].
	"self error: self class unknownPlayableCharacterErrorMessage."! !
!Room methodsFor: 'testing' stamp: 'BT 12/10/2020 20:41:22' prior: 50874288!
isEmptyAt: aPosition 
	^ (placedObjects includesKey: aPosition).! !
!Room methodsFor: 'testing' stamp: 'BT 12/10/2020 20:42:13'!
hasAnObjectAt: aPosition 
	^ (placedObjects includesKey: aPosition).! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'BT 12/10/2020 20:42:13' prior: 50875099!
test16PlayableCharacterMovingWorksCorrectly
	| aRoom aPlayableCharacter |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #East .
	
	aRoom placeCharacter: aPlayableCharacter at: 1@2.
	
	aPlayableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.
		
	self assert: (aPlayableCharacter isAt: 2@2 heading: #North).
	self deny: (aRoom hasAnObjectAt: 2@2).
	self assert: (aRoom isCharacter: aPlayableCharacter at: 2@2).
	
	
	

	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'BT 12/10/2020 20:42:13' prior: 50873834!
test12CannotPlaceinInRoomObjectAtSamePosition
	| aRoom anObjetToPlaceInRoom aCharacterToPlaceAtAnObjectPosition |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	aCharacterToPlaceAtAnObjectPosition := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #North .
	
	self should: [aRoom place: aCharacterToPlaceAtAnObjectPosition at: 0@0.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceObjectsAtSamePositionErrorMessage).
		self deny: (aRoom hasAnObjectAt: 0@0).
		self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
		]
	"corrio bien de una por como lo habia hecho con objects pero lo dejo por las dudas"
	
	
	
	

	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'BT 12/10/2020 20:42:13' prior: 50874526!
test13CannotPlaceCharacterAtAnOccupiedPosition
	| aRoom anObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	self should: [PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 0@0 heading: #North in: aRoom.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceCharacterAtAnOccupiedPositionErrorMessage).
		self deny: (aRoom hasAnObjectAt: 0@0).
		self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
		]
	
	
	
	

	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'BT 12/10/2020 20:42:13' prior: 50874913!
test11CannotPlaceinInRoomAnObjectAtAnInvalidPosition
	| aRoom anObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	self should: [aRoom place: anObjetToPlaceInRoom at: -1@-1.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceAnythingAtAnInvalidPositionErrorMessage).
		self assert: (aRoom hasAnObjectAt: 10@10).
		]
	
 
	
	
	

	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'BT 12/10/2020 20:42:13' prior: 50874980!
test10CannotPlaceinInRoomObjectsOutsideTheRoom
	| aRoom anObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	self should: [aRoom place: anObjetToPlaceInRoom at: 10@10.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceOutsideTheRoomErrorMessage).
		self assert: (aRoom hasAnObjectAt: 10@10).
		]
	
 
	
	
	

	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'BT 12/10/2020 20:42:13' prior: 50873235!
test08PlacingInRoomManyObjectsAtDifferentPositionsWorksCorrectly
	| aRoom anObjetToPlaceInRoom otherObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	otherObjetToPlaceInRoom := PointsPortableObject named: 'juguete' weighing: 2  worth: 1. 
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	aRoom place: otherObjetToPlaceInRoom at: 1@1.
	
	self deny: (aRoom hasAnObjectAt: 1@1).
	self deny: (aRoom hasAnObjectAt: 0@0).
	self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
	self assert: (aRoom atPosition: 1@1) equals: otherObjetToPlaceInRoom.
	
	

	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'BT 12/10/2020 20:42:13' prior: 50873327!
test09CannotPlaceinInRoomObjectAtSamePosition
	| aRoom anObjetToPlaceInRoom anObjetToPlaceWhereOtherIsPlaced |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	anObjetToPlaceWhereOtherIsPlaced := PointsPortableObject named: 'juguete' weighing: 2  worth: 1. 
	
	self should: [aRoom place: anObjetToPlaceWhereOtherIsPlaced at: 0@0.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceObjectsAtSamePositionErrorMessage).
		self deny: (aRoom hasAnObjectAt: 0@0).
		self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
		]
	
	
	
	

	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'BT 12/10/2020 20:42:13' prior: 50873194!
test07PlacingInRoomOneObjectWorksCorrectly
	| aRoom anObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. .
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	self deny: (aRoom hasAnObjectAt: 0@0).
	self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
	
	
	

	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'BT 12/10/2020 20:42:13' prior: 50874358!
test15PlayableCharacterCannotMoveOutsideTheRoom
	| aRoom aPlayableCharacter |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #East .
	
	aRoom placeCharacter: aPlayableCharacter at: 1@2.
	
	aPlayableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.
		
	self assert: (aPlayableCharacter isAt: 2@2 heading: #North).
	self deny: (aRoom hasAnObjectAt: 2@2).
	self assert: (aRoom isCharacter: aPlayableCharacter at: 2@2).
	
	
	

	! !

!methodRemoval: Room #isEmptyAt: stamp: 'BT 12/10/2020 20:42:13'!
isEmptyAt: aPosition 
	^ (placedObjects includesKey: aPosition).!
!RoomTest methodsFor: 'character action test' stamp: 'BT 12/10/2020 20:42:34' prior: 50875170!
test16PlayableCharacterMovingWorksCorrectly
	| aRoom aPlayableCharacter |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #East .
	
	aRoom placeCharacter: aPlayableCharacter at: 1@2.
	
	aPlayableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.
		
	self assert: (aPlayableCharacter isAt: 2@2 heading: #North).
	self assert: (aRoom isCharacter: aPlayableCharacter at: 2@2).
	
	
	

	! !
!RoomTest methodsFor: 'character action test' stamp: 'BT 12/10/2020 20:42:45' prior: 50875350!
test15PlayableCharacterCannotMoveOutsideTheRoom
	| aRoom aPlayableCharacter |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #East .
	
	aRoom placeCharacter: aPlayableCharacter at: 1@2.
	
	aPlayableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.
		
	self assert: (aPlayableCharacter isAt: 2@2 heading: #North).

	self assert: (aRoom isCharacter: aPlayableCharacter at: 2@2).
	
	
	

	! !
!RoomTest methodsFor: 'character action test' stamp: 'BT 12/10/2020 20:42:47' prior: 50875398!
test15PlayableCharacterCannotMoveOutsideTheRoom
	| aRoom aPlayableCharacter |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #East .
	
	aRoom placeCharacter: aPlayableCharacter at: 1@2.
	
	aPlayableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.
		
	self assert: (aPlayableCharacter isAt: 2@2 heading: #North).
	self assert: (aRoom isCharacter: aPlayableCharacter at: 2@2).
	
	
	

	! !
!RoomTest methodsFor: 'character action test' stamp: 'BT 12/10/2020 20:43:11' prior: 50875223!
test13CannotPlaceCharacterAtAnOccupiedPosition
	| aRoom anObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	self should: [PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 0@0 heading: #North in: aRoom.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceCharacterAtAnOccupiedPositionErrorMessage).
		self assert: (aRoom hasAnObjectAt: 0@0).
		self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
		]
	
	
	
	

	! !

!testRun: #RoomTest #test13CannotPlaceCharacterAtAnOccupiedPosition stamp: 'BT 12/10/2020 20:43:20'!
PASSED!

!testRun: #RoomTest #test14CannotPlaceCharacterAtAnInvalidPosition stamp: 'BT 12/10/2020 20:43:20'!
PASSED!

!testRun: #RoomTest #test15PlayableCharacterCannotMoveOutsideTheRoom stamp: 'BT 12/10/2020 20:43:20'!
PASSED!

!testRun: #RoomTest #test16PlayableCharacterMovingWorksCorrectly stamp: 'BT 12/10/2020 20:43:20'!
PASSED!

!testRun: #RoomTest #test01CannotCreateRoomWithHighZero stamp: 'BT 12/10/2020 20:43:22'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithLenghtZero stamp: 'BT 12/10/2020 20:43:22'!
PASSED!

!testRun: #RoomTest #test03CannotCreateRoomWithNegativeHigh stamp: 'BT 12/10/2020 20:43:22'!
PASSED!

!testRun: #RoomTest #test04CannotCreateRoomWithNegativeLenght stamp: 'BT 12/10/2020 20:43:22'!
PASSED!

!testRun: #RoomTest #test05CannotCreateRoomWithNotIntegerHigh stamp: 'BT 12/10/2020 20:43:22'!
PASSED!

!testRun: #RoomTest #test06CannotCreateRoomWithNotIntegerLenght stamp: 'BT 12/10/2020 20:43:22'!
PASSED!

!testRun: #RoomTest #test07PlacingInRoomOneObjectWorksCorrectly stamp: 'BT 12/10/2020 20:43:24'!
FAILURE!

!testRun: #RoomTest #test08PlacingInRoomManyObjectsAtDifferentPositionsWorksCorrectly stamp: 'BT 12/10/2020 20:43:24'!
FAILURE!

!testRun: #RoomTest #test09CannotPlaceinInRoomObjectAtSamePosition stamp: 'BT 12/10/2020 20:43:24'!
FAILURE!

!testRun: #RoomTest #test10CannotPlaceinInRoomObjectsOutsideTheRoom stamp: 'BT 12/10/2020 20:43:24'!
FAILURE!

!testRun: #RoomTest #test11CannotPlaceinInRoomAnObjectAtAnInvalidPosition stamp: 'BT 12/10/2020 20:43:24'!
FAILURE!

!testRun: #RoomTest #test12CannotPlaceinInRoomObjectAtSamePosition stamp: 'BT 12/10/2020 20:43:24'!
FAILURE!
!RoomTest methodsFor: 'place objects tests' stamp: 'BT 12/10/2020 20:43:34' prior: 50875335!
test07PlacingInRoomOneObjectWorksCorrectly
	| aRoom anObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. .
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
	
	
	

	! !
!RoomTest methodsFor: 'place objects tests' stamp: 'BT 12/10/2020 20:44:10' prior: 50875285!
test08PlacingInRoomManyObjectsAtDifferentPositionsWorksCorrectly
	| aRoom anObjetToPlaceInRoom otherObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	otherObjetToPlaceInRoom := PointsPortableObject named: 'juguete' weighing: 2  worth: 1. 
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	aRoom place: otherObjetToPlaceInRoom at: 1@1.
	
	self assert: (aRoom hasAnObjectAt: 1@1).
	self assert: (aRoom hasAnObjectAt: 0@0).
	self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
	self assert: (aRoom atPosition: 1@1) equals: otherObjetToPlaceInRoom.
	
	

	! !
!RoomTest methodsFor: 'place objects tests' stamp: 'BT 12/10/2020 20:44:49' prior: 50875519!
test07PlacingInRoomOneObjectWorksCorrectly
	| aRoom anObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. .
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	self assert: (aRoom hasAnObjectAt: 0@0).
	self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
	
	
	

	! !
!RoomTest methodsFor: 'place objects tests' stamp: 'BT 12/10/2020 20:45:12' prior: 50875309!
test09CannotPlaceinInRoomObjectAtSamePosition
	| aRoom anObjetToPlaceInRoom anObjetToPlaceWhereOtherIsPlaced |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	anObjetToPlaceWhereOtherIsPlaced := PointsPortableObject named: 'juguete' weighing: 2  worth: 1. 
	
	self should: [aRoom place: anObjetToPlaceWhereOtherIsPlaced at: 0@0.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceObjectsAtSamePositionErrorMessage).
		self assert: (aRoom hasAnObjectAt: 0@0).
		self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
		]
	
	
	
	

	! !
!RoomTest methodsFor: 'place objects tests' stamp: 'BT 12/10/2020 20:45:25' prior: 50875267!
test10CannotPlaceinInRoomObjectsOutsideTheRoom
	| aRoom anObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	self should: [aRoom place: anObjetToPlaceInRoom at: 10@10.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceOutsideTheRoomErrorMessage).
		self deny: (aRoom hasAnObjectAt: 10@10).
		]
	
 
	
	
	

	! !
!RoomTest methodsFor: 'place objects tests' stamp: 'BT 12/10/2020 20:45:32' prior: 50875248!
test11CannotPlaceinInRoomAnObjectAtAnInvalidPosition
	| aRoom anObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	self should: [aRoom place: anObjetToPlaceInRoom at: -1@-1.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceAnythingAtAnInvalidPositionErrorMessage).
		self deny: (aRoom hasAnObjectAt: 10@10).
		]
	
 
	
	
	

	! !
!RoomTest methodsFor: 'place objects tests' stamp: 'BT 12/10/2020 20:45:57' prior: 50875192!
test12CannotPlaceinInRoomObjectAtSamePosition
	| aRoom anObjetToPlaceInRoom aCharacterToPlaceAtAnObjectPosition |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	aCharacterToPlaceAtAnObjectPosition := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #North .
	
	self should: [aRoom place: aCharacterToPlaceAtAnObjectPosition at: 0@0.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room canNotPlaceObjectsAtSamePositionErrorMessage).
		self assert: (aRoom hasAnObjectAt: 0@0).
		self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
		]
	
	
	
	

	! !

!testRun: #RoomTest #test07PlacingInRoomOneObjectWorksCorrectly stamp: 'BT 12/10/2020 20:46:00'!
PASSED!

!testRun: #RoomTest #test08PlacingInRoomManyObjectsAtDifferentPositionsWorksCorrectly stamp: 'BT 12/10/2020 20:46:00'!
PASSED!

!testRun: #RoomTest #test09CannotPlaceinInRoomObjectAtSamePosition stamp: 'BT 12/10/2020 20:46:00'!
PASSED!

!testRun: #RoomTest #test10CannotPlaceinInRoomObjectsOutsideTheRoom stamp: 'BT 12/10/2020 20:46:00'!
PASSED!

!testRun: #RoomTest #test11CannotPlaceinInRoomAnObjectAtAnInvalidPosition stamp: 'BT 12/10/2020 20:46:00'!
PASSED!

!testRun: #RoomTest #test12CannotPlaceinInRoomObjectAtSamePosition stamp: 'BT 12/10/2020 20:46:00'!
PASSED!

!testRun: #RoomTest #test13CannotPlaceCharacterAtAnOccupiedPosition stamp: 'BT 12/10/2020 20:46:02'!
PASSED!

!testRun: #RoomTest #test14CannotPlaceCharacterAtAnInvalidPosition stamp: 'BT 12/10/2020 20:46:02'!
PASSED!

!testRun: #RoomTest #test15PlayableCharacterCannotMoveOutsideTheRoom stamp: 'BT 12/10/2020 20:46:02'!
PASSED!

!testRun: #RoomTest #test16PlayableCharacterMovingWorksCorrectly stamp: 'BT 12/10/2020 20:46:02'!
PASSED!

!testRun: #RoomTest #test01CannotCreateRoomWithHighZero stamp: 'BT 12/10/2020 20:46:04'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithLenghtZero stamp: 'BT 12/10/2020 20:46:04'!
PASSED!

!testRun: #RoomTest #test03CannotCreateRoomWithNegativeHigh stamp: 'BT 12/10/2020 20:46:04'!
PASSED!

!testRun: #RoomTest #test04CannotCreateRoomWithNegativeLenght stamp: 'BT 12/10/2020 20:46:04'!
PASSED!

!testRun: #RoomTest #test05CannotCreateRoomWithNotIntegerHigh stamp: 'BT 12/10/2020 20:46:04'!
PASSED!

!testRun: #RoomTest #test06CannotCreateRoomWithNotIntegerLenght stamp: 'BT 12/10/2020 20:46:04'!
PASSED!
!RoomTest methodsFor: 'character action test' stamp: 'BT 12/10/2020 20:47:09' prior: 50875419!
test15PlayableCharacterCannotMoveOutsideTheRoom
	| aRoom aPlayableCharacter |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #East .
	
	aPlayableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.
		
	self assert: (aPlayableCharacter isAt: 2@2 heading: #North).
	self assert: (aRoom isCharacter: aPlayableCharacter at: 2@2).
	
	
	

	! !

!testRun: #RoomTest #test15PlayableCharacterCannotMoveOutsideTheRoom stamp: 'BT 12/10/2020 20:47:10'!
ERROR!
!RoomTest methodsFor: 'character action test' stamp: 'BT 12/10/2020 20:47:36' prior: 50875717!
test15PlayableCharacterCannotMoveOutsideTheRoom
	| aRoom aPlayableCharacter |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #East in: aRoom.
	
	aPlayableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.
		
	self assert: (aPlayableCharacter isAt: 2@2 heading: #North).
	self assert: (aRoom isCharacter: aPlayableCharacter at: 2@2).
	
	
	

	! !

!testRun: #RoomTest #test15PlayableCharacterCannotMoveOutsideTheRoom stamp: 'BT 12/10/2020 20:47:37'!
ERROR!
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'BT 12/10/2020 20:51:12' prior: 50874562!
named: aString using: aBackpack at: aPoint heading: aSymbol in: aRoom 
	^self new initializeNamed: aString using: aBackpack at: aPoint heading: aSymbol in: aRoom. ! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'BT 12/10/2020 20:51:24' prior: 50875764!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint in: aRoom
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading ! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'BT 12/10/2020 20:51:44' prior: 50875773!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint in: aRoom
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading in: aRoom.! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'BT 12/10/2020 20:53:58' prior: 50874659!
initializeNamed: aName using: aBackpack at: aPosition heading: aHeading in: aRoom.

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aHeading.
	room := aRoom.
	! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'BT 12/10/2020 20:54:26' prior: 50875795!
initializeNamed: aName using: aBackpack at: aPosition heading: aHeading in: aRoom.

	aRoom placeCharacter: self at: aPosition.
	
	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aHeading.
	room := aRoom.
	! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'BT 12/10/2020 20:54:41' prior: 50869959!
initializeNamed: aName using: aBackpack at: aPosition heading: aHeading 

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aHeading! !

!testRun: #RoomTest #test13CannotPlaceCharacterAtAnOccupiedPosition stamp: 'BT 12/10/2020 20:55:33'!
PASSED!

!testRun: #RoomTest #test14CannotPlaceCharacterAtAnInvalidPosition stamp: 'BT 12/10/2020 20:55:40'!
PASSED!

!testRun: #RoomTest #test15PlayableCharacterCannotMoveOutsideTheRoom stamp: 'BT 12/10/2020 20:55:46'!
PASSED!
!RoomTest methodsFor: 'character action test' stamp: 'BT 12/10/2020 20:56:12' prior: 50875377!
test16PlayableCharacterMovingWorksCorrectly
	| aRoom aPlayableCharacter |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #East in: aRoom.
	
	aPlayableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.
		
	self assert: (aPlayableCharacter isAt: 2@2 heading: #North).
	self assert: (aRoom isCharacter: aPlayableCharacter at: 2@2).
	
	
	

	! !

!testRun: #RoomTest #test16PlayableCharacterMovingWorksCorrectly stamp: 'BT 12/10/2020 20:56:14'!
PASSED!

!testRun: #RoomTest #test01CannotCreateRoomWithHighZero stamp: 'BT 12/10/2020 20:56:24'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithLenghtZero stamp: 'BT 12/10/2020 20:56:24'!
PASSED!

!testRun: #RoomTest #test03CannotCreateRoomWithNegativeHigh stamp: 'BT 12/10/2020 20:56:24'!
PASSED!

!testRun: #RoomTest #test04CannotCreateRoomWithNegativeLenght stamp: 'BT 12/10/2020 20:56:24'!
PASSED!

!testRun: #RoomTest #test05CannotCreateRoomWithNotIntegerHigh stamp: 'BT 12/10/2020 20:56:24'!
PASSED!

!testRun: #RoomTest #test06CannotCreateRoomWithNotIntegerLenght stamp: 'BT 12/10/2020 20:56:24'!
PASSED!

!testRun: #RoomTest #test07PlacingInRoomOneObjectWorksCorrectly stamp: 'BT 12/10/2020 20:56:26'!
PASSED!

!testRun: #RoomTest #test08PlacingInRoomManyObjectsAtDifferentPositionsWorksCorrectly stamp: 'BT 12/10/2020 20:56:26'!
PASSED!

!testRun: #RoomTest #test09CannotPlaceinInRoomObjectAtSamePosition stamp: 'BT 12/10/2020 20:56:26'!
PASSED!

!testRun: #RoomTest #test10CannotPlaceinInRoomObjectsOutsideTheRoom stamp: 'BT 12/10/2020 20:56:26'!
PASSED!

!testRun: #RoomTest #test11CannotPlaceinInRoomAnObjectAtAnInvalidPosition stamp: 'BT 12/10/2020 20:56:26'!
PASSED!

!testRun: #RoomTest #test12CannotPlaceinInRoomObjectAtSamePosition stamp: 'BT 12/10/2020 20:56:26'!
PASSED!
!RoomTest methodsFor: 'character action test' stamp: 'BT 12/10/2020 20:57:28' prior: 50875740!
test15PlayableCharacterCannotMoveOutsideTheRoom
	| aRoom aPlayableCharacter |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 9@9 heading: #North in: aRoom.
	
	aPlayableCharacter
		moveForward.
		
	self assert: (aPlayableCharacter isAt: 2@2 heading: #North).
	self assert: (aRoom isCharacter: aPlayableCharacter at: 2@2).
	
	
	

	! !
!RoomTest methodsFor: 'character action test' stamp: 'BT 12/10/2020 20:59:42' prior: 50875897!
test15PlayableCharacterCannotMoveOutsideTheRoom
	| aRoom aPlayableCharacter |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 9@9 heading: #North in: aRoom.
	
	self should: [aPlayableCharacter
		moveForward]
	 raise: Error
	withExceptionDo: Room cannotMoveOutsideTheRoom.
	
	
	
	

	! !
!RoomTest methodsFor: 'character action test' stamp: 'BT 12/10/2020 21:00:27' prior: 50875914!
test15PlayableCharacterCannotMoveOutsideTheRoom
	| aRoom aPlayableCharacter |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 9@9 heading: #North in: aRoom.
	
	self should: [aPlayableCharacter
		moveForward]
	 raise: Error
	withExceptionDo: Room cannotMoveOutsideTheRoom.
	
	
	
	

	! !
!Room class methodsFor: 'error messages' stamp: 'BT 12/10/2020 21:01:26'!
invalidPositionErrorMessage
	^ 'Cannot place object at invalid positions, must be positive or zero coordinates'! !
!Room methodsFor: 'error messages' stamp: 'BT 12/10/2020 21:01:26'!
invalidPositionErrorMessage
	^ 'Invalid position where placing objects!!'! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'BT 12/10/2020 21:01:26' prior: 50875616!
test11CannotPlaceinInRoomAnObjectAtAnInvalidPosition
	| aRoom anObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	self should: [aRoom place: anObjetToPlaceInRoom at: -1@-1.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room invalidPositionErrorMessage).
		self deny: (aRoom hasAnObjectAt: 10@10).
		]
	
 
	
	
	

	! !
!Room methodsFor: 'as yet unclassified' stamp: 'BT 12/10/2020 21:01:26' prior: 50874998!
assertValidPositionInRoom: aPositionInRoomWhereToPlaceObject

	((aPositionInRoomWhereToPlaceObject x < 0) or: [ aPositionInRoomWhereToPlaceObject y < 0 ]) ifTrue: [ self error: self class invalidPositionErrorMessage ].	
	((aPositionInRoomWhereToPlaceObject x >= lenght) or:[ aPositionInRoomWhereToPlaceObject y >= high ]) ifTrue: [ self error: self class canNotPlaceOutsideTheRoomErrorMessage]! !

!methodRemoval: Room class #canNotPlaceAnythingAtAnInvalidPositionErrorMessage stamp: 'BT 12/10/2020 21:01:26'!
canNotPlaceAnythingAtAnInvalidPositionErrorMessage
	^ 'Cannot place object at invalid positions, must be positive or zero coordinates'!

!methodRemoval: Room #canNotPlaceAnythingAtAnInvalidPositionErrorMessage stamp: 'BT 12/10/2020 21:01:26'!
canNotPlaceAnythingAtAnInvalidPositionErrorMessage
	^ 'Invalid position where placing objects!!'!
!Room class methodsFor: 'error messages' stamp: 'BT 12/10/2020 21:02:23'!
positionOutOfRoomErrorMessage
	^ 'Can not place object outside the room sizes!!'! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'BT 12/10/2020 21:02:23' prior: 50875021!
test14CannotPlaceCharacterAtAnInvalidPosition
	| aRoom  |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	self should: [PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 10@10 heading: #North in: aRoom.] 
	raise: Error 
	withMessageText: Room positionOutOfRoomErrorMessage.
	
	
	
	
	

	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'BT 12/10/2020 21:02:23' prior: 50875598!
test10CannotPlaceinInRoomObjectsOutsideTheRoom
	| aRoom anObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. 
	
	self should: [aRoom place: anObjetToPlaceInRoom at: 10@10.] 
	raise: Error
	withExceptionDo: [:anError | 
		self assert: (anError messageText isEqualTo: Room positionOutOfRoomErrorMessage).
		self deny: (aRoom hasAnObjectAt: 10@10).
		]
	
 
	
	
	

	! !
!Room methodsFor: 'as yet unclassified' stamp: 'BT 12/10/2020 21:02:23' prior: 50875975!
assertValidPositionInRoom: aPositionInRoomWhereToPlaceObject

	((aPositionInRoomWhereToPlaceObject x < 0) or: [ aPositionInRoomWhereToPlaceObject y < 0 ]) ifTrue: [ self error: self class invalidPositionErrorMessage ].	
	((aPositionInRoomWhereToPlaceObject x >= lenght) or:[ aPositionInRoomWhereToPlaceObject y >= high ]) ifTrue: [ self error: self class positionOutOfRoomErrorMessage]! !

!methodRemoval: Room class #canNotPlaceOutsideTheRoomErrorMessage stamp: 'BT 12/10/2020 21:02:23'!
canNotPlaceOutsideTheRoomErrorMessage
	^ 'Can not place object outside the room sizes!!'!
!RoomTest methodsFor: 'character action test' stamp: 'BT 12/10/2020 21:03:00' prior: 50875930!
test15PlayableCharacterCannotMoveOutsideTheRoom
	| aRoom aPlayableCharacter |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 9@9 heading: #North in: aRoom.
	
	self should: [aPlayableCharacter
		moveForward]
	 raise: Error
	withExceptionDo: Room positionOutOfRoomErrorMessage.
	
	
	
	

	! !
!RoomTest methodsFor: 'character action test' stamp: 'BT 12/10/2020 21:05:13' prior: 50876064!
test15PlayableCharacterCannotMoveOutsideTheRoom
	| aRoom aPlayableCharacter |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 9@9 heading: #North in: aRoom.
	
	self should: [aPlayableCharacter
		moveForward]
	 raise: Error
	withExceptionDo: [:anError |
		self assert: (anError messageText isEqualTo: Room positionOutOfRoomErrorMessage).
		self assert: (aRoom isCharacter: aPlayableCharacter at: 9@9).
		]
	
	
	
	

	! !
!PlayableCharacter methodsFor: 'moving' stamp: 'BT 12/10/2020 21:06:58' prior: 50869983!
moveForward

	| newPosition |
	newPosition + heading forwardPoint
	position! !
!PlayableCharacter methodsFor: 'moving' stamp: 'BT 12/10/2020 21:07:18' prior: 50876100!
moveForward

	| newPosition |
	newPosition := position + heading forwardPoint.
	position! !
!PlayableCharacter methodsFor: 'moving' stamp: 'BT 12/10/2020 21:08:37' prior: 50876106!
moveForward

	| newPosition |
	newPosition := position + heading forwardPoint.
	room assertValidPositionInRoom: newPosition.
	position := newPosition.! !

!testRun: #RoomTest #test15PlayableCharacterCannotMoveOutsideTheRoom stamp: 'BT 12/10/2020 21:08:43'!
PASSED!
!RoomTest methodsFor: 'character action test' stamp: 'BT 12/10/2020 21:09:07' prior: 50875834!
test16PlayableCharacterMovingWorksCorrectly
	| aRoom aPlayableCharacter |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #East in: aRoom.
	
	aPlayableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.
		
	self assert: (aPlayableCharacter isAt: 2@2 heading: #North).
	self assert: (aRoom isCharacter: aPlayableCharacter at: 2@2).
	
	
	

	! !
!RoomTest methodsFor: 'character action test' stamp: 'BT 12/10/2020 21:09:19'!
test16PlayableCharacterMovesCorrectly
	| aRoom aPlayableCharacter |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #East in: aRoom.
	
	aPlayableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.
		
	self assert: (aPlayableCharacter isAt: 2@2 heading: #North).
	self assert: (aRoom isCharacter: aPlayableCharacter at: 2@2).
	
	
	

	! !

!methodRemoval: RoomTest #test16PlayableCharacterMovingWorksCorrectly stamp: 'BT 12/10/2020 21:09:19'!
test16PlayableCharacterMovingWorksCorrectly
	| aRoom aPlayableCharacter |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #East in: aRoom.
	
	aPlayableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.
		
	self assert: (aPlayableCharacter isAt: 2@2 heading: #North).
	self assert: (aRoom isCharacter: aPlayableCharacter at: 2@2).
	
	
	

	!
!RoomTest methodsFor: 'character action test' stamp: 'BT 12/10/2020 21:16:20'!
test17PlayableCharacterCannotTakeAnObjectNotInFront
	| aRoom aPlayableCharacter |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #East in: aRoom.
	
	
	self assert: (aPlayableCharacter isAt: 2@2 heading: #North).
	self assert: (aRoom isCharacter: aPlayableCharacter at: 2@2).
	
	
	

	! !
!RoomTest methodsFor: 'place objects tests' stamp: 'BT 12/10/2020 21:17:12' prior: 50875557!
test07PlacingInRoomOneObjectWorksCorrectly
	| aRoom anObjetToPlaceInRoom |
	aRoom := Room ofHigh: 10 andLenght: 10.
	anObjetToPlaceInRoom := PointsPortableObject named: 'llave' weighing:1  worth: 1. .
	aRoom place: anObjetToPlaceInRoom at: 0@0.
	
	self assert: (aRoom hasAnObjectAt: 0@0).
	self assert: (aRoom atPosition: 0@0) equals: anObjetToPlaceInRoom.
	
	
	

	! !
!RoomTest methodsFor: 'character action test' stamp: 'BT 12/10/2020 21:19:39' prior: 50876181!
test17PlayableCharacterCannotTakeAnObjectNotInFront
	| aRoom aPlayableCharacter untakableObject |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #East in: aRoom.
	
	untakableObject := PointsPortableObject named: 'llave' weighing:1  worth: 1. .
	aRoom place: untakableObject at: 1@4.
	
	self should: [ aPlayableCharacter take: untakableObject ]
	 raise: Error
	 withExceptionDo: [:anError |
		
		]
	
	

	! !
!RoomTest methodsFor: 'character action test' stamp: 'BT 12/10/2020 21:20:54' prior: 50876212!
test17PlayableCharacterCannotTakeAnObjectNotInFront
	| aRoom aPlayableCharacter untakableObject |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #East in: aRoom.
	
	untakableObject := PointsPortableObject named: 'llave' weighing:1  worth: 1. .
	aRoom place: untakableObject at: 1@4.
	
	self should: [ aPlayableCharacter take: untakableObject ]
	 raise: Error
	 withExceptionDo: [:anError |
		self assert: (anError messageText isEqualTo: Room positionOutOfRoomErrorMessage).
		self assert: (aRoom hasAnObjectAt: 1@4).
		self assert: (aRoom atPosition: 1@4) = untakableObject.
		]
	
	

	! !
!RoomTest methodsFor: 'character action test' stamp: 'BT 12/10/2020 21:22:24' prior: 50876232!
test17PlayableCharacterCannotTakeAnObjectNotInFront
	| aRoom aPlayableCharacter untakableObject |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #East in: aRoom.
	
	untakableObject := PointsPortableObject named: 'llave' weighing:1  worth: 1. .
	aRoom place: untakableObject at: 1@4.
	
	self should: [ aPlayableCharacter take: untakableObject ]
	 raise: Error
	 withExceptionDo: [:anError |
		self assert: (anError messageText isEqualTo: Room positionOutOfRoomErrorMessage).
		self deny: (aPlayableCharacter backpackIncludes: untakableObject).
		self assert: (aRoom hasAnObjectAt: 1@4).
		self assert: (aRoom atPosition: 1@4) = untakableObject.
		]
	
	

	! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'BT 12/10/2020 21:25:53' prior: 50869997!
take: aPortableObject
	room assertThatCanTake: aPortableObject.
	backpack add: aPortableObject.! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'BT 12/10/2020 21:26:10' prior: 50876286!
take: aDesireObjectToTake
	room assertThatCanTake: aDesireObjectToTake.
	backpack add: aDesireObjectToTake.! !
!Room methodsFor: 'assertions' stamp: 'BT 12/10/2020 21:26:58'!
assertThatCanTake: aPointsPortableObject 
	self shouldBeImplemented.! !
!Room methodsFor: 'assertions' stamp: 'BT 12/10/2020 21:27:31' prior: 50876299!
assertThatCanTake: anObjectToAssertIfCanBeTaken 
	self shouldBeImplemented.! !
!Room methodsFor: 'assertions' stamp: 'BT 12/10/2020 21:29:46' prior: 50876304!
assertThatCanTake: anObjectToAssertIfCanBeTaken 
	placedObjects keyAtValue: anObjectToAssertIfCanBeTaken.
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'BT 12/10/2020 21:30:34' prior: 50876293!
take: aDesireObjectToTake
	room assertThatCanTake: aDesireObjectToTake.
	backpack add: aDesireObjectToTake.! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'BT 12/10/2020 21:31:35' prior: 50876317!
take: aDesireObjectToTake
	room assertThat: aDesireObjectToTake canBeTakenFrom: position.
	backpack add: aDesireObjectToTake.! !
!Room methodsFor: 'assertions' stamp: 'BT 12/10/2020 21:31:46' prior: 50876309!
assertThatCanTake: anObjectToAssertIfCanBeTaken 
	placedObjects keyAtValue: anObjectToAssertIfCanBeTaken.
	! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'BT 12/10/2020 21:35:16' prior: 50876324!
take: aDesireObjectToTake
	room assertThat: aDesireObjectToTake isAt: (position + heading forwardPoint).
	backpack add: aDesireObjectToTake.! !
!Room methodsFor: 'assertions' stamp: 'BT 12/10/2020 21:37:54'!
assertThat: anObject isAt: positionWhereShouldBePlaced
	^ (placedObjects keyAtValue: anObject) = positionWhereShouldBePlaced.
	! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'BT 12/10/2020 21:38:00' prior: 50876338!
take: aDesireObjectToTake
	room assertThat: aDesireObjectToTake isAt: (position + heading forwardPoint).
	backpack add: aDesireObjectToTake.! !

placedObjects keyAtValue: anObject!
!Room methodsFor: 'assertions' stamp: 'BT 12/10/2020 21:39:37' prior: 50876345!
assertThat: anObject isAt: positionWhereShouldBePlaced
	^ (placedObjects keyAtValue: anObject) = positionWhereShouldBePlaced.
	! !

 (placedObjects keyAtValue: anObject) = positionWhereShouldBePlaced.!
!Room methodsFor: 'assertions' stamp: 'BT 12/10/2020 21:41:38' prior: 50876362!
assertThat: anObject isAt: positionWhereShouldBePlaced
	^ ((placedObjects keyAtValue: anObject) = positionWhereShouldBePlaced) ifFalse: [self error: self class objectNotInFrontOfCharacterErrorMessage].
	! !
!Room class methodsFor: 'error messages' stamp: 'BT 12/10/2020 21:42:01'!
objectNotInFrontOfCharacterErrorMessage
	self shouldBeImplemented.! !
!Room class methodsFor: 'error messages' stamp: 'BT 12/10/2020 21:42:17' prior: 50876380!
objectNotInFrontOfCharacterErrorMessage
	^ 'Object not in front of character. Cannot take it!!'! !

!testRun: #RoomTest #test17PlayableCharacterCannotTakeAnObjectNotInFront stamp: 'BT 12/10/2020 21:42:19'!
FAILURE!

!testRun: #RoomTest #test17PlayableCharacterCannotTakeAnObjectNotInFront stamp: 'BT 12/10/2020 21:42:23'!
FAILURE!

!testRun: #RoomTest #test17PlayableCharacterCannotTakeAnObjectNotInFront stamp: 'BT 12/10/2020 21:42:23'!
FAILURE!
!RoomTest methodsFor: 'character action test' stamp: 'BT 12/10/2020 21:42:38' prior: 50876258!
test17PlayableCharacterCannotTakeAnObjectNotInFront
	| aRoom aPlayableCharacter untakableObject |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #East in: aRoom.
	
	untakableObject := PointsPortableObject named: 'llave' weighing:1  worth: 1. .
	aRoom place: untakableObject at: 1@4.
	
	self should: [ aPlayableCharacter take: untakableObject ]
	 raise: Error
	 withExceptionDo: [:anError |
		self assert: (anError messageText isEqualTo: Room objectNotInFrontOfCharacterErrorMessage).
		self deny: (aPlayableCharacter backpackIncludes: untakableObject).
		self assert: (aRoom hasAnObjectAt: 1@4).
		self assert: (aRoom atPosition: 1@4) = untakableObject.
		]
	
	

	! !

!testRun: #RoomTest #test17PlayableCharacterCannotTakeAnObjectNotInFront stamp: 'BT 12/10/2020 21:42:41'!
PASSED!
!Room methodsFor: 'as yet unclassified' stamp: 'BT 12/10/2020 21:42:51' prior: 50876331!
assertThatCanTake: aPointsPortableObject 
	self shouldBeImplemented.! !

!testRun: #RoomTest #test17PlayableCharacterCannotTakeAnObjectNotInFront stamp: 'BT 12/10/2020 21:43:04'!
PASSED!
!RoomTest methodsFor: 'character action test' stamp: 'BT 12/10/2020 21:45:19'!
test18PlayableCharacterCanTakePortableObjectInFrontCorrectly
	| aRoom aPlayableCharacter untakableObject |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #East in: aRoom.
	
	untakableObject := PointsPortableObject named: 'llave' weighing:1  worth: 1. .
	aRoom place: untakableObject at: 2@2.
	
	
	self assert: (aPlayableCharacter backpackIncludes: untakableObject).
	self deny: (aRoom hasAnObjectAt: 1@4).
	

	
	

	! !
!RoomTest methodsFor: 'character action test' stamp: 'BT 12/10/2020 21:45:48' prior: 50876443!
test18PlayableCharacterCanTakePortableObjectInFrontCorrectly
	| aRoom aPlayableCharacter untakableObject |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #East in: aRoom.
	
	untakableObject := PointsPortableObject named: 'llave' weighing:1  worth: 1. .
	aRoom place: untakableObject at: 2@2.
	
	
	self assert: (aPlayableCharacter backpackIncludes: untakableObject).
	self deny: (aRoom hasAnObjectAt: 2@2).
	

	
	

	! !
!RoomTest methodsFor: 'character action test' stamp: 'BT 12/10/2020 21:46:03' prior: 50876464!
test18PlayableCharacterCanTakePortableObjectInFrontCorrectly
	| aRoom aPlayableCharacter objectToTake |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #East in: aRoom.
	
	objectToTake := PointsPortableObject named: 'llave' weighing:1  worth: 1. .
	aRoom place: objectToTake at: 2@2.
	
	self assert: (aPlayableCharacter backpackIncludes: objectToTake).
	self deny: (aRoom hasAnObjectAt: 2@2).
	

	
	

	! !
!RoomTest methodsFor: 'character action test' stamp: 'BT 12/10/2020 21:46:26' prior: 50876485!
test18PlayableCharacterCanTakePortableObjectInFrontCorrectly
	| aRoom aPlayableCharacter objectToTake |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #East in: aRoom.
	
	objectToTake := PointsPortableObject named: 'llave' weighing:1  worth: 1. .
	aRoom place: objectToTake at: 2@2.
	
	aPlayableCharacter take: objectToTake.
	
	self assert: (aPlayableCharacter backpackIncludes: objectToTake).
	self deny: (aRoom hasAnObjectAt: 2@2).
	

	
	

	! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'BT 12/10/2020 21:47:20' prior: 50876353!
take: aDesireObjectToTake
	room assertThat: aDesireObjectToTake isAt: (position + heading forwardPoint).
	backpack add: aDesireObjectToTake.
	room notifyHasBeenTaken:aDesireObjectToTake.! !
!Room methodsFor: 'objects' stamp: 'BT 12/10/2020 21:47:47'!
notifyHasBeenTaken: aPointsPortableObject 
	self shouldBeImplemented.! !
!Room methodsFor: 'objects' stamp: 'BT 12/10/2020 21:49:08' prior: 50876535!
notifyHasBeenTaken: aTakenObject 
	placedObjects remove: aTakenObject.! !

!testRun: #RoomTest #test18PlayableCharacterCanTakePortableObjectInFrontCorrectly stamp: 'BT 12/10/2020 21:49:16'!
ERROR!

!testRun: #RoomTest #test18PlayableCharacterCanTakePortableObjectInFrontCorrectly stamp: 'BT 12/10/2020 21:49:16'!
ERROR!
!Room methodsFor: 'objects' stamp: 'BT 12/10/2020 21:50:34' prior: 50876540!
notifyHasBeenTaken: aTakenObject 
	placedObjects removeKey: aTakenObject.! !
!Room methodsFor: 'objects' stamp: 'BT 12/10/2020 21:50:53' prior: 50876553!
notifyHasBeenTaken: aPositionFromObjectHasBeenTaken 
	placedObjects removeKey: aPositionFromObjectHasBeenTaken.! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'BT 12/10/2020 21:52:12' prior: 50876527!
take: aDesireObjectToTake
	| positionWhereCanBeTaken |
	positionWhereCanBeTaken := position + heading forwardPoint.
	room assertThat: aDesireObjectToTake isAt: positionWhereCanBeTaken.
	backpack add: aDesireObjectToTake.
	room notifyHasBeenTaken:positionWhereCanBeTaken.! !

!testRun: #RoomTest #test18PlayableCharacterCanTakePortableObjectInFrontCorrectly stamp: 'BT 12/10/2020 21:52:30'!
PASSED!
!RoomTest methodsFor: 'character action test' stamp: 'BT 12/10/2020 21:52:54' prior: 50876505!
test18PlayableCharacterCanTakePortableObjectInFrontCorrectly
	| aRoom aPlayableCharacter objectToTake |
	aRoom := Room ofHigh: 10 andLenght: 10.

	aPlayableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 100 limitingPointsTo: 100 ) at: 1@2 heading: #East in: aRoom.
	
	objectToTake := PointsPortableObject named: 'llave' weighing:1  worth: 1. .
	aRoom place: objectToTake at: 2@2.
	
	aPlayableCharacter take: objectToTake.
	
	self assert: (aPlayableCharacter backpackIncludes: objectToTake).
	self deny: (aRoom hasAnObjectAt: 2@2).
	

	
	

	! !

!testRun: #RoomTest #test13CannotPlaceCharacterAtAnOccupiedPosition stamp: 'BT 12/10/2020 21:52:58'!
PASSED!

!testRun: #RoomTest #test14CannotPlaceCharacterAtAnInvalidPosition stamp: 'BT 12/10/2020 21:52:58'!
PASSED!

!testRun: #RoomTest #test15PlayableCharacterCannotMoveOutsideTheRoom stamp: 'BT 12/10/2020 21:52:58'!
PASSED!

!testRun: #RoomTest #test16PlayableCharacterMovesCorrectly stamp: 'BT 12/10/2020 21:52:58'!
PASSED!

!testRun: #RoomTest #test17PlayableCharacterCannotTakeAnObjectNotInFront stamp: 'BT 12/10/2020 21:52:58'!
PASSED!

!testRun: #RoomTest #test18PlayableCharacterCanTakePortableObjectInFrontCorrectly stamp: 'BT 12/10/2020 21:52:58'!
PASSED!

!testRun: #RoomTest #test07PlacingInRoomOneObjectWorksCorrectly stamp: 'BT 12/10/2020 21:53:00'!
PASSED!

!testRun: #RoomTest #test08PlacingInRoomManyObjectsAtDifferentPositionsWorksCorrectly stamp: 'BT 12/10/2020 21:53:00'!
PASSED!

!testRun: #RoomTest #test09CannotPlaceinInRoomObjectAtSamePosition stamp: 'BT 12/10/2020 21:53:00'!
PASSED!

!testRun: #RoomTest #test10CannotPlaceinInRoomObjectsOutsideTheRoom stamp: 'BT 12/10/2020 21:53:00'!
PASSED!

!testRun: #RoomTest #test11CannotPlaceinInRoomAnObjectAtAnInvalidPosition stamp: 'BT 12/10/2020 21:53:00'!
PASSED!

!testRun: #RoomTest #test12CannotPlaceinInRoomObjectAtSamePosition stamp: 'BT 12/10/2020 21:53:00'!
PASSED!

!testRun: #RoomTest #test01CannotCreateRoomWithHighZero stamp: 'BT 12/10/2020 21:53:02'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithLenghtZero stamp: 'BT 12/10/2020 21:53:02'!
PASSED!

!testRun: #RoomTest #test03CannotCreateRoomWithNegativeHigh stamp: 'BT 12/10/2020 21:53:02'!
PASSED!

!testRun: #RoomTest #test04CannotCreateRoomWithNegativeLenght stamp: 'BT 12/10/2020 21:53:02'!
PASSED!

!testRun: #RoomTest #test05CannotCreateRoomWithNotIntegerHigh stamp: 'BT 12/10/2020 21:53:02'!
PASSED!

!testRun: #RoomTest #test06CannotCreateRoomWithNotIntegerLenght stamp: 'BT 12/10/2020 21:53:02'!
PASSED!