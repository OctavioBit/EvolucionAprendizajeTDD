----End fileIn of /home/agustin/Downloads/ISW1-2020-2C-2doParcial.st----!

----SNAPSHOT----(10 December 2020 16:49:44) CuisUniversity-4384.image priorSource: 17155564!

----QUIT----(10 December 2020 16:49:48) CuisUniversity-4384.image priorSource: 17183591!

----STARTUP---- (10 December 2020 17:02:53) as /home/agustin/Escritorio/Uba/Materias/Compu/ISW1/Parcial2/CuisUniversity-4384.image!


TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'AM 12/10/2020 17:28:38'!
TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'nil' stamp: 'AM 12/10/2020 17:35:14'!
test01
	
	| backpack playableCharacter |
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100. 
	playableCharacter := PlayableCharacter named: 'agustin' using: backpack at: 0@0 heading: #North.
	Room playing: playableCharacter withObjectsAt: Dictionary new.
	! !

----STARTUP---- (10 December 2020 17:35:39) as /home/agustin/Escritorio/Uba/Materias/Compu/ISW1/Parcial2/CuisUniversity-4384.image!


TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'AM 12/10/2020 17:35:48'!
TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'nil' stamp: 'AM 12/10/2020 17:36:19'!
test01

	| backpack |
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.! !

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'AM 12/10/2020 17:38:16'!
Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 17:38:08' prior: 50868659!
test01

	| backpack character room |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North.
	room := Room playing: character withObjectsAt: Dictionary new ofHeight: 0 andWidth: 1! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 17:39:10' prior: 50868672!
test01

	| backpack character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North.
	self should: [ Room playing: character withObjectsAt: Dictionary new ofHeight: 0 andWidth: 1 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room heightMustBePositiveErrorDescription.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 17:39:17' prior: 50868684!
test01

	| backpack character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North.
	self should: [ Room playing: character withObjectsAt: Dictionary new ofHeight: 0 andWidth: 1 ]
	
		raise: Error - MessageNotUnderstood 
		withMessageText: Room heightMustBePositiveErrorDescription.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 17:39:21' prior: 50868700!
test01

	| backpack character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North.
	
	self should: [ Room playing: character withObjectsAt: Dictionary new ofHeight: 0 andWidth: 1 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room heightMustBePositiveErrorDescription.! !

!testRun: #RoomTest #test01 stamp: 'AM 12/10/2020 17:39:23'!
ERROR!
!Room class methodsFor: 'error descriptions' stamp: 'AM 12/10/2020 17:39:39'!
heightMustBePositiveErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'error descriptions' stamp: 'AM 12/10/2020 17:39:53' prior: 50868733!
heightMustBePositiveErrorDescription
	
	^ 'Height of room should be positive'! !

!testRun: #RoomTest #test01 stamp: 'AM 12/10/2020 17:39:55'!
ERROR!
!Room class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 17:40:07'!
playing: aPlayableCharacter withObjectsAt: aDictionary ofHeight: aSmallInteger andWidth: aSmallInteger4 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializePlaying: aPlayableCharacter withObjectsAt: aDictionary ofHeight: aSmallInteger andWidth: aSmallInteger4 ! !
!Room class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 17:41:13' prior: 50868747!
playing: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth 
	
	self error: self heightMustBePositiveErrorDescription.
	^self new initializePlaying: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth ! !

!testRun: #RoomTest #test01 stamp: 'AM 12/10/2020 17:41:16'!
PASSED!

!testRun: #RoomTest #test01 stamp: 'AM 12/10/2020 17:41:16'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 17:41:27'!
test02

	| backpack character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North.
	
	self should: [ Room playing: character withObjectsAt: Dictionary new ofHeight: 1 andWidth: 0 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room heightMustBePositiveErrorDescription.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 17:41:32' prior: 50868777!
test02

	| backpack character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North.
	
	self should: [ Room playing: character withObjectsAt: Dictionary new ofHeight: 1 andWidth: 0 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room widthMustBePositiveErrorDescription.! !

!testRun: #RoomTest #test02 stamp: 'AM 12/10/2020 17:41:36'!
ERROR!
!Room class methodsFor: 'error descriptions' stamp: 'AM 12/10/2020 17:41:52'!
widthMustBePositiveErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'error descriptions' stamp: 'AM 12/10/2020 17:42:02' prior: 50868810!
widthMustBePositiveErrorDescription
	
	^ 'Width of room should be positive'! !

!testRun: #RoomTest #test02 stamp: 'AM 12/10/2020 17:42:05'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 17:42:39' prior: 50868761!
playing: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth 
	
	aHeight < 0 ifTrue: [ self error: self heightMustBePositiveErrorDescription ]
	^self new initializePlaying: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth ! !
!Room class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 17:42:43' prior: 50868823!
playing: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth 
	
	aHeight < 0 ifTrue: [ self error: self heightMustBePositiveErrorDescription ].
	^self new initializePlaying: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth ! !
!Room class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 17:43:01' prior: 50868836!
playing: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth 
	
	aHeight < 0 ifTrue: [ self error: self heightMustBePositiveErrorDescription ].
	self error: self widthMustBePositiveErrorDescription.
	
	^self new initializePlaying: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth ! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AM 12/10/2020 17:43:03'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AM 12/10/2020 17:43:03'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AM 12/10/2020 17:43:03'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AM 12/10/2020 17:43:03'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AM 12/10/2020 17:43:03'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AM 12/10/2020 17:43:03'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 17:43:03'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 17:43:03'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AM 12/10/2020 17:43:03'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AM 12/10/2020 17:43:03'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AM 12/10/2020 17:43:03'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AM 12/10/2020 17:43:03'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AM 12/10/2020 17:43:03'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AM 12/10/2020 17:43:03'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AM 12/10/2020 17:43:03'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 17:43:03'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 17:43:03'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 17:43:03'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 17:43:03'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 17:43:03'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 17:43:03'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 17:43:03'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 17:43:03'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 17:43:03'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 17:43:03'!
PASSED!

!testRun: #RoomTest #test01 stamp: 'AM 12/10/2020 17:43:03'!
FAILURE!

!testRun: #RoomTest #test02 stamp: 'AM 12/10/2020 17:43:03'!
PASSED!

!testRun: #RoomTest #test01 stamp: 'AM 12/10/2020 17:43:03'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 17:43:13' prior: 50868849!
playing: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth 
	
	aHeight <= 0 ifTrue: [ self error: self heightMustBePositiveErrorDescription ].
	self error: self widthMustBePositiveErrorDescription.
	
	^self new initializePlaying: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth ! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AM 12/10/2020 17:43:15'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AM 12/10/2020 17:43:15'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AM 12/10/2020 17:43:15'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AM 12/10/2020 17:43:15'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AM 12/10/2020 17:43:15'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AM 12/10/2020 17:43:15'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 17:43:15'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 17:43:15'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AM 12/10/2020 17:43:15'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AM 12/10/2020 17:43:15'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AM 12/10/2020 17:43:15'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AM 12/10/2020 17:43:15'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AM 12/10/2020 17:43:15'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AM 12/10/2020 17:43:15'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AM 12/10/2020 17:43:15'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 17:43:15'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 17:43:15'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 17:43:15'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 17:43:15'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 17:43:15'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 17:43:15'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 17:43:15'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 17:43:15'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 17:43:15'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 17:43:15'!
PASSED!

!testRun: #RoomTest #test01 stamp: 'AM 12/10/2020 17:43:15'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'AM 12/10/2020 17:43:15'!
PASSED!

----SNAPSHOT----(10 December 2020 17:43:20) CuisUniversity-4384.image priorSource: 17183685!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 17:43:44'!
test01HeightOfRoomShouldBePositive

	| backpack character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North.
	
	self should: [ Room playing: character withObjectsAt: Dictionary new ofHeight: 0 andWidth: 1 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room heightMustBePositiveErrorDescription.! !

!methodRemoval: RoomTest #test01 stamp: 'AM 12/10/2020 17:43:44'!
test01

	| backpack character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North.
	
	self should: [ Room playing: character withObjectsAt: Dictionary new ofHeight: 0 andWidth: 1 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room heightMustBePositiveErrorDescription.!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 17:43:58'!
test02WidthOfRoomShouldBePositive

	| backpack character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North.
	
	self should: [ Room playing: character withObjectsAt: Dictionary new ofHeight: 1 andWidth: 0 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room widthMustBePositiveErrorDescription.! !

!methodRemoval: RoomTest #test02 stamp: 'AM 12/10/2020 17:43:59'!
test02

	| backpack character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North.
	
	self should: [ Room playing: character withObjectsAt: Dictionary new ofHeight: 1 andWidth: 0 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room widthMustBePositiveErrorDescription.!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 17:44:27'!
test01HeightOfRoomShouldBeAnInteger

	| backpack character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North.
	
	self should: [ Room playing: character withObjectsAt: Dictionary new ofHeight: 0.5 andWidth: 1 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room heightMustBeAnIntegerErrorDescription.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 17:44:43'!
test03HeightOfRoomShouldBeAnInteger

	| backpack character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North.
	
	self should: [ Room playing: character withObjectsAt: Dictionary new ofHeight: 0.5 andWidth: 1 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room heightMustBeAnIntegerErrorDescription.! !

!methodRemoval: RoomTest #test01HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 17:44:44'!
test01HeightOfRoomShouldBeAnInteger

	| backpack character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North.
	
	self should: [ Room playing: character withObjectsAt: Dictionary new ofHeight: 0.5 andWidth: 1 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room heightMustBeAnIntegerErrorDescription.!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 17:44:46'!
ERROR!
!Room class methodsFor: 'error descriptions' stamp: 'AM 12/10/2020 17:45:06'!
heightMustBeAnIntegerErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'error descriptions' stamp: 'AM 12/10/2020 17:45:19' prior: 50869190!
heightMustBeAnIntegerErrorDescription
	
	^ 'Height of room must be an integer number.'! !

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 17:45:23'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 17:46:57' prior: 50868964!
playing: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth 
	
	aHeight > 0 ifFalse: [ self error: self heightMustBePositiveErrorDescription ].
	aWidth > 0 ifFalse: [ self error: self widthMustBePositiveErrorDescription ].
	
	
	aHeight isInteger ifFalse: [ self error: self heightMustBeAnIntegerErrorDescription ].
		
	^self new initializePlaying: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth ! !

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 17:47:04'!
PASSED!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 17:47:04'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 17:47:04'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 17:47:04'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 17:47:26'!
test04WidthOfRoomShouldBeAnInteger

	| backpack character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North.
	
	self should: [ Room playing: character withObjectsAt: Dictionary new ofHeight: 1 andWidth: 0.5 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room widthMustBeAnIntegerErrorDescription.! !

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 17:47:30'!
ERROR!
!Room class methodsFor: 'error descriptions' stamp: 'AM 12/10/2020 17:47:45'!
widthMustBeAnIntegerErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'error descriptions' stamp: 'AM 12/10/2020 17:48:01' prior: 50869254!
widthMustBeAnIntegerErrorDescription
	
	^ 'Width of room must be an integer number.'! !

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 17:48:03'!
ERROR!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 17:48:42'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AM 12/10/2020 17:48:42'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AM 12/10/2020 17:48:42'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AM 12/10/2020 17:48:42'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AM 12/10/2020 17:48:42'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AM 12/10/2020 17:48:42'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AM 12/10/2020 17:48:42'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 17:48:42'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 17:48:42'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AM 12/10/2020 17:48:42'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AM 12/10/2020 17:48:42'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AM 12/10/2020 17:48:42'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AM 12/10/2020 17:48:42'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AM 12/10/2020 17:48:42'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AM 12/10/2020 17:48:42'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AM 12/10/2020 17:48:42'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 17:48:42'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 17:48:42'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 17:48:42'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 17:48:42'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 17:48:42'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 17:48:42'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 17:48:42'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 17:48:42'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 17:48:42'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 17:48:42'!
PASSED!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 17:48:42'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 17:48:42'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 17:48:42'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 17:48:42'!
ERROR!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 17:48:42'!
ERROR!
!Room class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 17:49:21' prior: 50869205!
playing: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth 
	
	aHeight > 0 ifFalse: [ self error: self heightMustBePositiveErrorDescription ].
	aWidth > 0 ifFalse: [ self error: self widthMustBePositiveErrorDescription ].
	
	
	aHeight isInteger ifFalse: [ self error: self heightMustBeAnIntegerErrorDescription ].
	aWidth isInteger ifFalse: [ self error: self widthMustBeAnIntegerErrorDescription ].
		
	^self new initializePlaying: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth ! !

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 17:49:34'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 17:49:34'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 17:49:34'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 17:49:34'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 17:51:35'!
test05PlayableCharacterInitialPositionShouldBeAboveLowerLimit

	| backpack character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@-1 heading: #North.
	
	self should: [ Room playing: character withObjectsAt: Dictionary new ofHeight: 1 andWidth: 1 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room widthMustBeAnIntegerErrorDescription.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 17:51:40' prior: 50869413!
test05PlayableCharacterInitialPositionShouldBeAboveLowerLimit

	| backpack character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@-1 heading: #North.
	
	self should: [ Room playing: character withObjectsAt: Dictionary new ofHeight: 2 andWidth: 2 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room widthMustBeAnIntegerErrorDescription.! !

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveLowerLimit stamp: 'AM 12/10/2020 17:51:42'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 17:52:22' prior: 50869430!
test05PlayableCharacterInitialPositionShouldBeAboveLowerLimit

	| backpack character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@-1 heading: #North.
	
	self should: [ Room playing: character withObjectsAt: Dictionary new ofHeight: 2 andWidth: 2 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room playableCharacterShouldBeAboveLowerRoomLimitErrorDescription.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 17:52:34'!
test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit

	| backpack character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@-1 heading: #North.
	
	self should: [ Room playing: character withObjectsAt: Dictionary new ofHeight: 2 andWidth: 2 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room playableCharacterShouldBeAboveLowerRoomLimitErrorDescription.! !

!methodRemoval: RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveLowerLimit stamp: 'AM 12/10/2020 17:52:34'!
test05PlayableCharacterInitialPositionShouldBeAboveLowerLimit

	| backpack character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@-1 heading: #North.
	
	self should: [ Room playing: character withObjectsAt: Dictionary new ofHeight: 2 andWidth: 2 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room playableCharacterShouldBeAboveLowerRoomLimitErrorDescription.!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 17:52:36'!
ERROR!
!Room class methodsFor: 'error descriptions' stamp: 'AM 12/10/2020 17:52:54'!
playableCharacterShouldBeAboveLowerRoomLimitErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'error descriptions' stamp: 'AM 12/10/2020 17:53:12' prior: 50869509!
playableCharacterShouldBeAboveLowerRoomLimitErrorDescription
	
	^ 'Playable character should be above the lower board limit.'! !

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 17:53:14'!
ERROR!
!Room class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 17:55:08' prior: 50869380!
playing: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth 
	
	aHeight > 0 ifFalse: [ self error: self heightMustBePositiveErrorDescription ].
	aWidth > 0 ifFalse: [ self error: self widthMustBePositiveErrorDescription ].
	
	aHeight isInteger ifFalse: [ self error: self heightMustBeAnIntegerErrorDescription ].
	aWidth isInteger ifFalse: [ self error: self widthMustBeAnIntegerErrorDescription ].
	
	(aPlayableCharacter isAbove: 0) ifTrue: [self error: self playableCharacterShouldBeAboveLowerRoomLimitErrorDescription ].
		
	^self new initializePlaying: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth ! !

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 17:55:13'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 17:55:13'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 17:55:13'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 17:55:13'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 17:55:13'!
ERROR!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 17:55:13'!
ERROR!
!PlayableCharacter methodsFor: 'testing' stamp: 'AM 12/10/2020 17:55:29'!
isAbove: aSmallInteger 
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'testing' stamp: 'AM 12/10/2020 17:56:00' prior: 50869571!
isAbove: aYCoordinate 
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'testing' stamp: 'AM 12/10/2020 17:56:35' prior: 50869576!
isAbove: aYCoordinate 
	
	^ aYCoordinate <= position x! !

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 17:56:38'!
PASSED!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 17:56:43'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 17:56:43'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 17:56:43'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 17:56:43'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 17:56:43'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 17:57:15'!
test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit

	| backpack character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@2 heading: #North.
	
	self should: [ Room playing: character withObjectsAt: Dictionary new ofHeight: 2 andWidth: 2 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room playableCharacterShouldBeAboveLowerRoomLimitErrorDescription.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 17:57:28' prior: 50869606!
test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit

	| backpack character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@2 heading: #North.
	
	self should: [ Room playing: character withObjectsAt: Dictionary new ofHeight: 2 andWidth: 2 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room playableCharacterShouldBeBelowUpperRoomLimitErrorDescription.! !

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 17:57:33'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 17:58:03' prior: 50869624!
test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit

	| backpack character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@2 heading: #North.
	
	self should: [ Room playing: character withObjectsAt: Dictionary new ofHeight: 2 andWidth: 2 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room playableCharacterShouldBeInsideRoomErrorDescription.! !
!Room class methodsFor: 'error descriptions' stamp: 'AM 12/10/2020 17:58:25'!
playableCharacterShouldBeInsideRoomErrorDescription
	
	^ 'Playable character should be above the lower board limit.'! !
!Room class methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 17:58:26' prior: 50869526!
playing: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth 
	
	aHeight > 0 ifFalse: [ self error: self heightMustBePositiveErrorDescription ].
	aWidth > 0 ifFalse: [ self error: self widthMustBePositiveErrorDescription ].
	
	aHeight isInteger ifFalse: [ self error: self heightMustBeAnIntegerErrorDescription ].
	aWidth isInteger ifFalse: [ self error: self widthMustBeAnIntegerErrorDescription ].
	
	(aPlayableCharacter isAbove: 0) ifTrue: [self error: self playableCharacterShouldBeInsideRoomErrorDescription ].
		
	^self new initializePlaying: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth ! !

!methodRemoval: Room class #playableCharacterShouldBeAboveLowerRoomLimitErrorDescription stamp: 'AM 12/10/2020 17:58:26'!
playableCharacterShouldBeAboveLowerRoomLimitErrorDescription
	
	^ 'Playable character should be above the lower board limit.'!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 17:58:37' prior: 50869469!
test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit

	| backpack character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@-1 heading: #North.
	
	self should: [ Room playing: character withObjectsAt: Dictionary new ofHeight: 2 andWidth: 2 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room playableCharacterShouldBeInsideRoomErrorDescription .! !

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 17:58:43'!
PASSED!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 17:58:43'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 17:58:43'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 17:58:43'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 17:58:43'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 17:58:43'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 17:58:43'!
PASSED!
!Room class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 17:59:14' prior: 50869670!
playing: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth 
	
	aHeight > 0 ifFalse: [ self error: self heightMustBePositiveErrorDescription ].
	aWidth > 0 ifFalse: [ self error: self widthMustBePositiveErrorDescription ].
	
	aHeight isInteger ifFalse: [ self error: self heightMustBeAnIntegerErrorDescription ].
	aWidth isInteger ifFalse: [ self error: self widthMustBeAnIntegerErrorDescription ].
	
	(aPlayableCharacter isAbove: 0) ifFalse: [self error: self playableCharacterShouldBeInsideRoomErrorDescription ].
		
	^self new initializePlaying: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth ! !

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 17:59:15'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 17:59:15'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 17:59:15'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 17:59:15'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 17:59:15'!
ERROR!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 17:59:15'!
ERROR!
!Room class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 17:59:44' prior: 50869745!
playing: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth 
	
	aHeight > 0 ifFalse: [ self error: self heightMustBePositiveErrorDescription ].
	aWidth > 0 ifFalse: [ self error: self widthMustBePositiveErrorDescription ].
	
	aHeight isInteger ifFalse: [ self error: self heightMustBeAnIntegerErrorDescription ].
	aWidth isInteger ifFalse: [ self error: self widthMustBeAnIntegerErrorDescription ].
	
	(aPlayableCharacter isAbove: 0) ifFalse: [self error: self playableCharacterShouldBeInsideRoomErrorDescription ].
		
	^self new initializePlaying: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth ! !
!PlayableCharacter methodsFor: 'testing' stamp: 'AM 12/10/2020 17:59:58' prior: 50869581!
isAbove: aYCoordinate 
	
	^ aYCoordinate <= position y! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AM 12/10/2020 18:00:04'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AM 12/10/2020 18:00:04'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AM 12/10/2020 18:00:04'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AM 12/10/2020 18:00:04'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AM 12/10/2020 18:00:04'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AM 12/10/2020 18:00:04'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 18:00:04'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 18:00:04'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AM 12/10/2020 18:00:04'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AM 12/10/2020 18:00:04'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AM 12/10/2020 18:00:04'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AM 12/10/2020 18:00:04'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AM 12/10/2020 18:00:04'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AM 12/10/2020 18:00:04'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AM 12/10/2020 18:00:04'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 18:00:04'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 18:00:04'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 18:00:04'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 18:00:04'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 18:00:04'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 18:00:04'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 18:00:04'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 18:00:04'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 18:00:04'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 18:00:04'!
PASSED!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 18:00:04'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 18:00:04'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 18:00:04'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 18:00:04'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 18:00:04'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 18:00:04'!
ERROR!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 18:00:04'!
ERROR!
!Room class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 18:01:24' prior: 50869790!
playing: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth 
	
	aHeight > 0 ifFalse: [ self error: self heightMustBePositiveErrorDescription ].
	aWidth > 0 ifFalse: [ self error: self widthMustBePositiveErrorDescription ].
	
	aHeight isInteger ifFalse: [ self error: self heightMustBeAnIntegerErrorDescription ].
	aWidth isInteger ifFalse: [ self error: self widthMustBeAnIntegerErrorDescription ].
	
	((aPlayableCharacter isAbove: 0) and: [aPlayableCharacter isBelow: aHeight - 1])
		 ifFalse: [self error: self playableCharacterShouldBeInsideRoomErrorDescription ].
		
	^self new initializePlaying: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth ! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AM 12/10/2020 18:01:28'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AM 12/10/2020 18:01:28'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AM 12/10/2020 18:01:28'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AM 12/10/2020 18:01:28'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AM 12/10/2020 18:01:28'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AM 12/10/2020 18:01:28'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 18:01:28'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 18:01:28'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AM 12/10/2020 18:01:28'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AM 12/10/2020 18:01:28'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AM 12/10/2020 18:01:28'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AM 12/10/2020 18:01:28'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AM 12/10/2020 18:01:28'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AM 12/10/2020 18:01:28'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AM 12/10/2020 18:01:28'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 18:01:28'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 18:01:28'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 18:01:28'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 18:01:28'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 18:01:28'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 18:01:28'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 18:01:28'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 18:01:28'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 18:01:28'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 18:01:28'!
PASSED!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 18:01:28'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 18:01:28'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 18:01:28'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 18:01:28'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 18:01:28'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 18:01:28'!
ERROR!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 18:01:28'!
ERROR!
!PlayableCharacter methodsFor: 'testing' stamp: 'AM 12/10/2020 18:01:45'!
isBelow: aSmallInteger 
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'testing' stamp: 'AM 12/10/2020 18:01:53' prior: 50870080!
isBelow: aYCoordinate 
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'testing' stamp: 'AM 12/10/2020 18:02:12' prior: 50870085!
isBelow: aYCoordinate 
	^ aYCoordinate >= position y! !

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 18:02:14'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AM 12/10/2020 18:02:17'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AM 12/10/2020 18:02:17'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AM 12/10/2020 18:02:17'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AM 12/10/2020 18:02:17'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AM 12/10/2020 18:02:17'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AM 12/10/2020 18:02:17'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 18:02:17'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 18:02:17'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AM 12/10/2020 18:02:17'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AM 12/10/2020 18:02:17'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AM 12/10/2020 18:02:17'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AM 12/10/2020 18:02:17'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AM 12/10/2020 18:02:17'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AM 12/10/2020 18:02:17'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AM 12/10/2020 18:02:17'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 18:02:17'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 18:02:17'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 18:02:18'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 18:02:18'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 18:02:18'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 18:02:18'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 18:02:18'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 18:02:18'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 18:02:18'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 18:02:18'!
PASSED!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 18:02:18'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 18:02:18'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 18:02:18'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 18:02:18'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 18:02:18'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 18:02:18'!
PASSED!
!PlayableCharacter methodsFor: 'testing' stamp: 'AM 12/10/2020 18:02:49'!
isToTheRight: anXCoordinate 
	
	^ anXCoordinate <= position x! !
!PlayableCharacter methodsFor: 'testing' stamp: 'AM 12/10/2020 18:02:53'!
isToTheLeft: anXCoordinate 
	
	^ anXCoordinate <= position x! !
!PlayableCharacter methodsFor: 'testing' stamp: 'AM 12/10/2020 18:02:56' prior: 50870217!
isToTheLeft: anXCoordinate 
	
	^ anXCoordinate >= position x! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 18:03:30'!
test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit

	| backpack character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: -1@0 heading: #North.
	
	self should: [ Room playing: character withObjectsAt: Dictionary new ofHeight: 2 andWidth: 2 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room playableCharacterShouldBeInsideRoomErrorDescription.! !

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 18:03:32'!
ERROR!
!Room class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 18:04:10' prior: 50869937!
playing: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth 
	
	aHeight > 0 ifFalse: [ self error: self heightMustBePositiveErrorDescription ].
	aWidth > 0 ifFalse: [ self error: self widthMustBePositiveErrorDescription ].
	
	aHeight isInteger ifFalse: [ self error: self heightMustBeAnIntegerErrorDescription ].
	aWidth isInteger ifFalse: [ self error: self widthMustBeAnIntegerErrorDescription ].
	
	((aPlayableCharacter isAbove: 0) and: [aPlayableCharacter isBelow: aHeight - 1])
		 ifFalse: [self error: self playableCharacterShouldBeInsideRoomErrorDescription ].
	((aPlayableCharacter isToTheRight: 0))
		 ifFalse: [self error: self playableCharacterShouldBeInsideRoomErrorDescription ].
		
	^self new initializePlaying: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth ! !

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 18:04:14'!
PASSED!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 18:04:14'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 18:04:14'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 18:04:14'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 18:04:14'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 18:04:14'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 18:04:14'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 18:04:14'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 18:04:30'!
test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit

	| backpack character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 2@0 heading: #North.
	
	self should: [ Room playing: character withObjectsAt: Dictionary new ofHeight: 2 andWidth: 2 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room playableCharacterShouldBeInsideRoomErrorDescription.! !

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 18:04:32'!
ERROR!
!Room class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 18:04:54' prior: 50870249!
playing: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth 
	
	aHeight > 0 ifFalse: [ self error: self heightMustBePositiveErrorDescription ].
	aWidth > 0 ifFalse: [ self error: self widthMustBePositiveErrorDescription ].
	
	aHeight isInteger ifFalse: [ self error: self heightMustBeAnIntegerErrorDescription ].
	aWidth isInteger ifFalse: [ self error: self widthMustBeAnIntegerErrorDescription ].
	
	((aPlayableCharacter isAbove: 0) and: [aPlayableCharacter isBelow: aHeight - 1])
		 ifFalse: [self error: self playableCharacterShouldBeInsideRoomErrorDescription ].
	((aPlayableCharacter isToTheRight: 0) and: [aPlayableCharacter isBelow: aWidth - 1])
		 ifFalse: [self error: self playableCharacterShouldBeInsideRoomErrorDescription ].
		
	^self new initializePlaying: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth ! !

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 18:04:56'!
ERROR!
!Room class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 18:05:19' prior: 50870330!
playing: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth 
	
	aHeight > 0 ifFalse: [ self error: self heightMustBePositiveErrorDescription ].
	aWidth > 0 ifFalse: [ self error: self widthMustBePositiveErrorDescription ].
	
	aHeight isInteger ifFalse: [ self error: self heightMustBeAnIntegerErrorDescription ].
	aWidth isInteger ifFalse: [ self error: self widthMustBeAnIntegerErrorDescription ].
	
	((aPlayableCharacter isAbove: 0) and: [aPlayableCharacter isBelow: aHeight - 1])
		 ifFalse: [self error: self playableCharacterShouldBeInsideRoomErrorDescription ].
	((aPlayableCharacter isToTheRight: 0) and: [aPlayableCharacter isToTheLeft: aWidth - 1])
		 ifFalse: [self error: self playableCharacterShouldBeInsideRoomErrorDescription ].
		
	^self new initializePlaying: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth ! !

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 18:05:20'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 18:05:20'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 18:05:20'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 18:05:21'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 18:05:21'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 18:05:21'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 18:05:21'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 18:05:21'!
PASSED!
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:09:49'!
test08ObjectsPositionsShouldBeWithinRoomLimits

	| backpack character objects |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 2@0 heading: #North.
	objects := Dictionary new.
	objects at: 0@0 put: (PointsPortableObject named: 'piedra' weighing: 4 worth: 8). 
	objects at: -1@0 put: (NoPointsPortableObject named: 'piedra' weighing: 4 worth: 8). 
	self should: [ Room playing: character withObjectsAt: objects ofHeight: 2 andWidth: 2 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room playableCharacterShouldBeInsideRoomErrorDescription.! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:10:58' prior: 50870427!
test08ObjectsPositionsShouldBeWithinRoomLimits

	| backpack character objects |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 2@0 heading: #North.
	objects := Dictionary new.
	objects at: 0@0 put: (PointsPortableObject named: 'piedra' weighing: 4 worth: 8). 
	objects at: -1@0 put: (NoPointsPortableObject named: 'piedra' weighing: 4 worth: 8). 
	objects at: 0@-1 put: (NoPointsPortableObject named: 'piedra' weighing: 4 worth: 8). 
	objects at: 2@0 put: (NoPointsPortableObject named: 'piedra' weighing: 4 worth: 8). 
	objects at: 0@2 put: (NoPointsPortableObject named: 'piedra' weighing: 4 worth: 8). 
	self should: [ Room playing: character withObjectsAt: objects ofHeight: 2 andWidth: 2 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room stageObjectsShouldBeWithinRoomLimitsErrorDescription.! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:11:04' prior: 50870451!
test08ObjectsPositionsShouldBeWithinRoomLimits

	| backpack character objects |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 2@0 heading: #North.
	objects := Dictionary new.
	objects at: 0@0 put: (PointsPortableObject named: 'piedra' weighing: 4 worth: 8). 
	objects at: -1@0 put: (NoPointsPortableObject named: 'piedra' weighing: 4 worth: 8). 
	objects at: 0@-1 put: (NoPointsPortableObject named: 'piedra' weighing: 4 worth: 8). 
	objects at: 2@0 put: (NoPointsPortableObject named: 'piedra' weighing: 4 worth: 8). 
	objects at: 0@2 put: (NoPointsPortableObject named: 'piedra' weighing: 4 worth: 8). 
	
	self should: [ Room playing: character withObjectsAt: objects ofHeight: 2 andWidth: 2 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room stageObjectsShouldBeWithinRoomLimitsErrorDescription.! !

!testRun: #RoomTest #test08ObjectsPositionsShouldBeWithinRoomLimits stamp: 'AM 12/10/2020 18:11:07'!
ERROR!
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:11:38' prior: 50870483!
test08ObjectsPositionsShouldBeWithinRoomLimits

	| backpack character objects |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 2@0 heading: #North.
	objects := Dictionary new.
	objects at: 0@0 put: (PointsPortableObject named: 'piedra' weighing: 4 worth: 8). 
	objects at: -1@0 put: (NoPointsPortableObject named: 'piedra' weighing: 4). 
	objects at: 0@-1 put: (NoPointsPortableObject named: 'piedra' weighing: 4). 
	objects at: 2@0 put: (NoPointsPortableObject named: 'piedra' weighing: 4). 
	objects at: 0@2 put: (NoPointsPortableObject named: 'piedra' weighing: 4). 
	
	self should: [ Room playing: character withObjectsAt: objects ofHeight: 2 andWidth: 2 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room stageObjectsShouldBeWithinRoomLimitsErrorDescription.! !

!testRun: #RoomTest #test08ObjectsPositionsShouldBeWithinRoomLimits stamp: 'AM 12/10/2020 18:11:41'!
ERROR!
!Room class methodsFor: 'error descriptions' stamp: 'AM 12/10/2020 18:12:09'!
stageObjectsShouldBeWithinRoomLimitsErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'error descriptions' stamp: 'AM 12/10/2020 18:12:24' prior: 50870553!
stageObjectsShouldBeWithinRoomLimitsErrorDescription
	
	^ 'Stage objects should be within room limits'! !

!testRun: #RoomTest #test08ObjectsPositionsShouldBeWithinRoomLimits stamp: 'AM 12/10/2020 18:12:26'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 18:15:08' prior: 50870366!
playing: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth 
	
	aHeight > 0 ifFalse: [ self error: self heightMustBePositiveErrorDescription ].
	aWidth > 0 ifFalse: [ self error: self widthMustBePositiveErrorDescription ].
	
	aHeight isInteger ifFalse: [ self error: self heightMustBeAnIntegerErrorDescription ].
	aWidth isInteger ifFalse: [ self error: self widthMustBeAnIntegerErrorDescription ].
	
	((aPlayableCharacter isAbove: 0) and: [aPlayableCharacter isBelow: aHeight - 1])
		 ifFalse: [self error: self playableCharacterShouldBeInsideRoomErrorDescription ].
	((aPlayableCharacter isToTheRight: 0) and: [aPlayableCharacter isToTheLeft: aWidth - 1])
		 ifFalse: [self error: self playableCharacterShouldBeInsideRoomErrorDescription ].
		
	positionsForStageObjects do: [:aPosition |
		((aPosition x between: 0 and: aWidth) and: [aPosition y between: 0 and: aHeight])
			ifFalse: [self error: self stageObjectsShouldBeWithinRoomLimitsErrorDescription ]
			].
		
	^self new initializePlaying: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth ! !

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 18:15:11'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 18:15:11'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 18:15:11'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 18:15:11'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 18:15:11'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 18:15:11'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 18:15:11'!
PASSED!

!testRun: #RoomTest #test08ObjectsPositionsShouldBeWithinRoomLimits stamp: 'AM 12/10/2020 18:15:11'!
FAILURE!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 18:15:11'!
PASSED!

!testRun: #RoomTest #test08ObjectsPositionsShouldBeWithinRoomLimits stamp: 'AM 12/10/2020 18:15:11'!
FAILURE!
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:15:36'!
test09ObjectsPositionsShouldBeWithinRoomLimits

	| backpack character objects |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 2@0 heading: #North.
	objects := Dictionary new.
	objects at: 0@0 put: (PointsPortableObject named: 'piedra' weighing: 4 worth: 8). 
	objects at: -1@0 put: (NoPointsPortableObject named: 'piedra' weighing: 4). 
	objects at: 0@-1 put: (NoPointsPortableObject named: 'piedra' weighing: 4). 
	objects at: 2@0 put: (NoPointsPortableObject named: 'piedra' weighing: 4). 
	objects at: 0@2 put: (NoPointsPortableObject named: 'piedra' weighing: 4). 
	
	self should: [ Room playing: character withObjectsAt: objects ofHeight: 2 andWidth: 2 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room stageObjectsShouldBeWithinRoomLimitsErrorDescription.! !

!methodRemoval: RoomTest #test08ObjectsPositionsShouldBeWithinRoomLimits stamp: 'AM 12/10/2020 18:15:36'!
test08ObjectsPositionsShouldBeWithinRoomLimits

	| backpack character objects |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 2@0 heading: #North.
	objects := Dictionary new.
	objects at: 0@0 put: (PointsPortableObject named: 'piedra' weighing: 4 worth: 8). 
	objects at: -1@0 put: (NoPointsPortableObject named: 'piedra' weighing: 4). 
	objects at: 0@-1 put: (NoPointsPortableObject named: 'piedra' weighing: 4). 
	objects at: 2@0 put: (NoPointsPortableObject named: 'piedra' weighing: 4). 
	objects at: 0@2 put: (NoPointsPortableObject named: 'piedra' weighing: 4). 
	
	self should: [ Room playing: character withObjectsAt: objects ofHeight: 2 andWidth: 2 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room stageObjectsShouldBeWithinRoomLimitsErrorDescription.!

!methodRemoval: RoomTest #test09ObjectsPositionsShouldBeWithinRoomLimits stamp: 'AM 12/10/2020 18:16:14'!
test09ObjectsPositionsShouldBeWithinRoomLimits

	| backpack character objects |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 2@0 heading: #North.
	objects := Dictionary new.
	objects at: 0@0 put: (PointsPortableObject named: 'piedra' weighing: 4 worth: 8). 
	objects at: -1@0 put: (NoPointsPortableObject named: 'piedra' weighing: 4). 
	objects at: 0@-1 put: (NoPointsPortableObject named: 'piedra' weighing: 4). 
	objects at: 2@0 put: (NoPointsPortableObject named: 'piedra' weighing: 4). 
	objects at: 0@2 put: (NoPointsPortableObject named: 'piedra' weighing: 4). 
	
	self should: [ Room playing: character withObjectsAt: objects ofHeight: 2 andWidth: 2 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room stageObjectsShouldBeWithinRoomLimitsErrorDescription.!
!Room class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 18:17:04' prior: 50870569!
playing: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth 
	
	aHeight > 0 ifFalse: [ self error: self heightMustBePositiveErrorDescription ].
	aWidth > 0 ifFalse: [ self error: self widthMustBePositiveErrorDescription ].
	
	aHeight isInteger ifFalse: [ self error: self heightMustBeAnIntegerErrorDescription ].
	aWidth isInteger ifFalse: [ self error: self widthMustBeAnIntegerErrorDescription ].
	
	((aPlayableCharacter isAbove: 0) and: [aPlayableCharacter isBelow: aHeight - 1])
		 ifFalse: [self error: self playableCharacterShouldBeInsideRoomErrorDescription ].
	((aPlayableCharacter isToTheRight: 0) and: [aPlayableCharacter isToTheLeft: aWidth - 1])
		 ifFalse: [self error: self playableCharacterShouldBeInsideRoomErrorDescription ].
		
	positionsForStageObjects do: [:aPosition |
		((aPosition x between: 0 and: aWidth) and: [aPosition y between: 0 and: aHeight])
			ifFalse: [self error: self stageObjectsShouldBeWithinRoomLimitsErrorDescription ]
			].
		
	^self new initializePlaying: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth ! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:17:56' prior: 50869703!
test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit

	| backpack character room |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@-1 heading: #North.
	room := Room playing: character withObjectsAt: Dictionary new ofHeight: 2 andWidth: 2.
	
	self should: [ room placePlayer: character ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room playableCharacterShouldBeInsideRoomErrorDescription .! !

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 18:18:17'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 18:18:18'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 18:18:18'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 18:18:18'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 18:18:18'!
ERROR!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 18:18:18'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 18:18:18'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 18:18:18'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 18:18:18'!
ERROR!
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:19:16' prior: 50870775!
test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit

	| backpack character room |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North.
	room := Room playing: character withObjectsAt: Dictionary new ofHeight: 2 andWidth: 2.
	
	self should: [ room placePlayer: character ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room playableCharacterShouldBeInsideRoomErrorDescription .! !

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 18:19:18'!
ERROR!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'AM 12/10/2020 18:19:35'!
Object subclass: #Room
	instanceVariableNames: 'playableCharacter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'AM 12/10/2020 18:19:36'!
Object subclass: #Room
	instanceVariableNames: 'playableCharacter positionsForStageObjects_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'AM 12/10/2020 18:19:37'!
Object subclass: #Room
	instanceVariableNames: 'playableCharacter positionsForStageObjects_CHANGE_ME height'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'AM 12/10/2020 18:19:37'!
Object subclass: #Room
	instanceVariableNames: 'playableCharacter positionsForStageObjects_CHANGE_ME height width'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'initialization' stamp: 'AM 12/10/2020 18:19:37'!
initializePlaying: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth 
	self shouldBeImplemented.
	playableCharacter := aPlayableCharacter.
	positionsForStageObjects_CHANGE_ME := positionsForStageObjects.
	height := aHeight.
	width := aWidth.! !
!Room methodsFor: 'initialization' stamp: 'AM 12/10/2020 18:19:50' prior: 50870884!
initializePlaying: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth 
	
	playableCharacter := aPlayableCharacter.
	positionsForStageObjects_CHANGE_ME := positionsForStageObjects.
	height := aHeight.
	width := aWidth.! !

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'AM 12/10/2020 18:19:55'!
Object subclass: #Room
	instanceVariableNames: 'playableCharacter stageObjects height width'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 18:19:55' prior: 50870896!
initializePlaying: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth 
	
	playableCharacter := aPlayableCharacter.
	stageObjects := positionsForStageObjects.
	height := aHeight.
	width := aWidth.! !

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 18:22:16'!
ERROR!
!Room methodsFor: 'placing' stamp: 'AM 12/10/2020 18:22:36'!
placePlayer: aPlayableCharacter 
	self shouldBeImplemented.! !
!Room methodsFor: 'placing' stamp: 'AM 12/10/2020 18:22:57' prior: 50870930!
placePlayer: aPlayableCharacter 
	! !
!Room methodsFor: 'placing' stamp: 'AM 12/10/2020 18:23:41' prior: 50870935!
placePlayer: aPlayableCharacter 
	
	((aPlayableCharacter isAbove: 0) and: [aPlayableCharacter isBelow: height - 1])
		 ifFalse: [self error: self playableCharacterShouldBeInsideRoomErrorDescription ].
	((aPlayableCharacter isToTheRight: 0) and: [aPlayableCharacter isToTheLeft: width - 1])
		 ifFalse: [self error: self playableCharacterShouldBeInsideRoomErrorDescription ].! !

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 18:23:43'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 18:23:43'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 18:23:43'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 18:23:43'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 18:23:43'!
FAILURE!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 18:23:44'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 18:23:44'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 18:23:44'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 18:23:44'!
FAILURE!
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:24:41' prior: 50870827!
test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit

	| backpack character room |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North.
	room := Room playing: character withObjectsAt: Dictionary new ofHeight: 2 andWidth: 2.
	
	self should: [ room placePlayer: character ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			]! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:25:10' prior: 50869646!
test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit

	| backpack character room |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@2 heading: #North.
	room := Room playing: character withObjectsAt: Dictionary new ofHeight: 2 andWidth: 2.
	
	self should: [ Room playing: character withObjectsAt: Dictionary new ofHeight: 2 andWidth: 2 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room playableCharacterShouldBeInsideRoomErrorDescription.! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:25:42' prior: 50871009!
test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit

	| backpack character room |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@2 heading: #North.
	room := Room playing: character withObjectsAt: Dictionary new ofHeight: 2 andWidth: 2.
	
	self should: [ room placePlayer: character ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			]! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:25:48' prior: 50870227!
test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit

	| backpack character room |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: -1@0 heading: #North.
	room := Room playing: character withObjectsAt: Dictionary new ofHeight: 2 andWidth: 2.
	
	self should: [ room placePlayer: character ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			]! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:25:54' prior: 50870308!
test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit

	| backpack character room |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 2@0 heading: #North.
	room := Room playing: character withObjectsAt: Dictionary new ofHeight: 2 andWidth: 2.
	
	self should: [ room placePlayer: character ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			]! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:28:28' prior: 50870987!
test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit

	| backpack character room |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North.
	
	self should: [ room placePlayer: character ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			]! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:28:37' prior: 50871096!
test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit

	| backpack character room |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North playingIn: room.
	
	self should: [ room placePlayer: character ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			]! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:29:40' prior: 50871116!
test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit

	| backpack room |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	self should: [ PlayableCharacter named: 'Agustin' using: backpack  at: 0@-1 heading: #North playingIn: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			]! !

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 18:29:45'!
ERROR!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 18:29:58'!
ERROR!
!Room class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 18:30:08'!
ofHeight: aSmallInteger andWidth: aSmallInteger2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeOfHeight: aSmallInteger andWidth: aSmallInteger2 ! !
!Room class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 18:30:24' prior: 50871163!
ofHeight: aHeight andWidth: aWidth 
	
	^self new initializeOfHeight: aHeight andWidth: aWidth ! !

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 18:30:26'!
ERROR!
!Room methodsFor: 'initialization' stamp: 'AM 12/10/2020 18:30:38'!
initializeOfHeight: aHeight andWidth: aWidth 
	self shouldBeImplemented.
	height := aHeight.
	width := aWidth.! !
!Room methodsFor: 'initialization' stamp: 'AM 12/10/2020 18:30:42' prior: 50871183!
initializeOfHeight: aHeight andWidth: aWidth 
	
	height := aHeight.
	width := aWidth.! !

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 18:30:43'!
ERROR!
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 18:30:54'!
named: aString using: aBackpack at: aPoint heading: aSymbol playingIn: aRoom 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString using: aBackpack at: aPoint heading: aSymbol playingIn: aRoom ! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 18:31:12' prior: 50871200!
named: aName using: aBackpack at: aPoint heading: aCardinalPoint playingIn: aRoom 
	
	^self new initializeNamed: aName using: aBackpack at: aPoint heading: aCardinalPoint playingIn: aRoom ! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 18:31:40' prior: 50871212!
named: aName using: aBackpack at: aPoint heading: aCardinalPoint playingIn: aRoom 

	aRoom place: self at: aPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPoint heading: aCardinalPoint playingIn: aRoom ! !

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 18:31:44'!
ERROR!
!Room methodsFor: 'placing' stamp: 'AM 12/10/2020 18:32:01'!
place: aClass at: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'placing' stamp: 'AM 12/10/2020 18:32:12' prior: 50871235!
place: aCharacter at: aPoint 
	self shouldBeImplemented.! !

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'AM 12/10/2020 18:33:17'!
Object subclass: #Room
	instanceVariableNames: 'playableCharacter stageObjects height width cells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'placing' stamp: 'AM 12/10/2020 18:33:10' prior: 50871240!
place: aCharacter at: aPoint 
	
	self isWithinBounds: aPoint.
	cells at: aPoint put: aCharacter.! !
!Room methodsFor: 'placing' stamp: 'AM 12/10/2020 18:33:27' prior: 50871253!
place: aCharacter at: aPoint 
	
	self assertIsWithinBounds: aPoint.
	cells at: aPoint put: aCharacter.! !

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 18:33:31'!
ERROR!
!Room methodsFor: 'placing' stamp: 'AM 12/10/2020 18:34:16'!
assertIsWithinBounds: aPoint.
	
	aPoint x between: 0 and: width - 1.
	aPoint y between: 0 and: height - 1.! !

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 18:34:20'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 18:34:20'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 18:34:20'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 18:34:20'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 18:34:20'!
FAILURE!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 18:34:20'!
ERROR!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 18:34:20'!
ERROR!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 18:34:20'!
ERROR!
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:34:52' prior: 50871030!
test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit

	| backpack room |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	self should: [ PlayableCharacter named: 'Agustin' using: backpack  at: 0@2 heading: #North playingIn: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			]! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:35:11' prior: 50871052!
test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit

	| backpack room |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	self should: [ PlayableCharacter named: 'Agustin' using: backpack  at: -1@0 heading: #North playingIn: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			]! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:35:27' prior: 50871074!
test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit

	| backpack room |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	self should: [ PlayableCharacter named: 'Agustin' using: backpack  at: 2@0 heading: #North playingIn: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			]! !

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 18:35:33'!
FAILURE!
!Room methodsFor: 'placing' stamp: 'AM 12/10/2020 18:36:42' prior: 50871269!
assertIsWithinBounds: aPoint.
	
	((aPoint x between: 0 and: width - 1) and: [ aPoint y between: 0 and: height - 1 ])
		ifFalse: [ self error: self class playableCharacterShouldBeInsideRoomErrorDescription ].! !
!Room class methodsFor: 'error descriptions' stamp: 'AM 12/10/2020 18:37:16' prior: 50869663!
playableCharacterShouldBeInsideRoomErrorDescription
	
	^ 'Placing should be done withing board limits.'! !

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 18:37:24'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AM 12/10/2020 18:37:25'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AM 12/10/2020 18:37:25'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AM 12/10/2020 18:37:25'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AM 12/10/2020 18:37:25'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AM 12/10/2020 18:37:25'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AM 12/10/2020 18:37:25'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 18:37:25'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 18:37:25'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AM 12/10/2020 18:37:25'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AM 12/10/2020 18:37:25'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AM 12/10/2020 18:37:25'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AM 12/10/2020 18:37:25'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AM 12/10/2020 18:37:25'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AM 12/10/2020 18:37:25'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AM 12/10/2020 18:37:25'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 18:37:25'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 18:37:25'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 18:37:25'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 18:37:25'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 18:37:25'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 18:37:25'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 18:37:25'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 18:37:25'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 18:37:25'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 18:37:25'!
PASSED!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 18:37:25'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 18:37:25'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 18:37:25'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 18:37:25'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 18:37:25'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 18:37:25'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 18:37:25'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 18:37:25'!
PASSED!
!Room class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 18:37:59' prior: 50871173!
ofHeight: aHeight andWidth: aWidth
	
	aHeight > 0 ifFalse: [ self error: self heightMustBePositiveErrorDescription ].
	aWidth > 0 ifFalse: [ self error: self widthMustBePositiveErrorDescription ].
	
	aHeight isInteger ifFalse: [ self error: self heightMustBeAnIntegerErrorDescription ].
	aWidth isInteger ifFalse: [ self error: self widthMustBeAnIntegerErrorDescription ].
	
	^self new initializeOfHeight: aHeight andWidth: aWidth ! !
!RoomTest methodsFor: 'tests - dimensions' stamp: 'AM 12/10/2020 18:38:50' prior: 50869155!
test03HeightOfRoomShouldBeAnInteger

	
	
	self should: [ Room ofHeight: 0.5 andWidth: 1 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room heightMustBeAnIntegerErrorDescription.! !
!RoomTest methodsFor: 'tests - dimensions' stamp: 'AM 12/10/2020 18:39:04' prior: 50871523!
test03HeightOfRoomShouldBeAnInteger

	self should: [ Room ofHeight: 0.5 andWidth: 1 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room heightMustBeAnIntegerErrorDescription.! !
!RoomTest methodsFor: 'tests - dimensions' stamp: 'AM 12/10/2020 18:39:17' prior: 50869235!
test04WidthOfRoomShouldBeAnInteger

	self should: [ Room ofHeight: 1 andWidth: 0.5 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room widthMustBeAnIntegerErrorDescription.! !
!RoomTest methodsFor: 'tests - dimensions' stamp: 'AM 12/10/2020 18:39:28' prior: 50869109!
test02WidthOfRoomShouldBePositive
	
	self should: [ Room ofHeight: 1 andWidth: 0 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room widthMustBePositiveErrorDescription.! !
!RoomTest methodsFor: 'tests - dimensions' stamp: 'AM 12/10/2020 18:39:37' prior: 50869079!
test01HeightOfRoomShouldBePositive
	
	self should: [ Room  ofHeight: 0 andWidth: 1 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room heightMustBePositiveErrorDescription.! !
!RoomTest methodsFor: 'tests - dimensions' stamp: 'AM 12/10/2020 18:39:39' prior: 50871559!
test01HeightOfRoomShouldBePositive
	
	self should: [ Room ofHeight: 0 andWidth: 1 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room heightMustBePositiveErrorDescription.! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:41:07'!
test09MovingPlayableCaracterShouldStayWithinBoardBounds

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 2@0 heading: #North playingIn: room .
	
	self should: [ character ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			]! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:41:17' prior: 50871577!
test09MovingPlayableCaracterShouldStayWithinBoardBounds

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 2@0 heading: #North playingIn: room .
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			]! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:42:20' prior: 50871137!
test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit

	| backpack room |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	self should: [ PlayableCharacter named: 'Agustin' using: backpack  at: 0@-1 heading: #North playingIn: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			]! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:42:30'!
test09MovingPlayableCharacterShouldStayWithinBoardBounds

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 2@0 heading: #North playingIn: room .
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			]! !

!methodRemoval: RoomTest #test09MovingPlayableCaracterShouldStayWithinBoardBounds stamp: 'AM 12/10/2020 18:42:30'!
test09MovingPlayableCaracterShouldStayWithinBoardBounds

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 2@0 heading: #North playingIn: room .
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			]!
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:43:00' prior: 50871617!
test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit

	| backpack room |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	self should: [ PlayableCharacter named: 'Agustin' using: backpack  at: 0@-1 heading: #North playingIn: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:43:04' prior: 50871305!
test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit

	| backpack room |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	self should: [ PlayableCharacter named: 'Agustin' using: backpack  at: 0@2 heading: #North playingIn: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:43:07' prior: 50871324!
test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit

	| backpack room |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	self should: [ PlayableCharacter named: 'Agustin' using: backpack  at: -1@0 heading: #North playingIn: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:43:10' prior: 50871343!
test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit

	| backpack room |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	self should: [ PlayableCharacter named: 'Agustin' using: backpack  at: 2@0 heading: #North playingIn: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:43:49' prior: 50871635!
test09MovingPlayableCharacterShouldStayWithinBoardBounds

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North playingIn: room .
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 0@0 heading: #North).
			]! !

!testRun: #RoomTest #test09MovingPlayableCharacterShouldStayWithinBoardBounds stamp: 'AM 12/10/2020 18:44:11'!
ERROR!

!classDefinition: #PlayableCharacter category: 'ISW1-2020-2C-2doParcial' stamp: 'AM 12/10/2020 18:44:59'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacter methodsFor: 'moving' stamp: 'AM 12/10/2020 18:44:56' prior: 50868350!
moveForward
	
	room canMoveTo: position + heading forwardPoint.
	position := position + heading forwardPoint! !

!testRun: #RoomTest #test09MovingPlayableCharacterShouldStayWithinBoardBounds stamp: 'AM 12/10/2020 18:45:37'!
ERROR!
!Room methodsFor: 'initialization' stamp: 'AM 12/10/2020 18:46:06' prior: 50871190!
initializeOfHeight: aHeight andWidth: aWidth 
	
	height := aHeight.
	width := aWidth.
	cells := Dictionary new.! !

!methodRemoval: Room #initializePlaying:withObjectsAt:ofHeight:andWidth: stamp: 'AM 12/10/2020 18:46:11'!
initializePlaying: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth 
	
	playableCharacter := aPlayableCharacter.
	stageObjects := positionsForStageObjects.
	height := aHeight.
	width := aWidth.!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 18:46:18'!
ERROR!
!Room methodsFor: 'testing' stamp: 'AM 12/10/2020 18:46:32'!
isEmpty
	self shouldBeImplemented.! !
!Room methodsFor: 'testing' stamp: 'AM 12/10/2020 18:46:37' prior: 50871820!
isEmpty
	
^ 	cells isEmpty.! !
!Room methodsFor: 'testing' stamp: 'AM 12/10/2020 18:46:43' prior: 50871824!
isEmpty
	
	^ cells isEmpty.! !

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 18:46:45'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AM 12/10/2020 18:46:45'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AM 12/10/2020 18:46:45'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AM 12/10/2020 18:46:45'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AM 12/10/2020 18:46:45'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AM 12/10/2020 18:46:45'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AM 12/10/2020 18:46:45'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 18:46:45'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 18:46:45'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AM 12/10/2020 18:46:45'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AM 12/10/2020 18:46:45'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AM 12/10/2020 18:46:45'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AM 12/10/2020 18:46:45'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AM 12/10/2020 18:46:45'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AM 12/10/2020 18:46:45'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AM 12/10/2020 18:46:45'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 18:46:45'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 18:46:45'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 18:46:45'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 18:46:45'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 18:46:45'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 18:46:45'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 18:46:45'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 18:46:45'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 18:46:45'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 18:46:45'!
PASSED!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 18:46:45'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 18:46:45'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 18:46:45'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 18:46:45'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 18:46:45'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 18:46:45'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 18:46:45'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 18:46:45'!
PASSED!

!testRun: #RoomTest #test09MovingPlayableCharacterShouldStayWithinBoardBounds stamp: 'AM 12/10/2020 18:46:45'!
ERROR!
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 18:47:30'!
canPlaceAt: aPoint ! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 18:48:47'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint playing: aRoom  
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading ! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 18:48:47' prior: 50868002!
test02_backwardWhenHeadingNorthDecrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North playing: self .

	playableCharacter moveBackward.

	self assert: (playableCharacter isAt: 1@1 heading: #North)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 18:48:48' prior: 50868064!
test07_movingWhenHeadingWestWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West playing: self .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #South)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 18:48:48' prior: 50868091!
test09_canTakePortableObjects

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West playing: self .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 18:48:48' prior: 50868036!
test05_movingWhenHeadingEastWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #East playing: self .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 2@2 heading: #North)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 18:48:48' prior: 50868078!
test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid

	self
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #X playing: self ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: PlayableCharacter invalidCardinalPointErrorDescription equals: anError messageText ]! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 18:48:48' prior: 50868025!
test04_rotateLeftWhenHeadingNorthHeadsWest

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North playing: self .

	playableCharacter rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #West)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 18:48:48' prior: 50867990!
test01_forwardWhenHeadingNorthIncrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North playing: self .

	playableCharacter moveForward.

	self assert: (playableCharacter isAt: 1@3 heading: #North)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 18:48:48' prior: 50868050!
test06_movingWhenHeadingSouthWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South playing: self .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@1 heading: #East)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 18:48:49' prior: 50868104!
test10_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| playableCharacter paper key |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West playing: self .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 18:48:49' prior: 50868014!
test03_rotateRightWhenHeadingNorthHeadsEast

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North playing: self .

	playableCharacter rotateRight.

	self assert: (playableCharacter isAt: 1@2 heading: #East)! !

!methodRemoval: PlayableCharacter class #named:using:at:heading: stamp: 'AM 12/10/2020 18:48:49'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint 
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 18:49:02'!
named: aName using: aBackpack at: aPoint heading: aCardinalPoint playingInn: aRoom 

	aRoom place: self at: aPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPoint heading: aCardinalPoint playingIn: aRoom ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 18:49:02' prior: 50871755!
test09MovingPlayableCharacterShouldStayWithinBoardBounds

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North playingInn: room .
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 0@0 heading: #North).
			]! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 18:49:02' prior: 50871735!
test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit

	| backpack room |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	self should: [ PlayableCharacter named: 'Agustin' using: backpack  at: 2@0 heading: #North playingInn: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 18:49:02' prior: 50871695!
test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit

	| backpack room |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	self should: [ PlayableCharacter named: 'Agustin' using: backpack  at: 0@2 heading: #North playingInn: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 18:49:03' prior: 50871715!
test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit

	| backpack room |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	self should: [ PlayableCharacter named: 'Agustin' using: backpack  at: -1@0 heading: #North playingInn: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 18:49:03' prior: 50871675!
test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit

	| backpack room |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	self should: [ PlayableCharacter named: 'Agustin' using: backpack  at: 0@-1 heading: #North playingInn: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]! !

!methodRemoval: PlayableCharacter class #named:using:at:heading:playingIn: stamp: 'AM 12/10/2020 18:49:03'!
named: aName using: aBackpack at: aPoint heading: aCardinalPoint playingIn: aRoom 

	aRoom place: self at: aPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPoint heading: aCardinalPoint playingIn: aRoom !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 18:49:12'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint playingIn: aRoom  
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading ! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 18:49:12' prior: 50872115!
test03_rotateRightWhenHeadingNorthHeadsEast

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North playingIn: self .

	playableCharacter rotateRight.

	self assert: (playableCharacter isAt: 1@2 heading: #East)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 18:49:12' prior: 50871977!
test02_backwardWhenHeadingNorthDecrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North playingIn: self .

	playableCharacter moveBackward.

	self assert: (playableCharacter isAt: 1@1 heading: #North)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 18:49:12' prior: 50872074!
test06_movingWhenHeadingSouthWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South playingIn: self .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@1 heading: #East)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 18:49:12' prior: 50872005!
test09_canTakePortableObjects

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West playingIn: self .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 18:49:12' prior: 50872034!
test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid

	self
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #X playingIn: self ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: PlayableCharacter invalidCardinalPointErrorDescription equals: anError messageText ]! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 18:49:13' prior: 50872048!
test04_rotateLeftWhenHeadingNorthHeadsWest

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North playingIn: self .

	playableCharacter rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #West)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 18:49:13' prior: 50872019!
test05_movingWhenHeadingEastWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #East playingIn: self .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 2@2 heading: #North)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 18:49:13' prior: 50872061!
test01_forwardWhenHeadingNorthIncrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North playingIn: self .

	playableCharacter moveForward.

	self assert: (playableCharacter isAt: 1@3 heading: #North)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 18:49:13' prior: 50872089!
test10_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| playableCharacter paper key |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West playingIn: self .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 18:49:13' prior: 50871990!
test07_movingWhenHeadingWestWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West playingIn: self .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #South)! !

!methodRemoval: PlayableCharacter class #named:using:at:heading:playing: stamp: 'AM 12/10/2020 18:49:13'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint playing: aRoom  
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 18:50:07' prior: 50872137!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint playingInn: aRoom 

	| newHeading |
	
	aRoom place: self at: aPosition.

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading playingIn: aRoom! !

!methodRemoval: PlayableCharacter class #named:using:at:heading:playingIn: stamp: 'AM 12/10/2020 18:50:12'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint playingIn: aRoom  
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 18:50:25'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint playingIn: aRoom 

	| newHeading |
	
	aRoom place: self at: aPosition.

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading playingIn: aRoom! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 18:50:25' prior: 50872168!
test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit

	| backpack room |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	self should: [ PlayableCharacter named: 'Agustin' using: backpack  at: 2@0 heading: #North playingIn: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 18:50:25' prior: 50872227!
test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit

	| backpack room |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	self should: [ PlayableCharacter named: 'Agustin' using: backpack  at: 0@-1 heading: #North playingIn: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 18:50:26' prior: 50872147!
test09MovingPlayableCharacterShouldStayWithinBoardBounds

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North playingIn: room .
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 0@0 heading: #North).
			]! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 18:50:26' prior: 50872207!
test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit

	| backpack room |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	self should: [ PlayableCharacter named: 'Agustin' using: backpack  at: -1@0 heading: #North playingIn: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 18:50:26' prior: 50872188!
test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit

	| backpack room |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	self should: [ PlayableCharacter named: 'Agustin' using: backpack  at: 0@2 heading: #North playingIn: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]! !

!methodRemoval: PlayableCharacter class #named:using:at:heading:playingInn: stamp: 'AM 12/10/2020 18:50:26'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint playingInn: aRoom 

	| newHeading |
	
	aRoom place: self at: aPosition.

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading playingIn: aRoom!
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 18:50:32' prior: 50872455!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint playingIn: aRoom 

	| newHeading |
	
	aRoom place: self at: aPosition.

	newHeading := self headingFor: aCardinalPoint.
	
	^ self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading playingIn: aRoom! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AM 12/10/2020 18:50:34'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AM 12/10/2020 18:50:34'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AM 12/10/2020 18:50:34'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AM 12/10/2020 18:50:34'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AM 12/10/2020 18:50:34'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AM 12/10/2020 18:50:34'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 18:50:34'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 18:50:34'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AM 12/10/2020 18:50:34'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AM 12/10/2020 18:50:34'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AM 12/10/2020 18:50:34'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AM 12/10/2020 18:50:34'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AM 12/10/2020 18:50:34'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AM 12/10/2020 18:50:34'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AM 12/10/2020 18:50:34'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 18:50:34'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 18:50:34'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 18:50:34'!
ERROR!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 18:50:34'!
ERROR!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 18:50:34'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 18:50:34'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 18:50:34'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 18:50:34'!
FAILURE!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 18:50:34'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 18:50:34'!
ERROR!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 18:50:34'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 18:50:34'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 18:50:34'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 18:50:34'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 18:50:34'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 18:50:34'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 18:50:34'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 18:50:34'!
PASSED!

!testRun: #RoomTest #test09MovingPlayableCharacterShouldStayWithinBoardBounds stamp: 'AM 12/10/2020 18:50:34'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 18:50:37'!
ERROR!
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 18:51:09'!
place: aPlayableCharacter at: aPoint ! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 18:51:12'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 18:51:12'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 18:51:12'!
ERROR!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 18:51:12'!
ERROR!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 18:51:12'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 18:51:12'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 18:51:12'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 18:51:12'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 18:51:12'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 18:51:12'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 18:51:15'!
ERROR!
!PlayableCharacter methodsFor: 'initialization' stamp: 'AM 12/10/2020 18:51:42'!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading playingIn: aRoom

	room := aRoom.
	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 18:51:44'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 18:51:44'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 18:51:44'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 18:51:44'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 18:51:44'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 18:51:44'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 18:51:44'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 18:51:44'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 18:51:44'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 18:51:44'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 18:51:47'!
ERROR!
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 18:52:03'!
canMoveTo: aPoint ! !

!methodRemoval: PlayableCharacterTest #canPlaceAt: stamp: 'AM 12/10/2020 18:52:03'!
canPlaceAt: aPoint !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 18:52:09'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 18:52:09'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 18:52:09'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 18:52:09'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 18:52:09'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 18:52:09'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 18:52:09'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 18:52:09'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 18:52:10'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 18:52:10'!
PASSED!

!methodRemoval: PlayableCharacter #initializeNamed:using:at:heading: stamp: 'AM 12/10/2020 18:52:15'!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading 

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading!

!methodRemoval: Room class #playing:withObjectsAt:ofHeight:andWidth: stamp: 'AM 12/10/2020 18:52:35'!
playing: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth 
	
	aHeight > 0 ifFalse: [ self error: self heightMustBePositiveErrorDescription ].
	aWidth > 0 ifFalse: [ self error: self widthMustBePositiveErrorDescription ].
	
	aHeight isInteger ifFalse: [ self error: self heightMustBeAnIntegerErrorDescription ].
	aWidth isInteger ifFalse: [ self error: self widthMustBeAnIntegerErrorDescription ].
	
	((aPlayableCharacter isAbove: 0) and: [aPlayableCharacter isBelow: aHeight - 1])
		 ifFalse: [self error: self playableCharacterShouldBeInsideRoomErrorDescription ].
	((aPlayableCharacter isToTheRight: 0) and: [aPlayableCharacter isToTheLeft: aWidth - 1])
		 ifFalse: [self error: self playableCharacterShouldBeInsideRoomErrorDescription ].
		
	positionsForStageObjects do: [:aPosition |
		((aPosition x between: 0 and: aWidth) and: [aPosition y between: 0 and: aHeight])
			ifFalse: [self error: self stageObjectsShouldBeWithinRoomLimitsErrorDescription ]
			].
		
	^self new initializePlaying: aPlayableCharacter withObjectsAt: positionsForStageObjects ofHeight: aHeight andWidth: aWidth !

!testRun: #RoomTest #test09MovingPlayableCharacterShouldStayWithinBoardBounds stamp: 'AM 12/10/2020 18:52:45'!
ERROR!
!Room methodsFor: 'testing' stamp: 'AM 12/10/2020 18:52:59'!
canMoveTo: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'testing' stamp: 'AM 12/10/2020 18:54:02' prior: 50872916!
canMoveTo: aPosition

	self assertIsWithinBounds: aPosition.
	
	! !

!testRun: #RoomTest #test09MovingPlayableCharacterShouldStayWithinBoardBounds stamp: 'AM 12/10/2020 18:54:03'!
FAILURE!

!testRun: #RoomTest #test09MovingPlayableCharacterShouldStayWithinBoardBounds stamp: 'AM 12/10/2020 18:54:17'!
FAILURE!
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:54:42' prior: 50872507!
test09MovingPlayableCharacterShouldStayWithinBoardBounds

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@1 heading: #North playingIn: room .
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 0@0 heading: #North).
			]! !

!testRun: #RoomTest #test09MovingPlayableCharacterShouldStayWithinBoardBounds stamp: 'AM 12/10/2020 18:54:44'!
FAILURE!
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:55:01' prior: 50872933!
test09MovingPlayableCharacterShouldStayWithinBoardBounds

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@1 heading: #North playingIn: room .
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 1@1 heading: #North).
			]! !

!testRun: #RoomTest #test09MovingPlayableCharacterShouldStayWithinBoardBounds stamp: 'AM 12/10/2020 18:55:04'!
PASSED!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 18:55:04'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 18:55:04'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 18:55:04'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 18:55:04'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 18:55:04'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 18:55:04'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 18:55:04'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 18:55:04'!
PASSED!

!testRun: #RoomTest #test09MovingPlayableCharacterShouldStayWithinBoardBounds stamp: 'AM 12/10/2020 18:55:04'!
PASSED!
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:55:29'!
test09ShouldNotMovePlayableCharacterToOccupiedCell

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@1 heading: #North playingIn: room .
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 1@1 heading: #North).
			]! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:55:38'!
test10ShouldNotMovePlayableCharacterToOccupiedCell

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@1 heading: #North playingIn: room .
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 1@1 heading: #North).
			]! !

!methodRemoval: RoomTest #test09ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 18:55:38'!
test09ShouldNotMovePlayableCharacterToOccupiedCell

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@1 heading: #North playingIn: room .
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 1@1 heading: #North).
			]!
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:55:55'!
test09MovingPlayableCharacterForwardShouldStayWithinBoardBounds

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@1 heading: #North playingIn: room .
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 1@1 heading: #North).
			]! !

!methodRemoval: RoomTest #test09MovingPlayableCharacterShouldStayWithinBoardBounds stamp: 'AM 12/10/2020 18:55:56'!
test09MovingPlayableCharacterShouldStayWithinBoardBounds

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@1 heading: #North playingIn: room .
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 1@1 heading: #North).
			]!
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:56:18'!
test09MovingPlayableCharacterBackwardsShouldStayWithinBoardBounds

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North playingIn: room .
	
	self should: [ character moveBackward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 1@1 heading: #North).
			]! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:56:24' prior: 50873123!
test09MovingPlayableCharacterBackwardsShouldStayWithinBoardBounds

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North playingIn: room .
	
	self should: [ character moveBackward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 0@0 heading: #North).
			]! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:56:33'!
test10MovingPlayableCharacterBackwardsShouldStayWithinBoardBounds

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North playingIn: room .
	
	self should: [ character moveBackward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 0@0 heading: #North).
			]! !

!methodRemoval: RoomTest #test09MovingPlayableCharacterBackwardsShouldStayWithinBoardBounds stamp: 'AM 12/10/2020 18:56:33'!
test09MovingPlayableCharacterBackwardsShouldStayWithinBoardBounds

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North playingIn: room .
	
	self should: [ character moveBackward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 0@0 heading: #North).
			]!
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:56:40'!
test11ShouldNotMovePlayableCharacterToOccupiedCell

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@1 heading: #North playingIn: room .
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 1@1 heading: #North).
			]! !

!methodRemoval: RoomTest #test10ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 18:56:40'!
test10ShouldNotMovePlayableCharacterToOccupiedCell

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@1 heading: #North playingIn: room .
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 1@1 heading: #North).
			]!

!testRun: #RoomTest #test10MovingPlayableCharacterBackwardsShouldStayWithinBoardBounds stamp: 'AM 12/10/2020 18:56:43'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'AM 12/10/2020 18:57:04' prior: 50868345!
moveBackward
	
	room canMoveTo: position - heading forwardPoint.
	position := position - heading forwardPoint ! !

!methodRemoval: PlayableCharacter #isAbove: stamp: 'AM 12/10/2020 18:57:11'!
isAbove: aYCoordinate 
	
	^ aYCoordinate <= position y!

!methodRemoval: PlayableCharacter #isBelow: stamp: 'AM 12/10/2020 18:57:22'!
isBelow: aYCoordinate 
	^ aYCoordinate >= position y!

!methodRemoval: PlayableCharacter #isToTheLeft: stamp: 'AM 12/10/2020 18:57:26'!
isToTheLeft: anXCoordinate 
	
	^ anXCoordinate >= position x!

!methodRemoval: PlayableCharacter #isToTheRight: stamp: 'AM 12/10/2020 18:57:29'!
isToTheRight: anXCoordinate 
	
	^ anXCoordinate <= position x!

!methodRemoval: Room #placePlayer: stamp: 'AM 12/10/2020 18:57:37'!
placePlayer: aPlayableCharacter 
	
	((aPlayableCharacter isAbove: 0) and: [aPlayableCharacter isBelow: height - 1])
		 ifFalse: [self error: self playableCharacterShouldBeInsideRoomErrorDescription ].
	((aPlayableCharacter isToTheRight: 0) and: [aPlayableCharacter isToTheLeft: width - 1])
		 ifFalse: [self error: self playableCharacterShouldBeInsideRoomErrorDescription ].!
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:58:40' prior: 50873211!
test11ShouldNotMovePlayableCharacterToOccupiedCell

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@1 heading: #North playingIn: room .
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 1@1 heading: #North).
			]! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:59:11'!
test11NoPointsPortableObjectInitialPOsitionShouldBeWithinRoomLimits

	| backpack room |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	self should: [ PlayableCharacter named: 'Agustin' using: backpack  at: 2@0 heading: #North playingIn: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:59:19'!
test11NoPointsPortableObjectInitialPositionShouldBeWithinRoomLimits

	| backpack room |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	self should: [ PlayableCharacter named: 'Agustin' using: backpack  at: 2@0 heading: #North playingIn: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]! !

!methodRemoval: RoomTest #test11NoPointsPortableObjectInitialPOsitionShouldBeWithinRoomLimits stamp: 'AM 12/10/2020 18:59:19'!
test11NoPointsPortableObjectInitialPOsitionShouldBeWithinRoomLimits

	| backpack room |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	self should: [ PlayableCharacter named: 'Agustin' using: backpack  at: 2@0 heading: #North playingIn: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]!
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:59:22'!
test12PointsPortableObjectInitialPositionShouldBeWithinRoomLimits

	| backpack room |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	self should: [ PlayableCharacter named: 'Agustin' using: backpack  at: 2@0 heading: #North playingIn: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 18:59:31'!
test13ShouldNotMovePlayableCharacterToOccupiedCell

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@1 heading: #North playingIn: room .
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 1@1 heading: #North).
			]! !

!methodRemoval: RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 18:59:31'!
test11ShouldNotMovePlayableCharacterToOccupiedCell

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@1 heading: #North playingIn: room .
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 1@1 heading: #North).
			]!
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 19:00:31' prior: 50873336!
test11NoPointsPortableObjectInitialPositionShouldBeWithinRoomLimits

	| room |
	
	room := Room ofHeight: 2 andWidth: 2.
	
	self should: [ NoPointsPortableObject named: 'piedra' weighing: 8 in: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 19:02:01' prior: 50873437!
test11NoPointsPortableObjectInitialPositionShouldBeWithinRoomLimits

	| room stageObject |
	
	room := Room ofHeight: 2 andWidth: 2.
	stageObject := NoPointsPortableObject named: 'piedra' weighing: 8.
	
	self should: [ room place: stageObject at: 0@0 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 19:02:14'!
test11StageObjectInitialPositionShouldBeWithinRoomLimits

	| room stageObject |
	
	room := Room ofHeight: 2 andWidth: 2.
	stageObject := NoPointsPortableObject named: 'piedra' weighing: 8.
	
	self should: [ room place: stageObject at: 0@0 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]! !

!methodRemoval: RoomTest #test11NoPointsPortableObjectInitialPositionShouldBeWithinRoomLimits stamp: 'AM 12/10/2020 19:02:14'!
test11NoPointsPortableObjectInitialPositionShouldBeWithinRoomLimits

	| room stageObject |
	
	room := Room ofHeight: 2 andWidth: 2.
	stageObject := NoPointsPortableObject named: 'piedra' weighing: 8.
	
	self should: [ room place: stageObject at: 0@0 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]!

!methodRemoval: RoomTest #test12PointsPortableObjectInitialPositionShouldBeWithinRoomLimits stamp: 'AM 12/10/2020 19:02:16'!
test12PointsPortableObjectInitialPositionShouldBeWithinRoomLimits

	| backpack room |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	self should: [ PlayableCharacter named: 'Agustin' using: backpack  at: 2@0 heading: #North playingIn: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]!
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 19:02:23'!
test12ShouldNotMovePlayableCharacterToOccupiedCell

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@1 heading: #North playingIn: room .
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 1@1 heading: #North).
			]! !

!methodRemoval: RoomTest #test13ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 19:02:23'!
test13ShouldNotMovePlayableCharacterToOccupiedCell

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@1 heading: #North playingIn: room .
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 1@1 heading: #North).
			]!

!testRun: #RoomTest #test11StageObjectInitialPositionShouldBeWithinRoomLimits stamp: 'AM 12/10/2020 19:02:33'!
FAILURE!
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 19:02:44' prior: 50873472!
test11StageObjectInitialPositionShouldBeWithinRoomLimits

	| room stageObject |
	
	room := Room ofHeight: 2 andWidth: 2.
	stageObject := NoPointsPortableObject named: 'piedra' weighing: 8.
	
	self should: [ room place: stageObject at: -1@0 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]! !

!testRun: #RoomTest #test11StageObjectInitialPositionShouldBeWithinRoomLimits stamp: 'AM 12/10/2020 19:02:46'!
PASSED!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 19:02:46'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 19:02:46'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 19:02:46'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 19:02:46'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 19:02:46'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 19:02:46'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 19:02:46'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 19:02:46'!
PASSED!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinBoardBounds stamp: 'AM 12/10/2020 19:02:46'!
PASSED!

!testRun: #RoomTest #test10MovingPlayableCharacterBackwardsShouldStayWithinBoardBounds stamp: 'AM 12/10/2020 19:02:46'!
PASSED!

!testRun: #RoomTest #test11StageObjectInitialPositionShouldBeWithinRoomLimits stamp: 'AM 12/10/2020 19:02:46'!
PASSED!

!testRun: #RoomTest #test12ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 19:02:46'!
PASSED!

!methodRemoval: RoomTest #test11StageObjectInitialPositionShouldBeWithinRoomLimits stamp: 'AM 12/10/2020 19:02:54'!
test11StageObjectInitialPositionShouldBeWithinRoomLimits

	| room stageObject |
	
	room := Room ofHeight: 2 andWidth: 2.
	stageObject := NoPointsPortableObject named: 'piedra' weighing: 8.
	
	self should: [ room place: stageObject at: -1@0 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]!
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 19:03:00'!
test11ShouldNotMovePlayableCharacterToOccupiedCell

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@1 heading: #North playingIn: room .
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 1@1 heading: #North).
			]! !

!methodRemoval: RoomTest #test12ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 19:03:00'!
test12ShouldNotMovePlayableCharacterToOccupiedCell

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@1 heading: #North playingIn: room .
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 1@1 heading: #North).
			]!
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 19:04:26' prior: 50873658!
test11ShouldNotMovePlayableCharacterToOccupiedCell

	| backpack room character object |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	object := NoPointsPortableObject named: 'Agustin' weighing: 8.
	room := Room ofHeight: 2 andWidth: 2.
	room place: object at: 0@1.
	
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North playingIn: room .
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room shouldNotMoveToOccupiedCellErrorDescription equals: anError messageText.
			self assert: (character isAt: 1@1 heading: #North).
			]! !

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 19:04:34'!
FAILURE!
!Room methodsFor: 'placing' stamp: 'AM 12/10/2020 19:05:58' prior: 50871259!
place: aCharacter at: aPoint 
	
	self assertIsWithinBounds: aPoint.
	cells at: aPoint ifPresent: [ self error: self class shouldNotMoveToOccupiedCellErrorDescription].
	cells at: aPoint put: aCharacter.! !
!Room methodsFor: 'placing' stamp: 'AM 12/10/2020 19:06:03' prior: 50873728!
place: aCharacter at: aPosition 
	
	self assertIsWithinBounds: aPosition.
	cells at: aPosition ifPresent: [ self error: self class shouldNotMoveToOccupiedCellErrorDescription].
	cells at: aPosition put: aCharacter.! !
!Room methodsFor: 'placing' stamp: 'AM 12/10/2020 19:06:08' prior: 50873737!
place: aCharacterOrObject at: aPosition 
	
	self assertIsWithinBounds: aPosition.
	cells at: aPosition ifPresent: [ self error: self class shouldNotMoveToOccupiedCellErrorDescription].
	cells at: aPosition put: aCharacterOrObject.! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AM 12/10/2020 19:06:15'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AM 12/10/2020 19:06:15'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AM 12/10/2020 19:06:15'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AM 12/10/2020 19:06:15'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AM 12/10/2020 19:06:15'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AM 12/10/2020 19:06:15'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 19:06:15'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 19:06:15'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AM 12/10/2020 19:06:15'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AM 12/10/2020 19:06:15'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AM 12/10/2020 19:06:15'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AM 12/10/2020 19:06:15'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AM 12/10/2020 19:06:15'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AM 12/10/2020 19:06:15'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AM 12/10/2020 19:06:15'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 19:06:15'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 19:06:15'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 19:06:15'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 19:06:15'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 19:06:15'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 19:06:15'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 19:06:15'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 19:06:15'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 19:06:15'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 19:06:15'!
PASSED!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 19:06:15'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 19:06:15'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 19:06:15'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 19:06:15'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 19:06:15'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 19:06:15'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 19:06:15'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 19:06:15'!
PASSED!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinBoardBounds stamp: 'AM 12/10/2020 19:06:15'!
PASSED!

!testRun: #RoomTest #test10MovingPlayableCharacterBackwardsShouldStayWithinBoardBounds stamp: 'AM 12/10/2020 19:06:15'!
PASSED!

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 19:06:15'!
FAILURE!

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 19:06:15'!
FAILURE!
!Room methodsFor: 'placing' stamp: 'AM 12/10/2020 19:06:52' prior: 50873747!
place: aCharacterOrObject at: aPosition 
	
	self assertIsWithinBounds: aPosition.
	
	cells at: aPosition put: aCharacterOrObject.! !
!Room methodsFor: 'testing' stamp: 'AM 12/10/2020 19:06:59' prior: 50872920!
canMoveTo: aPosition

	self assertIsWithinBounds: aPosition.
	cells at: aPosition ifPresent: [ self error: self class shouldNotMoveToOccupiedCellErrorDescription].
	
	! !

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 19:07:03'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 19:07:03'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 19:07:03'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 19:07:03'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 19:07:03'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 19:07:03'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 19:07:03'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 19:07:03'!
PASSED!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinBoardBounds stamp: 'AM 12/10/2020 19:07:03'!
PASSED!

!testRun: #RoomTest #test10MovingPlayableCharacterBackwardsShouldStayWithinBoardBounds stamp: 'AM 12/10/2020 19:07:03'!
PASSED!

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 19:07:03'!
ERROR!

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 19:07:03'!
ERROR!
!Room class methodsFor: 'error descriptions' stamp: 'AM 12/10/2020 19:07:17'!
shouldNotMoveToOccupiedCellErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'error descriptions' stamp: 'AM 12/10/2020 19:07:28' prior: 50873953!
shouldNotMoveToOccupiedCellErrorDescription
	
	^ ' SHould not move to occupied cells'.! !
!Room class methodsFor: 'error descriptions' stamp: 'AM 12/10/2020 19:07:30' prior: 50873959!
shouldNotMoveToOccupiedCellErrorDescription
	
	^ ' Should not move to occupied cells'.! !

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 19:07:32'!
FAILURE!

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 19:07:53'!
FAILURE!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 19:08:10'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 19:08:10'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 19:08:10'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 19:08:10'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 19:08:10'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 19:08:10'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 19:08:10'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 19:08:10'!
PASSED!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinBoardBounds stamp: 'AM 12/10/2020 19:08:10'!
PASSED!

!testRun: #RoomTest #test10MovingPlayableCharacterBackwardsShouldStayWithinBoardBounds stamp: 'AM 12/10/2020 19:08:10'!
PASSED!

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 19:08:10'!
FAILURE!

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 19:08:10'!
FAILURE!
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 19:08:33' prior: 50873701!
test11ShouldNotMovePlayableCharacterToOccupiedCell

	| backpack room character object |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	object := NoPointsPortableObject named: 'Agustin' weighing: 8.
	room := Room ofHeight: 2 andWidth: 2.
	room place: object at: 0@1.
	
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North playingIn: room .
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room shouldNotMoveToOccupiedCellErrorDescription equals: anError messageText.
			self assert: (character isAt: 1@1 heading: #North).
			]! !
!Room methodsFor: 'testing' stamp: 'AM 12/10/2020 19:09:36' prior: 50873901!
canMoveTo: aPosition

	self assertIsWithinBounds: aPosition.
	cells at: aPosition ifPresent: [:anObject | self error: self class shouldNotMoveToOccupiedCellErrorDescription].
	
	! !

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 19:09:38'!
FAILURE!
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 19:09:53' prior: 50874023!
test11ShouldNotMovePlayableCharacterToOccupiedCell

	| backpack room character object |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	object := NoPointsPortableObject named: 'Agustin' weighing: 8.
	room := Room ofHeight: 2 andWidth: 2.
	room place: object at: 0@1.
	
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North playingIn: room .
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room shouldNotMoveToOccupiedCellErrorDescription equals: anError messageText.
			self assert: (character isAt: 0@0 heading: #North).
			]! !

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 19:09:55'!
PASSED!
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 19:11:21'!
test12ShouldNotPlaceStageObjectInOccupiedCell

	| backpack room character object |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	object := NoPointsPortableObject named: 'Agustin' weighing: 8.
	room := Room ofHeight: 2 andWidth: 2.
	room place: object at: 0@1.
	
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North playingIn: room .
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room shouldNotMoveToOccupiedCellErrorDescription equals: anError messageText.
			self assert: (character isAt: 0@0 heading: #North).
			]! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 19:12:24' prior: 50874088!
test12ShouldNotPlaceStageObjectInOccupiedCell

	| backpack room object anotherObject |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	object := NoPointsPortableObject named: 'Agustin' weighing: 8.
	anotherObject := NoPointsPortableObject named: 'Agustin' weighing: 8.
	room := Room ofHeight: 2 andWidth: 2.
	room place: object at: 0@1.
	
	self should: [ room place: anotherObject at: 0@1 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room shouldNotMoveToOccupiedCellErrorDescription equals: anError messageText.
			self assert: (room at: 0@1 has: object).
			]! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 19:12:37' prior: 50874112!
test12ShouldNotPlaceStageObjectInOccupiedCell

	| room object anotherObject |
	
	object := NoPointsPortableObject named: 'Agustin' weighing: 8.
	anotherObject := NoPointsPortableObject named: 'Agustin' weighing: 8.
	room := Room ofHeight: 2 andWidth: 2.
	room place: object at: 0@1.
	
	self should: [ room place: anotherObject at: 0@1 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room shouldNotMoveToOccupiedCellErrorDescription equals: anError messageText.
			self assert: (room at: 0@1 has: object).
			]! !

!testRun: #RoomTest #test12ShouldNotPlaceStageObjectInOccupiedCell stamp: 'AM 12/10/2020 19:12:41'!
FAILURE!
!Room methodsFor: 'placing' stamp: 'AM 12/10/2020 19:13:13' prior: 50873894!
place: aCharacterOrObject at: aPosition 
	
	self assertIsWithinBounds: aPosition.
	self assertCanPlaceAt: aPosition.
	
	cells at: aPosition put: aCharacterOrObject.! !
!Room methodsFor: 'testing' stamp: 'AM 12/10/2020 19:13:33' prior: 50874047!
canMoveTo: aPosition

	self assertIsWithinBounds: aPosition.
	
	! !
!Room methodsFor: 'testing' stamp: 'AM 12/10/2020 19:13:34' prior: 50874167!
canMoveTo: aPosition

	self assertIsWithinBounds: aPosition.
	cells at: aPosition ifPresent: [:anObject | self error: self class shouldNotMoveToOccupiedCellErrorDescription].
	
	! !
!Room methodsFor: 'placing' stamp: 'AM 12/10/2020 19:14:07'!
assertCanPlaceAt: aPosition.

	cells at: aPosition ifPresent: [:anObject | self error: self class shouldNotMoveToOccupiedCellErrorDescription].! !
!Room methodsFor: 'placing' stamp: 'AM 12/10/2020 19:14:32'!
assertNothingAt: aPosition.

	cells at: aPosition ifPresent: [:anObject | self error: self class shouldNotMoveToOccupiedCellErrorDescription].! !
!Room methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:14:32' prior: 50874159!
place: aCharacterOrObject at: aPosition 
	
	self assertIsWithinBounds: aPosition.
	self assertNothingAt: aPosition.
	
	cells at: aPosition put: aCharacterOrObject.! !

!methodRemoval: Room #assertCanPlaceAt: stamp: 'AM 12/10/2020 19:14:32'!
assertCanPlaceAt: aPosition.

	cells at: aPosition ifPresent: [:anObject | self error: self class shouldNotMoveToOccupiedCellErrorDescription].!
!Room methodsFor: 'placing' stamp: 'AM 12/10/2020 19:14:50'!
assertCanPlacetAt: aPosition

	self assertIsWithinBounds: aPosition.
	self assertNothingAt: aPosition! !
!Room methodsFor: 'placing' stamp: 'AM 12/10/2020 19:14:50' prior: 50874195!
place: aCharacterOrObject at: aPosition 
	
	self assertCanPlacetAt: aPosition.
	
	cells at: aPosition put: aCharacterOrObject.! !
!PlayableCharacter methodsFor: 'moving' stamp: 'AM 12/10/2020 19:15:18' prior: 50873257!
moveBackward
	
	room place: self at: position - heading forwardPoint.
	position := position - heading forwardPoint ! !
!PlayableCharacter methodsFor: 'moving' stamp: 'AM 12/10/2020 19:15:25' prior: 50874222!
moveBackward
	
	room place: self at: position - heading forwardPoint.
	
	position := position - heading forwardPoint ! !
!PlayableCharacter methodsFor: 'moving' stamp: 'AM 12/10/2020 19:15:32' prior: 50871789!
moveForward
	
	room place: self at: position - heading forwardPoint.
	
	position := position + heading forwardPoint! !

!testRun: #RoomTest #test12ShouldNotPlaceStageObjectInOccupiedCell stamp: 'AM 12/10/2020 19:15:48'!
ERROR!
!Room methodsFor: 'testing' stamp: 'AM 12/10/2020 19:16:00'!
at: aPoint has: aNoPointsPortableObject 
	self shouldBeImplemented.! !
!Room methodsFor: 'testing' stamp: 'AM 12/10/2020 19:16:33' prior: 50874245!
at: aPoint has: aCharacterOrStageObject 
	
	^ (cells at: aPoint) = aCharacterOrStageObject 
	! !

!testRun: #RoomTest #test12ShouldNotPlaceStageObjectInOccupiedCell stamp: 'AM 12/10/2020 19:16:36'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AM 12/10/2020 19:16:37'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AM 12/10/2020 19:16:37'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AM 12/10/2020 19:16:37'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AM 12/10/2020 19:16:37'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AM 12/10/2020 19:16:37'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AM 12/10/2020 19:16:37'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 19:16:37'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 19:16:37'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AM 12/10/2020 19:16:37'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AM 12/10/2020 19:16:37'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AM 12/10/2020 19:16:37'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AM 12/10/2020 19:16:37'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AM 12/10/2020 19:16:37'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AM 12/10/2020 19:16:37'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AM 12/10/2020 19:16:37'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 19:16:37'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 19:16:37'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 19:16:37'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 19:16:37'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 19:16:37'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 19:16:37'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 19:16:37'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 19:16:37'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 19:16:37'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 19:16:37'!
PASSED!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 19:16:37'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 19:16:37'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 19:16:37'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 19:16:37'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 19:16:37'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 19:16:37'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 19:16:37'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 19:16:37'!
PASSED!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinBoardBounds stamp: 'AM 12/10/2020 19:16:37'!
FAILURE!

!testRun: #RoomTest #test10MovingPlayableCharacterBackwardsShouldStayWithinBoardBounds stamp: 'AM 12/10/2020 19:16:37'!
PASSED!

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 19:16:37'!
FAILURE!

!testRun: #RoomTest #test12ShouldNotPlaceStageObjectInOccupiedCell stamp: 'AM 12/10/2020 19:16:37'!
PASSED!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinBoardBounds stamp: 'AM 12/10/2020 19:16:41'!
FAILURE!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinBoardBounds stamp: 'AM 12/10/2020 19:17:06'!
FAILURE!
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 19:18:36' prior: 50873080!
test09MovingPlayableCharacterForwardShouldStayWithinBoardBounds

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@1 heading: #North playingIn: room .
	
	self halt.
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 1@1 heading: #North).
			]! !
!PlayableCharacter methodsFor: 'moving' stamp: 'AM 12/10/2020 19:19:43' prior: 50874236!
moveForward
	
	room place: self at: position + heading forwardPoint.
	
	position := position + heading forwardPoint! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AM 12/10/2020 19:19:44'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AM 12/10/2020 19:19:44'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AM 12/10/2020 19:19:44'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AM 12/10/2020 19:19:44'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AM 12/10/2020 19:19:44'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AM 12/10/2020 19:19:44'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 19:19:44'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 19:19:44'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AM 12/10/2020 19:19:44'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AM 12/10/2020 19:19:44'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AM 12/10/2020 19:19:44'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AM 12/10/2020 19:19:44'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AM 12/10/2020 19:19:44'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AM 12/10/2020 19:19:44'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AM 12/10/2020 19:19:44'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 19:19:44'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 19:19:44'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 19:19:44'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 19:19:44'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 19:19:44'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 19:19:44'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 19:19:44'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 19:19:44'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 19:19:44'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 19:19:44'!
PASSED!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 19:19:44'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 19:19:44'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 19:19:44'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 19:19:44'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 19:19:44'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 19:19:44'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 19:19:44'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 19:19:44'!
PASSED!

!testRun: #RoomTest #test10MovingPlayableCharacterBackwardsShouldStayWithinBoardBounds stamp: 'AM 12/10/2020 19:19:44'!
PASSED!

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 19:19:44'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceStageObjectInOccupiedCell stamp: 'AM 12/10/2020 19:19:44'!
PASSED!
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 19:19:54' prior: 50874405!
test09MovingPlayableCharacterForwardShouldStayWithinBoardBounds

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@1 heading: #North playingIn: room .
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 1@1 heading: #North).
			]! !

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinBoardBounds stamp: 'AM 12/10/2020 19:19:56'!
PASSED!
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 19:20:32'!
test13CharacterPositionShouldBeTheRoomsPositionForCharacter

! !

----SNAPSHOT----(10 December 2020 19:20:40) CuisUniversity-4384.image priorSource: 17197598!
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 19:21:11' prior: 50874593!
test13CharacterPositionShouldBeTheRoomsPositionForCharacter

	| backpack room character object |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	object := NoPointsPortableObject named: 'Agustin' weighing: 8.
	room := Room ofHeight: 2 andWidth: 2.
	
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North playingIn: room .
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room shouldNotMoveToOccupiedCellErrorDescription equals: anError messageText.
			self assert: (character isAt: 0@0 heading: #North).
			]

! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 19:21:17' prior: 50874602!
test13CharacterPositionShouldBeTheRoomsPositionForCharacter

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North playingIn: room .
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room shouldNotMoveToOccupiedCellErrorDescription equals: anError messageText.
			self assert: (character isAt: 0@0 heading: #North).
			]

! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 19:21:24'!
test13CharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North playingIn: room .
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room shouldNotMoveToOccupiedCellErrorDescription equals: anError messageText.
			self assert: (character isAt: 0@0 heading: #North).
			]

! !

!methodRemoval: RoomTest #test13CharacterPositionShouldBeTheRoomsPositionForCharacter stamp: 'AM 12/10/2020 19:21:24'!
test13CharacterPositionShouldBeTheRoomsPositionForCharacter

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North playingIn: room .
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room shouldNotMoveToOccupiedCellErrorDescription equals: anError messageText.
			self assert: (character isAt: 0@0 heading: #North).
			]

!
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 19:22:14' prior: 50874647!
test13CharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North playingIn: room .
	character moveForward.
	
	self assert: (room has: character at: 1@0).
	self assert: (character isAt: 1@0 heading: #North).
! !

!testRun: #RoomTest #test13CharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving stamp: 'AM 12/10/2020 19:22:18'!
ERROR!
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 19:22:30' prior: 50874691!
test13CharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North playingIn: room .
	character moveForward.
	
	self assert: (room at: 1@0 has: character).
	self assert: (character isAt: 1@0 heading: #North).
! !

!testRun: #RoomTest #test13CharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving stamp: 'AM 12/10/2020 19:22:31'!
ERROR!
!PlayableCharacter methodsFor: 'moving' stamp: 'AM 12/10/2020 19:23:18' prior: 50874229!
moveBackward
	
	room place: self at: position - heading forwardPoint from: position.
	
	position := position - heading forwardPoint ! !
!PlayableCharacter methodsFor: 'moving' stamp: 'AM 12/10/2020 19:23:27' prior: 50874427!
moveForward
	
	room place: self at: position + heading forwardPoint from: position.
	
	position := position + heading forwardPoint! !
!Room methodsFor: 'placing' stamp: 'AM 12/10/2020 19:23:36'!
place: aCharacterOrObject at: aPosition from: position
	
	self assertCanPlacetAt: aPosition.
	
	cells at: aPosition put: aCharacterOrObject.! !
!Room methodsFor: 'placing' stamp: 'AM 12/10/2020 19:23:45' prior: 50874749!
place: aCharacterOrObject at: aPosition from: aStartingPosition
	
	self assertCanPlacetAt: aPosition.
	
	cells at: aPosition put: aCharacterOrObject.! !
!Room methodsFor: 'placing' stamp: 'AM 12/10/2020 19:23:52' prior: 50874756!
place: aCharacterOrObject at: anEndingPosition from: aStartingPosition
	
	self assertCanPlacetAt: anEndingPosition.
	
	cells at: anEndingPosition put: aCharacterOrObject.! !
!Room methodsFor: 'placing' stamp: 'AM 12/10/2020 19:24:05' prior: 50874764!
place: aCharacterOrObject at: anEndingPosition from: aStartingPosition
	
	self assertCanPlacetAt: anEndingPosition.
	
	cells removeKey: aStartingPosition.
	cells at: anEndingPosition put: aCharacterOrObject.! !

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 19:24:07'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 19:24:07'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 19:24:07'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 19:24:07'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 19:24:07'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 19:24:07'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 19:24:07'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 19:24:07'!
PASSED!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinBoardBounds stamp: 'AM 12/10/2020 19:24:07'!
PASSED!

!testRun: #RoomTest #test10MovingPlayableCharacterBackwardsShouldStayWithinBoardBounds stamp: 'AM 12/10/2020 19:24:07'!
PASSED!

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 19:24:07'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceStageObjectInOccupiedCell stamp: 'AM 12/10/2020 19:24:07'!
PASSED!

!testRun: #RoomTest #test13CharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving stamp: 'AM 12/10/2020 19:24:07'!
ERROR!

!testRun: #RoomTest #test13CharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving stamp: 'AM 12/10/2020 19:24:07'!
ERROR!
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 19:25:39' prior: 50874713!
test13CharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North playingIn: room .
	character moveForward.
	
	self assert: (room at: 0@1 has: character).
	self assert: (character isAt: 0@1 heading: #North).
! !

!testRun: #RoomTest #test13CharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving stamp: 'AM 12/10/2020 19:25:41'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AM 12/10/2020 19:25:41'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AM 12/10/2020 19:25:41'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AM 12/10/2020 19:25:41'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AM 12/10/2020 19:25:41'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AM 12/10/2020 19:25:41'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AM 12/10/2020 19:25:41'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 19:25:41'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 19:25:41'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AM 12/10/2020 19:25:41'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AM 12/10/2020 19:25:41'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AM 12/10/2020 19:25:41'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AM 12/10/2020 19:25:41'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AM 12/10/2020 19:25:41'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AM 12/10/2020 19:25:41'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AM 12/10/2020 19:25:41'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 19:25:41'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 19:25:41'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 19:25:41'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 19:25:41'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 19:25:41'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 19:25:41'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 19:25:41'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 19:25:41'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 19:25:41'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 19:25:41'!
PASSED!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 19:25:41'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 19:25:41'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 19:25:41'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 19:25:41'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 19:25:41'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 19:25:41'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 19:25:41'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 19:25:41'!
PASSED!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinBoardBounds stamp: 'AM 12/10/2020 19:25:41'!
PASSED!

!testRun: #RoomTest #test10MovingPlayableCharacterBackwardsShouldStayWithinBoardBounds stamp: 'AM 12/10/2020 19:25:41'!
PASSED!

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 19:25:41'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceStageObjectInOccupiedCell stamp: 'AM 12/10/2020 19:25:41'!
PASSED!

!testRun: #RoomTest #test13CharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving stamp: 'AM 12/10/2020 19:25:41'!
PASSED!
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:26:15'!
place: aPlayableCharacter at: aPoint from: anotherPosition! !

!methodRemoval: PlayableCharacterTest #place:at: stamp: 'AM 12/10/2020 19:26:21'!
place: aPlayableCharacter at: aPoint !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 19:26:43' prior: 50872580!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint playingIn: aRoom 

	| newHeading |
	
	aRoom place: self at: aPosition.

	newHeading := self headingFor: aCardinalPoint.
	
	^ self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading playingIn: aRoom! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AM 12/10/2020 19:27:00'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AM 12/10/2020 19:27:00'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AM 12/10/2020 19:27:00'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AM 12/10/2020 19:27:00'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AM 12/10/2020 19:27:00'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AM 12/10/2020 19:27:00'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 19:27:00'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 19:27:00'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AM 12/10/2020 19:27:00'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AM 12/10/2020 19:27:00'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AM 12/10/2020 19:27:00'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AM 12/10/2020 19:27:00'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AM 12/10/2020 19:27:00'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AM 12/10/2020 19:27:00'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AM 12/10/2020 19:27:00'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 19:27:00'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 19:27:00'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 19:27:00'!
ERROR!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 19:27:00'!
ERROR!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 19:27:00'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 19:27:00'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 19:27:00'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 19:27:00'!
FAILURE!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 19:27:00'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 19:27:00'!
ERROR!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 19:27:00'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 19:27:00'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 19:27:00'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 19:27:00'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 19:27:00'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 19:27:00'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 19:27:00'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 19:27:00'!
PASSED!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinBoardBounds stamp: 'AM 12/10/2020 19:27:00'!
PASSED!

!testRun: #RoomTest #test10MovingPlayableCharacterBackwardsShouldStayWithinBoardBounds stamp: 'AM 12/10/2020 19:27:00'!
PASSED!

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 19:27:00'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceStageObjectInOccupiedCell stamp: 'AM 12/10/2020 19:27:00'!
PASSED!

!testRun: #RoomTest #test13CharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving stamp: 'AM 12/10/2020 19:27:00'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 19:27:03'!
ERROR!
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:27:19'!
place: aPlayableCharacter at: aPoint! !

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 19:27:47'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AM 12/10/2020 19:27:47'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AM 12/10/2020 19:27:47'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AM 12/10/2020 19:27:47'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AM 12/10/2020 19:27:47'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AM 12/10/2020 19:27:47'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AM 12/10/2020 19:27:47'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 19:27:47'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 19:27:47'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AM 12/10/2020 19:27:47'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AM 12/10/2020 19:27:47'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AM 12/10/2020 19:27:47'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AM 12/10/2020 19:27:47'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AM 12/10/2020 19:27:47'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AM 12/10/2020 19:27:47'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AM 12/10/2020 19:27:47'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 19:27:47'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 19:27:47'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 19:27:47'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 19:27:47'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 19:27:47'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 19:27:47'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 19:27:47'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 19:27:47'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 19:27:47'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 19:27:47'!
PASSED!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 19:27:47'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 19:27:47'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 19:27:47'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 19:27:47'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 19:27:47'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 19:27:47'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 19:27:47'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 19:27:47'!
PASSED!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinBoardBounds stamp: 'AM 12/10/2020 19:27:47'!
PASSED!

!testRun: #RoomTest #test10MovingPlayableCharacterBackwardsShouldStayWithinBoardBounds stamp: 'AM 12/10/2020 19:27:47'!
PASSED!

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 19:27:47'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceStageObjectInOccupiedCell stamp: 'AM 12/10/2020 19:27:47'!
PASSED!

!testRun: #RoomTest #test13CharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving stamp: 'AM 12/10/2020 19:27:47'!
PASSED!

TestCase subclass: #StageObjectTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #StageObjectTest category: 'ISW1-2020-2C-2doParcial' stamp: 'AM 12/10/2020 19:29:03'!
TestCase subclass: #StageObjectTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'AM 12/10/2020 19:30:36'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!StageObjectTest methodsFor: 'no messages' stamp: 'AM 12/10/2020 19:30:18'!
test01NonPortableObjectHasNoStageObjects

	| wardrobe |
	wardrobe := NonPortableObject named: 'armario'.! !

!classRenamed: #StageObjectTest as: #NonPortableObjectTest stamp: 'AM 12/10/2020 19:31:31'!
Smalltalk renameClassNamed: #StageObjectTest as: #NonPortableObjectTest!
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:31:53' prior: 50875333!
test01NonPortableObjectHasNoStageObjects

	| wardrobe |
	
	wardrobe := NonPortableObject named: 'armario'.
	
	self assert: wardrobe isEmpty.! !

!testRun: #NonPortableObjectTest #test01NonPortableObjectHasNoStageObjects stamp: 'AM 12/10/2020 19:31:55'!
ERROR!
!NonPortableObject class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 19:32:05'!
named: aString 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString ! !
!NonPortableObject class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 19:32:13' prior: 50875356!
named: aString 
	
	^self new initializeNamed: aString ! !
!NonPortableObject class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 19:32:17' prior: 50875365!
named: aName 
	
	^self new initializeNamed: aName ! !

!testRun: #NonPortableObjectTest #test01NonPortableObjectHasNoStageObjects stamp: 'AM 12/10/2020 19:32:18'!
ERROR!

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'AM 12/10/2020 19:32:31'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'initialization' stamp: 'AM 12/10/2020 19:32:31'!
initializeNamed: aName 
	self shouldBeImplemented.
	name := aName.! !
!NonPortableObject methodsFor: 'initialization' stamp: 'AM 12/10/2020 19:32:37' prior: 50875388!
initializeNamed: aName 
	
	name := aName.! !

!testRun: #NonPortableObjectTest #test01NonPortableObjectHasNoStageObjects stamp: 'AM 12/10/2020 19:32:38'!
ERROR!
!NonPortableObject methodsFor: 'testing' stamp: 'AM 12/10/2020 19:32:52'!
isEmpty
	self shouldBeImplemented.! !
!NonPortableObject methodsFor: 'testing' stamp: 'AM 12/10/2020 19:32:57' prior: 50875402!
isEmpty
	
	^ true! !

!testRun: #NonPortableObjectTest #test01NonPortableObjectHasNoStageObjects stamp: 'AM 12/10/2020 19:32:58'!
PASSED!

!testRun: #NonPortableObjectTest #test01NonPortableObjectHasNoStageObjects stamp: 'AM 12/10/2020 19:32:58'!
PASSED!
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:33:25'!
test02NonPortableObjectCanHaveMultiplePortableObjects

	| wardrobe |
	
	wardrobe := NonPortableObject named: 'armario'.
	
	self assert: wardrobe isEmpty.! !
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:35:48'!
test02NonPortableObjectCanHaveOneStageObject

	| wardrobe scarf |
	
	wardrobe := NonPortableObject named: 'armario'.
	scarf := NoPointsPortableObject named: 'bufanda' weighing: 10.

	wardrobe add: scarf.
	
	self deny: wardrobe isEmpty.
	self assert: wardrobe stageObjects equals: {scarf} asOrderedCollection.! !
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:36:15'!
test03NonPortableObjectCanHaveMoreThanOneStageObjects

	| wardrobe |
	
	wardrobe := NonPortableObject named: 'armario'.
	
	self assert: wardrobe isEmpty.! !

!methodRemoval: NonPortableObjectTest #test02NonPortableObjectCanHaveMultiplePortableObjects stamp: 'AM 12/10/2020 19:36:15'!
test02NonPortableObjectCanHaveMultiplePortableObjects

	| wardrobe |
	
	wardrobe := NonPortableObject named: 'armario'.
	
	self assert: wardrobe isEmpty.!

!testRun: #NonPortableObjectTest #test02NonPortableObjectCanHaveOneStageObject stamp: 'AM 12/10/2020 19:36:34'!
ERROR!
!NonPortableObject methodsFor: 'adding' stamp: 'AM 12/10/2020 19:36:48'!
add: aNoPointsPortableObject 
	self shouldBeImplemented.! !

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'AM 12/10/2020 19:37:15'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name stageObject'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'adding' stamp: 'AM 12/10/2020 19:37:11' prior: 50875458!
add: aStageObject 
	
	stageObject := aStageObject 
	! !

!testRun: #NonPortableObjectTest #test02NonPortableObjectCanHaveOneStageObject stamp: 'AM 12/10/2020 19:37:17'!
FAILURE!
!NonPortableObject methodsFor: 'testing' stamp: 'AM 12/10/2020 19:38:33' prior: 50875406!
isEmpty
	
	^ stageObject isNil! !

!classRenamed: #NonPortableObjectTest as: #StageObjectTest stamp: 'AM 12/10/2020 19:38:49'!
Smalltalk renameClassNamed: #NonPortableObjectTest as: #StageObjectTest!

!testRun: #StageObjectTest #test02NonPortableObjectCanHaveOneStageObject stamp: 'AM 12/10/2020 19:38:58'!
ERROR!
!NonPortableObject methodsFor: 'accessing' stamp: 'AM 12/10/2020 19:39:07'!
stageObjects
	self shouldBeImplemented.! !
!NonPortableObject methodsFor: 'accessing' stamp: 'AM 12/10/2020 19:39:16' prior: 50875494!
stageObjects
	
	^ { stageObject }! !
!NonPortableObject methodsFor: 'accessing' stamp: 'AM 12/10/2020 19:39:23' prior: 50875499!
stageObjects
	
	^ { stageObject } asOrderedCollection ! !

!testRun: #StageObjectTest #test02NonPortableObjectCanHaveOneStageObject stamp: 'AM 12/10/2020 19:39:24'!
PASSED!

!testRun: #StageObjectTest #test01NonPortableObjectHasNoStageObjects stamp: 'AM 12/10/2020 19:39:24'!
PASSED!

!testRun: #StageObjectTest #test02NonPortableObjectCanHaveOneStageObject stamp: 'AM 12/10/2020 19:39:24'!
PASSED!

!testRun: #StageObjectTest #test03NonPortableObjectCanHaveMoreThanOneStageObjects stamp: 'AM 12/10/2020 19:39:24'!
PASSED!
!StageObjectTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:40:20' prior: 50875438!
test03NonPortableObjectCanHaveMoreThanOneStageObjects

	| wardrobe key piedra scarf stone |
	
	wardrobe := NonPortableObject named: 'armario'.
	scarf := NoPointsPortableObject named: 'bufanda' weighing: 10.
	piedra := NoPointsPortableObject named: 'piedra' weighing: 10.
	key := NoPointsPortableObject named: 'llave' weighing: 10.

	wardrobe add: scarf; add: stone; add: key.
	
	self assert: wardrobe stageObjects equals: {scarf. stone. key} asOrderedCollection.! !
!StageObjectTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:40:38' prior: 50875524!
test03NonPortableObjectCanHaveMoreThanOneStageObjects

	| wardrobe key scarf stone |
	
	wardrobe := NonPortableObject named: 'armario'.
	scarf := NoPointsPortableObject named: 'bufanda' weighing: 10.
	stone := NoPointsPortableObject named: 'piedra' weighing: 10.
	key := NoPointsPortableObject named: 'llave' weighing: 10.

	wardrobe add: scarf; add: stone; add: key.
	
	self assert: wardrobe stageObjects equals: {scarf. stone. key} asOrderedCollection.! !

!testRun: #StageObjectTest #test03NonPortableObjectCanHaveMoreThanOneStageObjects stamp: 'AM 12/10/2020 19:40:42'!
FAILURE!

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'AM 12/10/2020 19:41:06'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name stageObject stageObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'initialization' stamp: 'AM 12/10/2020 19:41:04' prior: 50875394!
initializeNamed: aName 
	
	name := aName.
	stageObjects := OrderedCollection new.! !
!NonPortableObject methodsFor: 'adding' stamp: 'AM 12/10/2020 19:41:14' prior: 50875472!
add: aStageObject 
	
	stageObjects add: aStageObject 
	! !
!NonPortableObject methodsFor: 'accessing' stamp: 'AM 12/10/2020 19:41:21' prior: 50875504!
stageObjects
	
	^ stageObjects ! !

StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name stageObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'AM 12/10/2020 19:41:39'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name stageObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'testing' stamp: 'AM 12/10/2020 19:41:52' prior: 50875481!
isEmpty
	
	^ stageObjects isEmpty! !
!StageObjectTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:42:32' prior: 50875542!
test03NonPortableObjectCanHaveMoreThanOneStageObjects

	| wardrobe key scarf drawer |
	
	wardrobe := NonPortableObject named: 'armario'.
	scarf := NoPointsPortableObject named: 'bufanda' weighing: 10.
	drawer := NonPortableObject named: 'cajon' weighing: 10.
	key := NoPointsPortableObject named: 'llave' weighing: 10.

	wardrobe add: scarf; add: drawer; add: key.
	
	self assert: wardrobe stageObjects equals: {scarf. drawer. key} asOrderedCollection.! !
!StageObjectTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:42:44' prior: 50875607!
test03NonPortableObjectCanHaveMoreThanOneStageObjects

	| wardrobe key scarf drawer |
	
	wardrobe := NonPortableObject named: 'armario'.
	
	scarf := NoPointsPortableObject named: 'bufanda' weighing: 10.
	drawer := NonPortableObject named: 'cajon' weighing: 10.
	key := NoPointsPortableObject named: 'llave' weighing: 10.

	wardrobe add: scarf; add: drawer; add: key.
	
	self assert: wardrobe stageObjects equals: {scarf. drawer. key} asOrderedCollection.! !
!RoomTest methodsFor: 'tests - moving character' stamp: 'AM 12/10/2020 19:46:20'!
test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@1 heading: #North playingIn: room .
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 1@1 heading: #North).
			]! !

!methodRemoval: RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinBoardBounds stamp: 'AM 12/10/2020 19:46:20'!
test09MovingPlayableCharacterForwardShouldStayWithinBoardBounds

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@1 heading: #North playingIn: room .
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 1@1 heading: #North).
			]!
!RoomTest methodsFor: 'tests - moving character' stamp: 'AM 12/10/2020 19:46:27'!
test10MovingPlayableCharacterBackwardsShouldStayWithinRoomBounds

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North playingIn: room .
	
	self should: [ character moveBackward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 0@0 heading: #North).
			]! !

!methodRemoval: RoomTest #test10MovingPlayableCharacterBackwardsShouldStayWithinBoardBounds stamp: 'AM 12/10/2020 19:46:27'!
test10MovingPlayableCharacterBackwardsShouldStayWithinBoardBounds

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North playingIn: room .
	
	self should: [ character moveBackward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room playableCharacterShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 0@0 heading: #North).
			]!
!Room class methodsFor: 'error descriptions' stamp: 'AM 12/10/2020 19:48:08'!
positionShouldBeInsideRoomErrorDescription
	
	^ 'Placing should be done withing board limits.'! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:48:08' prior: 50872548!
test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit

	| backpack room |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	self should: [ PlayableCharacter named: 'Agustin' using: backpack  at: 0@2 heading: #North playingIn: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room positionShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:48:08' prior: 50872468!
test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit

	| backpack room |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	self should: [ PlayableCharacter named: 'Agustin' using: backpack  at: 2@0 heading: #North playingIn: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room positionShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:48:08' prior: 50875642!
test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@1 heading: #North playingIn: room .
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room positionShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 1@1 heading: #North).
			]! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:48:08' prior: 50872528!
test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit

	| backpack room |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	self should: [ PlayableCharacter named: 'Agustin' using: backpack  at: -1@0 heading: #North playingIn: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room positionShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]! !
!Room methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:48:08' prior: 50871365!
assertIsWithinBounds: aPoint.
	
	((aPoint x between: 0 and: width - 1) and: [ aPoint y between: 0 and: height - 1 ])
		ifFalse: [ self error: self class positionShouldBeInsideRoomErrorDescription ].! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:48:08' prior: 50872488!
test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit

	| backpack room |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	self should: [ PlayableCharacter named: 'Agustin' using: backpack  at: 0@-1 heading: #North playingIn: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room positionShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:48:08' prior: 50875685!
test10MovingPlayableCharacterBackwardsShouldStayWithinRoomBounds

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North playingIn: room .
	
	self should: [ character moveBackward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room positionShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 0@0 heading: #North).
			]! !

!methodRemoval: Room class #playableCharacterShouldBeInsideRoomErrorDescription stamp: 'AM 12/10/2020 19:48:09'!
playableCharacterShouldBeInsideRoomErrorDescription
	
	^ 'Placing should be done withing board limits.'!

!methodRemoval: Room class #stageObjectsShouldBeWithinRoomLimitsErrorDescription stamp: 'AM 12/10/2020 19:48:16'!
stageObjectsShouldBeWithinRoomLimitsErrorDescription
	
	^ 'Stage objects should be within room limits'!
!RoomTest methodsFor: 'tests - moving character' stamp: 'AM 12/10/2020 19:51:13'!
test14ShouldNotTakeFromACellThatIsOutOfRoomsBound

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@1 heading: #North playingIn: room .
	
	self should: [ character take ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room positionShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: backpack isEmpty.
			]! !
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 19:51:29'!
test14PlayableCharacterShouldNotTakeFromACellThatIsOutOfRoomsBound

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@1 heading: #North playingIn: room .
	
	self should: [ character take ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room positionShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: backpack isEmpty.
			]! !

!methodRemoval: RoomTest #test14ShouldNotTakeFromACellThatIsOutOfRoomsBound stamp: 'AM 12/10/2020 19:51:30'!
test14ShouldNotTakeFromACellThatIsOutOfRoomsBound

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@1 heading: #North playingIn: room .
	
	self should: [ character take ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room positionShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: backpack isEmpty.
			]!

!testRun: #RoomTest #test14PlayableCharacterShouldNotTakeFromACellThatIsOutOfRoomsBound stamp: 'AM 12/10/2020 19:51:34'!
ERROR!
!PlayableCharacter methodsFor: 'taking' stamp: 'AM 12/10/2020 19:51:47'!
take
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'taking' stamp: 'AM 12/10/2020 19:53:02' prior: 50875940!
take
	
	room takeFor: self at: position + heading forwardPoint.! !

!testRun: #RoomTest #test14PlayableCharacterShouldNotTakeFromACellThatIsOutOfRoomsBound stamp: 'AM 12/10/2020 19:53:11'!
ERROR!
!Room methodsFor: 'taking' stamp: 'AM 12/10/2020 19:53:25'!
takeFor: aPlayableCharacter at: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'taking' stamp: 'AM 12/10/2020 19:53:38' prior: 50875952!
takeFor: aPlayableCharacter at: aPoint 
	
	self assertIsWithinBounds: aPoint! !
!Room methodsFor: 'taking' stamp: 'AM 12/10/2020 19:53:47' prior: 50875957!
takeFor: aPlayableCharacter at: aPosition 
	
	self assertIsWithinBounds: aPosition! !

!testRun: #RoomTest #test14PlayableCharacterShouldNotTakeFromACellThatIsOutOfRoomsBound stamp: 'AM 12/10/2020 19:53:56'!
PASSED!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 19:53:56'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 19:53:56'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 19:53:56'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 19:53:56'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 19:53:56'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 19:53:56'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 19:53:56'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 19:53:56'!
PASSED!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 19:53:56'!
PASSED!

!testRun: #RoomTest #test10MovingPlayableCharacterBackwardsShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 19:53:56'!
PASSED!

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 19:53:56'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceStageObjectInOccupiedCell stamp: 'AM 12/10/2020 19:53:56'!
PASSED!

!testRun: #RoomTest #test13CharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving stamp: 'AM 12/10/2020 19:53:56'!
PASSED!

!testRun: #RoomTest #test14PlayableCharacterShouldNotTakeFromACellThatIsOutOfRoomsBound stamp: 'AM 12/10/2020 19:53:56'!
PASSED!
!PlayableCharacter methodsFor: 'moving' stamp: 'AM 12/10/2020 19:54:09'!
forwardPosition

	^ position + heading forwardPoint! !
!PlayableCharacter methodsFor: 'moving' stamp: 'AM 12/10/2020 19:54:09' prior: 50874742!
moveForward
	
	room place: self at: self forwardPosition from: position.
	
	position := position + heading forwardPoint! !
!PlayableCharacter methodsFor: 'moving' stamp: 'AM 12/10/2020 19:54:17' prior: 50876028!
moveForward
	
	room place: self at: self forwardPosition from: position.
	
	position := self forwardPosition ! !
!PlayableCharacter methodsFor: 'moving' stamp: 'AM 12/10/2020 19:54:32'!
backwardPosition

	^ position - heading forwardPoint! !
!PlayableCharacter methodsFor: 'moving' stamp: 'AM 12/10/2020 19:54:32' prior: 50874734!
moveBackward
	
	room place: self at: position - heading forwardPoint from: position.
	
	position := self backwardPosition ! !
!PlayableCharacter methodsFor: 'moving' stamp: 'AM 12/10/2020 19:54:40' prior: 50876046!
moveBackward
	
	room place: self at: self backwardPosition from: position.
	
	position := self backwardPosition ! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'AM 12/10/2020 19:55:09' prior: 50875944!
take
	
	room takeFor: self at: self forwardPosition .! !
!RoomTest methodsFor: 'tests - moving character' stamp: 'AM 12/10/2020 19:56:13'!
test13PlayableCharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North playingIn: room .
	character moveForward.
	
	self assert: (room at: 0@1 has: character).
	self assert: (character isAt: 0@1 heading: #North).
! !

!methodRemoval: RoomTest #test13CharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving stamp: 'AM 12/10/2020 19:56:13'!
test13CharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 0@0 heading: #North playingIn: room .
	character moveForward.
	
	self assert: (room at: 0@1 has: character).
	self assert: (character isAt: 0@1 heading: #North).
!
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 19:59:16'!
test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter

	| backpack room character anotherCharacter |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	anotherCharacter := PlayableCharacter named: 'Agustin' using: backpack  at: 1@1 heading: #North playingIn: room .
	
	self should: [ character take ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room positionShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: backpack isEmpty.
			]! !
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 20:00:26' prior: 50876100!
test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter

	| backpack room character anotherCharacter anotherBackpack |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	anotherBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	anotherCharacter := PlayableCharacter named: 'Agustin' using: anotherBackpack  at: 1@1 heading: #North playingIn: room .
	
	self should: [ character take ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room canNotTakeFromACellOccupiedByAnotherCharacterErrorDescription equals: anError messageText.
			self assert: backpack isEmpty.
			]! !

!testRun: #RoomTest #test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter stamp: 'AM 12/10/2020 20:00:39'!
FAILURE!
!Room methodsFor: 'taking' stamp: 'AM 12/10/2020 20:02:42' prior: 50875962!
takeFor: aPlayableCharacter at: aPosition 
	
	self assertIsWithinBounds: aPosition.
	cells at: aPosition ifPresent: [ :aCharacterOrStageObject | aCharacterOrStageObject addTo: aPlayableCharacter ]! !

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 20:02:52'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 20:02:52'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 20:02:52'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 20:02:52'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 20:02:52'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 20:02:52'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 20:02:52'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 20:02:52'!
PASSED!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 20:02:53'!
PASSED!

!testRun: #RoomTest #test10MovingPlayableCharacterBackwardsShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 20:02:53'!
PASSED!

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 20:02:53'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceStageObjectInOccupiedCell stamp: 'AM 12/10/2020 20:02:53'!
PASSED!

!testRun: #RoomTest #test13PlayableCharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving stamp: 'AM 12/10/2020 20:02:53'!
PASSED!

!testRun: #RoomTest #test14PlayableCharacterShouldNotTakeFromACellThatIsOutOfRoomsBound stamp: 'AM 12/10/2020 20:02:53'!
PASSED!

!testRun: #RoomTest #test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter stamp: 'AM 12/10/2020 20:02:53'!
ERROR!

!testRun: #RoomTest #test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter stamp: 'AM 12/10/2020 20:02:53'!
ERROR!
!PlayableCharacter class methodsFor: 'adding' stamp: 'AM 12/10/2020 20:03:16'!
addTo: aPlayableCharacter 
	self shouldBeImplemented.! !
!PlayableCharacter class methodsFor: 'adding' stamp: 'AM 12/10/2020 20:03:54' prior: 50876228!
addTo: aPlayableCharacter 
	
	Room! !

!testRun: #RoomTest #test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter stamp: 'AM 12/10/2020 20:04:09'!
FAILURE!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'AM 12/10/2020 20:05:09'!
addTo: aPlayableCharacter

	self error: Room canNotTakeFromACellOccupiedByAnotherCharacterErrorDescription! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'AM 12/10/2020 20:05:33' prior: 50876242!
addTo: aPlayableCharacter

	self error: self class canNotTakeFromAnotherCharacterErrorDescription! !
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 20:05:53' prior: 50876125!
test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter

	| backpack room character anotherCharacter anotherBackpack |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	anotherBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	anotherCharacter := PlayableCharacter named: 'Agustin' using: anotherBackpack  at: 1@1 heading: #North playingIn: room .
	
	self should: [ character take ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter canNotTakeFromACellOccupiedByAnotherCharacterErrorDescription equals: anError messageText.
			self assert: backpack isEmpty.
			]! !
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 20:06:06' prior: 50876255!
test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter

	| backpack room character anotherCharacter anotherBackpack |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	anotherBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	anotherCharacter := PlayableCharacter named: 'Agustin' using: anotherBackpack  at: 1@1 heading: #North playingIn: room .
	
	self should: [ character take ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter canNotTakeFromAnotherCharacterErrorDescription equals: anError messageText.
			self assert: backpack isEmpty.
			]! !

!testRun: #RoomTest #test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter stamp: 'AM 12/10/2020 20:06:10'!
FAILURE!
!PlayableCharacter class methodsFor: 'adding' stamp: 'AM 12/10/2020 20:07:14' prior: 50876233!
addTo: aPlayableCharacter 
	
	self error: self class canNotTakeFromAnotherCharacterErrorDescription! !

!testRun: #RoomTest #test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter stamp: 'AM 12/10/2020 20:07:17'!
ERROR!

!testRun: #RoomTest #test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter stamp: 'AM 12/10/2020 20:07:43'!
ERROR!

aCharacterOrStageObject!

!testRun: #RoomTest #test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter stamp: 'AM 12/10/2020 20:08:33'!
ERROR!

!methodRemoval: PlayableCharacter class #addTo: stamp: 'AM 12/10/2020 20:08:50'!
addTo: aPlayableCharacter 
	
	self error: self class canNotTakeFromAnotherCharacterErrorDescription!

room!

cells at: 1@0!

cells at: 1@0!

!testRun: #RoomTest #test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter stamp: 'AM 12/10/2020 20:10:03'!
ERROR!
!Room methodsFor: 'placing' stamp: 'AM 12/10/2020 20:10:43' prior: 50874772!
place: aCharacter at: anEndingPosition from: aStartingPosition
	
	self assertCanPlacetAt: anEndingPosition.
	
	cells removeKey: aStartingPosition.
	cells at: anEndingPosition put: aCharacter.! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 20:13:51' prior: 50875006!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint playingIn: aRoom 

	| newHeading |
	
	aRoom assertCanPlacetAt: aPosition.

	newHeading := self headingFor: aCardinalPoint.
	^ (self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading playingIn: aRoom).! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 20:14:51' prior: 50876359!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint playingIn: aRoom 

	| newHeading |
	
	aRoom assertCanPlacetAt: aPosition.

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading playingIn: aRoom! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'AM 12/10/2020 20:15:19' prior: 50872768!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading playingIn: aRoom

	aRoom place: self at: aPosition.
	room := aRoom.
	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'AM 12/10/2020 20:15:21' prior: 50876385!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading playingIn: aRoom

	aRoom place: self at: aPosition.
	
	room := aRoom.
	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 20:23:00' prior: 50876372!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint playingIn: aRoom 

	| newHeading newPlayableCharacter |
	
	aRoom assertCanPlacetAt: aPosition.

	newHeading := self headingFor: aCardinalPoint.
	
	newPlayableCharacter := self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading playingIn: aRoom.
	
	aRoom place: newPlayableCharacter at: aPosition .
	
	^ newPlayableCharacter! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AM 12/10/2020 20:23:25'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AM 12/10/2020 20:23:25'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AM 12/10/2020 20:23:25'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AM 12/10/2020 20:23:25'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AM 12/10/2020 20:23:25'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AM 12/10/2020 20:23:25'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 20:23:25'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 20:23:25'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AM 12/10/2020 20:23:25'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AM 12/10/2020 20:23:25'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AM 12/10/2020 20:23:25'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AM 12/10/2020 20:23:25'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AM 12/10/2020 20:23:25'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AM 12/10/2020 20:23:25'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AM 12/10/2020 20:23:25'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 20:23:25'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 20:23:25'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 20:23:25'!
ERROR!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 20:23:25'!
ERROR!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 20:23:25'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 20:23:25'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 20:23:25'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 20:23:25'!
FAILURE!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 20:23:25'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 20:23:25'!
ERROR!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 20:23:25'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 20:23:25'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 20:23:26'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 20:23:26'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 20:23:26'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 20:23:26'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 20:23:26'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 20:23:26'!
PASSED!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 20:23:26'!
ERROR!

!testRun: #RoomTest #test10MovingPlayableCharacterBackwardsShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 20:23:26'!
ERROR!

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 20:23:26'!
ERROR!

!testRun: #RoomTest #test12ShouldNotPlaceStageObjectInOccupiedCell stamp: 'AM 12/10/2020 20:23:26'!
PASSED!

!testRun: #RoomTest #test13PlayableCharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving stamp: 'AM 12/10/2020 20:23:26'!
ERROR!

!testRun: #RoomTest #test14PlayableCharacterShouldNotTakeFromACellThatIsOutOfRoomsBound stamp: 'AM 12/10/2020 20:23:26'!
ERROR!

!testRun: #RoomTest #test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter stamp: 'AM 12/10/2020 20:23:26'!
ERROR!

!testRun: #StageObjectTest #test01NonPortableObjectHasNoStageObjects stamp: 'AM 12/10/2020 20:23:26'!
PASSED!

!testRun: #StageObjectTest #test02NonPortableObjectCanHaveOneStageObject stamp: 'AM 12/10/2020 20:23:26'!
PASSED!

!testRun: #StageObjectTest #test03NonPortableObjectCanHaveMoreThanOneStageObjects stamp: 'AM 12/10/2020 20:23:26'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 20:23:29'!
ERROR!
!PlayableCharacterTest methodsFor: 'room simulator' stamp: 'AM 12/10/2020 20:23:49'!
assertCanPlaceAt: aPoint ! !

!methodRemoval: PlayableCharacterTest #canMoveTo: stamp: 'AM 12/10/2020 20:23:52'!
canMoveTo: aPoint !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 20:23:57'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 20:23:57'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 20:23:57'!
ERROR!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 20:23:57'!
ERROR!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 20:23:57'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 20:23:57'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 20:23:57'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 20:23:57'!
FAILURE!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 20:23:57'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 20:23:57'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 20:23:59'!
ERROR!
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 20:24:14' prior: 50876408!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint playingIn: aRoom 

	| newHeading newPlayableCharacter |
	
	aRoom assertCanPlaceAt: aPosition.

	newHeading := self headingFor: aCardinalPoint.
	
	newPlayableCharacter := self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading playingIn: aRoom.
	
	aRoom place: newPlayableCharacter at: aPosition .
	
	^ newPlayableCharacter! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 20:24:15'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 20:24:15'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 20:24:15'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 20:24:15'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 20:24:15'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 20:24:15'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 20:24:15'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 20:24:15'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 20:24:15'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 20:24:15'!
PASSED!

!testRun: #RoomTest #test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter stamp: 'AM 12/10/2020 20:24:23'!
ERROR!
!Room methodsFor: 'placing' stamp: 'AM 12/10/2020 20:24:44'!
assertCanPlaceAt: aPosition

	self assertIsWithinBounds: aPosition.
	self assertNothingAt: aPosition! !
!Room methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 20:24:44' prior: 50874215!
place: aCharacterOrObject at: aPosition 
	
	self assertCanPlaceAt: aPosition.
	
	cells at: aPosition put: aCharacterOrObject.! !
!Room methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 20:24:45' prior: 50876349!
place: aCharacter at: anEndingPosition from: aStartingPosition
	
	self assertCanPlaceAt: anEndingPosition.
	
	cells removeKey: aStartingPosition.
	cells at: anEndingPosition put: aCharacter.! !

!methodRemoval: Room #assertCanPlacetAt: stamp: 'AM 12/10/2020 20:24:45'!
assertCanPlacetAt: aPosition

	self assertIsWithinBounds: aPosition.
	self assertNothingAt: aPosition!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 20:24:52'!
ERROR!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 20:25:13'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 20:25:13'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 20:25:13'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 20:25:13'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 20:25:13'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 20:25:13'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 20:25:13'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 20:25:13'!
PASSED!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 20:25:13'!
ERROR!

!testRun: #RoomTest #test10MovingPlayableCharacterBackwardsShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 20:25:13'!
ERROR!

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 20:25:13'!
ERROR!

!testRun: #RoomTest #test12ShouldNotPlaceStageObjectInOccupiedCell stamp: 'AM 12/10/2020 20:25:13'!
PASSED!

!testRun: #RoomTest #test13PlayableCharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving stamp: 'AM 12/10/2020 20:25:13'!
ERROR!

!testRun: #RoomTest #test14PlayableCharacterShouldNotTakeFromACellThatIsOutOfRoomsBound stamp: 'AM 12/10/2020 20:25:13'!
ERROR!

!testRun: #RoomTest #test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter stamp: 'AM 12/10/2020 20:25:13'!
ERROR!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 20:25:17'!
ERROR!

!methodRemoval: Room class #shouldNotMoveToOccupiedCellErrorDescription stamp: 'AM 12/10/2020 20:26:22'!
shouldNotMoveToOccupiedCellErrorDescription
	
	^ ' Should not move to occupied cells'.!
!Room methodsFor: 'placing' stamp: 'AM 12/10/2020 20:26:26' prior: 50874187!
assertNothingAt: aPosition.

	cells at: aPosition ifPresent: [:anObject | self error: self class positionShouldBeInsideRoomErrorDescription].! !
!Room methodsFor: 'placing' stamp: 'AM 12/10/2020 20:26:31' prior: 50876795!
assertNothingAt: aPosition.

	cells at: aPosition ifPresent: [:anObject | self error: self class shouldNotMoveToOccupiedCellErrorDescription].! !

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 20:26:50'!
ERROR!
!Room class methodsFor: 'error descriptions' stamp: 'AM 12/10/2020 20:27:06'!
shouldNotMoveToOccupiedCellErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'error descriptions' stamp: 'AM 12/10/2020 20:27:15' prior: 50876813!
shouldNotMoveToOccupiedCellErrorDescription
	
	^ 'Should not move to occupied cell'! !

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 20:27:17'!
ERROR!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 20:28:45'!
ERROR!
!PlayableCharacter methodsFor: 'initialization' stamp: 'AM 12/10/2020 20:29:04' prior: 50876396!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading playingIn: aRoom

	room := aRoom.
	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #RoomTest #test10MovingPlayableCharacterBackwardsShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceStageObjectInOccupiedCell stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #RoomTest #test13PlayableCharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #RoomTest #test14PlayableCharacterShouldNotTakeFromACellThatIsOutOfRoomsBound stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #RoomTest #test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter stamp: 'AM 12/10/2020 20:29:06'!
ERROR!

!testRun: #StageObjectTest #test01NonPortableObjectHasNoStageObjects stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #StageObjectTest #test02NonPortableObjectCanHaveOneStageObject stamp: 'AM 12/10/2020 20:29:06'!
PASSED!

!testRun: #StageObjectTest #test03NonPortableObjectCanHaveMoreThanOneStageObjects stamp: 'AM 12/10/2020 20:29:06'!
ERROR!

!testRun: #StageObjectTest #test03NonPortableObjectCanHaveMoreThanOneStageObjects stamp: 'AM 12/10/2020 20:29:17'!
ERROR!
!StageObjectTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 20:29:30' prior: 50875625!
test03NonPortableObjectCanHaveMoreThanOneStageObjects

	| wardrobe key scarf drawer |
	
	wardrobe := NonPortableObject named: 'armario'.
	
	scarf := NoPointsPortableObject named: 'bufanda' weighing: 10.
	drawer := NonPortableObject named: 'cajon'.
	key := NoPointsPortableObject named: 'llave' weighing: 10.

	wardrobe add: scarf; add: drawer; add: key.
	
	self assert: wardrobe stageObjects equals: {scarf. drawer. key} asOrderedCollection.! !

!testRun: #StageObjectTest #test03NonPortableObjectCanHaveMoreThanOneStageObjects stamp: 'AM 12/10/2020 20:29:33'!
PASSED!

!testRun: #StageObjectTest #test01NonPortableObjectHasNoStageObjects stamp: 'AM 12/10/2020 20:29:33'!
PASSED!

!testRun: #StageObjectTest #test02NonPortableObjectCanHaveOneStageObject stamp: 'AM 12/10/2020 20:29:33'!
PASSED!

!testRun: #StageObjectTest #test03NonPortableObjectCanHaveMoreThanOneStageObjects stamp: 'AM 12/10/2020 20:29:33'!
PASSED!

!testRun: #StageObjectTest #test03NonPortableObjectCanHaveMoreThanOneStageObjects stamp: 'AM 12/10/2020 20:29:35'!
PASSED!

!testRun: #RoomTest #test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter stamp: 'AM 12/10/2020 20:29:36'!
ERROR!
!PlayableCharacter class methodsFor: 'error descriptions' stamp: 'AM 12/10/2020 20:29:54'!
canNotTakeFromAnotherCharacterErrorDescription
	self shouldBeImplemented.! !
!PlayableCharacter class methodsFor: 'error descriptions' stamp: 'AM 12/10/2020 20:30:09' prior: 50877048!
canNotTakeFromAnotherCharacterErrorDescription
	
	^ 'Can not take from another playable character'! !

!testRun: #RoomTest #test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter stamp: 'AM 12/10/2020 20:30:11'!
PASSED!
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 20:31:19'!
test15PlayableCharacterTakesOnePortableObjectFromForwardCell

	| backpack room character object |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	object := NoPointsPortableObject named: 'piedra' weighing: 8.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	
	self should: [ character take ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter canNotTakeFromAnotherCharacterErrorDescription equals: anError messageText.
			self assert: backpack isEmpty.
			]! !
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 20:31:56' prior: 50877064!
test15PlayableCharacterTakesOnePortableObjectFromForwardCell

	| backpack room character object |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	object := NoPointsPortableObject named: 'piedra' weighing: 8.
	room place: object at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assert backpack! !
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 20:32:27'!
test16PlayableCharacterTakesOnePortableObjectFromForwardCell

	| backpack room character object |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	object := NoPointsPortableObject named: 'piedra' weighing: 8.
	room place: object at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assert backpack! !

!methodRemoval: RoomTest #test15PlayableCharacterTakesOnePortableObjectFromForwardCell stamp: 'AM 12/10/2020 20:32:27'!
test15PlayableCharacterTakesOnePortableObjectFromForwardCell

	| backpack room character object |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	object := NoPointsPortableObject named: 'piedra' weighing: 8.
	room place: object at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assert backpack!
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 20:32:58' prior: 50877104!
test16PlayableCharacterTakesOnePortableObjectFromForwardCell

	| backpack room character object |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	object := NoPointsPortableObject named: 'piedra' weighing: 8.
	room place: object at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assert: backpack includes: object.
	self assert: backpack totalWeight equals: 8.! !

!testRun: #RoomTest #test16PlayableCharacterTakesOnePortableObjectFromForwardCell stamp: 'AM 12/10/2020 20:33:01'!
ERROR!
!NoPointsPortableObject methodsFor: 'adding' stamp: 'AM 12/10/2020 20:33:18'!
addTo: aPlayableCharacter 
	self shouldBeImplemented.! !
!NoPointsPortableObject methodsFor: 'adding' stamp: 'AM 12/10/2020 20:33:27' prior: 50877162!
addTo: aPlayableCharacter 
	
	aPlayableCharacter add: self! !

!testRun: #RoomTest #test16PlayableCharacterTakesOnePortableObjectFromForwardCell stamp: 'AM 12/10/2020 20:33:30'!
ERROR!
!NoPointsPortableObject methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 20:34:16' prior: 50877167!
addTo: aPlayableCharacter 
	
	aPlayableCharacter take: self! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AM 12/10/2020 20:34:28'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AM 12/10/2020 20:34:28'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AM 12/10/2020 20:34:28'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AM 12/10/2020 20:34:28'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AM 12/10/2020 20:34:28'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AM 12/10/2020 20:34:28'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 20:34:28'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 20:34:28'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AM 12/10/2020 20:34:28'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AM 12/10/2020 20:34:28'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AM 12/10/2020 20:34:28'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AM 12/10/2020 20:34:28'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AM 12/10/2020 20:34:28'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AM 12/10/2020 20:34:28'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AM 12/10/2020 20:34:28'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 20:34:28'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 20:34:28'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 20:34:28'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 20:34:28'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 20:34:28'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 20:34:28'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 20:34:28'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 20:34:28'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 20:34:28'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 20:34:28'!
PASSED!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 20:34:28'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 20:34:28'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 20:34:28'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 20:34:28'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 20:34:28'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 20:34:28'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 20:34:28'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 20:34:28'!
PASSED!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 20:34:28'!
PASSED!

!testRun: #RoomTest #test10MovingPlayableCharacterBackwardsShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 20:34:28'!
PASSED!

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 20:34:28'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceStageObjectInOccupiedCell stamp: 'AM 12/10/2020 20:34:28'!
PASSED!

!testRun: #RoomTest #test13PlayableCharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving stamp: 'AM 12/10/2020 20:34:29'!
PASSED!

!testRun: #RoomTest #test14PlayableCharacterShouldNotTakeFromACellThatIsOutOfRoomsBound stamp: 'AM 12/10/2020 20:34:29'!
PASSED!

!testRun: #RoomTest #test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter stamp: 'AM 12/10/2020 20:34:29'!
PASSED!

!testRun: #RoomTest #test16PlayableCharacterTakesOnePortableObjectFromForwardCell stamp: 'AM 12/10/2020 20:34:29'!
PASSED!

!testRun: #StageObjectTest #test01NonPortableObjectHasNoStageObjects stamp: 'AM 12/10/2020 20:34:29'!
PASSED!

!testRun: #StageObjectTest #test02NonPortableObjectCanHaveOneStageObject stamp: 'AM 12/10/2020 20:34:29'!
PASSED!

!testRun: #StageObjectTest #test03NonPortableObjectCanHaveMoreThanOneStageObjects stamp: 'AM 12/10/2020 20:34:29'!
PASSED!
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 20:35:00'!
test16PlayableCharacterTakesManyPortableObjectInNonPortableObject

	| backpack room character object |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	object := NoPointsPortableObject named: 'piedra' weighing: 8.
	room place: object at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assert: backpack includes: object.
	self assert: backpack totalWeight equals: 8.! !
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 20:35:14'!
test16PlayableCharacterTakesManyPortableObjectInsideNonPortableObject

	| backpack room character object |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	object := NoPointsPortableObject named: 'piedra' weighing: 8.
	room place: object at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assert: backpack includes: object.
	self assert: backpack totalWeight equals: 8.! !

!methodRemoval: RoomTest #test16PlayableCharacterTakesManyPortableObjectInNonPortableObject stamp: 'AM 12/10/2020 20:35:45'!
test16PlayableCharacterTakesManyPortableObjectInNonPortableObject

	| backpack room character object |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	object := NoPointsPortableObject named: 'piedra' weighing: 8.
	room place: object at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assert: backpack includes: object.
	self assert: backpack totalWeight equals: 8.!
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 20:36:19'!
test17PlayableCharacterTakesEveryPortableObjectIncludedInNonPortableObject

	| backpack room character object |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	object := NoPointsPortableObject named: 'piedra' weighing: 8.
	room place: object at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assert: backpack includes: object.
	self assert: backpack totalWeight equals: 8.! !

!methodRemoval: RoomTest #test16PlayableCharacterTakesManyPortableObjectInsideNonPortableObject stamp: 'AM 12/10/2020 20:36:25'!
test16PlayableCharacterTakesManyPortableObjectInsideNonPortableObject

	| backpack room character object |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	object := NoPointsPortableObject named: 'piedra' weighing: 8.
	room place: object at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assert: backpack includes: object.
	self assert: backpack totalWeight equals: 8.!
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 20:36:41'!
test17PlayableCharacterTakesEveryPortableObjectIncludedInNonPortableObjectFromForwardCell

	| backpack room character object |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	object := NoPointsPortableObject named: 'piedra' weighing: 8.
	room place: object at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assert: backpack includes: object.
	self assert: backpack totalWeight equals: 8.! !

!methodRemoval: RoomTest #test17PlayableCharacterTakesEveryPortableObjectIncludedInNonPortableObject stamp: 'AM 12/10/2020 20:36:41'!
test17PlayableCharacterTakesEveryPortableObjectIncludedInNonPortableObject

	| backpack room character object |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	object := NoPointsPortableObject named: 'piedra' weighing: 8.
	room place: object at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assert: backpack includes: object.
	self assert: backpack totalWeight equals: 8.!
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 20:37:18'!
test17PlayableCharacterTakesEveryPortableObjectsInANonPortableObjectFromForwardCell

	| backpack room character object |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	object := NoPointsPortableObject named: 'piedra' weighing: 8.
	object := NoPointsPortableObject named: 'piedra' weighing: 8.
	object := NoPointsPortableObject named: 'piedra' weighing: 8.
	
	room place: object at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assert: backpack includes: object.
	self assert: backpack totalWeight equals: 8.! !
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 20:37:50' prior: 50877483!
test17PlayableCharacterTakesEveryPortableObjectsInANonPortableObjectFromForwardCell

	| backpack room character object key scarf stone wardrobe |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	stone := NoPointsPortableObject named: 'piedra' weighing: 8.
	scarf := NoPointsPortableObject named: 'bufanda' weighing: 8.
	key := NoPointsPortableObject named: 'llave' weighing: 8.
	wardrobe := NoPointsPortableObject named: 'armario'.
	
	room place: object at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assert: backpack includes: object.
	self assert: backpack totalWeight equals: 8.! !
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 20:38:33' prior: 50877507!
test17PlayableCharacterTakesEveryPortableObjectsInANonPortableObjectFromForwardCell

	| backpack room character object key scarf stone wardrobe |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	stone := NoPointsPortableObject named: 'piedra' weighing: 8.
	scarf := NoPointsPortableObject named: 'bufanda' weighing: 8.
	key := NoPointsPortableObject named: 'llave' weighing: 8.
	wardrobe := NoPointsPortableObject named: 'armario'.
	wardrobe add: stone; add: scarf; add: key.
	
	room place: wardrobe at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assert: backpack includes: object.
	self assert: backpack totalWeight equals: 8.! !
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 20:39:08' prior: 50877533!
test17PlayableCharacterTakesEveryPortableObjectsInANonPortableObjectFromForwardCell

	| backpack room character key scarf stone wardrobe |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	stone := NoPointsPortableObject named: 'piedra' weighing: 8.
	scarf := NoPointsPortableObject named: 'bufanda' weighing: 8.
	key := NoPointsPortableObject named: 'llave' weighing: 8.
	wardrobe := NoPointsPortableObject named: 'armario'.
	wardrobe add: stone; add: scarf; add: key.
	
	room place: wardrobe at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assert: backpack includes: stone.
	self assert: backpack includes: scarf.
	self assert: backpack includes: key.
	self assert: backpack size equals: 3.! !

!methodRemoval: RoomTest #test17PlayableCharacterTakesEveryPortableObjectIncludedInNonPortableObjectFromForwardCell stamp: 'AM 12/10/2020 20:39:25'!
test17PlayableCharacterTakesEveryPortableObjectIncludedInNonPortableObjectFromForwardCell

	| backpack room character object |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	object := NoPointsPortableObject named: 'piedra' weighing: 8.
	room place: object at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assert: backpack includes: object.
	self assert: backpack totalWeight equals: 8.!
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 20:39:34' prior: 50877139!
test16PlayableCharacterTakesOnePortableObjectFromForwardCell

	| backpack room character object |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	object := NoPointsPortableObject named: 'piedra' weighing: 8.
	room place: object at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assert: backpack includes: object.
	self assert: backpack size equals: 8.! !
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 20:40:02' prior: 50877612!
test16PlayableCharacterTakesOnePortableObjectFromForwardCell

	| backpack room character object |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	object := NoPointsPortableObject named: 'piedra' weighing: 8.
	room place: object at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assertBackpackHasEqualElements: {object}.! !
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 20:40:35'!
assertBackpackHasEqualElements: aCollectionOfStageObjects

	aCollectionOfStageObjects do: [ :aS]! !
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 20:40:42' prior: 50877648!
assertBackpackHasEqualElements: aCollectionOfPortableObjects

	aCollectionOfPortableObjects do: [ :aS]! !
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 20:41:53'!
assertBackpack: aBackpack hasEqualElements: aCollectionOfPortableObjects

	aCollectionOfPortableObjects do: [ :aPortableObject | self assert: aBackpack includes: aPortableObject]
	self assert: aBackpack size equals: aCollectionOfPortableObjects size.! !
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 20:41:57' prior: 50877660!
assertBackpack: aBackpack hasEqualElements: aCollectionOfPortableObjects

	aCollectionOfPortableObjects do: [ :aPortableObject | self assert: aBackpack includes: aPortableObject].
	self assert: aBackpack size equals: aCollectionOfPortableObjects size.! !

!methodRemoval: RoomTest #assertBackpackHasEqualElements: stamp: 'AM 12/10/2020 20:42:02'!
assertBackpackHasEqualElements: aCollectionOfPortableObjects

	aCollectionOfPortableObjects do: [ :aS]!
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 20:42:17' prior: 50877631!
test16PlayableCharacterTakesOnePortableObjectFromForwardCell

	| backpack room character object |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	object := NoPointsPortableObject named: 'piedra' weighing: 8.
	room place: object at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assertBackpack: backpack hasEqualElements: {object}.! !

!testRun: #RoomTest #test16PlayableCharacterTakesOnePortableObjectFromForwardCell stamp: 'AM 12/10/2020 20:42:19'!
PASSED!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 20:42:19'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 20:42:19'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 20:42:19'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 20:42:19'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 20:42:19'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 20:42:19'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 20:42:19'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 20:42:19'!
PASSED!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 20:42:19'!
PASSED!

!testRun: #RoomTest #test10MovingPlayableCharacterBackwardsShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 20:42:19'!
PASSED!

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 20:42:19'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceStageObjectInOccupiedCell stamp: 'AM 12/10/2020 20:42:19'!
PASSED!

!testRun: #RoomTest #test13PlayableCharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving stamp: 'AM 12/10/2020 20:42:19'!
PASSED!

!testRun: #RoomTest #test14PlayableCharacterShouldNotTakeFromACellThatIsOutOfRoomsBound stamp: 'AM 12/10/2020 20:42:19'!
PASSED!

!testRun: #RoomTest #test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter stamp: 'AM 12/10/2020 20:42:19'!
PASSED!

!testRun: #RoomTest #test16PlayableCharacterTakesOnePortableObjectFromForwardCell stamp: 'AM 12/10/2020 20:42:19'!
PASSED!

!testRun: #RoomTest #test17PlayableCharacterTakesEveryPortableObjectsInANonPortableObjectFromForwardCell stamp: 'AM 12/10/2020 20:42:19'!
ERROR!

!testRun: #RoomTest #test17PlayableCharacterTakesEveryPortableObjectsInANonPortableObjectFromForwardCell stamp: 'AM 12/10/2020 20:42:19'!
ERROR!
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 20:42:36' prior: 50877561!
test17PlayableCharacterTakesEveryPortableObjectsInANonPortableObjectFromForwardCell

	| backpack room character key scarf stone wardrobe |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	stone := NoPointsPortableObject named: 'piedra' weighing: 8.
	scarf := NoPointsPortableObject named: 'bufanda' weighing: 8.
	key := NoPointsPortableObject named: 'llave' weighing: 8.
	wardrobe := NonPortableObject named: 'armario'.
	wardrobe add: stone; add: scarf; add: key.
	
	room place: wardrobe at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assert: backpack includes: stone.
	self assert: backpack includes: scarf.
	self assert: backpack includes: key.
	self assert: backpack size equals: 3.! !

!testRun: #RoomTest #test17PlayableCharacterTakesEveryPortableObjectsInANonPortableObjectFromForwardCell stamp: 'AM 12/10/2020 20:42:38'!
ERROR!
!NonPortableObject methodsFor: 'adding' stamp: 'AM 12/10/2020 20:42:49'!
addTo: aPlayableCharacter 
	self shouldBeImplemented.! !
!NonPortableObject methodsFor: 'adding' stamp: 'AM 12/10/2020 20:43:43' prior: 50877814!
addTo: aPlayableCharacter 
	
	stageObjects do: [ :aStageObject | aStageObject addTo: aPlayableCharacter ]! !

!testRun: #RoomTest #test17PlayableCharacterTakesEveryPortableObjectsInANonPortableObjectFromForwardCell stamp: 'AM 12/10/2020 20:43:45'!
PASSED!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 20:43:46'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 20:43:46'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 20:43:46'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 20:43:46'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 20:43:46'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 20:43:46'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 20:43:46'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 20:43:46'!
PASSED!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 20:43:46'!
PASSED!

!testRun: #RoomTest #test10MovingPlayableCharacterBackwardsShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 20:43:46'!
PASSED!

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 20:43:46'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceStageObjectInOccupiedCell stamp: 'AM 12/10/2020 20:43:46'!
PASSED!

!testRun: #RoomTest #test13PlayableCharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving stamp: 'AM 12/10/2020 20:43:46'!
PASSED!

!testRun: #RoomTest #test14PlayableCharacterShouldNotTakeFromACellThatIsOutOfRoomsBound stamp: 'AM 12/10/2020 20:43:46'!
PASSED!

!testRun: #RoomTest #test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter stamp: 'AM 12/10/2020 20:43:46'!
PASSED!

!testRun: #RoomTest #test16PlayableCharacterTakesOnePortableObjectFromForwardCell stamp: 'AM 12/10/2020 20:43:46'!
PASSED!

!testRun: #RoomTest #test17PlayableCharacterTakesEveryPortableObjectsInANonPortableObjectFromForwardCell stamp: 'AM 12/10/2020 20:43:46'!
PASSED!
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 20:44:24'!
test16PlayableCharacterTakesOneElementCorrectly

	| backpack room character object |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	object := NoPointsPortableObject named: 'piedra' weighing: 8.
	room place: object at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assertBackpack: backpack hasEqualElements: {object}.! !

!methodRemoval: RoomTest #test16PlayableCharacterTakesOnePortableObjectFromForwardCell stamp: 'AM 12/10/2020 20:44:24'!
test16PlayableCharacterTakesOnePortableObjectFromForwardCell

	| backpack room character object |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	object := NoPointsPortableObject named: 'piedra' weighing: 8.
	room place: object at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assertBackpack: backpack hasEqualElements: {object}.!
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 20:44:34'!
test16PlayableCharacterTakesOneElementSuccessfully

	| backpack room character object |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	object := NoPointsPortableObject named: 'piedra' weighing: 8.
	room place: object at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assertBackpack: backpack hasEqualElements: {object}.! !

!methodRemoval: RoomTest #test16PlayableCharacterTakesOneElementCorrectly stamp: 'AM 12/10/2020 20:44:35'!
test16PlayableCharacterTakesOneElementCorrectly

	| backpack room character object |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	object := NoPointsPortableObject named: 'piedra' weighing: 8.
	room place: object at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assertBackpack: backpack hasEqualElements: {object}.!
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 20:44:44'!
test17PlayableCharacterTakesOneElementSuccessfully

	| backpack room character object |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	object := NoPointsPortableObject named: 'piedra' weighing: 8.
	room place: object at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assertBackpack: backpack hasEqualElements: {object}.! !

!methodRemoval: RoomTest #test16PlayableCharacterTakesOneElementSuccessfully stamp: 'AM 12/10/2020 20:44:44'!
test16PlayableCharacterTakesOneElementSuccessfully

	| backpack room character object |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	object := NoPointsPortableObject named: 'piedra' weighing: 8.
	room place: object at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assertBackpack: backpack hasEqualElements: {object}.!
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 20:44:49'!
test18PlayableCharacterTakesEveryPortableObjectsInANonPortableObjectFromForwardCell

	| backpack room character key scarf stone wardrobe |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	stone := NoPointsPortableObject named: 'piedra' weighing: 8.
	scarf := NoPointsPortableObject named: 'bufanda' weighing: 8.
	key := NoPointsPortableObject named: 'llave' weighing: 8.
	wardrobe := NonPortableObject named: 'armario'.
	wardrobe add: stone; add: scarf; add: key.
	
	room place: wardrobe at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assert: backpack includes: stone.
	self assert: backpack includes: scarf.
	self assert: backpack includes: key.
	self assert: backpack size equals: 3.! !

!methodRemoval: RoomTest #test17PlayableCharacterTakesEveryPortableObjectsInANonPortableObjectFromForwardCell stamp: 'AM 12/10/2020 20:44:49'!
test17PlayableCharacterTakesEveryPortableObjectsInANonPortableObjectFromForwardCell

	| backpack room character key scarf stone wardrobe |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	stone := NoPointsPortableObject named: 'piedra' weighing: 8.
	scarf := NoPointsPortableObject named: 'bufanda' weighing: 8.
	key := NoPointsPortableObject named: 'llave' weighing: 8.
	wardrobe := NonPortableObject named: 'armario'.
	wardrobe add: stone; add: scarf; add: key.
	
	room place: wardrobe at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assert: backpack includes: stone.
	self assert: backpack includes: scarf.
	self assert: backpack includes: key.
	self assert: backpack size equals: 3.!
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 20:45:13'!
test18PlayableCharacterTakesRecursivelySuccessfully

	| backpack room character key scarf stone wardrobe |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	stone := NoPointsPortableObject named: 'piedra' weighing: 8.
	scarf := NoPointsPortableObject named: 'bufanda' weighing: 8.
	key := NoPointsPortableObject named: 'llave' weighing: 8.
	wardrobe := NonPortableObject named: 'armario'.
	wardrobe add: stone; add: scarf; add: key.
	
	room place: wardrobe at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assert: backpack includes: stone.
	self assert: backpack includes: scarf.
	self assert: backpack includes: key.
	self assert: backpack size equals: 3.! !

!methodRemoval: RoomTest #test18PlayableCharacterTakesEveryPortableObjectsInANonPortableObjectFromForwardCell stamp: 'AM 12/10/2020 20:45:13'!
test18PlayableCharacterTakesEveryPortableObjectsInANonPortableObjectFromForwardCell

	| backpack room character key scarf stone wardrobe |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	stone := NoPointsPortableObject named: 'piedra' weighing: 8.
	scarf := NoPointsPortableObject named: 'bufanda' weighing: 8.
	key := NoPointsPortableObject named: 'llave' weighing: 8.
	wardrobe := NonPortableObject named: 'armario'.
	wardrobe add: stone; add: scarf; add: key.
	
	room place: wardrobe at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assert: backpack includes: stone.
	self assert: backpack includes: scarf.
	self assert: backpack includes: key.
	self assert: backpack size equals: 3.!
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 20:45:43'!
test16PlayableCharacterTakesNothingFromEmptyCell

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assert: backpack isEmpty! !

!testRun: #RoomTest #test16PlayableCharacterTakesNothingFromEmptyCell stamp: 'AM 12/10/2020 20:45:47'!
PASSED!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 20:45:47'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 20:45:47'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 20:45:47'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 20:45:47'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 20:45:47'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 20:45:47'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 20:45:47'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 20:45:47'!
PASSED!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 20:45:47'!
PASSED!

!testRun: #RoomTest #test10MovingPlayableCharacterBackwardsShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 20:45:47'!
PASSED!

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 20:45:47'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceStageObjectInOccupiedCell stamp: 'AM 12/10/2020 20:45:47'!
PASSED!

!testRun: #RoomTest #test13PlayableCharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving stamp: 'AM 12/10/2020 20:45:47'!
PASSED!

!testRun: #RoomTest #test14PlayableCharacterShouldNotTakeFromACellThatIsOutOfRoomsBound stamp: 'AM 12/10/2020 20:45:47'!
PASSED!

!testRun: #RoomTest #test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter stamp: 'AM 12/10/2020 20:45:47'!
PASSED!

!testRun: #RoomTest #test16PlayableCharacterTakesNothingFromEmptyCell stamp: 'AM 12/10/2020 20:45:47'!
PASSED!

!testRun: #RoomTest #test17PlayableCharacterTakesOneElementSuccessfully stamp: 'AM 12/10/2020 20:45:47'!
PASSED!

!testRun: #RoomTest #test18PlayableCharacterTakesRecursivelySuccessfully stamp: 'AM 12/10/2020 20:45:47'!
PASSED!
!Room methodsFor: 'taking' stamp: 'AM 12/10/2020 20:46:20' prior: 50876158!
takeFor: aPlayableCharacter at: aPosition 
	
	self assertIsWithinBounds: aPosition.
	cells at: aPosition ifPresent: [ :aCharacterOrStageObject | aCharacterOrStageObject addTo: aPlayableCharacter ]! !
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 20:47:36' prior: 50877967!
test17PlayableCharacterTakesOneElementSuccessfully

	| backpack room character object |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	object := NoPointsPortableObject named: 'piedra' weighing: 8.
	room place: object at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assertBackpack: backpack hasEqualElements: {object}.
	self assert: (room hasNothingAt: 1@1).! !
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 20:48:07' prior: 50878063!
test18PlayableCharacterTakesRecursivelySuccessfully

	| backpack room character key scarf stone wardrobe |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	stone := NoPointsPortableObject named: 'piedra' weighing: 8.
	scarf := NoPointsPortableObject named: 'bufanda' weighing: 8.
	key := NoPointsPortableObject named: 'llave' weighing: 8.
	wardrobe := NonPortableObject named: 'armario'.
	wardrobe add: stone; add: scarf; add: key.
	
	room place: wardrobe at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assertBackpack: backpack hasEqualElements: {stone. scarf. key}.
	self assert: (room hasNothingAt: 1@1).! !

!testRun: #RoomTest #test17PlayableCharacterTakesOneElementSuccessfully stamp: 'AM 12/10/2020 20:48:10'!
ERROR!
!Room methodsFor: 'testing' stamp: 'AM 12/10/2020 20:48:31'!
hasNothingAt: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'testing' stamp: 'AM 12/10/2020 20:48:48' prior: 50878265!
hasNothingAt: aPoint 
	
	^ cells includesKey: aPoint! !
!Room methodsFor: 'testing' stamp: 'AM 12/10/2020 20:49:01'!
hasSomethingAt: aPoint 
	
	^ cells includesKey: aPoint! !

!methodRemoval: Room #hasNothingAt: stamp: 'AM 12/10/2020 20:49:02'!
hasNothingAt: aPoint 
	
	^ cells includesKey: aPoint!
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 20:49:40' prior: 50878216!
test17PlayableCharacterTakesOneElementSuccessfully

	| backpack room character object |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	object := NoPointsPortableObject named: 'piedra' weighing: 8.
	room place: object at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assertBackpack: backpack hasEqualElements: {object}.
	self assert: (room hasSomethingAt: 1@1).! !
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 20:49:47' prior: 50878235!
test18PlayableCharacterTakesRecursivelySuccessfully

	| backpack room character key scarf stone wardrobe |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	stone := NoPointsPortableObject named: 'piedra' weighing: 8.
	scarf := NoPointsPortableObject named: 'bufanda' weighing: 8.
	key := NoPointsPortableObject named: 'llave' weighing: 8.
	wardrobe := NonPortableObject named: 'armario'.
	wardrobe add: stone; add: scarf; add: key.
	
	room place: wardrobe at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assertBackpack: backpack hasEqualElements: {stone. scarf. key}.
	self assert: (room hasSomethingAt: 1@1).! !

!testRun: #RoomTest #test18PlayableCharacterTakesRecursivelySuccessfully stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #RoomTest #test10MovingPlayableCharacterBackwardsShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceStageObjectInOccupiedCell stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #RoomTest #test13PlayableCharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #RoomTest #test14PlayableCharacterShouldNotTakeFromACellThatIsOutOfRoomsBound stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #RoomTest #test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #RoomTest #test16PlayableCharacterTakesNothingFromEmptyCell stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #RoomTest #test17PlayableCharacterTakesOneElementSuccessfully stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #RoomTest #test18PlayableCharacterTakesRecursivelySuccessfully stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #StageObjectTest #test01NonPortableObjectHasNoStageObjects stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #StageObjectTest #test02NonPortableObjectCanHaveOneStageObject stamp: 'AM 12/10/2020 20:49:49'!
PASSED!

!testRun: #StageObjectTest #test03NonPortableObjectCanHaveMoreThanOneStageObjects stamp: 'AM 12/10/2020 20:49:49'!
PASSED!
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 20:50:38' prior: 50878302!
test18PlayableCharacterTakesRecursivelySuccessfully

	| backpack room character key scarf stone wardrobe |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	stone := NoPointsPortableObject named: 'piedra' weighing: 8.
	scarf := NoPointsPortableObject named: 'bufanda' weighing: 8.
	key := NoPointsPortableObject named: 'llave' weighing: 8.
	wardrobe := NonPortableObject named: 'armario'.
	wardrobe add: stone; add: scarf; add: key.
	
	room place: wardrobe at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assertBackpack: backpack hasEqualElements: {stone. scarf. key}.
	self assert: (room hasSomethingAt: 1@1).
	self assert: wardrobe isEmpty.! !

!testRun: #RoomTest #test18PlayableCharacterTakesRecursivelySuccessfully stamp: 'AM 12/10/2020 20:50:40'!
FAILURE!
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 20:50:55' prior: 50878283!
test17PlayableCharacterTakesOneElementSuccessfully

	| backpack room character object |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	object := NoPointsPortableObject named: 'piedra' weighing: 8.
	room place: object at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assertBackpack: backpack hasEqualElements: {object}.
	self deny: (room hasSomethingAt: 1@1).! !

!testRun: #RoomTest #test17PlayableCharacterTakesOneElementSuccessfully stamp: 'AM 12/10/2020 20:50:56'!
FAILURE!
!NoPointsPortableObject methodsFor: 'adding' stamp: 'AM 12/10/2020 20:51:29' prior: 50877177!
addTo: aPlayableCharacter
	
	aPlayableCharacter take: self! !
!Room methodsFor: 'taking' stamp: 'AM 12/10/2020 20:51:54' prior: 50878207!
takeFor: aPlayableCharacter at: aPosition 
	
	self assertIsWithinBounds: aPosition.
	cells at: aPosition ifPresent: [ :aCharacterOrStageObject | aCharacterOrStageObject addTo: aPlayableCharacter from: self ]! !
!NoPointsPortableObject methodsFor: 'adding' stamp: 'AM 12/10/2020 20:52:49'!
addTo: aPlayableCharacter from: aRoom 
	
	aPlayableCharacter take: self! !

!methodRemoval: NoPointsPortableObject #addTo: stamp: 'AM 12/10/2020 20:52:49'!
addTo: aPlayableCharacter
	
	aPlayableCharacter take: self!
!NonPortableObject methodsFor: 'adding' stamp: 'AM 12/10/2020 20:53:10'!
addTo: aPlayableCharacter from: aRoom
	
	stageObjects do: [ :aStageObject | aStageObject addTo: aPlayableCharacter from: aRoom]! !

!methodRemoval: NonPortableObject #addTo: stamp: 'AM 12/10/2020 20:53:12'!
addTo: aPlayableCharacter 
	
	stageObjects do: [ :aStageObject | aStageObject addTo: aPlayableCharacter ]!
!NoPointsPortableObject methodsFor: 'adding' stamp: 'AM 12/10/2020 20:54:09' prior: 50878574!
addTo: aPlayableCharacter from: aContainer
	
	aPlayableCharacter take: self.
	aContainer remove: self.! !

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #RoomTest #test10MovingPlayableCharacterBackwardsShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceStageObjectInOccupiedCell stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #RoomTest #test13PlayableCharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #RoomTest #test14PlayableCharacterShouldNotTakeFromACellThatIsOutOfRoomsBound stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #RoomTest #test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter stamp: 'AM 12/10/2020 20:54:39'!
ERROR!

!testRun: #RoomTest #test16PlayableCharacterTakesNothingFromEmptyCell stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #RoomTest #test17PlayableCharacterTakesOneElementSuccessfully stamp: 'AM 12/10/2020 20:54:39'!
ERROR!

!testRun: #RoomTest #test18PlayableCharacterTakesRecursivelySuccessfully stamp: 'AM 12/10/2020 20:54:39'!
ERROR!

!testRun: #StageObjectTest #test01NonPortableObjectHasNoStageObjects stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #StageObjectTest #test02NonPortableObjectCanHaveOneStageObject stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #StageObjectTest #test03NonPortableObjectCanHaveMoreThanOneStageObjects stamp: 'AM 12/10/2020 20:54:39'!
PASSED!

!testRun: #RoomTest #test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter stamp: 'AM 12/10/2020 20:54:45'!
ERROR!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'AM 12/10/2020 20:55:38'!
addTo: aPlayableCharacter from: aRoom

	self error: self class canNotTakeFromAnotherCharacterErrorDescription! !

!methodRemoval: PlayableCharacter #addTo: stamp: 'AM 12/10/2020 20:55:41'!
addTo: aPlayableCharacter

	self error: self class canNotTakeFromAnotherCharacterErrorDescription!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 20:55:46'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AM 12/10/2020 20:55:46'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AM 12/10/2020 20:55:46'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AM 12/10/2020 20:55:46'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AM 12/10/2020 20:55:46'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AM 12/10/2020 20:55:46'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AM 12/10/2020 20:55:46'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 20:55:46'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 20:55:46'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AM 12/10/2020 20:55:46'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AM 12/10/2020 20:55:46'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AM 12/10/2020 20:55:46'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AM 12/10/2020 20:55:46'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AM 12/10/2020 20:55:46'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AM 12/10/2020 20:55:46'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AM 12/10/2020 20:55:46'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 20:55:46'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 20:55:46'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 20:55:46'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 20:55:46'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 20:55:46'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 20:55:46'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 20:55:46'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 20:55:46'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 20:55:47'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 20:55:47'!
PASSED!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 20:55:47'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 20:55:47'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 20:55:47'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 20:55:47'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 20:55:47'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 20:55:47'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 20:55:47'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 20:55:47'!
PASSED!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 20:55:47'!
PASSED!

!testRun: #RoomTest #test10MovingPlayableCharacterBackwardsShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 20:55:47'!
PASSED!

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 20:55:47'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceStageObjectInOccupiedCell stamp: 'AM 12/10/2020 20:55:47'!
PASSED!

!testRun: #RoomTest #test13PlayableCharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving stamp: 'AM 12/10/2020 20:55:47'!
PASSED!

!testRun: #RoomTest #test14PlayableCharacterShouldNotTakeFromACellThatIsOutOfRoomsBound stamp: 'AM 12/10/2020 20:55:47'!
PASSED!

!testRun: #RoomTest #test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter stamp: 'AM 12/10/2020 20:55:47'!
PASSED!

!testRun: #RoomTest #test16PlayableCharacterTakesNothingFromEmptyCell stamp: 'AM 12/10/2020 20:55:47'!
PASSED!

!testRun: #RoomTest #test17PlayableCharacterTakesOneElementSuccessfully stamp: 'AM 12/10/2020 20:55:47'!
ERROR!

!testRun: #RoomTest #test18PlayableCharacterTakesRecursivelySuccessfully stamp: 'AM 12/10/2020 20:55:47'!
ERROR!

!testRun: #StageObjectTest #test01NonPortableObjectHasNoStageObjects stamp: 'AM 12/10/2020 20:55:47'!
PASSED!

!testRun: #StageObjectTest #test02NonPortableObjectCanHaveOneStageObject stamp: 'AM 12/10/2020 20:55:47'!
PASSED!

!testRun: #StageObjectTest #test03NonPortableObjectCanHaveMoreThanOneStageObjects stamp: 'AM 12/10/2020 20:55:47'!
PASSED!

!testRun: #RoomTest #test17PlayableCharacterTakesOneElementSuccessfully stamp: 'AM 12/10/2020 20:55:49'!
ERROR!
!Room methodsFor: 'removing' stamp: 'AM 12/10/2020 20:56:06'!
remove: aNoPointsPortableObject 
	self shouldBeImplemented.! !
!Room methodsFor: 'removing' stamp: 'AM 12/10/2020 20:56:12' prior: 50878973!
remove: aPortableObject 
	
	! !
!Room methodsFor: 'removing' stamp: 'AM 12/10/2020 20:56:59' prior: 50878978!
remove: aPortableObject 

	cells remove: aPortableObject 
	
	! !

!testRun: #RoomTest #test17PlayableCharacterTakesOneElementSuccessfully stamp: 'AM 12/10/2020 20:57:01'!
ERROR!
!Room methodsFor: 'removing' stamp: 'AM 12/10/2020 20:57:37' prior: 50878982!
remove: aPortableObject 

	cells removeKey: (cells keyAtValue: aPortableObject)
	
	! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AM 12/10/2020 20:57:41'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AM 12/10/2020 20:57:41'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #RoomTest #test10MovingPlayableCharacterBackwardsShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceStageObjectInOccupiedCell stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #RoomTest #test13PlayableCharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #RoomTest #test14PlayableCharacterShouldNotTakeFromACellThatIsOutOfRoomsBound stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #RoomTest #test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #RoomTest #test16PlayableCharacterTakesNothingFromEmptyCell stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #RoomTest #test17PlayableCharacterTakesOneElementSuccessfully stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #RoomTest #test18PlayableCharacterTakesRecursivelySuccessfully stamp: 'AM 12/10/2020 20:57:42'!
ERROR!

!testRun: #StageObjectTest #test01NonPortableObjectHasNoStageObjects stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #StageObjectTest #test02NonPortableObjectCanHaveOneStageObject stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #StageObjectTest #test03NonPortableObjectCanHaveMoreThanOneStageObjects stamp: 'AM 12/10/2020 20:57:42'!
PASSED!

!testRun: #RoomTest #test18PlayableCharacterTakesRecursivelySuccessfully stamp: 'AM 12/10/2020 20:57:42'!
ERROR!
!NonPortableObject methodsFor: 'adding' stamp: 'AM 12/10/2020 20:58:18' prior: 50878584!
addTo: aPlayableCharacter from: aRoom
	
	stageObjects do: [ :aStageObject | aStageObject addTo: aPlayableCharacter from: self]! !

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 20:58:20'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 20:58:20'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 20:58:20'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 20:58:20'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 20:58:20'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 20:58:20'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 20:58:20'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 20:58:20'!
PASSED!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 20:58:20'!
PASSED!

!testRun: #RoomTest #test10MovingPlayableCharacterBackwardsShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 20:58:20'!
PASSED!

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 20:58:20'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceStageObjectInOccupiedCell stamp: 'AM 12/10/2020 20:58:20'!
PASSED!

!testRun: #RoomTest #test13PlayableCharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving stamp: 'AM 12/10/2020 20:58:20'!
PASSED!

!testRun: #RoomTest #test14PlayableCharacterShouldNotTakeFromACellThatIsOutOfRoomsBound stamp: 'AM 12/10/2020 20:58:20'!
PASSED!

!testRun: #RoomTest #test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter stamp: 'AM 12/10/2020 20:58:21'!
PASSED!

!testRun: #RoomTest #test16PlayableCharacterTakesNothingFromEmptyCell stamp: 'AM 12/10/2020 20:58:21'!
PASSED!

!testRun: #RoomTest #test17PlayableCharacterTakesOneElementSuccessfully stamp: 'AM 12/10/2020 20:58:21'!
PASSED!

!testRun: #RoomTest #test18PlayableCharacterTakesRecursivelySuccessfully stamp: 'AM 12/10/2020 20:58:21'!
ERROR!

!testRun: #StageObjectTest #test01NonPortableObjectHasNoStageObjects stamp: 'AM 12/10/2020 20:58:21'!
PASSED!

!testRun: #StageObjectTest #test02NonPortableObjectCanHaveOneStageObject stamp: 'AM 12/10/2020 20:58:21'!
PASSED!

!testRun: #StageObjectTest #test03NonPortableObjectCanHaveMoreThanOneStageObjects stamp: 'AM 12/10/2020 20:58:21'!
PASSED!

!testRun: #RoomTest #test18PlayableCharacterTakesRecursivelySuccessfully stamp: 'AM 12/10/2020 20:58:21'!
ERROR!
!NonPortableObject methodsFor: 'removing' stamp: 'AM 12/10/2020 20:58:34'!
remove: aNoPointsPortableObject 
	self shouldBeImplemented.! !
!NonPortableObject methodsFor: 'removing' stamp: 'AM 12/10/2020 20:58:49' prior: 50879260!
remove: aPortableObject 
	
	stageObjects remove: 	aPortableObject ! !

!testRun: #RoomTest #test18PlayableCharacterTakesRecursivelySuccessfully stamp: 'AM 12/10/2020 20:58:52'!
FAILURE!
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 20:59:17' prior: 50878504!
test18PlayableCharacterTakesRecursivelySuccessfully

	| backpack room character key scarf stone wardrobe |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	stone := PointsPortableObject named: 'piedra' weighing: 8.
	scarf := NoPointsPortableObject named: 'bufanda' weighing: 8.
	key := NoPointsPortableObject named: 'llave' weighing: 8.
	wardrobe := NonPortableObject named: 'armario'.
	wardrobe add: stone; add: scarf; add: key.
	
	room place: wardrobe at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assertBackpack: backpack hasEqualElements: {stone. scarf. key}.
	self assert: (room hasSomethingAt: 1@1).
	self assert: wardrobe isEmpty.! !

!testRun: #RoomTest #test18PlayableCharacterTakesRecursivelySuccessfully stamp: 'AM 12/10/2020 20:59:19'!
ERROR!
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 20:59:31' prior: 50879274!
test18PlayableCharacterTakesRecursivelySuccessfully

	| backpack room character key scarf stone wardrobe |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	stone := PointsPortableObject named: 'piedra' weighing: 8 worth: 100.
	scarf := NoPointsPortableObject named: 'bufanda' weighing: 8.
	key := NoPointsPortableObject named: 'llave' weighing: 8.
	wardrobe := NonPortableObject named: 'armario'.
	wardrobe add: stone; add: scarf; add: key.
	
	room place: wardrobe at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assertBackpack: backpack hasEqualElements: {stone. scarf. key}.
	self assert: (room hasSomethingAt: 1@1).
	self assert: wardrobe isEmpty.! !

!testRun: #RoomTest #test18PlayableCharacterTakesRecursivelySuccessfully stamp: 'AM 12/10/2020 20:59:33'!
ERROR!
!PointsPortableObject methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 20:59:47'!
addTo: aPlayableCharacter from: aNonPortableObject 
	self shouldBeImplemented.! !
!PointsPortableObject methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 21:00:10' prior: 50879338!
addTo: aPlayableCharacter from: aContainer 
	
	
	aPlayableCharacter take: self.
	aContainer remove: self.! !
!PointsPortableObject methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 21:00:12' prior: 50879344!
addTo: aPlayableCharacter from: aContainer 
	
	aPlayableCharacter take: self.
	aContainer remove: self.! !

!testRun: #StageObjectTest #test01NonPortableObjectHasNoStageObjects stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #RoomTest #test10MovingPlayableCharacterBackwardsShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceStageObjectInOccupiedCell stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #RoomTest #test13PlayableCharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #RoomTest #test14PlayableCharacterShouldNotTakeFromACellThatIsOutOfRoomsBound stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #RoomTest #test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #RoomTest #test16PlayableCharacterTakesNothingFromEmptyCell stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #RoomTest #test17PlayableCharacterTakesOneElementSuccessfully stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #RoomTest #test18PlayableCharacterTakesRecursivelySuccessfully stamp: 'AM 12/10/2020 21:00:18'!
FAILURE!

!testRun: #StageObjectTest #test01NonPortableObjectHasNoStageObjects stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #StageObjectTest #test02NonPortableObjectCanHaveOneStageObject stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #StageObjectTest #test03NonPortableObjectCanHaveMoreThanOneStageObjects stamp: 'AM 12/10/2020 21:00:18'!
PASSED!

!testRun: #RoomTest #test18PlayableCharacterTakesRecursivelySuccessfully stamp: 'AM 12/10/2020 21:00:18'!
FAILURE!

!testRun: #RoomTest #test18PlayableCharacterTakesRecursivelySuccessfully stamp: 'AM 12/10/2020 21:00:40'!
FAILURE!

aBackpack!

!testRun: #RoomTest #test14PlayableCharacterShouldNotTakeFromACellThatIsOutOfRoomsBound stamp: 'AM 12/10/2020 21:01:17'!
PASSED!

!testRun: #RoomTest #test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter stamp: 'AM 12/10/2020 21:01:20'!
PASSED!

!testRun: #RoomTest #test16PlayableCharacterTakesNothingFromEmptyCell stamp: 'AM 12/10/2020 21:01:24'!
PASSED!

!testRun: #RoomTest #test17PlayableCharacterTakesOneElementSuccessfully stamp: 'AM 12/10/2020 21:01:26'!
PASSED!
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 21:02:01' prior: 50879306!
test18PlayableCharacterTakesRecursivelySuccessfully

	| backpack room character key scarf stone wardrobe |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	stone := PointsPortableObject named: 'piedra' weighing: 8 worth: 100.
	scarf := NoPointsPortableObject named: 'bufanda' weighing: 8.
	key := NoPointsPortableObject named: 'llave' weighing: 8.
	wardrobe := NonPortableObject named: 'armario'.
	wardrobe add: stone; add: scarf; add: key.
	
	room place: wardrobe at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assertBackpack: backpack hasEqualElements: {stone. scarf. key}.
	self assert: (room at: 1@1 has: wardrobe).
	self assert: wardrobe isEmpty.! !

!testRun: #RoomTest #test18PlayableCharacterTakesRecursivelySuccessfully stamp: 'AM 12/10/2020 21:02:07'!
FAILURE!

!testRun: #RoomTest #test18PlayableCharacterTakesRecursivelySuccessfully stamp: 'AM 12/10/2020 21:02:07'!
FAILURE!
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 21:03:35' prior: 50879555!
test18PlayableCharacterTakesRecursivelySuccessfully

	| backpack room character key scarf stone wardrobe |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	stone := PointsPortableObject named: 'piedra' weighing: 8 worth: 1.
	scarf := NoPointsPortableObject named: 'bufanda' weighing: 8.
	key := NoPointsPortableObject named: 'llave' weighing: 8.
	wardrobe := NonPortableObject named: 'armario'.
	wardrobe add: stone; add: scarf; add: key.
	
	room place: wardrobe at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assertBackpack: backpack hasEqualElements: {stone. scarf. key}.
	self assert: (room at: 1@1 has: wardrobe).
	self assert: wardrobe isEmpty.! !

!testRun: #RoomTest #test18PlayableCharacterTakesRecursivelySuccessfully stamp: 'AM 12/10/2020 21:03:37'!
FAILURE!

wardrobe!

!testRun: #RoomTest #test18PlayableCharacterTakesRecursivelySuccessfully stamp: 'AM 12/10/2020 21:04:50'!
FAILURE!
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 21:05:01' prior: 50879591!
test18PlayableCharacterTakesRecursivelySuccessfully

	| backpack room character key scarf stone wardrobe |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	stone := PointsPortableObject named: 'piedra' weighing: 8 worth: 1.
	scarf := NoPointsPortableObject named: 'bufanda' weighing: 8.
	key := NoPointsPortableObject named: 'llave' weighing: 8.
	wardrobe := NonPortableObject named: 'armario'.
	wardrobe add: stone; add: scarf; add: key.
	
	room place: wardrobe at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	self halt.
	character take.
	
	self assertBackpack: backpack hasEqualElements: {stone. scarf. key}.
	self assert: (room at: 1@1 has: wardrobe).
	self assert: wardrobe isEmpty.! !
!NonPortableObject methodsFor: 'adding' stamp: 'AM 12/10/2020 21:06:25' prior: 50879171!
addTo: aPlayableCharacter from: aRoom
	
	stageObjects do: [ :aStageObject | aStageObject addTo: aPlayableCharacter from: self]! !
!NonPortableObject methodsFor: 'adding' stamp: 'AM 12/10/2020 21:06:32' prior: 50879656!
addTo: aPlayableCharacter from: aRoom
	
	stageObjects copy do: [ :aStageObject | aStageObject addTo: aPlayableCharacter from: self]! !

!testRun: #RoomTest #test18PlayableCharacterTakesRecursivelySuccessfully stamp: 'AM 12/10/2020 21:06:34'!
PASSED!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 21:06:34'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 21:06:34'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 21:06:34'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 21:06:34'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 21:06:34'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 21:06:34'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 21:06:34'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 21:06:34'!
PASSED!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 21:06:34'!
PASSED!

!testRun: #RoomTest #test10MovingPlayableCharacterBackwardsShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 21:06:34'!
PASSED!

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 21:06:34'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceStageObjectInOccupiedCell stamp: 'AM 12/10/2020 21:06:34'!
PASSED!

!testRun: #RoomTest #test13PlayableCharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving stamp: 'AM 12/10/2020 21:06:34'!
PASSED!

!testRun: #RoomTest #test14PlayableCharacterShouldNotTakeFromACellThatIsOutOfRoomsBound stamp: 'AM 12/10/2020 21:06:34'!
PASSED!

!testRun: #RoomTest #test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter stamp: 'AM 12/10/2020 21:06:34'!
PASSED!

!testRun: #RoomTest #test16PlayableCharacterTakesNothingFromEmptyCell stamp: 'AM 12/10/2020 21:06:34'!
PASSED!

!testRun: #RoomTest #test17PlayableCharacterTakesOneElementSuccessfully stamp: 'AM 12/10/2020 21:06:34'!
PASSED!
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 21:06:42' prior: 50879627!
test18PlayableCharacterTakesRecursivelySuccessfully

	| backpack room character key scarf stone wardrobe |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	stone := PointsPortableObject named: 'piedra' weighing: 8 worth: 1.
	scarf := NoPointsPortableObject named: 'bufanda' weighing: 8.
	key := NoPointsPortableObject named: 'llave' weighing: 8.
	wardrobe := NonPortableObject named: 'armario'.
	wardrobe add: stone; add: scarf; add: key.
	
	room place: wardrobe at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	
	character take.
	
	self assertBackpack: backpack hasEqualElements: {stone. scarf. key}.
	self assert: (room at: 1@1 has: wardrobe).
	self assert: wardrobe isEmpty.! !

!testRun: #RoomTest #test18PlayableCharacterTakesRecursivelySuccessfully stamp: 'AM 12/10/2020 21:06:43'!
PASSED!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 21:06:43'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 21:06:43'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 21:06:43'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 21:06:43'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 21:06:43'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 21:06:43'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 21:06:43'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 21:06:43'!
PASSED!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 21:06:43'!
PASSED!

!testRun: #RoomTest #test10MovingPlayableCharacterBackwardsShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 21:06:43'!
PASSED!

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 21:06:43'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceStageObjectInOccupiedCell stamp: 'AM 12/10/2020 21:06:43'!
PASSED!

!testRun: #RoomTest #test13PlayableCharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving stamp: 'AM 12/10/2020 21:06:43'!
PASSED!

!testRun: #RoomTest #test14PlayableCharacterShouldNotTakeFromACellThatIsOutOfRoomsBound stamp: 'AM 12/10/2020 21:06:43'!
PASSED!

!testRun: #RoomTest #test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter stamp: 'AM 12/10/2020 21:06:43'!
PASSED!

!testRun: #RoomTest #test16PlayableCharacterTakesNothingFromEmptyCell stamp: 'AM 12/10/2020 21:06:43'!
PASSED!

!testRun: #RoomTest #test17PlayableCharacterTakesOneElementSuccessfully stamp: 'AM 12/10/2020 21:06:43'!
PASSED!

!testRun: #RoomTest #test18PlayableCharacterTakesRecursivelySuccessfully stamp: 'AM 12/10/2020 21:06:43'!
PASSED!
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 21:07:50' prior: 50879738!
test18PlayableCharacterTakesRecursivelySuccessfully

	| backpack room character key scarf stone wardrobe drawer |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	stone := PointsPortableObject named: 'piedra' weighing: 8 worth: 1.
	drawer := NonPortableObject named: 'cajon'.
	scarf := NoPointsPortableObject named: 'bufanda' weighing: 8.
	key := NoPointsPortableObject named: 'llave' weighing: 8.
	wardrobe := NonPortableObject named: 'armario'.
	wardrobe add: stone; add: scarf; add: key.
	
	room place: wardrobe at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	
	character take.
	
	self assertBackpack: backpack hasEqualElements: {stone. scarf. key}.
	self assert: (room at: 1@1 has: wardrobe).
	self assert: wardrobe isEmpty.! !
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 21:08:07' prior: 50879837!
test18PlayableCharacterTakesRecursivelySuccessfully

	| backpack room character key scarf stone wardrobe drawer |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	stone := PointsPortableObject named: 'piedra' weighing: 8 worth: 1.
	drawer := NonPortableObject named: 'cajon'.
	scarf := NoPointsPortableObject named: 'bufanda' weighing: 8.
	key := NoPointsPortableObject named: 'llave' weighing: 8.
	wardrobe := NonPortableObject named: 'armario'.
	wardrobe add: stone; add: scarf; add: key; add: drawer.
	
	room place: wardrobe at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	
	character take.
	
	self assertBackpack: backpack hasEqualElements: {stone. scarf. key}.
	self assert: (room at: 1@1 has: wardrobe).
	self assert: wardrobe isEmpty.! !
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 21:09:22' prior: 50879867!
test18PlayableCharacterTakesRecursivelySuccessfully

	| backpack room character key scarf stone wardrobe drawer |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	stone := PointsPortableObject named: 'piedra' weighing: 8 worth: 1.
	drawer := NonPortableObject named: 'cajon'.
	scarf := NoPointsPortableObject named: 'bufanda' weighing: 8.
	key := NoPointsPortableObject named: 'llave' weighing: 8.
	wardrobe := NonPortableObject named: 'armario'.
	wardrobe add: stone; add: scarf; add: key; add: drawer.
	
	room place: wardrobe at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	
	character take.
	
	self assertBackpack: backpack hasEqualElements: {stone. scarf. key}.
	self assert: (room at: 1@1 has: wardrobe).
	self assert: (wardrobe stageObjects hasEqualElements: {drawer} ).! !

!testRun: #RoomTest #test18PlayableCharacterTakesRecursivelySuccessfully stamp: 'AM 12/10/2020 21:09:26'!
PASSED!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 21:09:26'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 21:09:26'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 21:09:26'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 21:09:26'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 21:09:26'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 21:09:26'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 21:09:26'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 21:09:26'!
PASSED!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 21:09:26'!
PASSED!

!testRun: #RoomTest #test10MovingPlayableCharacterBackwardsShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 21:09:26'!
PASSED!

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 21:09:26'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceStageObjectInOccupiedCell stamp: 'AM 12/10/2020 21:09:26'!
PASSED!

!testRun: #RoomTest #test13PlayableCharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving stamp: 'AM 12/10/2020 21:09:26'!
PASSED!

!testRun: #RoomTest #test14PlayableCharacterShouldNotTakeFromACellThatIsOutOfRoomsBound stamp: 'AM 12/10/2020 21:09:26'!
PASSED!

!testRun: #RoomTest #test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter stamp: 'AM 12/10/2020 21:09:26'!
PASSED!

!testRun: #RoomTest #test16PlayableCharacterTakesNothingFromEmptyCell stamp: 'AM 12/10/2020 21:09:26'!
PASSED!

!testRun: #RoomTest #test17PlayableCharacterTakesOneElementSuccessfully stamp: 'AM 12/10/2020 21:09:26'!
PASSED!

!testRun: #RoomTest #test18PlayableCharacterTakesRecursivelySuccessfully stamp: 'AM 12/10/2020 21:09:26'!
PASSED!
!PortableObject methodsFor: 'adding' stamp: 'AM 12/10/2020 21:11:49'!
addTo: aBackpack from: aContainer

	self subclassResponsibility	! !
!StageObject methodsFor: 'adding' stamp: 'AM 12/10/2020 21:12:13'!
addTo: aBackpack from: aContainer

	self subclassResponsibility	! !

!methodRemoval: PortableObject #addTo:from: stamp: 'AM 12/10/2020 21:12:13'!
addTo: aBackpack from: aContainer

	self subclassResponsibility	!
!NonPortableObject methodsFor: 'adding' stamp: 'AM 12/10/2020 21:12:35' prior: 50879663 overrides: 50880004!
addTo: aPlayableCharacter from: aContainer
	
	stageObjects copy do: [ :aStageObject | aStageObject addTo: aPlayableCharacter from: self]! !

----SNAPSHOT----(10 December 2020 21:14:04) CuisUniversity-4384.image priorSource: 17374304!
!RoomTest methodsFor: 'tests - moving character' stamp: 'AM 12/10/2020 21:14:48'!
newPlayerIn: room with: backpack

	^ PlayableCharacter named: 'Agustin' using: backpack  at: 1@1 heading: #North playingIn: room! !
!RoomTest methodsFor: 'tests - moving character' stamp: 'AM 12/10/2020 21:14:48' prior: 50875773!
test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := self newPlayerIn: room with: backpack .
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room positionShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 1@1 heading: #North).
			]! !
!RoomTest methodsFor: 'tests - moving character' stamp: 'AM 12/10/2020 21:15:36' prior: 50880033!
test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds

	| character |
	
	character := self newPlayerIn: (Room ofHeight: 2 andWidth: 2) with: (Backpack containingUpTo: 100 limitingPointsTo: 100).
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room positionShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 1@1 heading: #North).
			]! !
!RoomTest methodsFor: 'tests - moving character' stamp: 'AM 12/10/2020 21:16:10' prior: 50880053!
test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds

	| character |
	
	character := self newDefaultPlayer.
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room positionShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 1@1 heading: #North).
			]! !
!RoomTest methodsFor: 'tests - moving character' stamp: 'AM 12/10/2020 21:16:31'!
newDefaultPlayer

	^ self newPlayerIn: (Room ofHeight: 2 andWidth: 2) 
		with: (Backpack containingUpTo: 100 limitingPointsTo: 100).	! !
!RoomTest methodsFor: 'tests - moving character' stamp: 'AM 12/10/2020 19:48:08' prior: 50880071!
test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@1 heading: #North playingIn: room .
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room positionShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 1@1 heading: #North).
			]! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 21:17:51' prior: 50875823!
test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit

	| room |
	
	room := Room ofHeight: 2 andWidth: 2.
	
	self should: [ PlayableCharacter named: 'Agustin' using: self defaultBackpack  at: 0@-1 heading: #North playingIn: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room positionShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 21:18:07' prior: 50880116!
test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit

	| room |
	
	room := Room ofHeight: 2 andWidth: 2.
	
	self should: [ PlayableCharacter named: 'Agustin' 
								using: self defaultBackpack  
								at: 0@-1 
								heading: #North 
								playingIn: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room positionShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 21:18:28' prior: 50875735!
test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit

	| backpack room |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	self should: [  PlayableCharacter named: 'Agustin' 
								using: self defaultBackpack  
								at: 0@2 
								heading: #North 
								playingIn: room  ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room positionShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 21:18:35' prior: 50880153!
test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit

	| room |

	room := Room ofHeight: 2 andWidth: 2.
	
	self should: [  PlayableCharacter named: 'Agustin' 
								using: self defaultBackpack  
								at: 0@2 
								heading: #North 
								playingIn: room  ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room positionShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 21:19:04' prior: 50880174!
test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit

	| room coordinate |

	room := Room ofHeight: 2 andWidth: 2.
	coordinate := 0@2.
	
	self should: [  PlayableCharacter named: 'Agustin' 
								using: self defaultBackpack  
								at: 0@2 
								heading: #North 
								playingIn: room  ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room positionShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 21:19:15' prior: 50880193!
test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit

	| room coordinate |

	room := Room ofHeight: 2 andWidth: 2.
	coordinate := 0@2.
	
	self should: [  PlayableCharacter named: 'Agustin' 
								using: self defaultBackpack  
								at: coordinate 
								heading: #North 
								playingIn: room  ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room positionShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 21:19:34'!
newPlayerAt: coordinate playingIn: room

	^ PlayableCharacter named: 'Agustin' 
								using: self defaultBackpack  
								at: coordinate 
								heading: #North 
								playingIn: room! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 21:19:34' prior: 50880213!
test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit

	| room coordinate |

	room := Room ofHeight: 2 andWidth: 2.
	coordinate := 0@2.
	
	self should: [  self newPlayerAt: coordinate playingIn: room  ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room positionShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 21:19:44' prior: 50880242!
test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit

	| room coordinate |

	room := Room ofHeight: 2 andWidth: 2.
	
	self should: [  self newPlayerAt: 0@2 playingIn: room  ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room positionShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 21:19:48' prior: 50880259!
test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit

	| room |

	room := Room ofHeight: 2 andWidth: 2.
	
	self should: [  self newPlayerAt: 0@2 playingIn: room  ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room positionShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 21:19:58' prior: 50880134!
test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit

	| room |
	
	room := Room ofHeight: 2 andWidth: 2.
	
	self should: [ self newPlayerAt: 0@-1 playingIn: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room positionShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 21:20:12' prior: 50875794!
test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit

	| room |

	room := Room ofHeight: 2 andWidth: 2.
	
	self should: [ self newPlayerAt: -1@0 playingIn: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room positionShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 21:20:30' prior: 50875754!
test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit

	| backpack room |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	self should: [ self newPlayerAt: 2@0 playingIn: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room positionShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 21:20:34' prior: 50880323!
test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit

	| room |
	
	room := Room ofHeight: 2 andWidth: 2.
	
	self should: [ self newPlayerAt: 2@0 playingIn: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room positionShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: room isEmpty.
			]! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 21:20:47' prior: 50880232!
newPlayerAt: aCoordinate playingIn: room

	^ PlayableCharacter named: 'Agustin' 
								using: self defaultBackpack  
								at: aCoordinate 
								heading: #North 
								playingIn: room! !
!RoomTest methodsFor: 'tests - player initial position' stamp: 'AM 12/10/2020 21:20:54' prior: 50880357!
newPlayerAt: aCoordinate playingIn: aRoom

	^ PlayableCharacter named: 'Agustin' 
								using: self defaultBackpack  
								at: aCoordinate 
								heading: #North 
								playingIn: aRoom! !
!RoomTest methodsFor: 'tests - placing' stamp: 'AM 12/10/2020 21:21:42' prior: 50874135!
test12ShouldNotPlaceStageObjectInOccupiedCell

	| room object anotherObject |
	
	object := self newNoPointsObject.
	anotherObject := self newNoPointsObject.
	room := Room ofHeight: 2 andWidth: 2.
	room place: object at: 0@1.
	
	self should: [ room place: anotherObject at: 0@1 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room shouldNotMoveToOccupiedCellErrorDescription equals: anError messageText.
			self assert: (room at: 0@1 has: object).
			]! !
!RoomTest methodsFor: 'tests - placing' stamp: 'AM 12/10/2020 21:21:52'!
defaultRoom

	^ Room ofHeight: 2 andWidth: 2! !
!RoomTest methodsFor: 'tests - placing' stamp: 'AM 12/10/2020 21:21:52' prior: 50880376!
test12ShouldNotPlaceStageObjectInOccupiedCell

	| room object anotherObject |
	
	object := self newNoPointsObject.
	anotherObject := self newNoPointsObject.
	room := self defaultRoom.
	room place: object at: 0@1.
	
	self should: [ room place: anotherObject at: 0@1 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room shouldNotMoveToOccupiedCellErrorDescription equals: anError messageText.
			self assert: (room at: 0@1 has: object).
			]! !
!RoomTest methodsFor: 'tests - placing' stamp: 'AM 12/10/2020 21:22:05' prior: 50880399!
test12ShouldNotPlaceStageObjectInOccupiedCell

	| room stageObject anotherObject |
	
	stageObject := self newNoPointsObject.
	anotherObject := self newNoPointsObject.
	room := self defaultRoom.
	room place: stageObject at: 0@1.
	
	self should: [ room place: anotherObject at: 0@1 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room shouldNotMoveToOccupiedCellErrorDescription equals: anError messageText.
			self assert: (room at: 0@1 has: stageObject).
			]! !
!RoomTest methodsFor: 'setUp/tearDown' stamp: 'AM 12/10/2020 21:22:54' overrides: 16927572!
setUp! !
!RoomTest methodsFor: 'tests - moving character' stamp: 'AM 12/10/2020 21:23:24' prior: 50880094!
test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds

	| room character |
	
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: self defaultBackpack  at: 1@1 heading: #North playingIn: room .
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room positionShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 1@1 heading: #North).
			]! !
!RoomTest methodsFor: 'tests - moving character' stamp: 'AM 12/10/2020 21:23:51' prior: 50880440!
test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds

	| room character |
	
	room := Room ofHeight: 2 andWidth: 2.
	character := self newPlayerAt: 1@1 playingIn: room .
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room positionShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 1@1 heading: #North).
			]! !

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 21:23:57'!
ERROR!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 21:23:57'!
ERROR!
!RoomTest methodsFor: 'test object factory' stamp: 'AM 12/10/2020 21:24:13'!
defaultBackpack
	self shouldBeImplemented.! !
!RoomTest methodsFor: 'test object factory' stamp: 'AM 12/10/2020 21:24:30' prior: 50880485!
defaultBackpack
	
	^ Backpack containingUpTo: 100 limitingPointsTo: 100 ! !

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 21:24:31'!
PASSED!
!RoomTest methodsFor: 'tests - moving character' stamp: 'AM 12/10/2020 21:24:58' prior: 50875842!
test10MovingPlayableCharacterBackwardsShouldStayWithinRoomBounds

	| room character |
	room := Room ofHeight: 2 andWidth: 2.
	character := self newPlayerAt: 0@0 playingIn: room. 
	
	self should: [ character moveBackward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room positionShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 0@0 heading: #North).
			]! !
!RoomTest methodsFor: 'tests - moving character' stamp: 'AM 12/10/2020 21:25:01' prior: 50880500!
test10MovingPlayableCharacterBackwardsShouldStayWithinRoomBounds

	| room character |
	
	room := Room ofHeight: 2 andWidth: 2.
	character := self newPlayerAt: 0@0 playingIn: room. 
	
	self should: [ character moveBackward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room positionShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 0@0 heading: #North).
			]! !
!RoomTest methodsFor: 'tests - moving character' stamp: 'AM 12/10/2020 21:25:11' prior: 50880518!
test10MovingPlayableCharacterBackwardsShouldStayWithinRoomBounds

	| room character |
	
	room := Room ofHeight: 2 andWidth: 2.
	character := self newPlayerAt: 0@0 playingIn: room. 
	
	self should: [ character moveBackward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room positionShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: (character isAt: 0@0 heading: #North).
			]! !
!RoomTest methodsFor: 'tests - moving character' stamp: 'AM 12/10/2020 21:25:37' prior: 50874060!
test11ShouldNotMovePlayableCharacterToOccupiedCell

	| room character object |
	
	object := NoPointsPortableObject named: 'Agustin' weighing: 8.
	room := Room ofHeight: 2 andWidth: 2.
	room place: object at: 0@1.
	
	character := self newPlayerAt: 0@0 playingIn: room. 
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room shouldNotMoveToOccupiedCellErrorDescription equals: anError messageText.
			self assert: (character isAt: 0@0 heading: #North).
			]! !
!RoomTest methodsFor: 'tests - moving character' stamp: 'AM 12/10/2020 21:26:04' prior: 50876065!
test13PlayableCharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	character := self newPlayerAt: 0@0 playingIn: room.
	character moveForward.
	
	self assert: (room at: 0@1 has: character).
	self assert: (character isAt: 0@1 heading: #North).
! !
!RoomTest methodsFor: 'tests - moving character' stamp: 'AM 12/10/2020 21:26:09' prior: 50880574!
test13PlayableCharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving

	| room character |
	
	room := Room ofHeight: 2 andWidth: 2.
	
	character := self newPlayerAt: 0@0 playingIn: room.
	character moveForward.
	
	self assert: (room at: 0@1 has: character).
	self assert: (character isAt: 0@1 heading: #North).
! !
!RoomTest methodsFor: 'tests - placing' stamp: 'AM 12/10/2020 19:12:37' prior: 50880417!
test12ShouldNotPlaceStageObjectInOccupiedCell

	| room object anotherObject |
	
	object := NoPointsPortableObject named: 'Agustin' weighing: 8.
	anotherObject := NoPointsPortableObject named: 'Agustin' weighing: 8.
	room := Room ofHeight: 2 andWidth: 2.
	room place: object at: 0@1.
	
	self should: [ room place: anotherObject at: 0@1 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room shouldNotMoveToOccupiedCellErrorDescription equals: anError messageText.
			self assert: (room at: 0@1 has: object).
			]! !
!RoomTest methodsFor: 'tests - placing' stamp: 'AM 12/10/2020 21:27:09' prior: 50880603!
test12ShouldNotPlaceStageObjectInOccupiedCell

	| room object anotherObject |
	
	room := Room ofHeight: 2 andWidth: 2.
	room place: object at: 0@1.
	
	self should: [ room place: anotherObject at: 0@1 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room shouldNotMoveToOccupiedCellErrorDescription equals: anError messageText.
			self assert: (room at: 0@1 has: object).
			]! !

!methodRemoval: Room #canMoveTo: stamp: 'AM 12/10/2020 21:28:44'!
canMoveTo: aPosition

	self assertIsWithinBounds: aPosition.
	cells at: aPosition ifPresent: [:anObject | self error: self class shouldNotMoveToOccupiedCellErrorDescription].
	
	!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #RoomTest #test10MovingPlayableCharacterBackwardsShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceStageObjectInOccupiedCell stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #RoomTest #test13PlayableCharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #RoomTest #test14PlayableCharacterShouldNotTakeFromACellThatIsOutOfRoomsBound stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #RoomTest #test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #RoomTest #test16PlayableCharacterTakesNothingFromEmptyCell stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #RoomTest #test17PlayableCharacterTakesOneElementSuccessfully stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #RoomTest #test18PlayableCharacterTakesRecursivelySuccessfully stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #StageObjectTest #test01NonPortableObjectHasNoStageObjects stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #StageObjectTest #test02NonPortableObjectCanHaveOneStageObject stamp: 'AM 12/10/2020 21:30:45'!
PASSED!

!testRun: #StageObjectTest #test03NonPortableObjectCanHaveMoreThanOneStageObjects stamp: 'AM 12/10/2020 21:30:45'!
PASSED!
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 21:31:36' prior: 50879897!
test18PlayableCharacterTakesRecursivelySuccessfully

	| backpack room character key scarf stone1 wardrobe drawer |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	stone1 := PointsPortableObject named: 'piedra' weighing: 8 worth: 1.
	drawer := NonPortableObject named: 'cajon'.
	scarf := NoPointsPortableObject named: 'bufanda' weighing: 8.
	key := NoPointsPortableObject named: 'llave' weighing: 8.
	wardrobe := NonPortableObject named: 'armario'.
	wardrobe add: stone1; add: scarf; add: key; add: drawer.
	
	room place: wardrobe at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	
	character take.
	
	self assertBackpack: backpack hasEqualElements: {stone1. scarf. key}.
	self assert: (room at: 1@1 has: wardrobe).
	self assert: (wardrobe stageObjects hasEqualElements: {drawer} ).! !
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 21:31:46' prior: 50880819!
test18PlayableCharacterTakesRecursivelySuccessfully

	| backpack room character key scarf1 stone1 wardrobe drawer |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	stone1 := PointsPortableObject named: 'piedra' weighing: 8 worth: 1.
	drawer := NonPortableObject named: 'cajon'.
	scarf1 := NoPointsPortableObject named: 'bufanda' weighing: 8.
	key := NoPointsPortableObject named: 'llave' weighing: 8.
	wardrobe := NonPortableObject named: 'armario'.
	wardrobe add: stone1; add: scarf1; add: key; add: drawer.
	
	room place: wardrobe at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	
	character take.
	
	self assertBackpack: backpack hasEqualElements: {stone1. scarf1. key}.
	self assert: (room at: 1@1 has: wardrobe).
	self assert: (wardrobe stageObjects hasEqualElements: {drawer} ).! !
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 21:32:40' prior: 50880851!
test18PlayableCharacterTakesRecursivelySuccessfully

	| backpack room character key1 scarf1 stone1 wardrobe1 drawer1 |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	stone1 := PointsPortableObject named: 'piedra' weighing: 8 worth: 1.
	drawer1 := NonPortableObject named: 'cajon'.
	scarf1 := NoPointsPortableObject named: 'bufanda' weighing: 8.
	key1 := NoPointsPortableObject named: 'llave' weighing: 8.
	wardrobe1 := NonPortableObject named: 'armario'.
	wardrobe1 add: stone1; add: scarf1; add: key1; add: drawer1.
	
	room place: wardrobe1 at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	
	character take.
	
	self assertBackpack: backpack hasEqualElements: {stone1. scarf1. key1}.
	self assert: (room at: 1@1 has: wardrobe1).
	self assert: (wardrobe1 stageObjects hasEqualElements: {drawer1} ).! !

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'AM 12/10/2020 21:34:03'!
TestCase subclass: #RoomTest
	instanceVariableNames: 'wardrobe'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'AM 12/10/2020 21:34:05'!
TestCase subclass: #RoomTest
	instanceVariableNames: 'wardrobe scarf'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'AM 12/10/2020 21:34:07'!
TestCase subclass: #RoomTest
	instanceVariableNames: 'wardrobe scarf key'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'AM 12/10/2020 21:34:09'!
TestCase subclass: #RoomTest
	instanceVariableNames: 'wardrobe scarf key stone'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'setUp/tearDown' stamp: 'AM 12/10/2020 21:34:01' prior: 50880436 overrides: 16927572!
setUp

	wardrobe := NonPortableObject named: 'armario'.
	scarf := PointsPortableObject named: 'bufanda' 	weighing: 8 worth: 8.
	key := PointsPortableObject named: 'llave' 	weighing: 8 worth: 8.
	stone := PointsPortableObject named: 'piedra' 	weighing: 8 worth: 8.! !
!RoomTest methodsFor: 'tests - placing' stamp: 'AM 12/10/2020 21:34:48' prior: 50880624!
test12ShouldNotPlaceStageObjectInOccupiedCell

	| room object anotherObject |
	
	room := Room ofHeight: 2 andWidth: 2.
	room place: scarf at: 0@1.
	
	self should: [ room place: anotherObject at: 0@1 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room shouldNotMoveToOccupiedCellErrorDescription equals: anError messageText.
			self assert: (room at: 0@1 has: scarf).
			]! !
!RoomTest methodsFor: 'tests - placing' stamp: 'AM 12/10/2020 21:34:53' prior: 50880960!
test12ShouldNotPlaceStageObjectInOccupiedCell

	| room |
	
	room := Room ofHeight: 2 andWidth: 2.
	room place: scarf at: 0@1.
	
	self should: [ room place: stone at: 0@1 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room shouldNotMoveToOccupiedCellErrorDescription equals: anError messageText.
			self assert: (room at: 0@1 has: scarf).
			]! !
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 21:35:36' prior: 50875896!
test14PlayableCharacterShouldNotTakeFromACellThatIsOutOfRoomsBound

	| backpack room character |
	
	backpack := self defaultBackpack.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@1 heading: #North playingIn: room .
	
	self should: [ character take ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room positionShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: backpack isEmpty.
			]! !
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 21:36:07' prior: 50876284!
test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter

	| backpack room character anotherCharacter |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	anotherCharacter := self newPlayerAt: 1@1 playingIn: room. .
	
	self should: [ character take ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter canNotTakeFromAnotherCharacterErrorDescription equals: anError messageText.
			self assert: backpack isEmpty.
			]! !
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 21:36:19' prior: 50881010!
test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter

	| backpack room character anotherCharacter |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	anotherCharacter := self newPlayerAt: 1@1 playingIn: room. .
	
	self should: [ character take ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter canNotTakeFromAnotherCharacterErrorDescription equals: anError messageText.
			self assert: backpack isEmpty.
			]! !
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 21:36:47' prior: 50878536!
test17PlayableCharacterTakesOneElementSuccessfully

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	room place: stone at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	character take.
	
	self assertBackpack: backpack hasEqualElements: {stone}.
	self deny: (room hasSomethingAt: 1@1).! !

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'AM 12/10/2020 21:37:48'!
TestCase subclass: #RoomTest
	instanceVariableNames: 'wardrobe scarf key stone drawer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 21:37:46' prior: 50880883!
test18PlayableCharacterTakesRecursivelySuccessfully

	| backpack room character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	room := Room ofHeight: 2 andWidth: 2.
	
	wardrobe add: stone; add: scarf; add: key; add: drawer.
	
	room place: wardrobe at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: room .
	
	character take.
	
	self assertBackpack: backpack hasEqualElements: {stone. scarf. key}.
	self assert: (room at: 1@1 has: wardrobe).
	self assert: (wardrobe stageObjects hasEqualElements: {drawer} ).! !

!classRenamed: #StageObjectTest as: #NonPortableObjectTest stamp: 'AM 12/10/2020 21:38:26'!
Smalltalk renameClassNamed: #StageObjectTest as: #NonPortableObjectTest!
!RoomTest methodsFor: 'setUp/tearDown' stamp: 'AM 12/10/2020 21:38:50' prior: 50880948 overrides: 16927572!
setUp

	wardrobe := NonPortableObject named: 'armario'.
	wardrobe := NonPortableObject named: 'armario'.
	
	scarf := PointsPortableObject named: 'bufanda' 	weighing: 8 worth: 8.
	key := NoPointsPortableObject named: 'llave' 	weighing: 8.
	stone := PointsPortableObject named: 'piedra' 	weighing: 8 worth: 8.! !
!RoomTest methodsFor: 'setUp/tearDown' stamp: 'AM 12/10/2020 21:38:57' prior: 50881111 overrides: 16927572!
setUp

	wardrobe := NonPortableObject named: 'armario'.
	wardrobe := NonPortableObject named: 'armario'.
	
	scarf := PointsPortableObject named: 'bufanda' 	weighing: 8 worth: 8.
	key := NoPointsPortableObject named: 'llave' 	weighing: 8.
	stone := PointsPortableObject named: 'piedra' 	weighing: 8 worth: 8.! !
!RoomTest methodsFor: 'setUp/tearDown' stamp: 'AM 12/10/2020 21:39:01' prior: 50881125 overrides: 16927572!
setUp

	wardrobe := NonPortableObject named: 'armario'.
	drawer := NonPortableObject named: 'cajon'.
	
	scarf := PointsPortableObject named: 'bufanda' 	weighing: 8 worth: 8.
	key := NoPointsPortableObject named: 'llave' 	weighing: 8.
	stone := PointsPortableObject named: 'piedra' 	weighing: 8 worth: 8.! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #NonPortableObjectTest #test01NonPortableObjectHasNoStageObjects stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #NonPortableObjectTest #test02NonPortableObjectCanHaveOneStageObject stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #NonPortableObjectTest #test03NonPortableObjectCanHaveMoreThanOneStageObjects stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #RoomTest #test10MovingPlayableCharacterBackwardsShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceStageObjectInOccupiedCell stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #RoomTest #test13PlayableCharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #RoomTest #test14PlayableCharacterShouldNotTakeFromACellThatIsOutOfRoomsBound stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #RoomTest #test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #RoomTest #test16PlayableCharacterTakesNothingFromEmptyCell stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #RoomTest #test17PlayableCharacterTakesOneElementSuccessfully stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!testRun: #RoomTest #test18PlayableCharacterTakesRecursivelySuccessfully stamp: 'AM 12/10/2020 21:39:03'!
PASSED!

!methodRemoval: RoomTest #defaultRoom stamp: 'AM 12/10/2020 21:39:12'!
defaultRoom

	^ Room ofHeight: 2 andWidth: 2!

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'AM 12/10/2020 21:39:31'!
TestCase subclass: #RoomTest
	instanceVariableNames: 'wardrobe scarf key stone drawer defaultRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'setUp/tearDown' stamp: 'AM 12/10/2020 21:39:29' prior: 50881139 overrides: 16927572!
setUp

	wardrobe := NonPortableObject named: 'armario'.
	drawer := NonPortableObject named: 'cajon'.
	defaultRoom := Room ofHeight: 2 andWidth: 2. 
	
	scarf := PointsPortableObject named: 'bufanda' 	weighing: 8 worth: 8.
	key := NoPointsPortableObject named: 'llave' 	weighing: 8.
	stone := PointsPortableObject named: 'piedra' 	weighing: 8 worth: 8.! !
!RoomTest methodsFor: 'tests - placing' stamp: 'AM 12/10/2020 21:39:55' prior: 50880976!
test12ShouldNotPlaceStageObjectInOccupiedCell

	
	
	defaultRoom place: scarf at: 0@1.
	
	self should: [ defaultRoom place: stone at: 0@1 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room shouldNotMoveToOccupiedCellErrorDescription equals: anError messageText.
			self assert: (defaultRoom at: 0@1 has: scarf).
			]! !
!RoomTest methodsFor: 'tests - placing' stamp: 'AM 12/10/2020 21:39:59' prior: 50881351!
test12ShouldNotPlaceStageObjectInOccupiedCell
	
	defaultRoom place: scarf at: 0@1.
	
	self should: [ defaultRoom place: stone at: 0@1 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room shouldNotMoveToOccupiedCellErrorDescription equals: anError messageText.
			self assert: (defaultRoom at: 0@1 has: scarf).
			]! !
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 21:40:18' prior: 50880991!
test14PlayableCharacterShouldNotTakeFromACellThatIsOutOfRoomsBound

	| backpack character |
	
	backpack := self defaultBackpack.
	
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@1 heading: #North playingIn: defaultRoom .
	
	self should: [ character take ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room positionShouldBeInsideRoomErrorDescription equals: anError messageText.
			self assert: backpack isEmpty.
			]! !
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 21:40:32' prior: 50881034!
test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter

	| backpack character anotherCharacter |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: defaultRoom .
	anotherCharacter := self newPlayerAt: 1@1 playingIn: defaultRoom. .
	
	self should: [ character take ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter canNotTakeFromAnotherCharacterErrorDescription equals: anError messageText.
			self assert: backpack isEmpty.
			]! !
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 21:40:45' prior: 50878122!
test16PlayableCharacterTakesNothingFromEmptyCell

	| backpack character |
	
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: defaultRoom .
	character take.
	
	self assert: backpack isEmpty! !
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 21:40:53' prior: 50881421!
test16PlayableCharacterTakesNothingFromEmptyCell

	| backpack character |
	
	backpack := self defaultBackpack.
	
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: defaultRoom .
	character take.
	
	self assert: backpack isEmpty! !
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 21:41:22' prior: 50881058!
test17PlayableCharacterTakesOneElementSuccessfully

	| backpack character |
	
	backpack := self defaultBackpack.
	
	defaultRoom place: stone at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: defaultRoom .
	character take.
	
	self assertBackpack: backpack hasEqualElements: {stone}.
	self deny: (defaultRoom hasSomethingAt: 1@1).! !
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 21:41:43' prior: 50881083!
test18PlayableCharacterTakesRecursivelySuccessfully

	| backpack character |
	
	backpack := self defaultBackpack.
	
	wardrobe add: stone; add: scarf; add: key; add: drawer.
	
	defaultRoom place: wardrobe at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: defaultRoom .
	
	character take.
	
	self assertBackpack: backpack hasEqualElements: {stone. scarf. key}.
	self assert: (defaultRoom at: 1@1 has: wardrobe).
	self assert: (wardrobe stageObjects hasEqualElements: {drawer} ).! !

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'AM 12/10/2020 21:42:14'!
TestCase subclass: #RoomTest
	instanceVariableNames: 'wardrobe scarf key stone drawer defaultRoom defaultBackpack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'setUp/tearDown' stamp: 'AM 12/10/2020 21:42:11' prior: 50881337 overrides: 16927572!
setUp

	wardrobe := NonPortableObject named: 'armario'.
	drawer := NonPortableObject named: 'cajon'.
	
	defaultRoom := Room ofHeight: 2 andWidth: 2. 
	defaultBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100. 
	
	scarf := PointsPortableObject named: 'bufanda' 	weighing: 8 worth: 8.
	key := NoPointsPortableObject named: 'llave' 	weighing: 8.
	stone := PointsPortableObject named: 'piedra' 	weighing: 8 worth: 8.! !

!methodRemoval: RoomTest #defaultBackpack stamp: 'AM 12/10/2020 21:42:21'!
defaultBackpack
	
	^ Backpack containingUpTo: 100 limitingPointsTo: 100 !
!RoomTest methodsFor: 'test object factory' stamp: 'AM 12/10/2020 21:42:46' prior: 50880367!
newPlayerAt: aCoordinate playingIn: aRoom

	^ PlayableCharacter named: 'Agustin' 
								using: self defaultBackpack  
								at: aCoordinate 
								heading: #North 
								playingIn: aRoom! !
!RoomTest methodsFor: 'test object factory' stamp: 'AM 12/10/2020 21:43:09'!
defaultBackpack  
								
	^ Backpack containingUpTo: 100 limitingPointsTo: 100.! !
!RoomTest methodsFor: 'setUp/tearDown' stamp: 'AM 12/10/2020 21:43:17' prior: 50881491 overrides: 16927572!
setUp

	wardrobe := NonPortableObject named: 'armario'.
	drawer := NonPortableObject named: 'cajon'.
	
	defaultRoom := Room ofHeight: 2 andWidth: 2. 
	
	scarf := PointsPortableObject named: 'bufanda' 	weighing: 8 worth: 8.
	key := NoPointsPortableObject named: 'llave' 	weighing: 8.
	stone := PointsPortableObject named: 'piedra' 	weighing: 8 worth: 8.! !

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'AM 12/10/2020 21:43:32'!
TestCase subclass: #RoomTest
	instanceVariableNames: 'wardrobe scarf key stone drawer defaultRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'tests - moving character' stamp: 'AM 12/10/2020 21:43:59' prior: 50880554!
test11ShouldNotMovePlayableCharacterToOccupiedCell

	| room character |
	
	room := Room ofHeight: 2 andWidth: 2.
	room place: scarf at: 0@1.
	
	character := self newPlayerAt: 0@0 playingIn: room. 
	
	self should: [ character moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room shouldNotMoveToOccupiedCellErrorDescription equals: anError messageText.
			self assert: (character isAt: 0@0 heading: #North).
			]! !

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 21:44:06'!
PASSED!
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 21:44:54' prior: 50881398!
test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter

	| backpack character anotherCharacter |
	
	backpack := self defaultBackpack.
	
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: defaultRoom .
	anotherCharacter := self newPlayerAt: 1@1 playingIn: defaultRoom. .
	
	self should: [ character take ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter canNotTakeFromAnotherCharacterErrorDescription equals: anError messageText.
			self assert: backpack isEmpty.
			]! !
!PortableObject methodsFor: 'adding' stamp: 'AM 12/10/2020 21:45:34' overrides: 50880004!
addTo: aPlayableCharacter from: aContainer 
	
	aPlayableCharacter take: self.
	aContainer remove: self.! !

!methodRemoval: PointsPortableObject #addTo:from: stamp: 'AM 12/10/2020 21:45:34'!
addTo: aPlayableCharacter from: aContainer 
	
	aPlayableCharacter take: self.
	aContainer remove: self.!

!methodRemoval: NoPointsPortableObject #addTo:from: stamp: 'AM 12/10/2020 21:45:40'!
addTo: aPlayableCharacter from: aContainer
	
	aPlayableCharacter take: self.
	aContainer remove: self.!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AM 12/10/2020 21:45:43'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AM 12/10/2020 21:45:43'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #NonPortableObjectTest #test01NonPortableObjectHasNoStageObjects stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #NonPortableObjectTest #test02NonPortableObjectCanHaveOneStageObject stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #NonPortableObjectTest #test03NonPortableObjectCanHaveMoreThanOneStageObjects stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #RoomTest #test10MovingPlayableCharacterBackwardsShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceStageObjectInOccupiedCell stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #RoomTest #test13PlayableCharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #RoomTest #test14PlayableCharacterShouldNotTakeFromACellThatIsOutOfRoomsBound stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #RoomTest #test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #RoomTest #test16PlayableCharacterTakesNothingFromEmptyCell stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #RoomTest #test17PlayableCharacterTakesOneElementSuccessfully stamp: 'AM 12/10/2020 21:45:44'!
PASSED!

!testRun: #RoomTest #test18PlayableCharacterTakesRecursivelySuccessfully stamp: 'AM 12/10/2020 21:45:44'!
PASSED!
!NonPortableObjectTest methodsFor: 'tests' stamp: 'AM 12/10/2020 21:46:50' prior: 50877008!
test03NonPortableObjectCanHaveMoreThanOneStageObjects

	| wardrobe key scarf drawer |
	
	wardrobe := NonPortableObject named: 'armario'.
	
	scarf := PointsPortableObject named: 'bufanda' weighing: 10.
	drawer := NonPortableObject named: 'cajon'.
	key := NoPointsPortableObject named: 'llave' weighing: 10.

	wardrobe add: scarf; add: drawer; add: key.
	
	self assert: wardrobe stageObjects equals: {scarf. drawer. key} asOrderedCollection.! !

!testRun: #NonPortableObjectTest #test03NonPortableObjectCanHaveMoreThanOneStageObjects stamp: 'AM 12/10/2020 21:46:52'!
ERROR!
!NonPortableObjectTest methodsFor: 'tests' stamp: 'AM 12/10/2020 21:47:02' prior: 50881784!
test03NonPortableObjectCanHaveMoreThanOneStageObjects

	| wardrobe key scarf drawer |
	
	wardrobe := NonPortableObject named: 'armario'.
	
	scarf := PointsPortableObject named: 'bufanda' weighing: 10 worth: 8.
	drawer := NonPortableObject named: 'cajon'.
	key := NoPointsPortableObject named: 'llave' weighing: 10.

	wardrobe add: scarf; add: drawer; add: key.
	
	self assert: wardrobe stageObjects equals: {scarf. drawer. key} asOrderedCollection.! !

!testRun: #NonPortableObjectTest #test03NonPortableObjectCanHaveMoreThanOneStageObjects stamp: 'AM 12/10/2020 21:47:06'!
PASSED!

!testRun: #NonPortableObjectTest #test01NonPortableObjectHasNoStageObjects stamp: 'AM 12/10/2020 21:47:06'!
PASSED!

!testRun: #NonPortableObjectTest #test02NonPortableObjectCanHaveOneStageObject stamp: 'AM 12/10/2020 21:47:06'!
PASSED!

!testRun: #NonPortableObjectTest #test03NonPortableObjectCanHaveMoreThanOneStageObjects stamp: 'AM 12/10/2020 21:47:06'!
PASSED!

----SNAPSHOT----(10 December 2020 21:48:20) CuisUniversity-4384.image priorSource: 17547883!
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 21:50:18'!
test19

	| backpack character |
	
	backpack := self defaultBackpack.
	
	100 timesRepeat: [ wardrobe add: (PointsPortableObject named: 'ads' weighing: 9 worth: 4) ].
	
	defaultRoom place: wardrobe at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: defaultRoom .
	
	character take.
	
	self assertBackpack: backpack hasEqualElements: {stone. scarf. key}.
	self assert: (defaultRoom at: 1@1 has: wardrobe).
	self assert: (wardrobe stageObjects hasEqualElements: {drawer} ).! !
!RoomTest methodsFor: 'tests - take' stamp: 'AM 12/10/2020 21:51:26' prior: 50881840!
test19

	| backpack character |
	
	backpack := self defaultBackpack.
	
	100 timesRepeat: [ wardrobe add: (PointsPortableObject named: 'ads' weighing: 10 worth: 4) ].
	
	defaultRoom place: wardrobe at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: defaultRoom .
	
	[ character take ] on:Error do: [:anError |].
	
	self assert: backpack size equals: 10.
	self assert: (defaultRoom at: 1@1 has: wardrobe).
	self assert: wardrobe stageObjects size equals: 90.! !

!testRun: #RoomTest #test19 stamp: 'AM 12/10/2020 21:51:28'!
PASSED!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 21:51:28'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 21:51:28'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 21:51:28'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 21:51:28'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 21:51:28'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 21:51:28'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 21:51:28'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 21:51:28'!
PASSED!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 21:51:28'!
PASSED!

!testRun: #RoomTest #test10MovingPlayableCharacterBackwardsShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 21:51:28'!
PASSED!

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 21:51:28'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceStageObjectInOccupiedCell stamp: 'AM 12/10/2020 21:51:28'!
PASSED!

!testRun: #RoomTest #test13PlayableCharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving stamp: 'AM 12/10/2020 21:51:28'!
PASSED!

!testRun: #RoomTest #test14PlayableCharacterShouldNotTakeFromACellThatIsOutOfRoomsBound stamp: 'AM 12/10/2020 21:51:28'!
PASSED!

!testRun: #RoomTest #test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter stamp: 'AM 12/10/2020 21:51:28'!
PASSED!

!testRun: #RoomTest #test16PlayableCharacterTakesNothingFromEmptyCell stamp: 'AM 12/10/2020 21:51:28'!
PASSED!

!testRun: #RoomTest #test17PlayableCharacterTakesOneElementSuccessfully stamp: 'AM 12/10/2020 21:51:28'!
PASSED!

!testRun: #RoomTest #test18PlayableCharacterTakesRecursivelySuccessfully stamp: 'AM 12/10/2020 21:51:28'!
PASSED!

!testRun: #RoomTest #test19 stamp: 'AM 12/10/2020 21:51:28'!
PASSED!

!methodRemoval: RoomTest #test19 stamp: 'AM 12/10/2020 21:51:52'!
test19

	| backpack character |
	
	backpack := self defaultBackpack.
	
	100 timesRepeat: [ wardrobe add: (PointsPortableObject named: 'ads' weighing: 10 worth: 4) ].
	
	defaultRoom place: wardrobe at: 1@1.
	character := PlayableCharacter named: 'Agustin' using: backpack  at: 1@0 heading: #North playingIn: defaultRoom .
	
	[ character take ] on:Error do: [:anError |].
	
	self assert: backpack size equals: 10.
	self assert: (defaultRoom at: 1@1 has: wardrobe).
	self assert: wardrobe stageObjects size equals: 90.!
!Room methodsFor: 'placing' stamp: 'AM 12/10/2020 21:54:07'!
place: aCharacter from: aStartingPosition at: anEndingPosition
	
	self assertCanPlaceAt: anEndingPosition.
	
	cells removeKey: aStartingPosition.
	cells at: anEndingPosition put: aCharacter.! !
!PlayableCharacterTest methodsFor: 'room simulator' stamp: 'AM 12/10/2020 21:54:07'!
place: aPlayableCharacter from: anotherPosition at: aPoint! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 21:54:07' prior: 50876035!
moveForward
	
	room place: self from: self forwardPosition at: position.
	
	position := self forwardPosition ! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 21:54:07' prior: 50876053!
moveBackward
	
	room place: self from: self backwardPosition at: position.
	
	position := self backwardPosition ! !

!methodRemoval: Room #place:at:from: stamp: 'AM 12/10/2020 21:54:07'!
place: aCharacter at: anEndingPosition from: aStartingPosition
	
	self assertCanPlaceAt: anEndingPosition.
	
	cells removeKey: aStartingPosition.
	cells at: anEndingPosition put: aCharacter.!

!methodRemoval: PlayableCharacterTest #place:at:from: stamp: 'AM 12/10/2020 21:54:07'!
place: aPlayableCharacter at: aPoint from: anotherPosition!
!Room methodsFor: 'placing' stamp: 'AM 12/10/2020 21:54:21'!
move: aCharacter from: aStartingPosition at: anEndingPosition
	
	self assertCanPlaceAt: anEndingPosition.
	
	cells removeKey: aStartingPosition.
	cells at: anEndingPosition put: aCharacter.! !
!PlayableCharacterTest methodsFor: 'room simulator' stamp: 'AM 12/10/2020 21:54:21'!
move: aPlayableCharacter from: anotherPosition at: aPoint! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 21:54:21' prior: 50881984!
moveForward
	
	room move: self from: self forwardPosition at: position.
	
	position := self forwardPosition ! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 21:54:22' prior: 50881991!
moveBackward
	
	room move: self from: self backwardPosition at: position.
	
	position := self backwardPosition ! !

!methodRemoval: Room #place:from:at: stamp: 'AM 12/10/2020 21:54:22'!
place: aCharacter from: aStartingPosition at: anEndingPosition
	
	self assertCanPlaceAt: anEndingPosition.
	
	cells removeKey: aStartingPosition.
	cells at: anEndingPosition put: aCharacter.!

!methodRemoval: PlayableCharacterTest #place:from:at: stamp: 'AM 12/10/2020 21:54:22'!
place: aPlayableCharacter from: anotherPosition at: aPoint!
!Room methodsFor: 'placing' stamp: 'AM 12/10/2020 21:54:35'!
move: aCharacter from: aStartingPosition to: anEndingPosition
	
	self assertCanPlaceAt: anEndingPosition.
	
	cells removeKey: aStartingPosition.
	cells at: anEndingPosition put: aCharacter.! !
!PlayableCharacterTest methodsFor: 'room simulator' stamp: 'AM 12/10/2020 21:54:36'!
move: aPlayableCharacter from: anotherPosition to: aPoint! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 21:54:36' prior: 50882032!
moveBackward
	
	room move: self from: self backwardPosition to: position.
	
	position := self backwardPosition ! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 21:54:36' prior: 50882025!
moveForward
	
	room move: self from: self forwardPosition to: position.
	
	position := self forwardPosition ! !

!methodRemoval: Room #move:from:at: stamp: 'AM 12/10/2020 21:54:36'!
move: aCharacter from: aStartingPosition at: anEndingPosition
	
	self assertCanPlaceAt: anEndingPosition.
	
	cells removeKey: aStartingPosition.
	cells at: anEndingPosition put: aCharacter.!

!methodRemoval: PlayableCharacterTest #move:from:at: stamp: 'AM 12/10/2020 21:54:36'!
move: aPlayableCharacter from: anotherPosition at: aPoint!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 21:54:44'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 21:54:44'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 21:54:44'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 21:54:45'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 21:54:45'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 21:54:45'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 21:54:45'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 21:54:45'!
PASSED!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 21:54:45'!
FAILURE!

!testRun: #RoomTest #test10MovingPlayableCharacterBackwardsShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 21:54:45'!
FAILURE!

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 21:54:45'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceStageObjectInOccupiedCell stamp: 'AM 12/10/2020 21:54:45'!
PASSED!

!testRun: #RoomTest #test13PlayableCharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving stamp: 'AM 12/10/2020 21:54:45'!
ERROR!

!testRun: #RoomTest #test14PlayableCharacterShouldNotTakeFromACellThatIsOutOfRoomsBound stamp: 'AM 12/10/2020 21:54:45'!
PASSED!

!testRun: #RoomTest #test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter stamp: 'AM 12/10/2020 21:54:45'!
PASSED!

!testRun: #RoomTest #test16PlayableCharacterTakesNothingFromEmptyCell stamp: 'AM 12/10/2020 21:54:45'!
PASSED!

!testRun: #RoomTest #test17PlayableCharacterTakesOneElementSuccessfully stamp: 'AM 12/10/2020 21:54:45'!
PASSED!

!testRun: #RoomTest #test18PlayableCharacterTakesRecursivelySuccessfully stamp: 'AM 12/10/2020 21:54:45'!
PASSED!

!testRun: #RoomTest #test13PlayableCharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving stamp: 'AM 12/10/2020 21:54:48'!
ERROR!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AM 12/10/2020 21:55:00'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AM 12/10/2020 21:55:00'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AM 12/10/2020 21:55:00'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AM 12/10/2020 21:55:00'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AM 12/10/2020 21:55:00'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AM 12/10/2020 21:55:00'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 21:55:00'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 21:55:00'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AM 12/10/2020 21:55:00'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AM 12/10/2020 21:55:00'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AM 12/10/2020 21:55:00'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AM 12/10/2020 21:55:00'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AM 12/10/2020 21:55:00'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AM 12/10/2020 21:55:00'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AM 12/10/2020 21:55:01'!
PASSED!

!testRun: #NonPortableObjectTest #test01NonPortableObjectHasNoStageObjects stamp: 'AM 12/10/2020 21:55:01'!
PASSED!

!testRun: #NonPortableObjectTest #test02NonPortableObjectCanHaveOneStageObject stamp: 'AM 12/10/2020 21:55:01'!
PASSED!

!testRun: #NonPortableObjectTest #test03NonPortableObjectCanHaveMoreThanOneStageObjects stamp: 'AM 12/10/2020 21:55:01'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 21:55:01'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 21:55:01'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 21:55:01'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 21:55:01'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 21:55:01'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 21:55:01'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 21:55:01'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 21:55:01'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 21:55:01'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 21:55:01'!
PASSED!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 21:55:01'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 21:55:01'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 21:55:01'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 21:55:01'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 21:55:01'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 21:55:01'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 21:55:01'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 21:55:01'!
PASSED!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 21:55:01'!
FAILURE!

!testRun: #RoomTest #test10MovingPlayableCharacterBackwardsShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 21:55:01'!
FAILURE!

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 21:55:01'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceStageObjectInOccupiedCell stamp: 'AM 12/10/2020 21:55:01'!
PASSED!

!testRun: #RoomTest #test13PlayableCharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving stamp: 'AM 12/10/2020 21:55:01'!
ERROR!

!testRun: #RoomTest #test14PlayableCharacterShouldNotTakeFromACellThatIsOutOfRoomsBound stamp: 'AM 12/10/2020 21:55:01'!
PASSED!

!testRun: #RoomTest #test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter stamp: 'AM 12/10/2020 21:55:01'!
PASSED!

!testRun: #RoomTest #test16PlayableCharacterTakesNothingFromEmptyCell stamp: 'AM 12/10/2020 21:55:01'!
PASSED!

!testRun: #RoomTest #test17PlayableCharacterTakesOneElementSuccessfully stamp: 'AM 12/10/2020 21:55:01'!
PASSED!

!testRun: #RoomTest #test18PlayableCharacterTakesRecursivelySuccessfully stamp: 'AM 12/10/2020 21:55:01'!
PASSED!

!testRun: #RoomTest #test13PlayableCharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving stamp: 'AM 12/10/2020 21:55:04'!
ERROR!
!PlayableCharacter methodsFor: 'moving' stamp: 'AM 12/10/2020 21:55:28' prior: 50882073!
moveForward
	
	room move: self from: position to: self forwardPosition.
	
	position := self forwardPosition ! !

!testRun: #RoomTest #test13PlayableCharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving stamp: 'AM 12/10/2020 21:55:30'!
PASSED!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 21:55:32'!
PASSED!

!testRun: #RoomTest #test10MovingPlayableCharacterBackwardsShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 21:55:34'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'AM 12/10/2020 21:56:02' prior: 50882066!
moveBackward
	
	room move: self from: position to: self backwardPosition.
	
	position := self backwardPosition ! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #NonPortableObjectTest #test01NonPortableObjectHasNoStageObjects stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #NonPortableObjectTest #test02NonPortableObjectCanHaveOneStageObject stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #NonPortableObjectTest #test03NonPortableObjectCanHaveMoreThanOneStageObjects stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #RoomTest #test01HeightOfRoomShouldBePositive stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomShouldBePositive stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #RoomTest #test03HeightOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #RoomTest #test04WidthOfRoomShouldBeAnInteger stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterInitialPositionShouldBeAboveRoomLowerLimit stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterInitialPositionShouldBeBelowRoomUpperLimit stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterInitialPositionShouldBeToTheRightOfRoomLeftLimit stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterInitialPositionShouldBeToTheLeftOfRoomRightLimit stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #RoomTest #test09MovingPlayableCharacterForwardShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #RoomTest #test10MovingPlayableCharacterBackwardsShouldStayWithinRoomBounds stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #RoomTest #test11ShouldNotMovePlayableCharacterToOccupiedCell stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceStageObjectInOccupiedCell stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #RoomTest #test13PlayableCharacterPositionShouldBeTheRoomsPositionForCharacterAfterMoving stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #RoomTest #test14PlayableCharacterShouldNotTakeFromACellThatIsOutOfRoomsBound stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #RoomTest #test15PlayableCharacterShouldNotTakeFromACellOccupiedByAnotherPlayableCharacter stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #RoomTest #test16PlayableCharacterTakesNothingFromEmptyCell stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #RoomTest #test17PlayableCharacterTakesOneElementSuccessfully stamp: 'AM 12/10/2020 21:56:04'!
PASSED!

!testRun: #RoomTest #test18PlayableCharacterTakesRecursivelySuccessfully stamp: 'AM 12/10/2020 21:56:04'!
PASSED!
!Room methodsFor: 'placing' stamp: 'AM 12/10/2020 21:56:44' prior: 50876703!
place: aCharacterOrStageObject at: aPosition 
	
	self assertCanPlaceAt: aPosition.
	
	cells at: aPosition put: aCharacterOrStageObject.! !
!Room methodsFor: 'testing' stamp: 'AM 12/10/2020 21:57:11' prior: 50878274!
hasSomethingAt: aPosition 
	
	^ cells includesKey: aPosition! !
!StageObject methodsFor: 'adding' stamp: 'AM 12/10/2020 21:57:58' prior: 50880004!
addTo: aPlayableCharacter from: aContainer

	self subclassResponsibility	! !

----SNAPSHOT----(10 December 2020 21:59:01) CuisUniversity-4384.image priorSource: 17605973!

----QUIT----(10 December 2020 22:02:55) CuisUniversity-4384.image priorSource: 17628908!