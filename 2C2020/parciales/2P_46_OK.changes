----STARTUP---- (10 December 2020 16:36:34) as C:\Users\Ami\Desktop\Facultad\Ing1\windows64-parcial\windows64\CuisUniversity-4384.image!


----End fileIn of C:\Users\Ami\Desktop\Facultad\Ing1\ISW1-2020-2C-2doParcial.st----!

TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'as 12/10/2020 17:30:15'!
TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'no messages' stamp: 'as 12/10/2020 17:33:56'!
test01CannotCreateRoomWithNegativeNumberOfCellsProportion
	
	! !

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'as 12/10/2020 17:37:41'!
Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 17:37:32'!
test01CannotCreateRoomWithNegativeNProportion
	
	
	| room |
	room := Room of: -10 for: 10.
	
	! !

!methodRemoval: RoomTest #test01CannotCreateRoomWithNegativeNumberOfCellsProportion stamp: 'as 12/10/2020 17:38:04'!
test01CannotCreateRoomWithNegativeNumberOfCellsProportion
	
	!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 17:38:54' prior: 50868662!
test01CannotCreateRoomWithNegativeNProportion
	
	
	| room |
	
	
	self
		should: [ Room of: -10 for: 10 ]
		raise: Error - MessageNotUnderstood
		withMessageText: Backpack pointsCapacityMustBeIntegerErrorDescription.	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 17:41:08' prior: 50868674!
test01CannotCreateRoomWithNegativeNProportion
		
	self
		should: [ Room of: -10 for: 10 ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Room invalidRoomProportionsErrorDescription ]
	! !
!Room class methodsFor: 'no messages' stamp: 'as 12/10/2020 17:41:40'!
invalidRoomProportionsErrorDescription
	^'The room proportions are invalid!!'! !
!Room class methodsFor: 'initialization' stamp: 'as 12/10/2020 17:42:31'!
of: Nproportion for: Mproportion! !
!Room class methodsFor: 'initialization' stamp: 'as 12/10/2020 17:42:43' prior: 50868700!
of: Nproportion for: Mproportion
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 17:43:39'!
test01CannotCreateRoomWithNProportionSmallerThan1
		
	self
		should: [ Room of: 0 for: 10 ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Room invalidRoomProportionsErrorDescription ]
	! !

!methodRemoval: RoomTest #test01CannotCreateRoomWithNegativeNProportion stamp: 'as 12/10/2020 17:43:42'!
test01CannotCreateRoomWithNegativeNProportion
		
	self
		should: [ Room of: -10 for: 10 ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Room invalidRoomProportionsErrorDescription ]
	!
!Room class methodsFor: 'initialization' stamp: 'as 12/10/2020 17:44:28' prior: 50868704!
of: Nproportion for: Mproportion
	
	Nproportion < 1 ifTrue: [^ self error: self invalidRoomProportionsErrorDescription ]
	! !
!Room class methodsFor: 'initialization' stamp: 'as 12/10/2020 17:44:30' prior: 50868730!
of: Nproportion for: Mproportion
	
	Nproportion < 1 ifTrue: [^ self error: self invalidRoomProportionsErrorDescription ].
	! !

!testRun: #RoomTest #test01CannotCreateRoomWithNProportionSmallerThan1 stamp: 'as 12/10/2020 17:44:35'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 17:44:46'!
test01CannotCreateRoomWithMProportionSmallerThan1
		
	self
		should: [ Room of: 10 for: 0 ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Room invalidRoomProportionsErrorDescription ]
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 17:44:52'!
test02CannotCreateRoomWithMProportionSmallerThan1
		
	self
		should: [ Room of: 10 for: 0 ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Room invalidRoomProportionsErrorDescription ]
	! !

!methodRemoval: RoomTest #test01CannotCreateRoomWithMProportionSmallerThan1 stamp: 'as 12/10/2020 17:44:52'!
test01CannotCreateRoomWithMProportionSmallerThan1
		
	self
		should: [ Room of: 10 for: 0 ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Room invalidRoomProportionsErrorDescription ]
	!

!testRun: #RoomTest #test01CannotCreateRoomWithNProportionSmallerThan1 stamp: 'as 12/10/2020 17:44:57'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithMProportionSmallerThan1 stamp: 'as 12/10/2020 17:44:57'!
FAILURE!

!testRun: #RoomTest #test02CannotCreateRoomWithMProportionSmallerThan1 stamp: 'as 12/10/2020 17:44:57'!
FAILURE!
!Room class methodsFor: 'initialization' stamp: 'as 12/10/2020 17:45:35' prior: 50868737!
of: Nproportion for: Mproportion
	
	(Nproportion < 1 or: [ Mproportion < 1 ]) ifTrue: [^ self error: self invalidRoomProportionsErrorDescription ].
	! !

!testRun: #RoomTest #test01CannotCreateRoomWithNProportionSmallerThan1 stamp: 'as 12/10/2020 17:45:39'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithMProportionSmallerThan1 stamp: 'as 12/10/2020 17:45:39'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 17:45:56'!
test02CannotCreateRoomWithNonIntegerProportions
		
	self
		should: [ Room of: 10 for: 0 ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Room invalidRoomProportionsErrorDescription ]
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 17:46:02'!
test03CannotCreateRoomWithNonIntegerProportions
		
	self
		should: [ Room of: 10 for: 0 ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Room invalidRoomProportionsErrorDescription ]
	! !

!methodRemoval: RoomTest #test02CannotCreateRoomWithNonIntegerProportions stamp: 'as 12/10/2020 17:46:02'!
test02CannotCreateRoomWithNonIntegerProportions
		
	self
		should: [ Room of: 10 for: 0 ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Room invalidRoomProportionsErrorDescription ]
	!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 17:46:12' prior: 50868817!
test03CannotCreateRoomWithNonIntegerProportions
		
	self
		should: [ Room of: 1.6 for: 10 ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Room invalidRoomProportionsErrorDescription ]
	! !

!testRun: #RoomTest #test03CannotCreateRoomWithNonIntegerProportions stamp: 'as 12/10/2020 17:46:17'!
FAILURE!

!testRun: #RoomTest #test03CannotCreateRoomWithNonIntegerProportions stamp: 'as 12/10/2020 17:46:17'!
FAILURE!
!Room class methodsFor: 'initialization' stamp: 'as 12/10/2020 17:48:03' prior: 50868791!
of: Nproportion for: Mproportion
	
	(Nproportion < 1 or: [ Mproportion < 1 ]) ifTrue: [^ self error: self invalidRoomProportionsErrorDescription ].
	
	(Nproportion isInteger not or: [ Mproportion isInteger not ])
	! !
!Room class methodsFor: 'initialization' stamp: 'as 12/10/2020 17:48:10' prior: 50868857!
of: Nproportion for: Mproportion
	
	(Nproportion < 1 or: [ Mproportion < 1 ]) ifTrue: [^ self error: self invalidRoomProportionsErrorDescription ].
	
	(Nproportion isInteger not or: [ Mproportion isInteger not ]) ifTrue: [^ self error: self invalidRoomProportionsErrorDescription ].
	! !

!testRun: #RoomTest #test01CannotCreateRoomWithNProportionSmallerThan1 stamp: 'as 12/10/2020 17:48:13'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithMProportionSmallerThan1 stamp: 'as 12/10/2020 17:48:13'!
PASSED!

!testRun: #RoomTest #test03CannotCreateRoomWithNonIntegerProportions stamp: 'as 12/10/2020 17:48:13'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 17:49:10'!
test03CanCreateRoomWithValidProportions
		
	self
		shouldnt: [ Room of: 10 for: 10 ]
		raise: Error - MessageNotUnderstood
	! !

!testRun: #RoomTest #test03CanCreateRoomWithValidProportions stamp: 'as 12/10/2020 17:49:26'!
PASSED!

!methodRemoval: RoomTest #test03CanCreateRoomWithValidProportions stamp: 'as 12/10/2020 17:49:34'!
test03CanCreateRoomWithValidProportions
		
	self
		shouldnt: [ Room of: 10 for: 10 ]
		raise: Error - MessageNotUnderstood
	!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 17:52:37'!
test04PlayableCharacterIsCreatedInAValidPositionForHisRoom
	
	 | room |
room := Room of: 10 for: 10.
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 17:52:43' prior: 50868906!
test04PlayableCharacterIsCreatedInAValidPositionForHisRoom
	
	| room |
	room := Room of: 10 for: 10.
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 17:54:12' prior: 50868913!
test04PlayableCharacterIsCreatedInAValidPositionForHisRoom
	
	| room playableCharacter|
	
	room := Room of: 10 for: 10.
	
	PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@15 heading: #North in: room.
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 17:54:18' prior: 50868920!
test04PlayableCharacterIsCreatedInAValidPositionForHisRoom
	
	| room |
	
	room := Room of: 10 for: 10.
	
	PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@15 heading: #North in: room.
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 17:54:29' prior: 50868930!
test04PlayableCharacterIsCreatedInAValidPositionForHisRoom
	
	| room |
	
	room := Room of: 10 for: 10.
	
	PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@15 heading: #North in: room.
	
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 17:54:54' prior: 50868940!
test04PlayableCharacterIsCreatedInAValidPositionForHisRoom
	
	| room |
	
	room := Room of: 10 for: 10.
	
	self
		should: [ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@15 heading: #North in: room ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Room invalidRoomProportionsErrorDescription ]
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 17:55:43' prior: 50868950!
test04PlayableCharacterIsCreatedInAValidPositionForHisRoom
	
	| room |
	
	room := Room of: 10 for: 10.
	
	self
		should: [ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@15 heading: #North in: room ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = PlayableCharacter invalidInitialPositionErrorDescription ]
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 17:56:41'!
test04PlayableCharacterIsCreatedInAPositionInsideHisRoomProportions
	
	| room |
	
	room := Room of: 10 for: 10.
	
	self
		should: [ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@15 heading: #North in: room ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = PlayableCharacter invalidInitialPositionErrorDescription ]
	
	! !

!methodRemoval: RoomTest #test04PlayableCharacterIsCreatedInAValidPositionForHisRoom stamp: 'as 12/10/2020 17:56:41'!
test04PlayableCharacterIsCreatedInAValidPositionForHisRoom
	
	| room |
	
	room := Room of: 10 for: 10.
	
	self
		should: [ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@15 heading: #North in: room ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = PlayableCharacter invalidInitialPositionErrorDescription ]
	
	!
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'as 12/10/2020 17:57:28'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint in: aRoom
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading ! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'as 12/10/2020 17:58:26' prior: 50868390!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint 
	
	| newHeading room|

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading ! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'as 12/10/2020 17:58:42' prior: 50869023!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint 
	
	| newHeading room|

	newHeading := self headingFor: aCardinalPoint.
	room := Room of: 10 for: 10.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading ! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'as 12/10/2020 17:58:56' prior: 50869034!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint 
	
	| newHeading room|

	newHeading := self headingFor: aCardinalPoint.
	room := Room of: 10 for: 10.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading in: room. ! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'as 12/10/2020 17:59:14' prior: 50869012!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint in: aRoom
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading in: aRoom ! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'as 12/10/2020 17:59:16' prior: 50869058!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint in: aRoom
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading in: aRoom.! !

!classDefinition: #PlayableCharacter category: 'ISW1-2020-2C-2doParcial' stamp: 'as 12/10/2020 17:59:39'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacter methodsFor: 'initialization' stamp: 'as 12/10/2020 17:59:37'!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading in: aRoom

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading.
	room := aRoom ! !

!methodRemoval: PlayableCharacter #initializeNamed:using:at:heading: stamp: 'as 12/10/2020 17:59:45'!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading 

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'as 12/10/2020 17:59:50'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'as 12/10/2020 17:59:50'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'as 12/10/2020 17:59:50'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'as 12/10/2020 17:59:50'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'as 12/10/2020 17:59:50'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'as 12/10/2020 17:59:50'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'as 12/10/2020 17:59:50'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'as 12/10/2020 17:59:50'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'as 12/10/2020 17:59:50'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'as 12/10/2020 17:59:50'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'as 12/10/2020 17:59:50'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'as 12/10/2020 17:59:50'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'as 12/10/2020 17:59:50'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'as 12/10/2020 17:59:50'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'as 12/10/2020 17:59:50'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'as 12/10/2020 17:59:54'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'as 12/10/2020 17:59:54'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'as 12/10/2020 17:59:54'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'as 12/10/2020 17:59:54'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'as 12/10/2020 17:59:54'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'as 12/10/2020 17:59:54'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'as 12/10/2020 17:59:54'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'as 12/10/2020 17:59:54'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'as 12/10/2020 17:59:54'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'as 12/10/2020 17:59:54'!
PASSED!
!Room class methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:00:44'!
invalidInitialPositionErrorDescription
	^'The playable characters position is invalid for his room!!'! !

!methodRemoval: Room class #invalidInitialPositionErrorDescription stamp: 'as 12/10/2020 18:01:36'!
invalidInitialPositionErrorDescription
	^'The playable characters position is invalid for his room!!'!
!PlayableCharacter class methodsFor: 'heading' stamp: 'as 12/10/2020 18:01:51'!
invalidInitialPositionErrorDescription
	^'The playable characters position is invalid for his room!!'! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'as 12/10/2020 18:04:09' prior: 50869069!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint in: aRoom
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	(aRoom isPositionValid: aPosition) ifFalse: [^self error: self invalidInitialPositionErrorDescription ]. 
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading in: aRoom.! !
!Room methodsFor: 'no messages' stamp: 'as 12/10/2020 18:06:59'!
isPositionValid: aPosition
	
	^ (aPosition between: 0 and: (Nproportion - 1)) and: [(aPosition between: 0 and: (Mproportion - 1))] ! !

Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: 'Nproportion Mproportion'
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

Object!

Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: 'Nproportion Mproportion'
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: 'Nproportion'
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'as 12/10/2020 18:08:18'!
Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: 'Nproportion'
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

Mproportion!
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:09:09' prior: 50869234!
isPositionValid: aPosition
	
	"^ (aPosition between: 0 and: (NProportion - 1)) and: [(aPosition between: 0 and: (MProportion - 1))]" ! !
!Room class methodsFor: 'initialization' stamp: 'as 12/10/2020 18:09:48' prior: 50868867!
of: Nproportion for: Mproportion
	
	(Nproportion < 1 or: [ Mproportion < 1 ]) ifTrue: [^ self error: self invalidRoomProportionsErrorDescription ].
	
	(Nproportion isInteger not or: [ Mproportion isInteger not ]) ifTrue: [^ self error: self invalidRoomProportionsErrorDescription ].
	
	^ self new intitializeWithProportions: Nproportion for: Mproportion.
	! !
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:10:27'!
intitializeWithProportions: Nproportion for: Mproportion
	
	NProportion := Nproportion.
	MProportion := Mproportion.! !

Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: 'MProportion NProportion'
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'as 12/10/2020 18:10:43'!
Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: 'MProportion NProportion'
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:11:01' prior: 50869264!
isPositionValid: aPosition
	
	^ (aPosition between: 0 and: (NProportion - 1)) and: [(aPosition between: 0 and: (MProportion - 1))]! !

Object subclass: #Room
	instanceVariableNames: 'MProportion NProportion'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'as 12/10/2020 18:11:23'!
Object subclass: #Room
	instanceVariableNames: 'MProportion NProportion'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!testRun: #RoomTest #test01CannotCreateRoomWithNProportionSmallerThan1 stamp: 'as 12/10/2020 18:12:12'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithMProportionSmallerThan1 stamp: 'as 12/10/2020 18:12:12'!
PASSED!

!testRun: #RoomTest #test03CannotCreateRoomWithNonIntegerProportions stamp: 'as 12/10/2020 18:12:12'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterIsCreatedInAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 18:12:12'!
ERROR!

!testRun: #RoomTest #test04PlayableCharacterIsCreatedInAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 18:12:12'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:12:53'!
defaultBackpack

	^ Backpack containingUpTo: 100 limitingPointsTo: 100 ! !

!testRun: #RoomTest #test01CannotCreateRoomWithNProportionSmallerThan1 stamp: 'as 12/10/2020 18:12:56'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithMProportionSmallerThan1 stamp: 'as 12/10/2020 18:12:56'!
PASSED!

!testRun: #RoomTest #test03CannotCreateRoomWithNonIntegerProportions stamp: 'as 12/10/2020 18:12:56'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterIsCreatedInAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 18:12:56'!
ERROR!

!testRun: #RoomTest #test04PlayableCharacterIsCreatedInAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 18:12:56'!
ERROR!

!testRun: #RoomTest #test04PlayableCharacterIsCreatedInAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 18:13:18'!
ERROR!

!testRun: #RoomTest #test04PlayableCharacterIsCreatedInAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 18:13:18'!
ERROR!

!testRun: #RoomTest #test04PlayableCharacterIsCreatedInAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 18:13:31'!
ERROR!

!testRun: #RoomTest #test01CannotCreateRoomWithNProportionSmallerThan1 stamp: 'as 12/10/2020 18:14:20'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithMProportionSmallerThan1 stamp: 'as 12/10/2020 18:14:20'!
PASSED!

!testRun: #RoomTest #test03CannotCreateRoomWithNonIntegerProportions stamp: 'as 12/10/2020 18:14:20'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterIsCreatedInAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 18:14:20'!
ERROR!

!testRun: #RoomTest #test04PlayableCharacterIsCreatedInAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 18:14:20'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:15:17' prior: 50869306!
isPositionValid: aPosition
	
	^ (aPosition between: 0@0 and: (NProportion - 1)@0) and: [(aPosition between: 0 and: 0@(MProportion - 1))]! !

!testRun: #RoomTest #test01CannotCreateRoomWithNProportionSmallerThan1 stamp: 'as 12/10/2020 18:15:21'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithMProportionSmallerThan1 stamp: 'as 12/10/2020 18:15:21'!
PASSED!

!testRun: #RoomTest #test03CannotCreateRoomWithNonIntegerProportions stamp: 'as 12/10/2020 18:15:21'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterIsCreatedInAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 18:15:21'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:15:40' prior: 50868980!
test04PlayableCharacterIsCreatedInAPositionInsideHisRoomProportions
	
	| room |
	
	room := Room of: 10 for: 10.
	
	self
		should: [ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@5 heading: #North in: room ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = PlayableCharacter invalidInitialPositionErrorDescription ]
	
	! !

!testRun: #RoomTest #test04PlayableCharacterIsCreatedInAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 18:15:43'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:15:53' prior: 50869422!
test04PlayableCharacterIsCreatedInAPositionInsideHisRoomProportions
	
	| room |
	
	room := Room of: 10 for: 10.
	
	self
		should: [ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@15 heading: #North in: room ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = PlayableCharacter invalidInitialPositionErrorDescription ]
	
	! !

!testRun: #RoomTest #test04PlayableCharacterIsCreatedInAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 18:15:56'!
PASSED!

!testRun: #RoomTest #test01CannotCreateRoomWithNProportionSmallerThan1 stamp: 'as 12/10/2020 18:16:00'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithMProportionSmallerThan1 stamp: 'as 12/10/2020 18:16:00'!
PASSED!

!testRun: #RoomTest #test03CannotCreateRoomWithNonIntegerProportions stamp: 'as 12/10/2020 18:16:00'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterIsCreatedInAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 18:16:00'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:16:19'!
test05CanCreatePlayableCharacterInAPositionInsideHisRoomProportions
	
	| room |
	
	room := Room of: 10 for: 10.
	
	self
		should: [ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@15 heading: #North in: room ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = PlayableCharacter invalidInitialPositionErrorDescription ]
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:16:25' prior: 50869476!
test05CanCreatePlayableCharacterInAPositionInsideHisRoomProportions
	
	| room |
	
	room := Room of: 10 for: 10.
	
	self
		shouldnt: [ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@15 heading: #North in: room ]
		raise: Error - MessageNotUnderstood
		
	! !

!testRun: #RoomTest #test05CanCreatePlayableCharacterInAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 18:16:28'!
FAILURE!

!testRun: #RoomTest #test05CanCreatePlayableCharacterInAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 18:16:28'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:16:56' prior: 50869492!
test05CanCreatePlayableCharacterInAPositionInsideHisRoomProportions
	
	| room |
	
	room := Room of: 10 for: 10.
	
	self
		shouldnt: [ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@5 heading: #North in: room ]
		raise: Error - MessageNotUnderstood
		
	! !

!testRun: #RoomTest #test05CanCreatePlayableCharacterInAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 18:16:59'!
FAILURE!

!testRun: #RoomTest #test05CanCreatePlayableCharacterInAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 18:16:59'!
FAILURE!

aPosition!
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:18:50' prior: 50869400!
isPositionValid: aPosition
	
	^ (aPosition x between: 0 and: (NProportion - 1)) and: [(aPosition y between: 0 and: (MProportion - 1))]! !

!testRun: #RoomTest #test01CannotCreateRoomWithNProportionSmallerThan1 stamp: 'as 12/10/2020 18:18:53'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithMProportionSmallerThan1 stamp: 'as 12/10/2020 18:18:53'!
PASSED!

!testRun: #RoomTest #test03CannotCreateRoomWithNonIntegerProportions stamp: 'as 12/10/2020 18:18:53'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterIsCreatedInAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 18:18:53'!
PASSED!

!testRun: #RoomTest #test05CanCreatePlayableCharacterInAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 18:18:53'!
PASSED!

!methodRemoval: RoomTest #test05CanCreatePlayableCharacterInAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 18:19:13'!
test05CanCreatePlayableCharacterInAPositionInsideHisRoomProportions
	
	| room |
	
	room := Room of: 10 for: 10.
	
	self
		shouldnt: [ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@5 heading: #North in: room ]
		raise: Error - MessageNotUnderstood
		
	!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:19:32'!
test04PlayableCharacterIsCreatedInAPositionNotOccupiedByAnObject
	
	| room |
	
	room := Room of: 10 for: 10.
	
	self
		should: [ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@15 heading: #North in: room ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = PlayableCharacter invalidInitialPositionErrorDescription ]
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:19:38'!
test05PlayableCharacterIsCreatedInAPositionNotOccupiedByAnObject
	
	| room |
	
	room := Room of: 10 for: 10.
	
	self
		should: [ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@15 heading: #North in: room ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = PlayableCharacter invalidInitialPositionErrorDescription ]
	
	! !

!methodRemoval: RoomTest #test04PlayableCharacterIsCreatedInAPositionNotOccupiedByAnObject stamp: 'as 12/10/2020 18:19:38'!
test04PlayableCharacterIsCreatedInAPositionNotOccupiedByAnObject
	
	| room |
	
	room := Room of: 10 for: 10.
	
	self
		should: [ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@15 heading: #North in: room ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = PlayableCharacter invalidInitialPositionErrorDescription ]
	
	!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:22:34' prior: 50869586!
test05PlayableCharacterIsCreatedInAPositionNotOccupiedByAnObject
	
	| room roomObjects|
	
	"roomObjects := Dictionary new
			at: 1@4 put: ;
			yourself.
			
	room := Room of: 10 for: 10 withObjects:."
	
	self
		should: [ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@15 heading: #North in: room ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = PlayableCharacter invalidInitialPositionErrorDescription ]
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:26:05' prior: 50869618!
test05PlayableCharacterIsCreatedInAPositionNotOccupiedByAnObject
	
	| room roomObjects|
	
	roomObjects := Dictionary new
			at: 1@4 put: (NoPointsPortableObject named: 'help-wanted sign' weighing: 1 at: 1@2);
			yourself.
			
	room := Room of: 10 for: 10 withObjects: roomObjects.
	
	self
		should: [ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North in: room ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = PlayableCharacter invalidInitialPositionErrorDescription ]
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:26:23' prior: 50869637!
test05PlayableCharacterIsCreatedInAPositionNotOccupiedByAnObject
	
	| room roomObjects|
	
	roomObjects := Dictionary new
			at: 1@4 put: (NoPointsPortableObject named: 'help-wanted sign' weighing: 1);
			yourself.
			
	room := Room of: 10 for: 10 withObjects: roomObjects.
	
	self
		should: [ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North in: room ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = PlayableCharacter invalidInitialPositionErrorDescription ]
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:26:36' prior: 50869658!
test05PlayableCharacterIsCreatedInAPositionNotOccupiedByAnObject
	
	| room roomObjects|
	
	roomObjects := Dictionary new
			at: 1@2 put: (NoPointsPortableObject named: 'help-wanted sign' weighing: 1);
			yourself.
			
	room := Room of: 10 for: 10 withObjects: roomObjects.
	
	self
		should: [ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North in: room ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = PlayableCharacter invalidInitialPositionErrorDescription ]
	
	! !
!Room class methodsFor: 'initialization' stamp: 'as 12/10/2020 18:27:11'!
of: Nproportion for: Mproportion withObjects: roomObjects
	
	(Nproportion < 1 or: [ Mproportion < 1 ]) ifTrue: [^ self error: self invalidRoomProportionsErrorDescription ].
	
	(Nproportion isInteger not or: [ Mproportion isInteger not ]) ifTrue: [^ self error: self invalidRoomProportionsErrorDescription ].
	
	^ self new intitializeWithProportions: Nproportion for: Mproportion.
	! !
!Room class methodsFor: 'initialization' stamp: 'as 12/10/2020 18:27:21' prior: 50869699!
of: Nproportion for: Mproportion withObjects: roomObjects
	
	(Nproportion < 1 or: [ Mproportion < 1 ]) ifTrue: [^ self error: self invalidRoomProportionsErrorDescription ].
	
	(Nproportion isInteger not or: [ Mproportion isInteger not ]) ifTrue: [^ self error: self invalidRoomProportionsErrorDescription ].
	
	^ self new intitializeWithProportions: Nproportion for: Mproportion withObjects: roomObjects.
	! !
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:27:28'!
intitializeWithProportions: Nproportion for: Mproportion withObjects: roomObjects
	
	NProportion := Nproportion.
	MProportion := Mproportion.! !
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:28:33' prior: 50869730!
intitializeWithProportions: Nproportion for: Mproportion withObjects: aDictionaryOfRoomObjects
	
	NProportion := Nproportion.
	MProportion := Mproportion.
	"roomObjects := aDictionaryOfRoomObjects."! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:29:13' prior: 50869679!
test05PlayableCharacterIsCreatedInAPositionNotOccupiedByAnObject
	
	| room objects|
	
	objects := Dictionary new
			at: 1@2 put: (NoPointsPortableObject named: 'help-wanted sign' weighing: 1);
			yourself.
			
	room := Room of: 10 for: 10 withObjects: objects.
	
	self
		should: [ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North in: room ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = PlayableCharacter invalidInitialPositionErrorDescription ]
	
	! !

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'as 12/10/2020 18:29:24'!
Object subclass: #Room
	instanceVariableNames: 'MProportion NProportion roomObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:29:23' prior: 50869738!
intitializeWithProportions: Nproportion for: Mproportion withObjects: aDictionaryOfRoomObjects
	
	NProportion := Nproportion.
	MProportion := Mproportion.
	roomObjects := aDictionaryOfRoomObjects.! !

!methodRemoval: Room #intitializeWithProportions:for: stamp: 'as 12/10/2020 18:29:36'!
intitializeWithProportions: Nproportion for: Mproportion
	
	NProportion := Nproportion.
	MProportion := Mproportion.!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:30:07' prior: 50869442!
test04PlayableCharacterIsCreatedInAPositionInsideHisRoomProportions

	| room objects|
	
	objects := Dictionary new
			at: 1@2 put: (NoPointsPortableObject named: 'help-wanted sign' weighing: 1);
			yourself.
			
	room := Room of: 10 for: 10 withObjects: objects.
	
	self
		should: [ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@15 heading: #North in: room ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = PlayableCharacter invalidInitialPositionErrorDescription ]
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:30:15' prior: 50869793!
test04PlayableCharacterIsCreatedInAPositionInsideHisRoomProportions

	| room objects|
	
	objects := Dictionary new.
			
	room := Room of: 10 for: 10 withObjects: objects.
	
	self
		should: [ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@15 heading: #North in: room ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = PlayableCharacter invalidInitialPositionErrorDescription ]
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:30:32' prior: 50869814!
test04PlayableCharacterIsCreatedInAPositionInsideHisRoomProportions

	| room |
			
	room := Room of: 10 for: 10 withObjects: Dictionary new.
	
	self
		should: [ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@15 heading: #North in: room ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = PlayableCharacter invalidInitialPositionErrorDescription ]
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:30:58' prior: 50868839!
test03CannotCreateRoomWithNonIntegerProportions
		
	self
		should: [ Room of: 1.6 for: 10 withObjects: Dictionary new]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Room invalidRoomProportionsErrorDescription ]
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:31:10' prior: 50868758!
test02CannotCreateRoomWithMProportionSmallerThan1
		
	self
		should: [ Room of: 10 for: 0 withObjects: Dictionary new ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Room invalidRoomProportionsErrorDescription ]
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:31:15' prior: 50868708!
test01CannotCreateRoomWithNProportionSmallerThan1
		
	self
		should: [ Room of: 0 for: 10 withObjects: Dictionary new ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Room invalidRoomProportionsErrorDescription ]
	! !

!testRun: #RoomTest #test05PlayableCharacterIsCreatedInAPositionNotOccupiedByAnObject stamp: 'as 12/10/2020 18:31:29'!
FAILURE!

!testRun: #RoomTest #test05PlayableCharacterIsCreatedInAPositionNotOccupiedByAnObject stamp: 'as 12/10/2020 18:31:29'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:32:19' prior: 50869533!
isPositionValid: aPosition
	
	^ (aPosition x between: 0 and: (NProportion - 1)) and: [(aPosition y between: 0 and: (MProportion - 1))] and: [aPosition notOccupied]! !
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:32:25' prior: 50869893!
isPositionValid: aPosition
	
	^ (aPosition x between: 0 and: (NProportion - 1)) and: [(aPosition y between: 0 and: (MProportion - 1))] and: [aPosition notOccupiedByObject]! !
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:32:30' prior: 50869901!
isPositionValid: aPosition
	
	^ (aPosition x between: 0 and: (NProportion - 1)) and: [(aPosition y between: 0 and: (MProportion - 1))] and: [aPosition notOccupiedByObject].! !
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:32:39'!
notOccupiedByObject: aPosition! !
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:32:55' prior: 50869910!
isPositionValid: aPosition
	
	^ (aPosition x between: 0 and: (NProportion - 1)) and: [(aPosition y between: 0 and: (MProportion - 1))] and: [ self notOccupiedByObject: aPosition ].! !

----End fileIn of C:\Users\Ami\Desktop\Facultad\Ing1\windows64-parcial\windows64\Packages\TerseGuide.pck.st----!
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:33:54' prior: 50869918!
notOccupiedByObject: aPosition
	 ^ roomObjects includesKey: aPosition 
	! !
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:34:12'!
occupiedByObject: aPosition
	 ^ roomObjects includesKey: aPosition 
	! !

!methodRemoval: Room #notOccupiedByObject: stamp: 'as 12/10/2020 18:34:18'!
notOccupiedByObject: aPosition
	 ^ roomObjects includesKey: aPosition 
	!
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:34:40' prior: 50869922!
isPositionValid: aPosition
	
	^ (aPosition x between: 0 and: (NProportion - 1)) and: [(aPosition y between: 0 and: (MProportion - 1))] and: [ (self occupiedByObject: aPosition) not].! !

!testRun: #RoomTest #test01CannotCreateRoomWithNProportionSmallerThan1 stamp: 'as 12/10/2020 18:34:45'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithMProportionSmallerThan1 stamp: 'as 12/10/2020 18:34:45'!
PASSED!

!testRun: #RoomTest #test03CannotCreateRoomWithNonIntegerProportions stamp: 'as 12/10/2020 18:34:45'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterIsCreatedInAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 18:34:45'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterIsCreatedInAPositionNotOccupiedByAnObject stamp: 'as 12/10/2020 18:34:45'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:37:01'!
test06PlayableCharacterCannotMoveToAPositionOccupiedByAnObject
	
	| room objects playableCharacter|
	
	objects := Dictionary new
			at: 1@2 put: (NoPointsPortableObject named: 'help-wanted sign' weighing: 1);
			yourself.
			
	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North in: room. 
	
	self
		should: [ ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = PlayableCharacter invalidInitialPositionErrorDescription ]
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:38:31' prior: 50872909!
test06PlayableCharacterCannotMoveToAPositionOccupiedByAnObject
	
	| room objects playableCharacter|
	
	objects := Dictionary new
			at: 1@2 put: (NoPointsPortableObject named: 'help-wanted sign' weighing: 1);
			yourself.
			
	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North in: room. 
	
	self
		should: [ playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = PlayableCharacter cannotMoveToDesiredPositionErrorDescription.
			self assert: (playableCharacter isAt: 1@1 heading: #North) ]
	
	! !
!PlayableCharacter class methodsFor: 'CATEGORIZAR' stamp: 'as 12/10/2020 18:39:10'!
cannotMoveToDesiredPositionErrorDescription
	^'The playable character cannot move to the desired position!!'! !
!PlayableCharacter methodsFor: 'moving' stamp: 'as 12/10/2020 18:40:46' prior: 50868350!
moveForward

	room canPlayableCharacter: self moveTo: position + heading forwardPoint.
	
	position := position + heading forwardPoint.! !
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:42:14'!
canPlayableCharacter: aPlayableCharacter moveTo: aPosition
	
	! !
!PlayableCharacter methodsFor: 'moving' stamp: 'as 12/10/2020 18:43:29' prior: 50872963!
moveForward

	(room canMoveTo: position + heading forwardPoint) ifFalse: [^self error: self class cannotMoveToDesiredPositionErrorDescription ].
	
	position := position + heading forwardPoint.! !
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:43:57'!
canMoveTo: aPosition
	
	! !

!methodRemoval: Room #canPlayableCharacter:moveTo: stamp: 'as 12/10/2020 18:44:02'!
canPlayableCharacter: aPlayableCharacter moveTo: aPosition
	
	!

!methodRemoval: Room #canMoveTo: stamp: 'as 12/10/2020 18:44:41'!
canMoveTo: aPosition
	
	!
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:44:56'!
isPositionValidForPlayableCharacter: aPosition
	
	^ (aPosition x between: 0 and: (NProportion - 1)) and: [(aPosition y between: 0 and: (MProportion - 1))] and: [ (self occupiedByObject: aPosition) not].! !

!methodRemoval: Room #isPositionValid: stamp: 'as 12/10/2020 18:45:04'!
isPositionValid: aPosition
	
	^ (aPosition x between: 0 and: (NProportion - 1)) and: [(aPosition y between: 0 and: (MProportion - 1))] and: [ (self occupiedByObject: aPosition) not].!
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'as 12/10/2020 18:45:11' prior: 50869220!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint in: aRoom
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	(aRoom isPositionValidForPlayableCharacter: aPosition) ifFalse: [^self error: self invalidInitialPositionErrorDescription ]. 
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading in: aRoom.! !
!PlayableCharacter methodsFor: 'moving' stamp: 'as 12/10/2020 18:45:38' prior: 50872975!
moveForward

	(room isPositionValidForPlayableCharacter: position + heading forwardPoint) ifFalse: [^self error: self class cannotMoveToDesiredPositionErrorDescription ].
	
	position := position + heading forwardPoint.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:45:53'!
test06PlayableCharacterCannotMoveForwardToAPositionOccupiedByAnObject
	
	| room objects playableCharacter|
	
	objects := Dictionary new
			at: 1@2 put: (NoPointsPortableObject named: 'help-wanted sign' weighing: 1);
			yourself.
			
	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North in: room. 
	
	self
		should: [ playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = PlayableCharacter cannotMoveToDesiredPositionErrorDescription.
			self assert: (playableCharacter isAt: 1@1 heading: #North) ]
	
	! !

!methodRemoval: RoomTest #test06PlayableCharacterCannotMoveToAPositionOccupiedByAnObject stamp: 'as 12/10/2020 18:45:53'!
test06PlayableCharacterCannotMoveToAPositionOccupiedByAnObject
	
	| room objects playableCharacter|
	
	objects := Dictionary new
			at: 1@2 put: (NoPointsPortableObject named: 'help-wanted sign' weighing: 1);
			yourself.
			
	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North in: room. 
	
	self
		should: [ playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = PlayableCharacter cannotMoveToDesiredPositionErrorDescription.
			self assert: (playableCharacter isAt: 1@1 heading: #North) ]
	
	!

!testRun: #RoomTest #test01CannotCreateRoomWithNProportionSmallerThan1 stamp: 'as 12/10/2020 18:45:58'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithMProportionSmallerThan1 stamp: 'as 12/10/2020 18:45:58'!
PASSED!

!testRun: #RoomTest #test03CannotCreateRoomWithNonIntegerProportions stamp: 'as 12/10/2020 18:45:58'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterIsCreatedInAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 18:45:58'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterIsCreatedInAPositionNotOccupiedByAnObject stamp: 'as 12/10/2020 18:45:58'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterCannotMoveForwardToAPositionOccupiedByAnObject stamp: 'as 12/10/2020 18:45:58'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:46:29'!
test07PlayableCharacterCannotMoveBackwardsToAPositionOccupiedByAnObject
	
	| room objects playableCharacter|
	
	objects := Dictionary new
			at: 1@2 put: (NoPointsPortableObject named: 'help-wanted sign' weighing: 1);
			yourself.
			
	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@3 heading: #North in: room. 
	
	self
		should: [ playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = PlayableCharacter cannotMoveToDesiredPositionErrorDescription.
			self assert: (playableCharacter isAt: 1@1 heading: #North) ]
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:46:39' prior: 50873111!
test07PlayableCharacterCannotMoveBackwardsToAPositionOccupiedByAnObject
	
	| room objects playableCharacter|
	
	objects := Dictionary new
			at: 1@2 put: (NoPointsPortableObject named: 'help-wanted sign' weighing: 1);
			yourself.
			
	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@3 heading: #North in: room. 
	
	self
		should: [ playableCharacter moveBackward ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = PlayableCharacter cannotMoveToDesiredPositionErrorDescription.
			self assert: (playableCharacter isAt: 1@1 heading: #North) ]
	
	! !

!testRun: #RoomTest #test07PlayableCharacterCannotMoveBackwardsToAPositionOccupiedByAnObject stamp: 'as 12/10/2020 18:46:43'!
FAILURE!

!testRun: #RoomTest #test07PlayableCharacterCannotMoveBackwardsToAPositionOccupiedByAnObject stamp: 'as 12/10/2020 18:46:43'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'as 12/10/2020 18:47:01' prior: 50868345!
moveBackward

	(room isPositionValidForPlayableCharacter: position + heading forwardPoint) ifFalse: [^self error: self class cannotMoveToDesiredPositionErrorDescription ].
	
	position := position - heading forwardPoint ! !

!testRun: #RoomTest #test01CannotCreateRoomWithNProportionSmallerThan1 stamp: 'as 12/10/2020 18:47:06'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithMProportionSmallerThan1 stamp: 'as 12/10/2020 18:47:06'!
PASSED!

!testRun: #RoomTest #test03CannotCreateRoomWithNonIntegerProportions stamp: 'as 12/10/2020 18:47:06'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterIsCreatedInAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 18:47:06'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterIsCreatedInAPositionNotOccupiedByAnObject stamp: 'as 12/10/2020 18:47:06'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterCannotMoveForwardToAPositionOccupiedByAnObject stamp: 'as 12/10/2020 18:47:06'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterCannotMoveBackwardsToAPositionOccupiedByAnObject stamp: 'as 12/10/2020 18:47:06'!
FAILURE!

!testRun: #RoomTest #test07PlayableCharacterCannotMoveBackwardsToAPositionOccupiedByAnObject stamp: 'as 12/10/2020 18:47:06'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:47:28' prior: 50873136!
test07PlayableCharacterCannotMoveBackwardsToAPositionOccupiedByAnObject
	
	| room objects playableCharacter|
	
	objects := Dictionary new
			at: 1@2 put: (NoPointsPortableObject named: 'help-wanted sign' weighing: 1);
			yourself.
			
	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@3 heading: #North in: room. 
	
	self
		should: [ playableCharacter moveBackward ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = PlayableCharacter cannotMoveToDesiredPositionErrorDescription.
			self assert: (playableCharacter isAt: 1@3 heading: #North) ]
	
	! !

!testRun: #RoomTest #test01CannotCreateRoomWithNProportionSmallerThan1 stamp: 'as 12/10/2020 18:47:31'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithMProportionSmallerThan1 stamp: 'as 12/10/2020 18:47:31'!
PASSED!

!testRun: #RoomTest #test03CannotCreateRoomWithNonIntegerProportions stamp: 'as 12/10/2020 18:47:31'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterIsCreatedInAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 18:47:31'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterIsCreatedInAPositionNotOccupiedByAnObject stamp: 'as 12/10/2020 18:47:31'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterCannotMoveForwardToAPositionOccupiedByAnObject stamp: 'as 12/10/2020 18:47:31'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterCannotMoveBackwardsToAPositionOccupiedByAnObject stamp: 'as 12/10/2020 18:47:31'!
FAILURE!

!testRun: #RoomTest #test07PlayableCharacterCannotMoveBackwardsToAPositionOccupiedByAnObject stamp: 'as 12/10/2020 18:47:31'!
FAILURE!

!testRun: #RoomTest #test06PlayableCharacterCannotMoveForwardToAPositionOccupiedByAnObject stamp: 'as 12/10/2020 18:49:11'!
PASSED!
!PlayableCharacter methodsFor: 'moving' stamp: 'as 12/10/2020 18:49:39' prior: 50873170!
moveBackward

	(room isPositionValidForPlayableCharacter: position - heading forwardPoint) ifFalse: [^self error: self class cannotMoveToDesiredPositionErrorDescription ].
	
	position := position - heading forwardPoint ! !

!testRun: #RoomTest #test01CannotCreateRoomWithNProportionSmallerThan1 stamp: 'as 12/10/2020 18:49:43'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithMProportionSmallerThan1 stamp: 'as 12/10/2020 18:49:43'!
PASSED!

!testRun: #RoomTest #test03CannotCreateRoomWithNonIntegerProportions stamp: 'as 12/10/2020 18:49:43'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterIsCreatedInAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 18:49:43'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterIsCreatedInAPositionNotOccupiedByAnObject stamp: 'as 12/10/2020 18:49:43'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterCannotMoveForwardToAPositionOccupiedByAnObject stamp: 'as 12/10/2020 18:49:43'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterCannotMoveBackwardsToAPositionOccupiedByAnObject stamp: 'as 12/10/2020 18:49:43'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:51:46'!
test08PlayableCharacterCanOnlyMoveForwardsToAPositionInsideHisRoomProportions
	
	| room objects playableCharacter|
	
	objects := Dictionary new
			at: 1@2 put: (NoPointsPortableObject named: 'help-wanted sign' weighing: 1);
			yourself.
			
	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North in: room. 
	
	self
		should: [ playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = PlayableCharacter cannotMoveToDesiredPositionErrorDescription.
			self assert: (playableCharacter isAt: 1@1 heading: #North) ]
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:51:54'!
test06PlayableCharacterCannotMoveForwardsToAPositionOccupiedByAnObject
	
	| room objects playableCharacter|
	
	objects := Dictionary new
			at: 1@2 put: (NoPointsPortableObject named: 'help-wanted sign' weighing: 1);
			yourself.
			
	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North in: room. 
	
	self
		should: [ playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = PlayableCharacter cannotMoveToDesiredPositionErrorDescription.
			self assert: (playableCharacter isAt: 1@1 heading: #North) ]
	
	! !

!methodRemoval: RoomTest #test06PlayableCharacterCannotMoveForwardToAPositionOccupiedByAnObject stamp: 'as 12/10/2020 18:51:54'!
test06PlayableCharacterCannotMoveForwardToAPositionOccupiedByAnObject
	
	| room objects playableCharacter|
	
	objects := Dictionary new
			at: 1@2 put: (NoPointsPortableObject named: 'help-wanted sign' weighing: 1);
			yourself.
			
	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North in: room. 
	
	self
		should: [ playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = PlayableCharacter cannotMoveToDesiredPositionErrorDescription.
			self assert: (playableCharacter isAt: 1@1 heading: #North) ]
	
	!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:52:40' prior: 50873310!
test08PlayableCharacterCanOnlyMoveForwardsToAPositionInsideHisRoomProportions
	
	| room objects playableCharacter|
	
	objects := Dictionary new.
			
	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #South in: room. 
	
	self
		should: [ playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = PlayableCharacter cannotMoveToDesiredPositionErrorDescription.
			self assert: (playableCharacter isAt: 0@0 heading: #South) ]
	
	! !

!testRun: #RoomTest #test08PlayableCharacterCanOnlyMoveForwardsToAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 18:52:51'!
PASSED!
!PlayableCharacter methodsFor: 'moving' stamp: 'as 12/10/2020 18:57:12' prior: 50873028!
moveForward

	"(room isPositionValidForPlayableCharacter: position + heading forwardPoint) ifFalse: [^self error: self class cannotMoveToDesiredPositionErrorDescription ]."
	
	| nextPosition |
	nextPosition := position + heading forwardPoint.
	
	self validatePlayableCharacterCanMoveTo: position + heading forwardPoint.
	
	position := position + heading forwardPoint.! !
!PlayableCharacter methodsFor: 'moving' stamp: 'as 12/10/2020 18:57:28' prior: 50873413!
moveForward

	"(room isPositionValidForPlayableCharacter: position + heading forwardPoint) ifFalse: [^self error: self class cannotMoveToDesiredPositionErrorDescription ]."
	
	| nextPosition |
	nextPosition := position + heading forwardPoint.
	
	self validatePlayableCharacterCanMoveTo: nextPosition.
	
	position := nextPosition.! !
!PlayableCharacter methodsFor: 'moving' stamp: 'as 12/10/2020 18:57:50' prior: 50873428!
moveForward

	"(room isPositionValidForPlayableCharacter: position + heading forwardPoint) ifFalse: [^self error: self class cannotMoveToDesiredPositionErrorDescription ]."
	
	| nextPosition |
	
	nextPosition := position + heading forwardPoint.
	
	self validatePlayableCharacterCanMoveTo: nextPosition.
	
	position := nextPosition.! !
!PlayableCharacter methodsFor: 'nil' stamp: 'as 12/10/2020 18:58:02'!
validatePlayableCharacterCanMoveTo: aPosition
! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 18:58:24' prior: 50873455!
validatePlayableCharacterCanMoveTo: aPosition

	(room isPositionValidForPlayableCharacter: aPosition) ifFalse: [^self error: self class cannotMoveToDesiredPositionErrorDescription ].! !
!PlayableCharacter methodsFor: 'moving' stamp: 'as 12/10/2020 18:58:50' prior: 50873442!
moveForward
	
	| nextPosition |
	
	nextPosition := position + heading forwardPoint.
	
	self validatePlayableCharacterCanMoveTo: nextPosition.
	
	position := nextPosition.! !
!PlayableCharacter methodsFor: 'moving' stamp: 'as 12/10/2020 18:59:08' prior: 50873273!
moveBackward
	
	| nextPosition |
	
	nextPosition := position - heading forwardPoint.
	
	self validatePlayableCharacterCanMoveTo: nextPosition.
	
	position := nextPosition.! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'as 12/10/2020 18:59:22'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'as 12/10/2020 18:59:22'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'as 12/10/2020 18:59:22'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'as 12/10/2020 18:59:22'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'as 12/10/2020 18:59:22'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'as 12/10/2020 18:59:22'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'as 12/10/2020 18:59:22'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'as 12/10/2020 18:59:22'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'as 12/10/2020 18:59:22'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'as 12/10/2020 18:59:22'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'as 12/10/2020 18:59:22'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'as 12/10/2020 18:59:22'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'as 12/10/2020 18:59:22'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'as 12/10/2020 18:59:22'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'as 12/10/2020 18:59:22'!
PASSED!
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 19:01:00'!
positionIsInsideRoomProportions: aPosition

	^ (aPosition x between: 0 and: (NProportion - 1)) and: [(aPosition y between: 0 and: (MProportion - 1))] ! !
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 19:01:24' prior: 50872995!
isPositionValidForPlayableCharacter: aPosition
	
	^ (self positionIsInsideRoomProportions: aPosition) and: [ (self occupiedByObject: aPosition) not].! !

!testRun: #RoomTest #test01CannotCreateRoomWithNProportionSmallerThan1 stamp: 'as 12/10/2020 19:01:30'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithMProportionSmallerThan1 stamp: 'as 12/10/2020 19:01:30'!
PASSED!

!testRun: #RoomTest #test03CannotCreateRoomWithNonIntegerProportions stamp: 'as 12/10/2020 19:01:30'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterIsCreatedInAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 19:01:30'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterIsCreatedInAPositionNotOccupiedByAnObject stamp: 'as 12/10/2020 19:01:30'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterCannotMoveForwardsToAPositionOccupiedByAnObject stamp: 'as 12/10/2020 19:01:30'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterCannotMoveBackwardsToAPositionOccupiedByAnObject stamp: 'as 12/10/2020 19:01:30'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterCanOnlyMoveForwardsToAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 19:01:30'!
PASSED!
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 19:01:41' prior: 50872872!
occupiedByObject: aPosition

	 ^ roomObjects includesKey: aPosition 
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 19:07:43'!
test11_canNotTakeObjectsThatAreNotInReachablePosition

	| playableCharacter paper key |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 19:11:06'!
test11_canNotTakeObjectsThatAreNotInAdjacentPosition

	| room objects playableCharacter key|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	objects := Dictionary new
			at: 5@5 put: key;
			yourself.

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !

!methodRemoval: PlayableCharacterTest #test11_canNotTakeObjectsThatAreNotInReachablePosition stamp: 'as 12/10/2020 19:11:17'!
test11_canNotTakeObjectsThatAreNotInReachablePosition

	| playableCharacter paper key |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 19:11:56'!
test09CannotCreateARoomWithObjectsNotInsideTheRoomsProportions
	
	| room objects playableCharacter|
	
	objects := Dictionary new.
			
	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #South in: room. 
	
	self
		should: [ playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = PlayableCharacter cannotMoveToDesiredPositionErrorDescription.
			self assert: (playableCharacter isAt: 0@0 heading: #South) ]
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 19:12:22' prior: 50873664!
test09CannotCreateARoomWithObjectsNotInsideTheRoomsProportions
	
	| room objects playableCharacter|
	
	objects := Dictionary new
			at: 1@2 put: (NoPointsPortableObject named: 'help-wanted sign' weighing: 1);
			yourself.
			
	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #South in: room. 
	
	self
		should: [ playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = PlayableCharacter cannotMoveToDesiredPositionErrorDescription.
			self assert: (playableCharacter isAt: 0@0 heading: #South) ]
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 19:13:03' prior: 50873686!
test09CannotCreateARoomWithObjectsNotInsideTheRoomsProportions
	
	| room objects playableCharacter|
	
	objects := Dictionary new
			at: 100@100 put: (NoPointsPortableObject named: 'help-wanted sign' weighing: 1);
			yourself.
			
	self
		should: [room := Room of: 10 for: 10 withObjects: objects ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = PlayableCharacter cannotMoveToDesiredPositionErrorDescription.]
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 19:13:41' prior: 50873711!
test09CannotCreateARoomWithObjectsNotInsideTheRoomsProportions
	
	| room objects playableCharacter|
	
	objects := Dictionary new
			at: 100@100 put: (NoPointsPortableObject named: 'help-wanted sign' weighing: 1);
			yourself.
			
	self
		should: [room := Room of: 10 for: 10 withObjects: objects ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Room invalidRoomObjectsCreationErrorMessage.]
	
	! !
!Room class methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 19:14:02'!
invalidRoomObjectsCreationErrorMessage
	^'The room objects are invalid for this room!!'! !

!testRun: #RoomTest #test09CannotCreateARoomWithObjectsNotInsideTheRoomsProportions stamp: 'as 12/10/2020 19:14:11'!
FAILURE!

!testRun: #RoomTest #test09CannotCreateARoomWithObjectsNotInsideTheRoomsProportions stamp: 'as 12/10/2020 19:14:11'!
FAILURE!

!methodRemoval: Room class #of:for: stamp: 'as 12/10/2020 19:14:32'!
of: Nproportion for: Mproportion
	
	(Nproportion < 1 or: [ Mproportion < 1 ]) ifTrue: [^ self error: self invalidRoomProportionsErrorDescription ].
	
	(Nproportion isInteger not or: [ Mproportion isInteger not ]) ifTrue: [^ self error: self invalidRoomProportionsErrorDescription ].
	
	^ self new intitializeWithProportions: Nproportion for: Mproportion.
	!
!Room class methodsFor: 'initialization' stamp: 'as 12/10/2020 19:15:43' prior: 50869714!
of: Nproportion for: Mproportion withObjects: roomObjects
	
	(Nproportion < 1 or: [ Mproportion < 1 ]) ifTrue: [^ self error: self invalidRoomProportionsErrorDescription ].
	
	(Nproportion isInteger not or: [ Mproportion isInteger not ]) ifTrue: [^ self error: self invalidRoomProportionsErrorDescription ].
	
	roomObjects keys do: [:position | ].
	
	^ self new intitializeWithProportions: Nproportion for: Mproportion withObjects: roomObjects.
	! !
!Room class methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 19:16:26'!
positionIsInsideRoomProportions: aPosition for: nProportion and: mProportion

	^ (aPosition x between: 0 and: (nProportion - 1)) and: [(aPosition y between: 0 and: (mProportion - 1))] ! !
!Room class methodsFor: 'initialization' stamp: 'as 12/10/2020 19:17:14' prior: 50873773!
of: Nproportion for: Mproportion withObjects: roomObjects
	
	(Nproportion < 1 or: [ Mproportion < 1 ]) ifTrue: [^ self error: self invalidRoomProportionsErrorDescription ].
	
	(Nproportion isInteger not or: [ Mproportion isInteger not ]) ifTrue: [^ self error: self invalidRoomProportionsErrorDescription ].
	
	roomObjects keys do: [:aPosition | self positionIsInsideRoomProportions: aPosition for: Nproportion and: Mproportion].
	
	^ self new intitializeWithProportions: Nproportion for: Mproportion withObjects: roomObjects.
	! !
!Room class methodsFor: 'initialization' stamp: 'as 12/10/2020 19:18:10' prior: 50873799!
of: Nproportion for: Mproportion withObjects: roomObjects
	
	(Nproportion < 1 or: [ Mproportion < 1 ]) ifTrue: [^ self error: self invalidRoomProportionsErrorDescription ].
	
	(Nproportion isInteger not or: [ Mproportion isInteger not ]) ifTrue: [^ self error: self invalidRoomProportionsErrorDescription ].
	
	(roomObjects keys allSatisfy: [:aPosition | self positionIsInsideRoomProportions: aPosition for: Nproportion and: Mproportion]) ifFalse: [].
	
	^ self new intitializeWithProportions: Nproportion for: Mproportion withObjects: roomObjects.
	! !
!Room class methodsFor: 'initialization' stamp: 'as 12/10/2020 19:18:27' prior: 50873819!
of: Nproportion for: Mproportion withObjects: roomObjects
	
	(Nproportion < 1 or: [ Mproportion < 1 ]) ifTrue: [^ self error: self invalidRoomProportionsErrorDescription ].
	
	(Nproportion isInteger not or: [ Mproportion isInteger not ]) ifTrue: [^ self error: self invalidRoomProportionsErrorDescription ].
	
	(roomObjects keys allSatisfy: [:aPosition | self positionIsInsideRoomProportions: aPosition for: Nproportion and: Mproportion]) ifFalse: [^ self error: self invalidRoomObjectsCreationErrorMessage ].
	
	^ self new intitializeWithProportions: Nproportion for: Mproportion withObjects: roomObjects.
	! !

!testRun: #RoomTest #test01CannotCreateRoomWithNProportionSmallerThan1 stamp: 'as 12/10/2020 19:18:31'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithMProportionSmallerThan1 stamp: 'as 12/10/2020 19:18:31'!
PASSED!

!testRun: #RoomTest #test03CannotCreateRoomWithNonIntegerProportions stamp: 'as 12/10/2020 19:18:31'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterIsCreatedInAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 19:18:31'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterIsCreatedInAPositionNotOccupiedByAnObject stamp: 'as 12/10/2020 19:18:31'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterCannotMoveForwardsToAPositionOccupiedByAnObject stamp: 'as 12/10/2020 19:18:31'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterCannotMoveBackwardsToAPositionOccupiedByAnObject stamp: 'as 12/10/2020 19:18:31'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterCanOnlyMoveForwardsToAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 19:18:31'!
PASSED!

!testRun: #RoomTest #test09CannotCreateARoomWithObjectsNotInsideTheRoomsProportions stamp: 'as 12/10/2020 19:18:31'!
PASSED!
!Room class methodsFor: 'initialization' stamp: 'as 12/10/2020 19:19:57'!
validateProportions: Nproportion and: Mproportion

	(Nproportion < 1 or: [ Mproportion < 1 ]) ifTrue: [^ self error: self invalidRoomProportionsErrorDescription ].
	
	(Nproportion isInteger not or: [ Mproportion isInteger not ]) ifTrue: [^ self error: self invalidRoomProportionsErrorDescription ].! !
!Room class methodsFor: 'initialization' stamp: 'as 12/10/2020 19:20:18' prior: 50873840!
of: Nproportion for: Mproportion withObjects: roomObjects
	
	self validateProportions: Nproportion and: Mproportion.
	
	(roomObjects keys allSatisfy: [:aPosition | self positionIsInsideRoomProportions: aPosition for: Nproportion and: Mproportion]) ifFalse: [^ self error: self invalidRoomObjectsCreationErrorMessage ].
	
	^ self new intitializeWithProportions: Nproportion for: Mproportion withObjects: roomObjects.
	! !
!Room class methodsFor: 'initialization' stamp: 'as 12/10/2020 19:21:01'!
validateRoomObjects: roomObjects ForRoomWithProportions: Nproportion and: Mproportion

	(roomObjects keys allSatisfy: [:aPosition | self positionIsInsideRoomProportions: aPosition for: Nproportion and: Mproportion]) ifFalse: [^ self error: self invalidRoomObjectsCreationErrorMessage ].! !
!Room class methodsFor: 'initialization' stamp: 'as 12/10/2020 19:21:28' prior: 50873910!
of: Nproportion for: Mproportion withObjects: roomObjects
	
	self validateProportions: Nproportion and: Mproportion.
	
	self validateRoomObjects: roomObjects ForRoomWithProportions: Nproportion and: Mproportion.
		
	^ self new intitializeWithProportions: Nproportion for: Mproportion withObjects: roomObjects.
	! !

!testRun: #RoomTest #test01CannotCreateRoomWithNProportionSmallerThan1 stamp: 'as 12/10/2020 19:21:34'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithMProportionSmallerThan1 stamp: 'as 12/10/2020 19:21:34'!
PASSED!

!testRun: #RoomTest #test03CannotCreateRoomWithNonIntegerProportions stamp: 'as 12/10/2020 19:21:34'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterIsCreatedInAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 19:21:34'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterIsCreatedInAPositionNotOccupiedByAnObject stamp: 'as 12/10/2020 19:21:34'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterCannotMoveForwardsToAPositionOccupiedByAnObject stamp: 'as 12/10/2020 19:21:34'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterCannotMoveBackwardsToAPositionOccupiedByAnObject stamp: 'as 12/10/2020 19:21:34'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterCanOnlyMoveForwardsToAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 19:21:34'!
PASSED!

!testRun: #RoomTest #test09CannotCreateARoomWithObjectsNotInsideTheRoomsProportions stamp: 'as 12/10/2020 19:21:34'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotTakeObjectsThatAreNotInAdjacentPosition stamp: 'as 12/10/2020 19:21:51'!
ERROR!

!testRun: #PlayableCharacterTest #test11_canNotTakeObjectsThatAreNotInAdjacentPosition stamp: 'as 12/10/2020 19:21:51'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 19:24:07' prior: 50873617!
test11_canNotTakeObjectsThatAreNotInAdjacentPosition

	| room objects playableCharacter key|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	objects := Dictionary new
			at: 5@5 put: key;
			yourself.

	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North in: room. 
	
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeDesiredObjectErrorDescription equals: anError messageText.
			self assert: (room roomContains: key at: 5@5) ]
	
	! !
!PlayableCharacter class methodsFor: 'CATEGORIZAR' stamp: 'as 12/10/2020 19:24:32'!
cannotTakeDesiredObjectErrorDescription
	^'The playable character cannot take the desired object!!'! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 19:24:54' prior: 50873995!
test11_canNotTakeObjectsThatAreNotInAdjacentPosition

	| room objects playableCharacter key|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	objects := Dictionary new
			at: 5@5 put: key;
			yourself.

	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North in: room. 
	
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeDesiredObjectErrorDescription equals: anError messageText.
			self assert: (room roomContains: key at: 5@5) ]
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 19:25:05' prior: 50874026!
test11_canNotTakeObjectsThatAreNotInAdjacentPosition

	| room objects playableCharacter key|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	objects := Dictionary new
			at: 5@5 put: key;
			yourself.

	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North in: room. 
	
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeDesiredObjectErrorDescription equals: anError messageText.
			self assert: (room roomContains: key at: 5@5) ]
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 19:25:14'!
test11_canNotTakePortableObjectsThatAreNotInAdjacentPosition

	| room objects playableCharacter key|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	objects := Dictionary new
			at: 5@5 put: key;
			yourself.

	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North in: room. 
	
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeDesiredObjectErrorDescription equals: anError messageText.
			self assert: (room roomContains: key at: 5@5) ]
	
	! !

!methodRemoval: PlayableCharacterTest #test11_canNotTakeObjectsThatAreNotInAdjacentPosition stamp: 'as 12/10/2020 19:25:14'!
test11_canNotTakeObjectsThatAreNotInAdjacentPosition

	| room objects playableCharacter key|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	objects := Dictionary new
			at: 5@5 put: key;
			yourself.

	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North in: room. 
	
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeDesiredObjectErrorDescription equals: anError messageText.
			self assert: (room roomContains: key at: 5@5) ]
	
	!
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 19:26:52'!
roomContains: anObject at: aPosition
	
	^(roomObjects at: aPosition ifAbsent: [^false]) = anObject.! !

!testRun: #PlayableCharacterTest #test11_canNotTakePortableObjectsThatAreNotInAdjacentPosition stamp: 'as 12/10/2020 19:27:09'!
FAILURE!

!testRun: #PlayableCharacterTest #test11_canNotTakePortableObjectsThatAreNotInAdjacentPosition stamp: 'as 12/10/2020 19:27:09'!
FAILURE!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'as 12/10/2020 19:27:33' prior: 50868364!
take: aPortableObject

	

	backpack add: aPortableObject.! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 19:28:49'!
test12_canNotTakePortableObjectsThatAreNotInAdjacentPosition

	| room objects playableCharacter key|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	objects := Dictionary new
			at: 5@5 put: key;
			yourself.

	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North in: room. 
	
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeDesiredObjectErrorDescription equals: anError messageText.
			self assert: (room roomContains: key at: 5@5) ]
	
	! !

!methodRemoval: PlayableCharacterTest #test11_canNotTakePortableObjectsThatAreNotInAdjacentPosition stamp: 'as 12/10/2020 19:28:49'!
test11_canNotTakePortableObjectsThatAreNotInAdjacentPosition

	| room objects playableCharacter key|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	objects := Dictionary new
			at: 5@5 put: key;
			yourself.

	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North in: room. 
	
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeDesiredObjectErrorDescription equals: anError messageText.
			self assert: (room roomContains: key at: 5@5) ]
	
	!

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'as 12/10/2020 19:29:38'!
Object subclass: #NonPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 19:29:32'!
test11_canNotTakeNonPortableObjects

	| room objects playableCharacter key|
	
	key := NonPortableObject named: 'Key' weighing: 1.
	objects := Dictionary new
			at: 5@5 put: key;
			yourself.

	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North in: room. 
	
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeDesiredObjectErrorDescription equals: anError messageText.
			self assert: (room roomContains: key at: 5@5) ]
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 19:30:38' prior: 50874200!
test11_canNotTakeNonPortableObjects

	| room objects playableCharacter table|
	
	table := NonPortableObject named: 'Table' weighing: 1.
	objects := Dictionary new
			at: 5@5 put: table;
			yourself.

	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North in: room. 
	
	self 
		should: [ playableCharacter take: table ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeNonPortableObjectErrorDescription equals: anError messageText.
			self assert: (room roomContains: table at: 5@5) ]
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 19:31:06' prior: 50874224!
test11_canNotTakeNonPortableObjects

	| room objects playableCharacter table|
	
	table := NonPortableObject named: 'Table' weighing: 1.
	objects := Dictionary new
			at: 1@2 put: table;
			yourself.

	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North in: room. 
	
	self 
		should: [ playableCharacter take: table ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeNonPortableObjectErrorDescription equals: anError messageText.
			self assert: (room roomContains: table at: 1@2) ]
	
	! !
!PlayableCharacter class methodsFor: 'CATEGORIZAR' stamp: 'as 12/10/2020 19:31:33'!
cannotTakeNonPortableObjectErrorDescription
	^'The playable character cannot take a non portable object!!'! !

StageObject subclass: #NonPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'as 12/10/2020 19:31:58'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'as 12/10/2020 19:33:21' prior: 50874138!
take: aStageObject

	aStageObject addTo: backpack.

	"backpack add: aPortableObject."! !
!StageObject methodsFor: 'no messages' stamp: 'as 12/10/2020 19:33:46'!
addTo: aBackpack! !
!StageObject methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 19:33:50' prior: 50874298!
addTo: aBackpack
	self subclassResponsibility ! !
!NonPortableObject methodsFor: 'no messages' stamp: 'as 12/10/2020 19:34:40' overrides: 50874302!
addTo: aBackpack
	
	^self error: self cannotTakeNonPortableObjects. ! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 19:34:45' prior: 50874307 overrides: 50874302!
addTo: aBackpack
	
	^self error: self class cannotTakeNonPortableObjects. ! !
!NonPortableObject class methodsFor: 'no messages' stamp: 'as 12/10/2020 19:35:02'!
cannotTakeNonPortableObjects
	^'Cannot take non portable objects!!'! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'as 12/10/2020 19:35:52' prior: 50874292!
take: aStageObject

	aStageObject addTakeByAPlayableCharacter: self.

	"backpack add: aPortableObject."! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'as 12/10/2020 19:36:00' prior: 50874326!
take: aStageObject

	aStageObject takeByAPlayableCharacter: self.

	"backpack add: aPortableObject."! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 19:36:22' prior: 50874314 overrides: 50874302!
addTo: aBackpack
	
	^self error: self class cannotTakeNonPortableObjects. ! !
!StageObject methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 19:36:43'!
takeByAPlayableCharacter: aPlayableCharacter
	self subclassResponsibility ! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 19:37:06' overrides: 50874346!
takeByAPlayableCharacter: aPlayableCharacter
	
	aPlayableCharacter takeNonPortableObject.! !
!PortableObject methodsFor: 'nil' stamp: 'as 12/10/2020 19:37:56' overrides: 50874346!
takeByAPlayableCharacter: aPlayableCharacter
	
	aPlayableCharacter takePortableObject: self.! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 19:38:37'!
takeNonPortableObject
	^self error: self class cannotTakeNonPortableObjectErrorDescription ! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 19:38:57'!
takePortableObject: aPortableObject
	
	backpack add: aPortableObject ! !

!testRun: #PlayableCharacterTest #test11_canNotTakeNonPortableObjects stamp: 'as 12/10/2020 19:39:09'!
ERROR!

!testRun: #PlayableCharacterTest #test11_canNotTakeNonPortableObjects stamp: 'as 12/10/2020 19:39:09'!
ERROR!
!NonPortableObject class methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 19:39:53'!
named: aName
	
	^ self new initializeNamed: aName ! !

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'as 12/10/2020 19:40:17'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 19:40:15'!
initializeNamed: aName 
	
	name := aName.! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 19:40:47' prior: 50874248!
test11_canNotTakeNonPortableObjects

	| room objects playableCharacter table|
	
	table := NonPortableObject named: 'Table'.
	objects := Dictionary new
			at: 1@2 put: table;
			yourself.

	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North in: room. 
	
	self 
		should: [ playableCharacter take: table ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeNonPortableObjectErrorDescription equals: anError messageText.
			self assert: (room roomContains: table at: 1@2) ]
	
	! !

!testRun: #PlayableCharacterTest #test11_canNotTakeNonPortableObjects stamp: 'as 12/10/2020 19:40:50'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakePortableObjectsThatAreNotInAdjacentPosition stamp: 'as 12/10/2020 19:40:59'!
FAILURE!

!testRun: #PlayableCharacterTest #test12_canNotTakePortableObjectsThatAreNotInAdjacentPosition stamp: 'as 12/10/2020 19:40:59'!
FAILURE!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'as 12/10/2020 19:41:30' prior: 50874333!
take: aStageObject

	aStageObject takeByAPlayableCharacter: self.
! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 19:42:28' prior: 50874370!
takePortableObject: aPortableObject
	
	room object: aPortableObject isAdjacentTo: position.
	
	backpack add: aPortableObject ! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 19:43:04' prior: 50874443!
takePortableObject: aPortableObject
	
	room object: aPortableObject isReachableFrom: position heading: heading.
	
	backpack add: aPortableObject ! !
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 19:47:02'!
object: aPortableObject isReachableFrom: position heading: heading
	
	^ (position fourNeighbors) includes: (roomObjects keyAtValue: aPortableObject ifAbsent: [^false]).! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'as 12/10/2020 19:47:08'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'as 12/10/2020 19:47:08'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'as 12/10/2020 19:47:08'!
ERROR!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'as 12/10/2020 19:47:08'!
ERROR!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'as 12/10/2020 19:47:08'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'as 12/10/2020 19:47:08'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'as 12/10/2020 19:47:08'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'as 12/10/2020 19:47:08'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'as 12/10/2020 19:47:08'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'as 12/10/2020 19:47:08'!
ERROR!

!testRun: #PlayableCharacterTest #test11_canNotTakeNonPortableObjects stamp: 'as 12/10/2020 19:47:08'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakePortableObjectsThatAreNotInAdjacentPosition stamp: 'as 12/10/2020 19:47:08'!
FAILURE!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'as 12/10/2020 19:47:34'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'as 12/10/2020 19:47:34'!
ERROR!
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'as 12/10/2020 19:49:24' prior: 50869046!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint 
	
	| newHeading room|

	newHeading := self headingFor: aCardinalPoint.
	room := Room of: 10 for: 10 withObjects: Dictionary new.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading in: room. ! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'as 12/10/2020 19:49:28'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'as 12/10/2020 19:49:28'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'as 12/10/2020 19:49:28'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'as 12/10/2020 19:49:28'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'as 12/10/2020 19:49:28'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'as 12/10/2020 19:49:28'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'as 12/10/2020 19:49:28'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'as 12/10/2020 19:49:28'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'as 12/10/2020 19:49:29'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'as 12/10/2020 19:49:29'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotTakeNonPortableObjects stamp: 'as 12/10/2020 19:49:29'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakePortableObjectsThatAreNotInAdjacentPosition stamp: 'as 12/10/2020 19:49:29'!
FAILURE!

!testRun: #PlayableCharacterTest #test12_canNotTakePortableObjectsThatAreNotInAdjacentPosition stamp: 'as 12/10/2020 19:49:29'!
FAILURE!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 19:50:32' prior: 50874451!
takePortableObject: aPortableObject
	
	(room object: aPortableObject isReachableFrom: position heading: heading) ifFalse: [self error: self class cannotTakeDesiredObjectErrorDescription ].
	
	backpack add: aPortableObject ! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'as 12/10/2020 19:50:35'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'as 12/10/2020 19:50:35'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'as 12/10/2020 19:50:35'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'as 12/10/2020 19:50:35'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'as 12/10/2020 19:50:35'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'as 12/10/2020 19:50:35'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'as 12/10/2020 19:50:35'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'as 12/10/2020 19:50:35'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'as 12/10/2020 19:50:35'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'as 12/10/2020 19:50:35'!
ERROR!

!testRun: #PlayableCharacterTest #test11_canNotTakeNonPortableObjects stamp: 'as 12/10/2020 19:50:35'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakePortableObjectsThatAreNotInAdjacentPosition stamp: 'as 12/10/2020 19:50:35'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 19:52:57' prior: 50868091!
test09_canTakePortableObjects

	| playableCharacter paper objects room|
	
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.

	objects := Dictionary new
			at: 1@2 put: paper;
			yourself.

	room := Room of: 10 for: 10 withObjects: objects.

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West in: room.
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper)
	
! !

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'as 12/10/2020 19:53:00'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 19:55:09' prior: 50868104!
test10_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| playableCharacter paper key objects room|
	
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	objects := Dictionary new
			at: 2@2 put: paper;
			at: 1@2 put: key;
			yourself.

	room := Room of: 10 for: 10 withObjects: objects.

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@2 heading: #West .

	playableCharacter take: paper.
	
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 19:55:21' prior: 50874660!
test10_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| playableCharacter paper key objects room|
	
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	objects := Dictionary new
			at: 2@2 put: paper;
			at: 1@2 put: key;
			yourself.

	room := Room of: 10 for: 10 withObjects: objects.

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@2 heading: #West .

	playableCharacter take: paper.
	playableCharacter moveForward.
	
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'as 12/10/2020 19:55:25'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'as 12/10/2020 19:55:25'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 19:57:13' prior: 50874689!
test10_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| playableCharacter paper key objects room|
	
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	objects := Dictionary new
			at: 2@2 put: paper;
			at: 1@2 put: key;
			yourself.

	room := Room of: 10 for: 10 withObjects: objects.

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@2 heading: #West in: room.

	playableCharacter take: paper.
	playableCharacter moveForward.
	
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'as 12/10/2020 19:57:15'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'as 12/10/2020 19:57:15'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 19:58:50'!
test12_canNotTakePortableObjectsThatAreInAdjacentPositionButNotFacedByPlayableCharacter

	| room objects playableCharacter key|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	objects := Dictionary new
			at: 2@1 put: key;
			yourself.

	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North in: room. 
	
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeDesiredObjectErrorDescription equals: anError messageText.
			self assert: (room roomContains: key at: 2@1) ]
	
	! !

!testRun: #PlayableCharacterTest #test12_canNotTakePortableObjectsThatAreInAdjacentPositionButNotFacedByPlayableCharacter stamp: 'as 12/10/2020 19:58:53'!
FAILURE!

!testRun: #PlayableCharacterTest #test12_canNotTakePortableObjectsThatAreInAdjacentPositionButNotFacedByPlayableCharacter stamp: 'as 12/10/2020 19:58:53'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 19:59:04'!
test13_canNotTakePortableObjectsThatAreInAdjacentPositionButNotFacedByPlayableCharacter

	| room objects playableCharacter key|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	objects := Dictionary new
			at: 2@1 put: key;
			yourself.

	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North in: room. 
	
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeDesiredObjectErrorDescription equals: anError messageText.
			self assert: (room roomContains: key at: 2@1) ]
	
	! !

!methodRemoval: PlayableCharacterTest #test12_canNotTakePortableObjectsThatAreInAdjacentPositionButNotFacedByPlayableCharacter stamp: 'as 12/10/2020 19:59:04'!
test12_canNotTakePortableObjectsThatAreInAdjacentPositionButNotFacedByPlayableCharacter

	| room objects playableCharacter key|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	objects := Dictionary new
			at: 2@1 put: key;
			yourself.

	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North in: room. 
	
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeDesiredObjectErrorDescription equals: anError messageText.
			self assert: (room roomContains: key at: 2@1) ]
	
	!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreInAdjacentPositionButNotFacedByPlayableCharacter stamp: 'as 12/10/2020 19:59:13'!
FAILURE!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreInAdjacentPositionButNotFacedByPlayableCharacter stamp: 'as 12/10/2020 19:59:13'!
FAILURE!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 20:01:27' prior: 50874583!
takePortableObject: aPortableObject
	
	(room object: aPortableObject isAtPosition: position + heading forwardPoint ) ifFalse: [self error: self class cannotTakeDesiredObjectErrorDescription ].
	
	backpack add: aPortableObject ! !
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 20:02:35'!
object: aPortableObject isAtPosition: aPosition

	^ (roomObjects keyAtValue: aPortableObject ifAbsent: [^false]) = aPosition .! !
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 20:02:36' prior: 50874873!
object: aPortableObject isAtPosition: aPosition

	^ (roomObjects keyAtValue: aPortableObject ifAbsent: [^false]) = aPosition.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'as 12/10/2020 20:02:42'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'as 12/10/2020 20:02:42'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'as 12/10/2020 20:02:42'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'as 12/10/2020 20:02:42'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'as 12/10/2020 20:02:42'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'as 12/10/2020 20:02:42'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'as 12/10/2020 20:02:42'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'as 12/10/2020 20:02:42'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'as 12/10/2020 20:02:42'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'as 12/10/2020 20:02:42'!
ERROR!

!testRun: #PlayableCharacterTest #test11_canNotTakeNonPortableObjects stamp: 'as 12/10/2020 20:02:42'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakePortableObjectsThatAreNotInAdjacentPosition stamp: 'as 12/10/2020 20:02:42'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreInAdjacentPositionButNotFacedByPlayableCharacter stamp: 'as 12/10/2020 20:02:42'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'as 12/10/2020 20:02:42'!
ERROR!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreInAdjacentPositionButNotFacedByPlayableCharacter stamp: 'as 12/10/2020 20:02:54'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 20:03:28'!
test14_canTakePortableObjectsThatAreInAdjacentPositionAndFacedByPlayableCharacter

	| room objects playableCharacter key|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	objects := Dictionary new
			at: 2@1 put: key;
			yourself.

	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North in: room. 
	
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeDesiredObjectErrorDescription equals: anError messageText.
			self assert: (room roomContains: key at: 2@1) ]
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 20:03:49' prior: 50874947!
test14_canTakePortableObjectsThatAreInAdjacentPositionAndFacedByPlayableCharacter

	| room objects playableCharacter key|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	objects := Dictionary new
			at: 2@1 put: key;
			yourself.

	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: room. 
	
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeDesiredObjectErrorDescription equals: anError messageText.
			self assert: (room roomContains: key at: 2@1) ]
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 20:05:02' prior: 50874972!
test14_canTakePortableObjectsThatAreInAdjacentPositionAndFacedByPlayableCharacter

	| room objects playableCharacter key|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	objects := Dictionary new
			at: 2@1 put: key;
			yourself.

	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: room. 
	
	self assert: (room roomDoesntContain: key).
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 20:05:20' prior: 50874997!
test14_canTakePortableObjectsThatAreInAdjacentPositionAndFacedByPlayableCharacter

	| room objects playableCharacter key|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	objects := Dictionary new
			at: 2@1 put: key;
			yourself.

	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: room. 
	
	self assert: (room roomDoesntContain: key).
	self assert: (playableCharacter backpackIncludes: key)
	! !
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 20:06:26'!
roomContains: anObject
	
	^roomObjects includes: anObject! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 20:06:41' prior: 50875015!
test14_canTakePortableObjectsThatAreInAdjacentPositionAndFacedByPlayableCharacter

	| room objects playableCharacter key|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	objects := Dictionary new
			at: 2@1 put: key;
			yourself.

	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: room. 
	
	self deny: (room roomContains: key).
	self assert: (playableCharacter backpackIncludes: key)
	! !

!testRun: #PlayableCharacterTest #test14_canTakePortableObjectsThatAreInAdjacentPositionAndFacedByPlayableCharacter stamp: 'as 12/10/2020 20:06:45'!
FAILURE!

!testRun: #PlayableCharacterTest #test14_canTakePortableObjectsThatAreInAdjacentPositionAndFacedByPlayableCharacter stamp: 'as 12/10/2020 20:06:45'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 20:07:08' prior: 50875039!
test14_canTakePortableObjectsThatAreInAdjacentPositionAndFacedByPlayableCharacter

	| room objects playableCharacter key|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	objects := Dictionary new
			at: 2@1 put: key;
			yourself.

	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: room. 
	
	playableCharacter take: key.
	
	self deny: (room roomContains: key).
	self assert: (playableCharacter backpackIncludes: key)
	! !

!testRun: #PlayableCharacterTest #test14_canTakePortableObjectsThatAreInAdjacentPositionAndFacedByPlayableCharacter stamp: 'as 12/10/2020 20:07:11'!
FAILURE!

!testRun: #PlayableCharacterTest #test14_canTakePortableObjectsThatAreInAdjacentPositionAndFacedByPlayableCharacter stamp: 'as 12/10/2020 20:07:11'!
FAILURE!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 20:08:21' prior: 50874863!
takePortableObject: aPortableObject
	
	(room object: aPortableObject isAtPosition: position + heading forwardPoint ) ifFalse: [self error: self class cannotTakeDesiredObjectErrorDescription ].
	
	room takeObject: aPortableObject.
	backpack add: aPortableObject ! !
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 20:08:36'!
takeObject: anObject
	
	! !
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 20:11:10' prior: 50875110!
takeObject: anObject
	
	roomObjects removeKey: (roomObjects keyAtValue: anObject).! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'as 12/10/2020 20:11:14'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'as 12/10/2020 20:11:14'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'as 12/10/2020 20:11:14'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'as 12/10/2020 20:11:14'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'as 12/10/2020 20:11:14'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'as 12/10/2020 20:11:14'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'as 12/10/2020 20:11:14'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'as 12/10/2020 20:11:14'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'as 12/10/2020 20:11:14'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'as 12/10/2020 20:11:14'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotTakeNonPortableObjects stamp: 'as 12/10/2020 20:11:14'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakePortableObjectsThatAreNotInAdjacentPosition stamp: 'as 12/10/2020 20:11:14'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreInAdjacentPositionButNotFacedByPlayableCharacter stamp: 'as 12/10/2020 20:11:14'!
PASSED!

!testRun: #PlayableCharacterTest #test14_canTakePortableObjectsThatAreInAdjacentPositionAndFacedByPlayableCharacter stamp: 'as 12/10/2020 20:11:14'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 20:12:03'!
test15_cannotTakePortableObjectsThatAreNotInRoom

	| room objects playableCharacter key|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	objects := Dictionary new
			at: 2@1 put: key;
			yourself.

	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: room. 
	
	playableCharacter take: key.
	
	self deny: (room roomContains: key).
	self assert: (playableCharacter backpackIncludes: key)
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 20:12:08' prior: 50875176!
test15_cannotTakePortableObjectsThatAreNotInRoom

	| room objects playableCharacter key|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	objects := Dictionary new.

	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: room. 
	
	playableCharacter take: key.
	
	self deny: (room roomContains: key).
	self assert: (playableCharacter backpackIncludes: key)
	! !

!testRun: #PlayableCharacterTest #test15_cannotTakePortableObjectsThatAreNotInRoom stamp: 'as 12/10/2020 20:12:17'!
ERROR!

!testRun: #PlayableCharacterTest #test15_cannotTakePortableObjectsThatAreNotInRoom stamp: 'as 12/10/2020 20:12:17'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 20:13:15' prior: 50875195!
test15_cannotTakePortableObjectsThatAreNotInRoom

	| room objects playableCharacter key|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	objects := Dictionary new.
	room := Room of: 10 for: 10 withObjects: objects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: room. 
	
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeDesiredObjectErrorDescription equals: anError messageText.
			 ]
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 20:13:27' prior: 50875221!
test15_cannotTakePortableObjectsThatAreNotInRoom

	| room objects playableCharacter key|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	objects := Dictionary new.
	room := Room of: 10 for: 10 withObjects: objects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: room. 
	
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeDesiredObjectErrorDescription equals: anError messageText.
			self deny: (playableCharacter backpackIncludes: key)
	 ]
	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'as 12/10/2020 20:13:31'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'as 12/10/2020 20:13:31'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'as 12/10/2020 20:13:31'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'as 12/10/2020 20:13:31'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'as 12/10/2020 20:13:31'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'as 12/10/2020 20:13:31'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'as 12/10/2020 20:13:31'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'as 12/10/2020 20:13:31'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'as 12/10/2020 20:13:31'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'as 12/10/2020 20:13:31'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotTakeNonPortableObjects stamp: 'as 12/10/2020 20:13:31'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakePortableObjectsThatAreNotInAdjacentPosition stamp: 'as 12/10/2020 20:13:31'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreInAdjacentPositionButNotFacedByPlayableCharacter stamp: 'as 12/10/2020 20:13:31'!
PASSED!

!testRun: #PlayableCharacterTest #test14_canTakePortableObjectsThatAreInAdjacentPositionAndFacedByPlayableCharacter stamp: 'as 12/10/2020 20:13:31'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakePortableObjectsThatAreNotInRoom stamp: 'as 12/10/2020 20:13:31'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'as 12/10/2020 20:16:30'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'as 12/10/2020 20:16:30'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'as 12/10/2020 20:16:30'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'as 12/10/2020 20:16:30'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'as 12/10/2020 20:16:30'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'as 12/10/2020 20:16:30'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'as 12/10/2020 20:16:30'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'as 12/10/2020 20:16:30'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'as 12/10/2020 20:16:30'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'as 12/10/2020 20:16:30'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'as 12/10/2020 20:16:30'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'as 12/10/2020 20:16:30'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'as 12/10/2020 20:16:30'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'as 12/10/2020 20:16:30'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'as 12/10/2020 20:16:30'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'as 12/10/2020 20:16:35'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'as 12/10/2020 20:16:35'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'as 12/10/2020 20:16:35'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'as 12/10/2020 20:16:35'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'as 12/10/2020 20:16:35'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'as 12/10/2020 20:16:35'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'as 12/10/2020 20:16:35'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'as 12/10/2020 20:16:35'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'as 12/10/2020 20:16:35'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'as 12/10/2020 20:16:35'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotTakeNonPortableObjects stamp: 'as 12/10/2020 20:16:35'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakePortableObjectsThatAreNotInAdjacentPosition stamp: 'as 12/10/2020 20:16:35'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreInAdjacentPositionButNotFacedByPlayableCharacter stamp: 'as 12/10/2020 20:16:35'!
PASSED!

!testRun: #PlayableCharacterTest #test14_canTakePortableObjectsThatAreInAdjacentPositionAndFacedByPlayableCharacter stamp: 'as 12/10/2020 20:16:35'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakePortableObjectsThatAreNotInRoom stamp: 'as 12/10/2020 20:16:35'!
PASSED!

!testRun: #RoomTest #test01CannotCreateRoomWithNProportionSmallerThan1 stamp: 'as 12/10/2020 20:16:39'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithMProportionSmallerThan1 stamp: 'as 12/10/2020 20:16:39'!
PASSED!

!testRun: #RoomTest #test03CannotCreateRoomWithNonIntegerProportions stamp: 'as 12/10/2020 20:16:39'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterIsCreatedInAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 20:16:39'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterIsCreatedInAPositionNotOccupiedByAnObject stamp: 'as 12/10/2020 20:16:39'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterCannotMoveForwardsToAPositionOccupiedByAnObject stamp: 'as 12/10/2020 20:16:39'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterCannotMoveBackwardsToAPositionOccupiedByAnObject stamp: 'as 12/10/2020 20:16:39'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterCanOnlyMoveForwardsToAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 20:16:39'!
PASSED!

!testRun: #RoomTest #test09CannotCreateARoomWithObjectsNotInsideTheRoomsProportions stamp: 'as 12/10/2020 20:16:39'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 20:19:24'!
test16_canTakePortableObjectContainedInAReachableNonPortableObject

	| room objects playableCharacter key table|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	table := NonPortableObject named: 'Table' containing: (OrderedCollection with: key).
	objects := Dictionary new.
	room := Room of: 10 for: 10 withObjects: objects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: room. 
	
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeDesiredObjectErrorDescription equals: anError messageText.
			self deny: (playableCharacter backpackIncludes: key)
	 ]
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 20:20:45' prior: 50875475!
test16_canTakePortableObjectContainedInAReachableNonPortableObject

	| room objects playableCharacter key table|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	table := NonPortableObject named: 'Table' containing: (OrderedCollection with: key).
	objects := Dictionary new
			at: 2@1 put: table;
			yourself.
	room := Room of: 10 for: 10 withObjects: objects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: room. 
	
	self 
		should: [ playableCharacter takeObjectsContainedIn: table ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeDesiredObjectErrorDescription equals: anError messageText.
			self deny: (playableCharacter backpackIncludes: key)
	 ]
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 20:21:19' prior: 50875502!
test16_canTakePortableObjectContainedInAReachableNonPortableObject

	| room objects playableCharacter key table|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	table := NonPortableObject named: 'Table' containing: (OrderedCollection with: key).
	objects := Dictionary new
			at: 2@1 put: table;
			yourself.
	room := Room of: 10 for: 10 withObjects: objects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: room. 
	
	playableCharacter takeObjectsContainedIn: table.
	
	self assert: (playableCharacter backpackIncludes: key).
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 20:21:42' prior: 50875530!
test16_canTakePortableObjectContainedInAReachableNonPortableObject

	| room objects playableCharacter key table|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	table := NonPortableObject named: 'Table' containing: (OrderedCollection with: key).
	objects := Dictionary new
			at: 2@1 put: table;
			yourself.
	room := Room of: 10 for: 10 withObjects: objects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: room. 
	
	playableCharacter takeObjectsContainedIn: table.
	
	self assert: (playableCharacter backpackIncludes: key).
	self assert: (table doesntContain: key)
	! !

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'as 12/10/2020 20:22:27'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name objects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 20:22:26'!
initializeNamed: aName containing: stageObjects
	
	name := aName.
	objects := stageObjects.! !
!NonPortableObject class methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 20:22:50'!
named: aName containing: stageObjects
	
	^ self new initializeNamed: aName containing: stageObjects! !

!methodRemoval: NonPortableObject class #named: stamp: 'as 12/10/2020 20:23:01'!
named: aName
	
	^ self new initializeNamed: aName !

!methodRemoval: NonPortableObject #initializeNamed: stamp: 'as 12/10/2020 20:23:11'!
initializeNamed: aName 
	
	name := aName.!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'as 12/10/2020 20:24:07'!
takeObjectsContainedIn: aNonPortableObject
	
	aNonPortableObject addObjectsTo: backpack.! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 20:24:21'!
addObjectsTo: aBackpack! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 20:26:08'!
takeObjectsContainedBy: aPlayableCharacter
	objects do: [:object | aPlayableCharacter take: object]! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 20:26:17'!
takeContainedObjectsBy: aPlayableCharacter
	objects do: [:object | aPlayableCharacter take: object]! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'as 12/10/2020 20:26:22'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'as 12/10/2020 20:26:22'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'as 12/10/2020 20:26:22'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'as 12/10/2020 20:26:22'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'as 12/10/2020 20:26:22'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'as 12/10/2020 20:26:22'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'as 12/10/2020 20:26:22'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'as 12/10/2020 20:26:22'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'as 12/10/2020 20:26:22'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'as 12/10/2020 20:26:23'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotTakeNonPortableObjects stamp: 'as 12/10/2020 20:26:23'!
ERROR!

!testRun: #PlayableCharacterTest #test12_canNotTakePortableObjectsThatAreNotInAdjacentPosition stamp: 'as 12/10/2020 20:26:23'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreInAdjacentPositionButNotFacedByPlayableCharacter stamp: 'as 12/10/2020 20:26:23'!
PASSED!

!testRun: #PlayableCharacterTest #test14_canTakePortableObjectsThatAreInAdjacentPositionAndFacedByPlayableCharacter stamp: 'as 12/10/2020 20:26:23'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakePortableObjectsThatAreNotInRoom stamp: 'as 12/10/2020 20:26:23'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canTakePortableObjectContainedInAReachableNonPortableObject stamp: 'as 12/10/2020 20:26:23'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 20:26:37' prior: 50874401!
test11_canNotTakeNonPortableObjects

	| room objects playableCharacter table|
	
	table := NonPortableObject named: 'Table' .
	objects := Dictionary new
			at: 1@2 put: table;
			yourself.

	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North in: room. 
	
	self 
		should: [ playableCharacter take: table ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeNonPortableObjectErrorDescription equals: anError messageText.
			self assert: (room roomContains: table at: 1@2) ]
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 20:26:53' prior: 50875691!
test11_canNotTakeNonPortableObjects

	| room objects playableCharacter table|
	
	table := NonPortableObject named: 'Table' containing: OrderedCollection new.
	objects := Dictionary new
			at: 1@2 put: table;
			yourself.

	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North in: room. 
	
	self 
		should: [ playableCharacter take: table ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeNonPortableObjectErrorDescription equals: anError messageText.
			self assert: (room roomContains: table at: 1@2) ]
	
	! !

!testRun: #PlayableCharacterTest #test11_canNotTakeNonPortableObjects stamp: 'as 12/10/2020 20:26:56'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'as 12/10/2020 20:27:01'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'as 12/10/2020 20:27:01'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'as 12/10/2020 20:27:01'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'as 12/10/2020 20:27:01'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'as 12/10/2020 20:27:01'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'as 12/10/2020 20:27:01'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'as 12/10/2020 20:27:01'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'as 12/10/2020 20:27:01'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'as 12/10/2020 20:27:01'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'as 12/10/2020 20:27:01'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotTakeNonPortableObjects stamp: 'as 12/10/2020 20:27:01'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakePortableObjectsThatAreNotInAdjacentPosition stamp: 'as 12/10/2020 20:27:01'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreInAdjacentPositionButNotFacedByPlayableCharacter stamp: 'as 12/10/2020 20:27:02'!
PASSED!

!testRun: #PlayableCharacterTest #test14_canTakePortableObjectsThatAreInAdjacentPositionAndFacedByPlayableCharacter stamp: 'as 12/10/2020 20:27:02'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakePortableObjectsThatAreNotInRoom stamp: 'as 12/10/2020 20:27:02'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canTakePortableObjectContainedInAReachableNonPortableObject stamp: 'as 12/10/2020 20:27:02'!
FAILURE!

!testRun: #PlayableCharacterTest #test16_canTakePortableObjectContainedInAReachableNonPortableObject stamp: 'as 12/10/2020 20:27:02'!
FAILURE!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'as 12/10/2020 20:28:00' prior: 50875604!
takeObjectsContainedIn: aNonPortableObject
	
	aNonPortableObject takeByAPlayableCharacter: backpack.! !

!methodRemoval: NonPortableObject #takeObjectsContainedBy: stamp: 'as 12/10/2020 20:28:11'!
takeObjectsContainedBy: aPlayableCharacter
	objects do: [:object | aPlayableCharacter take: object]!

!methodRemoval: NonPortableObject #addObjectsTo: stamp: 'as 12/10/2020 20:28:16'!
addObjectsTo: aBackpack!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'as 12/10/2020 20:28:34' prior: 50875812!
takeObjectsContainedIn: aNonPortableObject
	
	aNonPortableObject takeContainedObjectsBy: self.! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 20:29:17'!
contains: aPortableObject
	^objects includes: aPortableObject! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 20:29:36' prior: 50875552!
test16_canTakePortableObjectContainedInAReachableNonPortableObject

	| room objects playableCharacter key table|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	table := NonPortableObject named: 'Table' containing: (OrderedCollection with: key).
	objects := Dictionary new
			at: 2@1 put: table;
			yourself.
	room := Room of: 10 for: 10 withObjects: objects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: room. 
	
	playableCharacter takeObjectsContainedIn: table.
	
	self assert: (playableCharacter backpackIncludes: key).
	self deny: (table contains: key)
	! !

!testRun: #PlayableCharacterTest #test16_canTakePortableObjectContainedInAReachableNonPortableObject stamp: 'as 12/10/2020 20:29:39'!
ERROR!

!testRun: #PlayableCharacterTest #test16_canTakePortableObjectContainedInAReachableNonPortableObject stamp: 'as 12/10/2020 20:29:39'!
ERROR!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 20:30:48' prior: 50875620!
takeContainedObjectsBy: aPlayableCharacter
	objects do: [:object | aPlayableCharacter take: object]! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 20:33:07' prior: 50875839!
test16_canTakePortableObjectContainedInAReachableNonPortableObject

	| room objects playableCharacter key table|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	table := NonPortableObject named: 'Table' containing: (OrderedCollection with: key).
	objects := Dictionary new
			at: 2@1 put: table;
			yourself.
	room := Room of: 10 for: 10 withObjects: objects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: room. 
	
	playableCharacter take: table.
	
	self assert: (playableCharacter backpackIncludes: key).
	self deny: (table contains: key)
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 20:34:30'!
test11_canNotTakeNonPortableObjectsThatDoesntContainPortableObjects

	| room objects playableCharacter table|
	
	table := NonPortableObject named: 'Table' containing: OrderedCollection new.
	objects := Dictionary new
			at: 1@2 put: table;
			yourself.

	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North in: room. 
	
	self 
		should: [ playableCharacter take: table ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeNonPortableObjectErrorDescription equals: anError messageText.
			self assert: (room roomContains: table at: 1@2) ]
	
	! !

!methodRemoval: PlayableCharacter #takeObjectsContainedIn: stamp: 'as 12/10/2020 20:35:21'!
takeObjectsContainedIn: aNonPortableObject
	
	aNonPortableObject takeContainedObjectsBy: self.!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'as 12/10/2020 20:35:36'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'as 12/10/2020 20:35:36'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'as 12/10/2020 20:35:36'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'as 12/10/2020 20:35:36'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'as 12/10/2020 20:35:36'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'as 12/10/2020 20:35:36'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'as 12/10/2020 20:35:36'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'as 12/10/2020 20:35:36'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'as 12/10/2020 20:35:36'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'as 12/10/2020 20:35:36'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotTakeNonPortableObjects stamp: 'as 12/10/2020 20:35:36'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotTakeNonPortableObjectsThatDoesntContainPortableObjects stamp: 'as 12/10/2020 20:35:36'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakePortableObjectsThatAreNotInAdjacentPosition stamp: 'as 12/10/2020 20:35:36'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreInAdjacentPositionButNotFacedByPlayableCharacter stamp: 'as 12/10/2020 20:35:36'!
PASSED!

!testRun: #PlayableCharacterTest #test14_canTakePortableObjectsThatAreInAdjacentPositionAndFacedByPlayableCharacter stamp: 'as 12/10/2020 20:35:36'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakePortableObjectsThatAreNotInRoom stamp: 'as 12/10/2020 20:35:36'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canTakePortableObjectContainedInAReachableNonPortableObject stamp: 'as 12/10/2020 20:35:36'!
ERROR!

!testRun: #PlayableCharacterTest #test16_canTakePortableObjectContainedInAReachableNonPortableObject stamp: 'as 12/10/2020 20:35:36'!
ERROR!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 20:38:44' prior: 50874352 overrides: 50874346!
takeByAPlayableCharacter: aPlayableCharacter
	
	"aPlayableCharacter takeNonPortableObject."
	objects do: [:aContainedObject | aPlayableCharacter take: aContainedObject]! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'as 12/10/2020 20:38:51'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'as 12/10/2020 20:38:51'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'as 12/10/2020 20:38:51'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'as 12/10/2020 20:38:51'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'as 12/10/2020 20:38:51'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'as 12/10/2020 20:38:51'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'as 12/10/2020 20:38:51'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'as 12/10/2020 20:38:51'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'as 12/10/2020 20:38:51'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'as 12/10/2020 20:38:51'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotTakeNonPortableObjects stamp: 'as 12/10/2020 20:38:51'!
FAILURE!

!testRun: #PlayableCharacterTest #test11_canNotTakeNonPortableObjectsThatDoesntContainPortableObjects stamp: 'as 12/10/2020 20:38:51'!
FAILURE!

!testRun: #PlayableCharacterTest #test12_canNotTakePortableObjectsThatAreNotInAdjacentPosition stamp: 'as 12/10/2020 20:38:51'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreInAdjacentPositionButNotFacedByPlayableCharacter stamp: 'as 12/10/2020 20:38:51'!
PASSED!

!testRun: #PlayableCharacterTest #test14_canTakePortableObjectsThatAreInAdjacentPositionAndFacedByPlayableCharacter stamp: 'as 12/10/2020 20:38:51'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakePortableObjectsThatAreNotInRoom stamp: 'as 12/10/2020 20:38:51'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canTakePortableObjectContainedInAReachableNonPortableObject stamp: 'as 12/10/2020 20:38:51'!
ERROR!

!methodRemoval: PlayableCharacterTest #test11_canNotTakeNonPortableObjects stamp: 'as 12/10/2020 20:39:24'!
test11_canNotTakeNonPortableObjects

	| room objects playableCharacter table|
	
	table := NonPortableObject named: 'Table' containing: OrderedCollection new.
	objects := Dictionary new
			at: 1@2 put: table;
			yourself.

	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North in: room. 
	
	self 
		should: [ playableCharacter take: table ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeNonPortableObjectErrorDescription equals: anError messageText.
			self assert: (room roomContains: table at: 1@2) ]
	
	!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 20:39:44'!
test11_takeNonPortableObjectsThatDoesntContainPortableObjectsDoesntAddObjectsToBackpack

	| room objects playableCharacter table|
	
	table := NonPortableObject named: 'Table' containing: OrderedCollection new.
	objects := Dictionary new
			at: 1@2 put: table;
			yourself.

	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North in: room. 
	
	self 
		should: [ playableCharacter take: table ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeNonPortableObjectErrorDescription equals: anError messageText.
			self assert: (room roomContains: table at: 1@2) ]
	
	! !

!methodRemoval: PlayableCharacterTest #test11_canNotTakeNonPortableObjectsThatDoesntContainPortableObjects stamp: 'as 12/10/2020 20:39:44'!
test11_canNotTakeNonPortableObjectsThatDoesntContainPortableObjects

	| room objects playableCharacter table|
	
	table := NonPortableObject named: 'Table' containing: OrderedCollection new.
	objects := Dictionary new
			at: 1@2 put: table;
			yourself.

	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North in: room. 
	
	self 
		should: [ playableCharacter take: table ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeNonPortableObjectErrorDescription equals: anError messageText.
			self assert: (room roomContains: table at: 1@2) ]
	
	!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 20:40:01' prior: 50876109!
test11_takeNonPortableObjectsThatDoesntContainPortableObjectsDoesntAddObjectsToBackpack

	| room objects playableCharacter table|
	
	table := NonPortableObject named: 'Table' containing: OrderedCollection new.
	objects := Dictionary new
			at: 1@2 put: table;
			yourself.

	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North in: room. 
	
	playableCharacter take: table 
	
	
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 20:40:40' prior: 50876162!
test11_takeNonPortableObjectsThatDoesntContainPortableObjectsDoesntAddObjectsToBackpack

	| room objects playableCharacter table|
	
	table := NonPortableObject named: 'Table' containing: OrderedCollection new.
	objects := Dictionary new
			at: 1@2 put: table;
			yourself.

	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North in: room. 
	
	playableCharacter take: table.
	
	
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 20:41:30'!
test11_takingNonPortableObjectsThatDoesntContainPortableObjectsDoesntAddObjectToBackpack

	| room objects playableCharacter table|
	
	table := NonPortableObject named: 'Table' containing: OrderedCollection new.
	objects := Dictionary new
			at: 1@2 put: table;
			yourself.

	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North in: room. 
	
	playableCharacter take: table.
	
	
	
	! !

!methodRemoval: PlayableCharacterTest #test11_takeNonPortableObjectsThatDoesntContainPortableObjectsDoesntAddObjectsToBackpack stamp: 'as 12/10/2020 20:41:30'!
test11_takeNonPortableObjectsThatDoesntContainPortableObjectsDoesntAddObjectsToBackpack

	| room objects playableCharacter table|
	
	table := NonPortableObject named: 'Table' containing: OrderedCollection new.
	objects := Dictionary new
			at: 1@2 put: table;
			yourself.

	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North in: room. 
	
	playableCharacter take: table.
	
	
	
	!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 20:41:32' prior: 50876199!
test11_takingNonPortableObjectsThatDoesntContainPortableObjectsDoesntAddObjectToBackpack

	| room objects playableCharacter table|
	
	table := NonPortableObject named: 'Table' containing: OrderedCollection new.
	objects := Dictionary new
			at: 1@2 put: table;
			yourself.

	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North in: room. 
	
	playableCharacter take: table.
	
	
	
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 20:41:43' prior: 50876238!
test11_takingNonPortableObjectsThatDoesntContainPortableObjectsDoesntAddObjectToBackpack

	| room objects playableCharacter table|
	
	table := NonPortableObject named: 'Table' containing: OrderedCollection new.
	objects := Dictionary new
			at: 1@2 put: table;
			yourself.

	room := Room of: 10 for: 10 withObjects: objects.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North in: room. 
	
	playableCharacter take: table.
	
	self deny: (playableCharacter backpackIncludes: table)
	
	
	
	
	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'as 12/10/2020 20:41:47'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'as 12/10/2020 20:41:47'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'as 12/10/2020 20:41:47'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'as 12/10/2020 20:41:47'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'as 12/10/2020 20:41:47'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'as 12/10/2020 20:41:47'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'as 12/10/2020 20:41:47'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'as 12/10/2020 20:41:47'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'as 12/10/2020 20:41:47'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'as 12/10/2020 20:41:47'!
PASSED!

!testRun: #PlayableCharacterTest #test11_takingNonPortableObjectsThatDoesntContainPortableObjectsDoesntAddObjectToBackpack stamp: 'as 12/10/2020 20:41:47'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakePortableObjectsThatAreNotInAdjacentPosition stamp: 'as 12/10/2020 20:41:47'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreInAdjacentPositionButNotFacedByPlayableCharacter stamp: 'as 12/10/2020 20:41:47'!
PASSED!

!testRun: #PlayableCharacterTest #test14_canTakePortableObjectsThatAreInAdjacentPositionAndFacedByPlayableCharacter stamp: 'as 12/10/2020 20:41:47'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakePortableObjectsThatAreNotInRoom stamp: 'as 12/10/2020 20:41:47'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canTakePortableObjectContainedInAReachableNonPortableObject stamp: 'as 12/10/2020 20:41:47'!
ERROR!

!testRun: #PlayableCharacterTest #test16_canTakePortableObjectContainedInAReachableNonPortableObject stamp: 'as 12/10/2020 20:41:47'!
ERROR!

!testRun: #PlayableCharacterTest #test16_canTakePortableObjectContainedInAReachableNonPortableObject stamp: 'as 12/10/2020 20:42:06'!
ERROR!

!testRun: #PlayableCharacterTest #test16_canTakePortableObjectContainedInAReachableNonPortableObject stamp: 'as 12/10/2020 20:42:06'!
ERROR!

!methodRemoval: Room #object:isReachableFrom:heading: stamp: 'as 12/10/2020 20:44:03'!
object: aPortableObject isReachableFrom: position heading: heading
	
	^ (position fourNeighbors) includes: (roomObjects keyAtValue: aPortableObject ifAbsent: [^false]).!
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 20:45:18' prior: 50874880!
object: aPortableObject isAtPosition: aPosition

	"^ (roomObjects keyAtValue: aPortableObject ifAbsent: [^false]) = aPosition."
	^ (roomObjects at: aPosition) containsObject: aPortableObject.! !
!StageObject methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 20:45:54'!
containsObject: aStageObject

	self subclassResponsibility ! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 20:46:25' overrides: 50876374!
containsObject: aStageObject
	
	objects do: [:object | object containsObject: aStageObject].! !
!PortableObject methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 20:46:48' overrides: 50876374!
containsObject: aStageObject
	
	^ self = aStageObject ! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 20:47:21' prior: 50876380 overrides: 50876374!
containsObject: aStageObject
	
	^objects anySatisfy: [:object | object containsObject: aStageObject].! !

!testRun: #PlayableCharacterTest #test16_canTakePortableObjectContainedInAReachableNonPortableObject stamp: 'as 12/10/2020 20:47:35'!
ERROR!

!testRun: #PlayableCharacterTest #test16_canTakePortableObjectContainedInAReachableNonPortableObject stamp: 'as 12/10/2020 20:47:35'!
ERROR!

!testRun: #PlayableCharacterTest #test16_canTakePortableObjectContainedInAReachableNonPortableObject stamp: 'as 12/10/2020 20:48:20'!
ERROR!

!testRun: #PlayableCharacterTest #test16_canTakePortableObjectContainedInAReachableNonPortableObject stamp: 'as 12/10/2020 20:48:20'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 20:52:26' prior: 50875114!
takeObject: anObject
	
	"roomObjects removeKey: (roomObjects keyAtValue: anObject)."
	
	! !
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 20:53:03' prior: 50876417!
takeObject: anObject
	
	"roomObjects removeKey: (roomObjects keyAtValue: anObject)."
	
	anObject takeFromRoom: self.! !
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 20:53:40' prior: 50876423!
takeObject: aPortableObject
	
	"roomObjects removeKey: (roomObjects keyAtValue: anObject)."
	
	aPortableObject takeFromRoom: self.! !
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 20:55:13' prior: 50876430!
takeObject: aPortableObject
	
	"roomObjects removeKey: (roomObjects keyAtValue: anObject)."
	
	aPortableObject takeFromRoom.! !

!classDefinition: #PortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'as 12/10/2020 20:56:35'!
StageObject subclass: #PortableObject
	instanceVariableNames: 'name weight parent'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PortableObject methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 20:56:32'!
takeFromRoom 
	
	parent ifNotNil: (parent removeObject: self)! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 20:57:05'!
removeObject: aPortableObject
	
	objects remove: aPortableObject ! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'as 12/10/2020 20:57:14'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'as 12/10/2020 20:57:14'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'as 12/10/2020 20:57:14'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'as 12/10/2020 20:57:14'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'as 12/10/2020 20:57:14'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'as 12/10/2020 20:57:14'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'as 12/10/2020 20:57:14'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'as 12/10/2020 20:57:14'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'as 12/10/2020 20:57:14'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'as 12/10/2020 20:57:14'!
ERROR!

!testRun: #PlayableCharacterTest #test11_takingNonPortableObjectsThatDoesntContainPortableObjectsDoesntAddObjectToBackpack stamp: 'as 12/10/2020 20:57:14'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakePortableObjectsThatAreNotInAdjacentPosition stamp: 'as 12/10/2020 20:57:14'!
FAILURE!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreInAdjacentPositionButNotFacedByPlayableCharacter stamp: 'as 12/10/2020 20:57:14'!
FAILURE!

!testRun: #PlayableCharacterTest #test14_canTakePortableObjectsThatAreInAdjacentPositionAndFacedByPlayableCharacter stamp: 'as 12/10/2020 20:57:14'!
ERROR!

!testRun: #PlayableCharacterTest #test15_cannotTakePortableObjectsThatAreNotInRoom stamp: 'as 12/10/2020 20:57:14'!
FAILURE!

!testRun: #PlayableCharacterTest #test16_canTakePortableObjectContainedInAReachableNonPortableObject stamp: 'as 12/10/2020 20:57:14'!
ERROR!

!testRun: #PlayableCharacterTest #test16_canTakePortableObjectContainedInAReachableNonPortableObject stamp: 'as 12/10/2020 20:57:34'!
ERROR!

!testRun: #PlayableCharacterTest #test16_canTakePortableObjectContainedInAReachableNonPortableObject stamp: 'as 12/10/2020 20:57:34'!
ERROR!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 20:58:34' prior: 50875584!
initializeNamed: aName containing: stageObjects
	
	name := aName.
	objects := stageObjects.
	
	objects do: [:object | object addContainer: self]! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 20:58:44'!
addContainer: aContainer! !

!classDefinition: #PortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'as 12/10/2020 20:59:05'!
StageObject subclass: #PortableObject
	instanceVariableNames: 'name weight parent container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PortableObject methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 20:59:03'!
addContainer: aContainer
	container := aContainer ! !
!PortableObject methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 20:59:14' prior: 50876453!
takeFromRoom 
	
	container ifNotNil: (container removeObject: self)! !

StageObject subclass: #PortableObject
	instanceVariableNames: 'name weight container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #PortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'as 12/10/2020 20:59:20'!
StageObject subclass: #PortableObject
	instanceVariableNames: 'name weight container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'as 12/10/2020 20:59:35'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'as 12/10/2020 20:59:35'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'as 12/10/2020 20:59:35'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'as 12/10/2020 20:59:35'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'as 12/10/2020 20:59:35'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'as 12/10/2020 20:59:35'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'as 12/10/2020 20:59:35'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'as 12/10/2020 20:59:35'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'as 12/10/2020 20:59:35'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'as 12/10/2020 20:59:35'!
ERROR!

!testRun: #PlayableCharacterTest #test11_takingNonPortableObjectsThatDoesntContainPortableObjectsDoesntAddObjectToBackpack stamp: 'as 12/10/2020 20:59:35'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakePortableObjectsThatAreNotInAdjacentPosition stamp: 'as 12/10/2020 20:59:35'!
FAILURE!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreInAdjacentPositionButNotFacedByPlayableCharacter stamp: 'as 12/10/2020 20:59:35'!
FAILURE!

!testRun: #PlayableCharacterTest #test14_canTakePortableObjectsThatAreInAdjacentPositionAndFacedByPlayableCharacter stamp: 'as 12/10/2020 20:59:35'!
ERROR!

!testRun: #PlayableCharacterTest #test15_cannotTakePortableObjectsThatAreNotInRoom stamp: 'as 12/10/2020 20:59:35'!
FAILURE!

!testRun: #PlayableCharacterTest #test16_canTakePortableObjectContainedInAReachableNonPortableObject stamp: 'as 12/10/2020 20:59:35'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canTakePortableObjectContainedInAReachableNonPortableObject stamp: 'as 12/10/2020 20:59:41'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakePortableObjectsThatAreNotInRoom stamp: 'as 12/10/2020 20:59:47'!
FAILURE!

!testRun: #PlayableCharacterTest #test15_cannotTakePortableObjectsThatAreNotInRoom stamp: 'as 12/10/2020 20:59:48'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 21:01:42' prior: 50876365!
object: aPortableObject isAtPosition: aPosition

	"^ (roomObjects keyAtValue: aPortableObject ifAbsent: [^false]) = aPosition."
	^ (roomObjects at: aPosition ifAbsent: [^false]) containsObject: aPortableObject.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'as 12/10/2020 21:01:46'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'as 12/10/2020 21:01:46'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'as 12/10/2020 21:01:46'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'as 12/10/2020 21:01:46'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'as 12/10/2020 21:01:46'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'as 12/10/2020 21:01:46'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'as 12/10/2020 21:01:46'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'as 12/10/2020 21:01:46'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'as 12/10/2020 21:01:46'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'as 12/10/2020 21:01:46'!
ERROR!

!testRun: #PlayableCharacterTest #test11_takingNonPortableObjectsThatDoesntContainPortableObjectsDoesntAddObjectToBackpack stamp: 'as 12/10/2020 21:01:46'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakePortableObjectsThatAreNotInAdjacentPosition stamp: 'as 12/10/2020 21:01:46'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreInAdjacentPositionButNotFacedByPlayableCharacter stamp: 'as 12/10/2020 21:01:46'!
PASSED!

!testRun: #PlayableCharacterTest #test14_canTakePortableObjectsThatAreInAdjacentPositionAndFacedByPlayableCharacter stamp: 'as 12/10/2020 21:01:46'!
ERROR!

!testRun: #PlayableCharacterTest #test15_cannotTakePortableObjectsThatAreNotInRoom stamp: 'as 12/10/2020 21:01:46'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canTakePortableObjectContainedInAReachableNonPortableObject stamp: 'as 12/10/2020 21:01:46'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakePortableObjectsThatAreNotInRoom stamp: 'as 12/10/2020 21:03:09'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canTakePortableObjectContainedInAReachableNonPortableObject stamp: 'as 12/10/2020 21:03:14'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'as 12/10/2020 21:03:21'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'as 12/10/2020 21:03:21'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'as 12/10/2020 21:03:21'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'as 12/10/2020 21:03:21'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'as 12/10/2020 21:03:21'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'as 12/10/2020 21:03:21'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'as 12/10/2020 21:03:21'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'as 12/10/2020 21:03:21'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'as 12/10/2020 21:03:21'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'as 12/10/2020 21:03:21'!
ERROR!

!testRun: #PlayableCharacterTest #test11_takingNonPortableObjectsThatDoesntContainPortableObjectsDoesntAddObjectToBackpack stamp: 'as 12/10/2020 21:03:21'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakePortableObjectsThatAreNotInAdjacentPosition stamp: 'as 12/10/2020 21:03:21'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreInAdjacentPositionButNotFacedByPlayableCharacter stamp: 'as 12/10/2020 21:03:21'!
PASSED!

!testRun: #PlayableCharacterTest #test14_canTakePortableObjectsThatAreInAdjacentPositionAndFacedByPlayableCharacter stamp: 'as 12/10/2020 21:03:21'!
ERROR!

!testRun: #PlayableCharacterTest #test15_cannotTakePortableObjectsThatAreNotInRoom stamp: 'as 12/10/2020 21:03:21'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canTakePortableObjectContainedInAReachableNonPortableObject stamp: 'as 12/10/2020 21:03:21'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'as 12/10/2020 21:03:28'!
ERROR!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'as 12/10/2020 21:03:28'!
ERROR!
!PortableObject methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 21:04:08' prior: 50876565!
takeFromRoom 
	
	container ifNotNil: [container removeObject: self]! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'as 12/10/2020 21:04:11'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'as 12/10/2020 21:04:11'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'as 12/10/2020 21:04:11'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'as 12/10/2020 21:04:11'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'as 12/10/2020 21:04:11'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'as 12/10/2020 21:04:11'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'as 12/10/2020 21:04:11'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'as 12/10/2020 21:04:11'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'as 12/10/2020 21:04:11'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'as 12/10/2020 21:04:11'!
ERROR!

!testRun: #PlayableCharacterTest #test11_takingNonPortableObjectsThatDoesntContainPortableObjectsDoesntAddObjectToBackpack stamp: 'as 12/10/2020 21:04:11'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakePortableObjectsThatAreNotInAdjacentPosition stamp: 'as 12/10/2020 21:04:11'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreInAdjacentPositionButNotFacedByPlayableCharacter stamp: 'as 12/10/2020 21:04:11'!
PASSED!

!testRun: #PlayableCharacterTest #test14_canTakePortableObjectsThatAreInAdjacentPositionAndFacedByPlayableCharacter stamp: 'as 12/10/2020 21:04:11'!
FAILURE!

!testRun: #PlayableCharacterTest #test15_cannotTakePortableObjectsThatAreNotInRoom stamp: 'as 12/10/2020 21:04:11'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canTakePortableObjectContainedInAReachableNonPortableObject stamp: 'as 12/10/2020 21:04:11'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'as 12/10/2020 21:04:17'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'as 12/10/2020 21:04:17'!
ERROR!

playableCharacter!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'as 12/10/2020 21:06:00'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'as 12/10/2020 21:06:17'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'as 12/10/2020 21:06:26'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'as 12/10/2020 21:06:26'!
ERROR!
!PortableObject methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 21:07:27' prior: 50876820!
takeFromRoom 
	
	container ifNil: [container removeObject: self].
	container ifNotNil: [container removeObject: self]! !
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 21:07:49' prior: 50876437!
takeObject: aPortableObject
	
	"roomObjects removeKey: (roomObjects keyAtValue: anObject)."
	
	aPortableObject takeFromRoom: self.! !
!PortableObject methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 21:08:04'!
takeFromRoom: aRoom
	
	container ifNil: [container removeObject: self].
	container ifNotNil: [container removeObject: self]! !
!PortableObject methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 21:08:19' prior: 50876930!
takeFromRoom: aRoom
	
	container ifNil: [aRoom removeObject: self].
	container ifNotNil: [container removeObject: self]! !
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 21:08:58'!
removeObject: aPortableObject
	
	roomObjects removeKey: (roomObjects keyAtValue: aPortableObject).! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'as 12/10/2020 21:09:02'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'as 12/10/2020 21:09:02'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'as 12/10/2020 21:09:02'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'as 12/10/2020 21:09:02'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'as 12/10/2020 21:09:02'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'as 12/10/2020 21:09:02'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'as 12/10/2020 21:09:02'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'as 12/10/2020 21:09:02'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'as 12/10/2020 21:09:02'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'as 12/10/2020 21:09:02'!
PASSED!

!testRun: #PlayableCharacterTest #test11_takingNonPortableObjectsThatDoesntContainPortableObjectsDoesntAddObjectToBackpack stamp: 'as 12/10/2020 21:09:02'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakePortableObjectsThatAreNotInAdjacentPosition stamp: 'as 12/10/2020 21:09:02'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreInAdjacentPositionButNotFacedByPlayableCharacter stamp: 'as 12/10/2020 21:09:02'!
PASSED!

!testRun: #PlayableCharacterTest #test14_canTakePortableObjectsThatAreInAdjacentPositionAndFacedByPlayableCharacter stamp: 'as 12/10/2020 21:09:02'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakePortableObjectsThatAreNotInRoom stamp: 'as 12/10/2020 21:09:02'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canTakePortableObjectContainedInAReachableNonPortableObject stamp: 'as 12/10/2020 21:09:02'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 21:11:28'!
test17_canTakePortableObjectContainedInATwoLevelCompositionOfReachablePortableObject

	| room objects playableCharacter key table drawer|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	drawer := NonPortableObject named: 'Drawer' containing: (OrderedCollection with: key).
	table := NonPortableObject named: 'Table' containing: (OrderedCollection with: drawer).
	objects := Dictionary new
			at: 2@1 put: table;
			yourself.
	room := Room of: 10 for: 10 withObjects: objects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: room. 
	
	playableCharacter take: table.
	
	self assert: (playableCharacter backpackIncludes: key).
	self deny: (table contains: key)
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 21:11:44' prior: 50877017!
test17_canTakePortableObjectContainedInATwoLevelCompositionOfReachablePortableObject

	| room objects playableCharacter key table drawer|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	drawer := NonPortableObject named: 'Drawer' containing: (OrderedCollection with: key).
	table := NonPortableObject named: 'Table' containing: (OrderedCollection with: drawer).
	objects := Dictionary new
			at: 2@1 put: table;
			yourself.
	room := Room of: 10 for: 10 withObjects: objects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: room. 
	
	playableCharacter take: table.
	
	self assert: (playableCharacter backpackIncludes: key).
	self deny: (drawer contains: key).
	self deny: (table contains: key)
	! !

!testRun: #PlayableCharacterTest #test17_canTakePortableObjectContainedInATwoLevelCompositionOfReachablePortableObject stamp: 'as 12/10/2020 21:11:47'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 21:13:25'!
test18_canTakeAllThePortableObjectsContainedInNonPortableObjectThatBackpackCanCarry

	| room objects playableCharacter key table drawer|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	drawer := NonPortableObject named: 'Drawer' containing: (OrderedCollection with: key).
	table := NonPortableObject named: 'Table' containing: (OrderedCollection with: drawer).
	objects := Dictionary new
			at: 2@1 put: table;
			yourself.
	room := Room of: 10 for: 10 withObjects: objects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: room. 
	
	playableCharacter take: table.
	
	self assert: (playableCharacter backpackIncludes: key).
	self deny: (drawer contains: key).
	self deny: (table contains: key)
	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'as 12/10/2020 21:13:28'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'as 12/10/2020 21:13:28'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'as 12/10/2020 21:13:28'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'as 12/10/2020 21:13:28'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'as 12/10/2020 21:13:28'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'as 12/10/2020 21:13:28'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'as 12/10/2020 21:13:28'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'as 12/10/2020 21:13:28'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'as 12/10/2020 21:13:28'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'as 12/10/2020 21:13:28'!
PASSED!

!testRun: #PlayableCharacterTest #test11_takingNonPortableObjectsThatDoesntContainPortableObjectsDoesntAddObjectToBackpack stamp: 'as 12/10/2020 21:13:28'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakePortableObjectsThatAreNotInAdjacentPosition stamp: 'as 12/10/2020 21:13:28'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreInAdjacentPositionButNotFacedByPlayableCharacter stamp: 'as 12/10/2020 21:13:28'!
PASSED!

!testRun: #PlayableCharacterTest #test14_canTakePortableObjectsThatAreInAdjacentPositionAndFacedByPlayableCharacter stamp: 'as 12/10/2020 21:13:28'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakePortableObjectsThatAreNotInRoom stamp: 'as 12/10/2020 21:13:28'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canTakePortableObjectContainedInAReachableNonPortableObject stamp: 'as 12/10/2020 21:13:28'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakePortableObjectContainedInATwoLevelCompositionOfReachablePortableObject stamp: 'as 12/10/2020 21:13:28'!
PASSED!

!testRun: #PlayableCharacterTest #test18_canTakeAllThePortableObjectsContainedInNonPortableObjectThatBackpackCanCarry stamp: 'as 12/10/2020 21:13:28'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'as 12/10/2020 21:13:32'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'as 12/10/2020 21:13:32'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'as 12/10/2020 21:13:32'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'as 12/10/2020 21:13:32'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'as 12/10/2020 21:13:32'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'as 12/10/2020 21:13:32'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'as 12/10/2020 21:13:32'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'as 12/10/2020 21:13:32'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'as 12/10/2020 21:13:32'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'as 12/10/2020 21:13:32'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'as 12/10/2020 21:13:32'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'as 12/10/2020 21:13:32'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'as 12/10/2020 21:13:32'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'as 12/10/2020 21:13:32'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'as 12/10/2020 21:13:32'!
PASSED!

!testRun: #RoomTest #test01CannotCreateRoomWithNProportionSmallerThan1 stamp: 'as 12/10/2020 21:13:37'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithMProportionSmallerThan1 stamp: 'as 12/10/2020 21:13:37'!
PASSED!

!testRun: #RoomTest #test03CannotCreateRoomWithNonIntegerProportions stamp: 'as 12/10/2020 21:13:37'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterIsCreatedInAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 21:13:37'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterIsCreatedInAPositionNotOccupiedByAnObject stamp: 'as 12/10/2020 21:13:37'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterCannotMoveForwardsToAPositionOccupiedByAnObject stamp: 'as 12/10/2020 21:13:37'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterCannotMoveBackwardsToAPositionOccupiedByAnObject stamp: 'as 12/10/2020 21:13:37'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterCanOnlyMoveForwardsToAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 21:13:37'!
PASSED!

!testRun: #RoomTest #test09CannotCreateARoomWithObjectsNotInsideTheRoomsProportions stamp: 'as 12/10/2020 21:13:37'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 21:15:52'!
test18_canTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCanCarryThem

	| room objects playableCharacter key table paper|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	table := NonPortableObject named: 'Table' containing: (OrderedCollection with: key with: paper).
	objects := Dictionary new
			at: 2@1 put: table;
			yourself.
	room := Room of: 10 for: 10 withObjects: objects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: room. 
	
	playableCharacter take: table.
	
	self assert: (playableCharacter backpackIncludes: key).
	self assert: (playableCharacter backpackIncludes: paper).
	self deny: (table contains: key).
	self deny: (table contains: paper)
	! !

!testRun: #PlayableCharacterTest #test18_canTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCanCarryThem stamp: 'as 12/10/2020 21:15:56'!
FAILURE!

!testRun: #PlayableCharacterTest #test18_canTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCanCarryThem stamp: 'as 12/10/2020 21:15:56'!
FAILURE!

!methodRemoval: PlayableCharacterTest #test18_canTakeAllThePortableObjectsContainedInNonPortableObjectThatBackpackCanCarry stamp: 'as 12/10/2020 21:16:06'!
test18_canTakeAllThePortableObjectsContainedInNonPortableObjectThatBackpackCanCarry

	| room objects playableCharacter key table drawer|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	drawer := NonPortableObject named: 'Drawer' containing: (OrderedCollection with: key).
	table := NonPortableObject named: 'Table' containing: (OrderedCollection with: drawer).
	objects := Dictionary new
			at: 2@1 put: table;
			yourself.
	room := Room of: 10 for: 10 withObjects: objects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: room. 
	
	playableCharacter take: table.
	
	self assert: (playableCharacter backpackIncludes: key).
	self deny: (drawer contains: key).
	self deny: (table contains: key)
	!

!testRun: #PlayableCharacterTest #test18_canTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCanCarryThem stamp: 'as 12/10/2020 21:16:11'!
FAILURE!

!testRun: #PlayableCharacterTest #test18_canTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCanCarryThem stamp: 'as 12/10/2020 21:16:11'!
FAILURE!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'as 12/10/2020 21:16:15'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'as 12/10/2020 21:16:15'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'as 12/10/2020 21:16:15'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'as 12/10/2020 21:16:15'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'as 12/10/2020 21:16:15'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'as 12/10/2020 21:16:15'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'as 12/10/2020 21:16:15'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'as 12/10/2020 21:16:15'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'as 12/10/2020 21:16:15'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'as 12/10/2020 21:16:15'!
PASSED!

!testRun: #PlayableCharacterTest #test11_takingNonPortableObjectsThatDoesntContainPortableObjectsDoesntAddObjectToBackpack stamp: 'as 12/10/2020 21:16:15'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakePortableObjectsThatAreNotInAdjacentPosition stamp: 'as 12/10/2020 21:16:15'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreInAdjacentPositionButNotFacedByPlayableCharacter stamp: 'as 12/10/2020 21:16:15'!
PASSED!

!testRun: #PlayableCharacterTest #test14_canTakePortableObjectsThatAreInAdjacentPositionAndFacedByPlayableCharacter stamp: 'as 12/10/2020 21:16:15'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakePortableObjectsThatAreNotInRoom stamp: 'as 12/10/2020 21:16:15'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canTakePortableObjectContainedInAReachableNonPortableObject stamp: 'as 12/10/2020 21:16:15'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakePortableObjectContainedInATwoLevelCompositionOfReachablePortableObject stamp: 'as 12/10/2020 21:16:15'!
PASSED!

!testRun: #PlayableCharacterTest #test18_canTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCanCarryThem stamp: 'as 12/10/2020 21:16:15'!
FAILURE!

!testRun: #PlayableCharacterTest #test18_canTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCanCarryThem stamp: 'as 12/10/2020 21:16:15'!
FAILURE!

!testRun: #PlayableCharacterTest #test18_canTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCanCarryThem stamp: 'as 12/10/2020 21:16:21'!
FAILURE!

!testRun: #PlayableCharacterTest #test18_canTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCanCarryThem stamp: 'as 12/10/2020 21:16:21'!
FAILURE!

!testRun: #PlayableCharacterTest #test18_canTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCanCarryThem stamp: 'as 12/10/2020 21:16:53'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 21:17:06' prior: 50877268!
test18_canTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCanCarryThem

	| room objects playableCharacter key table paper|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	table := NonPortableObject named: 'Table' containing: (OrderedCollection with: key with: paper).
	objects := Dictionary new
			at: 2@1 put: table;
			yourself.
	room := Room of: 10 for: 10 withObjects: objects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: room. 
	
	playableCharacter take: table.
	
	self assert: (playableCharacter backpackIncludes: key).
	self assert: (playableCharacter backpackIncludes: paper).
	self deny: (table contains: key).
	self deny: (table contains: paper)
	! !

!testRun: #PlayableCharacterTest #test18_canTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCanCarryThem stamp: 'as 12/10/2020 21:17:09'!
FAILURE!

!testRun: #PlayableCharacterTest #test18_canTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCanCarryThem stamp: 'as 12/10/2020 21:17:09'!
FAILURE!

!testRun: #PlayableCharacterTest #test18_canTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCanCarryThem stamp: 'as 12/10/2020 21:17:26'!
FAILURE!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 21:18:11' prior: 50876007 overrides: 50874346!
takeByAPlayableCharacter: aPlayableCharacter
	
	objects do: [:aContainedObject | aPlayableCharacter take: aContainedObject]! !

objects!

aStageObject!

aStageObject!

aStageObject!

aStageObject!

aStageObject!

aStageObject!

!methodRemoval: PortableObject #takeFromRoom stamp: 'as 12/10/2020 21:22:30'!
takeFromRoom 
	
	container ifNil: [container removeObject: self].
	container ifNotNil: [container removeObject: self]!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 21:23:31' prior: 50877444!
test18_canTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCanCarryThem

	| room objects playableCharacter key table paper|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	table := NonPortableObject named: 'Table' containing: (OrderedCollection with: key with: paper).
	objects := Dictionary new
			at: 2@1 put: table;
			yourself.
	room := Room of: 10 for: 10 withObjects: objects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: room. 
	
	playableCharacter take: table.
	self deny: (table contains: key).
	self deny: (table contains: paper).
	self assert: (playableCharacter backpackIncludes: key).
	self assert: (playableCharacter backpackIncludes: paper).

	! !

!testRun: #PlayableCharacterTest #test18_canTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCanCarryThem stamp: 'as 12/10/2020 21:23:50'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 21:25:30' prior: 50877506!
test18_canTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCanCarryThem

	| room objects playableCharacter key table paper|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	table := NonPortableObject named: 'Table' containing: (OrderedCollection with: key with: paper).
	objects := Dictionary new
			at: 2@1 put: table;
			yourself.
	room := Room of: 10 for: 10 withObjects: objects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: room. 
	
	playableCharacter take: table.
	
	self deny: (table contains: key).
	self deny: (table contains: paper).
	self assert: (playableCharacter backpackIncludes: key).
	self assert: (playableCharacter backpackIncludes: paper).

	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 21:25:51' prior: 50877540!
test18_canTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCanCarryThem

	| room objects playableCharacter key table paper|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	table := NonPortableObject named: 'Table' containing: (OrderedCollection  with: paper with: key).
	objects := Dictionary new
			at: 2@1 put: table;
			yourself.
	room := Room of: 10 for: 10 withObjects: objects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: room. 
	
	playableCharacter take: table.
	
	self deny: (table contains: key).
	self deny: (table contains: paper).
	self assert: (playableCharacter backpackIncludes: key).
	self assert: (playableCharacter backpackIncludes: paper).

	! !

!testRun: #PlayableCharacterTest #test18_canTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCanCarryThem stamp: 'as 12/10/2020 21:26:04'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 21:26:14' prior: 50877569!
test18_canTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCanCarryThem

	| room objects playableCharacter key table paper|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	table := NonPortableObject named: 'Table' containing: (OrderedCollection with: key with: paper).
	objects := Dictionary new
			at: 2@1 put: table;
			yourself.
	room := Room of: 10 for: 10 withObjects: objects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: room. 
	
	playableCharacter take: table.
	
	self deny: (table contains: key).
	self deny: (table contains: paper).
	self assert: (playableCharacter backpackIncludes: key).
	self assert: (playableCharacter backpackIncludes: paper).

	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 21:27:40'!
test19_cannotTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCannotCarryThemAll

	| room objects playableCharacter key table paper|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	table := NonPortableObject named: 'Table' containing: (OrderedCollection with: key with: paper).
	objects := Dictionary new
			at: 2@1 put: table;
			yourself.
	room := Room of: 10 for: 10 withObjects: objects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: room. 
	
	playableCharacter take: table.
	
	self deny: (table contains: key).
	self assert: (table contains: paper).
	self assert: (playableCharacter backpackIncludes: key).
	self deny: (playableCharacter backpackIncludes: paper).

	! !

!testRun: #PlayableCharacterTest #test19_cannotTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCannotCarryThemAll stamp: 'as 12/10/2020 21:27:43'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 21:28:11' prior: 50877603!
test18_canTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCanCarryThem

	| room objects playableCharacter key table paper|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	table := NonPortableObject named: 'Table' containing: (OrderedCollection with: key with: paper).
	objects := Dictionary new
			at: 2@1 put: table;
			yourself.
	room := Room of: 10 for: 10 withObjects: objects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: room. 
	
	playableCharacter take: table.
	
	self deny: (table contains: key).
	self deny: (table contains: paper).
	self assert: (playableCharacter backpackIncludes: key).
	self assert: (playableCharacter backpackIncludes: paper).
	
	"no me dio el tiempo para entender porque falla este test"

	! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'as 12/10/2020 21:28:20'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'as 12/10/2020 21:28:20'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'as 12/10/2020 21:28:20'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'as 12/10/2020 21:28:20'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'as 12/10/2020 21:28:20'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'as 12/10/2020 21:28:20'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'as 12/10/2020 21:28:20'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'as 12/10/2020 21:28:20'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'as 12/10/2020 21:28:20'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'as 12/10/2020 21:28:20'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'as 12/10/2020 21:28:20'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'as 12/10/2020 21:28:20'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'as 12/10/2020 21:28:20'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'as 12/10/2020 21:28:20'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'as 12/10/2020 21:28:20'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'as 12/10/2020 21:28:24'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'as 12/10/2020 21:28:24'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'as 12/10/2020 21:28:24'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'as 12/10/2020 21:28:24'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'as 12/10/2020 21:28:24'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'as 12/10/2020 21:28:24'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'as 12/10/2020 21:28:24'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'as 12/10/2020 21:28:24'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'as 12/10/2020 21:28:24'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'as 12/10/2020 21:28:24'!
PASSED!

!testRun: #PlayableCharacterTest #test11_takingNonPortableObjectsThatDoesntContainPortableObjectsDoesntAddObjectToBackpack stamp: 'as 12/10/2020 21:28:24'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakePortableObjectsThatAreNotInAdjacentPosition stamp: 'as 12/10/2020 21:28:24'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreInAdjacentPositionButNotFacedByPlayableCharacter stamp: 'as 12/10/2020 21:28:24'!
PASSED!

!testRun: #PlayableCharacterTest #test14_canTakePortableObjectsThatAreInAdjacentPositionAndFacedByPlayableCharacter stamp: 'as 12/10/2020 21:28:24'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakePortableObjectsThatAreNotInRoom stamp: 'as 12/10/2020 21:28:24'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canTakePortableObjectContainedInAReachableNonPortableObject stamp: 'as 12/10/2020 21:28:24'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakePortableObjectContainedInATwoLevelCompositionOfReachablePortableObject stamp: 'as 12/10/2020 21:28:24'!
PASSED!

!testRun: #PlayableCharacterTest #test18_canTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCanCarryThem stamp: 'as 12/10/2020 21:28:24'!
FAILURE!

!testRun: #PlayableCharacterTest #test19_cannotTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCannotCarryThemAll stamp: 'as 12/10/2020 21:28:24'!
PASSED!

!testRun: #PlayableCharacterTest #test18_canTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCanCarryThem stamp: 'as 12/10/2020 21:28:24'!
FAILURE!

!testRun: #RoomTest #test01CannotCreateRoomWithNProportionSmallerThan1 stamp: 'as 12/10/2020 21:28:30'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithMProportionSmallerThan1 stamp: 'as 12/10/2020 21:28:30'!
PASSED!

!testRun: #RoomTest #test03CannotCreateRoomWithNonIntegerProportions stamp: 'as 12/10/2020 21:28:30'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterIsCreatedInAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 21:28:30'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterIsCreatedInAPositionNotOccupiedByAnObject stamp: 'as 12/10/2020 21:28:30'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterCannotMoveForwardsToAPositionOccupiedByAnObject stamp: 'as 12/10/2020 21:28:30'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterCannotMoveBackwardsToAPositionOccupiedByAnObject stamp: 'as 12/10/2020 21:28:31'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterCanOnlyMoveForwardsToAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 21:28:31'!
PASSED!

!testRun: #RoomTest #test09CannotCreateARoomWithObjectsNotInsideTheRoomsProportions stamp: 'as 12/10/2020 21:28:31'!
PASSED!
!PlayableCharacter methodsFor: 'taking private operations' stamp: 'as 12/10/2020 21:30:22'!
validatePositionOf: aPortableObject
	(room object: aPortableObject isAtPosition: position + heading forwardPoint ) ifFalse: [self error: self class cannotTakeDesiredObjectErrorDescription ].! !
!PlayableCharacter methodsFor: 'taking private operations' stamp: 'as 12/10/2020 21:30:44' prior: 50875099!
takePortableObject: aPortableObject
	
	"(room object: aPortableObject isAtPosition: position + heading forwardPoint ) ifFalse: [self error: self class cannotTakeDesiredObjectErrorDescription ]."
	self validatePositionOf: aPortableObject.
	room takeObject: aPortableObject.
	backpack add: aPortableObject ! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'as 12/10/2020 21:30:48'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'as 12/10/2020 21:30:48'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'as 12/10/2020 21:30:48'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'as 12/10/2020 21:30:48'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'as 12/10/2020 21:30:48'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'as 12/10/2020 21:30:48'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'as 12/10/2020 21:30:48'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'as 12/10/2020 21:30:48'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'as 12/10/2020 21:30:48'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'as 12/10/2020 21:30:48'!
PASSED!

!testRun: #PlayableCharacterTest #test11_takingNonPortableObjectsThatDoesntContainPortableObjectsDoesntAddObjectToBackpack stamp: 'as 12/10/2020 21:30:48'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakePortableObjectsThatAreNotInAdjacentPosition stamp: 'as 12/10/2020 21:30:48'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreInAdjacentPositionButNotFacedByPlayableCharacter stamp: 'as 12/10/2020 21:30:48'!
PASSED!

!testRun: #PlayableCharacterTest #test14_canTakePortableObjectsThatAreInAdjacentPositionAndFacedByPlayableCharacter stamp: 'as 12/10/2020 21:30:48'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakePortableObjectsThatAreNotInRoom stamp: 'as 12/10/2020 21:30:48'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canTakePortableObjectContainedInAReachableNonPortableObject stamp: 'as 12/10/2020 21:30:48'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakePortableObjectContainedInATwoLevelCompositionOfReachablePortableObject stamp: 'as 12/10/2020 21:30:48'!
PASSED!

!testRun: #PlayableCharacterTest #test18_canTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCanCarryThem stamp: 'as 12/10/2020 21:30:48'!
FAILURE!

!testRun: #PlayableCharacterTest #test19_cannotTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCannotCarryThemAll stamp: 'as 12/10/2020 21:30:48'!
PASSED!

!testRun: #PlayableCharacterTest #test18_canTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCanCarryThem stamp: 'as 12/10/2020 21:30:48'!
FAILURE!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'as 12/10/2020 21:30:54'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'as 12/10/2020 21:30:54'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'as 12/10/2020 21:30:54'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'as 12/10/2020 21:30:54'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'as 12/10/2020 21:30:54'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'as 12/10/2020 21:30:54'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'as 12/10/2020 21:30:54'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'as 12/10/2020 21:30:54'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'as 12/10/2020 21:30:54'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'as 12/10/2020 21:30:54'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'as 12/10/2020 21:30:54'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'as 12/10/2020 21:30:54'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'as 12/10/2020 21:30:54'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'as 12/10/2020 21:30:54'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'as 12/10/2020 21:30:54'!
PASSED!

!testRun: #RoomTest #test01CannotCreateRoomWithNProportionSmallerThan1 stamp: 'as 12/10/2020 21:30:58'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithMProportionSmallerThan1 stamp: 'as 12/10/2020 21:30:58'!
PASSED!

!testRun: #RoomTest #test03CannotCreateRoomWithNonIntegerProportions stamp: 'as 12/10/2020 21:30:58'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterIsCreatedInAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 21:30:58'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterIsCreatedInAPositionNotOccupiedByAnObject stamp: 'as 12/10/2020 21:30:58'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterCannotMoveForwardsToAPositionOccupiedByAnObject stamp: 'as 12/10/2020 21:30:58'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterCannotMoveBackwardsToAPositionOccupiedByAnObject stamp: 'as 12/10/2020 21:30:58'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterCanOnlyMoveForwardsToAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 21:30:58'!
PASSED!

!testRun: #RoomTest #test09CannotCreateARoomWithObjectsNotInsideTheRoomsProportions stamp: 'as 12/10/2020 21:30:58'!
PASSED!
!PlayableCharacter methodsFor: 'taking private operations' stamp: 'as 12/10/2020 21:31:13' prior: 50877884!
takePortableObject: aPortableObject

	self validatePositionOf: aPortableObject.
	room takeObject: aPortableObject.
	backpack add: aPortableObject ! !

!methodRemoval: PlayableCharacter #takeNonPortableObject stamp: 'as 12/10/2020 21:31:29'!
takeNonPortableObject
	^self error: self class cannotTakeNonPortableObjectErrorDescription !
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 21:32:33' prior: 50876663!
object: aPortableObject isAtPosition: aPosition

	^ (roomObjects at: aPosition ifAbsent: [^false]) containsObject: aPortableObject.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'as 12/10/2020 21:33:50'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'as 12/10/2020 21:33:50'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'as 12/10/2020 21:33:50'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'as 12/10/2020 21:33:50'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'as 12/10/2020 21:33:50'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'as 12/10/2020 21:33:50'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'as 12/10/2020 21:33:50'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'as 12/10/2020 21:33:50'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'as 12/10/2020 21:33:50'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'as 12/10/2020 21:33:50'!
PASSED!

!testRun: #PlayableCharacterTest #test11_takingNonPortableObjectsThatDoesntContainPortableObjectsDoesntAddObjectToBackpack stamp: 'as 12/10/2020 21:33:50'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakePortableObjectsThatAreNotInAdjacentPosition stamp: 'as 12/10/2020 21:33:50'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreInAdjacentPositionButNotFacedByPlayableCharacter stamp: 'as 12/10/2020 21:33:50'!
PASSED!

!testRun: #PlayableCharacterTest #test14_canTakePortableObjectsThatAreInAdjacentPositionAndFacedByPlayableCharacter stamp: 'as 12/10/2020 21:33:50'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakePortableObjectsThatAreNotInRoom stamp: 'as 12/10/2020 21:33:50'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canTakePortableObjectContainedInAReachableNonPortableObject stamp: 'as 12/10/2020 21:33:50'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakePortableObjectContainedInATwoLevelCompositionOfReachablePortableObject stamp: 'as 12/10/2020 21:33:50'!
PASSED!

!testRun: #PlayableCharacterTest #test18_canTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCanCarryThem stamp: 'as 12/10/2020 21:33:50'!
FAILURE!

!testRun: #PlayableCharacterTest #test19_cannotTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCannotCarryThemAll stamp: 'as 12/10/2020 21:33:50'!
PASSED!

!testRun: #PlayableCharacterTest #test18_canTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCanCarryThem stamp: 'as 12/10/2020 21:33:50'!
FAILURE!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'as 12/10/2020 21:33:55'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'as 12/10/2020 21:33:55'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'as 12/10/2020 21:33:55'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'as 12/10/2020 21:33:55'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'as 12/10/2020 21:33:55'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'as 12/10/2020 21:33:55'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'as 12/10/2020 21:33:55'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'as 12/10/2020 21:33:55'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'as 12/10/2020 21:33:55'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'as 12/10/2020 21:33:55'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'as 12/10/2020 21:33:55'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'as 12/10/2020 21:33:55'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'as 12/10/2020 21:33:55'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'as 12/10/2020 21:33:55'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'as 12/10/2020 21:33:55'!
PASSED!

!testRun: #RoomTest #test01CannotCreateRoomWithNProportionSmallerThan1 stamp: 'as 12/10/2020 21:34:00'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithMProportionSmallerThan1 stamp: 'as 12/10/2020 21:34:00'!
PASSED!

!testRun: #RoomTest #test03CannotCreateRoomWithNonIntegerProportions stamp: 'as 12/10/2020 21:34:00'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterIsCreatedInAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 21:34:00'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterIsCreatedInAPositionNotOccupiedByAnObject stamp: 'as 12/10/2020 21:34:00'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterCannotMoveForwardsToAPositionOccupiedByAnObject stamp: 'as 12/10/2020 21:34:00'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterCannotMoveBackwardsToAPositionOccupiedByAnObject stamp: 'as 12/10/2020 21:34:00'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterCanOnlyMoveForwardsToAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 21:34:00'!
PASSED!

!testRun: #RoomTest #test09CannotCreateARoomWithObjectsNotInsideTheRoomsProportions stamp: 'as 12/10/2020 21:34:00'!
PASSED!
!Room methodsFor: 'assertions' stamp: 'as 12/10/2020 21:34:12'!
positionOccupiedByObject: aPosition

	 ^ roomObjects includesKey: aPosition 
	! !

!methodRemoval: Room #occupiedByObject: stamp: 'as 12/10/2020 21:34:20'!
occupiedByObject: aPosition

	 ^ roomObjects includesKey: aPosition 
	!
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 21:34:28' prior: 50873549!
isPositionValidForPlayableCharacter: aPosition
	
	^ (self positionIsInsideRoomProportions: aPosition) and: [ (self positionOccupiedByObject: aPosition) not].! !

!testRun: #RoomTest #test01CannotCreateRoomWithNProportionSmallerThan1 stamp: 'as 12/10/2020 21:34:33'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithMProportionSmallerThan1 stamp: 'as 12/10/2020 21:34:33'!
PASSED!

!testRun: #RoomTest #test03CannotCreateRoomWithNonIntegerProportions stamp: 'as 12/10/2020 21:34:33'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterIsCreatedInAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 21:34:33'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterIsCreatedInAPositionNotOccupiedByAnObject stamp: 'as 12/10/2020 21:34:33'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterCannotMoveForwardsToAPositionOccupiedByAnObject stamp: 'as 12/10/2020 21:34:33'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterCannotMoveBackwardsToAPositionOccupiedByAnObject stamp: 'as 12/10/2020 21:34:33'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterCanOnlyMoveForwardsToAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 21:34:33'!
PASSED!

!testRun: #RoomTest #test09CannotCreateARoomWithObjectsNotInsideTheRoomsProportions stamp: 'as 12/10/2020 21:34:33'!
PASSED!
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 21:34:56' prior: 50876923!
takeObject: aPortableObject

	aPortableObject takeFromRoom: self.! !
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 21:36:54'!
positionOf: aPortableObject
	^roomObjects keyAtValue: aPortableObject! !
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 21:37:19' prior: 50876945!
removeObject: aPortableObject
	
	roomObjects removeKey: (self positionOf: aPortableObject) .! !

!testRun: #RoomTest #test01CannotCreateRoomWithNProportionSmallerThan1 stamp: 'as 12/10/2020 21:37:23'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithMProportionSmallerThan1 stamp: 'as 12/10/2020 21:37:23'!
PASSED!

!testRun: #RoomTest #test03CannotCreateRoomWithNonIntegerProportions stamp: 'as 12/10/2020 21:37:23'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterIsCreatedInAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 21:37:23'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterIsCreatedInAPositionNotOccupiedByAnObject stamp: 'as 12/10/2020 21:37:23'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterCannotMoveForwardsToAPositionOccupiedByAnObject stamp: 'as 12/10/2020 21:37:23'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterCannotMoveBackwardsToAPositionOccupiedByAnObject stamp: 'as 12/10/2020 21:37:23'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterCanOnlyMoveForwardsToAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 21:37:23'!
PASSED!

!testRun: #RoomTest #test09CannotCreateARoomWithObjectsNotInsideTheRoomsProportions stamp: 'as 12/10/2020 21:37:23'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'as 12/10/2020 21:37:27'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'as 12/10/2020 21:37:27'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'as 12/10/2020 21:37:27'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'as 12/10/2020 21:37:27'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'as 12/10/2020 21:37:27'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'as 12/10/2020 21:37:27'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'as 12/10/2020 21:37:27'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'as 12/10/2020 21:37:27'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'as 12/10/2020 21:37:28'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'as 12/10/2020 21:37:28'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'as 12/10/2020 21:37:28'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'as 12/10/2020 21:37:28'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'as 12/10/2020 21:37:28'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'as 12/10/2020 21:37:28'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'as 12/10/2020 21:37:28'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'as 12/10/2020 21:37:31'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'as 12/10/2020 21:37:31'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'as 12/10/2020 21:37:31'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'as 12/10/2020 21:37:31'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'as 12/10/2020 21:37:31'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'as 12/10/2020 21:37:31'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'as 12/10/2020 21:37:31'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'as 12/10/2020 21:37:31'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'as 12/10/2020 21:37:31'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'as 12/10/2020 21:37:31'!
PASSED!

!testRun: #PlayableCharacterTest #test11_takingNonPortableObjectsThatDoesntContainPortableObjectsDoesntAddObjectToBackpack stamp: 'as 12/10/2020 21:37:31'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakePortableObjectsThatAreNotInAdjacentPosition stamp: 'as 12/10/2020 21:37:31'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreInAdjacentPositionButNotFacedByPlayableCharacter stamp: 'as 12/10/2020 21:37:31'!
PASSED!

!testRun: #PlayableCharacterTest #test14_canTakePortableObjectsThatAreInAdjacentPositionAndFacedByPlayableCharacter stamp: 'as 12/10/2020 21:37:31'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakePortableObjectsThatAreNotInRoom stamp: 'as 12/10/2020 21:37:31'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canTakePortableObjectContainedInAReachableNonPortableObject stamp: 'as 12/10/2020 21:37:31'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakePortableObjectContainedInATwoLevelCompositionOfReachablePortableObject stamp: 'as 12/10/2020 21:37:31'!
PASSED!

!testRun: #PlayableCharacterTest #test18_canTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCanCarryThem stamp: 'as 12/10/2020 21:37:31'!
FAILURE!

!testRun: #PlayableCharacterTest #test19_cannotTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCannotCarryThemAll stamp: 'as 12/10/2020 21:37:31'!
PASSED!

!testRun: #PlayableCharacterTest #test18_canTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCanCarryThem stamp: 'as 12/10/2020 21:37:31'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 21:38:44'!
objectAtPosition: aPosition
	^(roomObjects at: aPosition ifAbsent: [^ nil])! !
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 21:38:46' prior: 50878521!
objectAtPosition: aPosition
	^(roomObjects at: aPosition ifAbsent: [^nil])! !
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 21:39:12' prior: 50874123!
roomContains: anObject at: aPosition
	
	^self objectAtPosition: aPosition = anObject.! !
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 21:39:19' prior: 50878533!
roomContains: anObject at: aPosition
	
	^ (self objectAtPosition: aPosition )= anObject.! !
!Room methodsFor: 'as yet unclassified' stamp: 'as 12/10/2020 21:39:22' prior: 50878539!
roomContains: anObject at: aPosition
	
	^ (self objectAtPosition: aPosition) = anObject.! !

!testRun: #RoomTest #test01CannotCreateRoomWithNProportionSmallerThan1 stamp: 'as 12/10/2020 21:39:30'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithMProportionSmallerThan1 stamp: 'as 12/10/2020 21:39:30'!
PASSED!

!testRun: #RoomTest #test03CannotCreateRoomWithNonIntegerProportions stamp: 'as 12/10/2020 21:39:30'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterIsCreatedInAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 21:39:30'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterIsCreatedInAPositionNotOccupiedByAnObject stamp: 'as 12/10/2020 21:39:30'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterCannotMoveForwardsToAPositionOccupiedByAnObject stamp: 'as 12/10/2020 21:39:30'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterCannotMoveBackwardsToAPositionOccupiedByAnObject stamp: 'as 12/10/2020 21:39:30'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterCanOnlyMoveForwardsToAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 21:39:30'!
PASSED!

!testRun: #RoomTest #test09CannotCreateARoomWithObjectsNotInsideTheRoomsProportions stamp: 'as 12/10/2020 21:39:30'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'as 12/10/2020 21:39:34'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'as 12/10/2020 21:39:34'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'as 12/10/2020 21:39:34'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'as 12/10/2020 21:39:34'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'as 12/10/2020 21:39:34'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'as 12/10/2020 21:39:34'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'as 12/10/2020 21:39:34'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'as 12/10/2020 21:39:34'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'as 12/10/2020 21:39:34'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'as 12/10/2020 21:39:34'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'as 12/10/2020 21:39:34'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'as 12/10/2020 21:39:34'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'as 12/10/2020 21:39:34'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'as 12/10/2020 21:39:34'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'as 12/10/2020 21:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'as 12/10/2020 21:39:38'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'as 12/10/2020 21:39:38'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'as 12/10/2020 21:39:38'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'as 12/10/2020 21:39:38'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'as 12/10/2020 21:39:38'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'as 12/10/2020 21:39:38'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'as 12/10/2020 21:39:38'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'as 12/10/2020 21:39:38'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'as 12/10/2020 21:39:38'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'as 12/10/2020 21:39:38'!
PASSED!

!testRun: #PlayableCharacterTest #test11_takingNonPortableObjectsThatDoesntContainPortableObjectsDoesntAddObjectToBackpack stamp: 'as 12/10/2020 21:39:38'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakePortableObjectsThatAreNotInAdjacentPosition stamp: 'as 12/10/2020 21:39:38'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreInAdjacentPositionButNotFacedByPlayableCharacter stamp: 'as 12/10/2020 21:39:38'!
PASSED!

!testRun: #PlayableCharacterTest #test14_canTakePortableObjectsThatAreInAdjacentPositionAndFacedByPlayableCharacter stamp: 'as 12/10/2020 21:39:39'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakePortableObjectsThatAreNotInRoom stamp: 'as 12/10/2020 21:39:39'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canTakePortableObjectContainedInAReachableNonPortableObject stamp: 'as 12/10/2020 21:39:39'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakePortableObjectContainedInATwoLevelCompositionOfReachablePortableObject stamp: 'as 12/10/2020 21:39:39'!
PASSED!

!testRun: #PlayableCharacterTest #test18_canTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCanCarryThem stamp: 'as 12/10/2020 21:39:39'!
FAILURE!

!testRun: #PlayableCharacterTest #test19_cannotTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCannotCarryThemAll stamp: 'as 12/10/2020 21:39:39'!
PASSED!

!testRun: #PlayableCharacterTest #test18_canTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCanCarryThem stamp: 'as 12/10/2020 21:39:39'!
FAILURE!
!RoomTest methodsFor: 'test objects' stamp: 'as 12/10/2020 21:44:59'!
emptyRoom

	^Room of: 1.6 for: 10 withObjects: Dictionary new! !
!RoomTest methodsFor: 'tests' stamp: 'as 12/10/2020 21:45:23' prior: 50869873!
test01CannotCreateRoomWithNProportionSmallerThan1
		
	self
		should: [	self emptyRoom ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Room invalidRoomProportionsErrorDescription ]
	! !

!testRun: #RoomTest #test01CannotCreateRoomWithNProportionSmallerThan1 stamp: 'as 12/10/2020 21:45:27'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'as 12/10/2020 21:45:43' prior: 50878733!
test01CannotCreateRoomWithNProportionSmallerThan1
		
	self
		should: [ Room of: 0 for: 10 withObjects: Dictionary new ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Room invalidRoomProportionsErrorDescription ]
	! !

!methodRemoval: RoomTest #emptyRoom stamp: 'as 12/10/2020 21:46:08'!
emptyRoom

	^Room of: 1.6 for: 10 withObjects: Dictionary new!
!PlayableCharacterTest methodsFor: 'test objects' stamp: 'as 12/10/2020 21:47:06'!
key
	
	^NoPointsPortableObject named: 'Key' weighing: 1.! !
!PlayableCharacterTest methodsFor: 'test objects' stamp: 'as 12/10/2020 21:47:34'!
paper
	^NoPointsPortableObject named: 'Paper' weighing: 100.! !
!PlayableCharacterTest methodsFor: 'test objects' stamp: 'as 12/10/2020 21:48:05'!
twoObjectTable
	^NonPortableObject named: 'Table' containing: (OrderedCollection with: self key with: self paper).! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 21:49:24' prior: 50877631!
test19_cannotTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCannotCarryThemAll

	| room objects playableCharacter key table |
	
	"key := NoPointsPortableObject named: 'Key' weighing: 1.
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	table := NonPortableObject named: 'Table' containing: (OrderedCollection with: key with: paper)."
	
	objects := Dictionary new
			at: 2@1 put: self twoObjectTable;
			yourself.
	room := Room of: 10 for: 10 withObjects: objects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: room. 
	
	playableCharacter take: self twoObjectTable.
	
	self deny: (self twoObjectTable contains: self key).
	self assert: (self twoObjectTable contains: self paper).
	self assert: (playableCharacter backpackIncludes: self key).
	self deny: (playableCharacter backpackIncludes: self paper).

	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 21:49:32' prior: 50878780!
test19_cannotTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCannotCarryThemAll

	| room objects playableCharacter |
	
	"key := NoPointsPortableObject named: 'Key' weighing: 1.
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	table := NonPortableObject named: 'Table' containing: (OrderedCollection with: key with: paper)."
	
	objects := Dictionary new
			at: 2@1 put: self twoObjectTable;
			yourself.
	room := Room of: 10 for: 10 withObjects: objects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: room. 
	
	playableCharacter take: self twoObjectTable.
	
	self deny: (self twoObjectTable contains: self key).
	self assert: (self twoObjectTable contains: self paper).
	self assert: (playableCharacter backpackIncludes: self key).
	self deny: (playableCharacter backpackIncludes: self paper).

	! !

!testRun: #PlayableCharacterTest #test19_cannotTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCannotCarryThemAll stamp: 'as 12/10/2020 21:49:35'!
ERROR!

!testRun: #PlayableCharacterTest #test19_cannotTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCannotCarryThemAll stamp: 'as 12/10/2020 21:49:35'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 21:49:24' prior: 50878812!
test19_cannotTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCannotCarryThemAll

	| room objects playableCharacter key table |
	
	"key := NoPointsPortableObject named: 'Key' weighing: 1.
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	table := NonPortableObject named: 'Table' containing: (OrderedCollection with: key with: paper)."
	
	objects := Dictionary new
			at: 2@1 put: self twoObjectTable;
			yourself.
	room := Room of: 10 for: 10 withObjects: objects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: room. 
	
	playableCharacter take: self twoObjectTable.
	
	self deny: (self twoObjectTable contains: self key).
	self assert: (self twoObjectTable contains: self paper).
	self assert: (playableCharacter backpackIncludes: self key).
	self deny: (playableCharacter backpackIncludes: self paper).

	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 21:50:57' prior: 50878854!
test19_cannotTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCannotCarryThemAll

	| room objects playableCharacter key table paper|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	table := NonPortableObject named: 'Table' containing: (OrderedCollection with: key with: paper).
	
	objects := Dictionary new
			at: 2@1 put: self twoObjectTable;
			yourself.
	room := Room of: 10 for: 10 withObjects: objects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: room. 
	
	playableCharacter take: self twoObjectTable.
	
	self deny: (table contains: key).
	self assert: (table contains: paper).
	self assert: (playableCharacter backpackIncludes: key).
	self deny: (playableCharacter backpackIncludes: paper).

	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 21:51:08' prior: 50878886!
test19_cannotTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCannotCarryThemAll

	| room objects playableCharacter key table paper|
	
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	table := NonPortableObject named: 'Table' containing: (OrderedCollection with: key with: paper).
	
	objects := Dictionary new
			at: 2@1 put: table;
			yourself.
	room := Room of: 10 for: 10 withObjects: objects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: room. 
	
	playableCharacter take: table.
	
	self deny: (table contains: key).
	self assert: (table contains: paper).
	self assert: (playableCharacter backpackIncludes: key).
	self deny: (playableCharacter backpackIncludes: paper).

	! !

!testRun: #PlayableCharacterTest #test19_cannotTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCannotCarryThemAll stamp: 'as 12/10/2020 21:51:12'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 21:52:34' prior: 50877666!
test18_canTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCanCarryThem

	| room objects playableCharacter key table paper|
	
	"key := NoPointsPortableObject named: 'Key' weighing: 1.
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	table := NonPortableObject named: 'Table' containing: (OrderedCollection with: key with: paper)."
	objects := Dictionary new
			at: 2@1 put: self twoObjectTable ;
			yourself.
	room := Room of: 10 for: 10 withObjects: objects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: room. 
	
	playableCharacter take: self twoObjectTable .
	
	self deny: (self twoObjectTable contains: self key).
	self deny: (self twoObjectTable contains: self paper).
	self assert: (playableCharacter backpackIncludes: self key).
	self assert: (playableCharacter backpackIncludes: self paper).
	
	"no me dio el tiempo para entender porque falla este test"

	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 21:52:42' prior: 50878951!
test18_canTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCanCarryThem

	| room objects playableCharacter |
	
	"key := NoPointsPortableObject named: 'Key' weighing: 1.
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	table := NonPortableObject named: 'Table' containing: (OrderedCollection with: key with: paper)."
	objects := Dictionary new
			at: 2@1 put: self twoObjectTable ;
			yourself.
	room := Room of: 10 for: 10 withObjects: objects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: room. 
	
	playableCharacter take: self twoObjectTable .
	
	self deny: (self twoObjectTable contains: self key).
	self deny: (self twoObjectTable contains: self paper).
	self assert: (playableCharacter backpackIncludes: self key).
	self assert: (playableCharacter backpackIncludes: self paper).
	
	"no me dio el tiempo para entender porque falla este test"

	! !

!testRun: #PlayableCharacterTest #test18_canTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCanCarryThem stamp: 'as 12/10/2020 21:52:45'!
ERROR!

!testRun: #PlayableCharacterTest #test18_canTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCanCarryThem stamp: 'as 12/10/2020 21:52:45'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 21:54:38' prior: 50878984!
test18_canTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCanCarryThem

	| room objects playableCharacter |
	
	"key := NoPointsPortableObject named: 'Key' weighing: 1.
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	table := NonPortableObject named: 'Table' containing: (OrderedCollection with: key with: paper)."
	
	objects := Dictionary new
			at: 2@1 put: self twoObjectTable ;
			yourself.
	room := Room of: 10 for: 10 withObjects: objects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: room. 
	
	playableCharacter take: self twoObjectTable .
	
	self deny: (self twoObjectTable contains: self key).
	self deny: (self twoObjectTable contains: self paper).
	self assert: (playableCharacter backpackIncludes: self key).
	self assert: (playableCharacter backpackIncludes: self paper).
	
	"no me dio el tiempo para entender porque falla este test, con los objetos creados dentro del test falla agregar ambos objetos
	
	si hubiese tenido tiempo crearia mensajes de creacion para todos los objetos recurrentes de los tests en la categoria test objects
	
	"

	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'as 12/10/2020 21:54:52' prior: 50879027!
test18_canTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCanCarryThem

	| room objects playableCharacter |
	
	"key := NoPointsPortableObject named: 'Key' weighing: 1.
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	table := NonPortableObject named: 'Table' containing: (OrderedCollection with: key with: paper)."
	
	objects := Dictionary new
			at: 2@1 put: self twoObjectTable ;
			yourself.
	room := Room of: 10 for: 10 withObjects: objects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: room. 
	
	playableCharacter take: self twoObjectTable .
	
	self deny: (self twoObjectTable contains: self key).
	self deny: (self twoObjectTable contains: self paper).
	self assert: (playableCharacter backpackIncludes: self key).
	self assert: (playableCharacter backpackIncludes: self paper).
	
	"no me dio el tiempo para entender porque falla este test, con los objetos creados dentro del test falla agregar ambos objetos
	
	si hubiese tenido tiempo crearia mensajes de creacion para todos los objetos recurrentes de los tests en la categoria test objects y sacaria el codigo repetido
	
	"

	! !

!testRun: #RoomTest #test01CannotCreateRoomWithNProportionSmallerThan1 stamp: 'as 12/10/2020 21:55:14'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithMProportionSmallerThan1 stamp: 'as 12/10/2020 21:55:14'!
PASSED!

!testRun: #RoomTest #test03CannotCreateRoomWithNonIntegerProportions stamp: 'as 12/10/2020 21:55:14'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterIsCreatedInAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 21:55:14'!
PASSED!

!testRun: #RoomTest #test05PlayableCharacterIsCreatedInAPositionNotOccupiedByAnObject stamp: 'as 12/10/2020 21:55:14'!
PASSED!

!testRun: #RoomTest #test06PlayableCharacterCannotMoveForwardsToAPositionOccupiedByAnObject stamp: 'as 12/10/2020 21:55:14'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterCannotMoveBackwardsToAPositionOccupiedByAnObject stamp: 'as 12/10/2020 21:55:14'!
PASSED!

!testRun: #RoomTest #test08PlayableCharacterCanOnlyMoveForwardsToAPositionInsideHisRoomProportions stamp: 'as 12/10/2020 21:55:14'!
PASSED!

!testRun: #RoomTest #test09CannotCreateARoomWithObjectsNotInsideTheRoomsProportions stamp: 'as 12/10/2020 21:55:14'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'as 12/10/2020 21:55:18'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'as 12/10/2020 21:55:18'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'as 12/10/2020 21:55:18'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'as 12/10/2020 21:55:18'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'as 12/10/2020 21:55:18'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'as 12/10/2020 21:55:18'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'as 12/10/2020 21:55:18'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'as 12/10/2020 21:55:18'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'as 12/10/2020 21:55:18'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'as 12/10/2020 21:55:18'!
PASSED!

!testRun: #PlayableCharacterTest #test11_takingNonPortableObjectsThatDoesntContainPortableObjectsDoesntAddObjectToBackpack stamp: 'as 12/10/2020 21:55:18'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakePortableObjectsThatAreNotInAdjacentPosition stamp: 'as 12/10/2020 21:55:18'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreInAdjacentPositionButNotFacedByPlayableCharacter stamp: 'as 12/10/2020 21:55:18'!
PASSED!

!testRun: #PlayableCharacterTest #test14_canTakePortableObjectsThatAreInAdjacentPositionAndFacedByPlayableCharacter stamp: 'as 12/10/2020 21:55:19'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakePortableObjectsThatAreNotInRoom stamp: 'as 12/10/2020 21:55:19'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canTakePortableObjectContainedInAReachableNonPortableObject stamp: 'as 12/10/2020 21:55:19'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakePortableObjectContainedInATwoLevelCompositionOfReachablePortableObject stamp: 'as 12/10/2020 21:55:19'!
PASSED!

!testRun: #PlayableCharacterTest #test18_canTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCanCarryThem stamp: 'as 12/10/2020 21:55:19'!
ERROR!

!testRun: #PlayableCharacterTest #test19_cannotTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCannotCarryThemAll stamp: 'as 12/10/2020 21:55:19'!
PASSED!

!testRun: #PlayableCharacterTest #test18_canTakeAllThePortableObjectsContainedInNonPortableObjectIfTheBackpackCanCarryThem stamp: 'as 12/10/2020 21:55:19'!
ERROR!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'as 12/10/2020 21:55:26'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'as 12/10/2020 21:55:26'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'as 12/10/2020 21:55:26'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'as 12/10/2020 21:55:26'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'as 12/10/2020 21:55:26'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'as 12/10/2020 21:55:26'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'as 12/10/2020 21:55:26'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'as 12/10/2020 21:55:26'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'as 12/10/2020 21:55:26'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'as 12/10/2020 21:55:26'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'as 12/10/2020 21:55:26'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'as 12/10/2020 21:55:26'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'as 12/10/2020 21:55:26'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'as 12/10/2020 21:55:26'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'as 12/10/2020 21:55:26'!
PASSED!