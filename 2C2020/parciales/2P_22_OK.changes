----STARTUP---- (10 December 2020 16:59:41) as C:\Users\Chara\Desktop\Facultad\Ingenieria 1\CUIS2doParcial\CuisUniversity-4383.image!


----End fileIn of C:\Users\Chara\Desktop\Facultad\Ingenieria 1\ISW1-2020-2C-2doParcial.st----!

Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'AM 12/10/2020 17:33:59'!
Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #Room stamp: 'AM 12/10/2020 17:34:17'!
Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'AM 12/10/2020 17:34:27'!
TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'AM 12/10/2020 17:42:51'!
Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'tests' stamp: 'AM 12/10/2020 17:42:29'!
test01roomWidthAndHeightMustBeAtLeastOne

	self 
		should: [Room width: 0 height: 1]
		raise: Error
		withMessageText: Room roomDimensionsAreLessThanOneErrorDescription. 
	
	self 
		should: [Room width: 1 height: 0]
		raise: Error
		withMessageText: Room roomDimensionsAreLessThanOneErrorDescription.! !

----End fileIn of C:\Users\Chara\Desktop\Facultad\Ingenieria 1\CUIS2doParcial\Packages\TerseGuide.pck.st----!

!testRun: #RoomTest #test01roomWidthAndHeightMustBeAtLeastOne stamp: 'AM 12/10/2020 17:43:31'!
ERROR!
!Room class methodsFor: 'error descriptions' stamp: 'AM 12/10/2020 17:43:46'!
roomDimensionsAreLessThanOneErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'error descriptions' stamp: 'AM 12/10/2020 17:44:27' prior: 50874141!
roomDimensionsAreLessThanOneErrorDescription
	
	^'Room width and height must be at least 1x1'! !

!testRun: #RoomTest #test01roomWidthAndHeightMustBeAtLeastOne stamp: 'AM 12/10/2020 17:44:31'!
FAILURE!
!RoomTest class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 17:46:19'!
width: aWidth height: aHeight
	
	self error: self! !

!methodRemoval: RoomTest class #width:height: stamp: 'AM 12/10/2020 17:46:37'!
width: aWidth height: aHeight
	
	self error: self!
!Room class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 17:47:02'!
width: aWidth height: aHeight
	
	self error: self roomDimensionsAreLessThanOneErrorDescription.! !

!testRun: #RoomTest #test01roomWidthAndHeightMustBeAtLeastOne stamp: 'AM 12/10/2020 17:47:12'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'AM 12/10/2020 17:48:46'!
test01cantCreateRoomWithWidthOrHeightLessThanOne

	self 
		should: [Room width: 0 height: 1]
		raise: Error
		withMessageText: Room roomDimensionsAreLessThanOneErrorDescription. 
	
	self 
		should: [Room width: 1 height: 0]
		raise: Error
		withMessageText: Room roomDimensionsAreLessThanOneErrorDescription.! !

!methodRemoval: RoomTest #test01roomWidthAndHeightMustBeAtLeastOne stamp: 'AM 12/10/2020 17:48:46'!
test01roomWidthAndHeightMustBeAtLeastOne

	self 
		should: [Room width: 0 height: 1]
		raise: Error
		withMessageText: Room roomDimensionsAreLessThanOneErrorDescription. 
	
	self 
		should: [Room width: 1 height: 0]
		raise: Error
		withMessageText: Room roomDimensionsAreLessThanOneErrorDescription.!
!RoomTest methodsFor: 'tests' stamp: 'AM 12/10/2020 17:49:03'!
test01CantCreateRoomWithWidthOrHeightLessThanOne

	self 
		should: [Room width: 0 height: 1]
		raise: Error
		withMessageText: Room roomDimensionsAreLessThanOneErrorDescription. 
	
	self 
		should: [Room width: 1 height: 0]
		raise: Error
		withMessageText: Room roomDimensionsAreLessThanOneErrorDescription.! !

!methodRemoval: RoomTest #test01cantCreateRoomWithWidthOrHeightLessThanOne stamp: 'AM 12/10/2020 17:49:03'!
test01cantCreateRoomWithWidthOrHeightLessThanOne

	self 
		should: [Room width: 0 height: 1]
		raise: Error
		withMessageText: Room roomDimensionsAreLessThanOneErrorDescription. 
	
	self 
		should: [Room width: 1 height: 0]
		raise: Error
		withMessageText: Room roomDimensionsAreLessThanOneErrorDescription.!
!RoomTest methodsFor: 'tests' stamp: 'AM 12/10/2020 17:50:25'!
test02CantCreateRoomWithNonIntegerWidthOrHeight

	self 
		should: [Room width: 1.1 height: 1]
		raise: Error
		withMessageText: Room roomDimensionsAreLessThanOneErrorDescription. 
	
	self 
		should: [Room width: 1 height: 1.1]
		raise: Error
		withMessageText: Room roomDimensionsAreLessThanOneErrorDescription.! !
!RoomTest methodsFor: 'tests' stamp: 'AM 12/10/2020 17:51:02' prior: 50874224!
test02CantCreateRoomWithNonIntegerWidthOrHeight

	self 
		should: [Room width: 1.1 height: 1]
		raise: Error
		withMessageText: Room roomDimensionsMustBeIntegerDescription. 
	
	self 
		should: [Room width: 1 height: 1.1]
		raise: Error
		withMessageText: Room roomDimensionsMustBeIntegerDescription.! !

!testRun: #RoomTest #test02CantCreateRoomWithNonIntegerWidthOrHeight stamp: 'AM 12/10/2020 17:51:06'!
ERROR!
!Room class methodsFor: 'error descriptions' stamp: 'AM 12/10/2020 17:51:19'!
roomDimensionsMustBeIntegerDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'error descriptions' stamp: 'AM 12/10/2020 17:52:07' prior: 50874253!
roomDimensionsMustBeIntegerDescription
	
	^'Width and height must be integer'! !

!testRun: #RoomTest #test02CantCreateRoomWithNonIntegerWidthOrHeight stamp: 'AM 12/10/2020 17:52:08'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 17:53:22' prior: 50874165!
width: aWidth height: aHeight
	
	(aWidth > 0 and: aHeight > 0) ifFalse: [self error: self roomDimensionsAreLessThanOneErrorDescription].! !
!Room class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 17:53:34' prior: 50874268!
width: aWidth height: aHeight
	
	(aWidth > 0 and: aHeight > 0) ifFalse: [self error: self roomDimensionsAreLessThanOneErrorDescription].
	self error: self roomDimensionsMustBeIntegerDescription.! !

!testRun: #RoomTest #test02CantCreateRoomWithNonIntegerWidthOrHeight stamp: 'AM 12/10/2020 17:53:40'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'AM 12/10/2020 17:54:56'!
test03NewRoomIsEmpty

	| room |
	
	room := Room width: 1 height: 1.
	
	self assert: Room isEmpty.! !
!RoomTest methodsFor: 'tests' stamp: 'AM 12/10/2020 17:55:05' prior: 50874288!
test03NewRoomIsEmpty

	| room |
	
	room := Room width: 1 height: 1.
	
	self assert: room isEmpty.! !

!testRun: #RoomTest #test03NewRoomIsEmpty stamp: 'AM 12/10/2020 17:55:07'!
ERROR!
!Room class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 17:55:59' prior: 50874276!
width: aWidth height: aHeight
	
	(aWidth > 0 and: aHeight > 0) ifFalse: [self error: self roomDimensionsAreLessThanOneErrorDescription].
	(aWidth isInteger and: aHeight isInteger)ifFalse: [self error: self roomDimensionsMustBeIntegerDescription].! !
!Room class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 17:56:01' prior: 50874303!
width: aWidth height: aHeight
	
	(aWidth > 0 and: aHeight > 0) ifFalse: [self error: self roomDimensionsAreLessThanOneErrorDescription].
	(aWidth isInteger and: aHeight isInteger) ifFalse: [self error: self roomDimensionsMustBeIntegerDescription].! !

!testRun: #RoomTest #test03NewRoomIsEmpty stamp: 'AM 12/10/2020 17:56:07'!
ERROR!

!testRun: #RoomTest #test03NewRoomIsEmpty stamp: 'AM 12/10/2020 17:56:07'!
ERROR!
!Room class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 17:56:35' prior: 50874314!
width: aWidth height: aHeight
	
	(aWidth > 0 and: aHeight > 0) ifFalse: [self error: self roomDimensionsAreLessThanOneErrorDescription].
	(aWidth isInteger and: aHeight isInteger) ifFalse: [self error: self roomDimensionsMustBeIntegerDescription].
	
	^self new.! !

!testRun: #RoomTest #test03NewRoomIsEmpty stamp: 'AM 12/10/2020 17:56:44'!
ERROR!

!testRun: #RoomTest #test03NewRoomIsEmpty stamp: 'AM 12/10/2020 17:56:44'!
ERROR!
!Room methodsFor: 'testing' stamp: 'AM 12/10/2020 17:56:53'!
isEmpty
	self shouldBeImplemented.! !
!Room methodsFor: 'testing' stamp: 'AM 12/10/2020 17:56:58' prior: 50874346!
isEmpty
	
	^true.! !

!testRun: #RoomTest #test03NewRoomIsEmpty stamp: 'AM 12/10/2020 17:56:59'!
PASSED!

!testRun: #RoomTest #test03NewRoomIsEmpty stamp: 'AM 12/10/2020 17:57:02'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'AM 12/10/2020 17:58:39'!
test04CantPlacePlayerAtOutOfBoundsPosition

	| room |
	
	room := Room width: 1 height: 1.
	
	
	
	self assert: room isEmpty.! !
!RoomTest methodsFor: 'test objects' stamp: 'AM 12/10/2020 18:00:28'!
defaultPlayerAt0x0

	^PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North ! !
!RoomTest methodsFor: 'test objects' stamp: 'AM 12/10/2020 18:00:45'!
defaultBackpack

	! !
!RoomTest methodsFor: 'test objects' stamp: 'AM 12/10/2020 18:01:02' prior: 50874371!
defaultBackpack

	^Backpack containingUpTo: 100 limitingPointsTo: 100.! !
!RoomTest methodsFor: 'test objects' stamp: 'AM 12/10/2020 18:01:56'!
defaultPlayerAt1x0

	^PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North ! !
!RoomTest methodsFor: 'test objects' stamp: 'AM 12/10/2020 18:02:01' prior: 50874380!
defaultPlayerAt1x0

	^PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North ! !
!RoomTest methodsFor: 'tests' stamp: 'AM 12/10/2020 18:04:05' prior: 50874358!
test04CantPlacePlayerAtOutOfBoundsPosition

	| room |
	
	room := Room width: 1 height: 1.
	
	self 
		should: [room placePlacePlayer: (self defaultPlayerAt1x0)]
		raise: Error
		withMessageText: Room playerToPlaceIsOutOfBoundsErrorDescription.
	
	self assert: room isEmpty.! !

!testRun: #RoomTest #test04CantPlacePlayerAtOutOfBoundsPosition stamp: 'AM 12/10/2020 18:04:16'!
ERROR!

!testRun: #RoomTest #test04CantPlacePlayerAtOutOfBoundsPosition stamp: 'AM 12/10/2020 18:04:16'!
ERROR!
!Room class methodsFor: 'error descriptions' stamp: 'AM 12/10/2020 18:04:29'!
playerToPlaceIsOutOfBoundsErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'error descriptions' stamp: 'AM 12/10/2020 18:05:27' prior: 50874411!
playerToPlaceIsOutOfBoundsErrorDescription
	
	^'Player to place must be at a postion that is within room bounds'! !

!testRun: #RoomTest #test04CantPlacePlayerAtOutOfBoundsPosition stamp: 'AM 12/10/2020 18:05:28'!
FAILURE!
!Room methodsFor: 'player' stamp: 'AM 12/10/2020 18:06:24'!
placePlayer: aPlayableCharacter

	! !
!Room methodsFor: 'player' stamp: 'AM 12/10/2020 18:06:49' prior: 50874426!
placePlayer: aPlayableCharacter

	self error: self class playerToPlaceIsOutOfBoundsErrorDescription.! !

!testRun: #RoomTest #test04CantPlacePlayerAtOutOfBoundsPosition stamp: 'AM 12/10/2020 18:06:58'!
FAILURE!

!testRun: #RoomTest #test04CantPlacePlayerAtOutOfBoundsPosition stamp: 'AM 12/10/2020 18:06:58'!
FAILURE!
!RoomTest methodsFor: 'tests' stamp: 'AM 12/10/2020 18:07:14' prior: 50874393!
test04CantPlacePlayerAtOutOfBoundsPosition

	| room |
	
	room := Room width: 1 height: 1.
	
	self 
		should: [room placePlayer: (self defaultPlayerAt1x0)]
		raise: Error
		withMessageText: Room playerToPlaceIsOutOfBoundsErrorDescription.
	
	self assert: room isEmpty.! !

!testRun: #RoomTest #test04CantPlacePlayerAtOutOfBoundsPosition stamp: 'AM 12/10/2020 18:07:17'!
PASSED!
!PlayableCharacter methodsFor: 'testing' stamp: 'AM 12/10/2020 18:10:54'!
position

	^position! !

!testRun: #RoomTest #test04CantPlacePlayerAtOutOfBoundsPosition stamp: 'AM 12/10/2020 18:11:03'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'AM 12/10/2020 18:14:44'!
test05PlacedPlayerOccupiesPositionInRoom

	| room |
	
	room := Room width: 1 height: 1.
	room placePlayer: self defaultPlayerAt0x0.
	
	self deny: room isEmpty.
	self assert: (room isOccupiedAt: 0@0).! !

!testRun: #RoomTest #test05PlacedPlayerOccupiesPositionInRoom stamp: 'AM 12/10/2020 18:14:53'!
ERROR!
!Room methodsFor: 'room positions' stamp: 'AM 12/10/2020 18:15:40'!
assertIsWithinBounds: aPosition

	! !
!Room class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 18:16:45' prior: 50874330!
width: aWidth height: aHeight
	
	(aWidth > 0 and: aHeight > 0) ifFalse: [self error: self roomDimensionsAreLessThanOneErrorDescription].
	(aWidth isInteger and: aHeight isInteger) ifFalse: [self error: self roomDimensionsMustBeIntegerDescription].
	
	^self new initializeForWidth: aWidth height: aHeight.! !

1@1 < 2@2!

1@1 < 2@2!

1@1 < 2@2!
!Room class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 18:20:47'!
withDimension: aDimension
	
	(aDimension x > 0 and: aDimension y > 0) ifFalse: [self error: self roomDimensionsAreLessThanOneErrorDescription].
	(aDimension x isInteger and: aDimension y isInteger) ifFalse: [self error: self roomDimensionsMustBeIntegerDescription].
	
	^self new initializeForDimension: aDimension.! !
!RoomTest methodsFor: 'tests' stamp: 'AM 12/10/2020 18:21:29' prior: 50874199!
test01CantCreateRoomWithWidthOrHeightLessThanOne

	self 
		should: [Room withDimension: 0@1]
		raise: Error
		withMessageText: Room roomDimensionsAreLessThanOneErrorDescription. 
	
	self 
		should: [Room withDimension: 1@0]
		raise: Error
		withMessageText: Room roomDimensionsAreLessThanOneErrorDescription.! !
!RoomTest methodsFor: 'tests' stamp: 'AM 12/10/2020 18:21:56' prior: 50874237!
test02CantCreateRoomWithNonIntegerWidthOrHeight

	self 
		should: [Room withDimension: 1.1@1]
		raise: Error
		withMessageText: Room roomDimensionsMustBeIntegerDescription. 
	
	self 
		should: [Room withDimension: 1@1.1]
		raise: Error
		withMessageText: Room roomDimensionsMustBeIntegerDescription.! !

!testRun: #RoomTest #test01CantCreateRoomWithWidthOrHeightLessThanOne stamp: 'AM 12/10/2020 18:21:59'!
PASSED!

!testRun: #RoomTest #test02CantCreateRoomWithNonIntegerWidthOrHeight stamp: 'AM 12/10/2020 18:22:02'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'AM 12/10/2020 18:22:11' prior: 50874294!
test03NewRoomIsEmpty

	| room |
	
	room := Room withDimension: 1@1.
	
	self assert: room isEmpty.! !
!RoomTest methodsFor: 'tests' stamp: 'AM 12/10/2020 18:22:21' prior: 50874443!
test04CantPlacePlayerAtOutOfBoundsPosition

	| room |
	
	room := Room withDimension: 1@1.
	
	self 
		should: [room placePlayer: (self defaultPlayerAt1x0)]
		raise: Error
		withMessageText: Room playerToPlaceIsOutOfBoundsErrorDescription.
	
	self assert: room isEmpty.! !
!RoomTest methodsFor: 'tests' stamp: 'AM 12/10/2020 18:22:31' prior: 50874465!
test05PlacedPlayerOccupiesPositionInRoom

	| room |
	
	room := Room withDimension: 1@1.
	room placePlayer: self defaultPlayerAt0x0.
	
	self deny: room isEmpty.
	self assert: (room isOccupiedAt: 0@0).! !

!methodRemoval: Room class #width:height: stamp: 'AM 12/10/2020 18:22:42'!
width: aWidth height: aHeight
	
	(aWidth > 0 and: aHeight > 0) ifFalse: [self error: self roomDimensionsAreLessThanOneErrorDescription].
	(aWidth isInteger and: aHeight isInteger) ifFalse: [self error: self roomDimensionsMustBeIntegerDescription].
	
	^self new initializeForWidth: aWidth height: aHeight.!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'AM 12/10/2020 18:23:26'!
Object subclass: #Room
	instanceVariableNames: 'dimension'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'initialization' stamp: 'AM 12/10/2020 18:23:24'!
initializeForDimension: aDimension

	dimension := aDimension.! !

1@1 < 2@2!

1 between: 0 and: 2 do: [^'1']!

1 between: 0 and: 2!
!Room methodsFor: 'room positions' stamp: 'AM 12/10/2020 18:28:23' prior: 50874477!
assertIsWithinBounds: aPosition

	(aPosition x between: 0 and: self width) ifFalse: [ self error: self class positionOutOfBounds ]! !
!Room methodsFor: 'room positions' stamp: 'AM 12/10/2020 18:29:11' prior: 50874593!
assertIsWithinBounds: aPosition

	^aPosition x between: 0 and: self width! !
!Room methodsFor: 'room positions' stamp: 'AM 12/10/2020 18:29:20' prior: 50874600!
assertIsWithinBounds: aPosition

	^aPosition x between: 0 and: self width.! !
!Room methodsFor: 'room positions' stamp: 'AM 12/10/2020 18:29:34'!
isWithinBounds: aPosition

	^aPosition x between: 0 and: self width.! !

!methodRemoval: Room #assertIsWithinBounds: stamp: 'AM 12/10/2020 18:29:34'!
assertIsWithinBounds: aPosition

	^aPosition x between: 0 and: self width.!
!Room methodsFor: 'player' stamp: 'AM 12/10/2020 18:31:50' prior: 50874430!
placePlayer: aPlayableCharacter

	aPlayableCharacter isWithinBounds: self.[self error: self class playerToPlaceIsOutOfBoundsErrorDescription].! !
!Room methodsFor: 'player' stamp: 'AM 12/10/2020 18:32:33' prior: 50874621!
placePlayer: aPlayableCharacter

	(aPlayableCharacter isWithinBoundsOf: dimension) ifFalse: [self error: self class playerToPlaceIsOutOfBoundsErrorDescription].! !

!methodRemoval: PlayableCharacter #position stamp: 'AM 12/10/2020 18:33:15'!
position

	^position!
!PlayableCharacter methodsFor: 'testing' stamp: 'AM 12/10/2020 18:34:27'!
isWithinBoundsOf: aRoom

	! !
!Room methodsFor: 'player' stamp: 'AM 12/10/2020 18:34:39' prior: 50874628!
placePlayer: aPlayableCharacter

	(aPlayableCharacter isWithinBoundsOf: self) ifFalse: [self error: self class playerToPlaceIsOutOfBoundsErrorDescription].! !
!PlayableCharacter methodsFor: 'testing' stamp: 'AM 12/10/2020 18:35:07' prior: 50874639!
isWithinBoundsOf: aRoom

	aRoom isWithinBounds: position.! !
!PlayableCharacter methodsFor: 'testing' stamp: 'AM 12/10/2020 18:35:12' prior: 50874651!
isWithinBoundsOf: aRoom

	^aRoom isWithinBounds: position.! !
!Room methodsFor: 'testing' stamp: 'AM 12/10/2020 18:36:00' prior: 50874611!
isWithinBounds: aPosition

	^(aPosition x between: 0 and: self width) and: (aPosition y between: 0 and: self height).! !
!Room methodsFor: 'testing' stamp: 'AM 12/10/2020 18:36:32'!
height
	
	^dimension y.! !
!Room methodsFor: 'testing' stamp: 'AM 12/10/2020 18:36:43'!
width
	
	^dimension x.! !

!testRun: #RoomTest #test01CantCreateRoomWithWidthOrHeightLessThanOne stamp: 'AM 12/10/2020 18:37:24'!
PASSED!

!testRun: #RoomTest #test02CantCreateRoomWithNonIntegerWidthOrHeight stamp: 'AM 12/10/2020 18:37:24'!
PASSED!

!testRun: #RoomTest #test03NewRoomIsEmpty stamp: 'AM 12/10/2020 18:37:24'!
PASSED!

!testRun: #RoomTest #test04CantPlacePlayerAtOutOfBoundsPosition stamp: 'AM 12/10/2020 18:37:24'!
FAILURE!

!testRun: #RoomTest #test05PlacedPlayerOccupiesPositionInRoom stamp: 'AM 12/10/2020 18:37:24'!
FAILURE!

!testRun: #RoomTest #test04CantPlacePlayerAtOutOfBoundsPosition stamp: 'AM 12/10/2020 18:37:28'!
FAILURE!

!testRun: #RoomTest #test04CantPlacePlayerAtOutOfBoundsPosition stamp: 'AM 12/10/2020 18:37:43'!
FAILURE!

!testRun: #RoomTest #test04CantPlacePlayerAtOutOfBoundsPosition stamp: 'AM 12/10/2020 18:37:43'!
FAILURE!

(aPosition x between: 0 and: self width)!

(aPosition y between: 0 and: self height)!

self width!

aPosition y between: 0 and: self height!

self height!
!Room methodsFor: 'testing' stamp: 'AM 12/10/2020 18:40:25' prior: 50874661!
isWithinBounds: aPosition

	^(aPosition x between: 1 and: self width) and: (aPosition y between: 1 and: self height).! !

!testRun: #RoomTest #test01CantCreateRoomWithWidthOrHeightLessThanOne stamp: 'AM 12/10/2020 18:40:29'!
PASSED!

!testRun: #RoomTest #test02CantCreateRoomWithNonIntegerWidthOrHeight stamp: 'AM 12/10/2020 18:40:29'!
PASSED!

!testRun: #RoomTest #test03NewRoomIsEmpty stamp: 'AM 12/10/2020 18:40:29'!
PASSED!

!testRun: #RoomTest #test04CantPlacePlayerAtOutOfBoundsPosition stamp: 'AM 12/10/2020 18:40:29'!
PASSED!

!testRun: #RoomTest #test05PlacedPlayerOccupiesPositionInRoom stamp: 'AM 12/10/2020 18:40:29'!
ERROR!

!testRun: #RoomTest #test05PlacedPlayerOccupiesPositionInRoom stamp: 'AM 12/10/2020 18:40:29'!
ERROR!

!testRun: #RoomTest #test04CantPlacePlayerAtOutOfBoundsPosition stamp: 'AM 12/10/2020 18:40:34'!
PASSED!

!testRun: #RoomTest #test03NewRoomIsEmpty stamp: 'AM 12/10/2020 18:40:38'!
PASSED!

!testRun: #RoomTest #test05PlacedPlayerOccupiesPositionInRoom stamp: 'AM 12/10/2020 18:40:42'!
ERROR!

!testRun: #RoomTest #test05PlacedPlayerOccupiesPositionInRoom stamp: 'AM 12/10/2020 18:40:42'!
ERROR!

!testRun: #RoomTest #test05PlacedPlayerOccupiesPositionInRoom stamp: 'AM 12/10/2020 18:41:02'!
ERROR!
!Room methodsFor: 'testing' stamp: 'AM 12/10/2020 18:42:15' prior: 50874705!
isWithinBounds: aPosition

	^(aPosition x between: 0 andNotInclusive: self width) and: (aPosition y between: 0 andNotInclusive: self height).
	! !

!testRun: #RoomTest #test01CantCreateRoomWithWidthOrHeightLessThanOne stamp: 'AM 12/10/2020 18:42:28'!
PASSED!

!testRun: #RoomTest #test02CantCreateRoomWithNonIntegerWidthOrHeight stamp: 'AM 12/10/2020 18:42:28'!
PASSED!

!testRun: #RoomTest #test03NewRoomIsEmpty stamp: 'AM 12/10/2020 18:42:28'!
PASSED!

!testRun: #RoomTest #test04CantPlacePlayerAtOutOfBoundsPosition stamp: 'AM 12/10/2020 18:42:28'!
FAILURE!

!testRun: #RoomTest #test05PlacedPlayerOccupiesPositionInRoom stamp: 'AM 12/10/2020 18:42:28'!
ERROR!

!testRun: #RoomTest #test04CantPlacePlayerAtOutOfBoundsPosition stamp: 'AM 12/10/2020 18:42:40'!
FAILURE!

!testRun: #RoomTest #test04CantPlacePlayerAtOutOfBoundsPosition stamp: 'AM 12/10/2020 18:42:40'!
FAILURE!
!Room methodsFor: 'testing' stamp: 'AM 12/10/2020 18:43:44' prior: 50874747!
isWithinBounds: aPosition

	^(aPosition x between: 0 and: self width - 1) and: (aPosition y between: 0 and: self height - 1).
	! !

!testRun: #RoomTest #test01CantCreateRoomWithWidthOrHeightLessThanOne stamp: 'AM 12/10/2020 18:43:49'!
PASSED!

!testRun: #RoomTest #test02CantCreateRoomWithNonIntegerWidthOrHeight stamp: 'AM 12/10/2020 18:43:49'!
PASSED!

!testRun: #RoomTest #test03NewRoomIsEmpty stamp: 'AM 12/10/2020 18:43:49'!
PASSED!

!testRun: #RoomTest #test04CantPlacePlayerAtOutOfBoundsPosition stamp: 'AM 12/10/2020 18:43:49'!
PASSED!

!testRun: #RoomTest #test05PlacedPlayerOccupiesPositionInRoom stamp: 'AM 12/10/2020 18:43:49'!
FAILURE!

!testRun: #RoomTest #test05PlacedPlayerOccupiesPositionInRoom stamp: 'AM 12/10/2020 18:43:49'!
FAILURE!
!Room methodsFor: 'testing' stamp: 'AM 12/10/2020 18:44:05'!
isOccupiedAt: aPosition

	! !
!Room methodsFor: 'testing' stamp: 'AM 12/10/2020 18:44:12' prior: 50874803!
isOccupiedAt: aPosition

	^true! !

!testRun: #RoomTest #test01CantCreateRoomWithWidthOrHeightLessThanOne stamp: 'AM 12/10/2020 18:44:16'!
PASSED!

!testRun: #RoomTest #test02CantCreateRoomWithNonIntegerWidthOrHeight stamp: 'AM 12/10/2020 18:44:16'!
PASSED!

!testRun: #RoomTest #test03NewRoomIsEmpty stamp: 'AM 12/10/2020 18:44:16'!
PASSED!

!testRun: #RoomTest #test04CantPlacePlayerAtOutOfBoundsPosition stamp: 'AM 12/10/2020 18:44:16'!
PASSED!

!testRun: #RoomTest #test05PlacedPlayerOccupiesPositionInRoom stamp: 'AM 12/10/2020 18:44:16'!
FAILURE!

!testRun: #RoomTest #test05PlacedPlayerOccupiesPositionInRoom stamp: 'AM 12/10/2020 18:44:16'!
FAILURE!
!Room methodsFor: 'player' stamp: 'AM 12/10/2020 18:47:14' prior: 50874643!
placePlayer: aPlayableCharacter

	(aPlayableCharacter isWithinBoundsOf: self) ifFalse: [self error: self class playerToPlaceIsOutOfBoundsErrorDescription].
	aPlayableCharacter registerPostionIn: self.! !
!Room methodsFor: 'player' stamp: 'AM 12/10/2020 18:47:31' prior: 50874830!
placePlayer: aPlayableCharacter

	(aPlayableCharacter isWithinBoundsOf: self) ifFalse: [self error: self class playerToPlaceIsOutOfBoundsErrorDescription].
	aPlayableCharacter registerPostionIn: self.! !
!PlayableCharacter methodsFor: 'room private' stamp: 'AM 12/10/2020 18:48:46'!
registerPostionIn: aRoom

	aRoom populateAt: position.! !
!PlayableCharacter methodsFor: 'room private' stamp: 'AM 12/10/2020 18:52:31' prior: 50874848!
registerPostionIn: aRoom

	aRoom populateWith: self at: position.! !

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'AM 12/10/2020 18:53:22'!
Object subclass: #Room
	instanceVariableNames: 'dimension objects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'player private' stamp: 'AM 12/10/2020 18:53:20'!
populateWith: aPlayer at: aPosition

	objects at: aPosition put: aPlayer.! !
!Room methodsFor: 'testing' stamp: 'AM 12/10/2020 18:54:51' prior: 50874807!
isOccupiedAt: aPosition

	^objects includesKey: aPosition. ! !

!testRun: #RoomTest #test05PlacedPlayerOccupiesPositionInRoom stamp: 'AM 12/10/2020 18:55:03'!
ERROR!

!testRun: #RoomTest #test05PlacedPlayerOccupiesPositionInRoom stamp: 'AM 12/10/2020 18:55:03'!
ERROR!

!testRun: #RoomTest #test05PlacedPlayerOccupiesPositionInRoom stamp: 'AM 12/10/2020 18:55:06'!
ERROR!

!testRun: #RoomTest #test05PlacedPlayerOccupiesPositionInRoom stamp: 'AM 12/10/2020 18:55:06'!
ERROR!

----SNAPSHOT----(10 December 2020 18:55:11) CuisUniversity-4383.image priorSource: 17207870!

!testRun: #RoomTest #test05PlacedPlayerOccupiesPositionInRoom stamp: 'AM 12/10/2020 18:55:39'!
ERROR!
!Room methodsFor: 'initialization' stamp: 'AM 12/10/2020 18:56:03' prior: 50874586!
initializeForDimension: aDimension

	dimension := aDimension.
	objects := Dictionary new.! !

!testRun: #RoomTest #test05PlacedPlayerOccupiesPositionInRoom stamp: 'AM 12/10/2020 18:56:07'!
FAILURE!

!testRun: #RoomTest #test05PlacedPlayerOccupiesPositionInRoom stamp: 'AM 12/10/2020 18:56:07'!
FAILURE!
!Room methodsFor: 'testing' stamp: 'AM 12/10/2020 18:56:32' prior: 50874350!
isEmpty
	
	^objects isEmpty.! !

!testRun: #RoomTest #test05PlacedPlayerOccupiesPositionInRoom stamp: 'AM 12/10/2020 18:56:37'!
PASSED!

!testRun: #RoomTest #test01CantCreateRoomWithWidthOrHeightLessThanOne stamp: 'AM 12/10/2020 18:56:40'!
PASSED!

!testRun: #RoomTest #test02CantCreateRoomWithNonIntegerWidthOrHeight stamp: 'AM 12/10/2020 18:56:40'!
PASSED!

!testRun: #RoomTest #test03NewRoomIsEmpty stamp: 'AM 12/10/2020 18:56:40'!
PASSED!

!testRun: #RoomTest #test04CantPlacePlayerAtOutOfBoundsPosition stamp: 'AM 12/10/2020 18:56:40'!
PASSED!

!testRun: #RoomTest #test05PlacedPlayerOccupiesPositionInRoom stamp: 'AM 12/10/2020 18:56:40'!
PASSED!
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 19:04:57'!
named: aName using: aBackpack in: aRoom at: aPosition heading: aCardinalPoint 
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading ! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:04:57' prior: 50870539!
test04_rotateLeftWhenHeadingNorthHeadsWest

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack in: room at: 1@2 heading: #North .

	playableCharacter rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #West)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:04:57' prior: 50870592!
test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid

	self
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack in: room at: 1@2 heading: #X ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: PlayableCharacter invalidCardinalPointErrorDescription equals: anError messageText ]! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:04:57' prior: 50870504!
test01_forwardWhenHeadingNorthIncrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack in: room at: 1@2 heading: #North .

	playableCharacter moveForward.

	self assert: (playableCharacter isAt: 1@3 heading: #North)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:04:57' prior: 50870564!
test06_movingWhenHeadingSouthWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack in: room at: 1@2 heading: #South .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@1 heading: #East)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:04:57' prior: 50870550!
test05_movingWhenHeadingEastWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack in: room at: 1@2 heading: #East .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 2@2 heading: #North)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:04:57' prior: 50870516!
test02_backwardWhenHeadingNorthDecrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack in: room at: 1@2 heading: #North .

	playableCharacter moveBackward.

	self assert: (playableCharacter isAt: 1@1 heading: #North)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:04:57' prior: 50870605!
test09_canTakePortableObjects

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack in: room at: 2@2 heading: #West .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:04:57' prior: 50870618!
test10_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| playableCharacter paper key |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack in: room at: 2@2 heading: #West .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:04:57' prior: 50870528!
test03_rotateRightWhenHeadingNorthHeadsEast

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack in: room at: 1@2 heading: #North .

	playableCharacter rotateRight.

	self assert: (playableCharacter isAt: 1@2 heading: #East)! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:04:57' prior: 50874387!
defaultPlayerAt1x0

	^PlayableCharacter named: 'Luigi' using: self defaultBackpack in: room at: 1@0 heading: #North ! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:04:57' prior: 50870578!
test07_movingWhenHeadingWestWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack in: room at: 2@2 heading: #West .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #South)! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:04:57' prior: 50874365!
defaultPlayerAt0x0

	^PlayableCharacter named: 'Luigi' using: self defaultBackpack in: room at: 0@0 heading: #North ! !

!methodRemoval: PlayableCharacter class #named:using:at:heading: stamp: 'AM 12/10/2020 19:04:57'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint 
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:05:58'!
default1x1Room

	^Room withDimension: 1@1.! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AM 12/10/2020 19:06:16' prior: 50874968!
test01_forwardWhenHeadingNorthIncrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack in: self default1x1Room at: 1@2 heading: #North .

	playableCharacter moveForward.

	self assert: (playableCharacter isAt: 1@3 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AM 12/10/2020 19:06:29' prior: 50875011!
test02_backwardWhenHeadingNorthDecrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack in: self default1x1Room at: 1@2 heading: #North .

	playableCharacter moveBackward.

	self assert: (playableCharacter isAt: 1@1 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AM 12/10/2020 19:06:33' prior: 50875063!
test03_rotateRightWhenHeadingNorthHeadsEast

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack in: self default1x1Room at: 1@2 heading: #North .

	playableCharacter rotateRight.

	self assert: (playableCharacter isAt: 1@2 heading: #East)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AM 12/10/2020 19:06:37' prior: 50874941!
test04_rotateLeftWhenHeadingNorthHeadsWest

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack in: self default1x1Room at: 1@2 heading: #North .

	playableCharacter rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #West)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AM 12/10/2020 19:06:41' prior: 50874996!
test05_movingWhenHeadingEastWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack in: self default1x1Room at: 1@2 heading: #East .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 2@2 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AM 12/10/2020 19:06:45' prior: 50874981!
test06_movingWhenHeadingSouthWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack in: self default1x1Room at: 1@2 heading: #South .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@1 heading: #East)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AM 12/10/2020 19:06:49' prior: 50875083!
test07_movingWhenHeadingWestWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack in: self default1x1Room at: 2@2 heading: #West .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #South)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AM 12/10/2020 19:06:53' prior: 50874954!
test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid

	self
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack in: self default1x1Room at: 1@2 heading: #X ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: PlayableCharacter invalidCardinalPointErrorDescription equals: anError messageText ]! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AM 12/10/2020 19:06:56' prior: 50875024!
test09_canTakePortableObjects

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack in: self default1x1Room at: 2@2 heading: #West .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AM 12/10/2020 19:07:00' prior: 50875038!
test10_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| playableCharacter paper key |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack in: self default1x1Room at: 2@2 heading: #West .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:07:27' prior: 50875115!
default1x1Room

	^Room withDimension: 10@10.! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:08:17'!
default10x10Room

	^Room withDimension: 10@10.! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:08:17' prior: 50875146!
test03_rotateRightWhenHeadingNorthHeadsEast

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack in: self default10x10Room at: 1@2 heading: #North .

	playableCharacter rotateRight.

	self assert: (playableCharacter isAt: 1@2 heading: #East)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:08:17' prior: 50875245!
test10_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| playableCharacter paper key |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack in: self default10x10Room at: 2@2 heading: #West .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:08:17' prior: 50875202!
test07_movingWhenHeadingWestWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack in: self default10x10Room at: 2@2 heading: #West .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #South)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:08:17' prior: 50875231!
test09_canTakePortableObjects

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack in: self default10x10Room at: 2@2 heading: #West .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:08:17' prior: 50875172!
test05_movingWhenHeadingEastWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack in: self default10x10Room at: 1@2 heading: #East .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 2@2 heading: #North)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:08:17' prior: 50875159!
test04_rotateLeftWhenHeadingNorthHeadsWest

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack in: self default10x10Room at: 1@2 heading: #North .

	playableCharacter rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #West)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:08:17' prior: 50875187!
test06_movingWhenHeadingSouthWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack in: self default10x10Room at: 1@2 heading: #South .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@1 heading: #East)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:08:17' prior: 50875120!
test01_forwardWhenHeadingNorthIncrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack in: self default10x10Room at: 1@2 heading: #North .

	playableCharacter moveForward.

	self assert: (playableCharacter isAt: 1@3 heading: #North)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:08:17' prior: 50875217!
test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid

	self
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack in: self default10x10Room at: 1@2 heading: #X ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: PlayableCharacter invalidCardinalPointErrorDescription equals: anError messageText ]! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:08:17' prior: 50875133!
test02_backwardWhenHeadingNorthDecrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack in: self default10x10Room at: 1@2 heading: #North .

	playableCharacter moveBackward.

	self assert: (playableCharacter isAt: 1@1 heading: #North)! !

!methodRemoval: PlayableCharacterTest #default1x1Room stamp: 'AM 12/10/2020 19:08:17'!
default1x1Room

	^Room withDimension: 10@10.!
!RoomTest methodsFor: 'test objects' stamp: 'AM 12/10/2020 19:09:14' prior: 50875098!
defaultPlayerAt0x0

	^PlayableCharacter named: 'Luigi' using: self defaultBackpack in: self at: 0@0 heading: #North ! !
!RoomTest methodsFor: 'test objects' stamp: 'AM 12/10/2020 19:09:19' prior: 50875075!
defaultPlayerAt1x0

	^PlayableCharacter named: 'Luigi' using: self defaultBackpack in: self at: 1@0 heading: #North ! !
!RoomTest methodsFor: 'test objects' stamp: 'AM 12/10/2020 19:11:28'!
defaultPlayerAt: aPosition in: aRoom

	^PlayableCharacter named: 'Luigi' using: self defaultBackpack in: aRoom at: aPosition heading: #North ! !

!methodRemoval: RoomTest #defaultPlayerAt1x0 stamp: 'AM 12/10/2020 19:11:33'!
defaultPlayerAt1x0

	^PlayableCharacter named: 'Luigi' using: self defaultBackpack in: self at: 1@0 heading: #North !

!methodRemoval: RoomTest #defaultPlayerAt0x0 stamp: 'AM 12/10/2020 19:11:36'!
defaultPlayerAt0x0

	^PlayableCharacter named: 'Luigi' using: self defaultBackpack in: self at: 0@0 heading: #North !
!RoomTest methodsFor: 'tests' stamp: 'AM 12/10/2020 19:12:11' prior: 50874547!
test04CantPlacePlayerAtOutOfBoundsPosition

	| room |
	
	room := Room withDimension: 1@1.
	
	self 
		should: [room placePlayer: (self defaultPlayerAt: 1@0 in: room)]
		raise: Error
		withMessageText: Room playerToPlaceIsOutOfBoundsErrorDescription.
	
	self assert: room isEmpty.! !
!RoomTest methodsFor: 'tests' stamp: 'AM 12/10/2020 19:12:36' prior: 50874558!
test05PlacedPlayerOccupiesPositionInRoom

	| room |
	
	room := Room withDimension: 1@1.
	room placePlayer: (self defaultPlayerAt: 0@0 in: room).
	
	self deny: room isEmpty.
	self assert: (room isOccupiedAt: 0@0).! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 19:14:40' prior: 50874930!
named: aName using: aBackpack in: aRoom at: aPosition heading: aCardinalPoint 
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	aRoom isWithinBounds: aPosition ifFalse: [self error: self class playerIsOutOfBoundsErrorDescription].
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading ! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'AM 12/10/2020 19:15:46'!
initializeNamed: aName using: aBackpack in: aRoom at: aPosition heading: aMarsRoverHeading 

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading! !
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:15:46' prior: 50875496!
named: aName using: aBackpack in: aRoom at: aPosition heading: aCardinalPoint 
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	aRoom isWithinBounds: aPosition ifFalse: [self error: self class playerIsOutOfBoundsErrorDescription].
	^self new initializeNamed: aName using: aBackpack in: aRoom at: aPosition heading: newHeading ! !

!methodRemoval: PlayableCharacter #initializeNamed:using:at:heading: stamp: 'AM 12/10/2020 19:15:46'!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading 

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading!

!classDefinition: #PlayableCharacter category: 'ISW1-2020-2C-2doParcial' stamp: 'AM 12/10/2020 19:16:02'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacter methodsFor: 'initialization' stamp: 'AM 12/10/2020 19:16:01' prior: 50875510!
initializeNamed: aName using: aBackpack in: aRoom at: aPosition heading: aMarsRoverHeading 

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading.
	room := aRoom.! !
!PlayableCharacterTest methodsFor: 'room tests' stamp: 'AM 12/10/2020 19:19:00'!
test01CantCreatePlayerWithOutOfBoundsPositionForRoomItsIn

	| room |
	
	room := self default1x1Room.
	
	self 
		should: [room placePlayer: (self defaultPlayerAt: 1@0 in: room)]
		raise: Error
		withMessageText: Room playerToPlaceIsOutOfBoundsErrorDescription.
	
	self assert: room isEmpty.! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:19:11'!
default1x1Room

	^Room withDimension: 1@1.! !
!PlayableCharacterTest methodsFor: 'room tests' stamp: 'AM 12/10/2020 19:20:44' prior: 50875561!
test01CantCreatePlayerWithOutOfBoundsPositionForRoomItsIn

	| room |
	
	room := self default1x1Room.
	
	self 
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack in: room at: 1@1 heading: #North]
		raise: Error
		withMessageText: Room playerToPlaceIsOutOfBoundsErrorDescription.
	
	self assert: room isEmpty.! !
!PlayableCharacterTest methodsFor: 'room tests' stamp: 'AM 12/10/2020 19:21:24' prior: 50875578!
test01CantCreatePlayerWithOutOfBoundsPositionForRoomItsIn

	| room |
	
	room := self default1x1Room.
	
	self 
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack in: room at: 1@1 heading: #North]
		raise: Error
		withMessageText: PlayableCharacter playerToPlaceIsOutOfBoundsErrorDescription.
	
	self assert: room isEmpty.! !
!PlayableCharacterTest methodsFor: 'room tests' stamp: 'AM 12/10/2020 19:21:54' prior: 50875592!
test01CantCreatePlayerWithOutOfBoundsPositionForRoomItsIn

	| room |
	
	room := self default1x1Room.
	
	self 
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack in: room at: 1@1 heading: #North]
		raise: Error
		withMessageText: PlayableCharacter playerOutOfBoundsErrorDescription.
	
	self assert: room isEmpty.! !

!testRun: #PlayableCharacterTest #test01CantCreatePlayerWithOutOfBoundsPositionForRoomItsIn stamp: 'AM 12/10/2020 19:22:07'!
ERROR!
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:22:22'!
playerOutOfBoundsErrorDescription
	self shouldBeImplemented.! !
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:23:05' prior: 50875624!
playerOutOfBoundsErrorDescription
	
	^'Player must be between bounds of room its in'! !

!testRun: #PlayableCharacterTest #test01CantCreatePlayerWithOutOfBoundsPositionForRoomItsIn stamp: 'AM 12/10/2020 19:23:06'!
FAILURE!

!testRun: #PlayableCharacterTest #test01CantCreatePlayerWithOutOfBoundsPositionForRoomItsIn stamp: 'AM 12/10/2020 19:23:14'!
FAILURE!
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 19:23:47' prior: 50875520!
named: aName using: aBackpack in: aRoom at: aPosition heading: aCardinalPoint 
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	aRoom isWithinBounds: aPosition ifFalse: [self error: self playerIsOutOfBoundsErrorDescription].
	^self new initializeNamed: aName using: aBackpack in: aRoom at: aPosition heading: newHeading ! !

!testRun: #PlayableCharacterTest #test01CantCreatePlayerWithOutOfBoundsPositionForRoomItsIn stamp: 'AM 12/10/2020 19:23:50'!
FAILURE!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 19:23:50'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 19:23:50'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 19:23:50'!
ERROR!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 19:23:50'!
ERROR!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 19:23:50'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 19:23:50'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 19:23:50'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 19:23:50'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 19:23:50'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 19:23:50'!
ERROR!
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 19:24:02' prior: 50875645!
named: aName using: aBackpack in: aRoom at: aPosition heading: aCardinalPoint 
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	(aRoom isWithinBounds: aPosition) ifFalse: [self error: self playerIsOutOfBoundsErrorDescription].
	^self new initializeNamed: aName using: aBackpack in: aRoom at: aPosition heading: newHeading ! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 19:24:17' prior: 50875702!
named: aName using: aBackpack in: aRoom at: aPosition heading: aCardinalPoint 
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	(aRoom isWithinBounds: aPosition) ifFalse: [self error: self playerOutOfBoundsErrorDescription ].
	^self new initializeNamed: aName using: aBackpack in: aRoom at: aPosition heading: newHeading ! !

!testRun: #PlayableCharacterTest #test01CantCreatePlayerWithOutOfBoundsPositionForRoomItsIn stamp: 'AM 12/10/2020 19:24:32'!
PASSED!

!testRun: #PlayableCharacterTest #test01CantCreatePlayerWithOutOfBoundsPositionForRoomItsIn stamp: 'AM 12/10/2020 19:24:32'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 19:24:32'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 19:24:32'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 19:24:32'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 19:24:32'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 19:24:32'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 19:24:32'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 19:24:32'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 19:24:32'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 19:24:32'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 19:24:32'!
PASSED!

!testRun: #PlayableCharacterTest #test01CantCreatePlayerWithOutOfBoundsPositionForRoomItsIn stamp: 'AM 12/10/2020 19:24:38'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'AM 12/10/2020 19:25:11' prior: 50875485!
test05PlacedPlayerOccupiesPositionInRoom

	| room |
	
	room := Room withDimension: 1@1.
	self defaultPlayerAt: 0@0 in: room.
	
	self deny: room isEmpty.
	self assert: (room isOccupiedAt: 0@0).! !

!methodRemoval: RoomTest #test04CantPlacePlayerAtOutOfBoundsPosition stamp: 'AM 12/10/2020 19:25:27'!
test04CantPlacePlayerAtOutOfBoundsPosition

	| room |
	
	room := Room withDimension: 1@1.
	
	self 
		should: [room placePlayer: (self defaultPlayerAt: 1@0 in: room)]
		raise: Error
		withMessageText: Room playerToPlaceIsOutOfBoundsErrorDescription.
	
	self assert: room isEmpty.!
!RoomTest methodsFor: 'tests' stamp: 'AM 12/10/2020 19:25:33'!
test04PlacedPlayerOccupiesPositionInRoom

	| room |
	
	room := Room withDimension: 1@1.
	self defaultPlayerAt: 0@0 in: room.
	
	self deny: room isEmpty.
	self assert: (room isOccupiedAt: 0@0).! !

!methodRemoval: RoomTest #test05PlacedPlayerOccupiesPositionInRoom stamp: 'AM 12/10/2020 19:25:33'!
test05PlacedPlayerOccupiesPositionInRoom

	| room |
	
	room := Room withDimension: 1@1.
	self defaultPlayerAt: 0@0 in: room.
	
	self deny: room isEmpty.
	self assert: (room isOccupiedAt: 0@0).!

!testRun: #RoomTest #test01CantCreateRoomWithWidthOrHeightLessThanOne stamp: 'AM 12/10/2020 19:25:44'!
PASSED!

!testRun: #RoomTest #test02CantCreateRoomWithNonIntegerWidthOrHeight stamp: 'AM 12/10/2020 19:25:44'!
PASSED!

!testRun: #RoomTest #test03NewRoomIsEmpty stamp: 'AM 12/10/2020 19:25:44'!
PASSED!

!testRun: #RoomTest #test04PlacedPlayerOccupiesPositionInRoom stamp: 'AM 12/10/2020 19:25:44'!
FAILURE!

!testRun: #RoomTest #test04PlacedPlayerOccupiesPositionInRoom stamp: 'AM 12/10/2020 19:25:44'!
FAILURE!

!testRun: #RoomTest #test04PlacedPlayerOccupiesPositionInRoom stamp: 'AM 12/10/2020 19:25:51'!
FAILURE!

!testRun: #RoomTest #test04PlacedPlayerOccupiesPositionInRoom stamp: 'AM 12/10/2020 19:25:51'!
FAILURE!
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 19:27:10' prior: 50875717!
named: aName using: aBackpack in: aRoom at: aPosition heading: aCardinalPoint 
	
	| newHeading |

	(aRoom isWithinBounds: aPosition) ifFalse: [self error: self playerOutOfBoundsErrorDescription ]. 
	
	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack in: aRoom at: aPosition heading: newHeading ! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'AM 12/10/2020 19:27:57' prior: 50875552!
initializeNamed: aName using: aBackpack in: aRoom at: aPosition heading: aMarsRoverHeading 
 
	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading.
	room := aRoom.
	aRoom populateWith: self at: position. ! !

!methodRemoval: PlayableCharacter #registerPostionIn: stamp: 'AM 12/10/2020 19:28:46'!
registerPostionIn: aRoom

	aRoom populateWith: self at: position.!

!methodRemoval: PlayableCharacter #isWithinBoundsOf: stamp: 'AM 12/10/2020 19:28:59'!
isWithinBoundsOf: aRoom

	^aRoom isWithinBounds: position.!
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 19:30:30' prior: 50875845!
named: aName using: aBackpack in: aRoom at: aPosition heading: aCardinalPoint 
	
	| newHeading |

	(aRoom isWithinBounds: aPosition) ifFalse: [self error: self playerOutOfBoundsErrorDescription ]. 
	
	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack in: aRoom at: aPosition heading: newHeading ! !
!RoomTest methodsFor: 'player tests' stamp: 'AM 12/10/2020 19:31:36'!
test01PlacedPlayerOccupiesPositionInRoom

	| room |
	
	room := Room withDimension: 1@1.
	self defaultPlayerAt: 0@0 in: room.
	
	self deny: room isEmpty.
	self assert: (room isOccupiedAt: 0@0).! !

!methodRemoval: RoomTest #test04PlacedPlayerOccupiesPositionInRoom stamp: 'AM 12/10/2020 19:31:36'!
test04PlacedPlayerOccupiesPositionInRoom

	| room |
	
	room := Room withDimension: 1@1.
	self defaultPlayerAt: 0@0 in: room.
	
	self deny: room isEmpty.
	self assert: (room isOccupiedAt: 0@0).!
!RoomTest methodsFor: 'portable object tests' stamp: 'AM 12/10/2020 19:33:09'!
test01CantPlaceStageObjectAtOutOfBoundsPosition

	! !
!PlayableCharacterTest methodsFor: 'room tests' stamp: 'AM 12/10/2020 19:34:02' prior: 50875606!
test01CantCreatePlayerWithOutOfBoundsPositionForRoomItsIn

	| room |
	
	room := self default1x1Room.
	
	self 
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack in: room at: 1@1 heading: #North]
		raise: Error
		withMessageText: Room playerOutOfBoundsErrorDescription.
	
	self assert: room isEmpty.! !
!PlayableCharacterTest methodsFor: 'room tests' stamp: 'AM 12/10/2020 19:34:23' prior: 50875917!
test01CantCreatePlayerWithOutOfBoundsPositionForRoomItsIn

	| room |
	
	room := self default1x1Room.
	
	self 
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack in: room at: 1@1 heading: #North]
		raise: Error
		withMessageText: Room playerToPlaceIsOutOfBoundsErrorDescription.
	
	self assert: room isEmpty.! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'AM 12/10/2020 19:34:41' prior: 50875859!
initializeNamed: aName using: aBackpack in: aRoom at: aPosition heading: aMarsRoverHeading 
 
	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading.
	room := aRoom populateWith: self at: position. ! !
!Room methodsFor: 'player private' stamp: 'AM 12/10/2020 19:35:53' prior: 50874865!
populateWith: anObject at: aPosition
	
	
	objects at: aPosition put: anObject.! !
!Room class methodsFor: 'error descriptions' stamp: 'AM 12/10/2020 19:36:23'!
objectToPlaceIsOutOfBoundsErrorDescription
	
	^'Player to place must be at a postion that is within room bounds'! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:36:23' prior: 50875931!
test01CantCreatePlayerWithOutOfBoundsPositionForRoomItsIn

	| room |
	
	room := self default1x1Room.
	
	self 
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack in: room at: 1@1 heading: #North]
		raise: Error
		withMessageText: Room objectToPlaceIsOutOfBoundsErrorDescription.
	
	self assert: room isEmpty.! !
!Room methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:36:23' prior: 50874839!
placePlayer: aPlayableCharacter

	(aPlayableCharacter isWithinBoundsOf: self) ifFalse: [self error: self class objectToPlaceIsOutOfBoundsErrorDescription].
	aPlayableCharacter registerPostionIn: self.! !

!methodRemoval: Room class #playerToPlaceIsOutOfBoundsErrorDescription stamp: 'AM 12/10/2020 19:36:23'!
playerToPlaceIsOutOfBoundsErrorDescription
	
	^'Player to place must be at a postion that is within room bounds'!
!Room class methodsFor: 'error descriptions' stamp: 'AM 12/10/2020 19:36:33' prior: 50875961!
objectToPlaceIsOutOfBoundsErrorDescription
	
	^'The object to place must be at a postion that is within room bounds'! !

!testRun: #PlayableCharacterTest #test01CantCreatePlayerWithOutOfBoundsPositionForRoomItsIn stamp: 'AM 12/10/2020 19:36:43'!
FAILURE!

!testRun: #PlayableCharacterTest #test01CantCreatePlayerWithOutOfBoundsPositionForRoomItsIn stamp: 'AM 12/10/2020 19:36:43'!
FAILURE!

!methodRemoval: PlayableCharacter class #playerOutOfBoundsErrorDescription stamp: 'AM 12/10/2020 19:37:17'!
playerOutOfBoundsErrorDescription
	
	^'Player must be between bounds of room its in'!
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'AM 12/10/2020 19:37:28' prior: 50875880!
named: aName using: aBackpack in: aRoom at: aPosition heading: aCardinalPoint 
	
	| newHeading |
	
	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack in: aRoom at: aPosition heading: newHeading ! !

!testRun: #PlayableCharacterTest #test01CantCreatePlayerWithOutOfBoundsPositionForRoomItsIn stamp: 'AM 12/10/2020 19:37:49'!
FAILURE!

!testRun: #PlayableCharacterTest #test01CantCreatePlayerWithOutOfBoundsPositionForRoomItsIn stamp: 'AM 12/10/2020 19:37:49'!
FAILURE!
!Room methodsFor: 'player private' stamp: 'AM 12/10/2020 19:38:53' prior: 50875956!
populateWith: anObject at: aPosition
	
	(self isWithinBounds: aPosition) ifFalse: [self error: self class objectToPlaceIsOutOfBoundsErrorDescription ].
	objects at: aPosition put: anObject.! !

!testRun: #PlayableCharacterTest #test01CantCreatePlayerWithOutOfBoundsPositionForRoomItsIn stamp: 'AM 12/10/2020 19:38:56'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 19:38:56'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 19:38:56'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 19:38:56'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 19:38:56'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 19:38:56'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 19:38:56'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 19:38:56'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 19:38:56'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 19:38:56'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 19:38:56'!
PASSED!

!testRun: #RoomTest #test01CantCreateRoomWithWidthOrHeightLessThanOne stamp: 'AM 12/10/2020 19:39:00'!
PASSED!

!testRun: #RoomTest #test01CantPlaceStageObjectAtOutOfBoundsPosition stamp: 'AM 12/10/2020 19:39:00'!
PASSED!

!testRun: #RoomTest #test01PlacedPlayerOccupiesPositionInRoom stamp: 'AM 12/10/2020 19:39:00'!
PASSED!

!testRun: #RoomTest #test02CantCreateRoomWithNonIntegerWidthOrHeight stamp: 'AM 12/10/2020 19:39:00'!
PASSED!

!testRun: #RoomTest #test03NewRoomIsEmpty stamp: 'AM 12/10/2020 19:39:00'!
PASSED!

!methodRemoval: RoomTest #test01CantPlaceStageObjectAtOutOfBoundsPosition stamp: 'AM 12/10/2020 19:39:54'!
test01CantPlaceStageObjectAtOutOfBoundsPosition

	!
!RoomTest methodsFor: 'object tests' stamp: 'AM 12/10/2020 19:40:27'!
test01PlacedObjectOccupiesPositionInRoom

	! !
!RoomTest methodsFor: 'object tests' stamp: 'AM 12/10/2020 19:41:30' prior: 50876112!
test01PlacedObjectOccupiesPositionInRoom

	| room |
	
	room := Room withDimension: 1@1.
	
	self deny: room isEmpty.
	self assert: (room isOccupiedAt: 0@0).! !
!RoomTest methodsFor: 'test objects' stamp: 'AM 12/10/2020 19:42:26'!
defaultPortableObject

	^PointsPortableObject named: 'left-handed hammer' weighing: 40 worth: 5! !
!RoomTest methodsFor: 'object tests' stamp: 'AM 12/10/2020 19:43:01' prior: 50876117!
test01PlacedObjectOccupiesPositionInRoom

	| room |
	
	room := Room withDimension: 1@1.
	room populateWith: self defaultPortableObject at: 0@0.
	self deny: room isEmpty.
	self assert: (room isOccupiedAt: 0@0).! !
!RoomTest methodsFor: 'object tests' stamp: 'AM 12/10/2020 19:43:05' prior: 50876131!
test01PlacedObjectOccupiesPositionInRoom

	| room |
	
	room := Room withDimension: 1@1.
	room populateWith: self defaultPortableObject at: 0@0.
	
	self deny: room isEmpty.
	self assert: (room isOccupiedAt: 0@0).! !
!RoomTest methodsFor: 'object tests' stamp: 'AM 12/10/2020 19:43:12' prior: 50876141!
test01PlacedObjectOccupiesPositionInRoom

	| room |
	
	room := Room withDimension: 1@1.
	
	room populateWith: self defaultPortableObject at: 0@0.
	
	self deny: room isEmpty.
	self assert: (room isOccupiedAt: 0@0).! !
!RoomTest methodsFor: 'object tests' stamp: 'AM 12/10/2020 19:43:14' prior: 50876151!
test01PlacedObjectOccupiesPositionInRoom

	| room |
	room := Room withDimension: 1@1.
	
	room populateWith: self defaultPortableObject at: 0@0.
	
	self deny: room isEmpty.
	self assert: (room isOccupiedAt: 0@0).! !
!RoomTest methodsFor: 'object tests' stamp: 'AM 12/10/2020 19:43:17' prior: 50876161!
test01PlacedObjectOccupiesPositionInRoom

	| room |
	
	room := Room withDimension: 1@1.
	
	room populateWith: self defaultPortableObject at: 0@0.
	
	self deny: room isEmpty.
	self assert: (room isOccupiedAt: 0@0).! !

!testRun: #RoomTest #test01PlacedObjectOccupiesPositionInRoom stamp: 'AM 12/10/2020 19:43:20'!
PASSED!

!testRun: #RoomTest #test01PlacedObjectOccupiesPositionInRoom stamp: 'AM 12/10/2020 19:44:05'!
PASSED!

!testRun: #RoomTest #test01PlacedObjectOccupiesPositionInRoom stamp: 'AM 12/10/2020 19:44:08'!
PASSED!

!testRun: #RoomTest #test01PlacedObjectOccupiesPositionInRoom stamp: 'AM 12/10/2020 19:44:24'!
PASSED!
!RoomTest methodsFor: 'object tests' stamp: 'AM 12/10/2020 19:45:03'!
test02CantPlaceObjectAtOutOfBoundsPosition
	| room |
	
	room := Room withDimension: 1@1.
	
	room populateWith: self defaultPortableObject at: 0@0.
	
	self assert: room isEmpty.! !
!RoomTest methodsFor: 'object tests' stamp: 'AM 12/10/2020 19:46:02' prior: 50876193!
test02CantPlaceObjectAtOutOfBoundsPosition

	| room |
	
	room := Room withDimension: 1@1.
	
	self
		should: [room populateWith: self defaultPortableObject at: 0@0]
		raise: Error
		withMessageText: Room objectToPlaceIsOutOfBoundsErrorDescription.
	
	self assert: room isEmpty.! !

!testRun: #RoomTest #test02CantPlaceObjectAtOutOfBoundsPosition stamp: 'AM 12/10/2020 19:46:04'!
FAILURE!

!testRun: #RoomTest #test02CantPlaceObjectAtOutOfBoundsPosition stamp: 'AM 12/10/2020 19:46:04'!
FAILURE!
!RoomTest methodsFor: 'object tests' stamp: 'AM 12/10/2020 19:46:24' prior: 50876202!
test02CantPlaceObjectAtOutOfBoundsPosition

	| room |
	
	room := Room withDimension: 1@1.
	
	self
		should: [room populateWith: self defaultPortableObject at: 1@0]
		raise: Error
		withMessageText: Room objectToPlaceIsOutOfBoundsErrorDescription.
	
	self assert: room isEmpty.! !

!testRun: #RoomTest #test01CantCreateRoomWithWidthOrHeightLessThanOne stamp: 'AM 12/10/2020 19:46:26'!
PASSED!

!testRun: #RoomTest #test01PlacedObjectOccupiesPositionInRoom stamp: 'AM 12/10/2020 19:46:26'!
PASSED!

!testRun: #RoomTest #test01PlacedPlayerOccupiesPositionInRoom stamp: 'AM 12/10/2020 19:46:26'!
PASSED!

!testRun: #RoomTest #test02CantCreateRoomWithNonIntegerWidthOrHeight stamp: 'AM 12/10/2020 19:46:26'!
PASSED!

!testRun: #RoomTest #test02CantPlaceObjectAtOutOfBoundsPosition stamp: 'AM 12/10/2020 19:46:26'!
PASSED!

!testRun: #RoomTest #test03NewRoomIsEmpty stamp: 'AM 12/10/2020 19:46:26'!
PASSED!
!PlayableCharacterTest methodsFor: 'room tests' stamp: 'AM 12/10/2020 19:48:03'!
test02CantCreatePlayerInRoomWithPositionAlreadyOccupied

	| room |
	
	room := self default1x1Room.
	
	
	self 
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack in: room at: 0@0 heading: #North]
		raise: Error
		withMessageText: Room objectToPlaceIsOutOfBoundsErrorDescription.
	
	self assert: room isEmpty.! !
!PlayableCharacterTest methodsFor: 'test objects' stamp: 'AM 12/10/2020 19:48:56'!
defaultPortableObject

	^PointsPortableObject named: 'left-handed hammer' weighing: 40 worth: 5! !
!PlayableCharacterTest methodsFor: 'room tests' stamp: 'AM 12/10/2020 19:49:27' prior: 50876252!
test02CantCreatePlayerInRoomWithPositionAlreadyOccupied

	| room |
	
	room := self default1x1Room.
	room populateWith: self defaultPortableObject at: 0@1. 
	
	self 
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack in: room at: 0@0 heading: #North]
		raise: Error
		withMessageText: Room objectToPlaceIsOutOfBoundsErrorDescription.
	
	self assert: room isEmpty.! !
!PlayableCharacterTest methodsFor: 'room tests' stamp: 'AM 12/10/2020 19:49:50' prior: 50876272!
test02CantCreatePlayerInRoomWithPositionAlreadyOccupied

	| room |
	
	room := self default1x1Room.
	room populateWith: self defaultPortableObject at: 0@1. 
	
	self 
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack in: room at: 0@0 heading: #North]
		raise: Error
		withMessageText: Room placePositionAlreadyOccupiedErrorDescription.
	
	self assert: room isEmpty.! !
!Room class methodsFor: 'error descriptions' stamp: 'AM 12/10/2020 19:50:16'!
placePositionAlreadyOccupiedErrorDescription

	^'Place position must be empty'! !
!Room methodsFor: 'object placing' stamp: 'AM 12/10/2020 19:51:07' prior: 50876040!
populateWith: anObject at: aPosition
	
	(self isWithinBounds: aPosition) ifFalse: [self error: self class objectToPlaceIsOutOfBoundsErrorDescription ].
	(self isOccupiedAt: aPosition) ifTrue: [ self error: self class placePositionAlreadyOccupiedErrorDescription ].
	objects at: aPosition put: anObject.! !

!testRun: #PlayableCharacterTest #test02CantCreatePlayerInRoomWithPositionAlreadyOccupied stamp: 'AM 12/10/2020 19:51:15'!
ERROR!

!testRun: #PlayableCharacterTest #test02CantCreatePlayerInRoomWithPositionAlreadyOccupied stamp: 'AM 12/10/2020 19:51:15'!
ERROR!
!PlayableCharacterTest methodsFor: 'room tests' stamp: 'AM 12/10/2020 19:51:27' prior: 50876288!
test02CantCreatePlayerInRoomWithPositionAlreadyOccupied

	| room |
	
	room := self default1x1Room.
	room populateWith: self defaultPortableObject at: 0@0. 
	
	self 
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack in: room at: 0@0 heading: #North]
		raise: Error
		withMessageText: Room placePositionAlreadyOccupiedErrorDescription.
	
	self assert: room isEmpty.! !

!testRun: #PlayableCharacterTest #test02CantCreatePlayerInRoomWithPositionAlreadyOccupied stamp: 'AM 12/10/2020 19:51:30'!
FAILURE!

!testRun: #PlayableCharacterTest #test02CantCreatePlayerInRoomWithPositionAlreadyOccupied stamp: 'AM 12/10/2020 19:51:30'!
FAILURE!
!PlayableCharacterTest methodsFor: 'room tests' stamp: 'AM 12/10/2020 19:51:39' prior: 50876330!
test02CantCreatePlayerInRoomWithPositionAlreadyOccupied

	| room |
	
	room := self default1x1Room.
	room populateWith: self defaultPortableObject at: 0@0. 
	
	self 
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack in: room at: 0@0 heading: #North]
		raise: Error
		withMessageText: Room placePositionAlreadyOccupiedErrorDescription.
	
! !

!testRun: #PlayableCharacterTest #test02CantCreatePlayerInRoomWithPositionAlreadyOccupied stamp: 'AM 12/10/2020 19:51:41'!
PASSED!

!testRun: #PlayableCharacterTest #test01CantCreatePlayerWithOutOfBoundsPositionForRoomItsIn stamp: 'AM 12/10/2020 19:51:45'!
PASSED!

!testRun: #PlayableCharacterTest #test02CantCreatePlayerInRoomWithPositionAlreadyOccupied stamp: 'AM 12/10/2020 19:51:45'!
PASSED!
!RoomTest methodsFor: 'object tests' stamp: 'AM 12/10/2020 19:52:15'!
test02CantPlaceObjectAtAnOccupiedPosition

	| room |
	
	room := Room withDimension: 1@1.
	
	self
		should: [room populateWith: self defaultPortableObject at: 1@0]
		raise: Error
		withMessageText: Room objectToPlaceIsOutOfBoundsErrorDescription.
	
	self assert: room isEmpty.! !
!RoomTest methodsFor: 'object tests' stamp: 'AM 12/10/2020 19:52:19'!
test03CantPlaceObjectAtAnOccupiedPosition

	| room |
	
	room := Room withDimension: 1@1.
	
	self
		should: [room populateWith: self defaultPortableObject at: 1@0]
		raise: Error
		withMessageText: Room objectToPlaceIsOutOfBoundsErrorDescription.
	
	self assert: room isEmpty.! !

!methodRemoval: RoomTest #test02CantPlaceObjectAtAnOccupiedPosition stamp: 'AM 12/10/2020 19:52:22'!
test02CantPlaceObjectAtAnOccupiedPosition

	| room |
	
	room := Room withDimension: 1@1.
	
	self
		should: [room populateWith: self defaultPortableObject at: 1@0]
		raise: Error
		withMessageText: Room objectToPlaceIsOutOfBoundsErrorDescription.
	
	self assert: room isEmpty.!
!RoomTest methodsFor: 'object tests' stamp: 'AM 12/10/2020 19:52:51' prior: 50876391!
test03CantPlaceObjectAtAnOccupiedPosition

	| room |
	
	room := Room withDimension: 1@1.
	room populateWith: self defaultPortableObject at: 0@0. 
	
	self
		should: [room populateWith: self defaultPortableObject at: 0@0]
		raise: Error
		withMessageText: Room objectToPlaceIsOutOfBoundsErrorDescription.
	
	self assert: room isEmpty.! !

!testRun: #RoomTest #test03CantPlaceObjectAtAnOccupiedPosition stamp: 'AM 12/10/2020 19:52:56'!
FAILURE!

!testRun: #RoomTest #test03CantPlaceObjectAtAnOccupiedPosition stamp: 'AM 12/10/2020 19:52:56'!
FAILURE!
!RoomTest methodsFor: 'object tests' stamp: 'AM 12/10/2020 19:53:06' prior: 50876415!
test03CantPlaceObjectAtAnOccupiedPosition

	| room |
	
	room := Room withDimension: 1@1.
	room populateWith: self defaultPortableObject at: 0@0. 
	
	self
		should: [room populateWith: self defaultPortableObject at: 0@0]
		raise: Error
		withMessageText: Room placePositionAlreadyOccupiedErrorDescription.
	
	self assert: room isEmpty.! !

!testRun: #RoomTest #test03CantPlaceObjectAtAnOccupiedPosition stamp: 'AM 12/10/2020 19:53:08'!
FAILURE!

!testRun: #RoomTest #test03CantPlaceObjectAtAnOccupiedPosition stamp: 'AM 12/10/2020 19:53:08'!
FAILURE!
!RoomTest methodsFor: 'object tests' stamp: 'AM 12/10/2020 19:53:17' prior: 50876435!
test03CantPlaceObjectAtAnOccupiedPosition

	| room |
	
	room := Room withDimension: 1@1.
	room populateWith: self defaultPortableObject at: 0@0. 
	
	self
		should: [room populateWith: self defaultPortableObject at: 0@0]
		raise: Error
		withMessageText: Room placePositionAlreadyOccupiedErrorDescription.
	
! !

!testRun: #RoomTest #test03CantPlaceObjectAtAnOccupiedPosition stamp: 'AM 12/10/2020 19:53:19'!
PASSED!
!PlayableCharacterTest methodsFor: 'room tests' stamp: 'AM 12/10/2020 19:54:38'!
test03PlayerCantMoveOutOfBounds

		
	
	self should: [  ]! !
!PlayableCharacterTest methodsFor: 'room tests' stamp: 'AM 12/10/2020 19:55:14' prior: 50876471!
test03PlayerCantMoveOutOfBounds

		
	
	
	self should: [  ]! !
!PlayableCharacterTest methodsFor: 'test objects' stamp: 'AM 12/10/2020 19:55:57'!
defaultPlayableCharacterIn: aRoom

	^PlayableCharacter named: 'Luigi' using: self defaultBackpack in: aRoom at: 0@0 heading: #North.! !
!PlayableCharacterTest methodsFor: 'room tests' stamp: 'AM 12/10/2020 19:58:27' prior: 50876476!
test03PlayerCantMoveOutOfBounds

	| player |
	
	player := self defaultPlayableCharacterIn: self default1x1Room.
	
	self 
		should: [ player moveForward ]
		raise: Error
		withMessageText: PlayableCharacter movingDestinationIsOutOfBoundsErrorDescription.
		
	self assert: (player isAt: 0@1 heading: #North). ! !
!Room methodsFor: 'object placing' stamp: 'AM 12/10/2020 19:58:47' prior: 50876309!
populateWith: anObject at: aPosition
	
	(self isWithinBounds: aPosition) ifFalse: [self error: self class objectToPlaceIsOutOfBoundsErrorDescription ].
	(self isOccupiedAt: aPosition) ifTrue: [ self error: self class placePositionAlreadyOccupiedErrorDescription ].
	objects at: aPosition put: anObject.
	^self.! !

!testRun: #PlayableCharacterTest #test03PlayerCantMoveOutOfBounds stamp: 'AM 12/10/2020 19:59:01'!
ERROR!
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:59:09'!
movingDestinationIsOutOfBoundsErrorDescription
	self shouldBeImplemented.! !
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 19:59:25' prior: 50876519!
movingDestinationIsOutOfBoundsErrorDescription
	
	^'Player cant move out of room bounds'! !

!testRun: #PlayableCharacterTest #test03PlayerCantMoveOutOfBounds stamp: 'AM 12/10/2020 19:59:26'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'AM 12/10/2020 20:02:02' prior: 50870859!
moveBackward
	
	| moveDestination |
	
	moveDestination := position - heading forwardPoint.
	(room isWithinBounds: moveDestination) ifFalse: [self error: self class movingDestinationIsOutOfBoundsErrorDescription].
	
	position := moveDestination ! !
!PlayableCharacter methodsFor: 'assertions' stamp: 'AM 12/10/2020 20:02:35'!
assertMoveIsBetweenBounds! !

!methodRemoval: PlayableCharacter #assertMoveIsBetweenBounds stamp: 'AM 12/10/2020 20:03:50'!
assertMoveIsBetweenBounds!
!PlayableCharacter methodsFor: 'moving' stamp: 'AM 12/10/2020 20:04:44'!
assertPositionIsBetweenBounds: moveDestination

	^ (room isWithinBounds: moveDestination) ifFalse: [self error: self class movingDestinationIsOutOfBoundsErrorDescription]! !
!PlayableCharacter methodsFor: 'moving' stamp: 'AM 12/10/2020 20:04:44' prior: 50876535!
moveBackward
	
	| moveDestination |
	
	moveDestination := position - heading forwardPoint.
	self assertPositionIsBetweenBounds: moveDestination.
	
	position := moveDestination ! !
!PlayableCharacter methodsFor: 'moving' stamp: 'AM 12/10/2020 20:05:09'!
assertDestinationIsBetweenBounds: moveDestination

	^ (room isWithinBounds: moveDestination) ifFalse: [self error: self class movingDestinationIsOutOfBoundsErrorDescription]! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 20:05:09' prior: 50876562!
moveBackward
	
	| moveDestination |
	
	moveDestination := position - heading forwardPoint.
	self assertDestinationIsBetweenBounds: moveDestination.
	
	position := moveDestination ! !

!methodRemoval: PlayableCharacter #assertPositionIsBetweenBounds: stamp: 'AM 12/10/2020 20:05:09'!
assertPositionIsBetweenBounds: moveDestination

	^ (room isWithinBounds: moveDestination) ifFalse: [self error: self class movingDestinationIsOutOfBoundsErrorDescription]!
!PlayableCharacter methodsFor: 'moving' stamp: 'AM 12/10/2020 20:06:21' prior: 50870864!
moveForward
	
	| moveDestination |
	
	moveDestination :=  position + heading forwardPoint.
	self assertDestinationIsBetweenBounds: moveDestination.
	! !
!PlayableCharacter methodsFor: 'moving' stamp: 'AM 12/10/2020 20:06:31' prior: 50876596!
moveForward
	
	| moveDestination |
	
	moveDestination :=  position + heading forwardPoint.
	self assertDestinationIsBetweenBounds: moveDestination.
	
	position := moveDestination.
	! !

!testRun: #PlayableCharacterTest #test03PlayerCantMoveOutOfBounds stamp: 'AM 12/10/2020 20:06:41'!
FAILURE!

!testRun: #PlayableCharacterTest #test03PlayerCantMoveOutOfBounds stamp: 'AM 12/10/2020 20:06:41'!
FAILURE!
!PlayableCharacterTest methodsFor: 'room tests' stamp: 'AM 12/10/2020 20:06:53' prior: 50876489!
test03PlayerCantMoveOutOfBounds

	| player |
	
	player := self defaultPlayableCharacterIn: self default1x1Room.
	
	self 
		should: [ player moveForward ]
		raise: Error
		withMessageText: PlayableCharacter movingDestinationIsOutOfBoundsErrorDescription.
		
	self assert: (player isAt: 0@0 heading: #North). ! !

!testRun: #PlayableCharacterTest #test03PlayerCantMoveOutOfBounds stamp: 'AM 12/10/2020 20:06:59'!
PASSED!

!methodRemoval: Room #placePlayer: stamp: 'AM 12/10/2020 20:08:07'!
placePlayer: aPlayableCharacter

	(aPlayableCharacter isWithinBoundsOf: self) ifFalse: [self error: self class objectToPlaceIsOutOfBoundsErrorDescription].
	aPlayableCharacter registerPostionIn: self.!
!PlayableCharacter methodsFor: 'initialization' stamp: 'AM 12/10/2020 20:11:00' prior: 50875945!
initializeNamed: aName using: aBackpack in: aRoom at: aPosition heading: aMarsRoverHeading 
 
	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading.
	room := aRoom placePlayer: self at: position. ! !
!Room methodsFor: 'player' stamp: 'AM 12/10/2020 20:11:24'!
placePlayer: aPlayer at: aPosition! !
!Room methodsFor: 'object placing' stamp: 'AM 12/10/2020 20:12:09'!
assertValidPlacingPosition: aPosition

	(self isWithinBounds: aPosition) ifFalse: [self error: self class objectToPlaceIsOutOfBoundsErrorDescription ].
	(self isOccupiedAt: aPosition) ifTrue: [ self error: self class placePositionAlreadyOccupiedErrorDescription ]! !
!Room methodsFor: 'object placing' stamp: 'AM 12/10/2020 20:12:09' prior: 50876502!
populateWith: anObject at: aPosition
	
	self assertValidPlacingPosition: aPosition.
	objects at: aPosition put: anObject.
	^self.! !
!Room methodsFor: 'object placing' stamp: 'AM 12/10/2020 20:12:33'!
placeObject: anObject at: aPosition
	
	self assertValidPlacingPosition: aPosition.
	objects at: aPosition put: anObject.
	^self.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 20:12:33' prior: 50876221!
test02CantPlaceObjectAtOutOfBoundsPosition

	| room |
	
	room := Room withDimension: 1@1.
	
	self
		should: [room placeObject: self defaultPortableObject at: 1@0]
		raise: Error
		withMessageText: Room objectToPlaceIsOutOfBoundsErrorDescription.
	
	self assert: room isEmpty.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 20:12:33' prior: 50876171!
test01PlacedObjectOccupiesPositionInRoom

	| room |
	
	room := Room withDimension: 1@1.
	
	room placeObject: self defaultPortableObject at: 0@0.
	
	self deny: room isEmpty.
	self assert: (room isOccupiedAt: 0@0).! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 20:12:33' prior: 50876455!
test03CantPlaceObjectAtAnOccupiedPosition

	| room |
	
	room := Room withDimension: 1@1.
	room placeObject: self defaultPortableObject at: 0@0. 
	
	self
		should: [room placeObject: self defaultPortableObject at: 0@0]
		raise: Error
		withMessageText: Room placePositionAlreadyOccupiedErrorDescription.
	
! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 20:12:33' prior: 50876354!
test02CantCreatePlayerInRoomWithPositionAlreadyOccupied

	| room |
	
	room := self default1x1Room.
	room placeObject: self defaultPortableObject at: 0@0. 
	
	self 
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack in: room at: 0@0 heading: #North]
		raise: Error
		withMessageText: Room placePositionAlreadyOccupiedErrorDescription.
	
! !

!methodRemoval: Room #populateWith:at: stamp: 'AM 12/10/2020 20:12:33'!
populateWith: anObject at: aPosition
	
	self assertValidPlacingPosition: aPosition.
	objects at: aPosition put: anObject.
	^self.!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'AM 12/10/2020 20:12:56'!
Object subclass: #Room
	instanceVariableNames: 'dimension objects player'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'player' stamp: 'AM 12/10/2020 20:12:54' prior: 50876655!
placePlayer: aPlayer at: aPosition

	
	
	player := aPlayer.
	! !
!Room methodsFor: 'player' stamp: 'AM 12/10/2020 20:13:29' prior: 50876748!
placePlayer: aPlayer at: aPosition

	
	self assertValidPlacingPosition: aPosition.
	objects at: aPosition put: aPlayer.
	player := aPlayer.
	! !
!Room methodsFor: 'player' stamp: 'AM 12/10/2020 20:13:49' prior: 50876753!
placePlayer: aPlayer at: aPosition

	
	self assertValidPlacingPosition: aPosition.
	objects at: aPosition put: aPlayer.
	player := aPlayer.
	^self.
	! !
!Room methodsFor: 'player' stamp: 'AM 12/10/2020 20:14:21' prior: 50876760!
placePlayer: aPlayer at: aPosition

	
	self placeObject: aPlayer at: aPosition.
	player := aPlayer.
	^self.
	! !
!Room methodsFor: 'player' stamp: 'AM 12/10/2020 20:14:25' prior: 50876768!
placePlayer: aPlayer at: aPosition

	self placeObject: aPlayer at: aPosition.
	player := aPlayer.
	^self.
	! !

!testRun: #RoomTest #test01CantCreateRoomWithWidthOrHeightLessThanOne stamp: 'AM 12/10/2020 20:14:36'!
PASSED!

!testRun: #RoomTest #test01PlacedObjectOccupiesPositionInRoom stamp: 'AM 12/10/2020 20:14:36'!
PASSED!

!testRun: #RoomTest #test01PlacedPlayerOccupiesPositionInRoom stamp: 'AM 12/10/2020 20:14:36'!
PASSED!

!testRun: #RoomTest #test02CantCreateRoomWithNonIntegerWidthOrHeight stamp: 'AM 12/10/2020 20:14:36'!
PASSED!

!testRun: #RoomTest #test02CantPlaceObjectAtOutOfBoundsPosition stamp: 'AM 12/10/2020 20:14:36'!
PASSED!

!testRun: #RoomTest #test03CantPlaceObjectAtAnOccupiedPosition stamp: 'AM 12/10/2020 20:14:36'!
PASSED!

!testRun: #RoomTest #test03NewRoomIsEmpty stamp: 'AM 12/10/2020 20:14:36'!
PASSED!

!testRun: #PlayableCharacterTest #test01CantCreatePlayerWithOutOfBoundsPositionForRoomItsIn stamp: 'AM 12/10/2020 20:14:40'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 20:14:40'!
PASSED!

!testRun: #PlayableCharacterTest #test02CantCreatePlayerInRoomWithPositionAlreadyOccupied stamp: 'AM 12/10/2020 20:14:40'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 20:14:40'!
PASSED!

!testRun: #PlayableCharacterTest #test03PlayerCantMoveOutOfBounds stamp: 'AM 12/10/2020 20:14:40'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 20:14:40'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 20:14:40'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 20:14:40'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 20:14:40'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 20:14:40'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 20:14:40'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 20:14:40'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 20:14:40'!
PASSED!
!Room methodsFor: 'player' stamp: 'AM 12/10/2020 20:15:36'!
movePlayerForward
	! !
!PlayableCharacter methodsFor: 'moving' stamp: 'AM 12/10/2020 20:16:17' prior: 50876604!
moveForward
	
	
	room movePlayerForward.
	position :=  position + heading forwardPoint.! !
!PlayableCharacter methodsFor: 'moving' stamp: 'AM 12/10/2020 20:16:41' prior: 50876579!
moveBackward
	
	
	room movePlayerBackwards.
	position := position - heading forwardPoint.
	! !
!Room methodsFor: 'player' stamp: 'AM 12/10/2020 20:16:55'!
movePlayerBackwards
	! !
!PlayableCharacter methodsFor: 'moving' stamp: 'AM 12/10/2020 20:18:59' prior: 50876862!
moveBackward
	
	| moveDestination |
	
	moveDestination := position - heading forwardPoint.
	room movePlayerTo: moveDestination.
	position := moveDestination.
	! !
!PlayableCharacter methodsFor: 'moving' stamp: 'AM 12/10/2020 20:19:11' prior: 50876856!
moveForward
	
	
	| moveDestination |
	
	moveDestination := position + heading forwardPoint.
	room movePlayerTo: moveDestination.
	position := moveDestination.
	! !

!methodRemoval: PlayableCharacter #assertDestinationIsBetweenBounds: stamp: 'AM 12/10/2020 20:19:22'!
assertDestinationIsBetweenBounds: moveDestination

	^ (room isWithinBounds: moveDestination) ifFalse: [self error: self class movingDestinationIsOutOfBoundsErrorDescription]!

!methodRemoval: Room #movePlayerForward stamp: 'AM 12/10/2020 20:19:28'!
movePlayerForward
	!
!Room methodsFor: 'player' stamp: 'AM 12/10/2020 20:19:38'!
movePlayerTo: aPosition

	
	! !

!methodRemoval: Room #movePlayerBackwards stamp: 'AM 12/10/2020 20:19:41'!
movePlayerBackwards
	!
!Room methodsFor: 'player' stamp: 'AM 12/10/2020 20:21:36' prior: 50876898!
movePlayerTo: aPosition
	
	self assertValidPlacingPosition: aPosition.
	
	objects keyAtIdentityValue: player! !

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'AM 12/10/2020 20:21:52'!
Object subclass: #Room
	instanceVariableNames: 'dimension objects player playerPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'player' stamp: 'AM 12/10/2020 20:21:56' prior: 50876774!
placePlayer: aPlayer at: aPosition

	self placeObject: aPlayer at: aPosition.
	playerPosition := aPosition.
	^self.
	! !

Object subclass: #Room
	instanceVariableNames: 'dimension objects playerPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'AM 12/10/2020 20:22:02'!
Object subclass: #Room
	instanceVariableNames: 'dimension objects playerPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'player' stamp: 'AM 12/10/2020 20:23:39' prior: 50876905!
movePlayerTo: aPosition
	
	self assertValidPlacingPosition: aPosition.
	
	objects at: aPosition put: (objects at: playerPosition).
	objects removeKey: playerPosition.
	playerPosition := aPosition.! !

!testRun: #PlayableCharacterTest #test01CantCreatePlayerWithOutOfBoundsPositionForRoomItsIn stamp: 'AM 12/10/2020 20:23:53'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 20:23:53'!
PASSED!

!testRun: #PlayableCharacterTest #test02CantCreatePlayerInRoomWithPositionAlreadyOccupied stamp: 'AM 12/10/2020 20:23:53'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 20:23:53'!
PASSED!

!testRun: #PlayableCharacterTest #test03PlayerCantMoveOutOfBounds stamp: 'AM 12/10/2020 20:23:53'!
FAILURE!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 20:23:53'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 20:23:53'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 20:23:53'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 20:23:53'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 20:23:53'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 20:23:54'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 20:23:54'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 20:23:54'!
PASSED!

!testRun: #PlayableCharacterTest #test03PlayerCantMoveOutOfBounds stamp: 'AM 12/10/2020 20:23:54'!
FAILURE!
!PlayableCharacterTest methodsFor: 'room tests' stamp: 'AM 12/10/2020 20:24:44' prior: 50876620!
test03PlayerCantMoveOutOfBounds

	| player |
	
	player := self defaultPlayableCharacterIn: self default1x1Room.
	
	self 
		should: [ player moveForward ]
		raise: Error
		withMessageText: Room objectToPlaceIsOutOfBoundsErrorDescription.
		
	self assert: (player isAt: 0@0 heading: #North). ! !

!testRun: #PlayableCharacterTest #test03PlayerCantMoveOutOfBounds stamp: 'AM 12/10/2020 20:24:53'!
PASSED!

!testRun: #PlayableCharacterTest #test01CantCreatePlayerWithOutOfBoundsPositionForRoomItsIn stamp: 'AM 12/10/2020 20:24:56'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 20:24:56'!
PASSED!

!testRun: #PlayableCharacterTest #test02CantCreatePlayerInRoomWithPositionAlreadyOccupied stamp: 'AM 12/10/2020 20:24:56'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 20:24:56'!
PASSED!

!testRun: #PlayableCharacterTest #test03PlayerCantMoveOutOfBounds stamp: 'AM 12/10/2020 20:24:56'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 20:24:56'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 20:24:56'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 20:24:56'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 20:24:56'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 20:24:56'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 20:24:56'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 20:24:56'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 20:24:56'!
PASSED!
!RoomTest methodsFor: 'portable objects tests' stamp: 'AM 12/10/2020 20:27:57'!
test01PlayersCantTakeNonExistantObjects

	! !

!methodRemoval: RoomTest #test01PlayersCantTakeNonExistantObjects stamp: 'AM 12/10/2020 20:30:15'!
test01PlayersCantTakeNonExistantObjects

	!
!PlayableCharacterTest methodsFor: 'object tests' stamp: 'AM 12/10/2020 20:30:59'!
test01PlayerCantTakeWhenThereAreNoObjectsInFront

	! !
!PlayableCharacterTest methodsFor: 'object tests' stamp: 'AM 12/10/2020 20:31:51' prior: 50877078!
test01PlayerCantTakeWhenThereAreNoObjectsInFront

	| player |
	
	player := self defaultPlayableCharacterIn: self default1x1Room.
	
	self 
		should: [ player ]! !
!PlayableCharacterTest methodsFor: 'object tests' stamp: 'AM 12/10/2020 20:33:35' prior: 50877083!
test01PlayerCantTakeWhenThereAreNoObjectsInFront

	| player |
	
	player := self defaultPlayableCharacterIn: self default1x1Room.
	
	self 
		should: [ player take ]
		raise: Error
		withMessageText: Room noObjectToTakeErrorDescription.! !

!testRun: #PlayableCharacterTest #test01PlayerCantTakeWhenThereAreNoObjectsInFront stamp: 'AM 12/10/2020 20:33:40'!
ERROR!
!Room class methodsFor: 'error descriptions' stamp: 'AM 12/10/2020 20:33:48'!
noObjectToTakeErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'error descriptions' stamp: 'AM 12/10/2020 20:34:04' prior: 50877106!
noObjectToTakeErrorDescription
	
	^'Space in front of player is empty'! !

!testRun: #PlayableCharacterTest #test01PlayerCantTakeWhenThereAreNoObjectsInFront stamp: 'AM 12/10/2020 20:34:05'!
FAILURE!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'AM 12/10/2020 20:34:18'!
take

	! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'AM 12/10/2020 20:35:07' prior: 50877120!
take

	room playerTakeObject.! !
!Room methodsFor: 'object interaction' stamp: 'AM 12/10/2020 20:35:34'!
playerTakeObject

	! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'AM 12/10/2020 20:36:10' prior: 50877124!
take
	
	| object |
	
	object := room playerTakeObject.! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'AM 12/10/2020 20:36:19' prior: 50877132!
take
	
	| object |
	
	object := room playerTakeObject.
	
	! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'AM 12/10/2020 20:36:30' prior: 50877137!
take
	
	| object |
	
	object := room playerTakeObject.
	
	self take: object.! !
!Room methodsFor: 'object interaction' stamp: 'AM 12/10/2020 20:38:03'!
playerTakeObjectFrom: aPosition

	

	! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'AM 12/10/2020 20:38:29' prior: 50877142!
take
	
	| object |
	
	object := room playerTakeObjectFrom: self .
	
	self take: object.! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'AM 12/10/2020 20:38:56' prior: 50877152!
take
	
	| object |
	
	object := room playerTakeObjectFrom: position + heading forwardPoint .
	
	self take: object.! !
!Room methodsFor: 'object interaction' stamp: 'AM 12/10/2020 20:39:35'!
takeObjectFrom: aPosition

	

	! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 20:39:35' prior: 50877158!
take
	
	| object |
	
	object := room takeObjectFrom: position + heading forwardPoint .
	
	self take: object.! !

!methodRemoval: Room #playerTakeObjectFrom: stamp: 'AM 12/10/2020 20:39:35'!
playerTakeObjectFrom: aPosition

	

	!
!Room methodsFor: 'object interaction' stamp: 'AM 12/10/2020 20:39:44' prior: 50877164!
takeObjectFrom: aPosition

	
	! !
!Room methodsFor: 'object interaction' stamp: 'AM 12/10/2020 20:41:31' prior: 50877179!
takeObjectFrom: aPosition

	
	((self isWithinBounds: aPosition) and: [self isOccupiedAt: aPosition]) ifFalse: [].! !
!Room methodsFor: 'object interaction' stamp: 'AM 12/10/2020 20:42:45' prior: 50877183!
takeObjectFrom: aPosition

	
	(self isOccupiedAt: aPosition) ifFalse: [self error: self class nothingToTakeErrorDescription]! !
!Room class methodsFor: 'error descriptions' stamp: 'AM 12/10/2020 20:43:03'!
nothingToTakeErrorDescription

	^'There is nothing to take'! !

!methodRemoval: Room class #nothingToTakeErrorDescription stamp: 'AM 12/10/2020 20:43:28'!
nothingToTakeErrorDescription

	^'There is nothing to take'!
!Room methodsFor: 'object interaction' stamp: 'AM 12/10/2020 20:44:27' prior: 50877190!
takeObjectFrom: aPosition

	
	(self isOccupiedAt: aPosition) ifFalse: [self error: self class noObjectToTakeErrorDescription].
	^objects at: aPosition.! !

!methodRemoval: Room #playerTakeObject stamp: 'AM 12/10/2020 20:44:44'!
playerTakeObject

	!

!testRun: #PlayableCharacterTest #test01PlayerCantTakeWhenThereAreNoObjectsInFront stamp: 'AM 12/10/2020 20:44:53'!
PASSED!
!PlayableCharacterTest methodsFor: 'object tests' stamp: 'AM 12/10/2020 20:45:51'!
test02TakenObjectIsAddedToBackpack

	| player |
	
	player := self defaultPlayableCharacterIn: self default2x2Room.
	
	self 
		should: [ player take ]
		raise: Error
		withMessageText: Room noObjectToTakeErrorDescription.! !
!PlayableCharacterTest methodsFor: 'test objects' stamp: 'AM 12/10/2020 20:46:08'!
default1x2Room

	^Room withDimension: 1@2.! !
!PlayableCharacterTest methodsFor: 'object tests' stamp: 'AM 12/10/2020 20:47:33' prior: 50877222!
test02TakenObjectIsAddedToBackpack

	| player room |
	
	room := self default1x2Room.
	room placeObject: self defaultPortableObject at: 0@1.
	player := self defaultPlayableCharacterIn: self default1x2Room.
	
	 
	player take ! !
!PlayableCharacterTest methodsFor: 'object tests' stamp: 'AM 12/10/2020 20:47:57' prior: 50877237!
test02TakenObjectIsAddedToBackpack

	| player room |
	
	room := self default1x2Room.
	room placeObject: self defaultPortableObject at: 0@1.
	player := self defaultPlayableCharacterIn: self default1x2Room.
	
	player take.
	
	! !
!PlayableCharacterTest methodsFor: 'object tests' stamp: 'AM 12/10/2020 20:49:41' prior: 50877248!
test02TakenObjectIsAddedToBackpack

	| player room object |
	
	object :=  self defaultPortableObject.
	
	room := self default1x2Room.
	room placeObject: object at: 0@1.
	
	player := self defaultPlayableCharacterIn: self default1x2Room.
	player take.
	
	self assert: (player backpackIncludes: object).! !

!testRun: #PlayableCharacterTest #test02TakenObjectIsAddedToBackpack stamp: 'AM 12/10/2020 20:49:44'!
ERROR!

!testRun: #PlayableCharacterTest #test02TakenObjectIsAddedToBackpack stamp: 'AM 12/10/2020 20:49:44'!
ERROR!

!testRun: #PlayableCharacterTest #test02TakenObjectIsAddedToBackpack stamp: 'AM 12/10/2020 20:50:52'!
ERROR!
!PlayableCharacterTest methodsFor: 'object tests' stamp: 'AM 12/10/2020 20:51:11' prior: 50877259!
test02TakenObjectIsAddedToBackpack

	| player room object |
	
	object :=  self defaultPortableObject.
	
	room := self default1x2Room.
	room placeObject: object at: 0@1.
	
	player := self defaultPlayableCharacterIn: room.
	player take.
	
	self assert: (player backpackIncludes: object).! !

!testRun: #PlayableCharacterTest #test02TakenObjectIsAddedToBackpack stamp: 'AM 12/10/2020 20:51:17'!
PASSED!
!RoomTest methodsFor: 'object tests' stamp: 'AM 12/10/2020 20:51:52'!
test04ObjectTakenByPlayerIsRemoved

	| room |
	
	room := Room withDimension: 1@1.
	room placeObject: self defaultPortableObject at: 0@0. 
	
	self
		should: [room placeObject: self defaultPortableObject at: 0@0]
		raise: Error
		withMessageText: Room placePositionAlreadyOccupiedErrorDescription.
	
! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'AM 12/10/2020 20:52:52' prior: 50877169!
take
	
	| object |
	
	object := room takeObjectFrom: position + heading forwardPoint.
	self take: object.
	room removeObject: object.! !
!Room methodsFor: 'object interaction private' stamp: 'AM 12/10/2020 20:53:42'!
removeObject: anObject

! !
!Room methodsFor: 'object interaction private' stamp: 'AM 12/10/2020 20:55:09' prior: 50877317!
removeObject: anObject

	| objectPosition |
	
	objectPosition := objects keyAtValue: anObject.
	
	objects removeKey: objectPosition.! !
!RoomTest methodsFor: 'object tests' stamp: 'AM 12/10/2020 20:55:54' prior: 50877297!
test04ObjectTakenByPlayerIsRemoved

	| room |
	
	room := Room withDimension: 1@2.
	room placeObject: self defaultPortableObject at: 0@1. 
	
	self
		should: [room placeObject: self defaultPortableObject at: 0@0]
		raise: Error
		withMessageText: Room placePositionAlreadyOccupiedErrorDescription.
	
! !
!RoomTest methodsFor: 'object tests' stamp: 'AM 12/10/2020 20:56:49' prior: 50877328!
test04ObjectTakenByPlayerIsRemoved

	| room |
	
	room := Room withDimension: 1@2.
	room placeObject: self defaultPortableObject at: 0@1. 
	self defaultPlayerAt: 0@0 in: room.
	
	self deny: (room isOccupiedAt: 0@1).
	
! !

!testRun: #RoomTest #test04ObjectTakenByPlayerIsRemoved stamp: 'AM 12/10/2020 20:56:51'!
FAILURE!

!testRun: #RoomTest #test04ObjectTakenByPlayerIsRemoved stamp: 'AM 12/10/2020 20:56:51'!
FAILURE!
!RoomTest methodsFor: 'object tests' stamp: 'AM 12/10/2020 20:57:23' prior: 50877341!
test04ObjectTakenByPlayerIsRemoved

	| room player |
	
	room := Room withDimension: 1@2.
	room placeObject: self defaultPortableObject at: 0@1. 
	
	player := self defaultPlayerAt: 0@0 in: room.
	player take.
	
	self deny: (room isOccupiedAt: 0@1).
	
! !

!testRun: #RoomTest #test04ObjectTakenByPlayerIsRemoved stamp: 'AM 12/10/2020 20:57:26'!
PASSED!

!testRun: #RoomTest #test01CantCreateRoomWithWidthOrHeightLessThanOne stamp: 'AM 12/10/2020 20:57:37'!
PASSED!

!testRun: #RoomTest #test01PlacedObjectOccupiesPositionInRoom stamp: 'AM 12/10/2020 20:57:37'!
PASSED!

!testRun: #RoomTest #test01PlacedPlayerOccupiesPositionInRoom stamp: 'AM 12/10/2020 20:57:37'!
PASSED!

!testRun: #RoomTest #test02CantCreateRoomWithNonIntegerWidthOrHeight stamp: 'AM 12/10/2020 20:57:37'!
PASSED!

!testRun: #RoomTest #test02CantPlaceObjectAtOutOfBoundsPosition stamp: 'AM 12/10/2020 20:57:37'!
PASSED!

!testRun: #RoomTest #test03CantPlaceObjectAtAnOccupiedPosition stamp: 'AM 12/10/2020 20:57:37'!
PASSED!

!testRun: #RoomTest #test03NewRoomIsEmpty stamp: 'AM 12/10/2020 20:57:37'!
PASSED!

!testRun: #RoomTest #test04ObjectTakenByPlayerIsRemoved stamp: 'AM 12/10/2020 20:57:37'!
PASSED!

StageObject subclass: #NonPortableObject
	instanceVariableNames: 'containedObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'AM 12/10/2020 20:58:33'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'containedObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'nil' stamp: 'AM 12/10/2020 20:58:52'!
assertCanAddTo: aBackpack

	! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 20:59:33' prior: 50877410!
assertCanAddTo: aBackpack

	^aBackpack assertCanNonPortableObject: self.! !
!StageObject methodsFor: 'no messages' stamp: 'AM 12/10/2020 21:00:13'!
assertCanAddTo: aBackpack

	self subclassResponsibility.! !
!Backpack methodsFor: 'assertions' stamp: 'AM 12/10/2020 21:01:30'!
assertCanNonPortableObject: aNonPortableObject

	self error: self class! !
!Backpack methodsFor: 'assertions' stamp: 'AM 12/10/2020 21:02:03' prior: 50877424!
assertCanNonPortableObject: aNonPortableObject

	self error: self class nonPortableObectsCantBeTakenErrorDescription.! !
!Backpack class methodsFor: 'error messages' stamp: 'AM 12/10/2020 21:02:33'!
nonPortableObectsCantBeTakenErrorDescription
	
	^'Item can not be taken'! !
!PlayableCharacterTest methodsFor: 'object tests' stamp: 'AM 12/10/2020 21:03:43'!
test03NonPortableObjectsCanNotBeTaken

	| player room object |
	
	object :=  self defaultNonPortableObject.
	
	room := self default1x2Room.
	room placeObject: object at: 0@1.
	
	player := self defaultPlayableCharacterIn: room.
	player take.
	
	self assert: (player backpackIncludes: object).! !
!PlayableCharacterTest methodsFor: 'object tests' stamp: 'AM 12/10/2020 21:04:38' prior: 50877441!
test03NonPortableObjectsCanNotBeTaken

	| player room object |
	
	object :=  self defaultNonPortableObject.
	
	room := self default1x2Room.
	room placeObject: object at: 0@1.
	
	player := self defaultPlayableCharacterIn: room.
	
	self 
		should: [player take]
		raise: Error
		withMessageText: Backpack nonPortableObectsCantBeTakenErrorDescription.
	! !
!PlayableCharacterTest methodsFor: 'object tests' stamp: 'AM 12/10/2020 21:04:49' prior: 50877454!
test03NonPortableObjectsCanNotBeTaken

	| player room object |
	
	object :=  self defaultNonPortableObject.
	
	room := self default1x2Room.
	room placeObject: object at: 0@1.
	
	player := self defaultPlayableCharacterIn: room.
	
	self 
		should: [player take]
		raise: Error
		withMessageText: Backpack nonPortableObectsCantBeTakenErrorDescription.
		
	self ! !
!PlayableCharacterTest methodsFor: 'object tests' stamp: 'AM 12/10/2020 21:05:47' prior: 50877469!
test03NonPortableObjectsCanNotBeTaken

	| player room object |
	
	object :=  self defaultNonPortableObject.
	
	room := self default1x2Room.
	room placeObject: object at: 0@1.
	
	player := self defaultPlayableCharacterIn: room.
	
	self 
		should: [player take]
		raise: Error
		withMessageText: Backpack nonPortableObectsCantBeTakenErrorDescription.
! !

!testRun: #PlayableCharacterTest #test01CantCreatePlayerWithOutOfBoundsPositionForRoomItsIn stamp: 'AM 12/10/2020 21:05:50'!
PASSED!

!testRun: #PlayableCharacterTest #test01PlayerCantTakeWhenThereAreNoObjectsInFront stamp: 'AM 12/10/2020 21:05:50'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 21:05:50'!
PASSED!

!testRun: #PlayableCharacterTest #test02CantCreatePlayerInRoomWithPositionAlreadyOccupied stamp: 'AM 12/10/2020 21:05:50'!
PASSED!

!testRun: #PlayableCharacterTest #test02TakenObjectIsAddedToBackpack stamp: 'AM 12/10/2020 21:05:50'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 21:05:50'!
PASSED!

!testRun: #PlayableCharacterTest #test03NonPortableObjectsCanNotBeTaken stamp: 'AM 12/10/2020 21:05:50'!
ERROR!

!testRun: #PlayableCharacterTest #test03PlayerCantMoveOutOfBounds stamp: 'AM 12/10/2020 21:05:50'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 21:05:50'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 21:05:50'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 21:05:50'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 21:05:50'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 21:05:50'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 21:05:50'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 21:05:50'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 21:05:50'!
PASSED!

!testRun: #PlayableCharacterTest #test03NonPortableObjectsCanNotBeTaken stamp: 'AM 12/10/2020 21:05:50'!
ERROR!
!PlayableCharacterTest methodsFor: 'test objects' stamp: 'AM 12/10/2020 21:06:07'!
defaultNonPortableObject
	self shouldBeImplemented.! !
!PlayableCharacterTest methodsFor: 'test objects' stamp: 'AM 12/10/2020 21:06:19' prior: 50877563!
defaultNonPortableObject
	
	NonPortableObject new.! !

!testRun: #PlayableCharacterTest #test03NonPortableObjectsCanNotBeTaken stamp: 'AM 12/10/2020 21:06:21'!
FAILURE!

!testRun: #PlayableCharacterTest #test03NonPortableObjectsCanNotBeTaken stamp: 'AM 12/10/2020 21:06:27'!
FAILURE!

!testRun: #PlayableCharacterTest #test03NonPortableObjectsCanNotBeTaken stamp: 'AM 12/10/2020 21:06:27'!
FAILURE!

!testRun: #PlayableCharacterTest #test03NonPortableObjectsCanNotBeTaken stamp: 'AM 12/10/2020 21:06:48'!
FAILURE!

!testRun: #PlayableCharacterTest #test03NonPortableObjectsCanNotBeTaken stamp: 'AM 12/10/2020 21:06:48'!
FAILURE!
!PlayableCharacterTest methodsFor: 'test objects' stamp: 'AM 12/10/2020 21:07:04' prior: 50877568!
defaultNonPortableObject
	
	^NonPortableObject new.! !

!testRun: #PlayableCharacterTest #test03NonPortableObjectsCanNotBeTaken stamp: 'AM 12/10/2020 21:07:07'!
PASSED!
!Backpack methodsFor: 'adding' stamp: 'AM 12/10/2020 21:10:18' prior: 50870714!
add: aPortableObject
	
	aPortableObject assertCanAddTo: self.
	
	container add: aPortableObject.
	! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 21:11:29' prior: 50877415 overrides: 50877420!
assertCanAddTo: aBackpack

	^aBackpack assertCanAddNonPortableObject: self.! !
!Backpack methodsFor: 'assertions' stamp: 'AM 12/10/2020 21:11:44'!
assertCanAddNonPortableObject: aNonPortableObject

	self error: self class nonPortableObectsCantBeTakenErrorDescription.! !

!methodRemoval: Backpack #assertCanNonPortableObject: stamp: 'AM 12/10/2020 21:11:44'!
assertCanNonPortableObject: aNonPortableObject

	self error: self class nonPortableObectsCantBeTakenErrorDescription.!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 21:13:24'!
itemToAdd

	! !
!NonPortableObject methodsFor: 'adding' stamp: 'AM 12/10/2020 21:14:01'!
add: aStageObject

	containedObjects add: aStageObject.! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 21:20:10' prior: 50877625!
itemToAdd
	
	containedObjects detect: [:anObject | anObject containsPortableObject ]! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 21:21:27' prior: 50877634!
itemToAdd
	
	containedObjects detect: [:anObject | anObject containsPortableObject ] ifNone: [self error: self class portableObjectsCanNotBeAddedErrorDescription]! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 21:21:37' prior: 50877640!
itemToAdd
	
	containedObjects detect: [:anObject | anObject containsPortableObject ] ifNone: [self error: self class nonPortableObjectsCanNotBeAddedErrorDescription]! !
!StageObject methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 21:21:59'!
containsPortableObject

	self subclassResponsibility.! !

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'AM 12/10/2020 21:23:50'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'containedObjects portableObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 21:23:49' overrides: 50877657!
containsPortableObject

	(portableObjects isEmpty) not.! !

StageObject subclass: #NonPortableObject
	instanceVariableNames: 'nonPortableObjects portableObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'AM 12/10/2020 21:24:07'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'nonPortableObjects portableObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PortableObject methodsFor: 'testing' stamp: 'AM 12/10/2020 21:24:40' overrides: 50877657!
containsPortableObject

	^false.! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 21:24:48' prior: 50877672 overrides: 50877657!
containsPortableObject

	^(portableObjects isEmpty) not.! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 21:25:05' prior: 50877649!
itemToAdd
	
	nonPortableObjects detect: [:anObject | anObject containsPortableObject ] ifNone: [self error: self class nonPortableObjectsCanNotBeAddedErrorDescription]! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 21:26:13' prior: 50877703!
itemToAdd
	
	(self containsPortableObject) ifTrue: [^portableObjects first].
	nonPortableObjects detect: [:anObject | anObject containsPortableObject ] ifNone: [self error: self class nonPortableObjectsCanNotBeAddedErrorDescription]! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 21:26:35'!
removePortableObject! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 21:26:45' prior: 50877723!
removePortableObject

	portableObjects removeFirst.! !
!PortableObject methodsFor: 'accessing' stamp: 'AM 12/10/2020 21:27:25'!
itemToAdd

	^self.! !
!Backpack methodsFor: 'adding' stamp: 'AM 12/10/2020 21:29:16' prior: 50877599!
add: anObject
	
	anObject itemToAdd assertCanAddTo: self.
	
	container add: anObject.
	

	! !
!Backpack methodsFor: 'adding' stamp: 'AM 12/10/2020 21:29:39' prior: 50877735!
add: anObject
	
	anObject itemToAdd assertCanAddTo: self.
	
	container add: anObject.
	
	anObject removePortableObject.
	! !
!PortableObject methodsFor: 'accessing' stamp: 'AM 12/10/2020 21:30:02'!
removePortableObject

	! !
!StageObject methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 21:30:17'!
removePortableObject

	self subclassResponsibility.! !
!NonPortableObject methodsFor: 'adding' stamp: 'AM 12/10/2020 21:30:55' prior: 50877628!
add: aStageObject

	aStageObject addTo: self.! !
!StageObject methodsFor: 'as yet unclassified' stamp: 'AM 12/10/2020 21:31:17'!
addTo: aNonPortableObject! !
!PortableObject methodsFor: 'adding' stamp: 'AM 12/10/2020 21:31:36' overrides: 50877762!
addTo: aNonPortableObject! !
!PortableObject methodsFor: 'adding' stamp: 'AM 12/10/2020 21:31:52' prior: 50877766 overrides: 50877762!
addTo: aNonPortableObject

	aNonPortableObject addPortableObject: self.! !
!NonPortableObject methodsFor: 'adding' stamp: 'AM 12/10/2020 21:32:07' overrides: 50877762!
addTo: aNonPortableObject

	aNonPortableObject addNonPortableObject: self.! !
!NonPortableObject methodsFor: 'adding' stamp: 'AM 12/10/2020 21:32:44'!
addNonPortableObject: aNonPortableObject

	nonPortableObjects add: aNonPortableObject.! !
!NonPortableObject methodsFor: 'adding' stamp: 'AM 12/10/2020 21:33:04'!
addPortableObject: aPortableObject

	portableObjects add: aPortableObject.! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AM 12/10/2020 21:34:11'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AM 12/10/2020 21:34:11'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AM 12/10/2020 21:34:11'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AM 12/10/2020 21:34:11'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AM 12/10/2020 21:34:11'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AM 12/10/2020 21:34:11'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 21:34:11'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AM 12/10/2020 21:34:11'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AM 12/10/2020 21:34:11'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AM 12/10/2020 21:34:11'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AM 12/10/2020 21:34:11'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AM 12/10/2020 21:34:12'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AM 12/10/2020 21:34:12'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AM 12/10/2020 21:34:12'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AM 12/10/2020 21:34:12'!
PASSED!

!testRun: #RoomTest #test01CantCreateRoomWithWidthOrHeightLessThanOne stamp: 'AM 12/10/2020 21:34:15'!
PASSED!

!testRun: #RoomTest #test01PlacedObjectOccupiesPositionInRoom stamp: 'AM 12/10/2020 21:34:15'!
PASSED!

!testRun: #RoomTest #test01PlacedPlayerOccupiesPositionInRoom stamp: 'AM 12/10/2020 21:34:15'!
PASSED!

!testRun: #RoomTest #test02CantCreateRoomWithNonIntegerWidthOrHeight stamp: 'AM 12/10/2020 21:34:15'!
PASSED!

!testRun: #RoomTest #test02CantPlaceObjectAtOutOfBoundsPosition stamp: 'AM 12/10/2020 21:34:15'!
PASSED!

!testRun: #RoomTest #test03CantPlaceObjectAtAnOccupiedPosition stamp: 'AM 12/10/2020 21:34:15'!
PASSED!

!testRun: #RoomTest #test03NewRoomIsEmpty stamp: 'AM 12/10/2020 21:34:15'!
PASSED!

!testRun: #RoomTest #test04ObjectTakenByPlayerIsRemoved stamp: 'AM 12/10/2020 21:34:15'!
PASSED!
!PlayableCharacterTest methodsFor: 'object tests' stamp: 'AM 12/10/2020 21:35:51'!
test04PlayerCanTakePortableObjectsContainedByNonPortableObjects

	| player room object portableObject |
	
	portableObject := self defaultPortableObject.
	object :=  self defaultNonPortableObject.
	object add: portableObject.
	
	room := self default1x2Room.
	room placeObject: object at: 0@1.
	
	player := self defaultPlayableCharacterIn: room.
	
	self 
		should: [player take]
		raise: Error
		withMessageText: Backpack nonPortableObectsCantBeTakenErrorDescription.
! !
!PlayableCharacterTest methodsFor: 'object tests' stamp: 'AM 12/10/2020 21:36:22' prior: 50877874!
test04PlayerCanTakePortableObjectsContainedByNonPortableObjects

	| player room object portableObject |
	
	portableObject := self defaultPortableObject.
	object :=  self defaultNonPortableObject.
	object add: portableObject.
	
	room := self default1x2Room.
	room placeObject: object at: 0@1.
	
	player := self defaultPlayableCharacterIn: room.
	
	self assert: (player backpackIncludes: portableObject).
! !
!PlayableCharacterTest methodsFor: 'object tests' stamp: 'AM 12/10/2020 21:36:41' prior: 50877892!
test04PlayerCanTakePortableObjectsContainedByNonPortableObjects

	| player room nonPortableObject portableObject |
	
	portableObject := self defaultPortableObject.
	nonPortableObject :=  self defaultNonPortableObject.
	nonPortableObject add: portableObject.
	
	room := self default1x2Room.
	room placeObject: nonPortableObject at: 0@1.
	
	player := self defaultPlayableCharacterIn: room.
	
	self assert: (player backpackIncludes: portableObject).
! !

!testRun: #PlayableCharacterTest #test04PlayerCanTakePortableObjectsContainedByNonPortableObjects stamp: 'AM 12/10/2020 21:36:45'!
ERROR!

!testRun: #PlayableCharacterTest #test04PlayerCanTakePortableObjectsContainedByNonPortableObjects stamp: 'AM 12/10/2020 21:36:45'!
ERROR!
!NonPortableObject methodsFor: 'initialization' stamp: 'AM 12/10/2020 21:38:02' overrides: 16896425!
initialize

	portableObjects := OrderedCollection new.
	nonPortableObjects := OrderedCollection new.! !

!testRun: #PlayableCharacterTest #test04PlayerCanTakePortableObjectsContainedByNonPortableObjects stamp: 'AM 12/10/2020 21:38:11'!
FAILURE!

!testRun: #PlayableCharacterTest #test04PlayerCanTakePortableObjectsContainedByNonPortableObjects stamp: 'AM 12/10/2020 21:38:11'!
FAILURE!

!testRun: #PlayableCharacterTest #test04PlayerCanTakePortableObjectsContainedByNonPortableObjects stamp: 'AM 12/10/2020 21:38:22'!
FAILURE!
!PlayableCharacterTest methodsFor: 'object tests' stamp: 'AM 12/10/2020 21:39:02' prior: 50877908!
test04PlayerCanTakePortableObjectsContainedByNonPortableObjects

	| player room nonPortableObject portableObject |
	
	portableObject := self defaultPortableObject.
	nonPortableObject :=  self defaultNonPortableObject.
	nonPortableObject add: portableObject.
	
	room := self default1x2Room.
	room placeObject: nonPortableObject at: 0@1.
	
	player := self defaultPlayableCharacterIn: room.
	player take.
	
	self assert: (player backpackIncludes: portableObject).
! !

!testRun: #PlayableCharacterTest #test04PlayerCanTakePortableObjectsContainedByNonPortableObjects stamp: 'AM 12/10/2020 21:39:04'!
FAILURE!

!testRun: #PlayableCharacterTest #test04PlayerCanTakePortableObjectsContainedByNonPortableObjects stamp: 'AM 12/10/2020 21:39:04'!
FAILURE!
!Backpack methodsFor: 'adding' stamp: 'AM 12/10/2020 21:42:08' prior: 50877741!
add: anObject
	
	| objectToAdd |
	
	objectToAdd := anObject itemToAdd.
	objectToAdd assertCanAddTo: self.
	
	container add: objectToAdd.
	
	anObject removePortableObject.
	! !

!testRun: #PlayableCharacterTest #test04PlayerCanTakePortableObjectsContainedByNonPortableObjects stamp: 'AM 12/10/2020 21:42:14'!
PASSED!
!PlayableCharacterTest methodsFor: 'object tests' stamp: 'AM 12/10/2020 21:42:31' prior: 50877954!
test04PlayerCanTakePortableObjectsContainedByNonPortableObjects

	| player room nonPortableObject portableObject |
	
	portableObject := self defaultPortableObject.
	nonPortableObject :=  self defaultNonPortableObject.
	nonPortableObject add: portableObject.
	
	room := self default1x2Room.
	room placeObject: nonPortableObject at: 0@1.
	
	player := self defaultPlayableCharacterIn: room.
	player take.
	
	self assert: (player backpackIncludes: portableObject).
	
	self assert: (room isOccupiedAt: 0@1)
! !

!testRun: #PlayableCharacterTest #test04PlayerCanTakePortableObjectsContainedByNonPortableObjects stamp: 'AM 12/10/2020 21:42:33'!
FAILURE!

!testRun: #PlayableCharacterTest #test04PlayerCanTakePortableObjectsContainedByNonPortableObjects stamp: 'AM 12/10/2020 21:42:33'!
FAILURE!
!Room methodsFor: 'object interaction private' stamp: 'AM 12/10/2020 21:45:07' prior: 50877321!
removeObject: anObject

	| objectPosition |
	
	(anObject isKindOf: NonPortableObject) ifFalse: [objectPosition := objects keyAtValue: anObject.
											objects removeKey: objectPosition.].
	! !

!testRun: #PlayableCharacterTest #test04PlayerCanTakePortableObjectsContainedByNonPortableObjects stamp: 'AM 12/10/2020 21:45:21'!
PASSED!

----SNAPSHOT----(10 December 2020 21:45:39) CuisUniversity-4383.image priorSource: 17383578!
!PlayableCharacterTest methodsFor: 'object tests' stamp: 'AM 12/10/2020 21:47:31'!
test04PlayerCanTakePortableObjectsContainedByNonPortableObjectsTwoLevelsDeep

	| player room nonPortableObjectParent nonPortableObjectChild portableObject |
	
	portableObject := self defaultPortableObject.
	nonPortableObjectChild :=  self defaultNonPortableObject.
	nonPortableObjectChild add: portableObject.
	
	nonPortableObjectParent := self defaultNonPortableObject.
	nonPortableObjectParent add: nonPortableObjectChild.
	
	room := self default1x2Room.
	room placeObject: nonPortableObjectParent at: 0@1.
	
	player := self defaultPlayableCharacterIn: room.
	player take.
	
	self assert: (player backpackIncludes: portableObject).
	
	self assert: (room isOccupiedAt: 0@1)
! !
!PlayableCharacterTest methodsFor: 'object tests' stamp: 'AM 12/10/2020 21:47:35'!
test05PlayerCanTakePortableObjectsContainedByNonPortableObjectsTwoLevelsDeep

	| player room nonPortableObjectParent nonPortableObjectChild portableObject |
	
	portableObject := self defaultPortableObject.
	nonPortableObjectChild :=  self defaultNonPortableObject.
	nonPortableObjectChild add: portableObject.
	
	nonPortableObjectParent := self defaultNonPortableObject.
	nonPortableObjectParent add: nonPortableObjectChild.
	
	room := self default1x2Room.
	room placeObject: nonPortableObjectParent at: 0@1.
	
	player := self defaultPlayableCharacterIn: room.
	player take.
	
	self assert: (player backpackIncludes: portableObject).
	
	self assert: (room isOccupiedAt: 0@1)
! !

!methodRemoval: PlayableCharacterTest #test04PlayerCanTakePortableObjectsContainedByNonPortableObjectsTwoLevelsDeep stamp: 'AM 12/10/2020 21:47:39'!
test04PlayerCanTakePortableObjectsContainedByNonPortableObjectsTwoLevelsDeep

	| player room nonPortableObjectParent nonPortableObjectChild portableObject |
	
	portableObject := self defaultPortableObject.
	nonPortableObjectChild :=  self defaultNonPortableObject.
	nonPortableObjectChild add: portableObject.
	
	nonPortableObjectParent := self defaultNonPortableObject.
	nonPortableObjectParent add: nonPortableObjectChild.
	
	room := self default1x2Room.
	room placeObject: nonPortableObjectParent at: 0@1.
	
	player := self defaultPlayableCharacterIn: room.
	player take.
	
	self assert: (player backpackIncludes: portableObject).
	
	self assert: (room isOccupiedAt: 0@1)
!

!testRun: #PlayableCharacterTest #test05PlayerCanTakePortableObjectsContainedByNonPortableObjectsTwoLevelsDeep stamp: 'AM 12/10/2020 21:47:41'!
ERROR!

!testRun: #PlayableCharacterTest #test05PlayerCanTakePortableObjectsContainedByNonPortableObjectsTwoLevelsDeep stamp: 'AM 12/10/2020 21:47:41'!
ERROR!

portableObjects isEmpty!
!NonPortableObject methodsFor: 'adding' stamp: 'AM 12/10/2020 21:49:42' prior: 50877712!
itemToAdd
	
	(self containsPortableObject) ifTrue: [^portableObjects first].
	^nonPortableObjects detect: [:anObject | anObject containsPortableObject ] ifNone: [self error: self class nonPortableObjectsCanNotBeAddedErrorDescription]! !

!testRun: #PlayableCharacterTest #test05PlayerCanTakePortableObjectsContainedByNonPortableObjectsTwoLevelsDeep stamp: 'AM 12/10/2020 21:49:46'!
ERROR!

!testRun: #PlayableCharacterTest #test05PlayerCanTakePortableObjectsContainedByNonPortableObjectsTwoLevelsDeep stamp: 'AM 12/10/2020 21:49:46'!
ERROR!

----SNAPSHOT----(10 December 2020 21:50:49) CuisUniversity-4383.image priorSource: 17484272!

!methodRemoval: PlayableCharacterTest #test05PlayerCanTakePortableObjectsContainedByNonPortableObjectsTwoLevelsDeep stamp: 'AM 12/10/2020 21:50:57'!
test05PlayerCanTakePortableObjectsContainedByNonPortableObjectsTwoLevelsDeep

	| player room nonPortableObjectParent nonPortableObjectChild portableObject |
	
	portableObject := self defaultPortableObject.
	nonPortableObjectChild :=  self defaultNonPortableObject.
	nonPortableObjectChild add: portableObject.
	
	nonPortableObjectParent := self defaultNonPortableObject.
	nonPortableObjectParent add: nonPortableObjectChild.
	
	room := self default1x2Room.
	room placeObject: nonPortableObjectParent at: 0@1.
	
	player := self defaultPlayableCharacterIn: room.
	player take.
	
	self assert: (player backpackIncludes: portableObject).
	
	self assert: (room isOccupiedAt: 0@1)
!

----SNAPSHOT----(10 December 2020 21:51:32) CuisUniversity-4383.image priorSource: 17487740!

!methodRemoval: PlayableCharacterTest #test04PlayerCanTakePortableObjectsContainedByNonPortableObjects stamp: 'AM 12/10/2020 21:53:51'!
test04PlayerCanTakePortableObjectsContainedByNonPortableObjects

	| player room nonPortableObject portableObject |
	
	portableObject := self defaultPortableObject.
	nonPortableObject :=  self defaultNonPortableObject.
	nonPortableObject add: portableObject.
	
	room := self default1x2Room.
	room placeObject: nonPortableObject at: 0@1.
	
	player := self defaultPlayableCharacterIn: room.
	player take.
	
	self assert: (player backpackIncludes: portableObject).
	
	self assert: (room isOccupiedAt: 0@1)
!

!methodRemoval: PlayableCharacterTest #test03NonPortableObjectsCanNotBeTaken stamp: 'AM 12/10/2020 21:53:53'!
test03NonPortableObjectsCanNotBeTaken

	| player room object |
	
	object :=  self defaultNonPortableObject.
	
	room := self default1x2Room.
	room placeObject: object at: 0@1.
	
	player := self defaultPlayableCharacterIn: room.
	
	self 
		should: [player take]
		raise: Error
		withMessageText: Backpack nonPortableObectsCantBeTakenErrorDescription.
!

!testRun: #PlayableCharacterTest #test01CantCreatePlayerWithOutOfBoundsPositionForRoomItsIn stamp: 'AM 12/10/2020 21:53:57'!
PASSED!

!testRun: #PlayableCharacterTest #test01PlayerCantTakeWhenThereAreNoObjectsInFront stamp: 'AM 12/10/2020 21:53:57'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 21:53:57'!
PASSED!

!testRun: #PlayableCharacterTest #test02CantCreatePlayerInRoomWithPositionAlreadyOccupied stamp: 'AM 12/10/2020 21:53:57'!
PASSED!

!testRun: #PlayableCharacterTest #test02TakenObjectIsAddedToBackpack stamp: 'AM 12/10/2020 21:53:57'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 21:53:57'!
PASSED!

!testRun: #PlayableCharacterTest #test03PlayerCantMoveOutOfBounds stamp: 'AM 12/10/2020 21:53:57'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 21:53:57'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 21:53:57'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 21:53:57'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 21:53:57'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 21:53:57'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 21:53:57'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 21:53:57'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 21:53:57'!
PASSED!

!testRun: #RoomTest #test01CantCreateRoomWithWidthOrHeightLessThanOne stamp: 'AM 12/10/2020 21:54:01'!
PASSED!

!testRun: #RoomTest #test01PlacedObjectOccupiesPositionInRoom stamp: 'AM 12/10/2020 21:54:01'!
PASSED!

!testRun: #RoomTest #test01PlacedPlayerOccupiesPositionInRoom stamp: 'AM 12/10/2020 21:54:01'!
PASSED!

!testRun: #RoomTest #test02CantCreateRoomWithNonIntegerWidthOrHeight stamp: 'AM 12/10/2020 21:54:01'!
PASSED!

!testRun: #RoomTest #test02CantPlaceObjectAtOutOfBoundsPosition stamp: 'AM 12/10/2020 21:54:01'!
PASSED!

!testRun: #RoomTest #test03CantPlaceObjectAtAnOccupiedPosition stamp: 'AM 12/10/2020 21:54:01'!
PASSED!

!testRun: #RoomTest #test03NewRoomIsEmpty stamp: 'AM 12/10/2020 21:54:01'!
PASSED!

!testRun: #RoomTest #test04ObjectTakenByPlayerIsRemoved stamp: 'AM 12/10/2020 21:54:01'!
PASSED!

!testRun: #PlayableCharacterTest #test01CantCreatePlayerWithOutOfBoundsPositionForRoomItsIn stamp: 'AM 12/10/2020 21:54:04'!
PASSED!

!testRun: #PlayableCharacterTest #test01PlayerCantTakeWhenThereAreNoObjectsInFront stamp: 'AM 12/10/2020 21:54:04'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AM 12/10/2020 21:54:04'!
PASSED!

!testRun: #PlayableCharacterTest #test02CantCreatePlayerInRoomWithPositionAlreadyOccupied stamp: 'AM 12/10/2020 21:54:04'!
PASSED!

!testRun: #PlayableCharacterTest #test02TakenObjectIsAddedToBackpack stamp: 'AM 12/10/2020 21:54:04'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AM 12/10/2020 21:54:04'!
PASSED!

!testRun: #PlayableCharacterTest #test03PlayerCantMoveOutOfBounds stamp: 'AM 12/10/2020 21:54:04'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AM 12/10/2020 21:54:04'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AM 12/10/2020 21:54:04'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AM 12/10/2020 21:54:04'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AM 12/10/2020 21:54:04'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AM 12/10/2020 21:54:04'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AM 12/10/2020 21:54:04'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AM 12/10/2020 21:54:04'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AM 12/10/2020 21:54:04'!
PASSED!