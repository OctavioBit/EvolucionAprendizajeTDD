----STARTUP---- (10 December 2020 15:45:36) as /home/aarguello/uba/isw1-c2-2020/cuis-parcial/CuisUniversity-4383.image!


----End fileIn of /home/aarguello/Downloads/ISW1-2020-2C-2doParcial.st----!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AA 12/10/2020 15:47:42'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AA 12/10/2020 15:47:42'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AA 12/10/2020 15:47:42'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AA 12/10/2020 15:47:42'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AA 12/10/2020 15:47:42'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AA 12/10/2020 15:47:42'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AA 12/10/2020 15:47:42'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AA 12/10/2020 15:47:42'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AA 12/10/2020 15:47:42'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AA 12/10/2020 15:47:42'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AA 12/10/2020 15:47:42'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AA 12/10/2020 15:47:42'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AA 12/10/2020 15:47:42'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AA 12/10/2020 15:47:42'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AA 12/10/2020 15:47:42'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 15:47:42'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 15:47:42'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 15:47:42'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 15:47:42'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 15:47:42'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 15:47:42'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 15:47:42'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 15:47:42'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 15:47:42'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 15:47:42'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 16:48:21'!
PASSED!

TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'AA 12/10/2020 17:30:03'!
TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'AA 12/10/2020 17:33:17'!
Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'nil' stamp: 'AA 12/10/2020 17:33:07'!
test01RoomWidthCannotBeZero

	self
		should: [ Room width: 0 height: 10 ]
		raise: Error
		withMessageText: Room invalidWidthErrorDescription.! !
!Room class methodsFor: 'nil' stamp: 'AA 12/10/2020 17:33:46'!
invalidWidthErrorDescription
	^ 'Invalid width'! !
!Room class methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 17:33:57'!
invalidHeightErrorDescription
	^ 'Invalid height.'! !
!Room class methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 17:34:01' prior: 50870395!
invalidWidthErrorDescription
	^ 'Invalid width.'! !

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 17:34:12'!
FAILURE!

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 17:34:46'!
FAILURE!
!RoomTest methodsFor: 'assertions' stamp: 'AA 12/10/2020 17:34:55' overrides: 16927375!
assert: aFalse description: aString 
	self shouldBeImplemented.! !

!methodRemoval: RoomTest #assert:description: stamp: 'AA 12/10/2020 17:35:05'!
assert: aFalse description: aString 
	self shouldBeImplemented.!
!Room class methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 17:35:41'!
width: aWidth height: aHeight
	^ self new initializeWithWidth: aWidth andHeight: aHeight.! !

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'AA 12/10/2020 17:36:09'!
Object subclass: #Room
	instanceVariableNames: 'width'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'AA 12/10/2020 17:36:13'!
Object subclass: #Room
	instanceVariableNames: 'width height'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'no messages' stamp: 'AA 12/10/2020 17:36:07'!
initializeWithWidth: aWidth andHeight: aHeight
	width := aWidth.
	height := aHeight.! !

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 17:36:17'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 17:36:45' prior: 50870446!
initializeWithWidth: aWidth andHeight: aHeight

	self assertValidWidth: aWidth.

	width := aWidth.
	height := aHeight.! !
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 17:37:15'!
assertValidWidth: aWidth
	self error: self class invalidWidthErrorDescription! !

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 17:37:16'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 17:37:27'!
test01RoomWidthCannotBeLessThanZero

	self
		should: [ Room width: -5 height: 10 ]
		raise: Error
		withMessageText: Room invalidWidthErrorDescription.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 17:37:32'!
test02RoomWidthCannotBeLessThanZero

	self
		should: [ Room width: -5 height: 10 ]
		raise: Error
		withMessageText: Room invalidWidthErrorDescription.! !

!methodRemoval: RoomTest #test01RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 17:37:32'!
test01RoomWidthCannotBeLessThanZero

	self
		should: [ Room width: -5 height: 10 ]
		raise: Error
		withMessageText: Room invalidWidthErrorDescription.!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 17:37:43'!
PASSED!

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 17:37:43'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 17:37:43'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 17:38:25'!
test03RoomHeightCannotZero

	self
		should: [ Room width: 10 height: 0 ]
		raise: Error
		withMessageText: Room invalidWidthErrorDescription.! !

!testRun: #RoomTest #test03RoomHeightCannotZero stamp: 'AA 12/10/2020 17:38:26'!
PASSED!

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 17:38:26'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 17:38:26'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotZero stamp: 'AA 12/10/2020 17:38:26'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 17:38:36'!
test03RoomHeightCannotBeZero

	self
		should: [ Room width: 10 height: 0 ]
		raise: Error
		withMessageText: Room invalidWidthErrorDescription.! !

!methodRemoval: RoomTest #test03RoomHeightCannotZero stamp: 'AA 12/10/2020 17:38:36'!
test03RoomHeightCannotZero

	self
		should: [ Room width: 10 height: 0 ]
		raise: Error
		withMessageText: Room invalidWidthErrorDescription.!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 17:38:52'!
test04RoomHeightCannotBeLessThanZero

	self
		should: [ Room width: 10 height: -3 ]
		raise: Error
		withMessageText: Room invalidWidthErrorDescription.! !

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 17:38:55'!
PASSED!

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 17:38:55'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 17:38:55'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 17:38:55'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 17:38:55'!
PASSED!

----SNAPSHOT----(10 December 2020 17:44:05) CuisUniversity-4383.image priorSource: 17207870!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 17:47:23' prior: 50869738!
test10_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| playableCharacter paper key |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 17:54:30'!
test05RoomWidthMustBeAnInteger

	self
		should: [ Room width: 0.7 height: 4 ]
		raise: Error
		withMessageText: Room invalidWidthErrorDescription.! !

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 17:54:31'!
PASSED!

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 17:54:31'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 17:54:31'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 17:54:31'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 17:54:31'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 17:54:31'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 17:55:03'!
test06RoomHeightMustBeAnInteger

	self
		should: [ Room width: 4 height: 0.7 ]
		raise: Error
		withMessageText: Room invalidWidthErrorDescription.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 17:55:53'!
test07RoomStoresWidthAndHeight

	| room |
	room :=  Room width: 4 height: 7.

	self assert: 4 equals: room width.
	self assert: 7 equals: room height.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 17:56:19' prior: 50870620!
test07RoomStoresWidthAndHeight

	| room |
	room :=  Room width: 5 height: 8.

	self assert: 5 equals: room width.
	self assert: 8 equals: room height.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 17:56:35'!
validRoom
	^ Room width: 5 height: 8! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 17:56:52'!
validRoomWidth
	^ 5! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 17:56:56'!
validRoomHeight
	^ 8! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 17:57:22' prior: 50870636!
validRoom
	^ Room
		width: self validRoomWidth
		height: self validRoomHeight! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 17:57:29' prior: 50870648!
validRoom

	^ Room
		width: self validRoomWidth
		height: self validRoomHeight! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 17:57:41' prior: 50870628!
test07RoomStoresWidthAndHeight

	| room |
	room := self validRoom.

	self assert: 5 equals: room width.
	self assert: 8 equals: room height.! !

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 17:57:41'!
ERROR!

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 17:57:55'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 17:57:55'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 17:57:55'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 17:57:55'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 17:57:55'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 17:57:55'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 17:57:55'!
ERROR!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 17:57:55'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 17:59:25' prior: 50870462!
assertValidWidth: aWidth
	(aWidth >= 1 and: [ aWidth isInteger ]) ifFalse: [ self error: self class invalidWidthErrorDescription ]! !

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 17:59:26'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 17:59:26'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 17:59:26'!
FAILURE!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 17:59:26'!
FAILURE!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 17:59:26'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 17:59:26'!
FAILURE!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 17:59:26'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 17:59:55'!
assertValidHeight: aHeight
	(aHeight >= 1 and: [ aHeight isInteger ]) ifFalse: [ self error: self class invalidHeightErrorDescription ]! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:00:08' prior: 50870522!
test03RoomHeightCannotBeZero

	self
		should: [ Room width: 10 height: 0 ]
		raise: Error
		withMessageText: Room invalidHeightErrorDescription.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:00:13' prior: 50870537!
test04RoomHeightCannotBeLessThanZero

	self
		should: [ Room width: 10 height: -3 ]
		raise: Error
		withMessageText: Room invalidHeightErrorDescription.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:00:20' prior: 50870612!
test06RoomHeightMustBeAnInteger

	self
		should: [ Room width: 4 height: 0.7 ]
		raise: Error
		withMessageText: Room invalidHeightErrorDescription.! !

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 18:00:28'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 18:00:28'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 18:00:28'!
FAILURE!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 18:00:28'!
FAILURE!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 18:00:28'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 18:00:28'!
FAILURE!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 18:00:28'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:00:42' prior: 50870455!
initializeWithWidth: aWidth andHeight: aHeight

	self assertValidWidth: aWidth.
	self assertValidWidth: aWidth.

	width := aWidth.
	height := aHeight.! !
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:00:48' prior: 50870775!
initializeWithWidth: aWidth andHeight: aHeight

	self assertValidWidth: aWidth.
	self assertValidHeight: aHeight.

	width := aWidth.
	height := aHeight.! !

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 18:00:48'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 18:00:48'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 18:00:48'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 18:00:48'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 18:00:48'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 18:00:48'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 18:00:48'!
ERROR!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 18:00:48'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:01:07'!
width
	^ width! !
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:01:11'!
height
	^ height! !

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 18:01:11'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 18:01:11'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 18:01:11'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 18:01:11'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 18:01:11'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 18:01:11'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 18:01:11'!
PASSED!
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:02:08'!
assertPositiveInteger: aNumber
	^ aNumber >= 1 and: [ aNumber isInteger ]! !
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:02:38' prior: 50870722!
assertValidHeight: aHeight
	(self assertPositiveInteger: aHeight) ifFalse: [ self error: self class invalidHeightErrorDescription ]! !
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:02:46' prior: 50870694!
assertValidWidth: aWidth
	(self assertPositiveInteger: aWidth) ifFalse: [ self error: self class invalidWidthErrorDescription ]! !

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 18:02:46'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 18:02:46'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 18:02:46'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 18:02:46'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 18:02:46'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 18:02:46'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 18:02:46'!
PASSED!

----SNAPSHOT----(10 December 2020 18:02:49) CuisUniversity-4383.image priorSource: 17245085!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:05:03'!
test08RoomItemsAreWithinBoundaries

	| room |
	room := self validRoom.

	self assert: 5 equals: room width.
	self assert: 8 equals: room height.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:06:09'!
validRoomWithStageObjects: stageObjects

	^ Room
		width: self validRoomWidth
		height: self validRoomHeight! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:06:24' prior: 50870893!
validRoomWithStageObjects: stageObjects

	^ Room
		width: self validRoomWidth
		height: self validRoomHeight
		stageObjects: stageObjects.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:07:13'!
test08RoomItemsMustBeWithinBoundaries

	| room |
	room := self validRoomWidthStageObjects: self invalidStageObjects.

	self assert: 5 equals: room width.
	self assert: 8 equals: room height.! !

!methodRemoval: RoomTest #test08RoomItemsAreWithinBoundaries stamp: 'AA 12/10/2020 18:07:16'!
test08RoomItemsAreWithinBoundaries

	| room |
	room := self validRoom.

	self assert: 5 equals: room width.
	self assert: 8 equals: room height.!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:07:42' prior: 50870907!
test08RoomItemsMustBeWithinBoundaries

	| room stageObjects |
	stageObjects := Dictionary new.
	room := self validRoomWithStageObjects: self invalidStageObjects.

	self assert: 5 equals: room width.
	self assert: 8 equals: room height.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:07:57' prior: 50870924!
test08RoomItemsMustBeWithinBoundaries

	| room stageObjects |
	
	stageObjects := Dictionary new.
	
	room := self validRoomWithStageObjects: stageObjects.

	self assert: 5 equals: room width.
	self assert: 8 equals: room height.! !

----End fileIn of /home/aarguello/uba/isw1-c2-2020/cuis-parcial/Packages/TerseGuide.pck.st----!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:09:44' prior: 50870935!
test08RoomItemsMustBeWithinBoundaries

	| room stageObjects |
	
	stageObjects := Dictionary new.
	stageObjects at: '' put: 'asd'.
	room := self validRoomWithStageObjects: stageObjects.

	self assert: 5 equals: room width.
	self assert: 8 equals: room height.! !

1@1.!

1@1.!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:22:29'!
test08

	| stageObjects |
	
	stageObjects := Dictionary new.
	stageObjects at: -1@0 put: StageObject new.
	
	self
		should: [ self validRoomWithStageObjects: stageObjects ]
		raise: Error
		withMessageText: (Room invalidStageObjectPositionAt: -1@0)! !

!testRun: #RoomTest #test08 stamp: 'AA 12/10/2020 18:22:37'!
ERROR!
!Room class methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:22:49'!
invalidStageObjectPositionAt: aPoint 
	self shouldBeImplemented.! !

'asd' + 'das'!
!Room class methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:24:08' prior: 50873907!
invalidStageObjectPositionAt: aPoint 
	^ aPoint, 'is not a valid position for this room.'! !

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 18:24:09'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 18:24:09'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 18:24:09'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 18:24:09'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 18:24:09'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 18:24:09'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 18:24:09'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'AA 12/10/2020 18:24:09'!
ERROR!

!testRun: #RoomTest #test08RoomItemsMustBeWithinBoundaries stamp: 'AA 12/10/2020 18:24:09'!
ERROR!

!methodRemoval: RoomTest #test08RoomItemsMustBeWithinBoundaries stamp: 'AA 12/10/2020 18:24:15'!
test08RoomItemsMustBeWithinBoundaries

	| room stageObjects |
	
	stageObjects := Dictionary new.
	stageObjects at: '' put: 'asd'.
	room := self validRoomWithStageObjects: stageObjects.

	self assert: 5 equals: room width.
	self assert: 8 equals: room height.!

!testRun: #RoomTest #test08 stamp: 'AA 12/10/2020 18:24:16'!
ERROR!

!testRun: #RoomTest #test08 stamp: 'AA 12/10/2020 18:24:16'!
ERROR!
!Room class methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:24:32' prior: 50873913!
invalidStageObjectPositionAt: aPoint 
	^ aPoint asString, 'is not a valid position for this room.'! !

!testRun: #RoomTest #test08 stamp: 'AA 12/10/2020 18:24:33'!
FAILURE!
!Room class methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:24:52' prior: 50873961!
invalidStageObjectPositionAt: aPoint 
	^ aPoint asString, ' is not a valid position for this room.'! !
!Room class methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:26:21'!
width: aWidth height: aHeight stageObjects: stageObjects
	^ self new initializeWithWidth: aWidth andHeight: aHeight andStageObjects: stageObjects.! !
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:26:31'!
initializeWithWidth: aWidth andHeight: aHeight andStageObjects: stageObjects

	self assertValidWidth: aWidth.
	self assertValidHeight: aHeight.

	width := aWidth.
	height := aHeight.! !
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:27:52' prior: 50873983!
initializeWithWidth: aWidth andHeight: aHeight andStageObjects: objects

	self assertValidWidth: aWidth.
	self assertValidHeight: aHeight.

	width := aWidth.
	height := aHeight.! !

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'AA 12/10/2020 18:28:09'!
Object subclass: #Room
	instanceVariableNames: 'width height stageObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:28:07' prior: 50873992!
initializeWithWidth: aWidth andHeight: aHeight andStageObjects: objects

	self assertValidWidth: aWidth.
	self assertValidHeight: aHeight.

	width := aWidth.
	height := aHeight.
	stageObjects := objects.! !
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:28:21' prior: 50874009!
initializeWithWidth: aWidth andHeight: aHeight andStageObjects: initalStageObjects

	self assertValidWidth: aWidth.
	self assertValidHeight: aHeight.

	width := aWidth.
	height := aHeight.
	stageObjects := initalStageObjects.! !

!methodRemoval: Room #initializeWithWidth:andHeight: stamp: 'AA 12/10/2020 18:28:34'!
initializeWithWidth: aWidth andHeight: aHeight

	self assertValidWidth: aWidth.
	self assertValidHeight: aHeight.

	width := aWidth.
	height := aHeight.!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:29:51' prior: 50870654!
validRoom

	^ self validRoomWithStageObjects: Dictionary new. ! !

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 18:29:51'!
FAILURE!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 18:29:51'!
FAILURE!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 18:29:51'!
FAILURE!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 18:29:51'!
FAILURE!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 18:29:51'!
FAILURE!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 18:29:51'!
FAILURE!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 18:29:51'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'AA 12/10/2020 18:29:51'!
FAILURE!

!testRun: #RoomTest #test08 stamp: 'AA 12/10/2020 18:30:25'!
FAILURE!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AA 12/10/2020 18:30:31'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AA 12/10/2020 18:30:31'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AA 12/10/2020 18:30:31'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AA 12/10/2020 18:30:31'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AA 12/10/2020 18:30:31'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AA 12/10/2020 18:30:31'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AA 12/10/2020 18:30:31'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AA 12/10/2020 18:30:31'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AA 12/10/2020 18:30:31'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AA 12/10/2020 18:30:31'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AA 12/10/2020 18:30:31'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AA 12/10/2020 18:30:31'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AA 12/10/2020 18:30:31'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AA 12/10/2020 18:30:31'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AA 12/10/2020 18:30:31'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 18:30:31'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 18:30:31'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 18:30:31'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 18:30:31'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 18:30:31'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 18:30:31'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 18:30:31'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 18:30:31'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 18:30:31'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 18:30:31'!
PASSED!

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 18:30:31'!
FAILURE!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 18:30:31'!
FAILURE!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 18:30:31'!
FAILURE!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 18:30:31'!
FAILURE!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 18:30:31'!
FAILURE!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 18:30:31'!
FAILURE!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 18:30:31'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'AA 12/10/2020 18:30:31'!
FAILURE!

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 18:30:38'!
FAILURE!

!methodRemoval: Room class #width:height: stamp: 'AA 12/10/2020 18:30:57'!
width: aWidth height: aHeight
	^ self new initializeWithWidth: aWidth andHeight: aHeight.!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:31:27' prior: 50870388!
test01RoomWidthCannotBeZero

	self
		should: [ Room width: 0 height: 10 stageObjects: Dictionary new ]
		raise: Error
		withMessageText: Room invalidWidthErrorDescription.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:31:32' prior: 50870478!
test02RoomWidthCannotBeLessThanZero

	self
		should: [ Room width: -5 height: 10 stageObjects: Dictionary new ]
		raise: Error
		withMessageText: Room invalidWidthErrorDescription.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:31:36' prior: 50870730!
test03RoomHeightCannotBeZero

	self
		should: [ Room width: 10 height: 0 stageObjects: Dictionary new ]
		raise: Error
		withMessageText: Room invalidHeightErrorDescription.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:31:39' prior: 50870738!
test04RoomHeightCannotBeLessThanZero

	self
		should: [ Room width: 10 height: -3 stageObjects: Dictionary new ]
		raise: Error
		withMessageText: Room invalidHeightErrorDescription.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:31:43' prior: 50870587!
test05RoomWidthMustBeAnInteger

	self
		should: [ Room width: 0.7 height: 4 stageObjects: Dictionary new ]
		raise: Error
		withMessageText: Room invalidWidthErrorDescription.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:31:47' prior: 50870746!
test06RoomHeightMustBeAnInteger

	self
		should: [ Room width: 4 height: 0.7 stageObjects: Dictionary new ]
		raise: Error
		withMessageText: Room invalidHeightErrorDescription.! !

!testRun: #RoomTest #test08 stamp: 'AA 12/10/2020 18:31:54'!
FAILURE!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AA 12/10/2020 18:31:57'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AA 12/10/2020 18:31:57'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AA 12/10/2020 18:31:57'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AA 12/10/2020 18:31:57'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AA 12/10/2020 18:31:57'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AA 12/10/2020 18:31:57'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AA 12/10/2020 18:31:57'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AA 12/10/2020 18:31:57'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AA 12/10/2020 18:31:57'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AA 12/10/2020 18:31:57'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AA 12/10/2020 18:31:57'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AA 12/10/2020 18:31:57'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AA 12/10/2020 18:31:57'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AA 12/10/2020 18:31:57'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AA 12/10/2020 18:31:57'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 18:31:57'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 18:31:57'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 18:31:57'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 18:31:57'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 18:31:57'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 18:31:57'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 18:31:57'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 18:31:57'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 18:31:57'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 18:31:57'!
PASSED!

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 18:31:57'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 18:31:57'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 18:31:57'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 18:31:57'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 18:31:57'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 18:31:57'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 18:31:57'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'AA 12/10/2020 18:31:57'!
FAILURE!

!testRun: #RoomTest #test08 stamp: 'AA 12/10/2020 18:31:57'!
FAILURE!

----SNAPSHOT----(10 December 2020 18:32:01) CuisUniversity-4383.image priorSource: 17255387!

!testRun: #RoomTest #test08 stamp: 'AA 12/10/2020 18:32:31'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:34:25' prior: 50874019!
initializeWithWidth: aWidth andHeight: aHeight andStageObjects: initalStageObjects

	self assertValidWidth: aWidth.
	self assertValidHeight: aHeight.

	initalStageObjects keys do: [ :aPosition |
		aPosition = -1@0 ifTrue: [ self error: (self class invalidStageObjectPositionAt: aPosition) ]
	].

	width := aWidth.
	height := aHeight.
	stageObjects := initalStageObjects.! !

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 18:34:26'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 18:34:26'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 18:34:26'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 18:34:26'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 18:34:26'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 18:34:26'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 18:34:26'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'AA 12/10/2020 18:34:26'!
FAILURE!

!testRun: #RoomTest #test08 stamp: 'AA 12/10/2020 18:34:26'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:34:34' prior: 50874371!
initializeWithWidth: aWidth andHeight: aHeight andStageObjects: initalStageObjects

	self assertValidWidth: aWidth.
	self assertValidHeight: aHeight.

	initalStageObjects keys do: [ :aPosition |
		(aPosition = -1@0) ifTrue: [ self error: (self class invalidStageObjectPositionAt: aPosition) ]
	].

	width := aWidth.
	height := aHeight.
	stageObjects := initalStageObjects.! !

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 18:34:35'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 18:34:35'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 18:34:35'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 18:34:35'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 18:34:35'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 18:34:35'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 18:34:35'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'AA 12/10/2020 18:34:35'!
FAILURE!

!testRun: #RoomTest #test08 stamp: 'AA 12/10/2020 18:34:35'!
FAILURE!

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 18:34:55'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 18:34:55'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 18:34:55'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 18:34:55'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 18:34:55'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 18:34:55'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 18:34:55'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'AA 12/10/2020 18:34:55'!
FAILURE!

!testRun: #RoomTest #test08 stamp: 'AA 12/10/2020 18:34:55'!
FAILURE!

| stageObjects |
	
	stageObjects := Dictionary new.
	stageObjects at: -1@0 put: StageObject new.
	stageObjects keys.!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:35:45' prior: 50873894!
test08

	| stageObjects |
	
	stageObjects := Dictionary new.
	stageObjects at: -1@0 put: StageObject new.
	
	self
		should: [ self validRoomWithStageObjects: stageObjects ]
		raise: Error
		withMessageText: (Room invalidStageObjectPositionAt: -1@0)! !

!testRun: #RoomTest #test08 stamp: 'AA 12/10/2020 18:35:48'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:36:57' prior: 50874411!
initializeWithWidth: aWidth andHeight: aHeight andStageObjects: initalStageObjects

	self assertValidWidth: aWidth.
	self assertValidHeight: aHeight.

	initalStageObjects keys do: [ :aPosition |
		(aPosition = (-1@0)) ifTrue: [ self error: (self class invalidStageObjectPositionAt: aPosition) ]
	].

	width := aWidth.
	height := aHeight.
	stageObjects := initalStageObjects.! !

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 18:36:58'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 18:36:58'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 18:36:58'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 18:36:58'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 18:36:58'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 18:36:58'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 18:36:58'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'AA 12/10/2020 18:36:58'!
PASSED!
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:37:02' prior: 50874493!
initializeWithWidth: aWidth andHeight: aHeight andStageObjects: initalStageObjects

	self assertValidWidth: aWidth.
	self assertValidHeight: aHeight.

	initalStageObjects keys do: [ :aPosition |
		aPosition = (-1@0) ifTrue: [ self error: (self class invalidStageObjectPositionAt: aPosition) ]
	].

	width := aWidth.
	height := aHeight.
	stageObjects := initalStageObjects.! !

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 18:37:03'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 18:37:03'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 18:37:03'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 18:37:03'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 18:37:03'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 18:37:03'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 18:37:03'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'AA 12/10/2020 18:37:03'!
PASSED!
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:38:21' prior: 50874531!
initializeWithWidth: aWidth andHeight: aHeight andStageObjects: initalStageObjects

	self assertValidWidth: aWidth.
	self assertValidHeight: aHeight.
	
	initalStageObjects keys do: [ :aPosition |
		aPosition = (-1@0) ifTrue: [ self error: (self class invalidStageObjectPositionAt: aPosition) ]
	].

	width := aWidth.
	height := aHeight.
	stageObjects := initalStageObjects.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:38:40'!
test09

	| stageObjects |
	
	stageObjects := Dictionary new.
	stageObjects at: 0@-1 put: StageObject new.
	
	self
		should: [ self validRoomWithStageObjects: stageObjects ]
		raise: Error
		withMessageText: (Room invalidStageObjectPositionAt: -1@0)! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:38:58'!
test10

	| stageObjects |
	
	stageObjects := Dictionary new.
	stageObjects at: (self width)@0 put: StageObject new.
	
	self
		should: [ self validRoomWithStageObjects: stageObjects ]
		raise: Error
		withMessageText: (Room invalidStageObjectPositionAt: -1@0)! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:39:18' prior: 50874595!
test10

	| stageObjects |
	
	stageObjects := Dictionary new.
	stageObjects at: (self width)@0 put: StageObject new.
	
	self
		should: [ self validRoomWithStageObjects: stageObjects ]
		raise: Error
		withMessageText: (Room invalidStageObjectPositionAt: (self width)@0)! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:39:24' prior: 50874584!
test09

	| stageObjects |
	
	stageObjects := Dictionary new.
	stageObjects at: 0@-1 put: StageObject new.
	
	self
		should: [ self validRoomWithStageObjects: stageObjects ]
		raise: Error
		withMessageText: (Room invalidStageObjectPositionAt: 0@-1)! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:39:42'!
test11

	| stageObjects |
	
	stageObjects := Dictionary new.
	stageObjects at: 0@(self height) put: StageObject new.
	
	self
		should: [ self validRoomWithStageObjects: stageObjects ]
		raise: Error
		withMessageText: (Room invalidStageObjectPositionAt: 0@(self height))! !

!testRun: #RoomTest #test11 stamp: 'AA 12/10/2020 18:39:46'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:40:03' prior: 50874630!
test11

	| stageObjects |
	
	stageObjects := Dictionary new.
	stageObjects at: 0@(self validRoomHeight) put: StageObject new.
	
	self
		should: [ self validRoomWithStageObjects: stageObjects ]
		raise: Error
		withMessageText: (Room invalidStageObjectPositionAt: 0@(self height))! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:40:06' prior: 50874644!
test11

	| stageObjects |
	
	stageObjects := Dictionary new.
	stageObjects at: 0@(self validRoomHeight) put: StageObject new.
	
	self
		should: [ self validRoomWithStageObjects: stageObjects ]
		raise: Error
		withMessageText: (Room invalidStageObjectPositionAt: 0@(self validRoomHeight))! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:40:16' prior: 50874607!
test10

	| stageObjects |
	
	stageObjects := Dictionary new.
	stageObjects at: (self validRoomWidth)@0 put: StageObject new.
	
	self
		should: [ self validRoomWithStageObjects: stageObjects ]
		raise: Error
		withMessageText: (Room invalidStageObjectPositionAt: (self width)@0)! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:40:18' prior: 50874669!
test10

	| stageObjects |
	
	stageObjects := Dictionary new.
	stageObjects at: (self validRoomWidth)@0 put: StageObject new.
	
	self
		should: [ self validRoomWithStageObjects: stageObjects ]
		raise: Error
		withMessageText: (Room invalidStageObjectPositionAt: (self validRoomWidth)@0)! !

!testRun: #RoomTest #test10 stamp: 'AA 12/10/2020 18:40:19'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:41:39' prior: 50874569!
initializeWithWidth: aWidth andHeight: aHeight andStageObjects: initalStageObjects

	self assertValidWidth: aWidth.
	self assertValidHeight: aHeight.
	
	initalStageObjects keys do: [ :aPosition |
		self bottomLeftCorner <= aPosition and: [ aPosition <= self topRightCorner ] ifFalse: [ self error: (self class invalidStageObjectPositionAt: aPosition) ]
	].

	width := aWidth.
	height := aHeight.
	stageObjects := initalStageObjects.! !
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:41:47' prior: 50874696!
initializeWithWidth: aWidth andHeight: aHeight andStageObjects: initalStageObjects

	self assertValidWidth: aWidth.
	self assertValidHeight: aHeight.
	
	initalStageObjects keys do: [ :aPosition |
		(self bottomLeftCorner <= aPosition and: [ aPosition <= self topRightCorner ]) ifFalse: [ self error: (self class invalidStageObjectPositionAt: aPosition) ]
	].

	width := aWidth.
	height := aHeight.
	stageObjects := initalStageObjects.! !
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:42:01'!
bottomLeft
	^ 0@0! !
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:42:49'!
topRight
	^ (self width - 1)@(self height - 1)! !
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:42:58' prior: 50874713!
initializeWithWidth: aWidth andHeight: aHeight andStageObjects: initalStageObjects

	self assertValidWidth: aWidth.
	self assertValidHeight: aHeight.
	
	initalStageObjects keys do: [ :aPosition |
		(self bottomLeft <= aPosition and: [ aPosition <= self topRight ]) ifFalse: [ self error: (self class invalidStageObjectPositionAt: aPosition) ]
	].

	width := aWidth.
	height := aHeight.
	stageObjects := initalStageObjects.! !

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 18:42:59'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 18:42:59'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 18:42:59'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 18:42:59'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 18:42:59'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 18:42:59'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 18:42:59'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'AA 12/10/2020 18:42:59'!
PASSED!

!testRun: #RoomTest #test09 stamp: 'AA 12/10/2020 18:42:59'!
PASSED!

!testRun: #RoomTest #test10 stamp: 'AA 12/10/2020 18:42:59'!
FAILURE!

!testRun: #RoomTest #test11 stamp: 'AA 12/10/2020 18:42:59'!
FAILURE!

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 18:43:39'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 18:43:39'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 18:43:39'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 18:43:39'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 18:43:39'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 18:43:39'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 18:43:39'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'AA 12/10/2020 18:43:39'!
PASSED!

!testRun: #RoomTest #test09 stamp: 'AA 12/10/2020 18:43:39'!
PASSED!

!testRun: #RoomTest #test10 stamp: 'AA 12/10/2020 18:43:39'!
FAILURE!

!testRun: #RoomTest #test11 stamp: 'AA 12/10/2020 18:43:39'!
FAILURE!

!testRun: #RoomTest #test10 stamp: 'AA 12/10/2020 18:43:50'!
FAILURE!

!testRun: #RoomTest #test10 stamp: 'AA 12/10/2020 18:43:50'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:44:11' prior: 50874737!
initializeWithWidth: aWidth andHeight: aHeight andStageObjects: initalStageObjects

	self assertValidWidth: aWidth.
	self assertValidHeight: aHeight.
	
	initalStageObjects keys do: [ :aPosition |
		((self bottomLeft <= aPosition) and: [ aPosition <= self topRight ]) ifFalse: [ self error: (self class invalidStageObjectPositionAt: aPosition) ]
	].

	width := aWidth.
	height := aHeight.
	stageObjects := initalStageObjects.! !

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 18:44:12'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 18:44:12'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 18:44:12'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 18:44:12'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 18:44:12'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 18:44:12'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 18:44:12'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'AA 12/10/2020 18:44:12'!
PASSED!

!testRun: #RoomTest #test09 stamp: 'AA 12/10/2020 18:44:12'!
PASSED!

!testRun: #RoomTest #test10 stamp: 'AA 12/10/2020 18:44:12'!
FAILURE!

!testRun: #RoomTest #test11 stamp: 'AA 12/10/2020 18:44:12'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:44:38' prior: 50874732!
topRight
	^ (width - 1)@( height - 1)! !

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 18:44:38'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 18:44:38'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 18:44:38'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 18:44:38'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 18:44:38'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 18:44:38'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 18:44:38'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'AA 12/10/2020 18:44:38'!
PASSED!

!testRun: #RoomTest #test09 stamp: 'AA 12/10/2020 18:44:38'!
PASSED!

!testRun: #RoomTest #test10 stamp: 'AA 12/10/2020 18:44:38'!
FAILURE!

!testRun: #RoomTest #test11 stamp: 'AA 12/10/2020 18:44:38'!
FAILURE!

!testRun: #RoomTest #test10 stamp: 'AA 12/10/2020 18:44:43'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:45:36' prior: 50874817!
initializeWithWidth: aWidth andHeight: aHeight andStageObjects: initalStageObjects

	self assertValidWidth: aWidth.
	self assertValidHeight: aHeight.
	
	width := aWidth.
	height := aHeight.
	
	initalStageObjects keys do: [ :aPosition |
		((self bottomLeft <= aPosition) and: [ aPosition <= self topRight ]) ifFalse: [ self error: (self class invalidStageObjectPositionAt: aPosition) ]
	].

	stageObjects := initalStageObjects.! !

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 18:45:39'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 18:45:39'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 18:45:39'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 18:45:39'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 18:45:39'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 18:45:39'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 18:45:39'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'AA 12/10/2020 18:45:39'!
PASSED!

!testRun: #RoomTest #test09 stamp: 'AA 12/10/2020 18:45:39'!
PASSED!

!testRun: #RoomTest #test10 stamp: 'AA 12/10/2020 18:45:39'!
PASSED!

!testRun: #RoomTest #test11 stamp: 'AA 12/10/2020 18:45:39'!
PASSED!
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:45:48' prior: 50874863!
topRight
	^ (self width - 1)@(self height - 1)! !

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 18:45:49'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 18:45:49'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 18:45:49'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 18:45:49'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 18:45:49'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 18:45:49'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 18:45:49'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'AA 12/10/2020 18:45:49'!
PASSED!

!testRun: #RoomTest #test09 stamp: 'AA 12/10/2020 18:45:49'!
PASSED!

!testRun: #RoomTest #test10 stamp: 'AA 12/10/2020 18:45:49'!
PASSED!

!testRun: #RoomTest #test11 stamp: 'AA 12/10/2020 18:45:49'!
PASSED!
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:46:16' prior: 50874899!
initializeWithWidth: aWidth andHeight: aHeight andStageObjects: initalStageObjects

	self assertValidWidth: aWidth.
	self assertValidHeight: aHeight.
	
	width := aWidth.
	height := aHeight.
	
	initalStageObjects do: [ :aPosition |
		((self bottomLeft <= aPosition) and: [ aPosition <= self topRight ]) ifFalse: [ self error: (self class invalidStageObjectPositionAt: aPosition) ]
	].

	stageObjects := initalStageObjects.! !

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 18:46:17'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 18:46:17'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 18:46:17'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 18:46:17'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 18:46:17'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 18:46:17'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 18:46:17'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'AA 12/10/2020 18:46:17'!
FAILURE!

!testRun: #RoomTest #test09 stamp: 'AA 12/10/2020 18:46:17'!
FAILURE!

!testRun: #RoomTest #test10 stamp: 'AA 12/10/2020 18:46:17'!
FAILURE!

!testRun: #RoomTest #test11 stamp: 'AA 12/10/2020 18:46:17'!
FAILURE!

!testRun: #RoomTest #test08 stamp: 'AA 12/10/2020 18:46:19'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:46:28' prior: 50874979!
initializeWithWidth: aWidth andHeight: aHeight andStageObjects: initalStageObjects

	self assertValidWidth: aWidth.
	self assertValidHeight: aHeight.
	
	width := aWidth.
	height := aHeight.
	
	initalStageObjects keys do: [ :aPosition |
		((self bottomLeft <= aPosition) and: [ aPosition <= self topRight ]) ifFalse: [ self error: (self class invalidStageObjectPositionAt: aPosition) ]
	].

	stageObjects := initalStageObjects.! !
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:47:07'!
positionInBounds: aPosition
	^ self bottomLeft <= aPosition and: [ aPosition <= self topRight ]! !
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:47:26' prior: 50875027!
initializeWithWidth: aWidth andHeight: aHeight andStageObjects: initalStageObjects

	self assertValidWidth: aWidth.
	self assertValidHeight: aHeight.
	
	width := aWidth.
	height := aHeight.
	
	initalStageObjects keys do: [ :aPosition |
		(self positionInBounds: aPosition) ifFalse: [ self error: (self class invalidStageObjectPositionAt: aPosition) ]
	].

	stageObjects := initalStageObjects.! !
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:48:58'!
validateStageObjectsPosition: stageObjectsToValidate
	stageObjectsToValidate keys do: [ :aPosition |
		(self positionInBounds: aPosition) ifFalse: [ self error: (self class invalidStageObjectPositionAt: aPosition) ]
	].! !
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:50:11'!
assertPositionInBounds: aPosition
	(self positionInBounds: aPosition) ifFalse: [ self error: (self class invalidStageObjectPositionAt: aPosition) ]! !
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:51:00' prior: 50875049!
initializeWithWidth: aWidth andHeight: aHeight andStageObjects: initalStageObjects

	self assertValidWidth: aWidth.
	self assertValidHeight: aHeight.
	
	width := aWidth.
	height := aHeight.
	
	initalStageObjects keys do: [ :aPosition | self assertPositionInBounds: aPosition ].

	stageObjects := initalStageObjects.! !
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:51:17' prior: 50875064!
validateStageObjectsPosition: stageObjectsToValidate
	stageObjectsToValidate keys do: [ :aPosition | self assertPositionInBounds: aPosition ].! !
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:51:45' prior: 50875082!
initializeWithWidth: aWidth andHeight: aHeight andStageObjects: initalStageObjects

	self assertValidWidth: aWidth.
	self assertValidHeight: aHeight.
	
	width := aWidth.
	height := aHeight.
	
	self validateStageObjectsPosition: initalStageObjects.

	stageObjects := initalStageObjects.! !

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 18:51:47'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 18:51:47'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 18:51:47'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 18:51:47'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 18:51:47'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 18:51:47'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 18:51:47'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'AA 12/10/2020 18:51:47'!
PASSED!

!testRun: #RoomTest #test09 stamp: 'AA 12/10/2020 18:51:47'!
PASSED!

!testRun: #RoomTest #test10 stamp: 'AA 12/10/2020 18:51:47'!
PASSED!

!testRun: #RoomTest #test11 stamp: 'AA 12/10/2020 18:51:47'!
PASSED!

----SNAPSHOT----(10 December 2020 18:51:50) CuisUniversity-4383.image priorSource: 17366881!
!Room methodsFor: 'validations' stamp: 'AA 12/10/2020 18:54:54' prior: 50870841!
assertPositiveInteger: aNumber
	^ aNumber positive and: [ aNumber isInteger ]! !

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 18:54:55'!
FAILURE!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 18:54:55'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 18:54:55'!
FAILURE!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 18:54:55'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 18:54:55'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 18:54:55'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 18:54:55'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'AA 12/10/2020 18:54:55'!
PASSED!

!testRun: #RoomTest #test09 stamp: 'AA 12/10/2020 18:54:55'!
PASSED!

!testRun: #RoomTest #test10 stamp: 'AA 12/10/2020 18:54:55'!
PASSED!

!testRun: #RoomTest #test11 stamp: 'AA 12/10/2020 18:54:55'!
PASSED!
!Room methodsFor: 'validations' stamp: 'AA 12/10/2020 18:55:17' prior: 50875148!
assertPositiveInteger: aNumber
	^ aNumber strictlyPositive and: [ aNumber isInteger ]! !

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 18:55:18'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 18:55:18'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 18:55:18'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 18:55:18'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 18:55:18'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 18:55:18'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 18:55:18'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'AA 12/10/2020 18:55:18'!
PASSED!

!testRun: #RoomTest #test09 stamp: 'AA 12/10/2020 18:55:18'!
PASSED!

!testRun: #RoomTest #test10 stamp: 'AA 12/10/2020 18:55:18'!
PASSED!

!testRun: #RoomTest #test11 stamp: 'AA 12/10/2020 18:55:18'!
PASSED!
!Room methodsFor: 'validations' stamp: 'AA 12/10/2020 18:56:47'!
assertValidStageObjects: stageObjectsToValidate
	stageObjectsToValidate keys do: [ :aPosition | self assertPositionInBounds: aPosition ].! !

!methodRemoval: Room #validateStageObjectsPosition: stamp: 'AA 12/10/2020 18:56:50'!
validateStageObjectsPosition: stageObjectsToValidate
	stageObjectsToValidate keys do: [ :aPosition | self assertPositionInBounds: aPosition ].!
!Room methodsFor: 'initialization' stamp: 'AA 12/10/2020 18:57:00' prior: 50875103!
initializeWithWidth: aWidth andHeight: aHeight andStageObjects: initalStageObjects

	self assertValidWidth: aWidth.
	self assertValidHeight: aHeight.
	
	width := aWidth.
	height := aHeight.
	
	self assertValidStageObjects: initalStageObjects.

	stageObjects := initalStageObjects.! !

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 18:57:01'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 18:57:01'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 18:57:01'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 18:57:01'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 18:57:01'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 18:57:01'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 18:57:01'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'AA 12/10/2020 18:57:01'!
PASSED!

!testRun: #RoomTest #test09 stamp: 'AA 12/10/2020 18:57:01'!
PASSED!

!testRun: #RoomTest #test10 stamp: 'AA 12/10/2020 18:57:01'!
PASSED!

!testRun: #RoomTest #test11 stamp: 'AA 12/10/2020 18:57:01'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:58:39' prior: 50874480!
test08

	| stageObjects |
	
	stageObjects := Dictionary new.
	stageObjects at: -1@0 put: StageObject new.
	
	self
		should: [ self validRoomWithStageObjects: stageObjects ]
		raise: Error
		withMessageText: (Room invalidStageObjectPositionAt: -1@0)! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:58:51'!
test08test08StageObjectsAreWithinLeftBoundary

	| stageObjects |
	
	stageObjects := Dictionary new.
	stageObjects at: -1@0 put: StageObject new.
	
	self
		should: [ self validRoomWithStageObjects: stageObjects ]
		raise: Error
		withMessageText: (Room invalidStageObjectPositionAt: -1@0)! !

!methodRemoval: RoomTest #test08 stamp: 'AA 12/10/2020 18:58:51'!
test08

	| stageObjects |
	
	stageObjects := Dictionary new.
	stageObjects at: -1@0 put: StageObject new.
	
	self
		should: [ self validRoomWithStageObjects: stageObjects ]
		raise: Error
		withMessageText: (Room invalidStageObjectPositionAt: -1@0)!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:58:56'!
test08StageObjectsAreWithinLeftBoundary

	| stageObjects |
	
	stageObjects := Dictionary new.
	stageObjects at: -1@0 put: StageObject new.
	
	self
		should: [ self validRoomWithStageObjects: stageObjects ]
		raise: Error
		withMessageText: (Room invalidStageObjectPositionAt: -1@0)! !

!methodRemoval: RoomTest #test08test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 18:58:56'!
test08test08StageObjectsAreWithinLeftBoundary

	| stageObjects |
	
	stageObjects := Dictionary new.
	stageObjects at: -1@0 put: StageObject new.
	
	self
		should: [ self validRoomWithStageObjects: stageObjects ]
		raise: Error
		withMessageText: (Room invalidStageObjectPositionAt: -1@0)!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 18:59:24'!
test09StageObjectsAreWithinBottomBoundary

	| stageObjects |
	
	stageObjects := Dictionary new.
	stageObjects at: 0@-1 put: StageObject new.
	
	self
		should: [ self validRoomWithStageObjects: stageObjects ]
		raise: Error
		withMessageText: (Room invalidStageObjectPositionAt: 0@-1)! !

!methodRemoval: RoomTest #test09 stamp: 'AA 12/10/2020 18:59:24'!
test09

	| stageObjects |
	
	stageObjects := Dictionary new.
	stageObjects at: 0@-1 put: StageObject new.
	
	self
		should: [ self validRoomWithStageObjects: stageObjects ]
		raise: Error
		withMessageText: (Room invalidStageObjectPositionAt: 0@-1)!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 19:00:56'!
test10StageObjectsAreWithinRightBoundary

	| stageObjects |
	
	stageObjects := Dictionary new.
	stageObjects at: (self validRoomWidth)@0 put: StageObject new.
	
	self
		should: [ self validRoomWithStageObjects: stageObjects ]
		raise: Error
		withMessageText: (Room invalidStageObjectPositionAt: (self validRoomWidth)@0)! !

!methodRemoval: RoomTest #test10 stamp: 'AA 12/10/2020 19:00:56'!
test10

	| stageObjects |
	
	stageObjects := Dictionary new.
	stageObjects at: (self validRoomWidth)@0 put: StageObject new.
	
	self
		should: [ self validRoomWithStageObjects: stageObjects ]
		raise: Error
		withMessageText: (Room invalidStageObjectPositionAt: (self validRoomWidth)@0)!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 19:01:04'!
test11StageObjectsAreWithinTopBoundary

	| stageObjects |
	
	stageObjects := Dictionary new.
	stageObjects at: 0@(self validRoomHeight) put: StageObject new.
	
	self
		should: [ self validRoomWithStageObjects: stageObjects ]
		raise: Error
		withMessageText: (Room invalidStageObjectPositionAt: 0@(self validRoomHeight))! !

!methodRemoval: RoomTest #test11 stamp: 'AA 12/10/2020 19:01:04'!
test11

	| stageObjects |
	
	stageObjects := Dictionary new.
	stageObjects at: 0@(self validRoomHeight) put: StageObject new.
	
	self
		should: [ self validRoomWithStageObjects: stageObjects ]
		raise: Error
		withMessageText: (Room invalidStageObjectPositionAt: 0@(self validRoomHeight))!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 19:02:09'!
positionBeyondLeftBoundary
	^ -1@0! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 19:02:23'!
positionBeyondBottomBoundary
	^ 0@-1! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 19:03:04'!
positionBeyondTopBoundary
	^ 0@(self validRoomHeight)! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 19:03:37'!
positionBeyondRightBoundary
	^ self validRoomWidth @ 0! !

self validRoomWidth @ 0!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 19:03:45' prior: 50875415!
positionBeyondRightBoundary
	^ (self validRoomWidth) @ 0! !

(self validRoomWidth) @ 0!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 19:03:51' prior: 50875421!
positionBeyondRightBoundary
	^ (self validRoomWidth)@0! !

(self validRoomWidth)@0!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 19:05:14'!
assertStageObjectOutOfBoundaryThrowsError: aPosition

	| stageObjects |
	
	stageObjects := Dictionary new.
	stageObjects at: 0@(self validRoomHeight) put: StageObject new.
	
	self
		should: [ self validRoomWithStageObjects: stageObjects ]
		raise: Error
		withMessageText: (Room invalidStageObjectPositionAt: 0@(self validRoomHeight))! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 19:05:30' prior: 50875433!
assertStageObjectOutOfBoundaryThrowsError: anInvalidPosition

	| stageObjects |
	
	stageObjects := Dictionary new.
	stageObjects at: 0@(self validRoomHeight) put: StageObject new.
	
	self
		should: [ self validRoomWithStageObjects: stageObjects ]
		raise: Error
		withMessageText: (Room invalidStageObjectPositionAt: 0@(self validRoomHeight))! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 19:05:44' prior: 50875447!
assertStageObjectOutOfBoundaryThrowsError: anInvalidPosition

	| stageObjects |
	
	stageObjects := Dictionary new.
	stageObjects at: anInvalidPosition put: StageObject new.
	
	self
		should: [ self validRoomWithStageObjects: stageObjects ]
		raise: Error
		withMessageText: (Room invalidStageObjectPositionAt: anInvalidPosition)! !

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 19:05:47'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 19:05:47'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 19:05:47'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 19:05:47'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 19:05:47'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 19:05:47'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 19:05:47'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 19:05:47'!
PASSED!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 19:05:47'!
PASSED!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 19:05:47'!
PASSED!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 19:05:47'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 19:06:02'!
assertStageObjectOutOfBoundaryRaisesError: anInvalidPosition

	| stageObjects |
	
	stageObjects := Dictionary new.
	stageObjects at: anInvalidPosition put: StageObject new.
	
	self
		should: [ self validRoomWithStageObjects: stageObjects ]
		raise: Error
		withMessageText: (Room invalidStageObjectPositionAt: anInvalidPosition)! !

!methodRemoval: RoomTest #assertStageObjectOutOfBoundaryThrowsError: stamp: 'AA 12/10/2020 19:06:02'!
assertStageObjectOutOfBoundaryThrowsError: anInvalidPosition

	| stageObjects |
	
	stageObjects := Dictionary new.
	stageObjects at: anInvalidPosition put: StageObject new.
	
	self
		should: [ self validRoomWithStageObjects: stageObjects ]
		raise: Error
		withMessageText: (Room invalidStageObjectPositionAt: anInvalidPosition)!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 19:06:40' prior: 50875308!
test08StageObjectsAreWithinLeftBoundary
	
	self assertStageObjectOutOfBoundaryRaisesError: self positionBeyondLeftBoundary! !

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 19:06:40'!
PASSED!

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 19:06:40'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 19:06:40'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 19:06:40'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 19:06:40'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 19:06:40'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 19:06:40'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 19:06:40'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 19:06:40'!
PASSED!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 19:06:40'!
PASSED!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 19:06:40'!
PASSED!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 19:06:40'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 19:06:46' prior: 50875535!
test08StageObjectsAreWithinLeftBoundary
	self assertStageObjectOutOfBoundaryRaisesError: self positionBeyondLeftBoundary! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 19:07:31' prior: 50875579!
test08StageObjectsAreWithinLeftBoundary
	self assertStageObjectOutOfBoundaryRaisesError: self positionBeyondLeftBoundary! !

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 19:07:35'!
PASSED!

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 19:07:35'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 19:07:35'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 19:07:35'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 19:07:35'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 19:07:35'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 19:07:35'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 19:07:35'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 19:07:35'!
PASSED!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 19:07:35'!
PASSED!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 19:07:35'!
PASSED!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 19:07:35'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 19:07:47' prior: 50875332!
test09StageObjectsAreWithinBottomBoundary

	self assertStageObjectOutOfBoundaryRaisesError: self positionBeyondBottomBoundary! !

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 19:07:49'!
PASSED!

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 19:07:49'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 19:07:49'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 19:07:49'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 19:07:49'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 19:07:49'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 19:07:49'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 19:07:49'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 19:07:49'!
PASSED!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 19:07:49'!
PASSED!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 19:07:49'!
PASSED!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 19:07:49'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 19:07:58' prior: 50875354!
test10StageObjectsAreWithinRightBoundary

	self assertStageObjectOutOfBoundaryRaisesError: self positionBeyondRightBoundary! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 19:08:05' prior: 50875586!
test08StageObjectsAreWithinLeftBoundary

	self assertStageObjectOutOfBoundaryRaisesError: self positionBeyondLeftBoundary! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 19:08:19' prior: 50875378!
test11StageObjectsAreWithinTopBoundary
	
	self assertStageObjectOutOfBoundaryRaisesError: self positionBeyondTopBoundary! !

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 19:08:20'!
PASSED!

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 19:08:20'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 19:08:20'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 19:08:20'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 19:08:20'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 19:08:20'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 19:08:20'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 19:08:20'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 19:08:20'!
PASSED!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 19:08:20'!
PASSED!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 19:08:20'!
PASSED!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 19:08:20'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'AA 12/10/2020 19:10:59' prior: 50870660!
test07RoomStoresWidthAndHeight

	| room |
	room := self defaultRoom.

	self assert: 5 equals: room width.
	self assert: 8 equals: room height.! !
!RoomTest methodsFor: 'test objects' stamp: 'AA 12/10/2020 19:11:30'!
defaultRoom

	^ self validRoomWithStageObjects: Dictionary new. ! !

!methodRemoval: RoomTest #validRoom stamp: 'AA 12/10/2020 19:11:30'!
validRoom

	^ self validRoomWithStageObjects: Dictionary new. !
!RoomTest methodsFor: 'helpers' stamp: 'AA 12/10/2020 19:11:59' prior: 50875508!
assertStageObjectOutOfBoundaryRaisesError: anInvalidPosition

	| stageObjects |
	
	stageObjects := Dictionary new.
	stageObjects at: anInvalidPosition put: StageObject new.
	
	self
		should: [ self defaultRoomWithStageObjects: stageObjects ]
		raise: Error
		withMessageText: (Room invalidStageObjectPositionAt: anInvalidPosition)! !
!RoomTest methodsFor: 'test objects' stamp: 'AA 12/10/2020 19:12:08' prior: 50875739!
defaultRoom

	^ self defaultRoomWithStageObjects: Dictionary new. ! !
!RoomTest methodsFor: 'test objects' stamp: 'AA 12/10/2020 19:12:20'!
defaultRoomWithStageObjects: stageObjects

	^ Room
		width: self validRoomWidth
		height: self validRoomHeight
		stageObjects: stageObjects.! !

!methodRemoval: RoomTest #validRoomWithStageObjects: stamp: 'AA 12/10/2020 19:12:20'!
validRoomWithStageObjects: stageObjects

	^ Room
		width: self validRoomWidth
		height: self validRoomHeight
		stageObjects: stageObjects.!

----SNAPSHOT----(10 December 2020 19:12:41) CuisUniversity-4383.image priorSource: 17391793!

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 19:12:58'!
PASSED!

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 19:12:58'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 19:12:58'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 19:12:58'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 19:12:58'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 19:12:58'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 19:12:58'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 19:12:58'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 19:12:58'!
PASSED!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 19:12:58'!
PASSED!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 19:12:58'!
PASSED!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 19:12:58'!
PASSED!

!testRun: #BlockNodeTest #testItDoesNotSendsAGivenMessageToSelfWhenTheBlockIsEmpty stamp: 'AA 12/10/2020 19:13:01'!
PASSED!

!testRun: #BlockNodeTest #testItSendsAGivenMessageToSelfWhenItContainsAnStatementWithAMessageSendToSelf stamp: 'AA 12/10/2020 19:13:01'!
PASSED!

!testRun: #MessageNodeTest #testItDoesNotSendTheMessageToSelfWhenTheReceiverIsNotSelf stamp: 'AA 12/10/2020 19:13:01'!
PASSED!

!testRun: #MessageNodeTest #testItDoesNotSendTheMessageToSelfWhenTheReceiverIsSelfButTheSelectorIsDifferent stamp: 'AA 12/10/2020 19:13:01'!
PASSED!

!testRun: #MessageNodeTest #testItSendsTheMessageToSelfWhenTheReceiverIsSelf stamp: 'AA 12/10/2020 19:13:01'!
PASSED!

!testRun: #VariableNodeTest #testItDoesNotReferencesSelfWhenTheVariableNameIsNotSelf stamp: 'AA 12/10/2020 19:13:01'!
PASSED!

!testRun: #VariableNodeTest #testItReferencesSelfWhenTheVariableNameIsSelf stamp: 'AA 12/10/2020 19:13:01'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AA 12/10/2020 19:13:03'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AA 12/10/2020 19:13:03'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AA 12/10/2020 19:13:03'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AA 12/10/2020 19:13:03'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AA 12/10/2020 19:13:03'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AA 12/10/2020 19:13:03'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AA 12/10/2020 19:13:03'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AA 12/10/2020 19:13:03'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AA 12/10/2020 19:13:03'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AA 12/10/2020 19:13:03'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AA 12/10/2020 19:13:03'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AA 12/10/2020 19:13:03'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AA 12/10/2020 19:13:03'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AA 12/10/2020 19:13:03'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AA 12/10/2020 19:13:03'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 19:13:03'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 19:13:03'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 19:13:03'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 19:13:03'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 19:13:03'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 19:13:03'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 19:13:03'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 19:13:03'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 19:13:03'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 19:13:03'!
PASSED!

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 19:13:03'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 19:13:03'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 19:13:03'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 19:13:03'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 19:13:03'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 19:13:03'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 19:13:03'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 19:13:03'!
PASSED!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 19:13:03'!
PASSED!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 19:13:03'!
PASSED!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 19:13:03'!
PASSED!

----SNAPSHOT----(10 December 2020 19:13:07) CuisUniversity-4383.image priorSource: 17412178!
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'AA 12/10/2020 19:22:37'!
named: aName using: aBackpack in: aRoom at: aPosition heading: aCardinalPoint 
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading ! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'AA 12/10/2020 19:22:50' prior: 50875980!
named: aName using: aBackpack in: aRoom at: aPosition heading: aCardinalPoint 
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack in: aRoom at: aPosition heading: newHeading ! !

!classDefinition: #PlayableCharacter category: 'ISW1-2020-2C-2doParcial' stamp: 'AA 12/10/2020 19:23:27'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacter methodsFor: 'initialization' stamp: 'AA 12/10/2020 19:23:25'!
initializeNamed: aName using: aBackpack in: aRoom at: aPosition heading: aMarsRoverHeading 

	name := aName.
	backpack := aBackpack.
	room := aRoom.
	position := aPosition.
	heading := aMarsRoverHeading! !

!methodRemoval: PlayableCharacter #initializeNamed:using:at:heading: stamp: 'AA 12/10/2020 19:23:32'!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading 

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading!
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'AA 12/10/2020 19:23:42' prior: 50870024!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint 
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack in: nil at: aPosition heading: newHeading ! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 19:23:46'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 19:23:46'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 19:23:46'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 19:23:46'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 19:23:46'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 19:23:46'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 19:23:46'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 19:23:46'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 19:23:46'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 19:23:46'!
PASSED!
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 19:25:01'!
defaultRoom

	^ Backpack containingUpTo: 100 limitingPointsTo: 100! !

Object subclass: #TestObjectStore
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #TestObjectStore category: 'ISW1-2020-2C-2doParcial' stamp: 'AA 12/10/2020 19:26:00'!
Object subclass: #TestObjectStore
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRenamed: #TestObjectStore as: #TestObjectsStore stamp: 'AA 12/10/2020 19:26:11'!
Smalltalk renameClassNamed: #TestObjectStore as: #TestObjectsStore!
!TestObjectsStore class methodsFor: 'nil' stamp: 'AA 12/10/2020 19:26:24'!
defaultRoom
	! !

!methodRemoval: TestObjectsStore class #defaultRoom stamp: 'AA 12/10/2020 19:26:44'!
defaultRoom
	!
!TestObjectsStore methodsFor: 'nil' stamp: 'AA 12/10/2020 19:26:53'!
defaultRoom! !
!TestObjectsStore methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 19:26:56'!
defaultBackpack! !
!TestObjectsStore methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 19:27:39'!
defaultRoomWithStageObjects: stageObjects! !
!TestObjectsStore methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 19:28:35'!
positionBeyondBottomBoundary
	^ 0@-1! !
!TestObjectsStore methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 19:28:47' prior: 50876107!
defaultRoom

	^ self defaultRoomWithStageObjects: Dictionary new. ! !
!TestObjectsStore methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 19:28:55' prior: 50876115!
defaultRoomWithStageObjects: stageObjects

	^ Room
		width: self validRoomWidth
		height: self validRoomHeight
		stageObjects: stageObjects.! !
!TestObjectsStore methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 19:29:07'!
validRoomWidth
	^ 5! !
!TestObjectsStore methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 19:29:11'!
validRoomHeight
	^ 8! !
!TestObjectsStore methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 19:29:28'!
positionBeyondLeftBoundary
	^ -1@0! !
!TestObjectsStore methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 19:29:35'!
positionBeyondRightBoundary
	^ (self validRoomWidth)@0! !
!TestObjectsStore methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 19:29:43'!
positionBeyondTopBoundary
	^ 0@(self validRoomHeight)! !

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'AA 12/10/2020 19:30:21'!
TestCase subclass: #RoomTest
	instanceVariableNames: 'testObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'helpers' stamp: 'AA 12/10/2020 19:30:19' overrides: 16927572!
setUp
	testObjects := TestObjectsStore new.! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AA 12/10/2020 19:30:27'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AA 12/10/2020 19:30:27'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AA 12/10/2020 19:30:27'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AA 12/10/2020 19:30:27'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AA 12/10/2020 19:30:27'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AA 12/10/2020 19:30:27'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AA 12/10/2020 19:30:27'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AA 12/10/2020 19:30:27'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AA 12/10/2020 19:30:27'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AA 12/10/2020 19:30:27'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AA 12/10/2020 19:30:27'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AA 12/10/2020 19:30:27'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AA 12/10/2020 19:30:27'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AA 12/10/2020 19:30:27'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AA 12/10/2020 19:30:27'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 19:30:27'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 19:30:27'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 19:30:27'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 19:30:27'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 19:30:27'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 19:30:27'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 19:30:27'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 19:30:27'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 19:30:27'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 19:30:27'!
PASSED!

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 19:30:27'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 19:30:27'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 19:30:27'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 19:30:27'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 19:30:27'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 19:30:27'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 19:30:27'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 19:30:27'!
PASSED!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 19:30:27'!
PASSED!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 19:30:27'!
PASSED!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 19:30:27'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'AA 12/10/2020 19:30:40' prior: 50875732!
test07RoomStoresWidthAndHeight

	| room |
	room := testObjects defaultRoom.

	self assert: 5 equals: room width.
	self assert: 8 equals: room height.! !

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 19:30:42'!
PASSED!

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 19:30:42'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 19:30:42'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 19:30:42'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 19:30:42'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 19:30:42'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 19:30:42'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 19:30:42'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 19:30:42'!
PASSED!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 19:30:42'!
PASSED!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 19:30:42'!
PASSED!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 19:30:42'!
PASSED!
!RoomTest methodsFor: 'helpers' stamp: 'AA 12/10/2020 19:30:54' prior: 50875748!
assertStageObjectOutOfBoundaryRaisesError: anInvalidPosition

	| stageObjects |
	
	stageObjects := Dictionary new.
	stageObjects at: anInvalidPosition put: StageObject new.
	
	self
		should: [ testObjects defaultRoomWithStageObjects: stageObjects ]
		raise: Error
		withMessageText: (Room invalidStageObjectPositionAt: anInvalidPosition)! !

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 19:31:02'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 19:31:02'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 19:31:02'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 19:31:02'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 19:31:02'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 19:31:02'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 19:31:02'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 19:31:02'!
PASSED!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 19:31:02'!
PASSED!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 19:31:02'!
PASSED!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 19:31:02'!
PASSED!

!methodRemoval: RoomTest #defaultRoom stamp: 'AA 12/10/2020 19:31:06'!
defaultRoom

	^ self defaultRoomWithStageObjects: Dictionary new. !

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 19:31:08'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 19:31:08'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 19:31:08'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 19:31:08'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 19:31:08'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 19:31:08'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 19:31:08'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 19:31:08'!
PASSED!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 19:31:08'!
PASSED!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 19:31:08'!
PASSED!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 19:31:08'!
PASSED!

!methodRemoval: RoomTest #defaultRoomWithStageObjects: stamp: 'AA 12/10/2020 19:31:09'!
defaultRoomWithStageObjects: stageObjects

	^ Room
		width: self validRoomWidth
		height: self validRoomHeight
		stageObjects: stageObjects.!

!methodRemoval: RoomTest #positionBeyondBottomBoundary stamp: 'AA 12/10/2020 19:31:11'!
positionBeyondBottomBoundary
	^ 0@-1!

!methodRemoval: RoomTest #positionBeyondLeftBoundary stamp: 'AA 12/10/2020 19:31:12'!
positionBeyondLeftBoundary
	^ -1@0!

!methodRemoval: RoomTest #positionBeyondRightBoundary stamp: 'AA 12/10/2020 19:31:13'!
positionBeyondRightBoundary
	^ (self validRoomWidth)@0!

!methodRemoval: RoomTest #positionBeyondTopBoundary stamp: 'AA 12/10/2020 19:31:14'!
positionBeyondTopBoundary
	^ 0@(self validRoomHeight)!

!methodRemoval: RoomTest #validRoomHeight stamp: 'AA 12/10/2020 19:31:15'!
validRoomHeight
	^ 8!

!methodRemoval: RoomTest #validRoomWidth stamp: 'AA 12/10/2020 19:31:16'!
validRoomWidth
	^ 5!

----SNAPSHOT----(10 December 2020 19:31:23) CuisUniversity-4383.image priorSource: 17418408!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AA 12/10/2020 19:31:28'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AA 12/10/2020 19:31:28'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AA 12/10/2020 19:31:28'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AA 12/10/2020 19:31:28'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AA 12/10/2020 19:31:28'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AA 12/10/2020 19:31:28'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AA 12/10/2020 19:31:28'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AA 12/10/2020 19:31:28'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AA 12/10/2020 19:31:28'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AA 12/10/2020 19:31:28'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AA 12/10/2020 19:31:28'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AA 12/10/2020 19:31:28'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AA 12/10/2020 19:31:28'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AA 12/10/2020 19:31:28'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AA 12/10/2020 19:31:28'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 19:31:28'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 19:31:28'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 19:31:28'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 19:31:28'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 19:31:28'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 19:31:28'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 19:31:28'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 19:31:28'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 19:31:28'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 19:31:28'!
PASSED!

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 19:31:28'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 19:31:28'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 19:31:28'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 19:31:28'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 19:31:28'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 19:31:28'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 19:31:28'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 19:31:28'!
ERROR!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 19:31:28'!
ERROR!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 19:31:28'!
ERROR!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 19:31:28'!
ERROR!
!RoomTest methodsFor: 'tests' stamp: 'AA 12/10/2020 19:31:43' prior: 50875630!
test09StageObjectsAreWithinBottomBoundary

	self assertStageObjectOutOfBoundaryRaisesError: testObjects positionBeyondBottomBoundary! !
!RoomTest methodsFor: 'tests' stamp: 'AA 12/10/2020 19:31:45' prior: 50875674!
test10StageObjectsAreWithinRightBoundary

	self assertStageObjectOutOfBoundaryRaisesError: testObjects positionBeyondRightBoundary! !
!RoomTest methodsFor: 'tests' stamp: 'AA 12/10/2020 19:31:49' prior: 50875688!
test11StageObjectsAreWithinTopBoundary
	
	self assertStageObjectOutOfBoundaryRaisesError: testObjects positionBeyondTopBoundary! !

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 19:31:49'!
PASSED!

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 19:31:49'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 19:31:49'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 19:31:49'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 19:31:49'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 19:31:49'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 19:31:49'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 19:31:49'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 19:31:49'!
ERROR!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 19:31:49'!
PASSED!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 19:31:49'!
PASSED!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 19:31:49'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 19:31:49'!
ERROR!
!RoomTest methodsFor: 'tests' stamp: 'AA 12/10/2020 19:31:59' prior: 50875681!
test08StageObjectsAreWithinLeftBoundary

	self assertStageObjectOutOfBoundaryRaisesError: testObjects positionBeyondLeftBoundary! !

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 19:31:59'!
PASSED!

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 19:31:59'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 19:31:59'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 19:31:59'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 19:31:59'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 19:31:59'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 19:31:59'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 19:31:59'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 19:31:59'!
PASSED!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 19:31:59'!
PASSED!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 19:31:59'!
PASSED!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 19:31:59'!
PASSED!

----SNAPSHOT----(10 December 2020 19:32:03) CuisUniversity-4383.image priorSource: 17433870!
!TestObjectsStore methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 19:32:31' prior: 50876111!
defaultBackpack

	^ Backpack containingUpTo: 100 limitingPointsTo: 100 ! !

!methodRemoval: PlayableCharacterTest #defaultRoom stamp: 'AA 12/10/2020 19:32:40'!
defaultRoom

	^ Backpack containingUpTo: 100 limitingPointsTo: 100!
!PlayableCharacterTest methodsFor: 'helpers' stamp: 'AA 12/10/2020 19:33:03' overrides: 16927572!
setUp! !

!classDefinition: #PlayableCharacterTest category: 'ISW1-2020-2C-2doParcial' stamp: 'AA 12/10/2020 19:33:14'!
TestCase subclass: #PlayableCharacterTest
	instanceVariableNames: 'testObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacterTest methodsFor: 'helpers' stamp: 'AA 12/10/2020 19:33:12' prior: 50876709 overrides: 16927572!
setUp
	testObjects := TestObjectsStore new.! !
!PlayableCharacterTest methodsFor: 'helpers' stamp: 'AA 12/10/2020 19:33:25' prior: 50869763!
defaultBackpack

	^ testObjects defaultBackpack ! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 19:33:26'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 19:33:26'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 19:33:26'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 19:33:26'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 19:33:26'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 19:33:26'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 19:33:26'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 19:33:26'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 19:33:26'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 19:33:26'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 19:36:16' prior: 50869624!
test01_forwardWhenHeadingNorthIncrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack in: testObjects defaultRoom at: 1@2 heading: #North .

	playableCharacter moveForward.

	self assert: (playableCharacter isAt: 1@3 heading: #North)! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 19:36:19'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 19:36:19'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 19:36:19'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 19:36:19'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 19:36:19'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 19:36:19'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 19:36:19'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 19:36:19'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 19:36:19'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 19:36:19'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 19:36:19'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 19:36:23' prior: 50869636!
test02_backwardWhenHeadingNorthDecrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack in: testObjects defaultRoom at: 1@2 heading: #North .

	playableCharacter moveBackward.

	self assert: (playableCharacter isAt: 1@1 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 19:36:26' prior: 50869648!
test03_rotateRightWhenHeadingNorthHeadsEast

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack in: testObjects defaultRoom at: 1@2 heading: #North .

	playableCharacter rotateRight.

	self assert: (playableCharacter isAt: 1@2 heading: #East)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 19:36:30' prior: 50869659!
test04_rotateLeftWhenHeadingNorthHeadsWest

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack in: testObjects defaultRoom at: 1@2 heading: #North .

	playableCharacter rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #West)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 19:36:33' prior: 50869670!
test05_movingWhenHeadingEastWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack in: testObjects defaultRoom at: 1@2 heading: #East .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 2@2 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 19:36:36' prior: 50869684!
test06_movingWhenHeadingSouthWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack in: testObjects defaultRoom at: 1@2 heading: #South .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@1 heading: #East)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 19:36:40' prior: 50869698!
test07_movingWhenHeadingWestWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack in: testObjects defaultRoom at: 2@2 heading: #West .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #South)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 19:36:46' prior: 50869712!
test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid

	self
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack in: testObjects defaultRoom at: 1@2 heading: #X ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: PlayableCharacter invalidCardinalPointErrorDescription equals: anError messageText ]! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 19:36:54' prior: 50869725!
test09_canTakePortableObjects

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack in: testObjects defaultRoom at: 2@2 heading: #West .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 19:36:57' prior: 50870563!
test10_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| playableCharacter paper key |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack in: testObjects defaultRoom at: 2@2 heading: #West .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 19:36:58'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 19:36:58'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 19:36:58'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 19:36:58'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 19:36:58'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 19:36:58'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 19:36:58'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 19:36:58'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 19:36:58'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 19:36:58'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 19:36:58'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 19:37:01' prior: 50876937!
test10_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| playableCharacter paper key |

	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: testObjects defaultRoom at: 2@2 heading: #West .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 19:37:04' prior: 50876923!
test09_canTakePortableObjects

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: testObjects defaultRoom at: 2@2 heading: #West .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 19:37:07' prior: 50876909!
test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid

	self
		should: [PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: testObjects defaultRoom at: 1@2 heading: #X ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: PlayableCharacter invalidCardinalPointErrorDescription equals: anError messageText ]! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 19:37:09' prior: 50876894!
test07_movingWhenHeadingWestWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: testObjects defaultRoom at: 2@2 heading: #West .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #South)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 19:37:12' prior: 50876879!
test06_movingWhenHeadingSouthWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: testObjects defaultRoom at: 1@2 heading: #South .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@1 heading: #East)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 19:37:15' prior: 50876864!
test05_movingWhenHeadingEastWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: testObjects defaultRoom at: 1@2 heading: #East .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 2@2 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 19:37:17' prior: 50876851!
test04_rotateLeftWhenHeadingNorthHeadsWest

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: testObjects defaultRoom at: 1@2 heading: #North .

	playableCharacter rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #West)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 19:37:19' prior: 50876838!
test03_rotateRightWhenHeadingNorthHeadsEast

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: testObjects defaultRoom at: 1@2 heading: #North .

	playableCharacter rotateRight.

	self assert: (playableCharacter isAt: 1@2 heading: #East)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 19:37:21' prior: 50876825!
test02_backwardWhenHeadingNorthDecrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: testObjects defaultRoom at: 1@2 heading: #North .

	playableCharacter moveBackward.

	self assert: (playableCharacter isAt: 1@1 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 19:37:24' prior: 50876770!
test01_forwardWhenHeadingNorthIncrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: testObjects defaultRoom at: 1@2 heading: #North .

	playableCharacter moveForward.

	self assert: (playableCharacter isAt: 1@3 heading: #North)! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 19:37:25'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 19:37:25'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 19:37:25'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 19:37:25'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 19:37:25'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 19:37:25'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 19:37:25'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 19:37:25'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 19:37:25'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 19:37:25'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 19:37:25'!
PASSED!

!methodRemoval: PlayableCharacterTest #defaultBackpack stamp: 'AA 12/10/2020 19:37:29'!
defaultBackpack

	^ testObjects defaultBackpack !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 19:37:31'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 19:37:31'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 19:37:31'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 19:37:31'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 19:37:31'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 19:37:31'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 19:37:31'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 19:37:31'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 19:37:31'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 19:37:31'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 19:38:44'!
test11_cannotMoveForwardWhenFacingStageObject

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: testObjects defaultRoom at: 1@2 heading: #North .

	playableCharacter moveForward.

	self assert: (playableCharacter isAt: 1@3 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 19:40:38' prior: 50877242!
test11_cannotMoveForwardWhenFacingStageObject

	| playableCharacter room stageObjects |
	
	stageObjects := Dictionary new.
	stageObjects at: 1@3.
	room := testObjects defaultRoomWithStageObjects: stageObjects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: testObjects defaultRoom at: 1@2 heading: #North .

	playableCharacter moveForward.

	self assert: (playableCharacter isAt: 1@3 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 19:40:52' prior: 50877255!
test11_cannotMoveForwardWhenFacingStageObject

	| playableCharacter room stageObjects |
	
	stageObjects := Dictionary new.
	stageObjects at: 1@3.
	room := testObjects defaultRoomWithStageObjects: stageObjects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@2 heading: #North .

	playableCharacter moveForward.

	self assert: (playableCharacter isAt: 1@3 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 19:41:37' prior: 50877272!
test11_cannotMoveForwardWhenFacingStageObject

	| playableCharacter room stageObjects |
	
	stageObjects := Dictionary new.
	stageObjects at: 1@3.
	room := testObjects defaultRoomWithStageObjects: stageObjects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@2 heading: #North .

	self
		should: [ playableCharacter moveForward ]
		raise: Error
		withMessageText: ''.

	self assert: (playableCharacter isAt: 1@2 heading: #North)! !
!TestObjectsStore methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 19:42:38'!
roomWithStageObjectAt: aPosition

	| stageObjects |
	stageObjects := Dictionary new.
	stageObjects at: aPosition put: StageObject new.

	^ Room
		width: self validRoomWidth
		height: self validRoomHeight
		stageObjects: stageObjects.! !
!TestObjectsStore methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 19:42:42' prior: 50877307!
roomWithStageObjectAt: aPosition

	| stageObjects |

	stageObjects := Dictionary new.
	stageObjects at: aPosition put: StageObject new.

	^ Room
		width: self validRoomWidth
		height: self validRoomHeight
		stageObjects: stageObjects.! !

!methodRemoval: TestObjectsStore #defaultRoomWithStageObjects: stamp: 'AA 12/10/2020 19:42:50'!
defaultRoomWithStageObjects: stageObjects

	^ Room
		width: self validRoomWidth
		height: self validRoomHeight
		stageObjects: stageObjects.!
!TestObjectsStore methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 19:43:10' prior: 50876125!
defaultRoom

	! !
!TestObjectsStore methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 19:43:26' prior: 50877337!
defaultRoom

	^ Room
		width: self validRoomWidth
		height: self validRoomHeight
		stageObjects: Dictionary new.! !
!RoomTest methodsFor: 'helpers' stamp: 'AA 12/10/2020 19:44:03' prior: 50876344!
assertStageObjectOutOfBoundaryRaisesError: anInvalidPosition

	self
		should: [ testObjects roomWithStageObjectAt: anInvalidPosition ]
		raise: Error
		withMessageText: (Room invalidStageObjectPositionAt: anInvalidPosition)! !

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 19:44:22'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 19:44:22'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 19:44:22'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 19:44:22'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 19:44:22'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 19:44:22'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 19:44:22'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 19:44:22'!
PASSED!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 19:44:22'!
PASSED!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 19:44:22'!
PASSED!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 19:44:22'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AA 12/10/2020 19:44:24'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AA 12/10/2020 19:44:24'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AA 12/10/2020 19:44:24'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AA 12/10/2020 19:44:24'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AA 12/10/2020 19:44:24'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AA 12/10/2020 19:44:24'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AA 12/10/2020 19:44:24'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AA 12/10/2020 19:44:24'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AA 12/10/2020 19:44:24'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AA 12/10/2020 19:44:24'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AA 12/10/2020 19:44:24'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AA 12/10/2020 19:44:24'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AA 12/10/2020 19:44:24'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AA 12/10/2020 19:44:24'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AA 12/10/2020 19:44:24'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 19:44:24'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 19:44:24'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 19:44:24'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 19:44:24'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 19:44:24'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 19:44:24'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 19:44:24'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 19:44:24'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 19:44:24'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 19:44:24'!
PASSED!

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardWhenFacingStageObject stamp: 'AA 12/10/2020 19:44:24'!
ERROR!

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 19:44:24'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 19:44:24'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 19:44:24'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 19:44:24'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 19:44:24'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 19:44:24'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 19:44:24'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 19:44:24'!
PASSED!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 19:44:24'!
PASSED!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 19:44:24'!
PASSED!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 19:44:24'!
PASSED!

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardWhenFacingStageObject stamp: 'AA 12/10/2020 19:44:24'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 19:44:50' prior: 50877289!
test11_cannotMoveForwardWhenFacingStageObject

	| playableCharacter room stageObjects |

	room := testObjects roomWithStageObjectAt: 1@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@2 heading: #North .

	self
		should: [ playableCharacter moveForward ]
		raise: Error
		withMessageText: ''.

	self assert: (playableCharacter isAt: 1@2 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 19:45:31' prior: 50877526!
test11_cannotMoveForwardWhenFacingStageObject

	| playableCharacter room |

	room := testObjects roomWithStageObjectAt: 1@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@2 heading: #North .

	self
		should: [ playableCharacter moveForward ]
		raise: Error
		withMessageText: ''.

	self assert: (playableCharacter isAt: 1@2 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 19:48:25' prior: 50877542!
test11_cannotMoveForwardWhenFacingStageObject

	| playableCharacter room |

	room := testObjects roomWithStageObjectAt: 1@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@2 heading: #North .

	self
		should: [ playableCharacter moveForward ]
		raise: Error
		withMessageText: Room positionBlockedByStageObjectErrorDescription.

	self assert: (playableCharacter isAt: 1@2 heading: #North)! !
!Room class methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 19:49:53'!
positionHasStageObjectErrorDescription: aPoint 
	^ aPoint asString, ' has a stage object.'! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 19:50:11' prior: 50877558!
test11_cannotMoveForwardWhenFacingStageObject

	| playableCharacter room |

	room := testObjects roomWithStageObjectAt: 1@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@2 heading: #North .

	self
		should: [ playableCharacter moveForward ]
		raise: Error
		withMessageText: (Room positionHasStageObjectErrorDescription: 1@3).

	self assert: (playableCharacter isAt: 1@2 heading: #North)! !

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardWhenFacingStageObject stamp: 'AA 12/10/2020 19:50:12'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'AA 12/10/2020 19:51:09' prior: 50869984!
moveForward
	| destination |
	destination := position + heading forwardPoint.
	room assertCanMoveTo: destination.
	position := destination.! !
!Room methodsFor: 'validations' stamp: 'AA 12/10/2020 19:52:43'!
assertCanMoveTo: aPosition
	self error: (self class cannotMoveToPositionErrorDescription: aPosition).! !
!Room class methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 19:52:57'!
cannotMoveToPositionErrorDescription: aPoint 
	^ 'Cannot move to ', aPoint asString! !

!methodRemoval: Room class #positionHasStageObjectErrorDescription: stamp: 'AA 12/10/2020 19:52:59'!
positionHasStageObjectErrorDescription: aPoint 
	^ aPoint asString, ' has a stage object.'!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 19:53:20' prior: 50877581!
test11_cannotMoveForwardWhenFacingStageObject

	| playableCharacter room |

	room := testObjects roomWithStageObjectAt: 1@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@2 heading: #North .

	self
		should: [ playableCharacter moveForward ]
		raise: Error
		withMessageText: (Room cannotMoveToPositionErrorDescription: 1@3).

	self assert: (playableCharacter isAt: 1@2 heading: #North)! !

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardWhenFacingStageObject stamp: 'AA 12/10/2020 19:53:22'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 19:53:22'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 19:53:22'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 19:53:22'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 19:53:22'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 19:53:22'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 19:53:22'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 19:53:22'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 19:53:22'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 19:53:22'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 19:53:22'!
PASSED!

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardWhenFacingStageObject stamp: 'AA 12/10/2020 19:53:22'!
PASSED!

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardWhenFacingStageObject stamp: 'AA 12/10/2020 19:53:27'!
PASSED!
!Room methodsFor: 'validations' stamp: 'AA 12/10/2020 19:55:10' prior: 50877609!
assertCanMoveTo: aPosition
	(stageObjects includesKey: aPosition) ifTrue: [ self error: (self class cannotMoveToPositionErrorDescription: aPosition) ].! !

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 19:55:11'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 19:55:11'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 19:55:11'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 19:55:11'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 19:55:11'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 19:55:11'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 19:55:11'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 19:55:11'!
PASSED!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 19:55:11'!
PASSED!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 19:55:11'!
PASSED!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 19:55:11'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 19:55:14'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 19:55:14'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 19:55:14'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 19:55:14'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 19:55:14'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 19:55:14'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 19:55:14'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 19:55:14'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 19:55:14'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 19:55:14'!
PASSED!

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardWhenFacingStageObject stamp: 'AA 12/10/2020 19:55:14'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 19:55:36'!
test12_cannotMoveBackwardWhenFacingStageObject

	| playableCharacter room |

	room := testObjects roomWithStageObjectAt: 1@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@2 heading: #North .

	self
		should: [ playableCharacter moveForward ]
		raise: Error
		withMessageText: (Room cannotMoveToPositionErrorDescription: 1@3).

	self assert: (playableCharacter isAt: 1@2 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 19:56:58' prior: 50877778!
test12_cannotMoveBackwardWhenFacingStageObject

	| playableCharacter room |

	room := testObjects roomWithStageObjectAt: 1@1.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@2 heading: #North .

	self
		should: [ playableCharacter moveBackward ]
		raise: Error
		withMessageText: (Room cannotMoveToPositionErrorDescription: 1@1).

	self assert: (playableCharacter isAt: 1@2 heading: #North)! !

!testRun: #PlayableCharacterTest #test12_cannotMoveBackwardWhenFacingStageObject stamp: 'AA 12/10/2020 19:57:01'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'AA 12/10/2020 19:57:32' prior: 50869979!
moveBackward
	| destination |
	destination := position - heading forwardPoint.
	room assertCanMoveTo: destination.
	position := destination.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 19:57:37'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 19:57:37'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 19:57:37'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 19:57:37'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 19:57:37'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 19:57:37'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 19:57:37'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 19:57:37'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 19:57:37'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 19:57:37'!
PASSED!

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardWhenFacingStageObject stamp: 'AA 12/10/2020 19:57:37'!
PASSED!

!testRun: #PlayableCharacterTest #test12_cannotMoveBackwardWhenFacingStageObject stamp: 'AA 12/10/2020 19:57:37'!
PASSED!
!PlayableCharacter methodsFor: 'moving' stamp: 'AA 12/10/2020 19:57:56'!
moveTo: aPosition
	room assertCanMoveTo: aPosition.
	position := aPosition.! !
!PlayableCharacter methodsFor: 'moving' stamp: 'AA 12/10/2020 19:58:13' prior: 50877602!
moveForward

	self moveTo: [ position + heading forwardPoint ].! !
!PlayableCharacter methodsFor: 'moving' stamp: 'AA 12/10/2020 19:58:32' prior: 50877816!
moveBackward

	self moveTo: [ position - heading forwardPoint ].! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 19:58:41'!
FAILURE!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 19:58:41'!
FAILURE!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 19:58:41'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 19:58:41'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 19:58:41'!
FAILURE!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 19:58:41'!
FAILURE!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 19:58:41'!
FAILURE!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 19:58:41'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 19:58:41'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 19:58:41'!
PASSED!

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardWhenFacingStageObject stamp: 'AA 12/10/2020 19:58:41'!
FAILURE!

!testRun: #PlayableCharacterTest #test12_cannotMoveBackwardWhenFacingStageObject stamp: 'AA 12/10/2020 19:58:41'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'AA 12/10/2020 19:59:08' prior: 50877875!
moveForward

	self moveTo: (position + heading forwardPoint).! !
!PlayableCharacter methodsFor: 'moving' stamp: 'AA 12/10/2020 19:59:16' prior: 50877880!
moveBackward

	self moveTo: (position - heading forwardPoint)! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 19:59:17'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 19:59:17'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 19:59:17'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 19:59:17'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 19:59:17'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 19:59:17'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 19:59:17'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 19:59:17'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 19:59:17'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 19:59:17'!
PASSED!

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardWhenFacingStageObject stamp: 'AA 12/10/2020 19:59:17'!
PASSED!

!testRun: #PlayableCharacterTest #test12_cannotMoveBackwardWhenFacingStageObject stamp: 'AA 12/10/2020 19:59:17'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AA 12/10/2020 19:59:21'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AA 12/10/2020 19:59:21'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AA 12/10/2020 19:59:21'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AA 12/10/2020 19:59:21'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AA 12/10/2020 19:59:21'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AA 12/10/2020 19:59:21'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AA 12/10/2020 19:59:21'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AA 12/10/2020 19:59:21'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AA 12/10/2020 19:59:21'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AA 12/10/2020 19:59:21'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AA 12/10/2020 19:59:21'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AA 12/10/2020 19:59:21'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AA 12/10/2020 19:59:21'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AA 12/10/2020 19:59:21'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AA 12/10/2020 19:59:21'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 19:59:21'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 19:59:21'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 19:59:21'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 19:59:21'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 19:59:21'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 19:59:21'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 19:59:21'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 19:59:21'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 19:59:21'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 19:59:21'!
PASSED!

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardWhenFacingStageObject stamp: 'AA 12/10/2020 19:59:21'!
PASSED!

!testRun: #PlayableCharacterTest #test12_cannotMoveBackwardWhenFacingStageObject stamp: 'AA 12/10/2020 19:59:21'!
PASSED!

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 19:59:21'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 19:59:21'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 19:59:21'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 19:59:21'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 19:59:21'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 19:59:21'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 19:59:21'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 19:59:21'!
PASSED!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 19:59:21'!
PASSED!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 19:59:21'!
PASSED!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 19:59:21'!
PASSED!

----SNAPSHOT----(10 December 2020 19:59:26) CuisUniversity-4383.image priorSource: 17441377!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 20:01:58'!
test12_cannotMoveBackwardIfStageObjectBehinf

	| playableCharacter room |

	room := testObjects roomWithStageObjectAt: 1@1.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@2 heading: #North .

	self
		should: [ playableCharacter moveBackward ]
		raise: Error
		withMessageText: (Room cannotMoveToPositionErrorDescription: 1@1).

	self assert: (playableCharacter isAt: 1@2 heading: #North)! !

!methodRemoval: PlayableCharacterTest #test12_cannotMoveBackwardWhenFacingStageObject stamp: 'AA 12/10/2020 20:01:58'!
test12_cannotMoveBackwardWhenFacingStageObject

	| playableCharacter room |

	room := testObjects roomWithStageObjectAt: 1@1.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@2 heading: #North .

	self
		should: [ playableCharacter moveBackward ]
		raise: Error
		withMessageText: (Room cannotMoveToPositionErrorDescription: 1@1).

	self assert: (playableCharacter isAt: 1@2 heading: #North)!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 20:02:03'!
test12_cannotMoveBackwardIfStageObjectBehind

	| playableCharacter room |

	room := testObjects roomWithStageObjectAt: 1@1.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@2 heading: #North .

	self
		should: [ playableCharacter moveBackward ]
		raise: Error
		withMessageText: (Room cannotMoveToPositionErrorDescription: 1@1).

	self assert: (playableCharacter isAt: 1@2 heading: #North)! !

!methodRemoval: PlayableCharacterTest #test12_cannotMoveBackwardIfStageObjectBehinf stamp: 'AA 12/10/2020 20:02:03'!
test12_cannotMoveBackwardIfStageObjectBehinf

	| playableCharacter room |

	room := testObjects roomWithStageObjectAt: 1@1.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@2 heading: #North .

	self
		should: [ playableCharacter moveBackward ]
		raise: Error
		withMessageText: (Room cannotMoveToPositionErrorDescription: 1@1).

	self assert: (playableCharacter isAt: 1@2 heading: #North)!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 20:02:12'!
test12_cannotMoveBackwardIfThereIsStageObjectBehind

	| playableCharacter room |

	room := testObjects roomWithStageObjectAt: 1@1.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@2 heading: #North .

	self
		should: [ playableCharacter moveBackward ]
		raise: Error
		withMessageText: (Room cannotMoveToPositionErrorDescription: 1@1).

	self assert: (playableCharacter isAt: 1@2 heading: #North)! !

!methodRemoval: PlayableCharacterTest #test12_cannotMoveBackwardIfStageObjectBehind stamp: 'AA 12/10/2020 20:02:12'!
test12_cannotMoveBackwardIfStageObjectBehind

	| playableCharacter room |

	room := testObjects roomWithStageObjectAt: 1@1.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@2 heading: #North .

	self
		should: [ playableCharacter moveBackward ]
		raise: Error
		withMessageText: (Room cannotMoveToPositionErrorDescription: 1@1).

	self assert: (playableCharacter isAt: 1@2 heading: #North)!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 20:03:04'!
test11_cannotMoveForwardCollidingOnStageObject

	| playableCharacter room |

	room := testObjects roomWithStageObjectAt: 1@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@2 heading: #North .

	self
		should: [ playableCharacter moveForward ]
		raise: Error
		withMessageText: (Room cannotMoveToPositionErrorDescription: 1@3).

	self assert: (playableCharacter isAt: 1@2 heading: #North)! !

!methodRemoval: PlayableCharacterTest #test11_cannotMoveForwardWhenFacingStageObject stamp: 'AA 12/10/2020 20:03:04'!
test11_cannotMoveForwardWhenFacingStageObject

	| playableCharacter room |

	room := testObjects roomWithStageObjectAt: 1@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@2 heading: #North .

	self
		should: [ playableCharacter moveForward ]
		raise: Error
		withMessageText: (Room cannotMoveToPositionErrorDescription: 1@3).

	self assert: (playableCharacter isAt: 1@2 heading: #North)!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 20:03:10'!
test12_cannotMoveBackwardCollidingOnStageObject

	| playableCharacter room |

	room := testObjects roomWithStageObjectAt: 1@1.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@2 heading: #North .

	self
		should: [ playableCharacter moveBackward ]
		raise: Error
		withMessageText: (Room cannotMoveToPositionErrorDescription: 1@1).

	self assert: (playableCharacter isAt: 1@2 heading: #North)! !

!methodRemoval: PlayableCharacterTest #test12_cannotMoveBackwardIfThereIsStageObjectBehind stamp: 'AA 12/10/2020 20:03:10'!
test12_cannotMoveBackwardIfThereIsStageObjectBehind

	| playableCharacter room |

	room := testObjects roomWithStageObjectAt: 1@1.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@2 heading: #North .

	self
		should: [ playableCharacter moveBackward ]
		raise: Error
		withMessageText: (Room cannotMoveToPositionErrorDescription: 1@1).

	self assert: (playableCharacter isAt: 1@2 heading: #North)!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 20:03:26'!
test13_cannotMoveForwardCollidingOnMapBoundary

	| playableCharacter room |

	room := testObjects roomWithStageObjectAt: 1@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@2 heading: #North .

	self
		should: [ playableCharacter moveForward ]
		raise: Error
		withMessageText: (Room cannotMoveToPositionErrorDescription: 1@3).

	self assert: (playableCharacter isAt: 1@2 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 20:05:33' prior: 50878300!
test13_cannotMoveForwardCollidingOnMapBoundary

	| playableCharacter room |

	room := testObjects defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: room topLeft heading: #North .

	self
		should: [ playableCharacter moveForward ]
		raise: Error
		withMessageText: (Room cannotMoveToPositionErrorDescription: room).

	self assert: (playableCharacter isAt: 1@2 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 20:05:40' prior: 50878317!
test13_cannotMoveForwardCollidingOnMapBoundary

	| playableCharacter room |

	room := testObjects defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: room topRight heading: #North .

	self
		should: [ playableCharacter moveForward ]
		raise: Error
		withMessageText: (Room cannotMoveToPositionErrorDescription: room).

	self assert: (playableCharacter isAt: 1@2 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 20:06:25' prior: 50878334!
test13_cannotMoveForwardCollidingOnMapBoundary

	| playableCharacter room position |

	room := testObjects defaultRoom.
	position := room topRight.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: position heading: #North .

	self
		should: [ playableCharacter moveForward ]
		raise: Error
		withMessageText: (Room cannotMoveToPositionErrorDescription: (position + 0@1)).

	self assert: (playableCharacter isAt: position heading: #North)! !

!testRun: #PlayableCharacterTest #test13_cannotMoveForwardCollidingOnMapBoundary stamp: 'AA 12/10/2020 20:06:31'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 20:06:43' prior: 50878351!
test13_cannotMoveForwardCollidingOnMapBoundary

	| playableCharacter room position |

	room := testObjects defaultRoom.
	position := room topRight.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: position heading: #North .

	self
		should: [ playableCharacter moveForward ]
		raise: Error
		withMessageText: (Room cannotMoveToPositionErrorDescription: position + (0@1)).

	self assert: (playableCharacter isAt: position heading: #North)! !

!testRun: #PlayableCharacterTest #test13_cannotMoveForwardCollidingOnMapBoundary stamp: 'AA 12/10/2020 20:06:44'!
FAILURE!
!Room methodsFor: 'validations' stamp: 'AA 12/10/2020 20:07:51' prior: 50877694!
assertCanMoveTo: aPosition
	((stageObjects includesKey: aPosition) or: [ self positionInBounds: aPosition = false ]) ifTrue: [ self error: (self class cannotMoveToPositionErrorDescription: aPosition) ].! !

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 20:07:53'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 20:07:53'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 20:07:53'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 20:07:53'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 20:07:53'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 20:07:53'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 20:07:53'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 20:07:53'!
PASSED!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 20:07:53'!
PASSED!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 20:07:53'!
PASSED!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 20:07:53'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 20:07:56'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 20:07:56'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 20:07:56'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 20:07:56'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 20:07:56'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 20:07:56'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 20:07:56'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 20:07:56'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 20:07:56'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 20:07:56'!
PASSED!

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardCollidingOnStageObject stamp: 'AA 12/10/2020 20:07:56'!
PASSED!

!testRun: #PlayableCharacterTest #test12_cannotMoveBackwardCollidingOnStageObject stamp: 'AA 12/10/2020 20:07:56'!
PASSED!

!testRun: #PlayableCharacterTest #test13_cannotMoveForwardCollidingOnMapBoundary stamp: 'AA 12/10/2020 20:07:56'!
FAILURE!
!Room methodsFor: 'validations' stamp: 'AA 12/10/2020 20:08:33' prior: 50878396!
assertCanMoveTo: aPosition
	((stageObjects includesKey: aPosition) or: 
	[ self positionInBounds: aPosition ] not) ifTrue: [ self error: (self class cannotMoveToPositionErrorDescription: aPosition) ].! !

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 20:08:34'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 20:08:34'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 20:08:34'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 20:08:34'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 20:08:34'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 20:08:34'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 20:08:34'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 20:08:34'!
PASSED!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 20:08:34'!
PASSED!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 20:08:34'!
PASSED!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 20:08:34'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 20:08:36'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 20:08:36'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 20:08:36'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 20:08:36'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 20:08:36'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 20:08:36'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 20:08:36'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 20:08:36'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 20:08:36'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 20:08:36'!
PASSED!

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardCollidingOnStageObject stamp: 'AA 12/10/2020 20:08:36'!
FAILURE!

!testRun: #PlayableCharacterTest #test12_cannotMoveBackwardCollidingOnStageObject stamp: 'AA 12/10/2020 20:08:36'!
FAILURE!

!testRun: #PlayableCharacterTest #test13_cannotMoveForwardCollidingOnMapBoundary stamp: 'AA 12/10/2020 20:08:36'!
FAILURE!
!Room methodsFor: 'validations' stamp: 'AA 12/10/2020 20:10:23' prior: 50878489!
assertCanMoveTo: aPosition
	
	| hasStageItem outOfBounds |
	hasStageItem := stageObjects includesKey: aPosition.
	outOfBounds := (self positionInBounds: aPosition) not.
	
	(hasStageItem or: outOfBounds) ifTrue: [ self error: (self class cannotMoveToPositionErrorDescription: aPosition) ].! !
!Room methodsFor: 'validations' stamp: 'AA 12/10/2020 20:10:26' prior: 50878582!
assertCanMoveTo: aPosition
	
	| hasStageItem outOfBounds |

	hasStageItem := stageObjects includesKey: aPosition.
	outOfBounds := (self positionInBounds: aPosition) not.
	
	(hasStageItem or: outOfBounds) ifTrue: [ self error: (self class cannotMoveToPositionErrorDescription: aPosition) ].! !

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 20:10:34'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 20:10:34'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 20:10:34'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 20:10:34'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 20:10:34'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 20:10:34'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 20:10:34'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 20:10:34'!
PASSED!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 20:10:34'!
PASSED!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 20:10:34'!
PASSED!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 20:10:34'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 20:10:37'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 20:10:37'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 20:10:37'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 20:10:37'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 20:10:37'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 20:10:37'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 20:10:37'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 20:10:37'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 20:10:37'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 20:10:37'!
PASSED!

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardCollidingOnStageObject stamp: 'AA 12/10/2020 20:10:37'!
PASSED!

!testRun: #PlayableCharacterTest #test12_cannotMoveBackwardCollidingOnStageObject stamp: 'AA 12/10/2020 20:10:37'!
PASSED!

!testRun: #PlayableCharacterTest #test13_cannotMoveForwardCollidingOnMapBoundary stamp: 'AA 12/10/2020 20:10:37'!
PASSED!
!Room methodsFor: 'validations' stamp: 'AA 12/10/2020 20:11:06'!
stageItemIn: aPosition
	
	^ stageObjects includesKey: aPosition! !
!Room methodsFor: 'validations' stamp: 'AA 12/10/2020 20:11:15' prior: 50878594!
assertCanMoveTo: aPosition
	
	| hasStageItem outOfBounds |

	hasStageItem := self stageItemIn: aPosition.
	
	outOfBounds := (self positionInBounds: aPosition) not.
	
	(hasStageItem or: outOfBounds) ifTrue: [ self error: (self class cannotMoveToPositionErrorDescription: aPosition) ].! !
!Room methodsFor: 'validations' stamp: 'AA 12/10/2020 20:11:39'!
positionOutOfBounds: aPosition
	
	^ (self positionInBounds: aPosition) not.! !
!Room methodsFor: 'validations' stamp: 'AA 12/10/2020 20:12:31' prior: 50875074!
assertPositionInBounds: aPosition
	(self isInBounds: aPosition) ifFalse: [ self error: (self class invalidStageObjectPositionAt: aPosition) ]! !
!Room methodsFor: 'validations' stamp: 'AA 12/10/2020 20:12:40'!
isInBounds: aPosition
	^ self bottomLeft <= aPosition and: [ aPosition <= self topRight ]! !
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 20:12:40' prior: 50878694!
assertCanMoveTo: aPosition
	
	| hasStageItem outOfBounds |

	hasStageItem := self stageItemIn: aPosition.
	
	outOfBounds := (self isInBounds: aPosition) not.
	
	(hasStageItem or: outOfBounds) ifTrue: [ self error: (self class cannotMoveToPositionErrorDescription: aPosition) ].! !
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 20:12:40' prior: 50878705!
positionOutOfBounds: aPosition
	
	^ (self isInBounds: aPosition) not.! !

!methodRemoval: Room #positionInBounds: stamp: 'AA 12/10/2020 20:12:40'!
positionInBounds: aPosition
	^ self bottomLeft <= aPosition and: [ aPosition <= self topRight ]!
!Room methodsFor: 'validations' stamp: 'AA 12/10/2020 20:12:45'!
isOutOfBounds: aPosition
	
	^ (self isInBounds: aPosition) not.! !

!methodRemoval: Room #positionOutOfBounds: stamp: 'AA 12/10/2020 20:12:47'!
positionOutOfBounds: aPosition
	
	^ (self isInBounds: aPosition) not.!

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 20:12:55'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 20:12:55'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 20:12:55'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 20:12:55'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 20:12:55'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 20:12:55'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 20:12:55'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 20:12:55'!
PASSED!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 20:12:55'!
PASSED!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 20:12:55'!
PASSED!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 20:12:55'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 20:12:57'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 20:12:57'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 20:12:57'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 20:12:57'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 20:12:57'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 20:12:57'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 20:12:57'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 20:12:57'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 20:12:57'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 20:12:57'!
PASSED!

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardCollidingOnStageObject stamp: 'AA 12/10/2020 20:12:57'!
PASSED!

!testRun: #PlayableCharacterTest #test12_cannotMoveBackwardCollidingOnStageObject stamp: 'AA 12/10/2020 20:12:57'!
PASSED!

!testRun: #PlayableCharacterTest #test13_cannotMoveForwardCollidingOnMapBoundary stamp: 'AA 12/10/2020 20:12:57'!
PASSED!
!Room methodsFor: 'validations' stamp: 'AA 12/10/2020 20:13:50' prior: 50878717!
isInBounds: aPosition

	^ aPosition
		between: self bottomLeft
		and: self topRight.! !
!Room methodsFor: 'validations' stamp: 'AA 12/10/2020 20:14:14'!
isPositiveInteger: aNumber
	^ aNumber strictlyPositive and: [ aNumber isInteger ]! !
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 20:14:14' prior: 50870847!
assertValidHeight: aHeight
	(self isPositiveInteger: aHeight) ifFalse: [ self error: self class invalidHeightErrorDescription ]! !
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 20:14:14' prior: 50870854!
assertValidWidth: aWidth
	(self isPositiveInteger: aWidth) ifFalse: [ self error: self class invalidWidthErrorDescription ]! !

!methodRemoval: Room #assertPositiveInteger: stamp: 'AA 12/10/2020 20:14:14'!
assertPositiveInteger: aNumber
	^ aNumber strictlyPositive and: [ aNumber isInteger ]!
!Room methodsFor: 'validations' stamp: 'AA 12/10/2020 20:14:25' prior: 50878745!
isOutOfBounds: aPosition

	^ (self isInBounds: aPosition) not.! !
!Room methodsFor: 'validations' stamp: 'AA 12/10/2020 20:14:28' prior: 50878843!
isPositiveInteger: aNumber

	^ aNumber strictlyPositive and: [ aNumber isInteger ]! !
!Room methodsFor: 'validations' stamp: 'AA 12/10/2020 20:14:33' prior: 50878856!
assertValidWidth: aWidth

	(self isPositiveInteger: aWidth) ifFalse: [ self error: self class invalidWidthErrorDescription ]! !
!Room methodsFor: 'validations' stamp: 'AA 12/10/2020 20:14:39' prior: 50875218!
assertValidStageObjects: stageObjectsToValidate

	stageObjectsToValidate keys do: [ :aPosition | self assertPositionInBounds: aPosition ].! !
!Room methodsFor: 'validations' stamp: 'AA 12/10/2020 20:14:43' prior: 50878849!
assertValidHeight: aHeight

	(self isPositiveInteger: aHeight) ifFalse: [ self error: self class invalidHeightErrorDescription ]! !
!Room methodsFor: 'validations' stamp: 'AA 12/10/2020 20:14:46' prior: 50878710!
assertPositionInBounds: aPosition

	(self isInBounds: aPosition) ifFalse: [ self error: (self class invalidStageObjectPositionAt: aPosition) ]! !

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 20:14:50'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 20:14:50'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 20:14:50'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 20:14:50'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 20:14:50'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 20:14:50'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 20:14:50'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 20:14:50'!
PASSED!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 20:14:50'!
PASSED!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 20:14:50'!
PASSED!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 20:14:50'!
PASSED!
!Room methodsFor: 'validations' stamp: 'AA 12/10/2020 20:15:05' prior: 50878723!
assertCanMoveTo: aPosition
	
	| hasStageItem outOfBounds |

	hasStageItem := self stageItemIn: aPosition.
	
	outOfBounds := self isOutOfBounds: aPosition.
	
	(hasStageItem or: outOfBounds) ifTrue: [ self error: (self class cannotMoveToPositionErrorDescription: aPosition) ].! !

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 20:15:05'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 20:15:05'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 20:15:05'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 20:15:05'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 20:15:05'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 20:15:05'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 20:15:05'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 20:15:05'!
PASSED!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 20:15:05'!
PASSED!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 20:15:05'!
PASSED!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 20:15:05'!
PASSED!
!Room methodsFor: 'validations' stamp: 'AA 12/10/2020 20:15:50' prior: 50878941!
assertCanMoveTo: aPosition

	((self stageItemIn: aPosition) or: [ self isOutOfBounds: aPosition ]) ifTrue: [ self error: (self class cannotMoveToPositionErrorDescription: aPosition) ].! !

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 20:16:05'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 20:16:05'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 20:16:05'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 20:16:05'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 20:16:05'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 20:16:05'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 20:16:05'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 20:16:05'!
PASSED!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 20:16:05'!
PASSED!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 20:16:05'!
PASSED!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 20:16:05'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 20:16:07'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 20:16:07'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 20:16:07'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 20:16:07'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 20:16:07'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 20:16:07'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 20:16:07'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 20:16:07'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 20:16:07'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 20:16:07'!
PASSED!

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardCollidingOnStageObject stamp: 'AA 12/10/2020 20:16:07'!
PASSED!

!testRun: #PlayableCharacterTest #test12_cannotMoveBackwardCollidingOnStageObject stamp: 'AA 12/10/2020 20:16:07'!
PASSED!

!testRun: #PlayableCharacterTest #test13_cannotMoveForwardCollidingOnMapBoundary stamp: 'AA 12/10/2020 20:16:07'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 20:16:18'!
test13_cannotMoveCollidingOnMapBoundary

	| playableCharacter room position |

	room := testObjects defaultRoom.
	position := room topRight.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: position heading: #North .

	self
		should: [ playableCharacter moveForward ]
		raise: Error
		withMessageText: (Room cannotMoveToPositionErrorDescription: position + (0@1)).

	self assert: (playableCharacter isAt: position heading: #North)! !

!methodRemoval: PlayableCharacterTest #test13_cannotMoveForwardCollidingOnMapBoundary stamp: 'AA 12/10/2020 20:16:23'!
test13_cannotMoveForwardCollidingOnMapBoundary

	| playableCharacter room position |

	room := testObjects defaultRoom.
	position := room topRight.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: position heading: #North .

	self
		should: [ playableCharacter moveForward ]
		raise: Error
		withMessageText: (Room cannotMoveToPositionErrorDescription: position + (0@1)).

	self assert: (playableCharacter isAt: position heading: #North)!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 20:17:40'!
test14_cannotCreatePlayerOnTopOfStageObject

	| playableCharacter room position |

	room := testObjects defaultRoom.
	position := room topRight.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: position heading: #North .

	self
		should: [ playableCharacter moveForward ]
		raise: Error
		withMessageText: (Room cannotMoveToPositionErrorDescription: position + (0@1)).

	self assert: (playableCharacter isAt: position heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 20:19:13' prior: 50879115!
test14_cannotCreatePlayerOnTopOfStageObject

	| room |

	room := testObjects roomWithStageObjectAt: 1@2.

	self
		should: [ PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@2 heading: #North ]
		raise: Error
		withMessageText: (Room cannotMoveToPositionErrorDescription: 1@2).! !

!testRun: #PlayableCharacterTest #test14_cannotCreatePlayerOnTopOfStageObject stamp: 'AA 12/10/2020 20:19:17'!
FAILURE!
!PlayableCharacter methodsFor: 'initialization' stamp: 'AA 12/10/2020 20:19:54' prior: 50876011!
initializeNamed: aName using: aBackpack in: aRoom at: aPosition heading: aMarsRoverHeading 

	aRoom assertCanMoveTo: aPosition.

	name := aName.
	backpack := aBackpack.
	room := aRoom.
	position := aPosition.
	heading := aMarsRoverHeading! !

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 20:20:03'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 20:20:03'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 20:20:03'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 20:20:03'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 20:20:03'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 20:20:03'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 20:20:03'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 20:20:03'!
PASSED!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 20:20:03'!
PASSED!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 20:20:03'!
PASSED!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 20:20:03'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardCollidingOnStageObject stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

!testRun: #PlayableCharacterTest #test12_cannotMoveBackwardCollidingOnStageObject stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

!testRun: #PlayableCharacterTest #test13_cannotMoveCollidingOnMapBoundary stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

!testRun: #PlayableCharacterTest #test14_cannotCreatePlayerOnTopOfStageObject stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 20:20:06'!
PASSED!

----SNAPSHOT----(10 December 2020 20:20:47) CuisUniversity-4383.image priorSource: 17487081!
!Room methodsFor: 'validations' stamp: 'AA 12/10/2020 20:32:44'!
assertPlayableCharacterCanStepOn: aPosition

	((self stageItemIn: aPosition) or: [ self isOutOfBounds: aPosition ]) ifTrue: [ self error: (self class cannotMoveToPositionErrorDescription: aPosition) ].! !

!methodRemoval: Room #assertCanMoveTo: stamp: 'AA 12/10/2020 20:32:46'!
assertCanMoveTo: aPosition

	((self stageItemIn: aPosition) or: [ self isOutOfBounds: aPosition ]) ifTrue: [ self error: (self class cannotMoveToPositionErrorDescription: aPosition) ].!
!PlayableCharacter methodsFor: 'moving' stamp: 'AA 12/10/2020 20:33:04' prior: 50877869!
moveTo: aPosition
	room assertPlayableCharacterCanStepOn: aPosition.
	position := aPosition.! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'AA 12/10/2020 20:33:09' prior: 50879151!
initializeNamed: aName using: aBackpack in: aRoom at: aPosition heading: aMarsRoverHeading 

	aRoom assertPlayableCharacterCanStepOn: aPosition.

	name := aName.
	backpack := aBackpack.
	room := aRoom.
	position := aPosition.
	heading := aMarsRoverHeading! !
!Room class methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 20:33:30'!
cannotStepOnPositionErrorDescription: aPoint 
	^ 'Cannot step on ', aPoint asString! !

!methodRemoval: Room class #cannotMoveToPositionErrorDescription: stamp: 'AA 12/10/2020 20:33:32'!
cannotMoveToPositionErrorDescription: aPoint 
	^ 'Cannot move to ', aPoint asString!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 20:33:43' prior: 50879134!
test14_cannotCreatePlayerOnTopOfStageObject

	| room |

	room := testObjects roomWithStageObjectAt: 1@2.

	self
		should: [ PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@2 heading: #North ]
		raise: Error
		withMessageText: (Room cannotStepOnPositionErrorDescription: 1@2).! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 20:33:46' prior: 50879078!
test13_cannotMoveCollidingOnMapBoundary

	| playableCharacter room position |

	room := testObjects defaultRoom.
	position := room topRight.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: position heading: #North .

	self
		should: [ playableCharacter moveForward ]
		raise: Error
		withMessageText: (Room cannotStepOnPositionErrorDescription: position + (0@1)).

	self assert: (playableCharacter isAt: position heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 20:33:48' prior: 50878265!
test12_cannotMoveBackwardCollidingOnStageObject

	| playableCharacter room |

	room := testObjects roomWithStageObjectAt: 1@1.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@2 heading: #North .

	self
		should: [ playableCharacter moveBackward ]
		raise: Error
		withMessageText: (Room cannotStepOnPositionErrorDescription: 1@1).

	self assert: (playableCharacter isAt: 1@2 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 20:33:51' prior: 50878230!
test11_cannotMoveForwardCollidingOnStageObject

	| playableCharacter room |

	room := testObjects roomWithStageObjectAt: 1@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@2 heading: #North .

	self
		should: [ playableCharacter moveForward ]
		raise: Error
		withMessageText: (Room cannotStepOnPositionErrorDescription: 1@3).

	self assert: (playableCharacter isAt: 1@2 heading: #North)! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AA 12/10/2020 20:33:54'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AA 12/10/2020 20:33:54'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AA 12/10/2020 20:33:54'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AA 12/10/2020 20:33:54'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AA 12/10/2020 20:33:54'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AA 12/10/2020 20:33:54'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AA 12/10/2020 20:33:54'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AA 12/10/2020 20:33:54'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AA 12/10/2020 20:33:54'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AA 12/10/2020 20:33:54'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AA 12/10/2020 20:33:54'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AA 12/10/2020 20:33:54'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AA 12/10/2020 20:33:54'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AA 12/10/2020 20:33:54'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AA 12/10/2020 20:33:54'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 20:33:54'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 20:33:54'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 20:33:54'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 20:33:54'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 20:33:54'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 20:33:54'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 20:33:54'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 20:33:54'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 20:33:54'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 20:33:54'!
PASSED!

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardCollidingOnStageObject stamp: 'AA 12/10/2020 20:33:54'!
FAILURE!

!testRun: #PlayableCharacterTest #test12_cannotMoveBackwardCollidingOnStageObject stamp: 'AA 12/10/2020 20:33:54'!
FAILURE!

!testRun: #PlayableCharacterTest #test13_cannotMoveCollidingOnMapBoundary stamp: 'AA 12/10/2020 20:33:54'!
FAILURE!

!testRun: #PlayableCharacterTest #test14_cannotCreatePlayerOnTopOfStageObject stamp: 'AA 12/10/2020 20:33:54'!
FAILURE!

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 20:33:54'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 20:33:54'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 20:33:54'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 20:33:54'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 20:33:54'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 20:33:54'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 20:33:54'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 20:33:54'!
PASSED!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 20:33:54'!
PASSED!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 20:33:54'!
PASSED!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 20:33:54'!
PASSED!

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardCollidingOnStageObject stamp: 'AA 12/10/2020 20:34:02'!
FAILURE!
!Room methodsFor: 'validations' stamp: 'AA 12/10/2020 20:34:19' prior: 50879340!
assertPlayableCharacterCanStepOn: aPosition

	((self stageItemIn: aPosition) or: [ self isOutOfBounds: aPosition ]) ifTrue: [ self error: (self class cannotStepOnPositionErrorDescription: aPosition) ].! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AA 12/10/2020 20:34:22'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AA 12/10/2020 20:34:22'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AA 12/10/2020 20:34:22'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AA 12/10/2020 20:34:22'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AA 12/10/2020 20:34:22'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AA 12/10/2020 20:34:22'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AA 12/10/2020 20:34:22'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AA 12/10/2020 20:34:22'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AA 12/10/2020 20:34:22'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AA 12/10/2020 20:34:22'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AA 12/10/2020 20:34:22'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AA 12/10/2020 20:34:22'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AA 12/10/2020 20:34:22'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AA 12/10/2020 20:34:22'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AA 12/10/2020 20:34:22'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 20:34:22'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 20:34:22'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 20:34:22'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 20:34:22'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 20:34:22'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 20:34:22'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 20:34:22'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 20:34:22'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 20:34:22'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 20:34:22'!
PASSED!

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardCollidingOnStageObject stamp: 'AA 12/10/2020 20:34:22'!
PASSED!

!testRun: #PlayableCharacterTest #test12_cannotMoveBackwardCollidingOnStageObject stamp: 'AA 12/10/2020 20:34:22'!
PASSED!

!testRun: #PlayableCharacterTest #test13_cannotMoveCollidingOnMapBoundary stamp: 'AA 12/10/2020 20:34:22'!
PASSED!

!testRun: #PlayableCharacterTest #test14_cannotCreatePlayerOnTopOfStageObject stamp: 'AA 12/10/2020 20:34:22'!
PASSED!

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 20:34:22'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 20:34:22'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 20:34:22'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 20:34:22'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 20:34:22'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 20:34:22'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 20:34:22'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 20:34:22'!
PASSED!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 20:34:22'!
PASSED!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 20:34:22'!
PASSED!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 20:34:22'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 20:39:30'!
test15_cannotTakeItemFromEmptyPosition

	| room |

	room := testObjects roomWithStageObjectAt: 1@2.

	self
		should: [ PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@2 heading: #North ]
		raise: Error
		withMessageText: (Room cannotStepOnPositionErrorDescription: 1@2).! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 20:39:50' prior: 50879751!
test15_cannotTakeItemFromEmptyPosition

	| room playableC |

	room := testObjects roomWithStageObjectAt: 1@2.
	playableC := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@2 heading: #North
	
	self
		should: [  ]
		raise: Error
		withMessageText: (Room cannotStepOnPositionErrorDescription: 1@2).! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 20:40:05' prior: 50879764!
test15_cannotTakeItemFromEmptyPosition

	| room playableCharacter |

	room := testObjects roomWithStageObjectAt: 1@2.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@2 heading: #North.
	
	self
		should: [  ]
		raise: Error
		withMessageText: (Room cannotStepOnPositionErrorDescription: 1@2).! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 20:40:43' prior: 50879778!
test15_cannotTakeItemFromEmptyPosition

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: testObjects defaultRoom at: 1@2 heading: #North.

	self
		should: [ playableCharacter take ]
		raise: Error
		withMessageText: (Room cannotStepOnPositionErrorDescription: 1@2).! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 20:41:02' prior: 50879792!
test15_cannotTakeItemFromEmptyPosition

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: testObjects defaultRoom at: 1@2 heading: #North.

	self
		should: [ playableCharacter take ]
		raise: Error
		withMessageText: (Room cannotTakeItemFromEmptyPosition).! !

!testRun: #PlayableCharacterTest #test15_cannotTakeItemFromEmptyPosition stamp: 'AA 12/10/2020 20:41:11'!
ERROR!
!Room class methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 20:41:20'!
cannotTakeItemFromEmptyPosition
	self shouldBeImplemented.! !
!Room class methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 20:41:33' prior: 50879823!
cannotTakeItemFromEmptyPosition
	^ 'Cannot take item from empty posistion'.! !

!testRun: #PlayableCharacterTest #test15_cannotTakeItemFromEmptyPosition stamp: 'AA 12/10/2020 20:41:34'!
FAILURE!

!testRun: #PlayableCharacterTest #test15_cannotTakeItemFromEmptyPosition stamp: 'AA 12/10/2020 20:41:45'!
FAILURE!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'AA 12/10/2020 20:42:16'!
take
	self error: Room cannotTakeItemFromEmptyPosition ! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 20:42:16'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 20:42:16'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 20:42:16'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 20:42:16'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 20:42:16'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 20:42:16'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 20:42:16'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 20:42:16'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 20:42:16'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 20:42:16'!
PASSED!

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardCollidingOnStageObject stamp: 'AA 12/10/2020 20:42:16'!
PASSED!

!testRun: #PlayableCharacterTest #test12_cannotMoveBackwardCollidingOnStageObject stamp: 'AA 12/10/2020 20:42:16'!
PASSED!

!testRun: #PlayableCharacterTest #test13_cannotMoveCollidingOnMapBoundary stamp: 'AA 12/10/2020 20:42:16'!
PASSED!

!testRun: #PlayableCharacterTest #test14_cannotCreatePlayerOnTopOfStageObject stamp: 'AA 12/10/2020 20:42:16'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakeItemFromEmptyPosition stamp: 'AA 12/10/2020 20:42:16'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 20:42:33'!
test16_cannotTakeItemFromPositionOutOfBoundaries

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: testObjects defaultRoom at: 1@2 heading: #North.

	self
		should: [ playableCharacter take ]
		raise: Error
		withMessageText: (Room cannotTakeItemFromEmptyPosition).! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 20:43:19' prior: 50879903!
test16_cannotTakeItemFromPositionOutOfBoundaries

	| playableCharacter position room |

	room := testObjects defaultRoom.
	position := room topRight.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: position heading: #North.

	self
		should: [ playableCharacter take ]
		raise: Error
		withMessageText: (Room cannotTakeItemFromEmptyPosition).! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 20:43:37' prior: 50879917!
test16_cannotTakeItemFromPositionOutOfBoundaries

	| playableCharacter position room |

	room := testObjects defaultRoom.
	position := room topRight.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: position heading: #North.

	self
		should: [ playableCharacter take ]
		raise: Error
		withMessageText: (Room cannotTakeItemFromPositionOutOfBoundaries).! !

!testRun: #PlayableCharacterTest #test16_cannotTakeItemFromPositionOutOfBoundaries stamp: 'AA 12/10/2020 20:43:42'!
ERROR!
!Room class methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 20:43:48'!
cannotTakeItemFromPositionOutOfBoundaries
	self shouldBeImplemented.! !
!Room class methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 20:44:07' prior: 50879953!
cannotTakeItemFromPositionOutOfBoundaries
	^ 'Cannot take stage object from position out of boundaries'! !

!testRun: #PlayableCharacterTest #test16_cannotTakeItemFromPositionOutOfBoundaries stamp: 'AA 12/10/2020 20:44:10'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 20:44:22' prior: 50879933!
test16_cannotTakeItemFromPositionOutOfBoundaries

	| playableCharacter position room |

	room := testObjects defaultRoom.
	position := room topRight.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: position heading: #North.

	self
		should: [ playableCharacter take ]
		raise: Error
		withMessageText: (Room cannotTakeStageObjectFromPositionOutOfBoundaries).! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 20:44:31'!
test16_cannotTakeStageObjectFromPositionOutOfBoundaries

	| playableCharacter position room |

	room := testObjects defaultRoom.
	position := room topRight.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: position heading: #North.

	self
		should: [ playableCharacter take ]
		raise: Error
		withMessageText: (Room cannotTakeStageObjectFromPositionOutOfBoundaries).! !

!methodRemoval: PlayableCharacterTest #test16_cannotTakeItemFromPositionOutOfBoundaries stamp: 'AA 12/10/2020 20:44:31'!
test16_cannotTakeItemFromPositionOutOfBoundaries

	| playableCharacter position room |

	room := testObjects defaultRoom.
	position := room topRight.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: position heading: #North.

	self
		should: [ playableCharacter take ]
		raise: Error
		withMessageText: (Room cannotTakeStageObjectFromPositionOutOfBoundaries).!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 20:44:38'!
test15_cannotTakeStageObjectFromEmptyPosition

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: testObjects defaultRoom at: 1@2 heading: #North.

	self
		should: [ playableCharacter take ]
		raise: Error
		withMessageText: (Room cannotTakeItemFromEmptyPosition).! !

!methodRemoval: PlayableCharacterTest #test15_cannotTakeItemFromEmptyPosition stamp: 'AA 12/10/2020 20:44:38'!
test15_cannotTakeItemFromEmptyPosition

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: testObjects defaultRoom at: 1@2 heading: #North.

	self
		should: [ playableCharacter take ]
		raise: Error
		withMessageText: (Room cannotTakeItemFromEmptyPosition).!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 20:44:45' prior: 50880019!
test15_cannotTakeStageObjectFromEmptyPosition

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: testObjects defaultRoom at: 1@2 heading: #North.

	self
		should: [ playableCharacter take ]
		raise: Error
		withMessageText: (Room cannotTakeStageObjectFromEmptyPosition).! !
!Room class methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 20:44:57'!
cannotTakeStageObjectFromEmptyPosition
	^ 'Cannot take item from empty posistion'.! !

!methodRemoval: Room class #cannotTakeItemFromEmptyPosition stamp: 'AA 12/10/2020 20:44:57'!
cannotTakeItemFromEmptyPosition
	^ 'Cannot take item from empty posistion'.!
!Room class methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 20:45:02'!
cannotTakeStageObjectFromPositionOutOfBoundaries
	^ 'Cannot take stage object from position out of boundaries'! !

!methodRemoval: Room class #cannotTakeItemFromPositionOutOfBoundaries stamp: 'AA 12/10/2020 20:45:02'!
cannotTakeItemFromPositionOutOfBoundaries
	^ 'Cannot take stage object from position out of boundaries'!
!Room class methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 20:45:14' prior: 50880061!
cannotTakeStageObjectFromEmptyPosition
	^ 'Cannot take stage object from empty posistion'.! !

!testRun: #PlayableCharacterTest #test15_cannotTakeStageObjectFromEmptyPosition stamp: 'AA 12/10/2020 20:45:29'!
FAILURE!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'AA 12/10/2020 20:46:08' prior: 50879841!
take
	self error: Room cannotTakeStageObjectFromEmptyPosition ! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 20:46:09'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 20:46:09'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 20:46:09'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 20:46:09'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 20:46:09'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 20:46:09'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 20:46:09'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 20:46:09'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 20:46:09'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 20:46:09'!
PASSED!

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardCollidingOnStageObject stamp: 'AA 12/10/2020 20:46:09'!
PASSED!

!testRun: #PlayableCharacterTest #test12_cannotMoveBackwardCollidingOnStageObject stamp: 'AA 12/10/2020 20:46:09'!
PASSED!

!testRun: #PlayableCharacterTest #test13_cannotMoveCollidingOnMapBoundary stamp: 'AA 12/10/2020 20:46:09'!
PASSED!

!testRun: #PlayableCharacterTest #test14_cannotCreatePlayerOnTopOfStageObject stamp: 'AA 12/10/2020 20:46:09'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakeStageObjectFromEmptyPosition stamp: 'AA 12/10/2020 20:46:09'!
PASSED!

!testRun: #PlayableCharacterTest #test16_cannotTakeStageObjectFromPositionOutOfBoundaries stamp: 'AA 12/10/2020 20:46:09'!
FAILURE!

!testRun: #PlayableCharacterTest #test16_cannotTakeStageObjectFromPositionOutOfBoundaries stamp: 'AA 12/10/2020 20:46:09'!
FAILURE!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardCollidingOnStageObject stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #PlayableCharacterTest #test12_cannotMoveBackwardCollidingOnStageObject stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #PlayableCharacterTest #test13_cannotMoveCollidingOnMapBoundary stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #PlayableCharacterTest #test14_cannotCreatePlayerOnTopOfStageObject stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakeStageObjectFromEmptyPosition stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #PlayableCharacterTest #test16_cannotTakeStageObjectFromPositionOutOfBoundaries stamp: 'AA 12/10/2020 20:46:13'!
FAILURE!

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 20:46:13'!
PASSED!

!testRun: #PlayableCharacterTest #test16_cannotTakeStageObjectFromPositionOutOfBoundaries stamp: 'AA 12/10/2020 20:46:13'!
FAILURE!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'AA 12/10/2020 20:47:21' prior: 50880096!
take

	room takeStageObjectFrom: position + heading forwardPoint.
	! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'AA 12/10/2020 20:47:23' prior: 50880321!
take

	room takeStageObjectFrom: position + heading forwardPoint.! !
!Room methodsFor: 'accessing' stamp: 'AA 12/10/2020 20:48:11'!
takeStageObjectFrom: aPosition
	
	(self stageItemIn: aPosition) ifTrue: [ self error: Room cannotTakeStageObjectFromEmptyPosition ].! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 20:48:19'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 20:48:19'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 20:48:19'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 20:48:19'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 20:48:19'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 20:48:19'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 20:48:19'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 20:48:19'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 20:48:19'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 20:48:19'!
PASSED!

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardCollidingOnStageObject stamp: 'AA 12/10/2020 20:48:19'!
PASSED!

!testRun: #PlayableCharacterTest #test12_cannotMoveBackwardCollidingOnStageObject stamp: 'AA 12/10/2020 20:48:19'!
PASSED!

!testRun: #PlayableCharacterTest #test13_cannotMoveCollidingOnMapBoundary stamp: 'AA 12/10/2020 20:48:19'!
PASSED!

!testRun: #PlayableCharacterTest #test14_cannotCreatePlayerOnTopOfStageObject stamp: 'AA 12/10/2020 20:48:19'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakeStageObjectFromEmptyPosition stamp: 'AA 12/10/2020 20:48:19'!
FAILURE!

!testRun: #PlayableCharacterTest #test16_cannotTakeStageObjectFromPositionOutOfBoundaries stamp: 'AA 12/10/2020 20:48:19'!
FAILURE!
!Room methodsFor: 'accessing' stamp: 'AA 12/10/2020 20:48:30' prior: 50880332!
takeStageObjectFrom: aPosition
	
	(self stageItemIn: aPosition) ifFalse: [ self error: Room cannotTakeStageObjectFromEmptyPosition ].! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 20:48:32'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 20:48:32'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 20:48:32'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 20:48:32'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 20:48:32'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 20:48:32'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 20:48:32'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 20:48:32'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 20:48:32'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 20:48:32'!
PASSED!

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardCollidingOnStageObject stamp: 'AA 12/10/2020 20:48:32'!
PASSED!

!testRun: #PlayableCharacterTest #test12_cannotMoveBackwardCollidingOnStageObject stamp: 'AA 12/10/2020 20:48:32'!
PASSED!

!testRun: #PlayableCharacterTest #test13_cannotMoveCollidingOnMapBoundary stamp: 'AA 12/10/2020 20:48:32'!
PASSED!

!testRun: #PlayableCharacterTest #test14_cannotCreatePlayerOnTopOfStageObject stamp: 'AA 12/10/2020 20:48:32'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakeStageObjectFromEmptyPosition stamp: 'AA 12/10/2020 20:48:32'!
PASSED!

!testRun: #PlayableCharacterTest #test16_cannotTakeStageObjectFromPositionOutOfBoundaries stamp: 'AA 12/10/2020 20:48:32'!
FAILURE!

!testRun: #PlayableCharacterTest #test16_cannotTakeStageObjectFromPositionOutOfBoundaries stamp: 'AA 12/10/2020 20:48:32'!
FAILURE!
!Room methodsFor: 'accessing' stamp: 'AA 12/10/2020 20:49:19' prior: 50880401!
takeStageObjectFrom: aPosition
	
	(self stageItemIn: aPosition) ifFalse: [ self error: Room cannotTakeStageObjectFromEmptyPosition ].
	(self isInBounds: aPosition) ifFalse: [ self error: Room cannotTakeStageObjectFromPositionOutOfBoundaries ].
	
	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 20:49:21'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 20:49:21'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 20:49:21'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 20:49:21'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 20:49:21'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 20:49:21'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 20:49:21'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 20:49:21'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 20:49:21'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 20:49:21'!
PASSED!

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardCollidingOnStageObject stamp: 'AA 12/10/2020 20:49:21'!
PASSED!

!testRun: #PlayableCharacterTest #test12_cannotMoveBackwardCollidingOnStageObject stamp: 'AA 12/10/2020 20:49:21'!
PASSED!

!testRun: #PlayableCharacterTest #test13_cannotMoveCollidingOnMapBoundary stamp: 'AA 12/10/2020 20:49:21'!
PASSED!

!testRun: #PlayableCharacterTest #test14_cannotCreatePlayerOnTopOfStageObject stamp: 'AA 12/10/2020 20:49:21'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakeStageObjectFromEmptyPosition stamp: 'AA 12/10/2020 20:49:21'!
PASSED!

!testRun: #PlayableCharacterTest #test16_cannotTakeStageObjectFromPositionOutOfBoundaries stamp: 'AA 12/10/2020 20:49:21'!
FAILURE!

!testRun: #PlayableCharacterTest #test16_cannotTakeStageObjectFromPositionOutOfBoundaries stamp: 'AA 12/10/2020 20:49:21'!
FAILURE!
!Room methodsFor: 'accessing' stamp: 'AA 12/10/2020 20:49:44' prior: 50880474!
takeStageObjectFrom: aPosition
	
	(self stageItemIn: aPosition) ifFalse: [ self error: Room cannotTakeStageObjectFromEmptyPosition ].
	(self isInBounds: aPosition) ifFalse: [ self error: Room cannotTakeStageObjectFromPositionOutOfBoundaries ].
! !

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 20:49:46'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 20:49:46'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 20:49:46'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 20:49:46'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 20:49:46'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 20:49:46'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 20:49:46'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 20:49:46'!
PASSED!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 20:49:46'!
PASSED!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 20:49:46'!
PASSED!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 20:49:46'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 20:49:48'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 20:49:48'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 20:49:48'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 20:49:48'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 20:49:48'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 20:49:48'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 20:49:48'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 20:49:48'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 20:49:48'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 20:49:48'!
PASSED!

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardCollidingOnStageObject stamp: 'AA 12/10/2020 20:49:48'!
PASSED!

!testRun: #PlayableCharacterTest #test12_cannotMoveBackwardCollidingOnStageObject stamp: 'AA 12/10/2020 20:49:48'!
PASSED!

!testRun: #PlayableCharacterTest #test13_cannotMoveCollidingOnMapBoundary stamp: 'AA 12/10/2020 20:49:48'!
PASSED!

!testRun: #PlayableCharacterTest #test14_cannotCreatePlayerOnTopOfStageObject stamp: 'AA 12/10/2020 20:49:48'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakeStageObjectFromEmptyPosition stamp: 'AA 12/10/2020 20:49:48'!
PASSED!

!testRun: #PlayableCharacterTest #test16_cannotTakeStageObjectFromPositionOutOfBoundaries stamp: 'AA 12/10/2020 20:49:48'!
FAILURE!

!testRun: #PlayableCharacterTest #test16_cannotTakeStageObjectFromPositionOutOfBoundaries stamp: 'AA 12/10/2020 20:49:48'!
FAILURE!
!Room methodsFor: 'accessing' stamp: 'AA 12/10/2020 20:50:08' prior: 50880550!
takeStageObjectFrom: aPosition
	
	(self isInBounds: aPosition) ifFalse: [ self error: Room cannotTakeStageObjectFromPositionOutOfBoundaries ].
	(self stageItemIn: aPosition) ifFalse: [ self error: Room cannotTakeStageObjectFromEmptyPosition ].
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 20:53:35'!
test16_takingStageObjectFromRoomAddsItToBackpack

	| playableCharacter room |

	room := testObjects roomWithStageObjectAt: 1@4.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@3 heading: #North.

	playableCharacter take.! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 20:54:39' prior: 50880671!
test16_takingStageObjectFromRoomAddsItToBackpack

	| playableCharacter room paper |

	room := testObjects roomWithStageObjectAt: 1@4.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@3 heading: #North.
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	playableCharacter take.

	self assert: (playableCharacter backpackIncludes: paper)! !

!testRun: #PlayableCharacterTest #test16_takingStageObjectFromRoomAddsItToBackpack stamp: 'AA 12/10/2020 20:54:43'!
FAILURE!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'AA 12/10/2020 20:55:09' prior: 50880327!
take

	self take: (room takeStageObjectFrom: position + heading forwardPoint).! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 20:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 20:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 20:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 20:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 20:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 20:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 20:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 20:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 20:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 20:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardCollidingOnStageObject stamp: 'AA 12/10/2020 20:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test12_cannotMoveBackwardCollidingOnStageObject stamp: 'AA 12/10/2020 20:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test13_cannotMoveCollidingOnMapBoundary stamp: 'AA 12/10/2020 20:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test14_cannotCreatePlayerOnTopOfStageObject stamp: 'AA 12/10/2020 20:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakeStageObjectFromEmptyPosition stamp: 'AA 12/10/2020 20:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test16_cannotTakeStageObjectFromPositionOutOfBoundaries stamp: 'AA 12/10/2020 20:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test16_takingStageObjectFromRoomAddsItToBackpack stamp: 'AA 12/10/2020 20:55:15'!
ERROR!

!testRun: #PlayableCharacterTest #test16_takingStageObjectFromRoomAddsItToBackpack stamp: 'AA 12/10/2020 20:55:15'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 20:56:47' prior: 50880683!
test16_takingStageObjectFromRoomAddsItToBackpack

	| playableCharacter room paper stageObjects |

	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	stageObjects := Dictionary new.
	stageObjects at: 1@4 put: paper.
	room := testObjects roomWithStageObject: stageObjects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@3 heading: #North.
	
	playableCharacter take.

	self assert: (playableCharacter backpackIncludes: paper)! !
!TestObjectsStore methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 20:57:12'!
roomWithStageObjects: stageObjects

	^ Room
		width: self validRoomWidth
		height: self validRoomHeight
		stageObjects: stageObjects.! !
!TestObjectsStore methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 20:57:26' prior: 50877318!
roomWithStageObjectAt: aPosition

	| stageObjects |

	stageObjects := Dictionary new.
	stageObjects at: aPosition put: StageObject new.

	^ self roomWithStageObjects: stageObjects.! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 20:57:50' prior: 50880778!
test16_takingStageObjectFromRoomAddsItToBackpack

	| playableCharacter room paper stageObjects |

	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	stageObjects := Dictionary new.
	stageObjects at: 1@4 put: paper.
	room := testObjects roomWithStageObjects: stageObjects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@3 heading: #North.
	
	playableCharacter take.

	self assert: (playableCharacter backpackIncludes: paper)! !

!testRun: #PlayableCharacterTest #test16_takingStageObjectFromRoomAddsItToBackpack stamp: 'AA 12/10/2020 20:57:56'!
ERROR!
!Room methodsFor: 'accessing' stamp: 'AA 12/10/2020 20:59:50' prior: 50880660!
takeStageObjectFrom: aPosition
	
	| stageObject |
	(self isInBounds: aPosition) ifFalse: [ self error: Room cannotTakeStageObjectFromPositionOutOfBoundaries ].
	(self stageItemIn: aPosition) ifFalse: [ self error: Room cannotTakeStageObjectFromEmptyPosition ].
	
	stageObject :=  stageObjects at: aPosition.
	
	stageObjects removeKey: aPosition.
	
	^ stageObject.! !
!Room methodsFor: 'accessing' stamp: 'AA 12/10/2020 20:59:55' prior: 50880836!
takeStageObjectFrom: aPosition
	
	| stageObject |

	(self isInBounds: aPosition) ifFalse: [ self error: Room cannotTakeStageObjectFromPositionOutOfBoundaries ].
	(self stageItemIn: aPosition) ifFalse: [ self error: Room cannotTakeStageObjectFromEmptyPosition ].
	
	stageObject :=  stageObjects at: aPosition.
	stageObjects removeKey: aPosition.
	
	^ stageObject.! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardCollidingOnStageObject stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #PlayableCharacterTest #test12_cannotMoveBackwardCollidingOnStageObject stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #PlayableCharacterTest #test13_cannotMoveCollidingOnMapBoundary stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #PlayableCharacterTest #test14_cannotCreatePlayerOnTopOfStageObject stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakeStageObjectFromEmptyPosition stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #PlayableCharacterTest #test16_cannotTakeStageObjectFromPositionOutOfBoundaries stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #PlayableCharacterTest #test16_takingStageObjectFromRoomAddsItToBackpack stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 21:00:09'!
PASSED!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 21:00:09'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 21:01:21' prior: 50880814!
test16_takingStageObjectFromRoomAddsItToBackpack

	| playableCharacter room paper stageObjects |

	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	stageObjects := Dictionary new.
	stageObjects at: 1@4 put: paper.
	room := testObjects roomWithStageObjects: stageObjects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@3 heading: #North.
	
	playableCharacter take.

	self assert: (playableCharacter backpackIncludes: paper).
	self deny: (room hasStageObjectAt: 1@4).! !

!testRun: #PlayableCharacterTest #test16_takingStageObjectFromRoomAddsItToBackpack stamp: 'AA 12/10/2020 21:01:23'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 21:01:37' prior: 50881018!
test16_takingStageObjectFromRoomAddsItToBackpack

	| playableCharacter room paper stageObjects |

	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	stageObjects := Dictionary new.
	stageObjects at: 1@4 put: paper.
	room := testObjects roomWithStageObjects: stageObjects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@3 heading: #North.
	
	playableCharacter take.

	self assert: (playableCharacter backpackIncludes: paper).
	self deny: (room stageItemIn: 1@4).! !

!testRun: #PlayableCharacterTest #test16_takingStageObjectFromRoomAddsItToBackpack stamp: 'AA 12/10/2020 21:01:38'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 21:01:38'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 21:01:38'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 21:01:38'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 21:01:38'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 21:01:38'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 21:01:38'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 21:01:38'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 21:01:38'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 21:01:38'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 21:01:38'!
PASSED!

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardCollidingOnStageObject stamp: 'AA 12/10/2020 21:01:38'!
PASSED!

!testRun: #PlayableCharacterTest #test12_cannotMoveBackwardCollidingOnStageObject stamp: 'AA 12/10/2020 21:01:38'!
PASSED!

!testRun: #PlayableCharacterTest #test13_cannotMoveCollidingOnMapBoundary stamp: 'AA 12/10/2020 21:01:38'!
PASSED!

!testRun: #PlayableCharacterTest #test14_cannotCreatePlayerOnTopOfStageObject stamp: 'AA 12/10/2020 21:01:38'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakeStageObjectFromEmptyPosition stamp: 'AA 12/10/2020 21:01:38'!
PASSED!

!testRun: #PlayableCharacterTest #test16_cannotTakeStageObjectFromPositionOutOfBoundaries stamp: 'AA 12/10/2020 21:01:38'!
PASSED!

!testRun: #PlayableCharacterTest #test16_takingStageObjectFromRoomAddsItToBackpack stamp: 'AA 12/10/2020 21:01:38'!
PASSED!
!Room methodsFor: 'validations' stamp: 'AA 12/10/2020 21:02:07'!
hasStageItemAt: aPosition
	
	^ stageObjects includesKey: aPosition! !
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 21:02:07' prior: 50880850!
takeStageObjectFrom: aPosition
	
	| stageObject |

	(self isInBounds: aPosition) ifFalse: [ self error: Room cannotTakeStageObjectFromPositionOutOfBoundaries ].
	(self hasStageItemAt: aPosition) ifFalse: [ self error: Room cannotTakeStageObjectFromEmptyPosition ].
	
	stageObject :=  stageObjects at: aPosition.
	stageObjects removeKey: aPosition.
	
	^ stageObject.! !
!Room methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 21:02:07' prior: 50879600!
assertPlayableCharacterCanStepOn: aPosition

	((self hasStageItemAt: aPosition) or: [ self isOutOfBounds: aPosition ]) ifTrue: [ self error: (self class cannotStepOnPositionErrorDescription: aPosition) ].! !

!methodRemoval: Room #stageItemIn: stamp: 'AA 12/10/2020 21:02:07'!
stageItemIn: aPosition
	
	^ stageObjects includesKey: aPosition!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardCollidingOnStageObject stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #PlayableCharacterTest #test12_cannotMoveBackwardCollidingOnStageObject stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #PlayableCharacterTest #test13_cannotMoveCollidingOnMapBoundary stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #PlayableCharacterTest #test14_cannotCreatePlayerOnTopOfStageObject stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakeStageObjectFromEmptyPosition stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #PlayableCharacterTest #test16_cannotTakeStageObjectFromPositionOutOfBoundaries stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #PlayableCharacterTest #test16_takingStageObjectFromRoomAddsItToBackpack stamp: 'AA 12/10/2020 21:02:13'!
ERROR!

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 21:02:13'!
PASSED!

!testRun: #PlayableCharacterTest #test16_takingStageObjectFromRoomAddsItToBackpack stamp: 'AA 12/10/2020 21:02:13'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 21:02:23' prior: 50881042!
test16_takingStageObjectFromRoomAddsItToBackpack

	| playableCharacter room paper stageObjects |

	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	stageObjects := Dictionary new.
	stageObjects at: 1@4 put: paper.
	room := testObjects roomWithStageObjects: stageObjects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@3 heading: #North.
	
	playableCharacter take.

	self assert: (playableCharacter backpackIncludes: paper).
	self deny: (room hasStageItemAt: 1@4).! !

!testRun: #PlayableCharacterTest #test16_takingStageObjectFromRoomAddsItToBackpack stamp: 'AA 12/10/2020 21:02:24'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardCollidingOnStageObject stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #PlayableCharacterTest #test12_cannotMoveBackwardCollidingOnStageObject stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #PlayableCharacterTest #test13_cannotMoveCollidingOnMapBoundary stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #PlayableCharacterTest #test14_cannotCreatePlayerOnTopOfStageObject stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakeStageObjectFromEmptyPosition stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #PlayableCharacterTest #test16_cannotTakeStageObjectFromPositionOutOfBoundaries stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #PlayableCharacterTest #test16_takingStageObjectFromRoomAddsItToBackpack stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 21:02:27'!
PASSED!

StageObject subclass: #NoPortableObject
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NoPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'AA 12/10/2020 21:04:58'!
StageObject subclass: #NoPortableObject
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

StageObject subclass: #NoPortableObject
	instanceVariableNames: 'name stageObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NoPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'AA 12/10/2020 21:05:46'!
StageObject subclass: #NoPortableObject
	instanceVariableNames: 'name stageObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NoPortableObject class methodsFor: 'nil' stamp: 'AA 12/10/2020 21:06:52'!
named: aName withStageObjects: initialStageObjects
	self new initializeNamed: aName withStageObjects: initialStageObjects.
! !
!NoPortableObject class methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 21:07:16'!
named: aName carryingStageObjects: initialStageObjects
	self new initializeNamed: aName withStageObjects: initialStageObjects.
! !

!methodRemoval: NoPortableObject class #named:withStageObjects: stamp: 'AA 12/10/2020 21:07:16'!
named: aName withStageObjects: initialStageObjects
	self new initializeNamed: aName withStageObjects: initialStageObjects.
!
!NoPortableObject class methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 21:07:22' prior: 50881533!
named: aName carryingStageObjects: initialStageObjects
	self new initializeNamed: aName carryingStageObjects: initialStageObjects.
! !
!NoPortableObject methodsFor: 'nil' stamp: 'AA 12/10/2020 21:07:48'!
initializeNamed: aName carryingStageObjects: initialStageObjects.
	name := aName.
	stageObjects := initialStageObjects.! !

----SNAPSHOT----(10 December 2020 21:08:03) CuisUniversity-4383.image priorSource: 17525953!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 21:09:10'!
test16_takingPortableObjectFromRoomAddsItToBackpack

	| playableCharacter room paper stageObjects |

	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	stageObjects := Dictionary new.
	stageObjects at: 1@4 put: paper.
	room := testObjects roomWithStageObjects: stageObjects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@3 heading: #North.
	
	playableCharacter take.

	self assert: (playableCharacter backpackIncludes: paper).
	self deny: (room hasStageItemAt: 1@4).! !

!methodRemoval: PlayableCharacterTest #test16_takingStageObjectFromRoomAddsItToBackpack stamp: 'AA 12/10/2020 21:09:10'!
test16_takingStageObjectFromRoomAddsItToBackpack

	| playableCharacter room paper stageObjects |

	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	stageObjects := Dictionary new.
	stageObjects at: 1@4 put: paper.
	room := testObjects roomWithStageObjects: stageObjects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@3 heading: #North.
	
	playableCharacter take.

	self assert: (playableCharacter backpackIncludes: paper).
	self deny: (room hasStageItemAt: 1@4).!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 21:09:58'!
test17_takingNoPortableObjectFromRoomAddsAllStageObjectsToBackpack

	| playableCharacter room paper stageObjects |

	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	stageObjects := Dictionary new.
	stageObjects at: 1@4 put: paper.
	room := testObjects roomWithStageObjects: stageObjects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@3 heading: #North.
	
	playableCharacter take.

	self assert: (playableCharacter backpackIncludes: paper).
	self deny: (room hasStageItemAt: 1@4).! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 21:11:07' prior: 50881605!
test17_takingNoPortableObjectFromRoomAddsAllStageObjectsToBackpack

	| playableCharacter room paper stageObjects wardrobe |

	wardrobe := NoPortableObject named: 'wardrobe' carrying: nil.
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	stageObjects := Dictionary new.
	stageObjects at: 1@4 put: paper.
	room := testObjects roomWithStageObjects: stageObjects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@3 heading: #North.
	
	playableCharacter take.

	self assert: (playableCharacter backpackIncludes: paper).
	self deny: (room hasStageItemAt: 1@4).! !
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 21:11:25'!
initializeNamed: aName carrying: initialStageObjects.
	name := aName.
	stageObjects := initialStageObjects.! !
!NoPortableObject class methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 21:11:25' prior: 50881548!
named: aName carryingStageObjects: initialStageObjects
	self new initializeNamed: aName carrying: initialStageObjects.
! !

!methodRemoval: NoPortableObject #initializeNamed:carryingStageObjects: stamp: 'AA 12/10/2020 21:11:25'!
initializeNamed: aName carryingStageObjects: initialStageObjects.
	name := aName.
	stageObjects := initialStageObjects.!
!NoPortableObject class methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 21:11:35'!
named: aName carrying: initialStageObjects
	self new initializeNamed: aName carrying: initialStageObjects.
! !

!methodRemoval: NoPortableObject class #named:carryingStageObjects: stamp: 'AA 12/10/2020 21:11:35'!
named: aName carryingStageObjects: initialStageObjects
	self new initializeNamed: aName carrying: initialStageObjects.
!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 21:15:29' prior: 50881626!
test17_takingNoPortableObjectFromRoomAddsAllStageObjectsToBackpack

	| playableCharacter room paper stageObjects wardrobe box boxContents pen pencil wardrobeContents |

	
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	pencil := NoPointsPortableObject named: 'Pencil' weighing: 2.
	pen := NoPointsPortableObject named: 'Pen' weighing: 3.
		
	boxContents := OrderedCollection with: paper with: pencil.
	box := NoPortableObject named: 'box' carrying: boxContents.
	
	wardrobeContents := OrderedCollection with: box with: pencil.
	wardrobe := NoPortableObject named: 'wardrobe' carrying: wardrobeContents.
	
	stageObjects := Dictionary new.
	stageObjects at: 1@4 put: paper.
	room := testObjects roomWithStageObjects: stageObjects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@3 heading: #North.
	
	playableCharacter take.

	self assert: (playableCharacter backpackIncludes: paper).
	self deny: (room hasStageItemAt: 1@4).! !
!TestObjectsStore methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 21:16:06'!
wardrobe

	| box boxContents paper pen pencil wardrobe wardrobeContents |
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	pencil := NoPointsPortableObject named: 'Pencil' weighing: 2.
	pen := NoPointsPortableObject named: 'Pen' weighing: 3.
		
	boxContents := OrderedCollection with: paper with: pencil.
	box := NoPortableObject named: 'box' carrying: boxContents.
	
	wardrobeContents := OrderedCollection with: box with: pencil.
	wardrobe := NoPortableObject named: 'wardrobe' carrying: wardrobeContents.! !
!TestObjectsStore methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 21:16:37' prior: 50881718!
wardrobe

	|   paper pen pencil wardrobe box boxContents wardrobeContents |
	
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	pencil := NoPointsPortableObject named: 'Pencil' weighing: 2.
	pen := NoPointsPortableObject named: 'Pen' weighing: 3.
		
	boxContents := OrderedCollection with: paper with: pencil.
	box := NoPortableObject named: 'box' carrying: boxContents.
	
	wardrobeContents := OrderedCollection with: box with: pen.
	wardrobe := NoPortableObject named: 'wardrobe' carrying: wardrobeContents.
	
	^ wardrobe! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 21:18:12' prior: 50881684!
test17_takingNoPortableObjectFromRoomAddsAllStageObjectsToBackpack

	| playableCharacter room stageObjects wardrobe |

	wardrobe := testObjects wardrobe.
	stageObjects := Dictionary new.
	stageObjects at: 1@4 put: wardrobe.
	room := testObjects roomWithStageObjects: stageObjects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@3 heading: #North.
	
	playableCharacter take.

	self assert: (playableCharacter backpackIncludes: wardrobe contents).
	self deny: (room hasStageItemAt: 1@4).! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 21:18:53' prior: 50881758!
test17_takingNoPortableObjectFromRoomAddsAllStageObjectsToBackpack

	| playableCharacter room stageObjects wardrobe |

	wardrobe := testObjects wardrobe.
	stageObjects := Dictionary new.
	stageObjects at: 1@4 put: wardrobe.
	room := testObjects roomWithStageObjects: stageObjects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@3 heading: #North.
	
	playableCharacter take.

	self assert: (playableCharacter backpackIncludes: wardrobe contents).
	self assert: (room hasStageItemAt: 1@4).! !

!testRun: #PlayableCharacterTest #test17_takingNoPortableObjectFromRoomAddsAllStageObjectsToBackpack stamp: 'AA 12/10/2020 21:18:54'!
ERROR!
!NoPortableObject methodsFor: 'nil' stamp: 'AA 12/10/2020 21:20:22'!
assertCanAddTo: aBackpack 
	
	^ aBackpack assertCanAddPointPortableObject: self! !

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 21:20:29'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 21:20:29'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 21:20:29'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 21:20:29'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 21:20:29'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 21:20:29'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 21:20:29'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 21:20:29'!
PASSED!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 21:20:29'!
PASSED!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 21:20:29'!
PASSED!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 21:20:29'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardCollidingOnStageObject stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #PlayableCharacterTest #test12_cannotMoveBackwardCollidingOnStageObject stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #PlayableCharacterTest #test13_cannotMoveCollidingOnMapBoundary stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #PlayableCharacterTest #test14_cannotCreatePlayerOnTopOfStageObject stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakeStageObjectFromEmptyPosition stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #PlayableCharacterTest #test16_cannotTakeStageObjectFromPositionOutOfBoundaries stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #PlayableCharacterTest #test16_takingPortableObjectFromRoomAddsItToBackpack stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #PlayableCharacterTest #test17_takingNoPortableObjectFromRoomAddsAllStageObjectsToBackpack stamp: 'AA 12/10/2020 21:20:31'!
ERROR!

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 21:20:31'!
PASSED!

!testRun: #PlayableCharacterTest #test17_takingNoPortableObjectFromRoomAddsAllStageObjectsToBackpack stamp: 'AA 12/10/2020 21:20:31'!
ERROR!
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 21:22:55'!
contents
	! !
!PortableObject methodsFor: 'accessing' stamp: 'AA 12/10/2020 21:23:13'!
contents

	^ OrderedCollection with: self.! !
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 21:23:32' prior: 50882004!
contents
	
	| contents |
	contents := OrderedCollection new.
	
	! !
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 21:24:17' prior: 50882012!
contents
	
	| contents |

	contents := OrderedCollection new.
	
	stageObjects do: [ :stageObject | contents addAll: stageObject contents ].
	
	^ contents copy.
	! !

!methodRemoval: NoPortableObject #assertCanAddTo: stamp: 'AA 12/10/2020 21:24:27'!
assertCanAddTo: aBackpack 
	
	^ aBackpack assertCanAddPointPortableObject: self!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 21:28:47' prior: 50881778!
test17_takingNoPortableObjectFromRoomAddsAllStageObjectsToBackpack

	| playableCharacter room stageObjects wardrobe wardrobeContents |

	wardrobe := testObjects wardrobe.
	wardrobeContents := wardrobe contents.
	stageObjects := Dictionary new.
	stageObjects at: 1@4 put: wardrobe.
	room := testObjects roomWithStageObjects: stageObjects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@3 heading: #North.
	
	playableCharacter take.

	self assert: (playableCharacter backpackIncludes: wardrobeContents).
	self assert: (room hasStageItemAt: 1@4).! !
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 21:33:00'!
removePortableObject: aPortableObject
	
	stageObjects remove: aPortableObject ifAbsent: [
		self noPortableObjects do: [ :aNoPortableObject | aNoPortableObject removePortableObject: aPortableObject ]
	].! !
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 21:34:07'!
noPortableObjects
	^ stageObjects select: [ :aStageObject | aStageObject isMemberOf: NoPortableObject ]
	! !
!Room methodsFor: 'accessing' stamp: 'AA 12/10/2020 21:38:39' prior: 50881135!
takeStageObjectFrom: aPosition
	
	| stageObject |

	(self isInBounds: aPosition) ifFalse: [ self error: Room cannotTakeStageObjectFromPositionOutOfBoundaries ].
	(self hasStageItemAt: aPosition) ifFalse: [ self error: Room cannotTakeStageObjectFromEmptyPosition ].
	
	stageObject :=  stageObjects at: aPosition.
	
	stageObject addToPlayableCharacter: nil.
	stageObject removeFrom: self.
	"stageObjects removeKey: aPosition."
	
	^ stageObject.! !
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 21:38:53'!
removeFrom: aRoom! !
!PortableObject methodsFor: 'accessing' stamp: 'AA 12/10/2020 21:39:35'!
removeFrom: aRoom at: aPosition
	aRoom removeStageObjectAt: aPosition ! !
!Room methodsFor: 'accessing' stamp: 'AA 12/10/2020 21:39:53' prior: 50882070!
takeStageObjectFrom: aPosition
	
	| stageObject |

	(self isInBounds: aPosition) ifFalse: [ self error: Room cannotTakeStageObjectFromPositionOutOfBoundaries ].
	(self hasStageItemAt: aPosition) ifFalse: [ self error: Room cannotTakeStageObjectFromEmptyPosition ].
	
	stageObject :=  stageObjects at: aPosition.
	
	stageObject addToPlayableCharacter: nil.
	stageObject removeFrom: self at: aPosition.
	
	
	^ stageObject.! !
!Room methodsFor: 'accessing' stamp: 'AA 12/10/2020 21:40:06'!
removeStageObjectAt: aPosition

	stageObjects removeKey: aPosition.! !
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 21:40:32'!
removeFrom: aRoom at: aPosition! !

!methodRemoval: NoPortableObject #removeFrom: stamp: 'AA 12/10/2020 21:40:35'!
removeFrom: aRoom!
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 21:43:17'!
addToPlayableCharacter: aPlayableCharacter
	self contents do: [ :aPortableObject |
		aPlayableCharacter take: aPortableObject.
		"self removePortableObject: aPortableObject."
	]! !
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 21:43:22' prior: 50882123!
addToPlayableCharacter: aPlayableCharacter

	self contents do: [ :aPortableObject |
		aPlayableCharacter take: aPortableObject.
		"self removePortableObject: aPortableObject."
	]! !

!testRun: #PlayableCharacterTest #test17_takingNoPortableObjectFromRoomAddsAllStageObjectsToBackpack stamp: 'AA 12/10/2020 21:43:33'!
ERROR!

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 21:43:48'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 21:43:48'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 21:43:48'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 21:43:48'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 21:43:48'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 21:43:48'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 21:43:48'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 21:43:48'!
PASSED!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 21:43:48'!
PASSED!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 21:43:48'!
PASSED!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 21:43:48'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 21:43:50'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 21:43:50'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 21:43:50'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 21:43:50'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 21:43:50'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 21:43:50'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 21:43:50'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 21:43:50'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 21:43:50'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 21:43:50'!
PASSED!

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardCollidingOnStageObject stamp: 'AA 12/10/2020 21:43:50'!
PASSED!

!testRun: #PlayableCharacterTest #test12_cannotMoveBackwardCollidingOnStageObject stamp: 'AA 12/10/2020 21:43:50'!
PASSED!

!testRun: #PlayableCharacterTest #test13_cannotMoveCollidingOnMapBoundary stamp: 'AA 12/10/2020 21:43:50'!
PASSED!

!testRun: #PlayableCharacterTest #test14_cannotCreatePlayerOnTopOfStageObject stamp: 'AA 12/10/2020 21:43:50'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakeStageObjectFromEmptyPosition stamp: 'AA 12/10/2020 21:43:50'!
PASSED!

!testRun: #PlayableCharacterTest #test16_cannotTakeStageObjectFromPositionOutOfBoundaries stamp: 'AA 12/10/2020 21:43:50'!
PASSED!

!testRun: #PlayableCharacterTest #test16_takingPortableObjectFromRoomAddsItToBackpack stamp: 'AA 12/10/2020 21:43:50'!
ERROR!

!testRun: #PlayableCharacterTest #test17_takingNoPortableObjectFromRoomAddsAllStageObjectsToBackpack stamp: 'AA 12/10/2020 21:43:50'!
ERROR!

!testRun: #PlayableCharacterTest #test16_takingPortableObjectFromRoomAddsItToBackpack stamp: 'AA 12/10/2020 21:43:58'!
ERROR!

!testRun: #PlayableCharacterTest #test16_takingPortableObjectFromRoomAddsItToBackpack stamp: 'AA 12/10/2020 21:43:58'!
ERROR!
!PortableObject methodsFor: 'accessing' stamp: 'AA 12/10/2020 21:44:25'!
addToPlayableCharacter: aPlayableCharacter
	aPlayableCharacter take: self! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'AA 12/10/2020 21:44:45' prior: 50880703!
take

	room takeStageObjectFrom: position + heading forwardPoint.! !
!Room methodsFor: 'accessing' stamp: 'AA 12/10/2020 21:45:02'!
takeStageObjectAt: aPosition for: aPlayableCharacter
	
	| stageObject |

	(self isInBounds: aPosition) ifFalse: [ self error: Room cannotTakeStageObjectFromPositionOutOfBoundaries ].
	(self hasStageItemAt: aPosition) ifFalse: [ self error: Room cannotTakeStageObjectFromEmptyPosition ].
	
	stageObject :=  stageObjects at: aPosition.
	
	stageObject addToPlayableCharacter: aPlayableCharacter.
	stageObject removeFrom: self at: aPosition.
	
	
	^ stageObject.! !

!methodRemoval: Room #takeStageObjectFrom: stamp: 'AA 12/10/2020 21:45:05'!
takeStageObjectFrom: aPosition
	
	| stageObject |

	(self isInBounds: aPosition) ifFalse: [ self error: Room cannotTakeStageObjectFromPositionOutOfBoundaries ].
	(self hasStageItemAt: aPosition) ifFalse: [ self error: Room cannotTakeStageObjectFromEmptyPosition ].
	
	stageObject :=  stageObjects at: aPosition.
	
	stageObject addToPlayableCharacter: nil.
	stageObject removeFrom: self at: aPosition.
	
	
	^ stageObject.!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'AA 12/10/2020 21:45:21' prior: 50882262!
take

	room takeStageObjectAt: position + heading forwardPoint for: self.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 21:45:24'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 21:45:24'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 21:45:24'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 21:45:24'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 21:45:24'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 21:45:24'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 21:45:24'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 21:45:24'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 21:45:24'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 21:45:24'!
PASSED!

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardCollidingOnStageObject stamp: 'AA 12/10/2020 21:45:24'!
PASSED!

!testRun: #PlayableCharacterTest #test12_cannotMoveBackwardCollidingOnStageObject stamp: 'AA 12/10/2020 21:45:24'!
PASSED!

!testRun: #PlayableCharacterTest #test13_cannotMoveCollidingOnMapBoundary stamp: 'AA 12/10/2020 21:45:24'!
PASSED!

!testRun: #PlayableCharacterTest #test14_cannotCreatePlayerOnTopOfStageObject stamp: 'AA 12/10/2020 21:45:24'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakeStageObjectFromEmptyPosition stamp: 'AA 12/10/2020 21:45:24'!
PASSED!

!testRun: #PlayableCharacterTest #test16_cannotTakeStageObjectFromPositionOutOfBoundaries stamp: 'AA 12/10/2020 21:45:24'!
PASSED!

!testRun: #PlayableCharacterTest #test16_takingPortableObjectFromRoomAddsItToBackpack stamp: 'AA 12/10/2020 21:45:24'!
PASSED!

!testRun: #PlayableCharacterTest #test17_takingNoPortableObjectFromRoomAddsAllStageObjectsToBackpack stamp: 'AA 12/10/2020 21:45:24'!
ERROR!

!testRun: #PlayableCharacterTest #test17_takingNoPortableObjectFromRoomAddsAllStageObjectsToBackpack stamp: 'AA 12/10/2020 21:45:24'!
ERROR!

!testRun: #PlayableCharacterTest #test16_takingPortableObjectFromRoomAddsItToBackpack stamp: 'AA 12/10/2020 21:45:35'!
PASSED!

!testRun: #PlayableCharacterTest #test17_takingNoPortableObjectFromRoomAddsAllStageObjectsToBackpack stamp: 'AA 12/10/2020 21:45:40'!
ERROR!

!testRun: #PlayableCharacterTest #test17_takingNoPortableObjectFromRoomAddsAllStageObjectsToBackpack stamp: 'AA 12/10/2020 21:45:40'!
ERROR!

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 21:47:06'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 21:47:06'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 21:47:06'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 21:47:06'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 21:47:06'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 21:47:06'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 21:47:06'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 21:47:06'!
PASSED!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 21:47:06'!
PASSED!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 21:47:06'!
PASSED!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 21:47:06'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 21:47:08'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 21:47:08'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 21:47:08'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 21:47:08'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 21:47:08'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 21:47:08'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 21:47:08'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 21:47:08'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 21:47:08'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 21:47:08'!
PASSED!

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardCollidingOnStageObject stamp: 'AA 12/10/2020 21:47:08'!
PASSED!

!testRun: #PlayableCharacterTest #test12_cannotMoveBackwardCollidingOnStageObject stamp: 'AA 12/10/2020 21:47:08'!
PASSED!

!testRun: #PlayableCharacterTest #test13_cannotMoveCollidingOnMapBoundary stamp: 'AA 12/10/2020 21:47:08'!
PASSED!

!testRun: #PlayableCharacterTest #test14_cannotCreatePlayerOnTopOfStageObject stamp: 'AA 12/10/2020 21:47:08'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakeStageObjectFromEmptyPosition stamp: 'AA 12/10/2020 21:47:08'!
PASSED!

!testRun: #PlayableCharacterTest #test16_cannotTakeStageObjectFromPositionOutOfBoundaries stamp: 'AA 12/10/2020 21:47:08'!
PASSED!

!testRun: #PlayableCharacterTest #test16_takingPortableObjectFromRoomAddsItToBackpack stamp: 'AA 12/10/2020 21:47:08'!
PASSED!

!testRun: #PlayableCharacterTest #test17_takingNoPortableObjectFromRoomAddsAllStageObjectsToBackpack stamp: 'AA 12/10/2020 21:47:08'!
ERROR!

!testRun: #PlayableCharacterTest #test17_takingNoPortableObjectFromRoomAddsAllStageObjectsToBackpack stamp: 'AA 12/10/2020 21:47:08'!
ERROR!

self contents.!

!testRun: #PlayableCharacterTest #test17_takingNoPortableObjectFromRoomAddsAllStageObjectsToBackpack stamp: 'AA 12/10/2020 21:49:04'!
ERROR!
!NoPortableObject class methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 21:49:32' prior: 50881670!
named: aName carrying: initialStageObjects
	^ self new initializeNamed: aName carrying: initialStageObjects.
! !

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 21:49:34'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 21:49:34'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 21:49:34'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 21:49:34'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 21:49:34'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 21:49:34'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 21:49:34'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 21:49:34'!
PASSED!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 21:49:34'!
PASSED!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 21:49:34'!
PASSED!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 21:49:34'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 21:49:36'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 21:49:36'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 21:49:36'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 21:49:36'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 21:49:36'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 21:49:36'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 21:49:36'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 21:49:36'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 21:49:36'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 21:49:36'!
PASSED!

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardCollidingOnStageObject stamp: 'AA 12/10/2020 21:49:36'!
PASSED!

!testRun: #PlayableCharacterTest #test12_cannotMoveBackwardCollidingOnStageObject stamp: 'AA 12/10/2020 21:49:36'!
PASSED!

!testRun: #PlayableCharacterTest #test13_cannotMoveCollidingOnMapBoundary stamp: 'AA 12/10/2020 21:49:36'!
PASSED!

!testRun: #PlayableCharacterTest #test14_cannotCreatePlayerOnTopOfStageObject stamp: 'AA 12/10/2020 21:49:36'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakeStageObjectFromEmptyPosition stamp: 'AA 12/10/2020 21:49:36'!
PASSED!

!testRun: #PlayableCharacterTest #test16_cannotTakeStageObjectFromPositionOutOfBoundaries stamp: 'AA 12/10/2020 21:49:36'!
PASSED!

!testRun: #PlayableCharacterTest #test16_takingPortableObjectFromRoomAddsItToBackpack stamp: 'AA 12/10/2020 21:49:36'!
PASSED!

!testRun: #PlayableCharacterTest #test17_takingNoPortableObjectFromRoomAddsAllStageObjectsToBackpack stamp: 'AA 12/10/2020 21:49:36'!
FAILURE!

!testRun: #PlayableCharacterTest #test17_takingNoPortableObjectFromRoomAddsAllStageObjectsToBackpack stamp: 'AA 12/10/2020 21:49:36'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 21:49:48' prior: 50882032!
test17_takingNoPortableObjectFromRoomAddsAllStageObjectsToBackpack

	| playableCharacter room stageObjects wardrobe wardrobeContents |

	wardrobe := testObjects wardrobe.
	wardrobeContents := wardrobe contents.
	stageObjects := Dictionary new.
	stageObjects at: 1@4 put: wardrobe.
	room := testObjects roomWithStageObjects: stageObjects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@3 heading: #North.
	
	playableCharacter take.

	"self assert: (playableCharacter backpackIncludes: wardrobeContents)."
	self assert: (room hasStageItemAt: 1@4).! !

!testRun: #PlayableCharacterTest #test17_takingNoPortableObjectFromRoomAddsAllStageObjectsToBackpack stamp: 'AA 12/10/2020 21:49:51'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 21:49:51'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 21:49:51'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 21:49:51'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 21:49:51'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 21:49:51'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 21:49:51'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 21:49:51'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 21:49:51'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 21:49:51'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 21:49:51'!
PASSED!

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardCollidingOnStageObject stamp: 'AA 12/10/2020 21:49:51'!
PASSED!

!testRun: #PlayableCharacterTest #test12_cannotMoveBackwardCollidingOnStageObject stamp: 'AA 12/10/2020 21:49:51'!
PASSED!

!testRun: #PlayableCharacterTest #test13_cannotMoveCollidingOnMapBoundary stamp: 'AA 12/10/2020 21:49:51'!
PASSED!

!testRun: #PlayableCharacterTest #test14_cannotCreatePlayerOnTopOfStageObject stamp: 'AA 12/10/2020 21:49:51'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakeStageObjectFromEmptyPosition stamp: 'AA 12/10/2020 21:49:51'!
PASSED!

!testRun: #PlayableCharacterTest #test16_cannotTakeStageObjectFromPositionOutOfBoundaries stamp: 'AA 12/10/2020 21:49:51'!
PASSED!

!testRun: #PlayableCharacterTest #test16_takingPortableObjectFromRoomAddsItToBackpack stamp: 'AA 12/10/2020 21:49:51'!
PASSED!

!testRun: #PlayableCharacterTest #test17_takingNoPortableObjectFromRoomAddsAllStageObjectsToBackpack stamp: 'AA 12/10/2020 21:49:51'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 21:50:58' prior: 50882622!
test17_takingNoPortableObjectFromRoomAddsAllStageObjectsToBackpack

	| playableCharacter room stageObjects wardrobe wardrobeContents |

	wardrobe := testObjects wardrobe.
	wardrobeContents := wardrobe contents.
	stageObjects := Dictionary new.
	stageObjects at: 1@4 put: wardrobe.
	room := testObjects roomWithStageObjects: stageObjects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@3 heading: #North.
	
	playableCharacter take.
	
	wardrobeContents do: [ :aPortableObject | self assert: (playableCharacter backpackIncludes: aPortableObject)].
	self assert: (room hasStageItemAt: 1@4).! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AA 12/10/2020 21:51:00' prior: 50882719!
test17_takingNoPortableObjectFromRoomAddsAllStageObjectsToBackpack

	| playableCharacter room stageObjects wardrobe wardrobeContents |

	wardrobe := testObjects wardrobe.
	wardrobeContents := wardrobe contents.
	stageObjects := Dictionary new.
	stageObjects at: 1@4 put: wardrobe.
	room := testObjects roomWithStageObjects: stageObjects.
	playableCharacter := PlayableCharacter named: 'Luigi' using: testObjects defaultBackpack in: room at: 1@3 heading: #North.
	
	playableCharacter take.
	
	wardrobeContents do: [ :aPortableObject | self assert: (playableCharacter backpackIncludes: aPortableObject) ].
	self assert: (room hasStageItemAt: 1@4).! !

!testRun: #PlayableCharacterTest #test17_takingNoPortableObjectFromRoomAddsAllStageObjectsToBackpack stamp: 'AA 12/10/2020 21:51:00'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 21:51:00'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 21:51:00'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 21:51:00'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 21:51:00'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 21:51:00'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 21:51:00'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 21:51:00'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 21:51:00'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 21:51:00'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 21:51:00'!
PASSED!

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardCollidingOnStageObject stamp: 'AA 12/10/2020 21:51:00'!
PASSED!

!testRun: #PlayableCharacterTest #test12_cannotMoveBackwardCollidingOnStageObject stamp: 'AA 12/10/2020 21:51:00'!
PASSED!

!testRun: #PlayableCharacterTest #test13_cannotMoveCollidingOnMapBoundary stamp: 'AA 12/10/2020 21:51:00'!
PASSED!

!testRun: #PlayableCharacterTest #test14_cannotCreatePlayerOnTopOfStageObject stamp: 'AA 12/10/2020 21:51:00'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakeStageObjectFromEmptyPosition stamp: 'AA 12/10/2020 21:51:00'!
PASSED!

!testRun: #PlayableCharacterTest #test16_cannotTakeStageObjectFromPositionOutOfBoundaries stamp: 'AA 12/10/2020 21:51:00'!
PASSED!

!testRun: #PlayableCharacterTest #test16_takingPortableObjectFromRoomAddsItToBackpack stamp: 'AA 12/10/2020 21:51:00'!
PASSED!

!testRun: #PlayableCharacterTest #test17_takingNoPortableObjectFromRoomAddsAllStageObjectsToBackpack stamp: 'AA 12/10/2020 21:51:00'!
PASSED!
!Room methodsFor: 'accessing' stamp: 'AA 12/10/2020 21:51:23' prior: 50882267!
takeStageObjectAt: aPosition for: aPlayableCharacter
	
	| stageObject |

	(self isInBounds: aPosition) ifFalse: [ self error: Room cannotTakeStageObjectFromPositionOutOfBoundaries ].
	(self hasStageItemAt: aPosition) ifFalse: [ self error: Room cannotTakeStageObjectFromEmptyPosition ].
	
	stageObject :=  stageObjects at: aPosition.
	
	stageObject addToPlayableCharacter: aPlayableCharacter.
	stageObject removeFrom: self at: aPosition.
	
	^ stageObject.! !
!Room methodsFor: 'accessing' stamp: 'AA 12/10/2020 21:51:29' prior: 50882840!
takeStageObjectAt: aPosition for: aPlayableCharacter
	
	| stageObject |

	(self isInBounds: aPosition) ifFalse: [ self error: Room cannotTakeStageObjectFromPositionOutOfBoundaries ].
	(self hasStageItemAt: aPosition) ifFalse: [ self error: Room cannotTakeStageObjectFromEmptyPosition ].
	
	stageObject :=  stageObjects at: aPosition.
	stageObject addToPlayableCharacter: aPlayableCharacter.
	stageObject removeFrom: self at: aPosition.
	
	^ stageObject.! !
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 21:52:25' prior: 50882132!
addToPlayableCharacter: aPlayableCharacter

	self contents do: [ :aPortableObject |
		aPlayableCharacter take: aPortableObject.
		self removePortableObject: aPortableObject.
	]! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 21:52:28'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 21:52:28'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 21:52:28'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 21:52:28'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 21:52:28'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 21:52:28'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 21:52:28'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 21:52:28'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 21:52:28'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 21:52:28'!
PASSED!

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardCollidingOnStageObject stamp: 'AA 12/10/2020 21:52:28'!
PASSED!

!testRun: #PlayableCharacterTest #test12_cannotMoveBackwardCollidingOnStageObject stamp: 'AA 12/10/2020 21:52:28'!
PASSED!

!testRun: #PlayableCharacterTest #test13_cannotMoveCollidingOnMapBoundary stamp: 'AA 12/10/2020 21:52:28'!
PASSED!

!testRun: #PlayableCharacterTest #test14_cannotCreatePlayerOnTopOfStageObject stamp: 'AA 12/10/2020 21:52:28'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakeStageObjectFromEmptyPosition stamp: 'AA 12/10/2020 21:52:28'!
PASSED!

!testRun: #PlayableCharacterTest #test16_cannotTakeStageObjectFromPositionOutOfBoundaries stamp: 'AA 12/10/2020 21:52:28'!
PASSED!

!testRun: #PlayableCharacterTest #test16_takingPortableObjectFromRoomAddsItToBackpack stamp: 'AA 12/10/2020 21:52:28'!
PASSED!

!testRun: #PlayableCharacterTest #test17_takingNoPortableObjectFromRoomAddsAllStageObjectsToBackpack stamp: 'AA 12/10/2020 21:52:28'!
PASSED!
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'AA 12/10/2020 21:53:39' prior: 50882116!
removeFrom: aRoom at: aPosition
	" Only portable object need to be removed from the room"! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AA 12/10/2020 21:53:45'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AA 12/10/2020 21:53:45'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AA 12/10/2020 21:53:45'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AA 12/10/2020 21:53:45'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AA 12/10/2020 21:53:45'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AA 12/10/2020 21:53:45'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AA 12/10/2020 21:53:45'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AA 12/10/2020 21:53:45'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AA 12/10/2020 21:53:45'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AA 12/10/2020 21:53:45'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AA 12/10/2020 21:53:45'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AA 12/10/2020 21:53:46'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AA 12/10/2020 21:53:46'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AA 12/10/2020 21:53:46'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AA 12/10/2020 21:53:46'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AA 12/10/2020 21:53:46'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AA 12/10/2020 21:53:46'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AA 12/10/2020 21:53:46'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AA 12/10/2020 21:53:46'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AA 12/10/2020 21:53:46'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AA 12/10/2020 21:53:46'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AA 12/10/2020 21:53:46'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AA 12/10/2020 21:53:46'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AA 12/10/2020 21:53:46'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AA 12/10/2020 21:53:46'!
PASSED!

!testRun: #PlayableCharacterTest #test11_cannotMoveForwardCollidingOnStageObject stamp: 'AA 12/10/2020 21:53:46'!
PASSED!

!testRun: #PlayableCharacterTest #test12_cannotMoveBackwardCollidingOnStageObject stamp: 'AA 12/10/2020 21:53:46'!
PASSED!

!testRun: #PlayableCharacterTest #test13_cannotMoveCollidingOnMapBoundary stamp: 'AA 12/10/2020 21:53:46'!
PASSED!

!testRun: #PlayableCharacterTest #test14_cannotCreatePlayerOnTopOfStageObject stamp: 'AA 12/10/2020 21:53:46'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakeStageObjectFromEmptyPosition stamp: 'AA 12/10/2020 21:53:46'!
PASSED!

!testRun: #PlayableCharacterTest #test16_cannotTakeStageObjectFromPositionOutOfBoundaries stamp: 'AA 12/10/2020 21:53:46'!
PASSED!

!testRun: #PlayableCharacterTest #test16_takingPortableObjectFromRoomAddsItToBackpack stamp: 'AA 12/10/2020 21:53:46'!
PASSED!

!testRun: #PlayableCharacterTest #test17_takingNoPortableObjectFromRoomAddsAllStageObjectsToBackpack stamp: 'AA 12/10/2020 21:53:46'!
PASSED!

!testRun: #RoomTest #test01RoomWidthCannotBeZero stamp: 'AA 12/10/2020 21:53:46'!
PASSED!

!testRun: #RoomTest #test02RoomWidthCannotBeLessThanZero stamp: 'AA 12/10/2020 21:53:46'!
PASSED!

!testRun: #RoomTest #test03RoomHeightCannotBeZero stamp: 'AA 12/10/2020 21:53:46'!
PASSED!

!testRun: #RoomTest #test04RoomHeightCannotBeLessThanZero stamp: 'AA 12/10/2020 21:53:46'!
PASSED!

!testRun: #RoomTest #test05RoomWidthMustBeAnInteger stamp: 'AA 12/10/2020 21:53:46'!
PASSED!

!testRun: #RoomTest #test06RoomHeightMustBeAnInteger stamp: 'AA 12/10/2020 21:53:46'!
PASSED!

!testRun: #RoomTest #test07RoomStoresWidthAndHeight stamp: 'AA 12/10/2020 21:53:46'!
PASSED!

!testRun: #RoomTest #test08StageObjectsAreWithinLeftBoundary stamp: 'AA 12/10/2020 21:53:46'!
PASSED!

!testRun: #RoomTest #test09StageObjectsAreWithinBottomBoundary stamp: 'AA 12/10/2020 21:53:46'!
PASSED!

!testRun: #RoomTest #test10StageObjectsAreWithinRightBoundary stamp: 'AA 12/10/2020 21:53:46'!
PASSED!

!testRun: #RoomTest #test11StageObjectsAreWithinTopBoundary stamp: 'AA 12/10/2020 21:53:46'!
PASSED!

----SNAPSHOT----(10 December 2020 21:53:56) CuisUniversity-4383.image priorSource: 17597146!

----QUIT----(10 December 2020 21:54:53) CuisUniversity-4383.image priorSource: 17646946!