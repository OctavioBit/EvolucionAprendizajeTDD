----STARTUP---- (10 December 2020 15:11:33) as /Users/dbenitez/uba/2c2020-IS1/Quiz/2doParcialCuis/CuisUniversity-4384.image!


----End fileIn of /Users/dbenitez/uba/2c2020-IS1/Quiz/2doParcialCuis/ISW1-2020-2C-2doParcial.st----!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'DB 12/10/2020 15:14:52'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'DB 12/10/2020 15:14:52'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'DB 12/10/2020 15:14:52'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'DB 12/10/2020 15:14:52'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'DB 12/10/2020 15:14:52'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'DB 12/10/2020 15:14:52'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'DB 12/10/2020 15:14:52'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'DB 12/10/2020 15:14:52'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'DB 12/10/2020 15:14:52'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'DB 12/10/2020 15:14:52'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'DB 12/10/2020 15:14:52'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'DB 12/10/2020 15:14:52'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'DB 12/10/2020 15:14:52'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'DB 12/10/2020 15:14:52'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'DB 12/10/2020 15:14:52'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/10/2020 15:14:52'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/10/2020 15:14:52'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/10/2020 15:14:52'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/10/2020 15:14:52'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/10/2020 15:14:52'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/10/2020 15:14:52'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/10/2020 15:14:52'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/10/2020 15:14:52'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/10/2020 15:14:52'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/10/2020 15:14:52'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/10/2020 15:29:29'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/10/2020 15:34:59'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/10/2020 15:36:52'!
PASSED!

----QUIT----(10 December 2020 15:59:38) CuisUniversity-4384.image priorSource: 17155993!

----STARTUP---- (10 December 2020 16:03:09) as /Users/dbenitez/uba/2c2020-IS1/Quiz/2doParcialCuis/CuisUniversity-4384.image!


----QUIT----(10 December 2020 16:11:11) CuisUniversity-4384.image priorSource: 17187397!

----STARTUP---- (10 December 2020 16:51:41) as /Users/dbenitez/uba/2c2020-IS1/Quiz/2doParcialCuis/CuisUniversity-4384.image!


----QUIT----(10 December 2020 17:47:57) CuisUniversity-4384.image priorSource: 17187614!

----STARTUP---- (10 December 2020 17:54:45) as /Users/dbenitez/uba/2c2020-IS1/Quiz/2doParcialCuis/CuisUniversity-4384.image!


TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'DB 12/10/2020 17:58:37'!
TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'DB 12/10/2020 18:13:52'!
Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'nil' stamp: 'DB 12/10/2020 18:14:09'!
test01CanNotCreateRoomWithHeightNegativePositions

	self
		should: [ Room height: -1 width: 2]
		raise: Error
		withMessageText: Room invalidHeightErrorDescription! !

!testRun: #RoomTest #test01CanNotCreateRoomWithHeightNegativePositions stamp: 'DB 12/10/2020 18:14:15'!
ERROR!

!testRun: #RoomTest #test01CanNotCreateRoomWithHeightNegativePositions stamp: 'DB 12/10/2020 18:14:15'!
ERROR!
!Room class methodsFor: 'instance creation' stamp: 'DB 12/10/2020 18:14:27'!
invalidHeightErrorDescription
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeInvalidHeightErrorDescription! !
!Room class methodsFor: 'instance creation' stamp: 'DB 12/10/2020 18:15:03' prior: 50868811!
invalidHeightErrorDescription
	^'invalid height'! !

!testRun: #RoomTest #test01CanNotCreateRoomWithHeightNegativePositions stamp: 'DB 12/10/2020 18:15:04'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 18:15:23' prior: 50868796!
test01CanNotCreateRoomWithHeightNegativePositions

	self
		should: [ Room height: -1 width: 2 ]
		raise: Error
		withMessageText: Room invalidHeightErrorDescription! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 18:15:36' prior: 50868829!
test01CanNotCreateRoomWithHeightNegativePositions

	self
		should: [ Room height: -1 width: 2 ]
		raise: Error
		withMessageText: Room invalidHeightErrorDescription.! !

!testRun: #RoomTest #test01CanNotCreateRoomWithHeightNegativePositions stamp: 'DB 12/10/2020 18:15:48'!
FAILURE!

!testRun: #RoomTest #test01CanNotCreateRoomWithHeightNegativePositions stamp: 'DB 12/10/2020 18:15:48'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'DB 12/10/2020 18:17:37'!
height: aHeight width: aWidth

	self error: self invalidHeightErrorDescription .! !

!testRun: #RoomTest #test01CanNotCreateRoomWithHeightNegativePositions stamp: 'DB 12/10/2020 18:17:59'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 18:18:36'!
test01CanNotCreateRoomWithWidthNegativePositions

	self
		should: [ Room height: -1 width: 2 ]
		raise: Error
		withMessageText: Room invalidHeightErrorDescription.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 18:18:42' prior: 50868862!
test01CanNotCreateRoomWithWidthNegativePositions

	self
		should: [ Room height: -1 width: 2 ]
		raise: Error
		withMessageText: Room invalidWidhtErrorDescription.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 18:18:50' prior: 50868871!
test01CanNotCreateRoomWithWidthNegativePositions

	self
		should: [ Room height: 1 width: -2 ]
		raise: Error
		withMessageText: Room invalidWidhtErrorDescription.! !

!testRun: #RoomTest #test01CanNotCreateRoomWithHeightNegativePositions stamp: 'DB 12/10/2020 18:18:54'!
PASSED!

!testRun: #RoomTest #test01CanNotCreateRoomWithWidthNegativePositions stamp: 'DB 12/10/2020 18:18:54'!
ERROR!

!testRun: #RoomTest #test01CanNotCreateRoomWithWidthNegativePositions stamp: 'DB 12/10/2020 18:18:54'!
ERROR!
!Room class methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 18:19:06'!
invalidWidhtErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 18:19:25' prior: 50868899!
invalidWidhtErrorDescription
	^'invalid widht'! !

!testRun: #RoomTest #test01CanNotCreateRoomWithWidthNegativePositions stamp: 'DB 12/10/2020 18:19:27'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 18:19:50'!
test02CanNotCreateRoomWithWidthNegativePositions

	self
		should: [ Room height: 1 width: -2 ]
		raise: Error
		withMessageText: Room invalidWidhtErrorDescription.! !

!methodRemoval: RoomTest #test01CanNotCreateRoomWithWidthNegativePositions stamp: 'DB 12/10/2020 18:19:50'!
test01CanNotCreateRoomWithWidthNegativePositions

	self
		should: [ Room height: 1 width: -2 ]
		raise: Error
		withMessageText: Room invalidWidhtErrorDescription.!
!Room class methodsFor: 'instance creation' stamp: 'DB 12/10/2020 18:22:36' prior: 50868853!
height: aHeight width: aWidth


	aHeight strictlyPositive ifFalse: [self signalInvalidHeight.].
	aWidth strictlyPositive ifFalse: [self signalInvalidWidth].! !

!testRun: #RoomTest #test02CanNotCreateRoomWithWidthNegativePositions stamp: 'DB 12/10/2020 18:22:44'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'DB 12/10/2020 18:23:21'!
signalInvalidWidth
	^self error: self invalidWidhtErrorDescription ! !
!Room class methodsFor: 'instance creation' stamp: 'DB 12/10/2020 18:23:47'!
signalInvalidHeight
	^self error:  self invalidHeightErrorDescription ! !
!Room class methodsFor: 'instance creation' stamp: 'DB 12/10/2020 18:23:57' prior: 50868929!
height: aHeight width: aWidth

	aHeight strictlyPositive ifFalse: [self signalInvalidHeight.].
	aWidth strictlyPositive ifFalse: [self signalInvalidWidth].! !

!testRun: #RoomTest #test01CanNotCreateRoomWithHeightNegativePositions stamp: 'DB 12/10/2020 18:24:02'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithWidthNegativePositions stamp: 'DB 12/10/2020 18:24:02'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 18:25:17'!
test01CanNotCreateRoomWithHeightLessThanOne

	self
		should: [ Room height: -1 width: 2 ]
		raise: Error
		withMessageText: Room invalidHeightErrorDescription.! !

!methodRemoval: RoomTest #test01CanNotCreateRoomWithHeightNegativePositions stamp: 'DB 12/10/2020 18:25:17'!
test01CanNotCreateRoomWithHeightNegativePositions

	self
		should: [ Room height: -1 width: 2 ]
		raise: Error
		withMessageText: Room invalidHeightErrorDescription.!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 18:25:25' prior: 50868966!
test01CanNotCreateRoomWithHeightLessThanOne

	self
		should: [ Room height: 0 width: 2 ]
		raise: Error
		withMessageText: Room invalidHeightErrorDescription.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 18:25:39'!
test02CanNotCreateRoomWithWidthLessThanOne

	self
		should: [ Room height: 1 width: -2 ]
		raise: Error
		withMessageText: Room invalidWidhtErrorDescription.! !

!methodRemoval: RoomTest #test02CanNotCreateRoomWithWidthNegativePositions stamp: 'DB 12/10/2020 18:25:39'!
test02CanNotCreateRoomWithWidthNegativePositions

	self
		should: [ Room height: 1 width: -2 ]
		raise: Error
		withMessageText: Room invalidWidhtErrorDescription.!

!testRun: #RoomTest #test01CanNotCreateRoomWithHeightLessThanOne stamp: 'DB 12/10/2020 18:25:43'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithWidthLessThanOne stamp: 'DB 12/10/2020 18:25:43'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 18:29:25' prior: 50868991!
test02CanNotCreateRoomWithWidthLessThanOne

	self
		should: [ Room height: 1 width: 0 ]
		raise: Error
		withMessageText: Room invalidWidhtErrorDescription.! !

!testRun: #RoomTest #test01CanNotCreateRoomWithHeightLessThanOne stamp: 'DB 12/10/2020 18:29:29'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithWidthLessThanOne stamp: 'DB 12/10/2020 18:29:29'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 18:37:48'!
test0CanNotAddAStageObjectOutOfBounds

	| room |
	room := Room height: 1 width: 1.
	
	self
		should: [room add: PortableObject new at: (2@2). ]
		raise: Error
		withMessageText: Room ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 18:39:31' prior: 50869030!
test0CanNotAddAStageObjectOutOfBounds

	| room |
	room := Room height: 1 width: 1.
	
	self
		should: [room add: PortableObject new at: (2@2). ]
		raise: Error
		withMessageText: Room cannotAddAStageObjectOutOfBoundsErrorDescription.! !

!testRun: #RoomTest #test01CanNotCreateRoomWithHeightLessThanOne stamp: 'DB 12/10/2020 18:39:38'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithWidthLessThanOne stamp: 'DB 12/10/2020 18:39:38'!
PASSED!

!testRun: #RoomTest #test0CanNotAddAStageObjectOutOfBounds stamp: 'DB 12/10/2020 18:39:38'!
ERROR!

!testRun: #RoomTest #test0CanNotAddAStageObjectOutOfBounds stamp: 'DB 12/10/2020 18:39:38'!
ERROR!

----QUIT----(10 December 2020 18:42:37) CuisUniversity-4384.image priorSource: 17187831!

----STARTUP---- (10 December 2020 18:44:28) as /Users/dbenitez/uba/2c2020-IS1/Quiz/2doParcialCuis/CuisUniversity-4384.image!

!RoomTest methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 18:45:07'!
test03CanNotAddAStageObjectOutOfBounds

	| room |
	room := Room height: 1 width: 1.
	
	self
		should: [room add: PortableObject new at: (2@2). ]
		raise: Error
		withMessageText: Room cannotAddAStageObjectOutOfBoundsErrorDescription.! !

!methodRemoval: RoomTest #test0CanNotAddAStageObjectOutOfBounds stamp: 'DB 12/10/2020 18:45:07'!
test0CanNotAddAStageObjectOutOfBounds

	| room |
	room := Room height: 1 width: 1.
	
	self
		should: [room add: PortableObject new at: (2@2). ]
		raise: Error
		withMessageText: Room cannotAddAStageObjectOutOfBoundsErrorDescription.!

----SNAPSHOT----(10 December 2020 18:45:12) CuisUniversity-4384.image priorSource: 17197160!

!testRun: #RoomTest #test01CanNotCreateRoomWithHeightLessThanOne stamp: 'DB 12/10/2020 18:45:22'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithWidthLessThanOne stamp: 'DB 12/10/2020 18:45:22'!
PASSED!

!testRun: #RoomTest #test03CanNotAddAStageObjectOutOfBounds stamp: 'DB 12/10/2020 18:45:22'!
ERROR!

!testRun: #RoomTest #test03CanNotAddAStageObjectOutOfBounds stamp: 'DB 12/10/2020 18:45:22'!
ERROR!
!Room class methodsFor: 'instance creation' stamp: 'DB 12/10/2020 18:45:31'!
cannotAddAStageObjectOutOfBoundsErrorDescription
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeCannotAddAStageObjectOutOfBoundsErrorDescription! !
!Room class methodsFor: 'instance creation' stamp: 'DB 12/10/2020 18:45:56' prior: 50869106!
cannotAddAStageObjectOutOfBoundsErrorDescription
	^'cannot add a Stage Object out of bounds'! !

!testRun: #RoomTest #test03CanNotAddAStageObjectOutOfBounds stamp: 'DB 12/10/2020 18:45:58'!
FAILURE!

!testRun: #RoomTest #test03CanNotAddAStageObjectOutOfBounds stamp: 'DB 12/10/2020 18:46:27'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 18:46:54' prior: 50869069!
test03CanNotAddAStageObjectOutOfBounds

	| room |
	room := Room height: 1 width: 1.
	
	self
		should: [room add: PortableObject new at: (2@2). ]
		raise: Error 
		withMessageText: Room cannotAddAStageObjectOutOfBoundsErrorDescription.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 18:48:13' prior: 50869129!
test03CanNotAddAStageObjectOutOfBounds

	| room |
	room := Room height: 1 width: 1.
	
	self
		should: [room add: PortableObject new at: (2@2). ]
		raise: Error -MessageNotUnderstood 
		withMessageText: Room cannotAddAStageObjectOutOfBoundsErrorDescription.! !

!testRun: #RoomTest #test01CanNotCreateRoomWithHeightLessThanOne stamp: 'DB 12/10/2020 18:48:17'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithWidthLessThanOne stamp: 'DB 12/10/2020 18:48:17'!
PASSED!

!testRun: #RoomTest #test03CanNotAddAStageObjectOutOfBounds stamp: 'DB 12/10/2020 18:48:17'!
ERROR!

!testRun: #RoomTest #test03CanNotAddAStageObjectOutOfBounds stamp: 'DB 12/10/2020 18:48:17'!
ERROR!
!Room class methodsFor: 'accessing' stamp: 'DB 12/10/2020 18:48:31'!
add: aPortableObject at: aPoint 
	self shouldBeImplemented.! !

!testRun: #RoomTest #test03CanNotAddAStageObjectOutOfBounds stamp: 'DB 12/10/2020 18:49:40'!
FAILURE!
!Room methodsFor: 'nil' stamp: 'DB 12/10/2020 18:50:21'!
add: aPortableObject at: aPoint 
	self shouldBeImplemented.! !

!methodRemoval: Room class #add:at: stamp: 'DB 12/10/2020 18:50:29'!
add: aPortableObject at: aPoint 
	self shouldBeImplemented.!
!Room class methodsFor: 'signal' stamp: 'DB 12/10/2020 18:51:46'!
signalCannotAddAStageObjecteOutOfBounds
	^self error:  self cannotAddAStageObjectOutOfBoundsErrorDescription ! !
!Room methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 18:51:55' prior: 50869171!
add: aPortableObject at: aPoint 
	self signalCannotAddAStageObjecteOutOfBounds .! !

!testRun: #RoomTest #test01CanNotCreateRoomWithHeightLessThanOne stamp: 'DB 12/10/2020 18:52:14'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithWidthLessThanOne stamp: 'DB 12/10/2020 18:52:15'!
PASSED!

!testRun: #RoomTest #test03CanNotAddAStageObjectOutOfBounds stamp: 'DB 12/10/2020 18:52:15'!
ERROR!

!testRun: #RoomTest #test03CanNotAddAStageObjectOutOfBounds stamp: 'DB 12/10/2020 18:52:15'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 18:52:56' prior: 50869140!
test03CanNotAddAStageObjectOutOfBounds

	| room |
	room := Room height: 1 width: 1.
	
	self
		should: [room add: (PortableObject new) at: (2@2). ]
		raise: Error -MessageNotUnderstood 
		withMessageText: Room cannotAddAStageObjectOutOfBoundsErrorDescription.! !

!testRun: #RoomTest #test01CanNotCreateRoomWithHeightLessThanOne stamp: 'DB 12/10/2020 18:53:01'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithWidthLessThanOne stamp: 'DB 12/10/2020 18:53:01'!
PASSED!

!testRun: #RoomTest #test03CanNotAddAStageObjectOutOfBounds stamp: 'DB 12/10/2020 18:53:01'!
ERROR!

!testRun: #RoomTest #test03CanNotAddAStageObjectOutOfBounds stamp: 'DB 12/10/2020 18:53:01'!
ERROR!
!Room methodsFor: 'adding' stamp: 'DB 12/10/2020 18:54:54' prior: 50869187!
 add: aPortableObject at: aPoint 


	^self signalCannotAddAStageObjecteOutOfBounds .! !
!Room class methodsFor: 'instance creation' stamp: 'DB 12/10/2020 18:55:41' prior: 50868951!
height: aHeight width: aWidth

	aHeight strictlyPositive ifFalse: [self signalInvalidHeight.].
	aWidth strictlyPositive ifFalse: [self signalInvalidWidth].
	
	^Room inializeWith: aHeight andWidth: aWidth! !

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'DB 12/10/2020 18:56:29'!
Object subclass: #Room
	instanceVariableNames: 'height'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'DB 12/10/2020 18:56:37'!
Object subclass: #Room
	instanceVariableNames: 'height width'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'adding' stamp: 'DB 12/10/2020 18:56:35'!
inializeWith: aHeight andWidth: aWidth

	height := aHeight .
	width := aWidth .


	^self signalCannotAddAStageObjecteOutOfBounds .! !

!testRun: #RoomTest #test01CanNotCreateRoomWithHeightLessThanOne stamp: 'DB 12/10/2020 18:56:42'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithWidthLessThanOne stamp: 'DB 12/10/2020 18:56:42'!
PASSED!

!testRun: #RoomTest #test03CanNotAddAStageObjectOutOfBounds stamp: 'DB 12/10/2020 18:56:42'!
ERROR!

!testRun: #RoomTest #test03CanNotAddAStageObjectOutOfBounds stamp: 'DB 12/10/2020 18:56:42'!
ERROR!

!testRun: #RoomTest #test03CanNotAddAStageObjectOutOfBounds stamp: 'DB 12/10/2020 18:57:00'!
ERROR!
!Room class methodsFor: 'instance creation' stamp: 'DB 12/10/2020 18:57:15' prior: 50869236!
height: aHeight width: aWidth

	aHeight strictlyPositive ifFalse: [self signalInvalidHeight.].
	aWidth strictlyPositive ifFalse: [self signalInvalidWidth].
	
	^Room new inializeWith: aHeight andWidth: aWidth! !

!testRun: #RoomTest #test03CanNotAddAStageObjectOutOfBounds stamp: 'DB 12/10/2020 18:57:16'!
ERROR!
!Room methodsFor: 'adding' stamp: 'DB 12/10/2020 18:57:36' prior: 50869260!
inializeWith: aHeight andWidth: aWidth

	height := aHeight .
	width := aWidth .


	^self class signalCannotAddAStageObjecteOutOfBounds .! !

!testRun: #RoomTest #test03CanNotAddAStageObjectOutOfBounds stamp: 'DB 12/10/2020 18:57:38'!
ERROR!

!testRun: #RoomTest #test03CanNotAddAStageObjectOutOfBounds stamp: 'DB 12/10/2020 18:58:04'!
ERROR!
!Room methodsFor: 'adding' stamp: 'DB 12/10/2020 18:58:16' prior: 50869297!
inializeWith: aHeight andWidth: aWidth

	height := aHeight .
	width := aWidth .

! !

!testRun: #RoomTest #test03CanNotAddAStageObjectOutOfBounds stamp: 'DB 12/10/2020 18:58:18'!
ERROR!
!Room methodsFor: 'adding' stamp: 'DB 12/10/2020 18:58:37' prior: 50869230!
add: aPortableObject at: aPoint 


	^self class signalCannotAddAStageObjecteOutOfBounds .! !

!testRun: #RoomTest #test03CanNotAddAStageObjectOutOfBounds stamp: 'DB 12/10/2020 18:58:39'!
PASSED!

----SNAPSHOT----(10 December 2020 18:58:52) CuisUniversity-4384.image priorSource: 17198040!

!testRun: #RoomTest #test01CanNotCreateRoomWithHeightLessThanOne stamp: 'DB 12/10/2020 18:58:58'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithWidthLessThanOne stamp: 'DB 12/10/2020 18:58:58'!
PASSED!

!testRun: #RoomTest #test03CanNotAddAStageObjectOutOfBounds stamp: 'DB 12/10/2020 18:58:59'!
PASSED!

----SNAPSHOT----(10 December 2020 19:00:27) CuisUniversity-4384.image priorSource: 17205698!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 19:03:12'!
test04CanNotAddInAOccupatedPosition

	| room |
	room := Room height: 1 width: 1.
	
	room add: (PortableObject new) at: (0@0).
	
	self
		should: [room add: (PortableObject new) at: (0@0). ]
		raise: Error -MessageNotUnderstood 
		withMessageText: Room cannotAddInAnOccupatedPositionErrorDescription.! !

!testRun: #RoomTest #test01CanNotCreateRoomWithHeightLessThanOne stamp: 'DB 12/10/2020 19:03:23'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithWidthLessThanOne stamp: 'DB 12/10/2020 19:03:23'!
PASSED!

!testRun: #RoomTest #test03CanNotAddAStageObjectOutOfBounds stamp: 'DB 12/10/2020 19:03:23'!
PASSED!

!testRun: #RoomTest #test04CanNotAddInAOccupatedPosition stamp: 'DB 12/10/2020 19:03:23'!
ERROR!

!testRun: #RoomTest #test04CanNotAddInAOccupatedPosition stamp: 'DB 12/10/2020 19:03:23'!
ERROR!

!testRun: #RoomTest #test01CanNotCreateRoomWithHeightLessThanOne stamp: 'DB 12/10/2020 19:03:42'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithWidthLessThanOne stamp: 'DB 12/10/2020 19:03:42'!
PASSED!

!testRun: #RoomTest #test03CanNotAddAStageObjectOutOfBounds stamp: 'DB 12/10/2020 19:03:42'!
PASSED!

!testRun: #RoomTest #test04CanNotAddInAOccupatedPosition stamp: 'DB 12/10/2020 19:03:42'!
ERROR!

!testRun: #RoomTest #test04CanNotAddInAOccupatedPosition stamp: 'DB 12/10/2020 19:03:42'!
ERROR!
!Room methodsFor: 'adding' stamp: 'DB 12/10/2020 19:06:27' prior: 50869320!
add: aPortableObject at: aPosition 

	(aPosition between: 0@0 and: height@width) ifFalse: [^self class signalCannotAddAStageObjecteOutOfBounds .].

	! !

!testRun: #RoomTest #test04CanNotAddInAOccupatedPosition stamp: 'DB 12/10/2020 19:06:29'!
ERROR!
!Room class methodsFor: 'error descriptions' stamp: 'DB 12/10/2020 19:07:17'!
cannotAddInAnOccupatedPositionErrorDescription
	^'cannot add in an occupated position'! !
!Room class methodsFor: 'error descriptions' stamp: 'DB 12/10/2020 19:07:44'!
signalCannotAddInAnOccupatedPosition
	^self error:  self cannotAddInAnOccupatedPositionErrorDescription ! !
!Room methodsFor: 'adding' stamp: 'DB 12/10/2020 19:08:13' prior: 50869389!
add: aPortableObject at: aPosition 

	(aPosition between: 0@0 and: height@width) ifFalse: [^self class signalCannotAddAStageObjecteOutOfBounds .].
	
	^self class signalCannotAddInAnOccupatedPosition 
	! !

!testRun: #RoomTest #test01CanNotCreateRoomWithHeightLessThanOne stamp: 'DB 12/10/2020 19:08:22'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithWidthLessThanOne stamp: 'DB 12/10/2020 19:08:22'!
PASSED!

!testRun: #RoomTest #test03CanNotAddAStageObjectOutOfBounds stamp: 'DB 12/10/2020 19:08:22'!
PASSED!

!testRun: #RoomTest #test04CanNotAddInAOccupatedPosition stamp: 'DB 12/10/2020 19:08:22'!
ERROR!

!testRun: #RoomTest #test04CanNotAddInAOccupatedPosition stamp: 'DB 12/10/2020 19:08:22'!
ERROR!

----SNAPSHOT----(10 December 2020 19:10:32) CuisUniversity-4384.image priorSource: 17206107!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'DB 12/10/2020 19:10:46'!
Object subclass: #Room
	instanceVariableNames: 'height width occupatedPositions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'adding' stamp: 'DB 12/10/2020 19:11:07' prior: 50869412!
add: aPortableObject at: aPosition 

	(aPosition between: 0@0 and: height@width) ifFalse: [^self class signalCannotAddAStageObjecteOutOfBounds .].
	
	(occupatedPositions includes: aPosition) ifTrue: [	^self class signalCannotAddInAnOccupatedPosition].
	
	occupatedPositions add: aPosition.
	
	
	
	
	! !

!testRun: #RoomTest #test04CanNotAddInAOccupatedPosition stamp: 'DB 12/10/2020 19:11:14'!
ERROR!
!Room methodsFor: 'initialization' stamp: 'DB 12/10/2020 19:12:09' prior: 50869311!
inializeWith: aHeight andWidth: aWidth

	height := aHeight .
	width := aWidth .
	
	occupatedPositions = OrderedCollection new.

! !

!testRun: #RoomTest #test01CanNotCreateRoomWithHeightLessThanOne stamp: 'DB 12/10/2020 19:12:12'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithWidthLessThanOne stamp: 'DB 12/10/2020 19:12:12'!
PASSED!

!testRun: #RoomTest #test03CanNotAddAStageObjectOutOfBounds stamp: 'DB 12/10/2020 19:12:12'!
PASSED!

!testRun: #RoomTest #test04CanNotAddInAOccupatedPosition stamp: 'DB 12/10/2020 19:12:12'!
ERROR!

!testRun: #RoomTest #test04CanNotAddInAOccupatedPosition stamp: 'DB 12/10/2020 19:12:12'!
ERROR!

!testRun: #RoomTest #test04CanNotAddInAOccupatedPosition stamp: 'DB 12/10/2020 19:12:27'!
ERROR!
!Room methodsFor: 'initialization' stamp: 'DB 12/10/2020 19:13:00' prior: 50869464!
inializeWith: aHeight andWidth: aWidth

	height := aHeight .
	width := aWidth .
	
	occupatedPositions := OrderedCollection new.

! !

!testRun: #RoomTest #test04CanNotAddInAOccupatedPosition stamp: 'DB 12/10/2020 19:13:02'!
PASSED!

!testRun: #RoomTest #test01CanNotCreateRoomWithHeightLessThanOne stamp: 'DB 12/10/2020 19:13:05'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithWidthLessThanOne stamp: 'DB 12/10/2020 19:13:05'!
PASSED!

!testRun: #RoomTest #test03CanNotAddAStageObjectOutOfBounds stamp: 'DB 12/10/2020 19:13:05'!
PASSED!

!testRun: #RoomTest #test04CanNotAddInAOccupatedPosition stamp: 'DB 12/10/2020 19:13:05'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 19:16:52'!
test05APositionCanBeOnlyOccupatedForStageObject

	"Una posici�n s�lo puede ser ocupada por un StageObject aunque hay que tener en cuenta que los objetos no portables pueden 
	 contener otros portables y no portables.
	 Por ej. un armario puede contener un caj�n (ambos NotPortableObject) y dentro de este �ltimo se encuentran una llave y un papel."

	| room |
	room := Room height: 1 width: 1.
	
	room add: (PortableObject new) at: (0@0).
	
	self
		should: [room add: (PortableObject new) at: (0@0). ]
		raise: Error -MessageNotUnderstood 
		withMessageText: Room cannotAddInAnOccupatedPositionErrorDescription.! !

----SNAPSHOT----(10 December 2020 19:16:59) CuisUniversity-4384.image priorSource: 17209163!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 19:20:19'!
test05CanNotCreateARoomWithNoIntegeHeight

	self
		should: [ Room height: 1.1 width: 1 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Backpack heightMustBeIntegerErrorDescription.! !
!Room class methodsFor: 'error descriptions' stamp: 'DB 12/10/2020 19:20:42'!
heightMustBeIntegerErrorDescription
	^'heigh must be integer'! !
!Room class methodsFor: 'error descriptions' stamp: 'DB 12/10/2020 19:21:03'!
widhMustBeIntegerErrorDescription
	^'heigh must be integer'! !
!Room class methodsFor: 'error descriptions' stamp: 'DB 12/10/2020 19:21:33'!
invalidWidthtErrorDescription
	^'invalid widht'! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 19:21:33' prior: 50869015!
test02CanNotCreateRoomWithWidthLessThanOne

	self
		should: [ Room height: 1 width: 0 ]
		raise: Error
		withMessageText: Room invalidWidthtErrorDescription.! !
!Room class methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 19:21:33' prior: 50868940!
signalInvalidWidth
	^self error: self invalidWidthtErrorDescription ! !

!methodRemoval: Room class #invalidWidhtErrorDescription stamp: 'DB 12/10/2020 19:21:33'!
invalidWidhtErrorDescription
	^'invalid widht'!
!Room class methodsFor: 'error descriptions' stamp: 'DB 12/10/2020 19:22:25'!
signalHeightMustBeInteger
	^self error: self heightMustBeIntegerErrorDescription ! !
!Room class methodsFor: 'error descriptions' stamp: 'DB 12/10/2020 19:22:55'!
signalWidthMustBeIntegerErrorDescription
	^'width must be integer'! !
!Room class methodsFor: 'error descriptions' stamp: 'DB 12/10/2020 19:23:08'!
widthMustBeIntegerErrorDescription
	^'heigh must be integer'! !

!methodRemoval: Room class #widhMustBeIntegerErrorDescription stamp: 'DB 12/10/2020 19:23:08'!
widhMustBeIntegerErrorDescription
	^'heigh must be integer'!

!methodRemoval: RoomTest #test05CanNotCreateARoomWithNoIntegeHeight stamp: 'DB 12/10/2020 19:23:24'!
test05CanNotCreateARoomWithNoIntegeHeight

	self
		should: [ Room height: 1.1 width: 1 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Backpack heightMustBeIntegerErrorDescription.!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 19:23:46'!
_test05APositionCanBeOnlyOccupatedForStageObject

	"Una posici�n s�lo puede ser ocupada por un StageObject aunque hay que tener en cuenta que los objetos no portables pueden 
	 contener otros portables y no portables.
	 Por ej. un armario puede contener un caj�n (ambos NotPortableObject) y dentro de este �ltimo se encuentran una llave y un papel."

	| room |
	room := Room height: 1 width: 1.
	
	room add: (PortableObject new) at: (0@0).
	
	self
		should: [room add: (PortableObject new) at: (0@0). ]
		raise: Error -MessageNotUnderstood 
		withMessageText: Room cannotAddInAnOccupatedPositionErrorDescription.! !

!methodRemoval: RoomTest #test05APositionCanBeOnlyOccupatedForStageObject stamp: 'DB 12/10/2020 19:23:46'!
test05APositionCanBeOnlyOccupatedForStageObject

	"Una posici�n s�lo puede ser ocupada por un StageObject aunque hay que tener en cuenta que los objetos no portables pueden 
	 contener otros portables y no portables.
	 Por ej. un armario puede contener un caj�n (ambos NotPortableObject) y dentro de este �ltimo se encuentran una llave y un papel."

	| room |
	room := Room height: 1 width: 1.
	
	room add: (PortableObject new) at: (0@0).
	
	self
		should: [room add: (PortableObject new) at: (0@0). ]
		raise: Error -MessageNotUnderstood 
		withMessageText: Room cannotAddInAnOccupatedPositionErrorDescription.!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 19:25:29'!
test05CanNotCreateARoomWithNoIntegerH

	self
		should: [ Room height: 1.1 width: 2 ]
		raise: Error
		withMessageText: Room heightMustBeIntegerErrorDescription .
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 19:25:50'!
test05CanNotCreateARoomWithNoIntegerHeight

	self
		should: [ Room height: 1.1 width: 2 ]
		raise: Error
		withMessageText: Room heightMustBeIntegerErrorDescription .
! !

!methodRemoval: RoomTest #test05CanNotCreateARoomWithNoIntegerH stamp: 'DB 12/10/2020 19:25:50'!
test05CanNotCreateARoomWithNoIntegerH

	self
		should: [ Room height: 1.1 width: 2 ]
		raise: Error
		withMessageText: Room heightMustBeIntegerErrorDescription .
!

!testRun: #RoomTest #test01CanNotCreateRoomWithHeightLessThanOne stamp: 'DB 12/10/2020 19:25:52'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithWidthLessThanOne stamp: 'DB 12/10/2020 19:25:52'!
PASSED!

!testRun: #RoomTest #test03CanNotAddAStageObjectOutOfBounds stamp: 'DB 12/10/2020 19:25:52'!
PASSED!

!testRun: #RoomTest #test04CanNotAddInAOccupatedPosition stamp: 'DB 12/10/2020 19:25:52'!
PASSED!

!testRun: #RoomTest #test05CanNotCreateARoomWithNoIntegerHeight stamp: 'DB 12/10/2020 19:25:52'!
FAILURE!

!testRun: #RoomTest #test05CanNotCreateARoomWithNoIntegerHeight stamp: 'DB 12/10/2020 19:25:52'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'DB 12/10/2020 19:26:50' prior: 50869284!
height: aHeight width: aWidth

	aHeight strictlyPositive ifFalse: [self signalInvalidHeight.].
	aWidth strictlyPositive ifFalse: [self signalInvalidWidth].
	
	aHeight isInteger ifFalse: [ self signalWeightCapacityMustBeInteger ].
	"aWidth isInteger ifFalse: [ self signalPointsCapacityMustBeInteger ]."
	
	^Room new inializeWith: aHeight andWidth: aWidth.
	! !

!testRun: #RoomTest #test01CanNotCreateRoomWithHeightLessThanOne stamp: 'DB 12/10/2020 19:26:56'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithWidthLessThanOne stamp: 'DB 12/10/2020 19:26:56'!
PASSED!

!testRun: #RoomTest #test03CanNotAddAStageObjectOutOfBounds stamp: 'DB 12/10/2020 19:26:56'!
PASSED!

!testRun: #RoomTest #test04CanNotAddInAOccupatedPosition stamp: 'DB 12/10/2020 19:26:56'!
PASSED!

!testRun: #RoomTest #test05CanNotCreateARoomWithNoIntegerHeight stamp: 'DB 12/10/2020 19:26:57'!
FAILURE!

!testRun: #RoomTest #test05CanNotCreateARoomWithNoIntegerHeight stamp: 'DB 12/10/2020 19:26:57'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'DB 12/10/2020 19:27:29' prior: 50869700!
height: aHeight width: aWidth

	aHeight strictlyPositive ifFalse: [self signalInvalidHeight.].
	aWidth strictlyPositive ifFalse: [self signalInvalidWidth].
	
	aHeight isInteger ifFalse: [ self signalHeightMustBeInteger ].
	"aWidth isInteger ifFalse: [ self signalPointsCapacityMustBeInteger ]."
	
	^Room new inializeWith: aHeight andWidth: aWidth.
	! !

!testRun: #RoomTest #test01CanNotCreateRoomWithHeightLessThanOne stamp: 'DB 12/10/2020 19:27:33'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithWidthLessThanOne stamp: 'DB 12/10/2020 19:27:33'!
PASSED!

!testRun: #RoomTest #test03CanNotAddAStageObjectOutOfBounds stamp: 'DB 12/10/2020 19:27:33'!
PASSED!

!testRun: #RoomTest #test04CanNotAddInAOccupatedPosition stamp: 'DB 12/10/2020 19:27:33'!
PASSED!

!testRun: #RoomTest #test05CanNotCreateARoomWithNoIntegerHeight stamp: 'DB 12/10/2020 19:27:33'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 19:28:03'!
test06CanNotCreateARoomWithNoIntegerWidth

	self
		should: [ Room height: 3 width: 2.3 ]
		raise: Error
		withMessageText: Room heightMustBeIntegerErrorDescription .
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 19:28:10' prior: 50869764!
test06CanNotCreateARoomWithNoIntegerWidth

	self
		should: [ Room height: 3 width: 2.3 ]
		raise: Error
		withMessageText: Room widthMustBeIntegerErrorDescription .
! !

!testRun: #RoomTest #test01CanNotCreateRoomWithHeightLessThanOne stamp: 'DB 12/10/2020 19:28:12'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithWidthLessThanOne stamp: 'DB 12/10/2020 19:28:12'!
PASSED!

!testRun: #RoomTest #test03CanNotAddAStageObjectOutOfBounds stamp: 'DB 12/10/2020 19:28:12'!
PASSED!

!testRun: #RoomTest #test04CanNotAddInAOccupatedPosition stamp: 'DB 12/10/2020 19:28:12'!
PASSED!

!testRun: #RoomTest #test05CanNotCreateARoomWithNoIntegerHeight stamp: 'DB 12/10/2020 19:28:12'!
PASSED!

!testRun: #RoomTest #test06CanNotCreateARoomWithNoIntegerWidth stamp: 'DB 12/10/2020 19:28:12'!
FAILURE!

!testRun: #RoomTest #test06CanNotCreateARoomWithNoIntegerWidth stamp: 'DB 12/10/2020 19:28:12'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'DB 12/10/2020 19:28:37' prior: 50869734!
height: aHeight width: aWidth

	aHeight strictlyPositive ifFalse: [self signalInvalidHeight.].
	aWidth strictlyPositive ifFalse: [self signalInvalidWidth].
	
	aHeight isInteger ifFalse: [ self signalHeightMustBeInteger ].
	aWidth isInteger ifFalse: [ self signalWidthMustBeIntegerErrorDescription ].
	
	^Room new inializeWith: aHeight andWidth: aWidth.
	! !
!Room class methodsFor: 'signal' stamp: 'DB 12/10/2020 19:28:52'!
signalWidthMustBeInteger
	^'width must be integer'! !
!Room class methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 19:28:52' prior: 50869805!
height: aHeight width: aWidth

	aHeight strictlyPositive ifFalse: [self signalInvalidHeight.].
	aWidth strictlyPositive ifFalse: [self signalInvalidWidth].
	
	aHeight isInteger ifFalse: [ self signalHeightMustBeInteger ].
	aWidth isInteger ifFalse: [ self signalWidthMustBeInteger ].
	
	^Room new inializeWith: aHeight andWidth: aWidth.
	! !

!methodRemoval: Room class #signalWidthMustBeIntegerErrorDescription stamp: 'DB 12/10/2020 19:28:52'!
signalWidthMustBeIntegerErrorDescription
	^'width must be integer'!

----SNAPSHOT----(10 December 2020 19:37:11) CuisUniversity-4384.image priorSource: 17212294!

----QUIT----(10 December 2020 19:39:37) CuisUniversity-4384.image priorSource: 17222144!

----STARTUP---- (10 December 2020 19:40:38) as /Users/dbenitez/uba/2c2020-IS1/Quiz/2doParcialCuis/CuisUniversity-4384.image!


TestCase subclass: #AventureGameIITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #AventureGameIITest category: 'ISW1-2020-2C-2doParcial' stamp: 'DB 12/10/2020 19:42:49'!
TestCase subclass: #AventureGameIITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #PlayableCharacter category: 'ISW1-2020-2C-2doParcial' stamp: 'DB 12/10/2020 19:45:45'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/10/2020 19:48:16'!
test11_PlayableCharacterCantMoveOutOfBound

	| playableCharacter paper key |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/10/2020 19:49:04' prior: 50869880!
test11_PlayableCharacterCantMoveOutOfBound

	| playableCharacter paper key room |
	
	room := Room height: 2 width: 2.
	

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !

----SNAPSHOT----(10 December 2020 19:49:23) CuisUniversity-4384.image priorSource: 17222238!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/10/2020 19:51:39'!
test11_OutOfBoundforwardWhenHeadingNorthIncrementsYCoordinate

	
	
	! !

!methodRemoval: PlayableCharacterTest #test11_PlayableCharacterCantMoveOutOfBound stamp: 'DB 12/10/2020 19:51:52'!
test11_PlayableCharacterCantMoveOutOfBound

	| playableCharacter paper key room |
	
	room := Room height: 2 width: 2.
	

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/10/2020 19:52:59' prior: 50869932!
test11_OutOfBoundforwardWhenHeadingNorthIncrementsYCoordinate


	| playableCharacter room |
	
	room := Room height: 2 width: 3.

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North movingFor: room.

	playableCharacter moveForward.

	self assert: (playableCharacter isAt: 1@3 heading: #North)

	
	
	! !

PlayableCharacterTest class
	instanceVariableNames: ''!

!classDefinition: 'PlayableCharacterTest class' category: 'ISW1-2020-2C-2doParcial' stamp: 'DB 12/10/2020 19:54:38'!
PlayableCharacterTest class
	instanceVariableNames: ''!

----SNAPSHOT----(10 December 2020 19:54:48) CuisUniversity-4384.image priorSource: 17224907!
!PlayableCharacter class methodsFor: 'initialization' stamp: 'DB 12/10/2020 19:56:41'!
forHeadingAt: aCardinalPoint leftIs: aLeftCardinalPoint rightIs: aRightCardinalPoint movingFor: movingFor 
	
	(headings at: aCardinalPoint) leftHeading: (headings at: aLeftCardinalPoint) rightHeading: (headings at: aRightCardinalPoint).
	! !
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 19:56:41' prior: 50868428!
initializeHeadings

	headings := Dictionary new.
	
	(OrderedCollection 
		with: (PlayableCharacterHeading for: #North forwardWith: 0@1 )	
		with: (PlayableCharacterHeading for: #East forwardWith: 1@0 )
		with: (PlayableCharacterHeading for: #South forwardWith: 0@-1 )
		with: (PlayableCharacterHeading for: #West forwardWith: -1@0 ))
			do: [ :heading | headings at: heading cardinalPoint put: heading ].
	
	self 
		forHeadingAt: #North leftIs: #West rightIs: #East movingFor: mainRoom;
		forHeadingAt: #South leftIs: #East rightIs: #West movingFor: mainRoom;
		forHeadingAt: #East leftIs: #North rightIs: #South movingFor: mainRoom;
		forHeadingAt: #West leftIs: #South rightIs: #North movingFor: mainRoom.
	! !

!methodRemoval: PlayableCharacter class #forHeadingAt:leftIs:rightIs: stamp: 'DB 12/10/2020 19:56:41'!
forHeadingAt: aCardinalPoint leftIs: aLeftCardinalPoint rightIs: aRightCardinalPoint
	
	(headings at: aCardinalPoint) leftHeading: (headings at: aLeftCardinalPoint) rightHeading: (headings at: aRightCardinalPoint).
	!
!PlayableCharacter class methodsFor: 'initialization' stamp: 'DB 12/10/2020 19:57:46'!
forHeadingAt: aCardinalPoint leftIs: aLeftCardinalPoint rightIs: aRightCardinalPoint  
	
	(headings at: aCardinalPoint) leftHeading: (headings at: aLeftCardinalPoint) rightHeading: (headings at: aRightCardinalPoint).
	! !
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 19:57:47' prior: 50870000!
initializeHeadings

	headings := Dictionary new.
	
	(OrderedCollection 
		with: (PlayableCharacterHeading for: #North forwardWith: 0@1 )	
		with: (PlayableCharacterHeading for: #East forwardWith: 1@0 )
		with: (PlayableCharacterHeading for: #South forwardWith: 0@-1 )
		with: (PlayableCharacterHeading for: #West forwardWith: -1@0 ))
			do: [ :heading | headings at: heading cardinalPoint put: heading ].
	
	self 
		forHeadingAt: #North leftIs: #West rightIs: #East ;
		forHeadingAt: #South leftIs: #East rightIs: #West ;
		forHeadingAt: #East leftIs: #North rightIs: #South ;
		forHeadingAt: #West leftIs: #South rightIs: #North .
	! !

!methodRemoval: PlayableCharacter class #forHeadingAt:leftIs:rightIs:movingFor: stamp: 'DB 12/10/2020 19:57:47'!
forHeadingAt: aCardinalPoint leftIs: aLeftCardinalPoint rightIs: aRightCardinalPoint movingFor: movingFor 
	
	(headings at: aCardinalPoint) leftHeading: (headings at: aLeftCardinalPoint) rightHeading: (headings at: aRightCardinalPoint).
	!
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'DB 12/10/2020 19:58:43'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint movingFor: movingFor  
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading ! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 19:58:44' prior: 50868117!
test10_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| playableCharacter paper key |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West movingFor: mainRoom .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 19:58:44' prior: 50868038!
test04_rotateLeftWhenHeadingNorthHeadsWest

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North movingFor: mainRoom .

	playableCharacter rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #West)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 19:58:44' prior: 50868015!
test02_backwardWhenHeadingNorthDecrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North movingFor: mainRoom .

	playableCharacter moveBackward.

	self assert: (playableCharacter isAt: 1@1 heading: #North)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 19:58:44' prior: 50868027!
test03_rotateRightWhenHeadingNorthHeadsEast

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North movingFor: mainRoom .

	playableCharacter rotateRight.

	self assert: (playableCharacter isAt: 1@2 heading: #East)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 19:58:44' prior: 50868049!
test05_movingWhenHeadingEastWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #East movingFor: mainRoom .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 2@2 heading: #North)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 19:58:45' prior: 50868077!
test07_movingWhenHeadingWestWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West movingFor: mainRoom .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #South)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 19:58:45' prior: 50868063!
test06_movingWhenHeadingSouthWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South movingFor: mainRoom .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@1 heading: #East)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 19:58:45' prior: 50868091!
test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid

	self
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #X movingFor: mainRoom ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: PlayableCharacter invalidCardinalPointErrorDescription equals: anError messageText ]! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 19:58:45' prior: 50868003!
test01_forwardWhenHeadingNorthIncrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North movingFor: mainRoom .

	playableCharacter moveForward.

	self assert: (playableCharacter isAt: 1@3 heading: #North)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 19:58:45' prior: 50868104!
test09_canTakePortableObjects

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West movingFor: mainRoom .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper)! !

!methodRemoval: PlayableCharacter class #named:using:at:heading: stamp: 'DB 12/10/2020 19:58:45'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint 
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'DB 12/10/2020 19:59:13' prior: 50870081!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint movingFor: aRoom  
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading movingFor: aRoom! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'DB 12/10/2020 20:00:03'!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading movingFor: movingFor  

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading! !

!methodRemoval: PlayableCharacter #initializeNamed:using:at:heading: stamp: 'DB 12/10/2020 20:00:03'!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading 

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading!
!PlayableCharacter methodsFor: 'initialization' stamp: 'DB 12/10/2020 20:00:29' prior: 50870266!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading movingFor: aRoom

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading.
	room := aRoom.! !

TestCase subclass: #PlayableCharacterTest
	instanceVariableNames: 'mainRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #PlayableCharacterTest category: 'ISW1-2020-2C-2doParcial' stamp: 'DB 12/10/2020 20:00:52'!
TestCase subclass: #PlayableCharacterTest
	instanceVariableNames: 'mainRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/10/2020 20:01:28' overrides: 16927572!
setUp

	mainRoom  := Room height: 3 width: 3.! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/10/2020 20:03:04' prior: 50869964!
test11_OutOfBoundforwardWhenHeadingNorthIncrementsYCoordinate


	| playableCharacter  |
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@3 heading: #North movingFor: mainRoom .


	playableCharacter moveForward.
	
	
	! !

----QUIT----(10 December 2020 20:13:13) CuisUniversity-4384.image priorSource: 17226699!

----STARTUP---- (10 December 2020 20:32:22) as /Users/dbenitez/uba/2c2020-IS1/Quiz/2doParcialCuis/CuisUniversity-4384.image!

!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/10/2020 20:35:54' prior: 50870314!
test11_OutOfBoundforwardWhenHeadingNorthIncrementsYCoordinate


	| playableCharacter  |
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@3 heading: #North movingFor: mainRoom .
	
	self
		should: [playableCharacter moveForward. ]
		raise: Error
		withMessageText: Room widthMustBeIntegerErrorDescription .

	
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/10/2020 20:36:32' prior: 50870332!
test11_OutOfBoundforwardWhenHeadingNorthIncrementsYCoordinate


	| playableCharacter  |
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@3 heading: #North movingFor: mainRoom .
	
	self
		should: [playableCharacter moveForward. ]
		raise: Error
		withMessageText: Room  .

	
	
	! !
!Room class methodsFor: 'error descriptions' stamp: 'DB 12/10/2020 20:37:05'!
cannotAddInAOutOfBoundsPositionErrorDescription
	^'cannot add a Stage Object out of bounds'! !
!Room class methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 20:37:05' prior: 50869180!
signalCannotAddAStageObjecteOutOfBounds
	^self error:  self cannotAddInAOutOfBoundsPositionErrorDescription ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 20:37:05' prior: 50869206!
test03CanNotAddAStageObjectOutOfBounds

	| room |
	room := Room height: 1 width: 1.
	
	self
		should: [room add: (PortableObject new) at: (2@2). ]
		raise: Error -MessageNotUnderstood 
		withMessageText: Room cannotAddInAOutOfBoundsPositionErrorDescription.! !

!methodRemoval: Room class #cannotAddAStageObjectOutOfBoundsErrorDescription stamp: 'DB 12/10/2020 20:37:05'!
cannotAddAStageObjectOutOfBoundsErrorDescription
	^'cannot add a Stage Object out of bounds'!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/10/2020 20:38:36' prior: 50870347!
test11_OutOfBoundforwardWhenHeadingNorthIncrementsYCoordinate


	| playableCharacter  |
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@3 heading: #North movingFor: mainRoom .
	
	self
		should: [playableCharacter moveForward. ]
		raise: Error
		withMessageText: PlayableCharacter movementOutOfBoundErrorDescription.

	
	
	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/10/2020 20:38:43'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/10/2020 20:38:43'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/10/2020 20:38:43'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/10/2020 20:38:43'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/10/2020 20:38:43'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/10/2020 20:38:43'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/10/2020 20:38:43'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/10/2020 20:38:43'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/10/2020 20:38:43'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/10/2020 20:38:43'!
PASSED!

!testRun: #PlayableCharacterTest #test11_OutOfBoundforwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/10/2020 20:38:43'!
ERROR!

!testRun: #PlayableCharacterTest #test11_OutOfBoundforwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/10/2020 20:38:43'!
ERROR!
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 20:38:48'!
movementOutOfBoundErrorDescription
	self shouldBeImplemented.! !

!testRun: #PlayableCharacterTest #test11_OutOfBoundforwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/10/2020 20:39:10'!
ERROR!
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 20:39:30' prior: 50870453!
movementOutOfBoundErrorDescription
	^'Movement out of bounds'! !

!testRun: #PlayableCharacterTest #test11_OutOfBoundforwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/10/2020 20:39:31'!
FAILURE!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/10/2020 20:41:02'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/10/2020 20:41:02'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/10/2020 20:41:02'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/10/2020 20:41:02'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/10/2020 20:41:02'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/10/2020 20:41:02'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/10/2020 20:41:02'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/10/2020 20:41:02'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/10/2020 20:41:02'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/10/2020 20:41:02'!
PASSED!

!testRun: #PlayableCharacterTest #test11_OutOfBoundforwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/10/2020 20:41:02'!
FAILURE!

!testRun: #PlayableCharacterTest #test11_OutOfBoundforwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/10/2020 20:41:02'!
FAILURE!

----QUIT----(10 December 2020 20:50:59) CuisUniversity-4384.image priorSource: 17237573!

----STARTUP---- (10 December 2020 20:53:22) as /Users/dbenitez/uba/2c2020-IS1/Quiz/2doParcialCuis/CuisUniversity-4384.image!

!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/10/2020 21:00:07' prior: 50870391!
test11_OutOfBoundforwardWhenHeadingNorthIncrementsYCoordinate


	| playableCharacter  |
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@3 heading: #North movingFor: mainRoom .
	
	self
		should: [playableCharacter moveForward. ]
		raise: Error
		withMessageText: Room 

	
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/10/2020 21:00:47' prior: 50870526!
test11_OutOfBoundforwardWhenHeadingNorthIncrementsYCoordinate


	| playableCharacter  |
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@3 heading: #North movingFor: mainRoom .
	
	self
		should: [playableCharacter moveForward. ]
		raise: Error
		withMessageText: Room cannotAddInAOutOfBoundsPositionErrorDescription

	
	
	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/10/2020 21:00:53'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/10/2020 21:00:53'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/10/2020 21:00:53'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/10/2020 21:00:53'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/10/2020 21:00:53'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/10/2020 21:00:53'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/10/2020 21:00:53'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/10/2020 21:00:53'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/10/2020 21:00:54'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/10/2020 21:00:54'!
PASSED!

!testRun: #PlayableCharacterTest #test11_OutOfBoundforwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/10/2020 21:00:54'!
FAILURE!

!testRun: #PlayableCharacterTest #test11_OutOfBoundforwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/10/2020 21:00:54'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'DB 12/10/2020 21:02:01' prior: 50868363!
moveForward
	
	room add: self at: position + heading forwardPoint.
	position := position + heading forwardPoint! !

!testRun: #PlayableCharacterTest #test11_OutOfBoundforwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/10/2020 21:02:06'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/10/2020 21:02:11'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/10/2020 21:02:11'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/10/2020 21:02:11'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/10/2020 21:02:11'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/10/2020 21:02:11'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/10/2020 21:02:11'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/10/2020 21:02:11'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/10/2020 21:02:11'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/10/2020 21:02:11'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/10/2020 21:02:11'!
PASSED!

!testRun: #PlayableCharacterTest #test11_OutOfBoundforwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/10/2020 21:02:11'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/10/2020 21:02:55' prior: 50870132!
test02_backwardWhenHeadingNorthDecrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North movingFor: mainRoom .

	self
		should: [playableCharacter moveBackward. ]
		raise: Error
		withMessageText: Room cannotAddInAOutOfBoundsPositionErrorDescription! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/10/2020 19:58:44' prior: 50870655!
test02_backwardWhenHeadingNorthDecrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North movingFor: mainRoom .

	playableCharacter moveBackward.

	self assert: (playableCharacter isAt: 1@1 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/10/2020 21:04:08'!
test12_outOfBoundbackwardWhenHeadingNorthDecrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North movingFor: mainRoom .

	playableCharacter moveBackward.

	self assert: (playableCharacter isAt: 1@1 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/10/2020 21:04:44' prior: 50870681!
test12_outOfBoundbackwardWhenHeadingNorthDecrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North movingFor: mainRoom .
	
	self
		should: [playableCharacter moveBackward. ]
		raise: Error
		withMessageText: Room cannotAddInAOutOfBoundsPositionErrorDescription! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/10/2020 21:04:50'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/10/2020 21:04:50'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/10/2020 21:04:50'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/10/2020 21:04:50'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/10/2020 21:04:51'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/10/2020 21:04:51'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/10/2020 21:04:51'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/10/2020 21:04:51'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/10/2020 21:04:51'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/10/2020 21:04:51'!
PASSED!

!testRun: #PlayableCharacterTest #test11_OutOfBoundforwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/10/2020 21:04:51'!
PASSED!

!testRun: #PlayableCharacterTest #test12_outOfBoundbackwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/10/2020 21:04:51'!
FAILURE!

!testRun: #PlayableCharacterTest #test12_outOfBoundbackwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/10/2020 21:04:51'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'DB 12/10/2020 21:05:25' prior: 50868358!
moveBackward
	
	room add: self at: position - heading forwardPoint .
	
	position := position - heading forwardPoint ! !

!testRun: #PlayableCharacterTest #test12_outOfBoundbackwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/10/2020 21:05:26'!
PASSED!

StageObject subclass: #NotPortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NotPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'DB 12/10/2020 21:07:00'!
StageObject subclass: #NotPortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

StageObject subclass: #NotPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NotPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'DB 12/10/2020 21:07:11'!
StageObject subclass: #NotPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

StageObject subclass: #NotPortableObject
	instanceVariableNames: 'stageObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NotPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'DB 12/10/2020 21:08:45'!
StageObject subclass: #NotPortableObject
	instanceVariableNames: 'stageObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/10/2020 21:11:13'!
test11_outOfBoundforwardWhenHeadingNorthIncrementsYCoordinate


	| playableCharacter  |
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@3 heading: #North movingFor: mainRoom .
	
	self
		should: [playableCharacter moveForward. ]
		raise: Error
		withMessageText: Room cannotAddInAOutOfBoundsPositionErrorDescription

	
	
	! !

!methodRemoval: PlayableCharacterTest #test11_OutOfBoundforwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/10/2020 21:11:13'!
test11_OutOfBoundforwardWhenHeadingNorthIncrementsYCoordinate


	| playableCharacter  |
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@3 heading: #North movingFor: mainRoom .
	
	self
		should: [playableCharacter moveForward. ]
		raise: Error
		withMessageText: Room cannotAddInAOutOfBoundsPositionErrorDescription

	
	
	!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/10/2020 21:11:55'!
test05_movingWhenHeadingEastOutOfBound

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #East movingFor: mainRoom .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 2@2 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/10/2020 21:14:55'!
test13_cantMoveToAnOccupatedPosition

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@0 heading: #North movingFor: mainRoom .
	
	mainRoom add: PortableObject at: 2@1.
	
	
	self
		should: [playableCharacter moveForward . ]
		raise: Error
		withMessageText: Room cannotAddInAOutOfBoundsPositionErrorDescription! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/10/2020 21:15:05' prior: 50870855!
test13_cantMoveToAnOccupatedPosition

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@0 heading: #North movingFor: mainRoom .
	
	mainRoom add: PortableObject at: 2@1.
	
	
	self
		should: [playableCharacter moveForward . ]
		raise: Error
		withMessageText: Room cannotAddInAnOccupatedPositionErrorDescription ! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/10/2020 21:15:10'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/10/2020 21:15:10'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/10/2020 21:15:10'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/10/2020 21:15:10'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastOutOfBound stamp: 'DB 12/10/2020 21:15:10'!
ERROR!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/10/2020 21:15:10'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/10/2020 21:15:10'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/10/2020 21:15:10'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/10/2020 21:15:10'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/10/2020 21:15:10'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/10/2020 21:15:10'!
PASSED!

!testRun: #PlayableCharacterTest #test11_outOfBoundforwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/10/2020 21:15:10'!
PASSED!

!testRun: #PlayableCharacterTest #test12_outOfBoundbackwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/10/2020 21:15:10'!
PASSED!

!testRun: #PlayableCharacterTest #test13_cantMoveToAnOccupatedPosition stamp: 'DB 12/10/2020 21:15:10'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastOutOfBound stamp: 'DB 12/10/2020 21:15:20'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'DB 12/10/2020 21:22:03'!
test07CanNotMoveStateObjects
	
	| room |
	room := Room height: 1 width: 1.
	
	room add: (PortableObject new) at: (0@0).
	
	self
		should: [room moveFrom: (0@0) at: (0@1) ]
		raise: Error -MessageNotUnderstood 
		withMessageText: Room cannotMoveStateObjects.! !

!testRun: #RoomTest #test01CanNotCreateRoomWithHeightLessThanOne stamp: 'DB 12/10/2020 21:22:16'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithWidthLessThanOne stamp: 'DB 12/10/2020 21:22:16'!
PASSED!

!testRun: #RoomTest #test03CanNotAddAStageObjectOutOfBounds stamp: 'DB 12/10/2020 21:22:16'!
PASSED!

!testRun: #RoomTest #test04CanNotAddInAOccupatedPosition stamp: 'DB 12/10/2020 21:22:16'!
PASSED!

!testRun: #RoomTest #test05CanNotCreateARoomWithNoIntegerHeight stamp: 'DB 12/10/2020 21:22:16'!
PASSED!

!testRun: #RoomTest #test06CanNotCreateARoomWithNoIntegerWidth stamp: 'DB 12/10/2020 21:22:16'!
FAILURE!

!testRun: #RoomTest #test07CanNotMoveStateObjects stamp: 'DB 12/10/2020 21:22:16'!
ERROR!

!testRun: #RoomTest #test06CanNotCreateARoomWithNoIntegerWidth stamp: 'DB 12/10/2020 21:22:27'!
FAILURE!

aWidth isInteger!

!testRun: #RoomTest #test06CanNotCreateARoomWithNoIntegerWidth stamp: 'DB 12/10/2020 21:23:18'!
FAILURE!

----QUIT----(10 December 2020 21:29:50) CuisUniversity-4384.image priorSource: 17243786!