----STARTUP---- (10 December 2020 17:18:09) as /home/edy/MI UNIDAD/CS_DC/IngSoft I/Smalltalk/CuisUniversity-4384.image!


----End fileIn of /home/edy/Escritorio/2doParcial/ISW1-2020-2C-2doParcial.st----!

TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'ERMC 12/10/2020 17:54:20'!
TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'ERMC 12/10/2020 17:58:35'!
Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'nil' stamp: 'ERMC 12/10/2020 17:58:27'!
test01CanNotCreateRoomWithZeroSize

	self
		should: [ Room width: 1 height: 0 ]
		raise: Error
		withMessageText: Room invalidRoomSizeErrorDescription.! !

!testRun: #RoomTest #test01CanNotCreateRoomWithZeroSize stamp: 'ERMC 12/10/2020 17:58:39'!
ERROR!

!testRun: #RoomTest #test01CanNotCreateRoomWithZeroSize stamp: 'ERMC 12/10/2020 17:59:06'!
ERROR!

!testRun: #RoomTest #test01CanNotCreateRoomWithZeroSize stamp: 'ERMC 12/10/2020 17:59:32'!
ERROR!

!testRun: #RoomTest #test01CanNotCreateRoomWithZeroSize stamp: 'ERMC 12/10/2020 17:59:32'!
ERROR!
!Room class methodsFor: 'error messages' stamp: 'ERMC 12/10/2020 17:59:44'!
invalidRoomSizeErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'error messages' stamp: 'ERMC 12/10/2020 18:00:11' prior: 50882078!
invalidRoomSizeErrorDescription
	
	' Can not create a Room with invalid Size'! !

!testRun: #RoomTest #test01CanNotCreateRoomWithZeroSize stamp: 'ERMC 12/10/2020 18:00:12'!
FAILURE!
!Room class methodsFor: 'error messages' stamp: 'ERMC 12/10/2020 18:00:53' prior: 50882083!
invalidRoomSizeErrorDescription
	
	^ ' Can not create a Room with invalid Size'! !

!testRun: #RoomTest #test01CanNotCreateRoomWithZeroSize stamp: 'ERMC 12/10/2020 18:01:02'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 18:01:40' prior: 50882058!
test01CanNotCreateRoomWithZeroSize
	
	self
		should: [ Room width: 1 height: 0 ]
		raise: Error
		withMessageText: Room invalidRoomSizeErrorDescription.! !

!testRun: #RoomTest #test01CanNotCreateRoomWithZeroSize stamp: 'ERMC 12/10/2020 18:01:40'!
FAILURE!

!testRun: #RoomTest #test01CanNotCreateRoomWithZeroSize stamp: 'ERMC 12/10/2020 18:02:17'!
FAILURE!

!testRun: #RoomTest #test01CanNotCreateRoomWithZeroSize stamp: 'ERMC 12/10/2020 18:02:30'!
FAILURE!

!testRun: #RoomTest #test01CanNotCreateRoomWithZeroSize stamp: 'ERMC 12/10/2020 18:02:40'!
FAILURE!
!Room class methodsFor: 'nil' stamp: 'ERMC 12/10/2020 18:04:39'!
width: aWidth height: aHeight
	
	^ self new initializeWidth: aWidth height: aHeight .
! !
!Room class methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 18:05:40' prior: 50882121!
width: aWidth height: aHeight
	
	(aWidth == 0 or: aHeight == 0) ifTrue: [self error: self invalidRoomSizeErrorDescription].
	
	^ self new initializeWidth: aWidth height: aHeight .
! !

!testRun: #RoomTest #test01CanNotCreateRoomWithZeroSize stamp: 'ERMC 12/10/2020 18:05:47'!
PASSED!

!testRun: #RoomTest #test01CanNotCreateRoomWithZeroSize stamp: 'ERMC 12/10/2020 18:05:47'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 18:06:19'!
test02CanNotCreateRoomWithNegativeSize
	
	self
		should: [ Room width: -1 height: 1 ]
		raise: Error
		withMessageText: Room invalidRoomSizeErrorDescription.! !

!testRun: #RoomTest #test02CanNotCreateRoomWithNegativeSize stamp: 'ERMC 12/10/2020 18:06:21'!
FAILURE!

!testRun: #RoomTest #test02CanNotCreateRoomWithNegativeSize stamp: 'ERMC 12/10/2020 18:06:35'!
FAILURE!
!Room class methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 18:06:57' prior: 50882127!
width: aWidth height: aHeight
	
	(aWidth <= 0 or: aHeight <= 0) ifTrue: [self error: self invalidRoomSizeErrorDescription].
	
	^ self new initializeWidth: aWidth height: aHeight .
! !

!testRun: #RoomTest #test02CanNotCreateRoomWithNegativeSize stamp: 'ERMC 12/10/2020 18:06:59'!
PASSED!

!testRun: #RoomTest #test01CanNotCreateRoomWithZeroSize stamp: 'ERMC 12/10/2020 18:06:59'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithNegativeSize stamp: 'ERMC 12/10/2020 18:06:59'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 18:14:01'!
test03ShouldCreateARoomWithValidSizeAndEmptyObjects
	
	| room |
	room _ Room width: 1 height: 1 withObjects: {}.
	
	self assert: OrderedCollection new equals: room objects. ! !

!testRun: #RoomTest #test03ShouldCreateARoomWithValidSizeAndEmptyObjects stamp: 'ERMC 12/10/2020 18:14:21'!
ERROR!
!Room class methodsFor: 'instance creation' stamp: 'ERMC 12/10/2020 18:14:36'!
width: aSmallInteger height: aSmallInteger2 withObjects: anArray 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWidth: aSmallInteger height: aSmallInteger2 withObjects: anArray ! !
!Room class methodsFor: 'instance creation' stamp: 'ERMC 12/10/2020 18:16:21' prior: 50882187!
width: aWidth height: aHeight withObjects: anObjectCollection 
	
	(aWidth <= 0 or: aHeight <= 0) ifTrue: [self error: self invalidRoomSizeErrorDescription].
	
	^self new initializeWidth: aWidth height: aHeight withObjects: anObjectCollection.! !

!testRun: #RoomTest #test03ShouldCreateARoomWithValidSizeAndEmptyObjects stamp: 'ERMC 12/10/2020 18:16:23'!
ERROR!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'ERMC 12/10/2020 18:16:35'!
Object subclass: #Room
	instanceVariableNames: 'width'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'ERMC 12/10/2020 18:16:35'!
Object subclass: #Room
	instanceVariableNames: 'width height'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'ERMC 12/10/2020 18:16:35'!
Object subclass: #Room
	instanceVariableNames: 'width height objectCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'initialization' stamp: 'ERMC 12/10/2020 18:16:35'!
initializeWidth: aWidth height: aHeight withObjects: anObjectCollection 
	self shouldBeImplemented.
	width := aWidth.
	height := aHeight.
	objectCollection := anObjectCollection.! !
!Room methodsFor: 'initialization' stamp: 'ERMC 12/10/2020 18:16:45' prior: 50882235!
initializeWidth: aWidth height: aHeight withObjects: anObjectCollection 
	
	width := aWidth.
	height := aHeight.
	objectCollection := anObjectCollection.! !

!testRun: #RoomTest #test03ShouldCreateARoomWithValidSizeAndEmptyObjects stamp: 'ERMC 12/10/2020 18:16:46'!
ERROR!
!Room methodsFor: 'accesing' stamp: 'ERMC 12/10/2020 18:17:35'!
objects
	self shouldBeImplemented.! !

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'ERMC 12/10/2020 18:17:54'!
Object subclass: #Room
	instanceVariableNames: 'width height objectCollection objects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'accesing' stamp: 'ERMC 12/10/2020 18:17:52' prior: 50882255!
objects

	^ objects! !

!testRun: #RoomTest #test03ShouldCreateARoomWithValidSizeAndEmptyObjects stamp: 'ERMC 12/10/2020 18:17:55'!
FAILURE!

Object subclass: #Room
	instanceVariableNames: 'width height objects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'ERMC 12/10/2020 18:18:06'!
Object subclass: #Room
	instanceVariableNames: 'width height objects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!testRun: #RoomTest #test03ShouldCreateARoomWithValidSizeAndEmptyObjects stamp: 'ERMC 12/10/2020 18:18:23'!
FAILURE!

!testRun: #RoomTest #test03ShouldCreateARoomWithValidSizeAndEmptyObjects stamp: 'ERMC 12/10/2020 18:19:11'!
FAILURE!
!Room methodsFor: 'initialization' stamp: 'ERMC 12/10/2020 18:19:34' prior: 50882244!
initializeWidth: aWidth height: aHeight withObjects: anObjectCollection 
	
	width := aWidth.
	height := aHeight.
	objects := anObjectCollection.! !

!testRun: #RoomTest #test03ShouldCreateARoomWithValidSizeAndEmptyObjects stamp: 'ERMC 12/10/2020 18:20:09'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 18:21:55' prior: 50882175!
test03ShouldCreateARoomWithValidSizeAndEmptyObjects
	
	| room |
	room _ Room width: 1 height: 1 withObjects: {}.
	
	self assert: {} equals: room objects. ! !

!testRun: #RoomTest #test03ShouldCreateARoomWithValidSizeAndEmptyObjects stamp: 'ERMC 12/10/2020 18:21:58'!
PASSED!

!testRun: #RoomTest #test01CanNotCreateRoomWithZeroSize stamp: 'ERMC 12/10/2020 18:21:58'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithNegativeSize stamp: 'ERMC 12/10/2020 18:21:58'!
PASSED!

!testRun: #RoomTest #test03ShouldCreateARoomWithValidSizeAndEmptyObjects stamp: 'ERMC 12/10/2020 18:21:58'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 18:22:10' prior: 50882142!
test02CanNotCreateRoomWithNegativeSize
	
	self
		should: [ Room width: -1 height: 1 withObjects: {} ]
		raise: Error
		withMessageText: Room invalidRoomSizeErrorDescription.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 18:22:16' prior: 50882101!
test01CanNotCreateRoomWithZeroSize
	
	self
		should: [ Room width: 1 height: 0 withObjects: {} ]
		raise: Error
		withMessageText: Room invalidRoomSizeErrorDescription.! !

!testRun: #RoomTest #test01CanNotCreateRoomWithZeroSize stamp: 'ERMC 12/10/2020 18:22:20'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithNegativeSize stamp: 'ERMC 12/10/2020 18:22:20'!
PASSED!

!testRun: #RoomTest #test03ShouldCreateARoomWithValidSizeAndEmptyObjects stamp: 'ERMC 12/10/2020 18:22:20'!
PASSED!

!methodRemoval: Room class #width:height: stamp: 'ERMC 12/10/2020 18:22:31'!
width: aWidth height: aHeight
	
	(aWidth <= 0 or: aHeight <= 0) ifTrue: [self error: self invalidRoomSizeErrorDescription].
	
	^ self new initializeWidth: aWidth height: aHeight .
!
!Room class methodsFor: 'instance creation' stamp: 'ERMC 12/10/2020 18:28:33'!
width: aWidth height: aHeight
	
	(aWidth <= 0 or: aHeight <= 0) ifTrue: [self error: self invalidRoomSizeErrorDescription].
	
	^self new initializeWidth: aWidth height: aHeight! !

!methodRemoval: Room class #width:height:withObjects: stamp: 'ERMC 12/10/2020 18:28:37'!
width: aWidth height: aHeight withObjects: anObjectCollection 
	
	(aWidth <= 0 or: aHeight <= 0) ifTrue: [self error: self invalidRoomSizeErrorDescription].
	
	^self new initializeWidth: aWidth height: aHeight withObjects: anObjectCollection.!
!Room methodsFor: 'initialization' stamp: 'ERMC 12/10/2020 18:28:47'!
initializeWidth: aWidth height: aHeight 
	
	width := aWidth.
	height := aHeight.
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 18:28:56' prior: 50882339!
test01CanNotCreateRoomWithZeroSize
	
	self
		should: [ Room width: 1 height: 0 ]
		raise: Error
		withMessageText: Room invalidRoomSizeErrorDescription.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 18:29:02' prior: 50882330!
test02CanNotCreateRoomWithNegativeSize
	
	self
		should: [ Room width: -1 height: 1 ]
		raise: Error
		withMessageText: Room invalidRoomSizeErrorDescription.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 18:29:08' prior: 50882308!
test03ShouldCreateARoomWithValidSizeAndEmptyObjects
	
	| room |
	room _ Room width: 1 height: 1.
	
	self assert: {} equals: room objects. ! !

!testRun: #RoomTest #test01CanNotCreateRoomWithZeroSize stamp: 'ERMC 12/10/2020 18:29:13'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithNegativeSize stamp: 'ERMC 12/10/2020 18:29:15'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 18:37:50'!
test03CanAddAnObjectToRoomIfThereIsFreeSpace
	
	| room aKey |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	
	room addObject: aKey at:  1@1.
	
	self assert: aKey equals: room objects. ! !

!testRun: #RoomTest #test03CanAddAnObjectToRoomIfThereIsFreeSpace stamp: 'ERMC 12/10/2020 18:37:58'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 18:38:10'!
addObject: aNoPointsPortableObject at: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 18:43:01' prior: 50882434!
addObject: anObject at: aPosition

	objects add: anObject ->4; yourself. 
	
	! !

!testRun: #RoomTest #test03CanAddAnObjectToRoomIfThereIsFreeSpace stamp: 'ERMC 12/10/2020 18:43:02'!
ERROR!
!Room methodsFor: 'initialization' stamp: 'ERMC 12/10/2020 18:43:56' prior: 50882384!
initializeWidth: aWidth height: aHeight 
	
	width _ aWidth.
	height _ aHeight.
	objects _ Dictionary new. 
	! !

!testRun: #RoomTest #test03CanAddAnObjectToRoomIfThereIsFreeSpace stamp: 'ERMC 12/10/2020 18:43:57'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 18:44:38' prior: 50882420!
test03CanAddAnObjectToRoomIfThereIsFreeSpace
	
	| room aKey |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	
	room addObject: aKey at:  1@1.
	
	self assert: room objects includes: aKey. ! !

!testRun: #RoomTest #test03CanAddAnObjectToRoomIfThereIsFreeSpace stamp: 'ERMC 12/10/2020 18:44:42'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 18:45:07' prior: 50882459!
test03CanAddAnObjectToRoomIfThereIsFreeSpace
	
	| room aKey |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	
	room addObject: aKey at: 1@1.
	
	self assert: room objects includes: aKey. ! !
!Room methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 18:45:46' prior: 50882440!
addObject: anObject at: aPosition

	objects add: anObject -> aPosition ; yourself. 
	
	! !

!testRun: #RoomTest #test03CanAddAnObjectToRoomIfThereIsFreeSpace stamp: 'ERMC 12/10/2020 18:45:48'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 18:47:09' prior: 50882485!
addObject: anObject at: aPosition

	objects at: anObject put: aPosition ; 
	yourself. 
	
	! !

!testRun: #RoomTest #test03CanAddAnObjectToRoomIfThereIsFreeSpace stamp: 'ERMC 12/10/2020 18:47:13'!
FAILURE!

!testRun: #RoomTest #test03CanAddAnObjectToRoomIfThereIsFreeSpace stamp: 'ERMC 12/10/2020 18:47:13'!
FAILURE!

!methodRemoval: RoomTest #test03ShouldCreateARoomWithValidSizeAndEmptyObjects stamp: 'ERMC 12/10/2020 18:47:19'!
test03ShouldCreateARoomWithValidSizeAndEmptyObjects
	
	| room |
	room _ Room width: 1 height: 1.
	
	self assert: {} equals: room objects. !

self values.!

self keys. !
!Room methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 18:50:30' prior: 50882495!
addObject: anObject at: aPosition

	objects at: aPosition put: anObject  ; 
	yourself. 
	
	! !
!Room methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 18:50:36' prior: 50882517!
addObject: anObject at: aPosition

	objects at: aPosition put: anObject ; 
	yourself. 
	
	! !

!testRun: #RoomTest #test03CanAddAnObjectToRoomIfThereIsFreeSpace stamp: 'ERMC 12/10/2020 18:50:43'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 18:52:13'!
test04CantPutAnObjectToRoomIfThereIsNotFreeSpace
	
	| room aKey |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	
	room addObject: aKey at: 1@1.
	
	self assert: room objects includes: aKey. ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 18:52:29'!
test03CanPutAnObjectToRoomIfThereIsFreeSpace
	
	| room aKey |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	
	room addObject: aKey at: 1@1.
	
	self assert: room objects includes: aKey. ! !

!methodRemoval: RoomTest #test03CanAddAnObjectToRoomIfThereIsFreeSpace stamp: 'ERMC 12/10/2020 18:52:29'!
test03CanAddAnObjectToRoomIfThereIsFreeSpace
	
	| room aKey |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	
	room addObject: aKey at: 1@1.
	
	self assert: room objects includes: aKey. !
!Room methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 18:52:56'!
putObject: anObject at: aPosition

	objects at: aPosition put: anObject ; 
	yourself. 
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 18:52:56' prior: 50882543!
test03CanPutAnObjectToRoomIfThereIsFreeSpace
	
	| room aKey |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	
	room putObject: aKey at: 1@1.
	
	self assert: room objects includes: aKey. ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 18:52:56' prior: 50882532!
test04CantPutAnObjectToRoomIfThereIsNotFreeSpace
	
	| room aKey |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	
	room putObject: aKey at: 1@1.
	
	self assert: room objects includes: aKey. ! !

!methodRemoval: Room #addObject:at: stamp: 'ERMC 12/10/2020 18:52:56'!
addObject: anObject at: aPosition

	objects at: aPosition put: anObject ; 
	yourself. 
	
	!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 19:06:17' prior: 50882581!
test04CantPutAnObjectToRoomIfThereIsNotFreeSpace
	
	| room aKey aRing cellphone glass |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	cellphone _ NoPointsPortableObject named: 'cellphone' weighing: 1.
	glass _ NoPointsPortableObject named: 'glass' weighing: 1.
	aRing _ NoPointsPortableObject named: 'the-ring-of-the-lord' weighing: 1.
	
	room putObject: aKey at: 1@1.
	room putObject: cellphone at: 1@0.
	room putObject: glass at: 0@1.	
	
	self assert: room objects includes: aKey.
	self assert: room objects includes: cellphone.
	self assert: room objects includes: glass.
	
	self
		should: [ room putObject: aRing at: 0@1. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = room cantPutAnObjectOnAnotherErrorDescription]
		! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 19:06:46' prior: 50882597!
test04CantPutAnObjectToRoomIfThereIsNotFreeSpace
	
	| room aKey aRing cellphone glass |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	cellphone _ NoPointsPortableObject named: 'cellphone' weighing: 1.
	glass _ NoPointsPortableObject named: 'glass' weighing: 1.
	aRing _ NoPointsPortableObject named: 'the-ring-of-the-lord' weighing: 1.
	
	room putObject: aKey at: 1@1.
	room putObject: cellphone at: 1@0.
	room putObject: glass at: 0@1.	
	
	
	self
		should: [ room putObject: aRing at: 0@1. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = room cantPutAnObjectOnAnotherErrorDescription.
			self assert: room objects includes: aKey.
			self assert: room objects includes: cellphone.
			self assert: room objects includes: glass.]
		! !

!testRun: #RoomTest #test04CantPutAnObjectToRoomIfThereIsNotFreeSpace stamp: 'ERMC 12/10/2020 19:06:48'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 19:10:57' prior: 50882564!
putObject: anObject at: aPosition

	(objects includesKey: aPosition ) ifTrue: [self error : self cantPutAnObjectOnAnotherErrorDescription].
	objects at: aPosition put: anObject ; 
	yourself. 
	
	! !

!testRun: #RoomTest #test04CantPutAnObjectToRoomIfThereIsNotFreeSpace stamp: 'ERMC 12/10/2020 19:10:59'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 19:12:16' prior: 50882660!
putObject: anObject at: aPosition

	(objects includesKey: aPosition ) ifTrue: [self error: self cantPutAnObjectOnAnotherErrorDescription].
	objects at: aPosition put: anObject ; 
	yourself. 
	
	! !

!testRun: #RoomTest #test04CantPutAnObjectToRoomIfThereIsNotFreeSpace stamp: 'ERMC 12/10/2020 19:12:17'!
ERROR!
!Room methodsFor: 'exceptions' stamp: 'ERMC 12/10/2020 19:12:43'!
cantPutAnObjectOnAnotherErrorDescription
	self shouldBeImplemented.! !
!Room methodsFor: 'exceptions' stamp: 'ERMC 12/10/2020 19:13:52' prior: 50882685!
cantPutAnObjectOnAnotherErrorDescription

	^ 'Can not put one object on top of another'.! !

!testRun: #RoomTest #test04CantPutAnObjectToRoomIfThereIsNotFreeSpace stamp: 'ERMC 12/10/2020 19:14:12'!
PASSED!

!testRun: #RoomTest #test01CanNotCreateRoomWithZeroSize stamp: 'ERMC 12/10/2020 19:14:12'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithNegativeSize stamp: 'ERMC 12/10/2020 19:14:12'!
PASSED!

!testRun: #RoomTest #test03CanPutAnObjectToRoomIfThereIsFreeSpace stamp: 'ERMC 12/10/2020 19:14:12'!
PASSED!

!testRun: #RoomTest #test04CantPutAnObjectToRoomIfThereIsNotFreeSpace stamp: 'ERMC 12/10/2020 19:14:12'!
PASSED!

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'ERMC 12/10/2020 19:29:19'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 19:29:39'!
test05CanPutAPortableObjectIntoAnNonPortableObject
	
	| room aKey closet |
	
	room _ Room width: 1 height: 1.
	
	closet _ NonPortableObject named: 'the-closet' weighing: 10.
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	
	room putObject: closet at: 0@0.
	room putObject: aKey at: 0@0. 

	self assert: room objects includes: closet.
	self assert: (closet content: aKey).
	self assert: room objects includes: aKey.
		! !

!testRun: #RoomTest #test05CanPutAPortableObjectIntoAnNonPortableObject stamp: 'ERMC 12/10/2020 19:29:44'!
ERROR!
!NonPortableObject class methodsFor: 'instance creation' stamp: 'ERMC 12/10/2020 19:29:54'!
named: aString weighing: aSmallInteger 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString weighing: aSmallInteger ! !
!NonPortableObject class methodsFor: 'instance creation' stamp: 'ERMC 12/10/2020 19:30:00' prior: 50882742!
named: aString weighing: aSmallInteger 

	^self new initializeNamed: aString weighing: aSmallInteger ! !
!NonPortableObject class methodsFor: 'instance creation' stamp: 'ERMC 12/10/2020 19:30:20' prior: 50882752!
named: aName weighing: aWeight 

	^self new initializeNamed: aName weighing: aWeight ! !

!testRun: #RoomTest #test05CanPutAPortableObjectIntoAnNonPortableObject stamp: 'ERMC 12/10/2020 19:30:21'!
ERROR!

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'ERMC 12/10/2020 19:30:32'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'ERMC 12/10/2020 19:30:32'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'initialization' stamp: 'ERMC 12/10/2020 19:30:32'!
initializeNamed: aName weighing: aWeight 
	self shouldBeImplemented.
	name := aName.
	weight := aWeight.! !
!NonPortableObject methodsFor: 'initialization' stamp: 'ERMC 12/10/2020 19:30:38' prior: 50882785!
initializeNamed: aName weighing: aWeight 

	name := aName.
	weight := aWeight.! !

!testRun: #RoomTest #test05CanPutAPortableObjectIntoAnNonPortableObject stamp: 'ERMC 12/10/2020 19:30:38'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 19:41:05'!
test04CantPutAnPortableObjectToRoomIfThereIsNotFreeSpace
	
	| room aKey aRing cellphone glass |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	cellphone _ NoPointsPortableObject named: 'cellphone' weighing: 1.
	glass _ NoPointsPortableObject named: 'glass' weighing: 1.
	aRing _ NoPointsPortableObject named: 'the-ring-of-the-lord' weighing: 1.
	
	room putObject: aKey at: 1@1.
	room putObject: cellphone at: 1@0.
	room putObject: glass at: 0@1.	
	
	
	self
		should: [ room putObject: aRing at: 0@1. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = room cantPutAnObjectOnAnotherErrorDescription.
			self assert: room objects includes: aKey.
			self assert: room objects includes: cellphone.
			self assert: room objects includes: glass.]
		! !

!methodRemoval: RoomTest #test04CantPutAnObjectToRoomIfThereIsNotFreeSpace stamp: 'ERMC 12/10/2020 19:41:05'!
test04CantPutAnObjectToRoomIfThereIsNotFreeSpace
	
	| room aKey aRing cellphone glass |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	cellphone _ NoPointsPortableObject named: 'cellphone' weighing: 1.
	glass _ NoPointsPortableObject named: 'glass' weighing: 1.
	aRing _ NoPointsPortableObject named: 'the-ring-of-the-lord' weighing: 1.
	
	room putObject: aKey at: 1@1.
	room putObject: cellphone at: 1@0.
	room putObject: glass at: 0@1.	
	
	
	self
		should: [ room putObject: aRing at: 0@1. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = room cantPutAnObjectOnAnotherErrorDescription.
			self assert: room objects includes: aKey.
			self assert: room objects includes: cellphone.
			self assert: room objects includes: glass.]
		!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 19:41:19'!
test04CantPutAPortableObjectToRoomIfThereIsNotFreeSpace
	
	| room aKey aRing cellphone glass |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	cellphone _ NoPointsPortableObject named: 'cellphone' weighing: 1.
	glass _ NoPointsPortableObject named: 'glass' weighing: 1.
	aRing _ NoPointsPortableObject named: 'the-ring-of-the-lord' weighing: 1.
	
	room putObject: aKey at: 1@1.
	room putObject: cellphone at: 1@0.
	room putObject: glass at: 0@1.	
	
	
	self
		should: [ room putObject: aRing at: 0@1. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = room cantPutAnObjectOnAnotherErrorDescription.
			self assert: room objects includes: aKey.
			self assert: room objects includes: cellphone.
			self assert: room objects includes: glass.]
		! !

!methodRemoval: RoomTest #test04CantPutAnPortableObjectToRoomIfThereIsNotFreeSpace stamp: 'ERMC 12/10/2020 19:41:19'!
test04CantPutAnPortableObjectToRoomIfThereIsNotFreeSpace
	
	| room aKey aRing cellphone glass |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	cellphone _ NoPointsPortableObject named: 'cellphone' weighing: 1.
	glass _ NoPointsPortableObject named: 'glass' weighing: 1.
	aRing _ NoPointsPortableObject named: 'the-ring-of-the-lord' weighing: 1.
	
	room putObject: aKey at: 1@1.
	room putObject: cellphone at: 1@0.
	room putObject: glass at: 0@1.	
	
	
	self
		should: [ room putObject: aRing at: 0@1. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = room cantPutAnObjectOnAnotherErrorDescription.
			self assert: room objects includes: aKey.
			self assert: room objects includes: cellphone.
			self assert: room objects includes: glass.]
		!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 19:42:03'!
test05CanPutANonPortableObjectIfThereIsNotFreeSpace
	
	| room aKey closet |
	
	room _ Room width: 1 height: 1.
	
	closet _ NonPortableObject named: 'the-closet' weighing: 10.
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	
	room putObject: closet at: 0@0.
	room putObject: aKey at: 0@0. 

	self assert: room objects includes: closet.
	self assert: (closet content: aKey).
	self assert: room objects includes: aKey.
		! !

!methodRemoval: RoomTest #test05CanPutAPortableObjectIntoAnNonPortableObject stamp: 'ERMC 12/10/2020 19:42:03'!
test05CanPutAPortableObjectIntoAnNonPortableObject
	
	| room aKey closet |
	
	room _ Room width: 1 height: 1.
	
	closet _ NonPortableObject named: 'the-closet' weighing: 10.
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	
	room putObject: closet at: 0@0.
	room putObject: aKey at: 0@0. 

	self assert: room objects includes: closet.
	self assert: (closet content: aKey).
	self assert: room objects includes: aKey.
		!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 19:43:38' prior: 50882921!
test05CanPutANonPortableObjectIfThereIsNotFreeSpace
	
	| room aKey closet aRing cellphone glass |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	cellphone _ NoPointsPortableObject named: 'cellphone' weighing: 1.
	glass _ NoPointsPortableObject named: 'glass' weighing: 1.
	aRing _ NoPointsPortableObject named: 'the-ring-of-the-lord' weighing: 1.
	closet _ NonPortableObject named: 'the-closet' weighing: 10.

	room putObject: aKey at: 1@1.
	room putObject: cellphone at: 1@0.
	room putObject: glass at: 0@1.	
	room putObject: aRing at: 0@0.
	
	room putObject: closet at: 0@0.

! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 19:43:55' prior: 50882861!
test04CantPutAPortableObjectToRoomIfThereIsNotFreeSpace
	
	| room aKey aRing cellphone glass |

	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	cellphone _ NoPointsPortableObject named: 'cellphone' weighing: 1.
	glass _ NoPointsPortableObject named: 'glass' weighing: 1.
	aRing _ NoPointsPortableObject named: 'the-ring-of-the-lord' weighing: 1.
	
	room putObject: aKey at: 1@1.
	room putObject: cellphone at: 1@0.
	room putObject: glass at: 0@1.	
	
	self
		should: [ room putObject: aRing at: 0@1. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = room cantPutAnObjectOnAnotherErrorDescription.
			self assert: room objects includes: aKey.
			self assert: room objects includes: cellphone.
			self assert: room objects includes: glass.]
		! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 19:45:15' prior: 50882955!
test05CanPutANonPortableObjectIfThereIsNotFreeSpace
	
	| room aKey closet aRing cellphone glass |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	cellphone _ NoPointsPortableObject named: 'cellphone' weighing: 1.
	glass _ NoPointsPortableObject named: 'glass' weighing: 1.
	aRing _ NoPointsPortableObject named: 'the-ring-of-the-lord' weighing: 1.
	closet _ NonPortableObject named: 'the-closet' weighing: 10.

	room putObject: aKey at: 1@1.
	room putObject: cellphone at: 1@0.
	room putObject: glass at: 0@1.	
	room putObject: aRing at: 0@0.
	
	room putObject: closet at: 0@0.
	
	self
		should: [ room putObject: closet at: 0@0. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = room cantPutAnObjectOnAnotherErrorDescription.
			self deny: (room objects includes: closet). 
			self assert: room objects includes: aKey.
			self assert: room objects includes: cellphone.
			self assert: room objects includes: glass.]
! !

!testRun: #RoomTest #test05CanPutANonPortableObjectIfThereIsNotFreeSpace stamp: 'ERMC 12/10/2020 19:45:17'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 19:45:29' prior: 50883008!
test05CanPutANonPortableObjectIfThereIsNotFreeSpace
	
	| room aKey closet aRing cellphone glass |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	cellphone _ NoPointsPortableObject named: 'cellphone' weighing: 1.
	glass _ NoPointsPortableObject named: 'glass' weighing: 1.
	aRing _ NoPointsPortableObject named: 'the-ring-of-the-lord' weighing: 1.
	closet _ NonPortableObject named: 'the-closet' weighing: 10.

	room putObject: aKey at: 1@1.
	room putObject: cellphone at: 1@0.
	room putObject: glass at: 0@1.	
	room putObject: aRing at: 0@0.
		
	self
		should: [ room putObject: closet at: 0@0. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = room cantPutAnObjectOnAnotherErrorDescription.
			self deny: (room objects includes: closet). 
			self assert: room objects includes: aKey.
			self assert: room objects includes: cellphone.
			self assert: room objects includes: glass.]
! !

!testRun: #RoomTest #test05CanPutANonPortableObjectIfThereIsNotFreeSpace stamp: 'ERMC 12/10/2020 19:45:30'!
PASSED!

!testRun: #RoomTest #test01CanNotCreateRoomWithZeroSize stamp: 'ERMC 12/10/2020 19:45:30'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithNegativeSize stamp: 'ERMC 12/10/2020 19:45:30'!
PASSED!

!testRun: #RoomTest #test03CanPutAnObjectToRoomIfThereIsFreeSpace stamp: 'ERMC 12/10/2020 19:45:30'!
PASSED!

!testRun: #RoomTest #test04CantPutAPortableObjectToRoomIfThereIsNotFreeSpace stamp: 'ERMC 12/10/2020 19:45:30'!
PASSED!

!testRun: #RoomTest #test05CanPutANonPortableObjectIfThereIsNotFreeSpace stamp: 'ERMC 12/10/2020 19:45:30'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 19:47:39' prior: 50883047!
test05CanPutANonPortableObjectIfThereIsNotFreeSpace
	
	| room aKey closet aRing cellphone glass |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	cellphone _ NoPointsPortableObject named: 'cellphone' weighing: 1.
	glass _ NoPointsPortableObject named: 'glass' weighing: 1.
	aRing _ NoPointsPortableObject named: 'the-ring-of-the-lord' weighing: 1.
	closet _ NonPortableObject named: 'the-closet' weighing: 10.

	room putObject: aKey at: 1@1.
	room putObject: cellphone at: 1@0.
	room putObject: glass at: 0@1.	
	room putObject: aRing at: 0@0.
		
	self
		should: [ room putObject: closet at: 0@0. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = room cantPutAnObjectOnAnotherErrorDescription.
			self deny: (room objects includes: closet). 
			self assert: room objects includes: aKey.
			self assert: room objects includes: cellphone.
			self assert: room objects includes: glass.
			]
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 19:49:02'!
test04CantPutAPortableObjectAboveAnotherObject
	
	| room aKey aRing cellphone glass |

	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	cellphone _ NoPointsPortableObject named: 'cellphone' weighing: 1.
	glass _ NoPointsPortableObject named: 'glass' weighing: 1.
	aRing _ NoPointsPortableObject named: 'the-ring-of-the-lord' weighing: 1.
	
	room putObject: aKey at: 1@1.
	room putObject: cellphone at: 1@0.
	room putObject: glass at: 0@1.	
	
	self
		should: [ room putObject: aRing at: 0@1. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = room cantPutAnObjectOnAnotherErrorDescription.
			self assert: room objects includes: aKey.
			self assert: room objects includes: cellphone.
			self assert: room objects includes: glass.]
		! !

!methodRemoval: RoomTest #test04CantPutAPortableObjectToRoomIfThereIsNotFreeSpace stamp: 'ERMC 12/10/2020 19:49:02'!
test04CantPutAPortableObjectToRoomIfThereIsNotFreeSpace
	
	| room aKey aRing cellphone glass |

	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	cellphone _ NoPointsPortableObject named: 'cellphone' weighing: 1.
	glass _ NoPointsPortableObject named: 'glass' weighing: 1.
	aRing _ NoPointsPortableObject named: 'the-ring-of-the-lord' weighing: 1.
	
	room putObject: aKey at: 1@1.
	room putObject: cellphone at: 1@0.
	room putObject: glass at: 0@1.	
	
	self
		should: [ room putObject: aRing at: 0@1. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = room cantPutAnObjectOnAnotherErrorDescription.
			self assert: room objects includes: aKey.
			self assert: room objects includes: cellphone.
			self assert: room objects includes: glass.]
		!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 19:49:22'!
test05CanPutANonPortableObjectOAboveAnotherObject
	
	| room aKey closet aRing cellphone glass |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	cellphone _ NoPointsPortableObject named: 'cellphone' weighing: 1.
	glass _ NoPointsPortableObject named: 'glass' weighing: 1.
	aRing _ NoPointsPortableObject named: 'the-ring-of-the-lord' weighing: 1.
	closet _ NonPortableObject named: 'the-closet' weighing: 10.

	room putObject: aKey at: 1@1.
	room putObject: cellphone at: 1@0.
	room putObject: glass at: 0@1.	
	room putObject: aRing at: 0@0.
		
	self
		should: [ room putObject: closet at: 0@0. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = room cantPutAnObjectOnAnotherErrorDescription.
			self deny: (room objects includes: closet). 
			self assert: room objects includes: aKey.
			self assert: room objects includes: cellphone.
			self assert: room objects includes: glass.
			]
! !

!methodRemoval: RoomTest #test05CanPutANonPortableObjectIfThereIsNotFreeSpace stamp: 'ERMC 12/10/2020 19:49:22'!
test05CanPutANonPortableObjectIfThereIsNotFreeSpace
	
	| room aKey closet aRing cellphone glass |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	cellphone _ NoPointsPortableObject named: 'cellphone' weighing: 1.
	glass _ NoPointsPortableObject named: 'glass' weighing: 1.
	aRing _ NoPointsPortableObject named: 'the-ring-of-the-lord' weighing: 1.
	closet _ NonPortableObject named: 'the-closet' weighing: 10.

	room putObject: aKey at: 1@1.
	room putObject: cellphone at: 1@0.
	room putObject: glass at: 0@1.	
	room putObject: aRing at: 0@0.
		
	self
		should: [ room putObject: closet at: 0@0. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = room cantPutAnObjectOnAnotherErrorDescription.
			self deny: (room objects includes: closet). 
			self assert: room objects includes: aKey.
			self assert: room objects includes: cellphone.
			self assert: room objects includes: glass.
			]
!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 19:49:31'!
test05CanPutANonPortableObjectAboveAnotherObject
	
	| room aKey closet aRing cellphone glass |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	cellphone _ NoPointsPortableObject named: 'cellphone' weighing: 1.
	glass _ NoPointsPortableObject named: 'glass' weighing: 1.
	aRing _ NoPointsPortableObject named: 'the-ring-of-the-lord' weighing: 1.
	closet _ NonPortableObject named: 'the-closet' weighing: 10.

	room putObject: aKey at: 1@1.
	room putObject: cellphone at: 1@0.
	room putObject: glass at: 0@1.	
	room putObject: aRing at: 0@0.
		
	self
		should: [ room putObject: closet at: 0@0. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = room cantPutAnObjectOnAnotherErrorDescription.
			self deny: (room objects includes: closet). 
			self assert: room objects includes: aKey.
			self assert: room objects includes: cellphone.
			self assert: room objects includes: glass.
			]
! !

!methodRemoval: RoomTest #test05CanPutANonPortableObjectOAboveAnotherObject stamp: 'ERMC 12/10/2020 19:49:31'!
test05CanPutANonPortableObjectOAboveAnotherObject
	
	| room aKey closet aRing cellphone glass |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	cellphone _ NoPointsPortableObject named: 'cellphone' weighing: 1.
	glass _ NoPointsPortableObject named: 'glass' weighing: 1.
	aRing _ NoPointsPortableObject named: 'the-ring-of-the-lord' weighing: 1.
	closet _ NonPortableObject named: 'the-closet' weighing: 10.

	room putObject: aKey at: 1@1.
	room putObject: cellphone at: 1@0.
	room putObject: glass at: 0@1.	
	room putObject: aRing at: 0@0.
		
	self
		should: [ room putObject: closet at: 0@0. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = room cantPutAnObjectOnAnotherErrorDescription.
			self deny: (room objects includes: closet). 
			self assert: room objects includes: aKey.
			self assert: room objects includes: cellphone.
			self assert: room objects includes: glass.
			]
!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 19:57:34'!
test06CanPutANonPortableObjectWithObjectsInsideAtRoom
	
	| room aKey closet aTool drawer |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	aTool _ NoPointsPortableObject named: 'hammer' weighing: 3.
	drawer _ NonPortableObject named: 'drawer' weighing: 5 withObject: {aKey} .
	closet _ NonPortableObject named: 'the-closet' weighing: 10 withObject: {aTool. drawer} .

	room putObject: closet at: 0@0.
	
	self assert: room objects includes: closet. 
	self assert: {aTool. drawer} equals: closet content.
	self assert: {aKey} equals: drawer content. 
	self deny: (room objects includes: closet). 
	
! !

!testRun: #RoomTest #test06CanPutANonPortableObjectWithObjectsInsideAtRoom stamp: 'ERMC 12/10/2020 19:57:48'!
ERROR!
!NonPortableObject class methodsFor: 'instance creation' stamp: 'ERMC 12/10/2020 19:57:57'!
named: aString weighing: aSmallInteger withObject: anArray 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString weighing: aSmallInteger withObject: anArray ! !
!NonPortableObject class methodsFor: 'instance creation' stamp: 'ERMC 12/10/2020 19:58:38' prior: 50883362!
named: aName weighing: aWeight withObject: anObjectCollection 

	^self new initializeNamed: aName weighing: aWeight withObject: anObjectCollection ! !

!testRun: #RoomTest #test06CanPutANonPortableObjectWithObjectsInsideAtRoom stamp: 'ERMC 12/10/2020 19:58:39'!
ERROR!

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'ERMC 12/10/2020 19:58:54'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name weight objectCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'initialization' stamp: 'ERMC 12/10/2020 19:58:54'!
initializeNamed: aName weighing: aWeight withObject: anObjectCollection 
	self shouldBeImplemented.
	name := aName.
	weight := aWeight.
	objectCollection := anObjectCollection.! !
!NonPortableObject methodsFor: 'initialization' stamp: 'ERMC 12/10/2020 19:59:14' prior: 50883394!
initializeNamed: aName weighing: aWeight withObject: anObjectCollection 

	name := aName.
	weight := aWeight.
	objectCollection := anObjectCollection.! !

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'ERMC 12/10/2020 19:59:24'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name weight objects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 19:59:24' prior: 50883403!
initializeNamed: aName weighing: aWeight withObject: anObjectCollection 

	name := aName.
	weight := aWeight.
	objects := anObjectCollection.! !
!NonPortableObject methodsFor: 'initialization' stamp: 'ERMC 12/10/2020 19:59:41' prior: 50883420!
initializeNamed: aName weighing: aWeight withObject: anObjectCollection 

	name := aName.
	weight := aWeight.
	objects := anObjectCollection.! !

!testRun: #RoomTest #test06CanPutANonPortableObjectWithObjectsInsideAtRoom stamp: 'ERMC 12/10/2020 19:59:42'!
ERROR!
!NonPortableObject methodsFor: 'accessing' stamp: 'ERMC 12/10/2020 19:59:57'!
content
	self shouldBeImplemented.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 20:00:35' prior: 50883335!
test06CanPutANonPortableObjectWithObjectsInsideAtRoom
	
	| room aKey closet aTool drawer |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	aTool _ NoPointsPortableObject named: 'hammer' weighing: 3.
	drawer _ NonPortableObject named: 'drawer' weighing: 5 withObject: {aKey} .
	closet _ NonPortableObject named: 'the-closet' weighing: 10 withObject: {aTool. drawer} .

	room putObject: closet at: 0@0.
	
	self assert: room objects includes: closet. 
	self assert: {aTool. drawer} equals: closet content.
	self assert: {aKey} equals: drawer content. 
	self deny: (room objects includes: closet). 
	
! !
!NonPortableObject methodsFor: 'accessing' stamp: 'ERMC 12/10/2020 20:00:51'!
contents
	self shouldBeImplemented.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 20:00:51' prior: 50883444!
test06CanPutANonPortableObjectWithObjectsInsideAtRoom
	
	| room aKey closet aTool drawer |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	aTool _ NoPointsPortableObject named: 'hammer' weighing: 3.
	drawer _ NonPortableObject named: 'drawer' weighing: 5 withObject: {aKey} .
	closet _ NonPortableObject named: 'the-closet' weighing: 10 withObject: {aTool. drawer} .

	room putObject: closet at: 0@0.
	
	self assert: room objects includes: closet. 
	self assert: {aTool. drawer} equals: closet contents.
	self assert: {aKey} equals: drawer contents. 
	self deny: (room objects includes: closet). 
	
! !

!methodRemoval: NonPortableObject #content stamp: 'ERMC 12/10/2020 20:00:51'!
content
	self shouldBeImplemented.!

!testRun: #RoomTest #test06CanPutANonPortableObjectWithObjectsInsideAtRoom stamp: 'ERMC 12/10/2020 20:00:58'!
ERROR!
!NonPortableObject methodsFor: 'accessing' stamp: 'ERMC 12/10/2020 20:01:12' prior: 50883467!
contents

	^ objects ! !

!testRun: #RoomTest #test06CanPutANonPortableObjectWithObjectsInsideAtRoom stamp: 'ERMC 12/10/2020 20:01:28'!
FAILURE!

!testRun: #RoomTest #test06CanPutANonPortableObjectWithObjectsInsideAtRoom stamp: 'ERMC 12/10/2020 20:01:28'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 20:01:44' prior: 50883472!
test06CanPutANonPortableObjectWithObjectsInsideAtRoom
	
	| room aKey closet aTool drawer |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	aTool _ NoPointsPortableObject named: 'hammer' weighing: 3.
	drawer _ NonPortableObject named: 'drawer' weighing: 5 withObject: {aKey} .
	closet _ NonPortableObject named: 'the-closet' weighing: 10 withObject: {aTool. drawer} .

	room putObject: closet at: 0@0.
	
	self assert: room objects includes: closet. 
	self assert: {aTool. drawer} equals: closet contents.
	self assert: {aKey} equals: drawer contents. 
	
! !

!testRun: #RoomTest #test06CanPutANonPortableObjectWithObjectsInsideAtRoom stamp: 'ERMC 12/10/2020 20:01:44'!
PASSED!

!testRun: #RoomTest #test01CanNotCreateRoomWithZeroSize stamp: 'ERMC 12/10/2020 20:01:44'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithNegativeSize stamp: 'ERMC 12/10/2020 20:01:44'!
PASSED!

!testRun: #RoomTest #test03CanPutAnObjectToRoomIfThereIsFreeSpace stamp: 'ERMC 12/10/2020 20:01:44'!
PASSED!

!testRun: #RoomTest #test04CantPutAPortableObjectAboveAnotherObject stamp: 'ERMC 12/10/2020 20:01:45'!
PASSED!

!testRun: #RoomTest #test05CanPutANonPortableObjectAboveAnotherObject stamp: 'ERMC 12/10/2020 20:01:45'!
PASSED!

!testRun: #RoomTest #test06CanPutANonPortableObjectWithObjectsInsideAtRoom stamp: 'ERMC 12/10/2020 20:01:45'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 20:02:59' prior: 50883515!
test06CanPutANonPortableObjectWithObjectsInsideAtRoom
	
	| room aKey closet aTool drawer |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	aTool _ NoPointsPortableObject named: 'hammer' weighing: 3.
	drawer _ NonPortableObject named: 'drawer' weighing: 5 withObject: {aKey} .
	closet _ NonPortableObject named: 'the-closet' weighing: 10 withObject: {aTool. drawer} .

	room putObject: closet at: 0@0.
	
	self assert: room objects includes: closet. 
	self assert: {aTool. drawer} equals: closet contents.
	self assert: {aKey} equals: drawer contents. 
	self deny: (room objects includes: drawer).
	self deny: (room objects includes: aTool).
	self deny: (room objects includes: aKey)
	
! !

!testRun: #RoomTest #test06CanPutANonPortableObjectWithObjectsInsideAtRoom stamp: 'ERMC 12/10/2020 20:03:02'!
PASSED!

!testRun: #RoomTest #test01CanNotCreateRoomWithZeroSize stamp: 'ERMC 12/10/2020 20:03:02'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithNegativeSize stamp: 'ERMC 12/10/2020 20:03:02'!
PASSED!

!testRun: #RoomTest #test03CanPutAnObjectToRoomIfThereIsFreeSpace stamp: 'ERMC 12/10/2020 20:03:02'!
PASSED!

!testRun: #RoomTest #test04CantPutAPortableObjectAboveAnotherObject stamp: 'ERMC 12/10/2020 20:03:02'!
PASSED!

!testRun: #RoomTest #test05CanPutANonPortableObjectAboveAnotherObject stamp: 'ERMC 12/10/2020 20:03:02'!
PASSED!

!testRun: #RoomTest #test06CanPutANonPortableObjectWithObjectsInsideAtRoom stamp: 'ERMC 12/10/2020 20:03:02'!
PASSED!

!methodRemoval: NonPortableObject class #named:weighing: stamp: 'ERMC 12/10/2020 20:04:08'!
named: aName weighing: aWeight 

	^self new initializeNamed: aName weighing: aWeight !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 20:04:41' prior: 50883266!
test05CanPutANonPortableObjectAboveAnotherObject
	
	| room aKey closet aRing cellphone glass |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	cellphone _ NoPointsPortableObject named: 'cellphone' weighing: 1.
	glass _ NoPointsPortableObject named: 'glass' weighing: 1.
	aRing _ NoPointsPortableObject named: 'the-ring-of-the-lord' weighing: 1.
	closet _ NonPortableObject named: 'the-closet' weighing: 10 withObject: {}.

	room putObject: aKey at: 1@1.
	room putObject: cellphone at: 1@0.
	room putObject: glass at: 0@1.	
	room putObject: aRing at: 0@0.
		
	self
		should: [ room putObject: closet at: 0@0. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = room cantPutAnObjectOnAnotherErrorDescription.
			self deny: (room objects includes: closet). 
			self assert: room objects includes: aKey.
			self assert: room objects includes: cellphone.
			self assert: room objects includes: glass.
			]
! !

!testRun: #RoomTest #test01CanNotCreateRoomWithZeroSize stamp: 'ERMC 12/10/2020 20:04:59'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithNegativeSize stamp: 'ERMC 12/10/2020 20:04:59'!
PASSED!

!testRun: #RoomTest #test03CanPutAnObjectToRoomIfThereIsFreeSpace stamp: 'ERMC 12/10/2020 20:04:59'!
PASSED!

!testRun: #RoomTest #test04CantPutAPortableObjectAboveAnotherObject stamp: 'ERMC 12/10/2020 20:04:59'!
PASSED!

!testRun: #RoomTest #test05CanPutANonPortableObjectAboveAnotherObject stamp: 'ERMC 12/10/2020 20:04:59'!
PASSED!

!testRun: #RoomTest #test06CanPutANonPortableObjectWithObjectsInsideAtRoom stamp: 'ERMC 12/10/2020 20:04:59'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 20:14:36'!
test07PlayableCharacterCanNotStartInOcupatedSpace
	
	| room aKey playableCharacter |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
		
	room putObject: aKey at: 0@0.
	
	self deny: (room objects includes: aKey)
	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 20:23:03' prior: 50883673!
test07PlayableCharacterCanNotStartInOcupatedSpace
	
	| room aKey playableCharacter |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
		
	room putObject: aKey at: 0@0.
	
	self
		should: [ room startPlayer: playableCharacter at: (playableCharacter position).  ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = room canNotStartInAOccupiedSpaceErrorDescription.
			]
		! !

!testRun: #RoomTest #test07PlayableCharacterCanNotStartInOcupatedSpace stamp: 'ERMC 12/10/2020 20:23:08'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 20:23:19'!
defaultBackpack
	self shouldBeImplemented.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 20:23:39' prior: 50883713!
defaultBackpack

	^ Backpack containingUpTo: 100 limitingPointsTo: 100! !

!testRun: #RoomTest #test07PlayableCharacterCanNotStartInOcupatedSpace stamp: 'ERMC 12/10/2020 20:23:40'!
ERROR!
!PlayableCharacter methodsFor: 'accessing' stamp: 'ERMC 12/10/2020 20:23:49'!
position
	self shouldBeImplemented.
	^position! !
!PlayableCharacter methodsFor: 'accessing' stamp: 'ERMC 12/10/2020 20:23:54' prior: 50883727!
position

	^ position! !

!testRun: #RoomTest #test07PlayableCharacterCanNotStartInOcupatedSpace stamp: 'ERMC 12/10/2020 20:24:03'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 20:24:17'!
startPlayer: aPlayableCharacter at: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 20:25:33' prior: 50883739!
startPlayer: aPlayableCharacter at: aPosition 
	
	(objects includesKey: aPosition ) ifTrue: [self error: self cantPutAnObjectOnAnotherErrorDescription].
	
	! !
!Room methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 20:26:37' prior: 50883745!
startPlayer: aPlayableCharacter at: aPosition 
	
	(objects includesKey: aPosition ) ifTrue: [self error: self canNotStartInAOccupiedSpaceErrorDescription].
	
	
	! !

!testRun: #RoomTest #test07PlayableCharacterCanNotStartInOcupatedSpace stamp: 'ERMC 12/10/2020 20:26:41'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 20:30:55' prior: 50883688!
test07PlayableCharacterCanNotStartInOcupatedSpace
	
	| room aKey playableCharacter |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #West .
		
	room putObject: aKey at: 0@0.
	
	self
		should: [ room startPlayer: playableCharacter at: (playableCharacter position).  ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = room canNotStartInAOccupiedSpaceErrorDescription.
			self deny: room isAPlayableCharacter. ]
		! !

!testRun: #RoomTest #test07PlayableCharacterCanNotStartInOcupatedSpace stamp: 'ERMC 12/10/2020 20:30:59'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 20:31:13'!
canNotStartInAOccupiedSpaceErrorDescription
	self shouldBeImplemented.! !
!Room methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 20:31:38' prior: 50883791!
canNotStartInAOccupiedSpaceErrorDescription

	^ 'Can not start in a occupied space at room'! !

!testRun: #RoomTest #test07PlayableCharacterCanNotStartInOcupatedSpace stamp: 'ERMC 12/10/2020 20:31:39'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 20:32:01'!
isAPlayableCharacter
	self shouldBeImplemented.! !
!Room methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 20:32:18' prior: 50883806!
isAPlayableCharacter
	
	^ true.! !

!testRun: #RoomTest #test07PlayableCharacterCanNotStartInOcupatedSpace stamp: 'ERMC 12/10/2020 20:32:20'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 20:32:32' prior: 50883811!
isAPlayableCharacter
	
	^ false.! !

!testRun: #RoomTest #test07PlayableCharacterCanNotStartInOcupatedSpace stamp: 'ERMC 12/10/2020 20:32:35'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 21:01:48'!
test07ElJugadorPuedeTomarUnObjetoSiEstaContiguoAElYApuntaAEsaDireccion
	
	| room aKey playableCharacter |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North .
		
	room putObject: aKey at: 0@1.
	playableCharacter take: aKey. 
	
	self assert: (playableCharacter backpackIncludes: aKey).
	self deny: (room objects includes: aKey). 
		! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 21:02:08'!
test08ElJugadorPuedeTomarUnObjetoSiEstaContiguoAElYApuntaAEsaDireccion
	
	| room aKey playableCharacter |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North .
		
	room putObject: aKey at: 0@1.
	playableCharacter take: aKey. 
	
	self assert: (playableCharacter backpackIncludes: aKey).
	self deny: (room objects includes: aKey). 
		! !

!methodRemoval: RoomTest #test07ElJugadorPuedeTomarUnObjetoSiEstaContiguoAElYApuntaAEsaDireccion stamp: 'ERMC 12/10/2020 21:02:12'!
test07ElJugadorPuedeTomarUnObjetoSiEstaContiguoAElYApuntaAEsaDireccion
	
	| room aKey playableCharacter |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North .
		
	room putObject: aKey at: 0@1.
	playableCharacter take: aKey. 
	
	self assert: (playableCharacter backpackIncludes: aKey).
	self deny: (room objects includes: aKey). 
		!

!testRun: #RoomTest #test07PlayableCharacterCanNotStartInOcupatedSpace stamp: 'ERMC 12/10/2020 21:02:15'!
PASSED!
!Room methodsFor: 'accesing' stamp: 'ERMC 12/10/2020 21:02:54'!
roomIncludes: anObject
	
	^ objects includes: anObject. ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 21:03:28' prior: 50882570!
test03CanPutAnObjectToRoomIfThereIsFreeSpace
	
	| room aKey |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	
	room putObject: aKey at: 1@1.
	
	self assert: room objects includes: aKey. ! !

!testRun: #RoomTest #test03CanPutAnObjectToRoomIfThereIsFreeSpace stamp: 'ERMC 12/10/2020 21:03:46'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 21:04:04' prior: 50883891!
test03CanPutAnObjectToRoomIfThereIsFreeSpace
	
	| room aKey |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	
	room putObject: aKey at: 1@1.
	
	self assert: (room roomIncludes: aKey) ! !

!testRun: #RoomTest #test03CanPutAnObjectToRoomIfThereIsFreeSpace stamp: 'ERMC 12/10/2020 21:04:05'!
PASSED!

!testRun: #RoomTest #test01CanNotCreateRoomWithZeroSize stamp: 'ERMC 12/10/2020 21:04:05'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithNegativeSize stamp: 'ERMC 12/10/2020 21:04:05'!
PASSED!

!testRun: #RoomTest #test03CanPutAnObjectToRoomIfThereIsFreeSpace stamp: 'ERMC 12/10/2020 21:04:05'!
PASSED!

!testRun: #RoomTest #test04CantPutAPortableObjectAboveAnotherObject stamp: 'ERMC 12/10/2020 21:04:05'!
PASSED!

!testRun: #RoomTest #test05CanPutANonPortableObjectAboveAnotherObject stamp: 'ERMC 12/10/2020 21:04:05'!
PASSED!

!testRun: #RoomTest #test06CanPutANonPortableObjectWithObjectsInsideAtRoom stamp: 'ERMC 12/10/2020 21:04:05'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterCanNotStartInOcupatedSpace stamp: 'ERMC 12/10/2020 21:04:05'!
PASSED!

!testRun: #RoomTest #test08ElJugadorPuedeTomarUnObjetoSiEstaContiguoAElYApuntaAEsaDireccion stamp: 'ERMC 12/10/2020 21:04:05'!
FAILURE!

!testRun: #RoomTest #test08ElJugadorPuedeTomarUnObjetoSiEstaContiguoAElYApuntaAEsaDireccion stamp: 'ERMC 12/10/2020 21:04:05'!
FAILURE!
!Room methodsFor: 'accesing' stamp: 'ERMC 12/10/2020 21:05:20'!
includeObject: anObject
	
	^ objects includes: anObject. ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 21:05:20' prior: 50883905!
test03CanPutAnObjectToRoomIfThereIsFreeSpace
	
	| room aKey |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	
	room putObject: aKey at: 1@1.
	
	self assert: (room includeObject: aKey) ! !

!methodRemoval: Room #roomIncludes: stamp: 'ERMC 12/10/2020 21:05:20'!
roomIncludes: anObject
	
	^ objects includes: anObject. !

!testRun: #RoomTest #test03CanPutAnObjectToRoomIfThereIsFreeSpace stamp: 'ERMC 12/10/2020 21:05:36'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 21:06:27' prior: 50883137!
test04CantPutAPortableObjectAboveAnotherObject
	
	| room aKey aRing cellphone glass |

	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	cellphone _ NoPointsPortableObject named: 'cellphone' weighing: 1.
	glass _ NoPointsPortableObject named: 'glass' weighing: 1.
	aRing _ NoPointsPortableObject named: 'the-ring-of-the-lord' weighing: 1.
	
	room putObject: aKey at: 1@1.
	room putObject: cellphone at: 1@0.
	room putObject: glass at: 0@1.	
	
	self
		should: [ room putObject: aRing at: 0@1. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = room cantPutAnObjectOnAnotherErrorDescription.
			self assert: (room includeObject: aKey).
			self assert: (room includeObject: cellphone).
			self assert: (room includeObject: glass).]
		! !

!testRun: #RoomTest #test04CantPutAPortableObjectAboveAnotherObject stamp: 'ERMC 12/10/2020 21:06:29'!
PASSED!

!testRun: #RoomTest #test01CanNotCreateRoomWithZeroSize stamp: 'ERMC 12/10/2020 21:06:29'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithNegativeSize stamp: 'ERMC 12/10/2020 21:06:29'!
PASSED!

!testRun: #RoomTest #test03CanPutAnObjectToRoomIfThereIsFreeSpace stamp: 'ERMC 12/10/2020 21:06:29'!
PASSED!

!testRun: #RoomTest #test04CantPutAPortableObjectAboveAnotherObject stamp: 'ERMC 12/10/2020 21:06:29'!
PASSED!

!testRun: #RoomTest #test05CanPutANonPortableObjectAboveAnotherObject stamp: 'ERMC 12/10/2020 21:06:29'!
PASSED!

!testRun: #RoomTest #test06CanPutANonPortableObjectWithObjectsInsideAtRoom stamp: 'ERMC 12/10/2020 21:06:29'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterCanNotStartInOcupatedSpace stamp: 'ERMC 12/10/2020 21:06:29'!
PASSED!

!testRun: #RoomTest #test08ElJugadorPuedeTomarUnObjetoSiEstaContiguoAElYApuntaAEsaDireccion stamp: 'ERMC 12/10/2020 21:06:29'!
FAILURE!

!testRun: #RoomTest #test08ElJugadorPuedeTomarUnObjetoSiEstaContiguoAElYApuntaAEsaDireccion stamp: 'ERMC 12/10/2020 21:06:29'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 21:07:06' prior: 50883974!
test04CantPutAPortableObjectAboveAnotherObject
	
	| room aKey aRing cellphone glass |

	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	cellphone _ NoPointsPortableObject named: 'cellphone' weighing: 1.
	glass _ NoPointsPortableObject named: 'glass' weighing: 1.
	aRing _ NoPointsPortableObject named: 'the-ring-of-the-lord' weighing: 1.
	
	room putObject: aKey at: 1@1.
	room putObject: cellphone at: 1@0.
	room putObject: glass at: 0@1.	
	
	self
		should: [ room putObject: aRing at: 0@1. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = room cantPutAnObjectOnAnotherErrorDescription.
			self assert: (room includeObject: aKey).
			self assert: (room includeObject: cellphone).
			self assert: (room includeObject: glass)
			]
		! !

!testRun: #RoomTest #test04CantPutAPortableObjectAboveAnotherObject stamp: 'ERMC 12/10/2020 21:07:06'!
PASSED!

!testRun: #RoomTest #test01CanNotCreateRoomWithZeroSize stamp: 'ERMC 12/10/2020 21:07:06'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithNegativeSize stamp: 'ERMC 12/10/2020 21:07:06'!
PASSED!

!testRun: #RoomTest #test03CanPutAnObjectToRoomIfThereIsFreeSpace stamp: 'ERMC 12/10/2020 21:07:06'!
PASSED!

!testRun: #RoomTest #test04CantPutAPortableObjectAboveAnotherObject stamp: 'ERMC 12/10/2020 21:07:06'!
PASSED!

!testRun: #RoomTest #test05CanPutANonPortableObjectAboveAnotherObject stamp: 'ERMC 12/10/2020 21:07:06'!
PASSED!

!testRun: #RoomTest #test06CanPutANonPortableObjectWithObjectsInsideAtRoom stamp: 'ERMC 12/10/2020 21:07:06'!
PASSED!

!testRun: #RoomTest #test07PlayableCharacterCanNotStartInOcupatedSpace stamp: 'ERMC 12/10/2020 21:07:06'!
PASSED!

!testRun: #RoomTest #test08ElJugadorPuedeTomarUnObjetoSiEstaContiguoAElYApuntaAEsaDireccion stamp: 'ERMC 12/10/2020 21:07:06'!
FAILURE!

!testRun: #RoomTest #test08ElJugadorPuedeTomarUnObjetoSiEstaContiguoAElYApuntaAEsaDireccion stamp: 'ERMC 12/10/2020 21:07:06'!
FAILURE!

!testRun: #RoomTest #test04CantPutAPortableObjectAboveAnotherObject stamp: 'ERMC 12/10/2020 21:07:13'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 21:07:44' prior: 50883618!
test05CanPutANonPortableObjectAboveAnotherObject
	
	| room aKey closet aRing cellphone glass |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	cellphone _ NoPointsPortableObject named: 'cellphone' weighing: 1.
	glass _ NoPointsPortableObject named: 'glass' weighing: 1.
	aRing _ NoPointsPortableObject named: 'the-ring-of-the-lord' weighing: 1.
	closet _ NonPortableObject named: 'the-closet' weighing: 10 withObject: {}.

	room putObject: aKey at: 1@1.
	room putObject: cellphone at: 1@0.
	room putObject: glass at: 0@1.	
	room putObject: aRing at: 0@0.
		
	self
		should: [ room putObject: closet at: 0@0. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = room cantPutAnObjectOnAnotherErrorDescription.
			self deny: (room objects includes: closet). 
			self assert: (room includeObject: aKey).
			self assert: (room includeObject: cellphone).
			self assert: (room includeObject: glass)
			]
! !

!testRun: #RoomTest #test05CanPutANonPortableObjectAboveAnotherObject stamp: 'ERMC 12/10/2020 21:07:47'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 21:08:03' prior: 50884110!
test05CanPutANonPortableObjectAboveAnotherObject
	
	| room aKey closet aRing cellphone glass |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	cellphone _ NoPointsPortableObject named: 'cellphone' weighing: 1.
	glass _ NoPointsPortableObject named: 'glass' weighing: 1.
	aRing _ NoPointsPortableObject named: 'the-ring-of-the-lord' weighing: 1.
	closet _ NonPortableObject named: 'the-closet' weighing: 10 withObject: {}.

	room putObject: aKey at: 1@1.
	room putObject: cellphone at: 1@0.
	room putObject: glass at: 0@1.	
	room putObject: aRing at: 0@0.
		
	self
		should: [ room putObject: closet at: 0@0. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = room cantPutAnObjectOnAnotherErrorDescription.
			self deny: (room includeObject: closet). 
			self assert: (room includeObject: aKey).
			self assert: (room includeObject: cellphone).
			self assert: (room includeObject: glass)
			]
! !

!testRun: #RoomTest #test05CanPutANonPortableObjectAboveAnotherObject stamp: 'ERMC 12/10/2020 21:08:06'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 21:08:30' prior: 50883562!
test06CanPutANonPortableObjectWithObjectsInsideAtRoom
	
	| room aKey closet aTool drawer |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	aTool _ NoPointsPortableObject named: 'hammer' weighing: 3.
	drawer _ NonPortableObject named: 'drawer' weighing: 5 withObject: {aKey} .
	closet _ NonPortableObject named: 'the-closet' weighing: 10 withObject: {aTool. drawer} .

	room putObject: closet at: 0@0.
	
	self assert: room objects includes: closet. 
	self assert: {aTool. drawer} equals: closet contents.
	self assert: {aKey} equals: drawer contents. 
	self deny: (room includeObject: drawer).
	self deny: (room includeObject: aTool).
	self deny: (room includeObject: aKey)
	
! !

!testRun: #RoomTest #test06CanPutANonPortableObjectWithObjectsInsideAtRoom stamp: 'ERMC 12/10/2020 21:08:35'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 21:08:47' prior: 50883845!
test08ElJugadorPuedeTomarUnObjetoSiEstaContiguoAElYApuntaAEsaDireccion
	
	| room aKey playableCharacter |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North .
		
	room putObject: aKey at: 0@1.
	playableCharacter take: aKey. 
	
	self assert: (playableCharacter backpackIncludes: aKey).
	self deny: (room includeObject: aKey). 
		! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 21:11:13'!
testxxElJugadorPuedeTomarUnObjetoSiEstaContiguoAElYApuntaAEsaDireccion
	
	| room aKey playableCharacter |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North .
		
	room putObject: aKey at: 0@1.
	playableCharacter take: aKey. 
	
	self assert: (playableCharacter backpackIncludes: aKey).
	self deny: (room includeObject: aKey). 
		! !

!methodRemoval: RoomTest #test08ElJugadorPuedeTomarUnObjetoSiEstaContiguoAElYApuntaAEsaDireccion stamp: 'ERMC 12/10/2020 21:11:17'!
test08ElJugadorPuedeTomarUnObjetoSiEstaContiguoAElYApuntaAEsaDireccion
	
	| room aKey playableCharacter |
	
	room _ Room width: 1 height: 1.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North .
		
	room putObject: aKey at: 0@1.
	playableCharacter take: aKey. 
	
	self assert: (playableCharacter backpackIncludes: aKey).
	self deny: (room includeObject: aKey). 
		!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 21:17:34'!
test08PlayableCharacterCanNotMoveOutsideOfTheRoom
	
	| room  playableCharacter |
	
	room _ Room width: 1 height: 1.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #West .
			
	self
		should: [ room startPlayer: playableCharacter at: (playableCharacter position).  ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = room canNotStartInAOccupiedSpaceErrorDescription.
			self deny: room isAPlayableCharacter. ]
		! !

!testRun: #RoomTest #test08PlayableCharacterCanNotMoveOutsideOfTheRoom stamp: 'ERMC 12/10/2020 21:17:38'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 21:18:04'!
createRoom

	^ Room width: 1 height: 1! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 21:18:04' prior: 50884273!
test08PlayableCharacterCanNotMoveOutsideOfTheRoom
	
	| room  playableCharacter |
	
	room _ self createRoom.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #West .
			
	self
		should: [ room startPlayer: playableCharacter at: (playableCharacter position).  ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = room canNotStartInAOccupiedSpaceErrorDescription.
			self deny: room isAPlayableCharacter. ]
		! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 21:18:28' prior: 50883765!
test07PlayableCharacterCanNotStartInOcupatedSpace
	
	| room aKey playableCharacter |
	
	room _ self createRoom.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #West .
		
	room putObject: aKey at: 0@0.
	
	self
		should: [ room startPlayer: playableCharacter at: (playableCharacter position).  ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = room canNotStartInAOccupiedSpaceErrorDescription.
			self deny: room isAPlayableCharacter. ]
		! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 21:18:37' prior: 50884188!
test06CanPutANonPortableObjectWithObjectsInsideAtRoom
	
	| room aKey closet aTool drawer |
	
	room _ self createRoom.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	aTool _ NoPointsPortableObject named: 'hammer' weighing: 3.
	drawer _ NonPortableObject named: 'drawer' weighing: 5 withObject: {aKey} .
	closet _ NonPortableObject named: 'the-closet' weighing: 10 withObject: {aTool. drawer} .

	room putObject: closet at: 0@0.
	
	self assert: room objects includes: closet. 
	self assert: {aTool. drawer} equals: closet contents.
	self assert: {aKey} equals: drawer contents. 
	self deny: (room includeObject: drawer).
	self deny: (room includeObject: aTool).
	self deny: (room includeObject: aKey)
	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 21:18:43' prior: 50884149!
test05CanPutANonPortableObjectAboveAnotherObject
	
	| room aKey closet aRing cellphone glass |
	
	room _ self createRoom.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	cellphone _ NoPointsPortableObject named: 'cellphone' weighing: 1.
	glass _ NoPointsPortableObject named: 'glass' weighing: 1.
	aRing _ NoPointsPortableObject named: 'the-ring-of-the-lord' weighing: 1.
	closet _ NonPortableObject named: 'the-closet' weighing: 10 withObject: {}.

	room putObject: aKey at: 1@1.
	room putObject: cellphone at: 1@0.
	room putObject: glass at: 0@1.	
	room putObject: aRing at: 0@0.
		
	self
		should: [ room putObject: closet at: 0@0. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = room cantPutAnObjectOnAnotherErrorDescription.
			self deny: (room includeObject: closet). 
			self assert: (room includeObject: aKey).
			self assert: (room includeObject: cellphone).
			self assert: (room includeObject: glass)
			]
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 21:18:48' prior: 50884040!
test04CantPutAPortableObjectAboveAnotherObject
	
	| room aKey aRing cellphone glass |

	room _ self createRoom.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	cellphone _ NoPointsPortableObject named: 'cellphone' weighing: 1.
	glass _ NoPointsPortableObject named: 'glass' weighing: 1.
	aRing _ NoPointsPortableObject named: 'the-ring-of-the-lord' weighing: 1.
	
	room putObject: aKey at: 1@1.
	room putObject: cellphone at: 1@0.
	room putObject: glass at: 0@1.	
	
	self
		should: [ room putObject: aRing at: 0@1. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = room cantPutAnObjectOnAnotherErrorDescription.
			self assert: (room includeObject: aKey).
			self assert: (room includeObject: cellphone).
			self assert: (room includeObject: glass)
			]
		! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 21:24:26' prior: 50884301!
test08PlayableCharacterCanNotMoveOutsideOfTheRoom
	
	| room  playableCharacter |
	
	room _ self createRoom.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North .
	
			
	self
		should: [ playableCharacter moveForward]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = playableCharacter canNotMoveOutsideOfTheLimitRoomErrorDescription.
			 ]
		! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 21:26:46' prior: 50884435!
test08PlayableCharacterCanNotMoveOutsideOfTheRoom
	
	| room  playableCharacter |
	
	room _ self createRoom.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North.
	
	playableCharacter startIn: room. 
			
	self
		should: [ playableCharacter moveForward]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = playableCharacter canNotMoveOutsideOfTheLimitRoomErrorDescription.
			 ]
		! !
!Room methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 21:27:17' prior: 50883753!
startPlayer: aPlayableCharacter at: aPosition 
	
	(objects includesKey: aPosition ) ifTrue: [self error: self canNotStartInAOccupiedSpaceErrorDescription].
	
	aPlayableCharacter startIn: self. 
	
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 21:27:27' prior: 50884453!
test08PlayableCharacterCanNotMoveOutsideOfTheRoom
	
	| room  playableCharacter |
	
	room _ self createRoom.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North.
				
	self
		should: [ playableCharacter moveForward]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = playableCharacter canNotMoveOutsideOfTheLimitRoomErrorDescription.
			 ]
		! !
!Room methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 21:28:52' prior: 50884472!
startPlayer: aPlayableCharacter at: aPosition 
	
	(objects includesKey: aPosition ) ifTrue: [self error: self canNotStartInAOccupiedSpaceErrorDescription].
	
	aPlayableCharacter startIn: self. 
	
	
	
	! !

!classDefinition: #PlayableCharacter category: 'ISW1-2020-2C-2doParcial' stamp: 'ERMC 12/10/2020 21:29:21'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'ERMC 12/10/2020 21:29:18'!
startIn: aRoom

	room _ aRoom. ! !

!testRun: #RoomTest #test07PlayableCharacterCanNotStartInOcupatedSpace stamp: 'ERMC 12/10/2020 21:29:27'!
PASSED!

Object subclass: #Room
	instanceVariableNames: 'width height objects startPlayer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'ERMC 12/10/2020 21:29:50'!
Object subclass: #Room
	instanceVariableNames: 'width height objects startPlayer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!methodRemoval: Room #initializeWidth:height:withObjects: stamp: 'ERMC 12/10/2020 21:30:14'!
initializeWidth: aWidth height: aHeight withObjects: anObjectCollection 
	
	width := aWidth.
	height := aHeight.
	objects := anObjectCollection.!
!Room methodsFor: 'initialization' stamp: 'ERMC 12/10/2020 21:30:21' prior: 50882449!
initializeWidth: aWidth height: aHeight 
	
	width _ aWidth.
	height _ aHeight.
	objects _ Dictionary new. 
	startPlayer _ false.
	! !
!Room methodsFor: 'accesing' stamp: 'ERMC 12/10/2020 21:31:13'!
isAnyPlaying
	
	^ startPlayer.! !

!methodRemoval: Room #isAPlayableCharacter stamp: 'ERMC 12/10/2020 21:31:17'!
isAPlayableCharacter
	
	^ false.!
!Room methodsFor: 'accesing' stamp: 'ERMC 12/10/2020 21:31:52'!
isAplayableCharacter
	
	^ startPlayer.! !

!methodRemoval: Room #isAnyPlaying stamp: 'ERMC 12/10/2020 21:31:52'!
isAnyPlaying
	
	^ startPlayer.!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 21:32:05' prior: 50884321!
test07PlayableCharacterCanNotStartInOcupatedSpace
	
	| room aKey playableCharacter |
	
	room _ self createRoom.
	
	aKey _ NoPointsPortableObject named: 'the-key' weighing: 1.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #West .
		
	room putObject: aKey at: 0@0.
	
	self
		should: [ room startPlayer: playableCharacter at: (playableCharacter position).  ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = room canNotStartInAOccupiedSpaceErrorDescription.
			self deny: room isAplayableCharacter. ]
		! !
!Room methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 21:32:33' prior: 50884500!
startPlayer: aPlayableCharacter at: aPosition 
	
	(objects includesKey: aPosition ) ifTrue: [self error: self canNotStartInAOccupiedSpaceErrorDescription].
	
	aPlayableCharacter startIn: self. 
	startPlayer _ true. 
	
	
	! !

!testRun: #RoomTest #test08PlayableCharacterCanNotMoveOutsideOfTheRoom stamp: 'ERMC 12/10/2020 21:33:39'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/10/2020 21:34:28' prior: 50884482!
test08PlayableCharacterCanNotMoveOutsideOfTheRoom
	
	| room  playableCharacter |
	
	room _ self createRoom.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North.
	
	room startPlayer: playableCharacter at: (playableCharacter position).
				
	self
		should: [ playableCharacter moveForward]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = playableCharacter canNotMoveOutsideOfTheLimitRoomErrorDescription.
			 ]
		! !

!testRun: #RoomTest #test08PlayableCharacterCanNotMoveOutsideOfTheRoom stamp: 'ERMC 12/10/2020 21:34:31'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'ERMC 12/10/2020 21:45:30' prior: 50881751!
moveForward
	
	position := position + heading forwardPoint! !

!methodRemoval: NonPortableObject #initializeNamed:weighing: stamp: 'ERMC 12/10/2020 21:46:52'!
initializeNamed: aName weighing: aWeight 

	name := aName.
	weight := aWeight.!

!testRun: #RoomTest #test07PlayableCharacterCanNotStartInOcupatedSpace stamp: 'ERMC 12/10/2020 21:47:18'!
PASSED!