

----STARTUP---- (9 November 2020 20:16:44) as /home/dn-01/Escritorio/Ingenieria en Software I/CuisLimpio/CuisUniversity-4383.image!


TestCase subclass: #TransactionTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #TransactionTest category: 'Portfolio-Ejercicio' stamp: 'D S 11/9/2020 20:17:03'!
TestCase subclass: #TransactionTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

TestCase subclass: #Transaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Transaction category: 'Portfolio-Ejercicio' stamp: 'D S 11/9/2020 20:17:07'!
TestCase subclass: #Transaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!TransactionTest methodsFor: 'no messages' stamp: 'D S 11/9/2020 20:19:21'!
test01
	|anAccountToExtract anAccountToDeposit anTransaction|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	anTransaction := Transaction from: anAccountToExtract to: anAccountToDeposit amount: 100.
	
	self assert: 100 equals: anTransaction amount.! !
!Transaction class methodsFor: 'no messages' stamp: 'D S 11/9/2020 20:19:48'!
from: anAccountToExtract to: anAccountToDeposit amount: anAmount.

	! !

!testRun: #TransactionTest #test01 stamp: 'D S 11/9/2020 20:19:53'!
ERROR!

!testRun: #TransactionTest #test01 stamp: 'D S 11/9/2020 20:19:53'!
ERROR!
!Transaction class methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 20:21:17' prior: 50889355!
from: anAccountToExtract to: anAccountToDeposit amount: anAmount
	|transference|
	
	transference := self extractFrom: anAccountToExtract andDepositFrom: anAccountToDeposit anAmountOf: anAmount.
	^transference.! !

!classDefinition: #Transaction category: 'Portfolio-Ejercicio' stamp: 'D S 11/9/2020 20:21:56'!
TestCase subclass: #Transaction
	instanceVariableNames: 'from'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Transaction category: 'Portfolio-Ejercicio' stamp: 'D S 11/9/2020 20:21:58'!
TestCase subclass: #Transaction
	instanceVariableNames: 'from to'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Transaction category: 'Portfolio-Ejercicio' stamp: 'D S 11/9/2020 20:21:59'!
TestCase subclass: #Transaction
	instanceVariableNames: 'from to amount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Transaction methodsFor: 'no messages' stamp: 'D S 11/9/2020 20:21:54'!
extractFrom: anAccountToExtract andDepositFrom: anAccountToDeposit anAmountOf: anAmount.

	from := anAccountToExtract.
	to := anAccountToDeposit.
	amount := anAmount.! !

!testRun: #TransactionTest #test01 stamp: 'D S 11/9/2020 20:22:03'!
ERROR!

!testRun: #TransactionTest #test01 stamp: 'D S 11/9/2020 20:22:03'!
ERROR!

!classRenamed: #Transaction as: #Transference stamp: 'D S 11/9/2020 20:22:24'!
Smalltalk renameClassNamed: #Transaction as: #Transference!
!TransactionTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 20:22:24' prior: 50889343!
test01
	|anAccountToExtract anAccountToDeposit anTransaction|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	anTransaction := Transference from: anAccountToExtract to: anAccountToDeposit amount: 100.
	
	self assert: 100 equals: anTransaction amount.! !

!classRenamed: #TransactionTest as: #TransferenceTest stamp: 'D S 11/9/2020 20:22:34'!
Smalltalk renameClassNamed: #TransactionTest as: #TransferenceTest!
!Transference class methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 20:24:13' prior: 50889366!
from: anAccountToExtract to: anAccountToDeposit amount: anAmount
	|transference|
	
	transference := self new extractFrom: anAccountToExtract andDepositFrom: anAccountToDeposit anAmountOf: anAmount.
	^transference.! !

!testRun: #TransferenceTest #test01 stamp: 'D S 11/9/2020 20:24:18'!
ERROR!

!testRun: #TransferenceTest #test01 stamp: 'D S 11/9/2020 20:24:18'!
ERROR!
!Transference methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 20:24:35'!
amount

	^amount.! !

!testRun: #TransferenceTest #test01 stamp: 'D S 11/9/2020 20:24:38'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 20:25:12'!
test02
	|anAccountToExtract anAccountToDeposit anTransaction|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	anTransaction := Transference from: anAccountToExtract to: anAccountToDeposit amount: 100.
	
	self assert: (anAccountToExtract = (anTransaction from)).! !

!testRun: #TransferenceTest #test01 stamp: 'D S 11/9/2020 20:25:17'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'D S 11/9/2020 20:25:17'!
ERROR!

!testRun: #TransferenceTest #test02 stamp: 'D S 11/9/2020 20:25:17'!
ERROR!
!Transference methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 20:25:40'!
from

	^from.
! !

!testRun: #TransferenceTest #test01 stamp: 'D S 11/9/2020 20:25:43'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'D S 11/9/2020 20:25:43'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 20:25:59'!
test03
	|anAccountToExtract anAccountToDeposit anTransaction|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	anTransaction := Transference from: anAccountToExtract to: anAccountToDeposit amount: 100.
	
	self assert: (anAccountToDeposit = (anTransaction to)).! !

!testRun: #TransferenceTest #test01 stamp: 'D S 11/9/2020 20:26:03'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'D S 11/9/2020 20:26:03'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'D S 11/9/2020 20:26:03'!
ERROR!

!testRun: #TransferenceTest #test03 stamp: 'D S 11/9/2020 20:26:03'!
ERROR!
!Transference methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 20:26:30'!
to

	to.
! !
!Transference methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 20:26:36' prior: 50889506!
to

	to.
! !
!Transference methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 20:26:46' prior: 50889510!
to

	^to.
! !

!testRun: #TransferenceTest #test03 stamp: 'D S 11/9/2020 20:26:50'!
PASSED!
!Transference methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 20:27:05'!
amountToTransfer

	^amount.! !

!methodRemoval: Transference #amount stamp: 'D S 11/9/2020 20:27:05'!
amount

	^amount.!
!Transference methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 20:27:22'!
extractFrom

	^from.
! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 20:27:22' prior: 50889455!
test02
	|anAccountToExtract anAccountToDeposit anTransaction|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	anTransaction := Transference from: anAccountToExtract to: anAccountToDeposit amount: 100.
	
	self assert: (anAccountToExtract = (anTransaction extractFrom)).! !

!methodRemoval: Transference #from stamp: 'D S 11/9/2020 20:27:22'!
from

	^from.
!
!Transference methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 20:27:39'!
depositTo

	^to.
! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 20:27:39' prior: 50889484!
test03
	|anAccountToExtract anAccountToDeposit anTransaction|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	anTransaction := Transference from: anAccountToExtract to: anAccountToDeposit amount: 100.
	
	self assert: (anAccountToDeposit = (anTransaction depositTo)).! !

!methodRemoval: Transference #to stamp: 'D S 11/9/2020 20:27:39'!
to

	^to.
!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 20:27:46' prior: 50889416!
test01
	|anAccountToExtract anAccountToDeposit anTransaction|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	anTransaction := Transference from: anAccountToExtract to: anAccountToDeposit amount: 100.
	
	self assert: 100 equals: anTransaction amountToTransfer.! !

!classDefinition: #Transference category: 'Portfolio-Ejercicio' stamp: 'D S 11/9/2020 20:28:11'!
TestCase subclass: #Transference
	instanceVariableNames: 'from to amountToTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Transference methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 20:28:11' prior: 50889398!
extractFrom: anAccountToExtract andDepositFrom: anAccountToDeposit anAmountOf: anAmount.

	from := anAccountToExtract.
	to := anAccountToDeposit.
	amountToTransfer := anAmount.! !
!Transference methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 20:28:11' prior: 50889520!
amountToTransfer

	^amountToTransfer.! !

!classDefinition: #Transference category: 'Portfolio-Ejercicio' stamp: 'D S 11/9/2020 20:28:23'!
TestCase subclass: #Transference
	instanceVariableNames: 'extractFrom to amountToTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Transference methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 20:28:23' prior: 50889588!
extractFrom: anAccountToExtract andDepositFrom: anAccountToDeposit anAmountOf: anAmount.

	extractFrom := anAccountToExtract.
	to := anAccountToDeposit.
	amountToTransfer := anAmount.! !
!Transference methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 20:28:23' prior: 50889527!
extractFrom

	^extractFrom.
! !

!classDefinition: #Transference category: 'Portfolio-Ejercicio' stamp: 'D S 11/9/2020 20:28:34'!
TestCase subclass: #Transference
	instanceVariableNames: 'extractFrom depositTo amountToTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Transference methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 20:28:34' prior: 50889610!
extractFrom: anAccountToExtract andDepositFrom: anAccountToDeposit anAmountOf: anAmount.

	extractFrom := anAccountToExtract.
	depositTo := anAccountToDeposit.
	amountToTransfer := anAmount.! !
!Transference methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 20:28:34' prior: 50889547!
depositTo

	^depositTo.
! !

!testRun: #TransferenceTest #test01 stamp: 'D S 11/9/2020 20:28:37'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'D S 11/9/2020 20:28:37'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'D S 11/9/2020 20:28:37'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 20:36:34'!
test04
	|anAccountToExtract anAccountToDeposit anTransaction|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	anTransaction := Transference from: anAccountToExtract to: anAccountToDeposit amount: 50.
	
	self assert: 50 equals: anAccountToExtract balance.! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 20:36:44' prior: 50889653!
test04
	|anAccountToExtract anAccountToDeposit |

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	Transference from: anAccountToExtract to: anAccountToDeposit amount: 50.
	
	self assert: 50 equals: anAccountToExtract balance.! !

!testRun: #TransferenceTest #test04 stamp: 'D S 11/9/2020 20:36:50'!
FAILURE!

!testRun: #TransferenceTest #test04 stamp: 'D S 11/9/2020 20:36:50'!
FAILURE!
!Transference class methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 20:37:50' prior: 50889434!
from: anAccountToExtract to: anAccountToDeposit amount: anAmount
	|transference|
	
	transference := self new extractFrom: anAccountToExtract andDepositFrom: anAccountToDeposit anAmountOf: anAmount.
	anAccountToExtract addTransference: transference.
	^transference.! !
!Transference class methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 20:39:40' prior: 50889687!
from: anAccountToExtract to: anAccountToDeposit amount: anAmount
	|transference|
	
	transference := self new extractFrom: anAccountToExtract andDepositFrom: anAccountToDeposit anAmountOf: anAmount.
	Deposit register: 50 on: anAccountToDeposit.
	Withdraw register: 50 on: anAccountToExtract.
	^transference.! !

!testRun: #TransferenceTest #test01 stamp: 'D S 11/9/2020 20:39:43'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'D S 11/9/2020 20:39:43'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'D S 11/9/2020 20:39:43'!
PASSED!

!testRun: #TransferenceTest #test04 stamp: 'D S 11/9/2020 20:39:43'!
PASSED!
!Transference class methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 20:40:00' prior: 50889699!
from: anAccountToExtract to: anAccountToDeposit amount: anAmount
	|transference|
	
	transference := self new extractFrom: anAccountToExtract andDepositFrom: anAccountToDeposit anAmountOf: anAmount.
	Deposit register: 50 on: anAccountToDeposit.

	^transference.! !

!testRun: #TransferenceTest #test04 stamp: 'D S 11/9/2020 20:40:08'!
FAILURE!

!testRun: #TransferenceTest #test04 stamp: 'D S 11/9/2020 20:40:08'!
FAILURE!
!Transference class methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 20:39:40' prior: 50889722!
from: anAccountToExtract to: anAccountToDeposit amount: anAmount
	|transference|
	
	transference := self new extractFrom: anAccountToExtract andDepositFrom: anAccountToDeposit anAmountOf: anAmount.
	Deposit register: 50 on: anAccountToDeposit.
	Withdraw register: 50 on: anAccountToExtract.
	^transference.! !
!Transference class methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 20:40:22' prior: 50889739!
from: anAccountToExtract to: anAccountToDeposit amount: anAmount
	|transference|
	
	transference := self new extractFrom: anAccountToExtract andDepositFrom: anAccountToDeposit anAmountOf: anAmount.
	Withdraw register: 50 on: anAccountToExtract.
	^transference.! !

!testRun: #TransferenceTest #test01 stamp: 'D S 11/9/2020 20:40:25'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'D S 11/9/2020 20:40:25'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'D S 11/9/2020 20:40:25'!
PASSED!

!testRun: #TransferenceTest #test04 stamp: 'D S 11/9/2020 20:40:25'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 20:40:36'!
test05
	|anAccountToExtract anAccountToDeposit |

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	Transference from: anAccountToExtract to: anAccountToDeposit amount: 50.
	
	self assert: 50 equals: anAccountToDeposit balance.! !

!testRun: #TransferenceTest #test05 stamp: 'D S 11/9/2020 20:40:39'!
FAILURE!

!testRun: #TransferenceTest #test05 stamp: 'D S 11/9/2020 20:40:39'!
FAILURE!
!Transference class methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 20:40:58' prior: 50889752!
from: anAccountToExtract to: anAccountToDeposit amount: anAmount
	|transference|
	
	transference := self new extractFrom: anAccountToExtract andDepositFrom: anAccountToDeposit anAmountOf: anAmount.
	Withdraw register: 50 on: anAccountToExtract.
	Deposit register: 50 on: anAccountToDeposit.
	^transference.! !

!testRun: #TransferenceTest #test01 stamp: 'D S 11/9/2020 20:51:51'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'D S 11/9/2020 20:51:51'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'D S 11/9/2020 20:51:51'!
PASSED!

!testRun: #TransferenceTest #test04 stamp: 'D S 11/9/2020 20:51:52'!
PASSED!

!testRun: #TransferenceTest #test05 stamp: 'D S 11/9/2020 20:51:52'!
PASSED!

Object subclass: #Transference
	instanceVariableNames: 'extractFrom depositTo amountToTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Transference category: 'Portfolio-Ejercicio' stamp: 'D S 11/9/2020 20:55:37'!
Object subclass: #Transference
	instanceVariableNames: 'extractFrom depositTo amountToTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Transference subclass: #DepositEnd
	instanceVariableNames: 'extractFrom depositTo amountToTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Transference subclass: #DepositEnd
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #DepositEnd category: 'Portfolio-Ejercicio' stamp: 'D S 11/9/2020 20:55:54'!
Transference subclass: #DepositEnd
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Transference subclass: #WithdrawEnd
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #WithdrawEnd category: 'Portfolio-Ejercicio' stamp: 'D S 11/9/2020 20:56:05'!
Transference subclass: #WithdrawEnd
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Transference category: 'Portfolio-Ejercicio' stamp: 'D S 11/9/2020 20:56:46'!
Object subclass: #Transference
	instanceVariableNames: 'extractFrom depositTo amountToTransfer withdrawEnd'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Transference methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 20:56:44' prior: 50889619!
extractFrom

	^withdrawEnd extractFrom.
! !

!classDefinition: #Transference category: 'Portfolio-Ejercicio' stamp: 'D S 11/9/2020 20:56:55'!
Object subclass: #Transference
	instanceVariableNames: 'extractFrom depositTo amountToTransfer withdrawEnd depositEnd'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Transference methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 20:56:53' prior: 50889642!
depositTo

	^depositEnd depositTo.
! !

Object subclass: #Transference
	instanceVariableNames: 'depositTo amountToTransfer withdrawEnd depositEnd'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Transference category: 'Portfolio-Ejercicio' stamp: 'D S 11/9/2020 20:57:06'!
Object subclass: #Transference
	instanceVariableNames: 'depositTo amountToTransfer withdrawEnd depositEnd'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Transference subclass: #WithdrawEnd
	instanceVariableNames: 'extractFrom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #WithdrawEnd category: 'Portfolio-Ejercicio' stamp: 'D S 11/9/2020 20:57:10'!
Transference subclass: #WithdrawEnd
	instanceVariableNames: 'extractFrom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #Transference
	instanceVariableNames: ' amountToTransfer withdrawEnd depositEnd'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Transference category: 'Portfolio-Ejercicio' stamp: 'D S 11/9/2020 20:57:15'!
Object subclass: #Transference
	instanceVariableNames: 'amountToTransfer withdrawEnd depositEnd'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #Transference
	instanceVariableNames: 'amountToTransfer withdrawEnd depositEnd'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Transference category: 'Portfolio-Ejercicio' stamp: 'D S 11/9/2020 20:57:17'!
Object subclass: #Transference
	instanceVariableNames: 'amountToTransfer withdrawEnd depositEnd'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Transference subclass: #DepositEnd
	instanceVariableNames: 'depositTo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #DepositEnd category: 'Portfolio-Ejercicio' stamp: 'D S 11/9/2020 20:57:20'!
Transference subclass: #DepositEnd
	instanceVariableNames: 'depositTo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!WithdrawEnd methodsFor: 'no messages' stamp: 'D S 11/9/2020 20:58:11' overrides: 50889870!
extractFrom

	^extractFrom ! !
!WithdrawEnd methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 20:58:11' prior: 50889957 overrides: 50889870!
extractFrom

	^extractFrom! !
!DepositEnd methodsFor: 'no messages' stamp: 'D S 11/9/2020 20:58:20' overrides: 50889884!
depositTo

	depositTo.! !
!DepositEnd methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 20:58:23' prior: 50889966 overrides: 50889884!
depositTo

	^depositTo.! !
!Transference methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 20:58:54' prior: 50889632!
extractFrom: anAccountToExtract andDepositFrom: anAccountToDeposit anAmountOf: anAmount| ext |
.

	ext := anAccountToExtract.
	depositEnd := anAccountToDeposit.
	amountToTransfer := anAmount.! !
!Transference methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 20:59:14' prior: 50889975!
extractFrom: anAccountToExtract andDepositFrom: anAccountToDeposit anAmountOf: anAmount

	withdrawEnd := anAccountToExtract.
	depositEnd := anAccountToDeposit.
	amountToTransfer := anAmount.! !
!Transference methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 21:02:07' prior: 50889985!
extractFrom: anAccountToExtract andDepositFrom: anAccountToDeposit anAmountOf: anAmount

	withdrawEnd := WithdrawEnd new extractFrom: anAccountToExtract amount: anAmount.
	depositEnd := DepositEnd new depositInto: anAccountToExtract amount: anAmount.
	amountToTransfer := anAmount.! !
!WithdrawEnd methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 21:03:32'!
extractFrom: anAccount 

	extractFrom := anAccount! !
!WithdrawEnd methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 21:03:50'!
withdrawFrom: anAccount 

	extractFrom := anAccount! !

!methodRemoval: WithdrawEnd #extractFrom: stamp: 'D S 11/9/2020 21:03:50'!
extractFrom: anAccount 

	extractFrom := anAccount!
!DepositEnd methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 21:04:44'!
depositInto: anAccount

	^depositTo:= anAccount.! !
!Transference methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 21:05:45' prior: 50889995!
extractFrom: anAccountToExtract andDepositFrom: anAccountToDeposit anAmountOf: anAmount

	withdrawEnd := WithdrawEnd new withdrawFrom: anAccountToExtract. 
	depositEnd := DepositEnd new depositInto: anAccountToExtract.
	amountToTransfer := anAmount.
	
	anAccountToExtract addTransaction: withdrawEnd.
	anAccountToDeposit addTransaction: depositEnd.! !
!Transference methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 21:06:35' prior: 50890026!
extractFrom: anAccountToExtract andDepositFrom: anAccountToDeposit anAmountOf: anAmount

	withdrawEnd := WithdrawEnd new withdrawFrom: anAccountToExtract. 
	depositEnd := DepositEnd new depositInto: anAccountToExtract.
	amountToTransfer := anAmount.
	
	anAccountToExtract register: withdrawEnd.
	anAccountToDeposit register: depositEnd.! !
!Transference methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 21:07:36' prior: 50890041!
extractFrom: anAccountToExtract andDepositFrom: anAccountToDeposit anAmountOf: anAmount

	withdrawEnd := WithdrawEnd new withdrawFrom: anAccountToExtract fromTransaction: self. 
	depositEnd := DepositEnd new depositInto: anAccountToExtract fromTransaction: self.
	amountToTransfer := anAmount.
	
	anAccountToExtract register: withdrawEnd.
	anAccountToDeposit register: depositEnd.! !

!classDefinition: #DepositEnd category: 'Portfolio-Ejercicio' stamp: 'D S 11/9/2020 21:08:19'!
Transference subclass: #DepositEnd
	instanceVariableNames: 'depositTo transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!DepositEnd methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 21:08:18'!
depositInto: anAccount fromTransaction: anTransaction

	depositTo:= anAccount.
	transference := anTransaction! !

!classDefinition: #WithdrawEnd category: 'Portfolio-Ejercicio' stamp: 'D S 11/9/2020 21:08:37'!
Transference subclass: #WithdrawEnd
	instanceVariableNames: 'extractFrom transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!WithdrawEnd methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 21:08:35'!
withdrawFrom: anAccount fromTransaction:anTransaction

	extractFrom := anAccount.
	transference := anTransaction! !
!WithdrawEnd methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 21:09:07'!
netValue

	^transference netValue * (-1)! !
!WithdrawEnd methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 21:09:16' prior: 50890100!
netValue

	^transference Value * (-1)! !
!WithdrawEnd methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 21:09:18' prior: 50890105!
netValue

	^transference value * (-1)! !
!DepositEnd methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 21:09:32'!
netValue

	^transference netValue! !
!Transference methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 21:09:50' overrides: 16881508!
value

	^amountToTransfer.! !

!testRun: #TransferenceTest #test01 stamp: 'D S 11/9/2020 21:09:58'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'D S 11/9/2020 21:09:58'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'D S 11/9/2020 21:09:58'!
FAILURE!

!testRun: #TransferenceTest #test04 stamp: 'D S 11/9/2020 21:09:58'!
FAILURE!

!testRun: #TransferenceTest #test05 stamp: 'D S 11/9/2020 21:09:58'!
ERROR!

!testRun: #TransferenceTest #test03 stamp: 'D S 11/9/2020 21:10:27'!
FAILURE!

!testRun: #TransferenceTest #test03 stamp: 'D S 11/9/2020 21:10:27'!
FAILURE!
!Transference methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 21:10:45' prior: 50890055!
extractFrom: anAccountToExtract andDepositFrom: anAccountToDeposit anAmountOf: anAmount

	withdrawEnd := WithdrawEnd new withdrawFrom: anAccountToExtract fromTransaction: self. 
	depositEnd := DepositEnd new depositInto: anAccountToDeposit fromTransaction: self.
	amountToTransfer := anAmount.
	
	anAccountToExtract register: withdrawEnd.
	anAccountToDeposit register: depositEnd.! !

!testRun: #TransferenceTest #test01 stamp: 'D S 11/9/2020 21:10:48'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'D S 11/9/2020 21:10:48'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'D S 11/9/2020 21:10:48'!
PASSED!

!testRun: #TransferenceTest #test04 stamp: 'D S 11/9/2020 21:10:48'!
FAILURE!

!testRun: #TransferenceTest #test05 stamp: 'D S 11/9/2020 21:10:48'!
ERROR!

!methodRemoval: WithdrawEnd #withdrawFrom: stamp: 'D S 11/9/2020 21:11:45'!
withdrawFrom: anAccount 

	extractFrom := anAccount!

!methodRemoval: DepositEnd #depositInto: stamp: 'D S 11/9/2020 21:11:50'!
depositInto: anAccount

	^depositTo:= anAccount.!

!testRun: #TransferenceTest #test01 stamp: 'D S 11/9/2020 21:11:52'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'D S 11/9/2020 21:11:52'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'D S 11/9/2020 21:11:52'!
PASSED!

!testRun: #TransferenceTest #test04 stamp: 'D S 11/9/2020 21:11:52'!
FAILURE!

!testRun: #TransferenceTest #test05 stamp: 'D S 11/9/2020 21:11:52'!
ERROR!
!Transference class methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 21:12:32' prior: 50889792!
from: anAccountToExtract to: anAccountToDeposit amount: anAmount
	|transference|
	
	transference := self new extractFrom: anAccountToExtract andDepositFrom: anAccountToDeposit anAmountOf: anAmount.
	^transference.! !

!testRun: #TransferenceTest #test01 stamp: 'D S 11/9/2020 21:12:35'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'D S 11/9/2020 21:12:35'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'D S 11/9/2020 21:12:35'!
PASSED!

!testRun: #TransferenceTest #test04 stamp: 'D S 11/9/2020 21:12:35'!
PASSED!

!testRun: #TransferenceTest #test05 stamp: 'D S 11/9/2020 21:12:35'!
ERROR!

!testRun: #TransferenceTest #test05 stamp: 'D S 11/9/2020 21:12:35'!
ERROR!

!testRun: #TransferenceTest #test04 stamp: 'D S 11/9/2020 21:12:45'!
PASSED!

!testRun: #TransferenceTest #test05 stamp: 'D S 11/9/2020 21:12:48'!
ERROR!

!testRun: #TransferenceTest #test05 stamp: 'D S 11/9/2020 21:12:48'!
ERROR!

!testRun: #TransferenceTest #test05 stamp: 'D S 11/9/2020 21:13:00'!
ERROR!

!testRun: #TransferenceTest #test05 stamp: 'D S 11/9/2020 21:13:00'!
ERROR!
!DepositEnd methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 21:13:31' prior: 50890114!
netValue

	^transference value! !

!testRun: #TransferenceTest #test01 stamp: 'D S 11/9/2020 21:13:34'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'D S 11/9/2020 21:13:34'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'D S 11/9/2020 21:13:34'!
PASSED!

!testRun: #TransferenceTest #test04 stamp: 'D S 11/9/2020 21:13:34'!
PASSED!

!testRun: #TransferenceTest #test05 stamp: 'D S 11/9/2020 21:13:34'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 21:14:03' prior: 50889773!
test05
	|anAccountToExtract anAccountToDeposit aTransference|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	aTransference := Transference from: anAccountToExtract to: anAccountToDeposit amount: 50.
	
	self assert: 50 equals: anAccountToDeposit balance.! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 21:14:17' prior: 50890243!
test05
	|anAccountToExtract anAccountToDeposit aTransference|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	aTransference := Transference from: anAccountToExtract to: anAccountToDeposit amount: 50.
	
	self assert: 50 equals: anAccountToDeposit balance.! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 21:14:21'!
test06
	|anAccountToExtract anAccountToDeposit aTransference|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	aTransference := Transference from: anAccountToExtract to: anAccountToDeposit amount: 50.
	
	self assert: 50 equals: anAccountToDeposit balance.! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 21:14:03' prior: 50890258!
test05
	|anAccountToExtract anAccountToDeposit aTransference|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	aTransference := Transference from: anAccountToExtract to: anAccountToDeposit amount: 50.
	
	self assert: 50 equals: anAccountToDeposit balance.! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 21:14:03' prior: 50890287!
test05
	|anAccountToExtract anAccountToDeposit aTransference|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	aTransference := Transference from: anAccountToExtract to: anAccountToDeposit amount: 50.
	
	self assert: 50 equals: anAccountToDeposit balance.! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 20:40:36' prior: 50890302!
test05
	|anAccountToExtract anAccountToDeposit |

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	Transference from: anAccountToExtract to: anAccountToDeposit amount: 50.
	
	self assert: 50 equals: anAccountToDeposit balance.! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 21:16:30' prior: 50890272!
test06
	|anAccountToExtract anAccountToDeposit aTransference|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	aTransference := Transference from: anAccountToExtract to: anAccountToDeposit amount: 50.
	
	self assert:((anAccountToExtract transactions) includes: (aTransference withdrawEnd)).! !

!testRun: #TransferenceTest #test06 stamp: 'D S 11/9/2020 21:16:39'!
ERROR!

!testRun: #TransferenceTest #test06 stamp: 'D S 11/9/2020 21:16:39'!
ERROR!
!Transference methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 21:17:01'!
withdrawEnd

	^withdrawEnd .! !

!testRun: #TransferenceTest #test01 stamp: 'D S 11/9/2020 21:17:06'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'D S 11/9/2020 21:17:06'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'D S 11/9/2020 21:17:06'!
PASSED!

!testRun: #TransferenceTest #test04 stamp: 'D S 11/9/2020 21:17:06'!
PASSED!

!testRun: #TransferenceTest #test05 stamp: 'D S 11/9/2020 21:17:06'!
PASSED!

!testRun: #TransferenceTest #test06 stamp: 'D S 11/9/2020 21:17:06'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 21:17:18'!
test07
	|anAccountToExtract anAccountToDeposit aTransference|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	aTransference := Transference from: anAccountToExtract to: anAccountToDeposit amount: 50.
	
	self assert:((anAccountToDeposit transactions) includes: (aTransference depositEnd)).! !

!testRun: #TransferenceTest #test07 stamp: 'D S 11/9/2020 21:17:23'!
ERROR!

!testRun: #TransferenceTest #test07 stamp: 'D S 11/9/2020 21:17:23'!
ERROR!
!Transference methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 21:17:35'!
depositEnd

	^depositEnd .! !

!testRun: #TransferenceTest #test01 stamp: 'D S 11/9/2020 21:17:38'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'D S 11/9/2020 21:17:38'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'D S 11/9/2020 21:17:38'!
PASSED!

!testRun: #TransferenceTest #test04 stamp: 'D S 11/9/2020 21:17:38'!
PASSED!

!testRun: #TransferenceTest #test05 stamp: 'D S 11/9/2020 21:17:38'!
PASSED!

!testRun: #TransferenceTest #test06 stamp: 'D S 11/9/2020 21:17:38'!
PASSED!

!testRun: #TransferenceTest #test07 stamp: 'D S 11/9/2020 21:17:38'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 21:18:18'!
test08
	|anAccountToExtract anAccountToDeposit aTransference|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	aTransference := Transference from: anAccountToExtract to: anAccountToDeposit amount: 50.
	
	self assert:(aTransference withdrawEnd depositEnd) equals: (aTransference depositEnd).! !

!testRun: #TransferenceTest #test08 stamp: 'D S 11/9/2020 21:18:20'!
FAILURE!

!testRun: #TransferenceTest #test08 stamp: 'D S 11/9/2020 21:18:20'!
FAILURE!

!testRun: #TransferenceTest #test01 stamp: 'D S 11/9/2020 21:18:26'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'D S 11/9/2020 21:18:26'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'D S 11/9/2020 21:18:26'!
PASSED!

!testRun: #TransferenceTest #test04 stamp: 'D S 11/9/2020 21:18:26'!
PASSED!

!testRun: #TransferenceTest #test05 stamp: 'D S 11/9/2020 21:18:26'!
PASSED!

!testRun: #TransferenceTest #test06 stamp: 'D S 11/9/2020 21:18:26'!
PASSED!

!testRun: #TransferenceTest #test07 stamp: 'D S 11/9/2020 21:18:26'!
PASSED!

!testRun: #TransferenceTest #test08 stamp: 'D S 11/9/2020 21:18:26'!
FAILURE!

!testRun: #TransferenceTest #test08 stamp: 'D S 11/9/2020 21:18:26'!
FAILURE!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 21:18:46' prior: 50890411!
test08
	|anAccountToExtract anAccountToDeposit aTransference|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	aTransference := Transference from: anAccountToExtract to: anAccountToDeposit amount: 50.
	
	self assert: (aTransference depositEnd) equals: (aTransference withdrawEnd depositEnd).! !

!testRun: #TransferenceTest #test08 stamp: 'D S 11/9/2020 21:18:51'!
FAILURE!

!testRun: #TransferenceTest #test08 stamp: 'D S 11/9/2020 21:18:51'!
FAILURE!
!WithdrawEnd methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 21:19:20' overrides: 50890390!
depositEnd

	^transference depositEnd.! !

!testRun: #TransferenceTest #test08 stamp: 'D S 11/9/2020 21:19:24'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 21:19:44'!
test09
	|anAccountToExtract anAccountToDeposit aTransference|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	aTransference := Transference from: anAccountToExtract to: anAccountToDeposit amount: 50.
	
	self assert: (aTransference withdrawEnd) equals: (aTransference depositEnd withdrawEnd ).! !

!testRun: #TransferenceTest #test09 stamp: 'D S 11/9/2020 21:19:48'!
FAILURE!

!testRun: #TransferenceTest #test09 stamp: 'D S 11/9/2020 21:19:48'!
FAILURE!
!DepositEnd methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 21:20:10' overrides: 50890351!
withdrawEnd

	^transference withdrawEnd.! !

!testRun: #TransferenceTest #test01 stamp: 'D S 11/9/2020 21:20:14'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'D S 11/9/2020 21:20:14'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'D S 11/9/2020 21:20:14'!
PASSED!

!testRun: #TransferenceTest #test04 stamp: 'D S 11/9/2020 21:20:14'!
PASSED!

!testRun: #TransferenceTest #test05 stamp: 'D S 11/9/2020 21:20:14'!
PASSED!

!testRun: #TransferenceTest #test06 stamp: 'D S 11/9/2020 21:20:14'!
PASSED!

!testRun: #TransferenceTest #test07 stamp: 'D S 11/9/2020 21:20:14'!
PASSED!

!testRun: #TransferenceTest #test08 stamp: 'D S 11/9/2020 21:20:14'!
PASSED!

!testRun: #TransferenceTest #test09 stamp: 'D S 11/9/2020 21:20:14'!
PASSED!

----End fileIn of /home/dn-01/Escritorio/Ingenieria en Software I/CuisLimpio/Portfolio-Solucion.st----!

Object subclass: #Transference
	instanceVariableNames: 'amountToTransfer withdrawEnd depositEnd'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'D S 11/9/2020 21:26:49'!
Object subclass: #Transference
	instanceVariableNames: 'amountToTransfer withdrawEnd depositEnd'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transference subclass: #DepositEnd
	instanceVariableNames: 'depositTo transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #DepositEnd category: 'Portfolio-Solucion' stamp: 'D S 11/9/2020 21:26:59'!
Transference subclass: #DepositEnd
	instanceVariableNames: 'depositTo transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TestCase subclass: #TransferenceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferenceTest category: 'Portfolio-Solucion' stamp: 'D S 11/9/2020 21:27:05'!
TestCase subclass: #TransferenceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transference subclass: #WithdrawEnd
	instanceVariableNames: 'extractFrom transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #WithdrawEnd category: 'Portfolio-Solucion' stamp: 'D S 11/9/2020 21:27:11'!
Transference subclass: #WithdrawEnd
	instanceVariableNames: 'extractFrom transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 21:29:23'!
test10
	|anAccountToExtract anAccountToDeposit |

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	
	self 
		should: [Transference from: anAccountToExtract to: anAccountToDeposit amount: 0.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Transference ErrorMessageCannotBeZero equals: anError messageText.]! !

!testRun: #TransferenceTest #test10 stamp: 'D S 11/9/2020 21:29:30'!
FAILURE!

!testRun: #TransferenceTest #test10 stamp: 'D S 11/9/2020 21:29:30'!
FAILURE!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 21:29:37' prior: 50891309!
test10
	|anAccountToExtract anAccountToDeposit |

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	
	self 
		should: [Transference from: anAccountToExtract to: anAccountToDeposit amount: 0.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Transference errorMessageCannotBeZero equals: anError messageText.]! !
!Transference class methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 21:30:12'!
errorMessageCannotBeZero

	^'The amount cant be zero!!'! !

!methodRemoval: Portfolio #checkPortfolioDontHaveThePortfolio: stamp: 'D S 11/9/2020 21:31:15'!
checkPortfolioDontHaveThePortfolio: anPortfolio

	^ (portfolios includes: anPortfolio) ifTrue: [self error: self class errorDescriptionPortfolioAlreadyAdded]!

----End fileIn of /home/dn-01/Escritorio/Ingenieria en Software I/CuisLimpio/Portfolio-Solucion.st----!

----QUIT----(9 November 2020 21:31:44) CuisUniversity-4383.image priorSource: 17845152!

----STARTUP---- (9 November 2020 22:15:34) as /home/dn-01/Escritorio/Ingenieria en Software I/CuisLimpio/CuisUniversity-4383.image!


!classRemoval: #Withdraw stamp: 'D S 11/9/2020 22:16:13'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Deposit stamp: 'D S 11/9/2020 22:16:14'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountTransaction stamp: 'D S 11/9/2020 22:16:14'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccount stamp: 'D S 11/9/2020 22:16:15'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Portfolio stamp: 'D S 11/9/2020 22:16:15'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Account stamp: 'D S 11/9/2020 22:16:16'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccountTest stamp: 'D S 11/9/2020 22:16:17'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PortfolioTest stamp: 'D S 11/9/2020 22:16:17'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----End fileIn of /home/dn-01/Escritorio/Ingenieria en Software I/CuisLimpio/Portfolio-Solucion.st----!

Object subclass: #Transference
	instanceVariableNames: 'amountToTransfer withdrawEnd depositEnd'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'D S 11/9/2020 22:16:48'!
Object subclass: #Transference
	instanceVariableNames: 'amountToTransfer withdrawEnd depositEnd'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transference subclass: #WithdrawEnd
	instanceVariableNames: 'extractFrom transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #WithdrawEnd category: 'Portfolio-Solucion' stamp: 'D S 11/9/2020 22:16:54'!
Transference subclass: #WithdrawEnd
	instanceVariableNames: 'extractFrom transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TestCase subclass: #TransferenceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferenceTest category: 'Portfolio-Solucion' stamp: 'D S 11/9/2020 22:17:00'!
TestCase subclass: #TransferenceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transference subclass: #DepositEnd
	instanceVariableNames: 'depositTo transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #DepositEnd category: 'Portfolio-Solucion' stamp: 'D S 11/9/2020 22:17:08'!
Transference subclass: #DepositEnd
	instanceVariableNames: 'depositTo transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'D S 11/9/2020 22:17:52'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'D S 11/9/2020 22:17:52'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'D S 11/9/2020 22:17:52'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'D S 11/9/2020 22:17:52'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'D S 11/9/2020 22:17:52'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'D S 11/9/2020 22:17:52'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'D S 11/9/2020 22:17:52'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'D S 11/9/2020 22:17:52'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'D S 11/9/2020 22:17:52'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'D S 11/9/2020 22:17:52'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'D S 11/9/2020 22:17:52'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'D S 11/9/2020 22:17:52'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'D S 11/9/2020 22:17:52'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'D S 11/9/2020 22:17:52'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'D S 11/9/2020 22:17:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/9/2020 22:17:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/9/2020 22:17:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/9/2020 22:17:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/9/2020 22:17:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/9/2020 22:17:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/9/2020 22:17:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/9/2020 22:17:52'!
PASSED!

!testRun: #TransferenceTest #test01 stamp: 'D S 11/9/2020 22:17:52'!
ERROR!

!testRun: #TransferenceTest #test02 stamp: 'D S 11/9/2020 22:17:52'!
ERROR!

!testRun: #TransferenceTest #test03 stamp: 'D S 11/9/2020 22:17:52'!
ERROR!

!testRun: #TransferenceTest #test04 stamp: 'D S 11/9/2020 22:17:52'!
ERROR!

!testRun: #TransferenceTest #test05 stamp: 'D S 11/9/2020 22:17:52'!
ERROR!

!testRun: #TransferenceTest #test06 stamp: 'D S 11/9/2020 22:17:52'!
ERROR!

!testRun: #TransferenceTest #test07 stamp: 'D S 11/9/2020 22:17:52'!
ERROR!

!testRun: #TransferenceTest #test08 stamp: 'D S 11/9/2020 22:17:52'!
ERROR!

!testRun: #TransferenceTest #test09 stamp: 'D S 11/9/2020 22:17:52'!
ERROR!

!testRun: #TransferenceTest #test10 stamp: 'D S 11/9/2020 22:17:52'!
ERROR!

!testRun: #TransferenceTest #test01 stamp: 'D S 11/9/2020 22:18:04'!
ERROR!

!testRun: #TransferenceTest #test01 stamp: 'D S 11/9/2020 22:18:04'!
ERROR!

!testRun: #TransferenceTest #test01 stamp: 'D S 11/9/2020 22:18:21'!
ERROR!

!testRun: #TransferenceTest #test02 stamp: 'D S 11/9/2020 22:18:21'!
ERROR!

!testRun: #TransferenceTest #test03 stamp: 'D S 11/9/2020 22:18:21'!
ERROR!

!testRun: #TransferenceTest #test04 stamp: 'D S 11/9/2020 22:18:21'!
ERROR!

!testRun: #TransferenceTest #test05 stamp: 'D S 11/9/2020 22:18:21'!
ERROR!

!testRun: #TransferenceTest #test06 stamp: 'D S 11/9/2020 22:18:21'!
ERROR!

!testRun: #TransferenceTest #test07 stamp: 'D S 11/9/2020 22:18:21'!
ERROR!

!testRun: #TransferenceTest #test08 stamp: 'D S 11/9/2020 22:18:21'!
ERROR!

!testRun: #TransferenceTest #test09 stamp: 'D S 11/9/2020 22:18:21'!
ERROR!

!testRun: #TransferenceTest #test10 stamp: 'D S 11/9/2020 22:18:21'!
ERROR!

!testRun: #TransferenceTest #test01 stamp: 'D S 11/9/2020 22:18:35'!
ERROR!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'D S 11/9/2020 22:20:41' prior: 50892482!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/9/2020 22:20:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/9/2020 22:20:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/9/2020 22:20:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/9/2020 22:20:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/9/2020 22:20:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/9/2020 22:20:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/9/2020 22:20:46'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 22:20:57' prior: 50889668!
test04
	|anAccountToExtract anAccountToDeposit |

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	Transference from: anAccountToExtract to: anAccountToDeposit amount: 50.
	
	self assert: 50 equals: anAccountToExtract balance.! !

!testRun: #TransferenceTest #test04 stamp: 'D S 11/9/2020 22:20:59'!
ERROR!

!testRun: #TransferenceTest #test04 stamp: 'D S 11/9/2020 22:20:59'!
ERROR!

!testRun: #TransferenceTest #test01 stamp: 'D S 11/9/2020 22:21:12'!
ERROR!

!testRun: #TransferenceTest #test01 stamp: 'D S 11/9/2020 22:21:12'!
ERROR!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 22:21:22' prior: 50889567!
test01
	|anAccountToExtract anAccountToDeposit anTransaction|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	anTransaction := Transference from: anAccountToExtract to: anAccountToDeposit amount: 100.
	
	self assert: 100 equals: anTransaction amountToTransfer.! !

!testRun: #TransferenceTest #test01 stamp: 'D S 11/9/2020 22:21:24'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 22:21:32' prior: 50889531!
test02
	|anAccountToExtract anAccountToDeposit anTransaction|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	anTransaction := Transference from: anAccountToExtract to: anAccountToDeposit amount: 100.
	
	self assert: (anAccountToExtract = (anTransaction extractFrom)).! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 22:21:40' prior: 50889551!
test03
	|anAccountToExtract anAccountToDeposit anTransaction|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	anTransaction := Transference from: anAccountToExtract to: anAccountToDeposit amount: 100.
	
	self assert: (anAccountToDeposit = (anTransaction depositTo)).! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 22:21:48' prior: 50893110!
test04
	|anAccountToExtract anAccountToDeposit |

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	Transference from: anAccountToExtract to: anAccountToDeposit amount: 50.
	
	self assert: 50 equals: anAccountToExtract balance.! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 22:22:00' prior: 50890317!
test05
	|anAccountToExtract anAccountToDeposit |

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	Transference from: anAccountToExtract to: anAccountToDeposit amount: 50.
	
	self assert: 50 equals: anAccountToDeposit balance.! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 22:22:09' prior: 50890331!
test06
	|anAccountToExtract anAccountToDeposit aTransference|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	aTransference := Transference from: anAccountToExtract to: anAccountToDeposit amount: 50.
	
	self assert:((anAccountToExtract transactions) includes: (aTransference withdrawEnd)).! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 22:22:17' prior: 50890370!
test07
	|anAccountToExtract anAccountToDeposit aTransference|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	aTransference := Transference from: anAccountToExtract to: anAccountToDeposit amount: 50.
	
	self assert:((anAccountToDeposit transactions) includes: (aTransference depositEnd)).! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 22:22:25' prior: 50890454!
test08
	|anAccountToExtract anAccountToDeposit aTransference|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	aTransference := Transference from: anAccountToExtract to: anAccountToDeposit amount: 50.
	
	self assert: (aTransference depositEnd) equals: (aTransference withdrawEnd depositEnd).! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 22:22:29' prior: 50890482!
test09
	|anAccountToExtract anAccountToDeposit aTransference|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	aTransference := Transference from: anAccountToExtract to: anAccountToDeposit amount: 50.
	
	self assert: (aTransference withdrawEnd) equals: (aTransference depositEnd withdrawEnd ).! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 22:22:32' prior: 50893252!
test09
	|anAccountToExtract anAccountToDeposit aTransference|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	aTransference := Transference from: anAccountToExtract to: anAccountToDeposit amount: 50.
	
	self assert: (aTransference withdrawEnd) equals: (aTransference depositEnd withdrawEnd ).! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 22:22:41' prior: 50891331!
test10
	|anAccountToExtract anAccountToDeposit |

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	
	self 
		should: [Transference from: anAccountToExtract to: anAccountToDeposit amount: 0.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Transference errorMessageCannotBeZero equals: anError messageText.]! !

!testRun: #TransferenceTest #test01 stamp: 'D S 11/9/2020 22:22:57'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'D S 11/9/2020 22:22:57'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'D S 11/9/2020 22:22:57'!
PASSED!

!testRun: #TransferenceTest #test04 stamp: 'D S 11/9/2020 22:22:57'!
ERROR!

!testRun: #TransferenceTest #test05 stamp: 'D S 11/9/2020 22:22:57'!
ERROR!

!testRun: #TransferenceTest #test06 stamp: 'D S 11/9/2020 22:22:57'!
PASSED!

!testRun: #TransferenceTest #test07 stamp: 'D S 11/9/2020 22:22:57'!
PASSED!

!testRun: #TransferenceTest #test08 stamp: 'D S 11/9/2020 22:22:57'!
PASSED!

!testRun: #TransferenceTest #test09 stamp: 'D S 11/9/2020 22:22:57'!
PASSED!

!testRun: #TransferenceTest #test10 stamp: 'D S 11/9/2020 22:22:57'!
FAILURE!

!testRun: #TransferenceTest #test04 stamp: 'D S 11/9/2020 22:23:34'!
ERROR!

!testRun: #TransferenceTest #test04 stamp: 'D S 11/9/2020 22:23:34'!
ERROR!
!DepositEnd methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 22:24:28'!
affectBalance

	^transference value! !

!methodRemoval: DepositEnd #netValue stamp: 'D S 11/9/2020 22:24:28'!
netValue

	^transference value!
!WithdrawEnd methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 22:24:37'!
affectBalance

	^transference value * (-1)! !

!methodRemoval: WithdrawEnd #netValue stamp: 'D S 11/9/2020 22:24:37'!
netValue

	^transference value * (-1)!

!testRun: #TransferenceTest #test01 stamp: 'D S 11/9/2020 22:24:41'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'D S 11/9/2020 22:24:41'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'D S 11/9/2020 22:24:41'!
PASSED!

!testRun: #TransferenceTest #test04 stamp: 'D S 11/9/2020 22:24:41'!
ERROR!

!testRun: #TransferenceTest #test05 stamp: 'D S 11/9/2020 22:24:41'!
ERROR!

!testRun: #TransferenceTest #test06 stamp: 'D S 11/9/2020 22:24:41'!
PASSED!

!testRun: #TransferenceTest #test07 stamp: 'D S 11/9/2020 22:24:41'!
PASSED!

!testRun: #TransferenceTest #test08 stamp: 'D S 11/9/2020 22:24:41'!
PASSED!

!testRun: #TransferenceTest #test09 stamp: 'D S 11/9/2020 22:24:41'!
PASSED!

!testRun: #TransferenceTest #test10 stamp: 'D S 11/9/2020 22:24:41'!
FAILURE!
!WithdrawEnd methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 22:25:33'!
affectBalance: aBalance

	^transference value * (-1)! !

!methodRemoval: WithdrawEnd #affectBalance stamp: 'D S 11/9/2020 22:25:33'!
affectBalance

	^transference value * (-1)!
!WithdrawEnd methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 22:25:49' prior: 50893368!
affectBalance: aBalance

	^aBalance - transference value! !
!DepositEnd methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 22:25:57'!
affectBalance: aBalance

	^aBalance + transference value! !

!methodRemoval: DepositEnd #affectBalance stamp: 'D S 11/9/2020 22:26:03'!
affectBalance

	^transference value!

!testRun: #TransferenceTest #test01 stamp: 'D S 11/9/2020 22:26:08'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'D S 11/9/2020 22:26:08'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'D S 11/9/2020 22:26:08'!
PASSED!

!testRun: #TransferenceTest #test04 stamp: 'D S 11/9/2020 22:26:08'!
PASSED!

!testRun: #TransferenceTest #test05 stamp: 'D S 11/9/2020 22:26:08'!
PASSED!

!testRun: #TransferenceTest #test06 stamp: 'D S 11/9/2020 22:26:08'!
PASSED!

!testRun: #TransferenceTest #test07 stamp: 'D S 11/9/2020 22:26:08'!
PASSED!

!testRun: #TransferenceTest #test08 stamp: 'D S 11/9/2020 22:26:08'!
PASSED!

!testRun: #TransferenceTest #test09 stamp: 'D S 11/9/2020 22:26:08'!
PASSED!

!testRun: #TransferenceTest #test10 stamp: 'D S 11/9/2020 22:26:08'!
FAILURE!

!testRun: #TransferenceTest #test10 stamp: 'D S 11/9/2020 22:26:08'!
FAILURE!

!testRun: #TransferenceTest #test10 stamp: 'D S 11/9/2020 22:26:35'!
FAILURE!

!testRun: #TransferenceTest #test10 stamp: 'D S 11/9/2020 22:26:35'!
FAILURE!
!Transference methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 22:27:03' prior: 50890141!
extractFrom: anAccountToExtract andDepositFrom: anAccountToDeposit anAmountOf: anAmount

	(anAmount = 0) ifTrue:[self error: self class errorMessageCannotBeZero ].
	withdrawEnd := WithdrawEnd new withdrawFrom: anAccountToExtract fromTransaction: self. 
	depositEnd := DepositEnd new depositInto: anAccountToDeposit fromTransaction: self.
	amountToTransfer := anAmount.
	
	anAccountToExtract register: withdrawEnd.
	anAccountToDeposit register: depositEnd.! !

!testRun: #TransferenceTest #test01 stamp: 'D S 11/9/2020 22:27:09'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'D S 11/9/2020 22:27:09'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'D S 11/9/2020 22:27:09'!
PASSED!

!testRun: #TransferenceTest #test04 stamp: 'D S 11/9/2020 22:27:09'!
PASSED!

!testRun: #TransferenceTest #test05 stamp: 'D S 11/9/2020 22:27:09'!
PASSED!

!testRun: #TransferenceTest #test06 stamp: 'D S 11/9/2020 22:27:09'!
PASSED!

!testRun: #TransferenceTest #test07 stamp: 'D S 11/9/2020 22:27:09'!
PASSED!

!testRun: #TransferenceTest #test08 stamp: 'D S 11/9/2020 22:27:09'!
PASSED!

!testRun: #TransferenceTest #test09 stamp: 'D S 11/9/2020 22:27:09'!
PASSED!

!testRun: #TransferenceTest #test10 stamp: 'D S 11/9/2020 22:27:09'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 22:27:34'!
test11
	|anAccountToExtract anAccountToDeposit |

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	
	self 
		should: [Transference from: anAccountToExtract to: anAccountToDeposit amount: -50.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Transference errorMessageCannotBeNegative equals: anError messageText.]! !
!Transference class methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 22:27:57'!
errorMessageCannotBeNegative

	^'The amount cannot be negative!!'! !
!Transference methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 22:28:20' prior: 50893423!
extractFrom: anAccountToExtract andDepositFrom: anAccountToDeposit anAmountOf: anAmount

	(anAmount = 0) ifTrue:[self error: self class errorMessageCannotBeZero ].
	(anAmount < 0) ifTrue:[self error: self class errorMessageCannotBeNegative].
	withdrawEnd := WithdrawEnd new withdrawFrom: anAccountToExtract fromTransaction: self. 
	depositEnd := DepositEnd new depositInto: anAccountToDeposit fromTransaction: self.
	amountToTransfer := anAmount.
	
	anAccountToExtract register: withdrawEnd.
	anAccountToDeposit register: depositEnd.! !

!testRun: #TransferenceTest #test01 stamp: 'D S 11/9/2020 22:28:23'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'D S 11/9/2020 22:28:23'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'D S 11/9/2020 22:28:23'!
PASSED!

!testRun: #TransferenceTest #test04 stamp: 'D S 11/9/2020 22:28:23'!
PASSED!

!testRun: #TransferenceTest #test05 stamp: 'D S 11/9/2020 22:28:23'!
PASSED!

!testRun: #TransferenceTest #test06 stamp: 'D S 11/9/2020 22:28:23'!
PASSED!

!testRun: #TransferenceTest #test07 stamp: 'D S 11/9/2020 22:28:23'!
PASSED!

!testRun: #TransferenceTest #test08 stamp: 'D S 11/9/2020 22:28:23'!
PASSED!

!testRun: #TransferenceTest #test09 stamp: 'D S 11/9/2020 22:28:23'!
PASSED!

!testRun: #TransferenceTest #test10 stamp: 'D S 11/9/2020 22:28:23'!
PASSED!

!testRun: #TransferenceTest #test11 stamp: 'D S 11/9/2020 22:28:23'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 22:29:16'!
test12
	|anAccount |

	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	
	self 
		should: [Transference from: anAccount to: anAccount amount: 50.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Transference errorMessageCannotTransferToSelf equals: anError messageText.]! !

!testRun: #TransferenceTest #test01 stamp: 'D S 11/9/2020 22:29:31'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'D S 11/9/2020 22:29:31'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'D S 11/9/2020 22:29:31'!
PASSED!

!testRun: #TransferenceTest #test04 stamp: 'D S 11/9/2020 22:29:31'!
PASSED!

!testRun: #TransferenceTest #test05 stamp: 'D S 11/9/2020 22:29:31'!
PASSED!

!testRun: #TransferenceTest #test06 stamp: 'D S 11/9/2020 22:29:31'!
PASSED!

!testRun: #TransferenceTest #test07 stamp: 'D S 11/9/2020 22:29:31'!
PASSED!

!testRun: #TransferenceTest #test08 stamp: 'D S 11/9/2020 22:29:31'!
PASSED!

!testRun: #TransferenceTest #test09 stamp: 'D S 11/9/2020 22:29:31'!
PASSED!

!testRun: #TransferenceTest #test10 stamp: 'D S 11/9/2020 22:29:31'!
PASSED!

!testRun: #TransferenceTest #test11 stamp: 'D S 11/9/2020 22:29:31'!
PASSED!

!testRun: #TransferenceTest #test12 stamp: 'D S 11/9/2020 22:29:31'!
FAILURE!

!testRun: #TransferenceTest #test12 stamp: 'D S 11/9/2020 22:29:31'!
FAILURE!
!Transference class methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 22:32:28'!
errorMessageCannotTransferToSelf

	^'No se puede depositar dinero en la que se extrae'! !

!testRun: #TransferenceTest #test01 stamp: 'D S 11/9/2020 22:32:37'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'D S 11/9/2020 22:32:37'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'D S 11/9/2020 22:32:37'!
PASSED!

!testRun: #TransferenceTest #test04 stamp: 'D S 11/9/2020 22:32:37'!
PASSED!

!testRun: #TransferenceTest #test05 stamp: 'D S 11/9/2020 22:32:37'!
PASSED!

!testRun: #TransferenceTest #test06 stamp: 'D S 11/9/2020 22:32:37'!
PASSED!

!testRun: #TransferenceTest #test07 stamp: 'D S 11/9/2020 22:32:37'!
PASSED!

!testRun: #TransferenceTest #test08 stamp: 'D S 11/9/2020 22:32:37'!
PASSED!

!testRun: #TransferenceTest #test09 stamp: 'D S 11/9/2020 22:32:37'!
PASSED!

!testRun: #TransferenceTest #test10 stamp: 'D S 11/9/2020 22:32:37'!
PASSED!

!testRun: #TransferenceTest #test11 stamp: 'D S 11/9/2020 22:32:37'!
PASSED!

!testRun: #TransferenceTest #test12 stamp: 'D S 11/9/2020 22:32:37'!
FAILURE!

!testRun: #TransferenceTest #test12 stamp: 'D S 11/9/2020 22:32:37'!
FAILURE!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 22:32:57' prior: 50893534!
test12
	|anAccount |

	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	
	self 
		should: [Transference from: anAccount to: anAccount amount: 50.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Transference errorMessageCannotTransferToSelf equals: anError messageText.]! !

!testRun: #TransferenceTest #test01 stamp: 'D S 11/9/2020 22:33:01'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'D S 11/9/2020 22:33:01'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'D S 11/9/2020 22:33:01'!
PASSED!

!testRun: #TransferenceTest #test04 stamp: 'D S 11/9/2020 22:33:01'!
PASSED!

!testRun: #TransferenceTest #test05 stamp: 'D S 11/9/2020 22:33:01'!
PASSED!

!testRun: #TransferenceTest #test06 stamp: 'D S 11/9/2020 22:33:01'!
PASSED!

!testRun: #TransferenceTest #test07 stamp: 'D S 11/9/2020 22:33:01'!
PASSED!

!testRun: #TransferenceTest #test08 stamp: 'D S 11/9/2020 22:33:01'!
PASSED!

!testRun: #TransferenceTest #test09 stamp: 'D S 11/9/2020 22:33:01'!
PASSED!

!testRun: #TransferenceTest #test10 stamp: 'D S 11/9/2020 22:33:01'!
PASSED!

!testRun: #TransferenceTest #test11 stamp: 'D S 11/9/2020 22:33:01'!
PASSED!

!testRun: #TransferenceTest #test12 stamp: 'D S 11/9/2020 22:33:01'!
FAILURE!

!testRun: #TransferenceTest #test12 stamp: 'D S 11/9/2020 22:33:01'!
FAILURE!
!Transference methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 22:33:40' prior: 50893487!
extractFrom: anAccountToExtract andDepositFrom: anAccountToDeposit anAmountOf: anAmount

	(anAmount = 0) ifTrue:[self error: self class errorMessageCannotBeZero ].
	(anAmount < 0) ifTrue:[self error: self class errorMessageCannotBeNegative].
	(anAccountToExtract = anAccountToDeposit) ifTrue:[self error: self class errorMessageCannotTransferToSelf ].
	withdrawEnd := WithdrawEnd new withdrawFrom: anAccountToExtract fromTransaction: self. 
	depositEnd := DepositEnd new depositInto: anAccountToDeposit fromTransaction: self.
	amountToTransfer := anAmount.
	
	anAccountToExtract register: withdrawEnd.
	anAccountToDeposit register: depositEnd.! !

!testRun: #TransferenceTest #test01 stamp: 'D S 11/9/2020 22:33:44'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'D S 11/9/2020 22:33:44'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'D S 11/9/2020 22:33:44'!
PASSED!

!testRun: #TransferenceTest #test04 stamp: 'D S 11/9/2020 22:33:44'!
PASSED!

!testRun: #TransferenceTest #test05 stamp: 'D S 11/9/2020 22:33:44'!
PASSED!

!testRun: #TransferenceTest #test06 stamp: 'D S 11/9/2020 22:33:44'!
PASSED!

!testRun: #TransferenceTest #test07 stamp: 'D S 11/9/2020 22:33:44'!
PASSED!

!testRun: #TransferenceTest #test08 stamp: 'D S 11/9/2020 22:33:44'!
PASSED!

!testRun: #TransferenceTest #test09 stamp: 'D S 11/9/2020 22:33:44'!
PASSED!

!testRun: #TransferenceTest #test10 stamp: 'D S 11/9/2020 22:33:44'!
PASSED!

!testRun: #TransferenceTest #test11 stamp: 'D S 11/9/2020 22:33:44'!
PASSED!

!testRun: #TransferenceTest #test12 stamp: 'D S 11/9/2020 22:33:44'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 22:34:01' prior: 50893133!
test01
	|anAccountToExtract anAccountToDeposit anTransaction|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	anTransaction := Transference from: anAccountToExtract to: anAccountToDeposit amount: 100.
	
	self assert: 100 equals: anTransaction amountToTransfer.
	self assert: (anAccountToExtract = (anTransaction extractFrom)).! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 22:34:12' prior: 50893715!
test01
	|anAccountToExtract anAccountToDeposit anTransaction|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	anTransaction := Transference from: anAccountToExtract to: anAccountToDeposit amount: 100.
	
	self assert: 100 equals: anTransaction amountToTransfer.
	self assert: (anAccountToExtract = (anTransaction extractFrom)).
	self assert: (anAccountToDeposit = (anTransaction depositTo)).	! !

!methodRemoval: TransferenceTest #test02 stamp: 'D S 11/9/2020 22:34:37'!
test02
	|anAccountToExtract anAccountToDeposit anTransaction|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	anTransaction := Transference from: anAccountToExtract to: anAccountToDeposit amount: 100.
	
	self assert: (anAccountToExtract = (anTransaction extractFrom)).!

!methodRemoval: TransferenceTest #test03 stamp: 'D S 11/9/2020 22:34:41'!
test03
	|anAccountToExtract anAccountToDeposit anTransaction|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	anTransaction := Transference from: anAccountToExtract to: anAccountToDeposit amount: 100.
	
	self assert: (anAccountToDeposit = (anTransaction depositTo)).!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 22:34:53' prior: 50893176!
test04
	|anAccountToExtract anAccountToDeposit |

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	Transference from: anAccountToExtract to: anAccountToDeposit amount: 50.
	
	self assert: 50 equals: anAccountToExtract balance.
	self assert: 50 equals: anAccountToDeposit balance.	! !

!methodRemoval: TransferenceTest #test05 stamp: 'D S 11/9/2020 22:34:57'!
test05
	|anAccountToExtract anAccountToDeposit |

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	Transference from: anAccountToExtract to: anAccountToDeposit amount: 50.
	
	self assert: 50 equals: anAccountToDeposit balance.!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 22:35:27' prior: 50893204!
test06
	|anAccountToExtract anAccountToDeposit aTransference|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	aTransference := Transference from: anAccountToExtract to: anAccountToDeposit amount: 50.
	
	self assert:((anAccountToExtract transactions) includes: (aTransference withdrawEnd)).	
	self assert:((anAccountToDeposit transactions) includes: (aTransference depositEnd)).! !

!methodRemoval: TransferenceTest #test07 stamp: 'D S 11/9/2020 22:35:30'!
test07
	|anAccountToExtract anAccountToDeposit aTransference|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	aTransference := Transference from: anAccountToExtract to: anAccountToDeposit amount: 50.
	
	self assert:((anAccountToDeposit transactions) includes: (aTransference depositEnd)).!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 22:36:00' prior: 50893236!
test08
	|anAccountToExtract anAccountToDeposit aTransference|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	aTransference := Transference from: anAccountToExtract to: anAccountToDeposit amount: 50.
	
	self assert: (aTransference depositEnd) equals: (aTransference withdrawEnd depositEnd).
	self assert: (aTransference withdrawEnd) equals: (aTransference depositEnd withdrawEnd ).	! !

!methodRemoval: TransferenceTest #test09 stamp: 'D S 11/9/2020 22:36:04'!
test09
	|anAccountToExtract anAccountToDeposit aTransference|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	aTransference := Transference from: anAccountToExtract to: anAccountToDeposit amount: 50.
	
	self assert: (aTransference withdrawEnd) equals: (aTransference depositEnd withdrawEnd ).!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 22:37:20'!
test01TransactionInitializeCorrectly
	|anAccountToExtract anAccountToDeposit anTransaction|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	anTransaction := Transference from: anAccountToExtract to: anAccountToDeposit amount: 100.
	
	self assert: 100 equals: anTransaction amountToTransfer.
	self assert: (anAccountToExtract = (anTransaction extractFrom)).
	self assert: (anAccountToDeposit = (anTransaction depositTo)).	! !

!methodRemoval: TransferenceTest #test01 stamp: 'D S 11/9/2020 22:37:20'!
test01
	|anAccountToExtract anAccountToDeposit anTransaction|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	anTransaction := Transference from: anAccountToExtract to: anAccountToDeposit amount: 100.
	
	self assert: 100 equals: anTransaction amountToTransfer.
	self assert: (anAccountToExtract = (anTransaction extractFrom)).
	self assert: (anAccountToDeposit = (anTransaction depositTo)).	!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 22:37:33'!
test02TransactionAffectsCorrectly
	|anAccountToExtract anAccountToDeposit |

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	Transference from: anAccountToExtract to: anAccountToDeposit amount: 50.
	
	self assert: 50 equals: anAccountToExtract balance.
	self assert: 50 equals: anAccountToDeposit balance.	! !

!methodRemoval: TransferenceTest #test04 stamp: 'D S 11/9/2020 22:37:33'!
test04
	|anAccountToExtract anAccountToDeposit |

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	Transference from: anAccountToExtract to: anAccountToDeposit amount: 50.
	
	self assert: 50 equals: anAccountToExtract balance.
	self assert: 50 equals: anAccountToDeposit balance.	!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 22:45:01'!
test03EachEndOfTransferenceAppearsCorrectlyInAccounts
	|anAccountToExtract anAccountToDeposit aTransference|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	aTransference := Transference from: anAccountToExtract to: anAccountToDeposit amount: 50.
	
	self assert:((anAccountToExtract transactions) includes: (aTransference withdrawEnd)).	
	self assert:((anAccountToDeposit transactions) includes: (aTransference depositEnd)).! !

!methodRemoval: TransferenceTest #test06 stamp: 'D S 11/9/2020 22:45:01'!
test06
	|anAccountToExtract anAccountToDeposit aTransference|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	aTransference := Transference from: anAccountToExtract to: anAccountToDeposit amount: 50.
	
	self assert:((anAccountToExtract transactions) includes: (aTransference withdrawEnd)).	
	self assert:((anAccountToDeposit transactions) includes: (aTransference depositEnd)).!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 22:45:31'!
test04FromOneTransferenceEndCanReachToTheAnother
	|anAccountToExtract anAccountToDeposit aTransference|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	aTransference := Transference from: anAccountToExtract to: anAccountToDeposit amount: 50.
	
	self assert: (aTransference depositEnd) equals: (aTransference withdrawEnd depositEnd).
	self assert: (aTransference withdrawEnd) equals: (aTransference depositEnd withdrawEnd ).	! !

!methodRemoval: TransferenceTest #test08 stamp: 'D S 11/9/2020 22:45:31'!
test08
	|anAccountToExtract anAccountToDeposit aTransference|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	aTransference := Transference from: anAccountToExtract to: anAccountToDeposit amount: 50.
	
	self assert: (aTransference depositEnd) equals: (aTransference withdrawEnd depositEnd).
	self assert: (aTransference withdrawEnd) equals: (aTransference depositEnd withdrawEnd ).	!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 22:46:16'!
test05RaiseErrorWhenAmountToTransferIsZERO
	|anAccountToExtract anAccountToDeposit |

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	
	self 
		should: [Transference from: anAccountToExtract to: anAccountToDeposit amount: 0.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Transference errorMessageCannotBeZero equals: anError messageText.]! !

!methodRemoval: TransferenceTest #test10 stamp: 'D S 11/9/2020 22:46:16'!
test10
	|anAccountToExtract anAccountToDeposit |

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	
	self 
		should: [Transference from: anAccountToExtract to: anAccountToDeposit amount: 0.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Transference errorMessageCannotBeZero equals: anError messageText.]!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 22:46:34'!
test06RaiseErrorWhenAmountToTransferIsNEGATIVE
	|anAccountToExtract anAccountToDeposit |

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	
	self 
		should: [Transference from: anAccountToExtract to: anAccountToDeposit amount: -50.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Transference errorMessageCannotBeNegative equals: anError messageText.]! !

!methodRemoval: TransferenceTest #test11 stamp: 'D S 11/9/2020 22:46:34'!
test11
	|anAccountToExtract anAccountToDeposit |

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	
	self 
		should: [Transference from: anAccountToExtract to: anAccountToDeposit amount: -50.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Transference errorMessageCannotBeNegative equals: anError messageText.]!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/9/2020 22:47:45'!
test07RaiseErrorWhenAccountToTransferIsEqualToAccountToExtract
	|anAccount |

	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	
	self 
		should: [Transference from: anAccount to: anAccount amount: 50.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Transference errorMessageCannotTransferToSelf equals: anError messageText.]! !

!methodRemoval: TransferenceTest #test12 stamp: 'D S 11/9/2020 22:47:45'!
test12
	|anAccount |

	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	
	self 
		should: [Transference from: anAccount to: anAccount amount: 50.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Transference errorMessageCannotTransferToSelf equals: anError messageText.]!

----SNAPSHOT----(9 November 2020 22:50:52) CuisUniversity-4383.image priorSource: 17934459!

----STARTUP---- (10 November 2020 17:43:26) as /home/dn-01/Escritorio/Ingenieria en Software I/CuisLimpio/CuisUniversity-4383.image!

!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/10/2020 18:37:27'!
test08
	| anAccount |
	anAccount := ReceptiveAccount.
	
	self assert: (anAccount accountSummary includes: 'balance = 0').! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 18:38:16'!
accountSummary

	^'balance = 0'! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 18:38:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 18:38:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 18:38:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 18:38:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 18:38:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 18:38:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 18:38:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'D S 11/10/2020 18:38:45'!
ERROR!

!testRun: #ReceptiveAccountTest #test08 stamp: 'D S 11/10/2020 18:38:45'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 18:38:59'!
acountSummary

	^'balance = 0'! !

!methodRemoval: ReceptiveAccount #acountSummary stamp: 'D S 11/10/2020 18:39:02'!
acountSummary

	^'balance = 0'!
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/10/2020 18:39:19' prior: 50894101!
test08
	| anAccount |
	anAccount := ReceptiveAccount new.
	
	self assert: (anAccount accountSummary includes: 'balance = 0').! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 18:39:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 18:39:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 18:39:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 18:39:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 18:39:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 18:39:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 18:39:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'D S 11/10/2020 18:39:22'!
FAILURE!

!testRun: #ReceptiveAccountTest #test08 stamp: 'D S 11/10/2020 18:39:22'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 18:39:59' prior: 50894108!
accountSummary

	^ OrderedCollection with: 'balance = 0'! !

!testRun: #ReceptiveAccountTest #test08 stamp: 'D S 11/10/2020 18:40:05'!
PASSED!
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/10/2020 18:42:09'!
test09
	| anAccount |
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	
	self assert: (anAccount accountSummary includes: 'Deposit por 100').! !

!testRun: #ReceptiveAccountTest #test09 stamp: 'D S 11/10/2020 18:42:14'!
FAILURE!

!testRun: #ReceptiveAccountTest #test09 stamp: 'D S 11/10/2020 18:42:14'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 18:42:29' prior: 50894191!
accountSummary

	^ OrderedCollection with: 'Deposit por 100' with: 'balance = 0'! !

!testRun: #ReceptiveAccountTest #test08 stamp: 'D S 11/10/2020 18:42:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'D S 11/10/2020 18:42:37'!
PASSED!
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/10/2020 18:43:09'!
test10
	| anAccount |
	anAccount := ReceptiveAccount new.
	Deposit register: 200 on: anAccount.
	
	self assert: (anAccount accountSummary includes: 'Deposit por 200').! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 18:43:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 18:43:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 18:43:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 18:43:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 18:43:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 18:43:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 18:43:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'D S 11/10/2020 18:43:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'D S 11/10/2020 18:43:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'D S 11/10/2020 18:43:14'!
FAILURE!

!testRun: #ReceptiveAccountTest #test10 stamp: 'D S 11/10/2020 18:43:14'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 18:45:25' prior: 50894213!
accountSummary
	|report|
	
	report:= OrderedCollection new.
	self transactions do:[: aTransaction |report add: 'Deposit por ', aTransaction value].
	report add: 'balance = 0'.
	^ report! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 18:45:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 18:45:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 18:45:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 18:45:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 18:45:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 18:45:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 18:45:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'D S 11/10/2020 18:45:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'D S 11/10/2020 18:45:28'!
ERROR!

!testRun: #ReceptiveAccountTest #test10 stamp: 'D S 11/10/2020 18:45:28'!
ERROR!

!testRun: #ReceptiveAccountTest #test09 stamp: 'D S 11/10/2020 18:45:40'!
ERROR!

!testRun: #ReceptiveAccountTest #test09 stamp: 'D S 11/10/2020 18:45:40'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 18:46:34' prior: 50894270!
accountSummary
	|report|
	
	report:= OrderedCollection new.
	self transactions do:[: aTransaction |report add: 'Deposit por ', aTransaction value asString].
	report add: 'balance = 0'.
	^ report! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 18:46:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 18:46:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 18:46:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 18:46:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 18:46:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 18:46:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 18:46:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'D S 11/10/2020 18:46:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'D S 11/10/2020 18:46:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'D S 11/10/2020 18:46:38'!
PASSED!
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/10/2020 18:46:52'!
test11
	| anAccount |
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	
	self assert: (anAccount accountSummary includes: 'balance = 100').! !

!testRun: #ReceptiveAccountTest #test11 stamp: 'D S 11/10/2020 18:46:55'!
FAILURE!

!testRun: #ReceptiveAccountTest #test11 stamp: 'D S 11/10/2020 18:46:55'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 18:47:12' prior: 50894319!
accountSummary
	|report|
	
	report:= OrderedCollection new.
	self transactions do:[: aTransaction |report add: 'Deposit por ', aTransaction value asString].
	report add: 'balance = ', self balance asString.
	^ report! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 18:47:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 18:47:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 18:47:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 18:47:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 18:47:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 18:47:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 18:47:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'D S 11/10/2020 18:47:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'D S 11/10/2020 18:47:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'D S 11/10/2020 18:47:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'D S 11/10/2020 18:47:25'!
PASSED!
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/10/2020 18:50:52'!
test12
	| anAccount |
	anAccount := ReceptiveAccount new.
	Withdraw register: 50 on: anAccount.

	self assert: (anAccount accountSummary includes: 'Extraccion por 50').! !

!testRun: #ReceptiveAccountTest #test12 stamp: 'D S 11/10/2020 18:50:55'!
FAILURE!

!testRun: #ReceptiveAccountTest #test12 stamp: 'D S 11/10/2020 18:50:55'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 18:51:54' prior: 50894377!
accountSummary
	|report|
	
	report:= OrderedCollection new.
	self transactions do:[: aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue:[report add: 'Deposit por ', aTransaction value asString]].
	report add: 'balance = ', self balance asString.
	^ report! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 18:52:35' prior: 50894438!
accountSummary
	|report|
	
	report:= OrderedCollection new.
	self transactions do:[: aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue:[report add: 'Deposit por ', aTransaction value asString]
		ifFalse: [report add: 'Extraccion por ', aTransaction value asString]].
	report add: 'balance = ', self balance asString.
	^ report! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 18:52:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 18:52:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 18:52:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 18:52:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 18:52:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 18:52:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 18:52:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'D S 11/10/2020 18:52:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'D S 11/10/2020 18:52:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'D S 11/10/2020 18:52:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'D S 11/10/2020 18:52:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'D S 11/10/2020 18:52:39'!
PASSED!
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/10/2020 18:53:49' prior: 50894424!
test12
	| anAccount |
	anAccount := ReceptiveAccount new.
	Withdraw register: 50 on: anAccount.
	Withdraw register: 100 on: anAccount.

	self assert: (anAccount accountSummary includes: 'Extraccion por 100').
	self assert: (anAccount accountSummary includes: 'Extraccion por 50').! !

!testRun: #ReceptiveAccountTest #test12 stamp: 'D S 11/10/2020 18:53:52'!
PASSED!
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/10/2020 18:50:52' prior: 50894504!
test12
	| anAccount |
	anAccount := ReceptiveAccount new.
	Withdraw register: 50 on: anAccount.

	self assert: (anAccount accountSummary includes: 'Extraccion por 50').! !
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/10/2020 18:55:18' prior: 50894519!
test12
	| anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anAccount to: anotherAccount amount: 100.

	self assert: (anAccount accountSummary includes: 'Salida por transferencia de 20').! !

!testRun: #ReceptiveAccountTest #test12 stamp: 'D S 11/10/2020 18:55:27'!
FAILURE!

!testRun: #ReceptiveAccountTest #test12 stamp: 'D S 11/10/2020 18:55:27'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 18:56:26' prior: 50894450!
accountSummary
	|report|
	
	report:= OrderedCollection new.
	self transactions do:[: aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue:[report add: 'Deposit por ', aTransaction value asString].
		(aTransaction isKindOf: Withdraw) ifTrue:[report add: 'Extraccion por ', aTransaction value asString]
		ifFalse:[report add: 'Salida por transferencia de', 50].].
	report add: 'balance = ', self balance asString.
	^ report! !
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/10/2020 18:56:35' prior: 50894528!
test12
	| anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anAccount to: anotherAccount amount: 20.

	self assert: (anAccount accountSummary includes: 'Salida por transferencia de 20').! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 18:56:39' prior: 50894545!
accountSummary
	|report|
	
	report:= OrderedCollection new.
	self transactions do:[: aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue:[report add: 'Deposit por ', aTransaction value asString].
		(aTransaction isKindOf: Withdraw) ifTrue:[report add: 'Extraccion por ', aTransaction value asString]
		ifFalse:[report add: 'Salida por transferencia de', 20].].
	report add: 'balance = ', self balance asString.
	^ report! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 18:56:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 18:56:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 18:56:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 18:56:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 18:56:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 18:56:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 18:56:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'D S 11/10/2020 18:56:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'D S 11/10/2020 18:56:43'!
ERROR!

!testRun: #ReceptiveAccountTest #test10 stamp: 'D S 11/10/2020 18:56:43'!
ERROR!

!testRun: #ReceptiveAccountTest #test11 stamp: 'D S 11/10/2020 18:56:43'!
ERROR!

!testRun: #ReceptiveAccountTest #test12 stamp: 'D S 11/10/2020 18:56:43'!
ERROR!

!testRun: #ReceptiveAccountTest #test08 stamp: 'D S 11/10/2020 18:56:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'D S 11/10/2020 18:56:59'!
ERROR!

!testRun: #ReceptiveAccountTest #test09 stamp: 'D S 11/10/2020 18:56:59'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 18:57:14' prior: 50894574!
accountSummary
	|report|
	
	report:= OrderedCollection new.
	self transactions do:[: aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue:[report add: 'Deposit por ', aTransaction value asString].
		(aTransaction isKindOf: Withdraw) ifTrue:[report add: 'Extraccion por ', aTransaction value asString]
		ifFalse:[report add: 'Salida por transferencia de 20'].].
	report add: 'balance = ', self balance asString.
	^ report! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 18:57:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 18:57:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 18:57:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 18:57:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 18:57:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 18:57:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 18:57:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'D S 11/10/2020 18:57:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'D S 11/10/2020 18:57:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'D S 11/10/2020 18:57:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'D S 11/10/2020 18:57:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'D S 11/10/2020 18:57:18'!
PASSED!
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/10/2020 18:57:27'!
test13
	| anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anAccount to: anotherAccount amount: 30.

	self assert: (anAccount accountSummary includes: 'Salida por transferencia de 30').! !

!testRun: #ReceptiveAccountTest #test13 stamp: 'D S 11/10/2020 18:57:29'!
FAILURE!

!testRun: #ReceptiveAccountTest #test13 stamp: 'D S 11/10/2020 18:57:29'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 18:57:40' prior: 50894638!
accountSummary
	|report|
	
	report:= OrderedCollection new.
	self transactions do:[: aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue:[report add: 'Deposit por ', aTransaction value asString].
		(aTransaction isKindOf: Withdraw) ifTrue:[report add: 'Extraccion por ', aTransaction value asString]
		ifFalse:[report add: 'Salida por transferencia de ', aTransaction value asString].].
	report add: 'balance = ', self balance asString.
	^ report! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 18:57:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 18:57:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 18:57:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 18:57:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 18:57:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 18:57:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 18:57:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'D S 11/10/2020 18:57:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'D S 11/10/2020 18:57:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'D S 11/10/2020 18:57:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'D S 11/10/2020 18:57:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'D S 11/10/2020 18:57:44'!
FAILURE!

!testRun: #ReceptiveAccountTest #test13 stamp: 'D S 11/10/2020 18:57:44'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 18:58:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 18:58:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 18:58:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 18:58:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 18:58:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 18:58:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 18:58:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'D S 11/10/2020 18:58:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'D S 11/10/2020 18:58:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'D S 11/10/2020 18:58:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'D S 11/10/2020 18:58:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'D S 11/10/2020 18:58:26'!
FAILURE!

!testRun: #ReceptiveAccountTest #test13 stamp: 'D S 11/10/2020 18:58:26'!
FAILURE!

!testRun: #ReceptiveAccountTest #test12 stamp: 'D S 11/10/2020 18:58:35'!
FAILURE!

!testRun: #ReceptiveAccountTest #test12 stamp: 'D S 11/10/2020 18:58:35'!
FAILURE!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/10/2020 19:00:24'!
test05
	|anAccountToExtract anAccountToDeposit aTransference|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	aTransference := Transference from: anAccountToExtract to: anAccountToDeposit amount: 50.
	
	self assert: (50) equals: (aTransference withdrawEnd value).
! !

!testRun: #TransferenceTest #test05 stamp: 'D S 11/10/2020 19:00:27'!
FAILURE!

!testRun: #TransferenceTest #test05 stamp: 'D S 11/10/2020 19:00:27'!
FAILURE!
!WithdrawEnd methodsFor: 'as yet unclassified' stamp: 'D S 11/10/2020 19:00:48' overrides: 50890119!
value

	^50! !

!testRun: #TransferenceTest #test01TransactionInitializeCorrectly stamp: 'D S 11/10/2020 19:00:52'!
PASSED!

!testRun: #TransferenceTest #test02TransactionAffectsCorrectly stamp: 'D S 11/10/2020 19:00:52'!
PASSED!

!testRun: #TransferenceTest #test03EachEndOfTransferenceAppearsCorrectlyInAccounts stamp: 'D S 11/10/2020 19:00:52'!
PASSED!

!testRun: #TransferenceTest #test04FromOneTransferenceEndCanReachToTheAnother stamp: 'D S 11/10/2020 19:00:52'!
PASSED!

!testRun: #TransferenceTest #test05 stamp: 'D S 11/10/2020 19:00:52'!
PASSED!

!testRun: #TransferenceTest #test05RaiseErrorWhenAmountToTransferIsZERO stamp: 'D S 11/10/2020 19:00:52'!
PASSED!

!testRun: #TransferenceTest #test06RaiseErrorWhenAmountToTransferIsNEGATIVE stamp: 'D S 11/10/2020 19:00:52'!
PASSED!

!testRun: #TransferenceTest #test07RaiseErrorWhenAccountToTransferIsEqualToAccountToExtract stamp: 'D S 11/10/2020 19:00:52'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/10/2020 19:01:02'!
test06
	|anAccountToExtract anAccountToDeposit aTransference|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	aTransference := Transference from: anAccountToExtract to: anAccountToDeposit amount: 80.
	
	self assert: (80) equals: (aTransference withdrawEnd value).
! !

!testRun: #TransferenceTest #test01TransactionInitializeCorrectly stamp: 'D S 11/10/2020 19:01:05'!
PASSED!

!testRun: #TransferenceTest #test02TransactionAffectsCorrectly stamp: 'D S 11/10/2020 19:01:05'!
PASSED!

!testRun: #TransferenceTest #test03EachEndOfTransferenceAppearsCorrectlyInAccounts stamp: 'D S 11/10/2020 19:01:05'!
PASSED!

!testRun: #TransferenceTest #test04FromOneTransferenceEndCanReachToTheAnother stamp: 'D S 11/10/2020 19:01:05'!
PASSED!

!testRun: #TransferenceTest #test05 stamp: 'D S 11/10/2020 19:01:05'!
PASSED!

!testRun: #TransferenceTest #test05RaiseErrorWhenAmountToTransferIsZERO stamp: 'D S 11/10/2020 19:01:05'!
PASSED!

!testRun: #TransferenceTest #test06 stamp: 'D S 11/10/2020 19:01:05'!
FAILURE!

!testRun: #TransferenceTest #test06RaiseErrorWhenAmountToTransferIsNEGATIVE stamp: 'D S 11/10/2020 19:01:05'!
PASSED!

!testRun: #TransferenceTest #test07RaiseErrorWhenAccountToTransferIsEqualToAccountToExtract stamp: 'D S 11/10/2020 19:01:05'!
PASSED!

!testRun: #TransferenceTest #test06 stamp: 'D S 11/10/2020 19:01:05'!
FAILURE!
!WithdrawEnd methodsFor: 'as yet unclassified' stamp: 'D S 11/10/2020 19:01:14' prior: 50894838 overrides: 50890119!
value

	^transference value! !

!testRun: #TransferenceTest #test01TransactionInitializeCorrectly stamp: 'D S 11/10/2020 19:01:17'!
PASSED!

!testRun: #TransferenceTest #test02TransactionAffectsCorrectly stamp: 'D S 11/10/2020 19:01:17'!
PASSED!

!testRun: #TransferenceTest #test03EachEndOfTransferenceAppearsCorrectlyInAccounts stamp: 'D S 11/10/2020 19:01:17'!
PASSED!

!testRun: #TransferenceTest #test04FromOneTransferenceEndCanReachToTheAnother stamp: 'D S 11/10/2020 19:01:17'!
PASSED!

!testRun: #TransferenceTest #test05 stamp: 'D S 11/10/2020 19:01:17'!
PASSED!

!testRun: #TransferenceTest #test05RaiseErrorWhenAmountToTransferIsZERO stamp: 'D S 11/10/2020 19:01:17'!
PASSED!

!testRun: #TransferenceTest #test06 stamp: 'D S 11/10/2020 19:01:17'!
PASSED!

!testRun: #TransferenceTest #test06RaiseErrorWhenAmountToTransferIsNEGATIVE stamp: 'D S 11/10/2020 19:01:17'!
PASSED!

!testRun: #TransferenceTest #test07RaiseErrorWhenAccountToTransferIsEqualToAccountToExtract stamp: 'D S 11/10/2020 19:01:17'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/10/2020 19:01:32'!
test07
	|anAccountToExtract anAccountToDeposit aTransference|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	aTransference := Transference from: anAccountToExtract to: anAccountToDeposit amount: 80.
	
	self assert: (80) equals: (aTransference depositEnd value).
! !

!testRun: #TransferenceTest #test07 stamp: 'D S 11/10/2020 19:01:35'!
FAILURE!

!testRun: #TransferenceTest #test07 stamp: 'D S 11/10/2020 19:01:35'!
FAILURE!
!DepositEnd methodsFor: 'as yet unclassified' stamp: 'D S 11/10/2020 19:01:45' overrides: 50890119!
value

	^transference value! !

!testRun: #TransferenceTest #test01TransactionInitializeCorrectly stamp: 'D S 11/10/2020 19:01:48'!
PASSED!

!testRun: #TransferenceTest #test02TransactionAffectsCorrectly stamp: 'D S 11/10/2020 19:01:48'!
PASSED!

!testRun: #TransferenceTest #test03EachEndOfTransferenceAppearsCorrectlyInAccounts stamp: 'D S 11/10/2020 19:01:48'!
PASSED!

!testRun: #TransferenceTest #test04FromOneTransferenceEndCanReachToTheAnother stamp: 'D S 11/10/2020 19:01:48'!
PASSED!

!testRun: #TransferenceTest #test05 stamp: 'D S 11/10/2020 19:01:48'!
PASSED!

!testRun: #TransferenceTest #test05RaiseErrorWhenAmountToTransferIsZERO stamp: 'D S 11/10/2020 19:01:48'!
PASSED!

!testRun: #TransferenceTest #test06 stamp: 'D S 11/10/2020 19:01:48'!
PASSED!

!testRun: #TransferenceTest #test06RaiseErrorWhenAmountToTransferIsNEGATIVE stamp: 'D S 11/10/2020 19:01:48'!
PASSED!

!testRun: #TransferenceTest #test07 stamp: 'D S 11/10/2020 19:01:48'!
PASSED!

!testRun: #TransferenceTest #test07RaiseErrorWhenAccountToTransferIsEqualToAccountToExtract stamp: 'D S 11/10/2020 19:01:48'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/10/2020 19:02:19'!
test05ValueFromEachEndAreTheSame
	|anAccountToExtract anAccountToDeposit aTransference|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	aTransference := Transference from: anAccountToExtract to: anAccountToDeposit amount: 50.
	
	self assert: (50) equals: (aTransference withdrawEnd value).
	self assert: (50) equals: (aTransference depositEnd value).
! !

!methodRemoval: TransferenceTest #test05 stamp: 'D S 11/10/2020 19:02:23'!
test05
	|anAccountToExtract anAccountToDeposit aTransference|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	aTransference := Transference from: anAccountToExtract to: anAccountToDeposit amount: 50.
	
	self assert: (50) equals: (aTransference withdrawEnd value).
!

!methodRemoval: TransferenceTest #test06 stamp: 'D S 11/10/2020 19:02:26'!
test06
	|anAccountToExtract anAccountToDeposit aTransference|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	aTransference := Transference from: anAccountToExtract to: anAccountToDeposit amount: 80.
	
	self assert: (80) equals: (aTransference withdrawEnd value).
!

!testRun: #TransferenceTest #test07 stamp: 'D S 11/10/2020 19:02:29'!
PASSED!

!methodRemoval: TransferenceTest #test07 stamp: 'D S 11/10/2020 19:02:32'!
test07
	|anAccountToExtract anAccountToDeposit aTransference|

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	aTransference := Transference from: anAccountToExtract to: anAccountToDeposit amount: 80.
	
	self assert: (80) equals: (aTransference depositEnd value).
!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'D S 11/10/2020 19:02:41'!
test08RaiseErrorWhenAmountToTransferIsZERO
	|anAccountToExtract anAccountToDeposit |

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	
	self 
		should: [Transference from: anAccountToExtract to: anAccountToDeposit amount: 0.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Transference errorMessageCannotBeZero equals: anError messageText.]! !

!methodRemoval: TransferenceTest #test05RaiseErrorWhenAmountToTransferIsZERO stamp: 'D S 11/10/2020 19:02:41'!
test05RaiseErrorWhenAmountToTransferIsZERO
	|anAccountToExtract anAccountToDeposit |

	anAccountToExtract := ReceptiveAccount new.
	anAccountToDeposit := ReceptiveAccount new.
	Deposit register: 100 on: anAccountToExtract.
	
	self 
		should: [Transference from: anAccountToExtract to: anAccountToDeposit amount: 0.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Transference errorMessageCannotBeZero equals: anError messageText.]!

!testRun: #TransferenceTest #test01TransactionInitializeCorrectly stamp: 'D S 11/10/2020 19:02:45'!
PASSED!

!testRun: #TransferenceTest #test02TransactionAffectsCorrectly stamp: 'D S 11/10/2020 19:02:45'!
PASSED!

!testRun: #TransferenceTest #test03EachEndOfTransferenceAppearsCorrectlyInAccounts stamp: 'D S 11/10/2020 19:02:45'!
PASSED!

!testRun: #TransferenceTest #test04FromOneTransferenceEndCanReachToTheAnother stamp: 'D S 11/10/2020 19:02:45'!
PASSED!

!testRun: #TransferenceTest #test05ValueFromEachEndAreTheSame stamp: 'D S 11/10/2020 19:02:45'!
PASSED!

!testRun: #TransferenceTest #test06RaiseErrorWhenAmountToTransferIsNEGATIVE stamp: 'D S 11/10/2020 19:02:45'!
PASSED!

!testRun: #TransferenceTest #test07RaiseErrorWhenAccountToTransferIsEqualToAccountToExtract stamp: 'D S 11/10/2020 19:02:45'!
PASSED!

!testRun: #TransferenceTest #test08RaiseErrorWhenAmountToTransferIsZERO stamp: 'D S 11/10/2020 19:02:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 19:02:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 19:02:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 19:02:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 19:02:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 19:02:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 19:02:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 19:02:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'D S 11/10/2020 19:02:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'D S 11/10/2020 19:02:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'D S 11/10/2020 19:02:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'D S 11/10/2020 19:02:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'D S 11/10/2020 19:02:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test13 stamp: 'D S 11/10/2020 19:02:58'!
PASSED!
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/10/2020 19:11:48' prior: 50894694!
test13
	| anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anotherAccount to: anAccount amount: 30.

	self assert: (anAccount accountSummary includes: 'Entrada por transferencia de 30').! !
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/10/2020 19:11:57'!
test14
	| anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anotherAccount to: anAccount amount: 30.

	self assert: (anAccount accountSummary includes: 'Entrada por transferencia de 30').! !
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/10/2020 18:57:27' prior: 50895179!
test13
	| anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anAccount to: anotherAccount amount: 30.

	self assert: (anAccount accountSummary includes: 'Salida por transferencia de 30').! !

!testRun: #ReceptiveAccountTest #test14 stamp: 'D S 11/10/2020 19:12:05'!
FAILURE!

!testRun: #ReceptiveAccountTest #test14 stamp: 'D S 11/10/2020 19:12:05'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 19:12:52' prior: 50894711!
accountSummary
	|report|
	
	report:= OrderedCollection new.
	self transactions do:[: aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue:[report add: 'Deposit por ', aTransaction value asString].
		(aTransaction isKindOf: Withdraw) ifTrue:[report add: 'Extraccion por ', aTransaction value asString].
		(aTransaction isKindOf: WithdrawEnd) ifTrue:[report add: 'Salida por transferencia de ', aTransaction value asString]
		ifFalse: [report add: 'Entrada por transferencia de 20']].
	report add: 'balance = ', self balance asString.
	^ report! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 19:13:02' prior: 50895220!
accountSummary
	|report|
	
	report:= OrderedCollection new.
	self transactions do:[: aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue:[report add: 'Deposit por ', aTransaction value asString].
		(aTransaction isKindOf: Withdraw) ifTrue:[report add: 'Extraccion por ', aTransaction value asString].
		(aTransaction isKindOf: WithdrawEnd) ifTrue:[report add: 'Salida por transferencia de ', aTransaction value asString]
		ifFalse: [report add: 'Entrada por transferencia de 30']].
	report add: 'balance = ', self balance asString.
	^ report! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 19:13:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 19:13:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 19:13:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 19:13:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 19:13:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 19:13:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 19:13:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'D S 11/10/2020 19:13:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'D S 11/10/2020 19:13:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'D S 11/10/2020 19:13:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'D S 11/10/2020 19:13:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'D S 11/10/2020 19:13:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test13 stamp: 'D S 11/10/2020 19:13:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test14 stamp: 'D S 11/10/2020 19:13:09'!
PASSED!
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/10/2020 19:13:18'!
test15
	| anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anotherAccount to: anAccount amount: 40.

	self assert: (anAccount accountSummary includes: 'Entrada por transferencia de 40').! !

!testRun: #ReceptiveAccountTest #test15 stamp: 'D S 11/10/2020 19:13:22'!
FAILURE!

!testRun: #ReceptiveAccountTest #test15 stamp: 'D S 11/10/2020 19:13:22'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 19:25:36' prior: 50895241!
accountSummary
	|report aTransaction|
	
	report:= OrderedCollection new.
	aTransaction := self transactions first.
		(aTransaction isKindOf: Deposit) ifTrue:[report add: 'Deposit por ', aTransaction value asString].
		(aTransaction isKindOf: Withdraw) ifTrue:[report add: 'Extraccion por ', aTransaction value asString].
		(aTransaction isKindOf: WithdrawEnd) ifTrue:[report add: 'Salida por transferencia de ', aTransaction value asString]
		ifFalse: [report add: 'Entrada por transferencia de 30'].
	report add: 'balance = ', self balance asString.
	^ report! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 19:25:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 19:25:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 19:25:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 19:25:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 19:25:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 19:25:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 19:25:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'D S 11/10/2020 19:25:41'!
ERROR!

!testRun: #ReceptiveAccountTest #test09 stamp: 'D S 11/10/2020 19:25:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'D S 11/10/2020 19:25:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'D S 11/10/2020 19:25:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'D S 11/10/2020 19:25:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test13 stamp: 'D S 11/10/2020 19:25:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test14 stamp: 'D S 11/10/2020 19:25:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test15 stamp: 'D S 11/10/2020 19:25:41'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 19:26:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 19:26:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 19:26:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 19:26:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 19:26:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 19:26:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 19:26:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'D S 11/10/2020 19:26:58'!
ERROR!

!testRun: #ReceptiveAccountTest #test09 stamp: 'D S 11/10/2020 19:26:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'D S 11/10/2020 19:26:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'D S 11/10/2020 19:26:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'D S 11/10/2020 19:26:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test13 stamp: 'D S 11/10/2020 19:26:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test14 stamp: 'D S 11/10/2020 19:26:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test15 stamp: 'D S 11/10/2020 19:26:59'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 19:27:33' prior: 50895323!
accountSummary
	|report aTransaction|
	
	report:= OrderedCollection new.
	(self transactions size = 0) ifFalse:[
	aTransaction := self transactions first.
		(aTransaction isKindOf: Deposit) ifTrue:[report add: 'Deposit por ', aTransaction value asString].
		(aTransaction isKindOf: Withdraw) ifTrue:[report add: 'Extraccion por ', aTransaction value asString].
		(aTransaction isKindOf: WithdrawEnd) ifTrue:[report add: 'Salida por transferencia de ', aTransaction value asString]
		ifFalse: [report add: 'Entrada por transferencia de 30']].
	report add: 'balance = ', self balance asString.
	^ report! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 19:27:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 19:27:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 19:27:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 19:27:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 19:27:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 19:27:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 19:27:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'D S 11/10/2020 19:27:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'D S 11/10/2020 19:27:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'D S 11/10/2020 19:27:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'D S 11/10/2020 19:27:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'D S 11/10/2020 19:27:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test13 stamp: 'D S 11/10/2020 19:27:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test14 stamp: 'D S 11/10/2020 19:27:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test15 stamp: 'D S 11/10/2020 19:27:42'!
FAILURE!

!testRun: #ReceptiveAccountTest #test15 stamp: 'D S 11/10/2020 19:27:42'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 19:28:27' prior: 50895439!
accountSummary
	|report aTransaction|
	
	report:= OrderedCollection new.
	(self transactions size = 0) ifFalse:[
	aTransaction := self transactions first.
		(aTransaction isKindOf: Deposit) ifTrue:[report add: 'Deposit por ', aTransaction value asString].
		(aTransaction isKindOf: Withdraw) ifTrue:[report add: 'Extraccion por ', aTransaction value asString].
		(aTransaction isKindOf: WithdrawEnd) ifTrue:[report add: 'Salida por transferencia de ', aTransaction value asString].
		(aTransaction isKindOf: DepositEnd)ifTrue: [report add: 'Entrada por transferencia de ', aTransaction value asString]].
	report add: 'balance = ', self balance asString.
	^ report! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 19:28:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 19:28:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 19:28:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 19:28:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 19:28:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 19:28:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 19:28:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'D S 11/10/2020 19:28:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'D S 11/10/2020 19:28:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'D S 11/10/2020 19:28:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'D S 11/10/2020 19:28:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'D S 11/10/2020 19:28:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test13 stamp: 'D S 11/10/2020 19:28:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test14 stamp: 'D S 11/10/2020 19:28:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test15 stamp: 'D S 11/10/2020 19:28:31'!
PASSED!
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/10/2020 19:29:06' prior: 50894199!
test09
	| anAccount |
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Deposit register: 200 on: anAccount.
	
	self assert: (anAccount accountSummary includes: 'Deposit por 100').
	self assert: (anAccount accountSummary includes: 'Deposit por 200').! !
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/10/2020 19:29:10'!
test16
	| anAccount |
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Deposit register: 200 on: anAccount.
	
	self assert: (anAccount accountSummary includes: 'Deposit por 100').
	self assert: (anAccount accountSummary includes: 'Deposit por 200').! !
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/10/2020 18:42:09' prior: 50895583!
test09
	| anAccount |
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	
	self assert: (anAccount accountSummary includes: 'Deposit por 100').! !

!testRun: #ReceptiveAccountTest #test16 stamp: 'D S 11/10/2020 19:29:24'!
FAILURE!

!testRun: #ReceptiveAccountTest #test16 stamp: 'D S 11/10/2020 19:29:24'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 19:36:15' prior: 50895511!
accountSummary
	|report |
	
	report:= OrderedCollection new.
	self transactions do:[: aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue:[report add: 'Deposit por ', aTransaction value asString].
		(aTransaction isKindOf: Withdraw) ifTrue:[report add: 'Extraccion por ', aTransaction value asString].
		(aTransaction isKindOf: WithdrawEnd) ifTrue:[report add: 'Salida por transferencia de ', aTransaction value asString].
		(aTransaction isKindOf: DepositEnd)ifTrue: [report add: 'Entrada por transferencia de ', aTransaction value asString]].
	report add: 'balance = ', self balance asString.
	^ report! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 19:36:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 19:36:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 19:36:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 19:36:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 19:36:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 19:36:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 19:36:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'D S 11/10/2020 19:36:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'D S 11/10/2020 19:36:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'D S 11/10/2020 19:36:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'D S 11/10/2020 19:36:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'D S 11/10/2020 19:36:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test13 stamp: 'D S 11/10/2020 19:36:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test14 stamp: 'D S 11/10/2020 19:36:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test15 stamp: 'D S 11/10/2020 19:36:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test16 stamp: 'D S 11/10/2020 19:36:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 19:38:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 19:38:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 19:38:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 19:38:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 19:38:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 19:38:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 19:38:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'D S 11/10/2020 19:38:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'D S 11/10/2020 19:38:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'D S 11/10/2020 19:38:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'D S 11/10/2020 19:38:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'D S 11/10/2020 19:38:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test13 stamp: 'D S 11/10/2020 19:38:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test14 stamp: 'D S 11/10/2020 19:38:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test15 stamp: 'D S 11/10/2020 19:38:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test16 stamp: 'D S 11/10/2020 19:38:07'!
PASSED!

!methodRemoval: ReceptiveAccountTest #test10 stamp: 'D S 11/10/2020 19:38:26'!
test10
	| anAccount |
	anAccount := ReceptiveAccount new.
	Deposit register: 200 on: anAccount.
	
	self assert: (anAccount accountSummary includes: 'Deposit por 200').!

!methodRemoval: ReceptiveAccountTest #test13 stamp: 'D S 11/10/2020 19:38:43'!
test13
	| anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anAccount to: anotherAccount amount: 30.

	self assert: (anAccount accountSummary includes: 'Salida por transferencia de 30').!

!methodRemoval: ReceptiveAccountTest #test15 stamp: 'D S 11/10/2020 19:38:50'!
test15
	| anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anotherAccount to: anAccount amount: 40.

	self assert: (anAccount accountSummary includes: 'Entrada por transferencia de 40').!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 19:41:02' prior: 50895622!
accountSummary
	|report firstTransaction|
	
	report:= OrderedCollection new.
	firstTransaction := self transactions first.
		(firstTransaction isKindOf: Deposit) ifTrue:[report add: 'Deposit por ', firstTransaction value asString].
		(firstTransaction isKindOf: Withdraw) ifTrue:[report add: 'Extraccion por ', firstTransaction value asString].
		(firstTransaction isKindOf: WithdrawEnd) ifTrue:[report add: 'Salida por transferencia de ', firstTransaction value asString].
		(firstTransaction isKindOf: DepositEnd)ifTrue: [report add: 'Entrada por transferencia de ', firstTransaction value asString].
	report add: 'balance = ', self balance asString.
	^ report! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 19:43:20' prior: 50895774!
accountSummary
	|report firstTransaction secondTransaction|
	
	report:= OrderedCollection new.
	(self transactions size > 0) ifTrue:[
	firstTransaction := self transactions first.
		(firstTransaction isKindOf: Deposit) ifTrue:[report add: 'Deposit por ', firstTransaction value asString].
		(firstTransaction isKindOf: Withdraw) ifTrue:[report add: 'Extraccion por ', firstTransaction value asString].
		(firstTransaction isKindOf: WithdrawEnd) ifTrue:[report add: 'Salida por transferencia de ', firstTransaction value asString].
		(firstTransaction isKindOf: DepositEnd)ifTrue: [report add: 'Entrada por transferencia de ', firstTransaction value asString].
	(self transaction size = 2) ifTrue:[
	secondTransaction := self transactions second.
	report add: 'Deposit por ', secondTransaction value asString
	]].
	report add: 'balance = ', self balance asString.
	^ report! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 19:43:26' prior: 50895798!
accountSummary
	|report firstTransaction secondTransaction|
	
	report:= OrderedCollection new.
	(self transactions size > 0) ifTrue:[
	firstTransaction := self transactions first.
		(firstTransaction isKindOf: Deposit) ifTrue:[report add: 'Deposit por ', firstTransaction value asString].
		(firstTransaction isKindOf: Withdraw) ifTrue:[report add: 'Extraccion por ', firstTransaction value asString].
		(firstTransaction isKindOf: WithdrawEnd) ifTrue:[report add: 'Salida por transferencia de ', firstTransaction value asString].
		(firstTransaction isKindOf: DepositEnd)ifTrue: [report add: 'Entrada por transferencia de ', firstTransaction value asString].
	(self transactions size = 2) ifTrue:[
	secondTransaction := self transactions second.
	report add: 'Deposit por ', secondTransaction value asString
	]].
	report add: 'balance = ', self balance asString.
	^ report! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 19:43:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 19:43:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 19:43:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 19:43:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 19:43:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 19:43:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 19:43:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'D S 11/10/2020 19:43:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'D S 11/10/2020 19:43:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'D S 11/10/2020 19:43:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'D S 11/10/2020 19:43:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test14 stamp: 'D S 11/10/2020 19:43:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test16 stamp: 'D S 11/10/2020 19:43:40'!
PASSED!
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/10/2020 19:43:57'!
test17
	| anAccount |
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 200 on: anAccount.
	
	self assert: (anAccount accountSummary includes: 'Deposit por 100').
	self assert: (anAccount accountSummary includes: 'Extraccion por 200').! !

!testRun: #ReceptiveAccountTest #test17 stamp: 'D S 11/10/2020 19:44:00'!
FAILURE!

!testRun: #ReceptiveAccountTest #test17 stamp: 'D S 11/10/2020 19:44:00'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 19:44:17' prior: 50895829!
accountSummary
	|report firstTransaction secondTransaction|
	
	report:= OrderedCollection new.
	(self transactions size > 0) ifTrue:[
	firstTransaction := self transactions first.
		(firstTransaction isKindOf: Deposit) ifTrue:[report add: 'Deposit por ', firstTransaction value asString].
		(firstTransaction isKindOf: Withdraw) ifTrue:[report add: 'Extraccion por ', firstTransaction value asString].
		(firstTransaction isKindOf: WithdrawEnd) ifTrue:[report add: 'Salida por transferencia de ', firstTransaction value asString].
		(firstTransaction isKindOf: DepositEnd)ifTrue: [report add: 'Entrada por transferencia de ', firstTransaction value asString].
	(self transactions size = 2) ifTrue:[
	secondTransaction := self transactions second.
	(firstTransaction isKindOf: Deposit) ifTrue:[report add: 'Deposit por ', firstTransaction value asString].
	(firstTransaction isKindOf: Withdraw) ifTrue:[report add: 'Extraccion por ', firstTransaction value asString].

	]].
	report add: 'balance = ', self balance asString.
	^ report! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 19:44:26' prior: 50895920!
accountSummary
	|report firstTransaction secondTransaction|
	
	report:= OrderedCollection new.
	(self transactions size > 0) ifTrue:[
	firstTransaction := self transactions first.
		(firstTransaction isKindOf: Deposit) ifTrue:[report add: 'Deposit por ', firstTransaction value asString].
		(firstTransaction isKindOf: Withdraw) ifTrue:[report add: 'Extraccion por ', firstTransaction value asString].
		(firstTransaction isKindOf: WithdrawEnd) ifTrue:[report add: 'Salida por transferencia de ', firstTransaction value asString].
		(firstTransaction isKindOf: DepositEnd)ifTrue: [report add: 'Entrada por transferencia de ', firstTransaction value asString].
	(self transactions size = 2) ifTrue:[
	secondTransaction := self transactions second.
	(secondTransaction isKindOf: Deposit) ifTrue:[report add: 'Deposit por ', firstTransaction value asString].
	(secondTransaction isKindOf: Withdraw) ifTrue:[report add: 'Extraccion por ', firstTransaction value asString].

	]].
	report add: 'balance = ', self balance asString.
	^ report! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 19:44:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 19:44:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 19:44:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 19:44:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 19:44:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 19:44:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 19:44:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'D S 11/10/2020 19:44:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'D S 11/10/2020 19:44:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'D S 11/10/2020 19:44:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'D S 11/10/2020 19:44:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test14 stamp: 'D S 11/10/2020 19:44:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test16 stamp: 'D S 11/10/2020 19:44:31'!
FAILURE!

!testRun: #ReceptiveAccountTest #test17 stamp: 'D S 11/10/2020 19:44:31'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 19:44:48' prior: 50895956!
accountSummary
	|report firstTransaction secondTransaction|
	
	report:= OrderedCollection new.
	(self transactions size > 0) ifTrue:[
	firstTransaction := self transactions first.
		(firstTransaction isKindOf: Deposit) ifTrue:[report add: 'Deposit por ', firstTransaction value asString].
		(firstTransaction isKindOf: Withdraw) ifTrue:[report add: 'Extraccion por ', firstTransaction value asString].
		(firstTransaction isKindOf: WithdrawEnd) ifTrue:[report add: 'Salida por transferencia de ', firstTransaction value asString].
		(firstTransaction isKindOf: DepositEnd)ifTrue: [report add: 'Entrada por transferencia de ', firstTransaction value asString].
	(self transactions size = 2) ifTrue:[
	secondTransaction := self transactions second.
	(secondTransaction isKindOf: Deposit) ifTrue:[report add: 'Deposit por ', secondTransaction value asString].
	(secondTransaction isKindOf: Withdraw) ifTrue:[report add: 'Extraccion por ', secondTransaction value asString].

	]].
	report add: 'balance = ', self balance asString.
	^ report! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 19:44:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 19:44:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 19:44:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 19:44:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 19:44:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 19:44:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 19:44:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'D S 11/10/2020 19:44:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'D S 11/10/2020 19:44:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'D S 11/10/2020 19:44:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'D S 11/10/2020 19:44:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test14 stamp: 'D S 11/10/2020 19:44:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test16 stamp: 'D S 11/10/2020 19:44:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'D S 11/10/2020 19:44:53'!
PASSED!
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/10/2020 19:45:30' prior: 50895595!
test16
	| anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Transference from: anAccount to: anotherAccount amount: 20.

	self assert: (anAccount accountSummary includes: 'Salida por transferencia de 20').	
	self assert: (anAccount accountSummary includes: 'Deposit por 100').
! !
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/10/2020 19:45:34'!
test18
	| anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Transference from: anAccount to: anotherAccount amount: 20.

	self assert: (anAccount accountSummary includes: 'Salida por transferencia de 20').	
	self assert: (anAccount accountSummary includes: 'Deposit por 100').
! !
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/10/2020 19:29:10' prior: 50896118!
test16
	| anAccount |
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Deposit register: 200 on: anAccount.
	
	self assert: (anAccount accountSummary includes: 'Deposit por 100').
	self assert: (anAccount accountSummary includes: 'Deposit por 200').! !

!testRun: #ReceptiveAccountTest #test18 stamp: 'D S 11/10/2020 19:45:44'!
FAILURE!

!testRun: #ReceptiveAccountTest #test18 stamp: 'D S 11/10/2020 19:45:44'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 19:46:06' prior: 50896037!
accountSummary
	|report firstTransaction secondTransaction|
	
	report:= OrderedCollection new.
	(self transactions size > 0) ifTrue:[
	firstTransaction := self transactions first.
		(firstTransaction isKindOf: Deposit) ifTrue:[report add: 'Deposit por ', firstTransaction value asString].
		(firstTransaction isKindOf: Withdraw) ifTrue:[report add: 'Extraccion por ', firstTransaction value asString].
		(firstTransaction isKindOf: WithdrawEnd) ifTrue:[report add: 'Salida por transferencia de ', firstTransaction value asString].
		(firstTransaction isKindOf: DepositEnd)ifTrue: [report add: 'Entrada por transferencia de ', firstTransaction value asString].
	(self transactions size = 2) ifTrue:[
	secondTransaction := self transactions second.
	(secondTransaction isKindOf: Deposit) ifTrue:[report add: 'Deposit por ', secondTransaction value asString].
	(secondTransaction isKindOf: Withdraw) ifTrue:[report add: 'Extraccion por ', secondTransaction value asString].
	(secondTransaction isKindOf: WithdrawEnd) ifTrue:[report add: 'Salida por transferencia de ', secondTransaction value asString].


	]].
	report add: 'balance = ', self balance asString.
	^ report! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 19:46:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 19:46:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 19:46:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 19:46:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 19:46:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 19:46:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 19:46:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'D S 11/10/2020 19:46:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'D S 11/10/2020 19:46:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'D S 11/10/2020 19:46:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'D S 11/10/2020 19:46:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test14 stamp: 'D S 11/10/2020 19:46:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test16 stamp: 'D S 11/10/2020 19:46:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'D S 11/10/2020 19:46:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test18 stamp: 'D S 11/10/2020 19:46:10'!
PASSED!
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/10/2020 19:46:29'!
test19
	| anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Transference from: anotherAccount to: anAccount amount: 20.

	self assert: (anAccount accountSummary includes: 'Entrada por transferencia de 20').	
	self assert: (anAccount accountSummary includes: 'Deposit por 100').
! !

!testRun: #ReceptiveAccountTest #test19 stamp: 'D S 11/10/2020 19:46:32'!
FAILURE!

!testRun: #ReceptiveAccountTest #test19 stamp: 'D S 11/10/2020 19:46:32'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 19:47:25' prior: 50896165!
accountSummary
	|report firstTransaction secondTransaction|
	
	report:= OrderedCollection new.
	(self transactions size > 0) ifTrue:[
	firstTransaction := self transactions first.
		(firstTransaction isKindOf: Deposit) ifTrue:[report add: 'Deposit por ', firstTransaction value asString].
		(firstTransaction isKindOf: Withdraw) ifTrue:[report add: 'Extraccion por ', firstTransaction value asString].
		(firstTransaction isKindOf: WithdrawEnd) ifTrue:[report add: 'Salida por transferencia de ', firstTransaction value asString].
		(firstTransaction isKindOf: DepositEnd)ifTrue: [report add: 'Entrada por transferencia de ', firstTransaction value asString].
	(self transactions size = 2) ifTrue:[
	secondTransaction := self transactions second.
	(secondTransaction isKindOf: Deposit) ifTrue:[report add: 'Deposit por ', secondTransaction value asString].
	(secondTransaction isKindOf: Withdraw) ifTrue:[report add: 'Extraccion por ', secondTransaction value asString].
	(secondTransaction isKindOf: WithdrawEnd) ifTrue:[report add: 'Salida por transferencia de ', secondTransaction value asString].
	(secondTransaction isKindOf: DepositEnd)ifTrue: [report add: 'Entrada por transferencia de ', secondTransaction value asString].
 ].].
	report add: 'balance = ', self balance asString.
	^ report! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 19:47:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 19:47:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 19:47:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 19:47:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 19:47:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 19:47:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 19:47:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'D S 11/10/2020 19:47:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'D S 11/10/2020 19:47:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'D S 11/10/2020 19:47:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'D S 11/10/2020 19:47:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test14 stamp: 'D S 11/10/2020 19:47:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test16 stamp: 'D S 11/10/2020 19:47:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'D S 11/10/2020 19:47:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test18 stamp: 'D S 11/10/2020 19:47:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test19 stamp: 'D S 11/10/2020 19:47:28'!
PASSED!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 19:48:47' prior: 50896272!
accountSummary
	|report |
	
	report:= OrderedCollection new.
	self transactions do:[: aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue:[report add: 'Deposit por ', aTransaction value asString].
		(aTransaction isKindOf: Withdraw) ifTrue:[report add: 'Extraccion por ', aTransaction value asString].
		(aTransaction isKindOf: WithdrawEnd) ifTrue:[report add: 'Salida por transferencia de ', aTransaction value asString].
		(aTransaction isKindOf: DepositEnd)ifTrue: [report add: 'Entrada por transferencia de ', aTransaction value asString]].
	report add: 'balance = ', self balance asString.
	^ report! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 19:48:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 19:48:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 19:48:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 19:48:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 19:48:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 19:48:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 19:48:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'D S 11/10/2020 19:48:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'D S 11/10/2020 19:48:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'D S 11/10/2020 19:48:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'D S 11/10/2020 19:48:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test14 stamp: 'D S 11/10/2020 19:48:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test16 stamp: 'D S 11/10/2020 19:48:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'D S 11/10/2020 19:48:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test18 stamp: 'D S 11/10/2020 19:48:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test19 stamp: 'D S 11/10/2020 19:48:56'!
PASSED!
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/10/2020 19:54:29'!
test08SummaryOfAccountWithoutTransactionsReturnsBalance0
	| anAccount |
	anAccount := ReceptiveAccount new.
	
	self assert: (anAccount accountSummary includes: 'balance = 0').! !

!methodRemoval: ReceptiveAccountTest #test08 stamp: 'D S 11/10/2020 19:54:29'!
test08
	| anAccount |
	anAccount := ReceptiveAccount new.
	
	self assert: (anAccount accountSummary includes: 'balance = 0').!
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/10/2020 19:54:56'!
test09SummaryOnAnAccountWithDepositWorksCorrectly
	| anAccount |
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	
	self assert: (anAccount accountSummary includes: 'Deposit por 100').! !

!methodRemoval: ReceptiveAccountTest #test09 stamp: 'D S 11/10/2020 19:54:56'!
test09
	| anAccount |
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	
	self assert: (anAccount accountSummary includes: 'Deposit por 100').!
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/10/2020 19:55:18'!
test10SummaryReturnsTheBalanceCorrectly
	| anAccount |
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	
	self assert: (anAccount accountSummary includes: 'balance = 100').! !

!methodRemoval: ReceptiveAccountTest #test11 stamp: 'D S 11/10/2020 19:55:18'!
test11
	| anAccount |
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	
	self assert: (anAccount accountSummary includes: 'balance = 100').!
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/10/2020 19:55:51'!
test11
	| anAccount |
	anAccount := ReceptiveAccount new.
	Withdraw register: 200 on: anAccount.
	
	self assert: (anAccount accountSummary includes: 'Extraccion por 200').! !

!testRun: #ReceptiveAccountTest #test11 stamp: 'D S 11/10/2020 19:55:53'!
PASSED!
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/10/2020 19:56:09'!
test11SummaryOnAccountWithWithdrawWorksCorrectly
	| anAccount |
	anAccount := ReceptiveAccount new.
	Withdraw register: 200 on: anAccount.
	
	self assert: (anAccount accountSummary includes: 'Extraccion por 200').! !

!methodRemoval: ReceptiveAccountTest #test11 stamp: 'D S 11/10/2020 19:56:09'!
test11
	| anAccount |
	anAccount := ReceptiveAccount new.
	Withdraw register: 200 on: anAccount.
	
	self assert: (anAccount accountSummary includes: 'Extraccion por 200').!
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/10/2020 19:56:30'!
test12SummaryOnAccountWithExtractionByTransferenceWorksCorrectly
	| anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anAccount to: anotherAccount amount: 20.

	self assert: (anAccount accountSummary includes: 'Salida por transferencia de 20').! !

!methodRemoval: ReceptiveAccountTest #test12 stamp: 'D S 11/10/2020 19:56:30'!
test12
	| anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anAccount to: anotherAccount amount: 20.

	self assert: (anAccount accountSummary includes: 'Salida por transferencia de 20').!
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/10/2020 19:56:51'!
test14SummaryOnAccountWithDepositByTransactionWorksCorrectly
	| anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anotherAccount to: anAccount amount: 30.

	self assert: (anAccount accountSummary includes: 'Entrada por transferencia de 30').! !

!methodRemoval: ReceptiveAccountTest #test14 stamp: 'D S 11/10/2020 19:56:51'!
test14
	| anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anotherAccount to: anAccount amount: 30.

	self assert: (anAccount accountSummary includes: 'Entrada por transferencia de 30').!
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/10/2020 19:56:57'!
test13SummaryOnAccountWithDepositByTransactionWorksCorrectly
	| anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anotherAccount to: anAccount amount: 30.

	self assert: (anAccount accountSummary includes: 'Entrada por transferencia de 30').! !

!methodRemoval: ReceptiveAccountTest #test14SummaryOnAccountWithDepositByTransactionWorksCorrectly stamp: 'D S 11/10/2020 19:56:57'!
test14SummaryOnAccountWithDepositByTransactionWorksCorrectly
	| anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anotherAccount to: anAccount amount: 30.

	self assert: (anAccount accountSummary includes: 'Entrada por transferencia de 30').!
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/10/2020 19:57:18'!
test14SummaryOnAccountWithMoreThanOneTransactionWorksCorrectly
	| anAccount |
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Deposit register: 200 on: anAccount.
	
	self assert: (anAccount accountSummary includes: 'Deposit por 100').
	self assert: (anAccount accountSummary includes: 'Deposit por 200').! !

!methodRemoval: ReceptiveAccountTest #test16 stamp: 'D S 11/10/2020 19:57:18'!
test16
	| anAccount |
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Deposit register: 200 on: anAccount.
	
	self assert: (anAccount accountSummary includes: 'Deposit por 100').
	self assert: (anAccount accountSummary includes: 'Deposit por 200').!

!methodRemoval: ReceptiveAccountTest #test17 stamp: 'D S 11/10/2020 19:57:21'!
test17
	| anAccount |
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 200 on: anAccount.
	
	self assert: (anAccount accountSummary includes: 'Deposit por 100').
	self assert: (anAccount accountSummary includes: 'Extraccion por 200').!

!methodRemoval: ReceptiveAccountTest #test18 stamp: 'D S 11/10/2020 19:57:26'!
test18
	| anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Transference from: anAccount to: anotherAccount amount: 20.

	self assert: (anAccount accountSummary includes: 'Salida por transferencia de 20').	
	self assert: (anAccount accountSummary includes: 'Deposit por 100').
!

!methodRemoval: ReceptiveAccountTest #test19 stamp: 'D S 11/10/2020 19:57:28'!
test19
	| anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Transference from: anotherAccount to: anAccount amount: 20.

	self assert: (anAccount accountSummary includes: 'Entrada por transferencia de 20').	
	self assert: (anAccount accountSummary includes: 'Deposit por 100').
!
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/10/2020 19:57:44'!
test13SummaryOnAccountWithDepositByTransferenceWorksCorrectly
	| anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anotherAccount to: anAccount amount: 30.

	self assert: (anAccount accountSummary includes: 'Entrada por transferencia de 30').! !

!methodRemoval: ReceptiveAccountTest #test13SummaryOnAccountWithDepositByTransactionWorksCorrectly stamp: 'D S 11/10/2020 19:57:44'!
test13SummaryOnAccountWithDepositByTransactionWorksCorrectly
	| anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anotherAccount to: anAccount amount: 30.

	self assert: (anAccount accountSummary includes: 'Entrada por transferencia de 30').!

----SNAPSHOT----(10 November 2020 20:01:47) CuisUniversity-4383.image priorSource: 17998164!
!ReceptiveAccountTest methodsFor: 'transferNetTests' stamp: 'D S 11/10/2020 20:09:51'!
test15
	|anAccount|
	anAccount := ReceptiveAccount new.
	
	self assert: 0 equals: anAccount transferNet.	! !

!testRun: #ReceptiveAccountTest #test15 stamp: 'D S 11/10/2020 20:09:55'!
ERROR!

!testRun: #ReceptiveAccountTest #test15 stamp: 'D S 11/10/2020 20:09:55'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 20:10:38'!
transferNet
	
	^ 0! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 20:10:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 20:10:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 20:10:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 20:10:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 20:10:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 20:10:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 20:10:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test08SummaryOfAccountWithoutTransactionsReturnsBalance0 stamp: 'D S 11/10/2020 20:10:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test09SummaryOnAnAccountWithDepositWorksCorrectly stamp: 'D S 11/10/2020 20:10:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test10SummaryReturnsTheBalanceCorrectly stamp: 'D S 11/10/2020 20:10:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test11SummaryOnAccountWithWithdrawWorksCorrectly stamp: 'D S 11/10/2020 20:10:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test12SummaryOnAccountWithExtractionByTransferenceWorksCorrectly stamp: 'D S 11/10/2020 20:10:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test13SummaryOnAccountWithDepositByTransferenceWorksCorrectly stamp: 'D S 11/10/2020 20:10:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test14SummaryOnAccountWithMoreThanOneTransactionWorksCorrectly stamp: 'D S 11/10/2020 20:10:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test15 stamp: 'D S 11/10/2020 20:10:44'!
PASSED!
!ReceptiveAccountTest methodsFor: 'transferNetTests' stamp: 'D S 11/10/2020 20:12:01'!
test16
	|anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anAccount to: anotherAccount amount: 50.
	
	self assert: 0 equals: anAccount transferNet.	! !
!ReceptiveAccountTest methodsFor: 'transferNetTests' stamp: 'D S 11/10/2020 20:12:07' prior: 50896760!
test16
	|anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anAccount to: anotherAccount amount: 50.
	
	self assert: 50 equals: anAccount transferNet.	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 20:13:07' prior: 50896698!
transferNet
	
	transactions isEmpty ifFalse:[^ 50].
	^ 0! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 20:13:11' prior: 50896782!
transferNet
	
	transactions isEmpty ifFalse:[^ 100].
	^ 0! !

!testRun: #ReceptiveAccountTest #test15 stamp: 'D S 11/10/2020 20:13:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test16 stamp: 'D S 11/10/2020 20:13:18'!
FAILURE!

!testRun: #ReceptiveAccountTest #test16 stamp: 'D S 11/10/2020 20:13:18'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 20:13:29' prior: 50896787!
transferNet
	
	transactions isEmpty ifFalse:[^ 50].
	^ 0! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 20:13:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 20:13:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 20:13:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 20:13:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 20:13:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 20:13:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 20:13:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test08SummaryOfAccountWithoutTransactionsReturnsBalance0 stamp: 'D S 11/10/2020 20:13:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test09SummaryOnAnAccountWithDepositWorksCorrectly stamp: 'D S 11/10/2020 20:13:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test10SummaryReturnsTheBalanceCorrectly stamp: 'D S 11/10/2020 20:13:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test11SummaryOnAccountWithWithdrawWorksCorrectly stamp: 'D S 11/10/2020 20:13:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test12SummaryOnAccountWithExtractionByTransferenceWorksCorrectly stamp: 'D S 11/10/2020 20:13:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test13SummaryOnAccountWithDepositByTransferenceWorksCorrectly stamp: 'D S 11/10/2020 20:13:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test14SummaryOnAccountWithMoreThanOneTransactionWorksCorrectly stamp: 'D S 11/10/2020 20:13:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test15 stamp: 'D S 11/10/2020 20:13:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test16 stamp: 'D S 11/10/2020 20:13:31'!
PASSED!
!ReceptiveAccountTest methodsFor: 'transferNetTests' stamp: 'D S 11/10/2020 20:12:07' prior: 50896771!
test16
	|anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anAccount to: anotherAccount amount: 50.
	
	self assert: 50 equals: anAccount transferNet.	! !
!ReceptiveAccountTest methodsFor: 'transferNetTests' stamp: 'D S 11/10/2020 20:17:03'!
test17
	|anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anAccount to: anotherAccount amount: 100.
	
	self assert: 100 equals: anAccount transferNet.	! !

!testRun: #ReceptiveAccountTest #test17 stamp: 'D S 11/10/2020 20:17:07'!
FAILURE!

!testRun: #ReceptiveAccountTest #test17 stamp: 'D S 11/10/2020 20:17:07'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 20:18:08' prior: 50896800!
transferNet
	
	transactions isEmpty ifFalse:[^ transactions first value].
	^ 0! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 20:18:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 20:18:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 20:18:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 20:18:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 20:18:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 20:18:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 20:18:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test08SummaryOfAccountWithoutTransactionsReturnsBalance0 stamp: 'D S 11/10/2020 20:18:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test09SummaryOnAnAccountWithDepositWorksCorrectly stamp: 'D S 11/10/2020 20:18:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test10SummaryReturnsTheBalanceCorrectly stamp: 'D S 11/10/2020 20:18:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test11SummaryOnAccountWithWithdrawWorksCorrectly stamp: 'D S 11/10/2020 20:18:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test12SummaryOnAccountWithExtractionByTransferenceWorksCorrectly stamp: 'D S 11/10/2020 20:18:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test13SummaryOnAccountWithDepositByTransferenceWorksCorrectly stamp: 'D S 11/10/2020 20:18:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test14SummaryOnAccountWithMoreThanOneTransactionWorksCorrectly stamp: 'D S 11/10/2020 20:18:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test15 stamp: 'D S 11/10/2020 20:18:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test16 stamp: 'D S 11/10/2020 20:18:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'D S 11/10/2020 20:18:16'!
PASSED!
!ReceptiveAccountTest methodsFor: 'transferNetTests' stamp: 'D S 11/10/2020 20:20:02'!
test18
	|anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anotherAccount to: anAccount amount: 50.
	
	self assert: -50 equals: anAccount transferNet.	! !

!testRun: #ReceptiveAccountTest #test18 stamp: 'D S 11/10/2020 20:20:05'!
FAILURE!

!testRun: #ReceptiveAccountTest #test18 stamp: 'D S 11/10/2020 20:20:05'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 20:22:01' prior: 50896892!
transferNet
	
	transactions isEmpty ifFalse:[(transactions first isKindOf: DepositEnd) ifTrue:[^ transactions first value].
							(transactions first isKindOf: WithdrawEnd) ifTrue:[^ (transactions first value) * (-1)]].
	^ 0! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 20:22:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 20:22:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 20:22:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 20:22:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 20:22:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 20:22:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 20:22:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test08SummaryOfAccountWithoutTransactionsReturnsBalance0 stamp: 'D S 11/10/2020 20:22:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test09SummaryOnAnAccountWithDepositWorksCorrectly stamp: 'D S 11/10/2020 20:22:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test10SummaryReturnsTheBalanceCorrectly stamp: 'D S 11/10/2020 20:22:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test11SummaryOnAccountWithWithdrawWorksCorrectly stamp: 'D S 11/10/2020 20:22:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test12SummaryOnAccountWithExtractionByTransferenceWorksCorrectly stamp: 'D S 11/10/2020 20:22:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test13SummaryOnAccountWithDepositByTransferenceWorksCorrectly stamp: 'D S 11/10/2020 20:22:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test14SummaryOnAccountWithMoreThanOneTransactionWorksCorrectly stamp: 'D S 11/10/2020 20:22:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test15 stamp: 'D S 11/10/2020 20:22:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test16 stamp: 'D S 11/10/2020 20:22:06'!
FAILURE!

!testRun: #ReceptiveAccountTest #test17 stamp: 'D S 11/10/2020 20:22:06'!
FAILURE!

!testRun: #ReceptiveAccountTest #test18 stamp: 'D S 11/10/2020 20:22:06'!
FAILURE!

!testRun: #ReceptiveAccountTest #test16 stamp: 'D S 11/10/2020 20:22:15'!
FAILURE!

!testRun: #ReceptiveAccountTest #test16 stamp: 'D S 11/10/2020 20:22:15'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 20:22:40' prior: 50896977!
transferNet
	
	transactions isEmpty ifFalse:[(transactions first isKindOf: WithdrawEnd) ifTrue:[^ transactions first value].
							(transactions first isKindOf: DepositEnd) ifTrue:[^ (transactions first value) * (-1)]].
	^ 0! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 20:22:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 20:22:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 20:22:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 20:22:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 20:22:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 20:22:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 20:22:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test08SummaryOfAccountWithoutTransactionsReturnsBalance0 stamp: 'D S 11/10/2020 20:22:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test09SummaryOnAnAccountWithDepositWorksCorrectly stamp: 'D S 11/10/2020 20:22:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test10SummaryReturnsTheBalanceCorrectly stamp: 'D S 11/10/2020 20:22:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test11SummaryOnAccountWithWithdrawWorksCorrectly stamp: 'D S 11/10/2020 20:22:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test12SummaryOnAccountWithExtractionByTransferenceWorksCorrectly stamp: 'D S 11/10/2020 20:22:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test13SummaryOnAccountWithDepositByTransferenceWorksCorrectly stamp: 'D S 11/10/2020 20:22:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test14SummaryOnAccountWithMoreThanOneTransactionWorksCorrectly stamp: 'D S 11/10/2020 20:22:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test15 stamp: 'D S 11/10/2020 20:22:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test16 stamp: 'D S 11/10/2020 20:22:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'D S 11/10/2020 20:22:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test18 stamp: 'D S 11/10/2020 20:22:45'!
PASSED!
!ReceptiveAccountTest methodsFor: 'transferNetTests' stamp: 'D S 11/10/2020 20:23:36'!
test19
	|anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anAccount to: anotherAccount amount: 50.
	Transference from: anAccount to: anotherAccount amount: 50.
	
	self assert: -100 equals: anAccount transferNet.	! !
!ReceptiveAccountTest methodsFor: 'transferNetTests' stamp: 'D S 11/10/2020 20:23:40' prior: 50896961!
test18
	|anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anotherAccount to: anAccount amount: 50.
	
	self assert: 50 equals: anAccount transferNet.	! !
!ReceptiveAccountTest methodsFor: 'transferNetTests' stamp: 'D S 11/10/2020 20:23:44' prior: 50896876!
test17
	|anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anAccount to: anotherAccount amount: 100.
	
	self assert: -100 equals: anAccount transferNet.	! !
!ReceptiveAccountTest methodsFor: 'transferNetTests' stamp: 'D S 11/10/2020 20:23:48' prior: 50896866!
test16
	|anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anAccount to: anotherAccount amount: 50.
	
	self assert: -50 equals: anAccount transferNet.	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 20:24:05' prior: 50897059!
transferNet
	
	transactions isEmpty ifFalse:[(transactions first isKindOf: DepositEnd) ifTrue:[^ transactions first value].
							(transactions first isKindOf: WithdrawEnd) ifTrue:[^ (transactions first value) * (-1)]].
	^ 0! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 20:24:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 20:24:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 20:24:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 20:24:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 20:24:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 20:24:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 20:24:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test08SummaryOfAccountWithoutTransactionsReturnsBalance0 stamp: 'D S 11/10/2020 20:24:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test09SummaryOnAnAccountWithDepositWorksCorrectly stamp: 'D S 11/10/2020 20:24:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test10SummaryReturnsTheBalanceCorrectly stamp: 'D S 11/10/2020 20:24:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test11SummaryOnAccountWithWithdrawWorksCorrectly stamp: 'D S 11/10/2020 20:24:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test12SummaryOnAccountWithExtractionByTransferenceWorksCorrectly stamp: 'D S 11/10/2020 20:24:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test13SummaryOnAccountWithDepositByTransferenceWorksCorrectly stamp: 'D S 11/10/2020 20:24:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test14SummaryOnAccountWithMoreThanOneTransactionWorksCorrectly stamp: 'D S 11/10/2020 20:24:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test15 stamp: 'D S 11/10/2020 20:24:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test16 stamp: 'D S 11/10/2020 20:24:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'D S 11/10/2020 20:24:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test18 stamp: 'D S 11/10/2020 20:24:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test19 stamp: 'D S 11/10/2020 20:24:09'!
FAILURE!

!testRun: #ReceptiveAccountTest #test19 stamp: 'D S 11/10/2020 20:24:09'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 20:30:51' prior: 50897181!
transferNet
	|balance|
	balance := 0.
	transactions isEmpty ifFalse:[(transactions first isKindOf: DepositEnd) ifTrue:[balance := balance + transactions first value].
							(transactions first isKindOf: WithdrawEnd) ifTrue:[balance := balance + (transactions first value) * (-1)]].
	transactions size = 2 ifTrue:[(transactions second isKindOf: DepositEnd) ifTrue:[balance := balance + transactions first value]]
	^ balance! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 20:30:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 20:30:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 20:30:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 20:30:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 20:30:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 20:30:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 20:30:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test08SummaryOfAccountWithoutTransactionsReturnsBalance0 stamp: 'D S 11/10/2020 20:30:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test09SummaryOnAnAccountWithDepositWorksCorrectly stamp: 'D S 11/10/2020 20:30:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test10SummaryReturnsTheBalanceCorrectly stamp: 'D S 11/10/2020 20:30:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test11SummaryOnAccountWithWithdrawWorksCorrectly stamp: 'D S 11/10/2020 20:30:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test12SummaryOnAccountWithExtractionByTransferenceWorksCorrectly stamp: 'D S 11/10/2020 20:30:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test13SummaryOnAccountWithDepositByTransferenceWorksCorrectly stamp: 'D S 11/10/2020 20:30:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test14SummaryOnAccountWithMoreThanOneTransactionWorksCorrectly stamp: 'D S 11/10/2020 20:30:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test15 stamp: 'D S 11/10/2020 20:30:55'!
ERROR!

!testRun: #ReceptiveAccountTest #test16 stamp: 'D S 11/10/2020 20:30:55'!
ERROR!

!testRun: #ReceptiveAccountTest #test17 stamp: 'D S 11/10/2020 20:30:55'!
ERROR!

!testRun: #ReceptiveAccountTest #test18 stamp: 'D S 11/10/2020 20:30:55'!
ERROR!

!testRun: #ReceptiveAccountTest #test19 stamp: 'D S 11/10/2020 20:30:55'!
ERROR!

!testRun: #ReceptiveAccountTest #test15 stamp: 'D S 11/10/2020 20:31:03'!
ERROR!

!testRun: #ReceptiveAccountTest #test15 stamp: 'D S 11/10/2020 20:31:03'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 20:31:16' prior: 50897263!
transferNet
	|balance|
	balance := 0.
	transactions isEmpty ifFalse:[(transactions first isKindOf: DepositEnd) ifTrue:[balance := balance + transactions first value].
							(transactions first isKindOf: WithdrawEnd) ifTrue:[balance := balance + (transactions first value) * (-1)]].
	transactions size = 2 ifTrue:[(transactions second isKindOf: DepositEnd) ifTrue:[balance := balance + transactions first value]].
	^ balance! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 20:31:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 20:31:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 20:31:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 20:31:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 20:31:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 20:31:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 20:31:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test08SummaryOfAccountWithoutTransactionsReturnsBalance0 stamp: 'D S 11/10/2020 20:31:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test09SummaryOnAnAccountWithDepositWorksCorrectly stamp: 'D S 11/10/2020 20:31:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test10SummaryReturnsTheBalanceCorrectly stamp: 'D S 11/10/2020 20:31:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test11SummaryOnAccountWithWithdrawWorksCorrectly stamp: 'D S 11/10/2020 20:31:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test12SummaryOnAccountWithExtractionByTransferenceWorksCorrectly stamp: 'D S 11/10/2020 20:31:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test13SummaryOnAccountWithDepositByTransferenceWorksCorrectly stamp: 'D S 11/10/2020 20:31:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test14SummaryOnAccountWithMoreThanOneTransactionWorksCorrectly stamp: 'D S 11/10/2020 20:31:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test15 stamp: 'D S 11/10/2020 20:31:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test16 stamp: 'D S 11/10/2020 20:31:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'D S 11/10/2020 20:31:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test18 stamp: 'D S 11/10/2020 20:31:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test19 stamp: 'D S 11/10/2020 20:31:22'!
FAILURE!

!testRun: #ReceptiveAccountTest #test19 stamp: 'D S 11/10/2020 20:31:22'!
FAILURE!

!testRun: #ReceptiveAccountTest #test19 stamp: 'D S 11/10/2020 20:31:29'!
FAILURE!

!testRun: #ReceptiveAccountTest #test19 stamp: 'D S 11/10/2020 20:31:29'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 20:31:49' prior: 50897353!
transferNet
	|balance|
	balance := 0.
	transactions isEmpty ifFalse:[(transactions first isKindOf: DepositEnd) ifTrue:[balance := balance + transactions first value].
							(transactions first isKindOf: WithdrawEnd) ifTrue:[balance := balance + (transactions first value) * (-1)]].
	(transactions size = 2) ifTrue:[(transactions second isKindOf: DepositEnd) ifTrue:[balance := balance + transactions second value]].
	^ balance! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 20:32:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 20:32:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 20:32:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 20:32:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 20:32:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 20:32:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 20:32:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test08SummaryOfAccountWithoutTransactionsReturnsBalance0 stamp: 'D S 11/10/2020 20:32:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test09SummaryOnAnAccountWithDepositWorksCorrectly stamp: 'D S 11/10/2020 20:32:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test10SummaryReturnsTheBalanceCorrectly stamp: 'D S 11/10/2020 20:32:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test11SummaryOnAccountWithWithdrawWorksCorrectly stamp: 'D S 11/10/2020 20:32:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test12SummaryOnAccountWithExtractionByTransferenceWorksCorrectly stamp: 'D S 11/10/2020 20:32:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test13SummaryOnAccountWithDepositByTransferenceWorksCorrectly stamp: 'D S 11/10/2020 20:32:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test14SummaryOnAccountWithMoreThanOneTransactionWorksCorrectly stamp: 'D S 11/10/2020 20:32:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test15 stamp: 'D S 11/10/2020 20:32:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test16 stamp: 'D S 11/10/2020 20:32:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'D S 11/10/2020 20:32:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test18 stamp: 'D S 11/10/2020 20:32:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test19 stamp: 'D S 11/10/2020 20:32:02'!
FAILURE!

!testRun: #ReceptiveAccountTest #test19 stamp: 'D S 11/10/2020 20:32:02'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 20:32:53' prior: 50897446!
transferNet
	|balance|
	balance := 0.
	transactions isEmpty ifFalse:[(transactions first isKindOf: DepositEnd) ifTrue:[balance := balance + transactions first value].
							(transactions first isKindOf: WithdrawEnd) ifTrue:[balance := balance + (transactions first value) * (-1)]].
	(transactions size = 2) ifTrue:[(transactions second isKindOf:WithdrawEnd) ifTrue:[balance := balance + (transactions second value) * (-1)]].
	^ balance! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 20:32:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 20:32:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 20:32:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 20:32:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 20:32:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 20:32:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 20:32:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test08SummaryOfAccountWithoutTransactionsReturnsBalance0 stamp: 'D S 11/10/2020 20:32:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test09SummaryOnAnAccountWithDepositWorksCorrectly stamp: 'D S 11/10/2020 20:32:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test10SummaryReturnsTheBalanceCorrectly stamp: 'D S 11/10/2020 20:32:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test11SummaryOnAccountWithWithdrawWorksCorrectly stamp: 'D S 11/10/2020 20:32:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test12SummaryOnAccountWithExtractionByTransferenceWorksCorrectly stamp: 'D S 11/10/2020 20:32:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test13SummaryOnAccountWithDepositByTransferenceWorksCorrectly stamp: 'D S 11/10/2020 20:32:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test14SummaryOnAccountWithMoreThanOneTransactionWorksCorrectly stamp: 'D S 11/10/2020 20:32:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test15 stamp: 'D S 11/10/2020 20:32:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test16 stamp: 'D S 11/10/2020 20:32:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'D S 11/10/2020 20:32:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test18 stamp: 'D S 11/10/2020 20:32:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test19 stamp: 'D S 11/10/2020 20:32:57'!
FAILURE!

!testRun: #ReceptiveAccountTest #test19 stamp: 'D S 11/10/2020 20:32:57'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 20:33:27' prior: 50897534!
transferNet
	|balance|
	balance := 0.
	transactions isEmpty ifFalse:[(transactions first isKindOf: DepositEnd) ifTrue:[balance := balance + transactions first value].
							(transactions first isKindOf: WithdrawEnd) ifTrue:[balance := balance + ((transactions first value) * (-1))]].
	(transactions size = 2) ifTrue:[(transactions second isKindOf:WithdrawEnd) ifTrue:[balance := balance + ((transactions second value) * (-1))]].
	^ balance! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 20:33:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 20:33:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 20:33:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 20:33:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 20:33:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 20:33:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 20:33:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test08SummaryOfAccountWithoutTransactionsReturnsBalance0 stamp: 'D S 11/10/2020 20:33:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test09SummaryOnAnAccountWithDepositWorksCorrectly stamp: 'D S 11/10/2020 20:33:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test10SummaryReturnsTheBalanceCorrectly stamp: 'D S 11/10/2020 20:33:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test11SummaryOnAccountWithWithdrawWorksCorrectly stamp: 'D S 11/10/2020 20:33:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test12SummaryOnAccountWithExtractionByTransferenceWorksCorrectly stamp: 'D S 11/10/2020 20:33:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test13SummaryOnAccountWithDepositByTransferenceWorksCorrectly stamp: 'D S 11/10/2020 20:33:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test14SummaryOnAccountWithMoreThanOneTransactionWorksCorrectly stamp: 'D S 11/10/2020 20:33:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test15 stamp: 'D S 11/10/2020 20:33:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test16 stamp: 'D S 11/10/2020 20:33:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'D S 11/10/2020 20:33:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test18 stamp: 'D S 11/10/2020 20:33:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test19 stamp: 'D S 11/10/2020 20:33:36'!
PASSED!
!ReceptiveAccountTest methodsFor: 'transferNetTests' stamp: 'D S 11/10/2020 20:33:51'!
test20
	|anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anotherAccount to: anAccount amount: 50.
	Transference from: anotherAccount to: anAccount amount: 50.
	
	self assert: 50 equals: anAccount transferNet.	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 20:34:32' prior: 50897622!
transferNet
	|balance|
	balance := 0.
	transactions isEmpty ifFalse:[(transactions first isKindOf: DepositEnd) ifTrue:[balance := balance + transactions first value].
							(transactions first isKindOf: WithdrawEnd) ifTrue:[balance := balance + ((transactions first value) * (-1))]].
	(transactions size = 2) ifTrue:[(transactions second isKindOf:WithdrawEnd) ifTrue:[balance := balance + ((transactions second value) * (-1))].
		(transactions second isKindOf:DepositEnd) ifTrue:[balance := balance + transactions second value].]
	^ balance! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 20:34:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 20:34:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 20:34:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 20:34:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 20:34:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 20:34:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 20:34:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test08SummaryOfAccountWithoutTransactionsReturnsBalance0 stamp: 'D S 11/10/2020 20:34:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test09SummaryOnAnAccountWithDepositWorksCorrectly stamp: 'D S 11/10/2020 20:34:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test10SummaryReturnsTheBalanceCorrectly stamp: 'D S 11/10/2020 20:34:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test11SummaryOnAccountWithWithdrawWorksCorrectly stamp: 'D S 11/10/2020 20:34:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test12SummaryOnAccountWithExtractionByTransferenceWorksCorrectly stamp: 'D S 11/10/2020 20:34:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test13SummaryOnAccountWithDepositByTransferenceWorksCorrectly stamp: 'D S 11/10/2020 20:34:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test14SummaryOnAccountWithMoreThanOneTransactionWorksCorrectly stamp: 'D S 11/10/2020 20:34:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test15 stamp: 'D S 11/10/2020 20:34:37'!
ERROR!

!testRun: #ReceptiveAccountTest #test16 stamp: 'D S 11/10/2020 20:34:37'!
ERROR!

!testRun: #ReceptiveAccountTest #test17 stamp: 'D S 11/10/2020 20:34:37'!
ERROR!

!testRun: #ReceptiveAccountTest #test18 stamp: 'D S 11/10/2020 20:34:37'!
ERROR!

!testRun: #ReceptiveAccountTest #test19 stamp: 'D S 11/10/2020 20:34:37'!
ERROR!

!testRun: #ReceptiveAccountTest #test20 stamp: 'D S 11/10/2020 20:34:37'!
ERROR!

!testRun: #ReceptiveAccountTest #test15 stamp: 'D S 11/10/2020 20:34:44'!
ERROR!

!testRun: #ReceptiveAccountTest #test15 stamp: 'D S 11/10/2020 20:34:44'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 20:34:54' prior: 50897719!
transferNet
	|balance|
	balance := 0.
	transactions isEmpty ifFalse:[(transactions first isKindOf: DepositEnd) ifTrue:[balance := balance + transactions first value].
							(transactions first isKindOf: WithdrawEnd) ifTrue:[balance := balance + ((transactions first value) * (-1))]].
	(transactions size = 2) ifTrue:[(transactions second isKindOf:WithdrawEnd) ifTrue:[balance := balance + ((transactions second value) * (-1))].
		(transactions second isKindOf:DepositEnd) ifTrue:[balance := balance + transactions second value].].
	^ balance! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 20:34:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 20:34:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 20:34:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 20:34:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 20:34:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 20:34:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 20:34:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test08SummaryOfAccountWithoutTransactionsReturnsBalance0 stamp: 'D S 11/10/2020 20:34:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test09SummaryOnAnAccountWithDepositWorksCorrectly stamp: 'D S 11/10/2020 20:34:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test10SummaryReturnsTheBalanceCorrectly stamp: 'D S 11/10/2020 20:34:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test11SummaryOnAccountWithWithdrawWorksCorrectly stamp: 'D S 11/10/2020 20:34:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test12SummaryOnAccountWithExtractionByTransferenceWorksCorrectly stamp: 'D S 11/10/2020 20:34:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test13SummaryOnAccountWithDepositByTransferenceWorksCorrectly stamp: 'D S 11/10/2020 20:34:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test14SummaryOnAccountWithMoreThanOneTransactionWorksCorrectly stamp: 'D S 11/10/2020 20:34:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test15 stamp: 'D S 11/10/2020 20:34:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test16 stamp: 'D S 11/10/2020 20:34:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'D S 11/10/2020 20:34:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test18 stamp: 'D S 11/10/2020 20:34:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test19 stamp: 'D S 11/10/2020 20:34:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test20 stamp: 'D S 11/10/2020 20:34:59'!
FAILURE!

!testRun: #ReceptiveAccountTest #test20 stamp: 'D S 11/10/2020 20:34:59'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'transferNetTests' stamp: 'D S 11/10/2020 20:35:05' prior: 50897707!
test20
	|anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anotherAccount to: anAccount amount: 50.
	Transference from: anotherAccount to: anAccount amount: 50.
	
	self assert: 100 equals: anAccount transferNet.	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 20:35:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 20:35:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 20:35:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 20:35:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 20:35:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 20:35:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 20:35:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test08SummaryOfAccountWithoutTransactionsReturnsBalance0 stamp: 'D S 11/10/2020 20:35:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test09SummaryOnAnAccountWithDepositWorksCorrectly stamp: 'D S 11/10/2020 20:35:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test10SummaryReturnsTheBalanceCorrectly stamp: 'D S 11/10/2020 20:35:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test11SummaryOnAccountWithWithdrawWorksCorrectly stamp: 'D S 11/10/2020 20:35:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test12SummaryOnAccountWithExtractionByTransferenceWorksCorrectly stamp: 'D S 11/10/2020 20:35:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test13SummaryOnAccountWithDepositByTransferenceWorksCorrectly stamp: 'D S 11/10/2020 20:35:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test14SummaryOnAccountWithMoreThanOneTransactionWorksCorrectly stamp: 'D S 11/10/2020 20:35:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test15 stamp: 'D S 11/10/2020 20:35:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test16 stamp: 'D S 11/10/2020 20:35:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'D S 11/10/2020 20:35:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test18 stamp: 'D S 11/10/2020 20:35:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test19 stamp: 'D S 11/10/2020 20:35:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test20 stamp: 'D S 11/10/2020 20:35:08'!
PASSED!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 20:36:47' prior: 50897815!
transferNet
	|balance|
	balance := 0.
	transactions do:[:aTransaction | 
		(aTransaction isKindOf: DepositEnd) 
			ifTrue:[balance := balance + aTransaction value].
		(aTransaction first isKindOf: WithdrawEnd) 
			ifTrue:[balance := balance + ((aTransaction value) * (-1))]].
	^ balance! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 20:36:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 20:36:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 20:36:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 20:36:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 20:36:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 20:36:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 20:36:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test08SummaryOfAccountWithoutTransactionsReturnsBalance0 stamp: 'D S 11/10/2020 20:36:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test09SummaryOnAnAccountWithDepositWorksCorrectly stamp: 'D S 11/10/2020 20:36:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test10SummaryReturnsTheBalanceCorrectly stamp: 'D S 11/10/2020 20:36:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test11SummaryOnAccountWithWithdrawWorksCorrectly stamp: 'D S 11/10/2020 20:36:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test12SummaryOnAccountWithExtractionByTransferenceWorksCorrectly stamp: 'D S 11/10/2020 20:36:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test13SummaryOnAccountWithDepositByTransferenceWorksCorrectly stamp: 'D S 11/10/2020 20:36:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test14SummaryOnAccountWithMoreThanOneTransactionWorksCorrectly stamp: 'D S 11/10/2020 20:36:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test15 stamp: 'D S 11/10/2020 20:36:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test16 stamp: 'D S 11/10/2020 20:36:54'!
ERROR!

!testRun: #ReceptiveAccountTest #test17 stamp: 'D S 11/10/2020 20:36:54'!
ERROR!

!testRun: #ReceptiveAccountTest #test18 stamp: 'D S 11/10/2020 20:36:54'!
ERROR!

!testRun: #ReceptiveAccountTest #test19 stamp: 'D S 11/10/2020 20:36:54'!
ERROR!

!testRun: #ReceptiveAccountTest #test20 stamp: 'D S 11/10/2020 20:36:54'!
ERROR!

!testRun: #ReceptiveAccountTest #test15 stamp: 'D S 11/10/2020 20:37:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test16 stamp: 'D S 11/10/2020 20:37:04'!
ERROR!

!testRun: #ReceptiveAccountTest #test16 stamp: 'D S 11/10/2020 20:37:04'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/10/2020 20:37:16' prior: 50897992!
transferNet
	|balance|
	balance := 0.
	transactions do:[:aTransaction | 
		(aTransaction isKindOf: DepositEnd) 
			ifTrue:[balance := balance + aTransaction value].
		(aTransaction isKindOf: WithdrawEnd) 
			ifTrue:[balance := balance + ((aTransaction value) * (-1))]].
	^ balance! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/10/2020 20:37:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 20:37:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/10/2020 20:37:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/10/2020 20:37:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/10/2020 20:37:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/10/2020 20:37:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/10/2020 20:37:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test08SummaryOfAccountWithoutTransactionsReturnsBalance0 stamp: 'D S 11/10/2020 20:37:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test09SummaryOnAnAccountWithDepositWorksCorrectly stamp: 'D S 11/10/2020 20:37:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test10SummaryReturnsTheBalanceCorrectly stamp: 'D S 11/10/2020 20:37:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test11SummaryOnAccountWithWithdrawWorksCorrectly stamp: 'D S 11/10/2020 20:37:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test12SummaryOnAccountWithExtractionByTransferenceWorksCorrectly stamp: 'D S 11/10/2020 20:37:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test13SummaryOnAccountWithDepositByTransferenceWorksCorrectly stamp: 'D S 11/10/2020 20:37:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test14SummaryOnAccountWithMoreThanOneTransactionWorksCorrectly stamp: 'D S 11/10/2020 20:37:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test15 stamp: 'D S 11/10/2020 20:37:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test16 stamp: 'D S 11/10/2020 20:37:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'D S 11/10/2020 20:37:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test18 stamp: 'D S 11/10/2020 20:37:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test19 stamp: 'D S 11/10/2020 20:37:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test20 stamp: 'D S 11/10/2020 20:37:21'!
PASSED!
!ReceptiveAccountTest methodsFor: 'transferNetTests' stamp: 'D S 11/10/2020 20:40:51'!
test15TransferNetReturn0WhenNotHavingTransactions
	|anAccount|
	anAccount := ReceptiveAccount new.
	
	self assert: 0 equals: anAccount transferNet.	! !

!methodRemoval: ReceptiveAccountTest #test15 stamp: 'D S 11/10/2020 20:40:51'!
test15
	|anAccount|
	anAccount := ReceptiveAccount new.
	
	self assert: 0 equals: anAccount transferNet.	!
!ReceptiveAccountTest methodsFor: 'transferNetTests' stamp: 'D S 11/10/2020 20:41:01'!
test15TransferNetReturn0WhenNotHavingTransferences
	|anAccount|
	anAccount := ReceptiveAccount new.
	
	self assert: 0 equals: anAccount transferNet.	! !

!methodRemoval: ReceptiveAccountTest #test15TransferNetReturn0WhenNotHavingTransactions stamp: 'D S 11/10/2020 20:41:01'!
test15TransferNetReturn0WhenNotHavingTransactions
	|anAccount|
	anAccount := ReceptiveAccount new.
	
	self assert: 0 equals: anAccount transferNet.	!
!ReceptiveAccountTest methodsFor: 'transferNetTests' stamp: 'D S 11/10/2020 20:41:45'!
test16WithDrawEndAffectTheBalanceResultNegatively
	|anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anAccount to: anotherAccount amount: 50.
	
	self assert: -50 equals: anAccount transferNet.	! !

!methodRemoval: ReceptiveAccountTest #test16 stamp: 'D S 11/10/2020 20:41:45'!
test16
	|anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anAccount to: anotherAccount amount: 50.
	
	self assert: -50 equals: anAccount transferNet.	!

!methodRemoval: ReceptiveAccountTest #test17 stamp: 'D S 11/10/2020 20:41:50'!
test17
	|anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anAccount to: anotherAccount amount: 100.
	
	self assert: -100 equals: anAccount transferNet.	!
!ReceptiveAccountTest methodsFor: 'transferNetTests' stamp: 'D S 11/10/2020 20:42:05'!
test17DepositEndAffectTheBalancePositively
	|anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anotherAccount to: anAccount amount: 50.
	
	self assert: 50 equals: anAccount transferNet.	! !

!methodRemoval: ReceptiveAccountTest #test18 stamp: 'D S 11/10/2020 20:42:05'!
test18
	|anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anotherAccount to: anAccount amount: 50.
	
	self assert: 50 equals: anAccount transferNet.	!
!ReceptiveAccountTest methodsFor: 'transferNetTests' stamp: 'D S 11/10/2020 20:43:33'!
test19WithdrawEndAcumulatesCorrectly
	|anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anAccount to: anotherAccount amount: 50.
	Transference from: anAccount to: anotherAccount amount: 50.
	
	self assert: -100 equals: anAccount transferNet.	! !

!methodRemoval: ReceptiveAccountTest #test19 stamp: 'D S 11/10/2020 20:43:33'!
test19
	|anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anAccount to: anotherAccount amount: 50.
	Transference from: anAccount to: anotherAccount amount: 50.
	
	self assert: -100 equals: anAccount transferNet.	!
!ReceptiveAccountTest methodsFor: 'transferNetTests' stamp: 'D S 11/10/2020 20:43:45'!
test20DepositEndAccumulatesCorrectly
	|anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anotherAccount to: anAccount amount: 50.
	Transference from: anotherAccount to: anAccount amount: 50.
	
	self assert: 100 equals: anAccount transferNet.	! !

!methodRemoval: ReceptiveAccountTest #test20 stamp: 'D S 11/10/2020 20:43:45'!
test20
	|anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anotherAccount to: anAccount amount: 50.
	Transference from: anotherAccount to: anAccount amount: 50.
	
	self assert: 100 equals: anAccount transferNet.	!
!ReceptiveAccountTest methodsFor: 'transferNetTests' stamp: 'D S 11/10/2020 20:43:50'!
test19WithdrawEndAccumulatesCorrectly
	|anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anAccount to: anotherAccount amount: 50.
	Transference from: anAccount to: anotherAccount amount: 50.
	
	self assert: -100 equals: anAccount transferNet.	! !

!methodRemoval: ReceptiveAccountTest #test19WithdrawEndAcumulatesCorrectly stamp: 'D S 11/10/2020 20:43:50'!
test19WithdrawEndAcumulatesCorrectly
	|anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anAccount to: anotherAccount amount: 50.
	Transference from: anAccount to: anotherAccount amount: 50.
	
	self assert: -100 equals: anAccount transferNet.	!

----SNAPSHOT----(10 November 2020 20:57:52) CuisUniversity-4383.image priorSource: 18081056!

----QUIT----(10 November 2020 20:57:54) CuisUniversity-4383.image priorSource: 18133580!

----STARTUP---- (12 November 2020 19:53:01) as /home/dn-01/Escritorio/Ingenieria en Software I/CuisLimpio/CuisUniversity-4383.image!

!ReceptiveAccountTest methodsFor: 'transferNetTests' stamp: 'D S 11/12/2020 19:54:40'!
test18WithdrawEndAccumulatesCorrectly
	|anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anAccount to: anotherAccount amount: 50.
	Transference from: anAccount to: anotherAccount amount: 50.
	
	self assert: -100 equals: anAccount transferNet.	! !

!methodRemoval: ReceptiveAccountTest #test19WithdrawEndAccumulatesCorrectly stamp: 'D S 11/12/2020 19:54:40'!
test19WithdrawEndAccumulatesCorrectly
	|anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anAccount to: anotherAccount amount: 50.
	Transference from: anAccount to: anotherAccount amount: 50.
	
	self assert: -100 equals: anAccount transferNet.	!
!ReceptiveAccountTest methodsFor: 'transferNetTests' stamp: 'D S 11/12/2020 19:54:46'!
test19DepositEndAccumulatesCorrectly
	|anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anotherAccount to: anAccount amount: 50.
	Transference from: anotherAccount to: anAccount amount: 50.
	
	self assert: 100 equals: anAccount transferNet.	! !

!methodRemoval: ReceptiveAccountTest #test20DepositEndAccumulatesCorrectly stamp: 'D S 11/12/2020 19:54:46'!
test20DepositEndAccumulatesCorrectly
	|anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anotherAccount to: anAccount amount: 50.
	Transference from: anotherAccount to: anAccount amount: 50.
	
	self assert: 100 equals: anAccount transferNet.	!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/12/2020 20:00:22' prior: 50896366!
accountSummary
	|report |
	
	report:= OrderedCollection new.
	transactions do:[: aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue:[report add: 'Deposit por ', aTransaction value asString].
		(aTransaction isKindOf: Withdraw) ifTrue:[report add: 'Extraccion por ', aTransaction value asString].
		(aTransaction isKindOf: WithdrawEnd) ifTrue:[report add: 'Salida por transferencia de ', aTransaction value asString].
		(aTransaction isKindOf: DepositEnd)ifTrue: [report add: 'Entrada por transferencia de ', aTransaction value asString]].
	report add: 'balance = ', self balance asString.
	^ report! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test08SummaryOfAccountWithoutTransactionsReturnsBalance0 stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test09SummaryOnAnAccountWithDepositWorksCorrectly stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test10SummaryReturnsTheBalanceCorrectly stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test11SummaryOnAccountWithWithdrawWorksCorrectly stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test12SummaryOnAccountWithExtractionByTransferenceWorksCorrectly stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test13SummaryOnAccountWithDepositByTransferenceWorksCorrectly stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test14SummaryOnAccountWithMoreThanOneTransactionWorksCorrectly stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test15TransferNetReturn0WhenNotHavingTransferences stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test16WithDrawEndAffectTheBalanceResultNegatively stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test17DepositEndAffectTheBalancePositively stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test18WithdrawEndAccumulatesCorrectly stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test19DepositEndAccumulatesCorrectly stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #TransferenceTest #test01TransactionInitializeCorrectly stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #TransferenceTest #test02TransactionAffectsCorrectly stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #TransferenceTest #test03EachEndOfTransferenceAppearsCorrectlyInAccounts stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #TransferenceTest #test04FromOneTransferenceEndCanReachToTheAnother stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #TransferenceTest #test05ValueFromEachEndAreTheSame stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #TransferenceTest #test06RaiseErrorWhenAmountToTransferIsNEGATIVE stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #TransferenceTest #test07RaiseErrorWhenAccountToTransferIsEqualToAccountToExtract stamp: 'D S 11/12/2020 21:16:51'!
PASSED!

!testRun: #TransferenceTest #test08RaiseErrorWhenAmountToTransferIsZERO stamp: 'D S 11/12/2020 21:16:51'!
PASSED!
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/12/2020 21:20:40'!
test20
	| aPortfolio |
	aPortfolio := Portfolio new.
	
	self assert: (Portfolio accountSummary includes: 'Balance = 0').
! !
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/12/2020 21:20:49' prior: 50898574!
test20
	| aPortfolio |
	aPortfolio := Portfolio new.
	
	self assert: (aPortfolio accountSummary includes: 'Balance = 0').
! !

!testRun: #ReceptiveAccountTest #test20 stamp: 'D S 11/12/2020 21:20:52'!
ERROR!

!testRun: #ReceptiveAccountTest #test20 stamp: 'D S 11/12/2020 21:20:52'!
ERROR!
!Portfolio methodsFor: 'accounts management' stamp: 'D S 11/12/2020 21:21:15'!
accountSummary! !
!Portfolio methodsFor: 'accounts management' stamp: 'D S 11/12/2020 21:21:41' prior: 50898594!
accountSummary

	^OrderedCollection with: 'Balance = 0'! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/12/2020 21:21:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/12/2020 21:21:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/12/2020 21:21:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/12/2020 21:21:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/12/2020 21:21:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/12/2020 21:21:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/12/2020 21:21:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test08SummaryOfAccountWithoutTransactionsReturnsBalance0 stamp: 'D S 11/12/2020 21:21:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test09SummaryOnAnAccountWithDepositWorksCorrectly stamp: 'D S 11/12/2020 21:21:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test10SummaryReturnsTheBalanceCorrectly stamp: 'D S 11/12/2020 21:21:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test11SummaryOnAccountWithWithdrawWorksCorrectly stamp: 'D S 11/12/2020 21:21:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test12SummaryOnAccountWithExtractionByTransferenceWorksCorrectly stamp: 'D S 11/12/2020 21:21:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test13SummaryOnAccountWithDepositByTransferenceWorksCorrectly stamp: 'D S 11/12/2020 21:21:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test14SummaryOnAccountWithMoreThanOneTransactionWorksCorrectly stamp: 'D S 11/12/2020 21:21:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test15TransferNetReturn0WhenNotHavingTransferences stamp: 'D S 11/12/2020 21:21:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test16WithDrawEndAffectTheBalanceResultNegatively stamp: 'D S 11/12/2020 21:21:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test17DepositEndAffectTheBalancePositively stamp: 'D S 11/12/2020 21:21:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test18WithdrawEndAccumulatesCorrectly stamp: 'D S 11/12/2020 21:21:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test19DepositEndAccumulatesCorrectly stamp: 'D S 11/12/2020 21:21:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test20 stamp: 'D S 11/12/2020 21:21:54'!
PASSED!
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/12/2020 21:22:51' prior: 50898582!
test20
	| aPortfolio anAccount|
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	
	self assert: (aPortfolio accountSummary includes: 'Deposit por 100').! !
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/12/2020 21:22:58'!
test21
	| aPortfolio anAccount|
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	
	self assert: (aPortfolio accountSummary includes: 'Deposit por 100').! !
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/12/2020 21:20:49' prior: 50898680!
test20
	| aPortfolio |
	aPortfolio := Portfolio new.
	
	self assert: (aPortfolio accountSummary includes: 'Balance = 0').
! !

!testRun: #ReceptiveAccountTest #test21 stamp: 'D S 11/12/2020 21:23:51'!
FAILURE!

!testRun: #ReceptiveAccountTest #test21 stamp: 'D S 11/12/2020 21:23:51'!
FAILURE!
!Portfolio methodsFor: 'accounts management' stamp: 'D S 11/12/2020 21:24:53' prior: 50898598!
accountSummary

	(accounts isEmpty) ifFalse: [accounts first accountSummary].
	^OrderedCollection with: 'Balance = 0'! !

!testRun: #ReceptiveAccountTest #test08SummaryOfAccountWithoutTransactionsReturnsBalance0 stamp: 'D S 11/12/2020 21:25:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test09SummaryOnAnAccountWithDepositWorksCorrectly stamp: 'D S 11/12/2020 21:25:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test10SummaryReturnsTheBalanceCorrectly stamp: 'D S 11/12/2020 21:25:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test11SummaryOnAccountWithWithdrawWorksCorrectly stamp: 'D S 11/12/2020 21:25:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test12SummaryOnAccountWithExtractionByTransferenceWorksCorrectly stamp: 'D S 11/12/2020 21:25:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test13SummaryOnAccountWithDepositByTransferenceWorksCorrectly stamp: 'D S 11/12/2020 21:25:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test14SummaryOnAccountWithMoreThanOneTransactionWorksCorrectly stamp: 'D S 11/12/2020 21:25:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test20 stamp: 'D S 11/12/2020 21:25:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test21 stamp: 'D S 11/12/2020 21:25:01'!
FAILURE!

!testRun: #ReceptiveAccountTest #test21 stamp: 'D S 11/12/2020 21:25:01'!
FAILURE!
!Portfolio methodsFor: 'accounts management' stamp: 'D S 11/12/2020 21:25:59' prior: 50898713!
accountSummary

	(accounts isEmpty) ifFalse: [^accounts first accountSummary].
	^OrderedCollection with: 'Balance = 0'! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/12/2020 21:26:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/12/2020 21:26:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/12/2020 21:26:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/12/2020 21:26:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/12/2020 21:26:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/12/2020 21:26:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/12/2020 21:26:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test08SummaryOfAccountWithoutTransactionsReturnsBalance0 stamp: 'D S 11/12/2020 21:26:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test09SummaryOnAnAccountWithDepositWorksCorrectly stamp: 'D S 11/12/2020 21:26:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test10SummaryReturnsTheBalanceCorrectly stamp: 'D S 11/12/2020 21:26:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test11SummaryOnAccountWithWithdrawWorksCorrectly stamp: 'D S 11/12/2020 21:26:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test12SummaryOnAccountWithExtractionByTransferenceWorksCorrectly stamp: 'D S 11/12/2020 21:26:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test13SummaryOnAccountWithDepositByTransferenceWorksCorrectly stamp: 'D S 11/12/2020 21:26:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test14SummaryOnAccountWithMoreThanOneTransactionWorksCorrectly stamp: 'D S 11/12/2020 21:26:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test15TransferNetReturn0WhenNotHavingTransferences stamp: 'D S 11/12/2020 21:26:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test16WithDrawEndAffectTheBalanceResultNegatively stamp: 'D S 11/12/2020 21:26:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test17DepositEndAffectTheBalancePositively stamp: 'D S 11/12/2020 21:26:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test18WithdrawEndAccumulatesCorrectly stamp: 'D S 11/12/2020 21:26:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test19DepositEndAccumulatesCorrectly stamp: 'D S 11/12/2020 21:26:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test20 stamp: 'D S 11/12/2020 21:26:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test21 stamp: 'D S 11/12/2020 21:26:03'!
FAILURE!

!testRun: #ReceptiveAccountTest #test21 stamp: 'D S 11/12/2020 21:26:03'!
FAILURE!
!Portfolio methodsFor: 'accounts management' stamp: 'D S 11/12/2020 21:26:16' prior: 50898757!
accountSummary

	(accounts isEmpty) ifFalse: [^(accounts first accountSummary)].
	^OrderedCollection with: 'Balance = 0'! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/12/2020 21:26:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/12/2020 21:26:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/12/2020 21:26:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/12/2020 21:26:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/12/2020 21:26:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/12/2020 21:26:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/12/2020 21:26:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test08SummaryOfAccountWithoutTransactionsReturnsBalance0 stamp: 'D S 11/12/2020 21:26:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test09SummaryOnAnAccountWithDepositWorksCorrectly stamp: 'D S 11/12/2020 21:26:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test10SummaryReturnsTheBalanceCorrectly stamp: 'D S 11/12/2020 21:26:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test11SummaryOnAccountWithWithdrawWorksCorrectly stamp: 'D S 11/12/2020 21:26:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test12SummaryOnAccountWithExtractionByTransferenceWorksCorrectly stamp: 'D S 11/12/2020 21:26:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test13SummaryOnAccountWithDepositByTransferenceWorksCorrectly stamp: 'D S 11/12/2020 21:26:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test14SummaryOnAccountWithMoreThanOneTransactionWorksCorrectly stamp: 'D S 11/12/2020 21:26:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test15TransferNetReturn0WhenNotHavingTransferences stamp: 'D S 11/12/2020 21:26:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test16WithDrawEndAffectTheBalanceResultNegatively stamp: 'D S 11/12/2020 21:26:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test17DepositEndAffectTheBalancePositively stamp: 'D S 11/12/2020 21:26:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test18WithdrawEndAccumulatesCorrectly stamp: 'D S 11/12/2020 21:26:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test19DepositEndAccumulatesCorrectly stamp: 'D S 11/12/2020 21:26:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test20 stamp: 'D S 11/12/2020 21:26:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test21 stamp: 'D S 11/12/2020 21:26:20'!
FAILURE!

!testRun: #ReceptiveAccountTest #test21 stamp: 'D S 11/12/2020 21:26:20'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/12/2020 21:26:42' prior: 50898690!
test21
	| aPortfolio anAccount|
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	
	self assert: (aPortfolio accountSummary includes: 'Deposito por 100').! !
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/12/2020 21:26:47' prior: 50896593!
test14SummaryOnAccountWithMoreThanOneTransactionWorksCorrectly
	| anAccount |
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Deposit register: 200 on: anAccount.
	
	self assert: (anAccount accountSummary includes: 'Deposito por 100').
	self assert: (anAccount accountSummary includes: 'Deposito por 200').! !
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/12/2020 21:26:54' prior: 50896454!
test09SummaryOnAnAccountWithDepositWorksCorrectly
	| anAccount |
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	
	self assert: (anAccount accountSummary includes: 'Deposito por 100').! !
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/12/2020 21:26:58' prior: 50896472!
test10SummaryReturnsTheBalanceCorrectly
	| anAccount |
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	
	self assert: (anAccount accountSummary includes: 'Balance = 100').! !
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/12/2020 21:27:02' prior: 50896439!
test08SummaryOfAccountWithoutTransactionsReturnsBalance0
	| anAccount |
	anAccount := ReceptiveAccount new.
	
	self assert: (anAccount accountSummary includes: 'Balance = 0').! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/12/2020 21:27:23' prior: 50898390!
accountSummary
	|report |
	
	report:= OrderedCollection new.
	transactions do:[: aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue:[report add: 'Deposito por ', aTransaction value asString].
		(aTransaction isKindOf: Withdraw) ifTrue:[report add: 'Extraccion por ', aTransaction value asString].
		(aTransaction isKindOf: WithdrawEnd) ifTrue:[report add: 'Salida por transferencia de ', aTransaction value asString].
		(aTransaction isKindOf: DepositEnd)ifTrue: [report add: 'Entrada por transferencia de ', aTransaction value asString]].
	report add: 'Balance = ', self balance asString.
	^ report! !

!testRun: #ReceptiveAccountTest #test08SummaryOfAccountWithoutTransactionsReturnsBalance0 stamp: 'D S 11/12/2020 21:27:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test09SummaryOnAnAccountWithDepositWorksCorrectly stamp: 'D S 11/12/2020 21:27:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test10SummaryReturnsTheBalanceCorrectly stamp: 'D S 11/12/2020 21:27:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test11SummaryOnAccountWithWithdrawWorksCorrectly stamp: 'D S 11/12/2020 21:27:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test12SummaryOnAccountWithExtractionByTransferenceWorksCorrectly stamp: 'D S 11/12/2020 21:27:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test13SummaryOnAccountWithDepositByTransferenceWorksCorrectly stamp: 'D S 11/12/2020 21:27:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test14SummaryOnAccountWithMoreThanOneTransactionWorksCorrectly stamp: 'D S 11/12/2020 21:27:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test20 stamp: 'D S 11/12/2020 21:27:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test21 stamp: 'D S 11/12/2020 21:27:33'!
FAILURE!

!testRun: #ReceptiveAccountTest #test21 stamp: 'D S 11/12/2020 21:27:33'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/12/2020 21:28:19' prior: 50898936!
test21
	| aPortfolio anAccount|
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	aPortfolio add: anAccount.
	Deposit register: 100 on: anAccount.
	
	self assert: (aPortfolio accountSummary includes: 'Deposito por 100').! !
!Account methodsFor: 'transactions' stamp: 'D S 11/12/2020 21:29:12'!
accountSummary

	self subclassResponsibility ! !
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/12/2020 21:30:14'!
test22
	| aPortfolio anAccount anAccount2|
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	Deposit register: 300 on: anAccount2.
	Deposit register: 100 on: anAccount.
	
	self assert: (aPortfolio accountSummary includes: 'Deposito por 100').! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/12/2020 21:30:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/12/2020 21:30:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/12/2020 21:30:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/12/2020 21:30:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/12/2020 21:30:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/12/2020 21:30:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/12/2020 21:30:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test08SummaryOfAccountWithoutTransactionsReturnsBalance0 stamp: 'D S 11/12/2020 21:30:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test09SummaryOnAnAccountWithDepositWorksCorrectly stamp: 'D S 11/12/2020 21:30:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test10SummaryReturnsTheBalanceCorrectly stamp: 'D S 11/12/2020 21:30:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test11SummaryOnAccountWithWithdrawWorksCorrectly stamp: 'D S 11/12/2020 21:30:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test12SummaryOnAccountWithExtractionByTransferenceWorksCorrectly stamp: 'D S 11/12/2020 21:30:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test13SummaryOnAccountWithDepositByTransferenceWorksCorrectly stamp: 'D S 11/12/2020 21:30:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test14SummaryOnAccountWithMoreThanOneTransactionWorksCorrectly stamp: 'D S 11/12/2020 21:30:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test15TransferNetReturn0WhenNotHavingTransferences stamp: 'D S 11/12/2020 21:30:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test16WithDrawEndAffectTheBalanceResultNegatively stamp: 'D S 11/12/2020 21:30:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test17DepositEndAffectTheBalancePositively stamp: 'D S 11/12/2020 21:30:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test18WithdrawEndAccumulatesCorrectly stamp: 'D S 11/12/2020 21:30:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test19DepositEndAccumulatesCorrectly stamp: 'D S 11/12/2020 21:30:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test20 stamp: 'D S 11/12/2020 21:30:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test21 stamp: 'D S 11/12/2020 21:30:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test22 stamp: 'D S 11/12/2020 21:30:26'!
PASSED!
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/12/2020 21:30:34' prior: 50899064!
test22
	| aPortfolio anAccount anAccount2|
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	Deposit register: 300 on: anAccount2.
	Deposit register: 100 on: anAccount.
	
	self assert: (aPortfolio accountSummary includes: 'Deposito por 300').! !

!testRun: #ReceptiveAccountTest #test22 stamp: 'D S 11/12/2020 21:30:36'!
FAILURE!

!testRun: #ReceptiveAccountTest #test22 stamp: 'D S 11/12/2020 21:30:36'!
FAILURE!
!Portfolio methodsFor: 'accounts management' stamp: 'D S 11/12/2020 21:31:50' prior: 50898846 overrides: 50899059!
accountSummary

	(accounts isEmpty) ifFalse: [
		(accounts size = 1) ifTrue:[^(accounts first accountSummary)]
						ifFalse:[^OrderedCollection with: 'Deposito por 300']].
	^OrderedCollection with: 'Balance = 0'! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/12/2020 21:31:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/12/2020 21:31:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/12/2020 21:31:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/12/2020 21:31:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/12/2020 21:31:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/12/2020 21:31:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/12/2020 21:31:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test08SummaryOfAccountWithoutTransactionsReturnsBalance0 stamp: 'D S 11/12/2020 21:31:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test09SummaryOnAnAccountWithDepositWorksCorrectly stamp: 'D S 11/12/2020 21:31:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test10SummaryReturnsTheBalanceCorrectly stamp: 'D S 11/12/2020 21:31:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test11SummaryOnAccountWithWithdrawWorksCorrectly stamp: 'D S 11/12/2020 21:31:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test12SummaryOnAccountWithExtractionByTransferenceWorksCorrectly stamp: 'D S 11/12/2020 21:31:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test13SummaryOnAccountWithDepositByTransferenceWorksCorrectly stamp: 'D S 11/12/2020 21:31:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test14SummaryOnAccountWithMoreThanOneTransactionWorksCorrectly stamp: 'D S 11/12/2020 21:31:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test15TransferNetReturn0WhenNotHavingTransferences stamp: 'D S 11/12/2020 21:31:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test16WithDrawEndAffectTheBalanceResultNegatively stamp: 'D S 11/12/2020 21:31:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test17DepositEndAffectTheBalancePositively stamp: 'D S 11/12/2020 21:31:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test18WithdrawEndAccumulatesCorrectly stamp: 'D S 11/12/2020 21:31:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test19DepositEndAccumulatesCorrectly stamp: 'D S 11/12/2020 21:31:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test20 stamp: 'D S 11/12/2020 21:31:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test21 stamp: 'D S 11/12/2020 21:31:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test22 stamp: 'D S 11/12/2020 21:31:58'!
PASSED!
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/12/2020 21:32:14'!
test23
	| aPortfolio anAccount anAccount2|
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	Deposit register: 300 on: anAccount2.
	Deposit register: 100 on: anAccount.
	
	self assert: (aPortfolio accountSummary includes: 'Balance = 400').! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/12/2020 21:32:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/12/2020 21:32:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/12/2020 21:32:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/12/2020 21:32:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/12/2020 21:32:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/12/2020 21:32:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/12/2020 21:32:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test08SummaryOfAccountWithoutTransactionsReturnsBalance0 stamp: 'D S 11/12/2020 21:32:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test09SummaryOnAnAccountWithDepositWorksCorrectly stamp: 'D S 11/12/2020 21:32:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test10SummaryReturnsTheBalanceCorrectly stamp: 'D S 11/12/2020 21:32:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test11SummaryOnAccountWithWithdrawWorksCorrectly stamp: 'D S 11/12/2020 21:32:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test12SummaryOnAccountWithExtractionByTransferenceWorksCorrectly stamp: 'D S 11/12/2020 21:32:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test13SummaryOnAccountWithDepositByTransferenceWorksCorrectly stamp: 'D S 11/12/2020 21:32:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test14SummaryOnAccountWithMoreThanOneTransactionWorksCorrectly stamp: 'D S 11/12/2020 21:32:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test15TransferNetReturn0WhenNotHavingTransferences stamp: 'D S 11/12/2020 21:32:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test16WithDrawEndAffectTheBalanceResultNegatively stamp: 'D S 11/12/2020 21:32:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test17DepositEndAffectTheBalancePositively stamp: 'D S 11/12/2020 21:32:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test18WithdrawEndAccumulatesCorrectly stamp: 'D S 11/12/2020 21:32:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test19DepositEndAccumulatesCorrectly stamp: 'D S 11/12/2020 21:32:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test20 stamp: 'D S 11/12/2020 21:32:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test21 stamp: 'D S 11/12/2020 21:32:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test22 stamp: 'D S 11/12/2020 21:32:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test23 stamp: 'D S 11/12/2020 21:32:23'!
FAILURE!

!testRun: #ReceptiveAccountTest #test23 stamp: 'D S 11/12/2020 21:32:23'!
FAILURE!
!Portfolio methodsFor: 'accounts management' stamp: 'D S 11/12/2020 21:32:42' prior: 50899181 overrides: 50899059!
accountSummary

	(accounts isEmpty) ifFalse: [
		(accounts size = 1) ifTrue:[^(accounts first accountSummary)]
						ifFalse:[^OrderedCollection with: 'Deposito por 300' with: 'Balance = 400']].
	^OrderedCollection with: 'Balance = 0'! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/12/2020 21:32:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/12/2020 21:32:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/12/2020 21:32:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/12/2020 21:32:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/12/2020 21:32:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/12/2020 21:32:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/12/2020 21:32:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test08SummaryOfAccountWithoutTransactionsReturnsBalance0 stamp: 'D S 11/12/2020 21:32:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test09SummaryOnAnAccountWithDepositWorksCorrectly stamp: 'D S 11/12/2020 21:32:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test10SummaryReturnsTheBalanceCorrectly stamp: 'D S 11/12/2020 21:32:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test11SummaryOnAccountWithWithdrawWorksCorrectly stamp: 'D S 11/12/2020 21:32:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test12SummaryOnAccountWithExtractionByTransferenceWorksCorrectly stamp: 'D S 11/12/2020 21:32:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test13SummaryOnAccountWithDepositByTransferenceWorksCorrectly stamp: 'D S 11/12/2020 21:32:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test14SummaryOnAccountWithMoreThanOneTransactionWorksCorrectly stamp: 'D S 11/12/2020 21:32:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test15TransferNetReturn0WhenNotHavingTransferences stamp: 'D S 11/12/2020 21:32:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test16WithDrawEndAffectTheBalanceResultNegatively stamp: 'D S 11/12/2020 21:32:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test17DepositEndAffectTheBalancePositively stamp: 'D S 11/12/2020 21:32:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test18WithdrawEndAccumulatesCorrectly stamp: 'D S 11/12/2020 21:32:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test19DepositEndAccumulatesCorrectly stamp: 'D S 11/12/2020 21:32:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test20 stamp: 'D S 11/12/2020 21:32:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test21 stamp: 'D S 11/12/2020 21:32:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test22 stamp: 'D S 11/12/2020 21:32:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test23 stamp: 'D S 11/12/2020 21:32:47'!
PASSED!
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/12/2020 21:33:14'!
test24
	| aPortfolio anAccount anAccount2|
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	Deposit register: 300 on: anAccount2.
	Deposit register: 200 on: anAccount.
	
	self assert: (aPortfolio accountSummary includes: 'Balance = 500').! !

!testRun: #ReceptiveAccountTest #test24 stamp: 'D S 11/12/2020 21:33:18'!
FAILURE!

!testRun: #ReceptiveAccountTest #test24 stamp: 'D S 11/12/2020 21:33:18'!
FAILURE!
!Portfolio methodsFor: 'accounts management' stamp: 'D S 11/12/2020 21:33:43' prior: 50899375 overrides: 50899059!
accountSummary

	(accounts isEmpty) ifFalse: [
		(accounts size = 1) ifTrue:[^(accounts first accountSummary)]
						ifFalse:[^OrderedCollection with: 'Deposito por 300' with: ('Balance = ', self balance)]].
	^OrderedCollection with: 'Balance = 0'! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/12/2020 21:33:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/12/2020 21:33:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/12/2020 21:33:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/12/2020 21:33:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/12/2020 21:33:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/12/2020 21:33:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/12/2020 21:33:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test08SummaryOfAccountWithoutTransactionsReturnsBalance0 stamp: 'D S 11/12/2020 21:33:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test09SummaryOnAnAccountWithDepositWorksCorrectly stamp: 'D S 11/12/2020 21:33:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test10SummaryReturnsTheBalanceCorrectly stamp: 'D S 11/12/2020 21:33:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test11SummaryOnAccountWithWithdrawWorksCorrectly stamp: 'D S 11/12/2020 21:33:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test12SummaryOnAccountWithExtractionByTransferenceWorksCorrectly stamp: 'D S 11/12/2020 21:33:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test13SummaryOnAccountWithDepositByTransferenceWorksCorrectly stamp: 'D S 11/12/2020 21:33:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test14SummaryOnAccountWithMoreThanOneTransactionWorksCorrectly stamp: 'D S 11/12/2020 21:33:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test15TransferNetReturn0WhenNotHavingTransferences stamp: 'D S 11/12/2020 21:33:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test16WithDrawEndAffectTheBalanceResultNegatively stamp: 'D S 11/12/2020 21:33:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test17DepositEndAffectTheBalancePositively stamp: 'D S 11/12/2020 21:33:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test18WithdrawEndAccumulatesCorrectly stamp: 'D S 11/12/2020 21:33:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test19DepositEndAccumulatesCorrectly stamp: 'D S 11/12/2020 21:33:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test20 stamp: 'D S 11/12/2020 21:33:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test21 stamp: 'D S 11/12/2020 21:33:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test22 stamp: 'D S 11/12/2020 21:33:48'!
ERROR!

!testRun: #ReceptiveAccountTest #test23 stamp: 'D S 11/12/2020 21:33:48'!
ERROR!

!testRun: #ReceptiveAccountTest #test24 stamp: 'D S 11/12/2020 21:33:48'!
ERROR!

!testRun: #ReceptiveAccountTest #test22 stamp: 'D S 11/12/2020 21:34:00'!
ERROR!

!testRun: #ReceptiveAccountTest #test22 stamp: 'D S 11/12/2020 21:34:00'!
ERROR!
!Portfolio methodsFor: 'accounts management' stamp: 'D S 11/12/2020 21:34:21' prior: 50899490 overrides: 50899059!
accountSummary

	(accounts isEmpty) ifFalse: [
		(accounts size = 1) ifTrue:[^(accounts first accountSummary)]
						ifFalse:[^OrderedCollection with: 'Deposito por 300' with: ('Balance = ', self balance asString)]].
	^OrderedCollection with: 'Balance = 0'! !
!Portfolio methodsFor: 'accounts management' stamp: 'D S 11/12/2020 21:34:27' prior: 50899594 overrides: 50899059!
accountSummary

	(accounts isEmpty) ifFalse: [
		(accounts size = 1) ifTrue:[^(accounts first accountSummary)]
						ifFalse:[^OrderedCollection with: 'Deposito por 300' 
												with: ('Balance = ', self balance asString)]].
	^OrderedCollection with: 'Balance = 0'! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/12/2020 21:34:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/12/2020 21:34:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/12/2020 21:34:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/12/2020 21:34:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/12/2020 21:34:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/12/2020 21:34:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/12/2020 21:34:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test08SummaryOfAccountWithoutTransactionsReturnsBalance0 stamp: 'D S 11/12/2020 21:34:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test09SummaryOnAnAccountWithDepositWorksCorrectly stamp: 'D S 11/12/2020 21:34:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test10SummaryReturnsTheBalanceCorrectly stamp: 'D S 11/12/2020 21:34:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test11SummaryOnAccountWithWithdrawWorksCorrectly stamp: 'D S 11/12/2020 21:34:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test12SummaryOnAccountWithExtractionByTransferenceWorksCorrectly stamp: 'D S 11/12/2020 21:34:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test13SummaryOnAccountWithDepositByTransferenceWorksCorrectly stamp: 'D S 11/12/2020 21:34:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test14SummaryOnAccountWithMoreThanOneTransactionWorksCorrectly stamp: 'D S 11/12/2020 21:34:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test15TransferNetReturn0WhenNotHavingTransferences stamp: 'D S 11/12/2020 21:34:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test16WithDrawEndAffectTheBalanceResultNegatively stamp: 'D S 11/12/2020 21:34:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test17DepositEndAffectTheBalancePositively stamp: 'D S 11/12/2020 21:34:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test18WithdrawEndAccumulatesCorrectly stamp: 'D S 11/12/2020 21:34:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test19DepositEndAccumulatesCorrectly stamp: 'D S 11/12/2020 21:34:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test20 stamp: 'D S 11/12/2020 21:34:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test21 stamp: 'D S 11/12/2020 21:34:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test22 stamp: 'D S 11/12/2020 21:34:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test23 stamp: 'D S 11/12/2020 21:34:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test24 stamp: 'D S 11/12/2020 21:34:31'!
PASSED!
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/12/2020 21:34:47'!
test25
	| aPortfolio anAccount anAccount2|
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	Deposit register: 300 on: anAccount2.
	Deposit register: 200 on: anAccount.
	
	self assert: (aPortfolio accountSummary includes: 'Deposito por 200').! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/12/2020 21:35:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/12/2020 21:35:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/12/2020 21:35:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/12/2020 21:35:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/12/2020 21:35:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/12/2020 21:35:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/12/2020 21:35:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test08SummaryOfAccountWithoutTransactionsReturnsBalance0 stamp: 'D S 11/12/2020 21:35:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test09SummaryOnAnAccountWithDepositWorksCorrectly stamp: 'D S 11/12/2020 21:35:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test10SummaryReturnsTheBalanceCorrectly stamp: 'D S 11/12/2020 21:35:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test11SummaryOnAccountWithWithdrawWorksCorrectly stamp: 'D S 11/12/2020 21:35:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test12SummaryOnAccountWithExtractionByTransferenceWorksCorrectly stamp: 'D S 11/12/2020 21:35:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test13SummaryOnAccountWithDepositByTransferenceWorksCorrectly stamp: 'D S 11/12/2020 21:35:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test14SummaryOnAccountWithMoreThanOneTransactionWorksCorrectly stamp: 'D S 11/12/2020 21:35:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test15TransferNetReturn0WhenNotHavingTransferences stamp: 'D S 11/12/2020 21:35:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test16WithDrawEndAffectTheBalanceResultNegatively stamp: 'D S 11/12/2020 21:35:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test17DepositEndAffectTheBalancePositively stamp: 'D S 11/12/2020 21:35:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test18WithdrawEndAccumulatesCorrectly stamp: 'D S 11/12/2020 21:35:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test19DepositEndAccumulatesCorrectly stamp: 'D S 11/12/2020 21:35:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test20 stamp: 'D S 11/12/2020 21:35:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test21 stamp: 'D S 11/12/2020 21:35:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test22 stamp: 'D S 11/12/2020 21:35:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test23 stamp: 'D S 11/12/2020 21:35:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test24 stamp: 'D S 11/12/2020 21:35:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test25 stamp: 'D S 11/12/2020 21:35:05'!
FAILURE!

!testRun: #ReceptiveAccountTest #test25 stamp: 'D S 11/12/2020 21:35:05'!
FAILURE!
!Portfolio methodsFor: 'accounts management' stamp: 'D S 11/12/2020 21:35:19' prior: 50899606 overrides: 50899059!
accountSummary

	(accounts isEmpty) ifFalse: [
		(accounts size = 1) ifTrue:[^(accounts first accountSummary)]
						ifFalse:[^OrderedCollection with: 'Deposito por 300' with: 'Deposit por 200'
												with: ('Balance = ', self balance asString)]].
	^OrderedCollection with: 'Balance = 0'! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/12/2020 21:35:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/12/2020 21:35:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/12/2020 21:35:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/12/2020 21:35:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/12/2020 21:35:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/12/2020 21:35:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/12/2020 21:35:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test08SummaryOfAccountWithoutTransactionsReturnsBalance0 stamp: 'D S 11/12/2020 21:35:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test09SummaryOnAnAccountWithDepositWorksCorrectly stamp: 'D S 11/12/2020 21:35:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test10SummaryReturnsTheBalanceCorrectly stamp: 'D S 11/12/2020 21:35:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test11SummaryOnAccountWithWithdrawWorksCorrectly stamp: 'D S 11/12/2020 21:35:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test12SummaryOnAccountWithExtractionByTransferenceWorksCorrectly stamp: 'D S 11/12/2020 21:35:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test13SummaryOnAccountWithDepositByTransferenceWorksCorrectly stamp: 'D S 11/12/2020 21:35:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test14SummaryOnAccountWithMoreThanOneTransactionWorksCorrectly stamp: 'D S 11/12/2020 21:35:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test15TransferNetReturn0WhenNotHavingTransferences stamp: 'D S 11/12/2020 21:35:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test16WithDrawEndAffectTheBalanceResultNegatively stamp: 'D S 11/12/2020 21:35:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test17DepositEndAffectTheBalancePositively stamp: 'D S 11/12/2020 21:35:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test18WithdrawEndAccumulatesCorrectly stamp: 'D S 11/12/2020 21:35:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test19DepositEndAccumulatesCorrectly stamp: 'D S 11/12/2020 21:35:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test20 stamp: 'D S 11/12/2020 21:35:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test21 stamp: 'D S 11/12/2020 21:35:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test22 stamp: 'D S 11/12/2020 21:35:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test23 stamp: 'D S 11/12/2020 21:35:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test24 stamp: 'D S 11/12/2020 21:35:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test25 stamp: 'D S 11/12/2020 21:35:25'!
FAILURE!

!testRun: #ReceptiveAccountTest #test25 stamp: 'D S 11/12/2020 21:35:25'!
FAILURE!
!Portfolio methodsFor: 'accounts management' stamp: 'D S 11/12/2020 21:35:37' prior: 50899813 overrides: 50899059!
accountSummary

	(accounts isEmpty) ifFalse: [
		(accounts size = 1) ifTrue:[^(accounts first accountSummary)]
						ifFalse:[^OrderedCollection with: 'Deposito por 300' with: 'Deposito por 200'
												with: ('Balance = ', self balance asString)]].
	^OrderedCollection with: 'Balance = 0'! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/12/2020 21:35:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/12/2020 21:35:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/12/2020 21:35:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/12/2020 21:35:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/12/2020 21:35:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/12/2020 21:35:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/12/2020 21:35:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test08SummaryOfAccountWithoutTransactionsReturnsBalance0 stamp: 'D S 11/12/2020 21:35:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test09SummaryOnAnAccountWithDepositWorksCorrectly stamp: 'D S 11/12/2020 21:35:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test10SummaryReturnsTheBalanceCorrectly stamp: 'D S 11/12/2020 21:35:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test11SummaryOnAccountWithWithdrawWorksCorrectly stamp: 'D S 11/12/2020 21:35:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test12SummaryOnAccountWithExtractionByTransferenceWorksCorrectly stamp: 'D S 11/12/2020 21:35:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test13SummaryOnAccountWithDepositByTransferenceWorksCorrectly stamp: 'D S 11/12/2020 21:35:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test14SummaryOnAccountWithMoreThanOneTransactionWorksCorrectly stamp: 'D S 11/12/2020 21:35:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test15TransferNetReturn0WhenNotHavingTransferences stamp: 'D S 11/12/2020 21:35:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test16WithDrawEndAffectTheBalanceResultNegatively stamp: 'D S 11/12/2020 21:35:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test17DepositEndAffectTheBalancePositively stamp: 'D S 11/12/2020 21:35:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test18WithdrawEndAccumulatesCorrectly stamp: 'D S 11/12/2020 21:35:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test19DepositEndAccumulatesCorrectly stamp: 'D S 11/12/2020 21:35:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test20 stamp: 'D S 11/12/2020 21:35:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test21 stamp: 'D S 11/12/2020 21:35:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test22 stamp: 'D S 11/12/2020 21:35:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test23 stamp: 'D S 11/12/2020 21:35:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test24 stamp: 'D S 11/12/2020 21:35:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test25 stamp: 'D S 11/12/2020 21:35:40'!
PASSED!
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/12/2020 21:35:52'!
test26
	| aPortfolio anAccount anAccount2|
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	Deposit register: 300 on: anAccount2.
	Deposit register: 100 on: anAccount.
	
	self assert: (aPortfolio accountSummary includes: 'Deposito por 100').! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'D S 11/12/2020 21:36:01'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'D S 11/12/2020 21:36:01'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'D S 11/12/2020 21:36:01'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'D S 11/12/2020 21:36:01'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'D S 11/12/2020 21:36:01'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'D S 11/12/2020 21:36:01'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'D S 11/12/2020 21:36:01'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'D S 11/12/2020 21:36:01'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'D S 11/12/2020 21:36:01'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'D S 11/12/2020 21:36:01'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'D S 11/12/2020 21:36:01'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'D S 11/12/2020 21:36:01'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'D S 11/12/2020 21:36:01'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'D S 11/12/2020 21:36:01'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'D S 11/12/2020 21:36:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/12/2020 21:36:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/12/2020 21:36:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/12/2020 21:36:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/12/2020 21:36:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/12/2020 21:36:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/12/2020 21:36:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/12/2020 21:36:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test08SummaryOfAccountWithoutTransactionsReturnsBalance0 stamp: 'D S 11/12/2020 21:36:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test09SummaryOnAnAccountWithDepositWorksCorrectly stamp: 'D S 11/12/2020 21:36:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test10SummaryReturnsTheBalanceCorrectly stamp: 'D S 11/12/2020 21:36:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test11SummaryOnAccountWithWithdrawWorksCorrectly stamp: 'D S 11/12/2020 21:36:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test12SummaryOnAccountWithExtractionByTransferenceWorksCorrectly stamp: 'D S 11/12/2020 21:36:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test13SummaryOnAccountWithDepositByTransferenceWorksCorrectly stamp: 'D S 11/12/2020 21:36:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test14SummaryOnAccountWithMoreThanOneTransactionWorksCorrectly stamp: 'D S 11/12/2020 21:36:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test15TransferNetReturn0WhenNotHavingTransferences stamp: 'D S 11/12/2020 21:36:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test16WithDrawEndAffectTheBalanceResultNegatively stamp: 'D S 11/12/2020 21:36:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test17DepositEndAffectTheBalancePositively stamp: 'D S 11/12/2020 21:36:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test18WithdrawEndAccumulatesCorrectly stamp: 'D S 11/12/2020 21:36:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test19DepositEndAccumulatesCorrectly stamp: 'D S 11/12/2020 21:36:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test20 stamp: 'D S 11/12/2020 21:36:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test21 stamp: 'D S 11/12/2020 21:36:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test22 stamp: 'D S 11/12/2020 21:36:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test23 stamp: 'D S 11/12/2020 21:36:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test24 stamp: 'D S 11/12/2020 21:36:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test25 stamp: 'D S 11/12/2020 21:36:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test26 stamp: 'D S 11/12/2020 21:36:10'!
FAILURE!

!testRun: #ReceptiveAccountTest #test26 stamp: 'D S 11/12/2020 21:36:10'!
FAILURE!
!Portfolio methodsFor: 'accounts management' stamp: 'D S 11/12/2020 21:40:24' prior: 50899919 overrides: 50899059!
accountSummary
	|aSummary|
	
	aSummary := OrderedCollection  new.
	(accounts isEmpty) ifFalse: [
		(accounts size = 1) ifTrue:[^(accounts first accountSummary)]
						ifFalse:[
							accounts do: [:anAccount| |subSummary|
								subSummary := anAccount accountSummary.
								subSummary removeLast.
								aSummary addAll: subSummary.]]].
	^aSummary add: ('Balance = ', self balance asString).! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/12/2020 21:40:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/12/2020 21:40:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/12/2020 21:40:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/12/2020 21:40:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/12/2020 21:40:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/12/2020 21:40:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/12/2020 21:40:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test08SummaryOfAccountWithoutTransactionsReturnsBalance0 stamp: 'D S 11/12/2020 21:40:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test09SummaryOnAnAccountWithDepositWorksCorrectly stamp: 'D S 11/12/2020 21:40:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test10SummaryReturnsTheBalanceCorrectly stamp: 'D S 11/12/2020 21:40:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test11SummaryOnAccountWithWithdrawWorksCorrectly stamp: 'D S 11/12/2020 21:40:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test12SummaryOnAccountWithExtractionByTransferenceWorksCorrectly stamp: 'D S 11/12/2020 21:40:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test13SummaryOnAccountWithDepositByTransferenceWorksCorrectly stamp: 'D S 11/12/2020 21:40:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test14SummaryOnAccountWithMoreThanOneTransactionWorksCorrectly stamp: 'D S 11/12/2020 21:40:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test15TransferNetReturn0WhenNotHavingTransferences stamp: 'D S 11/12/2020 21:40:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test16WithDrawEndAffectTheBalanceResultNegatively stamp: 'D S 11/12/2020 21:40:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test17DepositEndAffectTheBalancePositively stamp: 'D S 11/12/2020 21:40:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test18WithdrawEndAccumulatesCorrectly stamp: 'D S 11/12/2020 21:40:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test19DepositEndAccumulatesCorrectly stamp: 'D S 11/12/2020 21:40:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test20 stamp: 'D S 11/12/2020 21:40:28'!
FAILURE!

!testRun: #ReceptiveAccountTest #test21 stamp: 'D S 11/12/2020 21:40:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test22 stamp: 'D S 11/12/2020 21:40:28'!
FAILURE!

!testRun: #ReceptiveAccountTest #test23 stamp: 'D S 11/12/2020 21:40:28'!
FAILURE!

!testRun: #ReceptiveAccountTest #test24 stamp: 'D S 11/12/2020 21:40:28'!
FAILURE!

!testRun: #ReceptiveAccountTest #test25 stamp: 'D S 11/12/2020 21:40:28'!
FAILURE!

!testRun: #ReceptiveAccountTest #test26 stamp: 'D S 11/12/2020 21:40:28'!
FAILURE!
!Portfolio methodsFor: 'accounts management' stamp: 'D S 11/12/2020 21:40:58' prior: 50900189 overrides: 50899059!
accountSummary
	|aSummary|
	
	aSummary := OrderedCollection  new.
	(accounts isEmpty) ifFalse: [
		(accounts size = 1) ifTrue:[^(accounts first accountSummary)]
						ifFalse:[
							accounts do: [:anAccount| |subSummary|
								subSummary := anAccount accountSummary.
								subSummary removeLast.
								aSummary addAll: subSummary.]]].
	(aSummary add: ('Balance = ', self balance asString)).
	^aSummary! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/12/2020 21:41:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/12/2020 21:41:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/12/2020 21:41:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/12/2020 21:41:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/12/2020 21:41:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/12/2020 21:41:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/12/2020 21:41:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test08SummaryOfAccountWithoutTransactionsReturnsBalance0 stamp: 'D S 11/12/2020 21:41:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test09SummaryOnAnAccountWithDepositWorksCorrectly stamp: 'D S 11/12/2020 21:41:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test10SummaryReturnsTheBalanceCorrectly stamp: 'D S 11/12/2020 21:41:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test11SummaryOnAccountWithWithdrawWorksCorrectly stamp: 'D S 11/12/2020 21:41:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test12SummaryOnAccountWithExtractionByTransferenceWorksCorrectly stamp: 'D S 11/12/2020 21:41:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test13SummaryOnAccountWithDepositByTransferenceWorksCorrectly stamp: 'D S 11/12/2020 21:41:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test14SummaryOnAccountWithMoreThanOneTransactionWorksCorrectly stamp: 'D S 11/12/2020 21:41:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test15TransferNetReturn0WhenNotHavingTransferences stamp: 'D S 11/12/2020 21:41:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test16WithDrawEndAffectTheBalanceResultNegatively stamp: 'D S 11/12/2020 21:41:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test17DepositEndAffectTheBalancePositively stamp: 'D S 11/12/2020 21:41:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test18WithdrawEndAccumulatesCorrectly stamp: 'D S 11/12/2020 21:41:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test19DepositEndAccumulatesCorrectly stamp: 'D S 11/12/2020 21:41:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test20 stamp: 'D S 11/12/2020 21:41:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test21 stamp: 'D S 11/12/2020 21:41:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test22 stamp: 'D S 11/12/2020 21:41:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test23 stamp: 'D S 11/12/2020 21:41:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test24 stamp: 'D S 11/12/2020 21:41:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test25 stamp: 'D S 11/12/2020 21:41:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test26 stamp: 'D S 11/12/2020 21:41:03'!
PASSED!
!Portfolio methodsFor: 'accounts management' stamp: 'D S 11/12/2020 21:41:27' prior: 50900298 overrides: 50899059!
accountSummary
	|aSummary|
	
	aSummary := OrderedCollection  new.
	accounts do: [:anAccount| |subSummary|
				subSummary := anAccount accountSummary.
				subSummary removeLast.
				aSummary addAll: subSummary.].
	(aSummary add: ('Balance = ', self balance asString)).
	^aSummary! !
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/12/2020 21:42:17' prior: 50899161!
test22
	| aPortfolio anAccount anAccount2|
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	Deposit register: 300 on: anAccount2.
	Deposit register: 100 on: anAccount.
	
	self assert: (aPortfolio accountSummary includes: 'Deposito por 300').
	self assert: (aPortfolio accountSummary includes: 'Balance = 400').! !
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/12/2020 21:42:27' prior: 50900420!
test22
	| aPortfolio anAccount anAccount2|
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	Deposit register: 300 on: anAccount2.
	Deposit register: 100 on: anAccount.
	
	self assert: (aPortfolio accountSummary includes: 'Deposito por 300').
	self assert: (aPortfolio accountSummary includes: 'Deposito por 100').
	self assert: (aPortfolio accountSummary includes: 'Balance = 400').! !

!methodRemoval: ReceptiveAccountTest #test26 stamp: 'D S 11/12/2020 21:42:33'!
test26
	| aPortfolio anAccount anAccount2|
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	Deposit register: 300 on: anAccount2.
	Deposit register: 100 on: anAccount.
	
	self assert: (aPortfolio accountSummary includes: 'Deposito por 100').!

!methodRemoval: ReceptiveAccountTest #test25 stamp: 'D S 11/12/2020 21:42:36'!
test25
	| aPortfolio anAccount anAccount2|
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	Deposit register: 300 on: anAccount2.
	Deposit register: 200 on: anAccount.
	
	self assert: (aPortfolio accountSummary includes: 'Deposito por 200').!

!methodRemoval: ReceptiveAccountTest #test24 stamp: 'D S 11/12/2020 21:42:39'!
test24
	| aPortfolio anAccount anAccount2|
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	Deposit register: 300 on: anAccount2.
	Deposit register: 200 on: anAccount.
	
	self assert: (aPortfolio accountSummary includes: 'Balance = 500').!

!methodRemoval: ReceptiveAccountTest #test23 stamp: 'D S 11/12/2020 21:42:42'!
test23
	| aPortfolio anAccount anAccount2|
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	Deposit register: 300 on: anAccount2.
	Deposit register: 100 on: anAccount.
	
	self assert: (aPortfolio accountSummary includes: 'Balance = 400').!
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/12/2020 21:43:26'!
test20SummaryOnEmptyPortfolioReturnBalance0
	| aPortfolio |
	aPortfolio := Portfolio new.
	
	self assert: (aPortfolio accountSummary includes: 'Balance = 0').
! !

!methodRemoval: ReceptiveAccountTest #test20 stamp: 'D S 11/12/2020 21:43:26'!
test20
	| aPortfolio |
	aPortfolio := Portfolio new.
	
	self assert: (aPortfolio accountSummary includes: 'Balance = 0').
!
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/12/2020 21:44:17' prior: 50899049!
test21
	| aPortfolio anAccount|
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	aPortfolio add: anAccount.
	Deposit register: 100 on: anAccount.
	
	self assert: (aPortfolio accountSummary includes: 'Deposito por 100').
	self assert: (aPortfolio accountSummary includes: 'Balance = 100').! !
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/12/2020 21:45:30' prior: 50900525!
test21
	| aPortfolio anAccount|
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	aPortfolio add: anAccount.
	Deposit register: 100 on: anAccount.
	
	self assert: (aPortfolio accountSummary) equals: anAccount accountSummary.
	"Lo de arriba seria esto refactorizado"
	"self assert: (aPortfolio accountSummary includes: 'Deposito por 100').
	self assert: (aPortfolio accountSummary includes: 'Balance = 100')."! !

!testRun: #ReceptiveAccountTest #test21 stamp: 'D S 11/12/2020 21:45:33'!
PASSED!
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/12/2020 21:45:56'!
test21SummaryOnPortfolioReturnsSummaryOfAccountInside
	| aPortfolio anAccount|
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	aPortfolio add: anAccount.
	Deposit register: 100 on: anAccount.
	
	self assert: (aPortfolio accountSummary) equals: anAccount accountSummary.
	"Lo de arriba seria esto refactorizado"
	"self assert: (aPortfolio accountSummary includes: 'Deposito por 100').
	self assert: (aPortfolio accountSummary includes: 'Balance = 100')."! !

!methodRemoval: ReceptiveAccountTest #test21 stamp: 'D S 11/12/2020 21:45:56'!
test21
	| aPortfolio anAccount|
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	aPortfolio add: anAccount.
	Deposit register: 100 on: anAccount.
	
	self assert: (aPortfolio accountSummary) equals: anAccount accountSummary.
	"Lo de arriba seria esto refactorizado"
	"self assert: (aPortfolio accountSummary includes: 'Deposito por 100').
	self assert: (aPortfolio accountSummary includes: 'Balance = 100')."!
!ReceptiveAccountTest methodsFor: 'accountSummaryTests' stamp: 'D S 11/12/2020 21:46:44'!
test22SummaryOnPortfolioWithMoreThanOneAccountReturnsTransactionsOfAccountsAndTotalBalance
	| aPortfolio anAccount anAccount2|
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	Deposit register: 300 on: anAccount2.
	Deposit register: 100 on: anAccount.
	
	self assert: (aPortfolio accountSummary includes: 'Deposito por 300').
	self assert: (aPortfolio accountSummary includes: 'Deposito por 100').
	self assert: (aPortfolio accountSummary includes: 'Balance = 400').! !

!methodRemoval: ReceptiveAccountTest #test22 stamp: 'D S 11/12/2020 21:46:44'!
test22
	| aPortfolio anAccount anAccount2|
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	Deposit register: 300 on: anAccount2.
	Deposit register: 100 on: anAccount.
	
	self assert: (aPortfolio accountSummary includes: 'Deposito por 300').
	self assert: (aPortfolio accountSummary includes: 'Deposito por 100').
	self assert: (aPortfolio accountSummary includes: 'Balance = 400').!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/12/2020 21:46:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/12/2020 21:46:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/12/2020 21:46:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/12/2020 21:46:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/12/2020 21:46:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/12/2020 21:46:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/12/2020 21:46:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test08SummaryOfAccountWithoutTransactionsReturnsBalance0 stamp: 'D S 11/12/2020 21:46:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test09SummaryOnAnAccountWithDepositWorksCorrectly stamp: 'D S 11/12/2020 21:46:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test10SummaryReturnsTheBalanceCorrectly stamp: 'D S 11/12/2020 21:46:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test11SummaryOnAccountWithWithdrawWorksCorrectly stamp: 'D S 11/12/2020 21:46:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test12SummaryOnAccountWithExtractionByTransferenceWorksCorrectly stamp: 'D S 11/12/2020 21:46:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test13SummaryOnAccountWithDepositByTransferenceWorksCorrectly stamp: 'D S 11/12/2020 21:46:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test14SummaryOnAccountWithMoreThanOneTransactionWorksCorrectly stamp: 'D S 11/12/2020 21:46:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test15TransferNetReturn0WhenNotHavingTransferences stamp: 'D S 11/12/2020 21:46:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test16WithDrawEndAffectTheBalanceResultNegatively stamp: 'D S 11/12/2020 21:46:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test17DepositEndAffectTheBalancePositively stamp: 'D S 11/12/2020 21:46:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test18WithdrawEndAccumulatesCorrectly stamp: 'D S 11/12/2020 21:46:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test19DepositEndAccumulatesCorrectly stamp: 'D S 11/12/2020 21:46:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test20SummaryOnEmptyPortfolioReturnBalance0 stamp: 'D S 11/12/2020 21:46:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test21SummaryOnPortfolioReturnsSummaryOfAccountInside stamp: 'D S 11/12/2020 21:46:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test22SummaryOnPortfolioWithMoreThanOneAccountReturnsTransactionsOfAccountsAndTotalBalance stamp: 'D S 11/12/2020 21:46:49'!
PASSED!

----SNAPSHOT----(12 November 2020 21:47:58) CuisUniversity-4383.image priorSource: 18133674!

----QUIT----(12 November 2020 21:48:00) CuisUniversity-4383.image priorSource: 18210122!

----STARTUP---- (13 November 2020 11:46:57) as /home/dn-01/Escritorio/Ingenieria en Software I/CuisLimpio/CuisUniversity-4383.image!


Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #AccountSummary category: 'Portfolio2-Ejercicio' stamp: 'D S 11/13/2020 13:33:57'!
Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #AccountSummaryTest category: 'Portfolio2-Ejercicio' stamp: 'D S 11/13/2020 13:34:25'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!AccountSummaryTest methodsFor: 'no messages' stamp: 'D S 11/13/2020 13:57:47'!
test01
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert: (anAccountSummary summary) includes: 'balance = 0'.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 13:57:51' prior: 50900752!
test01
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert: (anAccountSummary summary) includes: 'Balance = 0'.! !
!AccountSummary class methodsFor: 'no messages' stamp: 'D S 11/13/2020 13:59:00'!
initializeof: anAccount

	^self generateSummaryOfAccount: anAccount! !

!classDefinition: #AccountSummary category: 'Portfolio2-Ejercicio' stamp: 'D S 11/13/2020 13:59:37'!
Object subclass: #AccountSummary
	instanceVariableNames: 'summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!AccountSummary methodsFor: 'no messages' stamp: 'D S 11/13/2020 13:59:32'!
generateSummaryOfAccount: anAccount

	summary := OrderedCollection with: 'Balance = 0'! !

!testRun: #AccountSummaryTest #test01 stamp: 'D S 11/13/2020 13:59:43'!
ERROR!

!testRun: #AccountSummaryTest #test01 stamp: 'D S 11/13/2020 13:59:43'!
ERROR!
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 13:59:55'!
of: anAccount

	^self generateSummaryOfAccount: anAccount! !

!methodRemoval: AccountSummary class #initializeof: stamp: 'D S 11/13/2020 13:59:55'!
initializeof: anAccount

	^self generateSummaryOfAccount: anAccount!

!testRun: #AccountSummaryTest #test01 stamp: 'D S 11/13/2020 14:00:02'!
ERROR!

!testRun: #AccountSummaryTest #test01 stamp: 'D S 11/13/2020 14:00:02'!
ERROR!
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:00:16' prior: 50900795!
of: anAccount

	^self new generateSummaryOfAccount: anAccount! !

!testRun: #AccountSummaryTest #test01 stamp: 'D S 11/13/2020 14:00:20'!
ERROR!

!testRun: #AccountSummaryTest #test01 stamp: 'D S 11/13/2020 14:00:20'!
ERROR!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:01:02'!
summary

	^OrderedCollection with: 'Balance = 0'! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:01:07' prior: 50900784!
generateSummaryOfAccount: anAccount
! !

!testRun: #AccountSummaryTest #test01 stamp: 'D S 11/13/2020 14:01:13'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:02:09'!
test02
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert: (anAccountSummary relatedAccount) equals: anAccount! !

!classDefinition: #AccountSummary category: 'Portfolio2-Ejercicio' stamp: 'D S 11/13/2020 14:02:23'!
Object subclass: #AccountSummary
	instanceVariableNames: 'summary account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:02:21'!
realtedAccount

	^account! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:02:33' prior: 50900826!
generateSummaryOfAccount: anAccount

	account := anAccount.! !

!testRun: #AccountSummaryTest #test02 stamp: 'D S 11/13/2020 14:02:46'!
ERROR!

!testRun: #AccountSummaryTest #test02 stamp: 'D S 11/13/2020 14:02:46'!
ERROR!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:02:56'!
relatedAccount

	^account! !

!methodRemoval: AccountSummary #realtedAccount stamp: 'D S 11/13/2020 14:02:56'!
realtedAccount

	^account!

!testRun: #AccountSummaryTest #test01 stamp: 'D S 11/13/2020 14:03:00'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'D S 11/13/2020 14:03:00'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:05:07'!
test03
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	anAccountSummary := AccountSummary of: anAccount.
	Deposit register: 100 on: anAccount.
	
	self assert: (anAccountSummary summary) includes: 'Balance = 100'! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:05:44' prior: 50900821!
summary

	^OrderedCollection with: ('Balance = ', account balance asString)! !

!testRun: #AccountSummaryTest #test03 stamp: 'D S 11/13/2020 14:05:48'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:06:06'!
test04
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	anAccountSummary := AccountSummary of: anAccount.
	Deposit register: 100 on: anAccount.
	
	self assert: (anAccountSummary summary) includes: 'Deposito de 100'! !

!testRun: #AccountSummaryTest #test04 stamp: 'D S 11/13/2020 14:06:09'!
FAILURE!

!testRun: #AccountSummaryTest #test04 stamp: 'D S 11/13/2020 14:06:09'!
FAILURE!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:10:19' prior: 50900855!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection with: 'Deposito de 100' with: 'Balance = ', account balance asString.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:10:56' prior: 50900889!
summary

	^summary! !

!testRun: #AccountSummaryTest #test01 stamp: 'D S 11/13/2020 14:10:59'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'D S 11/13/2020 14:10:59'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'D S 11/13/2020 14:10:59'!
FAILURE!

!testRun: #AccountSummaryTest #test04 stamp: 'D S 11/13/2020 14:10:59'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'D S 11/13/2020 14:10:59'!
FAILURE!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:11:13' prior: 50900897!
test04
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert: (anAccountSummary summary) includes: 'Deposito de 100'! !

!testRun: #AccountSummaryTest #test01 stamp: 'D S 11/13/2020 14:11:16'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'D S 11/13/2020 14:11:16'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'D S 11/13/2020 14:11:16'!
FAILURE!

!testRun: #AccountSummaryTest #test04 stamp: 'D S 11/13/2020 14:11:16'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'D S 11/13/2020 14:11:16'!
FAILURE!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:11:29' prior: 50900913!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection with: 'Deposito de 100' with: 'Balance = ', account balance asString..! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:11:36' prior: 50900963!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection with: 'Deposito de 100' with: 'Balance = ', account balance asString.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:12:43' prior: 50900972!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection with: 'Deposito de 100' with: ('Balance = ', account balance asString).! !

!testRun: #AccountSummaryTest #test01 stamp: 'D S 11/13/2020 14:12:46'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'D S 11/13/2020 14:12:46'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'D S 11/13/2020 14:12:46'!
FAILURE!

!testRun: #AccountSummaryTest #test04 stamp: 'D S 11/13/2020 14:12:46'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'D S 11/13/2020 14:12:46'!
FAILURE!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:13:03' prior: 50900878!
test03
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	anAccountSummary := AccountSummary of: anAccount.

	
	self assert: (anAccountSummary summary) includes: 'Balance = 100'! !

!testRun: #AccountSummaryTest #test01 stamp: 'D S 11/13/2020 14:13:06'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'D S 11/13/2020 14:13:06'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'D S 11/13/2020 14:13:06'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'D S 11/13/2020 14:13:06'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'D S 11/13/2020 14:13:37'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'D S 11/13/2020 14:13:37'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'D S 11/13/2020 14:13:37'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'D S 11/13/2020 14:13:37'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:14:29'!
test06
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 150 on: anAccount.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert: (anAccountSummary summary) includes: 'Deposito de 150'! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:14:36'!
test05
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 150 on: anAccount.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert: (anAccountSummary summary) includes: 'Deposito de 150'! !

!testRun: #AccountSummaryTest #test05 stamp: 'D S 11/13/2020 14:14:40'!
FAILURE!

!testRun: #AccountSummaryTest #test05 stamp: 'D S 11/13/2020 14:14:40'!
FAILURE!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:15:03' prior: 50900981!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection with: 'Deposito de 150' with: 'Deposito de 100' with: ('Balance = ', account balance asString).! !

!testRun: #AccountSummaryTest #test01 stamp: 'D S 11/13/2020 14:15:05'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'D S 11/13/2020 14:15:05'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'D S 11/13/2020 14:15:05'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'D S 11/13/2020 14:15:05'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'D S 11/13/2020 14:15:05'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'D S 11/13/2020 14:15:05'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:15:20' prior: 50901034!
test06
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 150 on: anAccount.
	anAccountSummary := AccountSummary of: anAccount.
	
	self deny:( (anAccountSummary summary) includes: 'Deposito de 100')! !

!testRun: #AccountSummaryTest #test06 stamp: 'D S 11/13/2020 14:15:23'!
FAILURE!

!testRun: #AccountSummaryTest #test06 stamp: 'D S 11/13/2020 14:15:23'!
FAILURE!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:17:01' prior: 50901061!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	account transactions do:[:anTransaction| summary add: ('Deposito de ', anTransaction value asString)]! !

!testRun: #AccountSummaryTest #test01 stamp: 'D S 11/13/2020 14:17:04'!
FAILURE!

!testRun: #AccountSummaryTest #test02 stamp: 'D S 11/13/2020 14:17:04'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'D S 11/13/2020 14:17:04'!
FAILURE!

!testRun: #AccountSummaryTest #test04 stamp: 'D S 11/13/2020 14:17:04'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'D S 11/13/2020 14:17:04'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'D S 11/13/2020 14:17:04'!
PASSED!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:17:38' prior: 50901102!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	account transactions do:[:anTransaction| summary add: ('Deposito de ', anTransaction value asString)].
	summary add: (account balance asString)! !

!testRun: #AccountSummaryTest #test01 stamp: 'D S 11/13/2020 14:17:41'!
FAILURE!

!testRun: #AccountSummaryTest #test02 stamp: 'D S 11/13/2020 14:17:41'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'D S 11/13/2020 14:17:41'!
FAILURE!

!testRun: #AccountSummaryTest #test04 stamp: 'D S 11/13/2020 14:17:41'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'D S 11/13/2020 14:17:41'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'D S 11/13/2020 14:17:41'!
PASSED!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:17:58' prior: 50901127!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	account transactions do:[:anTransaction| summary add: ('Deposito de ', anTransaction value asString)].
	summary add: 'Balance = ', (account balance asString)! !

!testRun: #AccountSummaryTest #test01 stamp: 'D S 11/13/2020 14:18:02'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'D S 11/13/2020 14:18:02'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'D S 11/13/2020 14:18:02'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'D S 11/13/2020 14:18:02'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'D S 11/13/2020 14:18:02'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'D S 11/13/2020 14:18:02'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'D S 11/13/2020 20:33:41'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'D S 11/13/2020 20:33:41'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'D S 11/13/2020 20:33:41'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'D S 11/13/2020 20:33:41'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'D S 11/13/2020 20:33:41'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'D S 11/13/2020 20:33:41'!
PASSED!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 20:50:17' prior: 50901153!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	summary add: 'Deposito por ', account transactions first value asString. 
	"account transactions do:[:anTransaction| summary add: ('Deposito de ', anTransaction value asString)]."
	summary add: 'Balance = ', (account balance asString)! !

!testRun: #AccountSummaryTest #test01 stamp: 'D S 11/13/2020 20:50:22'!
ERROR!

!testRun: #AccountSummaryTest #test02 stamp: 'D S 11/13/2020 20:50:22'!
ERROR!

!testRun: #AccountSummaryTest #test03 stamp: 'D S 11/13/2020 20:50:22'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'D S 11/13/2020 20:50:22'!
FAILURE!

!testRun: #AccountSummaryTest #test05 stamp: 'D S 11/13/2020 20:50:22'!
FAILURE!

!testRun: #AccountSummaryTest #test06 stamp: 'D S 11/13/2020 20:50:22'!
PASSED!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 20:51:14' prior: 50901195!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	(account transactions isEmpty) ifFalse:[summary add: 'Deposito por ', account transactions first value asString.] .
	"account transactions do:[:anTransaction| summary add: ('Deposito de ', anTransaction value asString)]."
	summary add: 'Balance = ', (account balance asString)! !

!testRun: #AccountSummaryTest #test01 stamp: 'D S 11/13/2020 20:51:20'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'D S 11/13/2020 20:51:20'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'D S 11/13/2020 20:51:20'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'D S 11/13/2020 20:51:20'!
FAILURE!

!testRun: #AccountSummaryTest #test05 stamp: 'D S 11/13/2020 20:51:20'!
FAILURE!

!testRun: #AccountSummaryTest #test06 stamp: 'D S 11/13/2020 20:51:20'!
PASSED!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 20:53:06' prior: 50901224!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	"(account transactions isEmpty) ifFalse:[summary add: 'Deposito por ', account transactions first value asString.]."
	"account transactions do:[:anTransaction| summary add: ('Deposito de ', anTransaction value asString)]."
	summary add: 'Balance = ', (account balance asString)! !

!testRun: #AccountSummaryTest #test01 stamp: 'D S 11/13/2020 20:53:09'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'D S 11/13/2020 20:53:09'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'D S 11/13/2020 20:53:09'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'D S 11/13/2020 20:53:09'!
FAILURE!

!testRun: #AccountSummaryTest #test06 stamp: 'D S 11/13/2020 20:53:09'!
PASSED!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:17:58' prior: 50901255!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	account transactions do:[:anTransaction| summary add: ('Deposito de ', anTransaction value asString)].
	summary add: 'Balance = ', (account balance asString)! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 20:53:49' prior: 50901283!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	(account transactions isEmpty) ifFalse:[summary add: 'Deposito por ', account transactions first value asString.].
"	account transactions do:[:anTransaction| summary add: ('Deposito de ', anTransaction value asString)]."
	summary add: 'Balance = ', (account balance asString)! !

!testRun: #AccountSummaryTest #test01 stamp: 'D S 11/13/2020 20:53:53'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'D S 11/13/2020 20:53:53'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'D S 11/13/2020 20:53:53'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'D S 11/13/2020 20:53:53'!
FAILURE!

!testRun: #AccountSummaryTest #test06 stamp: 'D S 11/13/2020 20:53:53'!
PASSED!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 20:54:11' prior: 50901295!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
"	account transactions do:[:anTransaction| summary add: ('Deposito de ', anTransaction value asString)]."
	summary add: 'Balance = ', (account balance asString)! !

!testRun: #AccountSummaryTest #test01 stamp: 'D S 11/13/2020 20:54:15'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'D S 11/13/2020 20:54:15'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'D S 11/13/2020 20:54:15'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'D S 11/13/2020 20:54:15'!
FAILURE!

!testRun: #AccountSummaryTest #test06 stamp: 'D S 11/13/2020 20:54:15'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'D S 11/13/2020 20:55:50'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'D S 11/13/2020 20:55:50'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'D S 11/13/2020 20:55:50'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'D S 11/13/2020 20:55:50'!
FAILURE!

!testRun: #AccountSummaryTest #test06 stamp: 'D S 11/13/2020 20:55:50'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'D S 11/13/2020 20:55:56'!
FAILURE!

!testRun: #AccountSummaryTest #test05 stamp: 'D S 11/13/2020 20:55:56'!
FAILURE!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:06:06' prior: 50900939!
test04
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	anAccountSummary := AccountSummary of: anAccount.
	Deposit register: 100 on: anAccount.
	
	self assert: (anAccountSummary summary) includes: 'Deposito de 100'! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 20:56:20' prior: 50901365!
test04
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	anAccountSummary := AccountSummary of: anAccount.
	
	
	self assert: (anAccountSummary summary) includes: 'Deposito de 100'! !

!testRun: #AccountSummaryTest #test04 stamp: 'D S 11/13/2020 20:56:25'!
FAILURE!

!testRun: #AccountSummaryTest #test04 stamp: 'D S 11/13/2020 20:56:25'!
FAILURE!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 20:53:49' prior: 50901323!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	(account transactions isEmpty) ifFalse:[summary add: 'Deposito por ', account transactions first value asString.].
"	account transactions do:[:anTransaction| summary add: ('Deposito de ', anTransaction value asString)]."
	summary add: 'Balance = ', (account balance asString)! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 20:53:49' prior: 50901392!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	(account transactions isEmpty) ifFalse:[summary add: 'Deposito por ', account transactions first value asString.].
"	account transactions do:[:anTransaction| summary add: ('Deposito de ', anTransaction value asString)]."
	summary add: 'Balance = ', (account balance asString)! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 20:53:49' prior: 50901407!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	(account transactions isEmpty) ifFalse:[summary add: 'Deposito por ', account transactions first value asString.].
"	account transactions do:[:anTransaction| summary add: ('Deposito de ', anTransaction value asString)]."
	summary add: 'Balance = ', (account balance asString)! !

!testRun: #AccountSummaryTest #test01 stamp: 'D S 11/13/2020 20:57:11'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'D S 11/13/2020 20:57:11'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'D S 11/13/2020 20:57:11'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'D S 11/13/2020 20:57:11'!
FAILURE!

!testRun: #AccountSummaryTest #test05 stamp: 'D S 11/13/2020 20:57:11'!
FAILURE!

!testRun: #AccountSummaryTest #test06 stamp: 'D S 11/13/2020 20:57:11'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'D S 11/13/2020 20:57:16'!
FAILURE!

!testRun: #AccountSummaryTest #test04 stamp: 'D S 11/13/2020 20:57:16'!
FAILURE!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 20:57:28' prior: 50901422!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	(account transactions isEmpty) ifFalse:[summary add: 'Deposito de ', account transactions first value asString.].
"	account transactions do:[:anTransaction| summary add: ('Deposito de ', anTransaction value asString)]."
	summary add: 'Balance = ', (account balance asString)! !

!testRun: #AccountSummaryTest #test01 stamp: 'D S 11/13/2020 20:57:31'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'D S 11/13/2020 20:57:31'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'D S 11/13/2020 20:57:31'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'D S 11/13/2020 20:57:31'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'D S 11/13/2020 20:57:31'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'D S 11/13/2020 20:57:31'!
PASSED!

----STARTUP---- (14 November 2020 11:44:58) as /home/dn-01/Escritorio/Ingenieria en Software I/CuisLimpio/CuisUniversity-4383.image!


!classDefinition: #AccountSummary category: 'Portfolio2-Ejercicio' stamp: 'D S 11/14/2020 11:45:01'!
Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #AccountSummary category: 'Portfolio2-Ejercicio' stamp: 'D S 11/14/2020 11:45:01'!
Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #AccountSummaryTest category: 'Portfolio2-Ejercicio' stamp: 'D S 11/14/2020 11:45:01'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #AccountSummaryTest category: 'Portfolio2-Ejercicio' stamp: 'D S 11/14/2020 11:45:01'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!AccountSummaryTest methodsFor: 'no messages' stamp: 'D S 11/13/2020 13:57:47'!
test01
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert: (anAccountSummary summary) includes: 'balance = 0'.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 13:57:51' prior: 50901523!
test01
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert: (anAccountSummary summary) includes: 'Balance = 0'.! !
!AccountSummary class methodsFor: 'no messages' stamp: 'D S 11/13/2020 13:59:00'!
initializeof: anAccount

	^self generateSummaryOfAccount: anAccount! !

!classDefinition: #AccountSummary category: 'Portfolio2-Ejercicio' stamp: 'D S 11/14/2020 11:45:02'!
Object subclass: #AccountSummary
	instanceVariableNames: 'summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!AccountSummary methodsFor: 'no messages' stamp: 'D S 11/13/2020 13:59:32'!
generateSummaryOfAccount: anAccount

	summary := OrderedCollection with: 'Balance = 0'! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 13:59:55'!
of: anAccount

	^self generateSummaryOfAccount: anAccount! !

!methodRemoval: AccountSummary class #initializeof: stamp: 'D S 11/14/2020 11:45:02'!
initializeof: anAccount

	^self generateSummaryOfAccount: anAccount!
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:00:16' prior: 50901561!
of: anAccount

	^self new generateSummaryOfAccount: anAccount! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:01:02'!
summary

	^OrderedCollection with: 'Balance = 0'! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:01:07' prior: 50901555!
generateSummaryOfAccount: anAccount
! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:02:09'!
test02
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert: (anAccountSummary relatedAccount) equals: anAccount! !

!classDefinition: #AccountSummary category: 'Portfolio2-Ejercicio' stamp: 'D S 11/14/2020 11:45:02'!
Object subclass: #AccountSummary
	instanceVariableNames: 'summary account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:02:21'!
realtedAccount

	^account! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:02:33' prior: 50901582!
generateSummaryOfAccount: anAccount

	account := anAccount.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:02:56'!
relatedAccount

	^account! !

!methodRemoval: AccountSummary #realtedAccount stamp: 'D S 11/14/2020 11:45:02'!
realtedAccount

	^account!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:05:07'!
test03
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	anAccountSummary := AccountSummary of: anAccount.
	Deposit register: 100 on: anAccount.
	
	self assert: (anAccountSummary summary) includes: 'Balance = 100'! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:05:44' prior: 50901577!
summary

	^OrderedCollection with: ('Balance = ', account balance asString)! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:06:06'!
test04
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	anAccountSummary := AccountSummary of: anAccount.
	Deposit register: 100 on: anAccount.
	
	self assert: (anAccountSummary summary) includes: 'Deposito de 100'! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:10:19' prior: 50901608!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection with: 'Deposito de 100' with: 'Balance = ', account balance asString.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:10:56' prior: 50901632!
summary

	^summary! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:11:13' prior: 50901638!
test04
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert: (anAccountSummary summary) includes: 'Deposito de 100'! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:11:29' prior: 50901649!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection with: 'Deposito de 100' with: 'Balance = ', account balance asString..! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:11:36' prior: 50901673!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection with: 'Deposito de 100' with: 'Balance = ', account balance asString.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:12:43' prior: 50901682!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection with: 'Deposito de 100' with: ('Balance = ', account balance asString).! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:13:03' prior: 50901621!
test03
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	anAccountSummary := AccountSummary of: anAccount.

	
	self assert: (anAccountSummary summary) includes: 'Balance = 100'! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:14:29'!
test06
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 150 on: anAccount.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert: (anAccountSummary summary) includes: 'Deposito de 150'! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:14:36'!
test05
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 150 on: anAccount.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert: (anAccountSummary summary) includes: 'Deposito de 150'! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:15:03' prior: 50901691!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection with: 'Deposito de 150' with: 'Deposito de 100' with: ('Balance = ', account balance asString).! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:15:20' prior: 50901711!
test06
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 150 on: anAccount.
	anAccountSummary := AccountSummary of: anAccount.
	
	self deny:( (anAccountSummary summary) includes: 'Deposito de 100')! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:17:01' prior: 50901733!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	account transactions do:[:anTransaction| summary add: ('Deposito de ', anTransaction value asString)]! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:17:38' prior: 50901754!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	account transactions do:[:anTransaction| summary add: ('Deposito de ', anTransaction value asString)].
	summary add: (account balance asString)! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:17:58' prior: 50901764!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	account transactions do:[:anTransaction| summary add: ('Deposito de ', anTransaction value asString)].
	summary add: 'Balance = ', (account balance asString)! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 20:50:17' prior: 50901775!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	summary add: 'Deposito por ', account transactions first value asString. 
	"account transactions do:[:anTransaction| summary add: ('Deposito de ', anTransaction value asString)]."
	summary add: 'Balance = ', (account balance asString)! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 20:51:14' prior: 50901787!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	(account transactions isEmpty) ifFalse:[summary add: 'Deposito por ', account transactions first value asString.] .
	"account transactions do:[:anTransaction| summary add: ('Deposito de ', anTransaction value asString)]."
	summary add: 'Balance = ', (account balance asString)! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 20:53:06' prior: 50901801!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	"(account transactions isEmpty) ifFalse:[summary add: 'Deposito por ', account transactions first value asString.]."
	"account transactions do:[:anTransaction| summary add: ('Deposito de ', anTransaction value asString)]."
	summary add: 'Balance = ', (account balance asString)! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:17:58' prior: 50901816!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	account transactions do:[:anTransaction| summary add: ('Deposito de ', anTransaction value asString)].
	summary add: 'Balance = ', (account balance asString)! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 20:53:49' prior: 50901831!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	(account transactions isEmpty) ifFalse:[summary add: 'Deposito por ', account transactions first value asString.].
"	account transactions do:[:anTransaction| summary add: ('Deposito de ', anTransaction value asString)]."
	summary add: 'Balance = ', (account balance asString)! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 20:54:11' prior: 50901843!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
"	account transactions do:[:anTransaction| summary add: ('Deposito de ', anTransaction value asString)]."
	summary add: 'Balance = ', (account balance asString)! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 14:06:06' prior: 50901662!
test04
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	anAccountSummary := AccountSummary of: anAccount.
	Deposit register: 100 on: anAccount.
	
	self assert: (anAccountSummary summary) includes: 'Deposito de 100'! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 20:56:20' prior: 50901870!
test04
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	anAccountSummary := AccountSummary of: anAccount.
	
	
	self assert: (anAccountSummary summary) includes: 'Deposito de 100'! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 20:53:49' prior: 50901858!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	(account transactions isEmpty) ifFalse:[summary add: 'Deposito por ', account transactions first value asString.].
"	account transactions do:[:anTransaction| summary add: ('Deposito de ', anTransaction value asString)]."
	summary add: 'Balance = ', (account balance asString)! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 20:53:49' prior: 50901892!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	(account transactions isEmpty) ifFalse:[summary add: 'Deposito por ', account transactions first value asString.].
"	account transactions do:[:anTransaction| summary add: ('Deposito de ', anTransaction value asString)]."
	summary add: 'Balance = ', (account balance asString)! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 20:53:49' prior: 50901907!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	(account transactions isEmpty) ifFalse:[summary add: 'Deposito por ', account transactions first value asString.].
"	account transactions do:[:anTransaction| summary add: ('Deposito de ', anTransaction value asString)]."
	summary add: 'Balance = ', (account balance asString)! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/13/2020 20:57:28' prior: 50901922!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	(account transactions isEmpty) ifFalse:[summary add: 'Deposito de ', account transactions first value asString.].
"	account transactions do:[:anTransaction| summary add: ('Deposito de ', anTransaction value asString)]."
	summary add: 'Balance = ', (account balance asString)! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 11:45:15' prior: 50901743!
test06
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 150 on: anAccount.
	anAccountSummary := AccountSummary of: anAccount.
	
	self deny:( (anAccountSummary summary) includes: 'Deposito de 150')! !

!testRun: #AccountSummaryTest #test01 stamp: 'D S 11/14/2020 11:45:19'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'D S 11/14/2020 11:45:19'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'D S 11/14/2020 11:45:19'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'D S 11/14/2020 11:45:19'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'D S 11/14/2020 11:45:19'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'D S 11/14/2020 11:45:19'!
FAILURE!

!testRun: #AccountSummaryTest #test06 stamp: 'D S 11/14/2020 11:45:19'!
FAILURE!

!testRun: #AccountSummaryTest #test06 stamp: 'D S 11/14/2020 11:45:46'!
FAILURE!

!testRun: #AccountSummaryTest #test06 stamp: 'D S 11/14/2020 11:45:46'!
FAILURE!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 11:46:11' prior: 50901952!
test06
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 150 on: anAccount.
	anAccountSummary := AccountSummary of: anAccount.
	
	self deny:( (anAccountSummary summary) includes: 'Deposito de 100')! !

!testRun: #AccountSummaryTest #test06 stamp: 'D S 11/14/2020 11:46:13'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 11:46:51'!
test07
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	Withdraw register: 150 on: anAccount.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert:( (anAccountSummary summary) includes: 'Extraccion de 150')! !

!testRun: #AccountSummaryTest #test07 stamp: 'D S 11/14/2020 11:46:56'!
FAILURE!

!testRun: #AccountSummaryTest #test07 stamp: 'D S 11/14/2020 11:46:56'!
FAILURE!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 11:48:41' prior: 50901937!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	(account transactions isEmpty) ifFalse:[
		((account transactions first) isKindOf: Deposit) ifTrue:[summary add: 'Deposito de ', account transactions first value asString.].
		((account transactions first) isKindOf: Withdraw) ifTrue:[summary add: 'Extraccion de ', account transactions first value asString.]].
"	account transactions do:[:anTransaction| summary add: ('Deposito de ', anTransaction value asString)]."
	summary add: 'Balance = ', (account balance asString)! !

!testRun: #AccountSummaryTest #test01 stamp: 'D S 11/14/2020 11:48:59'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'D S 11/14/2020 11:48:59'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'D S 11/14/2020 11:48:59'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'D S 11/14/2020 11:48:59'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'D S 11/14/2020 11:48:59'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'D S 11/14/2020 11:48:59'!
PASSED!

!testRun: #AccountSummaryTest #test07 stamp: 'D S 11/14/2020 11:48:59'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 12:41:05'!
test08
	|anAccountSummary anAccount anAccount2|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Transference from: anAccount2 to: anAccount amount: 100.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert:( (anAccountSummary summary) includes: 'Entrada por transferencia de 150')! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 12:41:08' prior: 50902054!
test08
	|anAccountSummary anAccount anAccount2|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Transference from: anAccount2 to: anAccount amount: 150.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert:( (anAccountSummary summary) includes: 'Entrada por transferencia de 150')! !

!testRun: #AccountSummaryTest #test08 stamp: 'D S 11/14/2020 12:41:12'!
FAILURE!

!testRun: #AccountSummaryTest #test08 stamp: 'D S 11/14/2020 12:41:12'!
FAILURE!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 12:41:53' prior: 50902015!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	(account transactions isEmpty) ifFalse:[
		((account transactions first) isKindOf: Deposit) ifTrue:[summary add: 'Deposito de ', account transactions first value asString.].
		((account transactions first) isKindOf: Withdraw) ifTrue:[summary add: 'Extraccion de ', account transactions first value asString.]].
		((account transactions first) isKindOf: DepositEnd)
"	account transactions do:[:anTransaction| summary add: ('Deposito de ', anTransaction value asString)]."
	summary add: 'Balance = ', (account balance asString)! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 12:43:40' prior: 50902087!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	(account transactions isEmpty) ifFalse:[
		((account transactions first) isKindOf: Deposit) ifTrue:[summary add: 'Deposito de ', account transactions first value asString.].
		((account transactions first) isKindOf: Withdraw) ifTrue:[summary add: 'Extraccion de ', account transactions first value asString.].
		((account transactions first) isKindOf: DepositEnd) ifTrue:[summary add: 'Entrada por transaccion de ', account transactions first value asString.]].
"	account transactions do:[:anTransaction| summary add: ('Deposito de ', anTransaction value asString)]."
	summary add: 'Balance = ', (account balance asString)! !

!testRun: #AccountSummaryTest #test01 stamp: 'D S 11/14/2020 12:43:44'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'D S 11/14/2020 12:43:44'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'D S 11/14/2020 12:43:44'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'D S 11/14/2020 12:43:44'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'D S 11/14/2020 12:43:44'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'D S 11/14/2020 12:43:44'!
PASSED!

!testRun: #AccountSummaryTest #test07 stamp: 'D S 11/14/2020 12:43:44'!
PASSED!

!testRun: #AccountSummaryTest #test08 stamp: 'D S 11/14/2020 12:43:44'!
FAILURE!

!testRun: #AccountSummaryTest #test08 stamp: 'D S 11/14/2020 12:43:44'!
FAILURE!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 12:44:17' prior: 50902110!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	(account transactions isEmpty) ifFalse:[
		((account transactions first) isKindOf: Deposit) ifTrue:[summary add: 'Deposito de ', account transactions first value asString.].
		((account transactions first) isKindOf: Withdraw) ifTrue:[summary add: 'Extraccion de ', account transactions first value asString.].
		((account transactions first) isKindOf: DepositEnd) ifTrue:[summary add: 'Entrada por transferencia de ', account transactions first value asString.]].
"	account transactions do:[:anTransaction| summary add: ('Deposito de ', anTransaction value asString)]."
	summary add: 'Balance = ', (account balance asString)! !

!testRun: #AccountSummaryTest #test01 stamp: 'D S 11/14/2020 12:44:21'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'D S 11/14/2020 12:44:21'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'D S 11/14/2020 12:44:21'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'D S 11/14/2020 12:44:21'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'D S 11/14/2020 12:44:21'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'D S 11/14/2020 12:44:21'!
PASSED!

!testRun: #AccountSummaryTest #test07 stamp: 'D S 11/14/2020 12:44:21'!
PASSED!

!testRun: #AccountSummaryTest #test08 stamp: 'D S 11/14/2020 12:44:21'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 12:44:40'!
test09
	|anAccountSummary anAccount anAccount2|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Transference from: anAccount to: anAccount2 amount: 150.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert:( (anAccountSummary summary) includes: 'Salida por transferencia de 150')! !

!testRun: #AccountSummaryTest #test09 stamp: 'D S 11/14/2020 12:45:09'!
FAILURE!

!testRun: #AccountSummaryTest #test09 stamp: 'D S 11/14/2020 12:45:09'!
FAILURE!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 12:45:35' prior: 50902159!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	(account transactions isEmpty) ifFalse:[
		((account transactions first) isKindOf: Deposit) ifTrue:[summary add: 'Deposito de ', account transactions first value asString.].
		((account transactions first) isKindOf: Withdraw) ifTrue:[summary add: 'Extraccion de ', account transactions first value asString.].
		((account transactions first) isKindOf: DepositEnd) ifTrue:[summary add: 'Entrada por transferencia de ', account transactions first value asString.].
		((account transactions first) isKindOf: WithdrawEnd) ifTrue:[summary add: 'Salida por transferencia de ', account transactions first value asString.]].
"	account transactions do:[:anTransaction| summary add: ('Deposito de ', anTransaction value asString)]."
	summary add: 'Balance = ', (account balance asString)! !

!testRun: #AccountSummaryTest #test01 stamp: 'D S 11/14/2020 12:45:40'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'D S 11/14/2020 12:45:40'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'D S 11/14/2020 12:45:40'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'D S 11/14/2020 12:45:40'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'D S 11/14/2020 12:45:40'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'D S 11/14/2020 12:45:40'!
PASSED!

!testRun: #AccountSummaryTest #test07 stamp: 'D S 11/14/2020 12:45:40'!
PASSED!

!testRun: #AccountSummaryTest #test08 stamp: 'D S 11/14/2020 12:45:40'!
PASSED!

!testRun: #AccountSummaryTest #test09 stamp: 'D S 11/14/2020 12:45:40'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 12:48:30'!
test10
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 150 on: anAccount.
	Deposit register: 200 on: anAccount.

	anAccountSummary := AccountSummary of: anAccount.
	
	self assert:( (anAccountSummary summary) includes: 'Deposito de 200')! !

!testRun: #AccountSummaryTest #test10 stamp: 'D S 11/14/2020 12:48:32'!
FAILURE!

!testRun: #AccountSummaryTest #test10 stamp: 'D S 11/14/2020 12:48:32'!
FAILURE!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 12:49:26' prior: 50902224!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	(account transactions isEmpty) ifFalse:[
		((account transactions first) isKindOf: Deposit) ifTrue:[summary add: 'Deposito de ', account transactions first value asString.].
		((account transactions first) isKindOf: Withdraw) ifTrue:[summary add: 'Extraccion de ', account transactions first value asString.].
		((account transactions first) isKindOf: DepositEnd) ifTrue:[summary add: 'Entrada por transferencia de ', account transactions first value asString.].
		((account transactions first) isKindOf: WithdrawEnd) ifTrue:[summary add: 'Salida por transferencia de ', account transactions first value asString.]].
	(account transactions size = 2) ifTrue:[
		((account transactions second) isKindOf: Deposit) ifTrue:[summary add: 'Deposito de ', account transactions second value asString.]
		].
"	account transactions do:[:anTransaction| summary add: ('Deposito de ', anTransaction value asString)]."
	summary add: 'Balance = ', (account balance asString)! !

!testRun: #AccountSummaryTest #test10 stamp: 'D S 11/14/2020 12:49:32'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 12:49:47' prior: 50901999!
test07
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 150 on: anAccount.
	Withdraw register: 150 on: anAccount.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert:( (anAccountSummary summary) includes: 'Extraccion de 150')! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 12:49:52'!
test11
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 150 on: anAccount.
	Withdraw register: 150 on: anAccount.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert:( (anAccountSummary summary) includes: 'Extraccion de 150')! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 11:46:51' prior: 50902333!
test07
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	Withdraw register: 150 on: anAccount.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert:( (anAccountSummary summary) includes: 'Extraccion de 150')! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 12:50:41' prior: 50902294!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	(account transactions isEmpty) ifFalse:[
		((account transactions first) isKindOf: Deposit) ifTrue:[summary add: 'Deposito de ', account transactions first value asString.].
		((account transactions first) isKindOf: Withdraw) ifTrue:[summary add: 'Extraccion de ', account transactions first value asString.].
		((account transactions first) isKindOf: DepositEnd) ifTrue:[summary add: 'Entrada por transferencia de ', account transactions first value asString.].
		((account transactions first) isKindOf: WithdrawEnd) ifTrue:[summary add: 'Salida por transferencia de ', account transactions first value asString.]].
	(account transactions size = 2) ifTrue:[
		((account transactions second) isKindOf: Deposit) ifTrue:[summary add: 'Deposito de ', account transactions second value asString.].
		((account transactions second) isKindOf: Withdraw) ifTrue:[summary add: 'Extraccion de ', account transactions second value asString.]
		].
"	account transactions do:[:anTransaction| summary add: ('Deposito de ', anTransaction value asString)]."
	summary add: 'Balance = ', (account balance asString)! !

!testRun: #AccountSummaryTest #test11 stamp: 'D S 11/14/2020 12:50:47'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 12:51:00' prior: 50902068!
test08
	|anAccountSummary anAccount anAccount2|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Deposit register: 150 on: anAccount.	
	Transference from: anAccount2 to: anAccount amount: 150.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert:( (anAccountSummary summary) includes: 'Entrada por transferencia de 150')! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 12:51:04'!
test12
	|anAccountSummary anAccount anAccount2|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Deposit register: 150 on: anAccount.	
	Transference from: anAccount2 to: anAccount amount: 150.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert:( (anAccountSummary summary) includes: 'Entrada por transferencia de 150')! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 12:41:08' prior: 50902413!
test08
	|anAccountSummary anAccount anAccount2|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Transference from: anAccount2 to: anAccount amount: 150.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert:( (anAccountSummary summary) includes: 'Entrada por transferencia de 150')! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 12:51:37' prior: 50902369!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	(account transactions isEmpty) ifFalse:[
		((account transactions first) isKindOf: Deposit) ifTrue:[summary add: 'Deposito de ', account transactions first value asString.].
		((account transactions first) isKindOf: Withdraw) ifTrue:[summary add: 'Extraccion de ', account transactions first value asString.].
		((account transactions first) isKindOf: DepositEnd) ifTrue:[summary add: 'Entrada por transferencia de ', account transactions first value asString.].
		((account transactions first) isKindOf: WithdrawEnd) ifTrue:[summary add: 'Salida por transferencia de ', account transactions first value asString.]].
	(account transactions size = 2) ifTrue:[
		((account transactions second) isKindOf: Deposit) ifTrue:[summary add: 'Deposito de ', account transactions second value asString.].
		((account transactions second) isKindOf: Withdraw) ifTrue:[summary add: 'Extraccion de ', account transactions second value asString.].
		((account transactions second) isKindOf: DepositEnd) ifTrue:[summary add: 'Entrada por transferencia de ', account transactions second value asString.].
		].
"	account transactions do:[:anTransaction| summary add: ('Deposito de ', anTransaction value asString)]."
	summary add: 'Balance = ', (account balance asString)! !

!testRun: #AccountSummaryTest #test01 stamp: 'D S 11/14/2020 12:51:42'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'D S 11/14/2020 12:51:42'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'D S 11/14/2020 12:51:42'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'D S 11/14/2020 12:51:42'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'D S 11/14/2020 12:51:42'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'D S 11/14/2020 12:51:42'!
PASSED!

!testRun: #AccountSummaryTest #test07 stamp: 'D S 11/14/2020 12:51:42'!
PASSED!

!testRun: #AccountSummaryTest #test08 stamp: 'D S 11/14/2020 12:51:42'!
PASSED!

!testRun: #AccountSummaryTest #test09 stamp: 'D S 11/14/2020 12:51:42'!
PASSED!

!testRun: #AccountSummaryTest #test10 stamp: 'D S 11/14/2020 12:51:42'!
PASSED!

!testRun: #AccountSummaryTest #test11 stamp: 'D S 11/14/2020 12:51:42'!
PASSED!

!testRun: #AccountSummaryTest #test12 stamp: 'D S 11/14/2020 12:51:42'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 12:52:00'!
test13
	|anAccountSummary anAccount anAccount2|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Deposit register: 150 on: anAccount.
	Transference from: anAccount to: anAccount2 amount: 150.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert:( (anAccountSummary summary) includes: 'Salida por transferencia de 150')! !

!testRun: #AccountSummaryTest #test13 stamp: 'D S 11/14/2020 12:52:03'!
FAILURE!

!testRun: #AccountSummaryTest #test13 stamp: 'D S 11/14/2020 12:52:03'!
FAILURE!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 12:52:19' prior: 50902457!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	(account transactions isEmpty) ifFalse:[
		((account transactions first) isKindOf: Deposit) ifTrue:[summary add: 'Deposito de ', account transactions first value asString.].
		((account transactions first) isKindOf: Withdraw) ifTrue:[summary add: 'Extraccion de ', account transactions first value asString.].
		((account transactions first) isKindOf: DepositEnd) ifTrue:[summary add: 'Entrada por transferencia de ', account transactions first value asString.].
		((account transactions first) isKindOf: WithdrawEnd) ifTrue:[summary add: 'Salida por transferencia de ', account transactions first value asString.]].
	(account transactions size = 2) ifTrue:[
		((account transactions second) isKindOf: Deposit) ifTrue:[summary add: 'Deposito de ', account transactions second value asString.].
		((account transactions second) isKindOf: Withdraw) ifTrue:[summary add: 'Extraccion de ', account transactions second value asString.].
		((account transactions second) isKindOf: DepositEnd) ifTrue:[summary add: 'Entrada por transferencia de ', account transactions second value asString.].
		((account transactions first) isKindOf: WithdrawEnd) ifTrue:[summary add: 'Salida por transferencia de ', account transactions first value asString.]
		].
"	account transactions do:[:anTransaction| summary add: ('Deposito de ', anTransaction value asString)]."
	summary add: 'Balance = ', (account balance asString)! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 12:52:27' prior: 50902553!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	(account transactions isEmpty) ifFalse:[
		((account transactions first) isKindOf: Deposit) ifTrue:[summary add: 'Deposito de ', account transactions first value asString.].
		((account transactions first) isKindOf: Withdraw) ifTrue:[summary add: 'Extraccion de ', account transactions first value asString.].
		((account transactions first) isKindOf: DepositEnd) ifTrue:[summary add: 'Entrada por transferencia de ', account transactions first value asString.].
		((account transactions first) isKindOf: WithdrawEnd) ifTrue:[summary add: 'Salida por transferencia de ', account transactions first value asString.]].
	(account transactions size = 2) ifTrue:[
		((account transactions second) isKindOf: Deposit) ifTrue:[summary add: 'Deposito de ', account transactions second value asString.].
		((account transactions second) isKindOf: Withdraw) ifTrue:[summary add: 'Extraccion de ', account transactions second value asString.].
		((account transactions second) isKindOf: DepositEnd) ifTrue:[summary add: 'Entrada por transferencia de ', account transactions second value asString.].
		((account transactions second) isKindOf: WithdrawEnd) ifTrue:[summary add: 'Salida por transferencia de ', account transactions second value asString.]
		].
"	account transactions do:[:anTransaction| summary add: ('Deposito de ', anTransaction value asString)]."
	summary add: 'Balance = ', (account balance asString)! !

!testRun: #AccountSummaryTest #test01 stamp: 'D S 11/14/2020 12:52:30'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'D S 11/14/2020 12:52:30'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'D S 11/14/2020 12:52:30'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'D S 11/14/2020 12:52:30'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'D S 11/14/2020 12:52:30'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'D S 11/14/2020 12:52:30'!
PASSED!

!testRun: #AccountSummaryTest #test07 stamp: 'D S 11/14/2020 12:52:30'!
PASSED!

!testRun: #AccountSummaryTest #test08 stamp: 'D S 11/14/2020 12:52:30'!
PASSED!

!testRun: #AccountSummaryTest #test09 stamp: 'D S 11/14/2020 12:52:30'!
PASSED!

!testRun: #AccountSummaryTest #test10 stamp: 'D S 11/14/2020 12:52:30'!
PASSED!

!testRun: #AccountSummaryTest #test11 stamp: 'D S 11/14/2020 12:52:30'!
PASSED!

!testRun: #AccountSummaryTest #test12 stamp: 'D S 11/14/2020 12:52:30'!
PASSED!

!testRun: #AccountSummaryTest #test13 stamp: 'D S 11/14/2020 12:52:30'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'D S 11/14/2020 12:53:13'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'D S 11/14/2020 12:53:13'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'D S 11/14/2020 12:53:13'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'D S 11/14/2020 12:53:13'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'D S 11/14/2020 12:53:13'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'D S 11/14/2020 12:53:13'!
PASSED!

!testRun: #AccountSummaryTest #test07 stamp: 'D S 11/14/2020 12:53:13'!
PASSED!

!testRun: #AccountSummaryTest #test08 stamp: 'D S 11/14/2020 12:53:13'!
PASSED!

!testRun: #AccountSummaryTest #test09 stamp: 'D S 11/14/2020 12:53:13'!
PASSED!

!testRun: #AccountSummaryTest #test10 stamp: 'D S 11/14/2020 12:53:13'!
PASSED!

!testRun: #AccountSummaryTest #test11 stamp: 'D S 11/14/2020 12:53:13'!
PASSED!

!testRun: #AccountSummaryTest #test12 stamp: 'D S 11/14/2020 12:53:13'!
PASSED!

!testRun: #AccountSummaryTest #test13 stamp: 'D S 11/14/2020 12:53:13'!
PASSED!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 12:55:36' prior: 50902604!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	account transactions do:[:anTransaction| 
		((anTransaction) isKindOf: Deposit) ifTrue:[summary add: 'Deposito de ', anTransaction value asString.].
		((anTransaction) isKindOf: Withdraw) ifTrue:[summary add: 'Extraccion de ', anTransaction value asString.].
		((anTransaction) isKindOf: DepositEnd) ifTrue:[summary add: 'Entrada por transferencia de ', anTransaction value asString.].
		((anTransaction) isKindOf: WithdrawEnd) ifTrue:[summary add: 'Salida por transferencia de ', anTransaction asString.]].
"	account transactions do:[:anTransaction| summary add: ('Deposito de ', anTransaction value asString)]."
	summary add: 'Balance = ', (account balance asString)! !

!testRun: #AccountSummaryTest #test01 stamp: 'D S 11/14/2020 12:55:46'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'D S 11/14/2020 12:55:46'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'D S 11/14/2020 12:55:46'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'D S 11/14/2020 12:55:46'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'D S 11/14/2020 12:55:46'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'D S 11/14/2020 12:55:46'!
PASSED!

!testRun: #AccountSummaryTest #test07 stamp: 'D S 11/14/2020 12:55:46'!
PASSED!

!testRun: #AccountSummaryTest #test08 stamp: 'D S 11/14/2020 12:55:46'!
PASSED!

!testRun: #AccountSummaryTest #test09 stamp: 'D S 11/14/2020 12:55:46'!
FAILURE!

!testRun: #AccountSummaryTest #test10 stamp: 'D S 11/14/2020 12:55:46'!
PASSED!

!testRun: #AccountSummaryTest #test11 stamp: 'D S 11/14/2020 12:55:46'!
PASSED!

!testRun: #AccountSummaryTest #test12 stamp: 'D S 11/14/2020 12:55:46'!
PASSED!

!testRun: #AccountSummaryTest #test13 stamp: 'D S 11/14/2020 12:55:46'!
FAILURE!

!testRun: #AccountSummaryTest #test09 stamp: 'D S 11/14/2020 12:55:53'!
FAILURE!

!testRun: #AccountSummaryTest #test09 stamp: 'D S 11/14/2020 12:55:53'!
FAILURE!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 12:56:19' prior: 50902720!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	account transactions do:[:anTransaction| 
		((anTransaction) isKindOf: Deposit) ifTrue:[summary add: 'Deposito de ', anTransaction value asString.].
		((anTransaction) isKindOf: Withdraw) ifTrue:[summary add: 'Extraccion de ', anTransaction value asString.].
		((anTransaction) isKindOf: DepositEnd) ifTrue:[summary add: 'Entrada por transferencia de ', anTransaction value asString.].
		((anTransaction) isKindOf: WithdrawEnd) ifTrue:[summary add: 'Salida por transferencia de ', anTransaction asString.]].
	summary add: 'Balance = ', (account balance asString)! !

!testRun: #AccountSummaryTest #test09 stamp: 'D S 11/14/2020 12:56:25'!
FAILURE!

!testRun: #AccountSummaryTest #test09 stamp: 'D S 11/14/2020 12:56:25'!
FAILURE!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 12:57:08' prior: 50902786!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	account transactions do:[:anTransaction| 
		((anTransaction) isKindOf: Deposit) ifTrue:[summary add: 'Deposito de ', anTransaction value asString.].
		((anTransaction) isKindOf: Withdraw) ifTrue:[summary add: 'Extraccion de ', anTransaction value asString.].
		((anTransaction) isKindOf: DepositEnd) ifTrue:[summary add: 'Entrada por transferencia de ', anTransaction value asString.].
		((anTransaction) isKindOf: WithdrawEnd) ifTrue:[summary add: 'Salida por transferencia de ', anTransaction value asString.]].
	summary add: 'Balance = ', (account balance asString)! !

!testRun: #AccountSummaryTest #test01 stamp: 'D S 11/14/2020 12:57:13'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'D S 11/14/2020 12:57:13'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'D S 11/14/2020 12:57:13'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'D S 11/14/2020 12:57:13'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'D S 11/14/2020 12:57:13'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'D S 11/14/2020 12:57:13'!
PASSED!

!testRun: #AccountSummaryTest #test07 stamp: 'D S 11/14/2020 12:57:13'!
PASSED!

!testRun: #AccountSummaryTest #test08 stamp: 'D S 11/14/2020 12:57:13'!
PASSED!

!testRun: #AccountSummaryTest #test09 stamp: 'D S 11/14/2020 12:57:13'!
PASSED!

!testRun: #AccountSummaryTest #test10 stamp: 'D S 11/14/2020 12:57:13'!
PASSED!

!testRun: #AccountSummaryTest #test11 stamp: 'D S 11/14/2020 12:57:13'!
PASSED!

!testRun: #AccountSummaryTest #test12 stamp: 'D S 11/14/2020 12:57:13'!
PASSED!

!testRun: #AccountSummaryTest #test13 stamp: 'D S 11/14/2020 12:57:13'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'D S 11/14/2020 13:34:49'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'D S 11/14/2020 13:34:49'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'D S 11/14/2020 13:34:49'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'D S 11/14/2020 13:34:49'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'D S 11/14/2020 13:34:49'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'D S 11/14/2020 13:34:49'!
PASSED!

!testRun: #AccountSummaryTest #test07 stamp: 'D S 11/14/2020 13:34:49'!
PASSED!

!testRun: #AccountSummaryTest #test08 stamp: 'D S 11/14/2020 13:34:49'!
PASSED!

!testRun: #AccountSummaryTest #test09 stamp: 'D S 11/14/2020 13:34:49'!
PASSED!

!testRun: #AccountSummaryTest #test10 stamp: 'D S 11/14/2020 13:34:49'!
PASSED!

!testRun: #AccountSummaryTest #test11 stamp: 'D S 11/14/2020 13:34:50'!
PASSED!

!testRun: #AccountSummaryTest #test12 stamp: 'D S 11/14/2020 13:34:50'!
PASSED!

!testRun: #AccountSummaryTest #test13 stamp: 'D S 11/14/2020 13:34:50'!
PASSED!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 13:40:00'!
generateSummaryOfAccountOrPortfolio: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	account transactions do:[:anTransaction| 
		((anTransaction) isKindOf: Deposit) ifTrue:[summary add: 'Deposito de ', anTransaction value asString.].
		((anTransaction) isKindOf: Withdraw) ifTrue:[summary add: 'Extraccion de ', anTransaction value asString.].
		((anTransaction) isKindOf: DepositEnd) ifTrue:[summary add: 'Entrada por transferencia de ', anTransaction value asString.].
		((anTransaction) isKindOf: WithdrawEnd) ifTrue:[summary add: 'Salida por transferencia de ', anTransaction value asString.]].
	summary add: 'Balance = ', (account balance asString)! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 13:40:00' prior: 50901572!
of: anAccount

	^self new generateSummaryOfAccountOrPortfolio: anAccount! !

!methodRemoval: AccountSummary #generateSummaryOfAccount: stamp: 'D S 11/14/2020 13:40:00'!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	account transactions do:[:anTransaction| 
		((anTransaction) isKindOf: Deposit) ifTrue:[summary add: 'Deposito de ', anTransaction value asString.].
		((anTransaction) isKindOf: Withdraw) ifTrue:[summary add: 'Extraccion de ', anTransaction value asString.].
		((anTransaction) isKindOf: DepositEnd) ifTrue:[summary add: 'Entrada por transferencia de ', anTransaction value asString.].
		((anTransaction) isKindOf: WithdrawEnd) ifTrue:[summary add: 'Salida por transferencia de ', anTransaction value asString.]].
	summary add: 'Balance = ', (account balance asString)!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 13:41:54'!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	account transactions do:[:anTransaction| 
		((anTransaction) isKindOf: Deposit) ifTrue:[summary add: 'Deposito de ', anTransaction value asString.].
		((anTransaction) isKindOf: Withdraw) ifTrue:[summary add: 'Extraccion de ', anTransaction value asString.].
		((anTransaction) isKindOf: DepositEnd) ifTrue:[summary add: 'Entrada por transferencia de ', anTransaction value asString.].
		((anTransaction) isKindOf: WithdrawEnd) ifTrue:[summary add: 'Salida por transferencia de ', anTransaction value asString.]].
	summary add: 'Balance = ', (account balance asString)! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 13:41:54' prior: 50902930!
of: anAccount

	^self new generateSummaryOfAccount: anAccount! !

!methodRemoval: AccountSummary #generateSummaryOfAccountOrPortfolio: stamp: 'D S 11/14/2020 13:41:54'!
generateSummaryOfAccountOrPortfolio: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	account transactions do:[:anTransaction| 
		((anTransaction) isKindOf: Deposit) ifTrue:[summary add: 'Deposito de ', anTransaction value asString.].
		((anTransaction) isKindOf: Withdraw) ifTrue:[summary add: 'Extraccion de ', anTransaction value asString.].
		((anTransaction) isKindOf: DepositEnd) ifTrue:[summary add: 'Entrada por transferencia de ', anTransaction value asString.].
		((anTransaction) isKindOf: WithdrawEnd) ifTrue:[summary add: 'Salida por transferencia de ', anTransaction value asString.]].
	summary add: 'Balance = ', (account balance asString)!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 13:43:22' prior: 50902533!
test13
	|anAccountSummary anAccount anAccount2 aPortfolio|
	
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Deposit register: 150 on: anAccount.
	Transference from: anAccount to: anAccount2 amount: 150.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert:( (anAccountSummary summary) includes: 'Salida por transferencia de 150')! !

!testRun: #AccountSummaryTest #test13 stamp: 'D S 11/14/2020 13:43:26'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 12:52:00' prior: 50903014!
test13
	|anAccountSummary anAccount anAccount2|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Deposit register: 150 on: anAccount.
	Transference from: anAccount to: anAccount2 amount: 150.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert:( (anAccountSummary summary) includes: 'Salida por transferencia de 150')! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 13:51:31' prior: 50902959!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	"buscar la manera de acceder transactions sin usar anAccount transactions ni modificar los objetos ya existentes (no cumplirian 3 que dice 'Crear nuevos reportes debe implicar crear clases nuevas \FAnicamente y no modificar
ninguna existente'.)"
	account transactions do:[:anTransaction| 
		((anTransaction) isKindOf: Deposit) ifTrue:[summary add: 'Deposito de ', anTransaction value asString.].
		((anTransaction) isKindOf: Withdraw) ifTrue:[summary add: 'Extraccion de ', anTransaction value asString.].
		((anTransaction) isKindOf: DepositEnd) ifTrue:[summary add: 'Entrada por transferencia de ', anTransaction value asString.].
		((anTransaction) isKindOf: WithdrawEnd) ifTrue:[summary add: 'Salida por transferencia de ', anTransaction value asString.]].
	summary add: 'Balance = ', (account balance asString)! !

!testRun: #AccountSummaryTest #test01 stamp: 'D S 11/14/2020 13:51:33'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'D S 11/14/2020 13:51:33'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'D S 11/14/2020 13:51:33'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'D S 11/14/2020 13:51:33'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'D S 11/14/2020 13:51:33'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'D S 11/14/2020 13:51:33'!
PASSED!

!testRun: #AccountSummaryTest #test07 stamp: 'D S 11/14/2020 13:51:33'!
PASSED!

!testRun: #AccountSummaryTest #test08 stamp: 'D S 11/14/2020 13:51:33'!
PASSED!

!testRun: #AccountSummaryTest #test09 stamp: 'D S 11/14/2020 13:51:33'!
PASSED!

!testRun: #AccountSummaryTest #test10 stamp: 'D S 11/14/2020 13:51:33'!
PASSED!

!testRun: #AccountSummaryTest #test11 stamp: 'D S 11/14/2020 13:51:33'!
PASSED!

!testRun: #AccountSummaryTest #test12 stamp: 'D S 11/14/2020 13:51:33'!
PASSED!

!testRun: #AccountSummaryTest #test13 stamp: 'D S 11/14/2020 13:51:33'!
PASSED!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 13:52:42' prior: 50903050!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	"buscar la manera de acceder transactions sin usar anAccount transactions ni modificar los objetos ya existentes (no cumpliria lo pedido.)"
	account transactions do:[:anTransaction| 
		((anTransaction) isKindOf: Deposit) ifTrue:[summary add: 'Deposito de ', anTransaction value asString.].
		((anTransaction) isKindOf: Withdraw) ifTrue:[summary add: 'Extraccion de ', anTransaction value asString.].
		((anTransaction) isKindOf: DepositEnd) ifTrue:[summary add: 'Entrada por transferencia de ', anTransaction value asString.].
		((anTransaction) isKindOf: WithdrawEnd) ifTrue:[summary add: 'Salida por transferencia de ', anTransaction value asString.]].
	summary add: 'Balance = ', (account balance asString)! !

Object subclass: #TransferNet
	instanceVariableNames: 'summary account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #TransferNet category: 'Portfolio2-Ejercicio' stamp: 'D S 11/14/2020 13:55:13'!
Object subclass: #TransferNet
	instanceVariableNames: 'summary account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

TestCase subclass: #TransferNetTest
	instanceVariableNames: 'summary account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #TransferNetTest category: 'Portfolio2-Ejercicio' stamp: 'D S 11/14/2020 13:55:26'!
TestCase subclass: #TransferNetTest
	instanceVariableNames: 'summary account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 13:56:54'!
test01SummaryOfAccountWithoutTransactionsShowsBalance0
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert: (anAccountSummary summary) includes: 'Balance = 0'.! !

!methodRemoval: AccountSummaryTest #test01 stamp: 'D S 11/14/2020 13:56:54'!
test01
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert: (anAccountSummary summary) includes: 'Balance = 0'.!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 13:57:13' prior: 50903169!
test01SummaryOfAccountWithoutTransactionsShowsBalance0
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert: (anAccountSummary summary) includes: 'Balance = 0'.
	self assert: (anAccountSummary relatedAccount) equals: anAccount! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 13:57:29'!
test01SummaryOfAccountWithoutTransactionsGenerateCorrectly
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert: (anAccountSummary summary) includes: 'Balance = 0'.
	self assert: (anAccountSummary relatedAccount) equals: anAccount! !

!methodRemoval: AccountSummaryTest #test01SummaryOfAccountWithoutTransactionsShowsBalance0 stamp: 'D S 11/14/2020 13:57:29'!
test01SummaryOfAccountWithoutTransactionsShowsBalance0
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert: (anAccountSummary summary) includes: 'Balance = 0'.
	self assert: (anAccountSummary relatedAccount) equals: anAccount!

!methodRemoval: AccountSummaryTest #test02 stamp: 'D S 11/14/2020 13:57:35'!
test02
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert: (anAccountSummary relatedAccount) equals: anAccount!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 13:58:12'!
test03SummaryShowsCorrectBalance
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	anAccountSummary := AccountSummary of: anAccount.

	
	self assert: (anAccountSummary summary) includes: 'Balance = 100'! !

!methodRemoval: AccountSummaryTest #test03 stamp: 'D S 11/14/2020 13:58:12'!
test03
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	anAccountSummary := AccountSummary of: anAccount.

	
	self assert: (anAccountSummary summary) includes: 'Balance = 100'!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 13:58:17'!
test02SummaryShowsCorrectBalance
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	anAccountSummary := AccountSummary of: anAccount.

	
	self assert: (anAccountSummary summary) includes: 'Balance = 100'! !

!methodRemoval: AccountSummaryTest #test03SummaryShowsCorrectBalance stamp: 'D S 11/14/2020 13:58:17'!
test03SummaryShowsCorrectBalance
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	anAccountSummary := AccountSummary of: anAccount.

	
	self assert: (anAccountSummary summary) includes: 'Balance = 100'!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 13:58:49'!
test03SummaryShowsDepositAndItsValue
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	anAccountSummary := AccountSummary of: anAccount.
	
	
	self assert: (anAccountSummary summary) includes: 'Deposito de 100'! !

!methodRemoval: AccountSummaryTest #test04 stamp: 'D S 11/14/2020 13:58:49'!
test04
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	anAccountSummary := AccountSummary of: anAccount.
	
	
	self assert: (anAccountSummary summary) includes: 'Deposito de 100'!

!methodRemoval: AccountSummaryTest #test05 stamp: 'D S 11/14/2020 13:58:53'!
test05
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 150 on: anAccount.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert: (anAccountSummary summary) includes: 'Deposito de 150'!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 13:59:15'!
test04SummaryDoesntShowInexistentTransactions
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 150 on: anAccount.
	anAccountSummary := AccountSummary of: anAccount.
	
	self deny:( (anAccountSummary summary) includes: 'Deposito de 100')! !

!methodRemoval: AccountSummaryTest #test06 stamp: 'D S 11/14/2020 13:59:15'!
test06
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 150 on: anAccount.
	anAccountSummary := AccountSummary of: anAccount.
	
	self deny:( (anAccountSummary summary) includes: 'Deposito de 100')!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 13:59:32'!
test05SummaryShowsWithdrawAndItsValue
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	Withdraw register: 150 on: anAccount.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert:( (anAccountSummary summary) includes: 'Extraccion de 150')! !

!methodRemoval: AccountSummaryTest #test07 stamp: 'D S 11/14/2020 13:59:32'!
test07
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	Withdraw register: 150 on: anAccount.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert:( (anAccountSummary summary) includes: 'Extraccion de 150')!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 14:00:06'!
test06SummaryShowsDepositEndOfTransferenceAndItsValue
	|anAccountSummary anAccount anAccount2|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Transference from: anAccount2 to: anAccount amount: 150.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert:( (anAccountSummary summary) includes: 'Entrada por transferencia de 150')! !

!methodRemoval: AccountSummaryTest #test08 stamp: 'D S 11/14/2020 14:00:06'!
test08
	|anAccountSummary anAccount anAccount2|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Transference from: anAccount2 to: anAccount amount: 150.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert:( (anAccountSummary summary) includes: 'Entrada por transferencia de 150')!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 14:00:24'!
test07SummaryShowsWithdrawEndOfTransferenceAndItsValue
	|anAccountSummary anAccount anAccount2|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Transference from: anAccount to: anAccount2 amount: 150.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert:( (anAccountSummary summary) includes: 'Salida por transferencia de 150')! !

!methodRemoval: AccountSummaryTest #test09 stamp: 'D S 11/14/2020 14:00:24'!
test09
	|anAccountSummary anAccount anAccount2|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Transference from: anAccount to: anAccount2 amount: 150.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert:( (anAccountSummary summary) includes: 'Salida por transferencia de 150')!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 14:01:21' prior: 50902277!
test10
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 150 on: anAccount.
	Deposit register: 200 on: anAccount.

	anAccountSummary := AccountSummary of: anAccount.
	
	self assert:( (anAccountSummary summary) includes: 'Deposito de 200').
	self assert:( (anAccountSummary summary) includes: 'Deposito de 150')! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 14:01:35'!
test08SummaryShowsMoreThanOneTransaction
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 150 on: anAccount.
	Deposit register: 200 on: anAccount.

	anAccountSummary := AccountSummary of: anAccount.
	
	self assert:( (anAccountSummary summary) includes: 'Deposito de 200').
	self assert:( (anAccountSummary summary) includes: 'Deposito de 150')! !

!methodRemoval: AccountSummaryTest #test10 stamp: 'D S 11/14/2020 14:01:35'!
test10
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 150 on: anAccount.
	Deposit register: 200 on: anAccount.

	anAccountSummary := AccountSummary of: anAccount.
	
	self assert:( (anAccountSummary summary) includes: 'Deposito de 200').
	self assert:( (anAccountSummary summary) includes: 'Deposito de 150')!

!methodRemoval: AccountSummaryTest #test11 stamp: 'D S 11/14/2020 14:01:39'!
test11
	|anAccountSummary anAccount|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 150 on: anAccount.
	Withdraw register: 150 on: anAccount.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert:( (anAccountSummary summary) includes: 'Extraccion de 150')!

!methodRemoval: AccountSummaryTest #test12 stamp: 'D S 11/14/2020 14:01:42'!
test12
	|anAccountSummary anAccount anAccount2|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Deposit register: 150 on: anAccount.	
	Transference from: anAccount2 to: anAccount amount: 150.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert:( (anAccountSummary summary) includes: 'Entrada por transferencia de 150')!

!methodRemoval: AccountSummaryTest #test13 stamp: 'D S 11/14/2020 14:01:44'!
test13
	|anAccountSummary anAccount anAccount2|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Deposit register: 150 on: anAccount.
	Transference from: anAccount to: anAccount2 amount: 150.
	anAccountSummary := AccountSummary of: anAccount.
	
	self assert:( (anAccountSummary summary) includes: 'Salida por transferencia de 150')!

!methodRemoval: Portfolio #accountSummary stamp: 'D S 11/14/2020 14:03:04'!
accountSummary
	|aSummary|
	
	aSummary := OrderedCollection  new.
	accounts do: [:anAccount| |subSummary|
				subSummary := anAccount accountSummary.
				subSummary removeLast.
				aSummary addAll: subSummary.].
	(aSummary add: ('Balance = ', self balance asString)).
	^aSummary!

!methodRemoval: ReceptiveAccount #accountSummary stamp: 'D S 11/14/2020 14:03:11'!
accountSummary
	|report |
	
	report:= OrderedCollection new.
	transactions do:[: aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue:[report add: 'Deposito por ', aTransaction value asString].
		(aTransaction isKindOf: Withdraw) ifTrue:[report add: 'Extraccion por ', aTransaction value asString].
		(aTransaction isKindOf: WithdrawEnd) ifTrue:[report add: 'Salida por transferencia de ', aTransaction value asString].
		(aTransaction isKindOf: DepositEnd)ifTrue: [report add: 'Entrada por transferencia de ', aTransaction value asString]].
	report add: 'Balance = ', self balance asString.
	^ report!

!methodRemoval: Account #accountSummary stamp: 'D S 11/14/2020 14:03:16'!
accountSummary

	self subclassResponsibility !

TestCase subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #TransferNetTest category: 'Portfolio2-Ejercicio' stamp: 'D S 11/14/2020 14:04:06'!
TestCase subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!TransferNetTest methodsFor: 'no messages' stamp: 'D S 11/14/2020 14:04:35'!
test01! !
!AccountSummary methodsFor: 'generateSummary' stamp: 'D S 11/14/2020 14:27:01' prior: 50903115!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	"buscar la manera de acceder transactions sin usar anAccount transactions ni modificar los objetos ya existentes (no cumpliria lo pedido.)"
	account transactions do:[:anTransaction| anTransaction addToSummary: self.
		"((anTransaction) isKindOf: Deposit) ifTrue:[summary add: 'Deposito de ', anTransaction value asString.].
		((anTransaction) isKindOf: Withdraw) ifTrue:[summary add: 'Extraccion de ', anTransaction value asString.].
		((anTransaction) isKindOf: DepositEnd) ifTrue:[summary add: 'Entrada por transferencia de ', anTransaction value asString.].
		((anTransaction) isKindOf: WithdrawEnd) ifTrue:[summary add: 'Salida por transferencia de ', anTransaction value asString.]"].
	summary add: 'Balance = ', (account balance asString)! !
!Deposit methodsFor: 'balance' stamp: 'D S 11/14/2020 14:27:39'!
addToSummary: aSummary

	aSummary addDepositofValue: value.! !
!Withdraw methodsFor: 'balance' stamp: 'D S 11/14/2020 14:28:07'!
addToSummary: aSummary

	aSummary addWithdrawOfValue: value.! !
!Deposit methodsFor: 'balance' stamp: 'D S 11/14/2020 14:28:13' prior: 50903574!
addToSummary: aSummary

	aSummary addDepositOfValue: value.! !
!DepositEnd methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 14:28:42'!
addToSummary: aSummary

	aSummary addDepositEndOfValue: self value.! !
!WithdrawEnd methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 14:28:55'!
addToSummary: aSummary

	aSummary addWithdrawEndOfValue: self value.! !
!AccountSummary methodsFor: 'accessing' stamp: 'D S 11/14/2020 14:29:21'!
addDepositOfValue: aValue

	! !
!AccountSummary methodsFor: 'accessing' stamp: 'D S 11/14/2020 14:29:26'!
addWithdrawOfValue: aValue

	! !
!AccountSummary methodsFor: 'accessing' stamp: 'D S 11/14/2020 14:29:37'!
addWithdrawEndOfValue: aValue

	! !
!AccountSummary methodsFor: 'accessing' stamp: 'D S 11/14/2020 14:29:41'!
addDepositEndOfValue: aValue

	! !
!AccountSummary methodsFor: 'accessing' stamp: 'D S 11/14/2020 14:29:58' prior: 50903599!
addDepositOfValue: aValue

	summary add: 'Deposito de ', aValue
	! !
!AccountSummary methodsFor: 'accessing' stamp: 'D S 11/14/2020 14:30:16' prior: 50903611!
addDepositEndOfValue: aValue
	
	summary add: 'Entrada por Transaccion de ', aValue
	! !
!AccountSummary methodsFor: 'accessing' stamp: 'D S 11/14/2020 14:30:29' prior: 50903607!
addWithdrawEndOfValue: aValue

	summary add: 'Salida por Transaccion de ', aValue! !
!AccountSummary methodsFor: 'accessing' stamp: 'D S 11/14/2020 14:30:38' prior: 50903603!
addWithdrawOfValue: aValue

	summary add: 'Extraccion de ', aValue! !
!AccountSummary methodsFor: 'generateSummary' stamp: 'D S 11/14/2020 14:31:03' prior: 50903545!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	"buscar la manera de acceder transactions sin usar anAccount transactions ni modificar los objetos ya existentes (no cumpliria lo pedido.)"
	account transactions do:[:anTransaction| anTransaction addToSummary: self.].
	summary add: 'Balance = ', (account balance asString)! !
!AccountSummary methodsFor: 'generateSummary' stamp: 'D S 11/14/2020 14:31:18' prior: 50903626!
addWithdrawEndOfValue: aValue

	summary add: 'Salida por transaccion de ', aValue! !
!AccountSummary methodsFor: 'generateSummary' stamp: 'D S 11/14/2020 14:31:22' prior: 50903620!
addDepositEndOfValue: aValue
	
	summary add: 'Entrada por transaccion de ', aValue
	! !

!testRun: #AccountSummaryTest #test01SummaryOfAccountWithoutTransactionsGenerateCorrectly stamp: 'D S 11/14/2020 14:31:25'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryShowsCorrectBalance stamp: 'D S 11/14/2020 14:31:25'!
ERROR!

!testRun: #AccountSummaryTest #test03SummaryShowsDepositAndItsValue stamp: 'D S 11/14/2020 14:31:25'!
ERROR!

!testRun: #AccountSummaryTest #test04SummaryDoesntShowInexistentTransactions stamp: 'D S 11/14/2020 14:31:25'!
ERROR!

!testRun: #AccountSummaryTest #test05SummaryShowsWithdrawAndItsValue stamp: 'D S 11/14/2020 14:31:25'!
ERROR!

!testRun: #AccountSummaryTest #test06SummaryShowsDepositEndOfTransferenceAndItsValue stamp: 'D S 11/14/2020 14:31:25'!
ERROR!

!testRun: #AccountSummaryTest #test07SummaryShowsWithdrawEndOfTransferenceAndItsValue stamp: 'D S 11/14/2020 14:31:25'!
ERROR!

!testRun: #AccountSummaryTest #test08SummaryShowsMoreThanOneTransaction stamp: 'D S 11/14/2020 14:31:25'!
ERROR!

!testRun: #AccountSummaryTest #test02SummaryShowsCorrectBalance stamp: 'D S 11/14/2020 14:32:07'!
ERROR!

!testRun: #AccountSummaryTest #test02SummaryShowsCorrectBalance stamp: 'D S 11/14/2020 14:32:07'!
ERROR!
!AccountSummary methodsFor: 'generateSummary' stamp: 'D S 11/14/2020 14:32:16' prior: 50903659!
addDepositEndOfValue: aValue
	
	summary add: 'Entrada por transaccion de ', aValue asString
	! !
!AccountSummary methodsFor: 'generateSummary' stamp: 'D S 11/14/2020 14:32:20' prior: 50903615!
addDepositOfValue: aValue

	summary add: 'Deposito de ', aValue asString
	! !
!AccountSummary methodsFor: 'generateSummary' stamp: 'D S 11/14/2020 14:32:23' prior: 50903653!
addWithdrawEndOfValue: aValue

	summary add: 'Salida por transaccion de ', aValue asString! !
!AccountSummary methodsFor: 'generateSummary' stamp: 'D S 11/14/2020 14:32:27' prior: 50903632!
addWithdrawOfValue: aValue

	summary add: 'Extraccion de ', aValue asString! !

!testRun: #AccountSummaryTest #test01SummaryOfAccountWithoutTransactionsGenerateCorrectly stamp: 'D S 11/14/2020 14:32:31'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryShowsCorrectBalance stamp: 'D S 11/14/2020 14:32:31'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryShowsDepositAndItsValue stamp: 'D S 11/14/2020 14:32:31'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryDoesntShowInexistentTransactions stamp: 'D S 11/14/2020 14:32:31'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryShowsWithdrawAndItsValue stamp: 'D S 11/14/2020 14:32:31'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryShowsDepositEndOfTransferenceAndItsValue stamp: 'D S 11/14/2020 14:32:31'!
FAILURE!

!testRun: #AccountSummaryTest #test07SummaryShowsWithdrawEndOfTransferenceAndItsValue stamp: 'D S 11/14/2020 14:32:31'!
FAILURE!

!testRun: #AccountSummaryTest #test08SummaryShowsMoreThanOneTransaction stamp: 'D S 11/14/2020 14:32:31'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryShowsDepositEndOfTransferenceAndItsValue stamp: 'D S 11/14/2020 14:32:35'!
FAILURE!

!testRun: #AccountSummaryTest #test06SummaryShowsDepositEndOfTransferenceAndItsValue stamp: 'D S 11/14/2020 14:32:35'!
FAILURE!
!AccountSummary methodsFor: 'generateSummary' stamp: 'D S 11/14/2020 14:32:51' prior: 50903714!
addWithdrawEndOfValue: aValue

	summary add: 'Salida por transferencia de ', aValue asString! !
!AccountSummary methodsFor: 'generateSummary' stamp: 'D S 11/14/2020 14:32:58' prior: 50903701!
addDepositEndOfValue: aValue
	
	summary add: 'Entrada por transferencia de ', aValue asString
	! !

!testRun: #AccountSummaryTest #test01SummaryOfAccountWithoutTransactionsGenerateCorrectly stamp: 'D S 11/14/2020 14:33:02'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryShowsCorrectBalance stamp: 'D S 11/14/2020 14:33:02'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryShowsDepositAndItsValue stamp: 'D S 11/14/2020 14:33:02'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryDoesntShowInexistentTransactions stamp: 'D S 11/14/2020 14:33:02'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryShowsWithdrawAndItsValue stamp: 'D S 11/14/2020 14:33:02'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryShowsDepositEndOfTransferenceAndItsValue stamp: 'D S 11/14/2020 14:33:02'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryShowsWithdrawEndOfTransferenceAndItsValue stamp: 'D S 11/14/2020 14:33:02'!
PASSED!

!testRun: #AccountSummaryTest #test08SummaryShowsMoreThanOneTransaction stamp: 'D S 11/14/2020 14:33:02'!
PASSED!

!testRun: #AccountSummaryTest #test01SummaryOfAccountWithoutTransactionsGenerateCorrectly stamp: 'D S 11/14/2020 14:33:29'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryShowsCorrectBalance stamp: 'D S 11/14/2020 14:33:29'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryShowsDepositAndItsValue stamp: 'D S 11/14/2020 14:33:29'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryDoesntShowInexistentTransactions stamp: 'D S 11/14/2020 14:33:29'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryShowsWithdrawAndItsValue stamp: 'D S 11/14/2020 14:33:29'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryShowsDepositEndOfTransferenceAndItsValue stamp: 'D S 11/14/2020 14:33:29'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryShowsWithdrawEndOfTransferenceAndItsValue stamp: 'D S 11/14/2020 14:33:29'!
PASSED!

!testRun: #AccountSummaryTest #test08SummaryShowsMoreThanOneTransaction stamp: 'D S 11/14/2020 14:33:29'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 14:35:28' prior: 50903541!
test01
	|anAccount aTransferNet|
	
	anAccount:= ReceptiveAccount new.
	aTransferNet := TransferNet of: anAccount.
	
	self assert: (aTransferNet value) equals: 0.! !
!DepositEnd methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 14:36:52'!
addToReport: aSummary

	aSummary addDepositEndOfValue: self value.! !

!methodRemoval: DepositEnd #addToSummary: stamp: 'D S 11/14/2020 14:36:52'!
addToSummary: aSummary

	aSummary addDepositEndOfValue: self value.!
!WithdrawEnd methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 14:37:06'!
addToReport: aSummary

	aSummary addWithdrawEndOfValue: self value.! !

!methodRemoval: WithdrawEnd #addToSummary: stamp: 'D S 11/14/2020 14:37:06'!
addToSummary: aSummary

	aSummary addWithdrawEndOfValue: self value.!
!Deposit methodsFor: 'balance' stamp: 'D S 11/14/2020 14:37:19'!
addToReport: aSummary

	aSummary addDepositOfValue: value.! !

!methodRemoval: Deposit #addToSummary: stamp: 'D S 11/14/2020 14:37:19'!
addToSummary: aSummary

	aSummary addDepositOfValue: value.!
!Withdraw methodsFor: 'balance' stamp: 'D S 11/14/2020 14:37:30'!
addToReport: aSummary

	aSummary addWithdrawOfValue: value.! !

!methodRemoval: Withdraw #addToSummary: stamp: 'D S 11/14/2020 14:37:30'!
addToSummary: aSummary

	aSummary addWithdrawOfValue: value.!

!testRun: #AccountSummaryTest #test01SummaryOfAccountWithoutTransactionsGenerateCorrectly stamp: 'D S 11/14/2020 14:38:25'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryShowsCorrectBalance stamp: 'D S 11/14/2020 14:38:25'!
ERROR!

!testRun: #AccountSummaryTest #test03SummaryShowsDepositAndItsValue stamp: 'D S 11/14/2020 14:38:25'!
ERROR!

!testRun: #AccountSummaryTest #test04SummaryDoesntShowInexistentTransactions stamp: 'D S 11/14/2020 14:38:25'!
ERROR!

!testRun: #AccountSummaryTest #test05SummaryShowsWithdrawAndItsValue stamp: 'D S 11/14/2020 14:38:25'!
ERROR!

!testRun: #AccountSummaryTest #test06SummaryShowsDepositEndOfTransferenceAndItsValue stamp: 'D S 11/14/2020 14:38:25'!
ERROR!

!testRun: #AccountSummaryTest #test07SummaryShowsWithdrawEndOfTransferenceAndItsValue stamp: 'D S 11/14/2020 14:38:25'!
ERROR!

!testRun: #AccountSummaryTest #test08SummaryShowsMoreThanOneTransaction stamp: 'D S 11/14/2020 14:38:25'!
ERROR!
!AccountSummary methodsFor: 'generateSummary' stamp: 'D S 11/14/2020 14:38:37' prior: 50903638!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	"buscar la manera de acceder transactions sin usar anAccount transactions ni modificar los objetos ya existentes (no cumpliria lo pedido.)"
	account transactions do:[:anTransaction| anTransaction addToReport: self.].
	summary add: 'Balance = ', (account balance asString)! !

!testRun: #AccountSummaryTest #test01SummaryOfAccountWithoutTransactionsGenerateCorrectly stamp: 'D S 11/14/2020 14:38:41'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryShowsCorrectBalance stamp: 'D S 11/14/2020 14:38:41'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryShowsDepositAndItsValue stamp: 'D S 11/14/2020 14:38:41'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryDoesntShowInexistentTransactions stamp: 'D S 11/14/2020 14:38:41'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryShowsWithdrawAndItsValue stamp: 'D S 11/14/2020 14:38:41'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryShowsDepositEndOfTransferenceAndItsValue stamp: 'D S 11/14/2020 14:38:41'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryShowsWithdrawEndOfTransferenceAndItsValue stamp: 'D S 11/14/2020 14:38:41'!
PASSED!

!testRun: #AccountSummaryTest #test08SummaryShowsMoreThanOneTransaction stamp: 'D S 11/14/2020 14:38:41'!
PASSED!
!Deposit methodsFor: 'balance' stamp: 'D S 11/14/2020 15:16:25' prior: 50903863!
addToReport: aSummary

	aSummary addDepositOfValue: self.! !
!Withdraw methodsFor: 'balance' stamp: 'D S 11/14/2020 15:16:31' prior: 50903872!
addToReport: aSummary

	aSummary addWithdrawOfValue: self.! !
!DepositEnd methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 15:16:48' prior: 50903844!
addToReport: aSummary

	aSummary addDepositEndOfValue: self.! !
!WithdrawEnd methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 15:16:54' prior: 50903854!
addToReport: aSummary

	aSummary addWithdrawEndOfValue: self.! !
!AccountSummary methodsFor: 'generateSummary --Private--' stamp: 'D S 11/14/2020 15:17:38' prior: 50903720!
addWithdrawOfValue: aTransaction

	summary add: 'Extraccion de ', aTransaction value asString! !
!AccountSummary methodsFor: 'generateSummary --Private--' stamp: 'D S 11/14/2020 15:17:46' prior: 50903764!
addWithdrawEndOfValue: aTransaction

	summary add: 'Salida por transferencia de ', aTransaction value asString! !
!AccountSummary methodsFor: 'generateSummary --Private--' stamp: 'D S 11/14/2020 15:17:56' prior: 50903708!
addDepositOfValue: aTransaction

	summary add: 'Deposito de ', aTransaction value asString! !
!AccountSummary methodsFor: 'generateSummary --Private--' stamp: 'D S 11/14/2020 15:18:06' prior: 50903770!
addDepositEndOfValue: aTransaction
	
	summary add: 'Entrada por transferencia de ', aTransaction value asString! !

!testRun: #AccountSummaryTest #test01SummaryOfAccountWithoutTransactionsGenerateCorrectly stamp: 'D S 11/14/2020 15:18:09'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryShowsCorrectBalance stamp: 'D S 11/14/2020 15:18:09'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryShowsDepositAndItsValue stamp: 'D S 11/14/2020 15:18:09'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryDoesntShowInexistentTransactions stamp: 'D S 11/14/2020 15:18:09'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryShowsWithdrawAndItsValue stamp: 'D S 11/14/2020 15:18:09'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryShowsDepositEndOfTransferenceAndItsValue stamp: 'D S 11/14/2020 15:18:09'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryShowsWithdrawEndOfTransferenceAndItsValue stamp: 'D S 11/14/2020 15:18:09'!
PASSED!

!testRun: #AccountSummaryTest #test08SummaryShowsMoreThanOneTransaction stamp: 'D S 11/14/2020 15:18:09'!
PASSED!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/14/2020 15:23:01'!
somethingReport: aReport

	transactions do: [:aTransaction | aTransaction addToReport: aReport]! !
!AccountSummary methodsFor: 'generateSummary' stamp: 'D S 11/14/2020 15:23:18' prior: 50903911!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.
	"buscar la manera de acceder transactions sin usar anAccount transactions ni modificar los objetos ya existentes (no cumpliria lo pedido.)"
	anAccount somethingReport: self.
	summary add: 'Balance = ', (account balance asString)! !

!testRun: #AccountSummaryTest #test01SummaryOfAccountWithoutTransactionsGenerateCorrectly stamp: 'D S 11/14/2020 15:23:22'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryShowsCorrectBalance stamp: 'D S 11/14/2020 15:23:22'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryShowsDepositAndItsValue stamp: 'D S 11/14/2020 15:23:22'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryDoesntShowInexistentTransactions stamp: 'D S 11/14/2020 15:23:22'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryShowsWithdrawAndItsValue stamp: 'D S 11/14/2020 15:23:22'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryShowsDepositEndOfTransferenceAndItsValue stamp: 'D S 11/14/2020 15:23:22'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryShowsWithdrawEndOfTransferenceAndItsValue stamp: 'D S 11/14/2020 15:23:22'!
PASSED!

!testRun: #AccountSummaryTest #test08SummaryShowsMoreThanOneTransaction stamp: 'D S 11/14/2020 15:23:22'!
PASSED!

Object subclass: #Report
	instanceVariableNames: 'summary account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #Report category: 'Portfolio2-Ejercicio' stamp: 'D S 11/14/2020 15:23:32'!
Object subclass: #Report
	instanceVariableNames: 'summary account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

Report subclass: #AccountSummary
	instanceVariableNames: 'summary account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #Report category: 'Portfolio2-Ejercicio' stamp: 'D S 11/14/2020 15:24:13'!
Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

Report subclass: #AccountSummary
	instanceVariableNames: 'summary account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #AccountSummary category: 'Portfolio2-Ejercicio' stamp: 'D S 11/14/2020 15:24:27'!
Report subclass: #AccountSummary
	instanceVariableNames: 'summary account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

Report subclass: #TransferNet
	instanceVariableNames: 'summary account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #TransferNet category: 'Portfolio2-Ejercicio' stamp: 'D S 11/14/2020 15:24:38'!
Report subclass: #TransferNet
	instanceVariableNames: 'summary account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!testRun: #TransferNetTest #test01 stamp: 'D S 11/14/2020 15:53:36'!
ERROR!

!testRun: #TransferNetTest #test01 stamp: 'D S 11/14/2020 15:53:36'!
ERROR!
!TransferNet class methodsFor: 'no messages' stamp: 'D S 11/14/2020 15:54:17'!
of: anAccount

	^self new calculateTransferNet: anAccount! !

!classDefinition: #TransferNet category: 'Portfolio2-Ejercicio' stamp: 'D S 11/14/2020 15:54:47'!
Report subclass: #TransferNet
	instanceVariableNames: 'summary account transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!TransferNet methodsFor: 'no messages' stamp: 'D S 11/14/2020 15:54:43'!
calculateTransferNet: anAccount

	transferNet := 0.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 15:55:01' overrides: 16881508!
value

	^transferNet.! !

!testRun: #TransferNetTest #test01 stamp: 'D S 11/14/2020 15:55:08'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 16:01:17'!
test02
	|anAccountTransferNet anAccount anAccount2|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Transference from: anAccount2 to: anAccount amount: 100.
	anAccountTransferNet := TransferNet of: anAccount.

	
	self assert: (anAccountTransferNet value) includes: 100! !

!testRun: #TransferNetTest #test02 stamp: 'D S 11/14/2020 16:01:23'!
ERROR!

!testRun: #TransferNetTest #test02 stamp: 'D S 11/14/2020 16:01:23'!
ERROR!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 16:02:46' prior: 50904156!
calculateTransferNet: anAccount

	anAccount transactions isEmpty ifTrue:[transferNet := 0.]
	ifFalse: [transferNet := 100.]! !

!testRun: #TransferNetTest #test02 stamp: 'D S 11/14/2020 16:03:01'!
ERROR!

!testRun: #TransferNetTest #test02 stamp: 'D S 11/14/2020 16:03:01'!
ERROR!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 16:03:10' prior: 50904167!
test02
	|anAccountTransferNet anAccount anAccount2|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Transference from: anAccount2 to: anAccount amount: 100.
	anAccountTransferNet := TransferNet of: anAccount.

	
	self assert: (anAccountTransferNet value) equals: 100! !

!testRun: #TransferNetTest #test02 stamp: 'D S 11/14/2020 16:03:13'!
PASSED!

!testRun: #TransferNetTest #test01 stamp: 'D S 11/14/2020 16:03:17'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 16:03:37'!
test03
	|anAccountTransferNet anAccount anAccount2|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Transference from: anAccount2 to: anAccount amount: 150.
	anAccountTransferNet := TransferNet of: anAccount.

	
	self assert: (anAccountTransferNet value) equals: 150! !

!testRun: #TransferNetTest #test03 stamp: 'D S 11/14/2020 16:03:40'!
FAILURE!

!testRun: #TransferNetTest #test03 stamp: 'D S 11/14/2020 16:03:40'!
FAILURE!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 16:04:09' prior: 50904185!
calculateTransferNet: anAccount

	anAccount transactions isEmpty ifTrue:[transferNet := anAccount transactions first value.]
	ifFalse: [transferNet := 100.]! !

!testRun: #TransferNetTest #test01 stamp: 'D S 11/14/2020 16:04:13'!
ERROR!

!testRun: #TransferNetTest #test02 stamp: 'D S 11/14/2020 16:04:13'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'D S 11/14/2020 16:04:13'!
FAILURE!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 16:04:33' prior: 50904232!
calculateTransferNet: anAccount

	anAccount transactions isEmpty ifFalse:[transferNet := anAccount transactions first value.]
	ifTrue: [transferNet := 0.]! !

!testRun: #TransferNetTest #test01 stamp: 'D S 11/14/2020 16:04:36'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'D S 11/14/2020 16:04:36'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'D S 11/14/2020 16:04:36'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 16:04:55'!
test04
	|anAccountTransferNet anAccount anAccount2|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Transference from: anAccount2 to: anAccount amount: 150.
	Transference from: anAccount2 to: anAccount amount: 100.

	anAccountTransferNet := TransferNet of: anAccount.

	
	self assert: (anAccountTransferNet value) equals: 250! !

!testRun: #TransferNetTest #test04 stamp: 'D S 11/14/2020 16:04:58'!
FAILURE!

!testRun: #TransferNetTest #test04 stamp: 'D S 11/14/2020 16:04:58'!
FAILURE!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 16:05:56' prior: 50904248!
calculateTransferNet: anAccount

	transferNet := 0.
	anAccount transactions isEmpty ifFalse:[anAccount transactions do: [:aTransaction| transferNet := transferNet + aTransaction value].]
! !

!testRun: #TransferNetTest #test01 stamp: 'D S 11/14/2020 16:06:22'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'D S 11/14/2020 16:06:22'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'D S 11/14/2020 16:06:22'!
PASSED!

!testRun: #TransferNetTest #test04 stamp: 'D S 11/14/2020 16:06:22'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 16:06:34'!
test05
	|anAccountTransferNet anAccount anAccount2|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Transference from: anAccount2 to: anAccount amount: 150.
	Transference from: anAccount to: anAccount2 amount: 100.

	anAccountTransferNet := TransferNet of: anAccount.

	
	self assert: (anAccountTransferNet value) equals: 50! !

!testRun: #TransferNetTest #test05 stamp: 'D S 11/14/2020 16:06:38'!
FAILURE!

!testRun: #TransferNetTest #test05 stamp: 'D S 11/14/2020 16:06:38'!
FAILURE!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 16:07:43' prior: 50904283!
calculateTransferNet: anAccount

	transferNet := 0.
	anAccount transactions isEmpty ifFalse:[anAccount transactions do: [:aTransaction| 
			(aTransaction isKindOf: DepositEnd) ifTrue:[transferNet := transferNet + aTransaction value].
			(aTransaction isKindOf: WithdrawEnd) ifTrue:[transferNet := transferNet - aTransaction value]].]
! !

!testRun: #TransferNetTest #test01 stamp: 'D S 11/14/2020 16:07:48'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'D S 11/14/2020 16:07:48'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'D S 11/14/2020 16:07:48'!
PASSED!

!testRun: #TransferNetTest #test04 stamp: 'D S 11/14/2020 16:07:48'!
PASSED!

!testRun: #TransferNetTest #test05 stamp: 'D S 11/14/2020 16:07:48'!
PASSED!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 16:08:22' prior: 50904322!
calculateTransferNet: anAccount

	transferNet := 0.
	account := anAccount.
	account transactions isEmpty ifFalse:[account transactions do: [:aTransaction| 
			(aTransaction isKindOf: DepositEnd) ifTrue:[transferNet := transferNet + aTransaction value].
			(aTransaction isKindOf: WithdrawEnd) ifTrue:[transferNet := transferNet - aTransaction value]].].
! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 16:10:15'!
relatedAccount

	^account.! !
!AccountSummary methodsFor: 'generateSummary' stamp: 'D S 11/14/2020 16:14:03' prior: 50904041!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.

	anAccount somethingReport: self.
	summary add: 'Balance = ', (account balance asString)! !
!AccountSummary methodsFor: 'generateSummary --Private--' stamp: 'D S 11/14/2020 16:16:29'!
addDeposit: aTransaction
	
	summary add: 'Entrada por transferencia de ', aTransaction value asString! !

!methodRemoval: AccountSummary #addDepositEndOfValue: stamp: 'D S 11/14/2020 16:16:29'!
addDepositEndOfValue: aTransaction
	
	summary add: 'Entrada por transferencia de ', aTransaction value asString!
!AccountSummary methodsFor: 'generateSummary --Private--' stamp: 'D S 11/14/2020 16:16:46'!
addDepositEnd: aTransaction
	
	summary add: 'Entrada por transferencia de ', aTransaction value asString! !

!methodRemoval: AccountSummary #addDeposit: stamp: 'D S 11/14/2020 16:16:46'!
addDeposit: aTransaction
	
	summary add: 'Entrada por transferencia de ', aTransaction value asString!
!AccountSummary methodsFor: 'generateSummary --Private--' stamp: 'D S 11/14/2020 16:17:00'!
addDeposit: aTransaction

	summary add: 'Deposito de ', aTransaction value asString! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 16:17:00' prior: 50903955!
addToReport: aSummary

	aSummary addDeposit: self.! !

!methodRemoval: AccountSummary #addDepositOfValue: stamp: 'D S 11/14/2020 16:17:00'!
addDepositOfValue: aTransaction

	summary add: 'Deposito de ', aTransaction value asString!
!AccountSummary methodsFor: 'generateSummary --Private--' stamp: 'D S 11/14/2020 16:17:19'!
addWithdrawEnd: aTransaction

	summary add: 'Salida por transferencia de ', aTransaction value asString! !
!WithdrawEnd methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 16:17:19' prior: 50903971!
addToReport: aSummary

	aSummary addWithdrawEnd: self.! !

!methodRemoval: AccountSummary #addWithdrawEndOfValue: stamp: 'D S 11/14/2020 16:17:19'!
addWithdrawEndOfValue: aTransaction

	summary add: 'Salida por transferencia de ', aTransaction value asString!
!AccountSummary methodsFor: 'generateSummary --Private--' stamp: 'D S 11/14/2020 16:17:29'!
addWithdraw: aTransaction

	summary add: 'Extraccion de ', aTransaction value asString! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 16:17:29' prior: 50903960!
addToReport: aSummary

	aSummary addWithdraw: self.! !

!methodRemoval: AccountSummary #addWithdrawOfValue: stamp: 'D S 11/14/2020 16:17:29'!
addWithdrawOfValue: aTransaction

	summary add: 'Extraccion de ', aTransaction value asString!
!DepositEnd methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 16:17:42' prior: 50903965!
addToReport: aSummary

	aSummary addDepositEnd: self.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 16:18:18'!
addWithdraw: aTransaction

! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 16:18:31'!
addDeposit: aTransaction

! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 16:19:15'!
addWithdrawEnd: aTransaction

	transferNet := transferNet + aTransaction value! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 16:19:21' prior: 50904465!
addWithdrawEnd: aTransaction

	transferNet := transferNet - aTransaction value! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 16:19:28'!
addDepositEnd: aTransaction

	transferNet := transferNet - aTransaction value! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 16:19:30' prior: 50904477!
addDepositEnd: aTransaction

	transferNet := transferNet + aTransaction value! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 16:19:48' prior: 50904348!
calculateTransferNet: anAccount

	transferNet := 0.
	account := anAccount.
	account somethingReport: self! !

!testRun: #TransferNetTest #test01 stamp: 'D S 11/14/2020 16:19:52'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'D S 11/14/2020 16:19:52'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'D S 11/14/2020 16:19:52'!
PASSED!

!testRun: #TransferNetTest #test04 stamp: 'D S 11/14/2020 16:19:52'!
PASSED!

!testRun: #TransferNetTest #test05 stamp: 'D S 11/14/2020 16:19:52'!
PASSED!

----SNAPSHOT----(14 November 2020 16:20:02) CuisUniversity-4383.image priorSource: 18210216!

----SNAPSHOT----(14 November 2020 16:20:35) CuisUniversity-4383.image priorSource: 18331410!

----QUIT----(14 November 2020 16:31:10) CuisUniversity-4383.image priorSource: 18331504!

----STARTUP---- (14 November 2020 16:34:07) as /home/dn-01/Escritorio/Ingenieria en Software I/CuisLimpio/CuisUniversity-4383.image!

!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 16:36:10'!
test06
	|anAccountTransferNet anAccount anAccount2 aPortfolio|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	aPortfolio := Portfolio new.
	Transference from: anAccount2 to: anAccount amount: 150.
	Transference from: anAccount to: anAccount2 amount: 100.
	aPortfolio add: anAccount.
	anAccountTransferNet := TransferNet of: aPortfolio.

	
	self assert: (anAccountTransferNet value) equals: 50! !

!testRun: #TransferNetTest #test06 stamp: 'D S 11/14/2020 16:36:23'!
ERROR!

!testRun: #TransferNetTest #test06 stamp: 'D S 11/14/2020 16:36:23'!
ERROR!
!Portfolio methodsFor: 'accounts management' stamp: 'D S 11/14/2020 16:37:14'!
somethingReport: aReport

	self! !
!Portfolio methodsFor: 'accounts management' stamp: 'D S 11/14/2020 16:38:11' prior: 50904542!
somethingReport: aReport

	(accounts first) somethingReport: aReport.! !

!testRun: #TransferNetTest #test01 stamp: 'D S 11/14/2020 16:38:31'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'D S 11/14/2020 16:38:31'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'D S 11/14/2020 16:38:31'!
PASSED!

!testRun: #TransferNetTest #test04 stamp: 'D S 11/14/2020 16:38:31'!
PASSED!

!testRun: #TransferNetTest #test05 stamp: 'D S 11/14/2020 16:38:31'!
PASSED!

!testRun: #TransferNetTest #test06 stamp: 'D S 11/14/2020 16:38:31'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 16:38:45'!
test07
	|anAccountTransferNet anAccount anAccount2 aPortfolio|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	aPortfolio := Portfolio new.
	Transference from: anAccount2 to: anAccount amount: 150.
	Transference from: anAccount to: anAccount2 amount: 100.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	anAccountTransferNet := TransferNet of: aPortfolio.

	
	self assert: (anAccountTransferNet value) equals: 50! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 16:38:57' prior: 50904567!
test07
	|anAccountTransferNet anAccount anAccount2 aPortfolio|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	aPortfolio := Portfolio new.
	Transference from: anAccount2 to: anAccount amount: 150.
	Transference from: anAccount to: anAccount2 amount: 100.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	anAccountTransferNet := TransferNet of: aPortfolio.

	
	self assert: (anAccountTransferNet value) equals: 250! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 16:39:39' prior: 50904585!
test07
	|anAccountTransferNet aPortfolio|
	
	aPortfolio := Portfolio new.
	anAccountTransferNet := TransferNet of: aPortfolio.
	
	self assert: (anAccountTransferNet value) equals: 0! !

!testRun: #TransferNetTest #test07 stamp: 'D S 11/14/2020 16:39:44'!
ERROR!

!testRun: #TransferNetTest #test07 stamp: 'D S 11/14/2020 16:39:44'!
ERROR!
!Portfolio methodsFor: 'accounts management' stamp: 'D S 11/14/2020 16:40:13' prior: 50904547!
somethingReport: aReport

	accounts isEmpty ifTrue:[^0].
	(accounts first) somethingReport: aReport.! !

!testRun: #TransferNetTest #test01 stamp: 'D S 11/14/2020 16:40:24'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'D S 11/14/2020 16:40:24'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'D S 11/14/2020 16:40:24'!
PASSED!

!testRun: #TransferNetTest #test04 stamp: 'D S 11/14/2020 16:40:24'!
PASSED!

!testRun: #TransferNetTest #test05 stamp: 'D S 11/14/2020 16:40:24'!
PASSED!

!testRun: #TransferNetTest #test06 stamp: 'D S 11/14/2020 16:40:24'!
PASSED!

!testRun: #TransferNetTest #test07 stamp: 'D S 11/14/2020 16:40:24'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 16:40:41'!
test08
	|anAccountTransferNet anAccount anAccount2 aPortfolio|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	aPortfolio := Portfolio new.
	Transference from: anAccount2 to: anAccount amount: 150.
	Transference from: anAccount to: anAccount2 amount: 100.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	anAccountTransferNet := TransferNet of: aPortfolio.

	
	self assert: (anAccountTransferNet value) equals: 50! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 16:40:45' prior: 50904640!
test08
	|anAccountTransferNet anAccount anAccount2 aPortfolio|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	aPortfolio := Portfolio new.
	Transference from: anAccount2 to: anAccount amount: 150.
	Transference from: anAccount to: anAccount2 amount: 100.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	anAccountTransferNet := TransferNet of: aPortfolio.

	
	self assert: (anAccountTransferNet value) equals: 250! !
!Portfolio methodsFor: 'accounts management' stamp: 'D S 11/14/2020 16:41:19' prior: 50904617!
somethingReport: aReport

	accounts do: [:anAccount| anAccount somethingReport: aReport].! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'D S 11/14/2020 16:41:30'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'D S 11/14/2020 16:41:30'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'D S 11/14/2020 16:41:30'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'D S 11/14/2020 16:41:30'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'D S 11/14/2020 16:41:30'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'D S 11/14/2020 16:41:30'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'D S 11/14/2020 16:41:30'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'D S 11/14/2020 16:41:30'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'D S 11/14/2020 16:41:30'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'D S 11/14/2020 16:41:30'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'D S 11/14/2020 16:41:30'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'D S 11/14/2020 16:41:30'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'D S 11/14/2020 16:41:30'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'D S 11/14/2020 16:41:30'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'D S 11/14/2020 16:41:30'!
PASSED!

!testRun: #TransferNetTest #test01 stamp: 'D S 11/14/2020 16:41:40'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'D S 11/14/2020 16:41:40'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'D S 11/14/2020 16:41:40'!
PASSED!

!testRun: #TransferNetTest #test04 stamp: 'D S 11/14/2020 16:41:40'!
PASSED!

!testRun: #TransferNetTest #test05 stamp: 'D S 11/14/2020 16:41:40'!
PASSED!

!testRun: #TransferNetTest #test06 stamp: 'D S 11/14/2020 16:41:40'!
PASSED!

!testRun: #TransferNetTest #test07 stamp: 'D S 11/14/2020 16:41:40'!
PASSED!

!testRun: #TransferNetTest #test08 stamp: 'D S 11/14/2020 16:41:40'!
FAILURE!

!testRun: #TransferNetTest #test08 stamp: 'D S 11/14/2020 16:41:40'!
FAILURE!

!testRun: #TransferNetTest #test07 stamp: 'D S 11/14/2020 16:41:56'!
PASSED!

!testRun: #TransferNetTest #test08 stamp: 'D S 11/14/2020 16:42:00'!
FAILURE!

!testRun: #TransferNetTest #test08 stamp: 'D S 11/14/2020 16:42:00'!
FAILURE!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 16:42:18' prior: 50904658!
test08
	|anAccountTransferNet anAccount anAccount2 aPortfolio|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	aPortfolio := Portfolio new.
	Transference from: anAccount2 to: anAccount amount: 150.
	Transference from: anAccount to: anAccount2 amount: 100.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	anAccountTransferNet := TransferNet of: aPortfolio.

	self assert: 250 equals: (anAccountTransferNet value)! !

!testRun: #TransferNetTest #test08 stamp: 'D S 11/14/2020 16:42:21'!
FAILURE!

!testRun: #TransferNetTest #test08 stamp: 'D S 11/14/2020 16:42:21'!
FAILURE!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 16:45:24' prior: 50904770!
test08
	|anAccountTransferNet anAccount anAccount2 aPortfolio|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	aPortfolio := Portfolio new.
	Transference from: anAccount2 to: anAccount amount: 150.
	Transference from: anAccount to: anAccount2 amount: 100.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	anAccountTransferNet := TransferNet of: aPortfolio.

	self assert: 0 equals: (anAccountTransferNet value)! !

!testRun: #TransferNetTest #test08 stamp: 'D S 11/14/2020 16:45:27'!
PASSED!

!testRun: #TransferNetTest #test01 stamp: 'D S 11/14/2020 20:15:07'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'D S 11/14/2020 20:15:07'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'D S 11/14/2020 20:15:07'!
PASSED!

!testRun: #TransferNetTest #test04 stamp: 'D S 11/14/2020 20:15:07'!
PASSED!

!testRun: #TransferNetTest #test05 stamp: 'D S 11/14/2020 20:15:07'!
PASSED!

!testRun: #TransferNetTest #test06 stamp: 'D S 11/14/2020 20:15:07'!
PASSED!

!testRun: #TransferNetTest #test07 stamp: 'D S 11/14/2020 20:15:07'!
PASSED!

!testRun: #TransferNetTest #test08 stamp: 'D S 11/14/2020 20:15:07'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 20:16:20'!
test01TransferNetFromAnEmptyAccountReturns0
	|anAccount aTransferNet|
	
	anAccount:= ReceptiveAccount new.
	aTransferNet := TransferNet of: anAccount.
	
	self assert: (aTransferNet value) equals: 0.! !

!methodRemoval: TransferNetTest #test01 stamp: 'D S 11/14/2020 20:16:20'!
test01
	|anAccount aTransferNet|
	
	anAccount:= ReceptiveAccount new.
	aTransferNet := TransferNet of: anAccount.
	
	self assert: (aTransferNet value) equals: 0.!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 20:16:50'!
test02TransferNetForAnAccountWithATransferenceReturnsCorrectly
	|anAccountTransferNet anAccount anAccount2|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Transference from: anAccount2 to: anAccount amount: 100.
	anAccountTransferNet := TransferNet of: anAccount.

	
	self assert: (anAccountTransferNet value) equals: 100! !

!methodRemoval: TransferNetTest #test02 stamp: 'D S 11/14/2020 20:16:50'!
test02
	|anAccountTransferNet anAccount anAccount2|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Transference from: anAccount2 to: anAccount amount: 100.
	anAccountTransferNet := TransferNet of: anAccount.

	
	self assert: (anAccountTransferNet value) equals: 100!

!methodRemoval: TransferNetTest #test03 stamp: 'D S 11/14/2020 20:17:01'!
test03
	|anAccountTransferNet anAccount anAccount2|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Transference from: anAccount2 to: anAccount amount: 150.
	anAccountTransferNet := TransferNet of: anAccount.

	
	self assert: (anAccountTransferNet value) equals: 150!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 20:17:28'!
test03TransferNetForAnAccountWithTwoTransferenceReturnsCorrectly
	|anAccountTransferNet anAccount anAccount2|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Transference from: anAccount2 to: anAccount amount: 150.
	Transference from: anAccount2 to: anAccount amount: 100.

	anAccountTransferNet := TransferNet of: anAccount.

	
	self assert: (anAccountTransferNet value) equals: 250! !

!methodRemoval: TransferNetTest #test04 stamp: 'D S 11/14/2020 20:17:28'!
test04
	|anAccountTransferNet anAccount anAccount2|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Transference from: anAccount2 to: anAccount amount: 150.
	Transference from: anAccount2 to: anAccount amount: 100.

	anAccountTransferNet := TransferNet of: anAccount.

	
	self assert: (anAccountTransferNet value) equals: 250!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 20:17:49'!
test04WithdrawEndAffectsNegatively
	|anAccountTransferNet anAccount anAccount2|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Transference from: anAccount2 to: anAccount amount: 150.
	Transference from: anAccount to: anAccount2 amount: 100.

	anAccountTransferNet := TransferNet of: anAccount.

	
	self assert: (anAccountTransferNet value) equals: 50! !

!methodRemoval: TransferNetTest #test05 stamp: 'D S 11/14/2020 20:17:49'!
test05
	|anAccountTransferNet anAccount anAccount2|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Transference from: anAccount2 to: anAccount amount: 150.
	Transference from: anAccount to: anAccount2 amount: 100.

	anAccountTransferNet := TransferNet of: anAccount.

	
	self assert: (anAccountTransferNet value) equals: 50!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 20:18:35'!
test05TransferNetOfAPortfolioReturnsCorrectly
	|anAccountTransferNet anAccount anAccount2 aPortfolio|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	aPortfolio := Portfolio new.
	Transference from: anAccount2 to: anAccount amount: 150.
	Transference from: anAccount to: anAccount2 amount: 100.
	aPortfolio add: anAccount.
	anAccountTransferNet := TransferNet of: aPortfolio.

	
	self assert: (anAccountTransferNet value) equals: 50! !

!methodRemoval: TransferNetTest #test06 stamp: 'D S 11/14/2020 20:18:35'!
test06
	|anAccountTransferNet anAccount anAccount2 aPortfolio|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	aPortfolio := Portfolio new.
	Transference from: anAccount2 to: anAccount amount: 150.
	Transference from: anAccount to: anAccount2 amount: 100.
	aPortfolio add: anAccount.
	anAccountTransferNet := TransferNet of: aPortfolio.

	
	self assert: (anAccountTransferNet value) equals: 50!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 20:18:53'!
test06TransferNetOfAnEmptyPortfolioReturnsCorrectly
	|anAccountTransferNet aPortfolio|
	
	aPortfolio := Portfolio new.
	anAccountTransferNet := TransferNet of: aPortfolio.
	
	self assert: (anAccountTransferNet value) equals: 0! !

!methodRemoval: TransferNetTest #test07 stamp: 'D S 11/14/2020 20:18:53'!
test07
	|anAccountTransferNet aPortfolio|
	
	aPortfolio := Portfolio new.
	anAccountTransferNet := TransferNet of: aPortfolio.
	
	self assert: (anAccountTransferNet value) equals: 0!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 20:19:13'!
test07TransferNetOfAPortfolioWith2AccountsReturnsCorrectly
	|anAccountTransferNet anAccount anAccount2 aPortfolio|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	aPortfolio := Portfolio new.
	Transference from: anAccount2 to: anAccount amount: 150.
	Transference from: anAccount to: anAccount2 amount: 100.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	anAccountTransferNet := TransferNet of: aPortfolio.

	self assert: 0 equals: (anAccountTransferNet value)! !

!methodRemoval: TransferNetTest #test08 stamp: 'D S 11/14/2020 20:19:13'!
test08
	|anAccountTransferNet anAccount anAccount2 aPortfolio|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	aPortfolio := Portfolio new.
	Transference from: anAccount2 to: anAccount amount: 150.
	Transference from: anAccount to: anAccount2 amount: 100.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	anAccountTransferNet := TransferNet of: aPortfolio.

	self assert: 0 equals: (anAccountTransferNet value)!

!methodRemoval: ReceptiveAccountTest #test15TransferNetReturn0WhenNotHavingTransferences stamp: 'D S 11/14/2020 20:19:25'!
test15TransferNetReturn0WhenNotHavingTransferences
	|anAccount|
	anAccount := ReceptiveAccount new.
	
	self assert: 0 equals: anAccount transferNet.	!

!methodRemoval: ReceptiveAccountTest #test16WithDrawEndAffectTheBalanceResultNegatively stamp: 'D S 11/14/2020 20:19:25'!
test16WithDrawEndAffectTheBalanceResultNegatively
	|anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anAccount to: anotherAccount amount: 50.
	
	self assert: -50 equals: anAccount transferNet.	!

!methodRemoval: ReceptiveAccountTest #test17DepositEndAffectTheBalancePositively stamp: 'D S 11/14/2020 20:19:25'!
test17DepositEndAffectTheBalancePositively
	|anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anotherAccount to: anAccount amount: 50.
	
	self assert: 50 equals: anAccount transferNet.	!

!methodRemoval: ReceptiveAccountTest #test18WithdrawEndAccumulatesCorrectly stamp: 'D S 11/14/2020 20:19:25'!
test18WithdrawEndAccumulatesCorrectly
	|anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anAccount to: anotherAccount amount: 50.
	Transference from: anAccount to: anotherAccount amount: 50.
	
	self assert: -100 equals: anAccount transferNet.	!

!methodRemoval: ReceptiveAccountTest #test19DepositEndAccumulatesCorrectly stamp: 'D S 11/14/2020 20:19:25'!
test19DepositEndAccumulatesCorrectly
	|anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anotherAccount to: anAccount amount: 50.
	Transference from: anotherAccount to: anAccount amount: 50.
	
	self assert: 100 equals: anAccount transferNet.	!

!methodRemoval: ReceptiveAccountTest #test08SummaryOfAccountWithoutTransactionsReturnsBalance0 stamp: 'D S 11/14/2020 20:19:33'!
test08SummaryOfAccountWithoutTransactionsReturnsBalance0
	| anAccount |
	anAccount := ReceptiveAccount new.
	
	self assert: (anAccount accountSummary includes: 'Balance = 0').!

!methodRemoval: ReceptiveAccountTest #test09SummaryOnAnAccountWithDepositWorksCorrectly stamp: 'D S 11/14/2020 20:19:33'!
test09SummaryOnAnAccountWithDepositWorksCorrectly
	| anAccount |
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	
	self assert: (anAccount accountSummary includes: 'Deposito por 100').!

!methodRemoval: ReceptiveAccountTest #test10SummaryReturnsTheBalanceCorrectly stamp: 'D S 11/14/2020 20:19:33'!
test10SummaryReturnsTheBalanceCorrectly
	| anAccount |
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	
	self assert: (anAccount accountSummary includes: 'Balance = 100').!

!methodRemoval: ReceptiveAccountTest #test11SummaryOnAccountWithWithdrawWorksCorrectly stamp: 'D S 11/14/2020 20:19:33'!
test11SummaryOnAccountWithWithdrawWorksCorrectly
	| anAccount |
	anAccount := ReceptiveAccount new.
	Withdraw register: 200 on: anAccount.
	
	self assert: (anAccount accountSummary includes: 'Extraccion por 200').!

!methodRemoval: ReceptiveAccountTest #test12SummaryOnAccountWithExtractionByTransferenceWorksCorrectly stamp: 'D S 11/14/2020 20:19:33'!
test12SummaryOnAccountWithExtractionByTransferenceWorksCorrectly
	| anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anAccount to: anotherAccount amount: 20.

	self assert: (anAccount accountSummary includes: 'Salida por transferencia de 20').!

!methodRemoval: ReceptiveAccountTest #test13SummaryOnAccountWithDepositByTransferenceWorksCorrectly stamp: 'D S 11/14/2020 20:19:33'!
test13SummaryOnAccountWithDepositByTransferenceWorksCorrectly
	| anAccount anotherAccount|
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transference from: anotherAccount to: anAccount amount: 30.

	self assert: (anAccount accountSummary includes: 'Entrada por transferencia de 30').!

!methodRemoval: ReceptiveAccountTest #test14SummaryOnAccountWithMoreThanOneTransactionWorksCorrectly stamp: 'D S 11/14/2020 20:19:33'!
test14SummaryOnAccountWithMoreThanOneTransactionWorksCorrectly
	| anAccount |
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Deposit register: 200 on: anAccount.
	
	self assert: (anAccount accountSummary includes: 'Deposito por 100').
	self assert: (anAccount accountSummary includes: 'Deposito por 200').!

!methodRemoval: ReceptiveAccountTest #test20SummaryOnEmptyPortfolioReturnBalance0 stamp: 'D S 11/14/2020 20:19:34'!
test20SummaryOnEmptyPortfolioReturnBalance0
	| aPortfolio |
	aPortfolio := Portfolio new.
	
	self assert: (aPortfolio accountSummary includes: 'Balance = 0').
!

!methodRemoval: ReceptiveAccountTest #test21SummaryOnPortfolioReturnsSummaryOfAccountInside stamp: 'D S 11/14/2020 20:19:34'!
test21SummaryOnPortfolioReturnsSummaryOfAccountInside
	| aPortfolio anAccount|
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	aPortfolio add: anAccount.
	Deposit register: 100 on: anAccount.
	
	self assert: (aPortfolio accountSummary) equals: anAccount accountSummary.
	"Lo de arriba seria esto refactorizado"
	"self assert: (aPortfolio accountSummary includes: 'Deposito por 100').
	self assert: (aPortfolio accountSummary includes: 'Balance = 100')."!

!methodRemoval: ReceptiveAccountTest #test22SummaryOnPortfolioWithMoreThanOneAccountReturnsTransactionsOfAccountsAndTotalBalance stamp: 'D S 11/14/2020 20:19:34'!
test22SummaryOnPortfolioWithMoreThanOneAccountReturnsTransactionsOfAccountsAndTotalBalance
	| aPortfolio anAccount anAccount2|
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	Deposit register: 300 on: anAccount2.
	Deposit register: 100 on: anAccount.
	
	self assert: (aPortfolio accountSummary includes: 'Deposito por 300').
	self assert: (aPortfolio accountSummary includes: 'Deposito por 100').
	self assert: (aPortfolio accountSummary includes: 'Balance = 400').!

!testRun: #AccountSummaryTest #test01SummaryOfAccountWithoutTransactionsGenerateCorrectly stamp: 'D S 11/14/2020 20:19:51'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryShowsCorrectBalance stamp: 'D S 11/14/2020 20:19:51'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryShowsDepositAndItsValue stamp: 'D S 11/14/2020 20:19:51'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryDoesntShowInexistentTransactions stamp: 'D S 11/14/2020 20:19:51'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryShowsWithdrawAndItsValue stamp: 'D S 11/14/2020 20:19:51'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryShowsDepositEndOfTransferenceAndItsValue stamp: 'D S 11/14/2020 20:19:51'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryShowsWithdrawEndOfTransferenceAndItsValue stamp: 'D S 11/14/2020 20:19:51'!
PASSED!

!testRun: #AccountSummaryTest #test08SummaryShowsMoreThanOneTransaction stamp: 'D S 11/14/2020 20:19:51'!
PASSED!

----QUIT----(14 November 2020 20:21:36) CuisUniversity-4383.image priorSource: 18331598!

----STARTUP---- (14 November 2020 21:07:59) as /home/dn-01/Escritorio/Ingenieria en Software I/CuisLimpio/CuisUniversity-4383.image!

!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/14/2020 21:09:48'!
sendMessageToAllTransactionForTheReport: aReport

	transactions do: [:aTransaction | aTransaction addToReport: aReport]! !
!Portfolio methodsFor: 'accounts management' stamp: 'D S 11/14/2020 21:09:48'!
sendMessageToAllTransactionForTheReport: aReport

	accounts do: [:anAccount| anAccount somethingReport: aReport].! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 21:09:48' prior: 50904489!
calculateTransferNet: anAccount

	transferNet := 0.
	account := anAccount.
	account sendMessageToAllTransactionForTheReport: self! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 21:09:48' prior: 50904366!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.

	anAccount sendMessageToAllTransactionForTheReport: self.
	summary add: 'Balance = ', (account balance asString)! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 21:09:48' prior: 50904676!
somethingReport: aReport

	accounts do: [:anAccount| anAccount sendMessageToAllTransactionForTheReport: aReport].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 21:09:48' prior: 50905269!
sendMessageToAllTransactionForTheReport: aReport

	accounts do: [:anAccount| anAccount sendMessageToAllTransactionForTheReport: aReport].! !

!methodRemoval: ReceptiveAccount #somethingReport: stamp: 'D S 11/14/2020 21:09:48'!
somethingReport: aReport

	transactions do: [:aTransaction | aTransaction addToReport: aReport]!

!methodRemoval: Portfolio #somethingReport: stamp: 'D S 11/14/2020 21:09:48'!
somethingReport: aReport

	accounts do: [:anAccount| anAccount sendMessageToAllTransactionForTheReport: aReport].!

!testRun: #TransferNetTest #test01TransferNetFromAnEmptyAccountReturns0 stamp: 'D S 11/14/2020 21:10:07'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForAnAccountWithATransferenceReturnsCorrectly stamp: 'D S 11/14/2020 21:10:07'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForAnAccountWithTwoTransferenceReturnsCorrectly stamp: 'D S 11/14/2020 21:10:07'!
PASSED!

!testRun: #TransferNetTest #test04WithdrawEndAffectsNegatively stamp: 'D S 11/14/2020 21:10:07'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetOfAPortfolioReturnsCorrectly stamp: 'D S 11/14/2020 21:10:07'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetOfAnEmptyPortfolioReturnsCorrectly stamp: 'D S 11/14/2020 21:10:07'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetOfAPortfolioWith2AccountsReturnsCorrectly stamp: 'D S 11/14/2020 21:10:07'!
PASSED!

----SNAPSHOT----(14 November 2020 21:14:09) CuisUniversity-4383.image priorSource: 18355314!

----SNAPSHOT----(14 November 2020 21:14:17) CuisUniversity-4383.image priorSource: 18358274!

Report subclass: #TreeStructure
	instanceVariableNames: 'summary account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #TreeStructure category: 'Portfolio2-Ejercicio' stamp: 'D S 11/14/2020 21:23:29'!
Report subclass: #TreeStructure
	instanceVariableNames: 'summary account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

TestCase subclass: #TreeStructureTest
	instanceVariableNames: 'summary account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #TreeStructureTest category: 'Portfolio2-Ejercicio' stamp: 'D S 11/14/2020 21:23:50'!
TestCase subclass: #TreeStructureTest
	instanceVariableNames: 'summary account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!TreeStructureTest methodsFor: 'no messages' stamp: 'D S 11/14/2020 21:26:25'!
test01
	|aTreeReport anAccount|
	anAccount := ReceptiveAccount.
	aTreeReport := TreeStructure of: anAccount.
	
	self assert: (aTreeReport report) equals: #(). ! !
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 21:26:36' prior: 50905379!
test01
	|aTreeReport anAccount|
	anAccount := ReceptiveAccount.
	aTreeReport := TreeStructure of: anAccount.
	
	self assert: (aTreeReport report) equals: (OrderedCollection new).! !
!TreeStructure class methodsFor: 'no messages' stamp: 'D S 11/14/2020 21:27:38'!
of: anAccount

	^self new generateTreeStructureOfAccount: anAccount! !

!classDefinition: #TreeStructure category: 'Portfolio2-Ejercicio' stamp: 'D S 11/14/2020 21:28:30'!
Report subclass: #TreeStructure
	instanceVariableNames: 'summary account treeStructure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!TreeStructure methodsFor: 'no messages' stamp: 'D S 11/14/2020 21:28:28'!
generateTreeStructureOfAccount: anAccount

	treeStructure := OrderedCollection new.! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 21:28:49'!
report

	^treeStructure! !

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 21:28:57'!
PASSED!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 21:30:02'!
test02
	|aTreeReport anAccount|
	anAccount := ReceptiveAccount named: 'UnaCuentaVacia'.
	aTreeReport := TreeStructure of: anAccount.
	
	self assert: (aTreeReport report) equals: (OrderedCollection new).! !
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 21:30:07' prior: 50905388!
test01
	|aTreeReport anAccount|
	anAccount := ReceptiveAccount named: 'UnaCuentaVacia'.
	aTreeReport := TreeStructure of: anAccount.
	
	self assert: (aTreeReport report) equals: (OrderedCollection new).! !

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 21:30:13'!
ERROR!

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 21:30:13'!
ERROR!

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio2-Ejercicio' stamp: 'D S 11/14/2020 21:30:43'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!ReceptiveAccount class methodsFor: 'no messages' stamp: 'D S 11/14/2020 21:31:43'!
named: aName

	^self new addName: aName	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/14/2020 21:32:21'!
addName: aName

	name := aName.! !
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 21:38:08' prior: 50905423!
test02
	|aTreeReport anAccount|
	anAccount := ReceptiveAccount named: 'UnaCuentaVacia'.
	aTreeReport := TreeStructure of: anAccount.
	
	self assert: (aTreeReport report) equals: (OrderedCollection new with: 'Cuenta de UnaCuentaVacia').! !

!testRun: #TreeStructureTest #test02 stamp: 'D S 11/14/2020 21:38:11'!
ERROR!

!testRun: #TreeStructureTest #test02 stamp: 'D S 11/14/2020 21:38:11'!
ERROR!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 21:38:20' prior: 50905470!
test02
	|aTreeReport anAccount|
	anAccount := ReceptiveAccount named: 'UnaCuentaVacia'.
	aTreeReport := TreeStructure of: anAccount.
	
	self assert: (aTreeReport report) equals: (OrderedCollection with: 'Cuenta de UnaCuentaVacia').! !

!testRun: #TreeStructureTest #test02 stamp: 'D S 11/14/2020 21:38:27'!
FAILURE!

!testRun: #TreeStructureTest #test02 stamp: 'D S 11/14/2020 21:38:27'!
FAILURE!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 21:38:43' prior: 50905410!
generateTreeStructureOfAccount: anAccount

	treeStructure := OrderedCollection with: 'UnaCuentaVacia'.! !

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 21:38:57'!
FAILURE!

!testRun: #TreeStructureTest #test02 stamp: 'D S 11/14/2020 21:38:57'!
FAILURE!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 21:39:12' prior: 50905433!
test01
	|aTreeReport anAccount|
	anAccount := ReceptiveAccount named: 'UnaCuentaVacia'.
	aTreeReport := TreeStructure of: anAccount.
	
	self assert: (aTreeReport report) equals: (OrderedCollection with: 'Cuenta de UnaCuentaVacia').! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 21:39:47' prior: 50905502!
generateTreeStructureOfAccount: anAccount

	treeStructure := OrderedCollection with: 'Cuenta de UnaCuentaVacia'.! !

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 21:39:56'!
PASSED!

!testRun: #TreeStructureTest #test02 stamp: 'D S 11/14/2020 21:39:56'!
PASSED!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 21:44:05' prior: 50905486!
test02
	|aTreeReport aPortfolio|
	aPortfolio := Portfolio named: 'NoName'.
	aTreeReport := TreeStructure of: aPortfolio.
	
	self assert: (aTreeReport report) equals: (OrderedCollection with: 'Portfolio de NoName ').! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 21:45:10'!
named: aName

	^self new addName: aName! !

!classDefinition: #Portfolio category: 'Portfolio2-Ejercicio' stamp: 'D S 11/14/2020 21:45:43'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents named'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!Portfolio methodsFor: 'accounts management' stamp: 'D S 11/14/2020 21:45:40'!
addName: aName

	named := aName. ! !

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 21:46:07'!
PASSED!

!testRun: #TreeStructureTest #test02 stamp: 'D S 11/14/2020 21:46:10'!
FAILURE!

!testRun: #TreeStructureTest #test02 stamp: 'D S 11/14/2020 21:46:10'!
FAILURE!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 21:46:32' prior: 50905537!
test02
	|aTreeReport aPortfolio|
	aPortfolio := Portfolio named: 'NoName'.
	aTreeReport := TreeStructure of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de NoName ') equals: (aTreeReport report).! !

!testRun: #TreeStructureTest #test02 stamp: 'D S 11/14/2020 21:46:35'!
FAILURE!

!testRun: #TreeStructureTest #test02 stamp: 'D S 11/14/2020 21:46:35'!
FAILURE!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 21:48:16' prior: 50905525!
generateTreeStructureOfAccount: anAccount

	(anAccount isKindOf: ReceptiveAccount) ifTrue:[OrderedCollection with: 'Cuenta de UnaCuentaVacia'].
	(anAccount isKindOf: Portfolio) ifTrue:[OrderedCollection with: 'Portfolio de NoName']! !

!testRun: #TreeStructureTest #test02 stamp: 'D S 11/14/2020 21:48:23'!
FAILURE!

!testRun: #TreeStructureTest #test02 stamp: 'D S 11/14/2020 21:48:23'!
FAILURE!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 21:48:45' prior: 50905586!
generateTreeStructureOfAccount: anAccount

	(anAccount isKindOf: ReceptiveAccount) ifTrue:[treeStructure :=OrderedCollection with: 'Cuenta de UnaCuentaVacia'].
	(anAccount isKindOf: Portfolio) ifTrue:[treeStructure := OrderedCollection with: 'Portfolio de NoName']! !
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 21:49:34'!
test03
	|aTreeReport anAccount|
	anAccount := ReceptiveAccount named: 'UnaCuentaVacia'.
	aTreeReport := TreeStructure of: anAccount.
	
	self assert: (aTreeReport relatedAccount) equals: (anAccount).! !

!testRun: #TreeStructureTest #test03 stamp: 'D S 11/14/2020 21:49:37'!
ERROR!

!testRun: #TreeStructureTest #test03 stamp: 'D S 11/14/2020 21:49:37'!
ERROR!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 21:49:53'!
relatedAccount! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 21:50:12' prior: 50905628!
relatedAccount

	^account.! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 21:50:29' prior: 50905602!
generateTreeStructureOfAccount: anAccount

	account := anAccount.
	(anAccount isKindOf: ReceptiveAccount) ifTrue:[treeStructure :=OrderedCollection with: 'Cuenta de UnaCuentaVacia'].
	(anAccount isKindOf: Portfolio) ifTrue:[treeStructure := OrderedCollection with: 'Portfolio de NoName']! !

!testRun: #TreeStructureTest #test03 stamp: 'D S 11/14/2020 21:54:24'!
PASSED!

SortedCollection with: 4 with: 3 with: 2 with: 1!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 22:26:44'!
test04
	|aTreeReport anAccount aPortfolio|
	anAccount := ReceptiveAccount named: 'UnaCuentaVacia'.
	aPortfolio := Portfolio named: 'NoName'.
	aTreeReport := TreeStructure of: anAccount.
	
	self assert: (OrderedCollection with: ' Cuenta de UnaCuentaVacia' with: 'Portfolio de NoName') equals: (aTreeReport report).! !
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 22:27:32' prior: 50905653!
test04
	|aTreeReport anAccount aPortfolio|
	anAccount := ReceptiveAccount named: 'UnaCuentaVacia'.
	aPortfolio := Portfolio named: 'NoName'.
	aPortfolio add: anAccount.
	aTreeReport := TreeStructure of: aPortfolio.
	
	self assert: (OrderedCollection with: ' Cuenta de UnaCuentaVacia' with: 'Portfolio de NoName') equals: (aTreeReport report).! !

!testRun: #TreeStructureTest #test04 stamp: 'D S 11/14/2020 22:27:35'!
FAILURE!

!testRun: #TreeStructureTest #test04 stamp: 'D S 11/14/2020 22:27:35'!
FAILURE!

!testRun: #TreeStructureTest #test04 stamp: 'D S 11/14/2020 22:28:06'!
FAILURE!

!testRun: #TreeStructureTest #test04 stamp: 'D S 11/14/2020 22:28:06'!
FAILURE!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 22:31:46' prior: 50905637!
generateTreeStructureOfAccount: anAccount

	account := anAccount.
	(anAccount isKindOf: ReceptiveAccount) ifTrue:[treeStructure :=OrderedCollection with: 'Cuenta de UnaCuentaVacia'].
	(anAccount isKindOf: Portfolio) ifTrue:[
		(anAccount isEmpty) ifTrue:[treeStructure := OrderedCollection with: 'Portfolio de NoName']
		ifFalse: [treeStructure := OrderedCollection with: 'Cuenta de UnaCuentaVacia' with: 'Portfolio de NoName']].! !

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 22:31:49'!
PASSED!

!testRun: #TreeStructureTest #test02 stamp: 'D S 11/14/2020 22:31:49'!
ERROR!

!testRun: #TreeStructureTest #test03 stamp: 'D S 11/14/2020 22:31:49'!
PASSED!

!testRun: #TreeStructureTest #test04 stamp: 'D S 11/14/2020 22:31:49'!
ERROR!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 22:31:58' prior: 50905571!
test02
	|aTreeReport aPortfolio|
	aPortfolio := Portfolio named: 'NoName'.
	aTreeReport := TreeStructure of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de NoName') equals: (aTreeReport report).! !

!testRun: #TreeStructureTest #test02 stamp: 'D S 11/14/2020 22:32:01'!
ERROR!

!testRun: #TreeStructureTest #test02 stamp: 'D S 11/14/2020 22:32:01'!
ERROR!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 22:32:29' prior: 50905692!
generateTreeStructureOfAccount: anAccount

	account := anAccount.
	(anAccount isKindOf: ReceptiveAccount) ifTrue:[treeStructure :=OrderedCollection with: 'Cuenta de UnaCuentaVacia'].
	(anAccount isKindOf: Portfolio) ifTrue:[
		(anAccount accountsIsEmpty) ifTrue:[treeStructure := OrderedCollection with: 'Portfolio de NoName']
		ifFalse: [treeStructure := OrderedCollection with: 'Cuenta de UnaCuentaVacia' with: 'Portfolio de NoName']].! !

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 22:32:36'!
PASSED!

!testRun: #TreeStructureTest #test02 stamp: 'D S 11/14/2020 22:32:36'!
PASSED!

!testRun: #TreeStructureTest #test03 stamp: 'D S 11/14/2020 22:32:36'!
PASSED!

!testRun: #TreeStructureTest #test04 stamp: 'D S 11/14/2020 22:32:36'!
FAILURE!

!testRun: #TreeStructureTest #test04 stamp: 'D S 11/14/2020 22:32:36'!
FAILURE!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 22:33:13' prior: 50905734!
generateTreeStructureOfAccount: anAccount

	account := anAccount.
	(anAccount isKindOf: ReceptiveAccount) ifTrue:[treeStructure :=OrderedCollection with: 'Cuenta de UnaCuentaVacia'].
	(anAccount isKindOf: Portfolio) ifTrue:[
		(anAccount accountsIsEmpty) ifTrue:[treeStructure := OrderedCollection with: 'Portfolio de NoName']
		ifFalse: [treeStructure := OrderedCollection with: ' Cuenta de UnaCuentaVacia' with: 'Portfolio de NoName']].! !

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 22:33:19'!
PASSED!

!testRun: #TreeStructureTest #test02 stamp: 'D S 11/14/2020 22:33:19'!
PASSED!

!testRun: #TreeStructureTest #test03 stamp: 'D S 11/14/2020 22:33:19'!
PASSED!

!testRun: #TreeStructureTest #test04 stamp: 'D S 11/14/2020 22:33:19'!
PASSED!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 22:36:10'!
test05
	|aTreeReport anAccount anAccount2 aPortfolio|
	anAccount := ReceptiveAccount named: 'Camila'.
	anAccount := ReceptiveAccount named: 'Karen'.
	aPortfolio := Portfolio named: 'NoName'.
	aPortfolio add: anAccount.
	aTreeReport := TreeStructure of: aPortfolio.
	
	self assert: (OrderedCollection with: ' Cuenta de UnaCuentaVacia' with: 'Portfolio de NoName') equals: (aTreeReport report).! !
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:02:11' prior: 50905791!
test05
	|aTreeReport anAccount anAccount2 aPortfolio|
	anAccount := ReceptiveAccount named: 'Camila'.
	anAccount := ReceptiveAccount named: 'Karen'.
	aPortfolio := Portfolio named: 'NoName'.
	aPortfolio add: anAccount.
	aTreeReport := TreeStructure of: aPortfolio.
	
	self assert: (OrderedCollection with: ' Cuenta de Camila' with: ' Cuenta de Karen' with: 'Portfolio de NoName') equals: (aTreeReport report).! !
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:02:38' prior: 50905807!
test05
	|aTreeReport anAccount anAccount2 aPortfolio|
	anAccount := ReceptiveAccount named: 'Camila'.
	anAccount2 := ReceptiveAccount named: 'Karen'.
	aPortfolio := Portfolio named: 'NoName'.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	aTreeReport := TreeStructure of: aPortfolio.
	
	self assert: (OrderedCollection with: ' Cuenta de Camila' with: ' Cuenta de Karen' with: 'Portfolio de NoName') equals: (aTreeReport report).! !

!testRun: #TreeStructureTest #test05 stamp: 'D S 11/14/2020 23:02:42'!
FAILURE!

!testRun: #TreeStructureTest #test05 stamp: 'D S 11/14/2020 23:02:42'!
FAILURE!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:03:44' prior: 50905764!
generateTreeStructureOfAccount: anAccount

	account := anAccount.
	(anAccount isKindOf: Portfolio) ifTrue:[anAccount sendMessageToAllTransactionForTheReport: self].! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:04:26' prior: 50905846!
generateTreeStructureOfAccount: anAccount

	account := anAccount.
	anAccount sendMessageToAllTransactionForTheReport: self.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/14/2020 23:05:11' prior: 50905262!
sendMessageToAllTransactionForTheReport: aReport

	aReport AccountTo: self.
	transactions do: [:aTransaction | aTransaction addToReport: aReport]! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:06:01'!
accountTo: anAccount

	treeStructure add: anAccount name.! !

!classDefinition: #TreeStructure category: 'Portfolio2-Ejercicio' stamp: 'D S 11/14/2020 23:06:26'!
Report subclass: #TreeStructure
	instanceVariableNames: 'summary account treeStructure identation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:06:24' prior: 50905870!
accountTo: anAccount

	identation := identation + 1.
	treeStructure add: anAccount name.! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:06:54' prior: 50905855!
generateTreeStructureOfAccount: anAccount

	account := anAccount.
	identation := 0.
	anAccount sendMessageToAllTransactionForTheReport: self.! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:07:08' prior: 50905884!
accountTo: anAccount

	treeStructure add: anAccount name.
	! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:07:10' prior: 50905898!
accountTo: anAccount

	treeStructure add: anAccount name.
	identation := identation + 1.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/14/2020 23:07:38' prior: 50905862!
sendMessageToAllTransactionForTheReport: aReport

	aReport accountTo: self.
	transactions do: [:aTransaction | aTransaction addToReport: aReport]! !
!AccountSummary methodsFor: 'accessing' stamp: 'D S 11/14/2020 23:08:00'!
accountTo: aReport
! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:08:05'!
accountTo: aReport
! !

| x y |		"For efficient viewing, have a Transcript open and use Cmd-d on these statements"
x _ 4. y _ 1.!

x timesRepeat: [y _ y * 2].						"times repeat loop (i _ 1 to x)"
y.
!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:11:39' prior: 50905904!
accountTo: anAccount
	|initialSpace|
	initialSpace := String new.
	initialSpace := (identation timesRepeat: [initialSpace := initialSpace, ' ']).
	treeStructure add: (initialSpace ,anAccount name).
	identation := identation + 1.! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:12:53' prior: 50905931!
accountTo: anAccount
	|initialSpace|
	
	initialSpace := String new.
	initialSpace := (identation timesRepeat: [initialSpace := initialSpace, ' ']).
	treeStructure add: (initialSpace ,anAccount name).
! !
!Portfolio methodsFor: 'accounts management' stamp: 'D S 11/14/2020 23:18:29' prior: 50905301!
sendMessageToAllTransactionForTheReport: aReport

	aReport addPortfolio: self.
	accounts do: [:anAccount| anAccount sendMessageToAllTransactionForTheReport: aReport].
	aReport reduceIdentation.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:18:55'!
addAccount: aReport
! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:18:55'!
addAccount: anAccount
	|initialSpace|
	
	initialSpace := String new.
	initialSpace := (identation timesRepeat: [initialSpace := initialSpace, ' ']).
	treeStructure add: (initialSpace ,anAccount name).
! !
!AccountSummary methodsFor: 'accessing' stamp: 'D S 11/14/2020 23:18:55'!
addAccount: aReport
! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:18:55' prior: 50905910!
sendMessageToAllTransactionForTheReport: aReport

	aReport addAccount: self.
	transactions do: [:aTransaction | aTransaction addToReport: aReport]! !

!methodRemoval: TransferNet #accountTo: stamp: 'D S 11/14/2020 23:18:55'!
accountTo: aReport
!

!methodRemoval: TreeStructure #accountTo: stamp: 'D S 11/14/2020 23:18:55'!
accountTo: anAccount
	|initialSpace|
	
	initialSpace := String new.
	initialSpace := (identation timesRepeat: [initialSpace := initialSpace, ' ']).
	treeStructure add: (initialSpace ,anAccount name).
!

!methodRemoval: AccountSummary #accountTo: stamp: 'D S 11/14/2020 23:18:55'!
accountTo: aReport
!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:19:38'!
addPortfolio: anPortfolio
	|initialSpace|
	
	initialSpace := String new.
	initialSpace := (identation timesRepeat: [initialSpace := initialSpace, ' ']).
	treeStructure add: (initialSpace ,anPortfolio name).
! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:19:48'!
addPortfolio: aReport
! !
!AccountSummary methodsFor: 'generateSummary --Private--' stamp: 'D S 11/14/2020 23:19:59'!
addPortfolio: aPortfolio
	
	! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:20:06' prior: 50906011!
addPortfolio: aPortfolio
! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:20:12' prior: 50905961!
addAccount: anAccount
! !
!AccountSummary methodsFor: 'accessing' stamp: 'D S 11/14/2020 23:20:28'!
reduceIdentation! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:20:35'!
reduceIdentation
! !

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 23:21:24'!
ERROR!

!testRun: #TreeStructureTest #test02 stamp: 'D S 11/14/2020 23:21:24'!
ERROR!

!testRun: #TreeStructureTest #test03 stamp: 'D S 11/14/2020 23:21:24'!
ERROR!

!testRun: #TreeStructureTest #test04 stamp: 'D S 11/14/2020 23:21:24'!
ERROR!

!testRun: #TreeStructureTest #test05 stamp: 'D S 11/14/2020 23:21:24'!
ERROR!

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 23:21:29'!
ERROR!

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 23:21:29'!
ERROR!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:22:07' prior: 50906001!
addPortfolio: anPortfolio
	|initialSpace|
	
	initialSpace := String new.
	(identation timesRepeat: [initialSpace := initialSpace, ' ']).
	treeStructure add: (initialSpace ,anPortfolio name).
! !

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 23:22:12'!
ERROR!

!testRun: #TreeStructureTest #test02 stamp: 'D S 11/14/2020 23:22:12'!
ERROR!

!testRun: #TreeStructureTest #test03 stamp: 'D S 11/14/2020 23:22:12'!
ERROR!

!testRun: #TreeStructureTest #test04 stamp: 'D S 11/14/2020 23:22:12'!
ERROR!

!testRun: #TreeStructureTest #test05 stamp: 'D S 11/14/2020 23:22:12'!
ERROR!

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 23:22:17'!
ERROR!

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 23:22:17'!
ERROR!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:22:39' prior: 50906054!
addPortfolio: anPortfolio
	|initialSpace|
	
	initialSpace := String new: ''.
	(identation timesRepeat: [initialSpace := initialSpace, ' ']).
	treeStructure add: (initialSpace ,anPortfolio name).
! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:22:42' prior: 50905965!
addAccount: anAccount
	|initialSpace|
	
	initialSpace := String new: ''.
	initialSpace := (identation timesRepeat: [initialSpace := initialSpace, ' ']).
	treeStructure add: (initialSpace ,anAccount name).
! !

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 23:22:46'!
ERROR!

!testRun: #TreeStructureTest #test02 stamp: 'D S 11/14/2020 23:22:46'!
ERROR!

!testRun: #TreeStructureTest #test03 stamp: 'D S 11/14/2020 23:22:46'!
ERROR!

!testRun: #TreeStructureTest #test04 stamp: 'D S 11/14/2020 23:22:46'!
ERROR!

!testRun: #TreeStructureTest #test05 stamp: 'D S 11/14/2020 23:22:46'!
ERROR!

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 23:22:52'!
ERROR!

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 23:22:52'!
ERROR!

!testRun: #TransferNetTest #test01TransferNetFromAnEmptyAccountReturns0 stamp: 'D S 11/14/2020 23:23:02'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForAnAccountWithATransferenceReturnsCorrectly stamp: 'D S 11/14/2020 23:23:02'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForAnAccountWithTwoTransferenceReturnsCorrectly stamp: 'D S 11/14/2020 23:23:02'!
PASSED!

!testRun: #TransferNetTest #test04WithdrawEndAffectsNegatively stamp: 'D S 11/14/2020 23:23:02'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetOfAPortfolioReturnsCorrectly stamp: 'D S 11/14/2020 23:23:02'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetOfAnEmptyPortfolioReturnsCorrectly stamp: 'D S 11/14/2020 23:23:02'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetOfAPortfolioWith2AccountsReturnsCorrectly stamp: 'D S 11/14/2020 23:23:02'!
PASSED!

!testRun: #AccountSummaryTest #test01SummaryOfAccountWithoutTransactionsGenerateCorrectly stamp: 'D S 11/14/2020 23:23:13'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryShowsCorrectBalance stamp: 'D S 11/14/2020 23:23:13'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryShowsDepositAndItsValue stamp: 'D S 11/14/2020 23:23:13'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryDoesntShowInexistentTransactions stamp: 'D S 11/14/2020 23:23:13'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryShowsWithdrawAndItsValue stamp: 'D S 11/14/2020 23:23:13'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryShowsDepositEndOfTransferenceAndItsValue stamp: 'D S 11/14/2020 23:23:13'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryShowsWithdrawEndOfTransferenceAndItsValue stamp: 'D S 11/14/2020 23:23:13'!
PASSED!

!testRun: #AccountSummaryTest #test08SummaryShowsMoreThanOneTransaction stamp: 'D S 11/14/2020 23:23:13'!
PASSED!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:23:27' prior: 50906091!
addAccount: anAccount
	|initialSpace|
	
	initialSpace := String new.
	initialSpace := (identation timesRepeat: [initialSpace := initialSpace, ' ']).
	treeStructure add: (initialSpace ,anAccount name).
! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:23:30' prior: 50906175!
addAccount: anAccount
	|initialSpace|
	
	initialSpace := String new.
	(identation timesRepeat: [initialSpace := initialSpace, ' ']).
	treeStructure add: (initialSpace ,anAccount name).
! !

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 23:23:38'!
ERROR!

!testRun: #TreeStructureTest #test02 stamp: 'D S 11/14/2020 23:23:38'!
ERROR!

!testRun: #TreeStructureTest #test03 stamp: 'D S 11/14/2020 23:23:38'!
ERROR!

!testRun: #TreeStructureTest #test04 stamp: 'D S 11/14/2020 23:23:38'!
ERROR!

!testRun: #TreeStructureTest #test05 stamp: 'D S 11/14/2020 23:23:38'!
ERROR!

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 23:23:42'!
ERROR!

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 23:23:42'!
ERROR!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:24:07' prior: 50905890!
generateTreeStructureOfAccount: anAccount

	account := anAccount.
	identation := 0.
	treeStructure := OrderedCollection.
	anAccount sendMessageToAllTransactionForTheReport: self.! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:24:10' prior: 50906212!
generateTreeStructureOfAccount: anAccount

	account := anAccount.
	identation := 0.
	treeStructure := OrderedCollection new.
	anAccount sendMessageToAllTransactionForTheReport: self.! !

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 23:24:14'!
FAILURE!

!testRun: #TreeStructureTest #test02 stamp: 'D S 11/14/2020 23:24:14'!
ERROR!

!testRun: #TreeStructureTest #test03 stamp: 'D S 11/14/2020 23:24:14'!
PASSED!

!testRun: #TreeStructureTest #test04 stamp: 'D S 11/14/2020 23:24:14'!
ERROR!

!testRun: #TreeStructureTest #test05 stamp: 'D S 11/14/2020 23:24:14'!
ERROR!

!testRun: #TreeStructureTest #test02 stamp: 'D S 11/14/2020 23:24:20'!
ERROR!

!testRun: #TreeStructureTest #test02 stamp: 'D S 11/14/2020 23:24:20'!
ERROR!

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 23:24:34'!
FAILURE!

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 23:24:34'!
FAILURE!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:25:38' prior: 50906185!
addAccount: anAccount
	|initialSpace|
	
	initialSpace := String new: ''.
	(identation timesRepeat: [initialSpace := initialSpace, ' ']).
	treeStructure add: (initialSpace ,anAccount name).
! !

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 23:25:42'!
ERROR!

!testRun: #TreeStructureTest #test02 stamp: 'D S 11/14/2020 23:25:42'!
ERROR!

!testRun: #TreeStructureTest #test03 stamp: 'D S 11/14/2020 23:25:42'!
ERROR!

!testRun: #TreeStructureTest #test04 stamp: 'D S 11/14/2020 23:25:42'!
ERROR!

!testRun: #TreeStructureTest #test05 stamp: 'D S 11/14/2020 23:25:42'!
ERROR!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:25:50' prior: 50906253!
addAccount: anAccount
	|initialSpace|
	
	initialSpace := String new.
	(identation timesRepeat: [initialSpace := initialSpace, ' ']).
	treeStructure add: (initialSpace ,anAccount name).
! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:25:53' prior: 50906081!
addPortfolio: anPortfolio
	|initialSpace|
	
	initialSpace := String new.
	(identation timesRepeat: [initialSpace := initialSpace, ' ']).
	treeStructure add: (initialSpace ,anPortfolio name).
! !

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 23:25:58'!
FAILURE!

!testRun: #TreeStructureTest #test02 stamp: 'D S 11/14/2020 23:25:58'!
ERROR!

!testRun: #TreeStructureTest #test03 stamp: 'D S 11/14/2020 23:25:58'!
PASSED!

!testRun: #TreeStructureTest #test04 stamp: 'D S 11/14/2020 23:25:58'!
ERROR!

!testRun: #TreeStructureTest #test05 stamp: 'D S 11/14/2020 23:25:58'!
ERROR!

TestCase subclass: #TreeStructureTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #TreeStructureTest category: 'Portfolio2-Ejercicio' stamp: 'D S 11/14/2020 23:26:06'!
TestCase subclass: #TreeStructureTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 23:26:10'!
FAILURE!

!testRun: #TreeStructureTest #test02 stamp: 'D S 11/14/2020 23:26:10'!
ERROR!

!testRun: #TreeStructureTest #test03 stamp: 'D S 11/14/2020 23:26:10'!
PASSED!

!testRun: #TreeStructureTest #test04 stamp: 'D S 11/14/2020 23:26:10'!
ERROR!

!testRun: #TreeStructureTest #test05 stamp: 'D S 11/14/2020 23:26:10'!
ERROR!

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 23:26:22'!
FAILURE!

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 23:26:22'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/14/2020 23:28:18' overrides: 16882612!
name
	
	^name! !

!classDefinition: #Portfolio category: 'Portfolio2-Ejercicio' stamp: 'D S 11/14/2020 23:28:33'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents named name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!Portfolio methodsFor: 'nil' stamp: 'D S 11/14/2020 23:28:27' overrides: 16882612!
name
	
	^name! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:28:45' prior: 50906348 overrides: 16882612!
name
	
	^named! !

Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents named'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio2-Ejercicio' stamp: 'D S 11/14/2020 23:28:52'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents named'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 23:29:01'!
FAILURE!

!testRun: #TreeStructureTest #test02 stamp: 'D S 11/14/2020 23:29:01'!
ERROR!

!testRun: #TreeStructureTest #test03 stamp: 'D S 11/14/2020 23:29:01'!
PASSED!

!testRun: #TreeStructureTest #test04 stamp: 'D S 11/14/2020 23:29:01'!
ERROR!

!testRun: #TreeStructureTest #test05 stamp: 'D S 11/14/2020 23:29:01'!
ERROR!

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 23:29:14'!
FAILURE!

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 23:29:14'!
FAILURE!

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 23:29:21'!
FAILURE!

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 23:29:21'!
FAILURE!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:30:30' prior: 50906275!
addAccount: anAccount
	|initialSpace|
	
	initialSpace := String new.
	(identation timesRepeat: [initialSpace := initialSpace, ' ']).
	treeStructure add: (initialSpace , 'Cuenta de ',anAccount name).
! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:30:39' prior: 50906284!
addPortfolio: anPortfolio
	|initialSpace|
	
	initialSpace := String new.
	(identation timesRepeat: [initialSpace := initialSpace, ' ']).
	treeStructure add: (initialSpace ,'Portfolio de ',anPortfolio name).
! !

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 23:30:44'!
PASSED!

!testRun: #TreeStructureTest #test02 stamp: 'D S 11/14/2020 23:30:44'!
ERROR!

!testRun: #TreeStructureTest #test03 stamp: 'D S 11/14/2020 23:30:44'!
PASSED!

!testRun: #TreeStructureTest #test04 stamp: 'D S 11/14/2020 23:30:44'!
ERROR!

!testRun: #TreeStructureTest #test05 stamp: 'D S 11/14/2020 23:30:44'!
ERROR!

!testRun: #TreeStructureTest #test02 stamp: 'D S 11/14/2020 23:30:50'!
ERROR!

!testRun: #TreeStructureTest #test02 stamp: 'D S 11/14/2020 23:30:50'!
ERROR!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:31:07'!
reduceIdentation

	identation := identation -1! !

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 23:31:11'!
PASSED!

!testRun: #TreeStructureTest #test02 stamp: 'D S 11/14/2020 23:31:11'!
PASSED!

!testRun: #TreeStructureTest #test03 stamp: 'D S 11/14/2020 23:31:11'!
PASSED!

!testRun: #TreeStructureTest #test04 stamp: 'D S 11/14/2020 23:31:11'!
FAILURE!

!testRun: #TreeStructureTest #test05 stamp: 'D S 11/14/2020 23:31:11'!
FAILURE!

!testRun: #TreeStructureTest #test04 stamp: 'D S 11/14/2020 23:31:17'!
FAILURE!

!testRun: #TreeStructureTest #test04 stamp: 'D S 11/14/2020 23:31:17'!
FAILURE!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:32:55' prior: 50906403!
addPortfolio: anPortfolio
	|initialSpace|
	
	initialSpace := String new.
	(identation timesRepeat: [initialSpace := initialSpace, ' ']).
	treeStructure add: (initialSpace ,'Portfolio de ',anPortfolio name).
	identation := identation +1 
! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:32:56' prior: 50906453!
addPortfolio: anPortfolio
	|initialSpace|
	
	initialSpace := String new.
	(identation timesRepeat: [initialSpace := initialSpace, ' ']).
	treeStructure add: (initialSpace ,'Portfolio de ',anPortfolio name).
	identation := identation +1.
! !

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 23:33:00'!
PASSED!

!testRun: #TreeStructureTest #test02 stamp: 'D S 11/14/2020 23:33:00'!
PASSED!

!testRun: #TreeStructureTest #test03 stamp: 'D S 11/14/2020 23:33:00'!
PASSED!

!testRun: #TreeStructureTest #test04 stamp: 'D S 11/14/2020 23:33:00'!
FAILURE!

!testRun: #TreeStructureTest #test05 stamp: 'D S 11/14/2020 23:33:00'!
FAILURE!

!testRun: #TreeStructureTest #test04 stamp: 'D S 11/14/2020 23:33:05'!
FAILURE!

!testRun: #TreeStructureTest #test04 stamp: 'D S 11/14/2020 23:33:05'!
FAILURE!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:36:01' prior: 50905667!
test04
	|aTreeReport anAccount aPortfolio|
	anAccount := ReceptiveAccount named: 'UnaCuentaVacia'.
	aPortfolio := Portfolio named: 'NoName'.
	aPortfolio add: anAccount.
	aTreeReport := TreeStructure of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de NoName' with: ' Cuenta de UnaCuentaVacia') equals: (aTreeReport report).! !

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 23:36:04'!
PASSED!

!testRun: #TreeStructureTest #test02 stamp: 'D S 11/14/2020 23:36:04'!
PASSED!

!testRun: #TreeStructureTest #test03 stamp: 'D S 11/14/2020 23:36:04'!
PASSED!

!testRun: #TreeStructureTest #test04 stamp: 'D S 11/14/2020 23:36:04'!
PASSED!

!testRun: #TreeStructureTest #test05 stamp: 'D S 11/14/2020 23:36:04'!
FAILURE!

!testRun: #TreeStructureTest #test05 stamp: 'D S 11/14/2020 23:36:04'!
FAILURE!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:36:20' prior: 50905824!
test05
	|aTreeReport anAccount anAccount2 aPortfolio|
	anAccount := ReceptiveAccount named: 'Camila'.
	anAccount2 := ReceptiveAccount named: 'Karen'.
	aPortfolio := Portfolio named: 'NoName'.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	aTreeReport := TreeStructure of: aPortfolio.
	
	self assert: (OrderedCollection   with: 'Portfolio de NoName' with: ' Cuenta de Camila' with: ' Cuenta de Karen') equals: (aTreeReport report).! !
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:36:22' prior: 50906523!
test05
	|aTreeReport anAccount anAccount2 aPortfolio|
	anAccount := ReceptiveAccount named: 'Camila'.
	anAccount2 := ReceptiveAccount named: 'Karen'.
	aPortfolio := Portfolio named: 'NoName'.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	aTreeReport := TreeStructure of: aPortfolio.
	
	self assert: (OrderedCollection  with: 'Portfolio de NoName' with: ' Cuenta de Camila' with: ' Cuenta de Karen') equals: (aTreeReport report).! !

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 23:36:25'!
PASSED!

!testRun: #TreeStructureTest #test02 stamp: 'D S 11/14/2020 23:36:25'!
PASSED!

!testRun: #TreeStructureTest #test03 stamp: 'D S 11/14/2020 23:36:25'!
PASSED!

!testRun: #TreeStructureTest #test04 stamp: 'D S 11/14/2020 23:36:25'!
PASSED!

!testRun: #TreeStructureTest #test05 stamp: 'D S 11/14/2020 23:36:25'!
PASSED!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:36:51'!
addDeposit: aTransaction! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:36:56'!
addDepositEnd: aTransaction! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:37:00'!
addWithdraw: aTransaction! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:37:05'!
addWithdrawEnd: aTransaction! !
!Portfolio methodsFor: 'accounts management' stamp: 'D S 11/14/2020 23:37:36' prior: 50905952!
sendMessageToAllTransactionForTheReport: aReport

	"Sin el punto opcional, solo estaria la linea de accounts do"
	aReport addPortfolio: self.
	accounts do: [:anAccount| anAccount sendMessageToAllTransactionForTheReport: aReport].
	aReport reduceIdentation.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/14/2020 23:37:47' prior: 50905978!
sendMessageToAllTransactionForTheReport: aReport

	"Sin el punto opcional, solo estaria la linea de transactions do"
	aReport addAccount: self.
	transactions do: [:aTransaction | aTransaction addToReport: aReport]! !
!Portfolio methodsFor: 'accounts management' stamp: 'D S 11/14/2020 23:38:02' prior: 50906586!
sendMessageToAllTransactionForTheReport: aReport

	"Sin el punto opcional, solo estaria la linea de accounts do. Buscar manera de sacar reduceIdentation que probablemente este mal"
	aReport addPortfolio: self.
	accounts do: [:anAccount| anAccount sendMessageToAllTransactionForTheReport: aReport].
	aReport reduceIdentation.! !

!testRun: #TreeStructureTest #test01 stamp: 'D S 11/14/2020 23:38:22'!
PASSED!

!testRun: #TreeStructureTest #test02 stamp: 'D S 11/14/2020 23:38:22'!
PASSED!

!testRun: #TreeStructureTest #test03 stamp: 'D S 11/14/2020 23:38:22'!
PASSED!

!testRun: #TreeStructureTest #test04 stamp: 'D S 11/14/2020 23:38:22'!
PASSED!

!testRun: #TreeStructureTest #test05 stamp: 'D S 11/14/2020 23:38:22'!
PASSED!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:38:51'!
test01TreeStructuraOfAnAccountGeneratesCorrectly
	|aTreeReport anAccount|
	anAccount := ReceptiveAccount named: 'UnaCuentaVacia'.
	aTreeReport := TreeStructure of: anAccount.
	
	self assert: (aTreeReport report) equals: (OrderedCollection with: 'Cuenta de UnaCuentaVacia').! !

!methodRemoval: TreeStructureTest #test01 stamp: 'D S 11/14/2020 23:38:51'!
test01
	|aTreeReport anAccount|
	anAccount := ReceptiveAccount named: 'UnaCuentaVacia'.
	aTreeReport := TreeStructure of: anAccount.
	
	self assert: (aTreeReport report) equals: (OrderedCollection with: 'Cuenta de UnaCuentaVacia').!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:39:01'!
test01TreeStructureOfAnAccountGeneratesCorrectly
	|aTreeReport anAccount|
	anAccount := ReceptiveAccount named: 'UnaCuentaVacia'.
	aTreeReport := TreeStructure of: anAccount.
	
	self assert: (aTreeReport report) equals: (OrderedCollection with: 'Cuenta de UnaCuentaVacia').! !

!methodRemoval: TreeStructureTest #test01TreeStructuraOfAnAccountGeneratesCorrectly stamp: 'D S 11/14/2020 23:39:01'!
test01TreeStructuraOfAnAccountGeneratesCorrectly
	|aTreeReport anAccount|
	anAccount := ReceptiveAccount named: 'UnaCuentaVacia'.
	aTreeReport := TreeStructure of: anAccount.
	
	self assert: (aTreeReport report) equals: (OrderedCollection with: 'Cuenta de UnaCuentaVacia').!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:39:33'!
test02TreeStructureOfEmptyPortfolioGeneratesCorrectly
	|aTreeReport aPortfolio|
	aPortfolio := Portfolio named: 'NoName'.
	aTreeReport := TreeStructure of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de NoName') equals: (aTreeReport report).! !

!methodRemoval: TreeStructureTest #test02 stamp: 'D S 11/14/2020 23:39:33'!
test02
	|aTreeReport aPortfolio|
	aPortfolio := Portfolio named: 'NoName'.
	aTreeReport := TreeStructure of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de NoName') equals: (aTreeReport report).!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:40:05'!
test03RelatedAccountOfTheStructureIsCorrect
	|aTreeReport anAccount|
	anAccount := ReceptiveAccount named: 'UnaCuentaVacia'.
	aTreeReport := TreeStructure of: anAccount.
	
	self assert: (aTreeReport relatedAccount) equals: (anAccount).! !

!methodRemoval: TreeStructureTest #test03 stamp: 'D S 11/14/2020 23:40:05'!
test03
	|aTreeReport anAccount|
	anAccount := ReceptiveAccount named: 'UnaCuentaVacia'.
	aTreeReport := TreeStructure of: anAccount.
	
	self assert: (aTreeReport relatedAccount) equals: (anAccount).!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:40:34'!
test04IdentationGeneratesCorrectly
	|aTreeReport anAccount aPortfolio|
	anAccount := ReceptiveAccount named: 'UnaCuentaVacia'.
	aPortfolio := Portfolio named: 'NoName'.
	aPortfolio add: anAccount.
	aTreeReport := TreeStructure of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de NoName' with: ' Cuenta de UnaCuentaVacia') equals: (aTreeReport report).! !

!methodRemoval: TreeStructureTest #test04 stamp: 'D S 11/14/2020 23:40:34'!
test04
	|aTreeReport anAccount aPortfolio|
	anAccount := ReceptiveAccount named: 'UnaCuentaVacia'.
	aPortfolio := Portfolio named: 'NoName'.
	aPortfolio add: anAccount.
	aTreeReport := TreeStructure of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de NoName' with: ' Cuenta de UnaCuentaVacia') equals: (aTreeReport report).!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:40:56' prior: 50906541!
test05
	|aTreeReport anAccount anAccount2 aPortfolio|
	anAccount := ReceptiveAccount named: 'Camila'.
	anAccount2 := ReceptiveAccount named: 'Karen'.
	aPortfolio := Portfolio named: 'Amigos'.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	aTreeReport := TreeStructure of: aPortfolio.
	
	self assert: (OrderedCollection  with: 'Portfolio de Amigos' with: ' Cuenta de Camila' with: ' Cuenta de Karen') equals: (aTreeReport report).! !
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:41:13'!
test05TreeStructureOfPortfolioWithMoreThanOneAccountGeneratesCorrectly
	|aTreeReport anAccount anAccount2 aPortfolio|
	anAccount := ReceptiveAccount named: 'Camila'.
	anAccount2 := ReceptiveAccount named: 'Karen'.
	aPortfolio := Portfolio named: 'Amigos'.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	aTreeReport := TreeStructure of: aPortfolio.
	
	self assert: (OrderedCollection  with: 'Portfolio de Amigos' with: ' Cuenta de Camila' with: ' Cuenta de Karen') equals: (aTreeReport report).! !

!methodRemoval: TreeStructureTest #test05 stamp: 'D S 11/14/2020 23:41:13'!
test05
	|aTreeReport anAccount anAccount2 aPortfolio|
	anAccount := ReceptiveAccount named: 'Camila'.
	anAccount2 := ReceptiveAccount named: 'Karen'.
	aPortfolio := Portfolio named: 'Amigos'.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	aTreeReport := TreeStructure of: aPortfolio.
	
	self assert: (OrderedCollection  with: 'Portfolio de Amigos' with: ' Cuenta de Camila' with: ' Cuenta de Karen') equals: (aTreeReport report).!
!Portfolio methodsFor: 'accounts management' stamp: 'D S 11/14/2020 23:41:47' prior: 50906608!
sendMessageToAllTransactionForTheReport: aReport

	"Sin el punto opcional, solo estaria la linea de accounts do. Buscar manera de sacar reduceIdentation que probablemente este mal"
	aReport addPortfolio: self.
	accounts do: [:anAccount| anAccount sendMessageToAllTransactionForTheReport: aReport].
"	aReport reduceIdentation."! !
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:42:54'!
test06
	|aTreeReport anAccount anAccount2 aPortfolio aPortfolio2|
	anAccount := ReceptiveAccount named: 'Camila'.
	anAccount2 := ReceptiveAccount named: 'Karen'.
	aPortfolio := Portfolio named: 'Vacio'.
	aPortfolio2 := Portfolio named: 'Amigos'.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	aPortfolio add: aPortfolio2.
	aTreeReport := TreeStructure of: aPortfolio.
	
	self assert: (OrderedCollection  with: 'Portfolio de Amigos' with: ' Cuenta de Camila' with: ' Cuenta de Karen' with: 'Portfolio de vacio') equals: (aTreeReport report).! !

!testRun: #TreeStructureTest #test06 stamp: 'D S 11/14/2020 23:42:58'!
FAILURE!

!testRun: #TreeStructureTest #test06 stamp: 'D S 11/14/2020 23:42:58'!
FAILURE!
!Portfolio methodsFor: 'accounts management' stamp: 'D S 11/14/2020 23:43:14' prior: 50906802!
sendMessageToAllTransactionForTheReport: aReport

	"Sin el punto opcional, solo estaria la linea de accounts do. Buscar manera de sacar reduceIdentation que probablemente este mal"
	aReport addPortfolio: self.
	accounts do: [:anAccount| anAccount sendMessageToAllTransactionForTheReport: aReport].
	aReport reduceIdentation.! !

!testRun: #TreeStructureTest #test01TreeStructureOfAnAccountGeneratesCorrectly stamp: 'D S 11/14/2020 23:43:19'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfEmptyPortfolioGeneratesCorrectly stamp: 'D S 11/14/2020 23:43:19'!
PASSED!

!testRun: #TreeStructureTest #test03RelatedAccountOfTheStructureIsCorrect stamp: 'D S 11/14/2020 23:43:19'!
PASSED!

!testRun: #TreeStructureTest #test04IdentationGeneratesCorrectly stamp: 'D S 11/14/2020 23:43:19'!
PASSED!

!testRun: #TreeStructureTest #test05TreeStructureOfPortfolioWithMoreThanOneAccountGeneratesCorrectly stamp: 'D S 11/14/2020 23:43:19'!
PASSED!

!testRun: #TreeStructureTest #test06 stamp: 'D S 11/14/2020 23:43:19'!
FAILURE!

!testRun: #TreeStructureTest #test06 stamp: 'D S 11/14/2020 23:43:19'!
FAILURE!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:43:32' prior: 50906816!
test06
	|aTreeReport anAccount anAccount2 aPortfolio aPortfolio2|
	anAccount := ReceptiveAccount named: 'Camila'.
	anAccount2 := ReceptiveAccount named: 'Karen'.
	aPortfolio := Portfolio named: 'Vacio'.
	aPortfolio2 := Portfolio named: 'Amigos'.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	aPortfolio add: aPortfolio2.
	aTreeReport := TreeStructure of: aPortfolio.
	
	self assert: (OrderedCollection  with: 'Portfolio de Amigos' with: ' Cuenta de Camila' with: ' Cuenta de Karen' with: '  Portfolio de vacio') equals: (aTreeReport report).! !

!testRun: #TreeStructureTest #test06 stamp: 'D S 11/14/2020 23:43:36'!
FAILURE!

!testRun: #TreeStructureTest #test06 stamp: 'D S 11/14/2020 23:43:36'!
FAILURE!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:44:46' prior: 50906880!
test06
	|aTreeReport anAccount anAccount2 anAccount3 aPortfolio aPortfolio2|
	anAccount := ReceptiveAccount named: 'Camila'.
	anAccount2 := ReceptiveAccount named: 'Karen'.
	anAccount3 := ReceptiveAccount named: 'Alguien'.
	aPortfolio := Portfolio named: 'Vacio'.
	aPortfolio2 := Portfolio named: 'Amigos'.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	aPortfolio add: aPortfolio2.
	aTreeReport := TreeStructure of: aPortfolio.
	
	self assert: (OrderedCollection  with: 'Portfolio de Amigos' with: ' Cuenta de Camila' with: ' Cuenta de Karen' 
	with: ' Portfolio de vacio' with: '  Cuenta de Alguien') equals: (aTreeReport report).! !
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:44:58' prior: 50906906!
test06
	|aTreeReport anAccount anAccount2 anAccount3 aPortfolio aPortfolio2|
	anAccount := ReceptiveAccount named: 'Camila'.
	anAccount2 := ReceptiveAccount named: 'Karen'.
	anAccount3 := ReceptiveAccount named: 'Alguien'.
	aPortfolio := Portfolio named: 'Vacio'.
	aPortfolio2 := Portfolio named: 'Amigos'.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	aPortfolio add: aPortfolio2.
	aPortfolio2 add: anAccount3.
	aTreeReport := TreeStructure of: aPortfolio.
	
	self assert: (OrderedCollection  with: 'Portfolio de Amigos' with: ' Cuenta de Camila' with: ' Cuenta de Karen' 
	with: ' Portfolio de vacio' with: '  Cuenta de Alguien') equals: (aTreeReport report).! !

!testRun: #TreeStructureTest #test06 stamp: 'D S 11/14/2020 23:45:01'!
FAILURE!

!testRun: #TreeStructureTest #test06 stamp: 'D S 11/14/2020 23:45:01'!
FAILURE!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:45:35' prior: 50906930!
test06
	|aTreeReport anAccount anAccount2 anAccount3 aPortfolio aPortfolio2|
	anAccount := ReceptiveAccount named: 'Camila'.
	anAccount2 := ReceptiveAccount named: 'Karen'.
	anAccount3 := ReceptiveAccount named: 'Alguien'.
	aPortfolio := Portfolio named: 'Vacio'.
	aPortfolio2 := Portfolio named: 'Amigos'.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	aPortfolio add: aPortfolio2.
	aPortfolio2 add: anAccount3.
	aTreeReport := TreeStructure of: aPortfolio.
	
	self assert: (OrderedCollection  with: 'Portfolio de Amigos' with: ' Cuenta de Camila' with: ' Cuenta de Karen' 
	with: ' Portfolio de vacio' with: ' Cuenta de Alguien') equals: (aTreeReport report).! !

!testRun: #TreeStructureTest #test06 stamp: 'D S 11/14/2020 23:45:37'!
FAILURE!

!testRun: #TreeStructureTest #test06 stamp: 'D S 11/14/2020 23:45:37'!
FAILURE!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:46:16' prior: 50906960!
test06
	|aTreeReport anAccount anAccount2 anAccount3 aPortfolio aPortfolio2|
	anAccount := ReceptiveAccount named: 'Camila'.
	anAccount2 := ReceptiveAccount named: 'Karen'.
	anAccount3 := ReceptiveAccount named: 'Alguien'.
	aPortfolio := Portfolio named: 'Vacio'.
	aPortfolio2 := Portfolio named: 'Amigos'.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	aPortfolio add: aPortfolio2.
	aPortfolio2 add: anAccount3.
	aTreeReport := TreeStructure of: aPortfolio.
	
	self assert: (OrderedCollection  with: 'Portfolio de Amigos' with: ' Cuenta de Camila' with: ' Cuenta de Karen' 
	with: ' Portfolio de Vacio' with: ' Cuenta de Alguien') equals: (aTreeReport report).! !

!testRun: #TreeStructureTest #test06 stamp: 'D S 11/14/2020 23:46:19'!
FAILURE!

!testRun: #TreeStructureTest #test06 stamp: 'D S 11/14/2020 23:46:19'!
FAILURE!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:46:50' prior: 50906990!
test06
	|aTreeReport anAccount anAccount2 anAccount3 aPortfolio aPortfolio2|
	anAccount := ReceptiveAccount named: 'Camila'.
	anAccount2 := ReceptiveAccount named: 'Karen'.
	anAccount3 := ReceptiveAccount named: 'Alguien'.
	aPortfolio := Portfolio named: 'Vacio'.
	aPortfolio2 := Portfolio named: 'Amigos'.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	aPortfolio add: aPortfolio2.
	aPortfolio add: anAccount3.
	aTreeReport := TreeStructure of: aPortfolio.
	
	self assert: (OrderedCollection  with: 'Portfolio de Amigos' with: ' Cuenta de Camila' with: ' Cuenta de Karen' 
	with: ' Portfolio de Vacio' with: ' Cuenta de Alguien') equals: (aTreeReport report).! !

!testRun: #TreeStructureTest #test06 stamp: 'D S 11/14/2020 23:46:53'!
FAILURE!

!testRun: #TreeStructureTest #test06 stamp: 'D S 11/14/2020 23:46:53'!
FAILURE!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:51:52' prior: 50907020!
test06
	|aTreeReport anAccount anAccount2 anAccount3 aPortfolio aPortfolio2|
	anAccount := ReceptiveAccount named: 'Camila'.
	anAccount2 := ReceptiveAccount named: 'Karen'.
	anAccount3 := ReceptiveAccount named: 'Alguien'.
	aPortfolio := Portfolio named: 'Amigos'.
	aPortfolio2 := Portfolio named: 'Vacio'.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	aPortfolio add: aPortfolio2.
	aPortfolio add: anAccount3.
	aTreeReport := TreeStructure of: aPortfolio.
	
	self assert: (OrderedCollection  with: 'Portfolio de Amigos' with: ' Cuenta de Camila' with: ' Cuenta de Karen' 
	with: ' Portfolio de Vacio' with: ' Cuenta de Alguien') equals: (aTreeReport report).! !

!testRun: #TreeStructureTest #test06 stamp: 'D S 11/14/2020 23:51:55'!
PASSED!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:52:34'!
test06TreeStructureOfAPortfolioWithOtherInsideWithAccountGeneratesCorrectly
	|aTreeReport anAccount anAccount2 anAccount3 aPortfolio aPortfolio2|
	anAccount := ReceptiveAccount named: 'Camila'.
	anAccount2 := ReceptiveAccount named: 'Karen'.
	anAccount3 := ReceptiveAccount named: 'Alguien'.
	aPortfolio := Portfolio named: 'Amigos'.
	aPortfolio2 := Portfolio named: 'Vacio'.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	aPortfolio add: aPortfolio2.
	aPortfolio add: anAccount3.
	aTreeReport := TreeStructure of: aPortfolio.
	
	self assert: (OrderedCollection  with: 'Portfolio de Amigos' with: ' Cuenta de Camila' with: ' Cuenta de Karen' 
	with: ' Portfolio de Vacio' with: ' Cuenta de Alguien') equals: (aTreeReport report).! !

!methodRemoval: TreeStructureTest #test06 stamp: 'D S 11/14/2020 23:52:38'!
test06
	|aTreeReport anAccount anAccount2 anAccount3 aPortfolio aPortfolio2|
	anAccount := ReceptiveAccount named: 'Camila'.
	anAccount2 := ReceptiveAccount named: 'Karen'.
	anAccount3 := ReceptiveAccount named: 'Alguien'.
	aPortfolio := Portfolio named: 'Amigos'.
	aPortfolio2 := Portfolio named: 'Vacio'.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	aPortfolio add: aPortfolio2.
	aPortfolio add: anAccount3.
	aTreeReport := TreeStructure of: aPortfolio.
	
	self assert: (OrderedCollection  with: 'Portfolio de Amigos' with: ' Cuenta de Camila' with: ' Cuenta de Karen' 
	with: ' Portfolio de Vacio' with: ' Cuenta de Alguien') equals: (aTreeReport report).!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/14/2020 23:53:10'!
test06TreeStructureOfAPortfolioWithOtherInsideEmptyGeneratesCorrectly
	|aTreeReport anAccount anAccount2 anAccount3 aPortfolio aPortfolio2|
	anAccount := ReceptiveAccount named: 'Camila'.
	anAccount2 := ReceptiveAccount named: 'Karen'.
	anAccount3 := ReceptiveAccount named: 'Alguien'.
	aPortfolio := Portfolio named: 'Amigos'.
	aPortfolio2 := Portfolio named: 'Vacio'.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	aPortfolio add: aPortfolio2.
	aPortfolio add: anAccount3.
	aTreeReport := TreeStructure of: aPortfolio.
	
	self assert: (OrderedCollection  with: 'Portfolio de Amigos' with: ' Cuenta de Camila' with: ' Cuenta de Karen' 
	with: ' Portfolio de Vacio' with: ' Cuenta de Alguien') equals: (aTreeReport report).! !

!methodRemoval: TreeStructureTest #test06TreeStructureOfAPortfolioWithOtherInsideWithAccountGeneratesCorrectly stamp: 'D S 11/14/2020 23:53:16'!
test06TreeStructureOfAPortfolioWithOtherInsideWithAccountGeneratesCorrectly
	|aTreeReport anAccount anAccount2 anAccount3 aPortfolio aPortfolio2|
	anAccount := ReceptiveAccount named: 'Camila'.
	anAccount2 := ReceptiveAccount named: 'Karen'.
	anAccount3 := ReceptiveAccount named: 'Alguien'.
	aPortfolio := Portfolio named: 'Amigos'.
	aPortfolio2 := Portfolio named: 'Vacio'.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	aPortfolio add: aPortfolio2.
	aPortfolio add: anAccount3.
	aTreeReport := TreeStructure of: aPortfolio.
	
	self assert: (OrderedCollection  with: 'Portfolio de Amigos' with: ' Cuenta de Camila' with: ' Cuenta de Karen' 
	with: ' Portfolio de Vacio' with: ' Cuenta de Alguien') equals: (aTreeReport report).!

Report subclass: #DetailedAccountSummary
	instanceVariableNames: 'summary account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #DetailedAccountSummary category: 'Portfolio2-Ejercicio' stamp: 'D S 11/15/2020 00:01:08'!
Report subclass: #DetailedAccountSummary
	instanceVariableNames: 'summary account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!Portfolio methodsFor: 'accounts management' stamp: 'D S 11/15/2020 00:06:32' prior: 50906842!
sendMessageToAllTransactionForTheReport: aReport

	"Sin el punto opcional, solo estaria la linea de accounts do. Buscar manera de sacar reduceIdentation que probablemente este mal"
	aReport addPortfolio: self.
	accounts do: [:anAccount| anAccount sendMessageToAllTransactionForTheReport: aReport].
	aReport reduceIdentationPortfolio.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/15/2020 00:06:51' prior: 50906598!
sendMessageToAllTransactionForTheReport: aReport

	"Sin el punto opcional, solo estaria la linea de transactions do"
	aReport addAccount: self.
	transactions do: [:aTransaction | aTransaction addToReport: aReport].
	aReport reduceIdentationReceptiveAccount.! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:07:25'!
reduceIdentationPortfolio

	identation := identation -1! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:07:31'!
reduceIdentationAccount

! !

!testRun: #TreeStructureTest #test01TreeStructureOfAnAccountGeneratesCorrectly stamp: 'D S 11/15/2020 00:07:35'!
ERROR!

!testRun: #TreeStructureTest #test02TreeStructureOfEmptyPortfolioGeneratesCorrectly stamp: 'D S 11/15/2020 00:07:35'!
PASSED!

!testRun: #TreeStructureTest #test03RelatedAccountOfTheStructureIsCorrect stamp: 'D S 11/15/2020 00:07:35'!
ERROR!

!testRun: #TreeStructureTest #test04IdentationGeneratesCorrectly stamp: 'D S 11/15/2020 00:07:35'!
ERROR!

!testRun: #TreeStructureTest #test05TreeStructureOfPortfolioWithMoreThanOneAccountGeneratesCorrectly stamp: 'D S 11/15/2020 00:07:35'!
ERROR!

!testRun: #TreeStructureTest #test06TreeStructureOfAPortfolioWithOtherInsideEmptyGeneratesCorrectly stamp: 'D S 11/15/2020 00:07:35'!
ERROR!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:08:00' prior: 50907225!
reduceIdentationAccount

	identation := identation -1! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:08:56'!
reduceIdentationReceptiveAccount

	identation := identation -1! !

!methodRemoval: TreeStructure #reduceIdentationAccount stamp: 'D S 11/15/2020 00:08:56'!
reduceIdentationAccount

	identation := identation -1!

!methodRemoval: TreeStructure #reduceIdentation stamp: 'D S 11/15/2020 00:09:04'!
reduceIdentation

	identation := identation -1!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:09:11' prior: 50907258!
reduceIdentationReceptiveAccount

	! !

!testRun: #TreeStructureTest #test01TreeStructureOfAnAccountGeneratesCorrectly stamp: 'D S 11/15/2020 00:09:15'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfEmptyPortfolioGeneratesCorrectly stamp: 'D S 11/15/2020 00:09:15'!
PASSED!

!testRun: #TreeStructureTest #test03RelatedAccountOfTheStructureIsCorrect stamp: 'D S 11/15/2020 00:09:15'!
PASSED!

!testRun: #TreeStructureTest #test04IdentationGeneratesCorrectly stamp: 'D S 11/15/2020 00:09:15'!
PASSED!

!testRun: #TreeStructureTest #test05TreeStructureOfPortfolioWithMoreThanOneAccountGeneratesCorrectly stamp: 'D S 11/15/2020 00:09:15'!
PASSED!

!testRun: #TreeStructureTest #test06TreeStructureOfAPortfolioWithOtherInsideEmptyGeneratesCorrectly stamp: 'D S 11/15/2020 00:09:15'!
PASSED!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:09:40'!
reduceIdentationPortfolio

! !
!AccountSummary methodsFor: 'accessing' stamp: 'D S 11/15/2020 00:09:55'!
reduceIdentationAccountSummary
! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:10:03'!
reduceIdentationAccountSummary

! !

!methodRemoval: TransferNet #reduceIdentation stamp: 'D S 11/15/2020 00:10:07'!
reduceIdentation
!

!methodRemoval: AccountSummary #reduceIdentation stamp: 'D S 11/15/2020 00:10:14'!
reduceIdentation!
!AccountSummary methodsFor: 'accessing' stamp: 'D S 11/15/2020 00:10:20'!
reduceIdentationPortfolio
! !

!testRun: #TreeStructureTest #test01TreeStructureOfAnAccountGeneratesCorrectly stamp: 'D S 11/15/2020 00:10:23'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfEmptyPortfolioGeneratesCorrectly stamp: 'D S 11/15/2020 00:10:23'!
PASSED!

!testRun: #TreeStructureTest #test03RelatedAccountOfTheStructureIsCorrect stamp: 'D S 11/15/2020 00:10:23'!
PASSED!

!testRun: #TreeStructureTest #test04IdentationGeneratesCorrectly stamp: 'D S 11/15/2020 00:10:23'!
PASSED!

!testRun: #TreeStructureTest #test05TreeStructureOfPortfolioWithMoreThanOneAccountGeneratesCorrectly stamp: 'D S 11/15/2020 00:10:23'!
PASSED!

!testRun: #TreeStructureTest #test06TreeStructureOfAPortfolioWithOtherInsideEmptyGeneratesCorrectly stamp: 'D S 11/15/2020 00:10:23'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetFromAnEmptyAccountReturns0 stamp: 'D S 11/15/2020 00:10:29'!
ERROR!

!testRun: #TransferNetTest #test02TransferNetForAnAccountWithATransferenceReturnsCorrectly stamp: 'D S 11/15/2020 00:10:29'!
ERROR!

!testRun: #TransferNetTest #test03TransferNetForAnAccountWithTwoTransferenceReturnsCorrectly stamp: 'D S 11/15/2020 00:10:29'!
ERROR!

!testRun: #TransferNetTest #test04WithdrawEndAffectsNegatively stamp: 'D S 11/15/2020 00:10:29'!
ERROR!

!testRun: #TransferNetTest #test05TransferNetOfAPortfolioReturnsCorrectly stamp: 'D S 11/15/2020 00:10:29'!
ERROR!

!testRun: #TransferNetTest #test06TransferNetOfAnEmptyPortfolioReturnsCorrectly stamp: 'D S 11/15/2020 00:10:29'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetOfAPortfolioWith2AccountsReturnsCorrectly stamp: 'D S 11/15/2020 00:10:29'!
ERROR!

!testRun: #TransferNetTest #test01TransferNetFromAnEmptyAccountReturns0 stamp: 'D S 11/15/2020 00:10:34'!
ERROR!

!testRun: #TransferNetTest #test01TransferNetFromAnEmptyAccountReturns0 stamp: 'D S 11/15/2020 00:10:34'!
ERROR!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:10:47'!
reduceIdentationReceptiveAccount
! !

!methodRemoval: TransferNet #reduceIdentationAccountSummary stamp: 'D S 11/15/2020 00:10:51'!
reduceIdentationAccountSummary

!

!testRun: #TreeStructureTest #test01TreeStructureOfAnAccountGeneratesCorrectly stamp: 'D S 11/15/2020 00:10:55'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfEmptyPortfolioGeneratesCorrectly stamp: 'D S 11/15/2020 00:10:55'!
PASSED!

!testRun: #TreeStructureTest #test03RelatedAccountOfTheStructureIsCorrect stamp: 'D S 11/15/2020 00:10:55'!
PASSED!

!testRun: #TreeStructureTest #test04IdentationGeneratesCorrectly stamp: 'D S 11/15/2020 00:10:55'!
PASSED!

!testRun: #TreeStructureTest #test05TreeStructureOfPortfolioWithMoreThanOneAccountGeneratesCorrectly stamp: 'D S 11/15/2020 00:10:55'!
PASSED!

!testRun: #TreeStructureTest #test06TreeStructureOfAPortfolioWithOtherInsideEmptyGeneratesCorrectly stamp: 'D S 11/15/2020 00:10:55'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetFromAnEmptyAccountReturns0 stamp: 'D S 11/15/2020 00:10:58'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForAnAccountWithATransferenceReturnsCorrectly stamp: 'D S 11/15/2020 00:10:58'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForAnAccountWithTwoTransferenceReturnsCorrectly stamp: 'D S 11/15/2020 00:10:58'!
PASSED!

!testRun: #TransferNetTest #test04WithdrawEndAffectsNegatively stamp: 'D S 11/15/2020 00:10:58'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetOfAPortfolioReturnsCorrectly stamp: 'D S 11/15/2020 00:10:58'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetOfAnEmptyPortfolioReturnsCorrectly stamp: 'D S 11/15/2020 00:10:58'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetOfAPortfolioWith2AccountsReturnsCorrectly stamp: 'D S 11/15/2020 00:10:58'!
PASSED!

!testRun: #AccountSummaryTest #test01SummaryOfAccountWithoutTransactionsGenerateCorrectly stamp: 'D S 11/15/2020 00:11:11'!
ERROR!

!testRun: #AccountSummaryTest #test02SummaryShowsCorrectBalance stamp: 'D S 11/15/2020 00:11:11'!
ERROR!

!testRun: #AccountSummaryTest #test03SummaryShowsDepositAndItsValue stamp: 'D S 11/15/2020 00:11:11'!
ERROR!

!testRun: #AccountSummaryTest #test04SummaryDoesntShowInexistentTransactions stamp: 'D S 11/15/2020 00:11:11'!
ERROR!

!testRun: #AccountSummaryTest #test05SummaryShowsWithdrawAndItsValue stamp: 'D S 11/15/2020 00:11:11'!
ERROR!

!testRun: #AccountSummaryTest #test06SummaryShowsDepositEndOfTransferenceAndItsValue stamp: 'D S 11/15/2020 00:11:11'!
ERROR!

!testRun: #AccountSummaryTest #test07SummaryShowsWithdrawEndOfTransferenceAndItsValue stamp: 'D S 11/15/2020 00:11:11'!
ERROR!

!testRun: #AccountSummaryTest #test08SummaryShowsMoreThanOneTransaction stamp: 'D S 11/15/2020 00:11:11'!
ERROR!

!testRun: #AccountSummaryTest #test01SummaryOfAccountWithoutTransactionsGenerateCorrectly stamp: 'D S 11/15/2020 00:11:18'!
ERROR!

!testRun: #AccountSummaryTest #test01SummaryOfAccountWithoutTransactionsGenerateCorrectly stamp: 'D S 11/15/2020 00:11:18'!
ERROR!
!AccountSummary methodsFor: 'accessing' stamp: 'D S 11/15/2020 00:11:35'!
reduceIdentationReceptiveAccount
! !

!methodRemoval: AccountSummary #reduceIdentationAccountSummary stamp: 'D S 11/15/2020 00:11:35'!
reduceIdentationAccountSummary
!

!testRun: #TreeStructureTest #test01TreeStructureOfAnAccountGeneratesCorrectly stamp: 'D S 11/15/2020 00:11:41'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfEmptyPortfolioGeneratesCorrectly stamp: 'D S 11/15/2020 00:11:41'!
PASSED!

!testRun: #TreeStructureTest #test03RelatedAccountOfTheStructureIsCorrect stamp: 'D S 11/15/2020 00:11:41'!
PASSED!

!testRun: #TreeStructureTest #test04IdentationGeneratesCorrectly stamp: 'D S 11/15/2020 00:11:41'!
PASSED!

!testRun: #TreeStructureTest #test05TreeStructureOfPortfolioWithMoreThanOneAccountGeneratesCorrectly stamp: 'D S 11/15/2020 00:11:41'!
PASSED!

!testRun: #TreeStructureTest #test06TreeStructureOfAPortfolioWithOtherInsideEmptyGeneratesCorrectly stamp: 'D S 11/15/2020 00:11:41'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetFromAnEmptyAccountReturns0 stamp: 'D S 11/15/2020 00:11:45'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForAnAccountWithATransferenceReturnsCorrectly stamp: 'D S 11/15/2020 00:11:45'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForAnAccountWithTwoTransferenceReturnsCorrectly stamp: 'D S 11/15/2020 00:11:45'!
PASSED!

!testRun: #TransferNetTest #test04WithdrawEndAffectsNegatively stamp: 'D S 11/15/2020 00:11:45'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetOfAPortfolioReturnsCorrectly stamp: 'D S 11/15/2020 00:11:45'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetOfAnEmptyPortfolioReturnsCorrectly stamp: 'D S 11/15/2020 00:11:45'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetOfAPortfolioWith2AccountsReturnsCorrectly stamp: 'D S 11/15/2020 00:11:45'!
PASSED!

!testRun: #AccountSummaryTest #test01SummaryOfAccountWithoutTransactionsGenerateCorrectly stamp: 'D S 11/15/2020 00:11:50'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryShowsCorrectBalance stamp: 'D S 11/15/2020 00:11:50'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryShowsDepositAndItsValue stamp: 'D S 11/15/2020 00:11:50'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryDoesntShowInexistentTransactions stamp: 'D S 11/15/2020 00:11:50'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryShowsWithdrawAndItsValue stamp: 'D S 11/15/2020 00:11:50'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryShowsDepositEndOfTransferenceAndItsValue stamp: 'D S 11/15/2020 00:11:50'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryShowsWithdrawEndOfTransferenceAndItsValue stamp: 'D S 11/15/2020 00:11:50'!
PASSED!

!testRun: #AccountSummaryTest #test08SummaryShowsMoreThanOneTransaction stamp: 'D S 11/15/2020 00:11:50'!
PASSED!

TestCase subclass: #DetailedAccountSummaryTest
	instanceVariableNames: 'summary account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #DetailedAccountSummaryTest category: 'Portfolio2-Ejercicio' stamp: 'D S 11/15/2020 00:12:31'!
TestCase subclass: #DetailedAccountSummaryTest
	instanceVariableNames: 'summary account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!DetailedAccountSummaryTest methodsFor: 'no messages' stamp: 'D S 11/15/2020 00:29:20'!
test01
	|anAccount anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: 'Balance = 0') equals: anDetailedSummary summary.! !
!DetailedAccountSummary class methodsFor: 'no messages' stamp: 'D S 11/15/2020 00:30:14'!
of: anAccount

	^self new generateDetailedAccountSummaryOf: anAccount.! !
!DetailedAccountSummary methodsFor: 'no messages' stamp: 'D S 11/15/2020 00:30:49'!
generateDetailedAccountSummaryOf: anAccount

	summary := OrderedCollection with: 'Balance = 0'.! !

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 00:30:58'!
ERROR!

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 00:30:58'!
ERROR!
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:31:18'!
summary

	^summary ! !

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 00:31:25'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 00:31:25'!
FAILURE!
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:31:48' prior: 50907597!
generateDetailedAccountSummaryOf: anAccount

	summary := OrderedCollection with: 'Cuenta de Name'with: 'Balance = 0'.! !
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:31:50' prior: 50907619!
generateDetailedAccountSummaryOf: anAccount

	summary := OrderedCollection with: 'Cuenta de Name' with: 'Balance = 0'.! !

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 00:31:56'!
PASSED!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:43:00'!
test02
	|anAccount anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	Deposit register: 100 on: anAccount.
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: ' Deposito de 100'with: 'Balance = 0') equals: anDetailedSummary summary.! !
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:43:43' prior: 50907627!
generateDetailedAccountSummaryOf: anAccount

	anAccount sendMessageToAllTransactionForTheReport: self! !

!classDefinition: #DetailedAccountSummary category: 'Portfolio2-Ejercicio' stamp: 'D S 11/15/2020 00:44:24'!
Report subclass: #DetailedAccountSummary
	instanceVariableNames: 'summary account identation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:44:23'!
reduceIdentationReceptiveAccount

	identation := identation - 1! !
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:44:33' prior: 50907651!
generateDetailedAccountSummaryOf: anAccount

	identation := 0.
	anAccount sendMessageToAllTransactionForTheReport: self! !
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:44:41'!
addDeposit! !
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:45:05'!
addDeposit: aTransaction

	summary add: 'Deposito de 100'! !
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:45:17' prior: 50907684!
addDeposit: aTransaction

	summary add: ' Deposito de 100'! !

!testRun: #DetailedAccountSummaryTest #test02 stamp: 'D S 11/15/2020 00:45:29'!
ERROR!

!testRun: #DetailedAccountSummaryTest #test02 stamp: 'D S 11/15/2020 00:45:29'!
ERROR!
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:46:00'!
addAccount: anAccount

	summary add: 'Cuenta de NoName'! !

!testRun: #TreeStructureTest #test01TreeStructureOfAnAccountGeneratesCorrectly stamp: 'D S 11/15/2020 00:46:04'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfEmptyPortfolioGeneratesCorrectly stamp: 'D S 11/15/2020 00:46:04'!
PASSED!

!testRun: #TreeStructureTest #test03RelatedAccountOfTheStructureIsCorrect stamp: 'D S 11/15/2020 00:46:04'!
PASSED!

!testRun: #TreeStructureTest #test04IdentationGeneratesCorrectly stamp: 'D S 11/15/2020 00:46:04'!
PASSED!

!testRun: #TreeStructureTest #test05TreeStructureOfPortfolioWithMoreThanOneAccountGeneratesCorrectly stamp: 'D S 11/15/2020 00:46:04'!
PASSED!

!testRun: #TreeStructureTest #test06TreeStructureOfAPortfolioWithOtherInsideEmptyGeneratesCorrectly stamp: 'D S 11/15/2020 00:46:04'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 00:46:11'!
ERROR!

!testRun: #DetailedAccountSummaryTest #test02 stamp: 'D S 11/15/2020 00:46:11'!
ERROR!

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 00:46:16'!
ERROR!

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 00:46:16'!
ERROR!
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:46:32' prior: 50907673!
generateDetailedAccountSummaryOf: anAccount

	identation := 0.
	summary := OrderedCollection new.
	anAccount sendMessageToAllTransactionForTheReport: self! !

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 00:46:36'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test02 stamp: 'D S 11/15/2020 00:46:36'!
FAILURE!
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:46:52' prior: 50907667!
reduceIdentationReceptiveAccount

	identation := identation - 1
	summary add: 'Balance = 0'! !

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 00:46:59'!
ERROR!

!testRun: #DetailedAccountSummaryTest #test02 stamp: 'D S 11/15/2020 00:46:59'!
ERROR!

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 00:47:03'!
ERROR!

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 00:47:03'!
ERROR!
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:47:19' prior: 50907755!
reduceIdentationReceptiveAccount

	identation := identation - 1.
	summary add: 'Balance = 0'! !

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 00:47:22'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test02 stamp: 'D S 11/15/2020 00:47:22'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 00:47:27'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 00:47:27'!
FAILURE!
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:47:38' prior: 50907701!
addAccount: anAccount

	summary add: 'Cuenta de Name'! !

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 00:47:41'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02 stamp: 'D S 11/15/2020 00:47:41'!
PASSED!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:48:06'!
test03
	|anAccount anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	Deposit register: 100 on: anAccount.
	Deposit register: 200 on: anAccount.
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: ' Deposito de 100' with: ' Deposito de 200'with: 'Balance = 0') equals: anDetailedSummary summary.! !

!testRun: #DetailedAccountSummaryTest #test03 stamp: 'D S 11/15/2020 00:48:09'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test03 stamp: 'D S 11/15/2020 00:48:09'!
FAILURE!

!methodRemoval: DetailedAccountSummary #addDeposit stamp: 'D S 11/15/2020 00:48:19'!
addDeposit!
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:48:30' prior: 50907690!
addDeposit: aTransaction

	summary add: ' Deposito de ', aTransaction value asString.! !

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 00:48:37'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02 stamp: 'D S 11/15/2020 00:48:37'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test03 stamp: 'D S 11/15/2020 00:48:37'!
PASSED!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:48:54'!
test04
	|anAccount anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	Withdraw register: 100 on: anAccount.
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: ' Extraccion de 100'with: 'Balance = 0') equals: anDetailedSummary summary.! !

!testRun: #DetailedAccountSummaryTest #test04 stamp: 'D S 11/15/2020 00:48:57'!
ERROR!

!testRun: #DetailedAccountSummaryTest #test04 stamp: 'D S 11/15/2020 00:48:57'!
ERROR!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:49:04' prior: 50907842!
test04
	|anAccount anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	Withdraw register: 100 on: anAccount.
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: ' Extraccion de 100'with: 'Balance = -100') equals: anDetailedSummary summary.! !
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:49:09' prior: 50907637!
test02
	|anAccount anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	Deposit register: 100 on: anAccount.
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: ' Deposito de 100'with: 'Balance = 100') equals: anDetailedSummary summary.! !

!testRun: #DetailedAccountSummaryTest #test02 stamp: 'D S 11/15/2020 00:49:12'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test02 stamp: 'D S 11/15/2020 00:49:12'!
FAILURE!
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:50:04'!
reduceIdentationReceptiveAccount: anAccount

	identation := identation - 1.
	summary add: 'Balance = ', anAccount balance asString.! !
!Portfolio methodsFor: 'accounts management' stamp: 'D S 11/15/2020 00:50:28' prior: 50907195!
sendMessageToAllTransactionForTheReport: aReport

	"Sin el punto opcional, solo estaria la linea de accounts do. Buscar manera de sacar reduceIdentation que probablemente este mal"
	aReport addPortfolio: self.
	accounts do: [:anAccount| anAccount sendMessageToAllTransactionForTheReport: aReport].
	aReport reduceIdentationPortfolio: self.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/15/2020 00:50:36' prior: 50907209!
sendMessageToAllTransactionForTheReport: aReport

	"Sin el punto opcional, solo estaria la linea de transactions do"
	aReport addAccount: self.
	transactions do: [:aTransaction | aTransaction addToReport: aReport].
	aReport reduceIdentationReceptiveAccount: self.! !
!AccountSummary methodsFor: 'accessing' stamp: 'D S 11/15/2020 00:50:51'!
reduceIdentationReceptiveAccount: anAccount
! !
!AccountSummary methodsFor: 'accessing' stamp: 'D S 11/15/2020 00:50:57'!
reduceIdentationPortfolio: anPortfolio
! !

!methodRemoval: AccountSummary #reduceIdentationReceptiveAccount stamp: 'D S 11/15/2020 00:51:00'!
reduceIdentationReceptiveAccount
!

!methodRemoval: AccountSummary #reduceIdentationPortfolio stamp: 'D S 11/15/2020 00:51:03'!
reduceIdentationPortfolio
!

!methodRemoval: DetailedAccountSummary #reduceIdentationReceptiveAccount stamp: 'D S 11/15/2020 00:51:13'!
reduceIdentationReceptiveAccount

	identation := identation - 1.
	summary add: 'Balance = 0'!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:51:24'!
reduceIdentationPortfolio: aPortfolio

! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:51:28'!
reduceIdentationReceptiveAccount: anAccount
! !

!methodRemoval: TransferNet #reduceIdentationPortfolio stamp: 'D S 11/15/2020 00:51:31'!
reduceIdentationPortfolio

!

!methodRemoval: TransferNet #reduceIdentationReceptiveAccount stamp: 'D S 11/15/2020 00:51:34'!
reduceIdentationReceptiveAccount
!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:51:40'!
reduceIdentationPortfolio: aPortfolio

	identation := identation -1! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:51:44'!
reduceIdentationReceptiveAccount: anAccount

	! !

!methodRemoval: TreeStructure #reduceIdentationPortfolio stamp: 'D S 11/15/2020 00:51:47'!
reduceIdentationPortfolio

	identation := identation -1!

!methodRemoval: TreeStructure #reduceIdentationReceptiveAccount stamp: 'D S 11/15/2020 00:51:50'!
reduceIdentationReceptiveAccount

	!

!testRun: #TransferNetTest #test01TransferNetFromAnEmptyAccountReturns0 stamp: 'D S 11/15/2020 00:52:08'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForAnAccountWithATransferenceReturnsCorrectly stamp: 'D S 11/15/2020 00:52:08'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForAnAccountWithTwoTransferenceReturnsCorrectly stamp: 'D S 11/15/2020 00:52:08'!
PASSED!

!testRun: #TransferNetTest #test04WithdrawEndAffectsNegatively stamp: 'D S 11/15/2020 00:52:08'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetOfAPortfolioReturnsCorrectly stamp: 'D S 11/15/2020 00:52:08'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetOfAnEmptyPortfolioReturnsCorrectly stamp: 'D S 11/15/2020 00:52:08'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetOfAPortfolioWith2AccountsReturnsCorrectly stamp: 'D S 11/15/2020 00:52:08'!
PASSED!

!testRun: #TreeStructureTest #test01TreeStructureOfAnAccountGeneratesCorrectly stamp: 'D S 11/15/2020 00:52:13'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfEmptyPortfolioGeneratesCorrectly stamp: 'D S 11/15/2020 00:52:13'!
PASSED!

!testRun: #TreeStructureTest #test03RelatedAccountOfTheStructureIsCorrect stamp: 'D S 11/15/2020 00:52:13'!
PASSED!

!testRun: #TreeStructureTest #test04IdentationGeneratesCorrectly stamp: 'D S 11/15/2020 00:52:13'!
PASSED!

!testRun: #TreeStructureTest #test05TreeStructureOfPortfolioWithMoreThanOneAccountGeneratesCorrectly stamp: 'D S 11/15/2020 00:52:13'!
PASSED!

!testRun: #TreeStructureTest #test06TreeStructureOfAPortfolioWithOtherInsideEmptyGeneratesCorrectly stamp: 'D S 11/15/2020 00:52:13'!
PASSED!

!testRun: #AccountSummaryTest #test01SummaryOfAccountWithoutTransactionsGenerateCorrectly stamp: 'D S 11/15/2020 00:52:18'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryShowsCorrectBalance stamp: 'D S 11/15/2020 00:52:18'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryShowsDepositAndItsValue stamp: 'D S 11/15/2020 00:52:18'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryDoesntShowInexistentTransactions stamp: 'D S 11/15/2020 00:52:18'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryShowsWithdrawAndItsValue stamp: 'D S 11/15/2020 00:52:18'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryShowsDepositEndOfTransferenceAndItsValue stamp: 'D S 11/15/2020 00:52:18'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryShowsWithdrawEndOfTransferenceAndItsValue stamp: 'D S 11/15/2020 00:52:18'!
PASSED!

!testRun: #AccountSummaryTest #test08SummaryShowsMoreThanOneTransaction stamp: 'D S 11/15/2020 00:52:18'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test03 stamp: 'D S 11/15/2020 00:52:32'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test03 stamp: 'D S 11/15/2020 00:52:32'!
FAILURE!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:52:38' prior: 50907802!
test03
	|anAccount anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	Deposit register: 100 on: anAccount.
	Deposit register: 200 on: anAccount.
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: ' Deposito de 100' with: ' Deposito de 200'with: 'Balance = 300') equals: anDetailedSummary summary.! !

!testRun: #DetailedAccountSummaryTest #test03 stamp: 'D S 11/15/2020 00:52:40'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02 stamp: 'D S 11/15/2020 00:52:44'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test04 stamp: 'D S 11/15/2020 00:52:47'!
ERROR!

!testRun: #DetailedAccountSummaryTest #test04 stamp: 'D S 11/15/2020 00:52:47'!
ERROR!
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:53:07'!
addWithdraw: aTransaction

	summary add: ' Deposito de ', aTransaction value asString.! !
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:53:14' prior: 50908100!
addWithdraw: aTransaction

	summary add: ' Extraccion de 100'! !

!testRun: #DetailedAccountSummaryTest #test04 stamp: 'D S 11/15/2020 00:53:19'!
PASSED!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:53:49'!
test05
	|anAccount anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	Withdraw register: 100 on: anAccount.
	Withdraw register: 200 on: anAccount.
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: ' Extraccion de 100' with: ' Extraccion de 200' with: 'Balance = -300') equals: anDetailedSummary summary.! !

!testRun: #DetailedAccountSummaryTest #test05 stamp: 'D S 11/15/2020 00:53:56'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test05 stamp: 'D S 11/15/2020 00:53:56'!
FAILURE!
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:54:15' prior: 50908107!
addWithdraw: aTransaction

	summary add: ' Extraccion de ', aTransaction value asString.! !

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 00:54:19'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02 stamp: 'D S 11/15/2020 00:54:19'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test03 stamp: 'D S 11/15/2020 00:54:19'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test04 stamp: 'D S 11/15/2020 00:54:19'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test05 stamp: 'D S 11/15/2020 00:54:19'!
PASSED!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:57:47'!
test06
	|anAccount anAccount2 anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anAccount2 := ReceptiveAccount named: 'OtroName'.
	Transference from: anAccount2 to: anAccount  amount: 100. 
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: ' Entrada por transferencia de 100' with: ' Extraccion de 200' with: 'Balance = -300') equals: anDetailedSummary summary.! !
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:58:07' prior: 50908157!
test06
	|anAccount anAccount2 anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anAccount2 := ReceptiveAccount named: 'OtroName'.
	Transference from: anAccount2 to: anAccount  amount: 100. 
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: ' Entrada por transferencia de 100' with: 'Balance = -300') equals: anDetailedSummary summary.! !
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:58:22'!
addDepositEnd: aTransaction
	
	summary add: 'Entrada por transferencia de 100'! !

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 00:58:26'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02 stamp: 'D S 11/15/2020 00:58:26'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test03 stamp: 'D S 11/15/2020 00:58:26'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test04 stamp: 'D S 11/15/2020 00:58:26'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test05 stamp: 'D S 11/15/2020 00:58:26'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test06 stamp: 'D S 11/15/2020 00:58:26'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test06 stamp: 'D S 11/15/2020 00:58:26'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test06 stamp: 'D S 11/15/2020 00:58:31'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test06 stamp: 'D S 11/15/2020 00:58:31'!
FAILURE!
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:58:40' prior: 50908192!
addDepositEnd: aTransaction
	
	summary add: ' Entrada por transferencia de 100'! !

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 00:58:43'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02 stamp: 'D S 11/15/2020 00:58:43'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test03 stamp: 'D S 11/15/2020 00:58:43'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test04 stamp: 'D S 11/15/2020 00:58:43'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test05 stamp: 'D S 11/15/2020 00:58:43'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test06 stamp: 'D S 11/15/2020 00:58:43'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test06 stamp: 'D S 11/15/2020 00:58:43'!
FAILURE!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:58:57' prior: 50908175!
test06
	|anAccount anAccount2 anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anAccount2 := ReceptiveAccount named: 'OtroName'.
	Transference from: anAccount2 to: anAccount  amount: 100. 
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: ' Entrada por transferencia de 100' with: 'Balance = 100') equals: anDetailedSummary summary.! !

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 00:59:00'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02 stamp: 'D S 11/15/2020 00:59:00'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test03 stamp: 'D S 11/15/2020 00:59:00'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test04 stamp: 'D S 11/15/2020 00:59:00'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test05 stamp: 'D S 11/15/2020 00:59:00'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test06 stamp: 'D S 11/15/2020 00:59:00'!
PASSED!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:59:31'!
test07
	|anAccount anAccount2 anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anAccount2 := ReceptiveAccount named: 'OtroName'.
	Transference from: anAccount2 to: anAccount  amount: 100.
	Transference from: anAccount2 to: anAccount  amount: 200. 

	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: ' Entrada por transferencia de 100' with: ' Entrada por transferencia de 200' with: 'Balance = 300') equals: anDetailedSummary summary.! !

!testRun: #DetailedAccountSummaryTest #test07 stamp: 'D S 11/15/2020 00:59:36'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test07 stamp: 'D S 11/15/2020 00:59:36'!
FAILURE!
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:59:48' prior: 50908224!
addDepositEnd: aTransaction
	
	summary add: ' Entrada por transferencia de ', aTransaction value asString.! !

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 00:59:57'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02 stamp: 'D S 11/15/2020 00:59:57'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test03 stamp: 'D S 11/15/2020 00:59:57'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test04 stamp: 'D S 11/15/2020 00:59:57'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test05 stamp: 'D S 11/15/2020 00:59:57'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test06 stamp: 'D S 11/15/2020 00:59:57'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test07 stamp: 'D S 11/15/2020 00:59:57'!
PASSED!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:00:12'!
test08
	|anAccount anAccount2 anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anAccount2 := ReceptiveAccount named: 'OtroName'.
	Transference from: anAccount to: anAccount2  amount: 100. 
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: ' Salida por transferencia de 100' with: 'Balance = -100') equals: anDetailedSummary summary.! !

!testRun: #DetailedAccountSummaryTest #test08 stamp: 'D S 11/15/2020 01:00:15'!
ERROR!

!testRun: #DetailedAccountSummaryTest #test08 stamp: 'D S 11/15/2020 01:00:15'!
ERROR!
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:00:29'!
addWithdrawEnd: aTransaction
	
	summary add: ' Salida por transferencia de ', aTransaction value asString.! !
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:00:40' prior: 50908358!
addWithdrawEnd: aTransaction
	
	summary add: ' Salida por transferencia de 100'.! !

!testRun: #DetailedAccountSummaryTest #test08 stamp: 'D S 11/15/2020 01:00:45'!
PASSED!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:00:56' prior: 50908336!
test08
	|anAccount anAccount2 anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anAccount2 := ReceptiveAccount named: 'OtroName'.
	Transference from: anAccount to: anAccount2  amount: 100. 
	Transference from: anAccount to: anAccount2  amount: 200. 	
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: ' Salida por transferencia de 100' with: 'Balance = -100') equals: anDetailedSummary summary.! !
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:01:03' prior: 50908374!
test08
	|anAccount anAccount2 anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anAccount2 := ReceptiveAccount named: 'OtroName'.
	Transference from: anAccount to: anAccount2  amount: 100. 
	Transference from: anAccount to: anAccount2  amount: 200. 	
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: ' Salida por transferencia de 100' with: ' Salida por transferencia de 100' with: 'Balance = -100') equals: anDetailedSummary summary.! !
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:01:07' prior: 50908393!
test08
	|anAccount anAccount2 anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anAccount2 := ReceptiveAccount named: 'OtroName'.
	Transference from: anAccount to: anAccount2  amount: 100. 
	Transference from: anAccount to: anAccount2  amount: 200. 	
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: ' Salida por transferencia de 100' with: ' Salida por transferencia de 200' with: 'Balance = -300') equals: anDetailedSummary summary.! !
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:01:12'!
test09
	|anAccount anAccount2 anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anAccount2 := ReceptiveAccount named: 'OtroName'.
	Transference from: anAccount to: anAccount2  amount: 100. 
	Transference from: anAccount to: anAccount2  amount: 200. 	
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: ' Salida por transferencia de 100' with: ' Salida por transferencia de 200' with: 'Balance = -300') equals: anDetailedSummary summary.! !
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:01:03' prior: 50908414!
test08
	|anAccount anAccount2 anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anAccount2 := ReceptiveAccount named: 'OtroName'.
	Transference from: anAccount to: anAccount2  amount: 100. 
	Transference from: anAccount to: anAccount2  amount: 200. 	
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: ' Salida por transferencia de 100' with: ' Salida por transferencia de 100' with: 'Balance = -100') equals: anDetailedSummary summary.! !
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:00:56' prior: 50908455!
test08
	|anAccount anAccount2 anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anAccount2 := ReceptiveAccount named: 'OtroName'.
	Transference from: anAccount to: anAccount2  amount: 100. 
	Transference from: anAccount to: anAccount2  amount: 200. 	
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: ' Salida por transferencia de 100' with: 'Balance = -100') equals: anDetailedSummary summary.! !
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:00:12' prior: 50908476!
test08
	|anAccount anAccount2 anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anAccount2 := ReceptiveAccount named: 'OtroName'.
	Transference from: anAccount to: anAccount2  amount: 100. 
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: ' Salida por transferencia de 100' with: 'Balance = -100') equals: anDetailedSummary summary.! !

!testRun: #DetailedAccountSummaryTest #test09 stamp: 'D S 11/15/2020 01:01:26'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test09 stamp: 'D S 11/15/2020 01:01:26'!
FAILURE!
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:01:43' prior: 50908365!
addWithdrawEnd: aTransaction
	
	summary add: ' Salida por transferencia de ', aTransaction value asString..! !
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:01:46' prior: 50908518!
addWithdrawEnd: aTransaction
	
	summary add: ' Salida por transferencia de ', aTransaction value asString.! !

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 01:01:50'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02 stamp: 'D S 11/15/2020 01:01:50'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test03 stamp: 'D S 11/15/2020 01:01:50'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test04 stamp: 'D S 11/15/2020 01:01:50'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test05 stamp: 'D S 11/15/2020 01:01:50'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test06 stamp: 'D S 11/15/2020 01:01:50'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test07 stamp: 'D S 11/15/2020 01:01:50'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test08 stamp: 'D S 11/15/2020 01:01:50'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test09 stamp: 'D S 11/15/2020 01:01:50'!
PASSED!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:03:22' prior: 50907876!
test02
	|anAccount anDetailedSummary aPortfolio|
	
	anAccount := ReceptiveAccount named: 'Name'.
	aPortfolio := Portfolio named: 'portfolio'.
	aPortfolio add: anAccount.
	anDetailedSummary := DetailedAccountSummary of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de portfolio' with: ' Cuenta de Name' with: ' Balance = 0' with: 'Balance = 0') equals: anDetailedSummary summary.! !
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:03:25'!
test10
	|anAccount anDetailedSummary aPortfolio|
	
	anAccount := ReceptiveAccount named: 'Name'.
	aPortfolio := Portfolio named: 'portfolio'.
	aPortfolio add: anAccount.
	anDetailedSummary := DetailedAccountSummary of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de portfolio' with: ' Cuenta de Name' with: ' Balance = 0' with: 'Balance = 0') equals: anDetailedSummary summary.! !
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 00:43:00' prior: 50908557!
test02
	|anAccount anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	Deposit register: 100 on: anAccount.
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: ' Deposito de 100'with: 'Balance = 0') equals: anDetailedSummary summary.! !

!testRun: #DetailedAccountSummaryTest #test10 stamp: 'D S 11/15/2020 01:03:41'!
ERROR!

!testRun: #DetailedAccountSummaryTest #test10 stamp: 'D S 11/15/2020 01:03:41'!
ERROR!
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:04:25'!
addPortfolio: anPortfolio
	
	summary add: ('Portfolio de ',anPortfolio name).
	identation := identation +1.! !

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 01:04:31'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02 stamp: 'D S 11/15/2020 01:04:31'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test03 stamp: 'D S 11/15/2020 01:04:31'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test04 stamp: 'D S 11/15/2020 01:04:31'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test05 stamp: 'D S 11/15/2020 01:04:31'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test06 stamp: 'D S 11/15/2020 01:04:31'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test07 stamp: 'D S 11/15/2020 01:04:31'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test08 stamp: 'D S 11/15/2020 01:04:31'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test09 stamp: 'D S 11/15/2020 01:04:31'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test10 stamp: 'D S 11/15/2020 01:04:31'!
ERROR!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:04:36' prior: 50908590!
test02
	|anAccount anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	Deposit register: 100 on: anAccount.
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: ' Deposito de 100'with: 'Balance = 100') equals: anDetailedSummary summary.! !
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:05:10'!
reduceIdentationPortfolio: aPortfolio

	identation := identation - 1.
	summary add: 'Balance = ', aPortfolio balance asString.! !

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 01:05:14'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02 stamp: 'D S 11/15/2020 01:05:14'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test03 stamp: 'D S 11/15/2020 01:05:14'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test04 stamp: 'D S 11/15/2020 01:05:14'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test05 stamp: 'D S 11/15/2020 01:05:14'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test06 stamp: 'D S 11/15/2020 01:05:14'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test07 stamp: 'D S 11/15/2020 01:05:14'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test08 stamp: 'D S 11/15/2020 01:05:14'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test09 stamp: 'D S 11/15/2020 01:05:14'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test10 stamp: 'D S 11/15/2020 01:05:14'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test10 stamp: 'D S 11/15/2020 01:05:14'!
FAILURE!
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:06:34' prior: 50907791!
addAccount: anAccount
	|initialSpace|
	
	initialSpace := String new: ''.
	identation timesRepeat: [initialSpace:= initialSpace, ' '].
	summary add: (initialSpace, 'Cuenta de Name')! !

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 01:06:37'!
ERROR!

!testRun: #DetailedAccountSummaryTest #test02 stamp: 'D S 11/15/2020 01:06:37'!
ERROR!

!testRun: #DetailedAccountSummaryTest #test03 stamp: 'D S 11/15/2020 01:06:37'!
ERROR!

!testRun: #DetailedAccountSummaryTest #test04 stamp: 'D S 11/15/2020 01:06:37'!
ERROR!

!testRun: #DetailedAccountSummaryTest #test05 stamp: 'D S 11/15/2020 01:06:37'!
ERROR!

!testRun: #DetailedAccountSummaryTest #test06 stamp: 'D S 11/15/2020 01:06:37'!
ERROR!

!testRun: #DetailedAccountSummaryTest #test07 stamp: 'D S 11/15/2020 01:06:37'!
ERROR!

!testRun: #DetailedAccountSummaryTest #test08 stamp: 'D S 11/15/2020 01:06:37'!
ERROR!

!testRun: #DetailedAccountSummaryTest #test09 stamp: 'D S 11/15/2020 01:06:37'!
ERROR!

!testRun: #DetailedAccountSummaryTest #test10 stamp: 'D S 11/15/2020 01:06:37'!
ERROR!

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 01:06:42'!
ERROR!

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 01:06:42'!
ERROR!
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:07:03' prior: 50908697!
addAccount: anAccount
	|initialSpace|
	
	initialSpace := String new.
	identation timesRepeat: [initialSpace:= initialSpace, ' '].
	summary add: (initialSpace, 'Cuenta de Name')! !

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 01:07:09'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02 stamp: 'D S 11/15/2020 01:07:09'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test03 stamp: 'D S 11/15/2020 01:07:09'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test04 stamp: 'D S 11/15/2020 01:07:09'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test05 stamp: 'D S 11/15/2020 01:07:09'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test06 stamp: 'D S 11/15/2020 01:07:09'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test07 stamp: 'D S 11/15/2020 01:07:09'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test08 stamp: 'D S 11/15/2020 01:07:09'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test09 stamp: 'D S 11/15/2020 01:07:09'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test10 stamp: 'D S 11/15/2020 01:07:09'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test10 stamp: 'D S 11/15/2020 01:07:09'!
FAILURE!
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:08:27' prior: 50907895!
reduceIdentationReceptiveAccount: anAccount
	|initialSpace|
	
	identation := identation - 1.
	initialSpace := String new.
	identation timesRepeat: [initialSpace:= initialSpace, ' '].
	summary add: 'Balance = ', anAccount balance asString.! !

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 01:08:30'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02 stamp: 'D S 11/15/2020 01:08:30'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test03 stamp: 'D S 11/15/2020 01:08:30'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test04 stamp: 'D S 11/15/2020 01:08:30'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test05 stamp: 'D S 11/15/2020 01:08:30'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test06 stamp: 'D S 11/15/2020 01:08:30'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test07 stamp: 'D S 11/15/2020 01:08:30'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test08 stamp: 'D S 11/15/2020 01:08:30'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test09 stamp: 'D S 11/15/2020 01:08:30'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test10 stamp: 'D S 11/15/2020 01:08:30'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test10 stamp: 'D S 11/15/2020 01:08:30'!
FAILURE!
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:09:15' prior: 50908740!
addAccount: anAccount
	|initialSpace|
	
	initialSpace := String new.
	identation timesRepeat: [initialSpace:= initialSpace, ' '].
	summary add: (initialSpace, 'Cuenta de Name').
	identation := identation + 1! !

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 01:09:18'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02 stamp: 'D S 11/15/2020 01:09:18'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test03 stamp: 'D S 11/15/2020 01:09:18'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test04 stamp: 'D S 11/15/2020 01:09:18'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test05 stamp: 'D S 11/15/2020 01:09:18'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test06 stamp: 'D S 11/15/2020 01:09:18'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test07 stamp: 'D S 11/15/2020 01:09:18'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test08 stamp: 'D S 11/15/2020 01:09:18'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test09 stamp: 'D S 11/15/2020 01:09:18'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test10 stamp: 'D S 11/15/2020 01:09:18'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test10 stamp: 'D S 11/15/2020 01:09:18'!
FAILURE!
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:11:58' prior: 50908780!
reduceIdentationReceptiveAccount: anAccount
	|initialSpace|
	
	identation := identation - 1.
	initialSpace := String new.
	identation timesRepeat: [initialSpace:= initialSpace, ' '].
	summary add: (initialSpace,'Balance = ', anAccount balance asString).! !

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 01:12:07'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02 stamp: 'D S 11/15/2020 01:12:07'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test03 stamp: 'D S 11/15/2020 01:12:07'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test04 stamp: 'D S 11/15/2020 01:12:07'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test05 stamp: 'D S 11/15/2020 01:12:07'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test06 stamp: 'D S 11/15/2020 01:12:07'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test07 stamp: 'D S 11/15/2020 01:12:07'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test08 stamp: 'D S 11/15/2020 01:12:07'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test09 stamp: 'D S 11/15/2020 01:12:07'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test10 stamp: 'D S 11/15/2020 01:12:07'!
PASSED!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:12:45' prior: 50908573!
test10
	|anAccount anDetailedSummary aPortfolio|
	
	anAccount := ReceptiveAccount named: 'Name'.
	aPortfolio := Portfolio named: 'portfolio'.
	aPortfolio add: anAccount.
	Deposit register: anAccount on: 100.
	anDetailedSummary := DetailedAccountSummary of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de portfolio' with: ' Cuenta de Name' with: '  Deposito de 100'with: ' Balance = 100' with: 'Balance = 0') equals: anDetailedSummary summary.! !
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:12:48'!
test11
	|anAccount anDetailedSummary aPortfolio|
	
	anAccount := ReceptiveAccount named: 'Name'.
	aPortfolio := Portfolio named: 'portfolio'.
	aPortfolio add: anAccount.
	Deposit register: anAccount on: 100.
	anDetailedSummary := DetailedAccountSummary of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de portfolio' with: ' Cuenta de Name' with: '  Deposito de 100'with: ' Balance = 100' with: 'Balance = 0') equals: anDetailedSummary summary.! !
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:03:25' prior: 50908903!
test10
	|anAccount anDetailedSummary aPortfolio|
	
	anAccount := ReceptiveAccount named: 'Name'.
	aPortfolio := Portfolio named: 'portfolio'.
	aPortfolio add: anAccount.
	anDetailedSummary := DetailedAccountSummary of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de portfolio' with: ' Cuenta de Name' with: ' Balance = 0' with: 'Balance = 0') equals: anDetailedSummary summary.! !

!testRun: #DetailedAccountSummaryTest #test11 stamp: 'D S 11/15/2020 01:12:58'!
ERROR!

!testRun: #DetailedAccountSummaryTest #test11 stamp: 'D S 11/15/2020 01:12:58'!
ERROR!

!testRun: #DetailedAccountSummaryTest #test11 stamp: 'D S 11/15/2020 01:13:10'!
ERROR!

!testRun: #DetailedAccountSummaryTest #test11 stamp: 'D S 11/15/2020 01:13:10'!
ERROR!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:13:30' prior: 50908921!
test11
	|anAccount anDetailedSummary aPortfolio|
	
	anAccount := ReceptiveAccount named: 'Name'.
	aPortfolio := Portfolio named: 'portfolio'.
	aPortfolio add: anAccount.
	Deposit register: 100 on: anAccount.
	anDetailedSummary := DetailedAccountSummary of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de portfolio' with: ' Cuenta de Name' with: '  Deposito de 100'with: ' Balance = 100' with: 'Balance = 0') equals: anDetailedSummary summary.! !

!testRun: #DetailedAccountSummaryTest #test11 stamp: 'D S 11/15/2020 01:13:36'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test11 stamp: 'D S 11/15/2020 01:13:36'!
FAILURE!
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:14:17' prior: 50907827!
addDeposit: aTransaction
	|initialSpace|
	initialSpace := String new.
	identation timesRepeat: [initialSpace := initialSpace, ' '].
	summary add: ' Deposito de ', aTransaction value asString.! !

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 01:14:21'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02 stamp: 'D S 11/15/2020 01:14:21'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test03 stamp: 'D S 11/15/2020 01:14:21'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test04 stamp: 'D S 11/15/2020 01:14:21'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test05 stamp: 'D S 11/15/2020 01:14:21'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test06 stamp: 'D S 11/15/2020 01:14:21'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test07 stamp: 'D S 11/15/2020 01:14:21'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test08 stamp: 'D S 11/15/2020 01:14:21'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test09 stamp: 'D S 11/15/2020 01:14:21'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test10 stamp: 'D S 11/15/2020 01:14:21'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test11 stamp: 'D S 11/15/2020 01:14:21'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test11 stamp: 'D S 11/15/2020 01:14:21'!
FAILURE!
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:15:09' prior: 50908992!
addDeposit: aTransaction
	|initialSpace|
	initialSpace := String new.
	identation timesRepeat: [initialSpace := initialSpace, ' '].
	summary add: ' Deposito de ', aTransaction value asString.! !
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:16:16' prior: 50909035!
addDeposit: aTransaction
	|initialSpace|
	initialSpace := String new.
	identation timesRepeat: [initialSpace := initialSpace, ' '].
	summary add: (initialSpace, 'Deposito de ', aTransaction value asString).! !

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 01:16:28'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02 stamp: 'D S 11/15/2020 01:16:28'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test03 stamp: 'D S 11/15/2020 01:16:28'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test04 stamp: 'D S 11/15/2020 01:16:28'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test05 stamp: 'D S 11/15/2020 01:16:28'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test06 stamp: 'D S 11/15/2020 01:16:28'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test07 stamp: 'D S 11/15/2020 01:16:28'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test08 stamp: 'D S 11/15/2020 01:16:28'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test09 stamp: 'D S 11/15/2020 01:16:28'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test10 stamp: 'D S 11/15/2020 01:16:28'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test11 stamp: 'D S 11/15/2020 01:16:28'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test11 stamp: 'D S 11/15/2020 01:16:28'!
FAILURE!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:16:52' prior: 50908968!
test11
	|anAccount anDetailedSummary aPortfolio|
	
	anAccount := ReceptiveAccount named: 'Name'.
	aPortfolio := Portfolio named: 'portfolio'.
	aPortfolio add: anAccount.
	Deposit register: 100 on: anAccount.
	anDetailedSummary := DetailedAccountSummary of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de portfolio' with: ' Cuenta de Name' with: '  Deposito de 100'with: ' Balance = 100' with: 'Balance = 100') equals: anDetailedSummary summary.! !

!testRun: #DetailedAccountSummaryTest #test11 stamp: 'D S 11/15/2020 01:16:56'!
PASSED!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:17:31'!
test12
	|anAccount anDetailedSummary aPortfolio|
	
	anAccount := ReceptiveAccount named: 'Name'.
	aPortfolio := Portfolio named: 'portfolio'.
	aPortfolio add: anAccount.
	Withdraw register: 100 on: anAccount.
	anDetailedSummary := DetailedAccountSummary of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de portfolio' with: ' Cuenta de Name' with: '  Extraccion de 100'with: ' Balance = -100' with: 'Balance = -100') equals: anDetailedSummary summary.! !

!testRun: #DetailedAccountSummaryTest #test12 stamp: 'D S 11/15/2020 01:17:34'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test12 stamp: 'D S 11/15/2020 01:17:34'!
FAILURE!
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:17:53' prior: 50908137!
addWithdraw: aTransaction
	|initialSpace|
	initialSpace := String new.
	identation timesRepeat: [initialSpace := initialSpace, ' '].
	summary add: (initialSpace, 'Extraccion de ', aTransaction value asString).! !

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 01:17:57'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02 stamp: 'D S 11/15/2020 01:17:57'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test03 stamp: 'D S 11/15/2020 01:17:57'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test04 stamp: 'D S 11/15/2020 01:17:57'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test05 stamp: 'D S 11/15/2020 01:17:57'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test06 stamp: 'D S 11/15/2020 01:17:57'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test07 stamp: 'D S 11/15/2020 01:17:57'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test08 stamp: 'D S 11/15/2020 01:17:57'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test09 stamp: 'D S 11/15/2020 01:17:57'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test10 stamp: 'D S 11/15/2020 01:17:57'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test11 stamp: 'D S 11/15/2020 01:17:57'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test12 stamp: 'D S 11/15/2020 01:17:57'!
PASSED!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:18:58' prior: 50909110!
test12
	|anAccount anAccount2 anDetailedSummary aPortfolio|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anAccount2 := ReceptiveAccount named: 'OtherName'.
	aPortfolio := Portfolio named: 'portfolio'.
	aPortfolio add: anAccount.
	Transference from: anAccount2 to: anAccount amount: 100. 
	anDetailedSummary := DetailedAccountSummary of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de portfolio' with: ' Cuenta de Name' with: '  Entrada por transferencia de 100'with: ' Balance = 100' with: 'Balance = 100') equals: anDetailedSummary summary.! !
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:19:08'!
test13
	|anAccount anAccount2 anDetailedSummary aPortfolio|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anAccount2 := ReceptiveAccount named: 'OtherName'.
	aPortfolio := Portfolio named: 'portfolio'.
	aPortfolio add: anAccount.
	Transference from: anAccount2 to: anAccount amount: 100. 
	anDetailedSummary := DetailedAccountSummary of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de portfolio' with: ' Cuenta de Name' with: '  Entrada por transferencia de 100'with: ' Balance = 100' with: 'Balance = 100') equals: anDetailedSummary summary.! !
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:17:31' prior: 50909178!
test12
	|anAccount anDetailedSummary aPortfolio|
	
	anAccount := ReceptiveAccount named: 'Name'.
	aPortfolio := Portfolio named: 'portfolio'.
	aPortfolio add: anAccount.
	Withdraw register: 100 on: anAccount.
	anDetailedSummary := DetailedAccountSummary of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de portfolio' with: ' Cuenta de Name' with: '  Extraccion de 100'with: ' Balance = -100' with: 'Balance = -100') equals: anDetailedSummary summary.! !

!testRun: #DetailedAccountSummaryTest #test13 stamp: 'D S 11/15/2020 01:19:16'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test13 stamp: 'D S 11/15/2020 01:19:16'!
FAILURE!
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:19:40' prior: 50908310!
addDepositEnd: aTransaction
	|initialSpace|
	initialSpace := String new.
	identation timesRepeat: [initialSpace := initialSpace, ' '].
	summary add: (initialSpace,'Entrada por transferencia de ', aTransaction value asString).! !

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 01:19:43'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02 stamp: 'D S 11/15/2020 01:19:43'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test03 stamp: 'D S 11/15/2020 01:19:43'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test04 stamp: 'D S 11/15/2020 01:19:43'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test05 stamp: 'D S 11/15/2020 01:19:43'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test06 stamp: 'D S 11/15/2020 01:19:43'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test07 stamp: 'D S 11/15/2020 01:19:43'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test08 stamp: 'D S 11/15/2020 01:19:43'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test09 stamp: 'D S 11/15/2020 01:19:43'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test10 stamp: 'D S 11/15/2020 01:19:43'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test11 stamp: 'D S 11/15/2020 01:19:43'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test12 stamp: 'D S 11/15/2020 01:19:43'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test13 stamp: 'D S 11/15/2020 01:19:43'!
PASSED!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:19:51'!
test14
	|anAccount anAccount2 anDetailedSummary aPortfolio|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anAccount2 := ReceptiveAccount named: 'OtherName'.
	aPortfolio := Portfolio named: 'portfolio'.
	aPortfolio add: anAccount.
	Transference from: anAccount to: anAccount2 amount: 100. 
	anDetailedSummary := DetailedAccountSummary of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de portfolio' with: ' Cuenta de Name' with: '  Entrada por transferencia de 100'with: ' Balance = 100' with: 'Balance = 100') equals: anDetailedSummary summary.! !
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:20:15' prior: 50909245!
addDepositEnd: aTransaction
	|initialSpace|
	initialSpace := String new.
	identation timesRepeat: [initialSpace := initialSpace, ' '].
	summary add: (initialSpace,'Salida por transferencia de ', aTransaction value asString).! !
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:19:40' prior: 50909314!
addDepositEnd: aTransaction
	|initialSpace|
	initialSpace := String new.
	identation timesRepeat: [initialSpace := initialSpace, ' '].
	summary add: (initialSpace,'Entrada por transferencia de ', aTransaction value asString).! !
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:20:29' prior: 50909325!
addDepositEnd: aTransaction
	|initialSpace|
	initialSpace := String new.
	identation timesRepeat: [initialSpace := initialSpace, ' '].
	summary add: (initialSpace,'Salida por transferencia de ', aTransaction value asString).! !
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:19:40' prior: 50909336!
addDepositEnd: aTransaction
	|initialSpace|
	initialSpace := String new.
	identation timesRepeat: [initialSpace := initialSpace, ' '].
	summary add: (initialSpace,'Entrada por transferencia de ', aTransaction value asString).! !
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:20:42' prior: 50908525!
addWithdrawEnd: aTransaction
	|initialSpace|
	initialSpace := String new.
	identation timesRepeat: [initialSpace := initialSpace, ' '].
	summary add: (initialSpace,'Salida por transferencia de ', aTransaction value asString).! !

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 01:20:48'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02 stamp: 'D S 11/15/2020 01:20:48'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test03 stamp: 'D S 11/15/2020 01:20:48'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test04 stamp: 'D S 11/15/2020 01:20:48'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test05 stamp: 'D S 11/15/2020 01:20:48'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test06 stamp: 'D S 11/15/2020 01:20:48'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test07 stamp: 'D S 11/15/2020 01:20:48'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test08 stamp: 'D S 11/15/2020 01:20:48'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test09 stamp: 'D S 11/15/2020 01:20:48'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test10 stamp: 'D S 11/15/2020 01:20:48'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test11 stamp: 'D S 11/15/2020 01:20:48'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test12 stamp: 'D S 11/15/2020 01:20:48'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test13 stamp: 'D S 11/15/2020 01:20:48'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test14 stamp: 'D S 11/15/2020 01:20:48'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test14 stamp: 'D S 11/15/2020 01:20:48'!
FAILURE!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:20:56' prior: 50909292!
test14
	|anAccount anAccount2 anDetailedSummary aPortfolio|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anAccount2 := ReceptiveAccount named: 'OtherName'.
	aPortfolio := Portfolio named: 'portfolio'.
	aPortfolio add: anAccount.
	Transference from: anAccount to: anAccount2 amount: 100. 
	anDetailedSummary := DetailedAccountSummary of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de portfolio' with: ' Cuenta de Name' with: '  Salida por transferencia de 100'with: ' Balance = 100' with: 'Balance = 100') equals: anDetailedSummary summary.! !

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 01:21:00'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02 stamp: 'D S 11/15/2020 01:21:00'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test03 stamp: 'D S 11/15/2020 01:21:00'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test04 stamp: 'D S 11/15/2020 01:21:00'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test05 stamp: 'D S 11/15/2020 01:21:00'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test06 stamp: 'D S 11/15/2020 01:21:00'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test07 stamp: 'D S 11/15/2020 01:21:00'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test08 stamp: 'D S 11/15/2020 01:21:00'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test09 stamp: 'D S 11/15/2020 01:21:00'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test10 stamp: 'D S 11/15/2020 01:21:00'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test11 stamp: 'D S 11/15/2020 01:21:00'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test12 stamp: 'D S 11/15/2020 01:21:00'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test13 stamp: 'D S 11/15/2020 01:21:00'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test14 stamp: 'D S 11/15/2020 01:21:00'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test14 stamp: 'D S 11/15/2020 01:21:00'!
FAILURE!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:21:07' prior: 50909411!
test14
	|anAccount anAccount2 anDetailedSummary aPortfolio|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anAccount2 := ReceptiveAccount named: 'OtherName'.
	aPortfolio := Portfolio named: 'portfolio'.
	aPortfolio add: anAccount.
	Transference from: anAccount to: anAccount2 amount: 100. 
	anDetailedSummary := DetailedAccountSummary of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de portfolio' with: ' Cuenta de Name' with: '  Salida por transferencia de 100'with: ' Balance = -100' with: 'Balance = -100') equals: anDetailedSummary summary.! !

!testRun: #DetailedAccountSummaryTest #test14 stamp: 'D S 11/15/2020 01:21:10'!
PASSED!
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:21:56' prior: 50908609!
addPortfolio: anPortfolio
	
	summary add: ('Portfolio de Name').
	identation := identation +1.! !

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 01:21:59'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02 stamp: 'D S 11/15/2020 01:21:59'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test03 stamp: 'D S 11/15/2020 01:21:59'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test04 stamp: 'D S 11/15/2020 01:21:59'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test05 stamp: 'D S 11/15/2020 01:21:59'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test06 stamp: 'D S 11/15/2020 01:21:59'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test07 stamp: 'D S 11/15/2020 01:21:59'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test08 stamp: 'D S 11/15/2020 01:21:59'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test09 stamp: 'D S 11/15/2020 01:21:59'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test10 stamp: 'D S 11/15/2020 01:21:59'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test11 stamp: 'D S 11/15/2020 01:21:59'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test12 stamp: 'D S 11/15/2020 01:21:59'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test13 stamp: 'D S 11/15/2020 01:21:59'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test14 stamp: 'D S 11/15/2020 01:21:59'!
FAILURE!
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:22:18' prior: 50909499!
addPortfolio: anPortfolio
	
	summary add: ('Portfolio de portfolio').
	identation := identation +1.! !

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 01:22:23'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02 stamp: 'D S 11/15/2020 01:22:23'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test03 stamp: 'D S 11/15/2020 01:22:23'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test04 stamp: 'D S 11/15/2020 01:22:23'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test05 stamp: 'D S 11/15/2020 01:22:23'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test06 stamp: 'D S 11/15/2020 01:22:23'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test07 stamp: 'D S 11/15/2020 01:22:23'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test08 stamp: 'D S 11/15/2020 01:22:23'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test09 stamp: 'D S 11/15/2020 01:22:23'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test10 stamp: 'D S 11/15/2020 01:22:23'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test11 stamp: 'D S 11/15/2020 01:22:23'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test12 stamp: 'D S 11/15/2020 01:22:23'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test13 stamp: 'D S 11/15/2020 01:22:23'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test14 stamp: 'D S 11/15/2020 01:22:23'!
PASSED!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:22:37'!
test15
	|anAccount anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'OtherName'.
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: 'Balance = 0') equals: anDetailedSummary summary.! !
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:22:42' prior: 50909591!
test15
	|anAccount anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'OtherName'.
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de OtherName' with: 'Balance = 0') equals: anDetailedSummary summary.! !

!testRun: #DetailedAccountSummaryTest #test15 stamp: 'D S 11/15/2020 01:22:44'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test15 stamp: 'D S 11/15/2020 01:22:44'!
FAILURE!
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:23:00' prior: 50908822!
addAccount: anAccount
	|initialSpace|
	
	initialSpace := String new.
	identation timesRepeat: [initialSpace:= initialSpace, ' '].
	summary add: (initialSpace, 'Cuenta de ', anAccount name).
	identation := identation + 1! !

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 01:23:07'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02 stamp: 'D S 11/15/2020 01:23:07'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test03 stamp: 'D S 11/15/2020 01:23:07'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test04 stamp: 'D S 11/15/2020 01:23:07'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test05 stamp: 'D S 11/15/2020 01:23:07'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test06 stamp: 'D S 11/15/2020 01:23:07'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test07 stamp: 'D S 11/15/2020 01:23:07'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test08 stamp: 'D S 11/15/2020 01:23:07'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test09 stamp: 'D S 11/15/2020 01:23:07'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test10 stamp: 'D S 11/15/2020 01:23:07'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test11 stamp: 'D S 11/15/2020 01:23:07'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test12 stamp: 'D S 11/15/2020 01:23:07'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test13 stamp: 'D S 11/15/2020 01:23:07'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test14 stamp: 'D S 11/15/2020 01:23:07'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test15 stamp: 'D S 11/15/2020 01:23:07'!
PASSED!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:23:26' prior: 50908940!
test10
	|anAccount anDetailedSummary aPortfolio|
	
	anAccount := ReceptiveAccount named: 'Name'.
	aPortfolio := Portfolio named: 'OtroPortfolio'.
	aPortfolio add: anAccount.
	anDetailedSummary := DetailedAccountSummary of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de OtroPortfolio' with: ' Cuenta de Name' with: ' Balance = 0' with: 'Balance = 0') equals: anDetailedSummary summary.! !
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:23:31'!
test16
	|anAccount anDetailedSummary aPortfolio|
	
	anAccount := ReceptiveAccount named: 'Name'.
	aPortfolio := Portfolio named: 'OtroPortfolio'.
	aPortfolio add: anAccount.
	anDetailedSummary := DetailedAccountSummary of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de OtroPortfolio' with: ' Cuenta de Name' with: ' Balance = 0' with: 'Balance = 0') equals: anDetailedSummary summary.! !
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:03:25' prior: 50909674!
test10
	|anAccount anDetailedSummary aPortfolio|
	
	anAccount := ReceptiveAccount named: 'Name'.
	aPortfolio := Portfolio named: 'portfolio'.
	aPortfolio add: anAccount.
	anDetailedSummary := DetailedAccountSummary of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de portfolio' with: ' Cuenta de Name' with: ' Balance = 0' with: 'Balance = 0') equals: anDetailedSummary summary.! !

!testRun: #DetailedAccountSummaryTest #test16 stamp: 'D S 11/15/2020 01:23:44'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test16 stamp: 'D S 11/15/2020 01:23:44'!
FAILURE!
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:23:57' prior: 50909545!
addPortfolio: anPortfolio
	
	summary add: ('Portfolio de ', anPortfolio name).
	identation := identation +1.! !
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:24:43'!
test17
	|anDetailedSummary aPortfolio aPortfolio2|
	
	aPortfolio2 := Portfolio named: 'OtroPortfolio2'.
	aPortfolio := Portfolio named: 'OtroPortfolio'.
	aPortfolio add: aPortfolio2.
	anDetailedSummary := DetailedAccountSummary of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de OtroPortfolio' with: ' Cuenta de Name' with: ' Balance = 0' with: 'Balance = 0') equals: anDetailedSummary summary.! !
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:24:57' prior: 50909736!
test17
	|anDetailedSummary aPortfolio aPortfolio2|
	
	aPortfolio2 := Portfolio named: 'OtroPortfolio2'.
	aPortfolio := Portfolio named: 'OtroPortfolio'.
	aPortfolio add: aPortfolio2.
	anDetailedSummary := DetailedAccountSummary of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de OtroPortfolio' with: ' Portfolio de OtroPortfolio2' with: ' Balance = 0' with: 'Balance = 0') equals: anDetailedSummary summary.! !

!testRun: #DetailedAccountSummaryTest #test17 stamp: 'D S 11/15/2020 01:25:10'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test17 stamp: 'D S 11/15/2020 01:25:10'!
FAILURE!
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:25:50' prior: 50909729!
addPortfolio: anPortfolio
	|initialSpace|
	initialSpace := String new.
	identation timesRepeat: [initialSpace := initialSpace + ' '].
	summary add: (initialSpace,'Portfolio de ', anPortfolio name).
	identation := identation +1.! !

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 01:25:57'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02 stamp: 'D S 11/15/2020 01:25:57'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test03 stamp: 'D S 11/15/2020 01:25:57'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test04 stamp: 'D S 11/15/2020 01:25:57'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test05 stamp: 'D S 11/15/2020 01:25:57'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test06 stamp: 'D S 11/15/2020 01:25:57'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test07 stamp: 'D S 11/15/2020 01:25:57'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test08 stamp: 'D S 11/15/2020 01:25:57'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test09 stamp: 'D S 11/15/2020 01:25:57'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test10 stamp: 'D S 11/15/2020 01:25:57'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test11 stamp: 'D S 11/15/2020 01:25:57'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test12 stamp: 'D S 11/15/2020 01:25:57'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test13 stamp: 'D S 11/15/2020 01:25:57'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test14 stamp: 'D S 11/15/2020 01:25:57'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test15 stamp: 'D S 11/15/2020 01:25:57'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test16 stamp: 'D S 11/15/2020 01:25:57'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test17 stamp: 'D S 11/15/2020 01:25:57'!
ERROR!

!testRun: #DetailedAccountSummaryTest #test17 stamp: 'D S 11/15/2020 01:25:57'!
ERROR!
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:26:20' prior: 50909776!
addPortfolio: anPortfolio
	|initialSpace|
	initialSpace := String new.
	identation timesRepeat: [initialSpace := initialSpace , ' '].
	summary add: (initialSpace,'Portfolio de ', anPortfolio name).
	identation := identation +1.! !

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 01:26:26'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02 stamp: 'D S 11/15/2020 01:26:26'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test03 stamp: 'D S 11/15/2020 01:26:26'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test04 stamp: 'D S 11/15/2020 01:26:26'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test05 stamp: 'D S 11/15/2020 01:26:26'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test06 stamp: 'D S 11/15/2020 01:26:26'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test07 stamp: 'D S 11/15/2020 01:26:26'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test08 stamp: 'D S 11/15/2020 01:26:26'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test09 stamp: 'D S 11/15/2020 01:26:26'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test10 stamp: 'D S 11/15/2020 01:26:26'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test11 stamp: 'D S 11/15/2020 01:26:26'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test12 stamp: 'D S 11/15/2020 01:26:26'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test13 stamp: 'D S 11/15/2020 01:26:26'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test14 stamp: 'D S 11/15/2020 01:26:26'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test15 stamp: 'D S 11/15/2020 01:26:26'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test16 stamp: 'D S 11/15/2020 01:26:26'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test17 stamp: 'D S 11/15/2020 01:26:26'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test17 stamp: 'D S 11/15/2020 01:26:26'!
FAILURE!
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:27:42' prior: 50908658!
reduceIdentationPortfolio: aPortfolio
	|initialSpace|
	identation := identation - 1.
	initialSpace := String new.
	identation timesRepeat: [initialSpace := initialSpace, ' '].
	summary add: 'Balance = ', aPortfolio balance asString.! !

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 01:27:46'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02 stamp: 'D S 11/15/2020 01:27:46'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test03 stamp: 'D S 11/15/2020 01:27:46'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test04 stamp: 'D S 11/15/2020 01:27:46'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test05 stamp: 'D S 11/15/2020 01:27:46'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test06 stamp: 'D S 11/15/2020 01:27:46'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test07 stamp: 'D S 11/15/2020 01:27:46'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test08 stamp: 'D S 11/15/2020 01:27:46'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test09 stamp: 'D S 11/15/2020 01:27:46'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test10 stamp: 'D S 11/15/2020 01:27:46'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test11 stamp: 'D S 11/15/2020 01:27:46'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test12 stamp: 'D S 11/15/2020 01:27:46'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test13 stamp: 'D S 11/15/2020 01:27:46'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test14 stamp: 'D S 11/15/2020 01:27:46'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test15 stamp: 'D S 11/15/2020 01:27:46'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test16 stamp: 'D S 11/15/2020 01:27:46'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test17 stamp: 'D S 11/15/2020 01:27:46'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test17 stamp: 'D S 11/15/2020 01:27:46'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test17 stamp: 'D S 11/15/2020 01:27:53'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test17 stamp: 'D S 11/15/2020 01:27:53'!
FAILURE!
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:28:25' prior: 50909898!
reduceIdentationPortfolio: aPortfolio
	|initialSpace|
	identation := identation - 1.
	initialSpace := String new.
	identation timesRepeat: [initialSpace := initialSpace, ' '].
	summary add: (initialSpace,'Balance = ', aPortfolio balance asString).! !

!testRun: #DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 01:28:31'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02 stamp: 'D S 11/15/2020 01:28:31'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test03 stamp: 'D S 11/15/2020 01:28:31'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test04 stamp: 'D S 11/15/2020 01:28:31'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test05 stamp: 'D S 11/15/2020 01:28:31'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test06 stamp: 'D S 11/15/2020 01:28:31'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test07 stamp: 'D S 11/15/2020 01:28:31'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test08 stamp: 'D S 11/15/2020 01:28:31'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test09 stamp: 'D S 11/15/2020 01:28:31'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test10 stamp: 'D S 11/15/2020 01:28:31'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test11 stamp: 'D S 11/15/2020 01:28:31'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test12 stamp: 'D S 11/15/2020 01:28:31'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test13 stamp: 'D S 11/15/2020 01:28:31'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test14 stamp: 'D S 11/15/2020 01:28:31'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test15 stamp: 'D S 11/15/2020 01:28:31'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test16 stamp: 'D S 11/15/2020 01:28:31'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test17 stamp: 'D S 11/15/2020 01:28:31'!
PASSED!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:32:57'!
test18
	|anAccount anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (anAccount) equals: anDetailedSummary relatedAccount.! !

!testRun: #DetailedAccountSummaryTest #test18 stamp: 'D S 11/15/2020 01:33:01'!
ERROR!

!testRun: #DetailedAccountSummaryTest #test18 stamp: 'D S 11/15/2020 01:33:01'!
ERROR!
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:33:31' prior: 50907741!
generateDetailedAccountSummaryOf: anAccount

	account := anAccount.
	identation := 0.
	summary := OrderedCollection new.
	anAccount sendMessageToAllTransactionForTheReport: self! !
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:33:55'!
relatedAccount

	^account.
! !

!testRun: #DetailedAccountSummaryTest #test18 stamp: 'D S 11/15/2020 01:34:05'!
PASSED!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:34:46'!
test01anDetailedSummaryOfEmptyAccountGeneratesCorrectly
	|anAccount anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: 'Balance = 0') equals: anDetailedSummary summary.! !

!methodRemoval: DetailedAccountSummaryTest #test01 stamp: 'D S 11/15/2020 01:34:46'!
test01
	|anAccount anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: 'Balance = 0') equals: anDetailedSummary summary.!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:34:54' prior: 50910056!
test01anDetailedSummaryOfEmptyAccountGeneratesCorrectly
	|anAccount anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: 'Balance = 0') equals: anDetailedSummary summary.
	self assert: (anAccount) equals: anDetailedSummary relatedAccount.! !
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:35:00'!
test01DetailedSummaryOfEmptyAccountGeneratesCorrectly
	|anAccount anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: 'Balance = 0') equals: anDetailedSummary summary.
	self assert: (anAccount) equals: anDetailedSummary relatedAccount.! !

!methodRemoval: DetailedAccountSummaryTest #test01anDetailedSummaryOfEmptyAccountGeneratesCorrectly stamp: 'D S 11/15/2020 01:35:00'!
test01anDetailedSummaryOfEmptyAccountGeneratesCorrectly
	|anAccount anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: 'Balance = 0') equals: anDetailedSummary summary.
	self assert: (anAccount) equals: anDetailedSummary relatedAccount.!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:35:24'!
test02SummaryOfAccountWithADepositGeneratesCorrectly
	|anAccount anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	Deposit register: 100 on: anAccount.
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: ' Deposito de 100'with: 'Balance = 100') equals: anDetailedSummary summary.! !

!methodRemoval: DetailedAccountSummaryTest #test02 stamp: 'D S 11/15/2020 01:35:24'!
test02
	|anAccount anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	Deposit register: 100 on: anAccount.
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: ' Deposito de 100'with: 'Balance = 100') equals: anDetailedSummary summary.!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:35:41'!
test03SummaryOfAccountWithAWithdrawGeneratesCorrectly
	|anAccount anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	Deposit register: 100 on: anAccount.
	Deposit register: 200 on: anAccount.
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: ' Deposito de 100' with: ' Deposito de 200'with: 'Balance = 300') equals: anDetailedSummary summary.! !

!methodRemoval: DetailedAccountSummaryTest #test03 stamp: 'D S 11/15/2020 01:35:41'!
test03
	|anAccount anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	Deposit register: 100 on: anAccount.
	Deposit register: 200 on: anAccount.
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: ' Deposito de 100' with: ' Deposito de 200'with: 'Balance = 300') equals: anDetailedSummary summary.!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:36:00'!
test04SummaryOfAccountWithAWithdrawGeneratesCorrectly
	|anAccount anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	Withdraw register: 100 on: anAccount.
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: ' Extraccion de 100'with: 'Balance = -100') equals: anDetailedSummary summary.! !

!methodRemoval: DetailedAccountSummaryTest #test04 stamp: 'D S 11/15/2020 01:36:00'!
test04
	|anAccount anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	Withdraw register: 100 on: anAccount.
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: ' Extraccion de 100'with: 'Balance = -100') equals: anDetailedSummary summary.!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:36:19'!
test03SummaryOfAccountWithTwoDepositGeneratesCorrectly
	|anAccount anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	Deposit register: 100 on: anAccount.
	Deposit register: 200 on: anAccount.
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: ' Deposito de 100' with: ' Deposito de 200'with: 'Balance = 300') equals: anDetailedSummary summary.! !

!methodRemoval: DetailedAccountSummaryTest #test03SummaryOfAccountWithAWithdrawGeneratesCorrectly stamp: 'D S 11/15/2020 01:36:19'!
test03SummaryOfAccountWithAWithdrawGeneratesCorrectly
	|anAccount anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	Deposit register: 100 on: anAccount.
	Deposit register: 200 on: anAccount.
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: ' Deposito de 100' with: ' Deposito de 200'with: 'Balance = 300') equals: anDetailedSummary summary.!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:36:42'!
test05SummaryOfAccountWithTwoWithdrawGeneratesCorrectly
	|anAccount anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	Withdraw register: 100 on: anAccount.
	Withdraw register: 200 on: anAccount.
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: ' Extraccion de 100' with: ' Extraccion de 200' with: 'Balance = -300') equals: anDetailedSummary summary.! !

!methodRemoval: DetailedAccountSummaryTest #test05 stamp: 'D S 11/15/2020 01:36:42'!
test05
	|anAccount anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	Withdraw register: 100 on: anAccount.
	Withdraw register: 200 on: anAccount.
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: ' Extraccion de 100' with: ' Extraccion de 200' with: 'Balance = -300') equals: anDetailedSummary summary.!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:37:19'!
test06SummaryOfAccountWithDepositEndGeneratesCorrectly
	|anAccount anAccount2 anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anAccount2 := ReceptiveAccount named: 'OtroName'.
	Transference from: anAccount2 to: anAccount  amount: 100. 
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: ' Entrada por transferencia de 100' with: 'Balance = 100') equals: anDetailedSummary summary.! !

!methodRemoval: DetailedAccountSummaryTest #test06 stamp: 'D S 11/15/2020 01:37:19'!
test06
	|anAccount anAccount2 anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anAccount2 := ReceptiveAccount named: 'OtroName'.
	Transference from: anAccount2 to: anAccount  amount: 100. 
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: ' Entrada por transferencia de 100' with: 'Balance = 100') equals: anDetailedSummary summary.!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:37:31'!
test07SummaryOfAccountWithTwoDepositEndGeneratesCorrectly
	|anAccount anAccount2 anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anAccount2 := ReceptiveAccount named: 'OtroName'.
	Transference from: anAccount2 to: anAccount  amount: 100.
	Transference from: anAccount2 to: anAccount  amount: 200. 

	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: ' Entrada por transferencia de 100' with: ' Entrada por transferencia de 200' with: 'Balance = 300') equals: anDetailedSummary summary.! !

!methodRemoval: DetailedAccountSummaryTest #test07 stamp: 'D S 11/15/2020 01:37:31'!
test07
	|anAccount anAccount2 anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anAccount2 := ReceptiveAccount named: 'OtroName'.
	Transference from: anAccount2 to: anAccount  amount: 100.
	Transference from: anAccount2 to: anAccount  amount: 200. 

	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: ' Entrada por transferencia de 100' with: ' Entrada por transferencia de 200' with: 'Balance = 300') equals: anDetailedSummary summary.!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:37:52'!
test08SummaryOfAccountWithWithdrawEndGeneratesCorrectly
	|anAccount anAccount2 anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anAccount2 := ReceptiveAccount named: 'OtroName'.
	Transference from: anAccount to: anAccount2  amount: 100. 
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: ' Salida por transferencia de 100' with: 'Balance = -100') equals: anDetailedSummary summary.! !

!methodRemoval: DetailedAccountSummaryTest #test08 stamp: 'D S 11/15/2020 01:37:52'!
test08
	|anAccount anAccount2 anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anAccount2 := ReceptiveAccount named: 'OtroName'.
	Transference from: anAccount to: anAccount2  amount: 100. 
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: ' Salida por transferencia de 100' with: 'Balance = -100') equals: anDetailedSummary summary.!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:38:07'!
test09SummaryOfAccountWithTwoWithdrawEndGeneratesCorrectly
	|anAccount anAccount2 anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anAccount2 := ReceptiveAccount named: 'OtroName'.
	Transference from: anAccount to: anAccount2  amount: 100. 
	Transference from: anAccount to: anAccount2  amount: 200. 	
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: ' Salida por transferencia de 100' with: ' Salida por transferencia de 200' with: 'Balance = -300') equals: anDetailedSummary summary.! !

!methodRemoval: DetailedAccountSummaryTest #test09 stamp: 'D S 11/15/2020 01:38:07'!
test09
	|anAccount anAccount2 anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anAccount2 := ReceptiveAccount named: 'OtroName'.
	Transference from: anAccount to: anAccount2  amount: 100. 
	Transference from: anAccount to: anAccount2  amount: 200. 	
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de Name' with: ' Salida por transferencia de 100' with: ' Salida por transferencia de 200' with: 'Balance = -300') equals: anDetailedSummary summary.!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:38:33'!
test10SummaryOfPortfolioWithAccountGeneratesCorrectly
	|anAccount anDetailedSummary aPortfolio|
	
	anAccount := ReceptiveAccount named: 'Name'.
	aPortfolio := Portfolio named: 'portfolio'.
	aPortfolio add: anAccount.
	anDetailedSummary := DetailedAccountSummary of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de portfolio' with: ' Cuenta de Name' with: ' Balance = 0' with: 'Balance = 0') equals: anDetailedSummary summary.! !

!methodRemoval: DetailedAccountSummaryTest #test10 stamp: 'D S 11/15/2020 01:38:33'!
test10
	|anAccount anDetailedSummary aPortfolio|
	
	anAccount := ReceptiveAccount named: 'Name'.
	aPortfolio := Portfolio named: 'portfolio'.
	aPortfolio add: anAccount.
	anDetailedSummary := DetailedAccountSummary of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de portfolio' with: ' Cuenta de Name' with: ' Balance = 0' with: 'Balance = 0') equals: anDetailedSummary summary.!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:38:57' prior: 50909089!
test11
	|anAccount anDetailedSummary aPortfolio|
	
	anAccount := ReceptiveAccount named: 'Name'.
	aPortfolio := Portfolio named: 'portfolio'.
	aPortfolio add: anAccount.
	Deposit register: 100 on: anAccount.
	Withdraw register: 100 on: anAccount.
	anDetailedSummary := DetailedAccountSummary of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de portfolio' with: ' Cuenta de Name' with: '  Deposito de 100'with: ' Balance = 100' with: 'Balance = 100') equals: anDetailedSummary summary.! !
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:39:18' prior: 50910466!
test11
	|anAccount anAccount2 anDetailedSummary aPortfolio|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anAccount2 := ReceptiveAccount named: 'OtherName'.
	aPortfolio := Portfolio named: 'portfolio'.
	aPortfolio add: anAccount.
	Deposit register: 100 on: anAccount.
	Withdraw register: 100 on: anAccount.
	anDetailedSummary := DetailedAccountSummary of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de portfolio' with: ' Cuenta de Name' with: '  Deposito de 100'with: ' Balance = 100' with: 'Balance = 100') equals: anDetailedSummary summary.! !
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:39:32' prior: 50910486!
test11
	|anAccount anAccount2 anDetailedSummary aPortfolio|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anAccount2 := ReceptiveAccount named: 'OtherName'.
	aPortfolio := Portfolio named: 'portfolio'.
	aPortfolio add: anAccount.
	Deposit register: 100 on: anAccount.
	Withdraw register: 100 on: anAccount.
	Transference from: anAccount to: anAccount2 amount: 100. 

	anDetailedSummary := DetailedAccountSummary of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de portfolio' with: ' Cuenta de Name' with: '  Deposito de 100'with: ' Balance = 100' with: 'Balance = 100') equals: anDetailedSummary summary.! !
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:41:21'!
test11SummaryIdentationOfAccountInsidePortfolioGeneratesCorrectly
	|anAccount anAccount2 anDetailedSummary aPortfolio|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anAccount2 := ReceptiveAccount named: 'OtherName'.
	aPortfolio := Portfolio named: 'portfolio'.
	aPortfolio add: anAccount.
	Deposit register: 100 on: anAccount.
	Withdraw register: 100 on: anAccount.
	Transference from: anAccount to: anAccount2 amount: 100. 

	anDetailedSummary := DetailedAccountSummary of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de portfolio' with: ' Cuenta de Name' with: '  Deposito de 100'with: ' Balance = 100' with: 'Balance = 100') equals: anDetailedSummary summary.! !

!methodRemoval: DetailedAccountSummaryTest #test11 stamp: 'D S 11/15/2020 01:41:21'!
test11
	|anAccount anAccount2 anDetailedSummary aPortfolio|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anAccount2 := ReceptiveAccount named: 'OtherName'.
	aPortfolio := Portfolio named: 'portfolio'.
	aPortfolio add: anAccount.
	Deposit register: 100 on: anAccount.
	Withdraw register: 100 on: anAccount.
	Transference from: anAccount to: anAccount2 amount: 100. 

	anDetailedSummary := DetailedAccountSummary of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de portfolio' with: ' Cuenta de Name' with: '  Deposito de 100'with: ' Balance = 100' with: 'Balance = 100') equals: anDetailedSummary summary.!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:45:07' prior: 50910531!
test11SummaryIdentationOfAccountInsidePortfolioGeneratesCorrectly
	|anAccount anAccount2 anDetailedSummary aPortfolio expectedResult|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anAccount2 := ReceptiveAccount named: 'OtherName'.
	aPortfolio := Portfolio named: 'portfolio'.
	aPortfolio add: anAccount.
	Deposit register: 100 on: anAccount.
	Withdraw register: 100 on: anAccount.
	Transference from: anAccount to: anAccount2 amount: 100. 
	Transference from: anAccount2 to: anAccount amount: 100. 
	anDetailedSummary := DetailedAccountSummary of: aPortfolio.
	expectedResult := OrderedCollection new.
	expectedResult addAll: #('Portfolio de portfolio' ' Cuenta de Name' '  Deposito de 100' '  Extraccion de 100' '  Entrada por transferencia de 100'  '  Salida por transferencia de 100'  ' Balance = 100'  'Balance = 100').
	
	self assert: (expectedResult) equals: anDetailedSummary summary.! !

!testRun: #DetailedAccountSummaryTest #test11SummaryIdentationOfAccountInsidePortfolioGeneratesCorrectly stamp: 'D S 11/15/2020 01:45:10'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test11SummaryIdentationOfAccountInsidePortfolioGeneratesCorrectly stamp: 'D S 11/15/2020 01:45:10'!
FAILURE!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:46:03' prior: 50910579!
test11SummaryIdentationOfAccountInsidePortfolioGeneratesCorrectly
	|anAccount anAccount2 anDetailedSummary aPortfolio expectedResult|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anAccount2 := ReceptiveAccount named: 'OtherName'.
	aPortfolio := Portfolio named: 'portfolio'.
	aPortfolio add: anAccount.
	Deposit register: 100 on: anAccount.
	Withdraw register: 100 on: anAccount.
	Transference from: anAccount to: anAccount2 amount: 100. 
	Transference from: anAccount2 to: anAccount amount: 100. 
	anDetailedSummary := DetailedAccountSummary of: aPortfolio.
	expectedResult := OrderedCollection new.
	expectedResult addAll: #('Portfolio de portfolio' ' Cuenta de Name' '  Deposito de 100' '  Extraccion de 100' '  Entrada por transferencia de 100'  '  Salida por transferencia de 100'  ' Balance = 0'  'Balance = 0').
	
	self assert: (expectedResult) equals: anDetailedSummary summary.! !

!testRun: #DetailedAccountSummaryTest #test11SummaryIdentationOfAccountInsidePortfolioGeneratesCorrectly stamp: 'D S 11/15/2020 01:46:06'!
FAILURE!

!testRun: #DetailedAccountSummaryTest #test11SummaryIdentationOfAccountInsidePortfolioGeneratesCorrectly stamp: 'D S 11/15/2020 01:46:06'!
FAILURE!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:46:31' prior: 50910620!
test11SummaryIdentationOfAccountInsidePortfolioGeneratesCorrectly
	|anAccount anAccount2 anDetailedSummary aPortfolio expectedResult|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anAccount2 := ReceptiveAccount named: 'OtherName'.
	aPortfolio := Portfolio named: 'portfolio'.
	aPortfolio add: anAccount.
	Deposit register: 100 on: anAccount.
	Withdraw register: 100 on: anAccount.
	Transference from: anAccount2 to: anAccount amount: 100. 
	Transference from: anAccount to: anAccount2 amount: 100. 
	anDetailedSummary := DetailedAccountSummary of: aPortfolio.
	expectedResult := OrderedCollection new.
	expectedResult addAll: #('Portfolio de portfolio' ' Cuenta de Name' '  Deposito de 100' '  Extraccion de 100' '  Entrada por transferencia de 100'  '  Salida por transferencia de 100'  ' Balance = 0'  'Balance = 0').
	
	self assert: (expectedResult) equals: anDetailedSummary summary.! !

!testRun: #DetailedAccountSummaryTest #test11SummaryIdentationOfAccountInsidePortfolioGeneratesCorrectly stamp: 'D S 11/15/2020 01:46:35'!
PASSED!

!methodRemoval: DetailedAccountSummaryTest #test12 stamp: 'D S 11/15/2020 01:46:39'!
test12
	|anAccount anDetailedSummary aPortfolio|
	
	anAccount := ReceptiveAccount named: 'Name'.
	aPortfolio := Portfolio named: 'portfolio'.
	aPortfolio add: anAccount.
	Withdraw register: 100 on: anAccount.
	anDetailedSummary := DetailedAccountSummary of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de portfolio' with: ' Cuenta de Name' with: '  Extraccion de 100'with: ' Balance = -100' with: 'Balance = -100') equals: anDetailedSummary summary.!

!methodRemoval: DetailedAccountSummaryTest #test13 stamp: 'D S 11/15/2020 01:46:41'!
test13
	|anAccount anAccount2 anDetailedSummary aPortfolio|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anAccount2 := ReceptiveAccount named: 'OtherName'.
	aPortfolio := Portfolio named: 'portfolio'.
	aPortfolio add: anAccount.
	Transference from: anAccount2 to: anAccount amount: 100. 
	anDetailedSummary := DetailedAccountSummary of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de portfolio' with: ' Cuenta de Name' with: '  Entrada por transferencia de 100'with: ' Balance = 100' with: 'Balance = 100') equals: anDetailedSummary summary.!

!methodRemoval: DetailedAccountSummaryTest #test14 stamp: 'D S 11/15/2020 01:46:44'!
test14
	|anAccount anAccount2 anDetailedSummary aPortfolio|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anAccount2 := ReceptiveAccount named: 'OtherName'.
	aPortfolio := Portfolio named: 'portfolio'.
	aPortfolio add: anAccount.
	Transference from: anAccount to: anAccount2 amount: 100. 
	anDetailedSummary := DetailedAccountSummary of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de portfolio' with: ' Cuenta de Name' with: '  Salida por transferencia de 100'with: ' Balance = -100' with: 'Balance = -100') equals: anDetailedSummary summary.!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:47:01'!
test15SummaryNameOfAccountIsCorrect
	|anAccount anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'OtherName'.
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de OtherName' with: 'Balance = 0') equals: anDetailedSummary summary.! !

!methodRemoval: DetailedAccountSummaryTest #test15 stamp: 'D S 11/15/2020 01:47:01'!
test15
	|anAccount anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'OtherName'.
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de OtherName' with: 'Balance = 0') equals: anDetailedSummary summary.!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:47:13'!
test16SummaryNameOfPortfolioIsCorrect
	|anAccount anDetailedSummary aPortfolio|
	
	anAccount := ReceptiveAccount named: 'Name'.
	aPortfolio := Portfolio named: 'OtroPortfolio'.
	aPortfolio add: anAccount.
	anDetailedSummary := DetailedAccountSummary of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de OtroPortfolio' with: ' Cuenta de Name' with: ' Balance = 0' with: 'Balance = 0') equals: anDetailedSummary summary.! !

!methodRemoval: DetailedAccountSummaryTest #test16 stamp: 'D S 11/15/2020 01:47:13'!
test16
	|anAccount anDetailedSummary aPortfolio|
	
	anAccount := ReceptiveAccount named: 'Name'.
	aPortfolio := Portfolio named: 'OtroPortfolio'.
	aPortfolio add: anAccount.
	anDetailedSummary := DetailedAccountSummary of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de OtroPortfolio' with: ' Cuenta de Name' with: ' Balance = 0' with: 'Balance = 0') equals: anDetailedSummary summary.!

!methodRemoval: DetailedAccountSummaryTest #test16SummaryNameOfPortfolioIsCorrect stamp: 'D S 11/15/2020 01:47:21'!
test16SummaryNameOfPortfolioIsCorrect
	|anAccount anDetailedSummary aPortfolio|
	
	anAccount := ReceptiveAccount named: 'Name'.
	aPortfolio := Portfolio named: 'OtroPortfolio'.
	aPortfolio add: anAccount.
	anDetailedSummary := DetailedAccountSummary of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de OtroPortfolio' with: ' Cuenta de Name' with: ' Balance = 0' with: 'Balance = 0') equals: anDetailedSummary summary.!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:47:28'!
test12SummaryNameOfAccountIsCorrect
	|anAccount anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'OtherName'.
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de OtherName' with: 'Balance = 0') equals: anDetailedSummary summary.! !

!methodRemoval: DetailedAccountSummaryTest #test15SummaryNameOfAccountIsCorrect stamp: 'D S 11/15/2020 01:47:28'!
test15SummaryNameOfAccountIsCorrect
	|anAccount anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'OtherName'.
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (OrderedCollection with: 'Cuenta de OtherName' with: 'Balance = 0') equals: anDetailedSummary summary.!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:47:40'!
test13SummaryNameOfPortfolioIsCorrect
	|anDetailedSummary aPortfolio aPortfolio2|
	
	aPortfolio2 := Portfolio named: 'OtroPortfolio2'.
	aPortfolio := Portfolio named: 'OtroPortfolio'.
	aPortfolio add: aPortfolio2.
	anDetailedSummary := DetailedAccountSummary of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de OtroPortfolio' with: ' Portfolio de OtroPortfolio2' with: ' Balance = 0' with: 'Balance = 0') equals: anDetailedSummary summary.! !

!methodRemoval: DetailedAccountSummaryTest #test17 stamp: 'D S 11/15/2020 01:47:40'!
test17
	|anDetailedSummary aPortfolio aPortfolio2|
	
	aPortfolio2 := Portfolio named: 'OtroPortfolio2'.
	aPortfolio := Portfolio named: 'OtroPortfolio'.
	aPortfolio add: aPortfolio2.
	anDetailedSummary := DetailedAccountSummary of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de OtroPortfolio' with: ' Portfolio de OtroPortfolio2' with: ' Balance = 0' with: 'Balance = 0') equals: anDetailedSummary summary.!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:47:54'!
test14SummaryRelatedAccountIsCorrect
	|anAccount anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (anAccount) equals: anDetailedSummary relatedAccount.! !

!methodRemoval: DetailedAccountSummaryTest #test18 stamp: 'D S 11/15/2020 01:47:54'!
test18
	|anAccount anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (anAccount) equals: anDetailedSummary relatedAccount.!

!testRun: #DetailedAccountSummaryTest #test01DetailedSummaryOfEmptyAccountGeneratesCorrectly stamp: 'D S 11/15/2020 01:47:58'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02SummaryOfAccountWithADepositGeneratesCorrectly stamp: 'D S 11/15/2020 01:47:58'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test03SummaryOfAccountWithTwoDepositGeneratesCorrectly stamp: 'D S 11/15/2020 01:47:58'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test04SummaryOfAccountWithAWithdrawGeneratesCorrectly stamp: 'D S 11/15/2020 01:47:58'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test05SummaryOfAccountWithTwoWithdrawGeneratesCorrectly stamp: 'D S 11/15/2020 01:47:58'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test06SummaryOfAccountWithDepositEndGeneratesCorrectly stamp: 'D S 11/15/2020 01:47:58'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test07SummaryOfAccountWithTwoDepositEndGeneratesCorrectly stamp: 'D S 11/15/2020 01:47:58'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test08SummaryOfAccountWithWithdrawEndGeneratesCorrectly stamp: 'D S 11/15/2020 01:47:58'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test09SummaryOfAccountWithTwoWithdrawEndGeneratesCorrectly stamp: 'D S 11/15/2020 01:47:58'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test10SummaryOfPortfolioWithAccountGeneratesCorrectly stamp: 'D S 11/15/2020 01:47:58'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test11SummaryIdentationOfAccountInsidePortfolioGeneratesCorrectly stamp: 'D S 11/15/2020 01:47:58'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test12SummaryNameOfAccountIsCorrect stamp: 'D S 11/15/2020 01:47:58'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test13SummaryNameOfPortfolioIsCorrect stamp: 'D S 11/15/2020 01:47:58'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test14SummaryRelatedAccountIsCorrect stamp: 'D S 11/15/2020 01:47:58'!
PASSED!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:49:40'!
test14SummaryRelatedAccountCannotBeEmpty
	|anAccount anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (anAccount) equals: anDetailedSummary relatedAccount.! !

!methodRemoval: DetailedAccountSummaryTest #test14SummaryRelatedAccountIsCorrect stamp: 'D S 11/15/2020 01:49:40'!
test14SummaryRelatedAccountIsCorrect
	|anAccount anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (anAccount) equals: anDetailedSummary relatedAccount.!
!DetailedAccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 01:49:45'!
test15SummaryRelatedAccountCannotBeEmpty
	|anAccount anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (anAccount) equals: anDetailedSummary relatedAccount.! !

!methodRemoval: DetailedAccountSummaryTest #test15SummaryRelatedAccountCannotBeEmpty stamp: 'D S 11/15/2020 01:50:16'!
test15SummaryRelatedAccountCannotBeEmpty
	|anAccount anDetailedSummary|
	
	anAccount := ReceptiveAccount named: 'Name'.
	anDetailedSummary := DetailedAccountSummary of: anAccount.
	
	self assert: (anAccount) equals: anDetailedSummary relatedAccount.!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'D S 11/15/2020 01:56:11'!
test09

	| account |
	
	account := ReceptiveAccount named: 'aName'.
		
	self assert: 'aName' equals: account name.
! !

!testRun: #ReceptiveAccountTest #test09 stamp: 'D S 11/15/2020 01:56:15'!
PASSED!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/15/2020 01:56:34' prior: 50905465!
addName: aName

	name := 'aName'.! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'D S 11/15/2020 01:57:15'!
test08

	| account |
	
	account := ReceptiveAccount named: 'anotherName'.
		
	self assert: 'anotherName' equals: account name.
! !

!testRun: #ReceptiveAccountTest #test08 stamp: 'D S 11/15/2020 01:57:18'!
FAILURE!

!testRun: #ReceptiveAccountTest #test08 stamp: 'D S 11/15/2020 01:57:18'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/15/2020 01:57:34' prior: 50911023!
addName: aName

	name := aName.! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'D S 11/15/2020 01:57:57'!
test10

	| account |
	
	account := ReceptiveAccount named: ''.
		
	self assert: 'ReceptiveAccount' equals: account name.
! !

!testRun: #ReceptiveAccountTest #test10 stamp: 'D S 11/15/2020 01:58:07'!
FAILURE!

!testRun: #ReceptiveAccountTest #test10 stamp: 'D S 11/15/2020 01:58:07'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/15/2020 01:58:40' prior: 50911040!
addName: aName
	aName = '' ifTrue:[name := 'ReceptiveAccount']
	ifFalse: [name := aName.]! !

!testRun: #ReceptiveAccountTest #test10 stamp: 'D S 11/15/2020 01:58:48'!
PASSED!

!methodRemoval: ReceptiveAccountTest #test08 stamp: 'D S 11/15/2020 01:58:53'!
test08

	| account |
	
	account := ReceptiveAccount named: 'anotherName'.
		
	self assert: 'anotherName' equals: account name.
!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'D S 11/15/2020 01:59:02'!
test08AddNameCorrectly

	| account |
	
	account := ReceptiveAccount named: 'aName'.
		
	self assert: 'aName' equals: account name.
! !

!methodRemoval: ReceptiveAccountTest #test09 stamp: 'D S 11/15/2020 01:59:02'!
test09

	| account |
	
	account := ReceptiveAccount named: 'aName'.
		
	self assert: 'aName' equals: account name.
!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'D S 11/15/2020 01:59:18'!
test09AddNameReceptiveAccountIfNameIsEmpty

	| account |
	
	account := ReceptiveAccount named: ''.
		
	self assert: 'ReceptiveAccount' equals: account name.
! !

!methodRemoval: ReceptiveAccountTest #test10 stamp: 'D S 11/15/2020 01:59:18'!
test10

	| account |
	
	account := ReceptiveAccount named: ''.
		
	self assert: 'ReceptiveAccount' equals: account name.
!
!PortfolioTest methodsFor: 'tests' stamp: 'D S 11/15/2020 02:00:20'!
test16
	| aPortfolio |
	
	aPortfolio := Portfolio named: 'unNombre'.
	
	self assert: 'unNombre' equals: aPortfolio name! !

!testRun: #PortfolioTest #test16 stamp: 'D S 11/15/2020 02:00:23'!
PASSED!
!Portfolio methodsFor: 'accounts management' stamp: 'D S 11/15/2020 02:00:44' prior: 50905559!
addName: aName

	named := 'unNombre'. ! !
!PortfolioTest methodsFor: 'tests' stamp: 'D S 11/15/2020 02:01:08'!
test17
	| aPortfolio |
	
	aPortfolio := Portfolio named: 'otroNombre'.
	
	self assert: 'otroNombre' equals: aPortfolio name! !

!testRun: #PortfolioTest #test17 stamp: 'D S 11/15/2020 02:01:10'!
FAILURE!

!testRun: #PortfolioTest #test17 stamp: 'D S 11/15/2020 02:01:10'!
FAILURE!
!Portfolio methodsFor: 'accounts management' stamp: 'D S 11/15/2020 02:01:22' prior: 50911109!
addName: aName

	named := aName. ! !
!PortfolioTest methodsFor: 'tests' stamp: 'D S 11/15/2020 02:01:49'!
test18
	| aPortfolio |
	
	aPortfolio := Portfolio named: ''.
	
	self assert: 'portfolio' equals: aPortfolio name! !
!Portfolio methodsFor: 'accounts management' stamp: 'D S 11/15/2020 02:02:06' prior: 50911125!
addName: aName
	aName = '' ifTrue:[named := 'ReceptiveAccount']
	ifFalse: [named := aName.]! !

!classDefinition: #Portfolio category: 'Portfolio2-Ejercicio' stamp: 'D S 11/15/2020 02:02:24'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 02:02:24' prior: 50911136!
addName: aName
	aName = '' ifTrue:[name := 'ReceptiveAccount']
	ifFalse: [name := aName.]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 02:02:24' prior: 50906353 overrides: 16882612!
name
	
	^name! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'D S 11/15/2020 02:02:33'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'D S 11/15/2020 02:02:33'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'D S 11/15/2020 02:02:33'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'D S 11/15/2020 02:02:33'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'D S 11/15/2020 02:02:33'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'D S 11/15/2020 02:02:33'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'D S 11/15/2020 02:02:33'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'D S 11/15/2020 02:02:33'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'D S 11/15/2020 02:02:33'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'D S 11/15/2020 02:02:33'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'D S 11/15/2020 02:02:33'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'D S 11/15/2020 02:02:33'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'D S 11/15/2020 02:02:33'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'D S 11/15/2020 02:02:33'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'D S 11/15/2020 02:02:33'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'D S 11/15/2020 02:02:33'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'D S 11/15/2020 02:02:33'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'D S 11/15/2020 02:02:33'!
FAILURE!

!testRun: #PortfolioTest #test18 stamp: 'D S 11/15/2020 02:02:33'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'D S 11/15/2020 02:02:43'!
test16AddNameCorrectly
	| aPortfolio |
	
	aPortfolio := Portfolio named: 'unNombre'.
	
	self assert: 'unNombre' equals: aPortfolio name! !

!methodRemoval: PortfolioTest #test16 stamp: 'D S 11/15/2020 02:02:49'!
test16
	| aPortfolio |
	
	aPortfolio := Portfolio named: 'unNombre'.
	
	self assert: 'unNombre' equals: aPortfolio name!

!methodRemoval: PortfolioTest #test17 stamp: 'D S 11/15/2020 02:02:52'!
test17
	| aPortfolio |
	
	aPortfolio := Portfolio named: 'otroNombre'.
	
	self assert: 'otroNombre' equals: aPortfolio name!
!PortfolioTest methodsFor: 'tests' stamp: 'D S 11/15/2020 02:03:05'!
test17AddNamePortfolioIfNameIsEmpty
	| aPortfolio |
	
	aPortfolio := Portfolio named: ''.
	
	self assert: 'portfolio' equals: aPortfolio name! !

!methodRemoval: PortfolioTest #test18 stamp: 'D S 11/15/2020 02:03:05'!
test18
	| aPortfolio |
	
	aPortfolio := Portfolio named: ''.
	
	self assert: 'portfolio' equals: aPortfolio name!

!testRun: #PortfolioTest #test17AddNamePortfolioIfNameIsEmpty stamp: 'D S 11/15/2020 02:03:09'!
FAILURE!

!testRun: #PortfolioTest #test17AddNamePortfolioIfNameIsEmpty stamp: 'D S 11/15/2020 02:03:09'!
FAILURE!
!Portfolio methodsFor: 'accounts management' stamp: 'D S 11/15/2020 02:03:20' prior: 50911150!
addName: aName
	aName = '' ifTrue:[name := 'portfolio']
	ifFalse: [name := aName.]! !

!testRun: #AccountSummaryTest #test01SummaryOfAccountWithoutTransactionsGenerateCorrectly stamp: 'D S 11/15/2020 02:03:23'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryShowsCorrectBalance stamp: 'D S 11/15/2020 02:03:23'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryShowsDepositAndItsValue stamp: 'D S 11/15/2020 02:03:23'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryDoesntShowInexistentTransactions stamp: 'D S 11/15/2020 02:03:23'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryShowsWithdrawAndItsValue stamp: 'D S 11/15/2020 02:03:23'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryShowsDepositEndOfTransferenceAndItsValue stamp: 'D S 11/15/2020 02:03:23'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryShowsWithdrawEndOfTransferenceAndItsValue stamp: 'D S 11/15/2020 02:03:23'!
PASSED!

!testRun: #AccountSummaryTest #test08SummaryShowsMoreThanOneTransaction stamp: 'D S 11/15/2020 02:03:23'!
PASSED!

!testRun: #AccountSummaryTest #test01SummaryOfAccountWithoutTransactionsGenerateCorrectly stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryShowsCorrectBalance stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryShowsDepositAndItsValue stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryDoesntShowInexistentTransactions stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryShowsWithdrawAndItsValue stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryShowsDepositEndOfTransferenceAndItsValue stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryShowsWithdrawEndOfTransferenceAndItsValue stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #AccountSummaryTest #test08SummaryShowsMoreThanOneTransaction stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test01DetailedSummaryOfEmptyAccountGeneratesCorrectly stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02SummaryOfAccountWithADepositGeneratesCorrectly stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test03SummaryOfAccountWithTwoDepositGeneratesCorrectly stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test04SummaryOfAccountWithAWithdrawGeneratesCorrectly stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test05SummaryOfAccountWithTwoWithdrawGeneratesCorrectly stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test06SummaryOfAccountWithDepositEndGeneratesCorrectly stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test07SummaryOfAccountWithTwoDepositEndGeneratesCorrectly stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test08SummaryOfAccountWithWithdrawEndGeneratesCorrectly stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test09SummaryOfAccountWithTwoWithdrawEndGeneratesCorrectly stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test10SummaryOfPortfolioWithAccountGeneratesCorrectly stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test11SummaryIdentationOfAccountInsidePortfolioGeneratesCorrectly stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test12SummaryNameOfAccountIsCorrect stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test13SummaryNameOfPortfolioIsCorrect stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test14SummaryRelatedAccountCannotBeEmpty stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #PortfolioTest #test16AddNameCorrectly stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #PortfolioTest #test17AddNamePortfolioIfNameIsEmpty stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AddNameCorrectly stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test09AddNameReceptiveAccountIfNameIsEmpty stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetFromAnEmptyAccountReturns0 stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForAnAccountWithATransferenceReturnsCorrectly stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForAnAccountWithTwoTransferenceReturnsCorrectly stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #TransferNetTest #test04WithdrawEndAffectsNegatively stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetOfAPortfolioReturnsCorrectly stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetOfAnEmptyPortfolioReturnsCorrectly stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetOfAPortfolioWith2AccountsReturnsCorrectly stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #TransferenceTest #test01TransactionInitializeCorrectly stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #TransferenceTest #test02TransactionAffectsCorrectly stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #TransferenceTest #test03EachEndOfTransferenceAppearsCorrectlyInAccounts stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #TransferenceTest #test04FromOneTransferenceEndCanReachToTheAnother stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #TransferenceTest #test05ValueFromEachEndAreTheSame stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #TransferenceTest #test06RaiseErrorWhenAmountToTransferIsNEGATIVE stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #TransferenceTest #test07RaiseErrorWhenAccountToTransferIsEqualToAccountToExtract stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #TransferenceTest #test08RaiseErrorWhenAmountToTransferIsZERO stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #TreeStructureTest #test01TreeStructureOfAnAccountGeneratesCorrectly stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfEmptyPortfolioGeneratesCorrectly stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #TreeStructureTest #test03RelatedAccountOfTheStructureIsCorrect stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #TreeStructureTest #test04IdentationGeneratesCorrectly stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #TreeStructureTest #test05TreeStructureOfPortfolioWithMoreThanOneAccountGeneratesCorrectly stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

!testRun: #TreeStructureTest #test06TreeStructureOfAPortfolioWithOtherInsideEmptyGeneratesCorrectly stamp: 'D S 11/15/2020 02:03:28'!
PASSED!

----SNAPSHOT----(15 November 2020 02:03:38) CuisUniversity-4383.image priorSource: 18358368!

----QUIT----(15 November 2020 02:03:39) CuisUniversity-4383.image priorSource: 18557371!

----STARTUP---- (15 November 2020 12:37:38) as /home/dn-01/Escritorio/Ingenieria en Software I/CuisLimpio/CuisUniversity-4383.image!

!Report methodsFor: 'no messages' stamp: 'D S 11/15/2020 12:38:11'!
addAccount

	^self class subclassResponsibility.! !
!Report methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:38:26'!
addPortfolio: aPortfolio

	^self class subclassResponsibility.! !
!Report methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:38:59'!
addAccount: anAccount

	^self class subclassResponsibility.! !

!methodRemoval: Report #addAccount stamp: 'D S 11/15/2020 12:39:02'!
addAccount

	^self class subclassResponsibility.!
!Report methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:39:53'!
addDeposit: aDeposit

	^self class subclassResponsibility.! !
!Report methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:40:04'!
addWithdraw: aWithdraw

	^self class subclassResponsibility.! !
!Report methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:40:08'!
addWithdrawEnd: aWithdrawEnd

	^self class subclassResponsibility.! !
!Report methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:40:15'!
addDepositEnd: aDepositEnd

	^self class subclassResponsibility.! !
!Report methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:40:32'!
summary

	^self class subclassResponsibility.! !
!Report methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:40:35'!
relatedAccount

	^self class subclassResponsibility.! !
!Report methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:40:56'!
reduceIdentationAccount

	^self class subclassResponsibility.! !
!Report methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:41:02'!
reduceIdentationPortfolio

	^self class subclassResponsibility.! !

!TransferNet methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:42:31' overrides: 50911616!
summary

	^transferNet.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:42:31' prior: 50904483 overrides: 50911611!
addDepositEnd: aTransaction

	transferNet := transferNet + aTransaction summary! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:42:31' prior: 50904471 overrides: 50911606!
addWithdrawEnd: aTransaction

	transferNet := transferNet - aTransaction summary! !

!methodRemoval: TransferNet #value stamp: 'D S 11/15/2020 12:42:31'!
value

	^transferNet.!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:42:53' prior: 50911641 overrides: 50911611!
addDepositEnd: aTransaction

	transferNet := transferNet + aTransaction value! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:42:58' prior: 50911648 overrides: 50911606!
addWithdrawEnd: aTransaction

	transferNet := transferNet - aTransaction value! !

!testRun: #AccountSummaryTest #test01SummaryOfAccountWithoutTransactionsGenerateCorrectly stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryShowsCorrectBalance stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryShowsDepositAndItsValue stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryDoesntShowInexistentTransactions stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryShowsWithdrawAndItsValue stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryShowsDepositEndOfTransferenceAndItsValue stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryShowsWithdrawEndOfTransferenceAndItsValue stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #AccountSummaryTest #test08SummaryShowsMoreThanOneTransaction stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test01DetailedSummaryOfEmptyAccountGeneratesCorrectly stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02SummaryOfAccountWithADepositGeneratesCorrectly stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test03SummaryOfAccountWithTwoDepositGeneratesCorrectly stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test04SummaryOfAccountWithAWithdrawGeneratesCorrectly stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test05SummaryOfAccountWithTwoWithdrawGeneratesCorrectly stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test06SummaryOfAccountWithDepositEndGeneratesCorrectly stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test07SummaryOfAccountWithTwoDepositEndGeneratesCorrectly stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test08SummaryOfAccountWithWithdrawEndGeneratesCorrectly stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test09SummaryOfAccountWithTwoWithdrawEndGeneratesCorrectly stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test10SummaryOfPortfolioWithAccountGeneratesCorrectly stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test11SummaryIdentationOfAccountInsidePortfolioGeneratesCorrectly stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test12SummaryNameOfAccountIsCorrect stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test13SummaryNameOfPortfolioIsCorrect stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test14SummaryRelatedAccountCannotBeEmpty stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #PortfolioTest #test16AddNameCorrectly stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #PortfolioTest #test17AddNamePortfolioIfNameIsEmpty stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AddNameCorrectly stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test09AddNameReceptiveAccountIfNameIsEmpty stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetFromAnEmptyAccountReturns0 stamp: 'D S 11/15/2020 12:43:28'!
FAILURE!

!testRun: #TransferNetTest #test02TransferNetForAnAccountWithATransferenceReturnsCorrectly stamp: 'D S 11/15/2020 12:43:28'!
FAILURE!

!testRun: #TransferNetTest #test03TransferNetForAnAccountWithTwoTransferenceReturnsCorrectly stamp: 'D S 11/15/2020 12:43:28'!
FAILURE!

!testRun: #TransferNetTest #test04WithdrawEndAffectsNegatively stamp: 'D S 11/15/2020 12:43:28'!
FAILURE!

!testRun: #TransferNetTest #test05TransferNetOfAPortfolioReturnsCorrectly stamp: 'D S 11/15/2020 12:43:28'!
FAILURE!

!testRun: #TransferNetTest #test06TransferNetOfAnEmptyPortfolioReturnsCorrectly stamp: 'D S 11/15/2020 12:43:28'!
FAILURE!

!testRun: #TransferNetTest #test07TransferNetOfAPortfolioWith2AccountsReturnsCorrectly stamp: 'D S 11/15/2020 12:43:28'!
FAILURE!

!testRun: #TransferenceTest #test01TransactionInitializeCorrectly stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #TransferenceTest #test02TransactionAffectsCorrectly stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #TransferenceTest #test03EachEndOfTransferenceAppearsCorrectlyInAccounts stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #TransferenceTest #test04FromOneTransferenceEndCanReachToTheAnother stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #TransferenceTest #test05ValueFromEachEndAreTheSame stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #TransferenceTest #test06RaiseErrorWhenAmountToTransferIsNEGATIVE stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #TransferenceTest #test07RaiseErrorWhenAccountToTransferIsEqualToAccountToExtract stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #TransferenceTest #test08RaiseErrorWhenAmountToTransferIsZERO stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #TreeStructureTest #test01TreeStructureOfAnAccountGeneratesCorrectly stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfEmptyPortfolioGeneratesCorrectly stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #TreeStructureTest #test03RelatedAccountOfTheStructureIsCorrect stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #TreeStructureTest #test04IdentationGeneratesCorrectly stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #TreeStructureTest #test05TreeStructureOfPortfolioWithMoreThanOneAccountGeneratesCorrectly stamp: 'D S 11/15/2020 12:43:28'!
PASSED!

!testRun: #TreeStructureTest #test06TreeStructureOfAPortfolioWithOtherInsideEmptyGeneratesCorrectly stamp: 'D S 11/15/2020 12:43:28'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:43:36' prior: 50904832!
test01TransferNetFromAnEmptyAccountReturns0
	|anAccount aTransferNet|
	
	anAccount:= ReceptiveAccount new.
	aTransferNet := TransferNet of: anAccount.
	
	self assert: (aTransferNet summary) equals: 0.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:43:42' prior: 50904849!
test02TransferNetForAnAccountWithATransferenceReturnsCorrectly
	|anAccountTransferNet anAccount anAccount2|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Transference from: anAccount2 to: anAccount amount: 100.
	anAccountTransferNet := TransferNet of: anAccount.

	
	self assert: (anAccountTransferNet summary) equals: 100! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:43:48' prior: 50904886!
test03TransferNetForAnAccountWithTwoTransferenceReturnsCorrectly
	|anAccountTransferNet anAccount anAccount2|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Transference from: anAccount2 to: anAccount amount: 150.
	Transference from: anAccount2 to: anAccount amount: 100.

	anAccountTransferNet := TransferNet of: anAccount.

	
	self assert: (anAccountTransferNet summary) equals: 250! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:43:52' prior: 50904916!
test04WithdrawEndAffectsNegatively
	|anAccountTransferNet anAccount anAccount2|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Transference from: anAccount2 to: anAccount amount: 150.
	Transference from: anAccount to: anAccount2 amount: 100.

	anAccountTransferNet := TransferNet of: anAccount.

	
	self assert: (anAccountTransferNet summary) equals: 50! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:43:58' prior: 50904945!
test05TransferNetOfAPortfolioReturnsCorrectly
	|anAccountTransferNet anAccount anAccount2 aPortfolio|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	aPortfolio := Portfolio new.
	Transference from: anAccount2 to: anAccount amount: 150.
	Transference from: anAccount to: anAccount2 amount: 100.
	aPortfolio add: anAccount.
	anAccountTransferNet := TransferNet of: aPortfolio.

	
	self assert: (anAccountTransferNet summary) equals: 50! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:44:03' prior: 50904978!
test06TransferNetOfAnEmptyPortfolioReturnsCorrectly
	|anAccountTransferNet aPortfolio|
	
	aPortfolio := Portfolio new.
	anAccountTransferNet := TransferNet of: aPortfolio.
	
	self assert: (anAccountTransferNet summary) equals: 0! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:44:08' prior: 50904996!
test07TransferNetOfAPortfolioWith2AccountsReturnsCorrectly
	|anAccountTransferNet anAccount anAccount2 aPortfolio|
	
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	aPortfolio := Portfolio new.
	Transference from: anAccount2 to: anAccount amount: 150.
	Transference from: anAccount to: anAccount2 amount: 100.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	anAccountTransferNet := TransferNet of: aPortfolio.

	self assert: 0 equals: (anAccountTransferNet summary)! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:49:28'!
generateReportOfAccount: anAccount

	account := anAccount.
	identation := 0.
	treeStructure := OrderedCollection new.
	anAccount sendMessageToAllTransactionForTheReport: self.! !
!TreeStructure class methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:49:28' prior: 50905397!
of: anAccount

	^self new generateReportOfAccount: anAccount! !

!methodRemoval: TreeStructure #generateTreeStructureOfAccount: stamp: 'D S 11/15/2020 12:49:28'!
generateTreeStructureOfAccount: anAccount

	account := anAccount.
	identation := 0.
	treeStructure := OrderedCollection new.
	anAccount sendMessageToAllTransactionForTheReport: self.!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:49:48'!
generateReportOfAccount: anAccount

	transferNet := 0.
	account := anAccount.
	account sendMessageToAllTransactionForTheReport: self! !
!TransferNet class methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:49:48' prior: 50904143!
of: anAccount

	^self new generateReportOfAccount: anAccount! !

!methodRemoval: TransferNet #calculateTransferNet: stamp: 'D S 11/15/2020 12:49:48'!
calculateTransferNet: anAccount

	transferNet := 0.
	account := anAccount.
	account sendMessageToAllTransactionForTheReport: self!
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:50:11'!
generateReportOfAccount: anAccount

	account := anAccount.
	identation := 0.
	summary := OrderedCollection new.
	anAccount sendMessageToAllTransactionForTheReport: self! !
!DetailedAccountSummary class methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:50:13' prior: 50907592!
of: anAccount

	^self new generateReportOfAccount: anAccount.! !

!methodRemoval: DetailedAccountSummary #generateDetailedAccountSummaryOf: stamp: 'D S 11/15/2020 12:50:13'!
generateDetailedAccountSummaryOf: anAccount

	account := anAccount.
	identation := 0.
	summary := OrderedCollection new.
	anAccount sendMessageToAllTransactionForTheReport: self!
!AccountSummary methodsFor: 'generateSummary' stamp: 'D S 11/15/2020 12:50:26'!
generateReportOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.

	anAccount sendMessageToAllTransactionForTheReport: self.
	summary add: 'Balance = ', (account balance asString)! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:50:26' prior: 50902984!
of: anAccount

	^self new generateReportOfAccount: anAccount! !

!methodRemoval: AccountSummary #generateSummaryOfAccount: stamp: 'D S 11/15/2020 12:50:26'!
generateSummaryOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.

	anAccount sendMessageToAllTransactionForTheReport: self.
	summary add: 'Balance = ', (account balance asString)!
!Report methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:50:41'!
generateReportOfAccount: anAccount

	^self class subclassResponsibility.! !

----SNAPSHOT----(15 November 2020 12:50:59) CuisUniversity-4383.image priorSource: 18557465!

!testRun: #AccountSummaryTest #test01SummaryOfAccountWithoutTransactionsGenerateCorrectly stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryShowsCorrectBalance stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryShowsDepositAndItsValue stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryDoesntShowInexistentTransactions stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryShowsWithdrawAndItsValue stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryShowsDepositEndOfTransferenceAndItsValue stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryShowsWithdrawEndOfTransferenceAndItsValue stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #AccountSummaryTest #test08SummaryShowsMoreThanOneTransaction stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test01DetailedSummaryOfEmptyAccountGeneratesCorrectly stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02SummaryOfAccountWithADepositGeneratesCorrectly stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test03SummaryOfAccountWithTwoDepositGeneratesCorrectly stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test04SummaryOfAccountWithAWithdrawGeneratesCorrectly stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test05SummaryOfAccountWithTwoWithdrawGeneratesCorrectly stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test06SummaryOfAccountWithDepositEndGeneratesCorrectly stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test07SummaryOfAccountWithTwoDepositEndGeneratesCorrectly stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test08SummaryOfAccountWithWithdrawEndGeneratesCorrectly stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test09SummaryOfAccountWithTwoWithdrawEndGeneratesCorrectly stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test10SummaryOfPortfolioWithAccountGeneratesCorrectly stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test11SummaryIdentationOfAccountInsidePortfolioGeneratesCorrectly stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test12SummaryNameOfAccountIsCorrect stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test13SummaryNameOfPortfolioIsCorrect stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test14SummaryRelatedAccountCannotBeEmpty stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #PortfolioTest #test16AddNameCorrectly stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #PortfolioTest #test17AddNamePortfolioIfNameIsEmpty stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AddNameCorrectly stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test09AddNameReceptiveAccountIfNameIsEmpty stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetFromAnEmptyAccountReturns0 stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForAnAccountWithATransferenceReturnsCorrectly stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForAnAccountWithTwoTransferenceReturnsCorrectly stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #TransferNetTest #test04WithdrawEndAffectsNegatively stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetOfAPortfolioReturnsCorrectly stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetOfAnEmptyPortfolioReturnsCorrectly stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetOfAPortfolioWith2AccountsReturnsCorrectly stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #TransferenceTest #test01TransactionInitializeCorrectly stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #TransferenceTest #test02TransactionAffectsCorrectly stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #TransferenceTest #test03EachEndOfTransferenceAppearsCorrectlyInAccounts stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #TransferenceTest #test04FromOneTransferenceEndCanReachToTheAnother stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #TransferenceTest #test05ValueFromEachEndAreTheSame stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #TransferenceTest #test06RaiseErrorWhenAmountToTransferIsNEGATIVE stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #TransferenceTest #test07RaiseErrorWhenAccountToTransferIsEqualToAccountToExtract stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #TransferenceTest #test08RaiseErrorWhenAmountToTransferIsZERO stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #TreeStructureTest #test01TreeStructureOfAnAccountGeneratesCorrectly stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfEmptyPortfolioGeneratesCorrectly stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #TreeStructureTest #test03RelatedAccountOfTheStructureIsCorrect stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #TreeStructureTest #test04IdentationGeneratesCorrectly stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #TreeStructureTest #test05TreeStructureOfPortfolioWithMoreThanOneAccountGeneratesCorrectly stamp: 'D S 11/15/2020 12:52:31'!
PASSED!

!testRun: #TreeStructureTest #test06TreeStructureOfAPortfolioWithOtherInsideEmptyGeneratesCorrectly stamp: 'D S 11/15/2020 12:52:31'!
PASSED!
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:54:49'!
executeActionsAfterProcessingAccountsInPortfolio: aPortfolio
	|initialSpace|
	identation := identation - 1.
	initialSpace := String new.
	identation timesRepeat: [initialSpace := initialSpace, ' '].
	summary add: (initialSpace,'Balance = ', aPortfolio balance asString).! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:54:49'!
executeActionsAfterProcessingAccountsInPortfolio: aPortfolio

! !
!AccountSummary methodsFor: 'accessing' stamp: 'D S 11/15/2020 12:54:49'!
executeActionsAfterProcessingAccountsInPortfolio: anPortfolio
! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:54:49'!
executeActionsAfterProcessingAccountsInPortfolio: aPortfolio

	identation := identation -1! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:54:49' prior: 50907903!
sendMessageToAllTransactionForTheReport: aReport

	"Sin el punto opcional, solo estaria la linea de accounts do. Buscar manera de sacar reduceIdentation que probablemente este mal"
	aReport addPortfolio: self.
	accounts do: [:anAccount| anAccount sendMessageToAllTransactionForTheReport: aReport].
	aReport executeActionsAfterProcessingAccountsInPortfolio: self.! !

!methodRemoval: DetailedAccountSummary #reduceIdentationPortfolio: stamp: 'D S 11/15/2020 12:54:49'!
reduceIdentationPortfolio: aPortfolio
	|initialSpace|
	identation := identation - 1.
	initialSpace := String new.
	identation timesRepeat: [initialSpace := initialSpace, ' '].
	summary add: (initialSpace,'Balance = ', aPortfolio balance asString).!

!methodRemoval: TransferNet #reduceIdentationPortfolio: stamp: 'D S 11/15/2020 12:54:49'!
reduceIdentationPortfolio: aPortfolio

!

!methodRemoval: AccountSummary #reduceIdentationPortfolio: stamp: 'D S 11/15/2020 12:54:49'!
reduceIdentationPortfolio: anPortfolio
!

!methodRemoval: TreeStructure #reduceIdentationPortfolio: stamp: 'D S 11/15/2020 12:54:49'!
reduceIdentationPortfolio: aPortfolio

	identation := identation -1!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:55:27'!
executeActionsAfterProcessingTransactionsInReceptiveAccount: anAccount
! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:55:27'!
executeActionsAfterProcessingTransactionsInReceptiveAccount: anAccount

	! !
!AccountSummary methodsFor: 'accessing' stamp: 'D S 11/15/2020 12:55:27'!
executeActionsAfterProcessingTransactionsInReceptiveAccount: anAccount
! !
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:55:27'!
executeActionsAfterProcessingTransactionsInReceptiveAccount: anAccount
	|initialSpace|
	
	identation := identation - 1.
	initialSpace := String new.
	identation timesRepeat: [initialSpace:= initialSpace, ' '].
	summary add: (initialSpace,'Balance = ', anAccount balance asString).! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:55:27' prior: 50907917!
sendMessageToAllTransactionForTheReport: aReport

	"Sin el punto opcional, solo estaria la linea de transactions do"
	aReport addAccount: self.
	transactions do: [:aTransaction | aTransaction addToReport: aReport].
	aReport executeActionsAfterProcessingTransactionsInReceptiveAccount: self.! !

!methodRemoval: TransferNet #reduceIdentationReceptiveAccount: stamp: 'D S 11/15/2020 12:55:27'!
reduceIdentationReceptiveAccount: anAccount
!

!methodRemoval: TreeStructure #reduceIdentationReceptiveAccount: stamp: 'D S 11/15/2020 12:55:27'!
reduceIdentationReceptiveAccount: anAccount

	!

!methodRemoval: AccountSummary #reduceIdentationReceptiveAccount: stamp: 'D S 11/15/2020 12:55:27'!
reduceIdentationReceptiveAccount: anAccount
!

!methodRemoval: DetailedAccountSummary #reduceIdentationReceptiveAccount: stamp: 'D S 11/15/2020 12:55:27'!
reduceIdentationReceptiveAccount: anAccount
	|initialSpace|
	
	identation := identation - 1.
	initialSpace := String new.
	identation timesRepeat: [initialSpace:= initialSpace, ' '].
	summary add: (initialSpace,'Balance = ', anAccount balance asString).!
!Report methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:56:07'!
executeActionsAfterProcessingTransactionsInReceptiveAccount

	^self class subclassResponsibility.! !

!methodRemoval: Report #reduceIdentationAccount stamp: 'D S 11/15/2020 12:56:07'!
reduceIdentationAccount

	^self class subclassResponsibility.!
!Report methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:56:26'!
executeActionsAfterProcessingTransactionsInPortfolio

	^self class subclassResponsibility.! !

!methodRemoval: Report #reduceIdentationPortfolio stamp: 'D S 11/15/2020 12:56:26'!
reduceIdentationPortfolio

	^self class subclassResponsibility.!
!Report methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:56:32'!
executeActionsAfterProcessingTransactionsInPortfolio: aPortfolio

	^self class subclassResponsibility.! !

!methodRemoval: Report #executeActionsAfterProcessingTransactionsInPortfolio stamp: 'D S 11/15/2020 12:56:36'!
executeActionsAfterProcessingTransactionsInPortfolio

	^self class subclassResponsibility.!
!Report methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:56:48'!
executeActionsAfterProcessingTransactionsInReceptiveAccount: aReceptiveAccount

	^self class subclassResponsibility.! !

!methodRemoval: Report #executeActionsAfterProcessingTransactionsInReceptiveAccount stamp: 'D S 11/15/2020 12:56:52'!
executeActionsAfterProcessingTransactionsInReceptiveAccount

	^self class subclassResponsibility.!
!Report methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 12:57:00' prior: 50911587!
addAccount: aReceptiveAccount

	^self class subclassResponsibility.! !
!Report methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 13:00:39'!
executeActionsAfterAccountsTransactionsInPortfolio: aPortfolio

	^self class subclassResponsibility.! !

!methodRemoval: Report #executeActionsAfterProcessingTransactionsInPortfolio: stamp: 'D S 11/15/2020 13:00:39'!
executeActionsAfterProcessingTransactionsInPortfolio: aPortfolio

	^self class subclassResponsibility.!
!Report methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 13:00:54'!
executeActionsAfterProcessingAccountsInPortfolio: aPortfolio

	^self class subclassResponsibility.! !

!methodRemoval: Report #executeActionsAfterAccountsTransactionsInPortfolio: stamp: 'D S 11/15/2020 13:00:54'!
executeActionsAfterAccountsTransactionsInPortfolio: aPortfolio

	^self class subclassResponsibility.!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 13:09:36' overrides: 50911616!
summary

	^treeStructure! !
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 13:09:36' prior: 50906720!
test04IdentationGeneratesCorrectly
	|aTreeReport anAccount aPortfolio|
	anAccount := ReceptiveAccount named: 'UnaCuentaVacia'.
	aPortfolio := Portfolio named: 'NoName'.
	aPortfolio add: anAccount.
	aTreeReport := TreeStructure of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de NoName' with: ' Cuenta de UnaCuentaVacia') equals: (aTreeReport summary).! !
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 13:09:36' prior: 50906656!
test01TreeStructureOfAnAccountGeneratesCorrectly
	|aTreeReport anAccount|
	anAccount := ReceptiveAccount named: 'UnaCuentaVacia'.
	aTreeReport := TreeStructure of: anAccount.
	
	self assert: (aTreeReport summary) equals: (OrderedCollection with: 'Cuenta de UnaCuentaVacia').! !
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 13:09:36' prior: 50907127!
test06TreeStructureOfAPortfolioWithOtherInsideEmptyGeneratesCorrectly
	|aTreeReport anAccount anAccount2 anAccount3 aPortfolio aPortfolio2|
	anAccount := ReceptiveAccount named: 'Camila'.
	anAccount2 := ReceptiveAccount named: 'Karen'.
	anAccount3 := ReceptiveAccount named: 'Alguien'.
	aPortfolio := Portfolio named: 'Amigos'.
	aPortfolio2 := Portfolio named: 'Vacio'.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	aPortfolio add: aPortfolio2.
	aPortfolio add: anAccount3.
	aTreeReport := TreeStructure of: aPortfolio.
	
	self assert: (OrderedCollection  with: 'Portfolio de Amigos' with: ' Cuenta de Camila' with: ' Cuenta de Karen' 
	with: ' Portfolio de Vacio' with: ' Cuenta de Alguien') equals: (aTreeReport summary).! !
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 13:09:36' prior: 50906680!
test02TreeStructureOfEmptyPortfolioGeneratesCorrectly
	|aTreeReport aPortfolio|
	aPortfolio := Portfolio named: 'NoName'.
	aTreeReport := TreeStructure of: aPortfolio.
	
	self assert: (OrderedCollection with: 'Portfolio de NoName') equals: (aTreeReport summary).! !
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/15/2020 13:09:36' prior: 50906766!
test05TreeStructureOfPortfolioWithMoreThanOneAccountGeneratesCorrectly
	|aTreeReport anAccount anAccount2 aPortfolio|
	anAccount := ReceptiveAccount named: 'Camila'.
	anAccount2 := ReceptiveAccount named: 'Karen'.
	aPortfolio := Portfolio named: 'Amigos'.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	aTreeReport := TreeStructure of: aPortfolio.
	
	self assert: (OrderedCollection  with: 'Portfolio de Amigos' with: ' Cuenta de Camila' with: ' Cuenta de Karen') equals: (aTreeReport summary).! !

!methodRemoval: TreeStructure #report stamp: 'D S 11/15/2020 13:09:36'!
report

	^treeStructure!

!testRun: #AccountSummaryTest #test01SummaryOfAccountWithoutTransactionsGenerateCorrectly stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryShowsCorrectBalance stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryShowsDepositAndItsValue stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryDoesntShowInexistentTransactions stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryShowsWithdrawAndItsValue stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryShowsDepositEndOfTransferenceAndItsValue stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryShowsWithdrawEndOfTransferenceAndItsValue stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #AccountSummaryTest #test08SummaryShowsMoreThanOneTransaction stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test01DetailedSummaryOfEmptyAccountGeneratesCorrectly stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02SummaryOfAccountWithADepositGeneratesCorrectly stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test03SummaryOfAccountWithTwoDepositGeneratesCorrectly stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test04SummaryOfAccountWithAWithdrawGeneratesCorrectly stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test05SummaryOfAccountWithTwoWithdrawGeneratesCorrectly stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test06SummaryOfAccountWithDepositEndGeneratesCorrectly stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test07SummaryOfAccountWithTwoDepositEndGeneratesCorrectly stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test08SummaryOfAccountWithWithdrawEndGeneratesCorrectly stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test09SummaryOfAccountWithTwoWithdrawEndGeneratesCorrectly stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test10SummaryOfPortfolioWithAccountGeneratesCorrectly stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test11SummaryIdentationOfAccountInsidePortfolioGeneratesCorrectly stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test12SummaryNameOfAccountIsCorrect stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test13SummaryNameOfPortfolioIsCorrect stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test14SummaryRelatedAccountCannotBeEmpty stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #PortfolioTest #test16AddNameCorrectly stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #PortfolioTest #test17AddNamePortfolioIfNameIsEmpty stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AddNameCorrectly stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test09AddNameReceptiveAccountIfNameIsEmpty stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetFromAnEmptyAccountReturns0 stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForAnAccountWithATransferenceReturnsCorrectly stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForAnAccountWithTwoTransferenceReturnsCorrectly stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #TransferNetTest #test04WithdrawEndAffectsNegatively stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetOfAPortfolioReturnsCorrectly stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetOfAnEmptyPortfolioReturnsCorrectly stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetOfAPortfolioWith2AccountsReturnsCorrectly stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #TransferenceTest #test01TransactionInitializeCorrectly stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #TransferenceTest #test02TransactionAffectsCorrectly stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #TransferenceTest #test03EachEndOfTransferenceAppearsCorrectlyInAccounts stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #TransferenceTest #test04FromOneTransferenceEndCanReachToTheAnother stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #TransferenceTest #test05ValueFromEachEndAreTheSame stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #TransferenceTest #test06RaiseErrorWhenAmountToTransferIsNEGATIVE stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #TransferenceTest #test07RaiseErrorWhenAccountToTransferIsEqualToAccountToExtract stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #TransferenceTest #test08RaiseErrorWhenAmountToTransferIsZERO stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #TreeStructureTest #test01TreeStructureOfAnAccountGeneratesCorrectly stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfEmptyPortfolioGeneratesCorrectly stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #TreeStructureTest #test03RelatedAccountOfTheStructureIsCorrect stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #TreeStructureTest #test04IdentationGeneratesCorrectly stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #TreeStructureTest #test05TreeStructureOfPortfolioWithMoreThanOneAccountGeneratesCorrectly stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

!testRun: #TreeStructureTest #test06TreeStructureOfAPortfolioWithOtherInsideEmptyGeneratesCorrectly stamp: 'D S 11/15/2020 13:09:50'!
PASSED!

----QUIT----(15 November 2020 13:33:47) CuisUniversity-4383.image priorSource: 18575627!

----STARTUP---- (15 November 2020 14:11:01) as /home/dn-01/Escritorio/Ingenieria en Software I/CuisLimpio/CuisUniversity-4383.image!


----SNAPSHOT----(15 November 2020 14:30:37) CuisUniversity-4383.image priorSource: 18602569!

!testRun: #AccountSummaryTest #test01SummaryOfAccountWithoutTransactionsGenerateCorrectly stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryShowsCorrectBalance stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryShowsDepositAndItsValue stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryDoesntShowInexistentTransactions stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryShowsWithdrawAndItsValue stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryShowsDepositEndOfTransferenceAndItsValue stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryShowsWithdrawEndOfTransferenceAndItsValue stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #AccountSummaryTest #test08SummaryShowsMoreThanOneTransaction stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test01DetailedSummaryOfEmptyAccountGeneratesCorrectly stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02SummaryOfAccountWithADepositGeneratesCorrectly stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test03SummaryOfAccountWithTwoDepositGeneratesCorrectly stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test04SummaryOfAccountWithAWithdrawGeneratesCorrectly stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test05SummaryOfAccountWithTwoWithdrawGeneratesCorrectly stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test06SummaryOfAccountWithDepositEndGeneratesCorrectly stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test07SummaryOfAccountWithTwoDepositEndGeneratesCorrectly stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test08SummaryOfAccountWithWithdrawEndGeneratesCorrectly stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test09SummaryOfAccountWithTwoWithdrawEndGeneratesCorrectly stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test10SummaryOfPortfolioWithAccountGeneratesCorrectly stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test11SummaryIdentationOfAccountInsidePortfolioGeneratesCorrectly stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test12SummaryNameOfAccountIsCorrect stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test13SummaryNameOfPortfolioIsCorrect stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test14SummaryRelatedAccountCannotBeEmpty stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #PortfolioTest #test16AddNameCorrectly stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #PortfolioTest #test17AddNamePortfolioIfNameIsEmpty stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AddNameCorrectly stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test09AddNameReceptiveAccountIfNameIsEmpty stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetFromAnEmptyAccountReturns0 stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForAnAccountWithATransferenceReturnsCorrectly stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForAnAccountWithTwoTransferenceReturnsCorrectly stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #TransferNetTest #test04WithdrawEndAffectsNegatively stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetOfAPortfolioReturnsCorrectly stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetOfAnEmptyPortfolioReturnsCorrectly stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetOfAPortfolioWith2AccountsReturnsCorrectly stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #TransferenceTest #test01TransactionInitializeCorrectly stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #TransferenceTest #test02TransactionAffectsCorrectly stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #TransferenceTest #test03EachEndOfTransferenceAppearsCorrectlyInAccounts stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #TransferenceTest #test04FromOneTransferenceEndCanReachToTheAnother stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #TransferenceTest #test05ValueFromEachEndAreTheSame stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #TransferenceTest #test06RaiseErrorWhenAmountToTransferIsNEGATIVE stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #TransferenceTest #test07RaiseErrorWhenAccountToTransferIsEqualToAccountToExtract stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #TransferenceTest #test08RaiseErrorWhenAmountToTransferIsZERO stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #TreeStructureTest #test01TreeStructureOfAnAccountGeneratesCorrectly stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfEmptyPortfolioGeneratesCorrectly stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #TreeStructureTest #test03RelatedAccountOfTheStructureIsCorrect stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #TreeStructureTest #test04IdentationGeneratesCorrectly stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #TreeStructureTest #test05TreeStructureOfPortfolioWithMoreThanOneAccountGeneratesCorrectly stamp: 'D S 11/15/2020 14:30:40'!
PASSED!

!testRun: #TreeStructureTest #test06TreeStructureOfAPortfolioWithOtherInsideEmptyGeneratesCorrectly stamp: 'D S 11/15/2020 14:30:40'!
PASSED!
!AccountSummary methodsFor: 'accessing' stamp: 'D S 11/15/2020 14:50:49' prior: 50905974 overrides: 50912590!
addAccount: aReceptiveAccount
! !
!AccountSummary methodsFor: 'generateReport --Private--' stamp: 'D S 11/15/2020 14:51:10' prior: 50904400 overrides: 50911596!
addDeposit: aDeposit

	summary add: 'Deposito de ', aDeposit value asString! !
!AccountSummary methodsFor: 'generateReport --Private--' stamp: 'D S 11/15/2020 14:51:22' prior: 50904388 overrides: 50911611!
addDepositEnd: aDepositEnd
	
	summary add: 'Entrada por transferencia de ', aDepositEnd value asString! !
!AccountSummary methodsFor: 'generateReport --Private--' stamp: 'D S 11/15/2020 14:51:45' prior: 50904435 overrides: 50911601!
addWithdraw: aWithdraw

	summary add: 'Extraccion de ', aWithdraw value asString! !
!AccountSummary methodsFor: 'generateReport --Private--' stamp: 'D S 11/15/2020 14:51:55' prior: 50904417 overrides: 50911606!
addWithdrawEnd: aWithdrawEnd

	summary add: 'Salida por transferencia de ', aWithdrawEnd value asString! !
!AccountSummary methodsFor: 'generateReport --Private--' stamp: 'D S 11/15/2020 14:52:03' prior: 50912486 overrides: 50912576!
executeActionsAfterProcessingTransactionsInReceptiveAccount: aReceptiveAccount
! !
!DetailedAccountSummary methodsFor: 'generateReport --Private--' stamp: 'D S 11/15/2020 14:52:14' prior: 50909621 overrides: 50912590!
addAccount: aReceptiveAccount
	|initialSpace|
	
	initialSpace := String new.
	identation timesRepeat: [initialSpace:= initialSpace, ' '].
	summary add: (initialSpace, 'Cuenta de ', aReceptiveAccount name).
	identation := identation + 1! !
!DetailedAccountSummary methodsFor: 'generateReport --Private--' stamp: 'D S 11/15/2020 14:52:25' prior: 50909045 overrides: 50911596!
addDeposit: aDeposit
	|initialSpace|
	initialSpace := String new.
	identation timesRepeat: [initialSpace := initialSpace, ' '].
	summary add: (initialSpace, 'Deposito de ', aDeposit value asString).! !
!DetailedAccountSummary methodsFor: 'generateReport --Private--' stamp: 'D S 11/15/2020 14:52:36' prior: 50909347 overrides: 50911611!
addDepositEnd: aDepositEnd
	|initialSpace|
	initialSpace := String new.
	identation timesRepeat: [initialSpace := initialSpace, ' '].
	summary add: (initialSpace,'Entrada por transferencia de ', aDepositEnd value asString).! !
!DetailedAccountSummary methodsFor: 'generateReport --Private--' stamp: 'D S 11/15/2020 14:52:47' prior: 50909134 overrides: 50911601!
addWithdraw: aWithdraw
	|initialSpace|
	initialSpace := String new.
	identation timesRepeat: [initialSpace := initialSpace, ' '].
	summary add: (initialSpace, 'Extraccion de ', aWithdraw value asString).! !
!DetailedAccountSummary methodsFor: 'generateReport --Private--' stamp: 'D S 11/15/2020 14:53:01' prior: 50909358 overrides: 50911606!
addWithdrawEnd: aWithdrawEnd
	|initialSpace|
	initialSpace := String new.
	identation timesRepeat: [initialSpace := initialSpace, ' '].
	summary add: (initialSpace,'Salida por transferencia de ', aWithdrawEnd value asString).! !
!DetailedAccountSummary methodsFor: 'generateReport --Private--' stamp: 'D S 11/15/2020 14:53:11' prior: 50912492 overrides: 50912576!
executeActionsAfterProcessingTransactionsInReceptiveAccount: aReceptiveAccount
	|initialSpace|
	
	identation := identation - 1.
	initialSpace := String new.
	identation timesRepeat: [initialSpace:= initialSpace, ' '].
	summary add: (initialSpace,'Balance = ', aReceptiveAccount balance asString).! !
!TransferNet methodsFor: 'generateReport --Private--' stamp: 'D S 11/15/2020 14:53:18' prior: 50912476 overrides: 50912576!
executeActionsAfterProcessingTransactionsInReceptiveAccount: aReceptiveAccount
! !
!TransferNet methodsFor: 'generateReport --Private--' stamp: 'D S 11/15/2020 14:53:33' prior: 50911665 overrides: 50911606!
addWithdrawEnd: aWithdrawEnd

	transferNet := transferNet - aWithdrawEnd value! !
!TransferNet methodsFor: 'generateReport --Private--' stamp: 'D S 11/15/2020 14:53:41' prior: 50904457 overrides: 50911601!
addWithdraw: aWithdraw

! !
!TransferNet methodsFor: 'generateReport --Private--' stamp: 'D S 11/15/2020 14:53:53' prior: 50911658 overrides: 50911611!
addDepositEnd: aDepositEnd

	transferNet := transferNet + aDepositEnd value! !
!TransferNet methodsFor: 'generateReport --Private--' stamp: 'D S 11/15/2020 14:53:58' prior: 50904461 overrides: 50911596!
addDeposit: aDeposit

! !
!TransferNet methodsFor: 'generateReport --Private--' stamp: 'D S 11/15/2020 14:54:05' prior: 50906024 overrides: 50912590!
addAccount: aReceptiveAccount
! !
!TreeStructure methodsFor: 'generateReport --Private--' stamp: 'D S 11/15/2020 14:54:17' prior: 50906393 overrides: 50912590!
addAccount: aReceptiveAccount
	|initialSpace|
	
	initialSpace := String new.
	(identation timesRepeat: [initialSpace := initialSpace, ' ']).
	treeStructure add: (initialSpace , 'Cuenta de ',aReceptiveAccount name).
! !
!TreeStructure methodsFor: 'generateReport --Private--' stamp: 'D S 11/15/2020 14:54:22' prior: 50906570 overrides: 50911596!
addDeposit: aDeposit! !
!TreeStructure methodsFor: 'generateReport --Private--' stamp: 'D S 11/15/2020 14:54:27' prior: 50906574 overrides: 50911611!
addDepositEnd: aDepositEnd! !
!TreeStructure methodsFor: 'generateReport --Private--' stamp: 'D S 11/15/2020 14:54:33' prior: 50906578 overrides: 50911601!
addWithdraw: aWithdraw! !
!TreeStructure methodsFor: 'generateReport --Private--' stamp: 'D S 11/15/2020 14:54:39' prior: 50906582 overrides: 50911606!
addWithdrawEnd: aWithdrawEnd! !
!TreeStructure methodsFor: 'generateReport --Private--' stamp: 'D S 11/15/2020 14:54:46' prior: 50912481 overrides: 50912576!
executeActionsAfterProcessingTransactionsInReceptiveAccount: aReceptiveAccount

	! !

!testRun: #AccountSummaryTest #test01SummaryOfAccountWithoutTransactionsGenerateCorrectly stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryShowsCorrectBalance stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryShowsDepositAndItsValue stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryDoesntShowInexistentTransactions stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryShowsWithdrawAndItsValue stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryShowsDepositEndOfTransferenceAndItsValue stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryShowsWithdrawEndOfTransferenceAndItsValue stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #AccountSummaryTest #test08SummaryShowsMoreThanOneTransaction stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test01DetailedSummaryOfEmptyAccountGeneratesCorrectly stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02SummaryOfAccountWithADepositGeneratesCorrectly stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test03SummaryOfAccountWithTwoDepositGeneratesCorrectly stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test04SummaryOfAccountWithAWithdrawGeneratesCorrectly stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test05SummaryOfAccountWithTwoWithdrawGeneratesCorrectly stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test06SummaryOfAccountWithDepositEndGeneratesCorrectly stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test07SummaryOfAccountWithTwoDepositEndGeneratesCorrectly stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test08SummaryOfAccountWithWithdrawEndGeneratesCorrectly stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test09SummaryOfAccountWithTwoWithdrawEndGeneratesCorrectly stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test10SummaryOfPortfolioWithAccountGeneratesCorrectly stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test11SummaryIdentationOfAccountInsidePortfolioGeneratesCorrectly stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test12SummaryNameOfAccountIsCorrect stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test13SummaryNameOfPortfolioIsCorrect stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test14SummaryRelatedAccountCannotBeEmpty stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #PortfolioTest #test16AddNameCorrectly stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #PortfolioTest #test17AddNamePortfolioIfNameIsEmpty stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AddNameCorrectly stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test09AddNameReceptiveAccountIfNameIsEmpty stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetFromAnEmptyAccountReturns0 stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForAnAccountWithATransferenceReturnsCorrectly stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForAnAccountWithTwoTransferenceReturnsCorrectly stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #TransferNetTest #test04WithdrawEndAffectsNegatively stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetOfAPortfolioReturnsCorrectly stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetOfAnEmptyPortfolioReturnsCorrectly stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetOfAPortfolioWith2AccountsReturnsCorrectly stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #TransferenceTest #test01TransactionInitializeCorrectly stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #TransferenceTest #test02TransactionAffectsCorrectly stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #TransferenceTest #test03EachEndOfTransferenceAppearsCorrectlyInAccounts stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #TransferenceTest #test04FromOneTransferenceEndCanReachToTheAnother stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #TransferenceTest #test05ValueFromEachEndAreTheSame stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #TransferenceTest #test06RaiseErrorWhenAmountToTransferIsNEGATIVE stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #TransferenceTest #test07RaiseErrorWhenAccountToTransferIsEqualToAccountToExtract stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #TransferenceTest #test08RaiseErrorWhenAmountToTransferIsZERO stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #TreeStructureTest #test01TreeStructureOfAnAccountGeneratesCorrectly stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfEmptyPortfolioGeneratesCorrectly stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #TreeStructureTest #test03RelatedAccountOfTheStructureIsCorrect stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #TreeStructureTest #test04IdentationGeneratesCorrectly stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #TreeStructureTest #test05TreeStructureOfPortfolioWithMoreThanOneAccountGeneratesCorrectly stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #TreeStructureTest #test06TreeStructureOfAPortfolioWithOtherInsideEmptyGeneratesCorrectly stamp: 'D S 11/15/2020 14:55:02'!
PASSED!

!testRun: #AccountSummaryTest #test01SummaryOfAccountWithoutTransactionsGenerateCorrectly stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryShowsCorrectBalance stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryShowsDepositAndItsValue stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryDoesntShowInexistentTransactions stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryShowsWithdrawAndItsValue stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryShowsDepositEndOfTransferenceAndItsValue stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryShowsWithdrawEndOfTransferenceAndItsValue stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #AccountSummaryTest #test08SummaryShowsMoreThanOneTransaction stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test01DetailedSummaryOfEmptyAccountGeneratesCorrectly stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02SummaryOfAccountWithADepositGeneratesCorrectly stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test03SummaryOfAccountWithTwoDepositGeneratesCorrectly stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test04SummaryOfAccountWithAWithdrawGeneratesCorrectly stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test05SummaryOfAccountWithTwoWithdrawGeneratesCorrectly stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test06SummaryOfAccountWithDepositEndGeneratesCorrectly stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test07SummaryOfAccountWithTwoDepositEndGeneratesCorrectly stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test08SummaryOfAccountWithWithdrawEndGeneratesCorrectly stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test09SummaryOfAccountWithTwoWithdrawEndGeneratesCorrectly stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test10SummaryOfPortfolioWithAccountGeneratesCorrectly stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test11SummaryIdentationOfAccountInsidePortfolioGeneratesCorrectly stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test12SummaryNameOfAccountIsCorrect stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test13SummaryNameOfPortfolioIsCorrect stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test14SummaryRelatedAccountCannotBeEmpty stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #PortfolioTest #test16AddNameCorrectly stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #PortfolioTest #test17AddNamePortfolioIfNameIsEmpty stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AddNameCorrectly stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test09AddNameReceptiveAccountIfNameIsEmpty stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetFromAnEmptyAccountReturns0 stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForAnAccountWithATransferenceReturnsCorrectly stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForAnAccountWithTwoTransferenceReturnsCorrectly stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #TransferNetTest #test04WithdrawEndAffectsNegatively stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetOfAPortfolioReturnsCorrectly stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetOfAnEmptyPortfolioReturnsCorrectly stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetOfAPortfolioWith2AccountsReturnsCorrectly stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #TransferenceTest #test01TransactionInitializeCorrectly stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #TransferenceTest #test02TransactionAffectsCorrectly stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #TransferenceTest #test03EachEndOfTransferenceAppearsCorrectlyInAccounts stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #TransferenceTest #test04FromOneTransferenceEndCanReachToTheAnother stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #TransferenceTest #test05ValueFromEachEndAreTheSame stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #TransferenceTest #test06RaiseErrorWhenAmountToTransferIsNEGATIVE stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #TransferenceTest #test07RaiseErrorWhenAccountToTransferIsEqualToAccountToExtract stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #TransferenceTest #test08RaiseErrorWhenAmountToTransferIsZERO stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #TreeStructureTest #test01TreeStructureOfAnAccountGeneratesCorrectly stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfEmptyPortfolioGeneratesCorrectly stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #TreeStructureTest #test03RelatedAccountOfTheStructureIsCorrect stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #TreeStructureTest #test04IdentationGeneratesCorrectly stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #TreeStructureTest #test05TreeStructureOfPortfolioWithMoreThanOneAccountGeneratesCorrectly stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

!testRun: #TreeStructureTest #test06TreeStructureOfAPortfolioWithOtherInsideEmptyGeneratesCorrectly stamp: 'D S 11/15/2020 15:06:53'!
PASSED!

----SNAPSHOT----(15 November 2020 15:07:11) CuisUniversity-4383.image priorSource: 18602794!

----QUIT----(15 November 2020 15:41:08) CuisUniversity-4383.image priorSource: 18634506!

----STARTUP---- (16 November 2020 16:40:17) as /home/dn-01/Escritorio/Ingenieria en Software I/CuisLimpio/CuisUniversity-4383.image!

!Portfolio methodsFor: 'accounts management' stamp: 'D S 11/16/2020 16:41:59' prior: 50912437!
sendMessageToAllTransactionForTheReport: aReport

	"Sin el punto opcional, solo estaria la linea de accounts do. "
	aReport addPortfolio: self.
	accounts do: [:anAccount| anAccount sendMessageToAllTransactionForTheReport: aReport].
	aReport executeActionsAfterProcessingAccountsInPortfolio: self.! !
!Portfolio methodsFor: 'report --Private--' stamp: 'D S 11/16/2020 16:45:29'!
sendMessagesToGenerateReport: aReport

	"Sin el punto opcional, solo estaria la linea de accounts do. "
	aReport addPortfolio: self.
	accounts do: [:anAccount| anAccount sendMessageToAllTransactionForTheReport: aReport].
	aReport executeActionsAfterProcessingAccountsInPortfolio: self.! !
!ReceptiveAccount methodsFor: 'report --Private--' stamp: 'D S 11/16/2020 16:45:29'!
sendMessagesToGenerateReport: aReport

	"Sin el punto opcional, solo estaria la linea de transactions do"
	aReport addAccount: self.
	transactions do: [:aTransaction | aTransaction addToReport: aReport].
	aReport executeActionsAfterProcessingTransactionsInReceptiveAccount: self.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'D S 11/16/2020 16:45:29' prior: 50912067 overrides: 50912134!
generateReportOfAccount: anAccount

	transferNet := 0.
	account := anAccount.
	account sendMessagesToGenerateReport: self! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/16/2020 16:45:29' prior: 50912110 overrides: 50912134!
generateReportOfAccount: anAccount

	account := anAccount.
	summary := OrderedCollection new.

	anAccount sendMessagesToGenerateReport: self.
	summary add: 'Balance = ', (account balance asString)! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/16/2020 16:45:29' prior: 50913990!
sendMessageToAllTransactionForTheReport: aReport

	"Sin el punto opcional, solo estaria la linea de accounts do. "
	aReport addPortfolio: self.
	accounts do: [:anAccount| anAccount sendMessagesToGenerateReport: aReport].
	aReport executeActionsAfterProcessingAccountsInPortfolio: self.! !
!DetailedAccountSummary methodsFor: 'as yet unclassified' stamp: 'D S 11/16/2020 16:45:29' prior: 50912087 overrides: 50912134!
generateReportOfAccount: anAccount

	account := anAccount.
	identation := 0.
	summary := OrderedCollection new.
	anAccount sendMessagesToGenerateReport: self! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'D S 11/16/2020 16:45:29' prior: 50912044 overrides: 50912134!
generateReportOfAccount: anAccount

	account := anAccount.
	identation := 0.
	treeStructure := OrderedCollection new.
	anAccount sendMessagesToGenerateReport: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/16/2020 16:45:29' prior: 50914002!
sendMessagesToGenerateReport: aReport

	"Sin el punto opcional, solo estaria la linea de accounts do. "
	aReport addPortfolio: self.
	accounts do: [:anAccount| anAccount sendMessagesToGenerateReport: aReport].
	aReport executeActionsAfterProcessingAccountsInPortfolio: self.! !

!methodRemoval: Portfolio #sendMessageToAllTransactionForTheReport: stamp: 'D S 11/16/2020 16:45:29'!
sendMessageToAllTransactionForTheReport: aReport

	"Sin el punto opcional, solo estaria la linea de accounts do. "
	aReport addPortfolio: self.
	accounts do: [:anAccount| anAccount sendMessagesToGenerateReport: aReport].
	aReport executeActionsAfterProcessingAccountsInPortfolio: self.!

!methodRemoval: ReceptiveAccount #sendMessageToAllTransactionForTheReport: stamp: 'D S 11/16/2020 16:45:29'!
sendMessageToAllTransactionForTheReport: aReport

	"Sin el punto opcional, solo estaria la linea de transactions do"
	aReport addAccount: self.
	transactions do: [:aTransaction | aTransaction addToReport: aReport].
	aReport executeActionsAfterProcessingTransactionsInReceptiveAccount: self.!

!testRun: #AccountSummaryTest #test01SummaryOfAccountWithoutTransactionsGenerateCorrectly stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryShowsCorrectBalance stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryShowsDepositAndItsValue stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryDoesntShowInexistentTransactions stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryShowsWithdrawAndItsValue stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryShowsDepositEndOfTransferenceAndItsValue stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryShowsWithdrawEndOfTransferenceAndItsValue stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #AccountSummaryTest #test08SummaryShowsMoreThanOneTransaction stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test01DetailedSummaryOfEmptyAccountGeneratesCorrectly stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02SummaryOfAccountWithADepositGeneratesCorrectly stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test03SummaryOfAccountWithTwoDepositGeneratesCorrectly stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test04SummaryOfAccountWithAWithdrawGeneratesCorrectly stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test05SummaryOfAccountWithTwoWithdrawGeneratesCorrectly stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test06SummaryOfAccountWithDepositEndGeneratesCorrectly stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test07SummaryOfAccountWithTwoDepositEndGeneratesCorrectly stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test08SummaryOfAccountWithWithdrawEndGeneratesCorrectly stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test09SummaryOfAccountWithTwoWithdrawEndGeneratesCorrectly stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test10SummaryOfPortfolioWithAccountGeneratesCorrectly stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test11SummaryIdentationOfAccountInsidePortfolioGeneratesCorrectly stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test12SummaryNameOfAccountIsCorrect stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test13SummaryNameOfPortfolioIsCorrect stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test14SummaryRelatedAccountCannotBeEmpty stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #PortfolioTest #test16AddNameCorrectly stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #PortfolioTest #test17AddNamePortfolioIfNameIsEmpty stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AddNameCorrectly stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test09AddNameReceptiveAccountIfNameIsEmpty stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetFromAnEmptyAccountReturns0 stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForAnAccountWithATransferenceReturnsCorrectly stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForAnAccountWithTwoTransferenceReturnsCorrectly stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #TransferNetTest #test04WithdrawEndAffectsNegatively stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetOfAPortfolioReturnsCorrectly stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetOfAnEmptyPortfolioReturnsCorrectly stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetOfAPortfolioWith2AccountsReturnsCorrectly stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #TransferenceTest #test01TransactionInitializeCorrectly stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #TransferenceTest #test02TransactionAffectsCorrectly stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #TransferenceTest #test03EachEndOfTransferenceAppearsCorrectlyInAccounts stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #TransferenceTest #test04FromOneTransferenceEndCanReachToTheAnother stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #TransferenceTest #test05ValueFromEachEndAreTheSame stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #TransferenceTest #test06RaiseErrorWhenAmountToTransferIsNEGATIVE stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #TransferenceTest #test07RaiseErrorWhenAccountToTransferIsEqualToAccountToExtract stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #TransferenceTest #test08RaiseErrorWhenAmountToTransferIsZERO stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #TreeStructureTest #test01TreeStructureOfAnAccountGeneratesCorrectly stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfEmptyPortfolioGeneratesCorrectly stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #TreeStructureTest #test03RelatedAccountOfTheStructureIsCorrect stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #TreeStructureTest #test04IdentationGeneratesCorrectly stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #TreeStructureTest #test05TreeStructureOfPortfolioWithMoreThanOneAccountGeneratesCorrectly stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #TreeStructureTest #test06TreeStructureOfAPortfolioWithOtherInsideEmptyGeneratesCorrectly stamp: 'D S 11/16/2020 16:45:32'!
PASSED!

!testRun: #AccountSummaryTest #test01SummaryOfAccountWithoutTransactionsGenerateCorrectly stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryShowsCorrectBalance stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryShowsDepositAndItsValue stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryDoesntShowInexistentTransactions stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryShowsWithdrawAndItsValue stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryShowsDepositEndOfTransferenceAndItsValue stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryShowsWithdrawEndOfTransferenceAndItsValue stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #AccountSummaryTest #test08SummaryShowsMoreThanOneTransaction stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test01DetailedSummaryOfEmptyAccountGeneratesCorrectly stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02SummaryOfAccountWithADepositGeneratesCorrectly stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test03SummaryOfAccountWithTwoDepositGeneratesCorrectly stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test04SummaryOfAccountWithAWithdrawGeneratesCorrectly stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test05SummaryOfAccountWithTwoWithdrawGeneratesCorrectly stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test06SummaryOfAccountWithDepositEndGeneratesCorrectly stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test07SummaryOfAccountWithTwoDepositEndGeneratesCorrectly stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test08SummaryOfAccountWithWithdrawEndGeneratesCorrectly stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test09SummaryOfAccountWithTwoWithdrawEndGeneratesCorrectly stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test10SummaryOfPortfolioWithAccountGeneratesCorrectly stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test11SummaryIdentationOfAccountInsidePortfolioGeneratesCorrectly stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test12SummaryNameOfAccountIsCorrect stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test13SummaryNameOfPortfolioIsCorrect stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test14SummaryRelatedAccountCannotBeEmpty stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #PortfolioTest #test16AddNameCorrectly stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #PortfolioTest #test17AddNamePortfolioIfNameIsEmpty stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AddNameCorrectly stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test09AddNameReceptiveAccountIfNameIsEmpty stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetFromAnEmptyAccountReturns0 stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForAnAccountWithATransferenceReturnsCorrectly stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForAnAccountWithTwoTransferenceReturnsCorrectly stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #TransferNetTest #test04WithdrawEndAffectsNegatively stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetOfAPortfolioReturnsCorrectly stamp: 'D S 11/16/2020 16:47:34'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetOfAnEmptyPortfolioReturnsCorrectly stamp: 'D S 11/16/2020 16:47:35'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetOfAPortfolioWith2AccountsReturnsCorrectly stamp: 'D S 11/16/2020 16:47:35'!
PASSED!

!testRun: #TransferenceTest #test01TransactionInitializeCorrectly stamp: 'D S 11/16/2020 16:47:35'!
PASSED!

!testRun: #TransferenceTest #test02TransactionAffectsCorrectly stamp: 'D S 11/16/2020 16:47:35'!
PASSED!

!testRun: #TransferenceTest #test03EachEndOfTransferenceAppearsCorrectlyInAccounts stamp: 'D S 11/16/2020 16:47:35'!
PASSED!

!testRun: #TransferenceTest #test04FromOneTransferenceEndCanReachToTheAnother stamp: 'D S 11/16/2020 16:47:35'!
PASSED!

!testRun: #TransferenceTest #test05ValueFromEachEndAreTheSame stamp: 'D S 11/16/2020 16:47:35'!
PASSED!

!testRun: #TransferenceTest #test06RaiseErrorWhenAmountToTransferIsNEGATIVE stamp: 'D S 11/16/2020 16:47:35'!
PASSED!

!testRun: #TransferenceTest #test07RaiseErrorWhenAccountToTransferIsEqualToAccountToExtract stamp: 'D S 11/16/2020 16:47:35'!
PASSED!

!testRun: #TransferenceTest #test08RaiseErrorWhenAmountToTransferIsZERO stamp: 'D S 11/16/2020 16:47:35'!
PASSED!

!testRun: #TreeStructureTest #test01TreeStructureOfAnAccountGeneratesCorrectly stamp: 'D S 11/16/2020 16:47:35'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfEmptyPortfolioGeneratesCorrectly stamp: 'D S 11/16/2020 16:47:35'!
PASSED!

!testRun: #TreeStructureTest #test03RelatedAccountOfTheStructureIsCorrect stamp: 'D S 11/16/2020 16:47:35'!
PASSED!

!testRun: #TreeStructureTest #test04IdentationGeneratesCorrectly stamp: 'D S 11/16/2020 16:47:35'!
PASSED!

!testRun: #TreeStructureTest #test05TreeStructureOfPortfolioWithMoreThanOneAccountGeneratesCorrectly stamp: 'D S 11/16/2020 16:47:35'!
PASSED!

!testRun: #TreeStructureTest #test06TreeStructureOfAPortfolioWithOtherInsideEmptyGeneratesCorrectly stamp: 'D S 11/16/2020 16:47:35'!
PASSED!

----QUIT----(16 November 2020 16:48:07) CuisUniversity-4383.image priorSource: 18634600!

----STARTUP---- (16 November 2020 16:48:28) as /home/dn-01/Escritorio/Ingenieria en Software I/CuisLimpio/CuisUniversity-4383.image!

!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/16/2020 16:49:14' prior: 50912693!
test05TreeStructureOfPortfolioWithMoreThanOneAccountGeneratesCorrectly
	|aTreeReport anAccount anAccount2 aPortfolio|
	anAccount := ReceptiveAccount named: 'Name'.
	anAccount2 := ReceptiveAccount named: 'AnotherName'.
	aPortfolio := Portfolio named: 'Amigos'.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	aTreeReport := TreeStructure of: aPortfolio.
	
	self assert: (OrderedCollection  with: 'Portfolio de Amigos' with: ' Cuenta de Name' with: ' Cuenta de AnotherName') equals: (aTreeReport summary).! !
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'D S 11/16/2020 16:49:36' prior: 50912654!
test06TreeStructureOfAPortfolioWithOtherInsideEmptyGeneratesCorrectly
	|aTreeReport anAccount anAccount2 anAccount3 aPortfolio aPortfolio2|
	anAccount := ReceptiveAccount named: 'Name'.
	anAccount2 := ReceptiveAccount named: 'AnotherName'.
	anAccount3 := ReceptiveAccount named: 'Alguien'.
	aPortfolio := Portfolio named: 'Amigos'.
	aPortfolio2 := Portfolio named: 'Vacio'.
	aPortfolio add: anAccount.
	aPortfolio add: anAccount2.
	aPortfolio add: aPortfolio2.
	aPortfolio add: anAccount3.
	aTreeReport := TreeStructure of: aPortfolio.
	
	self assert: (OrderedCollection  with: 'Portfolio de Amigos' with: ' Cuenta de Name' with: ' Cuenta de AnotherName' 
	with: ' Portfolio de Vacio' with: ' Cuenta de Alguien') equals: (aTreeReport summary).! !

!testRun: #AccountSummaryTest #test01SummaryOfAccountWithoutTransactionsGenerateCorrectly stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryShowsCorrectBalance stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryShowsDepositAndItsValue stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryDoesntShowInexistentTransactions stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryShowsWithdrawAndItsValue stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryShowsDepositEndOfTransferenceAndItsValue stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryShowsWithdrawEndOfTransferenceAndItsValue stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #AccountSummaryTest #test08SummaryShowsMoreThanOneTransaction stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test01DetailedSummaryOfEmptyAccountGeneratesCorrectly stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02SummaryOfAccountWithADepositGeneratesCorrectly stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test03SummaryOfAccountWithTwoDepositGeneratesCorrectly stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test04SummaryOfAccountWithAWithdrawGeneratesCorrectly stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test05SummaryOfAccountWithTwoWithdrawGeneratesCorrectly stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test06SummaryOfAccountWithDepositEndGeneratesCorrectly stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test07SummaryOfAccountWithTwoDepositEndGeneratesCorrectly stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test08SummaryOfAccountWithWithdrawEndGeneratesCorrectly stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test09SummaryOfAccountWithTwoWithdrawEndGeneratesCorrectly stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test10SummaryOfPortfolioWithAccountGeneratesCorrectly stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test11SummaryIdentationOfAccountInsidePortfolioGeneratesCorrectly stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test12SummaryNameOfAccountIsCorrect stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test13SummaryNameOfPortfolioIsCorrect stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test14SummaryRelatedAccountCannotBeEmpty stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #PortfolioTest #test16AddNameCorrectly stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #PortfolioTest #test17AddNamePortfolioIfNameIsEmpty stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AddNameCorrectly stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test09AddNameReceptiveAccountIfNameIsEmpty stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetFromAnEmptyAccountReturns0 stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForAnAccountWithATransferenceReturnsCorrectly stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForAnAccountWithTwoTransferenceReturnsCorrectly stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #TransferNetTest #test04WithdrawEndAffectsNegatively stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetOfAPortfolioReturnsCorrectly stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetOfAnEmptyPortfolioReturnsCorrectly stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetOfAPortfolioWith2AccountsReturnsCorrectly stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #TransferenceTest #test01TransactionInitializeCorrectly stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #TransferenceTest #test02TransactionAffectsCorrectly stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #TransferenceTest #test03EachEndOfTransferenceAppearsCorrectlyInAccounts stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #TransferenceTest #test04FromOneTransferenceEndCanReachToTheAnother stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #TransferenceTest #test05ValueFromEachEndAreTheSame stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #TransferenceTest #test06RaiseErrorWhenAmountToTransferIsNEGATIVE stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #TransferenceTest #test07RaiseErrorWhenAccountToTransferIsEqualToAccountToExtract stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #TransferenceTest #test08RaiseErrorWhenAmountToTransferIsZERO stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #TreeStructureTest #test01TreeStructureOfAnAccountGeneratesCorrectly stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfEmptyPortfolioGeneratesCorrectly stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #TreeStructureTest #test03RelatedAccountOfTheStructureIsCorrect stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #TreeStructureTest #test04IdentationGeneratesCorrectly stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #TreeStructureTest #test05TreeStructureOfPortfolioWithMoreThanOneAccountGeneratesCorrectly stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #TreeStructureTest #test06TreeStructureOfAPortfolioWithOtherInsideEmptyGeneratesCorrectly stamp: 'D S 11/16/2020 16:49:41'!
PASSED!

!testRun: #AccountSummaryTest #test01SummaryOfAccountWithoutTransactionsGenerateCorrectly stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryShowsCorrectBalance stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryShowsDepositAndItsValue stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryDoesntShowInexistentTransactions stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryShowsWithdrawAndItsValue stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryShowsDepositEndOfTransferenceAndItsValue stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #AccountSummaryTest #test07SummaryShowsWithdrawEndOfTransferenceAndItsValue stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #AccountSummaryTest #test08SummaryShowsMoreThanOneTransaction stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test01DetailedSummaryOfEmptyAccountGeneratesCorrectly stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test02SummaryOfAccountWithADepositGeneratesCorrectly stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test03SummaryOfAccountWithTwoDepositGeneratesCorrectly stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test04SummaryOfAccountWithAWithdrawGeneratesCorrectly stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test05SummaryOfAccountWithTwoWithdrawGeneratesCorrectly stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test06SummaryOfAccountWithDepositEndGeneratesCorrectly stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test07SummaryOfAccountWithTwoDepositEndGeneratesCorrectly stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test08SummaryOfAccountWithWithdrawEndGeneratesCorrectly stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test09SummaryOfAccountWithTwoWithdrawEndGeneratesCorrectly stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test10SummaryOfPortfolioWithAccountGeneratesCorrectly stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test11SummaryIdentationOfAccountInsidePortfolioGeneratesCorrectly stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test12SummaryNameOfAccountIsCorrect stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test13SummaryNameOfPortfolioIsCorrect stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #DetailedAccountSummaryTest #test14SummaryRelatedAccountCannotBeEmpty stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #PortfolioTest #test16AddNameCorrectly stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #PortfolioTest #test17AddNamePortfolioIfNameIsEmpty stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AddNameCorrectly stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test09AddNameReceptiveAccountIfNameIsEmpty stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetFromAnEmptyAccountReturns0 stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForAnAccountWithATransferenceReturnsCorrectly stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForAnAccountWithTwoTransferenceReturnsCorrectly stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #TransferNetTest #test04WithdrawEndAffectsNegatively stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetOfAPortfolioReturnsCorrectly stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetOfAnEmptyPortfolioReturnsCorrectly stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetOfAPortfolioWith2AccountsReturnsCorrectly stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #TransferenceTest #test01TransactionInitializeCorrectly stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #TransferenceTest #test02TransactionAffectsCorrectly stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #TransferenceTest #test03EachEndOfTransferenceAppearsCorrectlyInAccounts stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #TransferenceTest #test04FromOneTransferenceEndCanReachToTheAnother stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #TransferenceTest #test05ValueFromEachEndAreTheSame stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #TransferenceTest #test06RaiseErrorWhenAmountToTransferIsNEGATIVE stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #TransferenceTest #test07RaiseErrorWhenAccountToTransferIsEqualToAccountToExtract stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #TransferenceTest #test08RaiseErrorWhenAmountToTransferIsZERO stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #TreeStructureTest #test01TreeStructureOfAnAccountGeneratesCorrectly stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #TreeStructureTest #test02TreeStructureOfEmptyPortfolioGeneratesCorrectly stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #TreeStructureTest #test03RelatedAccountOfTheStructureIsCorrect stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #TreeStructureTest #test04IdentationGeneratesCorrectly stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #TreeStructureTest #test05TreeStructureOfPortfolioWithMoreThanOneAccountGeneratesCorrectly stamp: 'D S 11/16/2020 16:49:48'!
PASSED!

!testRun: #TreeStructureTest #test06TreeStructureOfAPortfolioWithOtherInsideEmptyGeneratesCorrectly stamp: 'D S 11/16/2020 16:49:48'!
PASSED!