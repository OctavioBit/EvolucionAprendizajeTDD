

----STARTUP---- (4 November 2020 22:57:32) as /Users/celeste/facultad/ing1/si-exercises/CuisUniversity-4384.image!


----End fileIn of /Users/celeste/facultad/ing1/si-exercises/18 - Portfolio/Portfolio-Ejercicio.st----!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CR 11/4/2020 23:03:22' prior: 50892119!
balance

	^transactions sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ]! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'CR 11/4/2020 23:04:55'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions deposits'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'CR 11/4/2020 23:04:57'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions deposits withdraws'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'CR 11/4/2020 23:04:53' prior: 50892110!
register: aTransaction

	deposits add: aTransaction.
	withdraws add: aTransaction.
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'CR 11/4/2020 23:05:36' prior: 50892156!
register: aTransaction

	deposits add: aTransaction.
	withdraws add: aTransaction.
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'CR 11/4/2020 23:06:38'!
registerByAccountType: aTransaction

	deposits add: aTransaction.
	withdraws add: aTransaction! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'CR 11/4/2020 23:06:38' prior: 50892162!
register: aTransaction

	self registerByAccountType: aTransaction.
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'CR 11/4/2020 23:06:47' prior: 50892174!
register: aTransactionToRegister

	self registerByAccountType: aTransactionToRegister.
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'CR 11/4/2020 23:07:37' prior: 50892168!
registerByAccountType: aTransactionToRegister

	deposits addIfItsADeposit: aTransactionToRegister.
	withdraws addIfItsAWithdraw: aTransactionToRegister.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'CR 11/4/2020 23:08:27' prior: 50892186!
registerByAccountType: aTransactionToRegister

	aTransactionToRegister addIfItsADeposit: deposits.
	aTransactionToRegister addIfItsAWithdraw: withdraws.! !
!Deposit methodsFor: 'nil' stamp: 'CR 11/4/2020 23:09:37'!
addIfItsADeposit: aSetOfDepositToBeAddedTo
	aSetOfDepositToBeAddedTo add: self.! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'CR 11/4/2020 23:09:46' prior: 50892201!
addIfItsADeposit: aSetOfDepositToBeAddedTo
	aSetOfDepositToBeAddedTo add: self.! !
!Withdraw methodsFor: 'nil' stamp: 'CR 11/4/2020 23:10:12'!
addIfItsAWithdraw: aSetOfWithdrawsToBeAddedTo
	aSetOfWithdrawsToBeAddedTo add: self.! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'CR 11/4/2020 23:10:28'!
addIfItsADeposit: aSetOfDepositsToBeAddedTo! !
!Deposit methodsFor: 'nil' stamp: 'CR 11/4/2020 23:10:41'!
addIfItsAWithdraw: aSetOfWithdrawsToBeAddedTo
! !
!AccountTransaction methodsFor: 'nil' stamp: 'CR 11/4/2020 23:11:37'!
addIfItsADeposit: aSetOfDepositsToBeAddedTo
	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'nil' stamp: 'CR 11/4/2020 23:11:55'!
addIfItsAWithdraw: aSetOfWithdrawsToBeAddedTo
	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'CR 11/4/2020 23:11:56' prior: 50892231!
addIfItsAWithdraw: aSetOfWithdrawsToBeAddedTo
	self subclassResponsibility.! !
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'CR 11/4/2020 23:12:00' prior: 50892226!
addIfItsADeposit: aSetOfDepositsToBeAddedTo
	self subclassResponsibility.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CR 11/4/2020 23:13:51' prior: 50892133!
balance

	^deposits sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ] - withdraws sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ].! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CR 11/4/2020 23:14:08' prior: 50892249!
balance

	^(deposits sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ]) - withdraws sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ].! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CR 11/4/2020 23:18:18'!
sumTotalTransactionsFrom: aSetOfTransactions

	^aSetOfTransactions sum: [ :aTransactionToSumItsValue | aTransactionToSumItsValue value ] ifEmpty: [ 0 ].! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CR 11/4/2020 23:20:19' prior: 50892257!
balance

	^(self sumTotalTransactionsFrom: deposits) - (self sumTotalTransactionsFrom: withdraws).! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CR 11/4/2020 23:20:30'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CR 11/4/2020 23:20:30'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CR 11/4/2020 23:20:30'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CR 11/4/2020 23:20:30'!
ERROR!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CR 11/4/2020 23:20:30'!
ERROR!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CR 11/4/2020 23:20:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CR 11/4/2020 23:20:30'!
ERROR!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'CR 11/4/2020 23:20:59' prior: 50892105 overrides: 16896425!
initialize

	deposits := OrderedCollection new.
	withdraws := OrderedCollection new.! !

Object subclass: #ReceptiveAccount
	instanceVariableNames: 'deposits withdraws'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'CR 11/4/2020 23:21:04'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'deposits withdraws'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CR 11/4/2020 23:21:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CR 11/4/2020 23:21:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CR 11/4/2020 23:21:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CR 11/4/2020 23:21:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CR 11/4/2020 23:21:07'!
ERROR!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CR 11/4/2020 23:21:07'!
ERROR!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CR 11/4/2020 23:21:07'!
ERROR!
!ReceptiveAccount methodsFor: 'testing' stamp: 'CR 11/4/2020 23:22:20' prior: 50892124!
hasRegistered: aTransactionToCheckIfRegistered

	^ (deposits includes: aTransactionToCheckIfRegistered) or: [withdraws includes: aTransactionToCheckIfRegistered].
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CR 11/4/2020 23:22:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CR 11/4/2020 23:22:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CR 11/4/2020 23:22:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CR 11/4/2020 23:22:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CR 11/4/2020 23:22:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CR 11/4/2020 23:22:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CR 11/4/2020 23:22:23'!
ERROR!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CR 11/4/2020 23:22:23'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'CR 11/4/2020 23:23:12' prior: 50892115!
transactions 

	^ deposits copy union: (withdraws copy).! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CR 11/4/2020 23:23:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CR 11/4/2020 23:23:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CR 11/4/2020 23:23:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CR 11/4/2020 23:23:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CR 11/4/2020 23:23:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CR 11/4/2020 23:23:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CR 11/4/2020 23:23:14'!
PASSED!
!ReceptiveAccount methodsFor: 'transactions private' stamp: 'CR 11/4/2020 23:25:51' prior: 50892265!
sumTotalTransactionsFrom: aSetOfTransactions

	^ aSetOfTransactions sum: [ :aTransactionToSumItsValue | aTransactionToSumItsValue value ] ifEmpty: [ 0 ].! !

----SNAPSHOT----(4 November 2020 23:26:00) CuisUniversity-4384.image priorSource: 17927970!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'CR 11/4/2020 23:26:26'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'nil' stamp: 'CR 11/4/2020 23:27:35'!
test01balanceOfAnEmptyPortfolioIsZero
	! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CR 11/4/2020 23:29:13'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CR 11/4/2020 23:29:01' prior: 50892443!
test01balanceOfAnEmptyPortfolioIsZero
	| anEmptyPortfolio |
	anEmptyPortfolio := Portfolio new. 
	
	self assert: 0 = anEmptyPortfolio balance.
	! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/4/2020 23:29:17'!
ERROR!

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/4/2020 23:29:17'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/4/2020 23:29:29'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/4/2020 23:29:39' prior: 50892469!
balance
	^ 0.! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/4/2020 23:29:44'!
PASSED!

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/4/2020 23:30:05'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/4/2020 23:34:24'!
test02registerReceptiveAccountWithNoTransactionsWorksCorrectly
	| aReceptiveAccountWithNoTransactions anEmptyPortfolio |
	aReceptiveAccountWithNoTransactions := ReceptiveAccount new.
	aReceptiveAccountWithNoTransactions register: Deposit new.
	anEmptyPortfolio := Portfolio new. 
	
	self assert: 0 = anEmptyPortfolio balance.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/4/2020 23:35:19' prior: 50892483!
test02registerReceptiveAccountWithNoTransactionsWorksCorrectly
	| aReceptiveAccountWithNoTransactions anEmptyPortfolio |
	aReceptiveAccountWithNoTransactions := ReceptiveAccount new.
	anEmptyPortfolio := Portfolio new. 
	anEmptyPortfolio register: aReceptiveAccountWithNoTransactions.
	self assert: 0 = anEmptyPortfolio balance.
	! !

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:35:23'!
ERROR!

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:35:23'!
ERROR!
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/4/2020 23:35:34'!
register: aReceptiveAccount 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CR 11/4/2020 23:36:19'!
Object subclass: #Portfolio
	instanceVariableNames: 'receptiveAccounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/4/2020 23:36:17' prior: 50892517!
register: aReceptiveAccountToBeAdded 
	receptiveAccounts add: aReceptiveAccountToBeAdded.! !
!Portfolio class methodsFor: 'nil' stamp: 'CR 11/4/2020 23:37:18' overrides: 16783533!
new
	^self new initialize.! !

!methodRemoval: Portfolio class #new stamp: 'CR 11/4/2020 23:37:23'!
new
	^self new initialize.!
!Portfolio methodsFor: 'nil' stamp: 'CR 11/4/2020 23:37:53' overrides: 16896425!
initialize
	receptiveAccounts := Collection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CR 11/4/2020 23:38:33' prior: 50892543 overrides: 16896425!
initialize
	receptiveAccounts := OrderedCollection new.! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/4/2020 23:39:09'!
PASSED!

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:39:09'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/4/2020 23:40:19'!
test03registerReceptiveAccountWithTransactionsWorksCorrectly
	| aReceptiveAccountWithTransactions anEmptyPortfolio |
	aReceptiveAccountWithTransactions := ReceptiveAccount for: 50.
	anEmptyPortfolio := Portfolio new. 
	anEmptyPortfolio register: aReceptiveAccountWithTransactions.
	self assert: 50 = anEmptyPortfolio balance.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/4/2020 23:40:39' prior: 50892561!
test03registerReceptiveAccountWithTransactionsWorksCorrectly
	| aReceptiveAccountWithTransactions anEmptyPortfolio |
	aReceptiveAccountWithTransactions := ReceptiveAccount new.
	anEmptyPortfolio := Portfolio new. 
	anEmptyPortfolio register: aReceptiveAccountWithTransactions.
	self assert: 50 = anEmptyPortfolio balance.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/4/2020 23:41:05' prior: 50892574!
test03registerReceptiveAccountWithTransactionsWorksCorrectly
	| aReceptiveAccountWithTransactions anEmptyPortfolio |
	aReceptiveAccountWithTransactions := ReceptiveAccount new.
	aReceptiveAccountWithTransactions register: (Deposit for: 50).
	anEmptyPortfolio := Portfolio new. 
	anEmptyPortfolio register: aReceptiveAccountWithTransactions.
	self assert: 50 = anEmptyPortfolio balance.
	! !

!testRun: #PortfolioTest #test03registerReceptiveAccountWithTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:41:09'!
FAILURE!

!testRun: #PortfolioTest #test03registerReceptiveAccountWithTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:41:09'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/4/2020 23:42:24' prior: 50892496!
test02registerReceptiveAccountWithNoTransactionsWorksCorrectly
	| aReceptiveAccountWithNoTransactions aPortfolio |
	aReceptiveAccountWithNoTransactions := ReceptiveAccount new.
	aPortfolio := Portfolio new. 
	aPortfolio register: aReceptiveAccountWithNoTransactions.
	self assert: aPortfolio balance = 0.
	self assert: aPortfolio transactions isEmpty.! !

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:42:28'!
ERROR!

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:42:28'!
ERROR!

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:42:51'!
ERROR!

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:42:51'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/4/2020 23:42:57'!
transactions
	self shouldBeImplemented.! !

lala := #( #(2) #(3 5) )!
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/4/2020 23:46:05' prior: 50892640!
transactions
	^ receptiveAccounts collect: [:aReceptiveAccountToAddItsTransactions | aReceptiveAccountToAddItsTransactions transactions] copy.! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/4/2020 23:46:10'!
PASSED!

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:46:10'!
FAILURE!

!testRun: #PortfolioTest #test03registerReceptiveAccountWithTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:46:10'!
FAILURE!

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:46:25'!
FAILURE!

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:46:25'!
FAILURE!

aPortfolio transactions!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/4/2020 23:47:00' prior: 50892610!
test02registerReceptiveAccountWithNoTransactionsWorksCorrectly
	| aReceptiveAccountWithNoTransactions aPortfolio |
	aReceptiveAccountWithNoTransactions := ReceptiveAccount new.
	aPortfolio := Portfolio new. 
	aPortfolio register: aReceptiveAccountWithNoTransactions.
	self assert: aPortfolio balance = 0.
	self assert: (aPortfolio transactions) isEmpty.! !

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:47:01'!
FAILURE!

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:47:01'!
FAILURE!

(aPortfolio transactions) !

lala collect: [:lala | lala first]!
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/4/2020 23:54:01' prior: 50892645!
transactions
	^ receptiveAccounts collect: [:aReceptiveAccountToAddItsTransactions | aReceptiveAccountToAddItsTransactions transactions] andFold: [:a :b | a union: b] ifEmpty: (OrderedCollection new) copy. ! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/4/2020 23:54:06'!
PASSED!

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:54:06'!
PASSED!

!testRun: #PortfolioTest #test03registerReceptiveAccountWithTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:54:06'!
FAILURE!

!testRun: #PortfolioTest #test03registerReceptiveAccountWithTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:54:06'!
FAILURE!

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:54:27'!
PASSED!
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/4/2020 23:55:37' prior: 50892473!
balance
	^ receptiveAccounts sum: [:aReceptiveAccountToSum | aReceptiveAccountToSum balance] ifEmpty: [0].! !

!testRun: #PortfolioTest #test03registerReceptiveAccountWithTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:55:57'!
PASSED!

!testRun: #PortfolioTest #test03registerReceptiveAccountWithTransactionsWorksCorrectly stamp: 'CR 11/5/2020 00:19:20'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/5/2020 00:21:02' prior: 50892587!
test03registerReceptiveAccountWithTransactionsWorksCorrectly
	| aReceptiveAccountWithTransactions aPortfolio aDeposit |
	aDeposit := Deposit for: 50.
	aReceptiveAccountWithTransactions := ReceptiveAccount new.
	aReceptiveAccountWithTransactions register: aDeposit.
	aPortfolio := Portfolio new. 
	aPortfolio register: aReceptiveAccountWithTransactions.
	self assert: 50 = aPortfolio balance.
	self assert: aPortfolio transactions includes: aDeposit.	
	self assert: aPortfolio transactions size = 1.! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/5/2020 00:21:04'!
PASSED!

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/5/2020 00:21:04'!
PASSED!

!testRun: #PortfolioTest #test03registerReceptiveAccountWithTransactionsWorksCorrectly stamp: 'CR 11/5/2020 00:21:04'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/5/2020 00:22:06'!
test04
	| aReceptiveAccountWithTransactions aPortfolio aDeposit |
	aDeposit := Deposit for: 50.
	aReceptiveAccountWithTransactions := ReceptiveAccount new.
	aReceptiveAccountWithTransactions register: aDeposit.
	aPortfolio := Portfolio new. 
	aPortfolio register: aReceptiveAccountWithTransactions.
	self assert: 50 = aPortfolio balance.
	self assert: aPortfolio transactions includes: aDeposit.	
	self assert: aPortfolio transactions size = 1.! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/5/2020 00:23:06' prior: 50892741!
test03registerReceptiveAccountWithTransactionsWorksCorrectly
	| aReceptiveAccountWithTransactions aPortfolio aDeposit |
	aDeposit := Deposit for: 50.
	aReceptiveAccountWithTransactions := ReceptiveAccount new.
	aReceptiveAccountWithTransactions register: aDeposit.
	aPortfolio := Portfolio new. 
	aPortfolio register: aReceptiveAccountWithTransactions.
	self assert: 50 = aPortfolio balance.
	self assert: aPortfolio transactions includes: aDeposit.	
	self assert: aPortfolio transactions size = 1.
	self assert: (aPortfolio hasRegistered: aDeposit).! !

!testRun: #PortfolioTest #test03registerReceptiveAccountWithTransactionsWorksCorrectly stamp: 'CR 11/5/2020 00:23:28'!
ERROR!

!testRun: #PortfolioTest #test03registerReceptiveAccountWithTransactionsWorksCorrectly stamp: 'CR 11/5/2020 00:23:28'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/5/2020 00:23:34'!
hasRegistered: aDeposit 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/5/2020 00:23:56' prior: 50892816!
hasRegistered: aTransactionToCheckIfRegistered
	
	! !
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/5/2020 00:24:13' prior: 50892821!
hasRegistered: aTransactionToCheckIfRegistered
	receptiveAccounts includes: aTransactionToCheckIfRegistered. 	! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/5/2020 00:24:24'!
PASSED!

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/5/2020 00:24:24'!
PASSED!

!testRun: #PortfolioTest #test03registerReceptiveAccountWithTransactionsWorksCorrectly stamp: 'CR 11/5/2020 00:24:24'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'CR 11/5/2020 00:24:24'!
PASSED!

!testRun: #PortfolioTest #test03registerReceptiveAccountWithTransactionsWorksCorrectly stamp: 'CR 11/5/2020 00:24:24'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/5/2020 00:24:40' prior: 50892826!
hasRegistered: aTransactionToCheckIfRegistered
	^ receptiveAccounts includes: aTransactionToCheckIfRegistered. 	! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/5/2020 00:24:44'!
PASSED!

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/5/2020 00:24:44'!
PASSED!

!testRun: #PortfolioTest #test03registerReceptiveAccountWithTransactionsWorksCorrectly stamp: 'CR 11/5/2020 00:24:44'!
FAILURE!

!testRun: #PortfolioTest #test04 stamp: 'CR 11/5/2020 00:24:44'!
PASSED!

!testRun: #PortfolioTest #test03registerReceptiveAccountWithTransactionsWorksCorrectly stamp: 'CR 11/5/2020 00:24:44'!
FAILURE!

aPortfolio transactions includes: aDeposit.	!

aPortfolio hasRegistered: aDeposit!
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/5/2020 00:25:54' prior: 50892850!
hasRegistered: aTransactionToCheckIfRegistered
	^ (receptiveAccounts transactions) includes: aTransactionToCheckIfRegistered. 	! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/5/2020 00:25:59'!
PASSED!

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/5/2020 00:25:59'!
PASSED!

!testRun: #PortfolioTest #test03registerReceptiveAccountWithTransactionsWorksCorrectly stamp: 'CR 11/5/2020 00:25:59'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'CR 11/5/2020 00:25:59'!
PASSED!

!testRun: #PortfolioTest #test03registerReceptiveAccountWithTransactionsWorksCorrectly stamp: 'CR 11/5/2020 00:25:59'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/5/2020 00:27:04' prior: 50892877!
hasRegistered: aTransactionToCheckIfRegistered
	^ receptiveAccounts transactions.! !
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/5/2020 00:27:49' prior: 50892902!
hasRegistered: aTransactionToCheckIfRegistered
	^ receptiveAccounts anySatisfy: [:aReceptiveAccount | aReceptiveAccount hasRegistered: aTransactionToCheckIfRegistered].! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/5/2020 00:27:55'!
PASSED!

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/5/2020 00:27:55'!
PASSED!

!testRun: #PortfolioTest #test03registerReceptiveAccountWithTransactionsWorksCorrectly stamp: 'CR 11/5/2020 00:27:55'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'CR 11/5/2020 00:27:55'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/5/2020 00:30:05' prior: 50892788!
test03registerReceptiveAccountWithTransactionsWorksCorrectly
	| aReceptiveAccountWithTransactions aPortfolio aDeposit |
	aDeposit := Deposit for: 50.
	aReceptiveAccountWithTransactions := ReceptiveAccount new.
	aReceptiveAccountWithTransactions register: aDeposit.
	aPortfolio := Portfolio new. 
	aPortfolio register: aReceptiveAccountWithTransactions.
	self assert: 50 = aPortfolio balance.
	self assert: aPortfolio transactions size = 1.
	self assert: (aPortfolio hasRegistered: aDeposit).! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/5/2020 00:30:18'!
PASSED!

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/5/2020 00:30:18'!
PASSED!

!testRun: #PortfolioTest #test03registerReceptiveAccountWithTransactionsWorksCorrectly stamp: 'CR 11/5/2020 00:30:18'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'CR 11/5/2020 00:30:18'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/5/2020 00:33:02'!
test03registerReceptiveAccountWithOnlyDepositWorksCorrectly
	| aReceptiveAccountWithTransactions aPortfolio aDeposit |
	aDeposit := Deposit for: 50.
	aReceptiveAccountWithTransactions := ReceptiveAccount new.
	aReceptiveAccountWithTransactions register: aDeposit.
	aPortfolio := Portfolio new. 
	aPortfolio register: aReceptiveAccountWithTransactions.
	self assert: 50 = aPortfolio balance.
	self assert: aPortfolio transactions size = 1.
	self assert: (aPortfolio hasRegistered: aDeposit).! !

!methodRemoval: PortfolioTest #test03registerReceptiveAccountWithTransactionsWorksCorrectly stamp: 'CR 11/5/2020 00:33:07'!
test03registerReceptiveAccountWithTransactionsWorksCorrectly
	| aReceptiveAccountWithTransactions aPortfolio aDeposit |
	aDeposit := Deposit for: 50.
	aReceptiveAccountWithTransactions := ReceptiveAccount new.
	aReceptiveAccountWithTransactions register: aDeposit.
	aPortfolio := Portfolio new. 
	aPortfolio register: aReceptiveAccountWithTransactions.
	self assert: 50 = aPortfolio balance.
	self assert: aPortfolio transactions size = 1.
	self assert: (aPortfolio hasRegistered: aDeposit).!

----SNAPSHOT----(5 November 2020 00:58:33) CuisUniversity-4384.image priorSource: 17944892!

----QUIT----(5 November 2020 00:58:40) CuisUniversity-4384.image priorSource: 17963159!

----STARTUP---- (5 November 2020 18:35:13) as /Users/celeste/facultad/ing1/si-exercises/CuisUniversity-4384.image!


!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'CR 11/5/2020 18:45:56'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'deposits withdraws transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CR 11/5/2020 18:45:54' prior: 50892273!
balance

	^(self sumTotalTransactionsFrom: transactions).! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CR 11/5/2020 18:47:05' prior: 50893018!
balance

	^(self calculateTotalBalanceFromTransactions).! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CR 11/5/2020 18:47:14' prior: 50893023!
balance

	^self calculateTotalBalanceFromTransactions.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CR 11/5/2020 18:47:16' prior: 50893028!
balance

	^ self calculateTotalBalanceFromTransactions.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CR 11/5/2020 18:49:23'!
calculateTotalBalanceFromTransactions
	| totalBalance |
	transactions do: [:aTransactionToCollaborateWith | aTransactionToCollaborateWith collaborateWithBalance: totalBalance].
	^ totalBalance.
	! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CR 11/5/2020 18:49:42' prior: 50893038!
calculateTotalBalanceFromTransactions
	| totalBalance |
	totalBalance := 0.
	transactions do: [:aTransactionToCollaborateWith | aTransactionToCollaborateWith collaborateWithBalance: totalBalance].
	^ totalBalance.
	! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'NR 10/17/2019 15:06:56' prior: 50892306 overrides: 16896425!
initialize

	transactions := OrderedCollection new.! !

!methodRemoval: ReceptiveAccount #registerByAccountType: stamp: 'CR 11/5/2020 18:50:19'!
registerByAccountType: aTransactionToRegister

	aTransactionToRegister addIfItsADeposit: deposits.
	aTransactionToRegister addIfItsAWithdraw: withdraws.!

!methodRemoval: ReceptiveAccount #sumTotalTransactionsFrom: stamp: 'CR 11/5/2020 18:50:22'!
sumTotalTransactionsFrom: aSetOfTransactions

	^ aSetOfTransactions sum: [ :aTransactionToSumItsValue | aTransactionToSumItsValue value ] ifEmpty: [ 0 ].!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50892389!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50892180!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'CR 11/5/2020 18:50:56' prior: 50893084!
register: aTransactionToRegister

	transactions add: aTransactionToRegister.
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/17/2019 03:28:43' prior: 50892351!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'CR 11/5/2020 18:51:17' prior: 50893095!
hasRegistered: aTransactionToCheckIfRegistered

	^ transactions includes: aTransactionToCheckIfRegistered. 
! !

!methodRemoval: AccountTransaction #addIfItsADeposit: stamp: 'CR 11/5/2020 18:51:45'!
addIfItsADeposit: aSetOfDepositsToBeAddedTo
	self subclassResponsibility.!

!methodRemoval: AccountTransaction #addIfItsAWithdraw: stamp: 'CR 11/5/2020 18:51:47'!
addIfItsAWithdraw: aSetOfWithdrawsToBeAddedTo
	self subclassResponsibility.!
!AccountTransaction methodsFor: 'nil' stamp: 'CR 11/5/2020 18:52:36'!
collaborateWithBalance: balanceToCollaborateWith

	self subclassResponsibility.! !
!Deposit methodsFor: 'nil' stamp: 'CR 11/5/2020 18:53:03' overrides: 50893117!
collaborateWithBalance: balanceToCollaborateWith
	
	^ balanceToCollaborateWith + value. ! !

!methodRemoval: Deposit #addIfItsADeposit: stamp: 'CR 11/5/2020 18:53:12'!
addIfItsADeposit: aSetOfDepositToBeAddedTo
	aSetOfDepositToBeAddedTo add: self.!

!methodRemoval: Deposit #addIfItsAWithdraw: stamp: 'CR 11/5/2020 18:53:13'!
addIfItsAWithdraw: aSetOfWithdrawsToBeAddedTo
!

!methodRemoval: Withdraw #addIfItsADeposit: stamp: 'CR 11/5/2020 18:53:18'!
addIfItsADeposit: aSetOfDepositsToBeAddedTo!

!methodRemoval: Withdraw #addIfItsAWithdraw: stamp: 'CR 11/5/2020 18:53:20'!
addIfItsAWithdraw: aSetOfWithdrawsToBeAddedTo
	aSetOfWithdrawsToBeAddedTo add: self.!
!Withdraw methodsFor: 'receptive-account interaction' stamp: 'CR 11/5/2020 18:53:24' overrides: 50893117!
collaborateWithBalance: balanceToCollaborateWith
	
	^ balanceToCollaborateWith - value. ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CR 11/5/2020 18:53:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CR 11/5/2020 18:53:40'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CR 11/5/2020 18:53:40'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CR 11/5/2020 18:53:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CR 11/5/2020 18:53:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CR 11/5/2020 18:53:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CR 11/5/2020 18:53:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CR 11/5/2020 18:53:49'!
FAILURE!

account balance!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CR 11/5/2020 18:58:00' prior: 50893047!
calculateTotalBalanceFromTransactions

	^ transactions inject: 0 into: [:totalBalance :aTransactionToCollaborateWith |
				totalBalance + aTransactionToCollaborateWith collaborateWithBalance: totalBalance].
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CR 11/5/2020 18:58:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CR 11/5/2020 18:58:04'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CR 11/5/2020 18:58:04'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CR 11/5/2020 18:58:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CR 11/5/2020 18:58:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CR 11/5/2020 18:58:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CR 11/5/2020 18:58:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CR 11/5/2020 18:58:08'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CR 11/5/2020 18:58:31' prior: 50893184!
calculateTotalBalanceFromTransactions

	^ transactions inject: 0 into: [:totalBalance :aTransactionToCollaborateWith |
				totalBalance + (aTransactionToCollaborateWith collaborateWithBalance: totalBalance)].
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CR 11/5/2020 18:58:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CR 11/5/2020 18:58:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CR 11/5/2020 18:58:34'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CR 11/5/2020 18:58:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CR 11/5/2020 18:58:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CR 11/5/2020 18:58:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CR 11/5/2020 18:58:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CR 11/5/2020 18:58:34'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CR 11/5/2020 18:59:24' prior: 50893224!
calculateTotalBalanceFromTransactions

	^ transactions inject: 0 into: [:totalBalance :aTransactionToCollaborateWith |
				aTransactionToCollaborateWith collaborateWithBalance: totalBalance].
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CR 11/5/2020 18:59:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CR 11/5/2020 18:59:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CR 11/5/2020 18:59:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CR 11/5/2020 18:59:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CR 11/5/2020 18:59:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CR 11/5/2020 18:59:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CR 11/5/2020 18:59:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CR 11/5/2020 19:00:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CR 11/5/2020 19:00:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CR 11/5/2020 19:00:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CR 11/5/2020 19:00:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CR 11/5/2020 19:00:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CR 11/5/2020 19:00:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CR 11/5/2020 19:00:01'!
PASSED!

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/5/2020 19:00:06'!
PASSED!

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/5/2020 19:00:06'!
PASSED!

!testRun: #PortfolioTest #test03registerReceptiveAccountWithOnlyDepositWorksCorrectly stamp: 'CR 11/5/2020 19:00:06'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'CR 11/5/2020 19:00:06'!
PASSED!

----QUIT----(5 November 2020 19:00:58) CuisUniversity-4384.image priorSource: 17963252!

----STARTUP---- (5 November 2020 20:36:58) as /Users/celeste/facultad/ing1/si-exercises/CuisUniversity-4384.image!


----QUIT----(5 November 2020 21:10:30) CuisUniversity-4384.image priorSource: 17974026!

----STARTUP---- (7 November 2020 23:17:08) as /Users/celeste/facultad/ing1/si-exercises/CuisUniversity-4384.image!


!classRemoval: #ReceptiveAccount stamp: 'CR 11/7/2020 23:17:25'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'deposits withdraws transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'CR 11/7/2020 23:17:26'!
Object subclass: #Portfolio
	instanceVariableNames: 'receptiveAccounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'CR 11/7/2020 23:17:26'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'CR 11/7/2020 23:17:27'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'CR 11/7/2020 23:17:27'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'CR 11/7/2020 23:17:27'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'CR 11/7/2020 23:17:28'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of /Users/celeste/facultad/ing1/si-exercises/18 - Portfolio/Portfolio-Ejercicio.st----!

!methodRemoval: ReceptiveAccount #registerByAccountType: stamp: 'CR 11/7/2020 23:18:11'!
registerByAccountType: aTransactionToRegister

	aTransactionToRegister addIfItsADeposit: deposits.
	aTransactionToRegister addIfItsAWithdraw: withdraws.!
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:18:59' prior: 50893917!
register: aPortfolioToBeAdded

	self verifyThereIsNoPortfolioEntryLoop: (aPortfolioToBeAdded allPortfolioEntries).
	portfolioEntries add: aPortfolioToBeAdded.
	
	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:21:24' prior: 50894045!
register: aPortfolioEntryToBeAdded

	aPortfolioEntryToBeAdded		verifyThereIsNoPortfolioEntryLoop.
	portfolioEntries add: aPortfolioEntryToBeAdded.
	
	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:18:59' prior: 50894053!
register: aPortfolioToBeAdded

	self verifyThereIsNoPortfolioEntryLoop: (aPortfolioToBeAdded allPortfolioEntries).
	portfolioEntries add: aPortfolioToBeAdded.
	
	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'BT 11/5/2020 21:44:34' prior: 50894061!
register: aReceptiveAccountToBeAdded

	self verifyThereIsNoPortfolioEntryLoop: (aReceptiveAccountToBeAdded allPortfolioEntries).
	portfolioEntries add: aReceptiveAccountToBeAdded.
	
	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'BT 11/5/2020 21:44:34' prior: 50894069!
register: aReceptiveAccountToBeAdded

	self verifyThereIsNoPortfolioEntryLoop: (aReceptiveAccountToBeAdded allPortfolioEntries).
	portfolioEntries add: aReceptiveAccountToBeAdded.
	
	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:24:39' prior: 50894078!
register: aPortfolioEntryToBeAdded

	aPortfolioEntryToBeAdded addIfPossibleToPortfolioEntries: self.
	
	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:27:40'!
addIfPossibleToPortfolioEntries: aPortfolioToBeAddedTo

	aPortfolioToBeAddedTo verifyThereIsNoPortfolioEntryLoop.
	aPortfolioToBeAddedTo addToPorfolio: self.
	
	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:27:54' prior: 50894093!
addIfPossibleToPortfolioEntries: aPortfolioToBeAddedTo

	aPortfolioToBeAddedTo verifyThereIsNoPortfolioEntryLoop: self.
	aPortfolioToBeAddedTo addToPorfolio: self.
	
	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:28:03' prior: 50894101!
addIfPossibleToPortfolioEntries: aPortfolioToBeAddedTo

	aPortfolioToBeAddedTo verifyThereIsNoPortfolioEntryLoopWhenAdding: self.
	aPortfolioToBeAddedTo addToPorfolio: self.
	
	
	! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'CR 11/7/2020 23:28:28'!
addIfPossibleToPortfolioEntries: aPortfolioToBeAddedTo

	aPortfolioToBeAddedTo addToPorfolio: self.! !
!PortfolioEntry methodsFor: 'nil' stamp: 'CR 11/7/2020 23:28:42'!
addIfPossibleToPortfolioEntries: aPortfolioToBeAddedTo

	self subclassResponsibility.! !
!Portfolio methodsFor: 'nil' stamp: 'CR 11/7/2020 23:30:03'!
addToPorfolio: aPortfolioEntryToAdd

	portfolioEntries add: aPortfolioEntryToAdd.! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:31:45'!
verifyThereIsNoPortfolioEntryLoopWhenAdding: lala
	| allEntriesOfPortfolioThatMightCreateLoop |
	
	(portfoliosWhereIncluded anySatisfy: [:aPortfolioWhereIncluded | allEntriesOfPortfolioThatMightCreateLoop includes: aPortfolioWhereIncluded]) ifTrue:[ self signalCantAddEntryBecauseCreatesLoop].
	
	portfoliosWhereIncluded do: [:aPortfolioWhereIncluded | 
		aPortfolioWhereIncluded verifyThereIsNoPortfolioEntryLoop: allEntriesOfPortfolioThatMightCreateLoop ].
	
	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:34:09' prior: 50894134!
verifyThereIsNoPortfolioEntryLoopWhenAdding: aPortfolioThatMightCreateLoop
	| allEntriesOfPortfolioThatMightCreateLoop |
	allEntriesOfPortfolioThatMightCreateLoop := aPortfolioThatMightCreateLoop allEntries.
	(portfoliosWhereIncluded anySatisfy: [:aPortfolioWhereIncluded | allEntriesOfPortfolioThatMightCreateLoop includes: aPortfolioWhereIncluded]) ifTrue:[ self signalCantAddEntryBecauseCreatesLoop].
	
	portfoliosWhereIncluded do: [:aPortfolioWhereIncluded | 
		aPortfolioWhereIncluded verifyThereIsNoPortfolioEntryLoop: allEntriesOfPortfolioThatMightCreateLoop ].
	
	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:36:40' prior: 50894152!
verifyThereIsNoPortfolioEntryLoopWhenAdding: aPortfolioThatMightCreateLoop
	| allEntriesOfPortfolioThatMightCreateLoop |
	allEntriesOfPortfolioThatMightCreateLoop := aPortfolioThatMightCreateLoop entriesReachedByMe.
	(portfoliosWhereIncluded anySatisfy: [:aPortfolioWhereIncluded | allEntriesOfPortfolioThatMightCreateLoop includes: aPortfolioWhereIncluded]) ifTrue:[ self signalCantAddEntryBecauseCreatesLoop].
	
	portfoliosWhereIncluded do: [:aPortfolioWhereIncluded | 
		aPortfolioWhereIncluded verifyThereIsNoPortfolioEntryLoop: allEntriesOfPortfolioThatMightCreateLoop ].
	
	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:36:54' prior: 50894173!
verifyThereIsNoPortfolioEntryLoopWhenAdding: aPortfolioThatMightCreateLoop
	| allEntriesOfPortfolioThatMightCreateLoop |
	allEntriesOfPortfolioThatMightCreateLoop := aPortfolioThatMightCreateLoop entriesReachableByMe.
	(portfoliosWhereIncluded anySatisfy: [:aPortfolioWhereIncluded | allEntriesOfPortfolioThatMightCreateLoop includes: aPortfolioWhereIncluded]) ifTrue:[ self signalCantAddEntryBecauseCreatesLoop].
	
	portfoliosWhereIncluded do: [:aPortfolioWhereIncluded | 
		aPortfolioWhereIncluded verifyThereIsNoPortfolioEntryLoop: allEntriesOfPortfolioThatMightCreateLoop ].
	
	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:39:34' prior: 50894194!
verifyThereIsNoPortfolioEntryLoopWhenAdding: aPortfolioThatMightCreateLoop
	| entriesReachableByPortfolioThatMightCreateLoop |
	entriesReachableByPortfolioThatMightCreateLoop := aPortfolioThatMightCreateLoop entriesReachableIfAdded. 
	(portfoliosWhereIncluded anySatisfy: [:aPortfolioWhereIncluded | entriesReachableByPortfolioThatMightCreateLoop includes: aPortfolioWhereIncluded]) ifTrue:[ self signalCantAddEntryBecauseCreatesLoop].
	
	portfoliosWhereIncluded do: [:aPortfolioWhereIncluded | 
		aPortfolioWhereIncluded verifyThereIsNoPortfolioEntryLoop: entriesReachableByPortfolioThatMightCreateLoop ].
	
	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:42:05' prior: 50894216!
verifyThereIsNoPortfolioEntryLoopWhenAdding: aPortfolioThatMightCreateLoop
	| entriesReachableByPortfolioThatMightCreateLoop |
	entriesReachableByPortfolioThatMightCreateLoop := aPortfolioThatMightCreateLoop entriesReachableIfAdded. 
	(portfoliosWhereIncluded anySatisfy: [:aPortfolioWhereIncluded | entriesReachableByPortfolioThatMightCreateLoop includes: aPortfolioWhereIncluded]) ifTrue:[ self signalCantAddEntryBecauseCreatesLoop].
	
	portfoliosWhereIncluded do: [:aPortfolioWhereIncluded | 
		aPortfolioWhereIncluded verifyThereIsNoPortfolioEntryLoop: entriesReachableByPortfolioThatMightCreateLoop ].
	
	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:51:39'!
checkIfAnyPortfolioWhereIncludedAppearsIn: entriesReachableByPortfolioThatMightCreateLoop

	^ (portfoliosWhereIncluded anySatisfy: [:aPortfolioWhereIncluded | entriesReachableByPortfolioThatMightCreateLoop includes: aPortfolioWhereIncluded]) ifTrue:[ self signalCantAddEntryBecauseCreatesLoop]! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:51:39' prior: 50894238!
verifyThereIsNoPortfolioEntryLoopWhenAdding: aPortfolioThatMightCreateLoop
	| entriesReachableByPortfolioThatMightCreateLoop |
	entriesReachableByPortfolioThatMightCreateLoop := aPortfolioThatMightCreateLoop entriesReachableIfAdded. 
	self checkIfAnyPortfolioWhereIncludedAppearsIn: entriesReachableByPortfolioThatMightCreateLoop.
	
	portfoliosWhereIncluded do: [:aPortfolioWhereIncluded | 
		aPortfolioWhereIncluded verifyThereIsNoPortfolioEntryLoop: entriesReachableByPortfolioThatMightCreateLoop ].
	
	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:52:16' prior: 50894272!
verifyThereIsNoPortfolioEntryLoopWhenAdding: aPortfolioThatMightCreateLoop
	| entriesReachableByPortfolioThatMightCreateLoop |
	entriesReachableByPortfolioThatMightCreateLoop := aPortfolioThatMightCreateLoop entriesReachableIfAdded. 
	self checkIfAnyPortfolioWhereIncludedAppearsIn: entriesReachableByPortfolioThatMightCreateLoop.
	portfoliosWhereIncluded do: [:aPortfolioWhereIncluded | 
		aPortfolioWhereIncluded verifyThereIsNoPortfolioEntryLoop: entriesReachableByPortfolioThatMightCreateLoop ].
	
	
	! !

!methodRemoval: Portfolio #verifyThereIsNoPortfolioEntryLoop: stamp: 'CR 11/7/2020 23:52:23'!
verifyThereIsNoPortfolioEntryLoop: allEntriesOfPortfolioThatMightCreateLoop

	(portfoliosWhereIncluded anySatisfy: [:aPortfolioWhereIncluded | allEntriesOfPortfolioThatMightCreateLoop includes: aPortfolioWhereIncluded]) ifTrue:[ self signalCantAddEntryBecauseCreatesLoop].
	
	portfoliosWhereIncluded do: [:aPortfolioWhereIncluded | 
		aPortfolioWhereIncluded verifyThereIsNoPortfolioEntryLoop: allEntriesOfPortfolioThatMightCreateLoop ].
	
	
	!
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:52:48' prior: 50894291!
verifyThereIsNoPortfolioEntryLoopWhenAdding: aPortfolioThatMightCreateLoop
	| entriesReachableByPortfolioThatMightCreateLoop |
	entriesReachableByPortfolioThatMightCreateLoop := aPortfolioThatMightCreateLoop entriesReachableIfAdded. 
	self checkIfAnyPortfolioWhereIncludedAppearsIn: entriesReachableByPortfolioThatMightCreateLoop.
	portfoliosWhereIncluded do: [:aPortfolioWhereIncluded | 
		aPortfolioWhereIncluded verifyThereIsNoPortfolioEntryLoopWhenAdding: aPortfolioThatMightCreateLoop ].
	
	
	! !

!methodRemoval: Portfolio #checkIfParentIsAnyOf: stamp: 'CR 11/7/2020 23:54:15'!
checkIfParentIsAnyOf: allEntriesOfPortfolioThatMightCreateLoop
	allEntriesOfPortfolioThatMightCreateLoop 
	
	
	!
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:57:31' prior: 50894327!
verifyThereIsNoPortfolioEntryLoopWhenAdding: aPortfolioThatMightCreateLoop
	| entriesReachableByPortfolioThatMightCreateLoop |
	entriesReachableByPortfolioThatMightCreateLoop := aPortfolioThatMightCreateLoop entriesReachableIfAdded. 
	self raiseErrorIfIncludedIn: entriesReachableByPortfolioThatMightCreateLoop.
	self checkIfAnyPortfolioWhereIncludedAppearsIn: entriesReachableByPortfolioThatMightCreateLoop.
	
	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:57:38'!
checkIfAnyPortfolioWhereIncludedAppearsInL: entriesReachableByPortfolioThatMightCreateLoop

	^ (portfoliosWhereIncluded anySatisfy: [:aPortfolioWhereIncluded | entriesReachableByPortfolioThatMightCreateLoop includes: aPortfolioWhereIncluded]) ifTrue:[ self signalCantAddEntryBecauseCreatesLoop]! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:58:21' prior: 50894368!
checkIfAnyPortfolioWhereIncludedAppearsInL: entriesReachableByPortfolioThatMightCreateLoop

	^ (portfoliosWhereIncluded anySatisfy: [:aPortfolioWhereIncluded | entriesReachableByPortfolioThatMightCreateLoop includes: aPortfolioWhereIncluded]) ifTrue:[ self signalCantAddEntryBecauseCreatesLoop]! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/8/2020 00:03:23' prior: 50894352!
verifyThereIsNoPortfolioEntryLoopWhenAdding: aPortfolioThatMightCreateLoop
	| entriesReachableByPortfolioThatMightCreateLoop |
	entriesReachableByPortfolioThatMightCreateLoop := aPortfolioThatMightCreateLoop entriesReachableIfAdded. 
	
	self checkIfMeOrPortfolioEntriesWhereIncludedIsIn: entriesReachableByPortfolioThatMightCreateLoop.
	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/8/2020 00:05:02'!
checkIfMeOrPortfolioEntriesWhereIncludedIsIn: entriesReachableByPortfolioThatMightCreateLoop

	self raiseErrorIfIncludedIn: entriesReachableByPortfolioThatMightCreateLoop.
	portfoliosWhereIncluded do: [:portfolioWhereIncluded |  portfolioWhereIncluded checkIfMeOrPortfolioEntriesWhereIncludedIsIn: entriesReachableByPortfolioThatMightCreateLoop].

	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/8/2020 00:06:11'!
raiseErrorIfIncludedIn: entriesReachableByPortfolioThatMightCreateLoop

	(entriesReachableByPortfolioThatMightCreateLoop includes: self) ifTrue: [ self signalCantAddEntryBecauseCreatesLoop].
	
	! !

!methodRemoval: Portfolio #checkIfAnyPortfolioWhereIncludedAppearsInL: stamp: 'CR 11/8/2020 00:06:23'!
checkIfAnyPortfolioWhereIncludedAppearsInL: entriesReachableByPortfolioThatMightCreateLoop

	^ (portfoliosWhereIncluded anySatisfy: [:aPortfolioWhereIncluded | entriesReachableByPortfolioThatMightCreateLoop includes: aPortfolioWhereIncluded]) ifTrue:[ self signalCantAddEntryBecauseCreatesLoop]!

!methodRemoval: Portfolio #checkIfAnyPortfolioWhereIncludedAppearsIn: stamp: 'CR 11/8/2020 00:06:30'!
checkIfAnyPortfolioWhereIncludedAppearsIn: entriesReachableByPortfolioThatMightCreateLoop

	^ (portfoliosWhereIncluded anySatisfy: [:aPortfolioWhereIncluded | entriesReachableByPortfolioThatMightCreateLoop includes: aPortfolioWhereIncluded]) ifTrue:[ self signalCantAddEntryBecauseCreatesLoop]!
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/8/2020 00:06:54' prior: 50894392!
verifyThereIsNoPortfolioEntryLoopWhenAdding: aPortfolioThatMightCreateLoop
	| entriesReachableByPortfolioThatMightCreateLoop |
	entriesReachableByPortfolioThatMightCreateLoop := aPortfolioThatMightCreateLoop entriesReachableIfAdded. 
	
	self checkIfMeOrPortfolioEntriesWhereIncludedAreIn: entriesReachableByPortfolioThatMightCreateLoop.
	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/8/2020 00:07:03'!
checkIfMeOrPortfolioEntriesWhereIncludedAreIn: entriesReachableByPortfolioThatMightCreateLoop

	self raiseErrorIfIncludedIn: entriesReachableByPortfolioThatMightCreateLoop.
	portfoliosWhereIncluded do: [:portfolioWhereIncluded |  portfolioWhereIncluded checkIfMeOrPortfolioEntriesWhereIncludedIsIn: entriesReachableByPortfolioThatMightCreateLoop].

	
	! !

!methodRemoval: Portfolio #checkIfMeOrPortfolioEntriesWhereIncludedIsIn: stamp: 'CR 11/8/2020 00:07:08'!
checkIfMeOrPortfolioEntriesWhereIncludedIsIn: entriesReachableByPortfolioThatMightCreateLoop

	self raiseErrorIfIncludedIn: entriesReachableByPortfolioThatMightCreateLoop.
	portfoliosWhereIncluded do: [:portfolioWhereIncluded |  portfolioWhereIncluded checkIfMeOrPortfolioEntriesWhereIncludedIsIn: entriesReachableByPortfolioThatMightCreateLoop].

	
	!
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/8/2020 00:07:23' prior: 50894466!
checkIfMeOrPortfolioEntriesWhereIncludedAreIn: entriesReachableByPortfolioThatMightCreateLoop

	self raiseErrorIfIncludedIn: entriesReachableByPortfolioThatMightCreateLoop.
	portfoliosWhereIncluded do: [:portfolioWhereIncluded |  portfolioWhereIncluded checkIfMeOrPortfolioEntriesWhereIncludedAreIn: entriesReachableByPortfolioThatMightCreateLoop].

	
	! !
!Portfolio methodsFor: 'nil' stamp: 'CR 11/8/2020 00:12:38'!
entriesReachableIfAdded

	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CR 11/8/2020 00:14:34' prior: 50894509!
entriesReachableIfAdded
	| entriesReachableByMe |
	entriesReachableByMe := OrderedCollection new.
	self collectReachableEntriesAndSaveIn: entriesReachableByMe. 
	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CR 11/8/2020 00:32:10'!
collectReachableEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded

	(entriesReachableByPortfoliosWhereIncluded includes: self) ifFalse: [
		entriesReachableByPortfoliosWhereIncluded add: self.
		portfolioEntries do: [:aPortfolioEntryWhoKeepsCollecting | 
			aPortfolioEntryWhoKeepsCollecting collectReachableEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded.
			]
		]
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CR 11/8/2020 00:33:18'!
reachableEntriesAlreadyCollected: entriesReachableByPortfoliosWhereIncluded

	^ entriesReachableByPortfoliosWhereIncluded includes: self! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CR 11/8/2020 00:33:18' prior: 50894521!
collectReachableEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded

	(self reachableEntriesAlreadyCollected: entriesReachableByPortfoliosWhereIncluded) ifFalse: [
		entriesReachableByPortfoliosWhereIncluded add: self.
		portfolioEntries do: [:aPortfolioEntryWhoKeepsCollecting | 
			aPortfolioEntryWhoKeepsCollecting collectReachableEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded.
			]
		]
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CR 11/8/2020 00:34:27' prior: 50894544!
collectReachableEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded

	(self reachableEntriesAlreadyCollected: entriesReachableByPortfoliosWhereIncluded) ifFalse: [
		entriesReachableByPortfoliosWhereIncluded add: self.
		portfolioEntries do: [:aPortfolioEntryWhoKeepsCollecting | 
			aPortfolioEntryWhoKeepsCollecting collectReachableEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded.
			]
		].
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CR 11/8/2020 00:34:41' prior: 50894560!
collectReachableEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded

	(self reachableEntriesAlreadyCollected: entriesReachableByPortfoliosWhereIncluded) ifFalse: [
		entriesReachableByPortfoliosWhereIncluded add: self.
		portfolioEntries do: [:aPortfolioEntryWhoKeepsCollecting | 
			aPortfolioEntryWhoKeepsCollecting collectReachableEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded.
			].
		].
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CR 11/8/2020 00:36:01'!
keepCollectingAndSaveIn: entriesReachableByPortfoliosWhereIncluded
	entriesReachableByPortfoliosWhereIncluded add: self.
	portfolioEntries do: 
					[:aPortfolioEntryWhoKeepsCollecting | aPortfolioEntryWhoKeepsCollecting collectReachableEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded.].

	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CR 11/8/2020 00:36:07' prior: 50894592!
keepCollectingAndSaveIn: entriesReachableByPortfoliosWhereIncluded

	entriesReachableByPortfoliosWhereIncluded add: self.
	portfolioEntries do: 
					[:aPortfolioEntryWhoKeepsCollecting | aPortfolioEntryWhoKeepsCollecting collectReachableEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded.].

	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CR 11/8/2020 00:36:38' prior: 50894576!
collectReachableEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded

	(self reachableEntriesAlreadyCollected: entriesReachableByPortfoliosWhereIncluded) ifFalse: [
		self keepCollectingAndSaveIn: entriesReachableByPortfoliosWhereIncluded
		]
	! !

----SNAPSHOT----(8 November 2020 00:37:52) CuisUniversity-4384.image priorSource: 17974232!

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/8/2020 00:38:03'!
PASSED!

!testRun: #PortfolioTest #test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:38:03'!
PASSED!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:38:03'!
PASSED!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:38:03'!
ERROR!

!testRun: #PortfolioTest #test04hasRegisteredOfAnEmptyPortfolioIsFalse stamp: 'CR 11/8/2020 00:38:03'!
PASSED!

!testRun: #PortfolioTest #test05hasRegisteredOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:38:03'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:38:03'!
ERROR!

!testRun: #PortfolioTest #test07transactionsOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/8/2020 00:38:03'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:38:03'!
PASSED!

!testRun: #PortfolioTest #test09hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:38:03'!
ERROR!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 00:38:03'!
ERROR!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:38:17'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:38:56'!
test03balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly
	| aDeposit aReceptiveAccountWithNoTransactions aReceptiveAccountWithTransactions aPortfolio |
	aDeposit := Deposit for: 50.
	aReceptiveAccountWithTransactions := ReceptiveAccount new.
	aReceptiveAccountWithTransactions register: aDeposit.
	
	aReceptiveAccountWithNoTransactions := ReceptiveAccount new.
	
	aPortfolio := Portfolio new. 
	aPortfolio register: aReceptiveAccountWithNoTransactions.
	aPortfolio register: aReceptiveAccountWithTransactions.
	self assert: aPortfolio balance = 50.
	! !

!methodRemoval: PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:39:07'!
test03balanceOfPortfolioWithManyReceptiveAccountWorksCorrectly
	| aDeposit aReceptiveAccountWithNoTransactions aReceptiveAccountWithTransactions aPortfolio |
	aDeposit := Deposit for: 50.
	aReceptiveAccountWithTransactions := ReceptiveAccount new.
	aReceptiveAccountWithTransactions register: aDeposit.
	
	aReceptiveAccountWithNoTransactions := ReceptiveAccount new.
	
	aPortfolio := Portfolio new. 
	aPortfolio register: aReceptiveAccountWithNoTransactions.
	aPortfolio register: aReceptiveAccountWithTransactions.
	self assert: aPortfolio balance = 50.
	!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:39:25'!
test03bisbalanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly
	| aDeposit aReceptiveAccountWithNoTransactions aReceptiveAccountWithTransactions aPortfolio |
	aDeposit := Deposit for: 50.
	aReceptiveAccountWithTransactions := ReceptiveAccount new.
	aReceptiveAccountWithTransactions register: aDeposit.
	
	aReceptiveAccountWithNoTransactions := ReceptiveAccount new.
	
	aPortfolio := Portfolio new. 
	aPortfolio register: aReceptiveAccountWithNoTransactions.
	aPortfolio register: aReceptiveAccountWithTransactions.
	self assert: aPortfolio balance = 50.
	! !

!methodRemoval: PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 00:39:27'!
test03balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly
	| aDeposit aReceptiveAccountWithNoTransactions aReceptiveAccountWithTransactions aPortfolio |
	aDeposit := Deposit for: 50.
	aReceptiveAccountWithTransactions := ReceptiveAccount new.
	aReceptiveAccountWithTransactions register: aDeposit.
	
	aReceptiveAccountWithNoTransactions := ReceptiveAccount new.
	
	aPortfolio := Portfolio new. 
	aPortfolio register: aReceptiveAccountWithNoTransactions.
	aPortfolio register: aReceptiveAccountWithTransactions.
	self assert: aPortfolio balance = 50.
	!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:39:31'!
test03bisBalanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly
	| aDeposit aReceptiveAccountWithNoTransactions aReceptiveAccountWithTransactions aPortfolio |
	aDeposit := Deposit for: 50.
	aReceptiveAccountWithTransactions := ReceptiveAccount new.
	aReceptiveAccountWithTransactions register: aDeposit.
	
	aReceptiveAccountWithNoTransactions := ReceptiveAccount new.
	
	aPortfolio := Portfolio new. 
	aPortfolio register: aReceptiveAccountWithNoTransactions.
	aPortfolio register: aReceptiveAccountWithTransactions.
	self assert: aPortfolio balance = 50.
	! !

!methodRemoval: PortfolioTest #test03bisbalanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 00:39:33'!
test03bisbalanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly
	| aDeposit aReceptiveAccountWithNoTransactions aReceptiveAccountWithTransactions aPortfolio |
	aDeposit := Deposit for: 50.
	aReceptiveAccountWithTransactions := ReceptiveAccount new.
	aReceptiveAccountWithTransactions register: aDeposit.
	
	aReceptiveAccountWithNoTransactions := ReceptiveAccount new.
	
	aPortfolio := Portfolio new. 
	aPortfolio register: aReceptiveAccountWithNoTransactions.
	aPortfolio register: aReceptiveAccountWithTransactions.
	self assert: aPortfolio balance = 50.
	!

!testRun: #PortfolioTest #test03bisBalanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 00:39:39'!
PASSED!

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/8/2020 00:39:43'!
PASSED!

!testRun: #PortfolioTest #test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:39:43'!
PASSED!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:39:43'!
ERROR!

!testRun: #PortfolioTest #test03bisBalanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 00:39:43'!
PASSED!

!testRun: #PortfolioTest #test04hasRegisteredOfAnEmptyPortfolioIsFalse stamp: 'CR 11/8/2020 00:39:43'!
PASSED!

!testRun: #PortfolioTest #test05hasRegisteredOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:39:43'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:39:43'!
ERROR!

!testRun: #PortfolioTest #test07transactionsOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/8/2020 00:39:43'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:39:43'!
PASSED!

!testRun: #PortfolioTest #test09hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:39:43'!
ERROR!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 00:39:43'!
ERROR!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:39:52'!
ERROR!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:39:52'!
ERROR!
!ReceptiveAccount methodsFor: 'nil' stamp: 'CR 11/8/2020 00:40:28'!
collectReachableEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded
! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/8/2020 00:40:49'!
PASSED!

!testRun: #PortfolioTest #test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:40:49'!
PASSED!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:40:49'!
ERROR!

!testRun: #PortfolioTest #test03bisBalanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 00:40:49'!
PASSED!

!testRun: #PortfolioTest #test04hasRegisteredOfAnEmptyPortfolioIsFalse stamp: 'CR 11/8/2020 00:40:49'!
PASSED!

!testRun: #PortfolioTest #test05hasRegisteredOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:40:49'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:40:49'!
ERROR!

!testRun: #PortfolioTest #test07transactionsOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/8/2020 00:40:49'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:40:49'!
PASSED!

!testRun: #PortfolioTest #test09hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:40:49'!
ERROR!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 00:40:49'!
ERROR!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:40:54'!
ERROR!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:40:54'!
ERROR!
!Portfolio methodsFor: 'verification' stamp: 'CR 11/8/2020 00:42:15' prior: 50894513!
entriesReachableIfAdded
	| entriesReachableByMe |
	entriesReachableByMe := OrderedCollection new.
	self collectReachableEntriesAndSaveIn: entriesReachableByMe. 
	^ entriesReachableByMe
	
	! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/8/2020 00:42:20'!
PASSED!

!testRun: #PortfolioTest #test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:42:20'!
PASSED!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:42:20'!
ERROR!

!testRun: #PortfolioTest #test03bisBalanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 00:42:20'!
PASSED!

!testRun: #PortfolioTest #test04hasRegisteredOfAnEmptyPortfolioIsFalse stamp: 'CR 11/8/2020 00:42:20'!
PASSED!

!testRun: #PortfolioTest #test05hasRegisteredOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:42:20'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:42:20'!
ERROR!

!testRun: #PortfolioTest #test07transactionsOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/8/2020 00:42:20'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:42:20'!
PASSED!

!testRun: #PortfolioTest #test09hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:42:20'!
ERROR!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 00:42:20'!
ERROR!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:42:25'!
ERROR!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:42:25'!
ERROR!
!Portfolio methodsFor: 'initialization' stamp: 'CR 11/8/2020 00:43:06' prior: 50893948 overrides: 16896425!
initialize
	portfolioEntries := OrderedCollection new.
	portfoliosWhereIncluded := OrderedCollection new.! !
!Portfolio methodsFor: 'adding to portfolio' stamp: 'CR 11/8/2020 00:43:57' prior: 50894110 overrides: 50894124!
addIfPossibleToPortfolioEntries: aPortfolioToBeAddedTo

	aPortfolioToBeAddedTo verifyThereIsNoPortfolioEntryLoopWhenAdding: self.
	aPortfolioToBeAddedTo addToPorfolio: self.
	portfoliosWhereIncluded add: aPortfolioToBeAddedTo.
	
	
	! !
!Portfolio methodsFor: 'adding to portfolio' stamp: 'CR 11/8/2020 00:44:51'!
addNewPortfolioWhereIncluded: aPortfolioToBeAddedTo

	^ portfoliosWhereIncluded add: aPortfolioToBeAddedTo! !
!Portfolio methodsFor: 'adding to portfolio' stamp: 'CR 11/8/2020 00:44:51' prior: 50894993 overrides: 50894124!
addIfPossibleToPortfolioEntries: aPortfolioToBeAddedTo

	aPortfolioToBeAddedTo verifyThereIsNoPortfolioEntryLoopWhenAdding: self.
	aPortfolioToBeAddedTo addToPorfolio: self.
	self addNewPortfolioWhereIncluded: aPortfolioToBeAddedTo.
	
	
	! !
!Portfolio methodsFor: 'adding to portfolio' stamp: 'CR 11/8/2020 00:44:58' prior: 50895003!
addNewPortfolioWhereIncluded: aPortfolioToBeAddedTo

	portfoliosWhereIncluded add: aPortfolioToBeAddedTo! !

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:45:08'!
PASSED!

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/8/2020 00:45:10'!
PASSED!

!testRun: #PortfolioTest #test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:45:10'!
PASSED!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:45:10'!
PASSED!

!testRun: #PortfolioTest #test03bisBalanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 00:45:10'!
PASSED!

!testRun: #PortfolioTest #test04hasRegisteredOfAnEmptyPortfolioIsFalse stamp: 'CR 11/8/2020 00:45:10'!
PASSED!

!testRun: #PortfolioTest #test05hasRegisteredOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:45:10'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:45:10'!
PASSED!

!testRun: #PortfolioTest #test07transactionsOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/8/2020 00:45:10'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:45:10'!
PASSED!

!testRun: #PortfolioTest #test09hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:45:10'!
PASSED!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 00:45:10'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:46:53'!
test03bis_balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly
	| aDeposit aReceptiveAccountWithNoTransactions aReceptiveAccountWithTransactions aPortfolio |
	aDeposit := Deposit for: 50.
	aReceptiveAccountWithTransactions := ReceptiveAccount new.
	aReceptiveAccountWithTransactions register: aDeposit.
	
	aReceptiveAccountWithNoTransactions := ReceptiveAccount new.
	
	aPortfolio := Portfolio new. 
	aPortfolio register: aReceptiveAccountWithNoTransactions.
	aPortfolio register: aReceptiveAccountWithTransactions.
	self assert: aPortfolio balance = 50.
	! !

!methodRemoval: PortfolioTest #test03bisBalanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 00:46:56'!
test03bisBalanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly
	| aDeposit aReceptiveAccountWithNoTransactions aReceptiveAccountWithTransactions aPortfolio |
	aDeposit := Deposit for: 50.
	aReceptiveAccountWithTransactions := ReceptiveAccount new.
	aReceptiveAccountWithTransactions register: aDeposit.
	
	aReceptiveAccountWithNoTransactions := ReceptiveAccount new.
	
	aPortfolio := Portfolio new. 
	aPortfolio register: aReceptiveAccountWithNoTransactions.
	aPortfolio register: aReceptiveAccountWithTransactions.
	self assert: aPortfolio balance = 50.
	!

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/8/2020 00:46:59'!
PASSED!

!testRun: #PortfolioTest #test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:46:59'!
PASSED!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:46:59'!
PASSED!

!testRun: #PortfolioTest #test03bis_balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 00:46:59'!
PASSED!

!testRun: #PortfolioTest #test04hasRegisteredOfAnEmptyPortfolioIsFalse stamp: 'CR 11/8/2020 00:46:59'!
PASSED!

!testRun: #PortfolioTest #test05hasRegisteredOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:46:59'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:46:59'!
PASSED!

!testRun: #PortfolioTest #test07transactionsOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/8/2020 00:46:59'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:46:59'!
PASSED!

!testRun: #PortfolioTest #test09hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:46:59'!
PASSED!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 00:46:59'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:48:28'!
test09transactionOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly
	| aPortfolioWithTwoAccounts aPortfolioWithMany |
	
	aPortfolioWithTwoAccounts := Portfolio new.
	aPortfolioWithTwoAccounts register: receptiveAccountWithNoTransactions.

	aPortfolioWithTwoAccounts register: receptiveAccountWithDepositOfHundred.
	
	aPortfolioWithMany := Portfolio new. 
	aPortfolioWithMany register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithMany register: aPortfolioWithTwoAccounts.
	
	self assert: (aPortfolioWithMany transactions size) = 2.
	self assert: (aPortfolioWithMany transactions includes: depositOfHundred).	
	self assert: (aPortfolioWithMany transactions includes: depositOfFifty).	! !

!methodRemoval: PortfolioTest #test09hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:48:34'!
test09hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly
	| aPortfolioWithTwoAccounts aPortfolioWithMany |
	
	aPortfolioWithTwoAccounts := Portfolio new.
	aPortfolioWithTwoAccounts register: receptiveAccountWithNoTransactions.

	aPortfolioWithTwoAccounts register: receptiveAccountWithDepositOfHundred.
	
	aPortfolioWithMany := Portfolio new. 
	aPortfolioWithMany register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithMany register: aPortfolioWithTwoAccounts.
	
	self assert: (aPortfolioWithMany transactions size) = 2.
	self assert: (aPortfolioWithMany transactions includes: depositOfHundred).	
	self assert: (aPortfolioWithMany transactions includes: depositOfFifty).	!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:50:29' prior: 50895076!
test03bis_balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly
	| aReceptiveAccountWithNoTransactions aReceptiveAccountWithTransactions aPortfolio |
	
	aReceptiveAccountWithTransactions register: depositOfFifty.
	
	aReceptiveAccountWithNoTransactions := ReceptiveAccount new.
	
	aPortfolio := Portfolio new. 
	aPortfolio register: aReceptiveAccountWithNoTransactions.
	aPortfolio register: aReceptiveAccountWithTransactions.
	self assert: aPortfolio balance = 50.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:50:59' prior: 50895215!
test03bis_balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly
	| aReceptiveAccountWithNoTransactions aPortfolio |
	
	aReceptiveAccountWithNoTransactions := ReceptiveAccount new.
	
	aPortfolio := Portfolio new. 
	aPortfolio register: aReceptiveAccountWithNoTransactions.
	aPortfolio register: receptiveAccountWithDepositOfFifty.
	self assert: aPortfolio balance = 50.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:51:23' prior: 50895233!
test03bis_balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly
	| aPortfolio |
	
	aPortfolio := Portfolio new. 
	aPortfolio register: receptiveAccountWithNoTransactions.
	aPortfolio register: receptiveAccountWithDepositOfFifty.
	self assert: aPortfolio balance = 50.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:51:59' prior: 50893444!
test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly
	| aPortfolioWithBalanceZero |
	
	aPortfolioWithBalanceZero := Portfolio new. 
	aPortfolioWithBalanceZero register: receptiveAccountWithNoTransactions.
	self assert: aPortfolioWithBalanceZero balance = 0.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:52:25' prior: 50895260!
test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly
	| aPortfolioWithBalanceZero |
	
	aPortfolioWithBalanceZero := Portfolio new. 
	aPortfolioWithBalanceZero register: receptiveAccountWithNoTransactions.
	self assert: aPortfolioWithBalanceZero balance = 0.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:53:14' prior: 50895272!
test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly
	| aPortfolioWithBalanceZero |
	aPortfolioWithBalanceZero := Portfolio new. 
	
	self assert:  [aPortfolioWithBalanceZero register: receptiveAccountWithNoTransactions] doesNotChange: [aPortfolioWithBalanceZero balance].
	! !

!testRun: #PortfolioTest #test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:53:17'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:53:32' prior: 50893473!
test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly
	| aPortfolioWithTwoAccounts aPortfolioWithMany |
	
	aPortfolioWithTwoAccounts := Portfolio new.
	aPortfolioWithTwoAccounts register: receptiveAccountWithNoTransactions.
	aPortfolioWithTwoAccounts register: receptiveAccountWithDepositOfHundred.
	
	aPortfolioWithMany := Portfolio new. 
	aPortfolioWithMany register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithMany register: aPortfolioWithTwoAccounts.
	
	self assert: aPortfolioWithMany balance = 150.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:54:06' prior: 50895300!
test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly
	| aPortfolioWithTwoAccounts aPortfolioWithAnAccountAndAPortfolio |
	
	aPortfolioWithTwoAccounts := Portfolio new.
	aPortfolioWithTwoAccounts register: receptiveAccountWithNoTransactions.
	aPortfolioWithTwoAccounts register: receptiveAccountWithDepositOfHundred.
	
	aPortfolioWithAnAccountAndAPortfolio := Portfolio new. 
	aPortfolioWithAnAccountAndAPortfolio register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithAnAccountAndAPortfolio register: aPortfolioWithTwoAccounts.
	
	self assert: aPortfolioWithAnAccountAndAPortfolio balance = 150.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:54:33' prior: 50895248!
test03bis_balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly
	| aPortfolioWithTwoAccounts |
	
	aPortfolioWithTwoAccounts := Portfolio new. 
	aPortfolioWithTwoAccounts register: receptiveAccountWithNoTransactions.
	aPortfolioWithTwoAccounts register: receptiveAccountWithDepositOfFifty.
	self assert: aPortfolioWithTwoAccounts balance = 50.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:55:25' prior: 50893501!
test05hasRegisteredOfPortfolioWithOneReceptiveAccountWorksCorrectly
	| aPortfolioWithOneAccount |
	
	aPortfolioWithOneAccount := Portfolio new. 
	aPortfolioWithOneAccount register: receptiveAccountWithDepositOfHundred.
	self assert: (aPortfolioWithOneAccount hasRegistered: depositOfHundred).
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:55:52' prior: 50893511!
test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly
	| aPortfolioWithTwoAccounts aPortfolioWithAnAccountAndAPortfolio |
	
	aPortfolioWithTwoAccounts := Portfolio new.
	aPortfolioWithTwoAccounts register: receptiveAccountWithNoTransactions.

	aPortfolioWithTwoAccounts register: receptiveAccountWithDepositOfHundred.
	
	aPortfolioWithAnAccountAndAPortfolio := Portfolio new. 
	aPortfolioWithAnAccountAndAPortfolio register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithAnAccountAndAPortfolio register: aPortfolioWithTwoAccounts.
	
	self assert: (aPortfolioWithAnAccountAndAPortfolio hasRegistered: depositOfFifty).
	self assert: (aPortfolioWithAnAccountAndAPortfolio hasRegistered: depositOfHundred).
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:57:16' prior: 50895369!
test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly
	| aPortfolioWithTwoAccounts aPortfolioWithAnAccountAndAPortfolio |
	
	aPortfolioWithTwoAccounts := Portfolio new.
	aPortfolioWithTwoAccounts register: receptiveAccountWithNoTransactions.
	aPortfolioWithTwoAccounts register: receptiveAccountWithDepositOfHundred.
	
	aPortfolioWithAnAccountAndAPortfolio := Portfolio new. 
	aPortfolioWithAnAccountAndAPortfolio register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithAnAccountAndAPortfolio register: aPortfolioWithTwoAccounts.
	
	self assert: (aPortfolioWithAnAccountAndAPortfolio hasRegistered: depositOfFifty).
	self assert: (aPortfolioWithAnAccountAndAPortfolio hasRegistered: depositOfHundred).
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:57:57' prior: 50893541!
test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly
	| aPortfolioWithOneAccount |
	
	aPortfolioWithOneAccount := Portfolio new. 
	aPortfolioWithOneAccount register: receptiveAccountWithDepositOfFifty.
	self assert: (aPortfolioWithOneAccount transactions size) = 1.
	self assert: aPortfolioWithOneAccount transactions includes: depositOfFifty.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:58:53' prior: 50895163!
test09transactionOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly
	| aPortfolioWithTwoAccounts aPortfolioWithAnAccountAndAPortfolio |
	
	aPortfolioWithTwoAccounts := Portfolio new.
	aPortfolioWithTwoAccounts register: receptiveAccountWithNoTransactions.

	aPortfolioWithTwoAccounts register: receptiveAccountWithDepositOfHundred.
	
	aPortfolioWithAnAccountAndAPortfolio := Portfolio new. 
	aPortfolioWithAnAccountAndAPortfolio register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithAnAccountAndAPortfolio register: aPortfolioWithTwoAccounts.
	
	self assert: (aPortfolioWithAnAccountAndAPortfolio transactions size) = 2.
	self assert: (aPortfolioWithAnAccountAndAPortfolio transactions includes: depositOfHundred).	
	self assert: (aPortfolioWithAnAccountAndAPortfolio transactions includes: depositOfFifty).	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:59:27' prior: 50895435!
test09transactionOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly
	| aPortfolioWithTwoAccounts aPortfolioWithAnAccountAndAPortfolio |
	
	aPortfolioWithTwoAccounts := Portfolio new.
	aPortfolioWithTwoAccounts register: receptiveAccountWithNoTransactions.
	aPortfolioWithTwoAccounts register: receptiveAccountWithDepositOfHundred.
	
	aPortfolioWithAnAccountAndAPortfolio := Portfolio new. 
	aPortfolioWithAnAccountAndAPortfolio register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithAnAccountAndAPortfolio register: aPortfolioWithTwoAccounts.
	
	self assert: (aPortfolioWithAnAccountAndAPortfolio transactions size) = 2.
	self assert: (aPortfolioWithAnAccountAndAPortfolio transactions includes: depositOfHundred).	
	self assert: (aPortfolioWithAnAccountAndAPortfolio transactions includes: depositOfFifty).	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 01:00:14' prior: 50893578!
test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio
	| aPortfolioWithTwoAccounts aPortfolioWithAnAccountAndAPortfolio |
	
	aPortfolioWithTwoAccounts := Portfolio new.
	aPortfolioWithTwoAccounts register: receptiveAccountWithNoTransactions.

	aPortfolioWithTwoAccounts register: receptiveAccountWithDepositOfHundred.
	
	aPortfolioWithAnAccountAndAPortfolio := Portfolio new. 
	aPortfolioWithAnAccountAndAPortfolio register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithAnAccountAndAPortfolio register: aPortfolioWithTwoAccounts.
	
	receptiveAccountWithDepositOfHundred register: withdrawOfTwenty.
	
	self assert: (aPortfolioWithAnAccountAndAPortfolio balance) = 130.
	self assert: (aPortfolioWithAnAccountAndAPortfolio transactions includes: depositOfHundred).	
	self assert: (aPortfolioWithAnAccountAndAPortfolio transactions includes: depositOfFifty).	
	self assert: (aPortfolioWithAnAccountAndAPortfolio transactions includes: withdrawOfTwenty).	! !

col := {2,1,2}!

col := #(2 3)!

 #(2 3) !

col := OrderedCollection new. !

col := OrderedCollection new. !

col add: 3!

col add: 3!

col add: 3!

col!

col print.!

col printString!

col printStore!

col printOn: self.!

lala := OrderedCollection with: 2 with: 3.!

lala := OrderedCollection with: 2 with: 3.!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 01:06:03' prior: 50895493!
test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio
	| aPortfolioWithTwoAccounts aPortfolioWithAnAccountAndAPortfolio |
	
	aPortfolioWithTwoAccounts := Portfolio new.
	aPortfolioWithTwoAccounts register: receptiveAccountWithNoTransactions.

	aPortfolioWithTwoAccounts register: receptiveAccountWithDepositOfHundred.
	
	aPortfolioWithAnAccountAndAPortfolio := Portfolio new. 
	aPortfolioWithAnAccountAndAPortfolio register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithAnAccountAndAPortfolio register: aPortfolioWithTwoAccounts.
	
	receptiveAccountWithDepositOfHundred register: withdrawOfTwenty.
	
	self assert: (aPortfolioWithAnAccountAndAPortfolio balance) = 130.
	self assert: (aPortfolioWithAnAccountAndAPortfolio transactions =  depositOfHundred).	
	self assert: (aPortfolioWithAnAccountAndAPortfolio transactions includes: depositOfFifty).	
	self assert: (aPortfolioWithAnAccountAndAPortfolio transactions includes: withdrawOfTwenty).	! !
!Portfolio methodsFor: 'initialization' stamp: 'CR 11/8/2020 01:06:57' prior: 50894986 overrides: 16896425!
initialize
	portfolioEntries := Bag new.
	portfoliosWhereIncluded := OrderedCollection new.! !
!Portfolio methodsFor: 'initialization' stamp: 'CR 11/8/2020 01:07:03' prior: 50895570 overrides: 16896425!
initialize
	portfolioEntries := Bag new.
	portfoliosWhereIncluded := Bag new.! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/8/2020 01:07:07'!
PASSED!

!testRun: #PortfolioTest #test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:07:07'!
PASSED!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:07:07'!
PASSED!

!testRun: #PortfolioTest #test03bis_balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 01:07:07'!
PASSED!

!testRun: #PortfolioTest #test04hasRegisteredOfAnEmptyPortfolioIsFalse stamp: 'CR 11/8/2020 01:07:07'!
PASSED!

!testRun: #PortfolioTest #test05hasRegisteredOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:07:07'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:07:07'!
PASSED!

!testRun: #PortfolioTest #test07transactionsOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/8/2020 01:07:07'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:07:07'!
PASSED!

!testRun: #PortfolioTest #test09transactionOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:07:07'!
PASSED!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 01:07:07'!
FAILURE!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 01:07:07'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 01:07:58' prior: 50895536!
test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio
	| aPortfolioWithTwoAccounts aPortfolioWithAnAccountAndAPortfolio |
	
	aPortfolioWithTwoAccounts := Portfolio new.
	aPortfolioWithTwoAccounts register: receptiveAccountWithNoTransactions.

	aPortfolioWithTwoAccounts register: receptiveAccountWithDepositOfHundred.
	
	aPortfolioWithAnAccountAndAPortfolio := Portfolio new. 
	aPortfolioWithAnAccountAndAPortfolio register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithAnAccountAndAPortfolio register: aPortfolioWithTwoAccounts.
	
	receptiveAccountWithDepositOfHundred register: withdrawOfTwenty.
	
	self assert: (aPortfolioWithAnAccountAndAPortfolio balance) = 130.
	self assert: (aPortfolioWithAnAccountAndAPortfolio transactions =  (Bag with: depositOfHundred with: depositOfFifty with: withdrawOfTwenty)).	
	
	! !

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 01:08:14'!
FAILURE!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 01:08:14'!
FAILURE!

lala := Bag with: 1 with:3!

lala2 := OrderedCollection with:3 with:1!

lala = lala2!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 01:12:38' prior: 50895631!
test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio
	| aPortfolioWithTwoAccounts aPortfolioWithAnAccountAndAPortfolio setWithTransactions|
	
	setWithTransactions := Bag with: depositOfHundred with: depositOfFifty with: withdrawOfTwenty.
	
	aPortfolioWithTwoAccounts := Portfolio new.
	aPortfolioWithTwoAccounts register: receptiveAccountWithNoTransactions.

	aPortfolioWithTwoAccounts register: receptiveAccountWithDepositOfHundred.
	
	aPortfolioWithAnAccountAndAPortfolio := Portfolio new. 
	aPortfolioWithAnAccountAndAPortfolio register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithAnAccountAndAPortfolio register: aPortfolioWithTwoAccounts.
	
	receptiveAccountWithDepositOfHundred register: withdrawOfTwenty.
	
	self assert: (aPortfolioWithAnAccountAndAPortfolio balance) = 130.
	self assert: (aPortfolioWithAnAccountAndAPortfolio transactions =  (Bag with: depositOfHundred with: depositOfFifty with: withdrawOfTwenty)).	
	
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 01:12:47' prior: 50895671!
test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio
	| aPortfolioWithTwoAccounts aPortfolioWithAnAccountAndAPortfolio setWithTransactions|
	
	aPortfolioWithTwoAccounts := Portfolio new.
	aPortfolioWithTwoAccounts register: receptiveAccountWithNoTransactions.

	aPortfolioWithTwoAccounts register: receptiveAccountWithDepositOfHundred.
	
	aPortfolioWithAnAccountAndAPortfolio := Portfolio new. 
	aPortfolioWithAnAccountAndAPortfolio register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithAnAccountAndAPortfolio register: aPortfolioWithTwoAccounts.
	
	receptiveAccountWithDepositOfHundred register: withdrawOfTwenty.
	
	setWithTransactions := Bag with: depositOfHundred with: depositOfFifty with: withdrawOfTwenty.
	
	self assert: (aPortfolioWithAnAccountAndAPortfolio balance) = 130.
	self assert: (aPortfolioWithAnAccountAndAPortfolio transactions =  (Bag with: depositOfHundred with: depositOfFifty with: withdrawOfTwenty)).	
	
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 01:13:21' prior: 50895704!
test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio
	| aPortfolioWithTwoAccounts aPortfolioWithAnAccountAndAPortfolio setWithTransactions|
	
	aPortfolioWithTwoAccounts := Portfolio new.
	aPortfolioWithTwoAccounts register: receptiveAccountWithNoTransactions.

	aPortfolioWithTwoAccounts register: receptiveAccountWithDepositOfHundred.
	
	aPortfolioWithAnAccountAndAPortfolio := Portfolio new. 
	aPortfolioWithAnAccountAndAPortfolio register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithAnAccountAndAPortfolio register: aPortfolioWithTwoAccounts.
	
	receptiveAccountWithDepositOfHundred register: withdrawOfTwenty.
	
	setWithTransactions := Bag with: depositOfHundred with: depositOfFifty with: withdrawOfTwenty.
	
	self assert: (aPortfolioWithAnAccountAndAPortfolio balance) = 130.
	self assert: (aPortfolioWithAnAccountAndAPortfolio transactions isSameSetAs: setWithTransactions).
	
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 01:14:50' prior: 50895737!
test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio
	| aPortfolioWithTwoAccounts aPortfolioWithAnAccountAndAPortfolio setWithTransactions|
	
	aPortfolioWithTwoAccounts := Portfolio new.
	aPortfolioWithTwoAccounts register: receptiveAccountWithNoTransactions.

	aPortfolioWithTwoAccounts register: receptiveAccountWithDepositOfHundred.
	
	aPortfolioWithAnAccountAndAPortfolio := Portfolio new. 
	aPortfolioWithAnAccountAndAPortfolio register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithAnAccountAndAPortfolio register: aPortfolioWithTwoAccounts.
	
	receptiveAccountWithDepositOfHundred register: withdrawOfTwenty.
	
	setWithTransactions := Bag with: depositOfHundred with: depositOfFifty with: withdrawOfTwenty.
	
	self assert: (aPortfolioWithAnAccountAndAPortfolio balance) = 130.
	self assertThat: (aPortfolioWithAnAccountAndAPortfolio transactions) isSameSetAs: setWithTransactions.
	
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 01:17:38'!
assertThat: portfolioTransactions isSameSetAs: transactionsThatShouldBeIncluded
	
	self assert: (transactionsThatShouldBeIncluded allSatisfy: [:transactionThatShouldBeIncluded | portfolioTransactions includes: transactionThatShouldBeIncluded]).
	self assert: portfolioTransactions size = transactionsThatShouldBeIncluded size.! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/8/2020 01:17:42'!
PASSED!

!testRun: #PortfolioTest #test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:17:42'!
PASSED!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:17:42'!
PASSED!

!testRun: #PortfolioTest #test03bis_balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 01:17:42'!
PASSED!

!testRun: #PortfolioTest #test04hasRegisteredOfAnEmptyPortfolioIsFalse stamp: 'CR 11/8/2020 01:17:42'!
PASSED!

!testRun: #PortfolioTest #test05hasRegisteredOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:17:42'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:17:42'!
PASSED!

!testRun: #PortfolioTest #test07transactionsOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/8/2020 01:17:42'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:17:42'!
PASSED!

!testRun: #PortfolioTest #test09transactionOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:17:42'!
PASSED!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 01:17:42'!
PASSED!
!Portfolio methodsFor: 'verification' stamp: 'CR 11/8/2020 01:18:35' prior: 50894923!
entriesReachableIfAdded
	| entriesReachableByMe |
	entriesReachableByMe := Bag new.
	self collectReachableEntriesAndSaveIn: entriesReachableByMe. 
	^ entriesReachableByMe
	
	! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'CR 11/8/2020 01:18:57' prior: 50893980 overrides: 16896425!
initialize

	transactions := Bag new.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CR 11/8/2020 01:19:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CR 11/8/2020 01:19:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CR 11/8/2020 01:19:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CR 11/8/2020 01:19:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CR 11/8/2020 01:19:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CR 11/8/2020 01:19:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CR 11/8/2020 01:19:05'!
PASSED!

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/8/2020 01:19:09'!
PASSED!

!testRun: #PortfolioTest #test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:19:09'!
PASSED!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:19:09'!
PASSED!

!testRun: #PortfolioTest #test03bis_balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 01:19:09'!
PASSED!

!testRun: #PortfolioTest #test04hasRegisteredOfAnEmptyPortfolioIsFalse stamp: 'CR 11/8/2020 01:19:09'!
PASSED!

!testRun: #PortfolioTest #test05hasRegisteredOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:19:09'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:19:09'!
PASSED!

!testRun: #PortfolioTest #test07transactionsOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/8/2020 01:19:09'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:19:09'!
PASSED!

!testRun: #PortfolioTest #test09transactionOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:19:09'!
PASSED!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 01:19:09'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 01:22:17'!
test11addingPortfolioThatCreatesLoopRaisesError
	| aPortfolioWithAPortfolio aPortfolioWithAnAccountAndAPortfolio |
	
	aPortfolioWithAPortfolio := Portfolio new.
	
	aPortfolioWithAnAccountAndAPortfolio := Portfolio new. 
	aPortfolioWithAnAccountAndAPortfolio register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithAnAccountAndAPortfolio register: aPortfolioWithAPortfolio.
	
	aPortfolioWithAPortfolio register: aPortfolioWithAnAccountAndAPortfolio. 

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 01:23:18' prior: 50895942!
test11addingPortfolioThatCreatesLoopRaisesError
	| aPortfolioWithAPortfolio aPortfolioWithAnAccountAndAPortfolio |
	
	aPortfolioWithAPortfolio := Portfolio new.
	
	aPortfolioWithAnAccountAndAPortfolio := Portfolio new. 
	aPortfolioWithAnAccountAndAPortfolio register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithAnAccountAndAPortfolio register: aPortfolioWithAPortfolio.
	
	self should: [aPortfolioWithAPortfolio register: aPortfolioWithAnAccountAndAPortfolio] 
	raise: Error   
	withMessageText: Portfolio errorCantAddBecauseCreatesLoop.
	

	! !

----SNAPSHOT----(8 November 2020 01:23:29) CuisUniversity-4384.image priorSource: 18015294!

!testRun: #PortfolioTest #test11addingPortfolioThatCreatesLoopRaisesError stamp: 'CR 11/8/2020 01:23:32'!
FAILURE!

!testRun: #PortfolioTest #test11addingPortfolioThatCreatesLoopRaisesError stamp: 'CR 11/8/2020 01:23:32'!
FAILURE!

aPortfolioEntryToBeAdded!

aPortfolioThatMightCreateLoop!

entriesReachableByPortfolioThatMightCreateLoop!

self at: 1!

self print!

self print!

!testRun: #PortfolioTest #test11addingPortfolioThatCreatesLoopRaisesError stamp: 'CR 11/8/2020 01:28:57'!
FAILURE!

entriesReachableByPortfolioThatMightCreateLoop!

self sortedElements !

Portfolio!
!Portfolio methodsFor: 'verification' stamp: 'CR 11/8/2020 01:30:42' prior: 50895857!
entriesReachableIfAdded
	| entriesReachableByMe |
	entriesReachableByMe := OrderedCollection new.
	self collectReachableEntriesAndSaveIn: entriesReachableByMe. 
	^ entriesReachableByMe
	
	! !

!testRun: #PortfolioTest #test11addingPortfolioThatCreatesLoopRaisesError stamp: 'CR 11/8/2020 01:30:49'!
FAILURE!

!testRun: #PortfolioTest #test11addingPortfolioThatCreatesLoopRaisesError stamp: 'CR 11/8/2020 01:30:49'!
FAILURE!

entriesReachableByPortfolioThatMightCreateLoop!

entriesReachableByPortfolioThatMightCreateLoop includes: self!
!Portfolio methodsFor: 'errors' stamp: 'CR 11/8/2020 01:32:50' prior: 50893926!
signalCantAddEntryBecauseCreatesLoop
	^ self error: self class errorCantAddBecauseCreatesLoop.! !

!testRun: #PortfolioTest #test11addingPortfolioThatCreatesLoopRaisesError stamp: 'CR 11/8/2020 01:32:56'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 01:34:34'!
test11addingPortfolioToPortfolioWhereIncludedRaisesError
	| aPortfolioWithAPortfolio aPortfolioWithAnAccountAndAPortfolio |
	
	aPortfolioWithAPortfolio := Portfolio new.
	
	aPortfolioWithAnAccountAndAPortfolio := Portfolio new. 
	aPortfolioWithAnAccountAndAPortfolio register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithAnAccountAndAPortfolio register: aPortfolioWithAPortfolio.
	
	self should: [aPortfolioWithAPortfolio register: aPortfolioWithAnAccountAndAPortfolio] 
	raise: Error   
	withMessageText: Portfolio errorCantAddBecauseCreatesLoop.
	

	! !

!methodRemoval: PortfolioTest #test11addingPortfolioThatCreatesLoopRaisesError stamp: 'CR 11/8/2020 01:34:38'!
test11addingPortfolioThatCreatesLoopRaisesError
	| aPortfolioWithAPortfolio aPortfolioWithAnAccountAndAPortfolio |
	
	aPortfolioWithAPortfolio := Portfolio new.
	
	aPortfolioWithAnAccountAndAPortfolio := Portfolio new. 
	aPortfolioWithAnAccountAndAPortfolio register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithAnAccountAndAPortfolio register: aPortfolioWithAPortfolio.
	
	self should: [aPortfolioWithAPortfolio register: aPortfolioWithAnAccountAndAPortfolio] 
	raise: Error   
	withMessageText: Portfolio errorCantAddBecauseCreatesLoop.
	

	!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 01:37:13'!
test12addingPortfolioToPortfolioWhereIncludedRaisesError
	| rootPorfolio childPortfolio grandchildPorfolio |
	
	childPortfolio := Portfolio new.
	grandchildPorfolio := Portfolio new.
	
	childPortfolio register: grandchildPorfolio.
	
	rootPorfolio := Portfolio new. 
	rootPorfolio register: receptiveAccountWithDepositOfFifty.
	rootPorfolio register: childPortfolio.

	
	self should: [grandchildPorfolio register: rootPorfolio] 
	raise: Error   
	withMessageText: Portfolio errorCantAddBecauseCreatesLoop.
	

	! !

!testRun: #PortfolioTest #test12addingPortfolioToPortfolioWhereIncludedRaisesError stamp: 'CR 11/8/2020 01:37:17'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 01:38:50'!
test12addingPortfolioToPortfolioWhereIndirectlyIncludedRaisesError
	| rootPorfolio childPortfolio grandchildPorfolio |
	
	childPortfolio := Portfolio new.
	grandchildPorfolio := Portfolio new.
	
	childPortfolio register: grandchildPorfolio.
	
	rootPorfolio := Portfolio new. 
	rootPorfolio register: receptiveAccountWithDepositOfFifty.
	rootPorfolio register: childPortfolio.

	
	self should: [grandchildPorfolio register: rootPorfolio] 
	raise: Error   
	withMessageText: Portfolio errorCantAddBecauseCreatesLoop.
	

	! !

!methodRemoval: PortfolioTest #test12addingPortfolioToPortfolioWhereIncludedRaisesError stamp: 'CR 11/8/2020 01:38:55'!
test12addingPortfolioToPortfolioWhereIncludedRaisesError
	| rootPorfolio childPortfolio grandchildPorfolio |
	
	childPortfolio := Portfolio new.
	grandchildPorfolio := Portfolio new.
	
	childPortfolio register: grandchildPorfolio.
	
	rootPorfolio := Portfolio new. 
	rootPorfolio register: receptiveAccountWithDepositOfFifty.
	rootPorfolio register: childPortfolio.

	
	self should: [grandchildPorfolio register: rootPorfolio] 
	raise: Error   
	withMessageText: Portfolio errorCantAddBecauseCreatesLoop.
	

	!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 01:39:01'!
test11addingPortfolioToPortfolioWhereDirectlyIncludedRaisesError
	| aPortfolioWithAPortfolio aPortfolioWithAnAccountAndAPortfolio |
	
	aPortfolioWithAPortfolio := Portfolio new.
	
	aPortfolioWithAnAccountAndAPortfolio := Portfolio new. 
	aPortfolioWithAnAccountAndAPortfolio register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithAnAccountAndAPortfolio register: aPortfolioWithAPortfolio.
	
	self should: [aPortfolioWithAPortfolio register: aPortfolioWithAnAccountAndAPortfolio] 
	raise: Error   
	withMessageText: Portfolio errorCantAddBecauseCreatesLoop.
	

	! !

!methodRemoval: PortfolioTest #test11addingPortfolioToPortfolioWhereIncludedRaisesError stamp: 'CR 11/8/2020 01:39:08'!
test11addingPortfolioToPortfolioWhereIncludedRaisesError
	| aPortfolioWithAPortfolio aPortfolioWithAnAccountAndAPortfolio |
	
	aPortfolioWithAPortfolio := Portfolio new.
	
	aPortfolioWithAnAccountAndAPortfolio := Portfolio new. 
	aPortfolioWithAnAccountAndAPortfolio register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithAnAccountAndAPortfolio register: aPortfolioWithAPortfolio.
	
	self should: [aPortfolioWithAPortfolio register: aPortfolioWithAnAccountAndAPortfolio] 
	raise: Error   
	withMessageText: Portfolio errorCantAddBecauseCreatesLoop.
	

	!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 01:39:33' prior: 50896131!
test11addingPortfolioToPortfolioWhereDirectlyIncludedRaisesError
	| aPortfolioWithAPortfolio rootPorfolio |
	
	aPortfolioWithAPortfolio := Portfolio new.
	
	rootPorfolio := Portfolio new. 
	rootPorfolio register: receptiveAccountWithDepositOfFifty.
	rootPorfolio register: aPortfolioWithAPortfolio.
	
	self should: [aPortfolioWithAPortfolio register: rootPorfolio] 
	raise: Error   
	withMessageText: Portfolio errorCantAddBecauseCreatesLoop.
	

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 01:39:54' prior: 50896173!
test11addingPortfolioToPortfolioWhereDirectlyIncludedRaisesError
	| rootPorfolio childPortfolio |
	
	childPortfolio := Portfolio new.
	
	rootPorfolio := Portfolio new. 
	rootPorfolio register: receptiveAccountWithDepositOfFifty.
	rootPorfolio register: childPortfolio.
	
	self should: [childPortfolio register: rootPorfolio] 
	raise: Error   
	withMessageText: Portfolio errorCantAddBecauseCreatesLoop.
	

	! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/8/2020 01:39:59'!
PASSED!

!testRun: #PortfolioTest #test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:39:59'!
PASSED!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:39:59'!
PASSED!

!testRun: #PortfolioTest #test03bis_balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 01:39:59'!
PASSED!

!testRun: #PortfolioTest #test04hasRegisteredOfAnEmptyPortfolioIsFalse stamp: 'CR 11/8/2020 01:39:59'!
PASSED!

!testRun: #PortfolioTest #test05hasRegisteredOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:39:59'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:39:59'!
PASSED!

!testRun: #PortfolioTest #test07transactionsOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/8/2020 01:39:59'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:39:59'!
PASSED!

!testRun: #PortfolioTest #test09transactionOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:39:59'!
PASSED!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 01:39:59'!
PASSED!

!testRun: #PortfolioTest #test11addingPortfolioToPortfolioWhereDirectlyIncludedRaisesError stamp: 'CR 11/8/2020 01:39:59'!
PASSED!

!testRun: #PortfolioTest #test12addingPortfolioToPortfolioWhereIndirectlyIncludedRaisesError stamp: 'CR 11/8/2020 01:39:59'!
PASSED!

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/8/2020 01:40:12'!
PASSED!

!testRun: #PortfolioTest #test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:40:12'!
PASSED!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:40:12'!
PASSED!

!testRun: #PortfolioTest #test03bis_balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 01:40:12'!
PASSED!

!testRun: #PortfolioTest #test04hasRegisteredOfAnEmptyPortfolioIsFalse stamp: 'CR 11/8/2020 01:40:12'!
PASSED!

!testRun: #PortfolioTest #test05hasRegisteredOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:40:12'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:40:12'!
PASSED!

!testRun: #PortfolioTest #test07transactionsOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/8/2020 01:40:12'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:40:12'!
PASSED!

!testRun: #PortfolioTest #test09transactionOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:40:12'!
PASSED!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 01:40:12'!
PASSED!

!testRun: #PortfolioTest #test11addingPortfolioToPortfolioWhereDirectlyIncludedRaisesError stamp: 'CR 11/8/2020 01:40:12'!
PASSED!

!testRun: #PortfolioTest #test12addingPortfolioToPortfolioWhereIndirectlyIncludedRaisesError stamp: 'CR 11/8/2020 01:40:12'!
PASSED!
!Portfolio methodsFor: 'verification' stamp: 'CR 11/8/2020 01:41:11' prior: 50896000!
entriesReachableIfAdded
	| entriesReachableByMe |
	entriesReachableByMe := Bag new.
	self collectReachableEntriesAndSaveIn: entriesReachableByMe. 
	^ entriesReachableByMe
	
	! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/8/2020 01:41:16'!
PASSED!

!testRun: #PortfolioTest #test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:41:16'!
PASSED!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:41:16'!
PASSED!

!testRun: #PortfolioTest #test03bis_balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 01:41:16'!
PASSED!

!testRun: #PortfolioTest #test04hasRegisteredOfAnEmptyPortfolioIsFalse stamp: 'CR 11/8/2020 01:41:16'!
PASSED!

!testRun: #PortfolioTest #test05hasRegisteredOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:41:16'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:41:16'!
PASSED!

!testRun: #PortfolioTest #test07transactionsOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/8/2020 01:41:16'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:41:16'!
PASSED!

!testRun: #PortfolioTest #test09transactionOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:41:16'!
PASSED!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 01:41:16'!
PASSED!

!testRun: #PortfolioTest #test11addingPortfolioToPortfolioWhereDirectlyIncludedRaisesError stamp: 'CR 11/8/2020 01:41:16'!
PASSED!

!testRun: #PortfolioTest #test12addingPortfolioToPortfolioWhereIndirectlyIncludedRaisesError stamp: 'CR 11/8/2020 01:41:16'!
PASSED!

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/8/2020 01:43:14'!
PASSED!

!testRun: #PortfolioTest #test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:43:14'!
PASSED!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:43:14'!
PASSED!

!testRun: #PortfolioTest #test03bis_balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 01:43:14'!
PASSED!

!testRun: #PortfolioTest #test04hasRegisteredOfAnEmptyPortfolioIsFalse stamp: 'CR 11/8/2020 01:43:14'!
PASSED!

!testRun: #PortfolioTest #test05hasRegisteredOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:43:14'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:43:14'!
PASSED!

!testRun: #PortfolioTest #test07transactionsOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/8/2020 01:43:14'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:43:14'!
PASSED!

!testRun: #PortfolioTest #test09transactionOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:43:14'!
PASSED!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 01:43:14'!
PASSED!

!testRun: #PortfolioTest #test11addingPortfolioToPortfolioWhereDirectlyIncludedRaisesError stamp: 'CR 11/8/2020 01:43:14'!
PASSED!

!testRun: #PortfolioTest #test12addingPortfolioToPortfolioWhereIndirectlyIncludedRaisesError stamp: 'CR 11/8/2020 01:43:14'!
PASSED!
!Portfolio methodsFor: 'errors' stamp: 'CR 11/8/2020 01:44:41' prior: 50894419!
raiseErrorIfIncludedIn: entriesReachableByPortfolioThatMightCreateLoop

	(entriesReachableByPortfolioThatMightCreateLoop includes: self) ifTrue: [ PortfolioEntry signalCantAddEntryBecauseCreatesLoop].
	
	! !
!PortfolioEntry methodsFor: 'nil' stamp: 'CR 11/8/2020 01:44:56'!
signalCantAddEntryBecauseCreatesLoop
	^ self error: self class errorCantAddBecauseCreatesLoop.! !
!PortfolioEntry methodsFor: 'as yet unclassified' stamp: 'CR 11/8/2020 01:44:58' prior: 50896435!
signalCantAddEntryBecauseCreatesLoop
	self error: self class errorCantAddBecauseCreatesLoop.! !
!PortfolioEntry class methodsFor: 'nil' stamp: 'CR 11/8/2020 01:45:49'!
errorCantAddBecauseCreatesLoop
	^ 'CantAddBecauseCreatesLoop!!'! !

!methodRemoval: Portfolio class #errorCantAddBecauseCreatesLoop stamp: 'CR 11/8/2020 01:45:59'!
errorCantAddBecauseCreatesLoop
	^ 'CantAddBecauseCreatesLoop!!'!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 01:46:13' prior: 50896190!
test11addingPortfolioToPortfolioWhereDirectlyIncludedRaisesError
	| rootPorfolio childPortfolio |
	
	childPortfolio := Portfolio new.
	
	rootPorfolio := Portfolio new. 
	rootPorfolio register: receptiveAccountWithDepositOfFifty.
	rootPorfolio register: childPortfolio.
	
	self should: [childPortfolio register: rootPorfolio] 
	raise: Error   
	withMessageText: PortfolioEntry errorCantAddBecauseCreatesLoop.
	

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 01:46:18' prior: 50896092!
test12addingPortfolioToPortfolioWhereIndirectlyIncludedRaisesError
	| rootPorfolio childPortfolio grandchildPorfolio |
	
	childPortfolio := Portfolio new.
	grandchildPorfolio := Portfolio new.
	
	childPortfolio register: grandchildPorfolio.
	
	rootPorfolio := Portfolio new. 
	rootPorfolio register: receptiveAccountWithDepositOfFifty.
	rootPorfolio register: childPortfolio.

	
	self should: [grandchildPorfolio register: rootPorfolio] 
	raise: Error   
	withMessageText: PortfolioEntry errorCantAddBecauseCreatesLoop.
	

	! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/8/2020 01:46:24'!
PASSED!

!testRun: #PortfolioTest #test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:46:24'!
PASSED!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:46:24'!
PASSED!

!testRun: #PortfolioTest #test03bis_balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 01:46:24'!
PASSED!

!testRun: #PortfolioTest #test04hasRegisteredOfAnEmptyPortfolioIsFalse stamp: 'CR 11/8/2020 01:46:24'!
PASSED!

!testRun: #PortfolioTest #test05hasRegisteredOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:46:24'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:46:24'!
PASSED!

!testRun: #PortfolioTest #test07transactionsOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/8/2020 01:46:24'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:46:24'!
PASSED!

!testRun: #PortfolioTest #test09transactionOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:46:24'!
PASSED!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 01:46:24'!
PASSED!

!testRun: #PortfolioTest #test11addingPortfolioToPortfolioWhereDirectlyIncludedRaisesError stamp: 'CR 11/8/2020 01:46:24'!
FAILURE!

!testRun: #PortfolioTest #test12addingPortfolioToPortfolioWhereIndirectlyIncludedRaisesError stamp: 'CR 11/8/2020 01:46:24'!
FAILURE!

!methodRemoval: Portfolio #signalCantAddEntryBecauseCreatesLoop stamp: 'CR 11/8/2020 01:46:58'!
signalCantAddEntryBecauseCreatesLoop
	^ self error: self class errorCantAddBecauseCreatesLoop.!
!Portfolio methodsFor: 'errors' stamp: 'CR 11/8/2020 01:48:08' prior: 50896426!
raiseErrorIfIncludedIn: entriesReachableByPortfolioThatMightCreateLoop

	(entriesReachableByPortfolioThatMightCreateLoop includes: self) ifTrue: [ super signalCantAddEntryBecauseCreatesLoop].
	
	! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/8/2020 01:48:13'!
PASSED!

!testRun: #PortfolioTest #test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:48:13'!
PASSED!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:48:13'!
PASSED!

!testRun: #PortfolioTest #test03bis_balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 01:48:13'!
PASSED!

!testRun: #PortfolioTest #test04hasRegisteredOfAnEmptyPortfolioIsFalse stamp: 'CR 11/8/2020 01:48:13'!
PASSED!

!testRun: #PortfolioTest #test05hasRegisteredOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:48:13'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:48:13'!
PASSED!

!testRun: #PortfolioTest #test07transactionsOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/8/2020 01:48:13'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:48:13'!
PASSED!

!testRun: #PortfolioTest #test09transactionOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:48:13'!
PASSED!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 01:48:13'!
PASSED!

!testRun: #PortfolioTest #test11addingPortfolioToPortfolioWhereDirectlyIncludedRaisesError stamp: 'CR 11/8/2020 01:48:13'!
PASSED!

!testRun: #PortfolioTest #test12addingPortfolioToPortfolioWhereIndirectlyIncludedRaisesError stamp: 'CR 11/8/2020 01:48:13'!
PASSED!
!PortfolioEntry methodsFor: 'adding to portfolio' stamp: 'CR 11/8/2020 01:49:30'!
addToPorfolio: aPortfolioEntryToAdd
	self subclassResponsibility.! !
!PortfolioEntry methodsFor: 'nil' stamp: 'CR 11/8/2020 01:50:32'!
collectReachableEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded
	self subclassResponsibility.! !

!methodRemoval: ReceptiveAccount #sumTotalTransactionsFrom: stamp: 'CR 11/8/2020 01:51:10'!
sumTotalTransactionsFrom: aSetOfTransactions

	^ aSetOfTransactions sum: [ :aTransactionToSumItsValue | aTransactionToSumItsValue value ] ifEmpty: [ 0 ].!
!Deposit methodsFor: 'initialization' stamp: 'CR 11/8/2020 01:51:47' prior: 50893755!
initializeFor: aDepositValue

	value := aDepositValue ! !
!Withdraw methodsFor: 'initialization' stamp: 'CR 11/8/2020 01:52:06' prior: 50893806!
initializeFor: aWithdrawValue

	value := aWithdrawValue ! !
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/8/2020 01:55:53' prior: 50893893 overrides: 50893863!
hasRegistered: aTransactionToCheckIfRegistered
	^ portfolioEntries anySatisfy: [:aPortfolioEntry | aPortfolioEntry hasRegistered: aTransactionToCheckIfRegistered].! !
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/8/2020 01:58:16' prior: 50893902 overrides: 50893868!
transactions
	| accountsReachableByMe |
	accountsReachableByMe := Bag new.
	self collectReachableAccountsAndSaveIn: accountsReachableByMe. 
	^ accountsReachableByMe.! !
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/8/2020 01:58:24'!
collectReachableAccountsAndSaveIn: accountsReachableByMe. 
	! !
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/8/2020 02:00:16' prior: 50896662!
collectReachableAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded

	(self reachableAccountsAlreadyCollected: accountsReachableByPortfoliosWhereIncluded) ifFalse: [
		self keepCollectingAndSaveIn: accountsReachableByPortfoliosWhereIncluded
		]
	! !
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/8/2020 02:00:26'!
reachableAccountsAlreadyCollected: accountsReachableByPortfoliosWhereIncluded! !
!Portfolio methodsFor: 'verification' stamp: 'CR 11/8/2020 02:01:05'!
keepCollectingEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded

	entriesReachableByPortfoliosWhereIncluded add: self.
	portfolioEntries do: 
					[:aPortfolioEntryWhoKeepsCollecting | aPortfolioEntryWhoKeepsCollecting collectReachableEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded.].

	! !

!methodRemoval: Portfolio #keepCollectingAndSaveIn: stamp: 'CR 11/8/2020 02:01:10'!
keepCollectingAndSaveIn: entriesReachableByPortfoliosWhereIncluded

	entriesReachableByPortfoliosWhereIncluded add: self.
	portfolioEntries do: 
					[:aPortfolioEntryWhoKeepsCollecting | aPortfolioEntryWhoKeepsCollecting collectReachableEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded.].

	!
!Portfolio methodsFor: 'verification' stamp: 'CR 11/8/2020 02:01:15' prior: 50896667!
collectReachableAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded

	(self reachableAccountsAlreadyCollected: accountsReachableByPortfoliosWhereIncluded) ifFalse: [
		self keepCollectingEntriesAndSaveIn: accountsReachableByPortfoliosWhereIncluded
		]
	! !
!Portfolio methodsFor: 'verification' stamp: 'CR 11/8/2020 02:01:19' prior: 50894618 overrides: 50896620!
collectReachableEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded

	(self reachableEntriesAlreadyCollected: entriesReachableByPortfoliosWhereIncluded) ifFalse: [
		self keepCollectingEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded
		]
	! !
!Portfolio methodsFor: 'verification' stamp: 'CR 11/8/2020 02:01:48'!
keepCollectingAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded

	accountsReachableByPortfoliosWhereIncluded add: self.
	portfolioEntries do: 
					[:aPortfolioEntryWhoKeepsCollecting | aPortfolioEntryWhoKeepsCollecting collectReachableAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded.].

	! !
!Portfolio methodsFor: 'verification' stamp: 'CR 11/8/2020 02:02:43' prior: 50896678!
reachableAccountsAlreadyCollected: accountsReachableByPortfoliosWhereIncluded! !
!Portfolio methodsFor: 'verification' stamp: 'CR 11/8/2020 02:02:57' prior: 50896744!
reachableAccountsAlreadyCollected: accountsReachableByPortfoliosWhereIncluded

	^ accountsReachableByPortfoliosWhereIncluded includes: self.! !
!PortfolioEntry methodsFor: 'private' stamp: 'CR 11/8/2020 02:03:35'!
collectReachableAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded
	self subclassResponsibility.! !
!ReceptiveAccount methodsFor: 'private' stamp: 'CR 11/8/2020 02:03:58' overrides: 50896757!
collectReachableAccountsAndSaveIn: entriesReachableByPortfoliosWhereIncluded
! !
!Portfolio methodsFor: 'verification' stamp: 'CR 11/8/2020 02:10:23'!
collectReachableAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded andRecursionOn: entriesReachableByPortfoliosWhereIncluded

	(self reachableEntriesAlreadyCollected: entriesReachableByPortfoliosWhereIncluded) ifFalse: [
		self keepCollectingEntriesAndSaveIn: accountsReachableByPortfoliosWhereIncluded
		]
	! !

!methodRemoval: Portfolio #collectReachableAccountsAndSaveIn: stamp: 'CR 11/8/2020 02:10:28'!
collectReachableAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded

	(self reachableAccountsAlreadyCollected: accountsReachableByPortfoliosWhereIncluded) ifFalse: [
		self keepCollectingEntriesAndSaveIn: accountsReachableByPortfoliosWhereIncluded
		]
	!
!Portfolio methodsFor: 'verification' stamp: 'CR 11/8/2020 02:11:09' prior: 50896769!
collectReachableAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded andRecursionOn: entriesReachableByPortfoliosWhereIncluded

	(self reachableEntriesAlreadyCollected: entriesReachableByPortfoliosWhereIncluded) ifFalse: [
		self keepCollectingEntriesAndSaveIn: accountsReachableByPortfoliosWhereIncluded andRecursionOn: entriesReachableByPortfoliosWhereIncluded
		]
	! !
!Portfolio methodsFor: 'verification' stamp: 'CR 11/8/2020 02:11:39' prior: 50896683!
keepCollectingEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded

	entriesReachableByPortfoliosWhereIncluded add: self.
	portfolioEntries do: 
					[:aPortfolioEntryWhoKeepsCollecting | aPortfolioEntryWhoKeepsCollecting collectReachableEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded.].

	! !
!Portfolio methodsFor: 'verification' stamp: 'CR 11/8/2020 02:11:44'!
keepCollectingAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded andRecursionOn: entriesReachableByPortfoliosWhereIncluded

	accountsReachableByPortfoliosWhereIncluded add: self.
	portfolioEntries do: 
					[:aPortfolioEntryWhoKeepsCollecting | aPortfolioEntryWhoKeepsCollecting collectReachableAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded.].

	! !

!methodRemoval: Portfolio #keepCollectingAccountsAndSaveIn: stamp: 'CR 11/8/2020 02:11:48'!
keepCollectingAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded

	accountsReachableByPortfoliosWhereIncluded add: self.
	portfolioEntries do: 
					[:aPortfolioEntryWhoKeepsCollecting | aPortfolioEntryWhoKeepsCollecting collectReachableAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded.].

	!
!Portfolio methodsFor: 'verification' stamp: 'CR 11/8/2020 02:12:52' prior: 50896821!
keepCollectingAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded andRecursionOn: entriesReachableByPortfoliosWhereIncluded

	entriesReachableByPortfoliosWhereIncluded add: self.
	portfolioEntries do: 
					[:aPortfolioEntryWhoKeepsCollecting | aPortfolioEntryWhoKeepsCollecting collectReachableAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded.].

	! !
!Portfolio methodsFor: 'verification' stamp: 'CR 11/8/2020 02:14:04' prior: 50896849!
keepCollectingAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded andRecursionOn: entriesReachableByPortfoliosWhereIncluded

	entriesReachableByPortfoliosWhereIncluded add: self.
	portfolioEntries do: 
					[:aPortfolioEntryWhoKeepsCollecting | aPortfolioEntryWhoKeepsCollecting collectReachableAccountsAndSaveIn:  accountsReachableByPortfoliosWhereIncluded andRecursionOn: entriesReachableByPortfoliosWhereIncluded].

	! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'CR 11/8/2020 02:14:44'!
collectReachableAccountsAndSaveIn:  accountsReachableByPortfoliosWhereIncluded andRecursionOn: entriesReachableByPortfoliosWhereIncluded
! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'CR 11/8/2020 02:14:52' prior: 50896880!
collectReachableAccountsAndSaveIn:  accountsReachableByPortfoliosWhereIncluded andRecursionOn: entriesReachableByPortfoliosWhereIncluded
	accountsReachableByPortfoliosWhereIncluded add: self.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'CR 11/8/2020 02:14:58' prior: 50896888!
collectReachableAccountsAndSaveIn:  accountsReachableByPortfoliosWhereIncluded andRecursionOn: entriesReachableByPortfoliosWhereIncluded
	accountsReachableByPortfoliosWhereIncluded add: self! !
!PortfolioEntry methodsFor: 'nil' stamp: 'CR 11/8/2020 02:15:11'!
collectReachableAccountsAndSaveIn:  accountsReachableByPortfoliosWhereIncluded andRecursionOn: entriesReachableByPortfoliosWhereIncluded
	self subclassResponsibility ! !

!methodRemoval: PortfolioEntry #collectReachableAccountsAndSaveIn: stamp: 'CR 11/8/2020 02:15:38'!
collectReachableAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded
	self subclassResponsibility.!
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/8/2020 02:16:37' prior: 50896654 overrides: 50893868!
transactions
	| accountsReachableByMe entriesReachableByMe|
	accountsReachableByMe := Bag new.
	entriesReachableByMe := Bag new.
	self collectReachableAccountsAndSaveIn: accountsReachableByMe andRecursionOn: entriesReachableByMe. 
	^ accountsReachableByMe.! !

!methodRemoval: ReceptiveAccount #collectReachableAccountsAndSaveIn: stamp: 'CR 11/8/2020 02:17:08'!
collectReachableAccountsAndSaveIn: entriesReachableByPortfoliosWhereIncluded
!
!Portfolio methodsFor: 'verification' stamp: 'CR 11/8/2020 02:18:08' prior: 50896794 overrides: 50896907!
collectReachableAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded andRecursionOn: entriesReachableByPortfoliosWhereIncluded

	(self reachableEntriesAlreadyCollected: entriesReachableByPortfoliosWhereIncluded) ifFalse: [
		self keepCollectingAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded andRecursionOn: entriesReachableByPortfoliosWhereIncluded
		]
	! !

!methodRemoval: Portfolio #reachableAccountsAlreadyCollected: stamp: 'CR 11/8/2020 02:20:45'!
reachableAccountsAlreadyCollected: accountsReachableByPortfoliosWhereIncluded

	^ accountsReachableByPortfoliosWhereIncluded includes: self.!
!ReceptiveAccount methodsFor: 'nil' stamp: 'CR 11/8/2020 02:20:51'!
reachableAccountsAlreadyCollected: accountsReachableByPortfoliosWhereIncluded

	^ accountsReachableByPortfoliosWhereIncluded includes: self.! !
!ReceptiveAccount methodsFor: 'private' stamp: 'CR 11/8/2020 02:22:28' prior: 50896898 overrides: 50896907!
collectReachableAccountsAndSaveIn:  alreadyCollectedAccounts andRecursionOn: entriesReachableByPortfoliosWhereIncluded
	(self reachableAccountsAlreadyCollected: alreadyCollectedAccounts) ifFalse: [alreadyCollectedAccounts add: self].! !
!ReceptiveAccount methodsFor: 'private' stamp: 'CR 11/8/2020 02:23:07' prior: 50896971 overrides: 50896907!
collectReachableAccountsAndSaveIn:  alreadyCollectedAccounts andRecursionOn: alreadyReachedEntries
	(self reachableAccountsAlreadyCollected: alreadyCollectedAccounts) ifFalse: [alreadyCollectedAccounts add: self].! !
!ReceptiveAccount methodsFor: 'private' stamp: 'CR 11/8/2020 02:24:23' prior: 50896982 overrides: 50896907!
collectReachableAccountsAndSaveIn:  alreadyCollectedAccounts andRecursionOn: alreadyReachedEntries

	(self alreadyCollectedIn: alreadyCollectedAccounts) ifFalse: [alreadyCollectedAccounts add: self]! !
!ReceptiveAccount methodsFor: 'private' stamp: 'CR 11/8/2020 02:24:31'!
alreadyCollectedIn: accountsReachableByPortfoliosWhereIncluded

	^ accountsReachableByPortfoliosWhereIncluded includes: self.! !

!methodRemoval: ReceptiveAccount #reachableAccountsAlreadyCollected: stamp: 'CR 11/8/2020 02:24:33'!
reachableAccountsAlreadyCollected: accountsReachableByPortfoliosWhereIncluded

	^ accountsReachableByPortfoliosWhereIncluded includes: self.!
!ReceptiveAccount methodsFor: 'private' stamp: 'CR 11/8/2020 02:24:56' prior: 50897002!
alreadyCollectedIn: alreadyCollectedAccounts

	^ alreadyCollectedAccounts includes: self.! !
!Portfolio methodsFor: 'verification' stamp: 'CR 11/8/2020 02:25:50' prior: 50896720 overrides: 50896620!
collectReachableEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded

	(self alreadyCollectedIn: entriesReachableByPortfoliosWhereIncluded) ifFalse: [
		self keepCollectingEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded
		]
	! !

!methodRemoval: Portfolio #reachableEntriesAlreadyCollected: stamp: 'CR 11/8/2020 02:26:07'!
reachableEntriesAlreadyCollected: entriesReachableByPortfoliosWhereIncluded

	^ entriesReachableByPortfoliosWhereIncluded includes: self!
!Portfolio methodsFor: 'verification' stamp: 'CR 11/8/2020 02:26:21' prior: 50896941 overrides: 50896907!
collectReachableAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded andRecursionOn: entriesReachableByPortfoliosWhereIncluded

	(self alreadyCollectedIn: entriesReachableByPortfoliosWhereIncluded) ifFalse: [
		self keepCollectingAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded andRecursionOn: entriesReachableByPortfoliosWhereIncluded
		]
	! !
!PortfolioEntry methodsFor: 'private' stamp: 'CR 11/8/2020 02:26:48'!
alreadyCollectedIn: alreadyCollectedAccounts

	^ alreadyCollectedAccounts includes: self.! !

!methodRemoval: ReceptiveAccount #alreadyCollectedIn: stamp: 'CR 11/8/2020 02:27:10'!
alreadyCollectedIn: alreadyCollectedAccounts

	^ alreadyCollectedAccounts includes: self.!

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/8/2020 02:27:24'!
PASSED!

!testRun: #PortfolioTest #test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 02:27:24'!
PASSED!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 02:27:24'!
PASSED!

!testRun: #PortfolioTest #test03bis_balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 02:27:24'!
PASSED!

!testRun: #PortfolioTest #test04hasRegisteredOfAnEmptyPortfolioIsFalse stamp: 'CR 11/8/2020 02:27:24'!
PASSED!

!testRun: #PortfolioTest #test05hasRegisteredOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 02:27:24'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 02:27:24'!
PASSED!

!testRun: #PortfolioTest #test07transactionsOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/8/2020 02:27:24'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 02:27:24'!
FAILURE!

!testRun: #PortfolioTest #test09transactionOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 02:27:24'!
FAILURE!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 02:27:24'!
FAILURE!

!testRun: #PortfolioTest #test11addingPortfolioToPortfolioWhereDirectlyIncludedRaisesError stamp: 'CR 11/8/2020 02:27:24'!
PASSED!

!testRun: #PortfolioTest #test12addingPortfolioToPortfolioWhereIndirectlyIncludedRaisesError stamp: 'CR 11/8/2020 02:27:24'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 02:27:41'!
FAILURE!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 02:27:41'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/8/2020 02:28:37' prior: 50896923 overrides: 50893868!
transactions
	| accountsReachableByMe entriesReachableByMe|
	accountsReachableByMe := Bag new.
	entriesReachableByMe := Bag new.
	self collectReachableAccountsAndSaveIn: accountsReachableByMe andRecursionOn: entriesReachableByMe. 
	^ self collectTransactionsFromAccounts: accountsReachableByMe.! !
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/8/2020 02:28:55'!
collectTransactionsFromAccounts: setOfAccountsReachableByMe
	! !
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/8/2020 02:29:48' prior: 50897143!
collectTransactionsFromAccounts: setOfAccountsReachableByMe
	^ setOfAccountsReachableByMe collect: [:accountReachableByMe | accountReachableByMe transactions].! !
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/8/2020 02:29:51' prior: 50897148!
collectTransactionsFromAccounts: setOfAccountsReachableByMe

	^ setOfAccountsReachableByMe collect: [:accountReachableByMe | accountReachableByMe transactions]! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/8/2020 02:29:58'!
PASSED!

!testRun: #PortfolioTest #test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 02:29:58'!
PASSED!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 02:29:58'!
PASSED!

!testRun: #PortfolioTest #test03bis_balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 02:29:58'!
PASSED!

!testRun: #PortfolioTest #test04hasRegisteredOfAnEmptyPortfolioIsFalse stamp: 'CR 11/8/2020 02:29:58'!
PASSED!

!testRun: #PortfolioTest #test05hasRegisteredOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 02:29:58'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 02:29:58'!
PASSED!

!testRun: #PortfolioTest #test07transactionsOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/8/2020 02:29:58'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 02:29:58'!
FAILURE!

!testRun: #PortfolioTest #test09transactionOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 02:29:58'!
FAILURE!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 02:29:58'!
FAILURE!

!testRun: #PortfolioTest #test11addingPortfolioToPortfolioWhereDirectlyIncludedRaisesError stamp: 'CR 11/8/2020 02:29:58'!
PASSED!

!testRun: #PortfolioTest #test12addingPortfolioToPortfolioWhereIndirectlyIncludedRaisesError stamp: 'CR 11/8/2020 02:29:58'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 02:30:03'!
FAILURE!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 02:30:03'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/8/2020 02:30:51' prior: 50897156!
collectTransactionsFromAccounts: setOfAccountsReachableByMe

	^ setOfAccountsReachableByMe collect: [:accountReachableByMe | accountReachableByMe transactions].! !
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/8/2020 02:33:21' prior: 50897226!
collectTransactionsFromAccounts: setOfAccountsReachableByMe

	^ setOfAccountsReachableByMe collect: [:accountReachableByMeToAddItsTransactions | accountReachableByMeToAddItsTransactions transactions] andFold: [:aSetOfTransactions :anotherSetOfTransactions | aSetOfTransactions union: anotherSetOfTransactions] ifEmpty: (Bag new).! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/8/2020 02:34:26'!
PASSED!

!testRun: #PortfolioTest #test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 02:34:26'!
PASSED!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 02:34:26'!
PASSED!

!testRun: #PortfolioTest #test03bis_balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 02:34:26'!
PASSED!

!testRun: #PortfolioTest #test04hasRegisteredOfAnEmptyPortfolioIsFalse stamp: 'CR 11/8/2020 02:34:26'!
PASSED!

!testRun: #PortfolioTest #test05hasRegisteredOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 02:34:26'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 02:34:26'!
PASSED!

!testRun: #PortfolioTest #test07transactionsOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/8/2020 02:34:26'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 02:34:26'!
PASSED!

!testRun: #PortfolioTest #test09transactionOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 02:34:26'!
PASSED!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 02:34:26'!
PASSED!

!testRun: #PortfolioTest #test11addingPortfolioToPortfolioWhereDirectlyIncludedRaisesError stamp: 'CR 11/8/2020 02:34:26'!
PASSED!

!testRun: #PortfolioTest #test12addingPortfolioToPortfolioWhereIndirectlyIncludedRaisesError stamp: 'CR 11/8/2020 02:34:26'!
PASSED!

----SNAPSHOT----(8 November 2020 02:35:11) CuisUniversity-4384.image priorSource: 18058505!

----QUIT----(8 November 2020 02:35:14) CuisUniversity-4384.image priorSource: 18100779!

----STARTUP---- (9 November 2020 16:36:57) as /Users/celeste/facultad/ing1/si-exercises/CuisUniversity-4384.image!


----SNAPSHOT----(9 November 2020 16:42:09) CuisUniversity-4384.image priorSource: 18100872!

----QUIT----(9 November 2020 16:44:13) CuisUniversity-4384.image priorSource: 18101078!

----STARTUP---- (14 November 2020 22:52:05) as /Users/celeste/facultad/ing1/si-exercises/CuisUniversity-4384.image!


!classRemoval: #ReceptiveAccount stamp: 'CR 11/14/2020 22:52:17'!
PortfolioEntry subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'CR 11/14/2020 22:52:17'!
PortfolioEntry subclass: #Portfolio
	instanceVariableNames: 'portfolioEntries'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioEntry stamp: 'CR 11/14/2020 22:52:18'!
Object subclass: #PortfolioEntry
	instanceVariableNames: 'portfoliosWhereIncluded'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'CR 11/14/2020 22:52:18'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'CR 11/14/2020 22:52:19'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'CR 11/14/2020 22:52:19'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'CR 11/14/2020 22:52:19'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'CR 11/14/2020 22:52:20'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'depositOfFifty receptiveAccountWithDepositOfFifty depositOfHundred receptiveAccountWithDepositOfHundred receptiveAccountWithNoTransactions withdrawOfTwenty'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of /Users/celeste/facultad/ing1/si-exercises/Portfolio-Solucion.st----!

!classRemoval: #NonEmptyStackNode stamp: 'CR 11/14/2020 22:56:12'!
StackNode subclass: #NonEmptyStackNode
	instanceVariableNames: 'sentence nextStackNode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #EmptyStackNode stamp: 'CR 11/14/2020 22:56:13'!
StackNode subclass: #EmptyStackNode
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #StackNode stamp: 'CR 11/14/2020 22:56:13'!
Object subclass: #StackNode
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefix stamp: 'CR 11/14/2020 22:56:14'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'stack poppedStackElements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStack stamp: 'CR 11/14/2020 22:56:14'!
Object subclass: #OOStack
	instanceVariableNames: 'size top'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefixTest stamp: 'CR 11/14/2020 22:56:15'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: 'emptyStack thePrefixToFind thePrefixToFindUpperCase aSentenceWithoutThePrefixToFind aSentenceWithThePrefixToFind aStackWithoutThePrefixToFind aStackWithThePrefixToFindUpperCase aStackWithThePrefixToFind copyOfaStackWithBothSentences anEmptyPrefix thePrefixWithSpaces aStackWithOnlyOneSentenceWithThePrefix copyOfaStackWithOnlyOneSentenceWithThePrefix'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackTest stamp: 'CR 11/14/2020 22:56:15'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

----End fileIn of /Users/celeste/facultad/ing1/Stack-Solution-3.st----!

!classRemoval: #OOStack stamp: 'CR 11/14/2020 23:02:47'!
Object subclass: #OOStack
	instanceVariableNames: 'contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-3'!

!classRemoval: #OOStackTest stamp: 'CR 11/14/2020 23:02:47'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-3'!

----End fileIn of /Users/celeste/facultad/ing1/Stack-Solution-1.st----!

!classRemoval: #OONotEmptyStackState stamp: 'CR 11/14/2020 23:03:15'!
OOStackState subclass: #OONotEmptyStackState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-1a'!

!classRemoval: #OOEmptyStackState stamp: 'CR 11/14/2020 23:03:15'!
OOStackState subclass: #OOEmptyStackState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-1a'!

!classRemoval: #OOStackState stamp: 'CR 11/14/2020 23:03:16'!
Object subclass: #OOStackState
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-1a'!

!classRemoval: #OOStack stamp: 'CR 11/14/2020 23:03:16'!
Object subclass: #OOStack
	instanceVariableNames: 'contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-1a'!

!classRemoval: #OOStackTest stamp: 'CR 11/14/2020 23:03:17'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-1a'!

----End fileIn of /Users/celeste/facultad/ing1/Stack-Solution-2.st----!

!classRemoval: #OOStackBase stamp: 'CR 11/14/2020 23:04:18'!
OOStackTop subclass: #OOStackBase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-2'!

!classRemoval: #OOPushedObjectCell stamp: 'CR 11/14/2020 23:04:19'!
OOStackTop subclass: #OOPushedObjectCell
	instanceVariableNames: 'previous content'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-2'!

!classRemoval: #OOStackTop stamp: 'CR 11/14/2020 23:04:19'!
Object subclass: #OOStackTop
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-2'!

!classRemoval: #OOStack stamp: 'CR 11/14/2020 23:04:20'!
Object subclass: #OOStack
	instanceVariableNames: 'top'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-2'!

!classRemoval: #OOStackTest stamp: 'CR 11/14/2020 23:04:20'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-2'!

----End fileIn of /Users/celeste/facultad/ing1/Stack-Solution-2.st----!

!classRemoval: #OOStackBase stamp: 'CR 11/14/2020 23:13:08'!
OOStackTop subclass: #OOStackBase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-2'!

!classRemoval: #OOPushedObjectCell stamp: 'CR 11/14/2020 23:13:08'!
OOStackTop subclass: #OOPushedObjectCell
	instanceVariableNames: 'previous content'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-2'!

!classRemoval: #OOStackTop stamp: 'CR 11/14/2020 23:13:08'!
Object subclass: #OOStackTop
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-2'!

!classRemoval: #OOStack stamp: 'CR 11/14/2020 23:13:09'!
Object subclass: #OOStack
	instanceVariableNames: 'top'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-2'!

!classRemoval: #OOStackTest stamp: 'CR 11/14/2020 23:13:09'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-2'!

----End fileIn of /Users/celeste/facultad/ing1/si-exercises/15 - Stack/Stack-Exercise-Final.st----!

----STARTUP---- (15 November 2020 20:25:58) as /Users/celeste/facultad/ing1/si-exercises/CuisUniversity-4384.image!


!classRemoval: #ReceptiveAccount stamp: 'CR 11/15/2020 20:26:04'!
PortfolioEntry subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'CR 11/15/2020 20:26:05'!
PortfolioEntry subclass: #Portfolio
	instanceVariableNames: 'portfolioEntries'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioEntry stamp: 'CR 11/15/2020 20:26:06'!
Object subclass: #PortfolioEntry
	instanceVariableNames: 'portfoliosWhereIncluded'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'CR 11/15/2020 20:26:06'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'CR 11/15/2020 20:26:07'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'CR 11/15/2020 20:26:07'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'CR 11/15/2020 20:26:08'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'CR 11/15/2020 20:26:09'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'depositOfFifty receptiveAccountWithDepositOfFifty depositOfHundred receptiveAccountWithDepositOfHundred receptiveAccountWithNoTransactions withdrawOfTwenty'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of /Users/celeste/facultad/ing1/si-exercises/Portfolio-Solucion.st----!

Object subclass: #Transfer
	instanceVariableNames: 'value senderAccount recipientAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'CR 11/15/2020 20:38:36'!
Object subclass: #Transfer
	instanceVariableNames: 'value senderAccount recipientAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'CR 11/15/2020 20:38:49'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'nil' stamp: 'CR 11/15/2020 20:39:09'!
setup! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'CR 11/15/2020 20:40:35'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'simplePortfolioAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'CR 11/15/2020 20:40:37'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'simplePortfolioAccount simplePortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'setup' stamp: 'CR 11/15/2020 20:40:33' prior: 50898120!
setup
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'CR 11/15/2020 20:43:19'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'simplePortfolioAccount simplePortfolio simpleAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'setup' stamp: 'CR 11/15/2020 20:43:17' prior: 50898140!
setup
	simpleAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	! !
!TransferTest methodsFor: 'setup' stamp: 'CR 11/15/2020 20:51:13' prior: 50898157!
setup
	simpleAccount := ReceptiveAccount new.
	Deposit register: 100 on: simpleAccount.
	
	! !

Object subclass: #Transfer
	instanceVariableNames: 'value withdrawTransaction depositTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'CR 11/15/2020 20:55:10'!
Object subclass: #Transfer
	instanceVariableNames: 'value withdrawTransaction depositTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'nil' stamp: 'CR 11/15/2020 20:56:15'!
test01TransferZeroDoesNotChangeAccountsBalance
	! !
!TransferTest methodsFor: 'tests' stamp: 'CR 11/15/2020 20:57:42' prior: 50898184!
test01TransferZeroDoesNotChangeAccountsBalance
	| aTransferOfZero |
	aTransferOfZero := Transfer of: 0 from: simplePortfolioAccount to: simpleAccount.  
	
	! !
!TransferTest methodsFor: 'tests' stamp: 'CR 11/15/2020 20:58:14' prior: 50898189!
test01TransferZeroDoesNotChangeAccountsBalance
	| aTransferOfZero |
	aTransferOfZero := Transfer of: 0 from: simplePortfolioAccount to: simpleAccount.  
	
	
	! !
!TransferTest methodsFor: 'tests' stamp: 'CR 11/15/2020 20:58:36' prior: 50898197!
test01TransferZeroDoesNotChangeAccountsBalance
	| aTransferOfZero |
	aTransferOfZero := Transfer of: 0 from: simplePortfolioAccount to: simpleAccount.  
! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'CR 11/15/2020 20:59:52'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'simplePortfolioAccount simplePortfolio simpleAccount accountWithDepositOf100'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'CR 11/15/2020 20:59:54'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'simplePortfolioAccount simplePortfolio simpleAccount accountWithDepositOf100 accountWithDepositOf200'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'CR 11/15/2020 20:59:57'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'simplePortfolioAccount simplePortfolio simpleAccount accountWithDepositOf100 accountWithDepositOf200 emptyAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'setup' stamp: 'CR 11/15/2020 20:59:51' prior: 50898165!
setup
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	
	! !

TestCase subclass: #TransferTest
	instanceVariableNames: 'accountWithDepositOf100 accountWithDepositOf200 emptyAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'CR 11/15/2020 21:00:10'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'accountWithDepositOf100 accountWithDepositOf200 emptyAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'tests' stamp: 'CR 11/15/2020 21:00:54' prior: 50898205!
test01TransferZeroDoesNotChangeAccountsBalance
	| aTransferOfZero |
	aTransferOfZero := Transfer of: 0 from: accountWithDepositOf100 to: emptyAccount.
	  
! !
!TransferTest methodsFor: 'tests' stamp: 'CR 11/15/2020 21:04:16' prior: 50898271!
test01TransferZeroDoesNotChangeAccountsBalance
	| aTransferOfZero |

	self assert: [aTransferOfZero := Transfer register: 0 from: accountWithDepositOf100 to: emptyAccount.] doesNotChange: [accountWithDepositOf100 balance. emptyAccount balance]
! !

!testRun: #TransferTest #test01TransferZeroDoesNotChangeAccountsBalance stamp: 'CR 11/15/2020 21:04:25'!
ERROR!

!testRun: #TransferTest #test01TransferZeroDoesNotChangeAccountsBalance stamp: 'CR 11/15/2020 21:04:25'!
ERROR!

!testRun: #TransferTest #test01TransferZeroDoesNotChangeAccountsBalance stamp: 'CR 11/15/2020 21:04:46'!
ERROR!

!testRun: #TransferTest #test01TransferZeroDoesNotChangeAccountsBalance stamp: 'CR 11/15/2020 21:04:46'!
ERROR!
!Transfer class methodsFor: 'nil' stamp: 'CR 11/15/2020 21:05:45'!
register: aTransactionValue from: sourceAccount to: destinationAccount
	! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'CR 11/15/2020 21:06:20' prior: 50898303!
register: aTransactionValue from: sourceAccount to: destinationAccount
	^ self new initializeWith: aTransactionValue from: sourceAccount to: destinationAccount.! !
!Transfer methodsFor: 'nil' stamp: 'CR 11/15/2020 21:06:39'!
initializeWith: aTransactionValue from: sourceAccount to: destinationAccount

	! !

Object subclass: #Transfer
	instanceVariableNames: 'transactionValue withdrawTransaction depositTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'CR 11/15/2020 21:06:54'!
Object subclass: #Transfer
	instanceVariableNames: 'transactionValue withdrawTransaction depositTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #Transfer
	instanceVariableNames: 'transferValue withdrawTransaction depositTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'CR 11/15/2020 21:07:02'!
Object subclass: #Transfer
	instanceVariableNames: 'transferValue withdrawTransaction depositTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'CR 11/15/2020 21:08:02' prior: 50898317!
initializeWith: aTransferValue from: sourceAccount to: destinationAccount

	transferValue := aTransferValue.
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'CR 11/15/2020 21:09:15' prior: 50898352!
initializeWith: aTransferValue from: sourceAccount to: destinationAccount

	transferValue := aTransferValue.
	withdrawTransaction := Withdraw register: aTransferValue on: sourceAccount.
	depositTransaction := Deposit register: aTransferValue on: destinationAccount.! !

AccountTransaction subclass: #TransferTransactions
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransactions category: 'Portfolio-Solucion' stamp: 'CR 11/15/2020 21:12:11'!
AccountTransaction subclass: #TransferTransactions
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferTransactions subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'CR 11/15/2020 21:12:31'!
TransferTransactions subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferTransactions subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'CR 11/15/2020 21:12:36'!
TransferTransactions subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #TransferTransactions
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransactions category: 'Portfolio-Solucion' stamp: 'CR 11/15/2020 21:13:00'!
AccountTransaction subclass: #TransferTransactions
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferDeposit methodsFor: 'nil' stamp: 'CR 11/15/2020 21:13:13' overrides: 50897996!
affectBalance: aBalance

	^aBalance + value ! !
!TransferTransactions methodsFor: 'nil' stamp: 'CR 11/15/2020 21:13:28' overrides: 50897992!
value

	^ value! !
!TransferDeposit methodsFor: 'nil' stamp: 'CR 11/15/2020 21:14:00'!
initializeFor: aValue

	value := aValue ! !
!TransferWithdraw methodsFor: 'nil' stamp: 'CR 11/15/2020 21:14:07'!
initializeFor: aValue

	value := aValue ! !
!TransferWithdraw methodsFor: 'nil' stamp: 'CR 11/15/2020 21:14:33' overrides: 50897996!
affectBalance: aBalance

	^aBalance - value ! !
!TransferTransactions methodsFor: 'nil' stamp: 'CR 11/15/2020 21:15:51'!
initializeFor: aValue

	value := aValue ! !

!methodRemoval: TransferDeposit #initializeFor: stamp: 'CR 11/15/2020 21:16:03'!
initializeFor: aValue

	value := aValue !

!methodRemoval: TransferWithdraw #initializeFor: stamp: 'CR 11/15/2020 21:16:06'!
initializeFor: aValue

	value := aValue !
!Transfer methodsFor: 'initialization' stamp: 'CR 11/15/2020 21:16:28' prior: 50898359!
initializeWith: aTransferValue from: sourceAccount to: destinationAccount

	transferValue := aTransferValue.
	withdrawTransaction := TransferWithdraw register: aTransferValue on: sourceAccount.
	depositTransaction := TransferDeposit register: aTransferValue on: destinationAccount.! !
!TransferTransactions class methodsFor: 'nil' stamp: 'CR 11/15/2020 21:16:55'!
for: aValue

	^ self new initializeFor: aValue ! !

!testRun: #TransferTest #test01TransferZeroDoesNotChangeAccountsBalance stamp: 'CR 11/15/2020 21:17:36'!
ERROR!

!testRun: #TransferTest #test01TransferZeroDoesNotChangeAccountsBalance stamp: 'CR 11/15/2020 21:17:36'!
ERROR!

!testRun: #TransferTest #test01TransferZeroDoesNotChangeAccountsBalance stamp: 'CR 11/15/2020 21:17:49'!
ERROR!

!testRun: #TransferTest #test01TransferZeroDoesNotChangeAccountsBalance stamp: 'CR 11/15/2020 21:17:49'!
ERROR!

!testRun: #TransferTest #test01TransferZeroDoesNotChangeAccountsBalance stamp: 'CR 11/15/2020 21:19:35'!
ERROR!

!testRun: #TransferTest #test01TransferZeroDoesNotChangeAccountsBalance stamp: 'CR 11/15/2020 21:19:35'!
ERROR!
!TransferTest methodsFor: 'tests' stamp: 'CR 11/15/2020 21:20:29' overrides: 16927572!
setUp
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	
	! !

!methodRemoval: TransferTest #setup stamp: 'CR 11/15/2020 21:20:33'!
setup
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	
	!

!testRun: #TransferTest #test01TransferZeroDoesNotChangeAccountsBalance stamp: 'CR 11/15/2020 21:20:38'!
PASSED!
!TransferTest methodsFor: 'tests' stamp: 'CR 11/15/2020 21:22:04' prior: 50898279!
test01TransferZeroDoesNotChangeAccountsBalance
	| aTransferOfZero |
	aTransferOfZero := Transfer register: 0 from: accountWithDepositOf100 to: emptyAccount.
	self assert: (accountWithDepositOf100 balance = 100).
	self assert: (emptyAccount balance = 0).! !

!testRun: #TransferTest #test01TransferZeroDoesNotChangeAccountsBalance stamp: 'CR 11/15/2020 21:22:08'!
PASSED!
!TransferTest methodsFor: 'tests' stamp: 'CR 11/15/2020 21:23:16'!
test02TransferZeroDoesNotChangeAccountsBalance
	| aTransferOfZero |
	aTransferOfZero := Transfer register: 75 from: accountWithDepositOf100 to: emptyAccount.
	self assert: (accountWithDepositOf100 balance = 25).
	self assert: (emptyAccount balance = 75).! !
!TransferTest methodsFor: 'tests' stamp: 'CR 11/15/2020 21:23:28'!
test02TransferUpdatesAccountsBalance
	| aTransferOfZero |
	aTransferOfZero := Transfer register: 75 from: accountWithDepositOf100 to: emptyAccount.
	self assert: (accountWithDepositOf100 balance = 25).
	self assert: (emptyAccount balance = 75).! !

!methodRemoval: TransferTest #test02TransferZeroDoesNotChangeAccountsBalance stamp: 'CR 11/15/2020 21:23:32'!
test02TransferZeroDoesNotChangeAccountsBalance
	| aTransferOfZero |
	aTransferOfZero := Transfer register: 75 from: accountWithDepositOf100 to: emptyAccount.
	self assert: (accountWithDepositOf100 balance = 25).
	self assert: (emptyAccount balance = 75).!
!TransferTest methodsFor: 'tests' stamp: 'CR 11/15/2020 21:23:37'!
test02TransferUpdatesAccountsBalanceCorrectly
	| aTransferOfZero |
	aTransferOfZero := Transfer register: 75 from: accountWithDepositOf100 to: emptyAccount.
	self assert: (accountWithDepositOf100 balance = 25).
	self assert: (emptyAccount balance = 75).! !

!methodRemoval: TransferTest #test02TransferUpdatesAccountsBalance stamp: 'CR 11/15/2020 21:23:42'!
test02TransferUpdatesAccountsBalance
	| aTransferOfZero |
	aTransferOfZero := Transfer register: 75 from: accountWithDepositOf100 to: emptyAccount.
	self assert: (accountWithDepositOf100 balance = 25).
	self assert: (emptyAccount balance = 75).!
!TransferTest methodsFor: 'tests' stamp: 'CR 11/15/2020 21:26:58'!
test03TransferIsRegisteredCorrectlyOnBothAccounts
	| aTransferOf75 |
	aTransferOf75 := Transfer register: 75 from: accountWithDepositOf100 to: emptyAccount.
	self assert: (accountWithDepositOf100 hasRegistered: aTransferOf75 withdrawTransaction).
	self assert: (emptyAccount hasRegistered: aTransferOf75 depositTransaction).! !
!TransferTest methodsFor: 'tests' stamp: 'CR 11/15/2020 21:27:13' prior: 50898566!
test02TransferUpdatesAccountsBalanceCorrectly
	| aTransferOf75 |
	aTransferOf75 := Transfer register: 75 from: accountWithDepositOf100 to: emptyAccount.
	self assert: (accountWithDepositOf100 balance = 25).
	self assert: (emptyAccount balance = 75).! !
!Transfer methodsFor: 'nil' stamp: 'CR 11/15/2020 21:27:59'!
depositTransaction
	^depositTransaction! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'CR 11/15/2020 21:28:06'!
withdrawTransaction
	^withdrawTransaction! !

!testRun: #TransferTest #test01TransferZeroDoesNotChangeAccountsBalance stamp: 'CR 11/15/2020 21:28:13'!
PASSED!

!testRun: #TransferTest #test02TransferUpdatesAccountsBalanceCorrectly stamp: 'CR 11/15/2020 21:28:13'!
PASSED!

!testRun: #TransferTest #test03TransferIsRegisteredCorrectlyOnBothAccounts stamp: 'CR 11/15/2020 21:28:13'!
PASSED!
!TransferTest methodsFor: 'tests' stamp: 'CR 11/15/2020 21:28:44'!
test04TransferIsOnBothAccountsTransactions
	| aTransferOf75 |
	aTransferOf75 := Transfer register: 75 from: accountWithDepositOf100 to: emptyAccount.
	self assert: (accountWithDepositOf100 hasRegistered: aTransferOf75 withdrawTransaction).
	self assert: (emptyAccount hasRegistered: aTransferOf75 depositTransaction).! !
!TransferTest methodsFor: 'tests' stamp: 'CR 11/15/2020 21:29:13' prior: 50898629!
test04TransferIsOnBothAccountsTransactions
	| aTransferOf75 |
	aTransferOf75 := Transfer register: 75 from: accountWithDepositOf100 to: emptyAccount.
	self assert: (accountWithDepositOf100 transactions includes: aTransferOf75 withdrawTransaction).
	self assert: (emptyAccount transactions includes: aTransferOf75 depositTransaction).! !

!testRun: #TransferTest #test01TransferZeroDoesNotChangeAccountsBalance stamp: 'CR 11/15/2020 21:29:16'!
PASSED!

!testRun: #TransferTest #test02TransferUpdatesAccountsBalanceCorrectly stamp: 'CR 11/15/2020 21:29:16'!
PASSED!

!testRun: #TransferTest #test03TransferIsRegisteredCorrectlyOnBothAccounts stamp: 'CR 11/15/2020 21:29:16'!
PASSED!

!testRun: #TransferTest #test04TransferIsOnBothAccountsTransactions stamp: 'CR 11/15/2020 21:29:16'!
PASSED!

!classDefinition: #TransferTransactions category: 'Portfolio-Solucion' stamp: 'CR 11/15/2020 21:34:14'!
AccountTransaction subclass: #TransferTransactions
	instanceVariableNames: 'value transferAttachedTo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTransactions methodsFor: 'initialization' stamp: 'CR 11/15/2020 21:34:12' prior: 50898444!
initializeFor: aTransfer

	value := aTransfer value. 
	transferAttachedTo := aTransfer.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'CR 11/15/2020 21:34:42' overrides: 16881508!
value
	^transferValue.! !
!Transfer methodsFor: 'initialization' stamp: 'CR 11/15/2020 21:36:53' prior: 50898456!
initializeWith: aTransferValue from: sourceAccount to: destinationAccount

	transferValue := aTransferValue.
	withdrawTransaction := TransferWithdraw register: aTransferValue on: sourceAccount by: self.
	depositTransaction := TransferDeposit register: aTransferValue on: destinationAccount by: self.! !
!TransferTransactions class methodsFor: 'nil' stamp: 'CR 11/15/2020 21:37:56'!
register: aValue on: anAccount by: aTransfer 

	| transaction |
	
	transaction := self for: aValue.
	anAccount register: transaction.
	
	^ transaction! !
!TransferTransactions class methodsFor: 'as yet unclassified' stamp: 'CR 11/15/2020 21:40:09' prior: 50898701!
register: aValue on: anAccount by: aTransfer 

	| transaction |
	
	transaction := self for: aValue by: aTransfer.
	anAccount register: transaction.
	
	^ transaction! !
!TransferTransactions methodsFor: 'initialization' stamp: 'CR 11/15/2020 21:40:38'!
initializeFor: aValue by: aTransfer

	value := aTransfer value. 
	transferAttachedTo := aTransfer.! !
!TransferTransactions class methodsFor: 'instance creation' stamp: 'CR 11/15/2020 21:42:26'!
for: aValue by: aTransfer

	^ self new initializeFor: aValue by: aTransfer.! !

!methodRemoval: TransferTransactions class #for: stamp: 'CR 11/15/2020 21:42:41'!
for: aValue

	^ self new initializeFor: aValue !

!methodRemoval: TransferTransactions #initializeFor: stamp: 'CR 11/15/2020 21:43:03'!
initializeFor: aTransfer

	value := aTransfer value. 
	transferAttachedTo := aTransfer.!
!TransferTransactions methodsFor: 'initialization' stamp: 'CR 11/15/2020 21:43:13' prior: 50898718!
initializeFor: aValue by: aTransfer

	value := aValue.
	transferAttachedTo := aTransfer.! !

!testRun: #TransferTest #test01TransferZeroDoesNotChangeAccountsBalance stamp: 'CR 11/15/2020 21:43:19'!
PASSED!

!testRun: #TransferTest #test02TransferUpdatesAccountsBalanceCorrectly stamp: 'CR 11/15/2020 21:43:20'!
PASSED!

!testRun: #TransferTest #test03TransferIsRegisteredCorrectlyOnBothAccounts stamp: 'CR 11/15/2020 21:43:20'!
PASSED!

!testRun: #TransferTest #test04TransferIsOnBothAccountsTransactions stamp: 'CR 11/15/2020 21:43:20'!
PASSED!
!TransferTest methodsFor: 'tests' stamp: 'CR 11/15/2020 21:44:33'!
test05TransferOfANegativeAmountRaisesError
	| aTransferOf75 |
	aTransferOf75 := Transfer register: 75 from: accountWithDepositOf100 to: emptyAccount.
	self assert: (accountWithDepositOf100 transactions includes: aTransferOf75 withdrawTransaction).
	self assert: (emptyAccount transactions includes: aTransferOf75 depositTransaction).! !

!methodRemoval: TransferTest #test05TransferOfANegativeAmountRaisesError stamp: 'CR 11/15/2020 21:45:19'!
test05TransferOfANegativeAmountRaisesError
	| aTransferOf75 |
	aTransferOf75 := Transfer register: 75 from: accountWithDepositOf100 to: emptyAccount.
	self assert: (accountWithDepositOf100 transactions includes: aTransferOf75 withdrawTransaction).
	self assert: (emptyAccount transactions includes: aTransferOf75 depositTransaction).!
!TransferTest methodsFor: 'tests' stamp: 'CR 11/15/2020 21:47:45'!
test05TransferFromAndToSameAccountRaisesError
	| aTransferOf75 |
	self should: [aTransferOf75 := Transfer register: 75 from: emptyAccount to: emptyAccount.] 
	raise:  Error withMessageText: [Transfer cantTransferToSameAccountAsSource].! !
!Transfer class methodsFor: 'nil' stamp: 'CR 11/15/2020 21:48:28'!
cantTransferToSameAccountAsSource
	^ 'Source account cant be the same as destination account'! !
!Transfer methodsFor: 'initialization' stamp: 'CR 11/15/2020 21:50:42' prior: 50898689!
initializeWith: aTransferValue from: sourceAccount to: destinationAccount

	(sourceAccount = destinationAccount) ifTrue: [self error: self class cantTransferToSameAccountAsSource ].
	transferValue := aTransferValue.
	withdrawTransaction := TransferWithdraw register: aTransferValue on: sourceAccount by: self.
	depositTransaction := TransferDeposit register: aTransferValue on: destinationAccount by: self.! !
!Transfer methodsFor: 'initialization' stamp: 'CR 11/15/2020 21:51:10'!
verify: destinationAccount isNotTheSameAs: sourceAccount

	^ (sourceAccount = destinationAccount) ifTrue: [self error: self class cantTransferToSameAccountAsSource ]! !
!Transfer methodsFor: 'initialization' stamp: 'CR 11/15/2020 21:51:10' prior: 50898804!
initializeWith: aTransferValue from: sourceAccount to: destinationAccount

	self verify: destinationAccount isNotTheSameAs: sourceAccount.
	transferValue := aTransferValue.
	withdrawTransaction := TransferWithdraw register: aTransferValue on: sourceAccount by: self.
	depositTransaction := TransferDeposit register: aTransferValue on: destinationAccount by: self.! !

!testRun: #TransferTest #test01TransferZeroDoesNotChangeAccountsBalance stamp: 'CR 11/15/2020 21:51:22'!
PASSED!

!testRun: #TransferTest #test02TransferUpdatesAccountsBalanceCorrectly stamp: 'CR 11/15/2020 21:51:22'!
PASSED!

!testRun: #TransferTest #test03TransferIsRegisteredCorrectlyOnBothAccounts stamp: 'CR 11/15/2020 21:51:22'!
PASSED!

!testRun: #TransferTest #test04TransferIsOnBothAccountsTransactions stamp: 'CR 11/15/2020 21:51:22'!
PASSED!

!testRun: #TransferTest #test05TransferFromAndToSameAccountRaisesError stamp: 'CR 11/15/2020 21:51:22'!
PASSED!

----SNAPSHOT----(15 November 2020 21:51:32) CuisUniversity-4384.image priorSource: 18101171!
!TransferTest methodsFor: 'tests' stamp: 'CR 11/15/2020 21:52:04'!
test06TransferOfNegativeAmountRaisesError
	| aTransferOf75 |
	self should: [aTransferOf75 := Transfer register: 75 from: emptyAccount to: emptyAccount.] 
	raise:  Error withMessageText: [Transfer cantTransferToSameAccountAsSource].! !
!TransferTest methodsFor: 'tests' stamp: 'CR 11/15/2020 21:52:38' prior: 50898864!
test06TransferOfNegativeAmountRaisesError
	| aTransferOfNegativeAmount |
	self should: [aTransferOfNegativeAmount := Transfer register: -30 from: emptyAccount to: emptyAccount.] 
	raise:  Error withMessageText: [Transfer cantTransferNegativeAmount].! !
!Transfer class methodsFor: 'error messages' stamp: 'CR 11/15/2020 21:53:02'!
cantTransferNegativeAmount
	^ 'A negative amount is invalid'! !
!Transfer methodsFor: 'initialization' stamp: 'CR 11/15/2020 21:53:43' prior: 50898829!
initializeWith: aTransferValue from: sourceAccount to: destinationAccount

	self verify: destinationAccount isNotTheSameAs: sourceAccount.
	self verifyThatTransferAmountIsValid: aTransferValue.
	transferValue := aTransferValue.
	withdrawTransaction := TransferWithdraw register: aTransferValue on: sourceAccount by: self.
	depositTransaction := TransferDeposit register: aTransferValue on: destinationAccount by: self.! !
!Transfer methodsFor: 'initialization' stamp: 'CR 11/15/2020 21:54:17'!
verifyThatTransferAmountIsValid: aTransferValue.

	(aTransferValue < 0) ifTrue: [self error: self class cantTransferToSameAccountAsSource ]! !
!Transfer methodsFor: 'initialization' stamp: 'CR 11/15/2020 21:54:21' prior: 50898820!
verify: destinationAccount isNotTheSameAs: sourceAccount

	(sourceAccount = destinationAccount) ifTrue: [self error: self class cantTransferToSameAccountAsSource ]! !

!testRun: #TransferTest #test01TransferZeroDoesNotChangeAccountsBalance stamp: 'CR 11/15/2020 21:54:25'!
PASSED!

!testRun: #TransferTest #test02TransferUpdatesAccountsBalanceCorrectly stamp: 'CR 11/15/2020 21:54:25'!
PASSED!

!testRun: #TransferTest #test03TransferIsRegisteredCorrectlyOnBothAccounts stamp: 'CR 11/15/2020 21:54:25'!
PASSED!

!testRun: #TransferTest #test04TransferIsOnBothAccountsTransactions stamp: 'CR 11/15/2020 21:54:25'!
PASSED!

!testRun: #TransferTest #test05TransferFromAndToSameAccountRaisesError stamp: 'CR 11/15/2020 21:54:25'!
PASSED!

!testRun: #TransferTest #test06TransferOfNegativeAmountRaisesError stamp: 'CR 11/15/2020 21:54:25'!
FAILURE!

!testRun: #TransferTest #test06TransferOfNegativeAmountRaisesError stamp: 'CR 11/15/2020 21:54:25'!
FAILURE!
!Transfer methodsFor: 'initialization' stamp: 'CR 11/15/2020 21:54:34' prior: 50898906!
verifyThatTransferAmountIsValid: aTransferValue.

	(aTransferValue < 0) ifTrue: [self error: self class cantTransferNegativeAmount ]! !

!testRun: #TransferTest #test01TransferZeroDoesNotChangeAccountsBalance stamp: 'CR 11/15/2020 21:54:37'!
PASSED!

!testRun: #TransferTest #test02TransferUpdatesAccountsBalanceCorrectly stamp: 'CR 11/15/2020 21:54:37'!
PASSED!

!testRun: #TransferTest #test03TransferIsRegisteredCorrectlyOnBothAccounts stamp: 'CR 11/15/2020 21:54:37'!
PASSED!

!testRun: #TransferTest #test04TransferIsOnBothAccountsTransactions stamp: 'CR 11/15/2020 21:54:37'!
PASSED!

!testRun: #TransferTest #test05TransferFromAndToSameAccountRaisesError stamp: 'CR 11/15/2020 21:54:37'!
PASSED!

!testRun: #TransferTest #test06TransferOfNegativeAmountRaisesError stamp: 'CR 11/15/2020 21:54:37'!
FAILURE!

!testRun: #TransferTest #test06TransferOfNegativeAmountRaisesError stamp: 'CR 11/15/2020 21:54:37'!
FAILURE!

!testRun: #TransferTest #test06TransferOfNegativeAmountRaisesError stamp: 'CR 11/15/2020 21:55:27'!
FAILURE!

!testRun: #TransferTest #test06TransferOfNegativeAmountRaisesError stamp: 'CR 11/15/2020 21:55:27'!
FAILURE!
!TransferTest methodsFor: 'tests' stamp: 'CR 11/15/2020 21:55:48' prior: 50898874!
test06TransferOfNegativeAmountRaisesError
	| aTransferOfNegativeAmount |
	self should: [aTransferOfNegativeAmount := Transfer register: -30 from: emptyAccount to: accountWithDepositOf100.] 
	raise:  Error withMessageText: [Transfer cantTransferNegativeAmount].! !

!testRun: #TransferTest #test01TransferZeroDoesNotChangeAccountsBalance stamp: 'CR 11/15/2020 21:55:56'!
PASSED!

!testRun: #TransferTest #test02TransferUpdatesAccountsBalanceCorrectly stamp: 'CR 11/15/2020 21:55:56'!
PASSED!

!testRun: #TransferTest #test03TransferIsRegisteredCorrectlyOnBothAccounts stamp: 'CR 11/15/2020 21:55:56'!
PASSED!

!testRun: #TransferTest #test04TransferIsOnBothAccountsTransactions stamp: 'CR 11/15/2020 21:55:56'!
PASSED!

!testRun: #TransferTest #test05TransferFromAndToSameAccountRaisesError stamp: 'CR 11/15/2020 21:55:56'!
PASSED!

!testRun: #TransferTest #test06TransferOfNegativeAmountRaisesError stamp: 'CR 11/15/2020 21:55:56'!
PASSED!

Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'CR 11/16/2020 00:19:18'!
Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'CR 11/16/2020 00:19:28'!
Object subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary class methodsFor: 'nil' stamp: 'CR 11/16/2020 00:23:36'!
for: anAccount
	^self new initializeFor: anAccount.! !
!TransferNet class methodsFor: 'nil' stamp: 'CR 11/16/2020 00:24:02'!
for: anAccount
	^self new initializeFor: anAccount.! !

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'CR 11/16/2020 00:24:45'!
Object subclass: #AccountSummary
	instanceVariableNames: 'accountToMakeSummaryOn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'nil' stamp: 'CR 11/16/2020 00:24:44'!
initializeFor: anAccount
	accountToMakeSummaryOn := anAccount.! !

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'CR 11/16/2020 00:25:13'!
Object subclass: #TransferNet
	instanceVariableNames: 'accountToCalculateTransferNetOn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'nil' stamp: 'CR 11/16/2020 00:25:11'!
initializeFor: anAccount
	accountToCalculateTransferNetOn := anAccount.! !

Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'CR 11/16/2020 00:26:19'!
Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #TransferNet
	instanceVariableNames: 'accountToCalculateTransferNetOn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'CR 11/16/2020 00:26:29'!
Report subclass: #TransferNet
	instanceVariableNames: 'accountToCalculateTransferNetOn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #AccountSummary
	instanceVariableNames: 'accountToMakeSummaryOn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'CR 11/16/2020 00:26:38'!
Report subclass: #AccountSummary
	instanceVariableNames: 'accountToMakeSummaryOn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #AccountSummary
	instanceVariableNames: 'accountToMakeSummaryOn summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'CR 11/16/2020 00:27:48'!
Report subclass: #AccountSummary
	instanceVariableNames: 'accountToMakeSummaryOn summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #TransferNet
	instanceVariableNames: 'accountToCalculateTransferNetOn transferNetAmount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'CR 11/16/2020 00:28:17'!
Report subclass: #TransferNet
	instanceVariableNames: 'accountToCalculateTransferNetOn transferNetAmount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----SNAPSHOT----(16 November 2020 00:28:38) CuisUniversity-4384.image priorSource: 18150725!
!AccountSummary methodsFor: 'initialization' stamp: 'CR 11/16/2020 00:28:52' prior: 50899057!
initializeFor: anAccount
	accountToMakeSummaryOn := anAccount.
	summary := OrderedCollection new.! !
!TransferNet methodsFor: 'initialization' stamp: 'CR 11/16/2020 00:29:15' prior: 50899070!
initializeFor: anAccount
	accountToCalculateTransferNetOn := anAccount.
	transferNetAmount := 0.! !
!AccountSummary methodsFor: 'nil' stamp: 'CR 11/16/2020 00:30:16'!
summary
	^summary.! !
!TransferNet methodsFor: 'initialization' stamp: 'CR 11/16/2020 00:30:47'!
net
	^transferNetAmount.! !

TestCase subclass: #ReportTest
	instanceVariableNames: 'accountWithDepositOf100 accountWithDepositOf200 emptyAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

!classDefinition: #ReportTest category: 'Portfolio2' stamp: 'CR 11/16/2020 00:31:10'!
TestCase subclass: #ReportTest
	instanceVariableNames: 'accountWithDepositOf100 accountWithDepositOf200 emptyAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!
!ReportTest methodsFor: 'no messages' stamp: 'CR 11/16/2020 00:31:32' overrides: 16927572!
setUp
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	
	! !
!ReportTest methodsFor: 'nil' stamp: 'CR 11/16/2020 00:33:07'!
test01AccountSummaryOfAnEmptyAccountIsEmpty! !

!classDefinition: #ReportTest category: 'Portfolio2' stamp: 'CR 11/16/2020 00:33:25'!
TestCase subclass: #ReportTest
	instanceVariableNames: 'accountWithDepositOf100 accountWithDepositOf200 emptyAccount emptyReport'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 00:33:23' prior: 50899180 overrides: 16927572!
setUp
	emptyReport := OrderedCollection new.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	
	! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 00:34:53' prior: 50899190!
test01AccountSummaryOfAnEmptyAccountIsEmpty
	| accountSummaryOfEmptyAccount |
	accountSummaryOfEmptyAccount := AccountSummary for: emptyAccount. 
	self assert: emptyReport .! !

TestCase subclass: #ReportTest
	instanceVariableNames: 'accountWithDepositOf100 accountWithDepositOf200 emptyAccount emptyAccountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

!classDefinition: #ReportTest category: 'Portfolio2' stamp: 'CR 11/16/2020 00:35:07'!
TestCase subclass: #ReportTest
	instanceVariableNames: 'accountWithDepositOf100 accountWithDepositOf200 emptyAccount emptyAccountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 00:35:13' prior: 50899204 overrides: 16927572!
setUp
	emptyAccountSummary := OrderedCollection new.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	
	! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 00:35:44' prior: 50899217!
test01AccountSummaryOfAnEmptyAccountIsEmpty
	| accountSummaryOfEmptyAccount |
	accountSummaryOfEmptyAccount := AccountSummary for: emptyAccount. 
	self assert: emptyAccountSummary = accountSummaryOfEmptyAccount summary.! !

!testRun: #ReportTest #test01AccountSummaryOfAnEmptyAccountIsEmpty stamp: 'CR 11/16/2020 00:35:47'!
PASSED!

!classDefinition: #ReportTest category: 'Portfolio2' stamp: 'CR 11/16/2020 00:38:09'!
TestCase subclass: #ReportTest
	instanceVariableNames: 'accountWithDepositOf100 accountWithDepositOf200 emptyAccount emptyAccountSummary accountSummaryWithOnlyDepositOf100'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 00:38:07'!
test02AccountSummaryOfAnAccountWithOneTransactionWorksCorrectly
	| accountSummaryOfAnAccount |
	accountSummaryOfAnAccount := AccountSummary for: accountWithDepositOf100. 
	self assert:  accountSummaryWithOnlyDepositOf100 = accountWithDepositOf100 summary.! !
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 00:38:53' prior: 50899242 overrides: 16927572!
setUp
	emptyAccountSummary := OrderedCollection new.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	accountSummaryWithOnlyDepositOf100 := OrderedCollection with: 'Dep�sito por 100'.
	
	! !

!testRun: #ReportTest #test02AccountSummaryOfAnAccountWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 00:39:07'!
ERROR!

!testRun: #ReportTest #test02AccountSummaryOfAnAccountWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 00:39:07'!
ERROR!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 00:39:25' prior: 50899279!
test02AccountSummaryOfAnAccountWithOneTransactionWorksCorrectly
	| accountSummaryOfAnAccount |
	accountSummaryOfAnAccount := AccountSummary for: accountWithDepositOf100. 
	self assert:  accountSummaryWithOnlyDepositOf100 = accountSummaryOfAnAccount summary.! !

!testRun: #ReportTest #test02AccountSummaryOfAnAccountWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 00:39:27'!
FAILURE!

!testRun: #ReportTest #test02AccountSummaryOfAnAccountWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 00:39:27'!
FAILURE!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 00:45:44' prior: 50899157!
summary
	accountToMakeSummaryOn collaborateWith: self.  
	^summary.! !
!TransferNet methodsFor: 'initialization' stamp: 'CR 11/16/2020 00:46:11' prior: 50899161!
net
	accountToCalculateTransferNetOn collaborateWith: self.  
	^transferNetAmount.! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'CR 11/16/2020 00:47:09'!
collaborateWith: aReport
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 00:48:17' prior: 50899346!
collaborateWith: aReportToCollaborateWith

	transactions do: [:aTransaction | aTransaction collaborateWith: aReportToCollaborateWith].
	! !

Report subclass: #AccountSummary
	instanceVariableNames: 'accountToMakeSummaryOn summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

!classDefinition: #AccountSummary category: 'Portfolio2' stamp: 'CR 11/16/2020 01:01:11'!
Report subclass: #AccountSummary
	instanceVariableNames: 'accountToMakeSummaryOn summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!
!Deposit methodsFor: 'nil' stamp: 'CR 11/16/2020 01:15:45'!
collaborateWith: aReportToCollaborateWith
	^ self executeCollaboration: (aReportToCollaborateWith colaboration). ! !
!AccountTransaction methodsFor: 'nil' stamp: 'CR 11/16/2020 01:16:13'!
collaborateWith: aReportToCollaborateWith
	^ self executeCollaboration: (aReportToCollaborateWith colaboration). ! !

!methodRemoval: Deposit #collaborateWith: stamp: 'CR 11/16/2020 01:16:18'!
collaborateWith: aReportToCollaborateWith
	^ self executeCollaboration: (aReportToCollaborateWith colaboration). !
!Deposit methodsFor: 'nil' stamp: 'CR 11/16/2020 01:20:20'!
executeCollaboration: collaborationToPerform
	collaborationToPerform collaboratingWithDeposit: self.
	 ! !
!TransferDeposit methodsFor: 'nil' stamp: 'CR 11/16/2020 01:21:21'!
executeCollaboration: collaborationToPerform
	collaborationToPerform collaboratingTransferDeposit: self.
	 ! !
!TransferWithdraw methodsFor: 'nil' stamp: 'CR 11/16/2020 01:21:36'!
executeCollaboration: collaborationToPerform
	collaborationToPerform collaboratingTransferWithdraw: self.
	 ! !
!Withdraw methodsFor: 'nil' stamp: 'CR 11/16/2020 01:22:05'!
executeCollaboration: collaborationToPerform
	collaborationToPerform collaboratingWithdraw: self.
	 ! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 01:22:16' prior: 50899389!
executeCollaboration: collaborationToPerform
	collaborationToPerform collaboratingDeposit: self.
	 ! !

----SNAPSHOT----(16 November 2020 01:23:33) CuisUniversity-4384.image priorSource: 18159690!

----SNAPSHOT----(16 November 2020 01:23:41) CuisUniversity-4384.image priorSource: 18168614!

Object subclass: #ReportAction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

!classDefinition: #ReportAction category: 'Portfolio2' stamp: 'CR 11/16/2020 01:23:51'!
Object subclass: #ReportAction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

ReportAction subclass: #summaryString
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

ReportAction subclass: #SummaryString
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

!classDefinition: #SummaryString category: 'Portfolio2' stamp: 'CR 11/16/2020 01:24:39'!
ReportAction subclass: #SummaryString
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

ReportAction subclass: #CalculateNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

!classDefinition: #CalculateNet category: 'Portfolio2' stamp: 'CR 11/16/2020 01:25:14'!
ReportAction subclass: #CalculateNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!
!ReportAction methodsFor: 'nil' stamp: 'CR 11/16/2020 01:26:02'!
collaboratinWithdraw: aWithdraw! !
!ReportAction methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 01:26:05'!
collaboratingWithdraw: aWithdraw! !

!methodRemoval: ReportAction #collaboratinWithdraw: stamp: 'CR 11/16/2020 01:26:07'!
collaboratinWithdraw: aWithdraw!
!ReportAction methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 01:26:14' prior: 50899467!
collaboratingWithdraw: aWithdraw
	self subclassResponsibility ! !
!ReportAction methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 01:26:23'!
collaboratingDeposit: aDeposit
	self subclassResponsibility ! !
!ReportAction methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 01:26:34'!
collaboratingTransferDeposit: aTransferDeposit
	self subclassResponsibility ! !
!ReportAction methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 01:26:45'!
collaboratingTransferWithdraw: aTransferWithdraw
	self subclassResponsibility ! !
!CalculateNet methodsFor: 'nil' stamp: 'CR 11/16/2020 01:27:53' overrides: 50899491!
collaboratingTransferWithdraw: aTransferWithdraw
	^  aTransferWithdraw negative.! !
!CalculateNet methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 01:28:14' prior: 50899497 overrides: 50899491!
collaboratingTransferWithdraw: aTransferWithdraw
	^  aTransferWithdraw value negative.! !
!CalculateNet methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 01:30:04' overrides: 50899485!
collaboratingTransferDeposit: aTransferDeposit
	^  aTransferDeposit value.! !
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 01:33:28' prior: 50899377!
collaborateWith: aReportToCollaborateWith
	| resultOfCollaboration | 
	resultOfCollaboration := self executeCollaboration: (aReportToCollaborateWith colaboration). 
	aReportToCollaborateWith collaborationWithTransactionResult: resultOfCollaboration.! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 01:34:25' prior: 50899414!
executeCollaboration: collaborationToPerform
	^ collaborationToPerform collaboratingDeposit: self.
	 ! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 01:34:35' prior: 50899395!
executeCollaboration: collaborationToPerform
	^ collaborationToPerform collaboratingTransferDeposit: self.
	 ! !
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 01:34:41' prior: 50899401!
executeCollaboration: collaborationToPerform
	^ collaborationToPerform collaboratingTransferWithdraw: self.
	 ! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 01:34:54' prior: 50899407!
executeCollaboration: collaborationToPerform
	^ collaborationToPerform collaboratingWithdraw: self.
	 ! !
!CalculateNet methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 01:35:26' overrides: 50899475!
collaboratingWithdraw: aTransferWithdraw
	^  0.! !
!CalculateNet methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 01:35:38' overrides: 50899480!
collaboratingDeposit: aTransferWithdraw
	^  0.! !
!CalculateNet methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 01:35:53' prior: 50899560 overrides: 50899480!
collaboratingDeposit: aDeposit
	^  0.! !
!CalculateNet methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 01:36:00' prior: 50899555 overrides: 50899475!
collaboratingWithdraw: aWithdraw
	^  0.! !
!SummaryString methodsFor: 'nil' stamp: 'CR 11/16/2020 01:36:50' overrides: 50899491!
collaboratingTransferWithdraw: aTransferWithdraw
	^  'Salida por transferencia de ' , aTransferWithdraw value. ! !
!SummaryString methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 01:37:14' prior: 50899576 overrides: 50899491!
collaboratingTransferWithdraw: aTransferWithdraw
	^  'Salida por transferencia de ' , (aTransferWithdraw value) asString. ! !
!SummaryString methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 01:37:51' overrides: 50899485!
collaboratingTransferDeposit: aTransferDeposit
	^  'Entrada por transferencia de ' , (aTransferDeposit value) asString. ! !
!SummaryString methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 01:38:41' overrides: 50899480!
collaboratingDeposit: aDeposit
	^  'Dep�sito por ' , (aDeposit value) asString. ! !
!SummaryString methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 01:38:58' overrides: 50899475!
collaboratingWithdraw: aWithdraw
	^  'Extracci�n por ' , (aWithdraw value) asString. ! !
!Report methodsFor: 'nil' stamp: 'CR 11/16/2020 01:40:25'!
collaborationWithTransactionResult: resultOfCollaboration
	self subclassResponsibility.! !
!AccountSummary methodsFor: 'nil' stamp: 'CR 11/16/2020 01:40:52' overrides: 50899611!
collaborationWithTransactionResult: resultOfCollaboration
	summary add: resultOfCollaboration.! !
!TransferNet methodsFor: 'nil' stamp: 'CR 11/16/2020 01:41:19' overrides: 50899611!
collaborationWithTransactionResult: resultOfCollaboration
	transferNetAmount add: resultOfCollaboration.! !

1 add: 2!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 01:41:36' prior: 50899623 overrides: 50899611!
collaborationWithTransactionResult: resultOfCollaboration
	transferNetAmount := transferNetAmount + resultOfCollaboration.! !

!testRun: #ReportTest #test01AccountSummaryOfAnEmptyAccountIsEmpty stamp: 'CR 11/16/2020 01:44:56'!
PASSED!

----SNAPSHOT----(16 November 2020 01:45:00) CuisUniversity-4384.image priorSource: 18168708!

!testRun: #ReportTest #test02AccountSummaryOfAnAccountWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 01:45:13'!
ERROR!

!testRun: #ReportTest #test02AccountSummaryOfAnAccountWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 01:45:13'!
ERROR!

!classDefinition: #AccountSummary category: 'Portfolio2' stamp: 'CR 11/16/2020 01:47:18'!
Report subclass: #AccountSummary
	instanceVariableNames: 'accountToMakeSummaryOn summary collaborationAction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!
!AccountSummary methodsFor: 'initialization' stamp: 'CR 11/16/2020 01:47:16' prior: 50899145!
initializeFor: anAccount 
	accountToMakeSummaryOn := anAccount.
	summary := OrderedCollection new.
	collaborationAction := SummaryString new.
	! !

!classDefinition: #TransferNet category: 'Portfolio2' stamp: 'CR 11/16/2020 01:47:37'!
Report subclass: #TransferNet
	instanceVariableNames: 'accountToCalculateTransferNetOn transferNetAmount collaborationAction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!
!TransferNet methodsFor: 'initialization' stamp: 'CR 11/16/2020 01:47:36' prior: 50899151!
initializeFor: anAccount
	accountToCalculateTransferNetOn := anAccount.
	transferNetAmount := 0.
	collaborationAction := CalculateNet new.
	! !

Object subclass: #Report
	instanceVariableNames: 'collaborationAction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

Report subclass: #AccountSummary
	instanceVariableNames: 'accountToMakeSummaryOn summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

!classDefinition: #AccountSummary category: 'Portfolio2' stamp: 'CR 11/16/2020 01:48:19'!
Report subclass: #AccountSummary
	instanceVariableNames: 'accountToMakeSummaryOn summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

Report subclass: #AccountSummary
	instanceVariableNames: 'summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

!classDefinition: #AccountSummary category: 'Portfolio2' stamp: 'CR 11/16/2020 01:48:28'!
Report subclass: #AccountSummary
	instanceVariableNames: 'summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

Report subclass: #TransferNet
	instanceVariableNames: 'transferNetAmount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

!classDefinition: #TransferNet category: 'Portfolio2' stamp: 'CR 11/16/2020 01:48:39'!
Report subclass: #TransferNet
	instanceVariableNames: 'transferNetAmount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

Object subclass: #Report
	instanceVariableNames: 'accountToMakeReportOn collaborationAction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

!classDefinition: #Report category: 'Portfolio2' stamp: 'CR 11/16/2020 01:48:55'!
Object subclass: #Report
	instanceVariableNames: 'accountToMakeReportOn collaborationAction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!
!AccountSummary methodsFor: 'initialization' stamp: 'CR 11/16/2020 01:49:02' prior: 50899661!
initializeFor: anAccount 
	accountToMakeReportOn := anAccount.
	summary := OrderedCollection new.
	collaborationAction := SummaryString new.
	! !

!classDefinition: #AccountSummary category: 'Portfolio2' stamp: 'CR 11/16/2020 01:49:10'!
Report subclass: #AccountSummary
	instanceVariableNames: 'summary accountToMakeReportFor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!
!AccountSummary methodsFor: 'initialization' stamp: 'CR 11/16/2020 01:49:08' prior: 50899740!
initializeFor: anAccount 
	accountToMakeReportFor := anAccount.
	summary := OrderedCollection new.
	collaborationAction := SummaryString new.
	! !

Object subclass: #Report
	instanceVariableNames: 'collaborationAction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

!classDefinition: #Report category: 'Portfolio2' stamp: 'CR 11/16/2020 01:49:19'!
Object subclass: #Report
	instanceVariableNames: 'collaborationAction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

Report subclass: #AccountSummary
	instanceVariableNames: 'summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

!classDefinition: #AccountSummary category: 'Portfolio2' stamp: 'CR 11/16/2020 01:49:27'!
Report subclass: #AccountSummary
	instanceVariableNames: 'summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

Object subclass: #Report
	instanceVariableNames: 'accountToMakeReportFor collaborationAction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

!classDefinition: #Report category: 'Portfolio2' stamp: 'CR 11/16/2020 01:49:30'!
Object subclass: #Report
	instanceVariableNames: 'accountToMakeReportFor collaborationAction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!
!AccountSummary methodsFor: 'collaboration' stamp: 'CR 11/16/2020 01:49:41' prior: 50899335!
summary
	accountToMakeReportFor collaborateWith: self.  
	^summary.! !
!TransferNet methodsFor: 'collaboration' stamp: 'CR 11/16/2020 01:49:49' prior: 50899341!
net
	accountToMakeReportFor collaborateWith: self.  
	^transferNetAmount.! !
!TransferNet methodsFor: 'initialization' stamp: 'CR 11/16/2020 01:50:00' prior: 50899678!
initializeFor: anAccount
	accountToMakeReportFor := anAccount.
	transferNetAmount := 0.
	collaborationAction := CalculateNet new.
	! !

!testRun: #ReportTest #test02AccountSummaryOfAnAccountWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 01:50:12'!
ERROR!

!testRun: #ReportTest #test02AccountSummaryOfAnAccountWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 01:50:12'!
ERROR!
!Report methodsFor: 'nil' stamp: 'CR 11/16/2020 01:51:05'!
collaboration
	^ collaborationAction.! !
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 01:51:31' prior: 50899516!
collaborateWith: aReportToCollaborateWith
	| resultOfCollaboration | 
	resultOfCollaboration := self executeCollaboration: (aReportToCollaborateWith collaboration). 
	aReportToCollaborateWith collaborationWithTransactionResult: resultOfCollaboration.! !

----SNAPSHOT----(16 November 2020 01:51:45) CuisUniversity-4384.image priorSource: 18175690!

!testRun: #ReportTest #test02AccountSummaryOfAnAccountWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 01:51:48'!
PASSED!

!testRun: #ReportTest #test01AccountSummaryOfAnEmptyAccountIsEmpty stamp: 'CR 11/16/2020 01:51:51'!
PASSED!

!classDefinition: #ReportTest category: 'Portfolio2' stamp: 'CR 11/16/2020 01:57:53'!
TestCase subclass: #ReportTest
	instanceVariableNames: 'accountWithDepositOf100 accountWithDepositOf200 emptyAccount emptyAccountSummary accountSummaryWithOnlyDepositOf100 accountWithManyTransactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 01:57:49'!
test03AccountSummaryOfAnAccountWithManyTransactionsWorksCorrectly
	| accountSummaryOfAnAccount |
	accountSummaryOfAnAccount := AccountSummary for: accountWithManyTransactions.
	self assert:  accountSummaryWithOnlyDepositOf100 = accountSummaryOfAnAccount summary.! !
!Portfolio methodsFor: 'nil' stamp: 'CR 11/16/2020 02:09:36'!
collaborateWith: aReportToCollaborateWith

	accounts do: [:anAccount | anAccount collaborateWith: aReportToCollaborateWith].
	! !
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 02:11:46' prior: 50899291 overrides: 16927572!
setUp
	emptyAccountSummary := OrderedCollection new.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	accountSummaryWithOnlyDepositOf100 := OrderedCollection with: 'Dep�sito por 100'.
	Deposit register: 300 on: accountWithManyTransactions.
	Withdraw register: 50 on: accountWithManyTransactions.
	
	
	
	! !

!classDefinition: #ReportTest category: 'Portfolio2' stamp: 'CR 11/16/2020 02:13:45'!
TestCase subclass: #ReportTest
	instanceVariableNames: 'accountWithDepositOf100 accountWithDepositOf200 emptyAccount emptyAccountSummary accountSummaryWithOnlyDepositOf100 accountWithManyTransactions accountSummaryManyTransactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 02:13:42' prior: 50899883 overrides: 16927572!
setUp
	emptyAccountSummary := OrderedCollection new.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	accountSummaryWithOnlyDepositOf100 := OrderedCollection with: 'Dep�sito por 100'.
	Deposit register: 300 on: accountWithManyTransactions.
	Withdraw register: 50 on: accountWithManyTransactions.
	Transfer register: 75 from: accountWithManyTransactions to: emptyAccount.
	Transfer register: 40 from: emptyAccount to: accountWithManyTransactions.
	accountSummaryManyTransactions := OrderedCollection with: 'Dep�sito por 100'.
	
	
	! !
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 02:15:01' prior: 50899915 overrides: 16927572!
setUp
	emptyAccountSummary := OrderedCollection new.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	accountSummaryWithOnlyDepositOf100 := OrderedCollection with: 'Dep�sito por 100'.
	Deposit register: 300 on: accountWithManyTransactions.
	Withdraw register: 50 on: accountWithManyTransactions.
	Transfer register: 75 from: accountWithManyTransactions to: emptyAccount.
	Transfer register: 40 from: emptyAccount to: accountWithManyTransactions.
	accountSummaryManyTransactions := OrderedCollection with: 'Dep�sito por 100' with: 'Extracci�n por 50' with: 'Salida por transferencia de 75' with: 'Entrada por transferencia de 40'.
	
	
	! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 02:16:08' prior: 50899864!
test03AccountSummaryOfAnAccountWithManyTransactionsWorksCorrectly
	| accountSummaryOfAnAccountWithManyTransactions |
	accountSummaryOfAnAccountWithManyTransactions := AccountSummary for: accountWithManyTransactions.
	self assertThat:  accountSummaryWithOnlyDepositOf100 isEqualTo: accountSummaryOfAnAccountWithManyTransactions summary.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 02:17:51'!
assertThat:  aCollection isEqualTo: aCollectionToBeComparedTo

	self assert: (aCollection size = aCollectionToBeComparedTo size).
	self assert: (aCollection allSatisfy: [:anElement | aCollectionToBeComparedTo includes: anElement ]).! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 02:18:13' prior: 50899985!
assertThat:  aCollection isEqualTo: aCollectionToBeComparedTo

	self assert: (aCollection size = aCollectionToBeComparedTo size).
	self assert: (aCollection allSatisfy: [:anElement | aCollectionToBeComparedTo includes: anElement ]).
	self assert: (aCollectionToBeComparedTo allSatisfy: [:anElement | aCollection includes: anElement ]).! !
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 02:19:31' prior: 50899941 overrides: 16927572!
setUp
	emptyAccountSummary := OrderedCollection new.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	accountSummaryWithOnlyDepositOf100 := OrderedCollection with: 'Dep�sito por 100'.
	Deposit register: 300 on: accountWithManyTransactions.
	Withdraw register: 50 on: accountWithManyTransactions.
	Transfer register: 75 from: accountWithManyTransactions to: emptyAccount.
	Transfer register: 75 from: emptyAccount to: accountWithManyTransactions.
	accountSummaryManyTransactions := OrderedCollection with: 'Dep�sito por 100' with: 'Extracci�n por 50' with: 'Salida por transferencia de 75' with: 'Entrada por transferencia de 40'.
	
	
	! !
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 02:19:41' prior: 50900010 overrides: 16927572!
setUp
	emptyAccountSummary := OrderedCollection new.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	accountSummaryWithOnlyDepositOf100 := OrderedCollection with: 'Dep�sito por 100'.
	Deposit register: 300 on: accountWithManyTransactions.
	Withdraw register: 50 on: accountWithManyTransactions.
	Transfer register: 75 from: accountWithManyTransactions to: emptyAccount.
	Transfer register: 75 from: emptyAccount to: accountWithManyTransactions.
	accountSummaryManyTransactions := OrderedCollection with: 'Dep�sito por 100' with: 'Extracci�n por 50' with: 'Salida por transferencia de 75' with: 'Entrada por transferencia de 75'.
	
	
	! !
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 02:22:13' prior: 50900040 overrides: 16927572!
setUp
	emptyAccountSummary := OrderedCollection new.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	accountSummaryWithOnlyDepositOf100 := OrderedCollection with: 'Dep�sito por 100'.
	Deposit register: 300 on: accountWithManyTransactions.
	Withdraw register: 50 on: accountWithManyTransactions.
	"
	Transfer register: 75 from: accountWithManyTransactions to: emptyAccount.
	Transfer register: 75 from: emptyAccount to: accountWithManyTransactions.
	 accountSummaryManyTransactions := OrderedCollection with: 'Dep�sito por 100' with: 'Extracci�n por 50' with: 'Salida por transferencia de 75' with: 'Entrada por transferencia de 75'."
	
	
	! !
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 02:23:16' prior: 50900070 overrides: 16927572!
setUp
	emptyAccountSummary := OrderedCollection new.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	accountWithManyTransactions := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	accountSummaryWithOnlyDepositOf100 := OrderedCollection with: 'Dep�sito por 100'.
	Deposit register: 300 on: accountWithManyTransactions.
	Withdraw register: 50 on: accountWithManyTransactions.
	"
	Transfer register: 75 from: accountWithManyTransactions to: emptyAccount.
	Transfer register: 75 from: emptyAccount to: accountWithManyTransactions.
	 accountSummaryManyTransactions := OrderedCollection with: 'Dep�sito por 100' with: 'Extracci�n por 50' with: 'Salida por transferencia de 75' with: 'Entrada por transferencia de 75'."
	
	
	! !

!testRun: #ReportTest #test01AccountSummaryOfAnEmptyAccountIsEmpty stamp: 'CR 11/16/2020 02:23:18'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryOfAnAccountWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 02:23:18'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryOfAnAccountWithManyTransactionsWorksCorrectly stamp: 'CR 11/16/2020 02:23:18'!
FAILURE!

!testRun: #ReportTest #test03AccountSummaryOfAnAccountWithManyTransactionsWorksCorrectly stamp: 'CR 11/16/2020 02:23:18'!
FAILURE!

accountSummaryOfAnAccountWithManyTransactions summary!
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 02:23:49' prior: 50900100 overrides: 16927572!
setUp
	emptyAccountSummary := OrderedCollection new.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	accountWithManyTransactions := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	accountSummaryWithOnlyDepositOf100 := OrderedCollection with: 'Dep�sito por 100'.
	Deposit register: 300 on: accountWithManyTransactions.
	Withdraw register: 50 on: accountWithManyTransactions.
	Transfer register: 75 from: accountWithManyTransactions to: emptyAccount.
	Transfer register: 75 from: emptyAccount to: accountWithManyTransactions.
	 accountSummaryManyTransactions := OrderedCollection with: 'Dep�sito por 100' with: 'Extracci�n por 50' with: 'Salida por transferencia de 75' with: 'Entrada por transferencia de 75'.
	
	
	! !

!testRun: #ReportTest #test01AccountSummaryOfAnEmptyAccountIsEmpty stamp: 'CR 11/16/2020 02:23:51'!
FAILURE!

!testRun: #ReportTest #test02AccountSummaryOfAnAccountWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 02:23:51'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryOfAnAccountWithManyTransactionsWorksCorrectly stamp: 'CR 11/16/2020 02:23:51'!
FAILURE!
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 02:24:42' prior: 50900149 overrides: 16927572!
setUp
	emptyAccountSummary := OrderedCollection new.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	accountWithManyTransactions := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	accountSummaryWithOnlyDepositOf100 := OrderedCollection with: 'Dep�sito por 100'.
	Deposit register: 300 on: accountWithManyTransactions.
	Withdraw register: 50 on: accountWithManyTransactions.
	Transfer register: 75 from: accountWithManyTransactions to: accountWithDepositOf100.
	Transfer register: 40 from: accountWithDepositOf100 to: accountWithManyTransactions.
	 accountSummaryManyTransactions := OrderedCollection with: 'Dep�sito por 100' with: 'Extracci�n por 50' with: 'Salida por transferencia de 75' with: 'Entrada por transferencia de 40'.
	
	
	! !

!testRun: #ReportTest #test01AccountSummaryOfAnEmptyAccountIsEmpty stamp: 'CR 11/16/2020 02:24:44'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryOfAnAccountWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 02:24:44'!
FAILURE!

!testRun: #ReportTest #test03AccountSummaryOfAnAccountWithManyTransactionsWorksCorrectly stamp: 'CR 11/16/2020 02:24:44'!
FAILURE!

!classDefinition: #ReportTest category: 'Portfolio2' stamp: 'CR 11/16/2020 02:25:23'!
TestCase subclass: #ReportTest
	instanceVariableNames: 'accountWithDepositOf100 accountWithDepositOf200 emptyAccount emptyAccountSummary accountSummaryWithOnlyDepositOf100 accountWithManyTransactions accountSummaryManyTransactions accountWithTwoTransfers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 02:25:21' prior: 50900192 overrides: 16927572!
setUp
	emptyAccountSummary := OrderedCollection new.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	accountWithManyTransactions := ReceptiveAccount new.
	accountWithTwoTransfers := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	accountSummaryWithOnlyDepositOf100 := OrderedCollection with: 'Dep�sito por 100'.
	Deposit register: 300 on: accountWithManyTransactions.
	Withdraw register: 50 on: accountWithManyTransactions.
	Transfer register: 75 from: accountWithManyTransactions to: accountWithDepositOf100.
	Transfer register: 40 from: accountWithDepositOf100 to: accountWithManyTransactions.
	
	 accountSummaryManyTransactions := OrderedCollection with: 'Dep�sito por 100' with: 'Extracci�n por 50' with: 'Salida por transferencia de 75' with: 'Entrada por transferencia de 40'.
	
	
	! !
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 02:25:31' prior: 50900249 overrides: 16927572!
setUp
	emptyAccountSummary := OrderedCollection new.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	accountWithManyTransactions := ReceptiveAccount new.
	accountWithTwoTransfers := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	accountSummaryWithOnlyDepositOf100 := OrderedCollection with: 'Dep�sito por 100'.
	Deposit register: 300 on: accountWithManyTransactions.
	Withdraw register: 50 on: accountWithManyTransactions.
	Transfer register: 75 from: accountWithManyTransactions to: accountWithTwoTransfers.
	Transfer register: 40 from: accountWithTwoTransfers to: accountWithManyTransactions.
	
	 accountSummaryManyTransactions := OrderedCollection with: 'Dep�sito por 100' with: 'Extracci�n por 50' with: 'Salida por transferencia de 75' with: 'Entrada por transferencia de 40'.
	
	
	! !

!testRun: #ReportTest #test01AccountSummaryOfAnEmptyAccountIsEmpty stamp: 'CR 11/16/2020 02:25:36'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryOfAnAccountWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 02:25:36'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryOfAnAccountWithManyTransactionsWorksCorrectly stamp: 'CR 11/16/2020 02:25:36'!
FAILURE!

!testRun: #ReportTest #test03AccountSummaryOfAnAccountWithManyTransactionsWorksCorrectly stamp: 'CR 11/16/2020 02:25:36'!
FAILURE!

!testRun: #ReportTest #test03AccountSummaryOfAnAccountWithManyTransactionsWorksCorrectly stamp: 'CR 11/16/2020 02:25:40'!
FAILURE!

!testRun: #ReportTest #test03AccountSummaryOfAnAccountWithManyTransactionsWorksCorrectly stamp: 'CR 11/16/2020 02:25:40'!
FAILURE!

accountSummaryOfAnAccountWithManyTransactions summary!

!testRun: #ReportTest #test03AccountSummaryOfAnAccountWithManyTransactionsWorksCorrectly stamp: 'CR 11/16/2020 02:26:22'!
FAILURE!

!testRun: #ReportTest #test03AccountSummaryOfAnAccountWithManyTransactionsWorksCorrectly stamp: 'CR 11/16/2020 02:26:28'!
FAILURE!

accountSummaryOfAnAccountWithManyTransactions!
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 02:27:55' prior: 50900283 overrides: 16927572!
setUp
	emptyAccountSummary := OrderedCollection new.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	accountWithManyTransactions := ReceptiveAccount new.
	accountWithTwoTransfers := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	accountSummaryWithOnlyDepositOf100 := OrderedCollection with: 'Dep�sito por 100'.
	Deposit register: 300 on: accountWithManyTransactions.
	Withdraw register: 50 on: accountWithManyTransactions.
	Transfer register: 75 from: accountWithManyTransactions to: accountWithTwoTransfers.
	Transfer register: 40 from: accountWithTwoTransfers to: accountWithManyTransactions.
	
	 accountSummaryManyTransactions := OrderedCollection with: 'Dep�sito por 300' with: 'Extracci�n por 50' with: 'Salida por transferencia de 75' with: 'Entrada por transferencia de 40'.
	
	
	! !

!testRun: #ReportTest #test01AccountSummaryOfAnEmptyAccountIsEmpty stamp: 'CR 11/16/2020 02:27:59'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryOfAnAccountWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 02:27:59'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryOfAnAccountWithManyTransactionsWorksCorrectly stamp: 'CR 11/16/2020 02:27:59'!
FAILURE!

!testRun: #ReportTest #test03AccountSummaryOfAnAccountWithManyTransactionsWorksCorrectly stamp: 'CR 11/16/2020 02:27:59'!
FAILURE!
!ReportTest methodsFor: 'tests' stamp: 'CR 11/16/2020 02:29:21' prior: 50899971!
test03AccountSummaryOfAnAccountWithManyTransactionsWorksCorrectly
	| accountSummaryOfAnAccountWithManyTransactions |
	accountSummaryOfAnAccountWithManyTransactions := AccountSummary for: accountWithManyTransactions.
	self assertThat:  accountSummaryManyTransactions isEqualTo: accountSummaryOfAnAccountWithManyTransactions summary.! !

!testRun: #ReportTest #test01AccountSummaryOfAnEmptyAccountIsEmpty stamp: 'CR 11/16/2020 02:29:23'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryOfAnAccountWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 02:29:23'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryOfAnAccountWithManyTransactionsWorksCorrectly stamp: 'CR 11/16/2020 02:29:23'!
PASSED!
!ReportTest methodsFor: 'tests' stamp: 'CR 11/16/2020 02:30:37'!
test03AccountSummaryOfAReceptiveAccountWithManyTransactionsWorksCorrectly
	| accountSummaryOfAnAccountWithManyTransactions |
	accountSummaryOfAnAccountWithManyTransactions := AccountSummary for: accountWithManyTransactions.
	self assertThat:  accountSummaryManyTransactions isEqualTo: accountSummaryOfAnAccountWithManyTransactions summary.! !
!ReportTest methodsFor: 'tests' stamp: 'CR 11/16/2020 02:30:48'!
test01AccountSummaryOfAnEmptyReceptiveAccountIsEmpty
	| accountSummaryOfEmptyAccount |
	accountSummaryOfEmptyAccount := AccountSummary for: emptyAccount. 
	self assert: emptyAccountSummary = accountSummaryOfEmptyAccount summary.! !
!ReportTest methodsFor: 'tests' stamp: 'CR 11/16/2020 02:30:53'!
test02AccountSummaryOfAReceptiveAccountWithOneTransactionWorksCorrectly
	| accountSummaryOfAnAccount |
	accountSummaryOfAnAccount := AccountSummary for: accountWithDepositOf100. 
	self assert:  accountSummaryWithOnlyDepositOf100 = accountSummaryOfAnAccount summary.! !

!methodRemoval: ReportTest #test01AccountSummaryOfAnEmptyAccountIsEmpty stamp: 'CR 11/16/2020 02:30:58'!
test01AccountSummaryOfAnEmptyAccountIsEmpty
	| accountSummaryOfEmptyAccount |
	accountSummaryOfEmptyAccount := AccountSummary for: emptyAccount. 
	self assert: emptyAccountSummary = accountSummaryOfEmptyAccount summary.!

!methodRemoval: ReportTest #test02AccountSummaryOfAnAccountWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 02:31:06'!
test02AccountSummaryOfAnAccountWithOneTransactionWorksCorrectly
	| accountSummaryOfAnAccount |
	accountSummaryOfAnAccount := AccountSummary for: accountWithDepositOf100. 
	self assert:  accountSummaryWithOnlyDepositOf100 = accountSummaryOfAnAccount summary.!

!methodRemoval: ReportTest #test03AccountSummaryOfAnAccountWithManyTransactionsWorksCorrectly stamp: 'CR 11/16/2020 02:31:09'!
test03AccountSummaryOfAnAccountWithManyTransactionsWorksCorrectly
	| accountSummaryOfAnAccountWithManyTransactions |
	accountSummaryOfAnAccountWithManyTransactions := AccountSummary for: accountWithManyTransactions.
	self assertThat:  accountSummaryManyTransactions isEqualTo: accountSummaryOfAnAccountWithManyTransactions summary.!

!classDefinition: #ReportTest category: 'Portfolio2' stamp: 'CR 11/16/2020 02:32:04'!
TestCase subclass: #ReportTest
	instanceVariableNames: 'accountWithDepositOf100 accountWithDepositOf200 emptyAccount emptyAccountSummary accountSummaryWithOnlyDepositOf100 accountWithManyTransactions accountSummaryManyTransactions accountWithTwoTransfers emptyPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!
!ReportTest methodsFor: 'tests' stamp: 'CR 11/16/2020 02:32:02'!
test04AccountSummaryOfAnEmptyPortfolioIsEmpty
	| accountSummaryOfEmptyPorfolio |
	accountSummaryOfEmptyPorfolio := AccountSummary for: emptyPortfolio. 
	self assert: emptyAccountSummary = accountSummaryOfEmptyPorfolio summary.! !
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 02:32:28' prior: 50900352 overrides: 16927572!
setUp
	emptyPortfolio := Portfolio new.
	emptyAccountSummary := OrderedCollection new.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	accountWithManyTransactions := ReceptiveAccount new.
	accountWithTwoTransfers := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	accountSummaryWithOnlyDepositOf100 := OrderedCollection with: 'Dep�sito por 100'.
	Deposit register: 300 on: accountWithManyTransactions.
	Withdraw register: 50 on: accountWithManyTransactions.
	Transfer register: 75 from: accountWithManyTransactions to: accountWithTwoTransfers.
	Transfer register: 40 from: accountWithTwoTransfers to: accountWithManyTransactions.
	
	 accountSummaryManyTransactions := OrderedCollection with: 'Dep�sito por 300' with: 'Extracci�n por 50' with: 'Salida por transferencia de 75' with: 'Entrada por transferencia de 40'.
	
	
	! !

!testRun: #ReportTest #test04AccountSummaryOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/16/2020 02:32:40'!
PASSED!

!classDefinition: #ReportTest category: 'Portfolio2' stamp: 'CR 11/16/2020 02:34:58'!
TestCase subclass: #ReportTest
	instanceVariableNames: 'accountWithDepositOf100 accountWithDepositOf200 emptyAccount emptyAccountSummary accountSummaryWithOnlyDepositOf100 accountWithManyTransactions accountSummaryManyTransactions accountWithTwoTransfers emptyPortfolio simplePortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 02:34:53' prior: 50900521 overrides: 16927572!
setUp
	emptyPortfolio := Portfolio new.
	emptyAccountSummary := OrderedCollection new.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	accountWithManyTransactions := ReceptiveAccount new.
	accountWithTwoTransfers := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	simplePortfolio := Portfolio with: accountWithDepositOf100.
	
	
	
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	accountSummaryWithOnlyDepositOf100 := OrderedCollection with: 'Dep�sito por 100'.
	Deposit register: 300 on: accountWithManyTransactions.
	Withdraw register: 50 on: accountWithManyTransactions.
	Transfer register: 75 from: accountWithManyTransactions to: accountWithTwoTransfers.
	Transfer register: 40 from: accountWithTwoTransfers to: accountWithManyTransactions.
	
	 accountSummaryManyTransactions := OrderedCollection with: 'Dep�sito por 300' with: 'Extracci�n por 50' with: 'Salida por transferencia de 75' with: 'Entrada por transferencia de 40'.
	
	
	! !
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 02:35:03' prior: 50900573 overrides: 16927572!
setUp
	emptyPortfolio := Portfolio new.
	emptyAccountSummary := OrderedCollection new.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	accountWithManyTransactions := ReceptiveAccount new.
	accountWithTwoTransfers := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	simplePortfolio := Portfolio with: accountWithDepositOf100.

	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	accountSummaryWithOnlyDepositOf100 := OrderedCollection with: 'Dep�sito por 100'.
	Deposit register: 300 on: accountWithManyTransactions.
	Withdraw register: 50 on: accountWithManyTransactions.
	Transfer register: 75 from: accountWithManyTransactions to: accountWithTwoTransfers.
	Transfer register: 40 from: accountWithTwoTransfers to: accountWithManyTransactions.
	
	 accountSummaryManyTransactions := OrderedCollection with: 'Dep�sito por 300' with: 'Extracci�n por 50' with: 'Salida por transferencia de 75' with: 'Entrada por transferencia de 40'.
	
	
	! !
!ReportTest methodsFor: 'tests' stamp: 'CR 11/16/2020 02:35:43'!
test05AccountSummaryOfAPortfolioWithOneAccountWorksCorrectly
	| accountSummaryOfEmptyPorfolio |
	accountSummaryOfEmptyPorfolio := AccountSummary for: emptyPortfolio. 
	self assert: emptyAccountSummary = accountSummaryOfEmptyPorfolio summary.! !
!ReportTest methodsFor: 'tests' stamp: 'CR 11/16/2020 02:36:55' prior: 50900646!
test05AccountSummaryOfAPortfolioWithOneAccountWorksCorrectly
	| accountSummaryOfAnAccount |
	accountSummaryOfAnAccount := AccountSummary for: simplePortfolio. 
	self assert:  accountSummaryWithOnlyDepositOf100 = accountSummaryOfAnAccount summary.! !
!ReportTest methodsFor: 'tests' stamp: 'CR 11/16/2020 02:37:17' prior: 50900657!
test05AccountSummaryOfAPortfolioWithOneAccountWorksCorrectly
	| accountSummaryOfASimplePortfolio |
	accountSummaryOfASimplePortfolio := AccountSummary for: simplePortfolio. 
	self assert:  accountSummaryWithOnlyDepositOf100 = accountSummaryOfASimplePortfolio summary.! !

!testRun: #ReportTest #test01AccountSummaryOfAnEmptyReceptiveAccountIsEmpty stamp: 'CR 11/16/2020 02:37:25'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryOfAReceptiveAccountWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 02:37:25'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryOfAReceptiveAccountWithManyTransactionsWorksCorrectly stamp: 'CR 11/16/2020 02:37:25'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/16/2020 02:37:25'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryOfAPortfolioWithOneAccountWorksCorrectly stamp: 'CR 11/16/2020 02:37:25'!
PASSED!
!ReportTest methodsFor: 'tests' stamp: 'CR 11/16/2020 02:37:39'!
test06AccountSummaryOfAPortfolioWithManyAccountsWorksCorrectly
	| accountSummaryOfASimplePortfolio |
	accountSummaryOfASimplePortfolio := AccountSummary for: simplePortfolio. 
	self assert:  accountSummaryWithOnlyDepositOf100 = accountSummaryOfASimplePortfolio summary.! !

!classDefinition: #ReportTest category: 'Portfolio2' stamp: 'CR 11/16/2020 02:38:58'!
TestCase subclass: #ReportTest
	instanceVariableNames: 'accountWithDepositOf100 accountWithDepositOf200 emptyAccount emptyAccountSummary accountSummaryWithOnlyDepositOf100 accountWithManyTransactions accountSummaryManyTransactions accountWithTwoTransfers emptyPortfolio simplePortfolio composedPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 02:38:56' prior: 50900610 overrides: 16927572!
setUp
	emptyPortfolio := Portfolio new.
	emptyAccountSummary := OrderedCollection new.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	accountWithManyTransactions := ReceptiveAccount new.
	accountWithTwoTransfers := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	simplePortfolio := Portfolio with: accountWithDepositOf100.
	composedPortfolio := Portfolio with: simplePortfolio.
	
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	accountSummaryWithOnlyDepositOf100 := OrderedCollection with: 'Dep�sito por 100'.
	Deposit register: 300 on: accountWithManyTransactions.
	Withdraw register: 50 on: accountWithManyTransactions.
	Transfer register: 75 from: accountWithManyTransactions to: accountWithTwoTransfers.
	Transfer register: 40 from: accountWithTwoTransfers to: accountWithManyTransactions.
	
	 accountSummaryManyTransactions := OrderedCollection with: 'Dep�sito por 300' with: 'Extracci�n por 50' with: 'Salida por transferencia de 75' with: 'Entrada por transferencia de 40'.
	
	
	! !
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 02:39:29' prior: 50900726 overrides: 16927572!
setUp
	emptyPortfolio := Portfolio new.
	emptyAccountSummary := OrderedCollection new.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	accountWithManyTransactions := ReceptiveAccount new.
	accountWithTwoTransfers := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	simplePortfolio := Portfolio with: accountWithDepositOf100.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio register: accountWithDepositOf200.
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	accountSummaryWithOnlyDepositOf100 := OrderedCollection with: 'Dep�sito por 100'.
	Deposit register: 300 on: accountWithManyTransactions.
	Withdraw register: 50 on: accountWithManyTransactions.
	Transfer register: 75 from: accountWithManyTransactions to: accountWithTwoTransfers.
	Transfer register: 40 from: accountWithTwoTransfers to: accountWithManyTransactions.
	
	 accountSummaryManyTransactions := OrderedCollection with: 'Dep�sito por 300' with: 'Extracci�n por 50' with: 'Salida por transferencia de 75' with: 'Entrada por transferencia de 40'.
	
	
	! !
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 02:39:31' prior: 50900764 overrides: 16927572!
setUp
	emptyPortfolio := Portfolio new.
	emptyAccountSummary := OrderedCollection new.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	accountWithManyTransactions := ReceptiveAccount new.
	accountWithTwoTransfers := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	simplePortfolio := Portfolio with: accountWithDepositOf100.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio register: accountWithDepositOf200.
	
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	accountSummaryWithOnlyDepositOf100 := OrderedCollection with: 'Dep�sito por 100'.
	Deposit register: 300 on: accountWithManyTransactions.
	Withdraw register: 50 on: accountWithManyTransactions.
	Transfer register: 75 from: accountWithManyTransactions to: accountWithTwoTransfers.
	Transfer register: 40 from: accountWithTwoTransfers to: accountWithManyTransactions.
	
	 accountSummaryManyTransactions := OrderedCollection with: 'Dep�sito por 300' with: 'Extracci�n por 50' with: 'Salida por transferencia de 75' with: 'Entrada por transferencia de 40'.
	
	
	! !

!classDefinition: #ReportTest category: 'Portfolio2' stamp: 'CR 11/16/2020 02:40:25'!
TestCase subclass: #ReportTest
	instanceVariableNames: 'accountWithDepositOf100 accountWithDepositOf200 emptyAccount emptyAccountSummary accountSummaryWithOnlyDepositOf100 accountWithManyTransactions accountSummaryManyTransactions accountWithTwoTransfers emptyPortfolio simplePortfolio composedPortfolio accountSummaryOfComposedPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 02:40:23' prior: 50900804 overrides: 16927572!
setUp
	emptyPortfolio := Portfolio new.
	emptyAccountSummary := OrderedCollection new.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	accountWithManyTransactions := ReceptiveAccount new.
	accountWithTwoTransfers := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	simplePortfolio := Portfolio with: accountWithDepositOf100.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio register: accountWithDepositOf200.
	
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	Deposit register: 300 on: accountWithManyTransactions.
	Withdraw register: 50 on: accountWithManyTransactions.
	Transfer register: 75 from: accountWithManyTransactions to: accountWithTwoTransfers.
	Transfer register: 40 from: accountWithTwoTransfers to: accountWithManyTransactions.
	
	accountSummaryWithOnlyDepositOf100 := OrderedCollection with: 'Dep�sito por 100'.
	accountSummaryManyTransactions := OrderedCollection with: 'Dep�sito por 300' with: 'Extracci�n por 50' with: 'Salida por transferencia de 75' with: 'Entrada por transferencia de 40'.
	accountSummaryOfComposedPortfolio := OrderedCollection with: 'Dep�sito por 100' with: 'Dep�sito por 200'.
	
	! !
!ReportTest methodsFor: 'tests' stamp: 'CR 11/16/2020 02:40:56' prior: 50900699!
test06AccountSummaryOfAPortfolioWithManyAccountsWorksCorrectly
	| accountSummaryOfAComposedPortfolio |
	accountSummaryOfAComposedPortfolio := AccountSummary for: simplePortfolio. 
	self assert:  accountSummaryOfComposedPortfolio = accountSummaryOfAComposedPortfolio summary.! !
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 02:41:30' prior: 50900860 overrides: 16927572!
setUp
	emptyPortfolio := Portfolio new.
	emptyAccountSummary := OrderedCollection new.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	accountWithManyTransactions := ReceptiveAccount new.
	accountWithTwoTransfers := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	simplePortfolio := Portfolio with: accountWithDepositOf100.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio add: accountWithDepositOf200.
	
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	Deposit register: 300 on: accountWithManyTransactions.
	Withdraw register: 50 on: accountWithManyTransactions.
	Transfer register: 75 from: accountWithManyTransactions to: accountWithTwoTransfers.
	Transfer register: 40 from: accountWithTwoTransfers to: accountWithManyTransactions.
	
	accountSummaryWithOnlyDepositOf100 := OrderedCollection with: 'Dep�sito por 100'.
	accountSummaryManyTransactions := OrderedCollection with: 'Dep�sito por 300' with: 'Extracci�n por 50' with: 'Salida por transferencia de 75' with: 'Entrada por transferencia de 40'.
	accountSummaryOfComposedPortfolio := OrderedCollection with: 'Dep�sito por 100' with: 'Dep�sito por 200'.
	
	! !

!testRun: #ReportTest #test01AccountSummaryOfAnEmptyReceptiveAccountIsEmpty stamp: 'CR 11/16/2020 02:41:32'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryOfAReceptiveAccountWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 02:41:32'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryOfAReceptiveAccountWithManyTransactionsWorksCorrectly stamp: 'CR 11/16/2020 02:41:32'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/16/2020 02:41:32'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryOfAPortfolioWithOneAccountWorksCorrectly stamp: 'CR 11/16/2020 02:41:32'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryOfAPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 02:41:32'!
FAILURE!

!testRun: #ReportTest #test06AccountSummaryOfAPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 02:41:32'!
FAILURE!

!testRun: #ReportTest #test06AccountSummaryOfAPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 02:41:37'!
FAILURE!

!testRun: #ReportTest #test06AccountSummaryOfAPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 02:41:37'!
FAILURE!

accountSummaryOfAComposedPortfolio summary!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/16/2020 02:46:47' prior: 50897590!
test13ComposedPortfolioCanNotHaveParentPortfolioAccount

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio new.
	composedPortfolio := Portfolio with: account .
	composedPortfolio add: simplePortfolio.
	
	self 
		should: [ simplePortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: simplePortfolio accountsIsEmpty ]! !

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'CR 11/16/2020 02:46:49'!
PASSED!

!testRun: #TransferTest #test01TransferZeroDoesNotChangeAccountsBalance stamp: 'CR 11/16/2020 02:47:31'!
PASSED!

!testRun: #TransferTest #test02TransferUpdatesAccountsBalanceCorrectly stamp: 'CR 11/16/2020 02:47:31'!
PASSED!

!testRun: #TransferTest #test03TransferIsRegisteredCorrectlyOnBothAccounts stamp: 'CR 11/16/2020 02:47:31'!
PASSED!

!testRun: #TransferTest #test04TransferIsOnBothAccountsTransactions stamp: 'CR 11/16/2020 02:47:31'!
PASSED!

!testRun: #TransferTest #test05TransferFromAndToSameAccountRaisesError stamp: 'CR 11/16/2020 02:47:31'!
PASSED!

!testRun: #TransferTest #test06TransferOfNegativeAmountRaisesError stamp: 'CR 11/16/2020 02:47:31'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryOfAPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 02:47:38'!
FAILURE!

!testRun: #ReportTest #test06AccountSummaryOfAPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 02:47:38'!
FAILURE!

!testRun: #ReportTest #test01AccountSummaryOfAnEmptyReceptiveAccountIsEmpty stamp: 'CR 11/16/2020 02:47:46'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryOfAReceptiveAccountWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 02:47:46'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryOfAReceptiveAccountWithManyTransactionsWorksCorrectly stamp: 'CR 11/16/2020 02:47:46'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/16/2020 02:47:46'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryOfAPortfolioWithOneAccountWorksCorrectly stamp: 'CR 11/16/2020 02:47:46'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryOfAPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 02:47:46'!
FAILURE!

!testRun: #ReportTest #test06AccountSummaryOfAPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 02:47:46'!
FAILURE!
!ReportTest methodsFor: 'tests' stamp: 'CR 11/16/2020 02:48:41' prior: 50900903!
test06AccountSummaryOfAPortfolioWithManyAccountsWorksCorrectly
	| accountSummaryOfAComposedPortfolio |
	accountSummaryOfAComposedPortfolio := AccountSummary for: composedPortfolio. 
	self assert:  accountSummaryOfComposedPortfolio = accountSummaryOfAComposedPortfolio summary.! !

!testRun: #ReportTest #test06AccountSummaryOfAPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 02:48:47'!
PASSED!

!testRun: #ReportTest #test01AccountSummaryOfAnEmptyReceptiveAccountIsEmpty stamp: 'CR 11/16/2020 02:48:50'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryOfAReceptiveAccountWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 02:48:50'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryOfAReceptiveAccountWithManyTransactionsWorksCorrectly stamp: 'CR 11/16/2020 02:48:50'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/16/2020 02:48:50'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryOfAPortfolioWithOneAccountWorksCorrectly stamp: 'CR 11/16/2020 02:48:50'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryOfAPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 02:48:50'!
PASSED!
!TransferDeposit methodsFor: 'nil' stamp: 'CR 11/16/2020 02:53:56'!
from
	^ transferAttachedTo.! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 02:55:26'!
withdrawAssociatedTo
	^ transferAttachedTo withdrawTransaction.! !

!methodRemoval: TransferDeposit #withdrawAssociatedTo stamp: 'CR 11/16/2020 02:56:12'!
withdrawAssociatedTo
	^ transferAttachedTo withdrawTransaction.!

!methodRemoval: TransferDeposit #from stamp: 'CR 11/16/2020 02:56:19'!
from
	^ transferAttachedTo.!
!TransferTransactions methodsFor: 'nil' stamp: 'CR 11/16/2020 02:56:39'!
transfer
	^ transferAttachedTo.! !
!TransferTest methodsFor: 'tests' stamp: 'CR 11/16/2020 02:59:30'!
test07TransferOfNegativeAmountRaisesError
	| aTransferOfNegativeAmount |
	self should: [aTransferOfNegativeAmount := Transfer register: -30 from: emptyAccount to: accountWithDepositOf100.] 
	raise:  Error withMessageText: [Transfer cantTransferNegativeAmount].! !
!TransferTest methodsFor: 'tests' stamp: 'CR 11/16/2020 03:00:11'!
test07CanNavigateFromTransferDepositToWithdrawAndViceversa
	| aTransferOfNegativeAmount |
	self should: [aTransferOfNegativeAmount := Transfer register: -30 from: emptyAccount to: accountWithDepositOf100.] 
	raise:  Error withMessageText: [Transfer cantTransferNegativeAmount].! !
!TransferTest methodsFor: 'tests' stamp: 'CR 11/16/2020 03:02:24' prior: 50901146!
test07CanNavigateFromTransferDepositToWithdrawAndViceversa
	| aTransferOf50 depositTransfer |
	aTransferOf50 := Transfer register: 50 from: accountWithDepositOf100 to: emptyAccount.
	depositTransfer := aTransferOf50 depositTransaction.
	
		! !
!Transfer methodsFor: 'transactions' stamp: 'CR 11/16/2020 03:03:54'!
depositTransfer
	^depositTransaction! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 03:03:54' prior: 50901158!
test07CanNavigateFromTransferDepositToWithdrawAndViceversa
	| aTransferOf50 depositTransfer |
	aTransferOf50 := Transfer register: 50 from: accountWithDepositOf100 to: emptyAccount.
	depositTransfer := aTransferOf50 depositTransfer.
	
		! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 03:03:54' prior: 50898642!
test04TransferIsOnBothAccountsTransactions
	| aTransferOf75 |
	aTransferOf75 := Transfer register: 75 from: accountWithDepositOf100 to: emptyAccount.
	self assert: (accountWithDepositOf100 transactions includes: aTransferOf75 withdrawTransaction).
	self assert: (emptyAccount transactions includes: aTransferOf75 depositTransfer).! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 03:03:54' prior: 50898587!
test03TransferIsRegisteredCorrectlyOnBothAccounts
	| aTransferOf75 |
	aTransferOf75 := Transfer register: 75 from: accountWithDepositOf100 to: emptyAccount.
	self assert: (accountWithDepositOf100 hasRegistered: aTransferOf75 withdrawTransaction).
	self assert: (emptyAccount hasRegistered: aTransferOf75 depositTransfer).! !

!methodRemoval: Transfer #depositTransaction stamp: 'CR 11/16/2020 03:03:54'!
depositTransaction
	^depositTransaction!
!Transfer methodsFor: 'transactions' stamp: 'CR 11/16/2020 03:04:15'!
withdrawTransfer
	^withdrawTransaction! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 03:04:15' prior: 50901184!
test04TransferIsOnBothAccountsTransactions
	| aTransferOf75 |
	aTransferOf75 := Transfer register: 75 from: accountWithDepositOf100 to: emptyAccount.
	self assert: (accountWithDepositOf100 transactions includes: aTransferOf75 withdrawTransfer).
	self assert: (emptyAccount transactions includes: aTransferOf75 depositTransfer).! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 03:04:15' prior: 50901198!
test03TransferIsRegisteredCorrectlyOnBothAccounts
	| aTransferOf75 |
	aTransferOf75 := Transfer register: 75 from: accountWithDepositOf100 to: emptyAccount.
	self assert: (accountWithDepositOf100 hasRegistered: aTransferOf75 withdrawTransfer).
	self assert: (emptyAccount hasRegistered: aTransferOf75 depositTransfer).! !

!methodRemoval: Transfer #withdrawTransaction stamp: 'CR 11/16/2020 03:04:15'!
withdrawTransaction
	^withdrawTransaction!
!TransferTest methodsFor: 'tests' stamp: 'CR 11/16/2020 03:06:00' prior: 50901173!
test07CanNavigateFromTransferDepositToWithdrawAndViceversa
	| aTransferOf50 depositTransfer withdrawTransfer |
	aTransferOf50 := Transfer register: 50 from: accountWithDepositOf100 to: emptyAccount.
	depositTransfer := aTransferOf50 depositTransfer.
	withdrawTransfer := aTransferOf50 withdrawTransfer.
	self assert: (depositTransfer transfer = aTransferOf50).
	
	
		! !
!TransferTest methodsFor: 'tests' stamp: 'CR 11/16/2020 03:06:22' prior: 50901251!
test07CanNavigateFromTransferDepositToWithdrawAndViceversa
	| aTransferOf50 depositTransfer withdrawTransfer |
	aTransferOf50 := Transfer register: 50 from: accountWithDepositOf100 to: emptyAccount.
	depositTransfer := aTransferOf50 depositTransfer.
	withdrawTransfer := aTransferOf50 withdrawTransfer.
	self assert: (depositTransfer transfer = aTransferOf50).
	self assert: (withdrawTransfer transfer = aTransferOf50).
	
	
		! !

!methodRemoval: TransferTest #test07TransferOfNegativeAmountRaisesError stamp: 'CR 11/16/2020 03:06:25'!
test07TransferOfNegativeAmountRaisesError
	| aTransferOfNegativeAmount |
	self should: [aTransferOfNegativeAmount := Transfer register: -30 from: emptyAccount to: accountWithDepositOf100.] 
	raise:  Error withMessageText: [Transfer cantTransferNegativeAmount].!

!testRun: #TransferTest #test07CanNavigateFromTransferDepositToWithdrawAndViceversa stamp: 'CR 11/16/2020 03:06:29'!
PASSED!

!testRun: #TransferTest #test01TransferZeroDoesNotChangeAccountsBalance stamp: 'CR 11/16/2020 03:06:32'!
PASSED!

!testRun: #TransferTest #test02TransferUpdatesAccountsBalanceCorrectly stamp: 'CR 11/16/2020 03:06:32'!
PASSED!

!testRun: #TransferTest #test03TransferIsRegisteredCorrectlyOnBothAccounts stamp: 'CR 11/16/2020 03:06:32'!
PASSED!

!testRun: #TransferTest #test04TransferIsOnBothAccountsTransactions stamp: 'CR 11/16/2020 03:06:32'!
PASSED!

!testRun: #TransferTest #test05TransferFromAndToSameAccountRaisesError stamp: 'CR 11/16/2020 03:06:32'!
PASSED!

!testRun: #TransferTest #test06TransferOfNegativeAmountRaisesError stamp: 'CR 11/16/2020 03:06:32'!
PASSED!

!testRun: #TransferTest #test07CanNavigateFromTransferDepositToWithdrawAndViceversa stamp: 'CR 11/16/2020 03:06:32'!
PASSED!
!TransferTest methodsFor: 'tests' stamp: 'CR 11/16/2020 03:07:07' prior: 50901266!
test07CanNavigateFromTransferDepositToWithdrawAndViceversa
	"Consideramos que la navegaci�n es parte de la funcionalidad deseada"
	| aTransferOf50 depositTransfer withdrawTransfer |
	aTransferOf50 := Transfer register: 50 from: accountWithDepositOf100 to: emptyAccount.
	depositTransfer := aTransferOf50 depositTransfer.
	withdrawTransfer := aTransferOf50 withdrawTransfer.
	self assert: (depositTransfer transfer = aTransferOf50).
	self assert: (withdrawTransfer transfer = aTransferOf50).
	
	
		! !
!ReportTest methodsFor: 'tests' stamp: 'CR 11/16/2020 03:07:45' prior: 50900439!
test01AccountSummaryOfAnEmptyReceptiveAccountIsEmpty
	| accountSummaryOfEmptyAccount |
	accountSummaryOfEmptyAccount := AccountSummary for: emptyAccount. 
	self assert: emptyAccountSummary = accountSummaryOfEmptyAccount summary.! !
!ReportTest methodsFor: 'tests' stamp: 'CR 11/16/2020 03:08:57'!
test07TransferNetOfAnEmptyReceptiveAccountIsEmpty
	| transferNetOfEmptyAccount |
	transferNetOfEmptyAccount := TransferNet for: emptyAccount. 
	self assert: 0 = transferNetOfEmptyAccount net.! !

!testRun: #ReportTest #test07TransferNetOfAnEmptyReceptiveAccountIsEmpty stamp: 'CR 11/16/2020 03:08:59'!
PASSED!
!ReportTest methodsFor: 'tests' stamp: 'CR 11/16/2020 03:09:58'!
test08TransferNetOfAReceptiveAccountWithOneTransferWorksCorrectly
	| transferNetOfAnAccount |
	transferNetOfAnAccount := TransferNet for: accountWithManyTransactions. 
	self assert:  accountSummaryWithOnlyDepositOf100 = transferNetOfAnAccount summary.! !

!classDefinition: #ReportTest category: 'Portfolio2' stamp: 'CR 11/16/2020 03:10:27'!
TestCase subclass: #ReportTest
	instanceVariableNames: 'accountWithDepositOf100 accountWithDepositOf200 emptyAccount emptyAccountSummary accountSummaryWithOnlyDepositOf100 accountWithManyTransactions accountSummaryManyTransactions accountWithTwoTransfers emptyPortfolio simplePortfolio composedPortfolio accountSummaryOfComposedPortfolio accountWithOneTransference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 03:10:25' prior: 50900915 overrides: 16927572!
setUp
	emptyPortfolio := Portfolio new.
	emptyAccountSummary := OrderedCollection new.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithOneTransference := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	accountWithManyTransactions := ReceptiveAccount new.
	accountWithTwoTransfers := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	simplePortfolio := Portfolio with: accountWithDepositOf100.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio add: accountWithDepositOf200.
	
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	Deposit register: 300 on: accountWithManyTransactions.
	Withdraw register: 50 on: accountWithManyTransactions.
	Transfer register: 75 from: accountWithManyTransactions to: accountWithTwoTransfers.
	Transfer register: 40 from: accountWithTwoTransfers to: accountWithManyTransactions.
	
	accountSummaryWithOnlyDepositOf100 := OrderedCollection with: 'Dep�sito por 100'.
	accountSummaryManyTransactions := OrderedCollection with: 'Dep�sito por 300' with: 'Extracci�n por 50' with: 'Salida por transferencia de 75' with: 'Entrada por transferencia de 40'.
	accountSummaryOfComposedPortfolio := OrderedCollection with: 'Dep�sito por 100' with: 'Dep�sito por 200'.
	
	! !

!classDefinition: #ReportTest category: 'Portfolio2' stamp: 'CR 11/16/2020 03:12:08'!
TestCase subclass: #ReportTest
	instanceVariableNames: 'accountWithDepositOf100 accountWithDepositOf200 emptyAccount emptyAccountSummary accountSummaryWithOnlyDepositOf100 accountWithManyTransactions accountSummaryManyTransactions accountWithTwoTransfers emptyPortfolio simplePortfolio composedPortfolio accountSummaryOfComposedPortfolio accountWithOneTransference accountWithOneTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

!classDefinition: #ReportTest category: 'Portfolio2' stamp: 'CR 11/16/2020 03:12:30'!
TestCase subclass: #ReportTest
	instanceVariableNames: 'accountWithDepositOf100 accountWithDepositOf200 emptyAccount emptyAccountSummary accountSummaryWithOnlyDepositOf100 accountWithManyTransactions accountSummaryManyTransactions accountWithTwoTransfers emptyPortfolio simplePortfolio composedPortfolio accountSummaryOfComposedPortfolio accountWithOneTransference accountWithOneTransfer accountWithOneTransferDeposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

!classDefinition: #ReportTest category: 'Portfolio2' stamp: 'CR 11/16/2020 03:12:31'!
TestCase subclass: #ReportTest
	instanceVariableNames: 'accountWithDepositOf100 accountWithDepositOf200 emptyAccount emptyAccountSummary accountSummaryWithOnlyDepositOf100 accountWithManyTransactions accountSummaryManyTransactions accountWithTwoTransfers emptyPortfolio simplePortfolio composedPortfolio accountSummaryOfComposedPortfolio accountWithOneTransference accountWithOneTransfer accountWithOneTransferDeposit accountWithOneTransferWithdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 03:12:28' prior: 50901392 overrides: 16927572!
setUp
	emptyPortfolio := Portfolio new.
	emptyAccountSummary := OrderedCollection new.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithOneTransferDeposit := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	accountWithManyTransactions := ReceptiveAccount new.
	accountWithTwoTransfers := ReceptiveAccount new.
	accountWithOneTransferWithdraw := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	simplePortfolio := Portfolio with: accountWithDepositOf100.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio add: accountWithDepositOf200.
	
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	Deposit register: 300 on: accountWithManyTransactions.
	Withdraw register: 50 on: accountWithManyTransactions.
	Transfer register: 75 from: accountWithManyTransactions to: accountWithTwoTransfers.
	Transfer register: 40 from: accountWithTwoTransfers to: accountWithManyTransactions.
	Transfer register: 75 from: accountWithTwoTransfers to: accountWithManyTransactions.
	
	accountSummaryWithOnlyDepositOf100 := OrderedCollection with: 'Dep�sito por 100'.
	accountSummaryManyTransactions := OrderedCollection with: 'Dep�sito por 300' with: 'Extracci�n por 50' with: 'Salida por transferencia de 75' with: 'Entrada por transferencia de 40'.
	accountSummaryOfComposedPortfolio := OrderedCollection with: 'Dep�sito por 100' with: 'Dep�sito por 200'.
	
	! !

TestCase subclass: #ReportTest
	instanceVariableNames: 'accountWithDepositOf100 accountWithDepositOf200 emptyAccount emptyAccountSummary accountSummaryWithOnlyDepositOf100 accountWithManyTransactions accountSummaryManyTransactions accountWithTwoTransfers emptyPortfolio simplePortfolio composedPortfolio accountSummaryOfComposedPortfolio  accountWithOneTransferDeposit accountWithOneTransferWithdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

!classDefinition: #ReportTest category: 'Portfolio2' stamp: 'CR 11/16/2020 03:12:43'!
TestCase subclass: #ReportTest
	instanceVariableNames: 'accountWithDepositOf100 accountWithDepositOf200 emptyAccount emptyAccountSummary accountSummaryWithOnlyDepositOf100 accountWithManyTransactions accountSummaryManyTransactions accountWithTwoTransfers emptyPortfolio simplePortfolio composedPortfolio accountSummaryOfComposedPortfolio accountWithOneTransferDeposit accountWithOneTransferWithdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

!classDefinition: #ReportTest category: 'Portfolio2' stamp: 'CR 11/16/2020 03:15:28'!
TestCase subclass: #ReportTest
	instanceVariableNames: 'accountWithDepositOf100 accountWithDepositOf200 emptyAccount emptyAccountSummary accountSummaryWithOnlyDepositOf100 accountWithManyTransactions accountSummaryManyTransactions accountWithTwoTransfers emptyPortfolio simplePortfolio composedPortfolio accountSummaryOfComposedPortfolio accountWithOneTransferDeposit accountWithOneTransferWithdraw transferNetOfAccountWithOneTransferDeposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

!classDefinition: #ReportTest category: 'Portfolio2' stamp: 'CR 11/16/2020 03:15:29'!
TestCase subclass: #ReportTest
	instanceVariableNames: 'accountWithDepositOf100 accountWithDepositOf200 emptyAccount emptyAccountSummary accountSummaryWithOnlyDepositOf100 accountWithManyTransactions accountSummaryManyTransactions accountWithTwoTransfers emptyPortfolio simplePortfolio composedPortfolio accountSummaryOfComposedPortfolio accountWithOneTransferDeposit accountWithOneTransferWithdraw transferNetOfAccountWithOneTransferDeposit transferNetOfAccountWithOneTransferWithdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 03:15:26' prior: 50901491 overrides: 16927572!
setUp
	emptyPortfolio := Portfolio new.
	emptyAccountSummary := OrderedCollection new.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	accountWithManyTransactions := ReceptiveAccount new.
	accountWithTwoTransfers := ReceptiveAccount new.
	accountWithOneTransferDeposit := ReceptiveAccount new.
	accountWithOneTransferWithdraw := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	simplePortfolio := Portfolio with: accountWithDepositOf100.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio add: accountWithDepositOf200.
	
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	Deposit register: 300 on: accountWithManyTransactions.
	Withdraw register: 50 on: accountWithManyTransactions.
	Transfer register: 75 from: accountWithManyTransactions to: accountWithTwoTransfers.
	Transfer register: 40 from: accountWithTwoTransfers to: accountWithManyTransactions.
	Transfer register: 50 from: accountWithOneTransferWithdraw to: accountWithOneTransferDeposit.
	
	accountSummaryWithOnlyDepositOf100 := OrderedCollection with: 'Dep�sito por 100'.
	accountSummaryManyTransactions := OrderedCollection with: 'Dep�sito por 300' with: 'Extracci�n por 50' with: 'Salida por transferencia de 75' with: 'Entrada por transferencia de 40'.
	accountSummaryOfComposedPortfolio := OrderedCollection with: 'Dep�sito por 100' with: 'Dep�sito por 200'.
	
	transferNetOfAccountWithOneTransferDeposit := OrderedCollection with: 'Entrada por transferencia de 50'.
	transferNetOfAccountWithOneTransferWithdraw := OrderedCollection with: 'Entrada por transferencia de 50'.
	
	! !
!ReportTest methodsFor: 'tests' stamp: 'CR 11/16/2020 03:19:30'!
test08TransferNetBetweenReceptiveAccountsWithOneTransferWorksCorrectly
	| transferNetOfDestinationAccount transferNetOfSourceAccount |
	transferNetOfDestinationAccount := TransferNet for: accountWithOneTransferDeposit.
	transferNetOfSourceAccount := TransferNet for: accountWithOneTransferWithdraw.
	self assert:  transferNetOfDestinationAccount = 50.
	self assert:  transferNetOfDestinationAccount = -50.
	! !
!ReportTest methodsFor: 'tests' stamp: 'CR 11/16/2020 03:19:42' prior: 50901667!
test08TransferNetBetweenReceptiveAccountsWithOneTransferWorksCorrectly
	| transferNetOfDestinationAccount transferNetOfSourceAccount |
	transferNetOfDestinationAccount := TransferNet for: accountWithOneTransferDeposit.
	transferNetOfSourceAccount := TransferNet for: accountWithOneTransferWithdraw.
	self assert:  transferNetOfDestinationAccount = 50.
	self assert:  transferNetOfSourceAccount = -50.
	! !

!testRun: #ReportTest #test08TransferNetBetweenReceptiveAccountsWithOneTransferWorksCorrectly stamp: 'CR 11/16/2020 03:19:45'!
FAILURE!

!testRun: #ReportTest #test08TransferNetBetweenReceptiveAccountsWithOneTransferWorksCorrectly stamp: 'CR 11/16/2020 03:19:45'!
FAILURE!

!methodRemoval: ReportTest #test08TransferNetOfAReceptiveAccountWithOneTransferWorksCorrectly stamp: 'CR 11/16/2020 03:22:01'!
test08TransferNetOfAReceptiveAccountWithOneTransferWorksCorrectly
	| transferNetOfAnAccount |
	transferNetOfAnAccount := TransferNet for: accountWithManyTransactions. 
	self assert:  accountSummaryWithOnlyDepositOf100 = transferNetOfAnAccount summary.!
!ReportTest methodsFor: 'tests' stamp: 'CR 11/16/2020 03:22:49' prior: 50901683!
test08TransferNetBetweenReceptiveAccountsWithOneTransferWorksCorrectly
	| transferNetOfDestinationAccount transferNetOfSourceAccount |
	transferNetOfDestinationAccount := (TransferNet for: accountWithOneTransferDeposit) net.
	transferNetOfSourceAccount := (TransferNet for: accountWithOneTransferWithdraw) net.
	self assert:  transferNetOfDestinationAccount = 50.
	self assert:  transferNetOfSourceAccount = -50.
	! !

!testRun: #ReportTest #test08TransferNetBetweenReceptiveAccountsWithOneTransferWorksCorrectly stamp: 'CR 11/16/2020 03:22:51'!
ERROR!

!testRun: #ReportTest #test08TransferNetBetweenReceptiveAccountsWithOneTransferWorksCorrectly stamp: 'CR 11/16/2020 03:22:51'!
ERROR!

!testRun: #ReportTest #test08TransferNetBetweenReceptiveAccountsWithOneTransferWorksCorrectly stamp: 'CR 11/16/2020 03:23:14'!
ERROR!

!testRun: #ReportTest #test08TransferNetBetweenReceptiveAccountsWithOneTransferWorksCorrectly stamp: 'CR 11/16/2020 03:23:51'!
ERROR!
!CalculateNet methodsFor: 'transaction collaboration' stamp: 'CR 11/16/2020 03:24:28' prior: 50899504 overrides: 50899491!
collaboratingTransferWithdraw: aTransferWithdraw
	^  aTransferWithdraw value.! !
!CalculateNet methodsFor: 'transaction collaboration' stamp: 'CR 11/16/2020 03:24:33' prior: 50901753 overrides: 50899491!
collaboratingTransferWithdraw: aTransferWithdraw
	^  0 - aTransferWithdraw value.! !

!testRun: #ReportTest #test01AccountSummaryOfAnEmptyReceptiveAccountIsEmpty stamp: 'CR 11/16/2020 03:24:39'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryOfAReceptiveAccountWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 03:24:39'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryOfAReceptiveAccountWithManyTransactionsWorksCorrectly stamp: 'CR 11/16/2020 03:24:39'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/16/2020 03:24:39'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryOfAPortfolioWithOneAccountWorksCorrectly stamp: 'CR 11/16/2020 03:24:39'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryOfAPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 03:24:39'!
PASSED!

!testRun: #ReportTest #test07TransferNetOfAnEmptyReceptiveAccountIsEmpty stamp: 'CR 11/16/2020 03:24:39'!
PASSED!

!testRun: #ReportTest #test08TransferNetBetweenReceptiveAccountsWithOneTransferWorksCorrectly stamp: 'CR 11/16/2020 03:24:39'!
PASSED!
!ReportTest methodsFor: 'tests' stamp: 'CR 11/16/2020 03:26:48'!
test09TransferNetBetweenReceptiveAccountsWithManyTransfersWorksCorrectly
	| transferNetOfManyAccounts |
	transferNetOfManyAccounts := (TransferNet for: accountWithManyTransactions ) net.
	self assert:  transferNetOfManyAccounts = 50.
	! !
!ReportTest methodsFor: 'tests' stamp: 'CR 11/16/2020 03:26:50' prior: 50901797!
test09TransferNetBetweenReceptiveAccountsWithManyTransfersWorksCorrectly
	| transferNetOfManyAccounts |
	transferNetOfManyAccounts := (TransferNet for: accountWithManyTransactions ) net.
	self assert:  transferNetOfManyAccounts = 60.
	! !
!ReportTest methodsFor: 'tests' stamp: 'CR 11/16/2020 03:27:27' prior: 50901807!
test09TransferNetBetweenReceptiveAccountsWithManyTransfersWorksCorrectly
	| transferNetOfManyAccounts |
	transferNetOfManyAccounts := (TransferNet for: accountWithManyTransactions ) net.
	self assert:  transferNetOfManyAccounts = 40 - 75.
	! !

!testRun: #ReportTest #test09TransferNetBetweenReceptiveAccountsWithManyTransfersWorksCorrectly stamp: 'CR 11/16/2020 03:27:29'!
ERROR!

!testRun: #ReportTest #test09TransferNetBetweenReceptiveAccountsWithManyTransfersWorksCorrectly stamp: 'CR 11/16/2020 03:27:29'!
ERROR!
!ReportTest methodsFor: 'tests' stamp: 'CR 11/16/2020 03:27:36' prior: 50901817!
test09TransferNetBetweenReceptiveAccountsWithManyTransfersWorksCorrectly
	| transferNetOfManyAccounts |
	transferNetOfManyAccounts := (TransferNet for: accountWithManyTransactions ) net.
	self assert:  transferNetOfManyAccounts = (40 - 75).
	! !

!testRun: #ReportTest #test09TransferNetBetweenReceptiveAccountsWithManyTransfersWorksCorrectly stamp: 'CR 11/16/2020 03:27:38'!
PASSED!

!testRun: #ReportTest #test01AccountSummaryOfAnEmptyReceptiveAccountIsEmpty stamp: 'CR 11/16/2020 03:27:41'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryOfAReceptiveAccountWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 03:27:41'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryOfAReceptiveAccountWithManyTransactionsWorksCorrectly stamp: 'CR 11/16/2020 03:27:41'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/16/2020 03:27:41'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryOfAPortfolioWithOneAccountWorksCorrectly stamp: 'CR 11/16/2020 03:27:41'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryOfAPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 03:27:41'!
PASSED!

!testRun: #ReportTest #test07TransferNetOfAnEmptyReceptiveAccountIsEmpty stamp: 'CR 11/16/2020 03:27:41'!
PASSED!

!testRun: #ReportTest #test08TransferNetBetweenReceptiveAccountsWithOneTransferWorksCorrectly stamp: 'CR 11/16/2020 03:27:41'!
PASSED!

!testRun: #ReportTest #test09TransferNetBetweenReceptiveAccountsWithManyTransfersWorksCorrectly stamp: 'CR 11/16/2020 03:27:41'!
PASSED!
!ReportTest methodsFor: 'tests' stamp: 'CR 11/16/2020 03:28:41'!
test04TransferNetOfAnEmptyPortfolioIsZero
	| transferNetOfEmptyPorfolio |
	transferNetOfEmptyPorfolio := TransferNet for: emptyPortfolio. 
	self assert: 0 = transferNetOfEmptyPorfolio net.! !
!ReportTest methodsFor: 'tests' stamp: 'CR 11/16/2020 03:28:52'!
test10TransferNetOfAnEmptyPortfolioIsZero
	| transferNetOfEmptyPorfolio |
	transferNetOfEmptyPorfolio := TransferNet for: emptyPortfolio. 
	self assert: 0 = transferNetOfEmptyPorfolio net.! !

!methodRemoval: ReportTest #test04TransferNetOfAnEmptyPortfolioIsZero stamp: 'CR 11/16/2020 03:28:57'!
test04TransferNetOfAnEmptyPortfolioIsZero
	| transferNetOfEmptyPorfolio |
	transferNetOfEmptyPorfolio := TransferNet for: emptyPortfolio. 
	self assert: 0 = transferNetOfEmptyPorfolio net.!

!classDefinition: #ReportTest category: 'Portfolio2' stamp: 'CR 11/16/2020 03:29:59'!
TestCase subclass: #ReportTest
	instanceVariableNames: 'accountWithDepositOf100 accountWithDepositOf200 emptyAccount emptyAccountSummary accountSummaryWithOnlyDepositOf100 accountWithManyTransactions accountSummaryManyTransactions accountWithTwoTransfers emptyPortfolio simplePortfolio composedPortfolio accountSummaryOfComposedPortfolio accountWithOneTransferDeposit accountWithOneTransferWithdraw transferNetOfAccountWithOneTransferDeposit transferNetOfAccountWithOneTransferWithdraw simplePortfolioWithOneTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!
!ReportTest methodsFor: 'tests' stamp: 'CR 11/16/2020 03:30:16'!
test11TransferNetOfAPortfolioWithOneTransferWorksCorrectly
	| transferNetOfASimplePortfolio |
	transferNetOfASimplePortfolio := AccountSummary for: simplePortfolioWithOneTransfer. 
	self assert:  0 = transferNetOfASimplePortfolio net.! !
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 03:31:19' prior: 50901612 overrides: 16927572!
setUp
	emptyPortfolio := Portfolio new.
	emptyAccountSummary := OrderedCollection new.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	accountWithManyTransactions := ReceptiveAccount new.
	accountWithTwoTransfers := ReceptiveAccount new.
	accountWithOneTransferDeposit := ReceptiveAccount new.
	accountWithOneTransferWithdraw := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	simplePortfolio := Portfolio with: accountWithDepositOf100.
	simplePortfolioWithOneTransfer := Portfolio with: accountWithOneTransferDeposit.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio add: accountWithDepositOf200.
	
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	Deposit register: 300 on: accountWithManyTransactions.
	Withdraw register: 50 on: accountWithManyTransactions.
	Transfer register: 75 from: accountWithManyTransactions to: accountWithTwoTransfers.
	Transfer register: 40 from: accountWithTwoTransfers to: accountWithManyTransactions.
	Transfer register: 50 from: accountWithOneTransferWithdraw to: accountWithOneTransferDeposit.
	
	accountSummaryWithOnlyDepositOf100 := OrderedCollection with: 'Dep�sito por 100'.
	accountSummaryManyTransactions := OrderedCollection with: 'Dep�sito por 300' with: 'Extracci�n por 50' with: 'Salida por transferencia de 75' with: 'Entrada por transferencia de 40'.
	accountSummaryOfComposedPortfolio := OrderedCollection with: 'Dep�sito por 100' with: 'Dep�sito por 200'.
	
	transferNetOfAccountWithOneTransferDeposit := OrderedCollection with: 'Entrada por transferencia de 50'.
	transferNetOfAccountWithOneTransferWithdraw := OrderedCollection with: 'Entrada por transferencia de 50'.
	
	! !
!ReportTest methodsFor: 'tests' stamp: 'CR 11/16/2020 03:31:35' prior: 50901934!
test11TransferNetOfAPortfolioWithOneTransferWorksCorrectly
	| transferNetOfASimplePortfolio |
	transferNetOfASimplePortfolio := AccountSummary for: simplePortfolioWithOneTransfer. 
	self assert:  50 = transferNetOfASimplePortfolio net.! !

!testRun: #ReportTest #test11TransferNetOfAPortfolioWithOneTransferWorksCorrectly stamp: 'CR 11/16/2020 03:31:43'!
ERROR!

!testRun: #ReportTest #test11TransferNetOfAPortfolioWithOneTransferWorksCorrectly stamp: 'CR 11/16/2020 03:31:43'!
ERROR!
!ReportTest methodsFor: 'tests' stamp: 'CR 11/16/2020 03:31:52' prior: 50902003!
test11TransferNetOfAPortfolioWithOneTransferWorksCorrectly
	| transferNetOfASimplePortfolio |
	transferNetOfASimplePortfolio := TransferNet for: simplePortfolioWithOneTransfer. 
	self assert:  50 = transferNetOfASimplePortfolio net.! !

!testRun: #ReportTest #test11TransferNetOfAPortfolioWithOneTransferWorksCorrectly stamp: 'CR 11/16/2020 03:31:55'!
PASSED!
!ReportTest methodsFor: 'tests' stamp: 'CR 11/16/2020 03:32:58'!
test12TransferNetOfAPortfolioWithManyTransactionsWorksCorrectly
	| transferNetOfAComposedPortfolio |
	transferNetOfAComposedPortfolio := AccountSummary for: composedPortfolio. 
	self assert:  accountSummaryOfComposedPortfolio = transferNetOfAComposedPortfolio summary.! !

!classDefinition: #ReportTest category: 'Portfolio2' stamp: 'CR 11/16/2020 03:33:43'!
TestCase subclass: #ReportTest
	instanceVariableNames: 'accountWithDepositOf100 accountWithDepositOf200 emptyAccount emptyAccountSummary accountSummaryWithOnlyDepositOf100 accountWithManyTransactions accountSummaryManyTransactions accountWithTwoTransfers emptyPortfolio simplePortfolio composedPortfolio accountSummaryOfComposedPortfolio accountWithOneTransferDeposit accountWithOneTransferWithdraw transferNetOfAccountWithOneTransferDeposit transferNetOfAccountWithOneTransferWithdraw simplePortfolioWithOneTransfer composedPortfolioWithManyTransfers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 03:33:41' prior: 50901945 overrides: 16927572!
setUp
	emptyPortfolio := Portfolio new.
	emptyAccountSummary := OrderedCollection new.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	accountWithManyTransactions := ReceptiveAccount new.
	accountWithTwoTransfers := ReceptiveAccount new.
	accountWithOneTransferDeposit := ReceptiveAccount new.
	accountWithOneTransferWithdraw := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	simplePortfolio := Portfolio with: accountWithDepositOf100.
	simplePortfolioWithOneTransfer := Portfolio with: accountWithOneTransferDeposit.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolioWithManyTransfers := Portfolio with: simplePortfolioWithOneTransfer.
	composedPortfolio add: accountWithDepositOf200.
	
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	Deposit register: 300 on: accountWithManyTransactions.
	Withdraw register: 50 on: accountWithManyTransactions.
	Transfer register: 75 from: accountWithManyTransactions to: accountWithTwoTransfers.
	Transfer register: 40 from: accountWithTwoTransfers to: accountWithManyTransactions.
	Transfer register: 50 from: accountWithOneTransferWithdraw to: accountWithOneTransferDeposit.
	
	accountSummaryWithOnlyDepositOf100 := OrderedCollection with: 'Dep�sito por 100'.
	accountSummaryManyTransactions := OrderedCollection with: 'Dep�sito por 300' with: 'Extracci�n por 50' with: 'Salida por transferencia de 75' with: 'Entrada por transferencia de 40'.
	accountSummaryOfComposedPortfolio := OrderedCollection with: 'Dep�sito por 100' with: 'Dep�sito por 200'.
	
	transferNetOfAccountWithOneTransferDeposit := OrderedCollection with: 'Entrada por transferencia de 50'.
	transferNetOfAccountWithOneTransferWithdraw := OrderedCollection with: 'Entrada por transferencia de 50'.
	
	! !
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 03:34:54' prior: 50902069 overrides: 16927572!
setUp
	emptyPortfolio := Portfolio new.
	emptyAccountSummary := OrderedCollection new.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	accountWithManyTransactions := ReceptiveAccount new.
	accountWithTwoTransfers := ReceptiveAccount new.
	accountWithOneTransferDeposit := ReceptiveAccount new.
	accountWithOneTransferWithdraw := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	simplePortfolio := Portfolio with: accountWithDepositOf100.
	simplePortfolioWithOneTransfer := Portfolio with: accountWithOneTransferDeposit.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolioWithManyTransfers := Portfolio with: simplePortfolioWithOneTransfer.
	composedPortfolioWithManyTransfers add: accountWithManyTransactions.
	composedPortfolio add: accountWithDepositOf200.
	
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	Deposit register: 300 on: accountWithManyTransactions.
	Withdraw register: 50 on: accountWithManyTransactions.
	Transfer register: 75 from: accountWithManyTransactions to: accountWithTwoTransfers.
	Transfer register: 40 from: accountWithTwoTransfers to: accountWithManyTransactions.
	Transfer register: 50 from: accountWithOneTransferWithdraw to: accountWithOneTransferDeposit.
	
	accountSummaryWithOnlyDepositOf100 := OrderedCollection with: 'Dep�sito por 100'.
	accountSummaryManyTransactions := OrderedCollection with: 'Dep�sito por 300' with: 'Extracci�n por 50' with: 'Salida por transferencia de 75' with: 'Entrada por transferencia de 40'.
	accountSummaryOfComposedPortfolio := OrderedCollection with: 'Dep�sito por 100' with: 'Dep�sito por 200'.
	
	transferNetOfAccountWithOneTransferDeposit := OrderedCollection with: 'Entrada por transferencia de 50'.
	transferNetOfAccountWithOneTransferWithdraw := OrderedCollection with: 'Entrada por transferencia de 50'.
	
	! !
!ReportTest methodsFor: 'tests' stamp: 'CR 11/16/2020 03:35:12' prior: 50902035!
test12TransferNetOfAPortfolioWithManyTransactionsWorksCorrectly
	| transferNetOfAComposedPortfolio |
	transferNetOfAComposedPortfolio := AccountSummary for: composedPortfolio. 
	self assert:  (50 + 40 - 75) = transferNetOfAComposedPortfolio net.! !

!testRun: #ReportTest #test12TransferNetOfAPortfolioWithManyTransactionsWorksCorrectly stamp: 'CR 11/16/2020 03:35:15'!
ERROR!

!testRun: #ReportTest #test12TransferNetOfAPortfolioWithManyTransactionsWorksCorrectly stamp: 'CR 11/16/2020 03:35:15'!
ERROR!
!ReportTest methodsFor: 'tests' stamp: 'CR 11/16/2020 03:35:23' prior: 50902194!
test12TransferNetOfAPortfolioWithManyTransactionsWorksCorrectly
	| transferNetOfAComposedPortfolio |
	transferNetOfAComposedPortfolio := TransferNet for: composedPortfolio. 
	self assert:  (50 + 40 - 75) = transferNetOfAComposedPortfolio net.! !
!ReportTest methodsFor: 'tests' stamp: 'CR 11/16/2020 03:35:59'!
test12TransferNetOfAPortfolioWithManyTransfersWorksCorrectly
	| transferNetOfAComposedPortfolioWithManyTransfers |
	transferNetOfAComposedPortfolioWithManyTransfers := TransferNet for: composedPortfolioWithManyTransfers. 
	self assert:  (50 + 40 - 75) = transferNetOfAComposedPortfolioWithManyTransfers net.! !

!methodRemoval: ReportTest #test12TransferNetOfAPortfolioWithManyTransactionsWorksCorrectly stamp: 'CR 11/16/2020 03:36:03'!
test12TransferNetOfAPortfolioWithManyTransactionsWorksCorrectly
	| transferNetOfAComposedPortfolio |
	transferNetOfAComposedPortfolio := TransferNet for: composedPortfolio. 
	self assert:  (50 + 40 - 75) = transferNetOfAComposedPortfolio net.!

!testRun: #ReportTest #test12TransferNetOfAPortfolioWithManyTransfersWorksCorrectly stamp: 'CR 11/16/2020 03:36:10'!
PASSED!

!testRun: #ReportTest #test01AccountSummaryOfAnEmptyReceptiveAccountIsEmpty stamp: 'CR 11/16/2020 03:36:13'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryOfAReceptiveAccountWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 03:36:13'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryOfAReceptiveAccountWithManyTransactionsWorksCorrectly stamp: 'CR 11/16/2020 03:36:13'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/16/2020 03:36:13'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryOfAPortfolioWithOneAccountWorksCorrectly stamp: 'CR 11/16/2020 03:36:13'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryOfAPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 03:36:13'!
PASSED!

!testRun: #ReportTest #test07TransferNetOfAnEmptyReceptiveAccountIsEmpty stamp: 'CR 11/16/2020 03:36:13'!
PASSED!

!testRun: #ReportTest #test08TransferNetBetweenReceptiveAccountsWithOneTransferWorksCorrectly stamp: 'CR 11/16/2020 03:36:14'!
PASSED!

!testRun: #ReportTest #test09TransferNetBetweenReceptiveAccountsWithManyTransfersWorksCorrectly stamp: 'CR 11/16/2020 03:36:14'!
PASSED!

!testRun: #ReportTest #test10TransferNetOfAnEmptyPortfolioIsZero stamp: 'CR 11/16/2020 03:36:14'!
PASSED!

!testRun: #ReportTest #test11TransferNetOfAPortfolioWithOneTransferWorksCorrectly stamp: 'CR 11/16/2020 03:36:14'!
PASSED!

!testRun: #ReportTest #test12TransferNetOfAPortfolioWithManyTransfersWorksCorrectly stamp: 'CR 11/16/2020 03:36:14'!
PASSED!
!TransferTransactions class methodsFor: 'instance creation' stamp: 'CR 11/16/2020 03:43:05' prior: 50898710!
register: aValue on: anAccount by: aTransfer 

	| transaction |
	
	transaction := self new initializeFor: aValue by: aTransfer.
	anAccount register: transaction.
	
	^ transaction! !

!methodRemoval: TransferTransactions class #for:by: stamp: 'CR 11/16/2020 03:43:07'!
for: aValue by: aTransfer

	^ self new initializeFor: aValue by: aTransfer.!

!testRun: #TransferTest #test01TransferZeroDoesNotChangeAccountsBalance stamp: 'CR 11/16/2020 03:43:16'!
PASSED!

!testRun: #TransferTest #test02TransferUpdatesAccountsBalanceCorrectly stamp: 'CR 11/16/2020 03:43:16'!
PASSED!

!testRun: #TransferTest #test03TransferIsRegisteredCorrectlyOnBothAccounts stamp: 'CR 11/16/2020 03:43:16'!
PASSED!

!testRun: #TransferTest #test04TransferIsOnBothAccountsTransactions stamp: 'CR 11/16/2020 03:43:16'!
PASSED!

!testRun: #TransferTest #test05TransferFromAndToSameAccountRaisesError stamp: 'CR 11/16/2020 03:43:16'!
PASSED!

!testRun: #TransferTest #test06TransferOfNegativeAmountRaisesError stamp: 'CR 11/16/2020 03:43:16'!
PASSED!

!testRun: #TransferTest #test07CanNavigateFromTransferDepositToWithdrawAndViceversa stamp: 'CR 11/16/2020 03:43:16'!
PASSED!

!testRun: #ReportTest #test01AccountSummaryOfAnEmptyReceptiveAccountIsEmpty stamp: 'CR 11/16/2020 03:43:35'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryOfAReceptiveAccountWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 03:43:35'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryOfAReceptiveAccountWithManyTransactionsWorksCorrectly stamp: 'CR 11/16/2020 03:43:35'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/16/2020 03:43:35'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryOfAPortfolioWithOneAccountWorksCorrectly stamp: 'CR 11/16/2020 03:43:35'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryOfAPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 03:43:35'!
PASSED!

!testRun: #ReportTest #test07TransferNetOfAnEmptyReceptiveAccountIsEmpty stamp: 'CR 11/16/2020 03:43:37'!
PASSED!

!testRun: #ReportTest #test08TransferNetBetweenReceptiveAccountsWithOneTransferWorksCorrectly stamp: 'CR 11/16/2020 03:43:37'!
PASSED!

!testRun: #ReportTest #test09TransferNetBetweenReceptiveAccountsWithManyTransfersWorksCorrectly stamp: 'CR 11/16/2020 03:43:37'!
PASSED!

!testRun: #ReportTest #test10TransferNetOfAnEmptyPortfolioIsZero stamp: 'CR 11/16/2020 03:43:37'!
PASSED!

!testRun: #ReportTest #test11TransferNetOfAPortfolioWithOneTransferWorksCorrectly stamp: 'CR 11/16/2020 03:43:37'!
PASSED!

!testRun: #ReportTest #test12TransferNetOfAPortfolioWithManyTransfersWorksCorrectly stamp: 'CR 11/16/2020 03:43:37'!
PASSED!
!TransferTransactions class methodsFor: 'instance creation' stamp: 'CR 11/16/2020 03:44:12' prior: 50902299!
register: aValue on: anAccount by: aTransfer 

	| transferTransaction |
	
	transferTransaction := self new initializeFor: aValue by: aTransfer.
	anAccount register: transferTransaction.
	
	^ transferTransaction.! !
!TransferTransactions class methodsFor: 'instance creation' stamp: 'CR 11/16/2020 03:44:38' prior: 50902386!
register: aValue on: anAccount by: aTransfer 

	| transferTransaction |
	
	transferTransaction := self new initializeFor: aValue by: aTransfer.
	anAccount register: transferTransaction.! !
!TransferTransactions class methodsFor: 'instance creation' stamp: 'CR 11/16/2020 03:45:17' prior: 50902397!
register: aValue on: anAccount by: aTransfer 

	| transferTransaction |
	
	transferTransaction := self new initializeFor: aValue by: aTransfer.
	anAccount register: transferTransaction.
	
	^ transferTransaction.! !

----QUIT----(16 November 2020 03:54:26) CuisUniversity-4384.image priorSource: 18182141!

----STARTUP---- (16 November 2020 15:05:12) as /Users/celeste/facultad/ing1/si-exercises/CuisUniversity-4384.image!

!Portfolio class methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 15:20:54'!
named: portfolioName with: anAccount

	^(self new initializeWithName:  portfolioName)
		add: anAccount;
		yourself! !

!classDefinition: #Portfolio category: 'Portfolio2' stamp: 'CR 11/16/2020 15:21:26'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!
!Portfolio methodsFor: 'initialization' stamp: 'CR 11/16/2020 15:21:24'!
initializeWithName:  portfolioName

	accounts := OrderedCollection new.
	parents := OrderedCollection new.
	name := portfolioName. ! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 15:22:05'!
named: portfolioName with: anAccount with: anotherAccount

	^(self new initializeWithName: portfolioName) 
		add: anAccount;
		add: anotherAccount;
		yourself! !
!ReceptiveAccount class methodsFor: 'nil' stamp: 'CR 11/16/2020 15:23:42'!
named: receptiveAccountName
	^self new initializeWithName: receptiveAccountName. ! !

!classDefinition: #ReceptiveAccount category: 'Portfolio2' stamp: 'CR 11/16/2020 15:24:31'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'CR 11/16/2020 15:24:30'!
initializeWithName: receptiveAccountNameToBeInitializedWith

	super initialize.
	transactions := OrderedCollection new.
	name := receptiveAccountNameToBeInitializedWith.! !
!Portfolio methodsFor: 'initialization' stamp: 'CR 11/16/2020 15:24:42' prior: 50902437!
initializeWithName:  portfolioNameToBeInitializedWith

	accounts := OrderedCollection new.
	parents := OrderedCollection new.
	name := portfolioNameToBeInitializedWith. ! !

Object subclass: #Account
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

!classDefinition: #Portfolio category: 'Portfolio2' stamp: 'CR 11/16/2020 15:25:03'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

!classDefinition: #ReceptiveAccount category: 'Portfolio2' stamp: 'CR 11/16/2020 15:25:06'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

Object subclass: #Account
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

!classDefinition: #Account category: 'Portfolio2' stamp: 'CR 11/16/2020 15:25:11'!
Object subclass: #Account
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

Report subclass: #TreeRepresentation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

!classDefinition: #TreeRepresentation category: 'Portfolio2' stamp: 'CR 11/16/2020 15:29:09'!
Report subclass: #TreeRepresentation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

Report subclass: #TreeRepresentation
	instanceVariableNames: 'stringTree'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

!classDefinition: #TreeRepresentation category: 'Portfolio2' stamp: 'CR 11/16/2020 15:31:43'!
Report subclass: #TreeRepresentation
	instanceVariableNames: 'stringTree'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

!classDefinition: #IndentedTreeString category: 'Portfolio2' stamp: 'CR 11/16/2020 15:34:31'!
ReportAction subclass: #IndentedTreeString
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!
!TreeRepresentation methodsFor: 'nil' stamp: 'CR 11/16/2020 15:34:14'!
initializeFor: anAccount 
	accountToMakeReportFor := anAccount.
	stringTree := OrderedCollection new.
	collaborationAction := IndentedTreeString new.
	! !
!TreeRepresentation methodsFor: 'nil' stamp: 'CR 11/16/2020 15:35:45'!
tree
	accountToMakeReportFor collaborateWith: self.
	^stringTree  ! !
!Report class methodsFor: 'nil' stamp: 'CR 11/16/2020 15:36:08'!
for: anAccount
	^self new initializeFor: anAccount.! !

!methodRemoval: AccountSummary class #for: stamp: 'CR 11/16/2020 15:36:12'!
for: anAccount
	^self new initializeFor: anAccount.!

!methodRemoval: TransferNet class #for: stamp: 'CR 11/16/2020 15:36:16'!
for: anAccount
	^self new initializeFor: anAccount.!
!TreeRepresentation methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 15:41:17' prior: 50902559!
tree
	accountToMakeReportFor collaborateWith: self.
	^stringTree  ! !

Object subclass: #AccountReport
	instanceVariableNames: 'accountToMakeReportFor collaborationAction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

!classDefinition: #AccountReport category: 'Portfolio2' stamp: 'CR 11/16/2020 15:43:33'!
Object subclass: #AccountReport
	instanceVariableNames: 'accountToMakeReportFor collaborationAction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

!classRemoval: #AccountReport stamp: 'CR 11/16/2020 15:43:56'!
Object subclass: #AccountReport
	instanceVariableNames: 'accountToMakeReportFor collaborationAction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

!classRenamed: #Report as: #AccountReport stamp: 'CR 11/16/2020 15:44:06'!
Smalltalk renameClassNamed: #Report as: #AccountReport!
!TreeRepresentation methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 15:45:43' prior: 50902577!
tree
	accountToMakeReportFor collaborateWithTree: self ofLevel: -1.
	^stringTree  ! !
!TreeRepresentation methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 15:46:02' prior: 50902608!
tree
	accountToMakeReportFor collaborateWithTreeLevel: self of: -1.
	^stringTree  ! !
!Portfolio methodsFor: 'report collaboration' stamp: 'CR 11/16/2020 15:47:05'!
collaborateWithTreeLevel: aReportToCollaborateWith of: aTreeLevel

	accounts do: [:anAccount | anAccount collaborateWithTreeLevel: aReportToCollaborateWith  of: aTreeLevel + 1].
	! !
!ReceptiveAccount methodsFor: 'report collaboration' stamp: 'CR 11/16/2020 15:48:11'!
collaborateWithTreeLevel: aReportToCollaborateWith of: aTreeLevel
	! !
!Portfolio methodsFor: 'report collaboration' stamp: 'CR 11/16/2020 15:49:24' prior: 50902620!
collaborateWithTreeLevel: aReportToCollaborateWith of: aTreeLevel
	
	aReportToCollaborateWith collaboratingPortfolio: self.
	accounts do: [:anAccount | anAccount collaborateWithTreeLevel: aReportToCollaborateWith  of: aTreeLevel + 1].
	! !
!Portfolio methodsFor: 'report collaboration' stamp: 'CR 11/16/2020 15:49:55' prior: 50902635!
collaborateWithTreeLevel: aReportToCollaborateWith of: aTreeLevel
	
	aReportToCollaborateWith collaboratingPortfolio: self onLevel: aTreeLevel.
	accounts do: [:anAccount | anAccount collaborateWithTreeLevel: aReportToCollaborateWith  of: aTreeLevel + 1].
	! !
!ReceptiveAccount methodsFor: 'report collaboration' stamp: 'CR 11/16/2020 15:50:26' prior: 50902629!
collaborateWithTreeLevel: aReportToCollaborateWith of: aTreeLevel
	aReportToCollaborateWith collaboratingReceptiveAccount: self onLevel: aTreeLevel.! !
!Portfolio methodsFor: 'report collaboration' stamp: 'CR 11/16/2020 15:55:02' prior: 50902646!
collaborateWithTreeLevel: aReportToCollaborateWith of: aTreeLevel
	
	self collaborateWith: aReportToCollaborateWith onLevel: aTreeLevel.
	accounts do: [:anAccount | anAccount collaborateWithTreeLevel: aReportToCollaborateWith  of: aTreeLevel + 1].
	! !
!Account methodsFor: 'nil' stamp: 'CR 11/16/2020 15:55:13'!
collaborateWith: aReportToCollaborateWith onLevel: aTreeLevel
	! !
!Account methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 15:56:20' prior: 50902676!
collaborateWith: aReportToCollaborateWith onLevel: aTreeLevel
	| resultOfCollaboration | 
	resultOfCollaboration := self executeCollaboration: (aReportToCollaborateWith collaboration) onLevel: aTreeLevel. 
	aReportToCollaborateWith collaborationWithTransactionResult: resultOfCollaboration.! !
!Portfolio methodsFor: 'nil' stamp: 'CR 11/16/2020 15:56:52'!
executeCollaboration: aCollaborationToExecute onLevel: aTreeLevel
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 15:57:45' prior: 50902693!
executeCollaboration: aCollaborationToExecute onLevel: aTreeLevel
	^ aCollaborationToExecute collaboratingPortfolio: self onLevel: aTreeLevel.! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'CR 11/16/2020 15:58:00'!
executeCollaboration: aCollaborationToExecute onLevel: aTreeLevel
	^ aCollaborationToExecute collaboratingReceptiveAccount: self onLevel: aTreeLevel.! !
!IndentedTreeString methodsFor: 'nil' stamp: 'CR 11/16/2020 15:58:42'!
collaboratingPortfolio: aPortfolio onLevel: aTreeLevel
	! !
!IndentedTreeString methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 16:00:05' prior: 50902713!
collaboratingPortfolio: aPortfolio onLevel: anIndentationLevel
	^ (self calculateIndentation: anIndentationLevel) , aPortfolio name.! !
!IndentedTreeString methodsFor: 'nil' stamp: 'CR 11/16/2020 16:00:32'!
collaboratingReceptiveAccount: aReceptiveAccount onLevel: anIndentationLevel
	^ (self calculateIndentation: anIndentationLevel) , ReceptiveAccount name.! !
!IndentedTreeString methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 16:00:39' prior: 50902726!
collaboratingReceptiveAccount: aReceptiveAccount onLevel: anIndentationLevel
	^ (self calculateIndentation: anIndentationLevel) , aReceptiveAccount name.! !
!IndentedTreeString methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 16:01:13'!
calculateIndentation: anIndentationLevel! !

String new: 1 withAll: ' '.!

String new: 1 withAll: $ .!

String new: 0 withAll: $ .!
!IndentedTreeString methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 16:06:32' prior: 50902743!
calculateIndentation: anIndentationLevel
	^ String new: anIndentationLevel withAll: $ . ! !
!IndentedTreeString methodsFor: 'transaction collaboration' stamp: 'CR 11/16/2020 16:08:30' prior: 50902735!
collaboratingReceptiveAccount: aReceptiveAccount onLevel: anIndentationLevel
	^ self indentWithSpaces: anIndentationLevel andConcatenateName: aReceptiveAccount name.! !
!IndentedTreeString methodsFor: 'transaction collaboration' stamp: 'CR 11/16/2020 16:08:54'!
indentWithSpaces: anIndentationLevel andConcatenateName: aNameToConcatenateWith
	^ (self calculateIndentation: anIndentationLevel) , aNameToConcatenateWith.! !
!IndentedTreeString methodsFor: 'transaction collaboration' stamp: 'CR 11/16/2020 16:09:14' prior: 50902719!
collaboratingPortfolio: aPortfolio onLevel: anIndentationLevel
	^ self indentWithSpaces: anIndentationLevel andConcatenateName: aPortfolio name.! !
!Account methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 16:09:36' prior: 50902681!
collaborateWith: aReportToCollaborateWith onLevel: aTreeLevel
	| resultOfCollaboration | 
	resultOfCollaboration := self executeCollaboration: (aReportToCollaborateWith collaboration) onLevel: aTreeLevel. 
	aReportToCollaborateWith collaborationWithAccountResult: resultOfCollaboration.! !
!TreeRepresentation methodsFor: 'nil' stamp: 'CR 11/16/2020 16:10:46'!
collaborationWithAccountResult: anAccountStringRepresentation
	stringTree add: anAccountStringRepresentation.! !
!ReportTest methodsFor: 'account summary tests' stamp: 'CR 11/16/2020 16:15:16'!
test13TreeRepresentationOfAnEmptyReceptiveAccountIsItsName
	| treeRepresentationOfEmptyAccount fedesEmptyAccount |
	fedesEmptyAccount := ReceptiveAccount named: 'Cuenta vacia de Fede'.
	treeRepresentationOfEmptyAccount := TreeRepresentation for: fedesEmptyAccount. 
	self assert: emptyAccountSummary = treeRepresentationOfEmptyAccount tree.! !
!ReportTest methodsFor: 'account summary tests' stamp: 'CR 11/16/2020 16:15:49' prior: 50902803!
test13TreeRepresentationOfAnEmptyReceptiveAccountIsItsName
	| treeRepresentationOfEmptyAccount fedesEmptyAccount |
	fedesEmptyAccount := ReceptiveAccount named: 'Cuenta vacia de Fede'.
	treeRepresentationOfEmptyAccount := TreeRepresentation for: fedesEmptyAccount. 
	self assertThat: (OrderedCollection with: 'Cuenta vacia de Fede' ) isEqualTo: treeRepresentationOfEmptyAccount tree.! !

!testRun: #ReportTest #test13TreeRepresentationOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 16:15:51'!
ERROR!

!testRun: #ReportTest #test13TreeRepresentationOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 16:15:51'!
ERROR!
!TreeRepresentation methodsFor: 'collaboration' stamp: 'CR 11/16/2020 16:16:35' prior: 50902614!
tree
	accountToMakeReportFor collaborateWithTreeLevel: self of: 0.
	^stringTree  ! !

!testRun: #ReportTest #test13TreeRepresentationOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 16:17:07'!
ERROR!

!testRun: #ReportTest #test13TreeRepresentationOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 16:17:07'!
ERROR!

!testRun: #ReportTest #test13TreeRepresentationOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 16:17:29'!
ERROR!
!ReceptiveAccount methodsFor: 'report collaboration' stamp: 'CR 11/16/2020 16:19:06' prior: 50902658!
collaborateWithTreeLevel: aReportToCollaborateWith of: aTreeLevel
	self collaboratingWith: aReportToCollaborateWith onLevel: aTreeLevel.! !
!ReceptiveAccount methodsFor: 'report collaboration' stamp: 'CR 11/16/2020 16:19:22' prior: 50902858!
collaborateWithTreeLevel: aReportToCollaborateWith of: aTreeLevel
	self collaborateWith: aReportToCollaborateWith onLevel: aTreeLevel.! !

!testRun: #ReportTest #test13TreeRepresentationOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 16:19:29'!
FAILURE!

!testRun: #ReportTest #test13TreeRepresentationOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 16:19:29'!
FAILURE!

treeRepresentationOfEmptyAccount tree!

self indentWithSpaces: anIndentationLevel andConcatenateName: aReceptiveAccount name.!
!Account methodsFor: 'nil' stamp: 'CR 11/16/2020 16:23:03' overrides: 16882612!
name
	^name ! !

!testRun: #ReportTest #test13TreeRepresentationOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 16:23:18'!
PASSED!
!ReportTest methodsFor: 'account summary tests' stamp: 'CR 11/16/2020 16:24:44'!
test14TreeRepresentationOfAnEmptyPortfolioIsItsName
	| treeRepresentationOfEmptyPortfolio fedesEmptyPortfolio |
	fedesEmptyPortfolio := Portfolio named: 'Portfolio vacio de Fede'.
	treeRepresentationOfEmptyPortfolio := TreeRepresentation for: fedesEmptyPortfolio. 
	self assertThat: (OrderedCollection with: 'Portfolio vacio de Fede' ) isEqualTo: treeRepresentationOfEmptyPortfolio tree.! !

!testRun: #ReportTest #test14TreeRepresentationOfAnEmptyPortfolioIsItsName stamp: 'CR 11/16/2020 16:24:46'!
ERROR!

!testRun: #ReportTest #test14TreeRepresentationOfAnEmptyPortfolioIsItsName stamp: 'CR 11/16/2020 16:24:46'!
ERROR!
!Portfolio class methodsFor: 'instance creation' stamp: 'CR 11/16/2020 16:25:15'!
named: portfolioName
	^(self new initializeWithName:  portfolioName)
		yourself! !

!testRun: #ReportTest #test14TreeRepresentationOfAnEmptyPortfolioIsItsName stamp: 'CR 11/16/2020 16:25:25'!
PASSED!
!ReportTest methodsFor: 'account summary tests' stamp: 'CR 11/16/2020 16:27:25'!
test15TreeRepresentationOfPortfolioWithOneAccountWorksCorrectly
	| treeRepresentationOfPortfolioWithOneAccount fedesPortfolio |
	fedesPortfolio := Portfolio named: 'Portfolio de Fede'.
	fedesPortfolio add: (ReceptiveAccount named: 'Cuenta de Juan'). 
	treeRepresentationOfPortfolioWithOneAccount := TreeRepresentation for: fedesPortfolio. 
	self assertThat: (OrderedCollection with: 'Portfolio de Fede' with: 'Cuenta de Juan') isEqualTo: treeRepresentationOfPortfolioWithOneAccount tree.! !

!testRun: #ReportTest #test15TreeRepresentationOfPortfolioWithOneAccountWorksCorrectly stamp: 'CR 11/16/2020 16:27:28'!
FAILURE!

!testRun: #ReportTest #test15TreeRepresentationOfPortfolioWithOneAccountWorksCorrectly stamp: 'CR 11/16/2020 16:27:28'!
FAILURE!

treeRepresentationOfPortfolioWithOneAccount tree!
!ReportTest methodsFor: 'account summary tests' stamp: 'CR 11/16/2020 16:28:03' prior: 50902924!
test15TreeRepresentationOfPortfolioWithOneAccountWorksCorrectly
	| treeRepresentationOfPortfolioWithOneAccount fedesPortfolio |
	fedesPortfolio := Portfolio named: 'Portfolio de Fede'.
	fedesPortfolio add: (ReceptiveAccount named: 'Cuenta de Juan'). 
	treeRepresentationOfPortfolioWithOneAccount := TreeRepresentation for: fedesPortfolio. 
	self assertThat: (OrderedCollection with: 'Portfolio de Fede' with: ' Cuenta de Juan') isEqualTo: treeRepresentationOfPortfolioWithOneAccount tree.! !

!testRun: #ReportTest #test15TreeRepresentationOfPortfolioWithOneAccountWorksCorrectly stamp: 'CR 11/16/2020 16:28:06'!
PASSED!
!ReportTest methodsFor: 'account summary tests' stamp: 'CR 11/16/2020 16:29:23'!
test16TreeRepresentationOfPortfolioWithManyAccountsWorksCorrectly
	| treeRepresentationOfPortfolioWithOneAccount fedesPortfolio juansPortfolio |
	fedesPortfolio := Portfolio named: 'Portfolio de Fede'.
	juansPortfolio := Portfolio named: 'Portfolio de Juan'.
	fedesPortfolio add: (ReceptiveAccount named: 'Cuenta de Fede').
	fedesPortfolio add: juansPortfolio.
	juansPortfolio add: (ReceptiveAccount named: 'Cuenta de Juan').
	  
	treeRepresentationOfPortfolioWithOneAccount := TreeRepresentation for: fedesPortfolio. 
	self assertThat: (OrderedCollection with: 'Portfolio de Fede' with: ' Cuenta de Juan') isEqualTo: treeRepresentationOfPortfolioWithOneAccount tree.! !
!ReportTest methodsFor: 'account summary tests' stamp: 'CR 11/16/2020 16:30:13' prior: 50902975!
test16TreeRepresentationOfPortfolioWithManyAccountsWorksCorrectly
	| treeRepresentationOfPortfolioWithOneAccount fedesPortfolio juansPortfolio |
	fedesPortfolio := Portfolio named: 'Portfolio de Fede'.
	juansPortfolio := Portfolio named: 'Portfolio de Juan'.
	fedesPortfolio add: (ReceptiveAccount named: 'Cuenta de Fede').
	fedesPortfolio add: juansPortfolio.
	juansPortfolio add: (ReceptiveAccount named: 'Cuenta de Juan').	  
	treeRepresentationOfPortfolioWithOneAccount := TreeRepresentation for: fedesPortfolio. 
	self assertThat: (OrderedCollection with: 'Portfolio de Fede' with: ' Cuenta de Fede' with: ' Portfolio de Juan' with: '  Cuenta de Juan') isEqualTo: treeRepresentationOfPortfolioWithOneAccount tree.! !

!testRun: #ReportTest #test16TreeRepresentationOfPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 16:30:22'!
PASSED!
!ReceptiveAccount methodsFor: 'report collaboration' stamp: 'CR 11/16/2020 16:36:01' prior: 50899351!
collaborateWith: aReportToCollaborateWith
	transactions do: [:aTransaction | aTransaction collaborateWith: aReportToCollaborateWith].
	aReportToCollaborateWith addBalanceToReport: self balance.! !
!Portfolio methodsFor: 'report collaboration' stamp: 'CR 11/16/2020 16:36:21' prior: 50899875!
collaborateWith: aReportToCollaborateWith

	accounts do: [:anAccount | anAccount collaborateWith: aReportToCollaborateWith].
	aReportToCollaborateWith addBalanceToReport: self balance.! !
!AccountSummary methodsFor: 'nil' stamp: 'CR 11/16/2020 16:37:56'!
addBalanceToReport: accountBalance
	summary add: ('Balance = ', accountBalance asString).! !

!testRun: #ReportTest #test01AccountSummaryOfAnEmptyReceptiveAccountIsEmpty stamp: 'CR 11/16/2020 16:38:08'!
FAILURE!

!testRun: #ReportTest #test02AccountSummaryOfAReceptiveAccountWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 16:38:08'!
FAILURE!

!testRun: #ReportTest #test03AccountSummaryOfAReceptiveAccountWithManyTransactionsWorksCorrectly stamp: 'CR 11/16/2020 16:38:08'!
FAILURE!

!testRun: #ReportTest #test04AccountSummaryOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/16/2020 16:38:08'!
FAILURE!

!testRun: #ReportTest #test05AccountSummaryOfAPortfolioWithOneAccountWorksCorrectly stamp: 'CR 11/16/2020 16:38:08'!
FAILURE!

!testRun: #ReportTest #test06AccountSummaryOfAPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 16:38:08'!
FAILURE!
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 16:39:01' prior: 50902131 overrides: 16927572!
setUp
	emptyPortfolio := Portfolio new.
	emptyAccountSummary := OrderedCollection with: 'Balance = 0'.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	accountWithManyTransactions := ReceptiveAccount new.
	accountWithTwoTransfers := ReceptiveAccount new.
	accountWithOneTransferDeposit := ReceptiveAccount new.
	accountWithOneTransferWithdraw := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	simplePortfolio := Portfolio with: accountWithDepositOf100.
	simplePortfolioWithOneTransfer := Portfolio with: accountWithOneTransferDeposit.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolioWithManyTransfers := Portfolio with: simplePortfolioWithOneTransfer.
	composedPortfolioWithManyTransfers add: accountWithManyTransactions.
	composedPortfolio add: accountWithDepositOf200.
	
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	Deposit register: 300 on: accountWithManyTransactions.
	Withdraw register: 50 on: accountWithManyTransactions.
	Transfer register: 75 from: accountWithManyTransactions to: accountWithTwoTransfers.
	Transfer register: 40 from: accountWithTwoTransfers to: accountWithManyTransactions.
	Transfer register: 50 from: accountWithOneTransferWithdraw to: accountWithOneTransferDeposit.
	
	accountSummaryWithOnlyDepositOf100 := OrderedCollection with: 'Dep�sito por 100'.
	accountSummaryManyTransactions := OrderedCollection with: 'Dep�sito por 300' with: 'Extracci�n por 50' with: 'Salida por transferencia de 75' with: 'Entrada por transferencia de 40'.
	accountSummaryOfComposedPortfolio := OrderedCollection with: 'Dep�sito por 100' with: 'Dep�sito por 200'.
	
	transferNetOfAccountWithOneTransferDeposit := OrderedCollection with: 'Entrada por transferencia de 50'.
	transferNetOfAccountWithOneTransferWithdraw := OrderedCollection with: 'Entrada por transferencia de 50'.
	
	! !
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 16:39:49' prior: 50903077 overrides: 16927572!
setUp
	emptyPortfolio := Portfolio new.
	emptyAccountSummary := OrderedCollection with: 'Balance = 0'.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	accountWithManyTransactions := ReceptiveAccount new.
	accountWithTwoTransfers := ReceptiveAccount new.
	accountWithOneTransferDeposit := ReceptiveAccount new.
	accountWithOneTransferWithdraw := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	simplePortfolio := Portfolio with: accountWithDepositOf100.
	simplePortfolioWithOneTransfer := Portfolio with: accountWithOneTransferDeposit.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolioWithManyTransfers := Portfolio with: simplePortfolioWithOneTransfer.
	composedPortfolioWithManyTransfers add: accountWithManyTransactions.
	composedPortfolio add: accountWithDepositOf200.
	
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	Deposit register: 300 on: accountWithManyTransactions.
	Withdraw register: 50 on: accountWithManyTransactions.
	Transfer register: 75 from: accountWithManyTransactions to: accountWithTwoTransfers.
	Transfer register: 40 from: accountWithTwoTransfers to: accountWithManyTransactions.
	Transfer register: 50 from: accountWithOneTransferWithdraw to: accountWithOneTransferDeposit.
	
	accountSummaryWithOnlyDepositOf100 := OrderedCollection with: 'Dep�sito por 100' with: 'Balance = 100'.
	accountSummaryManyTransactions := OrderedCollection with: 'Dep�sito por 300' with: 'Extracci�n por 50' with: 'Salida por transferencia de 75' with: 'Entrada por transferencia de 40'.
	accountSummaryOfComposedPortfolio := OrderedCollection with: 'Dep�sito por 100' with: 'Dep�sito por 200'.
	
	transferNetOfAccountWithOneTransferDeposit := OrderedCollection with: 'Entrada por transferencia de 50'.
	transferNetOfAccountWithOneTransferWithdraw := OrderedCollection with: 'Entrada por transferencia de 50'.
	
	! !
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 16:40:35' prior: 50903141 overrides: 16927572!
setUp
	emptyPortfolio := Portfolio new.
	emptyAccountSummary := OrderedCollection with: 'Balance = 0'.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	accountWithManyTransactions := ReceptiveAccount new.
	accountWithTwoTransfers := ReceptiveAccount new.
	accountWithOneTransferDeposit := ReceptiveAccount new.
	accountWithOneTransferWithdraw := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	simplePortfolio := Portfolio with: accountWithDepositOf100.
	simplePortfolioWithOneTransfer := Portfolio with: accountWithOneTransferDeposit.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolioWithManyTransfers := Portfolio with: simplePortfolioWithOneTransfer.
	composedPortfolioWithManyTransfers add: accountWithManyTransactions.
	composedPortfolio add: accountWithDepositOf200.
	
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	Deposit register: 300 on: accountWithManyTransactions.
	Withdraw register: 50 on: accountWithManyTransactions.
	Transfer register: 75 from: accountWithManyTransactions to: accountWithTwoTransfers.
	Transfer register: 40 from: accountWithTwoTransfers to: accountWithManyTransactions.
	Transfer register: 50 from: accountWithOneTransferWithdraw to: accountWithOneTransferDeposit.
	
	accountSummaryWithOnlyDepositOf100 := OrderedCollection with: 'Dep�sito por 100' with: 'Balance = 100'.
	accountSummaryManyTransactions := OrderedCollection with: 'Dep�sito por 300' with: 'Extracci�n por 50' with: 'Salida por transferencia de 75' with: 'Entrada por transferencia de 40' with: ('Balance = ', accountWithManyTransactions balance).
	accountSummaryOfComposedPortfolio := OrderedCollection with: 'Dep�sito por 100' with: 'Dep�sito por 200'.
	
	transferNetOfAccountWithOneTransferDeposit := OrderedCollection with: 'Entrada por transferencia de 50'.
	transferNetOfAccountWithOneTransferWithdraw := OrderedCollection with: 'Entrada por transferencia de 50'.
	
	! !
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 16:40:45' prior: 50903206 overrides: 16927572!
setUp
	emptyPortfolio := Portfolio new.
	emptyAccountSummary := OrderedCollection with: 'Balance = 0'.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	accountWithManyTransactions := ReceptiveAccount new.
	accountWithTwoTransfers := ReceptiveAccount new.
	accountWithOneTransferDeposit := ReceptiveAccount new.
	accountWithOneTransferWithdraw := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	simplePortfolio := Portfolio with: accountWithDepositOf100.
	simplePortfolioWithOneTransfer := Portfolio with: accountWithOneTransferDeposit.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolioWithManyTransfers := Portfolio with: simplePortfolioWithOneTransfer.
	composedPortfolioWithManyTransfers add: accountWithManyTransactions.
	composedPortfolio add: accountWithDepositOf200.
	
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	Deposit register: 300 on: accountWithManyTransactions.
	Withdraw register: 50 on: accountWithManyTransactions.
	Transfer register: 75 from: accountWithManyTransactions to: accountWithTwoTransfers.
	Transfer register: 40 from: accountWithTwoTransfers to: accountWithManyTransactions.
	Transfer register: 50 from: accountWithOneTransferWithdraw to: accountWithOneTransferDeposit.
	
	accountSummaryWithOnlyDepositOf100 := OrderedCollection with: 'Dep�sito por 100' with: 'Balance = 100'.
	accountSummaryManyTransactions := OrderedCollection with: 'Dep�sito por 300' with: 'Extracci�n por 50' with: 'Salida por transferencia de 75' with: 'Entrada por transferencia de 40' with: ('Balance = ', accountWithManyTransactions balance).
	accountSummaryOfComposedPortfolio := OrderedCollection with: 'Dep�sito por 100' with: 'Dep�sito por 200' with: 'Balance = 300'.
	
	transferNetOfAccountWithOneTransferDeposit := OrderedCollection with: 'Entrada por transferencia de 50'.
	transferNetOfAccountWithOneTransferWithdraw := OrderedCollection with: 'Entrada por transferencia de 50'.
	
	! !
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 16:41:11' prior: 50903273 overrides: 16927572!
setUp
	emptyPortfolio := Portfolio new.
	emptyAccountSummary := OrderedCollection with: 'Balance = 0'.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	accountWithManyTransactions := ReceptiveAccount new.
	accountWithTwoTransfers := ReceptiveAccount new.
	accountWithOneTransferDeposit := ReceptiveAccount new.
	accountWithOneTransferWithdraw := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	simplePortfolio := Portfolio with: accountWithDepositOf100.
	simplePortfolioWithOneTransfer := Portfolio with: accountWithOneTransferDeposit.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolioWithManyTransfers := Portfolio with: simplePortfolioWithOneTransfer.
	composedPortfolioWithManyTransfers add: accountWithManyTransactions.
	composedPortfolio add: accountWithDepositOf200.
	
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	Deposit register: 300 on: accountWithManyTransactions.
	Withdraw register: 50 on: accountWithManyTransactions.
	Transfer register: 75 from: accountWithManyTransactions to: accountWithTwoTransfers.
	Transfer register: 40 from: accountWithTwoTransfers to: accountWithManyTransactions.
	Transfer register: 50 from: accountWithOneTransferWithdraw to: accountWithOneTransferDeposit.
	
	accountSummaryWithOnlyDepositOf100 := OrderedCollection with: 'Dep�sito por 100' with: 'Balance = 100'.
	accountSummaryManyTransactions := OrderedCollection with: 'Dep�sito por 300' with: 'Extracci�n por 50' with: 'Salida por transferencia de 75' with: 'Entrada por transferencia de 40' with: ('Balance = ', accountWithManyTransactions balance asString).
	accountSummaryOfComposedPortfolio := OrderedCollection with: 'Dep�sito por 100' with: 'Dep�sito por 200' with: 'Balance = 300'.
	
	transferNetOfAccountWithOneTransferDeposit := OrderedCollection with: 'Entrada por transferencia de 50'.
	transferNetOfAccountWithOneTransferWithdraw := OrderedCollection with: 'Entrada por transferencia de 50'.
	
	! !

!testRun: #ReportTest #test01AccountSummaryOfAnEmptyReceptiveAccountIsEmpty stamp: 'CR 11/16/2020 16:41:15'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryOfAReceptiveAccountWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 16:41:15'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryOfAReceptiveAccountWithManyTransactionsWorksCorrectly stamp: 'CR 11/16/2020 16:41:15'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/16/2020 16:41:15'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryOfAPortfolioWithOneAccountWorksCorrectly stamp: 'CR 11/16/2020 16:41:15'!
FAILURE!

!testRun: #ReportTest #test06AccountSummaryOfAPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 16:41:15'!
FAILURE!

!testRun: #ReportTest #test01AccountSummaryOfAnEmptyReceptiveAccountIsEmpty stamp: 'CR 11/16/2020 16:41:21'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryOfAReceptiveAccountWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 16:41:22'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryOfAReceptiveAccountWithManyTransactionsWorksCorrectly stamp: 'CR 11/16/2020 16:41:24'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/16/2020 16:41:25'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryOfAPortfolioWithOneAccountWorksCorrectly stamp: 'CR 11/16/2020 16:41:26'!
FAILURE!

!testRun: #ReportTest #test05AccountSummaryOfAPortfolioWithOneAccountWorksCorrectly stamp: 'CR 11/16/2020 16:41:26'!
FAILURE!

accountSummaryOfASimplePortfolio summary!

!classDefinition: #ReportTest category: 'Portfolio2' stamp: 'CR 11/16/2020 16:44:49'!
TestCase subclass: #ReportTest
	instanceVariableNames: 'accountWithDepositOf100 accountWithDepositOf200 emptyAccount emptyAccountSummary accountSummaryWithOnlyDepositOf100 accountWithManyTransactions accountSummaryManyTransactions accountWithTwoTransfers emptyPortfolio simplePortfolio composedPortfolio accountSummaryOfComposedPortfolio accountWithOneTransferDeposit accountWithOneTransferWithdraw transferNetOfAccountWithOneTransferDeposit transferNetOfAccountWithOneTransferWithdraw simplePortfolioWithOneTransfer composedPortfolioWithManyTransfers accountSummaryOfSimplePortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!
!ReportTest methodsFor: 'account summary tests' stamp: 'CR 11/16/2020 16:44:47' prior: 50900668!
test05AccountSummaryOfAPortfolioWithOneAccountWorksCorrectly
	| accountSummaryOfASimplePortfolio |
	accountSummaryOfASimplePortfolio := AccountSummary for: simplePortfolio. 
	self assert:  accountSummaryOfSimplePortfolio = accountSummaryOfASimplePortfolio summary.! !
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 16:45:38' prior: 50903341 overrides: 16927572!
setUp
	emptyPortfolio := Portfolio new.
	emptyAccountSummary := OrderedCollection with: 'Balance = 0'.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	accountWithManyTransactions := ReceptiveAccount new.
	accountWithTwoTransfers := ReceptiveAccount new.
	accountWithOneTransferDeposit := ReceptiveAccount new.
	accountWithOneTransferWithdraw := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	simplePortfolio := Portfolio with: accountWithDepositOf100.
	simplePortfolioWithOneTransfer := Portfolio with: accountWithOneTransferDeposit.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolioWithManyTransfers := Portfolio with: simplePortfolioWithOneTransfer.
	composedPortfolioWithManyTransfers add: accountWithManyTransactions.
	composedPortfolio add: accountWithDepositOf200.
	
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	Deposit register: 300 on: accountWithManyTransactions.
	Withdraw register: 50 on: accountWithManyTransactions.
	Transfer register: 75 from: accountWithManyTransactions to: accountWithTwoTransfers.
	Transfer register: 40 from: accountWithTwoTransfers to: accountWithManyTransactions.
	Transfer register: 50 from: accountWithOneTransferWithdraw to: accountWithOneTransferDeposit.
	
	accountSummaryWithOnlyDepositOf100 := OrderedCollection with: 'Dep�sito por 100' with: 'Balance = 100'.
	accountSummaryOfSimplePortfolio := OrderedCollection with: 'Dep�sito por 100' with: 'Balance = 100' with: 'Balance = 100'.
	accountSummaryManyTransactions := OrderedCollection with: 'Dep�sito por 300' with: 'Extracci�n por 50' with: 'Salida por transferencia de 75' with: 'Entrada por transferencia de 40' with: ('Balance = ', accountWithManyTransactions balance asString).
	accountSummaryOfComposedPortfolio := OrderedCollection with: 'Dep�sito por 100' with: 'Dep�sito por 200' with: 'Balance = 300'.
	
	transferNetOfAccountWithOneTransferDeposit := OrderedCollection with: 'Entrada por transferencia de 50'.
	transferNetOfAccountWithOneTransferWithdraw := OrderedCollection with: 'Entrada por transferencia de 50'.
	
	! !
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 16:46:26' prior: 50903493 overrides: 16927572!
setUp
	emptyPortfolio := Portfolio new.
	emptyAccountSummary := OrderedCollection with: 'Balance = 0'.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	accountWithManyTransactions := ReceptiveAccount new.
	accountWithTwoTransfers := ReceptiveAccount new.
	accountWithOneTransferDeposit := ReceptiveAccount new.
	accountWithOneTransferWithdraw := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	simplePortfolio := Portfolio with: accountWithDepositOf100.
	simplePortfolioWithOneTransfer := Portfolio with: accountWithOneTransferDeposit.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolioWithManyTransfers := Portfolio with: simplePortfolioWithOneTransfer.
	composedPortfolioWithManyTransfers add: accountWithManyTransactions.
	composedPortfolio add: accountWithDepositOf200.
	
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	Deposit register: 300 on: accountWithManyTransactions.
	Withdraw register: 50 on: accountWithManyTransactions.
	Transfer register: 75 from: accountWithManyTransactions to: accountWithTwoTransfers.
	Transfer register: 40 from: accountWithTwoTransfers to: accountWithManyTransactions.
	Transfer register: 50 from: accountWithOneTransferWithdraw to: accountWithOneTransferDeposit.
	
	accountSummaryWithOnlyDepositOf100 := OrderedCollection with: 'Dep�sito por 100' with: 'Balance = 100'.
	accountSummaryOfSimplePortfolio := OrderedCollection with: 'Dep�sito por 100' with: 'Balance = 100' with: 'Balance = 100'.
	accountSummaryManyTransactions := OrderedCollection with: 'Dep�sito por 300' with: 'Extracci�n por 50' with: 'Salida por transferencia de 75' with: 'Entrada por transferencia de 40' with: ('Balance = ', accountWithManyTransactions balance asString).
	accountSummaryOfComposedPortfolio := OrderedCollection with: 'Dep�sito por 100' with: 'Dep�sito por 200' with: 'Balance = 300' with: 'Balance = 100'.
	
	transferNetOfAccountWithOneTransferDeposit := OrderedCollection with: 'Entrada por transferencia de 50'.
	transferNetOfAccountWithOneTransferWithdraw := OrderedCollection with: 'Entrada por transferencia de 50'.
	
	! !

!testRun: #ReportTest #test01AccountSummaryOfAnEmptyReceptiveAccountIsEmpty stamp: 'CR 11/16/2020 16:46:29'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryOfAReceptiveAccountWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 16:46:29'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryOfAReceptiveAccountWithManyTransactionsWorksCorrectly stamp: 'CR 11/16/2020 16:46:29'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/16/2020 16:46:29'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryOfAPortfolioWithOneAccountWorksCorrectly stamp: 'CR 11/16/2020 16:46:29'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryOfAPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 16:46:29'!
FAILURE!

!testRun: #ReportTest #test06AccountSummaryOfAPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 16:46:29'!
FAILURE!

!testRun: #ReportTest #test06AccountSummaryOfAPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 16:46:33'!
FAILURE!

!testRun: #ReportTest #test06AccountSummaryOfAPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 16:46:33'!
FAILURE!

accountSummaryOfAComposedPortfolio summary!
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 16:48:53' prior: 50903565 overrides: 16927572!
setUp
	emptyPortfolio := Portfolio new.
	emptyAccountSummary := OrderedCollection with: 'Balance = 0'.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	accountWithManyTransactions := ReceptiveAccount new.
	accountWithTwoTransfers := ReceptiveAccount new.
	accountWithOneTransferDeposit := ReceptiveAccount new.
	accountWithOneTransferWithdraw := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	simplePortfolio := Portfolio with: accountWithDepositOf100.
	simplePortfolioWithOneTransfer := Portfolio with: accountWithOneTransferDeposit.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolioWithManyTransfers := Portfolio with: simplePortfolioWithOneTransfer.
	composedPortfolioWithManyTransfers add: accountWithManyTransactions.
	composedPortfolio add: accountWithDepositOf200.
	
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	Deposit register: 300 on: accountWithManyTransactions.
	Withdraw register: 50 on: accountWithManyTransactions.
	Transfer register: 75 from: accountWithManyTransactions to: accountWithTwoTransfers.
	Transfer register: 40 from: accountWithTwoTransfers to: accountWithManyTransactions.
	Transfer register: 50 from: accountWithOneTransferWithdraw to: accountWithOneTransferDeposit.
	
	accountSummaryWithOnlyDepositOf100 := OrderedCollection with: 'Dep�sito por 100' with: 'Balance = 100'.
	accountSummaryOfSimplePortfolio := OrderedCollection with: 'Dep�sito por 100' with: 'Balance = 100' with: 'Balance = 100'.
	accountSummaryManyTransactions := OrderedCollection with: 'Dep�sito por 300' with: 'Extracci�n por 50' with: 'Salida por transferencia de 75' with: 'Entrada por transferencia de 40' with: ('Balance = ', accountWithManyTransactions balance asString).
	accountSummaryOfComposedPortfolio := OrderedCollection with: 'Dep�sito por 100' with: 'Dep�sito por 200' with: 'Balance = 300' with: 'Balance = 100' with: 'Balance = 200'.
	
	transferNetOfAccountWithOneTransferDeposit := OrderedCollection with: 'Entrada por transferencia de 50'.
	transferNetOfAccountWithOneTransferWithdraw := OrderedCollection with: 'Entrada por transferencia de 50'.
	
	! !
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 16:49:14' prior: 50903675 overrides: 16927572!
setUp
	emptyPortfolio := Portfolio new.
	emptyAccountSummary := OrderedCollection with: 'Balance = 0'.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	accountWithManyTransactions := ReceptiveAccount new.
	accountWithTwoTransfers := ReceptiveAccount new.
	accountWithOneTransferDeposit := ReceptiveAccount new.
	accountWithOneTransferWithdraw := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	simplePortfolio := Portfolio with: accountWithDepositOf100.
	simplePortfolioWithOneTransfer := Portfolio with: accountWithOneTransferDeposit.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolioWithManyTransfers := Portfolio with: simplePortfolioWithOneTransfer.
	composedPortfolioWithManyTransfers add: accountWithManyTransactions.
	composedPortfolio add: accountWithDepositOf200.
	
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	Deposit register: 300 on: accountWithManyTransactions.
	Withdraw register: 50 on: accountWithManyTransactions.
	Transfer register: 75 from: accountWithManyTransactions to: accountWithTwoTransfers.
	Transfer register: 40 from: accountWithTwoTransfers to: accountWithManyTransactions.
	Transfer register: 50 from: accountWithOneTransferWithdraw to: accountWithOneTransferDeposit.
	
	accountSummaryWithOnlyDepositOf100 := OrderedCollection with: 'Dep�sito por 100' with: 'Balance = 100'.
	accountSummaryOfSimplePortfolio := OrderedCollection with: 'Dep�sito por 100' with: 'Balance = 100' with: 'Balance = 100'.
	accountSummaryManyTransactions := OrderedCollection with: 'Dep�sito por 300' with: 'Extracci�n por 50' with: 'Salida por transferencia de 75' with: 'Entrada por transferencia de 40' with: ('Balance = ', accountWithManyTransactions balance asString).
	accountSummaryOfComposedPortfolio := OrderedCollection with: 'Dep�sito por 100' with: 'Dep�sito por 200' with: 'Balance = 300' with: 'Balance = 100' with: 'Balance = 200' with: 'Balance = 100'.
	
	transferNetOfAccountWithOneTransferDeposit := OrderedCollection with: 'Entrada por transferencia de 50'.
	transferNetOfAccountWithOneTransferWithdraw := OrderedCollection with: 'Entrada por transferencia de 50'.
	
	! !

!testRun: #ReportTest #test01AccountSummaryOfAnEmptyReceptiveAccountIsEmpty stamp: 'CR 11/16/2020 16:49:17'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryOfAReceptiveAccountWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 16:49:17'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryOfAReceptiveAccountWithManyTransactionsWorksCorrectly stamp: 'CR 11/16/2020 16:49:17'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/16/2020 16:49:17'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryOfAPortfolioWithOneAccountWorksCorrectly stamp: 'CR 11/16/2020 16:49:17'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryOfAPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 16:49:17'!
FAILURE!

!testRun: #ReportTest #test06AccountSummaryOfAPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 16:49:17'!
FAILURE!

accountSummaryOfAComposedPortfolio summary!
!ReportTest methodsFor: 'account summary tests' stamp: 'CR 11/16/2020 16:50:15' prior: 50901075!
test06AccountSummaryOfAPortfolioWithManyAccountsWorksCorrectly
	| accountSummaryOfAComposedPortfolio |
	accountSummaryOfAComposedPortfolio := AccountSummary for: composedPortfolio. 
	self assertThat:  accountSummaryOfComposedPortfolio isEqualTo:  accountSummaryOfAComposedPortfolio summary.! !

!testRun: #ReportTest #test05AccountSummaryOfAPortfolioWithOneAccountWorksCorrectly stamp: 'CR 11/16/2020 16:50:18'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryOfAPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 16:50:21'!
PASSED!

!testRun: #ReportTest #test13TreeRepresentationOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 16:50:24'!
PASSED!

!testRun: #ReportTest #test14TreeRepresentationOfAnEmptyPortfolioIsItsName stamp: 'CR 11/16/2020 16:50:24'!
PASSED!

!testRun: #ReportTest #test15TreeRepresentationOfPortfolioWithOneAccountWorksCorrectly stamp: 'CR 11/16/2020 16:50:24'!
PASSED!

!testRun: #ReportTest #test16TreeRepresentationOfPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 16:50:24'!
PASSED!

!testRun: #ReportTest #test07TransferNetOfAnEmptyReceptiveAccountIsEmpty stamp: 'CR 11/16/2020 16:50:26'!
ERROR!

!testRun: #ReportTest #test08TransferNetBetweenReceptiveAccountsWithOneTransferWorksCorrectly stamp: 'CR 11/16/2020 16:50:26'!
ERROR!

!testRun: #ReportTest #test09TransferNetBetweenReceptiveAccountsWithManyTransfersWorksCorrectly stamp: 'CR 11/16/2020 16:50:26'!
ERROR!

!testRun: #ReportTest #test10TransferNetOfAnEmptyPortfolioIsZero stamp: 'CR 11/16/2020 16:50:26'!
ERROR!

!testRun: #ReportTest #test11TransferNetOfAPortfolioWithOneTransferWorksCorrectly stamp: 'CR 11/16/2020 16:50:26'!
ERROR!

!testRun: #ReportTest #test12TransferNetOfAPortfolioWithManyTransfersWorksCorrectly stamp: 'CR 11/16/2020 16:50:26'!
ERROR!

!testRun: #ReportTest #test07TransferNetOfAnEmptyReceptiveAccountIsEmpty stamp: 'CR 11/16/2020 16:51:00'!
ERROR!
!Portfolio methodsFor: 'report collaboration' stamp: 'CR 11/16/2020 16:53:33' prior: 50903039!
collaborateWith: aReportToCollaborateWith

	accounts do: [:anAccount | anAccount collaborateWith: aReportToCollaborateWith].
	aReportToCollaborateWith collaboratingAccount: self.! !
!ReceptiveAccount methodsFor: 'report collaboration' stamp: 'CR 11/16/2020 16:53:47' prior: 50903029!
collaborateWith: aReportToCollaborateWith
	transactions do: [:aTransaction | aTransaction collaborateWith: aReportToCollaborateWith].
	aReportToCollaborateWith collaboratingAcount: self.! !
!AccountSummary methodsFor: 'collaboration' stamp: 'CR 11/16/2020 16:54:17'!
collaboratingAccount: anAccountThatColaborates
	summary add: ('Balance = ', anAccountThatColaborates balance asString).! !
!TransferNet methodsFor: 'nil' stamp: 'CR 11/16/2020 16:54:28'!
collaboratingAccount: anAccountThatColaborates
! !

!testRun: #ReportTest #test01AccountSummaryOfAnEmptyReceptiveAccountIsEmpty stamp: 'CR 11/16/2020 16:54:36'!
ERROR!

!testRun: #ReportTest #test02AccountSummaryOfAReceptiveAccountWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 16:54:36'!
ERROR!

!testRun: #ReportTest #test03AccountSummaryOfAReceptiveAccountWithManyTransactionsWorksCorrectly stamp: 'CR 11/16/2020 16:54:36'!
ERROR!

!testRun: #ReportTest #test04AccountSummaryOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/16/2020 16:54:36'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryOfAPortfolioWithOneAccountWorksCorrectly stamp: 'CR 11/16/2020 16:54:36'!
ERROR!

!testRun: #ReportTest #test06AccountSummaryOfAPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 16:54:36'!
ERROR!
!ReceptiveAccount methodsFor: 'report collaboration' stamp: 'CR 11/16/2020 16:54:54' prior: 50903923!
collaborateWith: aReportToCollaborateWith
	transactions do: [:aTransaction | aTransaction collaborateWith: aReportToCollaborateWith].
	aReportToCollaborateWith collaboratingAccount: self.! !

!testRun: #ReportTest #test01AccountSummaryOfAnEmptyReceptiveAccountIsEmpty stamp: 'CR 11/16/2020 16:54:57'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryOfAReceptiveAccountWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 16:54:57'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryOfAReceptiveAccountWithManyTransactionsWorksCorrectly stamp: 'CR 11/16/2020 16:54:57'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/16/2020 16:54:57'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryOfAPortfolioWithOneAccountWorksCorrectly stamp: 'CR 11/16/2020 16:54:57'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryOfAPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 16:54:57'!
PASSED!

!testRun: #ReportTest #test13TreeRepresentationOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 16:55:00'!
PASSED!

!testRun: #ReportTest #test14TreeRepresentationOfAnEmptyPortfolioIsItsName stamp: 'CR 11/16/2020 16:55:00'!
PASSED!

!testRun: #ReportTest #test15TreeRepresentationOfPortfolioWithOneAccountWorksCorrectly stamp: 'CR 11/16/2020 16:55:00'!
PASSED!

!testRun: #ReportTest #test16TreeRepresentationOfPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 16:55:00'!
PASSED!

!testRun: #ReportTest #test07TransferNetOfAnEmptyReceptiveAccountIsEmpty stamp: 'CR 11/16/2020 16:55:02'!
PASSED!

!testRun: #ReportTest #test08TransferNetBetweenReceptiveAccountsWithOneTransferWorksCorrectly stamp: 'CR 11/16/2020 16:55:02'!
PASSED!

!testRun: #ReportTest #test09TransferNetBetweenReceptiveAccountsWithManyTransfersWorksCorrectly stamp: 'CR 11/16/2020 16:55:02'!
PASSED!

!testRun: #ReportTest #test10TransferNetOfAnEmptyPortfolioIsZero stamp: 'CR 11/16/2020 16:55:02'!
PASSED!

!testRun: #ReportTest #test11TransferNetOfAPortfolioWithOneTransferWorksCorrectly stamp: 'CR 11/16/2020 16:55:02'!
PASSED!

!testRun: #ReportTest #test12TransferNetOfAPortfolioWithManyTransfersWorksCorrectly stamp: 'CR 11/16/2020 16:55:02'!
PASSED!

!methodRemoval: ReportAction #collaboratingDeposit: stamp: 'CR 11/16/2020 16:56:51'!
collaboratingDeposit: aDeposit
	self subclassResponsibility !

!methodRemoval: ReportAction #collaboratingTransferDeposit: stamp: 'CR 11/16/2020 16:56:51'!
collaboratingTransferDeposit: aTransferDeposit
	self subclassResponsibility !

!methodRemoval: ReportAction #collaboratingTransferWithdraw: stamp: 'CR 11/16/2020 16:56:51'!
collaboratingTransferWithdraw: aTransferWithdraw
	self subclassResponsibility !

!methodRemoval: ReportAction #collaboratingWithdraw: stamp: 'CR 11/16/2020 16:56:52'!
collaboratingWithdraw: aWithdraw
	self subclassResponsibility !

ReportAction subclass: #IndentedTransactionTreeString
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

!classDefinition: #IndentedTransactionTreeString category: 'Portfolio2' stamp: 'CR 11/16/2020 16:57:14'!
ReportAction subclass: #IndentedTransactionTreeString
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!
!ReceptiveAccount methodsFor: 'report collaboration' stamp: 'CR 11/16/2020 16:58:01' prior: 50902866!
collaborateWithTreeLevel: aReportToCollaborateWith of: aTreeLevel
	self collaborateWith: aReportToCollaborateWith onLevel: aTreeLevel.! !
!ReceptiveAccount methodsFor: 'report collaboration' stamp: 'CR 11/16/2020 17:03:07' prior: 50904072!
collaborateWithTreeLevel: aReportToCollaborateWith of: aTreeLevel
	self collaborateWith: aReportToCollaborateWith onLevel: aTreeLevel.
	aReportToCollaborateWith transactionCollaboration: self onLevel: aTreeLevel.! !
!IndentedTransactionTreeString methodsFor: 'nil' stamp: 'CR 11/16/2020 17:05:05'!
transactionCollaboration: aReceptiveAccount onLevel: aTreeLevel
	aReceptiveAccount collaborateWith:  aReceptiveAccount onLevel: aTreeLevel.! !
!ReceptiveAccount methodsFor: 'report collaboration' stamp: 'CR 11/16/2020 17:05:58' overrides: 50902784!
collaborateWith: aReportToCollaborateWith onLevel: aTreeLevel
	transactions do: [:aTransaction | aTransaction collaborateWith: aReportToCollaborateWith].
	aReportToCollaborateWith collaboratingAccount: self onLevel: aTreeLevel.! !

!methodRemoval: IndentedTransactionTreeString #transactionCollaboration:onLevel: stamp: 'CR 11/16/2020 17:06:51'!
transactionCollaboration: aReceptiveAccount onLevel: aTreeLevel
	aReceptiveAccount collaborateWith:  aReceptiveAccount onLevel: aTreeLevel.!

AccountReport subclass: #TreeRepresentationWithTransactions
	instanceVariableNames: 'stringTree'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

!classDefinition: #TreeRepresentationWithTransactions category: 'Portfolio2' stamp: 'CR 11/16/2020 17:07:05'!
AccountReport subclass: #TreeRepresentationWithTransactions
	instanceVariableNames: 'stringTree'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!
!TreeRepresentationWithTransactions methodsFor: 'nil' stamp: 'CR 11/16/2020 17:07:16'!
transactionCollaboration: aReceptiveAccount onLevel: aTreeLevel
	aReceptiveAccount collaborateWith:  aReceptiveAccount onLevel: aTreeLevel.! !
!TreeRepresentationWithTransactions methodsFor: 'nil' stamp: 'CR 11/16/2020 17:07:57'!
collaboratingAccount: account onLevel: aTreeLevel
	! !
!TreeRepresentation methodsFor: 'nil' stamp: 'CR 11/16/2020 17:08:09'!
collaboratingAccount: account onLevel: aTreeLevel
	! !

!methodRemoval: TreeRepresentation #collaboratingAccount:onLevel: stamp: 'CR 11/16/2020 17:08:35'!
collaboratingAccount: account onLevel: aTreeLevel
	!
!ReceptiveAccount methodsFor: 'report collaboration' stamp: 'CR 11/16/2020 17:15:12' prior: 50904098 overrides: 50902784!
collaborateWith: aReportToCollaborateWith onLevel: aTreeLevel
	aReportToCollaborateWith collaboratingAccount: self onLevel: aTreeLevel.! !
!TreeRepresentation methodsFor: 'nil' stamp: 'CR 11/16/2020 17:15:53'!
transactionCollaboration: anAccount onLevel: aTreeLevel! !
!TreeRepresentationWithTransactions methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 17:16:29' prior: 50904130!
transactionCollaboration: aReceptiveAccount onLevel: aTreeLevel
	aReceptiveAccount transactionCollaborationWith:  aReceptiveAccount onLevel: aTreeLevel.! !
!TreeRepresentationWithTransactions methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 17:16:37' prior: 50904166!
transactionCollaboration: aReceptiveAccount onLevel: aTreeLevel
	aReceptiveAccount transactionCollaborationWith:  self onLevel: aTreeLevel.! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'CR 11/16/2020 17:17:07'!
transactionCollaborationWith:  aReportToCollaborateWith onLevel: aTreeLevel
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 17:17:31' prior: 50904182!
transactionCollaborationWith:  aReportToCollaborateWith onLevel: aTreeLevel
	transactions do: [:aTransaction | aTransaction collaborateWith: aReportToCollaborateWith onLevel: aTreeLevel].
	! !
!AccountTransaction methodsFor: 'report collaboration' stamp: 'CR 11/16/2020 17:18:15'!
collaborateWith: aReportToCollaborateWith onLevel: aTreeLevel
	| resultOfCollaboration | 
	resultOfCollaboration := self executeCollaboration: (aReportToCollaborateWith collaboration) onLevel: aTreeLevel. 
	aReportToCollaborateWith collaborationWithTransactionResult: resultOfCollaboration.! !
!AccountTransaction methodsFor: 'report collaboration' stamp: 'CR 11/16/2020 17:19:29' prior: 50904197!
collaborateWith: aReportToCollaborateWith onLevel: aTreeLevel
	| resultOfCollaboration | 
	resultOfCollaboration := self executeCollaboration: (aReportToCollaborateWith collaboration). 
	aReportToCollaborateWith collaborationWithTransactionResult: resultOfCollaboration onLevel: aTreeLevel.! !
!TreeRepresentationWithTransactions methodsFor: 'nil' stamp: 'CR 11/16/2020 17:20:15'!
initializeFor: anAccount 
	accountToMakeReportFor := anAccount.
	stringTree := OrderedCollection new.
	collaborationAction := IndentedTreeString new.
	! !

!methodRemoval: AccountReport #collaborationWithTransactionResult: stamp: 'CR 11/16/2020 17:21:07'!
collaborationWithTransactionResult: resultOfCollaboration
	self subclassResponsibility.!
!AccountTransaction methodsFor: 'report collaboration' stamp: 'CR 11/16/2020 17:22:06' prior: 50904210!
collaborateWith: aReportToCollaborateWith onLevel: aTreeLevel
	| resultOfCollaboration | 
	resultOfCollaboration := self executeCollaboration: (aReportToCollaborateWith collaboration) onLevel: aTreeLevel. 
	aReportToCollaborateWith collaborationWithTransactionResult: resultOfCollaboration onLevel: aTreeLevel.! !
!AccountTransaction methodsFor: 'report collaboration' stamp: 'CR 11/16/2020 17:22:23' prior: 50904237!
collaborateWith: aReportToCollaborateWith onLevel: aTreeLevel
	| resultOfCollaboration | 
	resultOfCollaboration := self executeCollaboration: (aReportToCollaborateWith collaboration). 
	aReportToCollaborateWith collaborationWithTransactionResult: resultOfCollaboration onLevel: aTreeLevel.! !
!TreeRepresentationWithTransactions methodsFor: 'initialization' stamp: 'CR 11/16/2020 17:22:35' prior: 50904222!
initializeFor: anAccount 
	accountToMakeReportFor := anAccount.
	stringTree := OrderedCollection new.
	collaborationAction := AccountSummary new.
	! !
!ReceptiveAccount methodsFor: 'report collaboration' stamp: 'CR 11/16/2020 17:23:42' prior: 50904188!
transactionCollaborationWith:  aReportToCollaborateWith onLevel: aTreeLevel
	transactions do: [:aTransaction | aTransaction collaborateWith: aReportToCollaborateWith onLevel: aTreeLevel + 1].
	! !
!TreeRepresentationWithTransactions methodsFor: 'nil' stamp: 'CR 11/16/2020 17:24:31'!
collaborationWithTransactionResult: resultOfCollaboration onLevel: aTreeLevel
	^ stringTree add: resultOfCollaboration.! !

!classRenamed: #TreeRepresentation as: #TreeRepresentationAccounts stamp: 'CR 11/16/2020 17:25:15'!
Smalltalk renameClassNamed: #TreeRepresentation as: #TreeRepresentationAccounts!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 17:25:15' prior: 50902892!
test14TreeRepresentationOfAnEmptyPortfolioIsItsName
	| treeRepresentationOfEmptyPortfolio fedesEmptyPortfolio |
	fedesEmptyPortfolio := Portfolio named: 'Portfolio vacio de Fede'.
	treeRepresentationOfEmptyPortfolio := TreeRepresentationAccounts for: fedesEmptyPortfolio. 
	self assertThat: (OrderedCollection with: 'Portfolio vacio de Fede' ) isEqualTo: treeRepresentationOfEmptyPortfolio tree.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 17:25:15' prior: 50902953!
test15TreeRepresentationOfPortfolioWithOneAccountWorksCorrectly
	| treeRepresentationOfPortfolioWithOneAccount fedesPortfolio |
	fedesPortfolio := Portfolio named: 'Portfolio de Fede'.
	fedesPortfolio add: (ReceptiveAccount named: 'Cuenta de Juan'). 
	treeRepresentationOfPortfolioWithOneAccount := TreeRepresentationAccounts for: fedesPortfolio. 
	self assertThat: (OrderedCollection with: 'Portfolio de Fede' with: ' Cuenta de Juan') isEqualTo: treeRepresentationOfPortfolioWithOneAccount tree.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 17:25:15' prior: 50902817!
test13TreeRepresentationOfAnEmptyReceptiveAccountIsItsName
	| treeRepresentationOfEmptyAccount fedesEmptyAccount |
	fedesEmptyAccount := ReceptiveAccount named: 'Cuenta vacia de Fede'.
	treeRepresentationOfEmptyAccount := TreeRepresentationAccounts for: fedesEmptyAccount. 
	self assertThat: (OrderedCollection with: 'Cuenta vacia de Fede' ) isEqualTo: treeRepresentationOfEmptyAccount tree.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 17:25:15' prior: 50902999!
test16TreeRepresentationOfPortfolioWithManyAccountsWorksCorrectly
	| treeRepresentationOfPortfolioWithOneAccount fedesPortfolio juansPortfolio |
	fedesPortfolio := Portfolio named: 'Portfolio de Fede'.
	juansPortfolio := Portfolio named: 'Portfolio de Juan'.
	fedesPortfolio add: (ReceptiveAccount named: 'Cuenta de Fede').
	fedesPortfolio add: juansPortfolio.
	juansPortfolio add: (ReceptiveAccount named: 'Cuenta de Juan').	  
	treeRepresentationOfPortfolioWithOneAccount := TreeRepresentationAccounts for: fedesPortfolio. 
	self assertThat: (OrderedCollection with: 'Portfolio de Fede' with: ' Cuenta de Fede' with: ' Portfolio de Juan' with: '  Cuenta de Juan') isEqualTo: treeRepresentationOfPortfolioWithOneAccount tree.! !

AccountReport subclass: #TreeRepresentation
	instanceVariableNames: 'stringTree'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

!classDefinition: #TreeRepresentation category: 'Portfolio2' stamp: 'CR 11/16/2020 17:25:42'!
AccountReport subclass: #TreeRepresentation
	instanceVariableNames: 'stringTree'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

TreeRepresentation subclass: #TreeRepresentationAccounts
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

!classDefinition: #TreeRepresentationAccounts category: 'Portfolio2' stamp: 'CR 11/16/2020 17:25:54'!
TreeRepresentation subclass: #TreeRepresentationAccounts
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

TreeRepresentation subclass: #TreeRepresentationWithTransactions
	instanceVariableNames: 'stringTree'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

TreeRepresentation subclass: #TreeRepresentationWithTransactions
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

!classDefinition: #TreeRepresentationWithTransactions category: 'Portfolio2' stamp: 'CR 11/16/2020 17:26:03'!
TreeRepresentation subclass: #TreeRepresentationWithTransactions
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!
!TreeRepresentation methodsFor: 'nil' stamp: 'CR 11/16/2020 17:26:23'!
tree
	accountToMakeReportFor collaborateWithTreeLevel: self of: 0.
	^stringTree  ! !

!methodRemoval: TreeRepresentationAccounts #tree stamp: 'CR 11/16/2020 17:26:28'!
tree
	accountToMakeReportFor collaborateWithTreeLevel: self of: 0.
	^stringTree  !
!AccountTransaction methodsFor: 'report collaboration' stamp: 'CR 11/16/2020 17:28:34' prior: 50904251!
collaborateWith: aReportToCollaborateWith onLevel: aTreeLevel
	| resultOfCollaboration | 
	resultOfCollaboration := self executeCollaboration: (aReportToCollaborateWith collaboration) onLevel: aTreeLevel. 
	aReportToCollaborateWith collaborationWithTransactionResult: resultOfCollaboration onLevel: aTreeLevel.! !
!AccountTransaction methodsFor: 'report collaboration' stamp: 'CR 11/16/2020 17:32:07' prior: 50904427!
collaborateWith: aReportToCollaborateWith onLevel: aTreeLevel
	| resultOfCollaboration | 
	resultOfCollaboration := self executeCollaboration: (aReportToCollaborateWith collaboration). 
	aReportToCollaborateWith collaborationWithTransactionResult: resultOfCollaboration onLevel: aTreeLevel.! !
!AccountTransaction methodsFor: 'report collaboration' stamp: 'CR 11/16/2020 17:33:07' prior: 50904441!
collaborateWith: aReportToCollaborateWith onLevel: aTreeLevel
	| resultOfCollaboration | 
	resultOfCollaboration := self executeCollaboration: (aReportToCollaborateWith collaboration) onLevel: aTreeLevel. 
	aReportToCollaborateWith collaborationWithTransactionResult: resultOfCollaboration onLevel: aTreeLevel.! !
!AccountTransaction methodsFor: 'report collaboration' stamp: 'CR 11/16/2020 17:34:41' prior: 50904454!
collaborateWith: aReportToCollaborateWith onLevel: aTreeLevel
	| resultOfCollaboration | 
	resultOfCollaboration := self executeCollaboration: (aReportToCollaborateWith collaboration) onLevel: aTreeLevel. 
	aReportToCollaborateWith collaborationWithAccountResult: resultOfCollaboration.! !
!TreeRepresentation methodsFor: 'nil' stamp: 'CR 11/16/2020 17:35:46'!
collaborationWithAccountResult: anAccountStringRepresentation
	stringTree add: anAccountStringRepresentation.! !

!methodRemoval: TreeRepresentationAccounts #collaborationWithAccountResult: stamp: 'CR 11/16/2020 17:35:52'!
collaborationWithAccountResult: anAccountStringRepresentation
	stringTree add: anAccountStringRepresentation.!

!methodRemoval: TreeRepresentationWithTransactions #collaborationWithTransactionResult:onLevel: stamp: 'CR 11/16/2020 17:36:11'!
collaborationWithTransactionResult: resultOfCollaboration onLevel: aTreeLevel
	^ stringTree add: resultOfCollaboration.!
!Deposit methodsFor: 'report collaboration' stamp: 'CR 11/16/2020 17:38:56'!
executeCollaboration: aCollaboration onLevel: aTreeLevel! !
!Deposit methodsFor: 'report collaboration' stamp: 'CR 11/16/2020 17:39:26' prior: 50904501!
executeCollaboration: collaborationToPerform onLevel: aTreeLevel
	^ collaborationToPerform collaboratingDeposit: self onLevel: aTreeLevel.
	 ! !
!TransferDeposit methodsFor: 'report collaboration' stamp: 'CR 11/16/2020 17:39:43'!
executeCollaboration: collaborationToPerform onLevel: aTreeLevel
	^ collaborationToPerform collaboratingTransferDeposit: self onLevel: aTreeLevel.
	 ! !
!TransferWithdraw methodsFor: 'report collaboration' stamp: 'CR 11/16/2020 17:40:00'!
executeCollaboration: collaborationToPerform onLevel: aTreeLevel
	^ collaborationToPerform collaboratingTransferWithdraw: self onLevel: aTreeLevel.
	 ! !
!Withdraw methodsFor: 'report collaboration' stamp: 'CR 11/16/2020 17:40:20'!
executeCollaboration: collaborationToPerform onLevel: aTreeLevel
	^ collaborationToPerform collaboratingWithdraw: self onLevel: aTreeLevel.
	 ! !
!SummaryString methodsFor: 'transaction collaboration' stamp: 'CR 11/16/2020 17:41:46'!
collaboratingDeposit: aDeposit onLevel: aTreeLevel
	^  'Dep�sito por ' , (aDeposit value) asString. ! !
!SummaryString methodsFor: 'transaction collaboration' stamp: 'CR 11/16/2020 17:41:50'!
collaboratingTransferDeposit: aTransferDeposit onLevel: aTreeLevel
	^  'Entrada por transferencia de ' , (aTransferDeposit value) asString. ! !
!SummaryString methodsFor: 'transaction collaboration' stamp: 'CR 11/16/2020 17:41:56'!
collaboratingTransferWithdraw: aTransferWithdraw onLevel: aTreeLevel
	^  'Salida por transferencia de ' , (aTransferWithdraw value) asString. ! !
!SummaryString methodsFor: 'transaction collaboration' stamp: 'CR 11/16/2020 17:42:00'!
collaboratingWithdraw: aWithdraw onLevel: aTreeLevel
	^  'Extracci�n por ' , (aWithdraw value) asString. ! !
!SummaryString methodsFor: 'transaction collaboration' stamp: 'CR 11/16/2020 17:42:50' prior: 50904560!
collaboratingWithdraw: aWithdraw onLevel: aTreeLevel
	| indentCollaborator |
	indentCollaborator := IndentedTreeString new.
	! !
!SummaryString methodsFor: 'transaction collaboration' stamp: 'CR 11/16/2020 17:43:09' prior: 50904567!
collaboratingWithdraw: aWithdraw onLevel: aTreeLevel
	| indentCollaborator |
	indentCollaborator := IndentedTreeString new.
	
	! !
!SummaryString methodsFor: 'transaction collaboration' stamp: 'CR 11/16/2020 17:44:18' prior: 50904575!
collaboratingWithdraw: aWithdraw onLevel: anIndentationLevel
	| indentCollaborator |
	indentCollaborator := IndentedTreeString new.
	^ indentCollaborator indentWithSpaces: anIndentationLevel  andConcatenateName: (self collaboratingWithdraw: aWithdraw).
	
	
	! !
!SummaryString methodsFor: 'transaction collaboration' stamp: 'CR 11/16/2020 17:45:20' prior: 50904583!
collaboratingWithdraw: aWithdraw onLevel: anIndentationLevel
	^ self useIndentOn: aWithdraw onLevel: anIndentationLevel.
	
	
	! !
!SummaryString methodsFor: 'transaction collaboration' stamp: 'CR 11/16/2020 17:45:37'!
useIndentOn: aTransaction onLevel: anIndentationLevel
	| indentCollaborator |
	indentCollaborator := IndentedTreeString new.
	^ indentCollaborator indentWithSpaces: anIndentationLevel  andConcatenateName: (self collaboratingWithdraw: aTransaction ).
	
	
	! !
!SummaryString methodsFor: 'transaction collaboration' stamp: 'CR 11/16/2020 17:46:32' prior: 50904538!
collaboratingDeposit: aDeposit onLevel: anIndentationLevel
	^ self useIndentOn: (self collaboratingDeposit: aDeposit) onLevel: anIndentationLevel.! !
!SummaryString methodsFor: 'transaction collaboration' stamp: 'CR 11/16/2020 17:46:49' prior: 50904602!
useIndentOn: aName onLevel: anIndentationLevel
	| indentCollaborator |
	indentCollaborator := IndentedTreeString new.
	^ indentCollaborator indentWithSpaces: anIndentationLevel  andConcatenateName: (self collaboratingWithdraw: aName ).
	
	
	! !
!SummaryString methodsFor: 'transaction collaboration' stamp: 'CR 11/16/2020 17:47:20' prior: 50904595!
collaboratingWithdraw: aWithdraw onLevel: anIndentationLevel
	^ self useIndentOn:  (self collaboratingWithdraw: aWithdraw) onLevel: anIndentationLevel.
	
	
	! !
!SummaryString methodsFor: 'transaction collaboration' stamp: 'CR 11/16/2020 17:47:46' prior: 50904552!
collaboratingTransferWithdraw: aTransferWithdraw onLevel: anIndentationLevel
	^ self useIndentOn:  (self collaboratingTransferWithdraw: aTransferWithdraw) onLevel: anIndentationLevel.! !
!SummaryString methodsFor: 'transaction collaboration' stamp: 'CR 11/16/2020 17:48:22' prior: 50904544!
collaboratingTransferDeposit: aTransferDeposit onLevel: anIndentationLevel
	^ self useIndentOn: (self collaboratingTransferDeposit: aTransferDeposit) onLevel: anIndentationLevel.! !

!testRun: #ReportTest #test01AccountSummaryOfAnEmptyReceptiveAccountIsEmpty stamp: 'CR 11/16/2020 17:49:21'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryOfAReceptiveAccountWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 17:49:21'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryOfAReceptiveAccountWithManyTransactionsWorksCorrectly stamp: 'CR 11/16/2020 17:49:21'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/16/2020 17:49:21'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryOfAPortfolioWithOneAccountWorksCorrectly stamp: 'CR 11/16/2020 17:49:21'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryOfAPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 17:49:21'!
PASSED!

!testRun: #ReportTest #test13TreeRepresentationOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 17:49:24'!
ERROR!

!testRun: #ReportTest #test14TreeRepresentationOfAnEmptyPortfolioIsItsName stamp: 'CR 11/16/2020 17:49:24'!
PASSED!

!testRun: #ReportTest #test15TreeRepresentationOfPortfolioWithOneAccountWorksCorrectly stamp: 'CR 11/16/2020 17:49:24'!
ERROR!

!testRun: #ReportTest #test16TreeRepresentationOfPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 17:49:24'!
ERROR!

!testRun: #ReportTest #test13TreeRepresentationOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 17:49:48'!
ERROR!

!testRun: #ReportTest #test13TreeRepresentationOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 17:49:55'!
ERROR!

!methodRemoval: ReceptiveAccount #collaborateWith:onLevel: stamp: 'CR 11/16/2020 17:55:45'!
collaborateWith: aReportToCollaborateWith onLevel: aTreeLevel
	aReportToCollaborateWith collaboratingAccount: self onLevel: aTreeLevel.!

!testRun: #ReportTest #test13TreeRepresentationOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 17:55:52'!
PASSED!

!testRun: #ReportTest #test14TreeRepresentationOfAnEmptyPortfolioIsItsName stamp: 'CR 11/16/2020 17:55:52'!
PASSED!

!testRun: #ReportTest #test15TreeRepresentationOfPortfolioWithOneAccountWorksCorrectly stamp: 'CR 11/16/2020 17:55:52'!
PASSED!

!testRun: #ReportTest #test16TreeRepresentationOfPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 17:55:52'!
PASSED!

!testRun: #ReportTest #test01AccountSummaryOfAnEmptyReceptiveAccountIsEmpty stamp: 'CR 11/16/2020 17:55:55'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryOfAReceptiveAccountWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 17:55:55'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryOfAReceptiveAccountWithManyTransactionsWorksCorrectly stamp: 'CR 11/16/2020 17:55:55'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/16/2020 17:55:55'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryOfAPortfolioWithOneAccountWorksCorrectly stamp: 'CR 11/16/2020 17:55:55'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryOfAPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 17:55:55'!
PASSED!

!testRun: #ReportTest #test07TransferNetOfAnEmptyReceptiveAccountIsEmpty stamp: 'CR 11/16/2020 17:55:58'!
PASSED!

!testRun: #ReportTest #test08TransferNetBetweenReceptiveAccountsWithOneTransferWorksCorrectly stamp: 'CR 11/16/2020 17:55:58'!
PASSED!

!testRun: #ReportTest #test09TransferNetBetweenReceptiveAccountsWithManyTransfersWorksCorrectly stamp: 'CR 11/16/2020 17:55:58'!
PASSED!

!testRun: #ReportTest #test10TransferNetOfAnEmptyPortfolioIsZero stamp: 'CR 11/16/2020 17:55:58'!
PASSED!

!testRun: #ReportTest #test11TransferNetOfAPortfolioWithOneTransferWorksCorrectly stamp: 'CR 11/16/2020 17:55:58'!
PASSED!

!testRun: #ReportTest #test12TransferNetOfAPortfolioWithManyTransfersWorksCorrectly stamp: 'CR 11/16/2020 17:55:58'!
PASSED!
!ReportTest methodsFor: 'tree representation tests' stamp: 'CR 11/16/2020 17:57:09'!
test13TreeRepresentationAccountOfAnEmptyReceptiveAccountIsItsName
	| treeRepresentationOfEmptyAccount fedesEmptyAccount |
	fedesEmptyAccount := ReceptiveAccount named: 'Cuenta vacia de Fede'.
	treeRepresentationOfEmptyAccount := TreeRepresentationAccounts for: fedesEmptyAccount. 
	self assertThat: (OrderedCollection with: 'Cuenta vacia de Fede' ) isEqualTo: treeRepresentationOfEmptyAccount tree.! !

!methodRemoval: ReportTest #test13TreeRepresentationOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 17:57:09'!
test13TreeRepresentationOfAnEmptyReceptiveAccountIsItsName
	| treeRepresentationOfEmptyAccount fedesEmptyAccount |
	fedesEmptyAccount := ReceptiveAccount named: 'Cuenta vacia de Fede'.
	treeRepresentationOfEmptyAccount := TreeRepresentationAccounts for: fedesEmptyAccount. 
	self assertThat: (OrderedCollection with: 'Cuenta vacia de Fede' ) isEqualTo: treeRepresentationOfEmptyAccount tree.!
!ReportTest methodsFor: 'tree representation tests' stamp: 'CR 11/16/2020 17:57:21'!
test14TreeRepresentationAccountOfAnEmptyPortfolioIsItsName
	| treeRepresentationOfEmptyPortfolio fedesEmptyPortfolio |
	fedesEmptyPortfolio := Portfolio named: 'Portfolio vacio de Fede'.
	treeRepresentationOfEmptyPortfolio := TreeRepresentationAccounts for: fedesEmptyPortfolio. 
	self assertThat: (OrderedCollection with: 'Portfolio vacio de Fede' ) isEqualTo: treeRepresentationOfEmptyPortfolio tree.! !

!methodRemoval: ReportTest #test14TreeRepresentationOfAnEmptyPortfolioIsItsName stamp: 'CR 11/16/2020 17:57:21'!
test14TreeRepresentationOfAnEmptyPortfolioIsItsName
	| treeRepresentationOfEmptyPortfolio fedesEmptyPortfolio |
	fedesEmptyPortfolio := Portfolio named: 'Portfolio vacio de Fede'.
	treeRepresentationOfEmptyPortfolio := TreeRepresentationAccounts for: fedesEmptyPortfolio. 
	self assertThat: (OrderedCollection with: 'Portfolio vacio de Fede' ) isEqualTo: treeRepresentationOfEmptyPortfolio tree.!
!ReportTest methodsFor: 'tree representation tests' stamp: 'CR 11/16/2020 17:57:29'!
test15TreeRepresentationAccountOfPortfolioWithOneAccountWorksCorrectly
	| treeRepresentationOfPortfolioWithOneAccount fedesPortfolio |
	fedesPortfolio := Portfolio named: 'Portfolio de Fede'.
	fedesPortfolio add: (ReceptiveAccount named: 'Cuenta de Juan'). 
	treeRepresentationOfPortfolioWithOneAccount := TreeRepresentationAccounts for: fedesPortfolio. 
	self assertThat: (OrderedCollection with: 'Portfolio de Fede' with: ' Cuenta de Juan') isEqualTo: treeRepresentationOfPortfolioWithOneAccount tree.! !

!methodRemoval: ReportTest #test15TreeRepresentationOfPortfolioWithOneAccountWorksCorrectly stamp: 'CR 11/16/2020 17:57:29'!
test15TreeRepresentationOfPortfolioWithOneAccountWorksCorrectly
	| treeRepresentationOfPortfolioWithOneAccount fedesPortfolio |
	fedesPortfolio := Portfolio named: 'Portfolio de Fede'.
	fedesPortfolio add: (ReceptiveAccount named: 'Cuenta de Juan'). 
	treeRepresentationOfPortfolioWithOneAccount := TreeRepresentationAccounts for: fedesPortfolio. 
	self assertThat: (OrderedCollection with: 'Portfolio de Fede' with: ' Cuenta de Juan') isEqualTo: treeRepresentationOfPortfolioWithOneAccount tree.!
!ReportTest methodsFor: 'tree representation tests' stamp: 'CR 11/16/2020 17:57:37'!
test16TreeRepresentationAccountOfPortfolioWithManyAccountsWorksCorrectly
	| treeRepresentationOfPortfolioWithOneAccount fedesPortfolio juansPortfolio |
	fedesPortfolio := Portfolio named: 'Portfolio de Fede'.
	juansPortfolio := Portfolio named: 'Portfolio de Juan'.
	fedesPortfolio add: (ReceptiveAccount named: 'Cuenta de Fede').
	fedesPortfolio add: juansPortfolio.
	juansPortfolio add: (ReceptiveAccount named: 'Cuenta de Juan').	  
	treeRepresentationOfPortfolioWithOneAccount := TreeRepresentationAccounts for: fedesPortfolio. 
	self assertThat: (OrderedCollection with: 'Portfolio de Fede' with: ' Cuenta de Fede' with: ' Portfolio de Juan' with: '  Cuenta de Juan') isEqualTo: treeRepresentationOfPortfolioWithOneAccount tree.! !

!methodRemoval: ReportTest #test16TreeRepresentationOfPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 17:57:37'!
test16TreeRepresentationOfPortfolioWithManyAccountsWorksCorrectly
	| treeRepresentationOfPortfolioWithOneAccount fedesPortfolio juansPortfolio |
	fedesPortfolio := Portfolio named: 'Portfolio de Fede'.
	juansPortfolio := Portfolio named: 'Portfolio de Juan'.
	fedesPortfolio add: (ReceptiveAccount named: 'Cuenta de Fede').
	fedesPortfolio add: juansPortfolio.
	juansPortfolio add: (ReceptiveAccount named: 'Cuenta de Juan').	  
	treeRepresentationOfPortfolioWithOneAccount := TreeRepresentationAccounts for: fedesPortfolio. 
	self assertThat: (OrderedCollection with: 'Portfolio de Fede' with: ' Cuenta de Fede' with: ' Portfolio de Juan' with: '  Cuenta de Juan') isEqualTo: treeRepresentationOfPortfolioWithOneAccount tree.!
!ReportTest methodsFor: 'tree representation tests' stamp: 'CR 11/16/2020 17:57:58'!
test17TreeRepresentationTransactionsOfAnEmptyReceptiveAccountIsItsName
	| treeRepresentationOfEmptyAccount fedesEmptyAccount |
	fedesEmptyAccount := ReceptiveAccount named: 'Cuenta vacia de Fede'.
	treeRepresentationOfEmptyAccount := TreeRepresentationAccounts for: fedesEmptyAccount. 
	self assertThat: (OrderedCollection with: 'Cuenta vacia de Fede' ) isEqualTo: treeRepresentationOfEmptyAccount tree.! !

!testRun: #ReportTest #test17TreeRepresentationTransactionsOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 17:57:59'!
PASSED!
!ReportTest methodsFor: 'tree representation tests' stamp: 'CR 11/16/2020 17:58:12'!
test17TreeRepresentationWithTransactionsOfAnEmptyReceptiveAccountIsItsName
	| treeRepresentationOfEmptyAccount fedesEmptyAccount |
	fedesEmptyAccount := ReceptiveAccount named: 'Cuenta vacia de Fede'.
	treeRepresentationOfEmptyAccount := TreeRepresentationWithTransactions for: fedesEmptyAccount. 
	self assertThat: (OrderedCollection with: 'Cuenta vacia de Fede' ) isEqualTo: treeRepresentationOfEmptyAccount tree.! !

!methodRemoval: ReportTest #test17TreeRepresentationTransactionsOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 17:58:14'!
test17TreeRepresentationTransactionsOfAnEmptyReceptiveAccountIsItsName
	| treeRepresentationOfEmptyAccount fedesEmptyAccount |
	fedesEmptyAccount := ReceptiveAccount named: 'Cuenta vacia de Fede'.
	treeRepresentationOfEmptyAccount := TreeRepresentationAccounts for: fedesEmptyAccount. 
	self assertThat: (OrderedCollection with: 'Cuenta vacia de Fede' ) isEqualTo: treeRepresentationOfEmptyAccount tree.!

!testRun: #ReportTest #test17TreeRepresentationWithTransactionsOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 17:58:18'!
ERROR!

!testRun: #ReportTest #test17TreeRepresentationWithTransactionsOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 17:58:18'!
ERROR!

!testRun: #ReportTest #test17TreeRepresentationWithTransactionsOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 18:00:01'!
ERROR!
!TreeRepresentationWithTransactions methodsFor: 'initialization' stamp: 'CR 11/16/2020 18:01:57' prior: 50904264!
initializeFor: anAccount 
	accountToMakeReportFor := anAccount.
	stringTree := OrderedCollection new.
	collaborationAction := SummaryString new.
	! !

!testRun: #ReportTest #test13TreeRepresentationAccountOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 18:02:07'!
PASSED!

!testRun: #ReportTest #test14TreeRepresentationAccountOfAnEmptyPortfolioIsItsName stamp: 'CR 11/16/2020 18:02:07'!
PASSED!

!testRun: #ReportTest #test15TreeRepresentationAccountOfPortfolioWithOneAccountWorksCorrectly stamp: 'CR 11/16/2020 18:02:07'!
PASSED!

!testRun: #ReportTest #test16TreeRepresentationAccountOfPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 18:02:07'!
PASSED!

!testRun: #ReportTest #test17TreeRepresentationWithTransactionsOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 18:02:07'!
ERROR!

!testRun: #ReportTest #test17TreeRepresentationWithTransactionsOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 18:02:07'!
ERROR!

!testRun: #ReportTest #test17TreeRepresentationWithTransactionsOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 18:02:24'!
ERROR!

aReportToCollaborateWith collaboration!

!classRemoval: #IndentedTransactionTreeString stamp: 'CR 11/16/2020 18:05:18'!
ReportAction subclass: #IndentedTransactionTreeString
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!

!classDefinition: #TreeRepresentationWithTransactions category: 'Portfolio2' stamp: 'CR 11/16/2020 18:05:43'!
TreeRepresentation subclass: #TreeRepresentationWithTransactions
	instanceVariableNames: 'transactionCollaborationAction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!
!TreeRepresentationWithTransactions methodsFor: 'initialization' stamp: 'CR 11/16/2020 18:05:42' prior: 50905000!
initializeFor: anAccount 
	accountToMakeReportFor := anAccount.
	stringTree := OrderedCollection new.
	collaborationAction := IndentedTreeString new.
	transactionCollaborationAction := SummaryString new.
	! !
!TreeRepresentationWithTransactions methodsFor: 'nil' stamp: 'CR 11/16/2020 18:05:55'!
transactionCollaboration
	^transactionCollaborationAction ! !
!AccountTransaction methodsFor: 'report collaboration' stamp: 'CR 11/16/2020 18:06:26' prior: 50904468!
collaborateWith: aReportToCollaborateWith onLevel: aTreeLevel
	| resultOfCollaboration | 
	resultOfCollaboration := self executeCollaboration: (aReportToCollaborateWith transactionCollaboration) onLevel: aTreeLevel. 
	aReportToCollaborateWith collaborationWithAccountResult: resultOfCollaboration.! !

!testRun: #ReportTest #test07TransferNetOfAnEmptyReceptiveAccountIsEmpty stamp: 'CR 11/16/2020 18:06:32'!
PASSED!

!testRun: #ReportTest #test08TransferNetBetweenReceptiveAccountsWithOneTransferWorksCorrectly stamp: 'CR 11/16/2020 18:06:32'!
PASSED!

!testRun: #ReportTest #test09TransferNetBetweenReceptiveAccountsWithManyTransfersWorksCorrectly stamp: 'CR 11/16/2020 18:06:32'!
PASSED!

!testRun: #ReportTest #test10TransferNetOfAnEmptyPortfolioIsZero stamp: 'CR 11/16/2020 18:06:32'!
PASSED!

!testRun: #ReportTest #test11TransferNetOfAPortfolioWithOneTransferWorksCorrectly stamp: 'CR 11/16/2020 18:06:32'!
PASSED!

!testRun: #ReportTest #test12TransferNetOfAPortfolioWithManyTransfersWorksCorrectly stamp: 'CR 11/16/2020 18:06:32'!
PASSED!

!testRun: #ReportTest #test13TreeRepresentationAccountOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 18:06:35'!
PASSED!

!testRun: #ReportTest #test14TreeRepresentationAccountOfAnEmptyPortfolioIsItsName stamp: 'CR 11/16/2020 18:06:35'!
PASSED!

!testRun: #ReportTest #test15TreeRepresentationAccountOfPortfolioWithOneAccountWorksCorrectly stamp: 'CR 11/16/2020 18:06:35'!
PASSED!

!testRun: #ReportTest #test16TreeRepresentationAccountOfPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 18:06:35'!
PASSED!

!testRun: #ReportTest #test17TreeRepresentationWithTransactionsOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 18:06:35'!
PASSED!
!ReportTest methodsFor: 'tree representation tests' stamp: 'CR 11/16/2020 18:07:25'!
test18TreeRepresentationWithTransactionsOfAnEmptyPortfolioIsItsName
	| treeRepresentationOfEmptyPortfolio fedesEmptyPortfolio |
	fedesEmptyPortfolio := Portfolio named: 'Portfolio vacio de Fede'.
	treeRepresentationOfEmptyPortfolio := TreeRepresentationAccounts for: fedesEmptyPortfolio. 
	self assertThat: (OrderedCollection with: 'Portfolio vacio de Fede' ) isEqualTo: treeRepresentationOfEmptyPortfolio tree.! !
!TreeRepresentationWithTransactions methodsFor: 'collaboration' stamp: 'CR 11/16/2020 18:13:43' prior: 50904175!
transactionCollaboration: aReceptiveAccount onLevel: aTreeLevel
	stringTree add: ('Balance = ', aReceptiveAccount balance asString).
	aReceptiveAccount transactionCollaborationWith:  self onLevel: aTreeLevel.! !
!TreeRepresentationWithTransactions methodsFor: 'collaboration' stamp: 'CR 11/16/2020 18:13:59'!
reportBalance: aReceptiveAccount

	^ stringTree add: ('Balance = ', aReceptiveAccount balance asString)! !
!TreeRepresentationWithTransactions methodsFor: 'collaboration' stamp: 'CR 11/16/2020 18:13:59' prior: 50905146!
transactionCollaboration: aReceptiveAccount onLevel: aTreeLevel
	self reportBalance: aReceptiveAccount.
	aReceptiveAccount transactionCollaborationWith:  self onLevel: aTreeLevel.! !
!ReportTest methodsFor: 'tree representation tests' stamp: 'CR 11/16/2020 18:14:36' prior: 50904953!
test17TreeRepresentationWithTransactionsOfAnEmptyReceptiveAccountIsItsName
	| treeRepresentationOfEmptyAccount fedesEmptyAccount |
	fedesEmptyAccount := ReceptiveAccount named: 'Cuenta vacia de Fede'.
	treeRepresentationOfEmptyAccount := TreeRepresentationWithTransactions for: fedesEmptyAccount. 
	self assertThat: (OrderedCollection with: 'Cuenta vacia de Fede' with: 'Balance = 0') isEqualTo: treeRepresentationOfEmptyAccount tree.! !

!testRun: #ReportTest #test17TreeRepresentationWithTransactionsOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 18:14:39'!
PASSED!
!ReportTest methodsFor: 'tree representation tests' stamp: 'CR 11/16/2020 18:14:58' prior: 50905129!
test18TreeRepresentationWithTransactionsOfAnEmptyPortfolioIsItsName
	| treeRepresentationOfEmptyPortfolio fedesEmptyPortfolio |
	fedesEmptyPortfolio := Portfolio named: 'Portfolio vacio de Fede'.
	treeRepresentationOfEmptyPortfolio := TreeRepresentationAccounts for: fedesEmptyPortfolio. 
	self assertThat: (OrderedCollection with: 'Portfolio vacio de Fede' with: 'Balance = 0') isEqualTo: treeRepresentationOfEmptyPortfolio tree.! !

!testRun: #ReportTest #test18TreeRepresentationWithTransactionsOfAnEmptyPortfolioIsItsName stamp: 'CR 11/16/2020 18:15:01'!
FAILURE!

!testRun: #ReportTest #test18TreeRepresentationWithTransactionsOfAnEmptyPortfolioIsItsName stamp: 'CR 11/16/2020 18:15:01'!
FAILURE!

!methodRemoval: TreeRepresentationWithTransactions #collaboratingAccount:onLevel: stamp: 'CR 11/16/2020 18:17:02'!
collaboratingAccount: account onLevel: aTreeLevel
	!
!TreeRepresentationWithTransactions methodsFor: 'collaboration' stamp: 'CR 11/16/2020 18:17:10' prior: 50905163!
transactionCollaboration: aReceptiveAccount onLevel: aTreeLevel
	aReceptiveAccount transactionCollaborationWith:  self onLevel: aTreeLevel.! !
!IndentedTreeString methodsFor: 'transaction collaboration' stamp: 'CR 11/16/2020 18:20:19' prior: 50902776!
collaboratingPortfolio: aPortfolio onLevel: anIndentationLevel
	^ self indentWithSpaces: anIndentationLevel andConcatenateName: aPortfolio name.! !
!Portfolio methodsFor: 'report collaboration' stamp: 'CR 11/16/2020 18:22:58' prior: 50902666!
collaborateWithTreeLevel: aReportToCollaborateWith of: aTreeLevel
	
	self collaborateWith: aReportToCollaborateWith onLevel: aTreeLevel.
	accounts do: [:anAccount | anAccount collaborateWithTreeLevel: aReportToCollaborateWith  of: aTreeLevel + 1].
	self collaborateWithBalance: aReportToCollaborateWith onLevel: aTreeLevel.
	! !
!ReceptiveAccount methodsFor: 'report collaboration' stamp: 'CR 11/16/2020 18:23:16' prior: 50904080!
collaborateWithTreeLevel: aReportToCollaborateWith of: aTreeLevel
	self collaborateWith: aReportToCollaborateWith onLevel: aTreeLevel.
	aReportToCollaborateWith transactionCollaboration: self onLevel: aTreeLevel.
	self collaborateWithBalance: aReportToCollaborateWith onLevel: aTreeLevel.! !
!Account methodsFor: 'nil' stamp: 'CR 11/16/2020 18:23:34'!
collaborateWithBalance: aReportToCollaborateWith onLevel: aTreeLevel
	! !
!Account methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 18:23:41' prior: 50905266!
collaborateWithBalance: aReportToCollaborateWith onLevel: aTreeLevel
	! !
!Account methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 18:24:24' prior: 50905272!
collaborateWithBalance: aReportToCollaborateWith onLevel: aTreeLevel
	aReportToCollaborateWith addBalance: self balance onLevel: aTreeLevel.! !
!TreeRepresentation methodsFor: 'nil' stamp: 'CR 11/16/2020 18:24:58'!
addBalance: aBalanceToReport onLevel: aTreeLevel
	! !
!TreeRepresentation methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 18:25:12' prior: 50905285!
addBalance: aBalanceToReport onLevel: aTreeLevel
	! !
!TreeRepresentation methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 18:25:39' prior: 50905290!
addBalance: aBalanceToReport onLevel: aTreeLevel
	collaborationAction.! !
!TreeRepresentation methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 18:29:33' prior: 50905295!
addBalance: aBalanceToReport onLevel: aTreeLevel
	| balanceReport |
	balanceReport := collaborationAction useIndentOn: aBalanceToReport asString onLevel: aTreeLevel.! !
!TreeRepresentation methodsFor: 'as yet unclassified' stamp: 'CR 11/16/2020 18:29:56' prior: 50905301!
addBalance: aBalanceToReport onLevel: aTreeLevel
	| balanceReport |
	balanceReport := collaborationAction useIndentOn: aBalanceToReport asString onLevel: aTreeLevel.
	stringTree add: balanceReport.! !

!methodRemoval: TreeRepresentation #addBalance:onLevel: stamp: 'CR 11/16/2020 18:30:03'!
addBalance: aBalanceToReport onLevel: aTreeLevel
	| balanceReport |
	balanceReport := collaborationAction useIndentOn: aBalanceToReport asString onLevel: aTreeLevel.
	stringTree add: balanceReport.!
!TreeRepresentationWithTransactions methodsFor: 'nil' stamp: 'CR 11/16/2020 18:30:12'!
addBalance: aBalanceToReport onLevel: aTreeLevel
	| balanceReport |
	balanceReport := collaborationAction useIndentOn: aBalanceToReport asString onLevel: aTreeLevel.
	stringTree add: balanceReport.! !

!methodRemoval: TreeRepresentationWithTransactions #reportBalance: stamp: 'CR 11/16/2020 18:30:40'!
reportBalance: aReceptiveAccount

	^ stringTree add: ('Balance = ', aReceptiveAccount balance asString)!

!testRun: #ReportTest #test01AccountSummaryOfAnEmptyReceptiveAccountIsEmpty stamp: 'CR 11/16/2020 18:31:50'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryOfAReceptiveAccountWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 18:31:50'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryOfAReceptiveAccountWithManyTransactionsWorksCorrectly stamp: 'CR 11/16/2020 18:31:50'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/16/2020 18:31:50'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryOfAPortfolioWithOneAccountWorksCorrectly stamp: 'CR 11/16/2020 18:31:50'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryOfAPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 18:31:50'!
PASSED!

!testRun: #ReportTest #test13TreeRepresentationAccountOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 18:31:52'!
ERROR!

!testRun: #ReportTest #test14TreeRepresentationAccountOfAnEmptyPortfolioIsItsName stamp: 'CR 11/16/2020 18:31:52'!
ERROR!

!testRun: #ReportTest #test15TreeRepresentationAccountOfPortfolioWithOneAccountWorksCorrectly stamp: 'CR 11/16/2020 18:31:52'!
ERROR!

!testRun: #ReportTest #test16TreeRepresentationAccountOfPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 18:31:52'!
ERROR!

!testRun: #ReportTest #test17TreeRepresentationWithTransactionsOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 18:31:52'!
ERROR!

!testRun: #ReportTest #test18TreeRepresentationWithTransactionsOfAnEmptyPortfolioIsItsName stamp: 'CR 11/16/2020 18:31:52'!
ERROR!

!testRun: #ReportTest #test13TreeRepresentationAccountOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 18:31:55'!
ERROR!
!TreeRepresentationAccounts methodsFor: 'collaboration' stamp: 'CR 11/16/2020 18:32:36'!
addBalance: aBalanceToReport onLevel: aTreeLevel! !

!testRun: #ReportTest #test13TreeRepresentationAccountOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 18:32:41'!
PASSED!

!testRun: #ReportTest #test14TreeRepresentationAccountOfAnEmptyPortfolioIsItsName stamp: 'CR 11/16/2020 18:32:41'!
PASSED!

!testRun: #ReportTest #test15TreeRepresentationAccountOfPortfolioWithOneAccountWorksCorrectly stamp: 'CR 11/16/2020 18:32:41'!
PASSED!

!testRun: #ReportTest #test16TreeRepresentationAccountOfPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 18:32:41'!
PASSED!

!testRun: #ReportTest #test17TreeRepresentationWithTransactionsOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 18:32:41'!
ERROR!

!testRun: #ReportTest #test18TreeRepresentationWithTransactionsOfAnEmptyPortfolioIsItsName stamp: 'CR 11/16/2020 18:32:41'!
FAILURE!

!testRun: #ReportTest #test17TreeRepresentationWithTransactionsOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 18:32:48'!
ERROR!

!testRun: #ReportTest #test17TreeRepresentationWithTransactionsOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 18:32:48'!
ERROR!
!TreeRepresentationWithTransactions methodsFor: 'collaboration' stamp: 'CR 11/16/2020 18:35:02' prior: 50905329!
addBalance: aBalanceToReport onLevel: anIdentationLevel
	| balanceReport |
	balanceReport := collaborationAction indentWithSpaces: anIdentationLevel andConcatenateName: 'Balance = ', aBalanceToReport asString.
	stringTree add: balanceReport.! !

!testRun: #ReportTest #test13TreeRepresentationAccountOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 18:35:35'!
PASSED!

!testRun: #ReportTest #test14TreeRepresentationAccountOfAnEmptyPortfolioIsItsName stamp: 'CR 11/16/2020 18:35:35'!
PASSED!

!testRun: #ReportTest #test15TreeRepresentationAccountOfPortfolioWithOneAccountWorksCorrectly stamp: 'CR 11/16/2020 18:35:35'!
PASSED!

!testRun: #ReportTest #test16TreeRepresentationAccountOfPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 18:35:35'!
PASSED!

!testRun: #ReportTest #test17TreeRepresentationWithTransactionsOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 18:35:35'!
PASSED!

!testRun: #ReportTest #test18TreeRepresentationWithTransactionsOfAnEmptyPortfolioIsItsName stamp: 'CR 11/16/2020 18:35:35'!
FAILURE!

!testRun: #ReportTest #test18TreeRepresentationWithTransactionsOfAnEmptyPortfolioIsItsName stamp: 'CR 11/16/2020 18:35:35'!
FAILURE!

!testRun: #ReportTest #test18TreeRepresentationWithTransactionsOfAnEmptyPortfolioIsItsName stamp: 'CR 11/16/2020 18:35:39'!
FAILURE!

!testRun: #ReportTest #test18TreeRepresentationWithTransactionsOfAnEmptyPortfolioIsItsName stamp: 'CR 11/16/2020 18:35:39'!
FAILURE!

treeRepresentationOfEmptyPortfolio tree!
!ReportTest methodsFor: 'tree representation tests' stamp: 'CR 11/16/2020 18:37:01' prior: 50905194!
test18TreeRepresentationWithTransactionsOfAnEmptyPortfolioIsItsName
	| treeRepresentationOfEmptyPortfolio fedesEmptyPortfolio |
	fedesEmptyPortfolio := Portfolio named: 'Portfolio vacio de Fede'.
	treeRepresentationOfEmptyPortfolio := TreeRepresentationWithTransactions for: fedesEmptyPortfolio. 
	self assertThat: (OrderedCollection with: 'Portfolio vacio de Fede' with: 'Balance = 0') isEqualTo: treeRepresentationOfEmptyPortfolio tree.! !

!testRun: #ReportTest #test18TreeRepresentationWithTransactionsOfAnEmptyPortfolioIsItsName stamp: 'CR 11/16/2020 18:37:03'!
PASSED!
!ReportTest methodsFor: 'tree representation tests' stamp: 'CR 11/16/2020 18:38:07'!
test19TreeRepresentationWithTransactionsOfPortfolioWithOneTransactionWorksCorrectly
	| treeRepresentationOfEmptyPortfolio fedesPortfolio |
	fedesPortfolio := Portfolio named: 'Portfolio vacio de Fede'.
	treeRepresentationOfEmptyPortfolio := TreeRepresentationWithTransactions for: fedesPortfolio. 
	self assertThat: (OrderedCollection with: 'Portfolio vacio de Fede' with: 'Balance = 0') isEqualTo: treeRepresentationOfEmptyPortfolio tree.! !
!ReportTest methodsFor: 'tree representation tests' stamp: 'CR 11/16/2020 18:40:05' prior: 50905508!
test19TreeRepresentationWithTransactionsOfPortfolioWithOneTransactionWorksCorrectly
	| treeRepresentationOfPortfolio fedesPortfolio fedesAccount |
	fedesPortfolio := Portfolio named: 'Portfolio de fede'.
	fedesAccount := ReceptiveAccount named: 'Cuenta de fede'.
	fedesAccount register: 40.
	fedesPortfolio add: (ReceptiveAccount named: 'Cuenta de fede').
	
	treeRepresentationOfPortfolio := TreeRepresentationWithTransactions for: fedesPortfolio. 
	self assertThat: (OrderedCollection with: 'Portfolio de Fede' with: 'Balance = 0') isEqualTo: treeRepresentationOfPortfolio tree.! !
!ReportTest methodsFor: 'tree representation tests' stamp: 'CR 11/16/2020 18:40:41' prior: 50905525!
test19TreeRepresentationWithTransactionsOfPortfolioWithOneTransactionWorksCorrectly
	| treeRepresentationOfPortfolio fedesPortfolio fedesAccount |
	fedesPortfolio := Portfolio named: 'Portfolio de fede'.
	fedesAccount := ReceptiveAccount named: 'Cuenta de fede'.
	Deposit of: 100 on: fedesAccount.
	fedesPortfolio add: (ReceptiveAccount named: 'Cuenta de fede').
	
	treeRepresentationOfPortfolio := TreeRepresentationWithTransactions for: fedesPortfolio. 
	self assertThat: (OrderedCollection with: 'Portfolio de Fede' with: 'Balance = 0') isEqualTo: treeRepresentationOfPortfolio tree.! !
!ReportTest methodsFor: 'tree representation tests' stamp: 'CR 11/16/2020 18:41:45' prior: 50905547!
test19TreeRepresentationWithTransactionsOfPortfolioWithOneTransactionWorksCorrectly
	| treeRepresentationOfPortfolio fedesPortfolio fedesAccount |
	fedesPortfolio := Portfolio named: 'Portfolio de fede'.
	fedesAccount := ReceptiveAccount named: 'Cuenta de fede'.
	Deposit register: 100 on: fedesAccount.
	fedesPortfolio add: fedesAccount.
	treeRepresentationOfPortfolio := TreeRepresentationWithTransactions for: fedesPortfolio. 
	self assertThat: (OrderedCollection with: 'Portfolio de Fede' with: 'Balance = 100' with: ' Cuenta de fede' with: ' Balance = 100') isEqualTo: treeRepresentationOfPortfolio tree.! !

!testRun: #ReportTest #test19TreeRepresentationWithTransactionsOfPortfolioWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 18:41:52'!
FAILURE!

!testRun: #ReportTest #test19TreeRepresentationWithTransactionsOfPortfolioWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 18:41:52'!
FAILURE!
!ReportTest methodsFor: 'tree representation tests' stamp: 'CR 11/16/2020 18:42:26' prior: 50905569!
test19TreeRepresentationWithTransactionsOfPortfolioWithOneTransactionWorksCorrectly
	| treeRepresentationOfPortfolio fedesPortfolio fedesAccount |
	fedesPortfolio := Portfolio named: 'Portfolio de fede'.
	fedesAccount := ReceptiveAccount named: 'Cuenta de fede'.
	Deposit register: 100 on: fedesAccount.
	fedesPortfolio add: fedesAccount.
	treeRepresentationOfPortfolio := TreeRepresentationWithTransactions for: fedesPortfolio. 
	self assertThat: (OrderedCollection with: 'Portfolio de Fede' with: 'Balance = 100' with: ' Cuenta de fede' with: ' Dep�sito por 100'with: ' Balance = 100') isEqualTo: treeRepresentationOfPortfolio tree.! !
!ReportTest methodsFor: 'tree representation tests' stamp: 'CR 11/16/2020 18:42:28' prior: 50905601!
test19TreeRepresentationWithTransactionsOfPortfolioWithOneTransactionWorksCorrectly
	| treeRepresentationOfPortfolio fedesPortfolio fedesAccount |
	fedesPortfolio := Portfolio named: 'Portfolio de fede'.
	fedesAccount := ReceptiveAccount named: 'Cuenta de fede'.
	Deposit register: 100 on: fedesAccount.
	fedesPortfolio add: fedesAccount.
	treeRepresentationOfPortfolio := TreeRepresentationWithTransactions for: fedesPortfolio. 
	self assertThat: (OrderedCollection with: 'Portfolio de Fede' with: 'Balance = 100' with: ' Cuenta de fede' with: ' Dep�sito por 100' with: ' Balance = 100') isEqualTo: treeRepresentationOfPortfolio tree.! !

!testRun: #ReportTest #test19TreeRepresentationWithTransactionsOfPortfolioWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 18:42:38'!
FAILURE!

!testRun: #ReportTest #test19TreeRepresentationWithTransactionsOfPortfolioWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 18:42:38'!
FAILURE!

treeRepresentationOfPortfolio tree!

aReceptiveAccount name!

(aDeposit value) asString!

self useIndentOn: (self collaboratingDeposit: aDeposit) onLevel: anIndentationLevel.!

self collaboratingDeposit: aDeposit!
!SummaryString methodsFor: 'transaction collaboration' stamp: 'CR 11/16/2020 18:47:35' prior: 50904622!
useIndentOn: aName onLevel: anIndentationLevel
	| indentCollaborator |
	indentCollaborator := IndentedTreeString new.
	^ indentCollaborator indentWithSpaces: anIndentationLevel  andConcatenateName: aName.
	
	
	! !

!testRun: #ReportTest #test13TreeRepresentationAccountOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 18:47:40'!
PASSED!

!testRun: #ReportTest #test14TreeRepresentationAccountOfAnEmptyPortfolioIsItsName stamp: 'CR 11/16/2020 18:47:40'!
PASSED!

!testRun: #ReportTest #test15TreeRepresentationAccountOfPortfolioWithOneAccountWorksCorrectly stamp: 'CR 11/16/2020 18:47:40'!
PASSED!

!testRun: #ReportTest #test16TreeRepresentationAccountOfPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 18:47:40'!
PASSED!

!testRun: #ReportTest #test17TreeRepresentationWithTransactionsOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 18:47:40'!
PASSED!

!testRun: #ReportTest #test18TreeRepresentationWithTransactionsOfAnEmptyPortfolioIsItsName stamp: 'CR 11/16/2020 18:47:40'!
PASSED!

!testRun: #ReportTest #test19TreeRepresentationWithTransactionsOfPortfolioWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 18:47:40'!
FAILURE!

!testRun: #ReportTest #test19TreeRepresentationWithTransactionsOfPortfolioWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 18:47:40'!
FAILURE!

treeRepresentationOfPortfolio tree!

aTreeLevel + 1!

self executeCollaboration: (aReportToCollaborateWith transactionCollaboration) onLevel: aTreeLevel. !
!ReportTest methodsFor: 'tree representation tests' stamp: 'CR 11/16/2020 18:52:22' prior: 50905625!
test19TreeRepresentationWithTransactionsOfPortfolioWithOneTransactionWorksCorrectly
	| treeRepresentationOfPortfolio fedesPortfolio fedesAccount |
	fedesPortfolio := Portfolio named: 'Portfolio de fede'.
	fedesAccount := ReceptiveAccount named: 'Cuenta de fede'.
	Deposit register: 100 on: fedesAccount.
	fedesPortfolio add: fedesAccount.
	treeRepresentationOfPortfolio := TreeRepresentationWithTransactions for: fedesPortfolio. 
	self assertThat: (OrderedCollection with: 'Portfolio de Fede' with: 'Balance = 100' with: ' Cuenta de fede' with: '  Dep�sito por 100' with: ' Balance = 100') isEqualTo: treeRepresentationOfPortfolio tree.! !

!testRun: #ReportTest #test19TreeRepresentationWithTransactionsOfPortfolioWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 18:52:26'!
FAILURE!

!testRun: #ReportTest #test19TreeRepresentationWithTransactionsOfPortfolioWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 18:52:26'!
FAILURE!

treeRepresentationOfPortfolio tree!
!ReportTest methodsFor: 'tree representation tests' stamp: 'CR 11/16/2020 18:53:38' prior: 50905715!
test19TreeRepresentationWithTransactionsOfPortfolioWithOneTransactionWorksCorrectly
	| treeRepresentationOfPortfolio fedesPortfolio fedesAccount |
	fedesPortfolio := Portfolio named: 'Portfolio de fede'.
	fedesAccount := ReceptiveAccount named: 'Cuenta de fede'.
	Deposit register: 100 on: fedesAccount.
	fedesPortfolio add: fedesAccount.
	treeRepresentationOfPortfolio := TreeRepresentationWithTransactions for: fedesPortfolio. 
	self assertThat: (OrderedCollection with: 'Portfolio de Fede' with: 'Balance = 100' with: ' Cuenta de fede' with: 
	'  Dep�sito por 100' with: ' Balance = 100') isEqualTo: treeRepresentationOfPortfolio tree.! !

!testRun: #ReportTest #test19TreeRepresentationWithTransactionsOfPortfolioWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 18:53:57'!
FAILURE!

!testRun: #ReportTest #test19TreeRepresentationWithTransactionsOfPortfolioWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 18:53:57'!
FAILURE!
!ReportTest methodsFor: 'tree representation tests' stamp: 'CR 11/16/2020 18:54:42' prior: 50905749!
test19TreeRepresentationWithTransactionsOfPortfolioWithOneTransactionWorksCorrectly
	| treeRepresentationOfPortfolio fedesPortfolio fedesAccount |
	fedesPortfolio := Portfolio named: 'Portfolio de fede'.
	fedesAccount := ReceptiveAccount named: 'Cuenta de fede'.
	Deposit register: 100 on: fedesAccount.
	fedesPortfolio add: fedesAccount.
	treeRepresentationOfPortfolio := TreeRepresentationWithTransactions for: fedesPortfolio. 
	self assertThat: (OrderedCollection with: 'Portfolio de fede' with: 'Balance = 100' with: ' Cuenta de fede' with: 
	'  Dep�sito por 100' with: ' Balance = 100') isEqualTo: treeRepresentationOfPortfolio tree.! !

!testRun: #ReportTest #test19TreeRepresentationWithTransactionsOfPortfolioWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 18:54:43'!
PASSED!
!ReportTest methodsFor: 'tree representation tests' stamp: 'CR 11/16/2020 18:54:54'!
test20TreeRepresentationWithTransactionsOfPortfolioWithManyTransactionsWorksCorrectly
	| treeRepresentationOfPortfolio fedesPortfolio fedesAccount |
	fedesPortfolio := Portfolio named: 'Portfolio de fede'.
	fedesAccount := ReceptiveAccount named: 'Cuenta de fede'.
	Deposit register: 100 on: fedesAccount.
	fedesPortfolio add: fedesAccount.
	treeRepresentationOfPortfolio := TreeRepresentationWithTransactions for: fedesPortfolio. 
	self assertThat: (OrderedCollection with: 'Portfolio de fede' with: 'Balance = 100' with: ' Cuenta de fede' with: 
	'  Dep�sito por 100' with: ' Balance = 100') isEqualTo: treeRepresentationOfPortfolio tree.! !

!classDefinition: #ReportTest category: 'Portfolio2' stamp: 'CR 11/16/2020 19:01:06'!
TestCase subclass: #ReportTest
	instanceVariableNames: 'accountWithDepositOf100 accountWithDepositOf200 emptyAccount emptyAccountSummary accountSummaryWithOnlyDepositOf100 accountWithManyTransactions accountSummaryManyTransactions accountWithTwoTransfers emptyPortfolio simplePortfolio composedPortfolio accountSummaryOfComposedPortfolio accountWithOneTransferDeposit accountWithOneTransferWithdraw transferNetOfAccountWithOneTransferDeposit transferNetOfAccountWithOneTransferWithdraw simplePortfolioWithOneTransfer composedPortfolioWithManyTransfers accountSummaryOfSimplePortfolio fedesTreeRepresentation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2'!
!ReportTest methodsFor: 'tree representation tests' stamp: 'CR 11/16/2020 19:01:33' prior: 50905810!
test20TreeRepresentationWithTransactionsOfPortfolioWithManyTransactionsWorksCorrectly
	| treeRepresentationOfPortfolioWithManyTransactions fedesPortfolio fedesAccount juansAccount juansPortfolio treeRepresentationOfPortfolio |
	fedesPortfolio := Portfolio named: 'Portfolio de fede'.
	juansPortfolio := Portfolio named: 'Portfolio de juan'.
	fedesAccount := ReceptiveAccount named: 'Cuenta de fede'.
	juansAccount := ReceptiveAccount named: 'Cuenta de juan'.
	Deposit register: 100 on: fedesAccount.
	Withdraw register: 50 on: juansAccount.
	fedesPortfolio add: fedesAccount.
	juansPortfolio add: juansAccount.
	fedesPortfolio add: juansPortfolio. 
	treeRepresentationOfPortfolioWithManyTransactions := TreeRepresentationWithTransactions for: fedesPortfolio. 
	self assertThat: fedesTreeRepresentation isEqualTo: treeRepresentationOfPortfolioWithManyTransactions tree.! !
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 19:02:48' prior: 50903748 overrides: 16927572!
setUp
	emptyPortfolio := Portfolio new.
	emptyAccountSummary := OrderedCollection with: 'Balance = 0'.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	accountWithManyTransactions := ReceptiveAccount new.
	accountWithTwoTransfers := ReceptiveAccount new.
	accountWithOneTransferDeposit := ReceptiveAccount new.
	accountWithOneTransferWithdraw := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	simplePortfolio := Portfolio with: accountWithDepositOf100.
	simplePortfolioWithOneTransfer := Portfolio with: accountWithOneTransferDeposit.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolioWithManyTransfers := Portfolio with: simplePortfolioWithOneTransfer.
	composedPortfolioWithManyTransfers add: accountWithManyTransactions.
	composedPortfolio add: accountWithDepositOf200.
	
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	Deposit register: 300 on: accountWithManyTransactions.
	Withdraw register: 50 on: accountWithManyTransactions.
	Transfer register: 75 from: accountWithManyTransactions to: accountWithTwoTransfers.
	Transfer register: 40 from: accountWithTwoTransfers to: accountWithManyTransactions.
	Transfer register: 50 from: accountWithOneTransferWithdraw to: accountWithOneTransferDeposit.
	
	accountSummaryWithOnlyDepositOf100 := OrderedCollection with: 'Dep�sito por 100' with: 'Balance = 100'.
	accountSummaryOfSimplePortfolio := OrderedCollection with: 'Dep�sito por 100' with: 'Balance = 100' with: 'Balance = 100'.
	accountSummaryManyTransactions := OrderedCollection with: 'Dep�sito por 300' with: 'Extracci�n por 50' with: 'Salida por transferencia de 75' with: 'Entrada por transferencia de 40' with: ('Balance = ', accountWithManyTransactions balance asString).
	accountSummaryOfComposedPortfolio := OrderedCollection with: 'Dep�sito por 100' with: 'Dep�sito por 200' with: 'Balance = 300' with: 'Balance = 100' with: 'Balance = 200' with: 'Balance = 100'.
	
	transferNetOfAccountWithOneTransferDeposit := OrderedCollection with: 'Entrada por transferencia de 50'.
	transferNetOfAccountWithOneTransferWithdraw := OrderedCollection with: 'Entrada por transferencia de 50'.
	
	fedesTreeRepresentation := (OrderedCollection with: 'Portfolio de fede' with: 'Balance = 50' with: ' Cuenta de fede' with: '  Dep�sito por 100' with: ' Balance = 100' with: ' Portfolio de juan' ) add: '  Cuenta de juan'.
	((fedesTreeRepresentation add: ' Balance = -50') add: '   Extracci�n por 50' ) add: '  Balance = -50'.
	! !
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 19:05:08' prior: 50905889 overrides: 16927572!
setUp
	emptyPortfolio := Portfolio new.
	emptyAccountSummary := OrderedCollection with: 'Balance = 0'.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	accountWithManyTransactions := ReceptiveAccount new.
	accountWithTwoTransfers := ReceptiveAccount new.
	accountWithOneTransferDeposit := ReceptiveAccount new.
	accountWithOneTransferWithdraw := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	simplePortfolio := Portfolio with: accountWithDepositOf100.
	simplePortfolioWithOneTransfer := Portfolio with: accountWithOneTransferDeposit.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolioWithManyTransfers := Portfolio with: simplePortfolioWithOneTransfer.
	composedPortfolioWithManyTransfers add: accountWithManyTransactions.
	composedPortfolio add: accountWithDepositOf200.
	
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	Deposit register: 300 on: accountWithManyTransactions.
	Withdraw register: 50 on: accountWithManyTransactions.
	Transfer register: 75 from: accountWithManyTransactions to: accountWithTwoTransfers.
	Transfer register: 40 from: accountWithTwoTransfers to: accountWithManyTransactions.
	Transfer register: 50 from: accountWithOneTransferWithdraw to: accountWithOneTransferDeposit.
	
	accountSummaryWithOnlyDepositOf100 := OrderedCollection with: 'Dep�sito por 100' with: 'Balance = 100'.
	accountSummaryOfSimplePortfolio := OrderedCollection with: 'Dep�sito por 100' with: 'Balance = 100' with: 'Balance = 100'.
	accountSummaryManyTransactions := OrderedCollection with: 'Dep�sito por 300' with: 'Extracci�n por 50' with: 'Salida por transferencia de 75' with: 'Entrada por transferencia de 40' with: ('Balance = ', accountWithManyTransactions balance asString).
	accountSummaryOfComposedPortfolio := OrderedCollection with: 'Dep�sito por 100' with: 'Dep�sito por 200' with: 'Balance = 300' with: 'Balance = 100' with: 'Balance = 200' with: 'Balance = 100'.
	
	transferNetOfAccountWithOneTransferDeposit := OrderedCollection with: 'Entrada por transferencia de 50'.
	transferNetOfAccountWithOneTransferWithdraw := OrderedCollection with: 'Entrada por transferencia de 50'.
	
	fedesTreeRepresentation := (OrderedCollection with: 'Portfolio de fede' with: 'Balance = 50' with: ' Cuenta de fede' with: '  Dep�sito por 100' with: ' Balance = 100' with: ' Portfolio de juan' ) add: '  Cuenta de juan'.
	fedesTreeRepresentation add: ' Balance = -50'.
	fedesTreeRepresentation add: '   Extracci�n por 50'.
	fedesTreeRepresentation add: '  Balance = -50'.
	! !
!ReportTest methodsFor: 'setup' stamp: 'CR 11/16/2020 19:05:37' prior: 50905973 overrides: 16927572!
setUp
	emptyPortfolio := Portfolio new.
	emptyAccountSummary := OrderedCollection with: 'Balance = 0'.
	accountWithDepositOf100 := ReceptiveAccount new.
	accountWithDepositOf200 := ReceptiveAccount new.
	accountWithManyTransactions := ReceptiveAccount new.
	accountWithTwoTransfers := ReceptiveAccount new.
	accountWithOneTransferDeposit := ReceptiveAccount new.
	accountWithOneTransferWithdraw := ReceptiveAccount new.
	emptyAccount := ReceptiveAccount new.
	simplePortfolio := Portfolio with: accountWithDepositOf100.
	simplePortfolioWithOneTransfer := Portfolio with: accountWithOneTransferDeposit.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolioWithManyTransfers := Portfolio with: simplePortfolioWithOneTransfer.
	composedPortfolioWithManyTransfers add: accountWithManyTransactions.
	composedPortfolio add: accountWithDepositOf200.
	
	Deposit register: 100 on: accountWithDepositOf100.
	Deposit register: 200 on: accountWithDepositOf200.
	Deposit register: 300 on: accountWithManyTransactions.
	Withdraw register: 50 on: accountWithManyTransactions.
	Transfer register: 75 from: accountWithManyTransactions to: accountWithTwoTransfers.
	Transfer register: 40 from: accountWithTwoTransfers to: accountWithManyTransactions.
	Transfer register: 50 from: accountWithOneTransferWithdraw to: accountWithOneTransferDeposit.
	
	accountSummaryWithOnlyDepositOf100 := OrderedCollection with: 'Dep�sito por 100' with: 'Balance = 100'.
	accountSummaryOfSimplePortfolio := OrderedCollection with: 'Dep�sito por 100' with: 'Balance = 100' with: 'Balance = 100'.
	accountSummaryManyTransactions := OrderedCollection with: 'Dep�sito por 300' with: 'Extracci�n por 50' with: 'Salida por transferencia de 75' with: 'Entrada por transferencia de 40' with: ('Balance = ', accountWithManyTransactions balance asString).
	accountSummaryOfComposedPortfolio := OrderedCollection with: 'Dep�sito por 100' with: 'Dep�sito por 200' with: 'Balance = 300' with: 'Balance = 100' with: 'Balance = 200' with: 'Balance = 100'.
	
	transferNetOfAccountWithOneTransferDeposit := OrderedCollection with: 'Entrada por transferencia de 50'.
	transferNetOfAccountWithOneTransferWithdraw := OrderedCollection with: 'Entrada por transferencia de 50'.
	
	fedesTreeRepresentation := (OrderedCollection with: 'Portfolio de fede' with: 'Balance = 50' with: ' Cuenta de fede' with: '  Dep�sito por 100' with: ' Balance = 100' with: ' Portfolio de juan' ).
 	fedesTreeRepresentation add: '  Cuenta de juan'.
	fedesTreeRepresentation add: ' Balance = -50'.
	fedesTreeRepresentation add: '   Extracci�n por 50'.
	fedesTreeRepresentation add: '  Balance = -50'.
	! !

!testRun: #ReportTest #test01AccountSummaryOfAnEmptyReceptiveAccountIsEmpty stamp: 'CR 11/16/2020 19:05:50'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryOfAReceptiveAccountWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 19:05:50'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryOfAReceptiveAccountWithManyTransactionsWorksCorrectly stamp: 'CR 11/16/2020 19:05:50'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/16/2020 19:05:50'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryOfAPortfolioWithOneAccountWorksCorrectly stamp: 'CR 11/16/2020 19:05:50'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryOfAPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 19:05:50'!
PASSED!

!testRun: #ReportTest #test13TreeRepresentationAccountOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 19:05:52'!
PASSED!

!testRun: #ReportTest #test14TreeRepresentationAccountOfAnEmptyPortfolioIsItsName stamp: 'CR 11/16/2020 19:05:52'!
PASSED!

!testRun: #ReportTest #test15TreeRepresentationAccountOfPortfolioWithOneAccountWorksCorrectly stamp: 'CR 11/16/2020 19:05:52'!
PASSED!

!testRun: #ReportTest #test16TreeRepresentationAccountOfPortfolioWithManyAccountsWorksCorrectly stamp: 'CR 11/16/2020 19:05:52'!
PASSED!

!testRun: #ReportTest #test17TreeRepresentationWithTransactionsOfAnEmptyReceptiveAccountIsItsName stamp: 'CR 11/16/2020 19:05:52'!
PASSED!

!testRun: #ReportTest #test18TreeRepresentationWithTransactionsOfAnEmptyPortfolioIsItsName stamp: 'CR 11/16/2020 19:05:52'!
PASSED!

!testRun: #ReportTest #test19TreeRepresentationWithTransactionsOfPortfolioWithOneTransactionWorksCorrectly stamp: 'CR 11/16/2020 19:05:52'!
PASSED!

!testRun: #ReportTest #test20TreeRepresentationWithTransactionsOfPortfolioWithManyTransactionsWorksCorrectly stamp: 'CR 11/16/2020 19:05:52'!
PASSED!