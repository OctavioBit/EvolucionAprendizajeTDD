----STARTUP---- (16 November 2020 17:32:25) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64\CuisUniversity-4384.image!


Object subclass: #CarritoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #CarritoTest category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/16/2020 17:38:06'!
Object subclass: #CarritoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

TestCase subclass: #CarritoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #CarritoTest category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/16/2020 17:38:34'!
TestCase subclass: #CarritoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!CarritoTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 17:39:23'!
test01ANewCartIsEmpty! !
!CarritoTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 17:40:04'!
test02ABookCanBeAddedToTheCart! !
!CarritoTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 17:40:28'!
test03ManyBooksCanBeAddedToTheCart! !

!classDefinition: #ShoppingCart category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/16/2020 18:56:36'!
Object subclass: #ShoppingCart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!CarritoTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 18:56:27' prior: 50867793!
test01ANewCartIsEmpty
	|aCart|
	
	aCart := ShoppingCart new.
	
	self assert: aCart listCart equals: OrderedCollection new.! !

!testRun: #CarritoTest #test01ANewCartIsEmpty stamp: 'LH 11/16/2020 18:56:42'!
ERROR!
!ShoppingCart methodsFor: 'accessing' stamp: 'LH 11/16/2020 18:56:53'!
listCart
	self shouldBeImplemented.! !
!ShoppingCart methodsFor: 'accessing' stamp: 'LH 11/16/2020 18:57:04' prior: 50867822!
listCart
	^OrderedCollection new.! !

!testRun: #CarritoTest #test01ANewCartIsEmpty stamp: 'LH 11/16/2020 18:57:06'!
PASSED!

!testRun: #CarritoTest #test01ANewCartIsEmpty stamp: 'LH 11/16/2020 18:57:06'!
PASSED!

!testRun: #CarritoTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/16/2020 18:57:06'!
PASSED!

!testRun: #CarritoTest #test03ManyBooksCanBeAddedToTheCart stamp: 'LH 11/16/2020 18:57:06'!
PASSED!
!CarritoTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 19:05:29' prior: 50867797!
test02ABookCanBeAddedToTheCart
	|aCart|
	
	aCart := ShoppingCart new.
	aCart addToCart: 1 ofBook: '0-7645-2641-3'.
	
	self assert: aCart listCart equals: (OrderedCollection with:'0-7645-2641-3' with: 1).   ! !

!testRun: #CarritoTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:05:33'!
ERROR!
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/16/2020 19:05:46'!
addToCart: aSmallInteger ofBook: aString 
	self shouldBeImplemented.! !

!classDefinition: #ShoppingCart category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/16/2020 19:07:01'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #ShoppingCart category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/16/2020 19:07:02'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'books quantities'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/16/2020 19:06:59' prior: 50867854!
addToCart: aQuantity ofBook: anISBN 
	books := anISBN.
	quantities := aQuantity! !

!testRun: #CarritoTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:07:05'!
FAILURE!
!ShoppingCart methodsFor: 'accessing' stamp: 'LH 11/16/2020 19:08:51' prior: 50867826!
listCart
	|bookList|
	
	bookList := OrderedCollection new.
	
	books isNil ifFalse:[bookList add: books. bookList add: quantities.].
	
	^ bookList.! !

!testRun: #CarritoTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:09:13'!
PASSED!

!testRun: #CarritoTest #test01ANewCartIsEmpty stamp: 'LH 11/16/2020 19:09:13'!
PASSED!

!testRun: #CarritoTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:09:13'!
PASSED!

!testRun: #CarritoTest #test03ManyBooksCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:09:13'!
PASSED!
!CarritoTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 19:10:37' prior: 50867801!
test03ManyBooksCanBeAddedToTheCart
	|aCart bookList|
	
	aCart := ShoppingCart new.
	bookList := OrderedCollection new.
	
	aCart addToCart: 1 ofBook: '0-7645-2641-3'.
	bookList add: '0-7645-2641-3'.
	bookList add: 1.
	aCart addToCart: 1 ofBook: '0-7645-2641-4'.
	bookList add: '0-7645-2641-4'.
	bookList add: 2.
	
	self assert: aCart listCart equals: bookList.   ! !

!testRun: #CarritoTest #test03ManyBooksCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:10:44'!
FAILURE!
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/16/2020 19:11:54' prior: 50867875!
addToCart: aQuantity ofBook: anISBN 
	books add: anISBN.
	books add: aQuantity.! !
!ShoppingCart methodsFor: 'initialization' stamp: 'LH 11/16/2020 19:12:44' overrides: 16896425!
initialize

	books := OrderedCollection new.! !

Object subclass: #ShoppingCart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #ShoppingCart category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/16/2020 19:12:52'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!ShoppingCart methodsFor: 'accessing' stamp: 'LH 11/16/2020 19:13:07' prior: 50867884!
listCart

	^ books copy.! !

!classRenamed: #CarritoTest as: #ShoppingCartTest stamp: 'LH 11/16/2020 19:13:21'!
Smalltalk renameClassNamed: #CarritoTest as: #ShoppingCartTest!

!testRun: #ShoppingCartTest #test03ManyBooksCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:13:28'!
FAILURE!
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 19:14:03' prior: 50867904!
test03ManyBooksCanBeAddedToTheCart
	|aCart bookList|
	
	aCart := ShoppingCart new.
	bookList := OrderedCollection new.
	
	aCart addToCart: 1 ofBook: '0-7645-2641-3'.
	bookList add: '0-7645-2641-3'.
	bookList add: 1.
	aCart addToCart: 1 ofBook: '0-7645-2641-4'.
	bookList add: '0-7645-2641-4'.
	bookList add: 1.
	
	self assert: aCart listCart equals: bookList.   ! !
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 19:14:10' prior: 50867957!
test03ManyBooksCanBeAddedToTheCart
	|aCart bookList|
	
	aCart := ShoppingCart new.
	bookList := OrderedCollection new.
	
	aCart addToCart: 1 ofBook: '0-7645-2641-3'.
	bookList add: '0-7645-2641-3'.
	bookList add: 1.
	aCart addToCart: 1 ofBook: '0-7645-2641-4'.
	bookList add: '0-7645-2641-4'.
	bookList add: 1.
	
	self assert: bookList listCart equals: aCart.   ! !
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 19:14:42' prior: 50867842!
test02ABookCanBeAddedToTheCart
	|aCart|
	
	aCart := ShoppingCart new.
	aCart addToCart: 1 ofBook: '0-7645-2641-3'.
	
	self assert: (OrderedCollection with:'0-7645-2641-3' with: 1) listCart equals: aCart.   ! !
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 19:15:01' prior: 50867813!
test01ANewCartIsEmpty
	|aCart|
	
	aCart := ShoppingCart new.
	
	self assert: OrderedCollection new listCart equals: aCart.! !

!testRun: #ShoppingCartTest #test03ManyBooksCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:15:12'!
ERROR!
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 19:15:49' prior: 50867997!
test01ANewCartIsEmpty
	|aCart|
	
	aCart := ShoppingCart new.
	
	self assert: OrderedCollection new equals: aCart listCart.! !
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 19:15:57' prior: 50867987!
test02ABookCanBeAddedToTheCart
	|aCart|
	
	aCart := ShoppingCart new.
	aCart addToCart: 1 ofBook: '0-7645-2641-3'.
	
	self assert: (OrderedCollection with:'0-7645-2641-3' with: 1) equals: aCart listCart.   ! !
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 19:16:09' prior: 50867972!
test03ManyBooksCanBeAddedToTheCart
	|aCart bookList|
	
	aCart := ShoppingCart new.
	bookList := OrderedCollection new.
	
	aCart addToCart: 1 ofBook: '0-7645-2641-3'.
	bookList add: '0-7645-2641-3'.
	bookList add: 1.
	aCart addToCart: 1 ofBook: '0-7645-2641-4'.
	bookList add: '0-7645-2641-4'.
	bookList add: 1.
	
	self assert: bookList equals: aCart listCart.   ! !

!testRun: #ShoppingCartTest #test03ManyBooksCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:16:11'!
PASSED!

!testRun: #ShoppingCartTest #test01ANewCartIsEmpty stamp: 'LH 11/16/2020 19:16:11'!
PASSED!

!testRun: #ShoppingCartTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:16:11'!
PASSED!

!testRun: #ShoppingCartTest #test03ManyBooksCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:16:11'!
PASSED!

Object subclass: #ShoppingCartBook
	instanceVariableNames: 'isbn quantity'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #ShoppingCartBook category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/16/2020 19:18:57'!
Object subclass: #ShoppingCartBook
	instanceVariableNames: 'isbn quantity'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!ShoppingCartBook class methodsFor: 'instance creation' stamp: 'LH 11/16/2020 19:20:38'!
withISBN: anISBN andQuantity: aQuantity

	^self basicNew initializeWith: anISBN and: aQuantity.! !
!ShoppingCartBook methodsFor: 'initialization' stamp: 'LH 11/16/2020 19:21:31'!
with: anISBN and: aQuantity

	isbn := anISBN.
	quantity := aQuantity.! !
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/16/2020 19:22:16' prior: 50867922!
addToCart: aQuantity ofBook: anISBN 
	books add: (ShoppingCartBook withISBN: anISBN andQuantity: aQuantity).! !
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/16/2020 19:22:45' prior: 50868077!
addToCart: aQuantity ofBook: anISBN 
	^ books add: (ShoppingCartBook withISBN: anISBN andQuantity: aQuantity).! !
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/16/2020 19:22:47' prior: 50868084!
addToCart: aQuantity ofBook: anISBN 

	^ books add: (ShoppingCartBook withISBN: anISBN andQuantity: aQuantity).! !
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 19:23:42' prior: 50868015!
test02ABookCanBeAddedToTheCart
	|aCart aSCBook|
	
	aCart := ShoppingCart new.
	aSCBook := aCart addToCart: 1 ofBook: '0-7645-2641-3'.
	
	self assert: (OrderedCollection with:aSCBook) equals: aCart listCart.   ! !
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 19:25:27' prior: 50868025!
test03ManyBooksCanBeAddedToTheCart
	|aCart bookList|
	
	aCart := ShoppingCart new.
	bookList := OrderedCollection new.
	
	aCart addToCart: 1 ofBook: '0-7645-2641-3'.
	bookList add: '0-7645-2641-3'.
	bookList add: 1.
	aCart addToCart: 1 ofBook: '0-7645-2641-4'.
	bookList add: '0-7645-2641-4'.
	bookList add: 1.
	
	self assert: bookList equals: aCart listCart.   ! !
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 19:26:05' prior: 50868098!
test02ABookCanBeAddedToTheCart
	|aCart|
	
	aCart := ShoppingCart new.
	aCart addToCart: 1 ofBook: '0-7645-2641-3'.
	
	self assert: (OrderedCollection with:'0-7645-2641-3' with: 1) equals: aCart listCart.   ! !
!ShoppingCart methodsFor: 'accessing' stamp: 'LH 11/16/2020 19:28:29' prior: 50867945!
listCart
	|bookList|
	bookList := OrderedCollection new.
	books do:[:aBook | 
				bookList add: aBook isbn.
				bookList add: aBook quantity.].
	^ bookList.! !
!ShoppingCart methodsFor: 'accessing' stamp: 'LH 11/16/2020 19:29:08' prior: 50868133!
listCart
	|bookList|
	bookList := OrderedCollection new.
	books do:[:aBook | aBook addToList: bookList.].
	^ bookList.! !
!ShoppingCartBook methodsFor: 'adding to a list' stamp: 'LH 11/16/2020 19:30:01'!
addToList: aListOfBooks

	aListOfBooks add: isbn.
	aListOfBooks add: quantity.! !

!testRun: #ShoppingCartTest #test01ANewCartIsEmpty stamp: 'LH 11/16/2020 19:30:08'!
PASSED!

!testRun: #ShoppingCartTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:30:08'!
ERROR!

!testRun: #ShoppingCartTest #test03ManyBooksCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:30:08'!
ERROR!

!testRun: #ShoppingCartTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:30:19'!
ERROR!
!ShoppingCartBook methodsFor: 'initialization' stamp: 'LH 11/16/2020 19:30:51'!
initializeWith: anISBN and: aQuantity

	isbn := anISBN.
	quantity := aQuantity.! !

!methodRemoval: ShoppingCartBook #with:and: stamp: 'LH 11/16/2020 19:30:51'!
with: anISBN and: aQuantity

	isbn := anISBN.
	quantity := aQuantity.!

!testRun: #ShoppingCartTest #test01ANewCartIsEmpty stamp: 'LH 11/16/2020 19:30:55'!
PASSED!

!testRun: #ShoppingCartTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:30:55'!
PASSED!

!testRun: #ShoppingCartTest #test03ManyBooksCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:30:55'!
PASSED!
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 19:35:01'!
test04CanAddMoreThanOneFromTheSameBook
	|aCart bookList|
	
	aCart := ShoppingCart new.
	bookList := OrderedCollection new.
	
	aCart addToCart: 2 ofBook: '0-7645-2641-3'.
	bookList add: '0-7645-2641-3'.
	bookList add: 2.
	
	self assert: bookList equals: aCart listCart.   ! !

!testRun: #ShoppingCartTest #test04CanAddMoreThanOneFromTheSameBook stamp: 'LH 11/16/2020 19:35:03'!
PASSED!

!testRun: #ShoppingCartTest #test01ANewCartIsEmpty stamp: 'LH 11/16/2020 19:35:03'!
PASSED!

!testRun: #ShoppingCartTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:35:03'!
PASSED!

!testRun: #ShoppingCartTest #test03ManyBooksCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:35:03'!
PASSED!

!testRun: #ShoppingCartTest #test04CanAddMoreThanOneFromTheSameBook stamp: 'LH 11/16/2020 19:35:03'!
PASSED!

----SNAPSHOT----(16 November 2020 19:42:40) CuisUniversity-4384.image priorSource: 17155564!
!ShoppingCart methodsFor: 'initialization' stamp: 'LH 11/16/2020 19:43:11' prior: 50867928 overrides: 16896425!
initialize

	books := Bag new.! !
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/16/2020 19:43:50' prior: 50868091!
addToCart: aQuantity ofBook: anISBN 

	^ books add: anISBN withOccurrences: aQuantity.! !
!ShoppingCart methodsFor: 'accessing' stamp: 'LH 11/16/2020 19:44:07' prior: 50868141!
listCart
	
	^books copy.! !

!testRun: #ShoppingCartTest #test01ANewCartIsEmpty stamp: 'LH 11/16/2020 19:44:15'!
FAILURE!

!testRun: #ShoppingCartTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:44:15'!
FAILURE!

!testRun: #ShoppingCartTest #test03ManyBooksCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:44:15'!
FAILURE!

!testRun: #ShoppingCartTest #test04CanAddMoreThanOneFromTheSameBook stamp: 'LH 11/16/2020 19:44:15'!
FAILURE!
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 19:44:26' prior: 50868008!
test01ANewCartIsEmpty
	|aCart|
	
	aCart := ShoppingCart new.
	
	self assert: Bag new equals: aCart listCart.! !
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 19:45:37' prior: 50868123!
test02ABookCanBeAddedToTheCart
	|aCart bookBag|
	
	aCart := ShoppingCart new.
	bookBag := Bag new.
	aCart addToCart: 1 ofBook: '0-7645-2641-3'.
	bookBag add: '0-7645-2641-3'.
	
	self assert: bookBag equals: aCart listCart.   ! !
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 19:46:19' prior: 50868108!
test03ManyBooksCanBeAddedToTheCart
	|aCart bookBag|
	
	aCart := ShoppingCart new.
	bookBag := Bag new.
	
	aCart addToCart: 1 ofBook: '0-7645-2641-3'.
	bookBag add: '0-7645-2641-3'.
	
	aCart addToCart: 1 ofBook: '0-7645-2641-4'.
	bookBag add: '0-7645-2641-4'.
	
	self assert: bookBag equals: aCart listCart.   ! !
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 19:46:58' prior: 50868186!
test04CanAddMoreThanOneFromTheSameBook
	|aCart bookBag|
	
	aCart := ShoppingCart new.
	bookBag := Bag new.
	
	aCart addToCart: 2 ofBook: '0-7645-2641-3'.
	bookBag add: '0-7645-2641-3' withOccurrences:2.
	
	self assert: bookBag equals: aCart listCart.   ! !

!testRun: #ShoppingCartTest #test04CanAddMoreThanOneFromTheSameBook stamp: 'LH 11/16/2020 19:46:59'!
PASSED!

!testRun: #ShoppingCartTest #test01ANewCartIsEmpty stamp: 'LH 11/16/2020 19:46:59'!
PASSED!

!testRun: #ShoppingCartTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:46:59'!
PASSED!

!testRun: #ShoppingCartTest #test03ManyBooksCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:46:59'!
PASSED!

!testRun: #ShoppingCartTest #test04CanAddMoreThanOneFromTheSameBook stamp: 'LH 11/16/2020 19:46:59'!
PASSED!

----SNAPSHOT----(16 November 2020 19:47:05) CuisUniversity-4384.image priorSource: 17170011!

----QUIT----(16 November 2020 19:52:48) CuisUniversity-4384.image priorSource: 17172873!

----STARTUP---- (17 November 2020 11:24:56) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64\CuisUniversity-4384.image!

!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/17/2020 11:36:15' prior: 50868245!
test01ANewCartIsEmpty
	|aShop aCatalog|
	aCatalog := Dictionary newFromPairs: #('admin', 'password').
	aShop := ShoppingCart withCatalog: OrderedCollection new andUsers: aCatalog.
	aShop createCartFor: 'admin' withPassword: 'password'. 
	
	self assert: Bag new equals: (aShop listCart: 1).! !

!testRun: #ShoppingCartTest #test01ANewCartIsEmpty stamp: 'LH 11/17/2020 11:36:28'!
ERROR!
!ShoppingCart class methodsFor: 'instance creation' stamp: 'LH 11/17/2020 11:36:39'!
withCatalog: anOrderedCollection andUsers: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithCatalog: anOrderedCollection andUsers: aDictionary ! !
!ShoppingCart class methodsFor: 'instance creation' stamp: 'LH 11/17/2020 11:36:57' prior: 50868328!
withCatalog: anOrderedCollection andUsers: aDictionary 

	^self new initializeWithCatalog: anOrderedCollection andUsers: aDictionary. ! !

!testRun: #ShoppingCartTest #test01ANewCartIsEmpty stamp: 'LH 11/17/2020 11:37:00'!
ERROR!

!classDefinition: #ShoppingCart category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/17/2020 11:37:10'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'books orderedCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #ShoppingCart category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/17/2020 11:37:11'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'books orderedCollection dictionary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!ShoppingCart methodsFor: 'initialization' stamp: 'LH 11/17/2020 11:37:11'!
initializeWithCatalog: anOrderedCollection andUsers: aDictionary 
	self shouldBeImplemented.
	orderedCollection := anOrderedCollection.
	dictionary := aDictionary.! !
!ShoppingCart methodsFor: 'initialization' stamp: 'LH 11/17/2020 11:37:23' prior: 50868366!
initializeWithCatalog: anOrderedCollection andUsers: aDictionary 

	orderedCollection := anOrderedCollection.
	dictionary := aDictionary.! !

!classDefinition: #ShoppingCart category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/17/2020 11:37:31'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'books catalog dictionary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'LH 11/17/2020 11:37:31' prior: 50868375!
initializeWithCatalog: anOrderedCollection andUsers: aDictionary 

	catalog := anOrderedCollection.
	dictionary := aDictionary.! !

!classDefinition: #ShoppingCart category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/17/2020 11:37:41'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'books catalog usersAndPasswords'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'LH 11/17/2020 11:37:41' prior: 50868391!
initializeWithCatalog: anOrderedCollection andUsers: aDictionary 

	catalog := anOrderedCollection.
	usersAndPasswords := aDictionary.! !
!ShoppingCart methodsFor: 'initialization' stamp: 'LH 11/17/2020 11:38:14' prior: 50868407!
initializeWithCatalog: aCatalog andUsers: aDictionaryOfUsersAndPasswords

	catalog := aCatalog.
	usersAndPasswords := aDictionaryOfUsersAndPasswords.! !

!testRun: #ShoppingCartTest #test01ANewCartIsEmpty stamp: 'LH 11/17/2020 11:38:17'!
ERROR!
!ShoppingCart methodsFor: 'Carts' stamp: 'LH 11/17/2020 11:38:37'!
createCartFor: aString withPassword: aString2 
	self shouldBeImplemented.! !

!classDefinition: #ShoppingCart category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/17/2020 11:40:00'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'books catalog usersAndPasswords carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!ShoppingCart methodsFor: 'Carts' stamp: 'LH 11/17/2020 11:39:58' prior: 50868425!
createCartFor: anUser withPassword: aPassword 
	"creates a new cart for a valid user"
	
	carts add: Bag new.! !

!testRun: #ShoppingCartTest #test01ANewCartIsEmpty stamp: 'LH 11/17/2020 11:40:02'!
ERROR!
!ShoppingCart methodsFor: 'initialization' stamp: 'LH 11/17/2020 11:40:30' prior: 50868415!
initializeWithCatalog: aCatalog andUsers: aDictionaryOfUsersAndPasswords

	catalog := aCatalog.
	usersAndPasswords := aDictionaryOfUsersAndPasswords.
	carts := OrderedCollection new.! !

!testRun: #ShoppingCartTest #test01ANewCartIsEmpty stamp: 'LH 11/17/2020 11:40:40'!
ERROR!
!ShoppingCart methodsFor: 'Carts' stamp: 'LH 11/17/2020 11:40:56'!
listCart: aSmallInteger 
	self shouldBeImplemented.! !
!ShoppingCart methodsFor: 'Carts' stamp: 'LH 11/17/2020 11:41:17' prior: 50868460!
listCart: aCartID 
	^carts at: aCartID! !
!ShoppingCart methodsFor: 'Carts' stamp: 'LH 11/17/2020 11:41:35' prior: 50868465!
listCart: aCartID 
	"returns the cart's contentes as a Bag"

	^carts at: aCartID! !

!testRun: #ShoppingCartTest #test01ANewCartIsEmpty stamp: 'LH 11/17/2020 11:41:38'!
PASSED!

!testRun: #ShoppingCartTest #test01ANewCartIsEmpty stamp: 'LH 11/17/2020 11:41:38'!
PASSED!

!testRun: #ShoppingCartTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/17/2020 11:41:38'!
PASSED!

!testRun: #ShoppingCartTest #test03ManyBooksCanBeAddedToTheCart stamp: 'LH 11/17/2020 11:41:38'!
PASSED!

!testRun: #ShoppingCartTest #test04CanAddMoreThanOneFromTheSameBook stamp: 'LH 11/17/2020 11:41:38'!
PASSED!
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/17/2020 11:42:00' prior: 50868252!
test02ABookCanBeAddedToTheCart
	|aShop bookBag|
	
	aShop := ShoppingCart new.
	bookBag := Bag new.
	aShop addToCart: 1 ofBook: '0-7645-2641-3'.
	bookBag add: '0-7645-2641-3'.
	
	self assert: bookBag equals: aShop listCart.   ! !
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/17/2020 11:43:43' prior: 50868491!
test02ABookCanBeAddedToTheCart
	|aShop bookBag aDictionaryOfUsers|
	
	aDictionaryOfUsers := Dictionary newFromPairs: #('admin', 'password').
	aShop := ShoppingCart withCatalog: OrderedCollection new andUsers: aDictionaryOfUsers.
	bookBag := Bag new.
	aShop addToCart: 1 ofBook: '0-7645-2641-3'.
	bookBag add: '0-7645-2641-3'.
	
	self assert: bookBag equals: aShop listCart.   ! !
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/17/2020 11:45:04' prior: 50868502!
test02ABookCanBeAddedToTheCart
	|aShop bookBag aDictionaryOfUsers aCatalog|
	
	aDictionaryOfUsers := Dictionary newFromPairs: #('admin', 'password').
	aCatalog := OrderedCollection with: '0-7645-2641-3'.
	aShop := ShoppingCart withCatalog: aCatalog new andUsers: aDictionaryOfUsers.
	bookBag := Bag new.
	aShop createCartFor: 'admin' withPassword: 'password'. 
	aShop addToCart: 1 theBook: '0-7645-2641-3' times: 1.
	bookBag add: '0-7645-2641-3'.
	
	self assert: bookBag equals: aShop listCart.   ! !
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/17/2020 11:45:32' prior: 50868517!
test02ABookCanBeAddedToTheCart
	|aShop bookBag aDictionaryOfUsers aCatalog|
	
	aDictionaryOfUsers := Dictionary newFromPairs: #('admin', 'password').
	aCatalog := OrderedCollection with: '0-7645-2641-3'.
	aShop := ShoppingCart withCatalog: aCatalog new andUsers: aDictionaryOfUsers.
	bookBag := Bag new.
	
	aShop createCartFor: 'admin' withPassword: 'password'. 
	aShop addToCart: 1 theBook: '0-7645-2641-3' times: 1.
	bookBag add: '0-7645-2641-3'.
	
	self assert: bookBag equals: (aShop listCart: 1).   ! !

!testRun: #ShoppingCartTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/17/2020 11:45:35'!
ERROR!

!testRun: #ShoppingCartTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/17/2020 11:46:01'!
ERROR!
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/17/2020 11:46:16' prior: 50868536!
test02ABookCanBeAddedToTheCart
	|aShop bookBag aDictionaryOfUsers aCatalog|
	
	aDictionaryOfUsers := Dictionary newFromPairs: #('admin', 'password').
	aCatalog := OrderedCollection with: '0-7645-2641-3'.
	aShop := ShoppingCart withCatalog: aCatalog andUsers: aDictionaryOfUsers.
	bookBag := Bag new.
	
	aShop createCartFor: 'admin' withPassword: 'password'. 
	aShop addToCart: 1 theBook: '0-7645-2641-3' times: 1.
	bookBag add: '0-7645-2641-3'.
	
	self assert: bookBag equals: (aShop listCart: 1).   ! !

!testRun: #ShoppingCartTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/17/2020 11:46:17'!
ERROR!
!ShoppingCart methodsFor: 'Carts' stamp: 'LH 11/17/2020 11:46:27'!
addToCart: aSmallInteger theBook: aString times: aSmallInteger3 
	self shouldBeImplemented.! !
!ShoppingCart methodsFor: 'Carts' stamp: 'LH 11/17/2020 11:48:02' prior: 50868583!
addToCart: aCartID theBook: anISBN times: aQuantity 
	
	(carts at:1) add: anISBN withOccurrences: aQuantity.! !

!testRun: #ShoppingCartTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/17/2020 11:48:03'!
PASSED!

!testRun: #ShoppingCartTest #test01ANewCartIsEmpty stamp: 'LH 11/17/2020 11:48:03'!
PASSED!

!testRun: #ShoppingCartTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/17/2020 11:48:03'!
PASSED!

!testRun: #ShoppingCartTest #test03ManyBooksCanBeAddedToTheCart stamp: 'LH 11/17/2020 11:48:03'!
PASSED!

!testRun: #ShoppingCartTest #test04CanAddMoreThanOneFromTheSameBook stamp: 'LH 11/17/2020 11:48:03'!
PASSED!

----SNAPSHOT----(17 November 2020 11:48:10) CuisUniversity-4384.image priorSource: 17172967!
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/17/2020 11:49:35' prior: 50868263!
test03ManyBooksCanBeAddedToTheCart
	|aShop bookBag aDictionaryOfUsers aCatalog|
	
	aDictionaryOfUsers := Dictionary newFromPairs: #('admin', 'password').
	aCatalog := OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4'.
	aShop := ShoppingCart withCatalog: aCatalog andUsers: aDictionaryOfUsers.
	bookBag := Bag new.
	
	aShop createCartFor: 'admin' withPassword: 'password'. 
	
	aShop addToCart: 1 theBook: '0-7645-2641-3' times: 1.
	bookBag add: '0-7645-2641-3'.
	aShop addToCart: 1 theBook: '0-7645-2641-4' times: 1.
	bookBag add: '0-7645-2641-4'.
	
	self assert: bookBag equals: (aShop listCart: 1).   
	! !

!testRun: #ShoppingCartTest #test03ManyBooksCanBeAddedToTheCart stamp: 'LH 11/17/2020 11:49:57'!
PASSED!

!testRun: #ShoppingCartTest #test01ANewCartIsEmpty stamp: 'LH 11/17/2020 11:49:57'!
PASSED!

!testRun: #ShoppingCartTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/17/2020 11:49:57'!
PASSED!

!testRun: #ShoppingCartTest #test03ManyBooksCanBeAddedToTheCart stamp: 'LH 11/17/2020 11:49:57'!
PASSED!

!testRun: #ShoppingCartTest #test04CanAddMoreThanOneFromTheSameBook stamp: 'LH 11/17/2020 11:49:57'!
PASSED!
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/17/2020 11:51:35' prior: 50868276!
test04CanAddMoreThanOneFromTheSameBook
	|aShop bookBag aDictionaryOfUsers aCatalog|
	
	aDictionaryOfUsers := Dictionary newFromPairs: #('admin', 'password').
	aCatalog := OrderedCollection with: '0-7645-2641-3'.
	aShop := ShoppingCart withCatalog: aCatalog andUsers: aDictionaryOfUsers.
	bookBag := Bag new.
	
	aShop createCartFor: 'admin' withPassword: 'password'. 
	
	aShop addToCart: 1 theBook: '0-7645-2641-3' times: 2.
	bookBag add: '0-7645-2641-3' withOccurrences: 2.
	
	self assert: bookBag equals: (aShop listCart: 1).   
	
	
	aShop addToCart: 1 theBook: '0-7645-2641-3' times: 1.
	bookBag add: '0-7645-2641-3'.
	
	self assert: bookBag equals: (aShop listCart: 1).! !

!testRun: #ShoppingCartTest #test04CanAddMoreThanOneFromTheSameBook stamp: 'LH 11/17/2020 11:51:36'!
PASSED!

!testRun: #ShoppingCartTest #test01ANewCartIsEmpty stamp: 'LH 11/17/2020 11:51:36'!
PASSED!

!testRun: #ShoppingCartTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/17/2020 11:51:36'!
PASSED!

!testRun: #ShoppingCartTest #test03ManyBooksCanBeAddedToTheCart stamp: 'LH 11/17/2020 11:51:36'!
PASSED!

!testRun: #ShoppingCartTest #test04CanAddMoreThanOneFromTheSameBook stamp: 'LH 11/17/2020 11:51:36'!
PASSED!
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/17/2020 11:51:58' prior: 50868654!
test04CanAddMoreThanOneFromTheSameBook
	|aShop bookBag aDictionaryOfUsers aCatalog|
	
	aDictionaryOfUsers := Dictionary newFromPairs: #('admin', 'password').
	aCatalog := OrderedCollection with: '0-7645-2641-3'.
	aShop := ShoppingCart withCatalog: aCatalog andUsers: aDictionaryOfUsers.
	bookBag := Bag new.
	
	aShop createCartFor: 'admin' withPassword: 'password'. 
	
	aShop addToCart: 1 theBook: '0-7645-2641-3' times: 2.
	bookBag add: '0-7645-2641-3' withOccurrences: 2.
	
	self assert: bookBag equals: (aShop listCart: 1).   ! !

!methodRemoval: ShoppingCart #listCart stamp: 'LH 11/17/2020 11:57:09'!
listCart
	
	^books copy.!

!methodRemoval: ShoppingCart #initialize stamp: 'LH 11/17/2020 11:57:16'!
initialize

	books := Bag new.!

!methodRemoval: ShoppingCart #addToCart:ofBook: stamp: 'LH 11/17/2020 11:57:22'!
addToCart: aQuantity ofBook: anISBN 

	^ books add: anISBN withOccurrences: aQuantity.!

!classRenamed: #ShoppingCart as: #TusLibrosShop stamp: 'LH 11/17/2020 11:57:38'!
Smalltalk renameClassNamed: #ShoppingCart as: #TusLibrosShop!
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'LH 11/17/2020 11:57:38' prior: 50868695!
test04CanAddMoreThanOneFromTheSameBook
	|aShop bookBag aDictionaryOfUsers aCatalog|
	
	aDictionaryOfUsers := Dictionary newFromPairs: #('admin', 'password').
	aCatalog := OrderedCollection with: '0-7645-2641-3'.
	aShop := TusLibrosShop withCatalog: aCatalog andUsers: aDictionaryOfUsers.
	bookBag := Bag new.
	
	aShop createCartFor: 'admin' withPassword: 'password'. 
	
	aShop addToCart: 1 theBook: '0-7645-2641-3' times: 2.
	bookBag add: '0-7645-2641-3' withOccurrences: 2.
	
	self assert: bookBag equals: (aShop listCart: 1).   ! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'LH 11/17/2020 11:57:38' prior: 50868615!
test03ManyBooksCanBeAddedToTheCart
	|aShop bookBag aDictionaryOfUsers aCatalog|
	
	aDictionaryOfUsers := Dictionary newFromPairs: #('admin', 'password').
	aCatalog := OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4'.
	aShop := TusLibrosShop withCatalog: aCatalog andUsers: aDictionaryOfUsers.
	bookBag := Bag new.
	
	aShop createCartFor: 'admin' withPassword: 'password'. 
	
	aShop addToCart: 1 theBook: '0-7645-2641-3' times: 1.
	bookBag add: '0-7645-2641-3'.
	aShop addToCart: 1 theBook: '0-7645-2641-4' times: 1.
	bookBag add: '0-7645-2641-4'.
	
	self assert: bookBag equals: (aShop listCart: 1).   
	! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'LH 11/17/2020 11:57:38' prior: 50868313!
test01ANewCartIsEmpty
	|aShop aCatalog|
	aCatalog := Dictionary newFromPairs: #('admin', 'password').
	aShop := TusLibrosShop withCatalog: OrderedCollection new andUsers: aCatalog.
	aShop createCartFor: 'admin' withPassword: 'password'. 
	
	self assert: Bag new equals: (aShop listCart: 1).! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'LH 11/17/2020 11:57:38' prior: 50868562!
test02ABookCanBeAddedToTheCart
	|aShop bookBag aDictionaryOfUsers aCatalog|
	
	aDictionaryOfUsers := Dictionary newFromPairs: #('admin', 'password').
	aCatalog := OrderedCollection with: '0-7645-2641-3'.
	aShop := TusLibrosShop withCatalog: aCatalog andUsers: aDictionaryOfUsers.
	bookBag := Bag new.
	
	aShop createCartFor: 'admin' withPassword: 'password'. 
	aShop addToCart: 1 theBook: '0-7645-2641-3' times: 1.
	bookBag add: '0-7645-2641-3'.
	
	self assert: bookBag equals: (aShop listCart: 1).   ! !

!classRenamed: #ShoppingCartTest as: #TusLibrosShopTest stamp: 'LH 11/17/2020 11:57:51'!
Smalltalk renameClassNamed: #ShoppingCartTest as: #TusLibrosShopTest!

!classRemoval: #ShoppingCartBook stamp: 'LH 11/17/2020 11:57:58'!
Object subclass: #ShoppingCartBook
	instanceVariableNames: 'isbn quantity'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneFromTheSameBook stamp: 'LH 11/17/2020 11:58:01'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneFromTheSameBook stamp: 'LH 11/17/2020 11:58:03'!
PASSED!

!testRun: #TusLibrosShopTest #test01ANewCartIsEmpty stamp: 'LH 11/17/2020 11:58:03'!
PASSED!

!testRun: #TusLibrosShopTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/17/2020 11:58:04'!
PASSED!

!testRun: #TusLibrosShopTest #test03ManyBooksCanBeAddedToTheCart stamp: 'LH 11/17/2020 11:58:04'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneFromTheSameBook stamp: 'LH 11/17/2020 11:58:04'!
PASSED!

----SNAPSHOT----(17 November 2020 11:58:08) CuisUniversity-4384.image priorSource: 17182736!

----QUIT----(17 November 2020 11:58:45) CuisUniversity-4384.image priorSource: 17190007!

----STARTUP---- (18 November 2020 16:17:47) as /Users/ilanolkies/uba/ingsoft1/macos64/CuisUniversity-4384.image!


!classRemoval: #TusLibrosShop stamp: 'IO 11/18/2020 16:17:57'!
Object subclass: #TusLibrosShop
	instanceVariableNames: 'books catalog usersAndPasswords carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #TusLibrosShopTest stamp: 'IO 11/18/2020 16:17:57'!
TestCase subclass: #TusLibrosShopTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

----End fileIn of /Users/ilanolkies/uba/ingsoft1/macos64/Ejercicio-20-Tus-Libros.st----!
!TusLibrosShopTest methodsFor: 'tests carrito' stamp: 'IO 11/18/2020 16:18:15' prior: 50867953!
test01ANewCartIsEmpty
	| aShop aCatalog |
	aCatalog := Dictionary newFromPairs: #('admin', 'password').
	aShop := TusLibrosShop withCatalog: OrderedCollection new andUsers: aCatalog.
	aShop createCartFor: 'admin' withPassword: 'password'. 
	
	self assert: Bag new equals: (aShop listCart: 1).! !

!classRenamed: #TusLibrosShop as: #TusLibrosShop2 stamp: 'IO 11/18/2020 16:19:49'!
Smalltalk renameClassNamed: #TusLibrosShop as: #TusLibrosShop2!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:19:49' prior: 50867965!
test02ABookCanBeAddedToTheCart
	|aShop bookBag aDictionaryOfUsers aCatalog|
	
	aDictionaryOfUsers := Dictionary newFromPairs: #('admin', 'password').
	aCatalog := OrderedCollection with: '0-7645-2641-3'.
	aShop := TusLibrosShop2 withCatalog: aCatalog andUsers: aDictionaryOfUsers.
	bookBag := Bag new.
	
	aShop createCartFor: 'admin' withPassword: 'password'. 
	aShop addToCart: 1 theBook: '0-7645-2641-3' times: 1.
	bookBag add: '0-7645-2641-3'.
	
	self assert: bookBag equals: (aShop listCart: 1).   ! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:19:49' prior: 50867984!
test03ManyBooksCanBeAddedToTheCart
	|aShop bookBag aDictionaryOfUsers aCatalog|
	
	aDictionaryOfUsers := Dictionary newFromPairs: #('admin', 'password').
	aCatalog := OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4'.
	aShop := TusLibrosShop2 withCatalog: aCatalog andUsers: aDictionaryOfUsers.
	bookBag := Bag new.
	
	aShop createCartFor: 'admin' withPassword: 'password'. 
	
	aShop addToCart: 1 theBook: '0-7645-2641-3' times: 1.
	bookBag add: '0-7645-2641-3'.
	aShop addToCart: 1 theBook: '0-7645-2641-4' times: 1.
	bookBag add: '0-7645-2641-4'.
	
	self assert: bookBag equals: (aShop listCart: 1).   
	! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:19:49' prior: 50868085!
test01ANewCartIsEmpty
	| aShop aCatalog |
	aCatalog := Dictionary newFromPairs: #('admin', 'password').
	aShop := TusLibrosShop2 withCatalog: OrderedCollection new andUsers: aCatalog.
	aShop createCartFor: 'admin' withPassword: 'password'. 
	
	self assert: Bag new equals: (aShop listCart: 1).! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:19:49' prior: 50868006!
test04CanAddMoreThanOneFromTheSameBook
	|aShop bookBag aDictionaryOfUsers aCatalog|
	
	aDictionaryOfUsers := Dictionary newFromPairs: #('admin', 'password').
	aCatalog := OrderedCollection with: '0-7645-2641-3'.
	aShop := TusLibrosShop2 withCatalog: aCatalog andUsers: aDictionaryOfUsers.
	bookBag := Bag new.
	
	aShop createCartFor: 'admin' withPassword: 'password'. 
	
	aShop addToCart: 1 theBook: '0-7645-2641-3' times: 2.
	bookBag add: '0-7645-2641-3' withOccurrences: 2.
	
	self assert: bookBag equals: (aShop listCart: 1).   ! !

!classRenamed: #TusLibrosShopTest as: #TusLibrosShop2Test stamp: 'IO 11/18/2020 16:19:55'!
Smalltalk renameClassNamed: #TusLibrosShopTest as: #TusLibrosShop2Test!

TestCase subclass: #TusLibrosShopTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibrosShopTest category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 16:20:11'!
TestCase subclass: #TusLibrosShopTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibrosShop category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 16:24:20'!
Object subclass: #TusLibrosShop
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosShopTest methodsFor: 'no messages' stamp: 'IO 11/18/2020 16:24:11'!
test01

	| tusLibros users catalogue |
	
	catalogue := OrderedCollection with: ''.
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.
	
	! !

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:24:33'!
ERROR!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:27:07' prior: 50868203!
test01

	| tusLibros users catalogue cartId |
	
	catalogue := OrderedCollection with: ''.
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId size).

	! !

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:27:11'!
ERROR!
!TusLibrosShop class methodsFor: 'instance creation' stamp: 'IO 11/18/2020 16:27:18'!
fromCatalogue: anOrderedCollection users: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFromCatalogue: anOrderedCollection users: aDictionary ! !
!TusLibrosShop class methodsFor: 'instance creation' stamp: 'IO 11/18/2020 16:27:21' prior: 50868233!
fromCatalogue: anOrderedCollection users: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"

	^self new initializeFromCatalogue: anOrderedCollection users: aDictionary ! !

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:27:22'!
ERROR!

!classDefinition: #TusLibrosShop category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 16:27:36'!
Object subclass: #TusLibrosShop
	instanceVariableNames: 'orderedCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibrosShop category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 16:27:36'!
Object subclass: #TusLibrosShop
	instanceVariableNames: 'orderedCollection dictionary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosShop methodsFor: 'initialization' stamp: 'IO 11/18/2020 16:27:36'!
initializeFromCatalogue: anOrderedCollection users: aDictionary 
	self shouldBeImplemented.
	orderedCollection := anOrderedCollection.
	dictionary := aDictionary.! !
!TusLibrosShop methodsFor: 'initialization' stamp: 'IO 11/18/2020 16:28:03' prior: 50868272!
initializeFromCatalogue: aCatalogue users: users 
	! !

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:28:05'!
ERROR!

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:28:05'!
ERROR!

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:28:09'!
ERROR!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:28:22'!
newCartForUser: aString Password: aString2 
	self shouldBeImplemented.! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:28:25' prior: 50868293!
newCartForUser: aString Password: aString2 
! !

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:28:27'!
ERROR!
!TusLibrosShop methodsFor: 'error handling' stamp: 'IO 11/18/2020 16:28:30' overrides: 16881409!
error: aString 
	self shouldBeImplemented.! !

!methodRemoval: TusLibrosShop #error: stamp: 'IO 11/18/2020 16:28:51'!
error: aString 
	self shouldBeImplemented.!

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:28:53'!
ERROR!

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:28:53'!
ERROR!

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:29:34'!
ERROR!

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:29:34'!
ERROR!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:29:57' prior: 50868216!
test01

	| tusLibros users catalogue cartId |
	
	catalogue := OrderedCollection with: ''.
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	self assert: 0 equals: ((tusLibros listCart: cartId) size).

	! !

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:29:59'!
ERROR!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:30:08'!
listCart: aTusLibrosShop 
	self shouldBeImplemented.! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:30:18' prior: 50868339!
listCart: aTusLibrosShop 
	^OrderedCollection new.! !

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:30:20'!
PASSED!

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:30:20'!
PASSED!

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:30:22'!
PASSED!

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:30:22'!
PASSED!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:30:27' prior: 50868323!
test01

	| tusLibros users catalogue cartId |
	
	catalogue := OrderedCollection with: ''.
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.

	! !

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:30:28'!
PASSED!

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:30:28'!
PASSED!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:30:34' prior: 50868359!
test01

	| tusLibros users catalogue cartId |
	
	catalogue := OrderedCollection with: ''.
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:30:45'!
test01NewCartIsEmtpy

	| tusLibros users catalogue cartId |
	
	catalogue := OrderedCollection with: ''.
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:30:55'!
test01NewCartIsEmpty

	| tusLibros users catalogue cartId |
	
	catalogue := OrderedCollection with: ''.
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
! !

!methodRemoval: TusLibrosShopTest #test01NewCartIsEmtpy stamp: 'IO 11/18/2020 16:30:55'!
test01NewCartIsEmtpy

	| tusLibros users catalogue cartId |
	
	catalogue := OrderedCollection with: ''.
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
!

!methodRemoval: TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:30:57'!
test01

	| tusLibros users catalogue cartId |
	
	catalogue := OrderedCollection with: ''.
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:31:27'!
test02CanAddAproductToCart

	| tusLibros users catalogue cartId |
	
	catalogue := OrderedCollection with: ''.
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:31:53' prior: 50868450!
test02CanAddAproductToCart

	| tusLibros users catalogue cartId |
	
	catalogue := OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4'.
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:31:59' prior: 50868408!
test01NewCartIsEmpty

	| tusLibros users catalogue cartId |
	
	catalogue := OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4'..
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:32:06' prior: 50868481!
test01NewCartIsEmpty

	| tusLibros users catalogue cartId |
	
	catalogue := OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4'..
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:32:40'!
newTusLibros

	| tusLibros users catalogue |
	
	catalogue := OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4'..
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.

	^tusLibros.
! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:33:06' prior: 50868497!
test01NewCartIsEmpty

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:33:20' prior: 50868465!
test02CanAddAproductToCart

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:34:21'!
test02CanAddABookProductToCart

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '' bookQuantity: 1.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
! !

!methodRemoval: TusLibrosShopTest #test02CanAddAproductToCart stamp: 'IO 11/18/2020 16:34:26'!
test02CanAddAproductToCart

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:34:39' prior: 50868545!
test02CanAddABookProductToCart

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 1.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
! !

!testRun: #TusLibrosShopTest #test02CanAddABookProductToCart stamp: 'IO 11/18/2020 16:34:40'!
ERROR!
!TusLibrosShop methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:34:47'!
addToCart: aTusLibrosShop booksIsbn: aString bookQuantity: aSmallInteger 
	self shouldBeImplemented.! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:36:14' prior: 50868567!
test02CanAddABookProductToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 1.
	
	cart := Bag.
	self assert: cart equals: (tusLibros listCart: cartId).
! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:36:44' prior: 50868589!
test02CanAddABookProductToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 1.
	
	cart := Bag.
	cart add: '0-7645-2641-3'.

	self assert: cart equals: (tusLibros listCart: cartId).
! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:36:49' prior: 50868602!
test02CanAddABookProductToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 1.
	
	cart := Bag.
	cart add: '0-7645-2641-3'.

	self assert: cart equals: (tusLibros listCart: cartId).

! !

!testRun: #TusLibrosShopTest #test02CanAddABookProductToCart stamp: 'IO 11/18/2020 16:36:50'!
ERROR!
!TusLibrosShop methodsFor: 'error handling' stamp: 'IO 11/18/2020 16:37:01' overrides: 16881409!
error: aString 
	self shouldBeImplemented.! !

!classDefinition: #TusLibrosShop category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 16:37:29'!
Object subclass: #TusLibrosShop
	instanceVariableNames: 'orderedCollection dictionary hasTheBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosShop methodsFor: 'error handling' stamp: 'IO 11/18/2020 16:37:26' prior: 50868633 overrides: 16881409!
error: aString 
	hasTheBook := true.
! !

!testRun: #TusLibrosShopTest #test02CanAddABookProductToCart stamp: 'IO 11/18/2020 16:37:33'!
ERROR!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:37:43' prior: 50868616!
test02CanAddABookProductToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 1.
	
	cart := Bag new.
	cart add: '0-7645-2641-3'.

	self assert: cart equals: (tusLibros listCart: cartId).

! !

!testRun: #TusLibrosShopTest #test02CanAddABookProductToCart stamp: 'IO 11/18/2020 16:37:44'!
FAILURE!

!methodRemoval: TusLibrosShop #error: stamp: 'IO 11/18/2020 16:38:02'!
error: aString 
	hasTheBook := true.
!
!TusLibrosShop methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:38:15' prior: 50868582!
addToCart: aTusLibrosShop booksIsbn: aString bookQuantity: aSmallInteger 
	hasTheBook := true.! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:38:51' prior: 50868344!
listCart: aTusLibrosShop 
	(hasTheBook) ifTrue: [^Bag new with: '']
	^OrderedCollection new.! !
!TusLibrosShop methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:39:06' prior: 50868676!
addToCart: aTusLibrosShop booksIsbn: aString bookQuantity: aSmallInteger 
	hasTheBook := aString.! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:39:26' prior: 50868682!
listCart: aTusLibrosShop 
	(hasTheBook notNil) ifTrue: [^Bag new with: hasTheBook]
	^OrderedCollection new.! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:39:28' prior: 50868695!
listCart: aTusLibrosShop 
	(hasTheBook notNil) ifTrue: [^Bag new with: hasTheBook].
	^OrderedCollection new.! !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:39:29'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookProductToCart stamp: 'IO 11/18/2020 16:39:29'!
ERROR!

!testRun: #TusLibrosShopTest #test02CanAddABookProductToCart stamp: 'IO 11/18/2020 16:39:29'!
ERROR!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:39:38' prior: 50868702!
listCart: aTusLibrosShop 
	(hasTheBook notNil) ifTrue: [^Bag new add: hasTheBook].
	^OrderedCollection new.! !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:39:38'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookProductToCart stamp: 'IO 11/18/2020 16:39:38'!
FAILURE!

!testRun: #TusLibrosShopTest #test02CanAddABookProductToCart stamp: 'IO 11/18/2020 16:39:38'!
FAILURE!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:40:03' prior: 50868718!
listCart: aTusLibrosShop 
	(hasTheBook notNil) ifTrue: [^Bag with: hasTheBook].
	^OrderedCollection new.! !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:40:04'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookProductToCart stamp: 'IO 11/18/2020 16:40:04'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:40:07'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookProductToCart stamp: 'IO 11/18/2020 16:40:07'!
PASSED!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:40:24'!
test03CanAddDifferentBooksToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 1.
	
	cart := Bag new.
	cart add: '0-7645-2641-3'.

	self assert: cart equals: (tusLibros listCart: cartId).

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:40:33'!
test02CanAddABookToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 1.
	
	cart := Bag new.
	cart add: '0-7645-2641-3'.

	self assert: cart equals: (tusLibros listCart: cartId).

! !

!methodRemoval: TusLibrosShopTest #test02CanAddABookProductToCart stamp: 'IO 11/18/2020 16:40:33'!
test02CanAddABookProductToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 1.
	
	cart := Bag new.
	cart add: '0-7645-2641-3'.

	self assert: cart equals: (tusLibros listCart: cartId).

!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:40:42' prior: 50868513!
newTusLibros

	| tusLibros users catalogue |
	
	catalogue := OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4'.
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.

	^tusLibros.
! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:41:41' prior: 50868753!
test03CanAddDifferentBooksToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 1.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-4' bookQuantity: 1.

	cart := Bag new.
	cart add: '0-7645-2641-3'.
	cart add: '0-7645-2641-3'.

	self assert: cart equals: (tusLibros listCart: cartId).

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:41:44' prior: 50868807!
test03CanAddDifferentBooksToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 1.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-4' bookQuantity: 1.

	cart := Bag new.
	cart add: '0-7645-2641-3'.
	cart add: '0-7645-2641-4'.

	self assert: cart equals: (tusLibros listCart: cartId).

! !

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:41:45'!
FAILURE!

!classDefinition: #TusLibrosShop category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 16:43:08'!
Object subclass: #TusLibrosShop
	instanceVariableNames: 'orderedCollection dictionary hasTheBook books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:43:20' prior: 50868689!
addToCart: cartId booksIsbn: isbn bookQuantity: quantity 
	books add: isbn.! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:43:37' prior: 50868734!
listCart: aTusLibrosShop 
	^books copy.! !
!TusLibrosShop methodsFor: 'initialization' stamp: 'IO 11/18/2020 16:43:57' prior: 50868281!
initializeFromCatalogue: aCatalogue users: users 
	books := Bag new.
! !

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:44:07'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:44:07'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 16:44:07'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:44:07'!
PASSED!

Object subclass: #TusLibrosShop
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibrosShop category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 16:44:18'!
Object subclass: #TusLibrosShop
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:44:20'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 16:44:20'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:44:20'!
PASSED!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:45:29'!
test03CanAddMoreThanOneBookToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 3.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-4' bookQuantity: 2.

	cart := Bag new.
	cart add: '0-7645-2641-3' withOccurrences: 3.
	cart add: '0-7645-2641-4' withOccurrences: 2.

	self assert: cart equals: (tusLibros listCart: cartId).

! !

!testRun: #TusLibrosShopTest #test03CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 16:45:30'!
FAILURE!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:45:52' prior: 50868855!
addToCart: cartId booksIsbn: isbn bookQuantity: quantity 
	books add: isbn withOccurrences: quantity.! !

!testRun: #TusLibrosShop2Test #test01ANewCartIsEmpty stamp: 'IO 11/18/2020 16:45:54'!
PASSED!

!testRun: #TusLibrosShop2Test #test02ABookCanBeAddedToTheCart stamp: 'IO 11/18/2020 16:45:54'!
PASSED!

!testRun: #TusLibrosShop2Test #test03ManyBooksCanBeAddedToTheCart stamp: 'IO 11/18/2020 16:45:54'!
PASSED!

!testRun: #TusLibrosShop2Test #test04CanAddMoreThanOneFromTheSameBook stamp: 'IO 11/18/2020 16:45:54'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:45:54'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 16:45:54'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:45:54'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 16:45:54'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:45:58'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 16:45:58'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:45:58'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 16:45:58'!
PASSED!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:46:33'!
test04CanAddMoreThanOneBookToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 3.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-4' bookQuantity: 2.

	cart := Bag new.
	cart add: '0-7645-2641-3' withOccurrences: 3.
	cart add: '0-7645-2641-4' withOccurrences: 2.

	self assert: cart equals: (tusLibros listCart: cartId).

! !

!methodRemoval: TusLibrosShopTest #test03CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 16:46:33'!
test03CanAddMoreThanOneBookToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 3.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-4' bookQuantity: 2.

	cart := Bag new.
	cart add: '0-7645-2641-3' withOccurrences: 3.
	cart add: '0-7645-2641-4' withOccurrences: 2.

	self assert: cart equals: (tusLibros listCart: cartId).

!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:47:40'!
test05CanAddMoreThanOneCart

	| tusLibros cartId cartId2 cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	cartId2 := tusLibros newCartForUser: 'admin2' Password: 'password'.

	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 3.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-4' bookQuantity: 2.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-4' bookQuantity: 3.

	cart := Bag new.
	cart add: '0-7645-2641-3' withOccurrences: 5.
	cart add: '0-7645-2641-4' withOccurrences: 3.

	self assert: cart equals: (tusLibros listCart: cartId2).

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:48:22' prior: 50868795!
newTusLibros

	| tusLibros users catalogue |
	
	catalogue := OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4'.
	users := Dictionary newFromPairs: #('admin', 'password', 'admin2', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.

	^tusLibros.
! !

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 16:48:25'!
FAILURE!

!classDefinition: #TusLibrosShop category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 16:48:59'!
Object subclass: #TusLibrosShop
	instanceVariableNames: 'books carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosShop methodsFor: 'initialization' stamp: 'IO 11/18/2020 16:48:58' prior: 50868866!
initializeFromCatalogue: aCatalogue users: users 
	books := Bag new.
	carts := OrderedCollection new.
! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:49:20' prior: 50868298!
newCartForUser: aString Password: aString2 
	carts add: Bag new.
! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:49:31' prior: 50868861!
listCart: cartId 
	^books copy.! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:49:39' prior: 50868928!
addToCart: cartId booksIsbn: isbn bookQuantity: quantity
	books add: isbn withOccurrences: quantity.! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:50:13' prior: 50869075!
addToCart: cartId booksIsbn: isbn bookQuantity: quantity
	| cart |
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:50:18' prior: 50869081!
addToCart: cartId booksIsbn: isbn bookQuantity: quantity
	| cart |
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:50:43' prior: 50869071!
listCart: cartId 
	^carts at: cartId copy.! !

!testRun: #TusLibrosShop2Test #test01ANewCartIsEmpty stamp: 'IO 11/18/2020 16:50:44'!
PASSED!

!testRun: #TusLibrosShop2Test #test02ABookCanBeAddedToTheCart stamp: 'IO 11/18/2020 16:50:44'!
PASSED!

!testRun: #TusLibrosShop2Test #test03ManyBooksCanBeAddedToTheCart stamp: 'IO 11/18/2020 16:50:44'!
PASSED!

!testRun: #TusLibrosShop2Test #test04CanAddMoreThanOneFromTheSameBook stamp: 'IO 11/18/2020 16:50:44'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:50:44'!
ERROR!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 16:50:44'!
ERROR!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:50:44'!
ERROR!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 16:50:44'!
ERROR!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 16:50:44'!
ERROR!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:50:56' prior: 50869066!
newCartForUser: aString Password: aString2 
	carts add: Bag new.
	^carts size - 1.
! !

!testRun: #TusLibrosShop2Test #test01ANewCartIsEmpty stamp: 'IO 11/18/2020 16:50:57'!
PASSED!

!testRun: #TusLibrosShop2Test #test02ABookCanBeAddedToTheCart stamp: 'IO 11/18/2020 16:50:57'!
PASSED!

!testRun: #TusLibrosShop2Test #test03ManyBooksCanBeAddedToTheCart stamp: 'IO 11/18/2020 16:50:57'!
PASSED!

!testRun: #TusLibrosShop2Test #test04CanAddMoreThanOneFromTheSameBook stamp: 'IO 11/18/2020 16:50:57'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:50:57'!
ERROR!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 16:50:57'!
ERROR!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:50:57'!
ERROR!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 16:50:57'!
ERROR!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 16:50:57'!
ERROR!

!testRun: #TusLibrosShop2Test #test01ANewCartIsEmpty stamp: 'IO 11/18/2020 16:51:03'!
PASSED!

!testRun: #TusLibrosShop2Test #test02ABookCanBeAddedToTheCart stamp: 'IO 11/18/2020 16:51:03'!
PASSED!

!testRun: #TusLibrosShop2Test #test03ManyBooksCanBeAddedToTheCart stamp: 'IO 11/18/2020 16:51:03'!
PASSED!

!testRun: #TusLibrosShop2Test #test04CanAddMoreThanOneFromTheSameBook stamp: 'IO 11/18/2020 16:51:03'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:51:03'!
ERROR!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 16:51:03'!
ERROR!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:51:03'!
ERROR!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 16:51:03'!
ERROR!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 16:51:03'!
ERROR!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:51:32' prior: 50869095!
listCart: cartId 
	^(carts at: cartId) copy.! !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:51:35'!
ERROR!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:51:40'!
ERROR!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 16:51:40'!
ERROR!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:51:40'!
ERROR!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 16:51:40'!
ERROR!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 16:51:40'!
ERROR!

carts at: 0.!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:52:22' prior: 50869128!
newCartForUser: aString Password: aString2 
	carts add: Bag new.
	^carts size.
! !

!testRun: #TusLibrosShop2Test #test01ANewCartIsEmpty stamp: 'IO 11/18/2020 16:52:23'!
PASSED!

!testRun: #TusLibrosShop2Test #test02ABookCanBeAddedToTheCart stamp: 'IO 11/18/2020 16:52:23'!
PASSED!

!testRun: #TusLibrosShop2Test #test03ManyBooksCanBeAddedToTheCart stamp: 'IO 11/18/2020 16:52:23'!
PASSED!

!testRun: #TusLibrosShop2Test #test04CanAddMoreThanOneFromTheSameBook stamp: 'IO 11/18/2020 16:52:23'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:52:23'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 16:52:23'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:52:23'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 16:52:23'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 16:52:23'!
FAILURE!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 16:52:23'!
FAILURE!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:52:40' prior: 50869010!
test05CanAddMoreThanOneCart

	| tusLibros cartId cartId2 cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	cartId2 := tusLibros newCartForUser: 'admin2' Password: 'password'.

	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 3.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-4' bookQuantity: 2.
	
	tusLibros addToCart: cartId2 booksIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId2 booksIsbn: '0-7645-2641-4' bookQuantity: 3.

	cart := Bag new.
	cart add: '0-7645-2641-3' withOccurrences: 5.
	cart add: '0-7645-2641-4' withOccurrences: 3.

	self assert: cart equals: (tusLibros listCart: cartId2).

! !

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 16:52:41'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:52:41'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 16:52:41'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:52:41'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 16:52:41'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 16:52:41'!
PASSED!

Object subclass: #TusLibrosShop
	instanceVariableNames: 'carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibrosShop category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 16:53:10'!
Object subclass: #TusLibrosShop
	instanceVariableNames: 'carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosShop methodsFor: 'initialization' stamp: 'IO 11/18/2020 16:53:18' prior: 50869060!
initializeFromCatalogue: aCatalogue users: users 

	carts := OrderedCollection new.
! !

!classRemoval: #TusLibrosShop2Test stamp: 'IO 11/18/2020 16:54:49'!
TestCase subclass: #TusLibrosShop2Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #TusLibrosShop2 stamp: 'IO 11/18/2020 16:54:52'!
Object subclass: #TusLibrosShop2
	instanceVariableNames: 'books catalog usersAndPasswords carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:59:03'!
test05AClientInitialyHasNowPurchases

	| tusLibros cartId purchases |

	tusLibros := self newTusLibros.
	
	purchases := Bag new.

	self assert: purchases equals: (tusLibros listPurchases: cartId).
	self assert: 0 equals: (tusLibros listPurchases: cartId) size.

! !

!testRun: #TusLibrosShopTest #test05AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 16:59:10'!
ERROR!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 16:59:22'!
listPurchases: anUndefinedObject 
	self shouldBeImplemented.! !
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 16:59:28' prior: 50869343!
listPurchases: anUndefinedObject 
	^Bag new.! !

!testRun: #TusLibrosShopTest #test05AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 16:59:31'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:59:31'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 16:59:31'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:59:31'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 16:59:31'!
PASSED!

!testRun: #TusLibrosShopTest #test05AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 16:59:31'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 16:59:31'!
PASSED!

!testRun: #TusLibrosShopTest #test05AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 16:59:33'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:59:33'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 16:59:33'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:59:33'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 16:59:33'!
PASSED!

!testRun: #TusLibrosShopTest #test05AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 16:59:33'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 16:59:33'!
PASSED!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:00:13'!
listPurchases 
	^Bag new.! !
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:00:32'!
listPurchasesFor: aClient password: password
	^Bag new.! !

!methodRemoval: TusLibrosShop #listPurchases stamp: 'IO 11/18/2020 17:00:34'!
listPurchases 
	^Bag new.!

!methodRemoval: TusLibrosShop #listPurchases: stamp: 'IO 11/18/2020 17:00:37'!
listPurchases: anUndefinedObject 
	^Bag new.!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:00:52'!
test06AClientInitialyHasNowPurchases

	| tusLibros cartId purchases |

	tusLibros := self newTusLibros.
	
	purchases := Bag new.

	self assert: purchases equals: (tusLibros listPurchases: cartId).
	self assert: 0 equals: (tusLibros listPurchases: cartId) size.

! !

!methodRemoval: TusLibrosShopTest #test05AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:00:52'!
test05AClientInitialyHasNowPurchases

	| tusLibros cartId purchases |

	tusLibros := self newTusLibros.
	
	purchases := Bag new.

	self assert: purchases equals: (tusLibros listPurchases: cartId).
	self assert: 0 equals: (tusLibros listPurchases: cartId) size.

!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:02:24' prior: 50869413!
test06AClientInitialyHasNowPurchases

	| tusLibros purchases |

	tusLibros := self newTusLibros.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	self assert: (Bag new) equals: purchases.
	self assert: 0 equals: purchases size.

! !

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:02:28'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:02:28'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:02:28'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:02:28'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:02:28'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:02:28'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:02:28'!
PASSED!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:02:41'!
test07AClientCanCheckoutACart

	| tusLibros purchases |

	tusLibros := self newTusLibros.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	self assert: (Bag new) equals: purchases.
	self assert: 0 equals: purchases size.

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:03:38' prior: 50869471!
test07AClientCanCheckoutACart

	| tusLibros cartId purchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '' bookQuantity: 2.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	self assert: (Bag new) equals: purchases.
	self assert: 0 equals: purchases size.

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:04:57' prior: 50869483!
test07AClientCanCheckoutACart

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 2.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrencies: 2.

	self assert: (Bag new) equals: purchases.
	self assert: 0 equals: purchases size.

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:05:07' prior: 50869499!
test07AClientCanCheckoutACart

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 2.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 2.

	self assert: (Bag new) equals: purchases.
	self assert: 0 equals: purchases size.

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:05:16' prior: 50869519!
test07AClientCanCheckoutACart

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 2.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 2.

	self assert: (Bag new) equals: purchases.
	self assert: 2 equals: purchases size.

! !

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:05:19'!
FAILURE!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:05:32' prior: 50869539!
test07AClientCanCheckoutACart

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 2.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 2.

	self assert: expectedPurchases equals: purchases.
	self assert: 2 equals: purchases size.

! !

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:05:32'!
FAILURE!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:07:45' prior: 50869562!
test07AClientCanCheckoutACart

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 2.
	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 2.

	self assert: expectedPurchases equals: purchases.
	self assert: 2 equals: purchases size.

! !

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:07:47'!
ERROR!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:07:59'!
checkoutCart: aSmallInteger ccn: aString cced: aString3 cco: aString4 
	self shouldBeImplemented.! !

!classDefinition: #TusLibrosShop category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 17:08:35'!
Object subclass: #TusLibrosShop
	instanceVariableNames: 'carts checkout'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:08:43' prior: 50869610!
checkoutCart: aSmallInteger ccn: aString cced: aString3 cco: aString4 
	checkout := carts at: aSmallInteger.
! !
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:09:10' prior: 50869625!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	checkout := carts at: cartId.
! !

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:09:15'!
FAILURE!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:09:33'!
FAILURE!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:10:01' prior: 50869401!
listPurchasesFor: aClient password: password
	(checkout notNil) ifTrue: checkout copy.
	^Bag new.! !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:10:02'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:10:02'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:10:02'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:10:02'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:10:02'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:10:02'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:10:02'!
FAILURE!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:10:02'!
FAILURE!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:10:13' prior: 50869632!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	checkout := carts at: cartId copy.
! !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:10:13'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:10:13'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:10:13'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:10:13'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:10:13'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:10:13'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:10:13'!
FAILURE!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:10:13'!
FAILURE!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:10:45' prior: 50869585!
test07AClientCanCheckoutACart

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 2.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 2.

	self assert: expectedPurchases equals: purchases.
	self assert: 2 equals: purchases size.

! !

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:10:46'!
FAILURE!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:11:23' prior: 50869644!
listPurchasesFor: aClient password: password
	(checkout notNil) ifTrue: [^checkout copy].
	^Bag new.! !

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:11:24'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:11:24'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:11:24'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:11:24'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:11:24'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:11:24'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:11:24'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:11:24'!
PASSED!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:12:59'!
test08AClientCanCheckoutManyTimes

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 2.
	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-4' bookQuantity: 3.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 7.
	expectedPurchases add: '0-7645-2641-4' withOccurrences: 3.

	self assert: expectedPurchases equals: purchases.
	self assert: 10 equals: purchases size.

! !

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:13:01'!
FAILURE!
!TusLibrosShop methodsFor: 'initialization' stamp: 'IO 11/18/2020 17:15:06' prior: 50869309!
initializeFromCatalogue: aCatalogue users: users 

	carts := OrderedCollection new.
	checkout := Bag new.
! !
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:15:34' prior: 50869676!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	checkout addAll: (carts at: cartId).
! !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:15:40'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:15:40'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:15:40'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:15:40'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:15:40'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:15:40'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:15:40'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:15:40'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:15:45'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:15:45'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:15:45'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:15:45'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:15:45'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:15:45'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:15:45'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:15:45'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:15:45'!
PASSED!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:16:09'!
test09ManyClientsCanCheckout

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 2.
	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.
	
	cartId := tusLibros newCartForUser: 'admin2' Password: 'password'.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-4' bookQuantity: 3.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 7.
	expectedPurchases add: '0-7645-2641-4' withOccurrences: 3.

	self assert: expectedPurchases equals: purchases.
	self assert: 10 equals: purchases size.

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:16:19' prior: 50869869!
test09ManyClientsCanCheckout

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 2.
	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.
	
	cartId := tusLibros newCartForUser: 'admin2' Password: 'password'.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-4' bookQuantity: 3.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 5.
	expectedPurchases add: '0-7645-2641-4' withOccurrences: 3.

	self assert: expectedPurchases equals: purchases.
	self assert: 8 equals: purchases size.

! !

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:16:32'!
FAILURE!

Object subclass: #TusLibrosShop
	instanceVariableNames: 'carts cartClients checkout'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibrosShop category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 17:17:42'!
Object subclass: #TusLibrosShop
	instanceVariableNames: 'carts cartClients checkout'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 17:18:25' prior: 50869214!
newCartForUser: user Password: password 
	carts add: Bag new.
	cartClients add: user.
	^carts size.
! !
!TusLibrosShop methodsFor: 'initialization' stamp: 'IO 11/18/2020 17:18:54' prior: 50869802!
initializeFromCatalogue: aCatalogue users: users 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	checkout := Dictionary new.
! !

!classDefinition: #TusLibrosShop category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 17:19:12'!
Object subclass: #TusLibrosShop
	instanceVariableNames: 'carts cartClients checkout checkouts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:19:10' prior: 50869733!
listPurchasesFor: aClient password: password
	
	^checkouts! !
!TusLibrosShop methodsFor: 'initialization' stamp: 'IO 11/18/2020 17:19:16' prior: 50869960!
initializeFromCatalogue: aCatalogue users: users 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	checkouts := Dictionary new.
! !
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:19:33' prior: 50869977!
listPurchasesFor: user password: password
	
	^checkouts at: user.! !
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:19:38' prior: 50869990!
listPurchasesFor: user password: password
	
	^checkouts at: user copy.! !
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:20:07' prior: 50869809!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	
! !
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:22:35' prior: 50870001!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| clientId  |
	clientId := cartClients at: cartId.
	checkout := checkouts at: clientId.
	
! !

Object subclass: #TusLibrosShop
	instanceVariableNames: 'carts cartClients checkouts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibrosShop category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 17:22:41'!
Object subclass: #TusLibrosShop
	instanceVariableNames: 'carts cartClients checkouts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:24:05' prior: 50870006!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := checkouts at: clientId.
	checkout addAll: cart.

	
! !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:24:07'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:24:07'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:24:07'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:24:07'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:24:07'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:24:07'!
ERROR!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:24:07'!
ERROR!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:24:07'!
ERROR!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:24:07'!
ERROR!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:24:15'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:24:15'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:24:15'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:24:15'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:24:15'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:24:15'!
ERROR!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:24:15'!
ERROR!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:24:15'!
ERROR!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:24:15'!
ERROR!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:24:29'!
ERROR!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:24:43'!
ERROR!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:25:11'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:25:11'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:25:11'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:25:11'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:25:11'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:25:11'!
ERROR!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:25:11'!
ERROR!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:25:11'!
ERROR!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:25:11'!
ERROR!

checkouts at: 'asd'.!

checkouts!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:27:12' prior: 50869995!
listPurchasesFor: user password: password
	
	^checkouts at: user ifAbsent: (Bag new) copy.! !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:27:21'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:27:21'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:27:21'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:27:21'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:27:21'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:27:21'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:27:21'!
ERROR!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:27:21'!
ERROR!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:27:21'!
ERROR!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:27:48' prior: 50870131!
listPurchasesFor: user password: password
	
	^checkouts at: user ifAbsent: [^Bag new] copy.! !

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:27:51'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:27:53'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:27:53'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:27:53'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:27:53'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:27:53'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:27:53'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:27:53'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:27:53'!
ERROR!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:27:53'!
ERROR!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:27:53'!
ERROR!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:28:05'!
ERROR!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:28:09'!
ERROR!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:28:09'!
ERROR!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:29:00'!
ERROR!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:30:03' prior: 50870028!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := checkouts at: clientId ifAbsent: [Bag new].
	checkout addAll: cart.

	
! !

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:30:05'!
FAILURE!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:30:48' prior: 50870220!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := checkouts at: clientId ifAbsent: [Bag new].
	checkout addAll: cart.
	checkouts at: clientId put: checkout.

	
! !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:31:05'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:31:05'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:31:05'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:31:05'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:31:05'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:31:05'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:31:05'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:31:05'!
PASSED!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:31:05'!
FAILURE!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:31:05'!
FAILURE!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:31:14'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:31:14'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:31:14'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:31:14'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:31:14'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:31:14'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:31:14'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:31:14'!
PASSED!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:31:14'!
FAILURE!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:31:14'!
FAILURE!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:31:39' prior: 50869903!
test09ManyClientsCanCheckout

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 2.
	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.
	
	cartId := tusLibros newCartForUser: 'admin2' Password: 'password'.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-4' bookQuantity: 3.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin2' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 5.
	expectedPurchases add: '0-7645-2641-4' withOccurrences: 3.

	self assert: expectedPurchases equals: purchases.
	self assert: 8 equals: purchases size.

! !

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:31:41'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:31:41'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:31:41'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:31:41'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:31:41'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:31:41'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:31:41'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:31:41'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:31:41'!
PASSED!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:31:41'!
PASSED!

----SNAPSHOT----(18 November 2020 17:35:01) CuisUniversity-4384.image priorSource: 17160590!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:39:34'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:39:34'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:39:34'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:39:34'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:39:34'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:39:34'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:39:34'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:39:34'!
PASSED!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:39:34'!
PASSED!

!classDefinition: #TusLibrosShop category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 17:39:42'!
Object subclass: #TusLibrosShop
	instanceVariableNames: 'carts cartClients purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosShop methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:39:42' prior: 50870234!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := purchases at: clientId ifAbsent: [Bag new].
	checkout addAll: cart.
	purchases at: clientId put: checkout.

	
! !
!TusLibrosShop methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:39:42' prior: 50869982!
initializeFromCatalogue: aCatalogue users: users 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	purchases := Dictionary new.
! !
!TusLibrosShop methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:39:42' prior: 50870166!
listPurchasesFor: user password: password
	
	^purchases at: user ifAbsent: [^Bag new] copy.! !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:39:45'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:39:45'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:39:45'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:39:45'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:39:45'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:39:45'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:39:45'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:39:45'!
PASSED!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:39:45'!
PASSED!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 17:40:14'!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity
	| cart |
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.! !

!methodRemoval: TusLibrosShop #addToCart:booksIsbn:bookQuantity: stamp: 'IO 11/18/2020 17:40:14'!
addToCart: cartId booksIsbn: isbn bookQuantity: quantity
	| cart |
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:40:17'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:40:17'!
ERROR!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:40:17'!
ERROR!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:40:17'!
ERROR!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:40:17'!
ERROR!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:40:17'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:40:17'!
ERROR!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:40:17'!
ERROR!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:40:17'!
ERROR!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 17:40:25'!
addToCart: cartId booksIsbn: isbn bookQuantity: quantity
	| cart |
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.! !

!methodRemoval: TusLibrosShop #addToCart:bookIsbn:bookQuantity: stamp: 'IO 11/18/2020 17:40:25'!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity
	| cart |
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 17:40:30'!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity
	| cart |
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:40:30' prior: 50868767!
test02CanAddABookToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 1.
	
	cart := Bag new.
	cart add: '0-7645-2641-3'.

	self assert: cart equals: (tusLibros listCart: cartId).

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:40:31' prior: 50868825!
test03CanAddDifferentBooksToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 1.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 1.

	cart := Bag new.
	cart add: '0-7645-2641-3'.
	cart add: '0-7645-2641-4'.

	self assert: cart equals: (tusLibros listCart: cartId).

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:40:31' prior: 50869252!
test05CanAddMoreThanOneCart

	| tusLibros cartId cartId2 cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	cartId2 := tusLibros newCartForUser: 'admin2' Password: 'password'.

	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 3.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 2.
	
	tusLibros addToCart: cartId2 bookIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId2 bookIsbn: '0-7645-2641-4' bookQuantity: 3.

	cart := Bag new.
	cart add: '0-7645-2641-3' withOccurrences: 5.
	cart add: '0-7645-2641-4' withOccurrences: 3.

	self assert: cart equals: (tusLibros listCart: cartId2).

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:40:31' prior: 50869708!
test07AClientCanCheckoutACart

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 2.

	self assert: expectedPurchases equals: purchases.
	self assert: 2 equals: purchases size.

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:40:31' prior: 50869765!
test08AClientCanCheckoutManyTimes

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.
	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 3.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 7.
	expectedPurchases add: '0-7645-2641-4' withOccurrences: 3.

	self assert: expectedPurchases equals: purchases.
	self assert: 10 equals: purchases size.

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:40:31' prior: 50870310!
test09ManyClientsCanCheckout

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.
	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.
	
	cartId := tusLibros newCartForUser: 'admin2' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 3.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin2' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 5.
	expectedPurchases add: '0-7645-2641-4' withOccurrences: 3.

	self assert: expectedPurchases equals: purchases.
	self assert: 8 equals: purchases size.

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:40:31' prior: 50868973!
test04CanAddMoreThanOneBookToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 3.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 2.

	cart := Bag new.
	cart add: '0-7645-2641-3' withOccurrences: 3.
	cart add: '0-7645-2641-4' withOccurrences: 2.

	self assert: cart equals: (tusLibros listCart: cartId).

! !

!methodRemoval: TusLibrosShop #addToCart:booksIsbn:bookQuantity: stamp: 'IO 11/18/2020 17:40:31'!
addToCart: cartId booksIsbn: isbn bookQuantity: quantity
	| cart |
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:40:33'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:40:33'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:40:33'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:40:33'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:40:33'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:40:33'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:40:33'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:40:33'!
PASSED!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:40:33'!
PASSED!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 17:40:38' prior: 50869191!
listCart: cartId 
	^(carts at: cartId) copy.
! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 17:40:42' prior: 50870738!
listCart: cartId 
	^carts at: cartId copy.
! !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:40:42'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:40:42'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:40:42'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:40:42'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:40:42'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:40:42'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:40:42'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:40:42'!
PASSED!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:40:42'!
PASSED!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 17:40:56' prior: 50869953!
newCartForUser: user Password: password
	carts add: Bag new.
	cartClients add: user.
	^carts size.
! !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:40:57'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:40:57'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:40:57'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:40:57'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:40:57'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:40:57'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:40:57'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:40:57'!
PASSED!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:40:57'!
PASSED!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 17:41:29'!
newCartForClientId: user Password: password
	carts add: Bag new.
	cartClients add: user.
	^carts size.
! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:41:29' prior: 50870650!
test09ManyClientsCanCheckout

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.
	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.
	
	cartId := tusLibros newCartForClientId: 'admin2' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 3.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin2' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 5.
	expectedPurchases add: '0-7645-2641-4' withOccurrences: 3.

	self assert: expectedPurchases equals: purchases.
	self assert: 8 equals: purchases size.

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:41:29' prior: 50870593!
test07AClientCanCheckoutACart

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 2.

	self assert: expectedPurchases equals: purchases.
	self assert: 2 equals: purchases size.

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:41:29' prior: 50870616!
test08AClientCanCheckoutManyTimes

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.
	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 3.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 7.
	expectedPurchases add: '0-7645-2641-4' withOccurrences: 3.

	self assert: expectedPurchases equals: purchases.
	self assert: 10 equals: purchases size.

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:41:29' prior: 50870684!
test04CanAddMoreThanOneBookToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 3.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 2.

	cart := Bag new.
	cart add: '0-7645-2641-3' withOccurrences: 3.
	cart add: '0-7645-2641-4' withOccurrences: 2.

	self assert: cart equals: (tusLibros listCart: cartId).

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:41:29' prior: 50870567!
test05CanAddMoreThanOneCart

	| tusLibros cartId cartId2 cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	cartId2 := tusLibros newCartForClientId: 'admin2' Password: 'password'.

	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 3.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 2.
	
	tusLibros addToCart: cartId2 bookIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId2 bookIsbn: '0-7645-2641-4' bookQuantity: 3.

	cart := Bag new.
	cart add: '0-7645-2641-3' withOccurrences: 5.
	cart add: '0-7645-2641-4' withOccurrences: 3.

	self assert: cart equals: (tusLibros listCart: cartId2).

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:41:29' prior: 50870535!
test02CanAddABookToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 1.
	
	cart := Bag new.
	cart add: '0-7645-2641-3'.

	self assert: cart equals: (tusLibros listCart: cartId).

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:41:29' prior: 50870549!
test03CanAddDifferentBooksToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 1.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 1.

	cart := Bag new.
	cart add: '0-7645-2641-3'.
	cart add: '0-7645-2641-4'.

	self assert: cart equals: (tusLibros listCart: cartId).

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:41:29' prior: 50868525!
test01NewCartIsEmpty

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
! !

!methodRemoval: TusLibrosShop #newCartForUser:Password: stamp: 'IO 11/18/2020 17:41:29'!
newCartForUser: user Password: password
	carts add: Bag new.
	cartClients add: user.
	^carts size.
!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:41:31'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:41:31'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:41:31'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:41:31'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:41:31'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:41:31'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:41:31'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:41:31'!
PASSED!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:41:31'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:45:47'!
PASSED!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:45:47'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:45:47'!
PASSED!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:46:13' prior: 50870416!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := purchases at: clientId ifAbsent: [Bag new].
	checkout addAll: cart.
	purchases at: clientId put: checkout.
! !
!TusLibrosShop methodsFor: 'initialization' stamp: 'IO 11/18/2020 17:48:46'!
initializeWithCatalogue: aCatalogue withUsers: users 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	purchases := Dictionary new.
! !
!TusLibrosShop class methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:48:46' prior: 50868244!
fromCatalogue: anOrderedCollection users: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"

	^self new initializeWithCatalogue: anOrderedCollection withUsers: aDictionary ! !

!methodRemoval: TusLibrosShop #initializeFromCatalogue:users: stamp: 'IO 11/18/2020 17:48:46'!
initializeFromCatalogue: aCatalogue users: users 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	purchases := Dictionary new.
!
!TusLibrosShop class methodsFor: 'instance creation' stamp: 'IO 11/18/2020 17:49:02'!
withCatalogue: anOrderedCollection withClients: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"

	^self new initializeWithCatalogue: anOrderedCollection withUsers: aDictionary ! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:49:02' prior: 50869036!
newTusLibros

	| tusLibros users catalogue |
	
	catalogue := OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4'.
	users := Dictionary newFromPairs: #('admin', 'password', 'admin2', 'password').
	tusLibros := TusLibrosShop withCatalogue: catalogue withClients: users.

	^tusLibros.
! !

!methodRemoval: TusLibrosShop class #fromCatalogue:users: stamp: 'IO 11/18/2020 17:49:02'!
fromCatalogue: anOrderedCollection users: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"

	^self new initializeWithCatalogue: anOrderedCollection withUsers: aDictionary !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:49:04'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:49:04'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:49:04'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:49:04'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:49:04'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:49:04'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:49:04'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:49:04'!
PASSED!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:49:04'!
PASSED!
!TusLibrosShop methodsFor: 'initialization' stamp: 'IO 11/18/2020 17:49:17'!
initializeWithCatalogue: aCatalogue withClients: users 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	purchases := Dictionary new.
! !
!TusLibrosShop class methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:49:17' prior: 50871077!
withCatalogue: anOrderedCollection withClients: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"

	^self new initializeWithCatalogue: anOrderedCollection withClients: aDictionary ! !

!methodRemoval: TusLibrosShop #initializeWithCatalogue:withUsers: stamp: 'IO 11/18/2020 17:49:17'!
initializeWithCatalogue: aCatalogue withUsers: users 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	purchases := Dictionary new.
!
!TusLibrosShop methodsFor: 'initialization' stamp: 'IO 11/18/2020 17:49:48' prior: 50871137!
initializeWithCatalogue: aCatalogue withClients: clients 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	purchases := Dictionary new.
! !
!TusLibrosShop class methodsFor: 'instance creation' stamp: 'IO 11/18/2020 17:50:12' prior: 50871146!
withCatalogue: aCatalogue withClients: clients 

	^self new initializeWithCatalogue: aCatalogue withClients: clients.
 ! !
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:50:27' prior: 50870436!
listPurchasesFor: user password: password
	
	^purchases at: user ifAbsent: [^Bag new] copy.
! !
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:51:06' prior: 50871180!
listPurchasesFor: clientId password: password
	
	^purchases at: clientId ifAbsent: [^Bag new] copy.
! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 17:51:16' prior: 50870810!
newCartForClientId: clientId Password: password
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibros category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 17:52:51'!
Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #TusLibros stamp: 'IO 11/18/2020 17:52:54'!
Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRenamed: #TusLibrosShop as: #TusLibros stamp: 'IO 11/18/2020 17:52:57'!
Smalltalk renameClassNamed: #TusLibrosShop as: #TusLibros!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:52:57' prior: 50871087!
newTusLibros

	| tusLibros users catalogue |
	
	catalogue := OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4'.
	users := Dictionary newFromPairs: #('admin', 'password', 'admin2', 'password').
	tusLibros := TusLibros withCatalogue: catalogue withClients: users.

	^tusLibros.
! !

!classRenamed: #TusLibrosShopTest as: #TusLibrosTest stamp: 'IO 11/18/2020 17:53:03'!
Smalltalk renameClassNamed: #TusLibrosShopTest as: #TusLibrosTest!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:53:05'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:53:05'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:53:05'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:53:05'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:53:05'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:53:05'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:53:05'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:53:05'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:53:05'!
PASSED!

!classDefinition: #TusLibros category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 17:53:38'!
Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients clientPurchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibros methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:53:38' prior: 50871039!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := clientPurchases at: clientId ifAbsent: [Bag new].
	checkout addAll: cart.
	clientPurchases at: clientId put: checkout.
! !
!TusLibros methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:53:38' prior: 50871164!
initializeWithCatalogue: aCatalogue withClients: clients 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientPurchases := Dictionary new.
! !
!TusLibros methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:53:38' prior: 50871186!
listPurchasesFor: clientId password: password
	
	^clientPurchases at: clientId ifAbsent: [^Bag new] copy.
! !

!classDefinition: #TusLibros category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 17:53:52'!
Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients clientsPurchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibros methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:53:52' prior: 50871277!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := clientsPurchases at: clientId ifAbsent: [Bag new].
	checkout addAll: cart.
	clientsPurchases at: clientId put: checkout.
! !
!TusLibros methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:53:52' prior: 50871289!
initializeWithCatalogue: aCatalogue withClients: clients 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !
!TusLibros methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:53:52' prior: 50871298!
listPurchasesFor: clientId password: password
	
	^clientsPurchases at: clientId ifAbsent: [^Bag new] copy.
! !

Object subclass: #TusLibrosClientPurchases
	instanceVariableNames: 'purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibrosClientPurchases category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 17:54:13'!
Object subclass: #TusLibrosClientPurchases
	instanceVariableNames: 'purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:55:12' prior: 50871313!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := clientsPurchases at: clientId ifAbsent: [TusLibrosClientPurchases new].
	checkout addAll: cart.
	clientsPurchases at: clientId put: checkout.
! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:55:24' prior: 50871354!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := clientsPurchases at: clientId ifAbsent: [TusLibrosClientPurchases new].
	checkout addCart: cart.
	clientsPurchases at: clientId put: checkout.
! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:55:29' prior: 50871367!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := clientsPurchases at: clientId ifAbsent: [TusLibrosClientPurchases new].
	checkout addCart: cart.
! !
!TusLibrosClientPurchases methodsFor: 'no messages' stamp: 'IO 11/18/2020 17:55:56'!
addCart: aCart
	purchases addAll: aCart.
! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:56:39' prior: 50871334!
listPurchasesFor: clientId password: password
	
	^clientsPurchases at: clientId ifAbsent: [^TusLibrosClientPurchases new] copy.
! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:57:06' prior: 50871380!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := clientsPurchases at: clientId ifAbsent: [TusLibrosClientPurchases new].
	checkout addCart: cart.
	clientsPurchases at: clientId put: checkout.
! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:58:23' prior: 50871396!
listPurchasesFor: clientId password: password
	
	
	^clientsPurchases at: clientId ifAbsent: [^Bag new] copy.
! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:58:27' prior: 50871403!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := clientsPurchases at: clientId ifAbsent: [Bag new].
	checkout addCart: cart.
	clientsPurchases at: clientId put: checkout.
! !

!classRemoval: #TusLibrosClientPurchases stamp: 'IO 11/18/2020 17:58:30'!
Object subclass: #TusLibrosClientPurchases
	instanceVariableNames: 'purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:58:31'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:58:31'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:58:31'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:58:31'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:58:31'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:58:31'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:58:31'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:58:31'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:58:31'!
ERROR!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:58:41' prior: 50871423!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := clientsPurchases at: clientId ifAbsent: [Bag new].
	checkout add: cart.
	clientsPurchases at: clientId put: checkout.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:58:42'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:58:42'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:58:42'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:58:42'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:58:42'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:58:42'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:58:42'!
FAILURE!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:58:42'!
FAILURE!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:58:42'!
FAILURE!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:58:46' prior: 50871470!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := clientsPurchases at: clientId ifAbsent: [Bag new].
	checkout addAll: cart.
	clientsPurchases at: clientId put: checkout.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:58:47'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:58:47'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:58:47'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:58:47'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:58:47'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:58:47'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:58:47'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:58:47'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:58:47'!
PASSED!

Object subclass: #TusLibrosClientCarts
	instanceVariableNames: 'clientId carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibrosClientCarts category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 18:00:25'!
Object subclass: #TusLibrosClientCarts
	instanceVariableNames: 'clientId carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:00:51' prior: 50871192!
newCartForClientId: clientId Password: password
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients clientsPurchases clientsCarts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibros category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 18:01:01'!
Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients clientsPurchases clientsCarts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:01:35' prior: 50871562!
newCartForClientId: clientId Password: password
	carts add: Bag new.
	cartClients add: clientId.
	clientsCarts add: TusLibrosClientCarts new.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:01:40'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:01:40'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:01:40'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:01:40'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:01:40'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:01:40'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:01:40'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:01:40'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:01:40'!
ERROR!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:01:51'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:01:51'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:01:51'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:01:51'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:01:51'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:01:51'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:01:51'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:01:51'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:01:51'!
ERROR!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:01:56'!
ERROR!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 18:02:44' prior: 50871325!
initializeWithCatalogue: aCatalogue withClients: clients 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsCarts := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:02:45'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:02:45'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:02:45'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:02:45'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:02:45'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:02:45'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:02:45'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:02:45'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:02:45'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:02:59' prior: 50870527!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity
	| cart |
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:04:22' prior: 50871686!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart clientCart |
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.
	
	clientCart add: isbn withOccurrences: quantity.! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:04:38' prior: 50871693!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart clientCart |
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.
	
	clientCart := clientsCarts at: cartId.
	clientCart add: isbn withOccurrences: quantity.! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:04:39'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:04:39'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:04:39'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:04:39'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:04:39'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:04:39'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:04:39'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:04:39'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:04:39'!
ERROR!
!TusLibrosClientCarts methodsFor: 'nil' stamp: 'IO 11/18/2020 18:04:49'!
add: isbn withOccurrences: quantity.
	! !

!classDefinition: #TusLibrosClientCarts category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 18:05:13'!
Object subclass: #TusLibrosClientCarts
	instanceVariableNames: 'clientId carts bag'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:05:39' prior: 50871702!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart clientCart |
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.
	! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:05:41' prior: 50871753!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart |
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:05:50' prior: 50871583!
newCartForClientId: clientId Password: password
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients clientsPurchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibros category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 18:05:55'!
Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients clientsPurchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:05:57'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:05:57'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:05:57'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:05:57'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:05:57'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:05:57'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:05:57'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:05:57'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:05:57'!
PASSED!

!classRemoval: #TusLibrosClientCarts stamp: 'IO 11/18/2020 18:06:00'!
Object subclass: #TusLibrosClientCarts
	instanceVariableNames: 'clientId carts bag'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:06:01'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:06:01'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:06:01'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:06:01'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:06:01'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:06:01'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:06:01'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:06:01'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:06:01'!
PASSED!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 18:06:07' prior: 50871649!
initializeWithCatalogue: aCatalogue withClients: clients 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.

	clientsPurchases := Dictionary new.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:06:08'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:06:08'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:06:08'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:06:08'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:06:08'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:06:08'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:06:08'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:06:08'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:06:08'!
PASSED!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 18:06:10' prior: 50871851!
initializeWithCatalogue: aCatalogue withClients: clients 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !
!TusLibrosTest methodsFor: 'cart' stamp: 'IO 11/18/2020 18:08:38'!
test10ClientIdExists

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin3' Password: 'password'.
	
	self should: [] raise: Error withMessageText: TusLibros inexistentClient.
! !
!TusLibrosTest methodsFor: 'cart' stamp: 'IO 11/18/2020 18:08:58' prior: 50871895!
test10ClientIdExists

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros newCartForClientId: 'admin3' Password: 'password'.]
		raise: Error
		withMessageText: TusLibros inexistentClient.
! !

!testRun: #TusLibrosTest #test10ClientIdExists stamp: 'IO 11/18/2020 18:09:01'!
ERROR!
!TusLibros class methodsFor: 'error messages' stamp: 'IO 11/18/2020 18:09:23'!
inexistentClient
	self shouldBeImplemented.! !
!TusLibros class methodsFor: 'error messages' stamp: 'IO 11/18/2020 18:09:39' prior: 50871917!
inexistentClient
	^'Client id not existent'.
! !

!testRun: #TusLibrosTest #test10ClientIdExists stamp: 'IO 11/18/2020 18:09:42'!
FAILURE!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:10:06' prior: 50871768!
newCartForClientId: clientId Password: password
	
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !
!TusLibros class methodsFor: 'instance creation' stamp: 'IO 11/18/2020 18:10:56' prior: 50871173!
withCatalogue: aCatalogue withClients: aClientList 

	^self new initializeWithCatalogue: aCatalogue withClients: aClientList.
 ! !
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 18:11:07' prior: 50871887!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !

!classDefinition: #TusLibros category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 18:11:16'!
Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients clientsPurchases clients'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 18:11:14' prior: 50871943!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	clients := aClientList.

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:12:20' prior: 50871929!
newCartForClientId: clientId Password: password
	(clients ) ifTrue: [^self error: TusLibros].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !
!TusLibros class methodsFor: 'error messages' stamp: 'IO 11/18/2020 18:12:32'!
inexistentClientErrorMessage
	^'Client id not existent'.
! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 18:12:32' prior: 50871905!
test10ClientIdExists

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros newCartForClientId: 'admin3' Password: 'password'.]
		raise: Error
		withMessageText: TusLibros inexistentClientErrorMessage.
! !

!methodRemoval: TusLibros class #inexistentClient stamp: 'IO 11/18/2020 18:12:32'!
inexistentClient
	^'Client id not existent'.
!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:12:43' prior: 50871970!
newCartForClientId: clientId Password: password
	(clients ) ifTrue: [^self error: TusLibros inexistentClientErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:13:51' prior: 50871997!
newCartForClientId: clientId Password: password
	(clients includes: clientId negated) ifTrue: [^self error: TusLibros inexistentClientErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:13:53'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:13:53'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:13:53'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:13:53'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:13:53'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:13:53'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:13:53'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:13:53'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:13:53'!
ERROR!

!testRun: #TusLibrosTest #test10ClientIdExists stamp: 'IO 11/18/2020 18:13:53'!
FAILURE!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:14:10' prior: 50872006!
newCartForClientId: clientId Password: password
	(clients includesKey: clientId negated) ifTrue: [^self error: TusLibros inexistentClientErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:14:11'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:14:11'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:14:11'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:14:11'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:14:11'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:14:11'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:14:11'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:14:11'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:14:11'!
ERROR!

!testRun: #TusLibrosTest #test10ClientIdExists stamp: 'IO 11/18/2020 18:14:11'!
FAILURE!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:14:26' prior: 50872046!
newCartForClientId: clientId Password: password
	((clients includesKey: clientId) negated) ifTrue: [^self error: TusLibros inexistentClientErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:14:27'!
ERROR!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:14:37' prior: 50872086!
newCartForClientId: clientId Password: password
	((clients includesKey: clientId) not) ifTrue: [^self error: TusLibros inexistentClientErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosTest #test10ClientIdExists stamp: 'IO 11/18/2020 18:14:38'!
PASSED!
!TusLibrosTest methodsFor: 'newCart validations' stamp: 'IO 11/18/2020 18:15:37'!
test11ClientPasswordMatches

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros newCartForClientId: 'admin' Password: 'password2'.]
		raise: Error
		withMessageText: TusLibros invalidPasswordErrorMessage.
! !

!testRun: #TusLibrosTest #test11ClientPasswordMatches stamp: 'IO 11/18/2020 18:15:39'!
ERROR!
!TusLibros class methodsFor: 'error messages' stamp: 'IO 11/18/2020 18:15:51'!
invalidPasswordErrorMessage
	self shouldBeImplemented.! !
!TusLibros class methodsFor: 'error messages' stamp: 'IO 11/18/2020 18:16:09' prior: 50872152!
invalidPasswordErrorMessage
	^'Invalid password'.
! !

!testRun: #TusLibrosTest #test11ClientPasswordMatches stamp: 'IO 11/18/2020 18:16:14'!
FAILURE!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:17:28' prior: 50872099!
newCartForClientId: clientId Password: password
	((clients includesKey: clientId) not) ifTrue: [^self error: TusLibros inexistentClientErrorMessage].
	((clients at: clientId) equals: password not) ifTrue: [^self error: TusLibros invalidPasswordErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:17:31'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:17:31'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:17:31'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:17:31'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:17:31'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:17:31'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:17:31'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:17:31'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:17:31'!
ERROR!

!testRun: #TusLibrosTest #test10ClientIdExists stamp: 'IO 11/18/2020 18:17:31'!
PASSED!

!testRun: #TusLibrosTest #test11ClientPasswordMatches stamp: 'IO 11/18/2020 18:17:31'!
FAILURE!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:18:21' prior: 50872165!
newCartForClientId: clientId Password: password
	((clients includesKey: clientId) not) ifTrue: [^self error: TusLibros inexistentClientErrorMessage].
	(((clients at: clientId) equals: password) not) ifTrue: [^self error: TusLibros invalidPasswordErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:18:23'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:18:23'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:18:23'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:18:23'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:18:23'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:18:23'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:18:23'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:18:23'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:18:23'!
ERROR!

!testRun: #TusLibrosTest #test10ClientIdExists stamp: 'IO 11/18/2020 18:18:23'!
PASSED!

!testRun: #TusLibrosTest #test11ClientPasswordMatches stamp: 'IO 11/18/2020 18:18:23'!
FAILURE!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:18:37' prior: 50872211!
newCartForClientId: clientId Password: password
	((clients includesKey: clientId) not) ifTrue: [^self error: TusLibros inexistentClientErrorMessage].
	(((clients at: clientId) = password) not) ifTrue: [^self error: TusLibros invalidPasswordErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:18:38'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:18:38'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:18:38'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:18:38'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:18:38'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:18:38'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:18:38'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:18:38'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:18:38'!
ERROR!

!testRun: #TusLibrosTest #test10ClientIdExists stamp: 'IO 11/18/2020 18:18:38'!
PASSED!

!testRun: #TusLibrosTest #test11ClientPasswordMatches stamp: 'IO 11/18/2020 18:18:38'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:18:44' prior: 50872257!
newCartForClientId: clientId Password: password
	((clients includesKey: clientId) not) ifTrue: [^self error: TusLibros inexistentClientErrorMessage].
	(((clients at: clientId) = password) not) ifTrue: [^self error: TusLibros invalidPasswordErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:18:45'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:18:45'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:18:45'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:18:45'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:18:45'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:18:45'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:18:45'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:18:45'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:18:45'!
ERROR!

!testRun: #TusLibrosTest #test10ClientIdExists stamp: 'IO 11/18/2020 18:18:45'!
PASSED!

!testRun: #TusLibrosTest #test11ClientPasswordMatches stamp: 'IO 11/18/2020 18:18:45'!
PASSED!

clients at: clientId!

clients at: 1!

clients at: 'admin'!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:19:38'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:19:38'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:19:38'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:19:38'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:19:38'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:19:38'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:19:38'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:19:38'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:19:38'!
ERROR!

!testRun: #TusLibrosTest #test10ClientIdExists stamp: 'IO 11/18/2020 18:19:38'!
PASSED!

!testRun: #TusLibrosTest #test11ClientPasswordMatches stamp: 'IO 11/18/2020 18:19:38'!
PASSED!

users!

users at: 'admin'!
!TusLibrosTest methodsFor: 'valid instances' stamp: 'IO 11/18/2020 18:20:03' prior: 50871224!
newTusLibros

	| tusLibros users catalogue |
	
	catalogue := OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4'.
	users := Dictionary newFromPairs: #('admin' 'password' 'admin2' 'password').
	tusLibros := TusLibros withCatalogue: catalogue withClients: users.

	^tusLibros.
! !

users at: 'admin'!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:20:17'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:20:20'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:20:20'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:20:20'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:20:20'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:20:20'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:20:20'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:20:20'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:20:20'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:20:20'!
PASSED!

!testRun: #TusLibrosTest #test10ClientIdExists stamp: 'IO 11/18/2020 18:20:20'!
PASSED!

!testRun: #TusLibrosTest #test11ClientPasswordMatches stamp: 'IO 11/18/2020 18:20:20'!
PASSED!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:21:14'!
test11CreateCartClientPasswordMatches

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros newCartForClientId: 'admin' Password: 'password2'.]
		raise: Error
		withMessageText: TusLibros invalidPasswordErrorMessage.
! !

!methodRemoval: TusLibrosTest #test11ClientPasswordMatches stamp: 'IO 11/18/2020 18:21:14'!
test11ClientPasswordMatches

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros newCartForClientId: 'admin' Password: 'password2'.]
		raise: Error
		withMessageText: TusLibros invalidPasswordErrorMessage.
!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:21:20'!
test10CreateCartClientIdExists

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros newCartForClientId: 'admin3' Password: 'password'.]
		raise: Error
		withMessageText: TusLibros inexistentClientErrorMessage.
! !

!methodRemoval: TusLibrosTest #test10ClientIdExists stamp: 'IO 11/18/2020 18:21:20'!
test10ClientIdExists

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros newCartForClientId: 'admin3' Password: 'password'.]
		raise: Error
		withMessageText: TusLibros inexistentClientErrorMessage.
!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:21:50' prior: 50872303!
newCartForClientId: clientId Password: password

	(((clients at: clientId ifAbsent: [^self error: TusLibros inexistentClientErrorMessage]) = password) not) ifTrue: [^self error: TusLibros invalidPasswordErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:21:51'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:21:51'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:21:51'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:21:51'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:21:51'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:21:51'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:21:51'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:21:51'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:21:51'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:21:51'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:21:51'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:22:41' prior: 50872476!
newCartForClientId: clientId Password: password
	(
		(
			(clients at: clientId
				ifAbsent: [^self error: TusLibros inexistentClientErrorMessage]) = password
			) not
	) ifTrue: [^self error: TusLibros invalidPasswordErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:22:42'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:22:42'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:22:42'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:22:42'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:22:42'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:22:42'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:22:42'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:22:42'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:22:42'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:22:42'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:22:42'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:22:51' prior: 50872522!
newCartForClientId: clientId Password: password
	(
		(
			(clients at: clientId
				ifAbsent: [^self error: TusLibros inexistentClientErrorMessage]) = password) not
	) ifTrue: [^self error: TusLibros invalidPasswordErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:22:57' prior: 50872568!
newCartForClientId: clientId Password: password
	(
		((clients at: clientId
				ifAbsent: [^self error: TusLibros inexistentClientErrorMessage]) = password) not
	) ifTrue: [^self error: TusLibros invalidPasswordErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:22:58'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:22:58'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:22:58'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:22:58'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:22:58'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:22:58'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:22:58'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:22:58'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:22:58'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:22:58'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:22:58'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:23:07' prior: 50872580!
newCartForClientId: clientId Password: password
	(
		(clients at: clientId
				ifAbsent: [^self error: TusLibros inexistentClientErrorMessage]) = password not
	) ifTrue: [^self error: TusLibros invalidPasswordErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:23:08'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:23:08'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:23:08'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:23:08'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:23:08'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:23:08'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:23:08'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:23:08'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:23:08'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:23:08'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:23:08'!
FAILURE!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:23:11' prior: 50872626!
newCartForClientId: clientId Password: password
	(
		((clients at: clientId
				ifAbsent: [^self error: TusLibros inexistentClientErrorMessage]) = password) not
	) ifTrue: [^self error: TusLibros invalidPasswordErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:23:12'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:23:12'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:23:12'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:23:12'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:23:12'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:23:12'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:23:12'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:23:12'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:23:12'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:23:12'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:23:12'!
PASSED!
!TusLibrosTest methodsFor: 'cart' stamp: 'IO 11/18/2020 18:25:02'!
test12AddToCartHasValidCartId

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := 1.
	
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 1.
	
	cart := Bag new.
	cart add: '0-7645-2641-3'.

	self assert: cart equals: (tusLibros listCart: cartId).

! !

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:25:21'!
ERROR!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:26:04' prior: 50872718!
test12AddToCartHasValidCartId

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros addToCart: 1 bookIsbn: '0-7645-2641-3' bookQuantity: 1.]
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.


! !

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:26:08'!
ERROR!
!TusLibros class methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 18:26:16'!
invalidCartIdErrorMessage
	self shouldBeImplemented.! !
!TusLibros class methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 18:26:25' prior: 50872747!
invalidCartIdErrorMessage
	'Invalid cart id'.! !

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:26:27'!
FAILURE!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:27:10' prior: 50871761!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart |
	(cartId > carts size) ifTrue: [^self error: TusLibros invalidCartIdErrorMessage ].
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:27:12' prior: 50872760!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart |
	(cartId > carts size) ifTrue: [^self error: TusLibros invalidCartIdErrorMessage].
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:27:13'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:27:13'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:27:13'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:27:13'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:27:13'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:27:13'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:27:13'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:27:13'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:27:13'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:27:13'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:27:13'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:27:13'!
PASSED!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:28:32'!
test13AddToCartHasValidISBN

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [ | cartId |tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 1.]
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.


! !
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:28:59' prior: 50872817!
test13AddToCartHasValidISBN

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	
	self should: [ tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 1.]
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.


! !

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 18:29:00'!
FAILURE!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:29:12' prior: 50872828!
test13AddToCartHasValidISBN

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	
	self should: [ tusLibros addToCart: cartId bookIsbn: 'bad isbn' bookQuantity: 1.]
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.


! !

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 18:29:13'!
FAILURE!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:29:17' prior: 50872844!
test13AddToCartHasValidISBN

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	
	self should: [ tusLibros addToCart: cartId bookIsbn: 'bad isbn' bookQuantity: 1.]
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.

! !

!classDefinition: #TusLibros category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 18:29:35'!
Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients clientsPurchases clients catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 18:29:32' prior: 50871961!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	clients := aClientList.

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:30:22' prior: 50872770!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart |
	(cartId > carts size) ifTrue: [^self error: TusLibros invalidCartIdErrorMessage].
	(catalogue includes: isbn) ifFalse: [^self error: TusLibros invalidIsbn].
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.
! !
!TusLibros class methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 18:30:40'!
invalidIsbn
	^'Isbn not in catalogue'.
! !
!TusLibros class methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 18:30:44'!
invalidIsbnErrorMessage
	^'Isbn not in catalogue'.
! !

!methodRemoval: TusLibros class #invalidIsbn stamp: 'IO 11/18/2020 18:30:47'!
invalidIsbn
	^'Isbn not in catalogue'.
!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:30:58' prior: 50872892!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart |
	(cartId > carts size) ifTrue: [^self error: TusLibros invalidCartIdErrorMessage].
	(catalogue includes: isbn) ifFalse: [^self error: TusLibros invalidIsbnErrorMessage].
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.
! !
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:31:04' prior: 50872860!
test13AddToCartHasValidISBN

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	
	self should: [ tusLibros addToCart: cartId bookIsbn: 'bad isbn' bookQuantity: 1.]
		raise: Error
		withMessageText: TusLibros invalidIsbnErrorMessage.

! !

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 18:31:04'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:31:04'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:31:04'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:31:04'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:31:04'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:31:04'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:31:04'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:31:04'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:31:04'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:31:04'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:31:04'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:31:04'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:31:05'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 18:31:05'!
PASSED!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:31:23'!
test14AddToCartHasValidQuantity

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	
	self should: [ tusLibros addToCart: cartId bookIsbn: 'bad isbn' bookQuantity: 1.]
		raise: Error
		withMessageText: TusLibros invalidIsbnErrorMessage.

! !
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:31:51' prior: 50872985!
test14AddToCartHasValidQuantity

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	
	self should: [ tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 0.]
		raise: Error
		withMessageText: TusLibros invalidQuantityErrorMessage.

! !

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 18:31:53'!
ERROR!
!TusLibros class methodsFor: 'error messages' stamp: 'IO 11/18/2020 18:32:01'!
invalidQuantityErrorMessage
	self shouldBeImplemented.! !
!TusLibros class methodsFor: 'error messages' stamp: 'IO 11/18/2020 18:32:12' prior: 50873014!
invalidQuantityErrorMessage
	^'Quantity added must be more than 0'.! !

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 18:32:15'!
FAILURE!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 18:32:19'!
FAILURE!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:32:49' prior: 50872916!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart |
	(cartId > carts size) ifTrue: [^self error: TusLibros invalidCartIdErrorMessage].
	(catalogue includes: isbn) ifFalse: [^self error: TusLibros invalidIsbnErrorMessage].
	(quantity < 1) ifTrue: [^self error: TusLibros invalidQuantityErrorMessage].
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:32:50'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:32:50'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:32:50'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:32:50'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:32:50'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:32:50'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:32:50'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:32:50'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:32:50'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:32:50'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:32:50'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:32:50'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 18:32:50'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 18:32:50'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:33:10' prior: 50873030!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart |
	(cartId > carts size) ifTrue: [^self error: TusLibros invalidCartIdErrorMessage].
	(catalogue includes: isbn) ifFalse: [^self error: TusLibros invalidIsbnErrorMessage].
	(quantity < 1) ifTrue: [^self error: TusLibros invalidQuantityErrorMessage].
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:33:11'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:33:11'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:33:11'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:33:11'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:33:11'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:33:11'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:33:11'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:33:11'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:33:11'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:33:11'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:33:11'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:33:11'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 18:33:11'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 18:33:11'!
PASSED!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:33:54'!
test15ListCartHasValidCartId

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros listCart: 1]
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.


! !

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 18:33:55'!
FAILURE!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:34:12' prior: 50870743!
listCart: cartId 
	(cartId > carts size) ifTrue: [^self error: TusLibros invalidCartIdErrorMessage].
	^carts at: cartId copy.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 18:34:12'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:34:38'!
errorInvalidCartId
	^self error: TusLibros invalidCartIdErrorMessage.! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:35:02' prior: 50873088!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart |
	(cartId > carts size) ifTrue: [^self errorInvalidCartId].
	(catalogue includes: isbn) ifFalse: [^self error: TusLibros invalidIsbnErrorMessage].
	(quantity < 1) ifTrue: [^self error: TusLibros invalidQuantityErrorMessage].
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:35:10' prior: 50873158!
listCart: cartId 
	(cartId > carts size) ifTrue: [^self errorInvalidCartId].
	^carts at: cartId copy.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 18:35:10'!
PASSED!
!TusLibros methodsFor: 'validations' stamp: 'IO 11/18/2020 18:35:31'!
validateCartId
	^self error: TusLibros invalidCartIdErrorMessage.! !
!TusLibros methodsFor: 'validations' stamp: 'IO 11/18/2020 18:35:51'!
validateCartId: cartId
	(cartId > carts size) ifTrue: [^self error: TusLibros invalidCartIdErrorMessage].! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:36:07' prior: 50873216!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart |
	self validateCartId: cartId.
	(catalogue includes: isbn) ifFalse: [^self error: TusLibros invalidIsbnErrorMessage].
	(quantity < 1) ifTrue: [^self error: TusLibros invalidQuantityErrorMessage].
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:36:13' prior: 50873230!
listCart: cartId 
	self validateCartId: cartId.
	^carts at: cartId copy.
! !

!methodRemoval: TusLibros #errorInvalidCartId stamp: 'IO 11/18/2020 18:36:17'!
errorInvalidCartId
	^self error: TusLibros invalidCartIdErrorMessage.!

!methodRemoval: TusLibros #validateCartId stamp: 'IO 11/18/2020 18:36:18'!
validateCartId
	^self error: TusLibros invalidCartIdErrorMessage.!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 18:36:20'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:38:14' prior: 50872672!
newCartForClientId: clientId Password: password
	(
		((clients at: clientId
				ifAbsent: [^self error: TusLibros inexistentClientErrorMessage]) = password)
	) ifFalse: [^self error: TusLibros invalidPasswordErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 18:38:15'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:38:20' prior: 50873367!
newCartForClientId: clientId Password: password
	(
		(clients at: clientId
				ifAbsent: [^self error: TusLibros inexistentClientErrorMessage]) = password
	) ifFalse: [^self error: TusLibros invalidPasswordErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 18:38:21'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:38:26' prior: 50873425!
newCartForClientId: clientId Password: password
	(
		(clients at: clientId
				ifAbsent: [^self error: TusLibros inexistentClientErrorMessage]) = password
	) ifFalse: [^self error: TusLibros invalidPasswordErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:41:52'!
test17ChackoutHasValidCartId

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros listCart: 1]
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.


! !
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:41:55'!
test16ChackoutHasValidCartId

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros listCart: 1]
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.


! !

!methodRemoval: TusLibrosTest #test17ChackoutHasValidCartId stamp: 'IO 11/18/2020 18:41:58'!
test17ChackoutHasValidCartId

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros listCart: 1]
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.


!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:42:02'!
test16CheckoutHasValidCartId

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros listCart: 1]
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.


! !

!methodRemoval: TusLibrosTest #test16ChackoutHasValidCartId stamp: 'IO 11/18/2020 18:42:02'!
test16ChackoutHasValidCartId

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros listCart: 1]
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.


!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:43:21' prior: 50873522!
test16CheckoutHasValidCartId

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.

	self should: [tusLibros checkoutCart: 3 ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan']
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.


! !

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 18:43:22'!
FAILURE!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 18:44:02' prior: 50871509!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	self validateCartId: cartId.
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := clientsPurchases at: clientId ifAbsent: [Bag new].
	checkout addAll: cart.
	clientsPurchases at: clientId put: checkout.
! !

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 18:44:06'!
PASSED!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:48:22'!
test17CheckoutHasCartWithBooks

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.

	self should: [tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan']
		raise: Error
		withMessageText: TusLibros emptyCartErrorMessage.


! !

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 18:48:25'!
ERROR!
!TusLibros class methodsFor: 'error messages' stamp: 'IO 11/18/2020 18:48:33'!
emptyCartErrorMessage
	self shouldBeImplemented.! !
!TusLibros class methodsFor: 'error messages' stamp: 'IO 11/18/2020 18:48:48' prior: 50873643!
emptyCartErrorMessage
	'The cart cannot be empty'.! !

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 18:48:49'!
FAILURE!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 18:49:29' prior: 50873560!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	self validateCartId: cartId.
	cart := carts at: cartId.
	(cart size = 0) ifTrue: [self error: TusLibros emptyCartErrorMessage].
	clientId := cartClients at: cartId.
	checkout := clientsPurchases at: clientId ifAbsent: [Bag new].
	checkout addAll: cart.
	clientsPurchases at: clientId put: checkout.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 18:51:18'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:53:15' prior: 50873293!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart |

	self validateCartId: cartId.
	(catalogue includes: isbn) ifFalse: [^self error: TusLibros invalidIsbnErrorMessage].
	(quantity < 1) ifTrue: [^self error: TusLibros invalidQuantityErrorMessage].

	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:53:22' prior: 50873306!
listCart: cartId

	self validateCartId: cartId.

	^carts at: cartId copy.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:53:27' prior: 50873483!
newCartForClientId: clientId Password: password
	(
		(clients at: clientId
				ifAbsent: [^self error: TusLibros inexistentClientErrorMessage]) = password
	) ifFalse: [^self error: TusLibros invalidPasswordErrorMessage].

	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 18:53:34' prior: 50873656!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |

	self validateCartId: cartId.
	cart := carts at: cartId.
	(cart size = 0) ifTrue: [self error: TusLibros emptyCartErrorMessage].

	clientId := cartClients at: cartId.
	checkout := clientsPurchases at: clientId ifAbsent: [Bag new].
	checkout addAll: cart.
	clientsPurchases at: clientId put: checkout.
! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 18:53:38' prior: 50871416!
listPurchasesFor: clientId password: password
	
	^clientsPurchases at: clientId ifAbsent: [^Bag new] copy.
! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 18:53:38' prior: 50873772!
listPurchasesFor: clientId password: password

	^clientsPurchases at: clientId ifAbsent: [^Bag new] copy.
! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 18:53:55' prior: 50873757!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |

	self validateCartId: cartId.
	cart := carts at: cartId.
	(cart size = 0) ifTrue: [self error: TusLibros emptyCartErrorMessage].
	self validateCcn: ccn.

	clientId := cartClients at: cartId.
	checkout := clientsPurchases at: clientId ifAbsent: [Bag new].
	checkout addAll: cart.
	clientsPurchases at: clientId put: checkout.
! !
!TusLibros methodsFor: 'validations' stamp: 'IO 11/18/2020 18:54:07'!
validateCcn: ccn
	! !
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:54:43'!
test18CheckoutHasValidCcn

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.

	self should: [tusLibros checkoutCart: cartId ccn: '5500 0000 000 0004' cced: '20/2025' cco: 'Juan']
		raise: Error
		withMessageText: TusLibros emptyCartErrorMessage.


! !

!testRun: #TusLibrosTest #test18CheckoutHasValidCcn stamp: 'IO 11/18/2020 18:54:46'!
FAILURE!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:54:58' prior: 50873804!
test18CheckoutHasValidCcn

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.

	self should: [tusLibros checkoutCart: cartId ccn: '5500 0000 000 0004' cced: '20/2025' cco: 'Juan']
		raise: Error
		withMessageText: TusLibros invalidCcnErrorMessage.


! !

!testRun: #TusLibrosTest #test18CheckoutHasValidCcn stamp: 'IO 11/18/2020 18:55:00'!
ERROR!
!TusLibros class methodsFor: 'error messages' stamp: 'IO 11/18/2020 18:55:09'!
invalidCcnErrorMessage
	self shouldBeImplemented.! !
!TusLibros class methodsFor: 'error messages' stamp: 'IO 11/18/2020 18:55:17' prior: 50873844!
invalidCcnErrorMessage
	^'Invalid credit card number'.! !

!testRun: #TusLibrosTest #test18CheckoutHasValidCcn stamp: 'IO 11/18/2020 18:55:20'!
FAILURE!
!TusLibros methodsFor: 'validations' stamp: 'IO 11/18/2020 18:55:54' prior: 50873801!
validateCcn: ccn
	| number |
	number := ccn ! !
!TusLibrosTest methodsFor: 'purchases' stamp: 'IO 11/18/2020 18:56:19' prior: 50870851!
test07AClientCanCheckoutACart

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.

	tusLibros checkoutCart: cartId ccn: 5500000000000004 cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 2.

	self assert: expectedPurchases equals: purchases.
	self assert: 2 equals: purchases size.

! !
!TusLibrosTest methodsFor: 'purchases' stamp: 'IO 11/18/2020 18:56:28' prior: 50870874!
test08AClientCanCheckoutManyTimes

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.
	tusLibros checkoutCart: cartId ccn: 5500000000000004 cced: '20/2025' cco: 'Juan'.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 3.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 7.
	expectedPurchases add: '0-7645-2641-4' withOccurrences: 3.

	self assert: expectedPurchases equals: purchases.
	self assert: 10 equals: purchases size.

! !
!TusLibrosTest methodsFor: 'purchases' stamp: 'IO 11/18/2020 18:56:33' prior: 50870817!
test09ManyClientsCanCheckout

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.
	tusLibros checkoutCart: cartId ccn: 5500000000000004 cced: '20/2025' cco: 'Juan'.
	
	cartId := tusLibros newCartForClientId: 'admin2' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 3.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin2' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 5.
	expectedPurchases add: '0-7645-2641-4' withOccurrences: 3.

	self assert: expectedPurchases equals: purchases.
	self assert: 8 equals: purchases size.

! !
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:56:49' prior: 50873824!
test18CheckoutHasValidCcn

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.

	self should: [tusLibros checkoutCart: cartId ccn: 5500000000000003 cced: '20/2025' cco: 'Juan']
		raise: Error
		withMessageText: TusLibros invalidCcnErrorMessage.


! !
!TusLibros methodsFor: 'validations' stamp: 'IO 11/18/2020 18:57:10' prior: 50873857!
validateCcn: ccn
	| number |

	"ref: https://www.freeformatter.com/credit-card-number-generator-validator.html"
	number := ccn ! !

!methodRemoval: TusLibrosTest #test18CheckoutHasValidCcn stamp: 'IO 11/18/2020 19:04:18'!
test18CheckoutHasValidCcn

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.

	self should: [tusLibros checkoutCart: cartId ccn: 5500000000000003 cced: '20/2025' cco: 'Juan']
		raise: Error
		withMessageText: TusLibros invalidCcnErrorMessage.


!

!methodRemoval: TusLibros #validateCcn: stamp: 'IO 11/18/2020 19:04:44'!
validateCcn: ccn
	| number |

	"ref: https://www.freeformatter.com/credit-card-number-generator-validator.html"
	number := ccn !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 19:04:51' prior: 50873786!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |

	self validateCartId: cartId.
	cart := carts at: cartId.
	(cart size = 0) ifTrue: [self error: TusLibros emptyCartErrorMessage].

	clientId := cartClients at: cartId.
	checkout := clientsPurchases at: clientId ifAbsent: [Bag new].
	checkout addAll: cart.
	clientsPurchases at: clientId put: checkout.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 19:04:52'!
PASSED!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 19:06:30'!
test18ListPurchasesHasValidUser

	| tusLibros cartId |

	tusLibros := self newTusLibros.
	
	

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.

	self should: [tusLibros listPurchasesFor: 'admin3' password: 'password']
		raise: Error
		withMessageText: TusLibros 


! !
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 19:06:33' prior: 50874066!
test18ListPurchasesHasValidUser

	| tusLibros cartId |

	tusLibros := self newTusLibros.
	
	

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.

	self should: [tusLibros listPurchasesFor: 'admin3' password: 'password']
		raise: Error
		withMessageText: TusLibros .


! !
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 19:06:39' prior: 50874079!
test18ListPurchasesHasValidUser

	| tusLibros cartId |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.

	self should: [tusLibros listPurchasesFor: 'admin3' password: 'password']
		raise: Error
		withMessageText: TusLibros .


! !
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 19:06:46' prior: 50873625!
test17CheckoutHasCartWithBooks

	| tusLibros cartId |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.

	self should: [tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan']
		raise: Error
		withMessageText: TusLibros emptyCartErrorMessage.


! !
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 19:06:50' prior: 50873540!
test16CheckoutHasValidCartId

	| tusLibros cartId |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.

	self should: [tusLibros checkoutCart: 3 ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan']
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.


! !
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 19:07:12' prior: 50874093!
test18ListPurchasesHasValidUser

	| tusLibros cartId |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.

	self should: [tusLibros listPurchasesFor: 'admin3' password: 'password']
		raise: Error
		withMessageText: TusLibros inexistentClientErrorMessage.


! !
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 19:07:20' prior: 50874135!
test18ListPurchasesHasValidUser

	| tusLibros |

	tusLibros := self newTusLibros.

	self should: [tusLibros listPurchasesFor: 'admin3' password: 'password']
		raise: Error
		withMessageText: TusLibros inexistentClientErrorMessage.


! !

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 19:07:23'!
FAILURE!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 19:07:55'!
test19ListPurchasesHasMatchingPassword

	| tusLibros |

	tusLibros := self newTusLibros.

	self should: [tusLibros listPurchasesFor: 'admin' password: 'wrong password']
		raise: Error
		withMessageText: TusLibros invalidPasswordErrorMessage.


! !

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 19:07:57'!
FAILURE!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 19:07:57'!
FAILURE!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 19:08:01'!
FAILURE!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 19:08:36'!
validateClientId: clientId withPassword: password
	(
		(clients at: clientId
				ifAbsent: [^self error: TusLibros inexistentClientErrorMessage]) = password
	) ifFalse: [^self error: TusLibros invalidPasswordErrorMessage].
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 19:08:46'!
newCartForClientId: clientId password: password
	(
		(clients at: clientId
				ifAbsent: [^self error: TusLibros inexistentClientErrorMessage]) = password
	) ifFalse: [^self error: TusLibros invalidPasswordErrorMessage].

	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50870967!
test03CanAddDifferentBooksToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' password: 'password'.
	
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 1.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 1.

	cart := Bag new.
	cart add: '0-7645-2641-3'.
	cart add: '0-7645-2641-4'.

	self assert: cart equals: (tusLibros listCart: cartId).

! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50872929!
test13AddToCartHasValidISBN

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' password: 'password'.
	
	self should: [ tusLibros addToCart: cartId bookIsbn: 'bad isbn' bookQuantity: 1.]
		raise: Error
		withMessageText: TusLibros invalidIsbnErrorMessage.

! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50873862!
test07AClientCanCheckoutACart

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.

	tusLibros checkoutCart: cartId ccn: 5500000000000004 cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 2.

	self assert: expectedPurchases equals: purchases.
	self assert: 2 equals: purchases size.

! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50874119!
test16CheckoutHasValidCartId

	| tusLibros cartId |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.

	self should: [tusLibros checkoutCart: 3 ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan']
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.


! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50873884!
test08AClientCanCheckoutManyTimes

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.
	tusLibros checkoutCart: cartId ccn: 5500000000000004 cced: '20/2025' cco: 'Juan'.
	
	cartId := tusLibros newCartForClientId: 'admin' password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 3.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 7.
	expectedPurchases add: '0-7645-2641-4' withOccurrences: 3.

	self assert: expectedPurchases equals: purchases.
	self assert: 10 equals: purchases size.

! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50870908!
test04CanAddMoreThanOneBookToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' password: 'password'.
	
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 3.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 2.

	cart := Bag new.
	cart add: '0-7645-2641-3' withOccurrences: 3.
	cart add: '0-7645-2641-4' withOccurrences: 2.

	self assert: cart equals: (tusLibros listCart: cartId).

! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50873918!
test09ManyClientsCanCheckout

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.
	tusLibros checkoutCart: cartId ccn: 5500000000000004 cced: '20/2025' cco: 'Juan'.
	
	cartId := tusLibros newCartForClientId: 'admin2' password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 3.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin2' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 5.
	expectedPurchases add: '0-7645-2641-4' withOccurrences: 3.

	self assert: expectedPurchases equals: purchases.
	self assert: 8 equals: purchases size.

! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50870953!
test02CanAddABookToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' password: 'password'.
	
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 1.
	
	cart := Bag new.
	cart add: '0-7645-2641-3'.

	self assert: cart equals: (tusLibros listCart: cartId).

! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50872456!
test10CreateCartClientIdExists

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros newCartForClientId: 'admin3' password: 'password'.]
		raise: Error
		withMessageText: TusLibros inexistentClientErrorMessage.
! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50872435!
test11CreateCartClientPasswordMatches

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros newCartForClientId: 'admin' password: 'password2'.]
		raise: Error
		withMessageText: TusLibros invalidPasswordErrorMessage.
! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50872998!
test14AddToCartHasValidQuantity

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' password: 'password'.
	
	self should: [ tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 0.]
		raise: Error
		withMessageText: TusLibros invalidQuantityErrorMessage.

! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50870985!
test01NewCartIsEmpty

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50870927!
test05CanAddMoreThanOneCart

	| tusLibros cartId cartId2 cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' password: 'password'.
	cartId2 := tusLibros newCartForClientId: 'admin2' password: 'password'.

	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 3.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 2.
	
	tusLibros addToCart: cartId2 bookIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId2 bookIsbn: '0-7645-2641-4' bookQuantity: 3.

	cart := Bag new.
	cart add: '0-7645-2641-3' withOccurrences: 5.
	cart add: '0-7645-2641-4' withOccurrences: 3.

	self assert: cart equals: (tusLibros listCart: cartId2).

! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50874105!
test17CheckoutHasCartWithBooks

	| tusLibros cartId |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' password: 'password'.

	self should: [tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan']
		raise: Error
		withMessageText: TusLibros emptyCartErrorMessage.


! !

!methodRemoval: TusLibros #newCartForClientId:Password: stamp: 'IO 11/18/2020 19:08:46'!
newCartForClientId: clientId Password: password
	(
		(clients at: clientId
				ifAbsent: [^self error: TusLibros inexistentClientErrorMessage]) = password
	) ifFalse: [^self error: TusLibros invalidPasswordErrorMessage].

	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 19:09:01' prior: 50874191!
newCartForClientId: clientId password: password
	self validateClientId: clientId withPassword: password.

	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 19:09:02'!
FAILURE!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 19:09:02'!
FAILURE!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 19:09:13' prior: 50873779!
listPurchasesFor: clientId password: password
	self validateClientId: clientId withPassword: password.

	^clientsPurchases at: clientId ifAbsent: [^Bag new] copy.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

----SNAPSHOT----(18 November 2020 19:13:42) CuisUniversity-4384.image priorSource: 17239174!

----QUIT----(18 November 2020 19:15:14) CuisUniversity-4384.image priorSource: 17374527!

----STARTUP---- (18 November 2020 19:47:07) as /Users/ilanolkies/uba/ingsoft1/macos64/CuisUniversity-4384.image!


!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

Object subclass: #TusLibrosClient
	instanceVariableNames: 'password purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibrosClient category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 19:48:02'!
Object subclass: #TusLibrosClient
	instanceVariableNames: 'password purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosClient class methodsFor: 'no messages' stamp: 'IO 11/18/2020 19:48:45'!
with: password

	^self basicNew with: password.! !
!TusLibrosClient methodsFor: 'nil' stamp: 'IO 11/18/2020 19:49:20'!
with: aPassword

	password := aPassword
! !
!TusLibrosClient methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:49:32' prior: 50874691!
with: aPassword

	password := aPassword.
	purchases := Bag new.

! !
!TusLibrosClient methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:49:55'!
checkout: aCart
	purchases addAll: aCart.
! !
!TusLibrosClient methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:51:01'!
validatePassword: aPassword
	(password = aPassword) ifFalse: [^self error: TusLibros invalidPasswordErrorMessage].
! !
!TusLibrosClient methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:51:17'!
purchases
	^purchases copy.! !
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 19:52:18' prior: 50872882!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	clients := aClientList.
	
	clients keysDo: [ :key |  ].

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 19:53:16' prior: 50874717!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	
	aClientList keysDo: [ :clientId | clients add: (TusLibrosClient for: (aClientList at: clientId))].

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !
!TusLibros methodsFor: 'validations' stamp: 'IO 11/18/2020 19:54:48' prior: 50874181!
validateClientId: clientId withPassword: password
	(clients at: clientId ifAbsent: [
		^self error: TusLibros inexistentClientErrorMessage]) validatePassword: password.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 19:54:50'!
ERROR!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 19:54:50'!
ERROR!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 19:54:50'!
ERROR!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 19:54:50'!
ERROR!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 19:54:50'!
ERROR!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 19:56:52' prior: 50874538!
listPurchasesFor: clientId password: password
	self validateClientId: clientId withPassword: password.

	^clientsPurchases at: clientId purchases.
! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 19:57:29' prior: 50873999!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId |

	self validateCartId: cartId.
	cart := carts at: cartId.
	(cart size = 0) ifTrue: [self error: TusLibros emptyCartErrorMessage].

	clientId := cartClients at: cartId.
	(clients at: clientId) checkout: cart.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 19:57:39'!
ERROR!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 19:57:43'!
ERROR!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 19:57:43'!
ERROR!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 19:57:56'!
ERROR!

aClientList at: clientId!
!TusLibrosClient class methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:59:00'!
for: aPassword

	^self basicNew with: aPassword.! !

!methodRemoval: TusLibrosClient class #with: stamp: 'IO 11/18/2020 19:59:06'!
with: password

	^self basicNew with: password.!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 19:59:41'!
ERROR!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 20:01:22' prior: 50874728!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	"(TusLibrosClient for: (aClientList at: clientId))"
	aClientList keysDo: [ :clientId | clients ].

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 20:01:56' prior: 50874968!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	clients := Dictionary new.
	""
	aClientList keysDo: [ :clientId | clients ].

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:02:01'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:02:01'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:02:01'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:02:01'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:02:01'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:02:01'!
ERROR!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:02:01'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:02:01'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:02:01'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:02:01'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:02:01'!
FAILURE!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:02:01'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:02:01'!
ERROR!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:02:01'!
ERROR!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:02:01'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:02:01'!
ERROR!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:02:01'!
ERROR!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:02:01'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:02:01'!
FAILURE!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 20:02:05' prior: 50874981!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	clients := Dictionary new.
	"(TusLibrosClient for: (aClientList at: clientId))"
	aClientList keysDo: [ :clientId | clients ].

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 20:04:38' prior: 50875051!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	clients := Dictionary new.
	"(TusLibrosClient for: (aClientList at: clientId))"
	aClientList keysDo: [ :clientId | clients associationAt: Association].

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 20:05:13' prior: 50875065!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	clients := Dictionary new.
	"(TusLibrosClient for: (aClientList at: clientId))"
	aClientList keysDo: [ :clientId | clients associationAt: (
		Association key: clientId value: (TusLibrosClient for: (aClientList at: clientId)))].

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:05:47'!
ERROR!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 20:06:01' prior: 50875079!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	clients := Dictionary new.
	"(TusLibrosClient for: (aClientList at: clientId))"
	aClientList keysDo: [ :clientId | clients add: (
		Association key: clientId value: (TusLibrosClient for: (aClientList at: clientId)))].

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:06:02'!
ERROR!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:06:02'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:06:02'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:06:02'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:06:10'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:06:10'!
ERROR!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 20:07:09' prior: 50874808!
listPurchasesFor: clientId password: password
	self validateClientId: clientId withPassword: password.

	^clientsPurchases value: clientId purchases.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:07:11'!
ERROR!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:07:11'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:07:11'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:07:11'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:07:23'!
ERROR!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 20:07:34' prior: 50875296!
listPurchasesFor: clientId password: password
	self validateClientId: clientId withPassword: password.

	^(clientsPurchases value: clientId) purchases.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:07:35'!
ERROR!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:07:35'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:07:35'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:07:35'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:07:35'!
PASSED!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 20:07:59' prior: 50875366!
listPurchasesFor: clientId password: password
	self validateClientId: clientId withPassword: password.

	^(clients value: clientId) purchases.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:08:00'!
ERROR!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:08:00'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:08:00'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:08:00'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:08:00'!
PASSED!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 20:08:12' prior: 50875433!
listPurchasesFor: clientId password: password
	self validateClientId: clientId withPassword: password.

	^(clients at: clientId) purchases.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients clients catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibros category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 20:08:24'!
Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients clients catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:08:27'!
PASSED!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 20:08:55' prior: 50875215!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	clients := Dictionary new.
	"(TusLibrosClient for: (aClientList at: clientId))"
	aClientList keysDo: [ :clientId | clients add: (
		Association key: clientId value: (TusLibrosClient for: (aClientList at: clientId)))].

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.

! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:08:56'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:08:56'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:08:56'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:08:57'!
PASSED!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 20:08:59' prior: 50875697!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	clients := Dictionary new.

	aClientList keysDo: [ :clientId | clients add: (
		Association key: clientId value: (TusLibrosClient for: (aClientList at: clientId)))].

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.

! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:09:00'!
PASSED!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 20:09:15' prior: 50875771!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	clients := Dictionary new.

	aClientList keysDo: [ :clientId | clients add: (
		Association key: clientId value: (TusLibrosClient for: (aClientList at: clientId)))].

	carts := OrderedCollection new.


! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:09:16'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:09:16'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:09:16'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:09:16'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:09:16'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:09:16'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:09:16'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:09:16'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:09:16'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:09:16'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:09:16'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:09:16'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:09:16'!
ERROR!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:09:16'!
ERROR!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:09:16'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:09:16'!
ERROR!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:09:16'!
ERROR!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:09:16'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:09:16'!
PASSED!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 20:09:19' prior: 50875843!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	clients := Dictionary new.

	aClientList keysDo: [ :clientId | clients add: (
		Association key: clientId value: (TusLibrosClient for: (aClientList at: clientId)))].

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.

! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 20:09:35' prior: 50874471!
newCartForClientId: clientId password: password
	self validateClientId: clientId withPassword: password.

	carts add: Bag new.

	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:09:35'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:09:35'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:09:35'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:09:35'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 20:09:38' prior: 50875927!
newCartForClientId: clientId password: password
	self validateClientId: clientId withPassword: password.

	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

Object subclass: #TusLibrosCarts
	instanceVariableNames: 'clientId books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibrosCarts category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 20:11:32'!
Object subclass: #TusLibrosCarts
	instanceVariableNames: 'clientId books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosCarts class methodsFor: 'no messages' stamp: 'IO 11/18/2020 20:12:18'!
for: clientId
	^self basicNew initializeFor: clientId.! !
!TusLibrosCarts methodsFor: 'no messages' stamp: 'IO 11/18/2020 20:12:38'!
initializeFor: aClientId
	clientId := aClientId.
	books := Bag new.! !
!TusLibrosCarts methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 20:13:34'!
add: aBook withQuantity: aQuantity
	books add: aBook withOcurrences: aQuantity.
! !
!TusLibrosCarts methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 20:13:51' prior: 50876083!
add: aBook withQuantity: aQuantity
	books add: aBook withOccurrences: aQuantity.
! !
!TusLibrosCarts methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 20:14:51'!
books
	^books copy.! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 20:16:13'!
checkout: aCart for: clientId
	(clients at: clientId) checkout: aCart.
! !
!TusLibrosCarts methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 20:17:14'!
checkoutOn: aTusLibros
	aTusLibros checkout: self purchases for: clientId.
! !

!classRenamed: #TusLibrosCarts as: #TusLibrosCart stamp: 'IO 11/18/2020 20:17:47'!
Smalltalk renameClassNamed: #TusLibrosCarts as: #TusLibrosCart!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 20:18:24' prior: 50875993!
newCartForClientId: clientId password: password
	self validateClientId: clientId withPassword: password.

	carts add: (TusLibrosCart for: clientId).
	^carts size.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 20:18:43' prior: 50873726!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart |

	self validateCartId: cartId.
	(catalogue includes: isbn) ifFalse: [^self error: TusLibros invalidIsbnErrorMessage].
	(quantity < 1) ifTrue: [^self error: TusLibros invalidQuantityErrorMessage].

	cart := carts at: cartId.
	cart add: isbn withQuantity: quantity.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 20:18:52' prior: 50876121!
addToCart: cartId bookIsbn: isbn bookQuantity: aQuantity

	| cart |

	self validateCartId: cartId.
	(catalogue includes: isbn) ifFalse: [^self error: TusLibros invalidIsbnErrorMessage].
	(aQuantity < 1) ifTrue: [^self error: TusLibros invalidQuantityErrorMessage].

	cart := carts at: cartId.
	cart add: isbn withQuantity: aQuantity.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 20:18:58' prior: 50876134!
addToCart: cartId bookIsbn: anIsbn bookQuantity: aQuantity

	| cart |

	self validateCartId: cartId.
	(catalogue includes: anIsbn) ifFalse: [^self error: TusLibros invalidIsbnErrorMessage].
	(aQuantity < 1) ifTrue: [^self error: TusLibros invalidQuantityErrorMessage].

	cart := carts at: cartId.
	cart add: anIsbn withQuantity: aQuantity.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 20:19:03' prior: 50876148!
addToCart: aCartId bookIsbn: anIsbn bookQuantity: aQuantity

	| cart |

	self validateCartId: aCartId.
	(catalogue includes: anIsbn) ifFalse: [^self error: TusLibros invalidIsbnErrorMessage].
	(aQuantity < 1) ifTrue: [^self error: TusLibros invalidQuantityErrorMessage].

	cart := carts at: aCartId.
	cart add: anIsbn withQuantity: aQuantity.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 20:19:39' prior: 50873740!
listCart: cartId

	self validateCartId: cartId.

	^carts at: cartId books.
! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 20:20:09' prior: 50874816!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart |

	self validateCartId: cartId.
	cart := carts at: cartId.
	(cart size = 0) ifTrue: [self error: TusLibros emptyCartErrorMessage].
	
	cart checkoutOn: self.

! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:20:18'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:20:18'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:20:18'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:20:18'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:20:18'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:20:18'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:20:18'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:20:18'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:20:18'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:20:18'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:20:18'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:20:18'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:20:18'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:20:18'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:20:18'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:20:18'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:20:18'!
FAILURE!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:20:18'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:20:18'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 20:20:43' prior: 50876176!
listCart: cartId

	self validateCartId: cartId.

	^(carts at: cartId) books.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:20:44'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:20:44'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:20:44'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:20:44'!
FAILURE!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:20:57'!
ERROR!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:21:01'!
ERROR!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:21:01'!
ERROR!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 20:21:40' prior: 50876182!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart |

	self validateCartId: cartId.
	cart := carts at: cartId.
	cart checkoutOn: self.

! !
!TusLibrosCart methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 20:21:50' prior: 50876103!
checkoutOn: aTusLibros
	(books size = 0) ifTrue: [self error: TusLibros emptyCartErrorMessage].
	aTusLibros checkout: self purchases for: clientId.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:21:51'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:21:51'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:21:51'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:22:12'!
ERROR!
!TusLibrosCart methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 20:22:23' prior: 50876331!
checkoutOn: aTusLibros
	(books size = 0) ifTrue: [self error: TusLibros emptyCartErrorMessage].
	aTusLibros checkout: books purchases for: clientId.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:22:24'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:22:24'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:22:24'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:22:24'!
PASSED!
!TusLibrosCart methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 20:22:43' prior: 50876401!
checkoutOn: aTusLibros
	(books size = 0) ifTrue: [self error: TusLibros emptyCartErrorMessage].
	aTusLibros checkout: self books for: clientId.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:22:47'!
PASSED!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 20:23:09' prior: 50875914!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	clients := Dictionary new.

	aClientList keysDo: [ :clientId | clients add: (
		Association key: clientId value: (TusLibrosClient for: (aClientList at: clientId)))].

	carts := OrderedCollection new.


! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:23:10'!
PASSED!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 20:23:29' prior: 50876535!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.

	carts := OrderedCollection new.

	clients := Dictionary new.
	aClientList keysDo: [ :clientId | clients add: (
		Association key: clientId value: (TusLibrosClient for: (aClientList at: clientId)))].
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:23:32'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 20:23:40' prior: 50876113!
newCartForClientId: clientId password: password

	self validateClientId: clientId withPassword: password.

	carts add: (TusLibrosCart for: clientId).
	^carts size.
! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 20:25:23' prior: 50876323!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 

	self validateCartId: cartId.

	(carts at: cartId) checkoutOn: self.

! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 20:25:24' prior: 50876685!
checkoutCart: cartId ccn: ccn cced: cced cco: cco

	self validateCartId: cartId.

	(carts at: cartId) checkoutOn: self.

! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:25:25'!
PASSED!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 20:25:29' prior: 50876098!
checkout: aCart for: clientId

	(clients at: clientId) checkout: aCart.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:25:30'!
PASSED!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 20:25:36' prior: 50875499!
listPurchasesFor: clientId password: password

	self validateClientId: clientId withPassword: password.

	^(clients at: clientId) purchases.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

----SNAPSHOT----(18 November 2020 20:26:25) CuisUniversity-4384.image priorSource: 17374621!

----STARTUP---- (19 November 2020 12:05:05) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64\CuisUniversity-4384.image!


!classRemoval: #TusLibros stamp: 'LH 11/19/2020 12:05:10'!
Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients clientsPurchases clients catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #TusLibrosTest stamp: 'LH 11/19/2020 12:05:11'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

----End fileIn of C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64\Ejercicio-20-Tus-Libros.st----!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'LH 11/19/2020 12:15:33'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'LH 11/19/2020 12:15:33'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'LH 11/19/2020 12:15:33'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'LH 11/19/2020 12:15:33'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'LH 11/19/2020 12:15:33'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'LH 11/19/2020 12:15:33'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'LH 11/19/2020 12:15:33'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'LH 11/19/2020 12:15:33'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'LH 11/19/2020 12:15:34'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'LH 11/19/2020 12:15:34'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'LH 11/19/2020 12:15:34'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'LH 11/19/2020 12:15:34'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'LH 11/19/2020 12:15:34'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'LH 11/19/2020 12:15:34'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'LH 11/19/2020 12:15:34'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'LH 11/19/2020 12:15:34'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'LH 11/19/2020 12:15:34'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'LH 11/19/2020 12:15:34'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'LH 11/19/2020 12:15:34'!
PASSED!

----QUIT----(19 November 2020 12:16:51) CuisUniversity-4384.image priorSource: 17205931!