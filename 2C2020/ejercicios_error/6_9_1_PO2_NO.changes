

----STARTUP---- (9 November 2020 19:20:11) as C:\Users\Ami\Desktop\Facultad\Ing1\windows64-portfolio2\windows64\CuisUniversity-4384.image!


----End fileIn of C:\Users\Ami\Desktop\Facultad\Ing1\RepoDocentes\2020-2c\18-Portfolio1\Portfolio-Ejercicio.st----!

!classRemoval: #ReceptiveAccount stamp: 'as 11/9/2020 19:23:58'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'as 11/9/2020 19:23:58'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'as 11/9/2020 19:23:59'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'as 11/9/2020 19:23:59'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'as 11/9/2020 19:23:59'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of C:\Users\Ami\Desktop\Facultad\Ing1\RepoDocentes\2020-2c\18-Portfolio1\Portfolio-Solucion\Portfolio-Solucion.st----!

TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'as 11/9/2020 19:32:07'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'no messages' stamp: 'as 11/9/2020 19:34:58'!
test01AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedInTransfer
	! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'as 11/9/2020 19:44:30'!
Object subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:44:23'!
test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 balance equals: -100.
	self assert: account2 balance equals: 100.	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:44:39' prior: 50868773!
test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 balance equals: -100.
	self assert: account2 balance equals: 100.	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:45:04' prior: 50868787!
test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 balance equals: -100.
	self assert: account2 balance equals: 100.	
	
	! !

!methodRemoval: TransferTest #test01AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedInTransfer stamp: 'as 11/9/2020 19:45:22'!
test01AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedInTransfer
	!
!Transfer class methodsFor: 'no messages' stamp: 'as 11/9/2020 19:47:31'!
anAmountOf: anAmount from: originAccount to: destinationAccount
	self new initializeWith: anAmount from: originAccount to: destinationAccount.! !
!Transfer methodsFor: 'no messages' stamp: 'as 11/9/2020 19:47:45'!
initializeWith: anAmount from: originAccount to: destinationAccount
	! !

Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #NameOfSubclass category: 'Portfolio-Solucion' stamp: 'as 11/9/2020 19:48:09'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #NameOfSubclass stamp: 'as 11/9/2020 19:48:26'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:48:46' prior: 50868828!
initializeWith: anAmount from: originAccount to: destinationAccount
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:54:17' prior: 50868852!
initializeWith: anAmount from: originAccount to: destinationAccount

	| deposit extraction |
	deposit := Deposit register: anAmount on: destinationAccount.
	extraction := Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !

!testRun: #TransferTest #test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer stamp: 'as 11/9/2020 19:54:31'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:58:11'!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 hasRegistered: transfer withdraw.
	self assert: account2 hasRegistered: transfer deposit.
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:58:37' prior: 50868858!
initializeWith: anAmount from: originAccount to: destinationAccount

	| deposit withdraw |
	deposit := Deposit register: anAmount on: destinationAccount.
	withdraw := Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:59:24' prior: 50868888!
initializeWith: anAmount from: originAccount to: destinationAccount

	| deposit withdraw |
	deposit := Deposit register: anAmount on: destinationAccount.
	withdraw := Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:00:05' prior: 50868899!
initializeWith: anAmount from: originAccount to: destinationAccount

	Deposit register: anAmount on: destinationAccount.
	Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !

Object subclass: #Transfer
	instanceVariableNames: 'deposit withdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'as 11/9/2020 20:00:13'!
Object subclass: #Transfer
	instanceVariableNames: 'deposit withdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:00:39' prior: 50868910!
initializeWith: anAmount from: originAccount to: destinationAccount

	deposit := Deposit register: anAmount on: destinationAccount.
	withdraw := Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:01:13' prior: 50868873!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:02:48' prior: 50868941!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	"self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit)."

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:04:01'!
checkWithdrawIsRegisteredIn: anAccount
	anAccount hasRegistered: withdraw.
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:04:06' prior: 50868975!
checkWithdrawIsRegisteredIn: anAccount
	^anAccount hasRegistered: withdraw.
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:04:20'!
checkDepositIsRegisteredIn: anAccount
	^anAccount hasRegistered: deposit.
	! !

!testRun: #TransferTest #test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer stamp: 'as 11/9/2020 20:05:11'!
PASSED!

!testRun: #TransferTest #test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer stamp: 'as 11/9/2020 20:05:11'!
ERROR!

!testRun: #TransferTest #test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer stamp: 'as 11/9/2020 20:05:11'!
ERROR!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:05:41' prior: 50868821!
anAmountOf: anAmount from: originAccount to: destinationAccount
	^self new initializeWith: anAmount from: originAccount to: destinationAccount.! !

!testRun: #TransferTest #test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer stamp: 'as 11/9/2020 20:05:46'!
PASSED!

!testRun: #TransferTest #test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer stamp: 'as 11/9/2020 20:05:46'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:05:57' prior: 50868956!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:08:18'!
test02AccountTransactionsAreRegisteredInAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !

!methodRemoval: TransferTest #test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer stamp: 'as 11/9/2020 20:08:25'!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:09:34'!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:09:42'!
test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !

!methodRemoval: TransferTest #test02AccountTransactionsAreRegisteredInAccountsInvolvedAfterTransfer stamp: 'as 11/9/2020 20:09:48'!
test02AccountTransactionsAreRegisteredInAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:11:24' prior: 50869068!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	"self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	"
	
	self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer).
	
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'as 11/9/2020 20:12:14'!
hasTransfer: aTransfer
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:14:32' prior: 50869114!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer).
	
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'as 11/9/2020 20:16:19' prior: 50869132!
hasTransfer: aTransfer
	
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'as 11/9/2020 20:18:50' prior: 50869150!
hasTransfer: aTransfer
	transactions anySatisfy: [:transaction | transaction belongsTo: aTransfer].! !
!AccountTransaction methodsFor: 'balance' stamp: 'as 11/9/2020 20:19:12'!
belongsTo: aTransfer! !

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/9/2020 20:20:00'!
Object subclass: #AccountTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'transfer' stamp: 'as 11/9/2020 20:19:57' prior: 50869160!
belongsTo: aTransfer
	^transfer = aTransfer.! !

Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/9/2020 20:25:26'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Withdraw subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/9/2020 20:25:38'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Deposit subclass: #TransferDeposit
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/9/2020 20:25:57'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/9/2020 20:28:49'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'transfer' stamp: 'as 11/9/2020 20:29:24' prior: 50869172!
belongsTo: aTransfer
	"^transfer = aTransfer. y esto donde vaaaaa"! !
!AccountTransaction methodsFor: 'transfer' stamp: 'as 11/9/2020 20:56:16' prior: 50869230!
belongsTo: aTransfer
	"^transfer = aTransfer."! !

!methodRemoval: AccountTransaction #belongsTo: stamp: 'as 11/9/2020 20:57:28'!
belongsTo: aTransfer
	"^transfer = aTransfer."!

!classRemoval: #TransferDeposit stamp: 'as 11/9/2020 20:58:20'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'as 11/9/2020 20:58:54'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/9/2020 20:59:21'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferTransaction subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/9/2020 21:00:04'!
TransferTransaction subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'as 11/9/2020 21:00:14'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTransaction methodsFor: 'no messages' stamp: 'as 11/9/2020 21:01:09'!
belongsTo: aTransfer
	^transfer = aTransfer.! !

TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: 'deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/9/2020 21:03:53'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: 'deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:11:06' prior: 50869136!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer).

	"self assert: (account1 hasRegister: transfer withdraw).
	self assert: (account2 hasRegister: transfer deposit).	"
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:14:21' prior: 50869321!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	"self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer)."

	"self assert: (account1 hasRegister: transfer withdraw).
	self assert: (account2 hasRegister: transfer deposit).	"
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:14:27' prior: 50869339!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	"self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer)."

	"self assert: (account1 hasRegister: transfer withdraw).
	self assert: (account2 hasRegister: transfer deposit).	"
	
	
	! !

!classRemoval: #TransferWithdraw stamp: 'as 11/9/2020 21:14:41'!
TransferTransaction subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferDeposit stamp: 'as 11/9/2020 21:14:42'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: 'deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferTransaction stamp: 'as 11/9/2020 21:14:42'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:15:36' prior: 50869357!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	"self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer)."

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:16:11'!
withdraw
	^withdraw.
	
	
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:16:25'!
deposit
	^deposit.
	
	
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:16:36' prior: 50869396!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	
	
	! !

!testRun: #TransferTest #test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer stamp: 'as 11/9/2020 21:16:40'!
PASSED!

!testRun: #TransferTest #test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer stamp: 'as 11/9/2020 21:16:40'!
PASSED!

!testRun: #TransferTest #test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer stamp: 'as 11/9/2020 21:16:40'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:17:27' prior: 50869083!
test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	"self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	"
	
	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:20:24' prior: 50869449!
test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:24:19' prior: 50869469!
test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	
	"transfer -> transaction"! !

!methodRemoval: TransferTest #test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer stamp: 'as 11/9/2020 21:24:56'!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	
	
	!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:30:13'!
test03AccountTransactionsInTransferAreConnected

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer withdraw transferDepositAssociated).
	self assert: (transfer deposit transferWithdrawAssociated).	
	! !

Deposit subclass: #TransferDeposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Deposit subclass: #TransferDeposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/9/2020 21:31:27'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Withdraw subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/9/2020 21:31:45'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Deposit subclass: #TransferDeposit
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/9/2020 21:31:53'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Withdraw subclass: #TransferWithdraw
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/9/2020 21:31:59'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferWithdraw methodsFor: 'no messages' stamp: 'as 11/9/2020 21:32:35'!
transferDepositAssociated
	^transfer deposit.! !
!TransferDeposit methodsFor: 'no messages' stamp: 'as 11/9/2020 21:32:59'!
transferWithdrawAssociated
	^transfer withdraw.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:33:57' prior: 50868931!
initializeWith: anAmount from: originAccount to: destinationAccount

	deposit := Deposit register: anAmount on: destinationAccount for: self.
	withdraw := Withdraw register: anAmount on: originAccount for: self.
	
	
	
	
	
	
	! !
!AccountTransaction class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:34:29'!
register: aValue on: account for: aTransfer

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !
!AccountTransaction class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:34:48' prior: 50869606!
register: aValue on: account for: aTransfer

	| transaction |
	
	transaction := self for: aValue for: aTransfer.
	account register: transaction.
		
	^ transaction! !
!Deposit class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:35:27'!
for: aValue for: aTransfer

	^ self new initializeFor: aValue for: aTransfer.! !
!Deposit class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:36:23' prior: 50869623!
for: aValue for: aTransfer

	^ TransferDeposit new initializeFor: aValue for: aTransfer.! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:37:12'!
 initializeFor: aValue for: aTransfer
	value := aValue.
	! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:37:33' prior: 50869635!
initializeFor: aValue for: aTransfer
	value := aValue.
	transfer := aTransfer.! !
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:37:43'!
initializeFor: aValue for: aTransfer
	value := aValue.
	transfer := aTransfer.! !
!Withdraw class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:38:08'!
for: aValue for: aTransfer

	^ TransferWithdraw new initializeFor: aValue for: aTransfer.! !

!testRun: #TransferTest #test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer stamp: 'as 11/9/2020 21:38:21'!
PASSED!

!testRun: #TransferTest #test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer stamp: 'as 11/9/2020 21:38:21'!
PASSED!

!testRun: #TransferTest #test03AccountTransactionsInTransferAreConnected stamp: 'as 11/9/2020 21:38:21'!
ERROR!

!testRun: #TransferTest #test03AccountTransactionsInTransferAreConnected stamp: 'as 11/9/2020 21:38:21'!
ERROR!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:39:47' prior: 50869515!
test03AccountTransactionsInTransferAreConnected

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	
	! !

!testRun: #TransferTest #test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer stamp: 'as 11/9/2020 21:40:04'!
PASSED!

!testRun: #TransferTest #test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer stamp: 'as 11/9/2020 21:40:04'!
PASSED!

!testRun: #TransferTest #test03AccountTransactionsInTransferAreConnected stamp: 'as 11/9/2020 21:40:04'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:40:24' prior: 50869674!
test03AccountTransactionsInTransferAreConnected

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	
	
	
	"FALTAN CASOS BORDEEEEE"! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:44:40'!
test04AccountCannotTransferToItself

	| account1 transfer|
	
	"account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	"
	
	
	"FALTAN CASOS BORDEEEEE"! !

----STARTUP---- (12 November 2020 21:13:13) as C:\Users\Ami\Desktop\Facultad\Ing1\windows64-portfolio2\windows64\CuisUniversity-4384.image!


!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Ejercicio' stamp: 'as 11/12/2020 21:13:20'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Ejercicio' stamp: 'as 11/12/2020 21:13:20'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:44'!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:48'!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:52'!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32'!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46'!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:14:15'!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw account |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:14:01'!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 50 on: account1.
		
	self assert: 1 equals: account1 transactions size.
	self assert: (account1 transactions includes: deposit1).
! !

!classDefinition: #AccountTransaction category: 'Portfolio-Ejercicio' stamp: 'as 11/12/2020 21:13:20'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #AccountTransaction category: 'Portfolio-Ejercicio' stamp: 'as 11/12/2020 21:13:20'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' overrides: 16881508!
value 

	self subclassResponsibility ! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Ejercicio' stamp: 'as 11/12/2020 21:13:20'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Ejercicio' stamp: 'as 11/12/2020 21:13:20'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/17/2019 03:22:00'!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Ejercicio' stamp: 'as 11/12/2020 21:13:20'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Deposit category: 'Portfolio-Ejercicio' stamp: 'as 11/12/2020 21:13:20'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45'!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' overrides: 50869842!
value

	^ value! !

!classDefinition: 'Deposit class' category: 'Portfolio-Ejercicio' stamp: 'as 11/12/2020 21:13:21'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Ejercicio' stamp: 'as 11/12/2020 21:13:21'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Withdraw category: 'Portfolio-Ejercicio' stamp: 'as 11/12/2020 21:13:21'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Withdraw category: 'Portfolio-Ejercicio' stamp: 'as 11/12/2020 21:13:21'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46'!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' overrides: 50869842!
value

	^ value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Ejercicio' stamp: 'as 11/12/2020 21:13:21'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Ejercicio' stamp: 'as 11/12/2020 21:13:21'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'as 11/12/2020 21:13:21'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'as 11/12/2020 21:13:21'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'NR 10/17/2019 15:06:56' overrides: 16896425!
initialize

	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37'!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37'!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/23/2019 15:19:32'!
balance

	^transactions sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/17/2019 03:28:43'!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !

!classRemoval: #ReceptiveAccount stamp: 'as 11/12/2020 21:13:21'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'as 11/12/2020 21:13:22'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'as 11/12/2020 21:13:22'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'as 11/12/2020 21:13:23'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'as 11/12/2020 21:13:23'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:23'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:23'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:16:26'!
test01BalanceOfPortfolioWithoutAccountsIsZero

	self assert: 0 equals: Portfolio new balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:17:51'!
test02BalanceOfPortfolioWithOneAccountIsAccountBalance

	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: account balance equals: portfolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:23:25'!
test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolioAccount balance + simplePortfolio balance) equals: composedPortofolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:15'!
test04PortfolioWithoutAccountsHasNoRegisteredTransaction

	self deny: (Portfolio new hasRegistered: (Deposit for: 100))! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:11'!
test05PortfolioHasRegisteredItsAccountsTransactions

	| account portfolio deposit |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: (portfolio hasRegistered: deposit)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:06'!
test06PortfolioLooksForRegisteredTransactionsRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolio hasRegistered: simplePortfolioAccountDeposit).
	self assert: (composedPortfolio hasRegistered: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:10'!
test07PortfolioHasNoTransactionWhenHasNoAccounts

	self assert: Portfolio new transactions isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 6/22/2020 07:31:19'!
test08PortfolioTransactionsIncludesAllItsAccountsTransactions

	| account portfolio accountDeposit anotherAccount portfolioTransactions anotherAccountWithdraw |
	
	account := ReceptiveAccount new.
	accountDeposit := Deposit register: 100 on: account.
	anotherAccount := ReceptiveAccount new.
	anotherAccountWithdraw := Withdraw register: 100 on: account.
	portfolio := Portfolio with: account.
	
	portfolioTransactions := portfolio transactions.
	
	self assert: 2 equals: portfolioTransactions size.
	self assert: (portfolioTransactions includes: accountDeposit).
	self assert: (portfolioTransactions includes: anotherAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:20'!
test09PortfolioTransactionsAreCalculatedRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit composedPortfolioTransactions |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	composedPortfolioTransactions := composedPortfolio transactions.
	self assert: 2 equals: composedPortfolioTransactions size.
	self assert: (composedPortfolioTransactions includes: simplePortfolioAccountDeposit).
	self assert: (composedPortfolioTransactions includes: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:24'!
test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce

	| account portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: portfolio accountsSize.
			self assert: (portfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:28'!
test11PortfolioCanNotIncludeAccountOfItsPortfolios

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	composedPortfolio := Portfolio with: simplePortfolio.
	
	self 
		should: [ composedPortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: composedPortfolio accountsSize.
			self assert: (composedPortfolio accountsIncludes: simplePortfolio) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:32'!
test12PortfolioCanNotIncludeItself

	| account simplePortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	
	self 
		should: [ simplePortfolio add: simplePortfolio ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: simplePortfolio accountsSize.
			self assert: (simplePortfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:01:51'!
test13ComposedPortfolioCanNotHaveParentPortfolioAccount

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio new.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio add: account.
	
	self 
		should: [ simplePortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: simplePortfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:12:16'!
test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively

	| account leftParentPortfolio leftRootParentPortfolio portfolio rightParentPortfolio rightRootParentPortfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	leftParentPortfolio := Portfolio with: portfolio .
	leftRootParentPortfolio := Portfolio with: leftParentPortfolio.
	leftRootParentPortfolio add: account.
	
	rightParentPortfolio := Portfolio with: portfolio .
	rightRootParentPortfolio := Portfolio with: rightParentPortfolio.
	rightRootParentPortfolio add: account.

	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/29/2019 16:31:18'!
test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd

	| portfolioToAdd portfolioToModify rootPortfolio sharedAccount |
	
	sharedAccount := ReceptiveAccount new.
	portfolioToModify := Portfolio new.
	rootPortfolio := Portfolio with: sharedAccount with: portfolioToModify.
	portfolioToAdd := Portfolio with: sharedAccount.
	
	self 
		should: [ portfolioToModify add: portfolioToAdd ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolioToModify accountsIsEmpty ]! !

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:24'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:24'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:48'!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:54'!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:02'!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32'!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46'!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/9/2020 06:00:12'!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw account |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/9/2020 06:02:30'!
test07AccountKnowsItsTransactions 

	| account deposit |
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: account.
		
	self assert: 1 equals: account transactions size .
	self assert: (account transactions includes: deposit).
! !

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:25'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:25'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:23:47'!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:24:25'!
isComposedBy: anAccount

	self subclassResponsibility ! !
!Account methodsFor: 'balance' stamp: 'HAW 5/25/2019 12:23:40'!
balance

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:27'!
addTransactionsTo: aCollectionOfTransactions

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:15'!
transactions

	self subclassResponsibility ! !
!Account methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:24:04'!
addedTo: aPortfolio

	self subclassResponsibility ! !

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:25'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:25'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:20'!
accountsIncludes: anAccount

	^accounts includes: anAccount ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:05:04'!
accountsIsEmpty
	
	^accounts isEmpty ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:06'!
accountsSize
	
	^accounts size! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:19:20'!
add: accountToAdd

	self assertCanAdd: accountToAdd.
		
	accounts add: accountToAdd.
	accountToAdd addedTo: self 
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:17:31'!
rootParents
	
	| rootParents |
	
	rootParents := Set new.
	self addRootParentsTo: rootParents.
	
	^ rootParents! !
!Portfolio methodsFor: 'initialization' stamp: 'HAW 5/25/2019 12:03:18' overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:19:36' overrides: 50870408!
balance
	
	^accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:42:55' overrides: 50870412!
addTransactionsTo: aCollectionOfTransactions

	accounts do: [ :anAccount | anAccount addTransactionsTo: aCollectionOfTransactions ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:32' overrides: 50870417!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsTo: transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:02:59' overrides: 50870421!
addedTo: aPortfolio 
	
	parents add: aPortfolio ! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:20:56'!
anyRootParentIsComposedBy: accountToAdd

	^self rootParents anySatisfy: [ :aParent | aParent isComposedBy: accountToAdd]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:28:29' overrides: 50870400!
hasRegistered: aTransaction

	^accounts anySatisfy: [ :anAccount | anAccount hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/29/2019 16:24:54' overrides: 50870404!
isComposedBy: anAccount

	^ self = anAccount or: [ accounts anySatisfy: [ :composedAccount | (composedAccount isComposedBy: anAccount) or: [ anAccount isComposedBy: composedAccount ]]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:17:31'!
addRootParentsTo: rootParents

	parents 
		ifEmpty: [ rootParents add: self ] 
		ifNotEmpty: [ parents do: [ :aParent | aParent addRootParentsTo: rootParents ]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:20:36'!
assertCanAdd: accountToAdd

	(self anyRootParentIsComposedBy: accountToAdd) ifTrue: [ self signalCanNotAddAccount ].
! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 11:48:34'!
signalCanNotAddAccount
	
	self error: self class canNotAddAccountErrorMessage! !

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:26'!
Portfolio class
	instanceVariableNames: ''!

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:26'!
Portfolio class
	instanceVariableNames: ''!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'NR 11/9/2020 06:01:26'!
canNotAddAccountErrorMessage
	
	^'Can not add repeated account to a portfolio!!'! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:18:21'!
with: anAccount

	^self new 
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:23:59'!
with: anAccount with: anotherAccount

	^self new 
		add: anAccount;
		add: anotherAccount;
		yourself! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:26'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:26'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:35' overrides: 16896425!
initialize

	super initialize.
	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'NR 11/9/2020 05:56:36' overrides: 50870412!
addTransactionsTo: aCollectionOfTransactions

	aCollectionOfTransactions addAll: transactions copy! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37'!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' overrides: 50870417!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:24:46' overrides: 50870408!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/21/2019 18:55:56' overrides: 50870400!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:54:51' overrides: 50870404!
isComposedBy: anAccount

	^self = anAccount ! !
!ReceptiveAccount methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:03:32' overrides: 50870421!
addedTo: aPortfolio 
	
	! !

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:26'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:26'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' overrides: 16881508!
value 

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:39'!
affectBalance: aBalance

	self subclassResponsibility ! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:27'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:27'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/21/2019 18:54:27'!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:27'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:27'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45'!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' overrides: 50870649!
value

	^ value! !
!Deposit methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:02' overrides: 50870653!
affectBalance: aBalance

	^aBalance + value ! !

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:27'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:27'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:27'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:27'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46'!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' overrides: 50870649!
value

	^ value! !
!Withdraw methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:15' overrides: 50870653!
affectBalance: aBalance

	^aBalance - value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:27'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:27'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:27'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:27'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'no messages' stamp: 'as 11/9/2020 19:34:58'!
test01AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedInTransfer
	! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:27'!
Object subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:44:23'!
test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 balance equals: -100.
	self assert: account2 balance equals: 100.	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:44:39' prior: 50870788!
test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 balance equals: -100.
	self assert: account2 balance equals: 100.	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:45:04' prior: 50870802!
test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 balance equals: -100.
	self assert: account2 balance equals: 100.	
	
	! !

!methodRemoval: TransferTest #test01AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedInTransfer stamp: 'as 11/12/2020 21:13:27'!
test01AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedInTransfer
	!
!Transfer class methodsFor: 'no messages' stamp: 'as 11/9/2020 19:47:31'!
anAmountOf: anAmount from: originAccount to: destinationAccount
	self new initializeWith: anAmount from: originAccount to: destinationAccount.! !
!Transfer methodsFor: 'no messages' stamp: 'as 11/9/2020 19:47:45'!
initializeWith: anAmount from: originAccount to: destinationAccount
	! !

!classDefinition: #NameOfSubclass category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:27'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #NameOfSubclass category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:27'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #NameOfSubclass stamp: 'as 11/12/2020 21:13:28'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:48:46' prior: 50870843!
initializeWith: anAmount from: originAccount to: destinationAccount
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:54:17' prior: 50870870!
initializeWith: anAmount from: originAccount to: destinationAccount

	| deposit extraction |
	deposit := Deposit register: anAmount on: destinationAccount.
	extraction := Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:58:11'!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 hasRegistered: transfer withdraw.
	self assert: account2 hasRegistered: transfer deposit.
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:58:37' prior: 50870876!
initializeWith: anAmount from: originAccount to: destinationAccount

	| deposit withdraw |
	deposit := Deposit register: anAmount on: destinationAccount.
	withdraw := Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:59:24' prior: 50870901!
initializeWith: anAmount from: originAccount to: destinationAccount

	| deposit withdraw |
	deposit := Deposit register: anAmount on: destinationAccount.
	withdraw := Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:00:05' prior: 50870912!
initializeWith: anAmount from: originAccount to: destinationAccount

	Deposit register: anAmount on: destinationAccount.
	Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:28'!
Object subclass: #Transfer
	instanceVariableNames: 'deposit withdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:28'!
Object subclass: #Transfer
	instanceVariableNames: 'deposit withdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:00:39' prior: 50870923!
initializeWith: anAmount from: originAccount to: destinationAccount

	deposit := Deposit register: anAmount on: destinationAccount.
	withdraw := Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:01:13' prior: 50870886!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:02:48' prior: 50870957!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	"self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit)."

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:04:01'!
checkWithdrawIsRegisteredIn: anAccount
	anAccount hasRegistered: withdraw.
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:04:06' prior: 50870991!
checkWithdrawIsRegisteredIn: anAccount
	^anAccount hasRegistered: withdraw.
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:04:20'!
checkDepositIsRegisteredIn: anAccount
	^anAccount hasRegistered: deposit.
	! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:05:41' prior: 50870836!
anAmountOf: anAmount from: originAccount to: destinationAccount
	^self new initializeWith: anAmount from: originAccount to: destinationAccount.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:05:57' prior: 50870972!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:08:18'!
test02AccountTransactionsAreRegisteredInAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !

!methodRemoval: TransferTest #test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer stamp: 'as 11/12/2020 21:13:28'!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:09:34'!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:09:42'!
test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !

!methodRemoval: TransferTest #test02AccountTransactionsAreRegisteredInAccountsInvolvedAfterTransfer stamp: 'as 11/12/2020 21:13:28'!
test02AccountTransactionsAreRegisteredInAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:11:24' prior: 50871062!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	"self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	"
	
	self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer).
	
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'as 11/9/2020 20:12:14'!
hasTransfer: aTransfer
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:14:32' prior: 50871109!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer).
	
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'as 11/9/2020 20:16:19' prior: 50871127!
hasTransfer: aTransfer
	
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'as 11/9/2020 20:18:50' prior: 50871145!
hasTransfer: aTransfer
	transactions anySatisfy: [:transaction | transaction belongsTo: aTransfer].! !
!AccountTransaction methodsFor: 'balance' stamp: 'as 11/9/2020 20:19:12'!
belongsTo: aTransfer! !

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:28'!
Object subclass: #AccountTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'transfer' stamp: 'as 11/9/2020 20:19:57' prior: 50871155!
belongsTo: aTransfer
	^transfer = aTransfer.! !

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:28'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:28'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:29'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:29'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:29'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:29'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:29'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:29'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'transfer' stamp: 'as 11/9/2020 20:29:24' prior: 50871167!
belongsTo: aTransfer
	"^transfer = aTransfer. y esto donde vaaaaa"! !
!AccountTransaction methodsFor: 'transfer' stamp: 'as 11/9/2020 20:56:16' prior: 50871233!
belongsTo: aTransfer
	"^transfer = aTransfer."! !

!methodRemoval: AccountTransaction #belongsTo: stamp: 'as 11/12/2020 21:13:29'!
belongsTo: aTransfer
	"^transfer = aTransfer."!

!classRemoval: #TransferDeposit stamp: 'as 11/12/2020 21:13:29'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:29'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:29'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:29'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:29'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:29'!
TransferTransaction subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:29'!
TransferTransaction subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:29'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:29'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTransaction methodsFor: 'no messages' stamp: 'as 11/9/2020 21:01:09'!
belongsTo: aTransfer
	^transfer = aTransfer.! !

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:29'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: 'deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:30'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: 'deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:11:06' prior: 50871131!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer).

	"self assert: (account1 hasRegister: transfer withdraw).
	self assert: (account2 hasRegister: transfer deposit).	"
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:14:21' prior: 50871340!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	"self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer)."

	"self assert: (account1 hasRegister: transfer withdraw).
	self assert: (account2 hasRegister: transfer deposit).	"
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:14:27' prior: 50871358!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	"self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer)."

	"self assert: (account1 hasRegister: transfer withdraw).
	self assert: (account2 hasRegister: transfer deposit).	"
	
	
	! !

!classRemoval: #TransferWithdraw stamp: 'as 11/12/2020 21:13:30'!
TransferTransaction subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferDeposit stamp: 'as 11/12/2020 21:13:31'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: 'deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferTransaction stamp: 'as 11/12/2020 21:13:31'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:15:36' prior: 50871376!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	"self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer)."

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:16:11'!
withdraw
	^withdraw.
	
	
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:16:25'!
deposit
	^deposit.
	
	
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:16:36' prior: 50871415!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:17:27' prior: 50871077!
test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	"self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	"
	
	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:20:24' prior: 50871455!
test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:24:19' prior: 50871475!
test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	
	"transfer -> transaction"! !

!methodRemoval: TransferTest #test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer stamp: 'as 11/12/2020 21:13:31'!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	
	
	!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:30:13'!
test03AccountTransactionsInTransferAreConnected

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer withdraw transferDepositAssociated).
	self assert: (transfer deposit transferWithdrawAssociated).	
	! !

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:31'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:31'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:31'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:31'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:32'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:32'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:32'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:13:32'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferWithdraw methodsFor: 'no messages' stamp: 'as 11/9/2020 21:32:35'!
transferDepositAssociated
	^transfer deposit.! !
!TransferDeposit methodsFor: 'no messages' stamp: 'as 11/9/2020 21:32:59'!
transferWithdrawAssociated
	^transfer withdraw.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:33:57' prior: 50870947!
initializeWith: anAmount from: originAccount to: destinationAccount

	deposit := Deposit register: anAmount on: destinationAccount for: self.
	withdraw := Withdraw register: anAmount on: originAccount for: self.
	
	
	
	
	
	
	! !
!AccountTransaction class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:34:29'!
register: aValue on: account for: aTransfer

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !
!AccountTransaction class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:34:48' prior: 50871615!
register: aValue on: account for: aTransfer

	| transaction |
	
	transaction := self for: aValue for: aTransfer.
	account register: transaction.
		
	^ transaction! !
!Deposit class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:35:27'!
for: aValue for: aTransfer

	^ self new initializeFor: aValue for: aTransfer.! !
!Deposit class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:36:23' prior: 50871632!
for: aValue for: aTransfer

	^ TransferDeposit new initializeFor: aValue for: aTransfer.! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:37:12'!
initializeFor: aValue for: aTransfer
	value := aValue.
	! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:37:33' prior: 50871644!
initializeFor: aValue for: aTransfer
	value := aValue.
	transfer := aTransfer.! !
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:37:43'!
initializeFor: aValue for: aTransfer
	value := aValue.
	transfer := aTransfer.! !
!Withdraw class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:38:08'!
for: aValue for: aTransfer

	^ TransferWithdraw new initializeFor: aValue for: aTransfer.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:39:47' prior: 50871521!
test03AccountTransactionsInTransferAreConnected

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:40:24' prior: 50871667!
test03AccountTransactionsInTransferAreConnected

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	
	
	
	"FALTAN CASOS BORDEEEEE"! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:44:40'!
test04AccountCannotTransferToItself

	| account1 transfer|
	
	"account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	"
	
	
	"FALTAN CASOS BORDEEEEE"! !

----End fileIn of C:\Users\Ami\Desktop\Facultad\Ing1\windows64-portfolio2\windows64\Portfolio-Solucion.st----!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:17:21' prior: 50872128!
test03AccountTransactionsInTransferAreConnected

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	
	
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:18:29' prior: 50872145!
test04AccountCannotTransferToItself

	| account1 transfer|
	
	account1 := ReceptiveAccount new.	
	transfer := Transfer anAmountOf: 100 from: account1 to: account1.

	"self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	"
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:22:17' prior: 50872685!
test04AccountCannotTransferToItself

	| account1 |
	
	account1 := ReceptiveAccount new.	
	
	"self 
		should: [ Transfer anAmountOf: 100 from: account1 to: account1. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert:  equals: anError messageText. ]"

	! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:22:52'!
invalidTransferErrorMessage
	^'transfer is invalid'.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:23:30' prior: 50872699!
test04AccountCannotTransferToItself

	| account1 |
	
	account1 := ReceptiveAccount new.	
	
	self 
		should: [ Transfer anAmountOf: 100 from: account1 to: account1. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: Transfer invalidTransferErrorMessage equals: anError messageText. ]

	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:24:09' prior: 50872716!
test04AccountCannotTransferToItself

	| account1 |
	
	account1 := ReceptiveAccount new.	
	
	self 
		should: [ Transfer anAmountOf: 100 from: account1 to: account1. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: Transfer invalidTransferErrorMessage equals: anError messageText. ]

	! !

!testRun: #TransferTest #test04AccountCannotTransferToItself stamp: 'as 11/12/2020 21:24:17'!
FAILURE!

!testRun: #TransferTest #test04AccountCannotTransferToItself stamp: 'as 11/12/2020 21:24:17'!
FAILURE!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:25:37' prior: 50872657!
anAmountOf: anAmount from: originAccount to: destinationAccount
	
	originAccount = destinationAccount ifTrue: [^ Error signal: self class invalidTransferErrorMessage ].
	
	^self new initializeWith: anAmount from: originAccount to: destinationAccount.! !

!testRun: #TransferTest #test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer stamp: 'as 11/12/2020 21:25:41'!
PASSED!

!testRun: #TransferTest #test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer stamp: 'as 11/12/2020 21:25:41'!
PASSED!

!testRun: #TransferTest #test03AccountTransactionsInTransferAreConnected stamp: 'as 11/12/2020 21:25:41'!
PASSED!

!testRun: #TransferTest #test04AccountCannotTransferToItself stamp: 'as 11/12/2020 21:25:41'!
FAILURE!

!testRun: #TransferTest #test04AccountCannotTransferToItself stamp: 'as 11/12/2020 21:25:41'!
FAILURE!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:25:52' prior: 50872749!
anAmountOf: anAmount from: originAccount to: destinationAccount
	
	originAccount = destinationAccount ifTrue: [^ Error signal: self invalidTransferErrorMessage ].
	
	^self new initializeWith: anAmount from: originAccount to: destinationAccount.! !

!testRun: #TransferTest #test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer stamp: 'as 11/12/2020 21:25:57'!
PASSED!

!testRun: #TransferTest #test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer stamp: 'as 11/12/2020 21:25:57'!
PASSED!

!testRun: #TransferTest #test03AccountTransactionsInTransferAreConnected stamp: 'as 11/12/2020 21:25:57'!
PASSED!

!testRun: #TransferTest #test04AccountCannotTransferToItself stamp: 'as 11/12/2020 21:25:57'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:26:43'!
test05AccountCannotTransferNegativeAmount

	| account1 account2|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	self 
		should: [ Transfer anAmountOf: -100 from: account1 to: account2. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: Transfer invalidTransferErrorMessage equals: anError messageText. ]

	! !

!testRun: #TransferTest #test05AccountCannotTransferNegativeAmount stamp: 'as 11/12/2020 21:26:50'!
FAILURE!

!testRun: #TransferTest #test05AccountCannotTransferNegativeAmount stamp: 'as 11/12/2020 21:26:50'!
FAILURE!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:27:50' prior: 50872780!
anAmountOf: anAmount from: originAccount to: destinationAccount
	
	originAccount = destinationAccount ifTrue: [^ Error signal: self invalidTransferErrorMessage ].
	anAmount <= 0 ifTrue: [^ Error signal: self invalidTransferErrorMessage ].	
	
	^self new initializeWith: anAmount from: originAccount to: destinationAccount.! !

!testRun: #TransferTest #test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer stamp: 'as 11/12/2020 21:27:54'!
PASSED!

!testRun: #TransferTest #test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer stamp: 'as 11/12/2020 21:27:54'!
PASSED!

!testRun: #TransferTest #test03AccountTransactionsInTransferAreConnected stamp: 'as 11/12/2020 21:27:54'!
PASSED!

!testRun: #TransferTest #test04AccountCannotTransferToItself stamp: 'as 11/12/2020 21:27:54'!
PASSED!

!testRun: #TransferTest #test05AccountCannotTransferNegativeAmount stamp: 'as 11/12/2020 21:27:54'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:28:27'!
test05AccountCannotTransferInvalidAmount

	| account1 account2|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	self 
		should: [ Transfer anAmountOf: -100 from: account1 to: account2. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: Transfer invalidTransferErrorMessage equals: anError messageText. ]

	! !

!methodRemoval: TransferTest #test05AccountCannotTransferNegativeAmount stamp: 'as 11/12/2020 21:28:35'!
test05AccountCannotTransferNegativeAmount

	| account1 account2|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	self 
		should: [ Transfer anAmountOf: -100 from: account1 to: account2. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: Transfer invalidTransferErrorMessage equals: anError messageText. ]

	!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:32:42'!
validateTransferCollaboratorsIn: aBlockToValidate
	aBlockToValidate ifTrue: [^ Error signal: self invalidTransferErrorMessage ].	! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:33:21' prior: 50872829!
anAmountOf: anAmount from: originAccount to: destinationAccount
	
	originAccount = destinationAccount ifTrue: [^ Error signal: self invalidTransferErrorMessage ].
	[anAmount <= 0] ifTrue: [^ Error signal: self invalidTransferErrorMessage ].	
	
	
	
	^self new initializeWith: anAmount from: originAccount to: destinationAccount.! !

!testRun: #TransferTest #test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer stamp: 'as 11/12/2020 21:33:25'!
ERROR!

!testRun: #TransferTest #test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer stamp: 'as 11/12/2020 21:33:25'!
ERROR!

!testRun: #TransferTest #test03AccountTransactionsInTransferAreConnected stamp: 'as 11/12/2020 21:33:25'!
ERROR!

!testRun: #TransferTest #test04AccountCannotTransferToItself stamp: 'as 11/12/2020 21:33:25'!
PASSED!

!testRun: #TransferTest #test05AccountCannotTransferInvalidAmount stamp: 'as 11/12/2020 21:33:25'!
FAILURE!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:33:33' prior: 50872897!
anAmountOf: anAmount from: originAccount to: destinationAccount
	
	originAccount = destinationAccount ifTrue: [^ Error signal: self invalidTransferErrorMessage ].
	[anAmount <= 0] value ifTrue: [^ Error signal: self invalidTransferErrorMessage ].	
	
	
	
	^self new initializeWith: anAmount from: originAccount to: destinationAccount.! !

!testRun: #TransferTest #test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer stamp: 'as 11/12/2020 21:33:37'!
PASSED!

!testRun: #TransferTest #test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer stamp: 'as 11/12/2020 21:33:37'!
PASSED!

!testRun: #TransferTest #test03AccountTransactionsInTransferAreConnected stamp: 'as 11/12/2020 21:33:37'!
PASSED!

!testRun: #TransferTest #test04AccountCannotTransferToItself stamp: 'as 11/12/2020 21:33:37'!
PASSED!

!testRun: #TransferTest #test05AccountCannotTransferInvalidAmount stamp: 'as 11/12/2020 21:33:37'!
PASSED!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:33:46' prior: 50872889!
validateTransferCollaboratorsIn: aBlockToValidate
	aBlockToValidate value ifTrue: [^ Error signal: self invalidTransferErrorMessage ].	! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:34:39' prior: 50872930!
anAmountOf: anAmount from: originAccount to: destinationAccount
	
	"originAccount = destinationAccount ifTrue: [^ Error signal: self invalidTransferErrorMessage ].
	[anAmount <= 0] value ifTrue: [^ Error signal: self invalidTransferErrorMessage ].	"
	
	self validateTransferCollaboratorsIn: [originAccount = destinationAccount].
	self validateTransferCollaboratorsIn: [anAmount <= 0].
	
	^self new initializeWith: anAmount from: originAccount to: destinationAccount.! !

!testRun: #TransferTest #test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer stamp: 'as 11/12/2020 21:34:43'!
PASSED!

!testRun: #TransferTest #test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer stamp: 'as 11/12/2020 21:34:43'!
PASSED!

!testRun: #TransferTest #test03AccountTransactionsInTransferAreConnected stamp: 'as 11/12/2020 21:34:43'!
PASSED!

!testRun: #TransferTest #test04AccountCannotTransferToItself stamp: 'as 11/12/2020 21:34:43'!
PASSED!

!testRun: #TransferTest #test05AccountCannotTransferInvalidAmount stamp: 'as 11/12/2020 21:34:43'!
PASSED!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:34:52' prior: 50872971!
anAmountOf: anAmount from: originAccount to: destinationAccount
	
	self validateTransferCollaboratorsIn: [originAccount = destinationAccount].
	self validateTransferCollaboratorsIn: [anAmount <= 0].
	
	^self new initializeWith: anAmount from: originAccount to: destinationAccount.! !

TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryTest category: 'Portfolio-Solucion' stamp: 'as 11/12/2020 21:36:23'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryTest methodsFor: 'no messages' stamp: 'as 11/12/2020 21:37:12'!
test01AccountSummaryForAnEmptyAccount
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:37:43' prior: 50873032!
test01AccountSummaryForAnEmptyAccount
	
	| account1 |
	account1 := ReceptiveAccount new.	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:38:50' prior: 50873037!
test01AccountSummaryForAnEmptyAccount
	
	| account1 |
	account1 := ReceptiveAccount new.	
	
	self assert: account1 accountSummary equals: OrderedCollection new.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:39:45' prior: 50873044!
test01AccountSummaryForAnEmptyAccount
	
	| account1 |
	account1 := ReceptiveAccount new.	
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Balance = 0').! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'as 11/12/2020 21:40:31'!
accountSummary
	^OrderedCollection with: 'Balance = 0'.! !

!testRun: #AccountSummaryTest #test01AccountSummaryForAnEmptyAccount stamp: 'as 11/12/2020 21:40:42'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:41:01'!
test02AccountSummaryForAnAccountWithADeposit
	
	| account1 |
	account1 := ReceptiveAccount new.	
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Balance = 0').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:42:00' prior: 50873070!
test02AccountSummaryForAnAccountWithADeposit
	
	| account1 |
	account1 := ReceptiveAccount new.	
	Deposit register: 100 on: account1.
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 0').! !

!testRun: #AccountSummaryTest #test02AccountSummaryForAnAccountWithADeposit stamp: 'as 11/12/2020 21:42:08'!
FAILURE!

!testRun: #AccountSummaryTest #test02AccountSummaryForAnAccountWithADeposit stamp: 'as 11/12/2020 21:42:08'!
FAILURE!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:42:34' prior: 50873080!
test02AccountSummaryForAnAccountWithADeposit
	
	| account1 |
	account1 := ReceptiveAccount new.	
	Deposit register: 100 on: account1.
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100').! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:42:56' prior: 50873061!
accountSummary
	"^OrderedCollection with: 'Balance = 0'."
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:44:11' prior: 50873111!
accountSummary
	"^OrderedCollection with: 'Balance = 0'."
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	^OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100'.
	! !

!testRun: #AccountSummaryTest #test01AccountSummaryForAnEmptyAccount stamp: 'as 11/12/2020 21:44:16'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAnAccountWithADeposit stamp: 'as 11/12/2020 21:44:16'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:44:53'!
test03AccountSummaryForAnAccountWithTwoDeposit
	
	| account1 |
	account1 := ReceptiveAccount new.	
	Deposit register: 100 on: account1.
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:45:12' prior: 50873134!
test03AccountSummaryForAnAccountWithTwoDeposit
	
	| account1 |
	account1 := ReceptiveAccount new.	
	Deposit register: 100 on: account1.
	Deposit register: 100 on: account1.	
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Dep�sito por 100.' with: 'Balance = 200').! !

!testRun: #AccountSummaryTest #test03AccountSummaryForAnAccountWithTwoDeposit stamp: 'as 11/12/2020 21:45:25'!
FAILURE!

!testRun: #AccountSummaryTest #test03AccountSummaryForAnAccountWithTwoDeposit stamp: 'as 11/12/2020 21:45:25'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:47:54' prior: 50873117!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [summary addLast: 'Dep�sito por 100.'].
	summary addLast: 'Balance = ', transactions size * 100 asString.
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:48:12' prior: 50873167!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [summary addLast: 'Dep�sito por 100.'].
	summary addLast: 'Balance = ', transactions size * 100 asString.
	^summary.
	! !

!testRun: #AccountSummaryTest #test01AccountSummaryForAnEmptyAccount stamp: 'as 11/12/2020 21:48:18'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAnAccountWithADeposit stamp: 'as 11/12/2020 21:48:18'!
ERROR!

!testRun: #AccountSummaryTest #test03AccountSummaryForAnAccountWithTwoDeposit stamp: 'as 11/12/2020 21:48:18'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:48:56' prior: 50873179!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [summary addLast: 'Dep�sito por 100.'].
	summary addLast: 'Balance = ', (transactions size * 100) asString.
	^summary.
	! !

!testRun: #AccountSummaryTest #test01AccountSummaryForAnEmptyAccount stamp: 'as 11/12/2020 21:49:10'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAnAccountWithADeposit stamp: 'as 11/12/2020 21:49:11'!
ERROR!

!testRun: #AccountSummaryTest #test03AccountSummaryForAnAccountWithTwoDeposit stamp: 'as 11/12/2020 21:49:11'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:49:45' prior: 50873202!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [summary addLast: 'Dep�sito por 100.'].
	summary addLast: ('Balance = ', (transactions size * 100) asString).
	^summary.
	! !

!testRun: #AccountSummaryTest #test01AccountSummaryForAnEmptyAccount stamp: 'as 11/12/2020 21:49:50'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAnAccountWithADeposit stamp: 'as 11/12/2020 21:49:50'!
ERROR!

!testRun: #AccountSummaryTest #test03AccountSummaryForAnAccountWithTwoDeposit stamp: 'as 11/12/2020 21:49:50'!
ERROR!

!testRun: #AccountSummaryTest #test02AccountSummaryForAnAccountWithADeposit stamp: 'as 11/12/2020 21:50:42'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:52:12' prior: 50873225!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [summary add: 'Dep�sito por 100.'].
	summary add: ('Balance = ', (transactions size * 100) asString).
	^summary.
	! !

!testRun: #AccountSummaryTest #test01AccountSummaryForAnEmptyAccount stamp: 'as 11/12/2020 21:52:17'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAnAccountWithADeposit stamp: 'as 11/12/2020 21:52:17'!
ERROR!

!testRun: #AccountSummaryTest #test03AccountSummaryForAnAccountWithTwoDeposit stamp: 'as 11/12/2020 21:52:17'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:52:51' prior: 50873252!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [:aTransaction | summary add: 'Dep�sito por 100.'].
	summary add: ('Balance = ', (transactions size * 100) asString).
	^summary.
	! !

!testRun: #AccountSummaryTest #test01AccountSummaryForAnEmptyAccount stamp: 'as 11/12/2020 21:52:59'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAnAccountWithADeposit stamp: 'as 11/12/2020 21:53:00'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAnAccountWithTwoDeposit stamp: 'as 11/12/2020 21:53:00'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:54:04'!
test04AccountSummaryForAnAccountWithWithdraw
	
	| account1 |
	account1 := ReceptiveAccount new.	
	Withdraw register: 100 on: account1.	
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Extracci�n por 100.' with: 'Balance = -100').! !

!testRun: #AccountSummaryTest #test04AccountSummaryForAnAccountWithWithdraw stamp: 'as 11/12/2020 21:54:08'!
FAILURE!

!testRun: #AccountSummaryTest #test04AccountSummaryForAnAccountWithWithdraw stamp: 'as 11/12/2020 21:54:08'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:56:41' prior: 50873275!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [:aTransaction | 
					(aTransaction isKindOf: Deposit) ifTrue: [summary add: 'Dep�sito por 100.'].
 					(aTransaction isKindOf: Withdraw ) ifTrue: [summary add: 'Extracci�n por 100.']				
		].
	summary add: ('Balance = ',  self balance asString).
	^summary.
	! !

!testRun: #AccountSummaryTest #test01AccountSummaryForAnEmptyAccount stamp: 'as 11/12/2020 21:56:46'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAnAccountWithADeposit stamp: 'as 11/12/2020 21:56:46'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAnAccountWithTwoDeposit stamp: 'as 11/12/2020 21:56:46'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAnAccountWithWithdraw stamp: 'as 11/12/2020 21:56:46'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:58:14'!
test05AccountSummaryForAnAccountWithTransferWithdraw
	
	| account1 account2|
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	TransferWithdraw register: 100 on: account1.	
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Salida por transferencia de 100.' with: 'Balance = -100').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:59:55' prior: 50873348!
test05AccountSummaryForAnAccountWithTransferWithdraw
	
	| account1 account2|
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Salida por transferencia de 100.' with: 'Balance = -100').! !

!testRun: #AccountSummaryTest #test05AccountSummaryForAnAccountWithTransferWithdraw stamp: 'as 11/12/2020 22:00:00'!
FAILURE!

!testRun: #AccountSummaryTest #test05AccountSummaryForAnAccountWithTransferWithdraw stamp: 'as 11/12/2020 22:00:00'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 22:00:53' prior: 50873317!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [:aTransaction | 
					(aTransaction isKindOf: Deposit) ifTrue: [summary add: 'Dep�sito por 100.'].
 					(aTransaction isKindOf: Withdraw ) ifTrue: [summary add: 'Extracci�n por 100.']	.
					(aTransaction isKindOf: TransferWithdraw ) ifTrue: [summary add: 'Salida por transferencia de 100.']			.		
		].
	summary add: ('Balance = ',  self balance asString).
	^summary.
	! !

!testRun: #AccountSummaryTest #test01AccountSummaryForAnEmptyAccount stamp: 'as 11/12/2020 22:00:58'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAnAccountWithADeposit stamp: 'as 11/12/2020 22:00:58'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAnAccountWithTwoDeposit stamp: 'as 11/12/2020 22:00:58'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAnAccountWithWithdraw stamp: 'as 11/12/2020 22:00:58'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryForAnAccountWithTransferWithdraw stamp: 'as 11/12/2020 22:00:58'!
FAILURE!

!testRun: #AccountSummaryTest #test05AccountSummaryForAnAccountWithTransferWithdraw stamp: 'as 11/12/2020 22:00:58'!
FAILURE!

----STARTUP---- (14 November 2020 10:24:08) as C:\Users\Ami\Desktop\Facultad\Ing1\windows64-portfolio2\windows64\CuisUniversity-4384.image!


!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 10:24:20'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 10:24:20'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:44'!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:48'!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:52'!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32'!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46'!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:14:15'!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw account |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:14:01'!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 50 on: account1.
		
	self assert: 1 equals: account1 transactions size.
	self assert: (account1 transactions includes: deposit1).
! !

!classDefinition: #AccountTransaction category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 10:24:20'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #AccountTransaction category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 10:24:20'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' overrides: 16881508!
value 

	self subclassResponsibility ! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 10:24:20'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 10:24:20'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/17/2019 03:22:00'!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 10:24:20'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Deposit category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 10:24:20'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45'!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' overrides: 50873534!
value

	^ value! !

!classDefinition: 'Deposit class' category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 10:24:20'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 10:24:20'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Withdraw category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 10:24:20'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Withdraw category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 10:24:20'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46'!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' overrides: 50873534!
value

	^ value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 10:24:20'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 10:24:20'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 10:24:20'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 10:24:20'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'NR 10/17/2019 15:06:56' overrides: 16896425!
initialize

	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37'!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37'!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/23/2019 15:19:32'!
balance

	^transactions sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/17/2019 03:28:43'!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !

!classRemoval: #ReceptiveAccount stamp: 'as 11/14/2020 10:24:21'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'as 11/14/2020 10:24:21'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'as 11/14/2020 10:24:22'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'as 11/14/2020 10:24:22'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'as 11/14/2020 10:24:22'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:22'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:22'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:16:26'!
test01BalanceOfPortfolioWithoutAccountsIsZero

	self assert: 0 equals: Portfolio new balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:17:51'!
test02BalanceOfPortfolioWithOneAccountIsAccountBalance

	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: account balance equals: portfolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:23:25'!
test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolioAccount balance + simplePortfolio balance) equals: composedPortofolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:15'!
test04PortfolioWithoutAccountsHasNoRegisteredTransaction

	self deny: (Portfolio new hasRegistered: (Deposit for: 100))! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:11'!
test05PortfolioHasRegisteredItsAccountsTransactions

	| account portfolio deposit |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: (portfolio hasRegistered: deposit)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:06'!
test06PortfolioLooksForRegisteredTransactionsRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolio hasRegistered: simplePortfolioAccountDeposit).
	self assert: (composedPortfolio hasRegistered: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:10'!
test07PortfolioHasNoTransactionWhenHasNoAccounts

	self assert: Portfolio new transactions isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 6/22/2020 07:31:19'!
test08PortfolioTransactionsIncludesAllItsAccountsTransactions

	| account portfolio accountDeposit anotherAccount portfolioTransactions anotherAccountWithdraw |
	
	account := ReceptiveAccount new.
	accountDeposit := Deposit register: 100 on: account.
	anotherAccount := ReceptiveAccount new.
	anotherAccountWithdraw := Withdraw register: 100 on: account.
	portfolio := Portfolio with: account.
	
	portfolioTransactions := portfolio transactions.
	
	self assert: 2 equals: portfolioTransactions size.
	self assert: (portfolioTransactions includes: accountDeposit).
	self assert: (portfolioTransactions includes: anotherAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:20'!
test09PortfolioTransactionsAreCalculatedRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit composedPortfolioTransactions |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	composedPortfolioTransactions := composedPortfolio transactions.
	self assert: 2 equals: composedPortfolioTransactions size.
	self assert: (composedPortfolioTransactions includes: simplePortfolioAccountDeposit).
	self assert: (composedPortfolioTransactions includes: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:24'!
test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce

	| account portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: portfolio accountsSize.
			self assert: (portfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:28'!
test11PortfolioCanNotIncludeAccountOfItsPortfolios

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	composedPortfolio := Portfolio with: simplePortfolio.
	
	self 
		should: [ composedPortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: composedPortfolio accountsSize.
			self assert: (composedPortfolio accountsIncludes: simplePortfolio) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:32'!
test12PortfolioCanNotIncludeItself

	| account simplePortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	
	self 
		should: [ simplePortfolio add: simplePortfolio ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: simplePortfolio accountsSize.
			self assert: (simplePortfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:01:51'!
test13ComposedPortfolioCanNotHaveParentPortfolioAccount

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio new.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio add: account.
	
	self 
		should: [ simplePortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: simplePortfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:12:16'!
test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively

	| account leftParentPortfolio leftRootParentPortfolio portfolio rightParentPortfolio rightRootParentPortfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	leftParentPortfolio := Portfolio with: portfolio .
	leftRootParentPortfolio := Portfolio with: leftParentPortfolio.
	leftRootParentPortfolio add: account.
	
	rightParentPortfolio := Portfolio with: portfolio .
	rightRootParentPortfolio := Portfolio with: rightParentPortfolio.
	rightRootParentPortfolio add: account.

	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/29/2019 16:31:18'!
test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd

	| portfolioToAdd portfolioToModify rootPortfolio sharedAccount |
	
	sharedAccount := ReceptiveAccount new.
	portfolioToModify := Portfolio new.
	rootPortfolio := Portfolio with: sharedAccount with: portfolioToModify.
	portfolioToAdd := Portfolio with: sharedAccount.
	
	self 
		should: [ portfolioToModify add: portfolioToAdd ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolioToModify accountsIsEmpty ]! !

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:23'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:23'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:48'!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:54'!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:02'!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32'!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46'!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/9/2020 06:00:12'!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw account |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/9/2020 06:02:30'!
test07AccountKnowsItsTransactions 

	| account deposit |
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: account.
		
	self assert: 1 equals: account transactions size .
	self assert: (account transactions includes: deposit).
! !

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:23'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:23'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:23:47'!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:24:25'!
isComposedBy: anAccount

	self subclassResponsibility ! !
!Account methodsFor: 'balance' stamp: 'HAW 5/25/2019 12:23:40'!
balance

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:27'!
addTransactionsTo: aCollectionOfTransactions

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:15'!
transactions

	self subclassResponsibility ! !
!Account methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:24:04'!
addedTo: aPortfolio

	self subclassResponsibility ! !

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:23'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:23'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:20'!
accountsIncludes: anAccount

	^accounts includes: anAccount ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:05:04'!
accountsIsEmpty
	
	^accounts isEmpty ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:06'!
accountsSize
	
	^accounts size! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:19:20'!
add: accountToAdd

	self assertCanAdd: accountToAdd.
		
	accounts add: accountToAdd.
	accountToAdd addedTo: self 
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:17:31'!
rootParents
	
	| rootParents |
	
	rootParents := Set new.
	self addRootParentsTo: rootParents.
	
	^ rootParents! !
!Portfolio methodsFor: 'initialization' stamp: 'HAW 5/25/2019 12:03:18' overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:19:36' overrides: 50874100!
balance
	
	^accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:42:55' overrides: 50874104!
addTransactionsTo: aCollectionOfTransactions

	accounts do: [ :anAccount | anAccount addTransactionsTo: aCollectionOfTransactions ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:32' overrides: 50874109!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsTo: transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:02:59' overrides: 50874113!
addedTo: aPortfolio 
	
	parents add: aPortfolio ! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:20:56'!
anyRootParentIsComposedBy: accountToAdd

	^self rootParents anySatisfy: [ :aParent | aParent isComposedBy: accountToAdd]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:28:29' overrides: 50874092!
hasRegistered: aTransaction

	^accounts anySatisfy: [ :anAccount | anAccount hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/29/2019 16:24:54' overrides: 50874096!
isComposedBy: anAccount

	^ self = anAccount or: [ accounts anySatisfy: [ :composedAccount | (composedAccount isComposedBy: anAccount) or: [ anAccount isComposedBy: composedAccount ]]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:17:31'!
addRootParentsTo: rootParents

	parents 
		ifEmpty: [ rootParents add: self ] 
		ifNotEmpty: [ parents do: [ :aParent | aParent addRootParentsTo: rootParents ]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:20:36'!
assertCanAdd: accountToAdd

	(self anyRootParentIsComposedBy: accountToAdd) ifTrue: [ self signalCanNotAddAccount ].
! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 11:48:34'!
signalCanNotAddAccount
	
	self error: self class canNotAddAccountErrorMessage! !

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:24'!
Portfolio class
	instanceVariableNames: ''!

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:24'!
Portfolio class
	instanceVariableNames: ''!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'NR 11/9/2020 06:01:26'!
canNotAddAccountErrorMessage
	
	^'Can not add repeated account to a portfolio!!'! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:18:21'!
with: anAccount

	^self new 
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:23:59'!
with: anAccount with: anotherAccount

	^self new 
		add: anAccount;
		add: anotherAccount;
		yourself! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:24'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:24'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:35' overrides: 16896425!
initialize

	super initialize.
	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'NR 11/9/2020 05:56:36' overrides: 50874104!
addTransactionsTo: aCollectionOfTransactions

	aCollectionOfTransactions addAll: transactions copy! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37'!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' overrides: 50874109!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:24:46' overrides: 50874100!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/21/2019 18:55:56' overrides: 50874092!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:54:51' overrides: 50874096!
isComposedBy: anAccount

	^self = anAccount ! !
!ReceptiveAccount methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:03:32' overrides: 50874113!
addedTo: aPortfolio 
	
	! !

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:25'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:25'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' overrides: 16881508!
value 

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:39'!
affectBalance: aBalance

	self subclassResponsibility ! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:25'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:25'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/21/2019 18:54:27'!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:25'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:25'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45'!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' overrides: 50874341!
value

	^ value! !
!Deposit methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:02' overrides: 50874345!
affectBalance: aBalance

	^aBalance + value ! !

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:25'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:25'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:25'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:25'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46'!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' overrides: 50874341!
value

	^ value! !
!Withdraw methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:15' overrides: 50874345!
affectBalance: aBalance

	^aBalance - value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:25'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:25'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:25'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:25'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'no messages' stamp: 'as 11/9/2020 19:34:58'!
test01AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedInTransfer
	! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:25'!
Object subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:44:23'!
test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 balance equals: -100.
	self assert: account2 balance equals: 100.	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:44:39' prior: 50874480!
test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 balance equals: -100.
	self assert: account2 balance equals: 100.	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:45:04' prior: 50874494!
test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 balance equals: -100.
	self assert: account2 balance equals: 100.	
	
	! !

!methodRemoval: TransferTest #test01AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedInTransfer stamp: 'as 11/14/2020 10:24:25'!
test01AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedInTransfer
	!
!Transfer class methodsFor: 'no messages' stamp: 'as 11/9/2020 19:47:31'!
anAmountOf: anAmount from: originAccount to: destinationAccount
	self new initializeWith: anAmount from: originAccount to: destinationAccount.! !
!Transfer methodsFor: 'no messages' stamp: 'as 11/9/2020 19:47:45'!
initializeWith: anAmount from: originAccount to: destinationAccount
	! !

!classDefinition: #NameOfSubclass category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:26'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #NameOfSubclass category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:26'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #NameOfSubclass stamp: 'as 11/14/2020 10:24:26'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:48:46' prior: 50874535!
initializeWith: anAmount from: originAccount to: destinationAccount
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:54:17' prior: 50874562!
initializeWith: anAmount from: originAccount to: destinationAccount

	| deposit extraction |
	deposit := Deposit register: anAmount on: destinationAccount.
	extraction := Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:58:11'!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 hasRegistered: transfer withdraw.
	self assert: account2 hasRegistered: transfer deposit.
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:58:37' prior: 50874568!
initializeWith: anAmount from: originAccount to: destinationAccount

	| deposit withdraw |
	deposit := Deposit register: anAmount on: destinationAccount.
	withdraw := Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:59:24' prior: 50874593!
initializeWith: anAmount from: originAccount to: destinationAccount

	| deposit withdraw |
	deposit := Deposit register: anAmount on: destinationAccount.
	withdraw := Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:00:05' prior: 50874604!
initializeWith: anAmount from: originAccount to: destinationAccount

	Deposit register: anAmount on: destinationAccount.
	Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:26'!
Object subclass: #Transfer
	instanceVariableNames: 'deposit withdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:26'!
Object subclass: #Transfer
	instanceVariableNames: 'deposit withdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:00:39' prior: 50874615!
initializeWith: anAmount from: originAccount to: destinationAccount

	deposit := Deposit register: anAmount on: destinationAccount.
	withdraw := Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:01:13' prior: 50874578!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:02:48' prior: 50874649!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	"self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit)."

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:04:01'!
checkWithdrawIsRegisteredIn: anAccount
	anAccount hasRegistered: withdraw.
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:04:06' prior: 50874683!
checkWithdrawIsRegisteredIn: anAccount
	^anAccount hasRegistered: withdraw.
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:04:20'!
checkDepositIsRegisteredIn: anAccount
	^anAccount hasRegistered: deposit.
	! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:05:41' prior: 50874528!
anAmountOf: anAmount from: originAccount to: destinationAccount
	^self new initializeWith: anAmount from: originAccount to: destinationAccount.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:05:57' prior: 50874664!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:08:18'!
test02AccountTransactionsAreRegisteredInAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !

!methodRemoval: TransferTest #test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer stamp: 'as 11/14/2020 10:24:26'!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:09:34'!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:09:42'!
test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !

!methodRemoval: TransferTest #test02AccountTransactionsAreRegisteredInAccountsInvolvedAfterTransfer stamp: 'as 11/14/2020 10:24:26'!
test02AccountTransactionsAreRegisteredInAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:11:24' prior: 50874754!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	"self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	"
	
	self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer).
	
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'as 11/9/2020 20:12:14'!
hasTransfer: aTransfer
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:14:32' prior: 50874801!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer).
	
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'as 11/9/2020 20:16:19' prior: 50874819!
hasTransfer: aTransfer
	
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'as 11/9/2020 20:18:50' prior: 50874837!
hasTransfer: aTransfer
	transactions anySatisfy: [:transaction | transaction belongsTo: aTransfer].! !
!AccountTransaction methodsFor: 'balance' stamp: 'as 11/9/2020 20:19:12'!
belongsTo: aTransfer! !

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:26'!
Object subclass: #AccountTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'transfer' stamp: 'as 11/9/2020 20:19:57' prior: 50874847!
belongsTo: aTransfer
	^transfer = aTransfer.! !

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:27'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:27'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:27'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:27'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:27'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:27'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:27'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:27'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'transfer' stamp: 'as 11/9/2020 20:29:24' prior: 50874859!
belongsTo: aTransfer
	"^transfer = aTransfer. y esto donde vaaaaa"! !
!AccountTransaction methodsFor: 'transfer' stamp: 'as 11/9/2020 20:56:16' prior: 50874925!
belongsTo: aTransfer
	"^transfer = aTransfer."! !

!methodRemoval: AccountTransaction #belongsTo: stamp: 'as 11/14/2020 10:24:27'!
belongsTo: aTransfer
	"^transfer = aTransfer."!

!classRemoval: #TransferDeposit stamp: 'as 11/14/2020 10:24:27'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:27'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:27'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:27'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:27'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:27'!
TransferTransaction subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:27'!
TransferTransaction subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:27'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:27'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTransaction methodsFor: 'no messages' stamp: 'as 11/9/2020 21:01:09'!
belongsTo: aTransfer
	^transfer = aTransfer.! !

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:27'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: 'deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:27'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: 'deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:11:06' prior: 50874823!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer).

	"self assert: (account1 hasRegister: transfer withdraw).
	self assert: (account2 hasRegister: transfer deposit).	"
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:14:21' prior: 50875032!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	"self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer)."

	"self assert: (account1 hasRegister: transfer withdraw).
	self assert: (account2 hasRegister: transfer deposit).	"
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:14:27' prior: 50875050!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	"self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer)."

	"self assert: (account1 hasRegister: transfer withdraw).
	self assert: (account2 hasRegister: transfer deposit).	"
	
	
	! !

!classRemoval: #TransferWithdraw stamp: 'as 11/14/2020 10:24:28'!
TransferTransaction subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferDeposit stamp: 'as 11/14/2020 10:24:28'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: 'deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferTransaction stamp: 'as 11/14/2020 10:24:28'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:15:36' prior: 50875068!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	"self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer)."

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:16:11'!
withdraw
	^withdraw.
	
	
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:16:25'!
deposit
	^deposit.
	
	
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:16:36' prior: 50875107!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:17:27' prior: 50874769!
test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	"self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	"
	
	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:20:24' prior: 50875147!
test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:24:19' prior: 50875167!
test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	
	"transfer -> transaction"! !

!methodRemoval: TransferTest #test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer stamp: 'as 11/14/2020 10:24:28'!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	
	
	!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:30:13'!
test03AccountTransactionsInTransferAreConnected

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer withdraw transferDepositAssociated).
	self assert: (transfer deposit transferWithdrawAssociated).	
	! !

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:28'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:28'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:28'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:28'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:28'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:28'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:28'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:28'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferWithdraw methodsFor: 'no messages' stamp: 'as 11/9/2020 21:32:35'!
transferDepositAssociated
	^transfer deposit.! !
!TransferDeposit methodsFor: 'no messages' stamp: 'as 11/9/2020 21:32:59'!
transferWithdrawAssociated
	^transfer withdraw.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:33:57' prior: 50874639!
initializeWith: anAmount from: originAccount to: destinationAccount

	deposit := Deposit register: anAmount on: destinationAccount for: self.
	withdraw := Withdraw register: anAmount on: originAccount for: self.
	
	
	
	
	
	
	! !
!AccountTransaction class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:34:29'!
register: aValue on: account for: aTransfer

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !
!AccountTransaction class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:34:48' prior: 50875307!
register: aValue on: account for: aTransfer

	| transaction |
	
	transaction := self for: aValue for: aTransfer.
	account register: transaction.
		
	^ transaction! !
!Deposit class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:35:27'!
for: aValue for: aTransfer

	^ self new initializeFor: aValue for: aTransfer.! !
!Deposit class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:36:23' prior: 50875324!
for: aValue for: aTransfer

	^ TransferDeposit new initializeFor: aValue for: aTransfer.! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:37:12'!
initializeFor: aValue for: aTransfer
	value := aValue.
	! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:37:33' prior: 50875336!
initializeFor: aValue for: aTransfer
	value := aValue.
	transfer := aTransfer.! !
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:37:43'!
initializeFor: aValue for: aTransfer
	value := aValue.
	transfer := aTransfer.! !
!Withdraw class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:38:08'!
for: aValue for: aTransfer

	^ TransferWithdraw new initializeFor: aValue for: aTransfer.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:39:47' prior: 50875213!
test03AccountTransactionsInTransferAreConnected

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:40:24' prior: 50875359!
test03AccountTransactionsInTransferAreConnected

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	
	
	
	"FALTAN CASOS BORDEEEEE"! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:44:40'!
test04AccountCannotTransferToItself

	| account1 transfer|
	
	"account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	"
	
	
	"FALTAN CASOS BORDEEEEE"! !

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 10:24:29'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 10:24:29'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:44' prior: 50874006!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:48' prior: 50874013!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:52' prior: 50874022!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32' prior: 50874032!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46' prior: 50874042!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:14:15' prior: 50874055!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw account |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:14:01' prior: 50874067!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 50 on: account1.
		
	self assert: 1 equals: account1 transactions size.
	self assert: (account1 transactions includes: deposit1).
! !

!classDefinition: #AccountTransaction category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 10:24:29'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #AccountTransaction category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 10:24:29'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' prior: 50874341 overrides: 16881508!
value 

	self subclassResponsibility ! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 10:24:29'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 10:24:29'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/17/2019 03:22:00' prior: 50874360!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 10:24:29'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Deposit category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 10:24:29'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45' prior: 50874382!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50874387 overrides: 50875513!
value

	^ value! !

!classDefinition: 'Deposit class' category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 10:24:29'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 10:24:29'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50874405!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Withdraw category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 10:24:29'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Withdraw category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 10:24:29'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46' prior: 50874425!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50874430 overrides: 50875513!
value

	^ value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 10:24:29'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 10:24:29'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50874448!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 10:24:29'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 10:24:29'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'NR 10/17/2019 15:06:56' prior: 50874280 overrides: 16896425!
initialize

	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50874292!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50874298!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/23/2019 15:19:32' prior: 50874303!
balance

	^transactions sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/17/2019 03:28:43' prior: 50874310!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !

!classRemoval: #ReceptiveAccount stamp: 'as 11/14/2020 10:24:30'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'as 11/14/2020 10:24:30'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'as 11/14/2020 10:24:30'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'as 11/14/2020 10:24:31'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'as 11/14/2020 10:24:31'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:31'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:31'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:16:26' prior: 50873720!
test01BalanceOfPortfolioWithoutAccountsIsZero

	self assert: 0 equals: Portfolio new balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:17:51' prior: 50873726!
test02BalanceOfPortfolioWithOneAccountIsAccountBalance

	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: account balance equals: portfolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:23:25' prior: 50873736!
test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolioAccount balance + simplePortfolio balance) equals: composedPortofolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:15' prior: 50873758!
test04PortfolioWithoutAccountsHasNoRegisteredTransaction

	self deny: (Portfolio new hasRegistered: (Deposit for: 100))! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:11' prior: 50873764!
test05PortfolioHasRegisteredItsAccountsTransactions

	| account portfolio deposit |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: (portfolio hasRegistered: deposit)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:06' prior: 50873775!
test06PortfolioLooksForRegisteredTransactionsRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolio hasRegistered: simplePortfolioAccountDeposit).
	self assert: (composedPortfolio hasRegistered: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:10' prior: 50873803!
test07PortfolioHasNoTransactionWhenHasNoAccounts

	self assert: Portfolio new transactions isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 6/22/2020 07:31:19' prior: 50873809!
test08PortfolioTransactionsIncludesAllItsAccountsTransactions

	| account portfolio accountDeposit anotherAccount portfolioTransactions anotherAccountWithdraw |
	
	account := ReceptiveAccount new.
	accountDeposit := Deposit register: 100 on: account.
	anotherAccount := ReceptiveAccount new.
	anotherAccountWithdraw := Withdraw register: 100 on: account.
	portfolio := Portfolio with: account.
	
	portfolioTransactions := portfolio transactions.
	
	self assert: 2 equals: portfolioTransactions size.
	self assert: (portfolioTransactions includes: accountDeposit).
	self assert: (portfolioTransactions includes: anotherAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:20' prior: 50873832!
test09PortfolioTransactionsAreCalculatedRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit composedPortfolioTransactions |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	composedPortfolioTransactions := composedPortfolio transactions.
	self assert: 2 equals: composedPortfolioTransactions size.
	self assert: (composedPortfolioTransactions includes: simplePortfolioAccountDeposit).
	self assert: (composedPortfolioTransactions includes: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:24' prior: 50873865!
test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce

	| account portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: portfolio accountsSize.
			self assert: (portfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:28' prior: 50873882!
test11PortfolioCanNotIncludeAccountOfItsPortfolios

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	composedPortfolio := Portfolio with: simplePortfolio.
	
	self 
		should: [ composedPortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: composedPortfolio accountsSize.
			self assert: (composedPortfolio accountsIncludes: simplePortfolio) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:32' prior: 50873903!
test12PortfolioCanNotIncludeItself

	| account simplePortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	
	self 
		should: [ simplePortfolio add: simplePortfolio ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: simplePortfolio accountsSize.
			self assert: (simplePortfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:01:51' prior: 50873921!
test13ComposedPortfolioCanNotHaveParentPortfolioAccount

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio new.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio add: account.
	
	self 
		should: [ simplePortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: simplePortfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:12:16' prior: 50873940!
test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively

	| account leftParentPortfolio leftRootParentPortfolio portfolio rightParentPortfolio rightRootParentPortfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	leftParentPortfolio := Portfolio with: portfolio .
	leftRootParentPortfolio := Portfolio with: leftParentPortfolio.
	leftRootParentPortfolio add: account.
	
	rightParentPortfolio := Portfolio with: portfolio .
	rightRootParentPortfolio := Portfolio with: rightParentPortfolio.
	rightRootParentPortfolio add: account.

	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/29/2019 16:31:18' prior: 50873968!
test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd

	| portfolioToAdd portfolioToModify rootPortfolio sharedAccount |
	
	sharedAccount := ReceptiveAccount new.
	portfolioToModify := Portfolio new.
	rootPortfolio := Portfolio with: sharedAccount with: portfolioToModify.
	portfolioToAdd := Portfolio with: sharedAccount.
	
	self 
		should: [ portfolioToModify add: portfolioToAdd ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolioToModify accountsIsEmpty ]! !

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:31'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:31'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:48'!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:54'!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:02'!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32'!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46'!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/9/2020 06:00:12'!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw account |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/9/2020 06:02:30'!
test07AccountKnowsItsTransactions 

	| account deposit |
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: account.
		
	self assert: 1 equals: account transactions size .
	self assert: (account transactions includes: deposit).
! !

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:32'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:32'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:23:47' prior: 50874092!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:24:25' prior: 50874096!
isComposedBy: anAccount

	self subclassResponsibility ! !
!Account methodsFor: 'balance' stamp: 'HAW 5/25/2019 12:23:40' prior: 50874100!
balance

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:27' prior: 50874104!
addTransactionsTo: aCollectionOfTransactions

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:15' prior: 50874109!
transactions

	self subclassResponsibility ! !
!Account methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:24:04' prior: 50874113!
addedTo: aPortfolio

	self subclassResponsibility ! !

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:32'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:32'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:20' prior: 50874133!
accountsIncludes: anAccount

	^accounts includes: anAccount ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:05:04' prior: 50874138!
accountsIsEmpty
	
	^accounts isEmpty ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:06' prior: 50874142!
accountsSize
	
	^accounts size! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:19:20' prior: 50874146!
add: accountToAdd

	self assertCanAdd: accountToAdd.
		
	accounts add: accountToAdd.
	accountToAdd addedTo: self 
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:17:31' prior: 50874153!
rootParents
	
	| rootParents |
	
	rootParents := Set new.
	self addRootParentsTo: rootParents.
	
	^ rootParents! !
!Portfolio methodsFor: 'initialization' stamp: 'HAW 5/25/2019 12:03:18' prior: 50874160 overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:19:36' prior: 50874166 overrides: 50876089!
balance
	
	^accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:42:55' prior: 50874172 overrides: 50876093!
addTransactionsTo: aCollectionOfTransactions

	accounts do: [ :anAccount | anAccount addTransactionsTo: aCollectionOfTransactions ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:32' prior: 50874180 overrides: 50876099!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsTo: transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:02:59' prior: 50874189 overrides: 50876104!
addedTo: aPortfolio 
	
	parents add: aPortfolio ! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:20:56' prior: 50874193!
anyRootParentIsComposedBy: accountToAdd

	^self rootParents anySatisfy: [ :aParent | aParent isComposedBy: accountToAdd]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:28:29' prior: 50874200 overrides: 50876079!
hasRegistered: aTransaction

	^accounts anySatisfy: [ :anAccount | anAccount hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/29/2019 16:24:54' prior: 50874207 overrides: 50876084!
isComposedBy: anAccount

	^ self = anAccount or: [ accounts anySatisfy: [ :composedAccount | (composedAccount isComposedBy: anAccount) or: [ anAccount isComposedBy: composedAccount ]]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:17:31' prior: 50874216!
addRootParentsTo: rootParents

	parents 
		ifEmpty: [ rootParents add: self ] 
		ifNotEmpty: [ parents do: [ :aParent | aParent addRootParentsTo: rootParents ]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:20:36' prior: 50874224!
assertCanAdd: accountToAdd

	(self anyRootParentIsComposedBy: accountToAdd) ifTrue: [ self signalCanNotAddAccount ].
! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 11:48:34' prior: 50874231!
signalCanNotAddAccount
	
	self error: self class canNotAddAccountErrorMessage! !

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:32'!
Portfolio class
	instanceVariableNames: ''!

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:32'!
Portfolio class
	instanceVariableNames: ''!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'NR 11/9/2020 06:01:26' prior: 50874246!
canNotAddAccountErrorMessage
	
	^'Can not add repeated account to a portfolio!!'! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:18:21' prior: 50874252!
with: anAccount

	^self new 
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:23:59' prior: 50874257!
with: anAccount with: anotherAccount

	^self new 
		add: anAccount;
		add: anotherAccount;
		yourself! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:32'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:32'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:35' overrides: 16896425!
initialize

	super initialize.
	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'NR 11/9/2020 05:56:36' overrides: 50876093!
addTransactionsTo: aCollectionOfTransactions

	aCollectionOfTransactions addAll: transactions copy! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37'!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' overrides: 50876099!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:24:46' overrides: 50876089!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/21/2019 18:55:56' overrides: 50876079!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:54:51' overrides: 50876084!
isComposedBy: anAccount

	^self = anAccount ! !
!ReceptiveAccount methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:03:32' overrides: 50876104!
addedTo: aPortfolio 
	
	! !

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:33'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:33'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' overrides: 16881508!
value 

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:39'!
affectBalance: aBalance

	self subclassResponsibility ! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:33'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:33'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/21/2019 18:54:27'!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:33'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:33'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45'!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' overrides: 50876338!
value

	^ value! !
!Deposit methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:02' overrides: 50876342!
affectBalance: aBalance

	^aBalance + value ! !

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:34'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:34'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:34'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:34'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46'!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' overrides: 50876338!
value

	^ value! !
!Withdraw methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:15' overrides: 50876342!
affectBalance: aBalance

	^aBalance - value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:34'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:34'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:34'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:34'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'no messages' stamp: 'as 11/9/2020 19:34:58'!
test01AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedInTransfer
	! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:34'!
Object subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:44:23' prior: 50874508!
test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 balance equals: -100.
	self assert: account2 balance equals: 100.	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:44:39' prior: 50876477!
test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 balance equals: -100.
	self assert: account2 balance equals: 100.	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:45:04' prior: 50876491!
test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 balance equals: -100.
	self assert: account2 balance equals: 100.	
	
	! !

!methodRemoval: TransferTest #test01AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedInTransfer stamp: 'as 11/14/2020 10:24:34'!
test01AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedInTransfer
	!
!Transfer class methodsFor: 'no messages' stamp: 'as 11/9/2020 19:47:31' prior: 50874700!
anAmountOf: anAmount from: originAccount to: destinationAccount
	self new initializeWith: anAmount from: originAccount to: destinationAccount.! !
!Transfer methodsFor: 'no messages' stamp: 'as 11/9/2020 19:47:45' prior: 50875297!
initializeWith: anAmount from: originAccount to: destinationAccount
	! !

!classDefinition: #NameOfSubclass category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:34'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #NameOfSubclass category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:34'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #NameOfSubclass stamp: 'as 11/14/2020 10:24:35'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:48:46' prior: 50876533!
initializeWith: anAmount from: originAccount to: destinationAccount
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:54:17' prior: 50876560!
initializeWith: anAmount from: originAccount to: destinationAccount

	| deposit extraction |
	deposit := Deposit register: anAmount on: destinationAccount.
	extraction := Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:58:11'!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 hasRegistered: transfer withdraw.
	self assert: account2 hasRegistered: transfer deposit.
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:58:37' prior: 50876566!
initializeWith: anAmount from: originAccount to: destinationAccount

	| deposit withdraw |
	deposit := Deposit register: anAmount on: destinationAccount.
	withdraw := Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:59:24' prior: 50876591!
initializeWith: anAmount from: originAccount to: destinationAccount

	| deposit withdraw |
	deposit := Deposit register: anAmount on: destinationAccount.
	withdraw := Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:00:05' prior: 50876602!
initializeWith: anAmount from: originAccount to: destinationAccount

	Deposit register: anAmount on: destinationAccount.
	Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:35'!
Object subclass: #Transfer
	instanceVariableNames: 'deposit withdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:35'!
Object subclass: #Transfer
	instanceVariableNames: 'deposit withdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:00:39' prior: 50876613!
initializeWith: anAmount from: originAccount to: destinationAccount

	deposit := Deposit register: anAmount on: destinationAccount.
	withdraw := Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:01:13' prior: 50876576!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:02:48' prior: 50876647!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	"self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit)."

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:04:01' prior: 50874689!
checkWithdrawIsRegisteredIn: anAccount
	anAccount hasRegistered: withdraw.
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:04:06' prior: 50876681!
checkWithdrawIsRegisteredIn: anAccount
	^anAccount hasRegistered: withdraw.
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:04:20' prior: 50874694!
checkDepositIsRegisteredIn: anAccount
	^anAccount hasRegistered: deposit.
	! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:05:41' prior: 50876525!
anAmountOf: anAmount from: originAccount to: destinationAccount
	^self new initializeWith: anAmount from: originAccount to: destinationAccount.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:05:57' prior: 50876662!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:08:18'!
test02AccountTransactionsAreRegisteredInAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !

!methodRemoval: TransferTest #test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer stamp: 'as 11/14/2020 10:24:35'!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:09:34'!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:09:42' prior: 50875182!
test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !

!methodRemoval: TransferTest #test02AccountTransactionsAreRegisteredInAccountsInvolvedAfterTransfer stamp: 'as 11/14/2020 10:24:35'!
test02AccountTransactionsAreRegisteredInAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:11:24' prior: 50876753!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	"self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	"
	
	self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer).
	
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'as 11/9/2020 20:12:14'!
hasTransfer: aTransfer
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:14:32' prior: 50876800!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer).
	
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'as 11/9/2020 20:16:19' prior: 50876818!
hasTransfer: aTransfer
	
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'as 11/9/2020 20:18:50' prior: 50876836!
hasTransfer: aTransfer
	transactions anySatisfy: [:transaction | transaction belongsTo: aTransfer].! !
!AccountTransaction methodsFor: 'balance' stamp: 'as 11/9/2020 20:19:12'!
belongsTo: aTransfer! !

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:35'!
Object subclass: #AccountTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'transfer' stamp: 'as 11/9/2020 20:19:57' prior: 50876846!
belongsTo: aTransfer
	^transfer = aTransfer.! !

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:35'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:35'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:35'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:35'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:35'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:36'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:36'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:36'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'transfer' stamp: 'as 11/9/2020 20:29:24' prior: 50876858!
belongsTo: aTransfer
	"^transfer = aTransfer. y esto donde vaaaaa"! !
!AccountTransaction methodsFor: 'transfer' stamp: 'as 11/9/2020 20:56:16' prior: 50876924!
belongsTo: aTransfer
	"^transfer = aTransfer."! !

!methodRemoval: AccountTransaction #belongsTo: stamp: 'as 11/14/2020 10:24:36'!
belongsTo: aTransfer
	"^transfer = aTransfer."!

!classRemoval: #TransferDeposit stamp: 'as 11/14/2020 10:24:36'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:36'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:36'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:36'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:36'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:36'!
TransferTransaction subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:36'!
TransferTransaction subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:36'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:36'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTransaction methodsFor: 'no messages' stamp: 'as 11/9/2020 21:01:09'!
belongsTo: aTransfer
	^transfer = aTransfer.! !

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:36'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: 'deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:36'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: 'deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:11:06' prior: 50876822!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer).

	"self assert: (account1 hasRegister: transfer withdraw).
	self assert: (account2 hasRegister: transfer deposit).	"
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:14:21' prior: 50877031!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	"self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer)."

	"self assert: (account1 hasRegister: transfer withdraw).
	self assert: (account2 hasRegister: transfer deposit).	"
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:14:27' prior: 50877049!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	"self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer)."

	"self assert: (account1 hasRegister: transfer withdraw).
	self assert: (account2 hasRegister: transfer deposit).	"
	
	
	! !

!classRemoval: #TransferWithdraw stamp: 'as 11/14/2020 10:24:37'!
TransferTransaction subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferDeposit stamp: 'as 11/14/2020 10:24:37'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: 'deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferTransaction stamp: 'as 11/14/2020 10:24:38'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:15:36' prior: 50877067!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	"self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer)."

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:16:11' prior: 50875124!
withdraw
	^withdraw.
	
	
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:16:25' prior: 50875128!
deposit
	^deposit.
	
	
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:16:36' prior: 50877106!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:17:27' prior: 50876768!
test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	"self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	"
	
	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:20:24' prior: 50877147!
test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:24:19' prior: 50877167!
test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	
	"transfer -> transaction"! !

!methodRemoval: TransferTest #test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer stamp: 'as 11/14/2020 10:24:38'!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	
	
	!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:30:13' prior: 50875375!
test03AccountTransactionsInTransferAreConnected

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer withdraw transferDepositAssociated).
	self assert: (transfer deposit transferWithdrawAssociated).	
	! !

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:38'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:38'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:38'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:38'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:38'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:38'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:38'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:38'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferWithdraw methodsFor: 'no messages' stamp: 'as 11/9/2020 21:32:35'!
transferDepositAssociated
	^transfer deposit.! !
!TransferDeposit methodsFor: 'no messages' stamp: 'as 11/9/2020 21:32:59'!
transferWithdrawAssociated
	^transfer withdraw.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:33:57' prior: 50876637!
initializeWith: anAmount from: originAccount to: destinationAccount

	deposit := Deposit register: anAmount on: destinationAccount for: self.
	withdraw := Withdraw register: anAmount on: originAccount for: self.
	
	
	
	
	
	
	! !
!AccountTransaction class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:34:29'!
register: aValue on: account for: aTransfer

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !
!AccountTransaction class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:34:48' prior: 50877308!
register: aValue on: account for: aTransfer

	| transaction |
	
	transaction := self for: aValue for: aTransfer.
	account register: transaction.
		
	^ transaction! !
!Deposit class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:35:27'!
for: aValue for: aTransfer

	^ self new initializeFor: aValue for: aTransfer.! !
!Deposit class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:36:23' prior: 50877325!
for: aValue for: aTransfer

	^ TransferDeposit new initializeFor: aValue for: aTransfer.! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:37:12'!
initializeFor: aValue for: aTransfer
	value := aValue.
	! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:37:33' prior: 50877337!
initializeFor: aValue for: aTransfer
	value := aValue.
	transfer := aTransfer.! !
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:37:43'!
initializeFor: aValue for: aTransfer
	value := aValue.
	transfer := aTransfer.! !
!Withdraw class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:38:08'!
for: aValue for: aTransfer

	^ TransferWithdraw new initializeFor: aValue for: aTransfer.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:39:47' prior: 50877214!
test03AccountTransactionsInTransferAreConnected

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:40:24' prior: 50877360!
test03AccountTransactionsInTransferAreConnected

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	
	
	
	"FALTAN CASOS BORDEEEEE"! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:44:40' prior: 50875391!
test04AccountCannotTransferToItself

	| account1 transfer|
	
	"account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	"
	
	
	"FALTAN CASOS BORDEEEEE"! !

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:39'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:39'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:16:26' prior: 50875704!
test01BalanceOfPortfolioWithoutAccountsIsZero

	self assert: 0 equals: Portfolio new balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:17:51' prior: 50875710!
test02BalanceOfPortfolioWithOneAccountIsAccountBalance

	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: account balance equals: portfolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:23:25' prior: 50875721!
test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolioAccount balance + simplePortfolio balance) equals: composedPortofolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:15' prior: 50875743!
test04PortfolioWithoutAccountsHasNoRegisteredTransaction

	self deny: (Portfolio new hasRegistered: (Deposit for: 100))! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:11' prior: 50875750!
test05PortfolioHasRegisteredItsAccountsTransactions

	| account portfolio deposit |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: (portfolio hasRegistered: deposit)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:06' prior: 50875761!
test06PortfolioLooksForRegisteredTransactionsRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolio hasRegistered: simplePortfolioAccountDeposit).
	self assert: (composedPortfolio hasRegistered: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:10' prior: 50875789!
test07PortfolioHasNoTransactionWhenHasNoAccounts

	self assert: Portfolio new transactions isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 6/22/2020 07:31:19' prior: 50875795!
test08PortfolioTransactionsIncludesAllItsAccountsTransactions

	| account portfolio accountDeposit anotherAccount portfolioTransactions anotherAccountWithdraw |
	
	account := ReceptiveAccount new.
	accountDeposit := Deposit register: 100 on: account.
	anotherAccount := ReceptiveAccount new.
	anotherAccountWithdraw := Withdraw register: 100 on: account.
	portfolio := Portfolio with: account.
	
	portfolioTransactions := portfolio transactions.
	
	self assert: 2 equals: portfolioTransactions size.
	self assert: (portfolioTransactions includes: accountDeposit).
	self assert: (portfolioTransactions includes: anotherAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:20' prior: 50875818!
test09PortfolioTransactionsAreCalculatedRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit composedPortfolioTransactions |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	composedPortfolioTransactions := composedPortfolio transactions.
	self assert: 2 equals: composedPortfolioTransactions size.
	self assert: (composedPortfolioTransactions includes: simplePortfolioAccountDeposit).
	self assert: (composedPortfolioTransactions includes: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:24' prior: 50875851!
test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce

	| account portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: portfolio accountsSize.
			self assert: (portfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:28' prior: 50875869!
test11PortfolioCanNotIncludeAccountOfItsPortfolios

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	composedPortfolio := Portfolio with: simplePortfolio.
	
	self 
		should: [ composedPortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: composedPortfolio accountsSize.
			self assert: (composedPortfolio accountsIncludes: simplePortfolio) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:32' prior: 50875890!
test12PortfolioCanNotIncludeItself

	| account simplePortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	
	self 
		should: [ simplePortfolio add: simplePortfolio ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: simplePortfolio accountsSize.
			self assert: (simplePortfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:01:51' prior: 50875908!
test13ComposedPortfolioCanNotHaveParentPortfolioAccount

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio new.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio add: account.
	
	self 
		should: [ simplePortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: simplePortfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:12:16' prior: 50875927!
test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively

	| account leftParentPortfolio leftRootParentPortfolio portfolio rightParentPortfolio rightRootParentPortfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	leftParentPortfolio := Portfolio with: portfolio .
	leftRootParentPortfolio := Portfolio with: leftParentPortfolio.
	leftRootParentPortfolio add: account.
	
	rightParentPortfolio := Portfolio with: portfolio .
	rightRootParentPortfolio := Portfolio with: rightParentPortfolio.
	rightRootParentPortfolio add: account.

	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/29/2019 16:31:18' prior: 50875955!
test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd

	| portfolioToAdd portfolioToModify rootPortfolio sharedAccount |
	
	sharedAccount := ReceptiveAccount new.
	portfolioToModify := Portfolio new.
	rootPortfolio := Portfolio with: sharedAccount with: portfolioToModify.
	portfolioToAdd := Portfolio with: sharedAccount.
	
	self 
		should: [ portfolioToModify add: portfolioToAdd ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolioToModify accountsIsEmpty ]! !

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:39'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:39'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:48' prior: 50875993!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:54' prior: 50876000!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:02' prior: 50876009!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32' prior: 50876019!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46' prior: 50876029!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/9/2020 06:00:12' prior: 50876042!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw account |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/9/2020 06:02:30' prior: 50876054!
test07AccountKnowsItsTransactions 

	| account deposit |
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: account.
		
	self assert: 1 equals: account transactions size .
	self assert: (account transactions includes: deposit).
! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:39'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:39'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:45:04' prior: 50876505!
test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 balance equals: -100.
	self assert: account2 balance equals: 100.	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:24:19' prior: 50877182!
test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	
	"transfer -> transaction"! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:40:24' prior: 50877376!
test03AccountTransactionsInTransferAreConnected

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	
	
	
	"FALTAN CASOS BORDEEEEE"! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:44:40' prior: 50877393!
test04AccountCannotTransferToItself

	| account1 transfer|
	
	"account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	"
	
	
	"FALTAN CASOS BORDEEEEE"! !

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:39'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:40'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:23:47' prior: 50876079!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:24:25' prior: 50876084!
isComposedBy: anAccount

	self subclassResponsibility ! !
!Account methodsFor: 'balance' stamp: 'HAW 5/25/2019 12:23:40' prior: 50876089!
balance

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:27' prior: 50876093!
addTransactionsTo: aCollectionOfTransactions

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:15' prior: 50876099!
transactions

	self subclassResponsibility ! !
!Account methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:24:04' prior: 50876104!
addedTo: aPortfolio

	self subclassResponsibility ! !

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:40'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:40'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:20' prior: 50876124!
accountsIncludes: anAccount

	^accounts includes: anAccount ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:05:04' prior: 50876129!
accountsIsEmpty
	
	^accounts isEmpty ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:06' prior: 50876134!
accountsSize
	
	^accounts size! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:19:20' prior: 50876138!
add: accountToAdd

	self assertCanAdd: accountToAdd.
		
	accounts add: accountToAdd.
	accountToAdd addedTo: self 
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:17:31' prior: 50876145!
rootParents
	
	| rootParents |
	
	rootParents := Set new.
	self addRootParentsTo: rootParents.
	
	^ rootParents! !
!Portfolio methodsFor: 'initialization' stamp: 'HAW 5/25/2019 12:03:18' prior: 50876152 overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:19:36' prior: 50876158 overrides: 50877888!
balance
	
	^accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:42:55' prior: 50876164 overrides: 50877892!
addTransactionsTo: aCollectionOfTransactions

	accounts do: [ :anAccount | anAccount addTransactionsTo: aCollectionOfTransactions ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:32' prior: 50876172 overrides: 50877898!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsTo: transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:02:59' prior: 50876181 overrides: 50877903!
addedTo: aPortfolio 
	
	parents add: aPortfolio ! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:20:56' prior: 50876186!
anyRootParentIsComposedBy: accountToAdd

	^self rootParents anySatisfy: [ :aParent | aParent isComposedBy: accountToAdd]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:28:29' prior: 50876194 overrides: 50877878!
hasRegistered: aTransaction

	^accounts anySatisfy: [ :anAccount | anAccount hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/29/2019 16:24:54' prior: 50876201 overrides: 50877883!
isComposedBy: anAccount

	^ self = anAccount or: [ accounts anySatisfy: [ :composedAccount | (composedAccount isComposedBy: anAccount) or: [ anAccount isComposedBy: composedAccount ]]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:17:31' prior: 50876211!
addRootParentsTo: rootParents

	parents 
		ifEmpty: [ rootParents add: self ] 
		ifNotEmpty: [ parents do: [ :aParent | aParent addRootParentsTo: rootParents ]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:20:36' prior: 50876220!
assertCanAdd: accountToAdd

	(self anyRootParentIsComposedBy: accountToAdd) ifTrue: [ self signalCanNotAddAccount ].
! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 11:48:34' prior: 50876227!
signalCanNotAddAccount
	
	self error: self class canNotAddAccountErrorMessage! !

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:40'!
Portfolio class
	instanceVariableNames: ''!

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:40'!
Portfolio class
	instanceVariableNames: ''!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'NR 11/9/2020 06:01:26' prior: 50876242!
canNotAddAccountErrorMessage
	
	^'Can not add repeated account to a portfolio!!'! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:18:21' prior: 50876248!
with: anAccount

	^self new 
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:23:59' prior: 50876254!
with: anAccount with: anotherAccount

	^self new 
		add: anAccount;
		add: anotherAccount;
		yourself! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:40'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:40'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:35' prior: 50876277 overrides: 16896425!
initialize

	super initialize.
	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'NR 11/9/2020 05:56:36' prior: 50876283 overrides: 50877892!
addTransactionsTo: aCollectionOfTransactions

	aCollectionOfTransactions addAll: transactions copy! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'as 11/9/2020 20:18:50' prior: 50876840!
hasTransfer: aTransfer
	transactions anySatisfy: [:transaction | transaction belongsTo: aTransfer].! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50876289!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50876295 overrides: 50877898!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:24:46' prior: 50876300 overrides: 50877888!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/21/2019 18:55:56' prior: 50876307 overrides: 50877878!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:54:51' prior: 50876313 overrides: 50877883!
isComposedBy: anAccount

	^self = anAccount ! !
!ReceptiveAccount methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:03:32' prior: 50876318 overrides: 50877903!
addedTo: aPortfolio 
	
	! !

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:41'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:41'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' prior: 50876338 overrides: 16881508!
value 

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:39' prior: 50876342!
affectBalance: aBalance

	self subclassResponsibility ! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:41'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:41'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/21/2019 18:54:27' prior: 50876357!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !
!AccountTransaction class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:34:48' prior: 50877317!
register: aValue on: account for: aTransfer

	| transaction |
	
	transaction := self for: aValue for: aTransfer.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:41'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:41'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45' prior: 50876379!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50876384 overrides: 50878148!
value

	^ value! !
!Deposit methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:02' prior: 50876388 overrides: 50878153!
affectBalance: aBalance

	^aBalance + value ! !

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:42'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:42'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50876402!
for: aValue

	^ self new initializeFor: aValue ! !
!Deposit class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:36:23' prior: 50877331!
for: aValue for: aTransfer

	^ TransferDeposit new initializeFor: aValue for: aTransfer.! !

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:42'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:42'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:37:33' prior: 50877342!
initializeFor: aValue for: aTransfer
	value := aValue.
	transfer := aTransfer.! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:32:59' prior: 50877293!
transferWithdrawAssociated
	^transfer withdraw.! !

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:42'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:42'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46' prior: 50876422!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50876427 overrides: 50878148!
value

	^ value! !
!Withdraw methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:15' prior: 50876431 overrides: 50878153!
affectBalance: aBalance

	^aBalance - value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:42'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:42'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50876445!
for: aValue

	^ self new initializeFor: aValue ! !
!Withdraw class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:38:08' prior: 50877354!
for: aValue for: aTransfer

	^ TransferWithdraw new initializeFor: aValue for: aTransfer.! !

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:42'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:42'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:37:43' prior: 50877348!
initializeFor: aValue for: aTransfer
	value := aValue.
	transfer := aTransfer.! !
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:32:35' prior: 50877289!
transferDepositAssociated
	^transfer deposit.! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:42'!
Object subclass: #Transfer
	instanceVariableNames: 'deposit withdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:42'!
Object subclass: #Transfer
	instanceVariableNames: 'deposit withdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:04:20' prior: 50876693!
checkDepositIsRegisteredIn: anAccount
	^anAccount hasRegistered: deposit.
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:04:06' prior: 50876687!
checkWithdrawIsRegisteredIn: anAccount
	^anAccount hasRegistered: withdraw.
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:16:25' prior: 50877128!
deposit
	^deposit.
	
	
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:33:57' prior: 50877298!
initializeWith: anAmount from: originAccount to: destinationAccount

	deposit := Deposit register: anAmount on: destinationAccount for: self.
	withdraw := Withdraw register: anAmount on: originAccount for: self.
	
	
	
	
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:16:11' prior: 50877124!
withdraw
	^withdraw.
	
	
	
	
	! !

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:42'!
Transfer class
	instanceVariableNames: ''!

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:42'!
Transfer class
	instanceVariableNames: ''!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:05:41' prior: 50876699!
anAmountOf: anAmount from: originAccount to: destinationAccount
	^self new initializeWith: anAmount from: originAccount to: destinationAccount.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:17:21' prior: 50877831!
test03AccountTransactionsInTransferAreConnected

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	
	
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:18:29' prior: 50877848!
test04AccountCannotTransferToItself

	| account1 transfer|
	
	account1 := ReceptiveAccount new.	
	transfer := Transfer anAmountOf: 100 from: account1 to: account1.

	"self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	"
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:22:17' prior: 50878418!
test04AccountCannotTransferToItself

	| account1 |
	
	account1 := ReceptiveAccount new.	
	
	"self 
		should: [ Transfer anAmountOf: 100 from: account1 to: account1. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert:  equals: anError messageText. ]"

	! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:22:52'!
invalidTransferErrorMessage
	^'transfer is invalid'.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:23:30' prior: 50878432!
test04AccountCannotTransferToItself

	| account1 |
	
	account1 := ReceptiveAccount new.	
	
	self 
		should: [ Transfer anAmountOf: 100 from: account1 to: account1. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: Transfer invalidTransferErrorMessage equals: anError messageText. ]

	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:24:09' prior: 50878449!
test04AccountCannotTransferToItself

	| account1 |
	
	account1 := ReceptiveAccount new.	
	
	self 
		should: [ Transfer anAmountOf: 100 from: account1 to: account1. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: Transfer invalidTransferErrorMessage equals: anError messageText. ]

	! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:25:37' prior: 50878394!
anAmountOf: anAmount from: originAccount to: destinationAccount
	
	originAccount = destinationAccount ifTrue: [^ Error signal: self class invalidTransferErrorMessage ].
	
	^self new initializeWith: anAmount from: originAccount to: destinationAccount.! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:25:52' prior: 50878475!
anAmountOf: anAmount from: originAccount to: destinationAccount
	
	originAccount = destinationAccount ifTrue: [^ Error signal: self invalidTransferErrorMessage ].
	
	^self new initializeWith: anAmount from: originAccount to: destinationAccount.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:26:43'!
test05AccountCannotTransferNegativeAmount

	| account1 account2|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	self 
		should: [ Transfer anAmountOf: -100 from: account1 to: account2. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: Transfer invalidTransferErrorMessage equals: anError messageText. ]

	! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:27:50' prior: 50878487!
anAmountOf: anAmount from: originAccount to: destinationAccount
	
	originAccount = destinationAccount ifTrue: [^ Error signal: self invalidTransferErrorMessage ].
	anAmount <= 0 ifTrue: [^ Error signal: self invalidTransferErrorMessage ].	
	
	^self new initializeWith: anAmount from: originAccount to: destinationAccount.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:28:27'!
test05AccountCannotTransferInvalidAmount

	| account1 account2|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	self 
		should: [ Transfer anAmountOf: -100 from: account1 to: account2. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: Transfer invalidTransferErrorMessage equals: anError messageText. ]

	! !

!methodRemoval: TransferTest #test05AccountCannotTransferNegativeAmount stamp: 'as 11/14/2020 10:24:42'!
test05AccountCannotTransferNegativeAmount

	| account1 account2|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	self 
		should: [ Transfer anAmountOf: -100 from: account1 to: account2. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: Transfer invalidTransferErrorMessage equals: anError messageText. ]

	!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:32:42'!
validateTransferCollaboratorsIn: aBlockToValidate
	aBlockToValidate ifTrue: [^ Error signal: self invalidTransferErrorMessage ].	! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:33:21' prior: 50878513!
anAmountOf: anAmount from: originAccount to: destinationAccount
	
	originAccount = destinationAccount ifTrue: [^ Error signal: self invalidTransferErrorMessage ].
	[anAmount <= 0] ifTrue: [^ Error signal: self invalidTransferErrorMessage ].	
	
	
	
	^self new initializeWith: anAmount from: originAccount to: destinationAccount.! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:33:33' prior: 50878562!
anAmountOf: anAmount from: originAccount to: destinationAccount
	
	originAccount = destinationAccount ifTrue: [^ Error signal: self invalidTransferErrorMessage ].
	[anAmount <= 0] value ifTrue: [^ Error signal: self invalidTransferErrorMessage ].	
	
	
	
	^self new initializeWith: anAmount from: originAccount to: destinationAccount.! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:33:46' prior: 50878554!
validateTransferCollaboratorsIn: aBlockToValidate
	aBlockToValidate value ifTrue: [^ Error signal: self invalidTransferErrorMessage ].	! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:34:39' prior: 50878576!
anAmountOf: anAmount from: originAccount to: destinationAccount
	
	"originAccount = destinationAccount ifTrue: [^ Error signal: self invalidTransferErrorMessage ].
	[anAmount <= 0] value ifTrue: [^ Error signal: self invalidTransferErrorMessage ].	"
	
	self validateTransferCollaboratorsIn: [originAccount = destinationAccount].
	self validateTransferCollaboratorsIn: [anAmount <= 0].
	
	^self new initializeWith: anAmount from: originAccount to: destinationAccount.! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:34:52' prior: 50878598!
anAmountOf: anAmount from: originAccount to: destinationAccount
	
	self validateTransferCollaboratorsIn: [originAccount = destinationAccount].
	self validateTransferCollaboratorsIn: [anAmount <= 0].
	
	^self new initializeWith: anAmount from: originAccount to: destinationAccount.! !

!classDefinition: #AccountSummaryTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:43'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 10:24:43'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryTest methodsFor: 'no messages' stamp: 'as 11/12/2020 21:37:12'!
test01AccountSummaryForAnEmptyAccount
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:37:43' prior: 50878643!
test01AccountSummaryForAnEmptyAccount
	
	| account1 |
	account1 := ReceptiveAccount new.	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:38:50' prior: 50878648!
test01AccountSummaryForAnEmptyAccount
	
	| account1 |
	account1 := ReceptiveAccount new.	
	
	self assert: account1 accountSummary equals: OrderedCollection new.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:39:45' prior: 50878655!
test01AccountSummaryForAnEmptyAccount
	
	| account1 |
	account1 := ReceptiveAccount new.	
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Balance = 0').! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'as 11/12/2020 21:40:31'!
accountSummary
	^OrderedCollection with: 'Balance = 0'.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:41:01'!
test02AccountSummaryForAnAccountWithADeposit
	
	| account1 |
	account1 := ReceptiveAccount new.	
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Balance = 0').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:42:00' prior: 50878677!
test02AccountSummaryForAnAccountWithADeposit
	
	| account1 |
	account1 := ReceptiveAccount new.	
	Deposit register: 100 on: account1.
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 0').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:42:34' prior: 50878687!
test02AccountSummaryForAnAccountWithADeposit
	
	| account1 |
	account1 := ReceptiveAccount new.	
	Deposit register: 100 on: account1.
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100').! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:42:56' prior: 50878672!
accountSummary
	"^OrderedCollection with: 'Balance = 0'."
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:44:11' prior: 50878711!
accountSummary
	"^OrderedCollection with: 'Balance = 0'."
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	^OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100'.
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:44:53'!
test03AccountSummaryForAnAccountWithTwoDeposit
	
	| account1 |
	account1 := ReceptiveAccount new.	
	Deposit register: 100 on: account1.
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:45:12' prior: 50878727!
test03AccountSummaryForAnAccountWithTwoDeposit
	
	| account1 |
	account1 := ReceptiveAccount new.	
	Deposit register: 100 on: account1.
	Deposit register: 100 on: account1.	
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Dep�sito por 100.' with: 'Balance = 200').! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:47:54' prior: 50878717!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [summary addLast: 'Dep�sito por 100.'].
	summary addLast: 'Balance = ', transactions size * 100 asString.
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:48:12' prior: 50878753!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [summary addLast: 'Dep�sito por 100.'].
	summary addLast: 'Balance = ', transactions size * 100 asString.
	^summary.
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:48:56' prior: 50878765!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [summary addLast: 'Dep�sito por 100.'].
	summary addLast: 'Balance = ', (transactions size * 100) asString.
	^summary.
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:49:45' prior: 50878777!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [summary addLast: 'Dep�sito por 100.'].
	summary addLast: ('Balance = ', (transactions size * 100) asString).
	^summary.
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:52:12' prior: 50878789!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [summary add: 'Dep�sito por 100.'].
	summary add: ('Balance = ', (transactions size * 100) asString).
	^summary.
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:52:51' prior: 50878801!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [:aTransaction | summary add: 'Dep�sito por 100.'].
	summary add: ('Balance = ', (transactions size * 100) asString).
	^summary.
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:54:04'!
test04AccountSummaryForAnAccountWithWithdraw
	
	| account1 |
	account1 := ReceptiveAccount new.	
	Withdraw register: 100 on: account1.	
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Extracci�n por 100.' with: 'Balance = -100').! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:56:41' prior: 50878813!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [:aTransaction | 
					(aTransaction isKindOf: Deposit) ifTrue: [summary add: 'Dep�sito por 100.'].
 					(aTransaction isKindOf: Withdraw ) ifTrue: [summary add: 'Extracci�n por 100.']				
		].
	summary add: ('Balance = ',  self balance asString).
	^summary.
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:58:14'!
test05AccountSummaryForAnAccountWithTransferWithdraw
	
	| account1 account2|
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	TransferWithdraw register: 100 on: account1.	
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Salida por transferencia de 100.' with: 'Balance = -100').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:59:55' prior: 50878853!
test05AccountSummaryForAnAccountWithTransferWithdraw
	
	| account1 account2|
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Salida por transferencia de 100.' with: 'Balance = -100').! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 22:00:53' prior: 50878837!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [:aTransaction | 
					(aTransaction isKindOf: Deposit) ifTrue: [summary add: 'Dep�sito por 100.'].
 					(aTransaction isKindOf: Withdraw ) ifTrue: [summary add: 'Extracci�n por 100.']	.
					(aTransaction isKindOf: TransferWithdraw ) ifTrue: [summary add: 'Salida por transferencia de 100.']			.		
		].
	summary add: ('Balance = ',  self balance asString).
	^summary.
	! !

!testRun: #AccountSummaryTest #test05AccountSummaryForAnAccountWithTransferWithdraw stamp: 'as 11/14/2020 10:26:04'!
FAILURE!

!testRun: #AccountSummaryTest #test05AccountSummaryForAnAccountWithTransferWithdraw stamp: 'as 11/14/2020 10:26:04'!
FAILURE!

!testRun: #AccountSummaryTest #test05AccountSummaryForAnAccountWithTransferWithdraw stamp: 'as 11/14/2020 10:26:18'!
FAILURE!

!testRun: #AccountSummaryTest #test05AccountSummaryForAnAccountWithTransferWithdraw stamp: 'as 11/14/2020 10:26:18'!
FAILURE!
!ReceptiveAccount methodsFor: 'nil' stamp: 'as 11/14/2020 10:28:45' prior: 50878881!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [:aTransaction | 
					(aTransaction isKindOf: Deposit) ifTrue: [summary add: 'Dep�sito por 100.'].
 					(aTransaction isKindOf: Withdraw ) ifTrue: [summary add: 'Extracci�n por 100.']	
												ifFalse: [summary add: 'Salida por transferencia de 100.']
					"(aTransaction isKindOf: TransferWithdraw ) ifTrue: [summary add: 'Salida por transferencia de 100.']			.		"
		].
	summary add: ('Balance = ',  self balance asString).
	^summary.
	! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'as 11/14/2020 10:30:39' prior: 50878917!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [:aTransaction | 
					(aTransaction isKindOf: Deposit) ifTrue: [summary add: 'Dep�sito por 100.'].
 					(aTransaction isKindOf: Withdraw ) ifTrue: [
						(aTransaction isKindOf: TransferWithdraw) 
							ifTrue: [summary add: 'Salida por transferencia de 100.']	
							ifFalse: [summary add: 'Extracci�n por 100.']
						]	
												"ifFalse: [summary add: 'Salida por transferencia de 100.']
					(aTransaction isKindOf: TransferWithdraw ) ifTrue: [summary add: 'Salida por transferencia de 100.']			.		"
		].
	summary add: ('Balance = ',  self balance asString).
	^summary.
	! !

!testRun: #AccountSummaryTest #test05AccountSummaryForAnAccountWithTransferWithdraw stamp: 'as 11/14/2020 10:30:58'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryForAnEmptyAccount stamp: 'as 11/14/2020 10:31:15'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAnAccountWithADeposit stamp: 'as 11/14/2020 10:31:15'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAnAccountWithTwoDeposit stamp: 'as 11/14/2020 10:31:15'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAnAccountWithWithdraw stamp: 'as 11/14/2020 10:31:15'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryForAnAccountWithTransferWithdraw stamp: 'as 11/14/2020 10:31:15'!
PASSED!
!ReceptiveAccount methodsFor: 'nil' stamp: 'as 11/14/2020 10:31:40' prior: 50878939!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [:aTransaction | 
					(aTransaction isKindOf: Deposit) ifTrue: [summary add: 'Dep�sito por 100.'].
 					(aTransaction isKindOf: Withdraw ) ifTrue: [
						(aTransaction isKindOf: TransferWithdraw) 
							ifTrue: [summary add: 'Salida por transferencia de 100.']	
							ifFalse: [summary add: 'Extracci�n por 100.']
						]
		].
	summary add: ('Balance = ',  self balance asString).
	^summary.
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:32:56'!
test06AccountSummaryForAnAccountWithTransferDeposit
	
	| account1 account2|
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account2 accountSummary equals: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100').! !

!testRun: #AccountSummaryTest #test06AccountSummaryForAnAccountWithTransferDeposit stamp: 'as 11/14/2020 10:33:01'!
FAILURE!

!testRun: #AccountSummaryTest #test06AccountSummaryForAnAccountWithTransferDeposit stamp: 'as 11/14/2020 10:33:01'!
FAILURE!
!ReceptiveAccount methodsFor: 'nil' stamp: 'as 11/14/2020 10:33:53' prior: 50878988!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [:aTransaction | 
 					(aTransaction isKindOf: Withdraw ) ifTrue: [
						(aTransaction isKindOf: TransferWithdraw) 
							ifTrue: [summary add: 'Salida por transferencia de 100.']	
							ifFalse: [summary add: 'Extracci�n por 100.']
						].
					 (aTransaction isKindOf: Deposit ) ifTrue: [
						(aTransaction isKindOf: TransferDeposit) 
							ifTrue: [summary add: 'Entrada por transferencia de 100.']	
							ifFalse: [summary add: 'Dep�sito por 100.']
						]
		].
	summary add: ('Balance = ',  self balance asString).
	^summary.
	! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'as 11/14/2020 10:33:57' prior: 50879031!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [:aTransaction | 
 					(aTransaction isKindOf: Withdraw ) ifTrue: [
						(aTransaction isKindOf: TransferWithdraw) 
							ifTrue: [summary add: 'Salida por transferencia de 100.']	
							ifFalse: [summary add: 'Extracci�n por 100.']
						].
					 (aTransaction isKindOf: Deposit ) ifTrue: [
						(aTransaction isKindOf: TransferDeposit) 
							ifTrue: [summary add: 'Entrada por transferencia de 100.']	
							ifFalse: [summary add: 'Dep�sito por 100.']
						].
		].
	summary add: ('Balance = ',  self balance asString).
	^summary.
	! !

!testRun: #AccountSummaryTest #test01AccountSummaryForAnEmptyAccount stamp: 'as 11/14/2020 10:34:01'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAnAccountWithADeposit stamp: 'as 11/14/2020 10:34:01'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAnAccountWithTwoDeposit stamp: 'as 11/14/2020 10:34:01'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAnAccountWithWithdraw stamp: 'as 11/14/2020 10:34:01'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryForAnAccountWithTransferWithdraw stamp: 'as 11/14/2020 10:34:02'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryForAnAccountWithTransferDeposit stamp: 'as 11/14/2020 10:34:02'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:37:19'!
test07AccountSummaryForAnAccountWithTransferDepositWithADifferentAmount
	
	| account1 account2|
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	Transfer anAmountOf: 50 from: account1 to: account2.
	
	self assert: account2 accountSummary equals: (OrderedCollection with: 'Entrada por transferencia de 50.' with: 'Balance = 50').! !

!testRun: #AccountSummaryTest #test07AccountSummaryForAnAccountWithTransferDepositWithADifferentAmount stamp: 'as 11/14/2020 10:37:24'!
FAILURE!

!testRun: #AccountSummaryTest #test07AccountSummaryForAnAccountWithTransferDepositWithADifferentAmount stamp: 'as 11/14/2020 10:37:24'!
FAILURE!
!ReceptiveAccount methodsFor: 'nil' stamp: 'as 11/14/2020 10:39:10' prior: 50879056!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [:aTransaction | 
 					(aTransaction isKindOf: Withdraw ) ifTrue: [
						(aTransaction isKindOf: TransferWithdraw) 
							ifTrue: [summary add: 'Salida por transferencia de ', aTransaction value asString, '.' ]	
							ifFalse: [summary add: 'Extracci�n por ', aTransaction value asString, '.' ]
						].
					 (aTransaction isKindOf: Deposit ) ifTrue: [
						(aTransaction isKindOf: TransferDeposit) 
							ifTrue: [summary add: 'Entrada por transferencia de ', aTransaction value asString, '.' ]	
							ifFalse: [summary add: 'Dep�sito por ', aTransaction value asString, '.' ]
						].
		].
	summary add: ('Balance = ',  self balance asString).
	^summary.
	! !

!testRun: #AccountSummaryTest #test01AccountSummaryForAnEmptyAccount stamp: 'as 11/14/2020 10:39:23'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAnAccountWithADeposit stamp: 'as 11/14/2020 10:39:23'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAnAccountWithTwoDeposit stamp: 'as 11/14/2020 10:39:23'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAnAccountWithWithdraw stamp: 'as 11/14/2020 10:39:23'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryForAnAccountWithTransferWithdraw stamp: 'as 11/14/2020 10:39:23'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryForAnAccountWithTransferDeposit stamp: 'as 11/14/2020 10:39:24'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryForAnAccountWithTransferDepositWithADifferentAmount stamp: 'as 11/14/2020 10:39:24'!
PASSED!
!ReceptiveAccount methodsFor: 'nil' stamp: 'as 11/14/2020 10:39:33' prior: 50879126!
accountSummary
	| summary |
	"transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0']."
	summary := OrderedCollection new.
	transactions do: [:aTransaction | 
 					(aTransaction isKindOf: Withdraw ) ifTrue: [
						(aTransaction isKindOf: TransferWithdraw) 
							ifTrue: [summary add: 'Salida por transferencia de ', aTransaction value asString, '.' ]	
							ifFalse: [summary add: 'Extracci�n por ', aTransaction value asString, '.' ]
						].
					 (aTransaction isKindOf: Deposit ) ifTrue: [
						(aTransaction isKindOf: TransferDeposit) 
							ifTrue: [summary add: 'Entrada por transferencia de ', aTransaction value asString, '.' ]	
							ifFalse: [summary add: 'Dep�sito por ', aTransaction value asString, '.' ]
						].
		].
	summary add: ('Balance = ',  self balance asString).
	^summary.
	! !

!testRun: #AccountSummaryTest #test01AccountSummaryForAnEmptyAccount stamp: 'as 11/14/2020 10:39:37'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAnAccountWithADeposit stamp: 'as 11/14/2020 10:39:37'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAnAccountWithTwoDeposit stamp: 'as 11/14/2020 10:39:37'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAnAccountWithWithdraw stamp: 'as 11/14/2020 10:39:37'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryForAnAccountWithTransferWithdraw stamp: 'as 11/14/2020 10:39:37'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryForAnAccountWithTransferDeposit stamp: 'as 11/14/2020 10:39:37'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryForAnAccountWithTransferDepositWithADifferentAmount stamp: 'as 11/14/2020 10:39:37'!
PASSED!
!ReceptiveAccount methodsFor: 'nil' stamp: 'as 11/14/2020 10:39:45' prior: 50879182!
accountSummary
	| summary |
	summary := OrderedCollection new.
	transactions do: [:aTransaction | 
 					(aTransaction isKindOf: Withdraw ) ifTrue: [
						(aTransaction isKindOf: TransferWithdraw) 
							ifTrue: [summary add: 'Salida por transferencia de ', aTransaction value asString, '.' ]	
							ifFalse: [summary add: 'Extracci�n por ', aTransaction value asString, '.' ]
						].
					 (aTransaction isKindOf: Deposit ) ifTrue: [
						(aTransaction isKindOf: TransferDeposit) 
							ifTrue: [summary add: 'Entrada por transferencia de ', aTransaction value asString, '.' ]	
							ifFalse: [summary add: 'Dep�sito por ', aTransaction value asString, '.' ]
						].
		].
	summary add: ('Balance = ',  self balance asString).
	^summary.
	! !

!testRun: #AccountSummaryTest #test01AccountSummaryForAnEmptyAccount stamp: 'as 11/14/2020 10:41:04'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAnAccountWithADeposit stamp: 'as 11/14/2020 10:41:04'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAnAccountWithTwoDeposit stamp: 'as 11/14/2020 10:41:04'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAnAccountWithWithdraw stamp: 'as 11/14/2020 10:41:04'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryForAnAccountWithTransferWithdraw stamp: 'as 11/14/2020 10:41:04'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryForAnAccountWithTransferDeposit stamp: 'as 11/14/2020 10:41:04'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryForAnAccountWithTransferDepositWithADifferentAmount stamp: 'as 11/14/2020 10:41:04'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:44:16'!
test08AccountSummaryForAnAccountWithTransferDepositWithADifferentAmount
	
	| account1 account2|
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	Transfer anAmountOf: 50 from: account1 to: account2.
	
	self assert: account2 accountSummary equals: (OrderedCollection with: 'Entrada por transferencia de 50.' with: 'Balance = 50').! !

!methodRemoval: AccountSummaryTest #test08AccountSummaryForAnAccountWithTransferDepositWithADifferentAmount stamp: 'as 11/14/2020 10:44:25'!
test08AccountSummaryForAnAccountWithTransferDepositWithADifferentAmount
	
	| account1 account2|
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	Transfer anAmountOf: 50 from: account1 to: account2.
	
	self assert: account2 accountSummary equals: (OrderedCollection with: 'Entrada por transferencia de 50.' with: 'Balance = 50').!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:44:43'!
test07AccountSummaryForAReceptiveAccountWithTransferDepositWithADifferentAmount
	
	| account1 account2|
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	Transfer anAmountOf: 50 from: account1 to: account2.
	
	self assert: account2 accountSummary equals: (OrderedCollection with: 'Entrada por transferencia de 50.' with: 'Balance = 50').! !

!methodRemoval: AccountSummaryTest #test07AccountSummaryForAnAccountWithTransferDepositWithADifferentAmount stamp: 'as 11/14/2020 10:44:43'!
test07AccountSummaryForAnAccountWithTransferDepositWithADifferentAmount
	
	| account1 account2|
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	Transfer anAmountOf: 50 from: account1 to: account2.
	
	self assert: account2 accountSummary equals: (OrderedCollection with: 'Entrada por transferencia de 50.' with: 'Balance = 50').!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:44:54'!
test06AccountSummaryForAReceptiveAccountWithTransferDeposit
	
	| account1 account2|
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account2 accountSummary equals: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100').! !

!methodRemoval: AccountSummaryTest #test06AccountSummaryForAnAccountWithTransferDeposit stamp: 'as 11/14/2020 10:44:54'!
test06AccountSummaryForAnAccountWithTransferDeposit
	
	| account1 account2|
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account2 accountSummary equals: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100').!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:45:04'!
test05AccountSummaryForAReceptiveAccountWithTransferWithdraw
	
	| account1 account2|
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Salida por transferencia de 100.' with: 'Balance = -100').! !

!methodRemoval: AccountSummaryTest #test05AccountSummaryForAnAccountWithTransferWithdraw stamp: 'as 11/14/2020 10:45:04'!
test05AccountSummaryForAnAccountWithTransferWithdraw
	
	| account1 account2|
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Salida por transferencia de 100.' with: 'Balance = -100').!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:45:13'!
test04AccountSummaryForAReceptiveAccountWithWithdraw
	
	| account1 |
	account1 := ReceptiveAccount new.	
	Withdraw register: 100 on: account1.	
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Extracci�n por 100.' with: 'Balance = -100').! !

!methodRemoval: AccountSummaryTest #test04AccountSummaryForAnAccountWithWithdraw stamp: 'as 11/14/2020 10:45:13'!
test04AccountSummaryForAnAccountWithWithdraw
	
	| account1 |
	account1 := ReceptiveAccount new.	
	Withdraw register: 100 on: account1.	
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Extracci�n por 100.' with: 'Balance = -100').!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:45:23'!
test03AccountSummaryForAReceptiveAccountWithTwoDeposit
	
	| account1 |
	account1 := ReceptiveAccount new.	
	Deposit register: 100 on: account1.
	Deposit register: 100 on: account1.	
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Dep�sito por 100.' with: 'Balance = 200').! !

!methodRemoval: AccountSummaryTest #test03AccountSummaryForAnAccountWithTwoDeposit stamp: 'as 11/14/2020 10:45:23'!
test03AccountSummaryForAnAccountWithTwoDeposit
	
	| account1 |
	account1 := ReceptiveAccount new.	
	Deposit register: 100 on: account1.
	Deposit register: 100 on: account1.	
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Dep�sito por 100.' with: 'Balance = 200').!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:45:34'!
test02AccountSummaryForAReceptiveAccountWithADeposit
	
	| account1 |
	account1 := ReceptiveAccount new.	
	Deposit register: 100 on: account1.
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100').! !

!methodRemoval: AccountSummaryTest #test02AccountSummaryForAnAccountWithADeposit stamp: 'as 11/14/2020 10:45:34'!
test02AccountSummaryForAnAccountWithADeposit
	
	| account1 |
	account1 := ReceptiveAccount new.	
	Deposit register: 100 on: account1.
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100').!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:45:54'!
test01AccountSummaryForEmptyAccount
	
	| account1 |
	account1 := ReceptiveAccount new.	
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Balance = 0').! !

!methodRemoval: AccountSummaryTest #test01AccountSummaryForEmptyAccount stamp: 'as 11/14/2020 10:45:59'!
test01AccountSummaryForEmptyAccount
	
	| account1 |
	account1 := ReceptiveAccount new.	
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Balance = 0').!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:46:17'!
test01AccountSummaryForAnEmptyReceptiveAccount
	
	| account1 |
	account1 := ReceptiveAccount new.	
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Balance = 0').! !

!methodRemoval: AccountSummaryTest #test01AccountSummaryForAnEmptyAccount stamp: 'as 11/14/2020 10:46:17'!
test01AccountSummaryForAnEmptyAccount
	
	| account1 |
	account1 := ReceptiveAccount new.	
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Balance = 0').!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:47:15'!
test08AccountSummaryForAnEmptyPortfolio
	
	| account1 account2|
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	Transfer anAmountOf: 50 from: account1 to: account2.
	
	self assert: account2 accountSummary equals: (OrderedCollection with: 'Entrada por transferencia de 50.' with: 'Balance = 50').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:48:19' prior: 50879519!
test08AccountSummaryForAnEmptyPortfolio
	
	| account portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Entrada por transferencia de 50.' with: 'Balance = 50').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:50:59' prior: 50879533!
test08AccountSummaryForAnEmptyPortfolio
	
	| account portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Entrada por transferencia de 50.' with: 'Balance = 50').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:51:38' prior: 50879545!
test08AccountSummaryForAnEmptyPortfolio
	
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio accountSummary equals: OrderedCollection new.! !

!testRun: #AccountSummaryTest #test08AccountSummaryForAnEmptyPortfolio stamp: 'as 11/14/2020 10:51:45'!
ERROR!

!testRun: #AccountSummaryTest #test08AccountSummaryForAnEmptyPortfolio stamp: 'as 11/14/2020 10:51:45'!
ERROR!
!Portfolio methodsFor: 'account management - private' stamp: 'as 11/14/2020 10:52:18'!
accountSummary! !
!Portfolio methodsFor: 'account management - private' stamp: 'as 11/14/2020 10:52:31' prior: 50879572!
accountSummary
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:52:43' prior: 50879557!
test08AccountSummaryForAnEmptyPortfolio
	
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Balance = 0').! !
!Portfolio methodsFor: 'account management - private' stamp: 'as 11/14/2020 10:52:59' prior: 50879576!
accountSummary
	^OrderedCollection with: 'Balance = 0'.
	! !

!testRun: #AccountSummaryTest #test01AccountSummaryForAnEmptyReceptiveAccount stamp: 'as 11/14/2020 10:53:02'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAReceptiveAccountWithADeposit stamp: 'as 11/14/2020 10:53:02'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAReceptiveAccountWithTwoDeposit stamp: 'as 11/14/2020 10:53:02'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAReceptiveAccountWithWithdraw stamp: 'as 11/14/2020 10:53:02'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryForAReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 10:53:02'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryForAReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 10:53:02'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryForAReceptiveAccountWithTransferDepositWithADifferentAmount stamp: 'as 11/14/2020 10:53:02'!
PASSED!

!testRun: #AccountSummaryTest #test08AccountSummaryForAnEmptyPortfolio stamp: 'as 11/14/2020 10:53:02'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:53:56'!
test08AccountSummaryForAPortfolioWithOneAccount
	
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Balance = 0').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:54:15'!
test09AccountSummaryForAnEmptyPortfolio
	
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Balance = 0').! !

!methodRemoval: AccountSummaryTest #test08AccountSummaryForAnEmptyPortfolio stamp: 'as 11/14/2020 10:54:20'!
test08AccountSummaryForAnEmptyPortfolio
	
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Balance = 0').!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:54:49' prior: 50879635!
test09AccountSummaryForAnEmptyPortfolio
	
	| account portfolio |
	
	account := ReceptiveAccount new.
	"Deposit register: 100 on: account."
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Balance = 0').! !

!testRun: #AccountSummaryTest #test09AccountSummaryForAnEmptyPortfolio stamp: 'as 11/14/2020 10:54:52'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:54:59' prior: 50879653!
test09AccountSummaryForAnEmptyPortfolio
	
	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Balance = 0').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:55:39' prior: 50879669!
test09AccountSummaryForAnEmptyPortfolio 
	"AccountSummaryForAnEmptyPortfolio"
	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Balance = 0').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:55:52'!
test09AccountSummaryForAPortfolioWithOneAccount 
	"AccountSummaryForAnEmptyPortfolio"
	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Balance = 0').! !

!methodRemoval: AccountSummaryTest #test09AccountSummaryForAnEmptyPortfolio stamp: 'as 11/14/2020 10:55:52'!
test09AccountSummaryForAnEmptyPortfolio 
	"AccountSummaryForAnEmptyPortfolio"
	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Balance = 0').!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:55:57' prior: 50879694!
test09AccountSummaryForAPortfolioWithOneAccount 
	
	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Balance = 0').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:56:11'!
test08AccountSummaryForAnEmptyPortfolio
	
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Balance = 0').! !

!methodRemoval: AccountSummaryTest #test08AccountSummaryForAPortfolioWithOneAccount stamp: 'as 11/14/2020 10:56:11'!
test08AccountSummaryForAPortfolioWithOneAccount
	
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Balance = 0').!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:56:56' prior: 50879720!
test09AccountSummaryForAPortfolioWithOneAccount 
	
	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100').! !

!testRun: #AccountSummaryTest #test01AccountSummaryForAnEmptyReceptiveAccount stamp: 'as 11/14/2020 10:57:09'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAReceptiveAccountWithADeposit stamp: 'as 11/14/2020 10:57:09'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAReceptiveAccountWithTwoDeposit stamp: 'as 11/14/2020 10:57:09'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAReceptiveAccountWithWithdraw stamp: 'as 11/14/2020 10:57:09'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryForAReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 10:57:09'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryForAReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 10:57:09'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryForAReceptiveAccountWithTransferDepositWithADifferentAmount stamp: 'as 11/14/2020 10:57:09'!
PASSED!

!testRun: #AccountSummaryTest #test08AccountSummaryForAnEmptyPortfolio stamp: 'as 11/14/2020 10:57:09'!
PASSED!

!testRun: #AccountSummaryTest #test09AccountSummaryForAPortfolioWithOneAccount stamp: 'as 11/14/2020 10:57:09'!
FAILURE!

!testRun: #AccountSummaryTest #test09AccountSummaryForAPortfolioWithOneAccount stamp: 'as 11/14/2020 10:57:09'!
FAILURE!
!Portfolio methodsFor: 'account management - private' stamp: 'as 11/14/2020 10:58:30' prior: 50879589!
accountSummary
	accounts isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	! !
!Portfolio methodsFor: 'account management - private' stamp: 'as 11/14/2020 10:59:14' prior: 50879804!
accountSummary
	accounts isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	^OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100'.
	! !

!testRun: #AccountSummaryTest #test01AccountSummaryForAnEmptyReceptiveAccount stamp: 'as 11/14/2020 10:59:20'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAReceptiveAccountWithADeposit stamp: 'as 11/14/2020 10:59:20'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAReceptiveAccountWithTwoDeposit stamp: 'as 11/14/2020 10:59:20'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAReceptiveAccountWithWithdraw stamp: 'as 11/14/2020 10:59:20'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryForAReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 10:59:20'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryForAReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 10:59:20'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryForAReceptiveAccountWithTransferDepositWithADifferentAmount stamp: 'as 11/14/2020 10:59:20'!
PASSED!

!testRun: #AccountSummaryTest #test08AccountSummaryForAnEmptyPortfolio stamp: 'as 11/14/2020 10:59:20'!
PASSED!

!testRun: #AccountSummaryTest #test09AccountSummaryForAPortfolioWithOneAccount stamp: 'as 11/14/2020 10:59:20'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 11:00:34'!
test09AccountSummaryForAPortfolioWithTwoDepositAccount 
	
	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100').! !

!methodRemoval: AccountSummaryTest #test09AccountSummaryForAPortfolioWithOneAccount stamp: 'as 11/14/2020 11:00:38'!
test09AccountSummaryForAPortfolioWithOneAccount 
	
	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100').!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 11:01:00'!
test09AccountSummaryForAPortfolioWithOneDepositAccount 
	
	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100').! !

!methodRemoval: AccountSummaryTest #test09AccountSummaryForAPortfolioWithTwoDepositAccount stamp: 'as 11/14/2020 11:01:00'!
test09AccountSummaryForAPortfolioWithTwoDepositAccount 
	
	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100').!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 11:01:08'!
test10AccountSummaryForAPortfolioWithTwoDepositAccount 
	
	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 11:01:30' prior: 50879907!
test10AccountSummaryForAPortfolioWithTwoDepositAccount 
	
	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Dep�sito por 100.' with: 'Balance = 200').! !

!testRun: #AccountSummaryTest #test01AccountSummaryForAnEmptyReceptiveAccount stamp: 'as 11/14/2020 11:01:44'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAReceptiveAccountWithADeposit stamp: 'as 11/14/2020 11:01:44'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAReceptiveAccountWithTwoDeposit stamp: 'as 11/14/2020 11:01:44'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAReceptiveAccountWithWithdraw stamp: 'as 11/14/2020 11:01:44'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryForAReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 11:01:44'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryForAReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 11:01:44'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryForAReceptiveAccountWithTransferDepositWithADifferentAmount stamp: 'as 11/14/2020 11:01:44'!
PASSED!

!testRun: #AccountSummaryTest #test08AccountSummaryForAnEmptyPortfolio stamp: 'as 11/14/2020 11:01:44'!
PASSED!

!testRun: #AccountSummaryTest #test09AccountSummaryForAPortfolioWithOneDepositAccount stamp: 'as 11/14/2020 11:01:45'!
PASSED!

!testRun: #AccountSummaryTest #test10AccountSummaryForAPortfolioWithTwoDepositAccount stamp: 'as 11/14/2020 11:01:45'!
FAILURE!

!testRun: #AccountSummaryTest #test10AccountSummaryForAPortfolioWithTwoDepositAccount stamp: 'as 11/14/2020 11:01:45'!
FAILURE!
!Portfolio methodsFor: 'account management - private' stamp: 'as 11/14/2020 11:02:44' prior: 50879810!
accountSummary
	accounts isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	
	accounts do: [:account | ]
	"^OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100'."
	! !
!Portfolio methodsFor: 'account management - private' stamp: 'as 11/14/2020 11:03:32' prior: 50879980!
accountSummary

	| summary |
	summary := OrderedCollection new.

	accounts isEmpty ifTrue: [^summary add: 'Balance = 0'].
	
	
	
	accounts do: [:account | ]
	"^OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100'."
	! !
!Portfolio methodsFor: 'account management - private' stamp: 'as 11/14/2020 11:06:34' prior: 50879990!
accountSummary

	| summary |
	summary := OrderedCollection new.

	accounts isEmpty ifTrue: [^summary add: 'Balance = 0'].
	
	^accounts first accountSummary.
	
	! !

!testRun: #AccountSummaryTest #test01AccountSummaryForAnEmptyReceptiveAccount stamp: 'as 11/14/2020 11:06:38'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAReceptiveAccountWithADeposit stamp: 'as 11/14/2020 11:06:38'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAReceptiveAccountWithTwoDeposit stamp: 'as 11/14/2020 11:06:38'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAReceptiveAccountWithWithdraw stamp: 'as 11/14/2020 11:06:38'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryForAReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 11:06:38'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryForAReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 11:06:38'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryForAReceptiveAccountWithTransferDepositWithADifferentAmount stamp: 'as 11/14/2020 11:06:38'!
PASSED!

!testRun: #AccountSummaryTest #test08AccountSummaryForAnEmptyPortfolio stamp: 'as 11/14/2020 11:06:38'!
FAILURE!

!testRun: #AccountSummaryTest #test09AccountSummaryForAPortfolioWithOneDepositAccount stamp: 'as 11/14/2020 11:06:38'!
PASSED!

!testRun: #AccountSummaryTest #test10AccountSummaryForAPortfolioWithTwoDepositAccount stamp: 'as 11/14/2020 11:06:39'!
PASSED!

!testRun: #AccountSummaryTest #test08AccountSummaryForAnEmptyPortfolio stamp: 'as 11/14/2020 11:06:39'!
FAILURE!
!Portfolio methodsFor: 'account management - private' stamp: 'as 11/14/2020 11:07:17' prior: 50880001!
accountSummary

	accounts isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	
	^accounts first accountSummary.
	
	! !

!testRun: #AccountSummaryTest #test10AccountSummaryForAPortfolioWithTwoDepositAccount stamp: 'as 11/14/2020 11:07:24'!
PASSED!

!testRun: #AccountSummaryTest #test09AccountSummaryForAPortfolioWithOneDepositAccount stamp: 'as 11/14/2020 11:07:30'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryForAnEmptyReceptiveAccount stamp: 'as 11/14/2020 11:07:33'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAReceptiveAccountWithADeposit stamp: 'as 11/14/2020 11:07:33'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAReceptiveAccountWithTwoDeposit stamp: 'as 11/14/2020 11:07:33'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAReceptiveAccountWithWithdraw stamp: 'as 11/14/2020 11:07:33'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryForAReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 11:07:33'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryForAReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 11:07:33'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryForAReceptiveAccountWithTransferDepositWithADifferentAmount stamp: 'as 11/14/2020 11:07:33'!
PASSED!

!testRun: #AccountSummaryTest #test08AccountSummaryForAnEmptyPortfolio stamp: 'as 11/14/2020 11:07:33'!
PASSED!

!testRun: #AccountSummaryTest #test09AccountSummaryForAPortfolioWithOneDepositAccount stamp: 'as 11/14/2020 11:07:33'!
PASSED!

!testRun: #AccountSummaryTest #test10AccountSummaryForAPortfolioWithTwoDepositAccount stamp: 'as 11/14/2020 11:07:33'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 11:09:18'!
test11AccountSummaryForAPortfolioWithTwoAccounts
	
	| account1 account2 portfolio |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Deposit register: 100 on: account2.
	portfolio := Portfolio with: account1.
	portfolio add: account2.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Dep�sito por 100.' with: 'Balance = 200').! !

!testRun: #AccountSummaryTest #test01AccountSummaryForAnEmptyReceptiveAccount stamp: 'as 11/14/2020 11:09:48'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAReceptiveAccountWithADeposit stamp: 'as 11/14/2020 11:09:48'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAReceptiveAccountWithTwoDeposit stamp: 'as 11/14/2020 11:09:48'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAReceptiveAccountWithWithdraw stamp: 'as 11/14/2020 11:09:48'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryForAReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 11:09:48'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryForAReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 11:09:48'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryForAReceptiveAccountWithTransferDepositWithADifferentAmount stamp: 'as 11/14/2020 11:09:48'!
PASSED!

!testRun: #AccountSummaryTest #test08AccountSummaryForAnEmptyPortfolio stamp: 'as 11/14/2020 11:09:48'!
PASSED!

!testRun: #AccountSummaryTest #test09AccountSummaryForAPortfolioWithOneDepositAccount stamp: 'as 11/14/2020 11:09:48'!
PASSED!

!testRun: #AccountSummaryTest #test10AccountSummaryForAPortfolioWithTwoDepositAccount stamp: 'as 11/14/2020 11:09:48'!
PASSED!

!testRun: #AccountSummaryTest #test11AccountSummaryForAPortfolioWithTwoAccounts stamp: 'as 11/14/2020 11:09:48'!
FAILURE!

!testRun: #AccountSummaryTest #test11AccountSummaryForAPortfolioWithTwoAccounts stamp: 'as 11/14/2020 11:09:48'!
FAILURE!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 11:10:29' prior: 50880109!
test11AccountSummaryForAPortfolioWithTwoAccounts
	
	| account1 account2 portfolio |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Deposit register: 100 on: account2.
	portfolio := Portfolio with: account1.
	portfolio add: account2.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Dep�sito por 100.' with: 'Balance = 200').! !
!Portfolio methodsFor: 'account management - private' stamp: 'as 11/14/2020 11:13:15' prior: 50880054!
accountSummary

	| summary |
	summary := OrderedCollection new.

	accounts isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	
	accounts do: [:account | summary,account accountSummary removeLast].
	summary add: 'Balance = ', self balance asString.
	
	^summary.
	! !

!testRun: #AccountSummaryTest #test01AccountSummaryForAnEmptyReceptiveAccount stamp: 'as 11/14/2020 11:13:20'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAReceptiveAccountWithADeposit stamp: 'as 11/14/2020 11:13:20'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAReceptiveAccountWithTwoDeposit stamp: 'as 11/14/2020 11:13:20'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAReceptiveAccountWithWithdraw stamp: 'as 11/14/2020 11:13:20'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryForAReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 11:13:20'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryForAReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 11:13:20'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryForAReceptiveAccountWithTransferDepositWithADifferentAmount stamp: 'as 11/14/2020 11:13:20'!
PASSED!

!testRun: #AccountSummaryTest #test08AccountSummaryForAnEmptyPortfolio stamp: 'as 11/14/2020 11:13:20'!
PASSED!

!testRun: #AccountSummaryTest #test09AccountSummaryForAPortfolioWithOneDepositAccount stamp: 'as 11/14/2020 11:13:20'!
FAILURE!

!testRun: #AccountSummaryTest #test10AccountSummaryForAPortfolioWithTwoDepositAccount stamp: 'as 11/14/2020 11:13:20'!
FAILURE!

!testRun: #AccountSummaryTest #test11AccountSummaryForAPortfolioWithTwoAccounts stamp: 'as 11/14/2020 11:13:20'!
FAILURE!
!Portfolio methodsFor: 'account management - private' stamp: 'as 11/14/2020 11:14:40' prior: 50880193!
accountSummary

	| summary |
	summary := OrderedCollection new.

	accounts isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	
	accounts do: [:account | summary := summary,account accountSummary removeLast].
	summary add: 'Balance = ', self balance asString.
	
	^summary.
	! !

!testRun: #AccountSummaryTest #test01AccountSummaryForAnEmptyReceptiveAccount stamp: 'as 11/14/2020 11:14:44'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAReceptiveAccountWithADeposit stamp: 'as 11/14/2020 11:14:44'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAReceptiveAccountWithTwoDeposit stamp: 'as 11/14/2020 11:14:44'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAReceptiveAccountWithWithdraw stamp: 'as 11/14/2020 11:14:44'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryForAReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 11:14:44'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryForAReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 11:14:44'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryForAReceptiveAccountWithTransferDepositWithADifferentAmount stamp: 'as 11/14/2020 11:14:44'!
PASSED!

!testRun: #AccountSummaryTest #test08AccountSummaryForAnEmptyPortfolio stamp: 'as 11/14/2020 11:14:44'!
PASSED!

!testRun: #AccountSummaryTest #test09AccountSummaryForAPortfolioWithOneDepositAccount stamp: 'as 11/14/2020 11:14:44'!
FAILURE!

!testRun: #AccountSummaryTest #test10AccountSummaryForAPortfolioWithTwoDepositAccount stamp: 'as 11/14/2020 11:14:44'!
FAILURE!

!testRun: #AccountSummaryTest #test11AccountSummaryForAPortfolioWithTwoAccounts stamp: 'as 11/14/2020 11:14:44'!
FAILURE!

summary!

summary!

account accountSummary removeLast!

----End fileIn of C:\Users\Ami\Desktop\Facultad\Ing1\windows64-portfolio2\windows64\Packages\TerseGuide.pck.st----!
!Portfolio methodsFor: 'account management - private' stamp: 'as 11/14/2020 11:20:11' prior: 50880249!
accountSummary

	| summary |
	summary := OrderedCollection new.

	accounts isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	
	accounts do: [:account | (summary,account accountSummary) removeLast].
	summary add: 'Balance = ', self balance asString.
	
	^summary.
	! !

!testRun: #AccountSummaryTest #test01AccountSummaryForAnEmptyReceptiveAccount stamp: 'as 11/14/2020 11:20:15'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAReceptiveAccountWithADeposit stamp: 'as 11/14/2020 11:20:15'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAReceptiveAccountWithTwoDeposit stamp: 'as 11/14/2020 11:20:15'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAReceptiveAccountWithWithdraw stamp: 'as 11/14/2020 11:20:16'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryForAReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 11:20:16'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryForAReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 11:20:16'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryForAReceptiveAccountWithTransferDepositWithADifferentAmount stamp: 'as 11/14/2020 11:20:16'!
PASSED!

!testRun: #AccountSummaryTest #test08AccountSummaryForAnEmptyPortfolio stamp: 'as 11/14/2020 11:20:16'!
PASSED!

!testRun: #AccountSummaryTest #test09AccountSummaryForAPortfolioWithOneDepositAccount stamp: 'as 11/14/2020 11:20:16'!
FAILURE!

!testRun: #AccountSummaryTest #test10AccountSummaryForAPortfolioWithTwoDepositAccount stamp: 'as 11/14/2020 11:20:16'!
FAILURE!

!testRun: #AccountSummaryTest #test11AccountSummaryForAPortfolioWithTwoAccounts stamp: 'as 11/14/2020 11:20:16'!
FAILURE!
!Portfolio methodsFor: 'account management - private' stamp: 'as 11/14/2020 11:21:10' prior: 50883244!
accountSummary

	| summary |
	summary := OrderedCollection new.

	accounts isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	
	accounts do: [:account | 
		summary := summary,account accountSummary.
		summary removeLast ].
	summary add: 'Balance = ', self balance asString.
	
	^summary.
	! !

!testRun: #AccountSummaryTest #test01AccountSummaryForAnEmptyReceptiveAccount stamp: 'as 11/14/2020 11:21:14'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAReceptiveAccountWithADeposit stamp: 'as 11/14/2020 11:21:14'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAReceptiveAccountWithTwoDeposit stamp: 'as 11/14/2020 11:21:14'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAReceptiveAccountWithWithdraw stamp: 'as 11/14/2020 11:21:14'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryForAReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 11:21:14'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryForAReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 11:21:14'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryForAReceptiveAccountWithTransferDepositWithADifferentAmount stamp: 'as 11/14/2020 11:21:14'!
PASSED!

!testRun: #AccountSummaryTest #test08AccountSummaryForAnEmptyPortfolio stamp: 'as 11/14/2020 11:21:14'!
PASSED!

!testRun: #AccountSummaryTest #test09AccountSummaryForAPortfolioWithOneDepositAccount stamp: 'as 11/14/2020 11:21:14'!
PASSED!

!testRun: #AccountSummaryTest #test10AccountSummaryForAPortfolioWithTwoDepositAccount stamp: 'as 11/14/2020 11:21:14'!
PASSED!

!testRun: #AccountSummaryTest #test11AccountSummaryForAPortfolioWithTwoAccounts stamp: 'as 11/14/2020 11:21:14'!
PASSED!
!Portfolio methodsFor: 'account management - private' stamp: 'as 11/14/2020 11:24:31' prior: 50883301!
accountSummary

	| summary |
	summary := OrderedCollection new.
	
	accounts do: [:account | 
		summary := summary,account accountSummary.
		summary removeLast ].
	summary add: 'Balance = ', self balance asString.
	
	^summary.
	! !

!testRun: #AccountSummaryTest #test01AccountSummaryForAnEmptyReceptiveAccount stamp: 'as 11/14/2020 11:24:35'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAReceptiveAccountWithADeposit stamp: 'as 11/14/2020 11:24:35'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAReceptiveAccountWithTwoDeposit stamp: 'as 11/14/2020 11:24:35'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAReceptiveAccountWithWithdraw stamp: 'as 11/14/2020 11:24:35'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryForAReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 11:24:35'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryForAReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 11:24:35'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryForAReceptiveAccountWithTransferDepositWithADifferentAmount stamp: 'as 11/14/2020 11:24:35'!
PASSED!

!testRun: #AccountSummaryTest #test08AccountSummaryForAnEmptyPortfolio stamp: 'as 11/14/2020 11:24:35'!
PASSED!

!testRun: #AccountSummaryTest #test09AccountSummaryForAPortfolioWithOneDepositAccount stamp: 'as 11/14/2020 11:24:35'!
PASSED!

!testRun: #AccountSummaryTest #test10AccountSummaryForAPortfolioWithTwoDepositAccount stamp: 'as 11/14/2020 11:24:35'!
PASSED!

!testRun: #AccountSummaryTest #test11AccountSummaryForAPortfolioWithTwoAccounts stamp: 'as 11/14/2020 11:24:35'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 11:26:11'!
test12dosPortfolios
	
	| account1 account2 portfolio1 portfolio2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Deposit register: 100 on: account2.
	portfolio1 := Portfolio with: account1.
	portfolio2 := Portfolio with: account2.
	portfolio1 add: portfolio2.
	
	self assert: portfolio1 accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Dep�sito por 100.' with: 'Balance = 200').! !

!testRun: #AccountSummaryTest #test12dosPortfolios stamp: 'as 11/14/2020 11:26:31'!
PASSED!

!methodRemoval: AccountSummaryTest #test12dosPortfolios stamp: 'as 11/14/2020 11:26:38'!
test12dosPortfolios
	
	| account1 account2 portfolio1 portfolio2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Deposit register: 100 on: account2.
	portfolio1 := Portfolio with: account1.
	portfolio2 := Portfolio with: account2.
	portfolio1 add: portfolio2.
	
	self assert: portfolio1 accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Dep�sito por 100.' with: 'Balance = 200').!
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 11:31:22' prior: 50879238!
accountSummary
	| summary |
	summary := OrderedCollection new.
	transactions do: [:aTransaction | 
 					"(aTransaction isKindOf: Withdraw ) ifTrue: [
						(aTransaction isKindOf: TransferWithdraw) 
							ifTrue: [summary add: 'Salida por transferencia de ', aTransaction value asString, '.' ]	
							ifFalse: [summary add: 'Extracci�n por ', aTransaction value asString, '.' ]
						].
					 (aTransaction isKindOf: Deposit ) ifTrue: [
						(aTransaction isKindOf: TransferDeposit) 
							ifTrue: [summary add: 'Entrada por transferencia de ', aTransaction value asString, '.' ]	
							ifFalse: [summary add: 'Dep�sito por ', aTransaction value asString, '.' ]
						]."
					
					
		].
	summary add: ('Balance = ',  self balance asString).
	^summary.
	! !
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 11:35:24' prior: 50883452!
accountSummary
	| summary |
	summary := OrderedCollection new.
	transactions do: [:aTransaction | 
 					"(aTransaction isKindOf: Withdraw ) ifTrue: [
						(aTransaction isKindOf: TransferWithdraw) 
							ifTrue: [summary add: 'Salida por transferencia de ', aTransaction value asString, '.' ]	
							ifFalse: [summary add: 'Extracci�n por ', aTransaction value asString, '.' ]
						].
					 (aTransaction isKindOf: Deposit ) ifTrue: [
						(aTransaction isKindOf: TransferDeposit) 
							ifTrue: [summary add: 'Entrada por transferencia de ', aTransaction value asString, '.' ]	
							ifFalse: [summary add: 'Dep�sito por ', aTransaction value asString, '.' ]
						]."
					summary add: aTransaction asString
					
		].
	summary add: ('Balance = ',  self balance asString).
	^summary.
	! !
!Deposit methodsFor: 'nil' stamp: 'as 11/14/2020 11:36:49' overrides: 16881101!
asString
	^'Dep�sito por ', value asString, '.'
! !
!TransferDeposit methodsFor: 'nil' stamp: 'as 11/14/2020 11:37:20' overrides: 50883507!
asString
	^'Entrada por transferencia de ', value asString, '.'! !
!Withdraw methodsFor: 'nil' stamp: 'as 11/14/2020 11:37:58' overrides: 16881101!
asString
	^'Extracci�n por ', value asString, '.'.! !
!TransferWithdraw methodsFor: 'nil' stamp: 'as 11/14/2020 11:38:33' overrides: 50883517!
asString
	^'Salida por transferencia de ', value asString, '.'.! !

!testRun: #AccountSummaryTest #test01AccountSummaryForAnEmptyReceptiveAccount stamp: 'as 11/14/2020 11:38:44'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAReceptiveAccountWithADeposit stamp: 'as 11/14/2020 11:38:44'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAReceptiveAccountWithTwoDeposit stamp: 'as 11/14/2020 11:38:44'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAReceptiveAccountWithWithdraw stamp: 'as 11/14/2020 11:38:44'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryForAReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 11:38:44'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryForAReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 11:38:44'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryForAReceptiveAccountWithTransferDepositWithADifferentAmount stamp: 'as 11/14/2020 11:38:44'!
PASSED!

!testRun: #AccountSummaryTest #test08AccountSummaryForAnEmptyPortfolio stamp: 'as 11/14/2020 11:38:44'!
PASSED!

!testRun: #AccountSummaryTest #test09AccountSummaryForAPortfolioWithOneDepositAccount stamp: 'as 11/14/2020 11:38:44'!
PASSED!

!testRun: #AccountSummaryTest #test10AccountSummaryForAPortfolioWithTwoDepositAccount stamp: 'as 11/14/2020 11:38:44'!
PASSED!

!testRun: #AccountSummaryTest #test11AccountSummaryForAPortfolioWithTwoAccounts stamp: 'as 11/14/2020 11:38:44'!
PASSED!
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 11:39:05' prior: 50883479!
accountSummary
	| summary |
	summary := OrderedCollection new.
	transactions do: [:aTransaction | summary add: aTransaction asString].
	summary add: ('Balance = ',  self balance asString).
	^summary.
	! !

TestCase subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 11:42:50'!
TestCase subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetTest methodsFor: 'no messages' stamp: 'as 11/14/2020 11:43:57'!
test01TransferNetForEmptyReceptiveAccount
	! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 11:44:28' prior: 50883593!
test01TransferNetForEmptyReceptiveAccount
	| account1 |
	account1 := ReceptiveAccount new.	
	
	self assert: account1 transferNet equals: 0.! !

!testRun: #TransferNetTest #test01TransferNetForEmptyReceptiveAccount stamp: 'as 11/14/2020 11:44:35'!
ERROR!

!testRun: #TransferNetTest #test01TransferNetForEmptyReceptiveAccount stamp: 'as 11/14/2020 11:44:35'!
ERROR!

!testRun: #TransferNetTest #test01TransferNetForEmptyReceptiveAccount stamp: 'as 11/14/2020 11:44:42'!
ERROR!

!testRun: #TransferNetTest #test01TransferNetForEmptyReceptiveAccount stamp: 'as 11/14/2020 11:44:42'!
ERROR!

!testRun: #TransferNetTest #test01TransferNetForEmptyReceptiveAccount stamp: 'as 11/14/2020 11:45:19'!
ERROR!

!testRun: #TransferNetTest #test01TransferNetForEmptyReceptiveAccount stamp: 'as 11/14/2020 11:45:19'!
ERROR!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 11:45:30' prior: 50883598!
test01TransferNetForEmptyReceptiveAccount
	| account1 |
	account1 := ReceptiveAccount new.	
	
	self assert: account1 transferNet equals: 0.
	! !
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 11:45:44'!
transferNet
	^0.! !

!testRun: #TransferNetTest #test01TransferNetForEmptyReceptiveAccount stamp: 'as 11/14/2020 11:45:50'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 11:46:21'!
test01TransferNetForReceptiveAccountWithTransferDeposit
	| account1 |
	account1 := ReceptiveAccount new.	
	
	self assert: account1 transferNet equals: 0.
	! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 11:47:10'!
test02TransferNetForReceptiveAccountWithTransferDeposit
	| account1 |
	account1 := ReceptiveAccount new.	
	
	self assert: account1 transferNet equals: 0.
	! !

!methodRemoval: TransferNetTest #test01TransferNetForReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 11:47:10'!
test01TransferNetForReceptiveAccountWithTransferDeposit
	| account1 |
	account1 := ReceptiveAccount new.	
	
	self assert: account1 transferNet equals: 0.
	!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 11:47:52' prior: 50883649!
test02TransferNetForReceptiveAccountWithTransferDeposit

	| account1 account2 |
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account2 transferNet equals: 100.
	! !

!testRun: #TransferNetTest #test01TransferNetForEmptyReceptiveAccount stamp: 'as 11/14/2020 11:47:57'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 11:47:57'!
FAILURE!

!testRun: #TransferNetTest #test02TransferNetForReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 11:47:57'!
FAILURE!
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 11:48:46' prior: 50883634!
transferNet
	transactions isEmpty ifTrue: [^0].
	^100.! !

!testRun: #TransferNetTest #test01TransferNetForEmptyReceptiveAccount stamp: 'as 11/14/2020 11:48:52'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 11:48:52'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 11:49:07'!
test02TransferNetForReceptiveAccountWithTwoTransferDeposit

	| account1 account2 |
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account2 transferNet equals: 200.
	! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 11:49:15'!
test03TransferNetForReceptiveAccountWithTwoTransferDeposit

	| account1 account2 |
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account2 transferNet equals: 200.
	! !

!methodRemoval: TransferNetTest #test02TransferNetForReceptiveAccountWithTwoTransferDeposit stamp: 'as 11/14/2020 11:49:15'!
test02TransferNetForReceptiveAccountWithTwoTransferDeposit

	| account1 account2 |
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account2 transferNet equals: 200.
	!

!testRun: #TransferNetTest #test01TransferNetForEmptyReceptiveAccount stamp: 'as 11/14/2020 11:49:20'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 11:49:20'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForReceptiveAccountWithTwoTransferDeposit stamp: 'as 11/14/2020 11:49:20'!
FAILURE!

!testRun: #TransferNetTest #test03TransferNetForReceptiveAccountWithTwoTransferDeposit stamp: 'as 11/14/2020 11:49:20'!
FAILURE!
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 11:51:48' prior: 50883689!
transferNet
	transactions isEmpty ifTrue: [^0].
	transactions inject: 0 into: [:transferNet :transaction | transferNet + 100]! !
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 11:51:50' prior: 50883757!
transferNet
	transactions isEmpty ifTrue: [^0].
	transactions inject: 0 into: [:transferNet :transaction | transferNet + 100].! !
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 11:52:03' prior: 50883764!
transferNet
	transactions isEmpty ifTrue: [^0].
	^transactions inject: 0 into: [:transferNet :transaction | transferNet + 100].
	! !

!testRun: #TransferNetTest #test01TransferNetForEmptyReceptiveAccount stamp: 'as 11/14/2020 11:52:09'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 11:52:09'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForReceptiveAccountWithTwoTransferDeposit stamp: 'as 11/14/2020 11:52:09'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 11:52:23'!
test03TransferNetForReceptiveAccountWithTransferWithdraw

	| account1 account2 |
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account2 transferNet equals: 200.
	! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 11:52:56'!
test04TransferNetForReceptiveAccountWithTwoTransferDeposit

	| account1 account2 |
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account2 transferNet equals: 200.
	! !

!methodRemoval: TransferNetTest #test03TransferNetForReceptiveAccountWithTwoTransferDeposit stamp: 'as 11/14/2020 11:52:56'!
test03TransferNetForReceptiveAccountWithTwoTransferDeposit

	| account1 account2 |
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account2 transferNet equals: 200.
	!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 11:53:08'!
test03TransferNetForReceptiveAccountWithTwoTransferDeposit

	| account1 account2 |
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account2 transferNet equals: 200.
	! !

!methodRemoval: TransferNetTest #test04TransferNetForReceptiveAccountWithTwoTransferDeposit stamp: 'as 11/14/2020 11:53:08'!
test04TransferNetForReceptiveAccountWithTwoTransferDeposit

	| account1 account2 |
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account2 transferNet equals: 200.
	!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 11:53:15'!
test04TransferNetForReceptiveAccountWithTransferWithdraw

	| account1 account2 |
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account2 transferNet equals: 200.
	! !

!methodRemoval: TransferNetTest #test03TransferNetForReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 11:53:15'!
test03TransferNetForReceptiveAccountWithTransferWithdraw

	| account1 account2 |
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account2 transferNet equals: 200.
	!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 11:53:51' prior: 50883857!
test04TransferNetForReceptiveAccountWithTransferWithdraw

	| account1 account2 |
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 transferNet equals: -100.
	! !

!testRun: #TransferNetTest #test04TransferNetForReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 11:53:57'!
FAILURE!

!testRun: #TransferNetTest #test04TransferNetForReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 11:53:57'!
FAILURE!
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 12:00:12' prior: 50883771!
transferNet
	transactions isEmpty ifTrue: [^0].
	^transactions inject: 0 into: [:transferNet :transaction | 
		(transaction isKindOf: TransferDeposit) ifTrue: [transferNet + transaction value ].
		(transaction isKindOf: TransferWithdraw) ifTrue: [transferNet - transaction value ]]
	! !

!testRun: #TransferNetTest #test01TransferNetForEmptyReceptiveAccount stamp: 'as 11/14/2020 12:00:22'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 12:00:22'!
FAILURE!

!testRun: #TransferNetTest #test03TransferNetForReceptiveAccountWithTwoTransferDeposit stamp: 'as 11/14/2020 12:00:22'!
ERROR!

!testRun: #TransferNetTest #test04TransferNetForReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 12:00:22'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForReceptiveAccountWithTwoTransferDeposit stamp: 'as 11/14/2020 12:01:46'!
ERROR!

!testRun: #TransferNetTest #test04TransferNetForReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 12:03:56'!
PASSED!

account2!

account1!

transferNet!

transferNet!

transaction value !

transferNet + transaction value !

account2 transferNet!
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 12:09:05' prior: 50883904!
transferNet
	transactions isEmpty ifTrue: [^0].
	^transactions inject: 0 into: [:transferNet :transaction | transferNet + 100].
		"(transaction isKindOf: TransferDeposit) ifTrue: [transferNet + transaction value ].
		(transaction isKindOf: TransferWithdraw) ifTrue: [transferNet - transaction value ]]"
	! !

!testRun: #TransferNetTest #test03TransferNetForReceptiveAccountWithTwoTransferDeposit stamp: 'as 11/14/2020 12:09:15'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 12:09:20'!
PASSED!
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 12:10:50' prior: 50883944!
transferNet
	| transferNet |
	transactions isEmpty ifTrue: [^0].
	"^transactions inject: 0 into: [:transferNet :transaction | transferNet + 100].
		(transaction isKindOf: TransferDeposit) ifTrue: [transferNet + transaction value ].
		(transaction isKindOf: TransferWithdraw) ifTrue: [transferNet - transaction value ]]"
	
	transferNet := 0.
	transactions do: [:transaction |
		(transaction isKindOf: TransferDeposit) ifTrue: [transferNet + transaction value ].
		(transaction isKindOf: TransferWithdraw) ifTrue: [transferNet - transaction value ]
		]! !
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 12:11:16' prior: 50883965!
transferNet
	| transferNet |
		
	"^transactions inject: 0 into: [:transferNet :transaction | transferNet + 100].
		(transaction isKindOf: TransferDeposit) ifTrue: [transferNet + transaction value ].
		(transaction isKindOf: TransferWithdraw) ifTrue: [transferNet - transaction value ]]"
	
	transferNet := 0.
	transactions do: [:transaction |
		(transaction isKindOf: TransferDeposit) ifTrue: [transferNet + transaction value ].
		(transaction isKindOf: TransferWithdraw) ifTrue: [transferNet - transaction value ]
		].
	^transferNet.! !

!testRun: #TransferNetTest #test01TransferNetForEmptyReceptiveAccount stamp: 'as 11/14/2020 12:11:21'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 12:11:21'!
FAILURE!

!testRun: #TransferNetTest #test03TransferNetForReceptiveAccountWithTwoTransferDeposit stamp: 'as 11/14/2020 12:11:21'!
FAILURE!

!testRun: #TransferNetTest #test04TransferNetForReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 12:11:21'!
FAILURE!
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 12:11:47' prior: 50883986!
transferNet
	| transferNet |
		
	"^transactions inject: 0 into: [:transferNet :transaction | transferNet + 100].
		(transaction isKindOf: TransferDeposit) ifTrue: [transferNet + transaction value ].
		(transaction isKindOf: TransferWithdraw) ifTrue: [transferNet - transaction value ]]"
	
	transferNet := 0.
	transactions do: [:transaction |
		(transaction isKindOf: TransferDeposit) ifTrue: [transferNet := transferNet + transaction value ].
		(transaction isKindOf: TransferWithdraw) ifTrue: [transferNet :=  transferNet - transaction value ]
		].
	^transferNet.! !
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 12:11:48' prior: 50884022!
transferNet
	| transferNet |
		
	"^transactions inject: 0 into: [:transferNet :transaction | transferNet + 100].
		(transaction isKindOf: TransferDeposit) ifTrue: [transferNet + transaction value ].
		(transaction isKindOf: TransferWithdraw) ifTrue: [transferNet - transaction value ]]"
	
	transferNet := 0.
	transactions do: [:transaction |
		(transaction isKindOf: TransferDeposit) ifTrue: [transferNet := transferNet + transaction value ].
		(transaction isKindOf: TransferWithdraw) ifTrue: [transferNet := transferNet - transaction value ]
		].
	^transferNet.! !

!testRun: #TransferNetTest #test01TransferNetForEmptyReceptiveAccount stamp: 'as 11/14/2020 12:11:53'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 12:11:53'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForReceptiveAccountWithTwoTransferDeposit stamp: 'as 11/14/2020 12:11:53'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 12:11:53'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 12:13:28'!
test05TransferNetForEmptyPortfolio

	| account1 account2 |
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 transferNet equals: -100.
	! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 12:14:00' prior: 50884079!
test05TransferNetForEmptyPortfolio

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio transferNet equals: 0.
	! !

!testRun: #TransferNetTest #test05TransferNetForEmptyPortfolio stamp: 'as 11/14/2020 12:14:08'!
ERROR!

!testRun: #TransferNetTest #test05TransferNetForEmptyPortfolio stamp: 'as 11/14/2020 12:14:08'!
ERROR!
!Portfolio methodsFor: 'nil' stamp: 'as 11/14/2020 12:14:30'!
transferNet
	^0.! !

!testRun: #TransferNetTest #test01TransferNetForEmptyReceptiveAccount stamp: 'as 11/14/2020 12:14:35'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 12:14:35'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForReceptiveAccountWithTwoTransferDeposit stamp: 'as 11/14/2020 12:14:35'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 12:14:35'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetForEmptyPortfolio stamp: 'as 11/14/2020 12:14:35'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 12:15:22'!
test06TransferNetForPortfolioWithOneReceptiveAccount

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio transferNet equals: 0.
	! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 12:16:13' prior: 50884125!
test06TransferNetForPortfolioWithOneReceptiveAccount

"test09AccountSummaryForAPortfolioWithOneDepositAccount 
	
	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100').

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio transferNet equals: 0."
	! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 12:16:28'!
test06TransferNetForAPortfolioWithOneDepositAccount

"test09AccountSummaryForAPortfolioWithOneDepositAccount 
	
	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100').

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio transferNet equals: 0."
	! !

!methodRemoval: TransferNetTest #test06TransferNetForPortfolioWithOneReceptiveAccount stamp: 'as 11/14/2020 12:16:28'!
test06TransferNetForPortfolioWithOneReceptiveAccount

"test09AccountSummaryForAPortfolioWithOneDepositAccount 
	
	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100').

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio transferNet equals: 0."
	!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 12:17:19' prior: 50884151!
test06TransferNetForAPortfolioWithOneDepositAccount
	
	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: 0
	! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 12:17:49'!
test06TransferNetForAPortfolioWithAOneTransferDepositAccount
	
	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: 0
	! !

!methodRemoval: TransferNetTest #test06TransferNetForAPortfolioWithOneDepositAccount stamp: 'as 11/14/2020 12:17:49'!
test06TransferNetForAPortfolioWithOneDepositAccount
	
	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: 0
	!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 12:19:22' prior: 50884198!
test06TransferNetForAPortfolioWithAOneTransferDepositAccount
	
	| account1 account2 portfolio|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	portfolio := Portfolio with: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: portfolio transferNet equals: 100.
	! !

!testRun: #TransferNetTest #test06TransferNetForAPortfolioWithAOneTransferDepositAccount stamp: 'as 11/14/2020 12:19:29'!
FAILURE!

!testRun: #TransferNetTest #test06TransferNetForAPortfolioWithAOneTransferDepositAccount stamp: 'as 11/14/2020 12:19:29'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 12:20:20' prior: 50884103!
transferNet
	accounts isEmpty ifTrue: [^0].
	^100.! !

!testRun: #TransferNetTest #test01TransferNetForEmptyReceptiveAccount stamp: 'as 11/14/2020 12:20:26'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 12:20:26'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForReceptiveAccountWithTwoTransferDeposit stamp: 'as 11/14/2020 12:20:26'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 12:20:26'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetForEmptyPortfolio stamp: 'as 11/14/2020 12:20:26'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetForAPortfolioWithAOneTransferDepositAccount stamp: 'as 11/14/2020 12:20:26'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 12:20:50'!
test06TransferNetForAPortfolioWithATwoTransferDepositAccount
	
	| account1 account2 portfolio|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	portfolio := Portfolio with: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.	
	
	self assert: portfolio transferNet equals: 200.
	! !

!testRun: #TransferNetTest #test06TransferNetForAPortfolioWithATwoTransferDepositAccount stamp: 'as 11/14/2020 12:20:55'!
FAILURE!

!testRun: #TransferNetTest #test06TransferNetForAPortfolioWithATwoTransferDepositAccount stamp: 'as 11/14/2020 12:20:55'!
FAILURE!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 12:22:28'!
test07TransferNetForAPortfolioWithATwoTransferDepositAccount
	
	| account1 account2 portfolio|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	portfolio := Portfolio with: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.	
	
	self assert: portfolio transferNet equals: 200.
	! !

!methodRemoval: TransferNetTest #test06TransferNetForAPortfolioWithATwoTransferDepositAccount stamp: 'as 11/14/2020 12:22:28'!
test06TransferNetForAPortfolioWithATwoTransferDepositAccount
	
	| account1 account2 portfolio|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	portfolio := Portfolio with: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.	
	
	self assert: portfolio transferNet equals: 200.
	!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 12:24:04' prior: 50884243!
transferNet
	accounts isEmpty ifTrue: [^0].
	^accounts inject: 0 into: [:transferNet :account | transferNet + 100].! !

!testRun: #TransferNetTest #test01TransferNetForEmptyReceptiveAccount stamp: 'as 11/14/2020 12:24:09'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 12:24:09'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForReceptiveAccountWithTwoTransferDeposit stamp: 'as 11/14/2020 12:24:09'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 12:24:09'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetForEmptyPortfolio stamp: 'as 11/14/2020 12:24:09'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetForAPortfolioWithAOneTransferDepositAccount stamp: 'as 11/14/2020 12:24:09'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetForAPortfolioWithATwoTransferDepositAccount stamp: 'as 11/14/2020 12:24:09'!
FAILURE!

!testRun: #TransferNetTest #test07TransferNetForAPortfolioWithATwoTransferDepositAccount stamp: 'as 11/14/2020 12:24:09'!
FAILURE!

accounts!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 12:25:35' prior: 50884325!
transferNet
	accounts isEmpty ifTrue: [^0].
	^accounts inject: 0 into: [:transferNet :account | transferNet + account transferNet ].! !

!testRun: #TransferNetTest #test01TransferNetForEmptyReceptiveAccount stamp: 'as 11/14/2020 12:25:55'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 12:25:55'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForReceptiveAccountWithTwoTransferDeposit stamp: 'as 11/14/2020 12:25:55'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 12:25:55'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetForEmptyPortfolio stamp: 'as 11/14/2020 12:25:55'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetForAPortfolioWithAOneTransferDepositAccount stamp: 'as 11/14/2020 12:25:55'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetForAPortfolioWithATwoTransferDepositAccount stamp: 'as 11/14/2020 12:25:55'!
PASSED!
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 12:27:20' prior: 50884043!
transferNet		
	^transactions inject: 0 into: [:transferNet :transaction | 
		(transaction isKindOf: TransferDeposit) ifTrue: [transferNet + transaction value ].
		(transaction isKindOf: TransferWithdraw) ifTrue: [transferNet - transaction value ]]
	
	"transferNet := 0.
	transactions do: [:transaction |
		(transaction isKindOf: TransferDeposit) ifTrue: [transferNet := transferNet + transaction value ].
		(transaction isKindOf: TransferWithdraw) ifTrue: [transferNet := transferNet - transaction value ]
		].
	^transferNet."! !
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 12:29:36' prior: 50884399!
transferNet		
	"^transactions inject: 0 into: [:transferNet :transaction | transaction accumulateTo
		(transaction isKindOf: TransferDeposit) ifTrue: [transferNet + transaction value ].
		(transaction isKindOf: TransferWithdraw) ifTrue: [transferNet - transaction value ]]"
	
	| transferNet |
	transferNet := 0.
	transactions do: [:transaction |
		(transaction isKindOf: TransferDeposit) ifTrue: [transferNet := transferNet + transaction value ].
		(transaction isKindOf: TransferWithdraw) ifTrue: [transferNet := transferNet - transaction value ]
		].
	^transferNet.! !
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 12:30:19' prior: 50884419!
transferNet		
	"^transactions inject: 0 into: [:transferNet :transaction | transaction accumulateTo
		(transaction isKindOf: TransferDeposit) ifTrue: [transferNet + transaction value ].
		(transaction isKindOf: TransferWithdraw) ifTrue: [transferNet - transaction value ]]"
	
	| transferNet |
	transferNet := 0.
	transactions do: [:transaction |
		"(transaction isKindOf: TransferDeposit) ifTrue: [transferNet := transferNet + transaction value ].
		(transaction isKindOf: TransferWithdraw) ifTrue: [transferNet := transferNet - transaction value ]"
		transferNet := transaction accumulateToTransferNet: transferNet.
		].
	^transferNet.! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 12:31:27'!
accumulateToTransferNet: aTransferNet
	^aTransferNet + value.! !
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 12:31:38'!
accumulateToTransferNet: aTransferNet
	^aTransferNet - value.! !

!testRun: #TransferNetTest #test01TransferNetForEmptyReceptiveAccount stamp: 'as 11/14/2020 12:31:53'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 12:31:53'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForReceptiveAccountWithTwoTransferDeposit stamp: 'as 11/14/2020 12:31:53'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 12:31:53'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetForEmptyPortfolio stamp: 'as 11/14/2020 12:31:53'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetForAPortfolioWithAOneTransferDepositAccount stamp: 'as 11/14/2020 12:31:53'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetForAPortfolioWithATwoTransferDepositAccount stamp: 'as 11/14/2020 12:31:53'!
PASSED!
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 12:32:05' prior: 50884440!
transferNet			
	| transferNet |
	transferNet := 0.
	transactions do: [:transaction |
		transferNet := transaction accumulateToTransferNet: transferNet.
		].
	^transferNet.! !

!testRun: #TransferNetTest #test01TransferNetForEmptyReceptiveAccount stamp: 'as 11/14/2020 12:32:10'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 12:32:10'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForReceptiveAccountWithTwoTransferDeposit stamp: 'as 11/14/2020 12:32:10'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 12:32:10'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetForEmptyPortfolio stamp: 'as 11/14/2020 12:32:10'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetForAPortfolioWithAOneTransferDepositAccount stamp: 'as 11/14/2020 12:32:10'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetForAPortfolioWithATwoTransferDepositAccount stamp: 'as 11/14/2020 12:32:10'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 12:32:22' prior: 50884364!
transferNet
	^accounts inject: 0 into: [:transferNet :account | transferNet + account transferNet ].! !

!testRun: #TransferNetTest #test01TransferNetForEmptyReceptiveAccount stamp: 'as 11/14/2020 12:32:26'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 12:32:26'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForReceptiveAccountWithTwoTransferDeposit stamp: 'as 11/14/2020 12:32:26'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 12:32:26'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetForEmptyPortfolio stamp: 'as 11/14/2020 12:32:26'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetForAPortfolioWithAOneTransferDepositAccount stamp: 'as 11/14/2020 12:32:26'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetForAPortfolioWithATwoTransferDepositAccount stamp: 'as 11/14/2020 12:32:26'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 12:33:09'!
test06TransferNetForAPortfolioWithAOneTransferAccount
	
	| account1 account2 portfolio|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	portfolio := Portfolio with: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: portfolio transferNet equals: 100.
	! !

!methodRemoval: TransferNetTest #test06TransferNetForAPortfolioWithAOneTransferDepositAccount stamp: 'as 11/14/2020 12:33:09'!
test06TransferNetForAPortfolioWithAOneTransferDepositAccount
	
	| account1 account2 portfolio|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	portfolio := Portfolio with: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: portfolio transferNet equals: 100.
	!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 12:33:19'!
test07TransferNetForAPortfolioWithATwoTransferAccount
	
	| account1 account2 portfolio|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	portfolio := Portfolio with: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.	
	
	self assert: portfolio transferNet equals: 200.
	! !

!methodRemoval: TransferNetTest #test07TransferNetForAPortfolioWithATwoTransferDepositAccount stamp: 'as 11/14/2020 12:33:19'!
test07TransferNetForAPortfolioWithATwoTransferDepositAccount
	
	| account1 account2 portfolio|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	portfolio := Portfolio with: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.	
	
	self assert: portfolio transferNet equals: 200.
	!

!testRun: #TransferNetTest #test01TransferNetForEmptyReceptiveAccount stamp: 'as 11/14/2020 12:35:49'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 12:35:49'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForReceptiveAccountWithTwoTransferDeposit stamp: 'as 11/14/2020 12:35:49'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 12:35:49'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetForEmptyPortfolio stamp: 'as 11/14/2020 12:35:49'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetForAPortfolioWithAOneTransferAccount stamp: 'as 11/14/2020 12:35:49'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetForAPortfolioWithATwoTransferAccount stamp: 'as 11/14/2020 12:35:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'as 11/14/2020 12:35:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'as 11/14/2020 12:35:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'as 11/14/2020 12:35:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'as 11/14/2020 12:35:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'as 11/14/2020 12:35:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'as 11/14/2020 12:35:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'as 11/14/2020 12:35:55'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'as 11/14/2020 12:35:58'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'as 11/14/2020 12:35:58'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'as 11/14/2020 12:35:58'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'as 11/14/2020 12:35:58'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'as 11/14/2020 12:35:58'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'as 11/14/2020 12:35:58'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'as 11/14/2020 12:35:58'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'as 11/14/2020 12:35:58'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'as 11/14/2020 12:35:58'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'as 11/14/2020 12:35:58'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'as 11/14/2020 12:35:58'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'as 11/14/2020 12:35:58'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'as 11/14/2020 12:35:58'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'as 11/14/2020 12:35:58'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'as 11/14/2020 12:35:58'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryForAnEmptyReceptiveAccount stamp: 'as 11/14/2020 12:36:05'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAReceptiveAccountWithADeposit stamp: 'as 11/14/2020 12:36:05'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAReceptiveAccountWithTwoDeposit stamp: 'as 11/14/2020 12:36:05'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAReceptiveAccountWithWithdraw stamp: 'as 11/14/2020 12:36:05'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryForAReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 12:36:05'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryForAReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 12:36:05'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryForAReceptiveAccountWithTransferDepositWithADifferentAmount stamp: 'as 11/14/2020 12:36:05'!
PASSED!

!testRun: #AccountSummaryTest #test08AccountSummaryForAnEmptyPortfolio stamp: 'as 11/14/2020 12:36:05'!
PASSED!

!testRun: #AccountSummaryTest #test09AccountSummaryForAPortfolioWithOneDepositAccount stamp: 'as 11/14/2020 12:36:05'!
PASSED!

!testRun: #AccountSummaryTest #test10AccountSummaryForAPortfolioWithTwoDepositAccount stamp: 'as 11/14/2020 12:36:05'!
PASSED!

!testRun: #AccountSummaryTest #test11AccountSummaryForAPortfolioWithTwoAccounts stamp: 'as 11/14/2020 12:36:05'!
PASSED!

!testRun: #TransferTest #test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer stamp: 'as 11/14/2020 12:36:11'!
PASSED!

!testRun: #TransferTest #test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer stamp: 'as 11/14/2020 12:36:11'!
PASSED!

!testRun: #TransferTest #test03AccountTransactionsInTransferAreConnected stamp: 'as 11/14/2020 12:36:11'!
PASSED!

!testRun: #TransferTest #test04AccountCannotTransferToItself stamp: 'as 11/14/2020 12:36:11'!
PASSED!

!testRun: #TransferTest #test05AccountCannotTransferInvalidAmount stamp: 'as 11/14/2020 12:36:11'!
PASSED!

----STARTUP---- (14 November 2020 15:53:23) as C:\Users\Ami\Desktop\Facultad\Ing1\windows64-portfolio2\windows64\CuisUniversity-4384.image!


!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:53:51'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:53:51'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:44'!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:48'!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:52'!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32'!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46'!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:14:15'!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw account |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:14:01'!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 50 on: account1.
		
	self assert: 1 equals: account1 transactions size.
	self assert: (account1 transactions includes: deposit1).
! !

!classDefinition: #AccountTransaction category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:53:51'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #AccountTransaction category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:53:51'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' overrides: 16881508!
value 

	self subclassResponsibility ! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:53:51'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:53:51'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/17/2019 03:22:00'!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:53:51'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Deposit category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:53:51'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45'!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' overrides: 50884908!
value

	^ value! !

!classDefinition: 'Deposit class' category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:53:51'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:53:51'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Withdraw category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:53:51'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Withdraw category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:53:51'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46'!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' overrides: 50884908!
value

	^ value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:53:51'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:53:51'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:53:52'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:53:52'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'NR 10/17/2019 15:06:56' overrides: 16896425!
initialize

	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37'!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37'!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/23/2019 15:19:32'!
balance

	^transactions sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/17/2019 03:28:43'!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !

!classRemoval: #ReceptiveAccount stamp: 'as 11/14/2020 15:53:52'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'as 11/14/2020 15:53:52'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'as 11/14/2020 15:53:53'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'as 11/14/2020 15:53:53'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'as 11/14/2020 15:53:53'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:53'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:53'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:16:26'!
test01BalanceOfPortfolioWithoutAccountsIsZero

	self assert: 0 equals: Portfolio new balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:17:51'!
test02BalanceOfPortfolioWithOneAccountIsAccountBalance

	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: account balance equals: portfolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:23:25'!
test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolioAccount balance + simplePortfolio balance) equals: composedPortofolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:15'!
test04PortfolioWithoutAccountsHasNoRegisteredTransaction

	self deny: (Portfolio new hasRegistered: (Deposit for: 100))! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:11'!
test05PortfolioHasRegisteredItsAccountsTransactions

	| account portfolio deposit |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: (portfolio hasRegistered: deposit)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:06'!
test06PortfolioLooksForRegisteredTransactionsRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolio hasRegistered: simplePortfolioAccountDeposit).
	self assert: (composedPortfolio hasRegistered: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:10'!
test07PortfolioHasNoTransactionWhenHasNoAccounts

	self assert: Portfolio new transactions isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 6/22/2020 07:31:19'!
test08PortfolioTransactionsIncludesAllItsAccountsTransactions

	| account portfolio accountDeposit anotherAccount portfolioTransactions anotherAccountWithdraw |
	
	account := ReceptiveAccount new.
	accountDeposit := Deposit register: 100 on: account.
	anotherAccount := ReceptiveAccount new.
	anotherAccountWithdraw := Withdraw register: 100 on: account.
	portfolio := Portfolio with: account.
	
	portfolioTransactions := portfolio transactions.
	
	self assert: 2 equals: portfolioTransactions size.
	self assert: (portfolioTransactions includes: accountDeposit).
	self assert: (portfolioTransactions includes: anotherAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:20'!
test09PortfolioTransactionsAreCalculatedRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit composedPortfolioTransactions |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	composedPortfolioTransactions := composedPortfolio transactions.
	self assert: 2 equals: composedPortfolioTransactions size.
	self assert: (composedPortfolioTransactions includes: simplePortfolioAccountDeposit).
	self assert: (composedPortfolioTransactions includes: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:24'!
test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce

	| account portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: portfolio accountsSize.
			self assert: (portfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:28'!
test11PortfolioCanNotIncludeAccountOfItsPortfolios

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	composedPortfolio := Portfolio with: simplePortfolio.
	
	self 
		should: [ composedPortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: composedPortfolio accountsSize.
			self assert: (composedPortfolio accountsIncludes: simplePortfolio) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:32'!
test12PortfolioCanNotIncludeItself

	| account simplePortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	
	self 
		should: [ simplePortfolio add: simplePortfolio ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: simplePortfolio accountsSize.
			self assert: (simplePortfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:01:51'!
test13ComposedPortfolioCanNotHaveParentPortfolioAccount

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio new.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio add: account.
	
	self 
		should: [ simplePortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: simplePortfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:12:16'!
test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively

	| account leftParentPortfolio leftRootParentPortfolio portfolio rightParentPortfolio rightRootParentPortfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	leftParentPortfolio := Portfolio with: portfolio .
	leftRootParentPortfolio := Portfolio with: leftParentPortfolio.
	leftRootParentPortfolio add: account.
	
	rightParentPortfolio := Portfolio with: portfolio .
	rightRootParentPortfolio := Portfolio with: rightParentPortfolio.
	rightRootParentPortfolio add: account.

	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/29/2019 16:31:18'!
test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd

	| portfolioToAdd portfolioToModify rootPortfolio sharedAccount |
	
	sharedAccount := ReceptiveAccount new.
	portfolioToModify := Portfolio new.
	rootPortfolio := Portfolio with: sharedAccount with: portfolioToModify.
	portfolioToAdd := Portfolio with: sharedAccount.
	
	self 
		should: [ portfolioToModify add: portfolioToAdd ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolioToModify accountsIsEmpty ]! !

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:54'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:54'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:48'!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:54'!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:02'!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32'!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46'!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/9/2020 06:00:12'!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw account |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/9/2020 06:02:30'!
test07AccountKnowsItsTransactions 

	| account deposit |
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: account.
		
	self assert: 1 equals: account transactions size .
	self assert: (account transactions includes: deposit).
! !

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:55'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:55'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:23:47'!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:24:25'!
isComposedBy: anAccount

	self subclassResponsibility ! !
!Account methodsFor: 'balance' stamp: 'HAW 5/25/2019 12:23:40'!
balance

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:27'!
addTransactionsTo: aCollectionOfTransactions

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:15'!
transactions

	self subclassResponsibility ! !
!Account methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:24:04'!
addedTo: aPortfolio

	self subclassResponsibility ! !

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:55'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:55'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:20'!
accountsIncludes: anAccount

	^accounts includes: anAccount ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:05:04'!
accountsIsEmpty
	
	^accounts isEmpty ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:06'!
accountsSize
	
	^accounts size! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:19:20'!
add: accountToAdd

	self assertCanAdd: accountToAdd.
		
	accounts add: accountToAdd.
	accountToAdd addedTo: self 
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:17:31'!
rootParents
	
	| rootParents |
	
	rootParents := Set new.
	self addRootParentsTo: rootParents.
	
	^ rootParents! !
!Portfolio methodsFor: 'initialization' stamp: 'HAW 5/25/2019 12:03:18' overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:19:36' overrides: 50885474!
balance
	
	^accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:42:55' overrides: 50885478!
addTransactionsTo: aCollectionOfTransactions

	accounts do: [ :anAccount | anAccount addTransactionsTo: aCollectionOfTransactions ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:32' overrides: 50885483!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsTo: transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:02:59' overrides: 50885487!
addedTo: aPortfolio 
	
	parents add: aPortfolio ! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:20:56'!
anyRootParentIsComposedBy: accountToAdd

	^self rootParents anySatisfy: [ :aParent | aParent isComposedBy: accountToAdd]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:28:29' overrides: 50885466!
hasRegistered: aTransaction

	^accounts anySatisfy: [ :anAccount | anAccount hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/29/2019 16:24:54' overrides: 50885470!
isComposedBy: anAccount

	^ self = anAccount or: [ accounts anySatisfy: [ :composedAccount | (composedAccount isComposedBy: anAccount) or: [ anAccount isComposedBy: composedAccount ]]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:17:31'!
addRootParentsTo: rootParents

	parents 
		ifEmpty: [ rootParents add: self ] 
		ifNotEmpty: [ parents do: [ :aParent | aParent addRootParentsTo: rootParents ]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:20:36'!
assertCanAdd: accountToAdd

	(self anyRootParentIsComposedBy: accountToAdd) ifTrue: [ self signalCanNotAddAccount ].
! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 11:48:34'!
signalCanNotAddAccount
	
	self error: self class canNotAddAccountErrorMessage! !

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:56'!
Portfolio class
	instanceVariableNames: ''!

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:56'!
Portfolio class
	instanceVariableNames: ''!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'NR 11/9/2020 06:01:26'!
canNotAddAccountErrorMessage
	
	^'Can not add repeated account to a portfolio!!'! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:18:21'!
with: anAccount

	^self new 
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:23:59'!
with: anAccount with: anotherAccount

	^self new 
		add: anAccount;
		add: anotherAccount;
		yourself! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:56'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:56'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:35' overrides: 16896425!
initialize

	super initialize.
	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'NR 11/9/2020 05:56:36' overrides: 50885478!
addTransactionsTo: aCollectionOfTransactions

	aCollectionOfTransactions addAll: transactions copy! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37'!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' overrides: 50885483!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:24:46' overrides: 50885474!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/21/2019 18:55:56' overrides: 50885466!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:54:51' overrides: 50885470!
isComposedBy: anAccount

	^self = anAccount ! !
!ReceptiveAccount methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:03:32' overrides: 50885487!
addedTo: aPortfolio 
	
	! !

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:57'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:57'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' overrides: 16881508!
value 

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:39'!
affectBalance: aBalance

	self subclassResponsibility ! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:57'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:57'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/21/2019 18:54:27'!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:57'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:57'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45'!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' overrides: 50885715!
value

	^ value! !
!Deposit methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:02' overrides: 50885719!
affectBalance: aBalance

	^aBalance + value ! !

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:57'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:57'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:57'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:57'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46'!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' overrides: 50885715!
value

	^ value! !
!Withdraw methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:15' overrides: 50885719!
affectBalance: aBalance

	^aBalance - value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:57'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:57'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:57'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:57'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'no messages' stamp: 'as 11/9/2020 19:34:58'!
test01AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedInTransfer
	! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:57'!
Object subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:44:23'!
test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 balance equals: -100.
	self assert: account2 balance equals: 100.	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:44:39' prior: 50885854!
test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 balance equals: -100.
	self assert: account2 balance equals: 100.	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:45:04' prior: 50885868!
test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 balance equals: -100.
	self assert: account2 balance equals: 100.	
	
	! !

!methodRemoval: TransferTest #test01AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedInTransfer stamp: 'as 11/14/2020 15:53:57'!
test01AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedInTransfer
	!
!Transfer class methodsFor: 'no messages' stamp: 'as 11/9/2020 19:47:31'!
anAmountOf: anAmount from: originAccount to: destinationAccount
	self new initializeWith: anAmount from: originAccount to: destinationAccount.! !
!Transfer methodsFor: 'no messages' stamp: 'as 11/9/2020 19:47:45'!
initializeWith: anAmount from: originAccount to: destinationAccount
	! !

!classDefinition: #NameOfSubclass category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:57'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #NameOfSubclass category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:58'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #NameOfSubclass stamp: 'as 11/14/2020 15:53:58'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:48:46' prior: 50885909!
initializeWith: anAmount from: originAccount to: destinationAccount
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:54:17' prior: 50885936!
initializeWith: anAmount from: originAccount to: destinationAccount

	| deposit extraction |
	deposit := Deposit register: anAmount on: destinationAccount.
	extraction := Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:58:11'!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 hasRegistered: transfer withdraw.
	self assert: account2 hasRegistered: transfer deposit.
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:58:37' prior: 50885942!
initializeWith: anAmount from: originAccount to: destinationAccount

	| deposit withdraw |
	deposit := Deposit register: anAmount on: destinationAccount.
	withdraw := Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:59:24' prior: 50885967!
initializeWith: anAmount from: originAccount to: destinationAccount

	| deposit withdraw |
	deposit := Deposit register: anAmount on: destinationAccount.
	withdraw := Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:00:05' prior: 50885978!
initializeWith: anAmount from: originAccount to: destinationAccount

	Deposit register: anAmount on: destinationAccount.
	Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:58'!
Object subclass: #Transfer
	instanceVariableNames: 'deposit withdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:58'!
Object subclass: #Transfer
	instanceVariableNames: 'deposit withdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:00:39' prior: 50885989!
initializeWith: anAmount from: originAccount to: destinationAccount

	deposit := Deposit register: anAmount on: destinationAccount.
	withdraw := Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:01:13' prior: 50885952!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:02:48' prior: 50886023!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	"self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit)."

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:04:01'!
checkWithdrawIsRegisteredIn: anAccount
	anAccount hasRegistered: withdraw.
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:04:06' prior: 50886057!
checkWithdrawIsRegisteredIn: anAccount
	^anAccount hasRegistered: withdraw.
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:04:20'!
checkDepositIsRegisteredIn: anAccount
	^anAccount hasRegistered: deposit.
	! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:05:41' prior: 50885902!
anAmountOf: anAmount from: originAccount to: destinationAccount
	^self new initializeWith: anAmount from: originAccount to: destinationAccount.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:05:57' prior: 50886038!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:08:18'!
test02AccountTransactionsAreRegisteredInAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !

!methodRemoval: TransferTest #test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer stamp: 'as 11/14/2020 15:53:58'!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:09:34'!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:09:42'!
test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !

!methodRemoval: TransferTest #test02AccountTransactionsAreRegisteredInAccountsInvolvedAfterTransfer stamp: 'as 11/14/2020 15:53:58'!
test02AccountTransactionsAreRegisteredInAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:11:24' prior: 50886128!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	"self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	"
	
	self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer).
	
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'as 11/9/2020 20:12:14'!
hasTransfer: aTransfer
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:14:32' prior: 50886175!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer).
	
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'as 11/9/2020 20:16:19' prior: 50886193!
hasTransfer: aTransfer
	
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'as 11/9/2020 20:18:50' prior: 50886211!
hasTransfer: aTransfer
	transactions anySatisfy: [:transaction | transaction belongsTo: aTransfer].! !
!AccountTransaction methodsFor: 'balance' stamp: 'as 11/9/2020 20:19:12'!
belongsTo: aTransfer! !

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:59'!
Object subclass: #AccountTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'transfer' stamp: 'as 11/9/2020 20:19:57' prior: 50886221!
belongsTo: aTransfer
	^transfer = aTransfer.! !

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:59'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:59'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:59'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:59'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:59'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:59'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:59'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:59'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'transfer' stamp: 'as 11/9/2020 20:29:24' prior: 50886233!
belongsTo: aTransfer
	"^transfer = aTransfer. y esto donde vaaaaa"! !
!AccountTransaction methodsFor: 'transfer' stamp: 'as 11/9/2020 20:56:16' prior: 50886299!
belongsTo: aTransfer
	"^transfer = aTransfer."! !

!methodRemoval: AccountTransaction #belongsTo: stamp: 'as 11/14/2020 15:53:59'!
belongsTo: aTransfer
	"^transfer = aTransfer."!

!classRemoval: #TransferDeposit stamp: 'as 11/14/2020 15:53:59'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:59'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:59'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:59'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:59'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:59'!
TransferTransaction subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:59'!
TransferTransaction subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:59'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:59'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTransaction methodsFor: 'no messages' stamp: 'as 11/9/2020 21:01:09'!
belongsTo: aTransfer
	^transfer = aTransfer.! !

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:59'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: 'deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:53:59'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: 'deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:11:06' prior: 50886197!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer).

	"self assert: (account1 hasRegister: transfer withdraw).
	self assert: (account2 hasRegister: transfer deposit).	"
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:14:21' prior: 50886406!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	"self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer)."

	"self assert: (account1 hasRegister: transfer withdraw).
	self assert: (account2 hasRegister: transfer deposit).	"
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:14:27' prior: 50886424!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	"self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer)."

	"self assert: (account1 hasRegister: transfer withdraw).
	self assert: (account2 hasRegister: transfer deposit).	"
	
	
	! !

!classRemoval: #TransferWithdraw stamp: 'as 11/14/2020 15:54:00'!
TransferTransaction subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferDeposit stamp: 'as 11/14/2020 15:54:00'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: 'deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferTransaction stamp: 'as 11/14/2020 15:54:00'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:15:36' prior: 50886442!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	"self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer)."

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:16:11'!
withdraw
	^withdraw.
	
	
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:16:25'!
deposit
	^deposit.
	
	
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:16:36' prior: 50886481!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:17:27' prior: 50886143!
test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	"self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	"
	
	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:20:24' prior: 50886521!
test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:24:19' prior: 50886541!
test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	
	"transfer -> transaction"! !

!methodRemoval: TransferTest #test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer stamp: 'as 11/14/2020 15:54:00'!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	
	
	!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:30:13'!
test03AccountTransactionsInTransferAreConnected

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer withdraw transferDepositAssociated).
	self assert: (transfer deposit transferWithdrawAssociated).	
	! !

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:00'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:00'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:00'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:00'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:00'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:01'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:01'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:01'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferWithdraw methodsFor: 'no messages' stamp: 'as 11/9/2020 21:32:35'!
transferDepositAssociated
	^transfer deposit.! !
!TransferDeposit methodsFor: 'no messages' stamp: 'as 11/9/2020 21:32:59'!
transferWithdrawAssociated
	^transfer withdraw.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:33:57' prior: 50886013!
initializeWith: anAmount from: originAccount to: destinationAccount

	deposit := Deposit register: anAmount on: destinationAccount for: self.
	withdraw := Withdraw register: anAmount on: originAccount for: self.
	
	
	
	
	
	
	! !
!AccountTransaction class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:34:29'!
register: aValue on: account for: aTransfer

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !
!AccountTransaction class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:34:48' prior: 50886681!
register: aValue on: account for: aTransfer

	| transaction |
	
	transaction := self for: aValue for: aTransfer.
	account register: transaction.
		
	^ transaction! !
!Deposit class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:35:27'!
for: aValue for: aTransfer

	^ self new initializeFor: aValue for: aTransfer.! !
!Deposit class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:36:23' prior: 50886698!
for: aValue for: aTransfer

	^ TransferDeposit new initializeFor: aValue for: aTransfer.! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:37:12'!
initializeFor: aValue for: aTransfer
	value := aValue.
	! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:37:33' prior: 50886710!
initializeFor: aValue for: aTransfer
	value := aValue.
	transfer := aTransfer.! !
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:37:43'!
initializeFor: aValue for: aTransfer
	value := aValue.
	transfer := aTransfer.! !
!Withdraw class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:38:08'!
for: aValue for: aTransfer

	^ TransferWithdraw new initializeFor: aValue for: aTransfer.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:39:47' prior: 50886587!
test03AccountTransactionsInTransferAreConnected

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:40:24' prior: 50886733!
test03AccountTransactionsInTransferAreConnected

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	
	
	
	"FALTAN CASOS BORDEEEEE"! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:44:40'!
test04AccountCannotTransferToItself

	| account1 transfer|
	
	"account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	"
	
	
	"FALTAN CASOS BORDEEEEE"! !

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:01'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:01'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:44' prior: 50885380!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:48' prior: 50885387!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:52' prior: 50885396!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32' prior: 50885406!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46' prior: 50885416!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:14:15' prior: 50885429!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw account |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:14:01' prior: 50885441!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 50 on: account1.
		
	self assert: 1 equals: account1 transactions size.
	self assert: (account1 transactions includes: deposit1).
! !

!classDefinition: #AccountTransaction category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:01'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #AccountTransaction category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:01'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' prior: 50885715 overrides: 16881508!
value 

	self subclassResponsibility ! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:01'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:01'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/17/2019 03:22:00' prior: 50885734!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:01'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Deposit category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:01'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45' prior: 50885756!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50885761 overrides: 50886887!
value

	^ value! !

!classDefinition: 'Deposit class' category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:01'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:01'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50885779!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Withdraw category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:01'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Withdraw category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:01'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46' prior: 50885799!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50885804 overrides: 50886887!
value

	^ value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:01'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:01'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50885822!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:02'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:02'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'NR 10/17/2019 15:06:56' prior: 50885654 overrides: 16896425!
initialize

	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50885666!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50885672!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/23/2019 15:19:32' prior: 50885677!
balance

	^transactions sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/17/2019 03:28:43' prior: 50885684!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !

!classRemoval: #ReceptiveAccount stamp: 'as 11/14/2020 15:54:02'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'as 11/14/2020 15:54:02'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'as 11/14/2020 15:54:03'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'as 11/14/2020 15:54:03'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'as 11/14/2020 15:54:03'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:03'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:03'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:16:26' prior: 50885094!
test01BalanceOfPortfolioWithoutAccountsIsZero

	self assert: 0 equals: Portfolio new balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:17:51' prior: 50885100!
test02BalanceOfPortfolioWithOneAccountIsAccountBalance

	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: account balance equals: portfolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:23:25' prior: 50885110!
test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolioAccount balance + simplePortfolio balance) equals: composedPortofolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:15' prior: 50885132!
test04PortfolioWithoutAccountsHasNoRegisteredTransaction

	self deny: (Portfolio new hasRegistered: (Deposit for: 100))! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:11' prior: 50885138!
test05PortfolioHasRegisteredItsAccountsTransactions

	| account portfolio deposit |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: (portfolio hasRegistered: deposit)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:06' prior: 50885149!
test06PortfolioLooksForRegisteredTransactionsRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolio hasRegistered: simplePortfolioAccountDeposit).
	self assert: (composedPortfolio hasRegistered: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:10' prior: 50885177!
test07PortfolioHasNoTransactionWhenHasNoAccounts

	self assert: Portfolio new transactions isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 6/22/2020 07:31:19' prior: 50885183!
test08PortfolioTransactionsIncludesAllItsAccountsTransactions

	| account portfolio accountDeposit anotherAccount portfolioTransactions anotherAccountWithdraw |
	
	account := ReceptiveAccount new.
	accountDeposit := Deposit register: 100 on: account.
	anotherAccount := ReceptiveAccount new.
	anotherAccountWithdraw := Withdraw register: 100 on: account.
	portfolio := Portfolio with: account.
	
	portfolioTransactions := portfolio transactions.
	
	self assert: 2 equals: portfolioTransactions size.
	self assert: (portfolioTransactions includes: accountDeposit).
	self assert: (portfolioTransactions includes: anotherAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:20' prior: 50885206!
test09PortfolioTransactionsAreCalculatedRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit composedPortfolioTransactions |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	composedPortfolioTransactions := composedPortfolio transactions.
	self assert: 2 equals: composedPortfolioTransactions size.
	self assert: (composedPortfolioTransactions includes: simplePortfolioAccountDeposit).
	self assert: (composedPortfolioTransactions includes: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:24' prior: 50885239!
test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce

	| account portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: portfolio accountsSize.
			self assert: (portfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:28' prior: 50885256!
test11PortfolioCanNotIncludeAccountOfItsPortfolios

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	composedPortfolio := Portfolio with: simplePortfolio.
	
	self 
		should: [ composedPortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: composedPortfolio accountsSize.
			self assert: (composedPortfolio accountsIncludes: simplePortfolio) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:32' prior: 50885277!
test12PortfolioCanNotIncludeItself

	| account simplePortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	
	self 
		should: [ simplePortfolio add: simplePortfolio ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: simplePortfolio accountsSize.
			self assert: (simplePortfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:01:51' prior: 50885295!
test13ComposedPortfolioCanNotHaveParentPortfolioAccount

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio new.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio add: account.
	
	self 
		should: [ simplePortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: simplePortfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:12:16' prior: 50885314!
test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively

	| account leftParentPortfolio leftRootParentPortfolio portfolio rightParentPortfolio rightRootParentPortfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	leftParentPortfolio := Portfolio with: portfolio .
	leftRootParentPortfolio := Portfolio with: leftParentPortfolio.
	leftRootParentPortfolio add: account.
	
	rightParentPortfolio := Portfolio with: portfolio .
	rightRootParentPortfolio := Portfolio with: rightParentPortfolio.
	rightRootParentPortfolio add: account.

	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/29/2019 16:31:18' prior: 50885342!
test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd

	| portfolioToAdd portfolioToModify rootPortfolio sharedAccount |
	
	sharedAccount := ReceptiveAccount new.
	portfolioToModify := Portfolio new.
	rootPortfolio := Portfolio with: sharedAccount with: portfolioToModify.
	portfolioToAdd := Portfolio with: sharedAccount.
	
	self 
		should: [ portfolioToModify add: portfolioToAdd ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolioToModify accountsIsEmpty ]! !

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:03'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:03'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:48'!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:54'!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:02'!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32'!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46'!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/9/2020 06:00:12'!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw account |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/9/2020 06:02:30'!
test07AccountKnowsItsTransactions 

	| account deposit |
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: account.
		
	self assert: 1 equals: account transactions size .
	self assert: (account transactions includes: deposit).
! !

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:04'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:04'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:23:47' prior: 50885466!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:24:25' prior: 50885470!
isComposedBy: anAccount

	self subclassResponsibility ! !
!Account methodsFor: 'balance' stamp: 'HAW 5/25/2019 12:23:40' prior: 50885474!
balance

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:27' prior: 50885478!
addTransactionsTo: aCollectionOfTransactions

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:15' prior: 50885483!
transactions

	self subclassResponsibility ! !
!Account methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:24:04' prior: 50885487!
addedTo: aPortfolio

	self subclassResponsibility ! !

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:04'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:04'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:20' prior: 50885507!
accountsIncludes: anAccount

	^accounts includes: anAccount ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:05:04' prior: 50885512!
accountsIsEmpty
	
	^accounts isEmpty ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:06' prior: 50885516!
accountsSize
	
	^accounts size! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:19:20' prior: 50885520!
add: accountToAdd

	self assertCanAdd: accountToAdd.
		
	accounts add: accountToAdd.
	accountToAdd addedTo: self 
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:17:31' prior: 50885527!
rootParents
	
	| rootParents |
	
	rootParents := Set new.
	self addRootParentsTo: rootParents.
	
	^ rootParents! !
!Portfolio methodsFor: 'initialization' stamp: 'HAW 5/25/2019 12:03:18' prior: 50885534 overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:19:36' prior: 50885540 overrides: 50887463!
balance
	
	^accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:42:55' prior: 50885546 overrides: 50887467!
addTransactionsTo: aCollectionOfTransactions

	accounts do: [ :anAccount | anAccount addTransactionsTo: aCollectionOfTransactions ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:32' prior: 50885554 overrides: 50887473!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsTo: transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:02:59' prior: 50885563 overrides: 50887478!
addedTo: aPortfolio 
	
	parents add: aPortfolio ! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:20:56' prior: 50885567!
anyRootParentIsComposedBy: accountToAdd

	^self rootParents anySatisfy: [ :aParent | aParent isComposedBy: accountToAdd]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:28:29' prior: 50885574 overrides: 50887453!
hasRegistered: aTransaction

	^accounts anySatisfy: [ :anAccount | anAccount hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/29/2019 16:24:54' prior: 50885581 overrides: 50887458!
isComposedBy: anAccount

	^ self = anAccount or: [ accounts anySatisfy: [ :composedAccount | (composedAccount isComposedBy: anAccount) or: [ anAccount isComposedBy: composedAccount ]]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:17:31' prior: 50885590!
addRootParentsTo: rootParents

	parents 
		ifEmpty: [ rootParents add: self ] 
		ifNotEmpty: [ parents do: [ :aParent | aParent addRootParentsTo: rootParents ]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:20:36' prior: 50885598!
assertCanAdd: accountToAdd

	(self anyRootParentIsComposedBy: accountToAdd) ifTrue: [ self signalCanNotAddAccount ].
! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 11:48:34' prior: 50885605!
signalCanNotAddAccount
	
	self error: self class canNotAddAccountErrorMessage! !

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:04'!
Portfolio class
	instanceVariableNames: ''!

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:04'!
Portfolio class
	instanceVariableNames: ''!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'NR 11/9/2020 06:01:26' prior: 50885620!
canNotAddAccountErrorMessage
	
	^'Can not add repeated account to a portfolio!!'! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:18:21' prior: 50885626!
with: anAccount

	^self new 
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:23:59' prior: 50885631!
with: anAccount with: anotherAccount

	^self new 
		add: anAccount;
		add: anotherAccount;
		yourself! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:04'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:04'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:35' overrides: 16896425!
initialize

	super initialize.
	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'NR 11/9/2020 05:56:36' overrides: 50887467!
addTransactionsTo: aCollectionOfTransactions

	aCollectionOfTransactions addAll: transactions copy! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37'!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' overrides: 50887473!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:24:46' overrides: 50887463!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/21/2019 18:55:56' overrides: 50887453!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:54:51' overrides: 50887458!
isComposedBy: anAccount

	^self = anAccount ! !
!ReceptiveAccount methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:03:32' overrides: 50887478!
addedTo: aPortfolio 
	
	! !

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:05'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:05'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' overrides: 16881508!
value 

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:39'!
affectBalance: aBalance

	self subclassResponsibility ! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:05'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:05'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/21/2019 18:54:27'!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:05'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:05'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45'!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' overrides: 50887712!
value

	^ value! !
!Deposit methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:02' overrides: 50887716!
affectBalance: aBalance

	^aBalance + value ! !

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:05'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:05'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:06'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:06'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46'!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' overrides: 50887712!
value

	^ value! !
!Withdraw methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:15' overrides: 50887716!
affectBalance: aBalance

	^aBalance - value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:06'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:06'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:06'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:06'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'no messages' stamp: 'as 11/9/2020 19:34:58'!
test01AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedInTransfer
	! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:06'!
Object subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:44:23' prior: 50885882!
test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 balance equals: -100.
	self assert: account2 balance equals: 100.	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:44:39' prior: 50887851!
test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 balance equals: -100.
	self assert: account2 balance equals: 100.	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:45:04' prior: 50887865!
test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 balance equals: -100.
	self assert: account2 balance equals: 100.	
	
	! !

!methodRemoval: TransferTest #test01AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedInTransfer stamp: 'as 11/14/2020 15:54:06'!
test01AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedInTransfer
	!
!Transfer class methodsFor: 'no messages' stamp: 'as 11/9/2020 19:47:31' prior: 50886074!
anAmountOf: anAmount from: originAccount to: destinationAccount
	self new initializeWith: anAmount from: originAccount to: destinationAccount.! !
!Transfer methodsFor: 'no messages' stamp: 'as 11/9/2020 19:47:45' prior: 50886671!
initializeWith: anAmount from: originAccount to: destinationAccount
	! !

!classDefinition: #NameOfSubclass category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:06'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #NameOfSubclass category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:06'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #NameOfSubclass stamp: 'as 11/14/2020 15:54:06'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:48:46' prior: 50887907!
initializeWith: anAmount from: originAccount to: destinationAccount
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:54:17' prior: 50887934!
initializeWith: anAmount from: originAccount to: destinationAccount

	| deposit extraction |
	deposit := Deposit register: anAmount on: destinationAccount.
	extraction := Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:58:11'!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 hasRegistered: transfer withdraw.
	self assert: account2 hasRegistered: transfer deposit.
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:58:37' prior: 50887940!
initializeWith: anAmount from: originAccount to: destinationAccount

	| deposit withdraw |
	deposit := Deposit register: anAmount on: destinationAccount.
	withdraw := Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:59:24' prior: 50887965!
initializeWith: anAmount from: originAccount to: destinationAccount

	| deposit withdraw |
	deposit := Deposit register: anAmount on: destinationAccount.
	withdraw := Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:00:05' prior: 50887976!
initializeWith: anAmount from: originAccount to: destinationAccount

	Deposit register: anAmount on: destinationAccount.
	Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:06'!
Object subclass: #Transfer
	instanceVariableNames: 'deposit withdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:06'!
Object subclass: #Transfer
	instanceVariableNames: 'deposit withdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:00:39' prior: 50887987!
initializeWith: anAmount from: originAccount to: destinationAccount

	deposit := Deposit register: anAmount on: destinationAccount.
	withdraw := Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:01:13' prior: 50887950!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:02:48' prior: 50888021!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	"self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit)."

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:04:01' prior: 50886063!
checkWithdrawIsRegisteredIn: anAccount
	anAccount hasRegistered: withdraw.
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:04:06' prior: 50888055!
checkWithdrawIsRegisteredIn: anAccount
	^anAccount hasRegistered: withdraw.
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:04:20' prior: 50886068!
checkDepositIsRegisteredIn: anAccount
	^anAccount hasRegistered: deposit.
	! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:05:41' prior: 50887899!
anAmountOf: anAmount from: originAccount to: destinationAccount
	^self new initializeWith: anAmount from: originAccount to: destinationAccount.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:05:57' prior: 50888036!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:08:18'!
test02AccountTransactionsAreRegisteredInAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !

!methodRemoval: TransferTest #test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer stamp: 'as 11/14/2020 15:54:07'!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:09:34'!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:09:42' prior: 50886556!
test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !

!methodRemoval: TransferTest #test02AccountTransactionsAreRegisteredInAccountsInvolvedAfterTransfer stamp: 'as 11/14/2020 15:54:07'!
test02AccountTransactionsAreRegisteredInAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:11:24' prior: 50888127!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	"self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	"
	
	self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer).
	
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'as 11/9/2020 20:12:14'!
hasTransfer: aTransfer
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:14:32' prior: 50888174!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer).
	
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'as 11/9/2020 20:16:19' prior: 50888192!
hasTransfer: aTransfer
	
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'as 11/9/2020 20:18:50' prior: 50888210!
hasTransfer: aTransfer
	transactions anySatisfy: [:transaction | transaction belongsTo: aTransfer].! !
!AccountTransaction methodsFor: 'balance' stamp: 'as 11/9/2020 20:19:12'!
belongsTo: aTransfer! !

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:07'!
Object subclass: #AccountTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'transfer' stamp: 'as 11/9/2020 20:19:57' prior: 50888220!
belongsTo: aTransfer
	^transfer = aTransfer.! !

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:07'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:07'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:07'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:07'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:07'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:07'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:07'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:07'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'transfer' stamp: 'as 11/9/2020 20:29:24' prior: 50888232!
belongsTo: aTransfer
	"^transfer = aTransfer. y esto donde vaaaaa"! !
!AccountTransaction methodsFor: 'transfer' stamp: 'as 11/9/2020 20:56:16' prior: 50888298!
belongsTo: aTransfer
	"^transfer = aTransfer."! !

!methodRemoval: AccountTransaction #belongsTo: stamp: 'as 11/14/2020 15:54:07'!
belongsTo: aTransfer
	"^transfer = aTransfer."!

!classRemoval: #TransferDeposit stamp: 'as 11/14/2020 15:54:08'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:08'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:08'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:08'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:08'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:08'!
TransferTransaction subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:08'!
TransferTransaction subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:08'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:08'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTransaction methodsFor: 'no messages' stamp: 'as 11/9/2020 21:01:09'!
belongsTo: aTransfer
	^transfer = aTransfer.! !

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:08'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: 'deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:08'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: 'deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:11:06' prior: 50888196!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer).

	"self assert: (account1 hasRegister: transfer withdraw).
	self assert: (account2 hasRegister: transfer deposit).	"
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:14:21' prior: 50888405!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	"self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer)."

	"self assert: (account1 hasRegister: transfer withdraw).
	self assert: (account2 hasRegister: transfer deposit).	"
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:14:27' prior: 50888423!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	"self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer)."

	"self assert: (account1 hasRegister: transfer withdraw).
	self assert: (account2 hasRegister: transfer deposit).	"
	
	
	! !

!classRemoval: #TransferWithdraw stamp: 'as 11/14/2020 15:54:08'!
TransferTransaction subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferDeposit stamp: 'as 11/14/2020 15:54:09'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: 'deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferTransaction stamp: 'as 11/14/2020 15:54:09'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:15:36' prior: 50888441!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	"self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer)."

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:16:11' prior: 50886498!
withdraw
	^withdraw.
	
	
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:16:25' prior: 50886502!
deposit
	^deposit.
	
	
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:16:36' prior: 50888480!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:17:27' prior: 50888142!
test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	"self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	"
	
	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:20:24' prior: 50888521!
test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:24:19' prior: 50888541!
test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	
	"transfer -> transaction"! !

!methodRemoval: TransferTest #test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer stamp: 'as 11/14/2020 15:54:09'!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	
	
	!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:30:13' prior: 50886749!
test03AccountTransactionsInTransferAreConnected

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer withdraw transferDepositAssociated).
	self assert: (transfer deposit transferWithdrawAssociated).	
	! !

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:09'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:09'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:09'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:09'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:09'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:09'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:09'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:09'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferWithdraw methodsFor: 'no messages' stamp: 'as 11/9/2020 21:32:35'!
transferDepositAssociated
	^transfer deposit.! !
!TransferDeposit methodsFor: 'no messages' stamp: 'as 11/9/2020 21:32:59'!
transferWithdrawAssociated
	^transfer withdraw.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:33:57' prior: 50888011!
initializeWith: anAmount from: originAccount to: destinationAccount

	deposit := Deposit register: anAmount on: destinationAccount for: self.
	withdraw := Withdraw register: anAmount on: originAccount for: self.
	
	
	
	
	
	
	! !
!AccountTransaction class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:34:29'!
register: aValue on: account for: aTransfer

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !
!AccountTransaction class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:34:48' prior: 50888682!
register: aValue on: account for: aTransfer

	| transaction |
	
	transaction := self for: aValue for: aTransfer.
	account register: transaction.
		
	^ transaction! !
!Deposit class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:35:27'!
for: aValue for: aTransfer

	^ self new initializeFor: aValue for: aTransfer.! !
!Deposit class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:36:23' prior: 50888699!
for: aValue for: aTransfer

	^ TransferDeposit new initializeFor: aValue for: aTransfer.! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:37:12'!
initializeFor: aValue for: aTransfer
	value := aValue.
	! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:37:33' prior: 50888711!
initializeFor: aValue for: aTransfer
	value := aValue.
	transfer := aTransfer.! !
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:37:43'!
initializeFor: aValue for: aTransfer
	value := aValue.
	transfer := aTransfer.! !
!Withdraw class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:38:08'!
for: aValue for: aTransfer

	^ TransferWithdraw new initializeFor: aValue for: aTransfer.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:39:47' prior: 50888588!
test03AccountTransactionsInTransferAreConnected

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:40:24' prior: 50888734!
test03AccountTransactionsInTransferAreConnected

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	
	
	
	"FALTAN CASOS BORDEEEEE"! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:44:40' prior: 50886765!
test04AccountCannotTransferToItself

	| account1 transfer|
	
	"account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	"
	
	
	"FALTAN CASOS BORDEEEEE"! !

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:09'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:09'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:16:26' prior: 50887078!
test01BalanceOfPortfolioWithoutAccountsIsZero

	self assert: 0 equals: Portfolio new balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:17:51' prior: 50887084!
test02BalanceOfPortfolioWithOneAccountIsAccountBalance

	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: account balance equals: portfolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:23:25' prior: 50887095!
test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolioAccount balance + simplePortfolio balance) equals: composedPortofolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:15' prior: 50887117!
test04PortfolioWithoutAccountsHasNoRegisteredTransaction

	self deny: (Portfolio new hasRegistered: (Deposit for: 100))! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:11' prior: 50887124!
test05PortfolioHasRegisteredItsAccountsTransactions

	| account portfolio deposit |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: (portfolio hasRegistered: deposit)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:06' prior: 50887135!
test06PortfolioLooksForRegisteredTransactionsRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolio hasRegistered: simplePortfolioAccountDeposit).
	self assert: (composedPortfolio hasRegistered: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:10' prior: 50887163!
test07PortfolioHasNoTransactionWhenHasNoAccounts

	self assert: Portfolio new transactions isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 6/22/2020 07:31:19' prior: 50887169!
test08PortfolioTransactionsIncludesAllItsAccountsTransactions

	| account portfolio accountDeposit anotherAccount portfolioTransactions anotherAccountWithdraw |
	
	account := ReceptiveAccount new.
	accountDeposit := Deposit register: 100 on: account.
	anotherAccount := ReceptiveAccount new.
	anotherAccountWithdraw := Withdraw register: 100 on: account.
	portfolio := Portfolio with: account.
	
	portfolioTransactions := portfolio transactions.
	
	self assert: 2 equals: portfolioTransactions size.
	self assert: (portfolioTransactions includes: accountDeposit).
	self assert: (portfolioTransactions includes: anotherAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:20' prior: 50887192!
test09PortfolioTransactionsAreCalculatedRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit composedPortfolioTransactions |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	composedPortfolioTransactions := composedPortfolio transactions.
	self assert: 2 equals: composedPortfolioTransactions size.
	self assert: (composedPortfolioTransactions includes: simplePortfolioAccountDeposit).
	self assert: (composedPortfolioTransactions includes: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:24' prior: 50887225!
test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce

	| account portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: portfolio accountsSize.
			self assert: (portfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:28' prior: 50887243!
test11PortfolioCanNotIncludeAccountOfItsPortfolios

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	composedPortfolio := Portfolio with: simplePortfolio.
	
	self 
		should: [ composedPortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: composedPortfolio accountsSize.
			self assert: (composedPortfolio accountsIncludes: simplePortfolio) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:32' prior: 50887264!
test12PortfolioCanNotIncludeItself

	| account simplePortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	
	self 
		should: [ simplePortfolio add: simplePortfolio ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: simplePortfolio accountsSize.
			self assert: (simplePortfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:01:51' prior: 50887282!
test13ComposedPortfolioCanNotHaveParentPortfolioAccount

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio new.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio add: account.
	
	self 
		should: [ simplePortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: simplePortfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:12:16' prior: 50887301!
test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively

	| account leftParentPortfolio leftRootParentPortfolio portfolio rightParentPortfolio rightRootParentPortfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	leftParentPortfolio := Portfolio with: portfolio .
	leftRootParentPortfolio := Portfolio with: leftParentPortfolio.
	leftRootParentPortfolio add: account.
	
	rightParentPortfolio := Portfolio with: portfolio .
	rightRootParentPortfolio := Portfolio with: rightParentPortfolio.
	rightRootParentPortfolio add: account.

	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/29/2019 16:31:18' prior: 50887329!
test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd

	| portfolioToAdd portfolioToModify rootPortfolio sharedAccount |
	
	sharedAccount := ReceptiveAccount new.
	portfolioToModify := Portfolio new.
	rootPortfolio := Portfolio with: sharedAccount with: portfolioToModify.
	portfolioToAdd := Portfolio with: sharedAccount.
	
	self 
		should: [ portfolioToModify add: portfolioToAdd ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolioToModify accountsIsEmpty ]! !

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:10'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:10'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:48' prior: 50887367!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:54' prior: 50887374!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:02' prior: 50887383!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32' prior: 50887393!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46' prior: 50887403!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/9/2020 06:00:12' prior: 50887416!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw account |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/9/2020 06:02:30' prior: 50887428!
test07AccountKnowsItsTransactions 

	| account deposit |
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: account.
		
	self assert: 1 equals: account transactions size .
	self assert: (account transactions includes: deposit).
! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:10'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:10'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:45:04' prior: 50887879!
test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 balance equals: -100.
	self assert: account2 balance equals: 100.	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:24:19' prior: 50888556!
test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	
	"transfer -> transaction"! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:40:24' prior: 50888750!
test03AccountTransactionsInTransferAreConnected

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	
	
	
	"FALTAN CASOS BORDEEEEE"! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:44:40' prior: 50888767!
test04AccountCannotTransferToItself

	| account1 transfer|
	
	"account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	"
	
	
	"FALTAN CASOS BORDEEEEE"! !

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:10'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:10'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:23:47' prior: 50887453!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:24:25' prior: 50887458!
isComposedBy: anAccount

	self subclassResponsibility ! !
!Account methodsFor: 'balance' stamp: 'HAW 5/25/2019 12:23:40' prior: 50887463!
balance

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:27' prior: 50887467!
addTransactionsTo: aCollectionOfTransactions

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:15' prior: 50887473!
transactions

	self subclassResponsibility ! !
!Account methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:24:04' prior: 50887478!
addedTo: aPortfolio

	self subclassResponsibility ! !

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:10'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:10'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:20' prior: 50887498!
accountsIncludes: anAccount

	^accounts includes: anAccount ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:05:04' prior: 50887503!
accountsIsEmpty
	
	^accounts isEmpty ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:06' prior: 50887508!
accountsSize
	
	^accounts size! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:19:20' prior: 50887512!
add: accountToAdd

	self assertCanAdd: accountToAdd.
		
	accounts add: accountToAdd.
	accountToAdd addedTo: self 
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:17:31' prior: 50887519!
rootParents
	
	| rootParents |
	
	rootParents := Set new.
	self addRootParentsTo: rootParents.
	
	^ rootParents! !
!Portfolio methodsFor: 'initialization' stamp: 'HAW 5/25/2019 12:03:18' prior: 50887526 overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:19:36' prior: 50887532 overrides: 50889262!
balance
	
	^accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:42:55' prior: 50887538 overrides: 50889266!
addTransactionsTo: aCollectionOfTransactions

	accounts do: [ :anAccount | anAccount addTransactionsTo: aCollectionOfTransactions ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:32' prior: 50887546 overrides: 50889272!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsTo: transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:02:59' prior: 50887555 overrides: 50889277!
addedTo: aPortfolio 
	
	parents add: aPortfolio ! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:20:56' prior: 50887560!
anyRootParentIsComposedBy: accountToAdd

	^self rootParents anySatisfy: [ :aParent | aParent isComposedBy: accountToAdd]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:28:29' prior: 50887568 overrides: 50889252!
hasRegistered: aTransaction

	^accounts anySatisfy: [ :anAccount | anAccount hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/29/2019 16:24:54' prior: 50887575 overrides: 50889257!
isComposedBy: anAccount

	^ self = anAccount or: [ accounts anySatisfy: [ :composedAccount | (composedAccount isComposedBy: anAccount) or: [ anAccount isComposedBy: composedAccount ]]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:17:31' prior: 50887585!
addRootParentsTo: rootParents

	parents 
		ifEmpty: [ rootParents add: self ] 
		ifNotEmpty: [ parents do: [ :aParent | aParent addRootParentsTo: rootParents ]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:20:36' prior: 50887594!
assertCanAdd: accountToAdd

	(self anyRootParentIsComposedBy: accountToAdd) ifTrue: [ self signalCanNotAddAccount ].
! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 11:48:34' prior: 50887601!
signalCanNotAddAccount
	
	self error: self class canNotAddAccountErrorMessage! !

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:10'!
Portfolio class
	instanceVariableNames: ''!

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:10'!
Portfolio class
	instanceVariableNames: ''!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'NR 11/9/2020 06:01:26' prior: 50887616!
canNotAddAccountErrorMessage
	
	^'Can not add repeated account to a portfolio!!'! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:18:21' prior: 50887622!
with: anAccount

	^self new 
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:23:59' prior: 50887628!
with: anAccount with: anotherAccount

	^self new 
		add: anAccount;
		add: anotherAccount;
		yourself! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:10'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:10'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:35' prior: 50887651 overrides: 16896425!
initialize

	super initialize.
	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'NR 11/9/2020 05:56:36' prior: 50887657 overrides: 50889266!
addTransactionsTo: aCollectionOfTransactions

	aCollectionOfTransactions addAll: transactions copy! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'as 11/9/2020 20:18:50' prior: 50888214!
hasTransfer: aTransfer
	transactions anySatisfy: [:transaction | transaction belongsTo: aTransfer].! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50887663!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50887669 overrides: 50889272!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:24:46' prior: 50887674 overrides: 50889262!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/21/2019 18:55:56' prior: 50887681 overrides: 50889252!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:54:51' prior: 50887687 overrides: 50889257!
isComposedBy: anAccount

	^self = anAccount ! !
!ReceptiveAccount methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:03:32' prior: 50887692 overrides: 50889277!
addedTo: aPortfolio 
	
	! !

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:11'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:11'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' prior: 50887712 overrides: 16881508!
value 

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:39' prior: 50887716!
affectBalance: aBalance

	self subclassResponsibility ! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:11'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:11'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/21/2019 18:54:27' prior: 50887731!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !
!AccountTransaction class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:34:48' prior: 50888691!
register: aValue on: account for: aTransfer

	| transaction |
	
	transaction := self for: aValue for: aTransfer.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:11'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:11'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45' prior: 50887753!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50887758 overrides: 50889522!
value

	^ value! !
!Deposit methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:02' prior: 50887762 overrides: 50889527!
affectBalance: aBalance

	^aBalance + value ! !

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:11'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:11'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50887776!
for: aValue

	^ self new initializeFor: aValue ! !
!Deposit class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:36:23' prior: 50888705!
for: aValue for: aTransfer

	^ TransferDeposit new initializeFor: aValue for: aTransfer.! !

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:11'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:11'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:37:33' prior: 50888716!
initializeFor: aValue for: aTransfer
	value := aValue.
	transfer := aTransfer.! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:32:59' prior: 50888667!
transferWithdrawAssociated
	^transfer withdraw.! !

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:11'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:11'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46' prior: 50887796!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50887801 overrides: 50889522!
value

	^ value! !
!Withdraw methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:15' prior: 50887805 overrides: 50889527!
affectBalance: aBalance

	^aBalance - value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:11'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:11'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50887819!
for: aValue

	^ self new initializeFor: aValue ! !
!Withdraw class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:38:08' prior: 50888728!
for: aValue for: aTransfer

	^ TransferWithdraw new initializeFor: aValue for: aTransfer.! !

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:11'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:11'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:37:43' prior: 50888722!
initializeFor: aValue for: aTransfer
	value := aValue.
	transfer := aTransfer.! !
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:32:35' prior: 50888663!
transferDepositAssociated
	^transfer deposit.! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:11'!
Object subclass: #Transfer
	instanceVariableNames: 'deposit withdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:11'!
Object subclass: #Transfer
	instanceVariableNames: 'deposit withdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:04:20' prior: 50888067!
checkDepositIsRegisteredIn: anAccount
	^anAccount hasRegistered: deposit.
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:04:06' prior: 50888061!
checkWithdrawIsRegisteredIn: anAccount
	^anAccount hasRegistered: withdraw.
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:16:25' prior: 50888502!
deposit
	^deposit.
	
	
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:33:57' prior: 50888672!
initializeWith: anAmount from: originAccount to: destinationAccount

	deposit := Deposit register: anAmount on: destinationAccount for: self.
	withdraw := Withdraw register: anAmount on: originAccount for: self.
	
	
	
	
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:16:11' prior: 50888498!
withdraw
	^withdraw.
	
	
	
	
	! !

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:12'!
Transfer class
	instanceVariableNames: ''!

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:12'!
Transfer class
	instanceVariableNames: ''!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:05:41' prior: 50888073!
anAmountOf: anAmount from: originAccount to: destinationAccount
	^self new initializeWith: anAmount from: originAccount to: destinationAccount.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:17:21' prior: 50889205!
test03AccountTransactionsInTransferAreConnected

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	
	
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:18:29' prior: 50889222!
test04AccountCannotTransferToItself

	| account1 transfer|
	
	account1 := ReceptiveAccount new.	
	transfer := Transfer anAmountOf: 100 from: account1 to: account1.

	"self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	"
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:22:17' prior: 50889792!
test04AccountCannotTransferToItself

	| account1 |
	
	account1 := ReceptiveAccount new.	
	
	"self 
		should: [ Transfer anAmountOf: 100 from: account1 to: account1. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert:  equals: anError messageText. ]"

	! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:22:52'!
invalidTransferErrorMessage
	^'transfer is invalid'.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:23:30' prior: 50889806!
test04AccountCannotTransferToItself

	| account1 |
	
	account1 := ReceptiveAccount new.	
	
	self 
		should: [ Transfer anAmountOf: 100 from: account1 to: account1. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: Transfer invalidTransferErrorMessage equals: anError messageText. ]

	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:24:09' prior: 50889823!
test04AccountCannotTransferToItself

	| account1 |
	
	account1 := ReceptiveAccount new.	
	
	self 
		should: [ Transfer anAmountOf: 100 from: account1 to: account1. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: Transfer invalidTransferErrorMessage equals: anError messageText. ]

	! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:25:37' prior: 50889768!
anAmountOf: anAmount from: originAccount to: destinationAccount
	
	originAccount = destinationAccount ifTrue: [^ Error signal: self class invalidTransferErrorMessage ].
	
	^self new initializeWith: anAmount from: originAccount to: destinationAccount.! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:25:52' prior: 50889849!
anAmountOf: anAmount from: originAccount to: destinationAccount
	
	originAccount = destinationAccount ifTrue: [^ Error signal: self invalidTransferErrorMessage ].
	
	^self new initializeWith: anAmount from: originAccount to: destinationAccount.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:26:43'!
test05AccountCannotTransferNegativeAmount

	| account1 account2|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	self 
		should: [ Transfer anAmountOf: -100 from: account1 to: account2. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: Transfer invalidTransferErrorMessage equals: anError messageText. ]

	! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:27:50' prior: 50889861!
anAmountOf: anAmount from: originAccount to: destinationAccount
	
	originAccount = destinationAccount ifTrue: [^ Error signal: self invalidTransferErrorMessage ].
	anAmount <= 0 ifTrue: [^ Error signal: self invalidTransferErrorMessage ].	
	
	^self new initializeWith: anAmount from: originAccount to: destinationAccount.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:28:27'!
test05AccountCannotTransferInvalidAmount

	| account1 account2|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	self 
		should: [ Transfer anAmountOf: -100 from: account1 to: account2. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: Transfer invalidTransferErrorMessage equals: anError messageText. ]

	! !

!methodRemoval: TransferTest #test05AccountCannotTransferNegativeAmount stamp: 'as 11/14/2020 15:54:12'!
test05AccountCannotTransferNegativeAmount

	| account1 account2|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	self 
		should: [ Transfer anAmountOf: -100 from: account1 to: account2. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: Transfer invalidTransferErrorMessage equals: anError messageText. ]

	!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:32:42'!
validateTransferCollaboratorsIn: aBlockToValidate
	aBlockToValidate ifTrue: [^ Error signal: self invalidTransferErrorMessage ].	! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:33:21' prior: 50889887!
anAmountOf: anAmount from: originAccount to: destinationAccount
	
	originAccount = destinationAccount ifTrue: [^ Error signal: self invalidTransferErrorMessage ].
	[anAmount <= 0] ifTrue: [^ Error signal: self invalidTransferErrorMessage ].	
	
	
	
	^self new initializeWith: anAmount from: originAccount to: destinationAccount.! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:33:33' prior: 50889936!
anAmountOf: anAmount from: originAccount to: destinationAccount
	
	originAccount = destinationAccount ifTrue: [^ Error signal: self invalidTransferErrorMessage ].
	[anAmount <= 0] value ifTrue: [^ Error signal: self invalidTransferErrorMessage ].	
	
	
	
	^self new initializeWith: anAmount from: originAccount to: destinationAccount.! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:33:46' prior: 50889928!
validateTransferCollaboratorsIn: aBlockToValidate
	aBlockToValidate value ifTrue: [^ Error signal: self invalidTransferErrorMessage ].	! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:34:39' prior: 50889950!
anAmountOf: anAmount from: originAccount to: destinationAccount
	
	"originAccount = destinationAccount ifTrue: [^ Error signal: self invalidTransferErrorMessage ].
	[anAmount <= 0] value ifTrue: [^ Error signal: self invalidTransferErrorMessage ].	"
	
	self validateTransferCollaboratorsIn: [originAccount = destinationAccount].
	self validateTransferCollaboratorsIn: [anAmount <= 0].
	
	^self new initializeWith: anAmount from: originAccount to: destinationAccount.! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:34:52' prior: 50889972!
anAmountOf: anAmount from: originAccount to: destinationAccount
	
	self validateTransferCollaboratorsIn: [originAccount = destinationAccount].
	self validateTransferCollaboratorsIn: [anAmount <= 0].
	
	^self new initializeWith: anAmount from: originAccount to: destinationAccount.! !

!classDefinition: #AccountSummaryTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:12'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:12'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryTest methodsFor: 'no messages' stamp: 'as 11/12/2020 21:37:12'!
test01AccountSummaryForAnEmptyAccount
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:37:43' prior: 50890017!
test01AccountSummaryForAnEmptyAccount
	
	| account1 |
	account1 := ReceptiveAccount new.	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:38:50' prior: 50890022!
test01AccountSummaryForAnEmptyAccount
	
	| account1 |
	account1 := ReceptiveAccount new.	
	
	self assert: account1 accountSummary equals: OrderedCollection new.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:39:45' prior: 50890029!
test01AccountSummaryForAnEmptyAccount
	
	| account1 |
	account1 := ReceptiveAccount new.	
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Balance = 0').! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'as 11/12/2020 21:40:31'!
accountSummary
	^OrderedCollection with: 'Balance = 0'.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:41:01'!
test02AccountSummaryForAnAccountWithADeposit
	
	| account1 |
	account1 := ReceptiveAccount new.	
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Balance = 0').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:42:00' prior: 50890051!
test02AccountSummaryForAnAccountWithADeposit
	
	| account1 |
	account1 := ReceptiveAccount new.	
	Deposit register: 100 on: account1.
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 0').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:42:34' prior: 50890061!
test02AccountSummaryForAnAccountWithADeposit
	
	| account1 |
	account1 := ReceptiveAccount new.	
	Deposit register: 100 on: account1.
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100').! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:42:56' prior: 50890046!
accountSummary
	"^OrderedCollection with: 'Balance = 0'."
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:44:11' prior: 50890085!
accountSummary
	"^OrderedCollection with: 'Balance = 0'."
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	^OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100'.
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:44:53'!
test03AccountSummaryForAnAccountWithTwoDeposit
	
	| account1 |
	account1 := ReceptiveAccount new.	
	Deposit register: 100 on: account1.
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:45:12' prior: 50890101!
test03AccountSummaryForAnAccountWithTwoDeposit
	
	| account1 |
	account1 := ReceptiveAccount new.	
	Deposit register: 100 on: account1.
	Deposit register: 100 on: account1.	
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Dep�sito por 100.' with: 'Balance = 200').! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:47:54' prior: 50890091!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [summary addLast: 'Dep�sito por 100.'].
	summary addLast: 'Balance = ', transactions size * 100 asString.
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:48:12' prior: 50890127!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [summary addLast: 'Dep�sito por 100.'].
	summary addLast: 'Balance = ', transactions size * 100 asString.
	^summary.
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:48:56' prior: 50890139!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [summary addLast: 'Dep�sito por 100.'].
	summary addLast: 'Balance = ', (transactions size * 100) asString.
	^summary.
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:49:45' prior: 50890151!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [summary addLast: 'Dep�sito por 100.'].
	summary addLast: ('Balance = ', (transactions size * 100) asString).
	^summary.
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:52:12' prior: 50890163!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [summary add: 'Dep�sito por 100.'].
	summary add: ('Balance = ', (transactions size * 100) asString).
	^summary.
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:52:51' prior: 50890175!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [:aTransaction | summary add: 'Dep�sito por 100.'].
	summary add: ('Balance = ', (transactions size * 100) asString).
	^summary.
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:54:04'!
test04AccountSummaryForAnAccountWithWithdraw
	
	| account1 |
	account1 := ReceptiveAccount new.	
	Withdraw register: 100 on: account1.	
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Extracci�n por 100.' with: 'Balance = -100').! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:56:41' prior: 50890187!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [:aTransaction | 
					(aTransaction isKindOf: Deposit) ifTrue: [summary add: 'Dep�sito por 100.'].
 					(aTransaction isKindOf: Withdraw ) ifTrue: [summary add: 'Extracci�n por 100.']				
		].
	summary add: ('Balance = ',  self balance asString).
	^summary.
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:58:14'!
test05AccountSummaryForAnAccountWithTransferWithdraw
	
	| account1 account2|
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	TransferWithdraw register: 100 on: account1.	
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Salida por transferencia de 100.' with: 'Balance = -100').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:59:55' prior: 50890227!
test05AccountSummaryForAnAccountWithTransferWithdraw
	
	| account1 account2|
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Salida por transferencia de 100.' with: 'Balance = -100').! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 22:00:53' prior: 50890211!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [:aTransaction | 
					(aTransaction isKindOf: Deposit) ifTrue: [summary add: 'Dep�sito por 100.'].
 					(aTransaction isKindOf: Withdraw ) ifTrue: [summary add: 'Extracci�n por 100.']	.
					(aTransaction isKindOf: TransferWithdraw ) ifTrue: [summary add: 'Salida por transferencia de 100.']			.		
		].
	summary add: ('Balance = ',  self balance asString).
	^summary.
	! !

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:13'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:13'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:44' prior: 50889087!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:48' prior: 50889095!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:52' prior: 50889104!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32' prior: 50889114!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46' prior: 50889124!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:14:15' prior: 50889137!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw account |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:14:01' prior: 50889149!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 50 on: account1.
		
	self assert: 1 equals: account1 transactions size.
	self assert: (account1 transactions includes: deposit1).
! !

!classDefinition: #AccountTransaction category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:13'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #AccountTransaction category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:13'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' prior: 50889522 overrides: 16881508!
value 

	self subclassResponsibility ! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:13'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:13'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/17/2019 03:22:00' prior: 50889543!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:13'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Deposit category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:13'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45' prior: 50889575!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50889580 overrides: 50890381!
value

	^ value! !

!classDefinition: 'Deposit class' category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:13'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:13'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50889598!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Withdraw category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:13'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Withdraw category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:13'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46' prior: 50889651!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50889656 overrides: 50890381!
value

	^ value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:13'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:13'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50889674!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:13'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:13'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'NR 10/17/2019 15:06:56' prior: 50889451 overrides: 16896425!
initialize

	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50889471!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50889477!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/23/2019 15:19:32' prior: 50889482!
balance

	^transactions sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/17/2019 03:28:43' prior: 50889490!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !

!classRemoval: #ReceptiveAccount stamp: 'as 11/14/2020 15:54:14'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'as 11/14/2020 15:54:14'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'as 11/14/2020 15:54:14'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'as 11/14/2020 15:54:14'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'as 11/14/2020 15:54:15'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:15'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:15'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:16:26' prior: 50888798!
test01BalanceOfPortfolioWithoutAccountsIsZero

	self assert: 0 equals: Portfolio new balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:17:51' prior: 50888804!
test02BalanceOfPortfolioWithOneAccountIsAccountBalance

	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: account balance equals: portfolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:23:25' prior: 50888815!
test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolioAccount balance + simplePortfolio balance) equals: composedPortofolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:15' prior: 50888837!
test04PortfolioWithoutAccountsHasNoRegisteredTransaction

	self deny: (Portfolio new hasRegistered: (Deposit for: 100))! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:11' prior: 50888844!
test05PortfolioHasRegisteredItsAccountsTransactions

	| account portfolio deposit |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: (portfolio hasRegistered: deposit)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:06' prior: 50888855!
test06PortfolioLooksForRegisteredTransactionsRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolio hasRegistered: simplePortfolioAccountDeposit).
	self assert: (composedPortfolio hasRegistered: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:10' prior: 50888883!
test07PortfolioHasNoTransactionWhenHasNoAccounts

	self assert: Portfolio new transactions isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 6/22/2020 07:31:19' prior: 50888889!
test08PortfolioTransactionsIncludesAllItsAccountsTransactions

	| account portfolio accountDeposit anotherAccount portfolioTransactions anotherAccountWithdraw |
	
	account := ReceptiveAccount new.
	accountDeposit := Deposit register: 100 on: account.
	anotherAccount := ReceptiveAccount new.
	anotherAccountWithdraw := Withdraw register: 100 on: account.
	portfolio := Portfolio with: account.
	
	portfolioTransactions := portfolio transactions.
	
	self assert: 2 equals: portfolioTransactions size.
	self assert: (portfolioTransactions includes: accountDeposit).
	self assert: (portfolioTransactions includes: anotherAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:20' prior: 50888912!
test09PortfolioTransactionsAreCalculatedRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit composedPortfolioTransactions |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	composedPortfolioTransactions := composedPortfolio transactions.
	self assert: 2 equals: composedPortfolioTransactions size.
	self assert: (composedPortfolioTransactions includes: simplePortfolioAccountDeposit).
	self assert: (composedPortfolioTransactions includes: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:24' prior: 50888945!
test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce

	| account portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: portfolio accountsSize.
			self assert: (portfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:28' prior: 50888963!
test11PortfolioCanNotIncludeAccountOfItsPortfolios

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	composedPortfolio := Portfolio with: simplePortfolio.
	
	self 
		should: [ composedPortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: composedPortfolio accountsSize.
			self assert: (composedPortfolio accountsIncludes: simplePortfolio) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:32' prior: 50888984!
test12PortfolioCanNotIncludeItself

	| account simplePortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	
	self 
		should: [ simplePortfolio add: simplePortfolio ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: simplePortfolio accountsSize.
			self assert: (simplePortfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:01:51' prior: 50889002!
test13ComposedPortfolioCanNotHaveParentPortfolioAccount

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio new.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio add: account.
	
	self 
		should: [ simplePortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: simplePortfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:12:16' prior: 50889021!
test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively

	| account leftParentPortfolio leftRootParentPortfolio portfolio rightParentPortfolio rightRootParentPortfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	leftParentPortfolio := Portfolio with: portfolio .
	leftRootParentPortfolio := Portfolio with: leftParentPortfolio.
	leftRootParentPortfolio add: account.
	
	rightParentPortfolio := Portfolio with: portfolio .
	rightRootParentPortfolio := Portfolio with: rightParentPortfolio.
	rightRootParentPortfolio add: account.

	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/29/2019 16:31:18' prior: 50889049!
test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd

	| portfolioToAdd portfolioToModify rootPortfolio sharedAccount |
	
	sharedAccount := ReceptiveAccount new.
	portfolioToModify := Portfolio new.
	rootPortfolio := Portfolio with: sharedAccount with: portfolioToModify.
	portfolioToAdd := Portfolio with: sharedAccount.
	
	self 
		should: [ portfolioToModify add: portfolioToAdd ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolioToModify accountsIsEmpty ]! !

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:15'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:15'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:48'!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:54'!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:02'!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32'!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46'!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/9/2020 06:00:12'!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw account |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/9/2020 06:02:30'!
test07AccountKnowsItsTransactions 

	| account deposit |
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: account.
		
	self assert: 1 equals: account transactions size .
	self assert: (account transactions includes: deposit).
! !

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:15'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:15'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:23:47' prior: 50889252!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:24:25' prior: 50889257!
isComposedBy: anAccount

	self subclassResponsibility ! !
!Account methodsFor: 'balance' stamp: 'HAW 5/25/2019 12:23:40' prior: 50889262!
balance

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:27' prior: 50889266!
addTransactionsTo: aCollectionOfTransactions

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:15' prior: 50889272!
transactions

	self subclassResponsibility ! !
!Account methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:24:04' prior: 50889277!
addedTo: aPortfolio

	self subclassResponsibility ! !

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:16'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:16'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:20' prior: 50889297!
accountsIncludes: anAccount

	^accounts includes: anAccount ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:05:04' prior: 50889302!
accountsIsEmpty
	
	^accounts isEmpty ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:06' prior: 50889307!
accountsSize
	
	^accounts size! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:19:20' prior: 50889311!
add: accountToAdd

	self assertCanAdd: accountToAdd.
		
	accounts add: accountToAdd.
	accountToAdd addedTo: self 
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:17:31' prior: 50889318!
rootParents
	
	| rootParents |
	
	rootParents := Set new.
	self addRootParentsTo: rootParents.
	
	^ rootParents! !
!Portfolio methodsFor: 'initialization' stamp: 'HAW 5/25/2019 12:03:18' prior: 50889325 overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:19:36' prior: 50889331 overrides: 50890957!
balance
	
	^accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:42:55' prior: 50889337 overrides: 50890961!
addTransactionsTo: aCollectionOfTransactions

	accounts do: [ :anAccount | anAccount addTransactionsTo: aCollectionOfTransactions ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:32' prior: 50889345 overrides: 50890967!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsTo: transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:02:59' prior: 50889354 overrides: 50890972!
addedTo: aPortfolio 
	
	parents add: aPortfolio ! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:20:56' prior: 50889359!
anyRootParentIsComposedBy: accountToAdd

	^self rootParents anySatisfy: [ :aParent | aParent isComposedBy: accountToAdd]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:28:29' prior: 50889367 overrides: 50890947!
hasRegistered: aTransaction

	^accounts anySatisfy: [ :anAccount | anAccount hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/29/2019 16:24:54' prior: 50889374 overrides: 50890952!
isComposedBy: anAccount

	^ self = anAccount or: [ accounts anySatisfy: [ :composedAccount | (composedAccount isComposedBy: anAccount) or: [ anAccount isComposedBy: composedAccount ]]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:17:31' prior: 50889384!
addRootParentsTo: rootParents

	parents 
		ifEmpty: [ rootParents add: self ] 
		ifNotEmpty: [ parents do: [ :aParent | aParent addRootParentsTo: rootParents ]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:20:36' prior: 50889393!
assertCanAdd: accountToAdd

	(self anyRootParentIsComposedBy: accountToAdd) ifTrue: [ self signalCanNotAddAccount ].
! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 11:48:34' prior: 50889400!
signalCanNotAddAccount
	
	self error: self class canNotAddAccountErrorMessage! !

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:16'!
Portfolio class
	instanceVariableNames: ''!

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:16'!
Portfolio class
	instanceVariableNames: ''!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'NR 11/9/2020 06:01:26' prior: 50889415!
canNotAddAccountErrorMessage
	
	^'Can not add repeated account to a portfolio!!'! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:18:21' prior: 50889421!
with: anAccount

	^self new 
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:23:59' prior: 50889427!
with: anAccount with: anotherAccount

	^self new 
		add: anAccount;
		add: anotherAccount;
		yourself! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:16'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:16'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:35' overrides: 16896425!
initialize

	super initialize.
	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'NR 11/9/2020 05:56:36' overrides: 50890961!
addTransactionsTo: aCollectionOfTransactions

	aCollectionOfTransactions addAll: transactions copy! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37'!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' overrides: 50890967!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:24:46' overrides: 50890957!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/21/2019 18:55:56' overrides: 50890947!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:54:51' overrides: 50890952!
isComposedBy: anAccount

	^self = anAccount ! !
!ReceptiveAccount methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:03:32' overrides: 50890972!
addedTo: aPortfolio 
	
	! !

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:17'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:17'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' overrides: 16881508!
value 

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:39'!
affectBalance: aBalance

	self subclassResponsibility ! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:17'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:17'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/21/2019 18:54:27'!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:17'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:17'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45'!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' overrides: 50891206!
value

	^ value! !
!Deposit methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:02' overrides: 50891210!
affectBalance: aBalance

	^aBalance + value ! !

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:17'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:17'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:17'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:17'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46'!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' overrides: 50891206!
value

	^ value! !
!Withdraw methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:15' overrides: 50891210!
affectBalance: aBalance

	^aBalance - value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:17'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:17'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:17'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:17'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'no messages' stamp: 'as 11/9/2020 19:34:58'!
test01AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedInTransfer
	! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:17'!
Object subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:44:23' prior: 50889175!
test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 balance equals: -100.
	self assert: account2 balance equals: 100.	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:44:39' prior: 50891345!
test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 balance equals: -100.
	self assert: account2 balance equals: 100.	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:45:04' prior: 50891359!
test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 balance equals: -100.
	self assert: account2 balance equals: 100.	
	
	! !

!methodRemoval: TransferTest #test01AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedInTransfer stamp: 'as 11/14/2020 15:54:18'!
test01AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedInTransfer
	!
!Transfer class methodsFor: 'no messages' stamp: 'as 11/9/2020 19:47:31' prior: 50889990!
anAmountOf: anAmount from: originAccount to: destinationAccount
	self new initializeWith: anAmount from: originAccount to: destinationAccount.! !
!Transfer methodsFor: 'no messages' stamp: 'as 11/9/2020 19:47:45' prior: 50889743!
initializeWith: anAmount from: originAccount to: destinationAccount
	! !

!classDefinition: #NameOfSubclass category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:18'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #NameOfSubclass category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:18'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #NameOfSubclass stamp: 'as 11/14/2020 15:54:18'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:48:46' prior: 50891401!
initializeWith: anAmount from: originAccount to: destinationAccount
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:54:17' prior: 50891428!
initializeWith: anAmount from: originAccount to: destinationAccount

	| deposit extraction |
	deposit := Deposit register: anAmount on: destinationAccount.
	extraction := Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:58:11'!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 hasRegistered: transfer withdraw.
	self assert: account2 hasRegistered: transfer deposit.
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:58:37' prior: 50891434!
initializeWith: anAmount from: originAccount to: destinationAccount

	| deposit withdraw |
	deposit := Deposit register: anAmount on: destinationAccount.
	withdraw := Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:59:24' prior: 50891459!
initializeWith: anAmount from: originAccount to: destinationAccount

	| deposit withdraw |
	deposit := Deposit register: anAmount on: destinationAccount.
	withdraw := Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:00:05' prior: 50891470!
initializeWith: anAmount from: originAccount to: destinationAccount

	Deposit register: anAmount on: destinationAccount.
	Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:18'!
Object subclass: #Transfer
	instanceVariableNames: 'deposit withdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:18'!
Object subclass: #Transfer
	instanceVariableNames: 'deposit withdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:00:39' prior: 50891481!
initializeWith: anAmount from: originAccount to: destinationAccount

	deposit := Deposit register: anAmount on: destinationAccount.
	withdraw := Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:01:13' prior: 50891444!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:02:48' prior: 50891515!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	"self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit)."

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:04:01' prior: 50889733!
checkWithdrawIsRegisteredIn: anAccount
	anAccount hasRegistered: withdraw.
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:04:06' prior: 50891549!
checkWithdrawIsRegisteredIn: anAccount
	^anAccount hasRegistered: withdraw.
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:04:20' prior: 50889727!
checkDepositIsRegisteredIn: anAccount
	^anAccount hasRegistered: deposit.
	! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:05:41' prior: 50891393!
anAmountOf: anAmount from: originAccount to: destinationAccount
	^self new initializeWith: anAmount from: originAccount to: destinationAccount.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:05:57' prior: 50891530!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:08:18'!
test02AccountTransactionsAreRegisteredInAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !

!methodRemoval: TransferTest #test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer stamp: 'as 11/14/2020 15:54:18'!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:09:34'!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:09:42' prior: 50889189!
test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !

!methodRemoval: TransferTest #test02AccountTransactionsAreRegisteredInAccountsInvolvedAfterTransfer stamp: 'as 11/14/2020 15:54:18'!
test02AccountTransactionsAreRegisteredInAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:11:24' prior: 50891621!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	"self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	"
	
	self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer).
	
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'as 11/9/2020 20:12:14'!
hasTransfer: aTransfer
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:14:32' prior: 50891668!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer).
	
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'as 11/9/2020 20:16:19' prior: 50891686!
hasTransfer: aTransfer
	
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'as 11/9/2020 20:18:50' prior: 50891704!
hasTransfer: aTransfer
	transactions anySatisfy: [:transaction | transaction belongsTo: aTransfer].! !
!AccountTransaction methodsFor: 'balance' stamp: 'as 11/9/2020 20:19:12'!
belongsTo: aTransfer! !

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:19'!
Object subclass: #AccountTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'transfer' stamp: 'as 11/9/2020 20:19:57' prior: 50891714!
belongsTo: aTransfer
	^transfer = aTransfer.! !

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:19'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:19'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:19'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:19'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:19'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:19'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:19'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:19'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'transfer' stamp: 'as 11/9/2020 20:29:24' prior: 50891726!
belongsTo: aTransfer
	"^transfer = aTransfer. y esto donde vaaaaa"! !
!AccountTransaction methodsFor: 'transfer' stamp: 'as 11/9/2020 20:56:16' prior: 50891792!
belongsTo: aTransfer
	"^transfer = aTransfer."! !

!methodRemoval: AccountTransaction #belongsTo: stamp: 'as 11/14/2020 15:54:19'!
belongsTo: aTransfer
	"^transfer = aTransfer."!

!classRemoval: #TransferDeposit stamp: 'as 11/14/2020 15:54:19'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:19'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:19'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:19'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:19'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:19'!
TransferTransaction subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:19'!
TransferTransaction subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:19'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:19'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTransaction methodsFor: 'no messages' stamp: 'as 11/9/2020 21:01:09'!
belongsTo: aTransfer
	^transfer = aTransfer.! !

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:19'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: 'deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:19'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: 'deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:11:06' prior: 50891690!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer).

	"self assert: (account1 hasRegister: transfer withdraw).
	self assert: (account2 hasRegister: transfer deposit).	"
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:14:21' prior: 50891899!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	"self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer)."

	"self assert: (account1 hasRegister: transfer withdraw).
	self assert: (account2 hasRegister: transfer deposit).	"
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:14:27' prior: 50891917!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	"self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer)."

	"self assert: (account1 hasRegister: transfer withdraw).
	self assert: (account2 hasRegister: transfer deposit).	"
	
	
	! !

!classRemoval: #TransferWithdraw stamp: 'as 11/14/2020 15:54:20'!
TransferTransaction subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferDeposit stamp: 'as 11/14/2020 15:54:20'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: 'deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferTransaction stamp: 'as 11/14/2020 15:54:20'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:15:36' prior: 50891935!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	"self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer)."

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:16:11' prior: 50889754!
withdraw
	^withdraw.
	
	
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:16:25' prior: 50889739!
deposit
	^deposit.
	
	
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:16:36' prior: 50891974!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:17:27' prior: 50891636!
test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	"self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	"
	
	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:20:24' prior: 50892015!
test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:24:19' prior: 50892035!
test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	
	"transfer -> transaction"! !

!methodRemoval: TransferTest #test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer stamp: 'as 11/14/2020 15:54:20'!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	
	
	!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:30:13' prior: 50889776!
test03AccountTransactionsInTransferAreConnected

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer withdraw transferDepositAssociated).
	self assert: (transfer deposit transferWithdrawAssociated).	
	! !

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:20'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:20'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:20'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:21'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:21'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:21'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:21'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:21'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferWithdraw methodsFor: 'no messages' stamp: 'as 11/9/2020 21:32:35'!
transferDepositAssociated
	^transfer deposit.! !
!TransferDeposit methodsFor: 'no messages' stamp: 'as 11/9/2020 21:32:59'!
transferWithdrawAssociated
	^transfer withdraw.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:33:57' prior: 50891505!
initializeWith: anAmount from: originAccount to: destinationAccount

	deposit := Deposit register: anAmount on: destinationAccount for: self.
	withdraw := Withdraw register: anAmount on: originAccount for: self.
	
	
	
	
	
	
	! !
!AccountTransaction class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:34:29'!
register: aValue on: account for: aTransfer

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !
!AccountTransaction class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:34:48' prior: 50892176!
register: aValue on: account for: aTransfer

	| transaction |
	
	transaction := self for: aValue for: aTransfer.
	account register: transaction.
		
	^ transaction! !
!Deposit class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:35:27'!
for: aValue for: aTransfer

	^ self new initializeFor: aValue for: aTransfer.! !
!Deposit class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:36:23' prior: 50892193!
for: aValue for: aTransfer

	^ TransferDeposit new initializeFor: aValue for: aTransfer.! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:37:12'!
initializeFor: aValue for: aTransfer
	value := aValue.
	! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:37:33' prior: 50892205!
initializeFor: aValue for: aTransfer
	value := aValue.
	transfer := aTransfer.! !
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:37:43'!
initializeFor: aValue for: aTransfer
	value := aValue.
	transfer := aTransfer.! !
!Withdraw class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:38:08'!
for: aValue for: aTransfer

	^ TransferWithdraw new initializeFor: aValue for: aTransfer.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:39:47' prior: 50892082!
test03AccountTransactionsInTransferAreConnected

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:40:24' prior: 50892228!
test03AccountTransactionsInTransferAreConnected

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	
	
	
	"FALTAN CASOS BORDEEEEE"! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:44:40' prior: 50889836!
test04AccountCannotTransferToItself

	| account1 transfer|
	
	"account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	"
	
	
	"FALTAN CASOS BORDEEEEE"! !

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:21'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:21'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:44' prior: 50890861!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:48' prior: 50890868!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:52' prior: 50890877!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32' prior: 50890887!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46' prior: 50890897!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:14:15' prior: 50890910!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw account |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:14:01' prior: 50890922!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 50 on: account1.
		
	self assert: 1 equals: account1 transactions size.
	self assert: (account1 transactions includes: deposit1).
! !

!classDefinition: #AccountTransaction category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:21'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #AccountTransaction category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:21'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' prior: 50891206 overrides: 16881508!
value 

	self subclassResponsibility ! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:21'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:21'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/17/2019 03:22:00' prior: 50891225!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:21'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Deposit category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:21'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45' prior: 50891247!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50891252 overrides: 50892383!
value

	^ value! !

!classDefinition: 'Deposit class' category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:21'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:21'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50891270!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Withdraw category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:21'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Withdraw category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:21'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46' prior: 50891290!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50891295 overrides: 50892383!
value

	^ value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:21'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:21'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50891313!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:22'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'as 11/14/2020 15:54:22'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'NR 10/17/2019 15:06:56' prior: 50891145 overrides: 16896425!
initialize

	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50891157!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50891163!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/23/2019 15:19:32' prior: 50891168!
balance

	^transactions sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/17/2019 03:28:43' prior: 50891175!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !

!classRemoval: #ReceptiveAccount stamp: 'as 11/14/2020 15:54:22'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'as 11/14/2020 15:54:22'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'as 11/14/2020 15:54:22'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'as 11/14/2020 15:54:23'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'as 11/14/2020 15:54:23'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:23'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:23'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:16:26' prior: 50890572!
test01BalanceOfPortfolioWithoutAccountsIsZero

	self assert: 0 equals: Portfolio new balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:17:51' prior: 50890578!
test02BalanceOfPortfolioWithOneAccountIsAccountBalance

	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: account balance equals: portfolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:23:25' prior: 50890589!
test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolioAccount balance + simplePortfolio balance) equals: composedPortofolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:15' prior: 50890611!
test04PortfolioWithoutAccountsHasNoRegisteredTransaction

	self deny: (Portfolio new hasRegistered: (Deposit for: 100))! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:11' prior: 50890618!
test05PortfolioHasRegisteredItsAccountsTransactions

	| account portfolio deposit |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: (portfolio hasRegistered: deposit)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:06' prior: 50890629!
test06PortfolioLooksForRegisteredTransactionsRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolio hasRegistered: simplePortfolioAccountDeposit).
	self assert: (composedPortfolio hasRegistered: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:10' prior: 50890657!
test07PortfolioHasNoTransactionWhenHasNoAccounts

	self assert: Portfolio new transactions isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 6/22/2020 07:31:19' prior: 50890663!
test08PortfolioTransactionsIncludesAllItsAccountsTransactions

	| account portfolio accountDeposit anotherAccount portfolioTransactions anotherAccountWithdraw |
	
	account := ReceptiveAccount new.
	accountDeposit := Deposit register: 100 on: account.
	anotherAccount := ReceptiveAccount new.
	anotherAccountWithdraw := Withdraw register: 100 on: account.
	portfolio := Portfolio with: account.
	
	portfolioTransactions := portfolio transactions.
	
	self assert: 2 equals: portfolioTransactions size.
	self assert: (portfolioTransactions includes: accountDeposit).
	self assert: (portfolioTransactions includes: anotherAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:20' prior: 50890686!
test09PortfolioTransactionsAreCalculatedRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit composedPortfolioTransactions |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	composedPortfolioTransactions := composedPortfolio transactions.
	self assert: 2 equals: composedPortfolioTransactions size.
	self assert: (composedPortfolioTransactions includes: simplePortfolioAccountDeposit).
	self assert: (composedPortfolioTransactions includes: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:24' prior: 50890719!
test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce

	| account portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: portfolio accountsSize.
			self assert: (portfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:28' prior: 50890737!
test11PortfolioCanNotIncludeAccountOfItsPortfolios

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	composedPortfolio := Portfolio with: simplePortfolio.
	
	self 
		should: [ composedPortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: composedPortfolio accountsSize.
			self assert: (composedPortfolio accountsIncludes: simplePortfolio) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:32' prior: 50890758!
test12PortfolioCanNotIncludeItself

	| account simplePortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	
	self 
		should: [ simplePortfolio add: simplePortfolio ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: simplePortfolio accountsSize.
			self assert: (simplePortfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:01:51' prior: 50890776!
test13ComposedPortfolioCanNotHaveParentPortfolioAccount

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio new.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio add: account.
	
	self 
		should: [ simplePortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: simplePortfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:12:16' prior: 50890795!
test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively

	| account leftParentPortfolio leftRootParentPortfolio portfolio rightParentPortfolio rightRootParentPortfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	leftParentPortfolio := Portfolio with: portfolio .
	leftRootParentPortfolio := Portfolio with: leftParentPortfolio.
	leftRootParentPortfolio add: account.
	
	rightParentPortfolio := Portfolio with: portfolio .
	rightRootParentPortfolio := Portfolio with: rightParentPortfolio.
	rightRootParentPortfolio add: account.

	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/29/2019 16:31:18' prior: 50890823!
test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd

	| portfolioToAdd portfolioToModify rootPortfolio sharedAccount |
	
	sharedAccount := ReceptiveAccount new.
	portfolioToModify := Portfolio new.
	rootPortfolio := Portfolio with: sharedAccount with: portfolioToModify.
	portfolioToAdd := Portfolio with: sharedAccount.
	
	self 
		should: [ portfolioToModify add: portfolioToAdd ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolioToModify accountsIsEmpty ]! !

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:23'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:23'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:48'!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:54'!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:02'!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32'!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46'!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/9/2020 06:00:12'!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw account |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/9/2020 06:02:30'!
test07AccountKnowsItsTransactions 

	| account deposit |
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: account.
		
	self assert: 1 equals: account transactions size .
	self assert: (account transactions includes: deposit).
! !

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:24'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:24'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:23:47' prior: 50890947!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:24:25' prior: 50890952!
isComposedBy: anAccount

	self subclassResponsibility ! !
!Account methodsFor: 'balance' stamp: 'HAW 5/25/2019 12:23:40' prior: 50890957!
balance

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:27' prior: 50890961!
addTransactionsTo: aCollectionOfTransactions

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:15' prior: 50890967!
transactions

	self subclassResponsibility ! !
!Account methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:24:04' prior: 50890972!
addedTo: aPortfolio

	self subclassResponsibility ! !

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:24'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:24'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:20' prior: 50890992!
accountsIncludes: anAccount

	^accounts includes: anAccount ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:05:04' prior: 50890997!
accountsIsEmpty
	
	^accounts isEmpty ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:06' prior: 50891002!
accountsSize
	
	^accounts size! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:19:20' prior: 50891006!
add: accountToAdd

	self assertCanAdd: accountToAdd.
		
	accounts add: accountToAdd.
	accountToAdd addedTo: self 
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:17:31' prior: 50891013!
rootParents
	
	| rootParents |
	
	rootParents := Set new.
	self addRootParentsTo: rootParents.
	
	^ rootParents! !
!Portfolio methodsFor: 'initialization' stamp: 'HAW 5/25/2019 12:03:18' prior: 50891020 overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:19:36' prior: 50891026 overrides: 50892959!
balance
	
	^accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:42:55' prior: 50891032 overrides: 50892963!
addTransactionsTo: aCollectionOfTransactions

	accounts do: [ :anAccount | anAccount addTransactionsTo: aCollectionOfTransactions ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:32' prior: 50891040 overrides: 50892969!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsTo: transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:02:59' prior: 50891049 overrides: 50892974!
addedTo: aPortfolio 
	
	parents add: aPortfolio ! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:20:56' prior: 50891054!
anyRootParentIsComposedBy: accountToAdd

	^self rootParents anySatisfy: [ :aParent | aParent isComposedBy: accountToAdd]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:28:29' prior: 50891062 overrides: 50892949!
hasRegistered: aTransaction

	^accounts anySatisfy: [ :anAccount | anAccount hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/29/2019 16:24:54' prior: 50891069 overrides: 50892954!
isComposedBy: anAccount

	^ self = anAccount or: [ accounts anySatisfy: [ :composedAccount | (composedAccount isComposedBy: anAccount) or: [ anAccount isComposedBy: composedAccount ]]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:17:31' prior: 50891079!
addRootParentsTo: rootParents

	parents 
		ifEmpty: [ rootParents add: self ] 
		ifNotEmpty: [ parents do: [ :aParent | aParent addRootParentsTo: rootParents ]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:20:36' prior: 50891088!
assertCanAdd: accountToAdd

	(self anyRootParentIsComposedBy: accountToAdd) ifTrue: [ self signalCanNotAddAccount ].
! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 11:48:34' prior: 50891095!
signalCanNotAddAccount
	
	self error: self class canNotAddAccountErrorMessage! !

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:24'!
Portfolio class
	instanceVariableNames: ''!

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:24'!
Portfolio class
	instanceVariableNames: ''!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'NR 11/9/2020 06:01:26' prior: 50891110!
canNotAddAccountErrorMessage
	
	^'Can not add repeated account to a portfolio!!'! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:18:21' prior: 50891116!
with: anAccount

	^self new 
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:23:59' prior: 50891122!
with: anAccount with: anotherAccount

	^self new 
		add: anAccount;
		add: anotherAccount;
		yourself! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:25'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:25'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:35' overrides: 16896425!
initialize

	super initialize.
	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'NR 11/9/2020 05:56:36' overrides: 50892963!
addTransactionsTo: aCollectionOfTransactions

	aCollectionOfTransactions addAll: transactions copy! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37'!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' overrides: 50892969!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:24:46' overrides: 50892959!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/21/2019 18:55:56' overrides: 50892949!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:54:51' overrides: 50892954!
isComposedBy: anAccount

	^self = anAccount ! !
!ReceptiveAccount methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:03:32' overrides: 50892974!
addedTo: aPortfolio 
	
	! !

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:26'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:26'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' overrides: 16881508!
value 

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:39'!
affectBalance: aBalance

	self subclassResponsibility ! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:26'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:26'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/21/2019 18:54:27'!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:26'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:26'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45'!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' overrides: 50893208!
value

	^ value! !
!Deposit methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:02' overrides: 50893212!
affectBalance: aBalance

	^aBalance + value ! !

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:27'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:27'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:27'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:27'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46'!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' overrides: 50893208!
value

	^ value! !
!Withdraw methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:15' overrides: 50893212!
affectBalance: aBalance

	^aBalance - value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:27'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:27'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:27'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:27'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'no messages' stamp: 'as 11/9/2020 19:34:58'!
test01AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedInTransfer
	! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:27'!
Object subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:44:23' prior: 50891373!
test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 balance equals: -100.
	self assert: account2 balance equals: 100.	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:44:39' prior: 50893347!
test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 balance equals: -100.
	self assert: account2 balance equals: 100.	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:45:04' prior: 50893361!
test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 balance equals: -100.
	self assert: account2 balance equals: 100.	
	
	! !

!methodRemoval: TransferTest #test01AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedInTransfer stamp: 'as 11/14/2020 15:54:27'!
test01AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedInTransfer
	!
!Transfer class methodsFor: 'no messages' stamp: 'as 11/9/2020 19:47:31' prior: 50891567!
anAmountOf: anAmount from: originAccount to: destinationAccount
	self new initializeWith: anAmount from: originAccount to: destinationAccount.! !
!Transfer methodsFor: 'no messages' stamp: 'as 11/9/2020 19:47:45' prior: 50892166!
initializeWith: anAmount from: originAccount to: destinationAccount
	! !

!classDefinition: #NameOfSubclass category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:27'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #NameOfSubclass category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:27'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #NameOfSubclass stamp: 'as 11/14/2020 15:54:28'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:48:46' prior: 50893403!
initializeWith: anAmount from: originAccount to: destinationAccount
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:54:17' prior: 50893430!
initializeWith: anAmount from: originAccount to: destinationAccount

	| deposit extraction |
	deposit := Deposit register: anAmount on: destinationAccount.
	extraction := Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:58:11'!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 hasRegistered: transfer withdraw.
	self assert: account2 hasRegistered: transfer deposit.
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:58:37' prior: 50893436!
initializeWith: anAmount from: originAccount to: destinationAccount

	| deposit withdraw |
	deposit := Deposit register: anAmount on: destinationAccount.
	withdraw := Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:59:24' prior: 50893461!
initializeWith: anAmount from: originAccount to: destinationAccount

	| deposit withdraw |
	deposit := Deposit register: anAmount on: destinationAccount.
	withdraw := Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:00:05' prior: 50893472!
initializeWith: anAmount from: originAccount to: destinationAccount

	Deposit register: anAmount on: destinationAccount.
	Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:28'!
Object subclass: #Transfer
	instanceVariableNames: 'deposit withdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:28'!
Object subclass: #Transfer
	instanceVariableNames: 'deposit withdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:00:39' prior: 50893483!
initializeWith: anAmount from: originAccount to: destinationAccount

	deposit := Deposit register: anAmount on: destinationAccount.
	withdraw := Withdraw register: anAmount on: originAccount.
	
	
	
	
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:01:13' prior: 50893446!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:02:48' prior: 50893517!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	"self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit)."

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:04:01' prior: 50891555!
checkWithdrawIsRegisteredIn: anAccount
	anAccount hasRegistered: withdraw.
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:04:06' prior: 50893551!
checkWithdrawIsRegisteredIn: anAccount
	^anAccount hasRegistered: withdraw.
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:04:20' prior: 50891561!
checkDepositIsRegisteredIn: anAccount
	^anAccount hasRegistered: deposit.
	! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:05:41' prior: 50893395!
anAmountOf: anAmount from: originAccount to: destinationAccount
	^self new initializeWith: anAmount from: originAccount to: destinationAccount.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:05:57' prior: 50893532!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:08:18'!
test02AccountTransactionsAreRegisteredInAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !

!methodRemoval: TransferTest #test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer stamp: 'as 11/14/2020 15:54:28'!
test02ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:09:34'!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:09:42' prior: 50892050!
test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	! !

!methodRemoval: TransferTest #test02AccountTransactionsAreRegisteredInAccountsInvolvedAfterTransfer stamp: 'as 11/14/2020 15:54:28'!
test02AccountTransactionsAreRegisteredInAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	
	
	!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:11:24' prior: 50893623!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	"self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	"
	
	self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer).
	
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'as 11/9/2020 20:12:14'!
hasTransfer: aTransfer
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:14:32' prior: 50893670!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer).
	
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'as 11/9/2020 20:16:19' prior: 50893688!
hasTransfer: aTransfer
	
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'as 11/9/2020 20:18:50' prior: 50893706!
hasTransfer: aTransfer
	transactions anySatisfy: [:transaction | transaction belongsTo: aTransfer].! !
!AccountTransaction methodsFor: 'balance' stamp: 'as 11/9/2020 20:19:12'!
belongsTo: aTransfer! !

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:28'!
Object subclass: #AccountTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'transfer' stamp: 'as 11/9/2020 20:19:57' prior: 50893716!
belongsTo: aTransfer
	^transfer = aTransfer.! !

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:28'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:28'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:29'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:29'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:29'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:29'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:29'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:29'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'transfer' stamp: 'as 11/9/2020 20:29:24' prior: 50893728!
belongsTo: aTransfer
	"^transfer = aTransfer. y esto donde vaaaaa"! !
!AccountTransaction methodsFor: 'transfer' stamp: 'as 11/9/2020 20:56:16' prior: 50893794!
belongsTo: aTransfer
	"^transfer = aTransfer."! !

!methodRemoval: AccountTransaction #belongsTo: stamp: 'as 11/14/2020 15:54:29'!
belongsTo: aTransfer
	"^transfer = aTransfer."!

!classRemoval: #TransferDeposit stamp: 'as 11/14/2020 15:54:29'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:29'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:29'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:29'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:29'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:29'!
TransferTransaction subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:29'!
TransferTransaction subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:29'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:29'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTransaction methodsFor: 'no messages' stamp: 'as 11/9/2020 21:01:09'!
belongsTo: aTransfer
	^transfer = aTransfer.! !

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:29'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: 'deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:29'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: 'deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:11:06' prior: 50893692!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer).

	"self assert: (account1 hasRegister: transfer withdraw).
	self assert: (account2 hasRegister: transfer deposit).	"
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:14:21' prior: 50893901!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	"self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer)."

	"self assert: (account1 hasRegister: transfer withdraw).
	self assert: (account2 hasRegister: transfer deposit).	"
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:14:27' prior: 50893919!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	"self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer)."

	"self assert: (account1 hasRegister: transfer withdraw).
	self assert: (account2 hasRegister: transfer deposit).	"
	
	
	! !

!classRemoval: #TransferWithdraw stamp: 'as 11/14/2020 15:54:30'!
TransferTransaction subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferDeposit stamp: 'as 11/14/2020 15:54:31'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: 'deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferTransaction stamp: 'as 11/14/2020 15:54:31'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:15:36' prior: 50893937!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.
	
	"self assert: (account1 hasTransfer: transfer).
	self assert: (account2 hasTransfer: transfer)."

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:16:11' prior: 50891992!
withdraw
	^withdraw.
	
	
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:16:25' prior: 50891996!
deposit
	^deposit.
	
	
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:16:36' prior: 50893976!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:17:27' prior: 50893638!
test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	"self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).	"
	
	self assert: (transfer checkWithdrawIsRegisteredIn: account1).
	self assert: (transfer checkDepositIsRegisteredIn: account2).! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:20:24' prior: 50894017!
test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:24:19' prior: 50894037!
test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	
	"transfer -> transaction"! !

!methodRemoval: TransferTest #test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer stamp: 'as 11/14/2020 15:54:31'!
test03TransferIsRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	
	
	!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:30:13' prior: 50892244!
test03AccountTransactionsInTransferAreConnected

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (transfer withdraw transferDepositAssociated).
	self assert: (transfer deposit transferWithdrawAssociated).	
	! !

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:32'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:32'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:32'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:32'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:32'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:32'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:32'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:32'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferWithdraw methodsFor: 'no messages' stamp: 'as 11/9/2020 21:32:35'!
transferDepositAssociated
	^transfer deposit.! !
!TransferDeposit methodsFor: 'no messages' stamp: 'as 11/9/2020 21:32:59'!
transferWithdrawAssociated
	^transfer withdraw.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:33:57' prior: 50893507!
initializeWith: anAmount from: originAccount to: destinationAccount

	deposit := Deposit register: anAmount on: destinationAccount for: self.
	withdraw := Withdraw register: anAmount on: originAccount for: self.
	
	
	
	
	
	
	! !
!AccountTransaction class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:34:29'!
register: aValue on: account for: aTransfer

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !
!AccountTransaction class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:34:48' prior: 50894178!
register: aValue on: account for: aTransfer

	| transaction |
	
	transaction := self for: aValue for: aTransfer.
	account register: transaction.
		
	^ transaction! !
!Deposit class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:35:27'!
for: aValue for: aTransfer

	^ self new initializeFor: aValue for: aTransfer.! !
!Deposit class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:36:23' prior: 50894195!
for: aValue for: aTransfer

	^ TransferDeposit new initializeFor: aValue for: aTransfer.! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:37:12'!
initializeFor: aValue for: aTransfer
	value := aValue.
	! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:37:33' prior: 50894207!
initializeFor: aValue for: aTransfer
	value := aValue.
	transfer := aTransfer.! !
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:37:43'!
initializeFor: aValue for: aTransfer
	value := aValue.
	transfer := aTransfer.! !
!Withdraw class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:38:08'!
for: aValue for: aTransfer

	^ TransferWithdraw new initializeFor: aValue for: aTransfer.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:39:47' prior: 50894084!
test03AccountTransactionsInTransferAreConnected

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:40:24' prior: 50894230!
test03AccountTransactionsInTransferAreConnected

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	
	
	
	"FALTAN CASOS BORDEEEEE"! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:44:40' prior: 50892261!
test04AccountCannotTransferToItself

	| account1 transfer|
	
	"account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	"
	
	
	"FALTAN CASOS BORDEEEEE"! !

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:32'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:32'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:16:26' prior: 50892574!
test01BalanceOfPortfolioWithoutAccountsIsZero

	self assert: 0 equals: Portfolio new balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:17:51' prior: 50892580!
test02BalanceOfPortfolioWithOneAccountIsAccountBalance

	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: account balance equals: portfolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:23:25' prior: 50892591!
test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolioAccount balance + simplePortfolio balance) equals: composedPortofolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:15' prior: 50892613!
test04PortfolioWithoutAccountsHasNoRegisteredTransaction

	self deny: (Portfolio new hasRegistered: (Deposit for: 100))! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:11' prior: 50892620!
test05PortfolioHasRegisteredItsAccountsTransactions

	| account portfolio deposit |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: (portfolio hasRegistered: deposit)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:06' prior: 50892631!
test06PortfolioLooksForRegisteredTransactionsRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolio hasRegistered: simplePortfolioAccountDeposit).
	self assert: (composedPortfolio hasRegistered: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:10' prior: 50892659!
test07PortfolioHasNoTransactionWhenHasNoAccounts

	self assert: Portfolio new transactions isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 6/22/2020 07:31:19' prior: 50892665!
test08PortfolioTransactionsIncludesAllItsAccountsTransactions

	| account portfolio accountDeposit anotherAccount portfolioTransactions anotherAccountWithdraw |
	
	account := ReceptiveAccount new.
	accountDeposit := Deposit register: 100 on: account.
	anotherAccount := ReceptiveAccount new.
	anotherAccountWithdraw := Withdraw register: 100 on: account.
	portfolio := Portfolio with: account.
	
	portfolioTransactions := portfolio transactions.
	
	self assert: 2 equals: portfolioTransactions size.
	self assert: (portfolioTransactions includes: accountDeposit).
	self assert: (portfolioTransactions includes: anotherAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:20' prior: 50892688!
test09PortfolioTransactionsAreCalculatedRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit composedPortfolioTransactions |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	composedPortfolioTransactions := composedPortfolio transactions.
	self assert: 2 equals: composedPortfolioTransactions size.
	self assert: (composedPortfolioTransactions includes: simplePortfolioAccountDeposit).
	self assert: (composedPortfolioTransactions includes: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:24' prior: 50892721!
test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce

	| account portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: portfolio accountsSize.
			self assert: (portfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:28' prior: 50892739!
test11PortfolioCanNotIncludeAccountOfItsPortfolios

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	composedPortfolio := Portfolio with: simplePortfolio.
	
	self 
		should: [ composedPortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: composedPortfolio accountsSize.
			self assert: (composedPortfolio accountsIncludes: simplePortfolio) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:32' prior: 50892760!
test12PortfolioCanNotIncludeItself

	| account simplePortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	
	self 
		should: [ simplePortfolio add: simplePortfolio ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: simplePortfolio accountsSize.
			self assert: (simplePortfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:01:51' prior: 50892778!
test13ComposedPortfolioCanNotHaveParentPortfolioAccount

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio new.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio add: account.
	
	self 
		should: [ simplePortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: simplePortfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:12:16' prior: 50892797!
test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively

	| account leftParentPortfolio leftRootParentPortfolio portfolio rightParentPortfolio rightRootParentPortfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	leftParentPortfolio := Portfolio with: portfolio .
	leftRootParentPortfolio := Portfolio with: leftParentPortfolio.
	leftRootParentPortfolio add: account.
	
	rightParentPortfolio := Portfolio with: portfolio .
	rightRootParentPortfolio := Portfolio with: rightParentPortfolio.
	rightRootParentPortfolio add: account.

	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/29/2019 16:31:18' prior: 50892825!
test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd

	| portfolioToAdd portfolioToModify rootPortfolio sharedAccount |
	
	sharedAccount := ReceptiveAccount new.
	portfolioToModify := Portfolio new.
	rootPortfolio := Portfolio with: sharedAccount with: portfolioToModify.
	portfolioToAdd := Portfolio with: sharedAccount.
	
	self 
		should: [ portfolioToModify add: portfolioToAdd ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolioToModify accountsIsEmpty ]! !

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:33'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:33'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:48' prior: 50892863!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:54' prior: 50892870!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:02' prior: 50892879!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32' prior: 50892889!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46' prior: 50892899!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/9/2020 06:00:12' prior: 50892912!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw account |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/9/2020 06:02:30' prior: 50892924!
test07AccountKnowsItsTransactions 

	| account deposit |
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: account.
		
	self assert: 1 equals: account transactions size .
	self assert: (account transactions includes: deposit).
! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:33'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:33'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 19:45:04' prior: 50893375!
test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	| account1 account2|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 balance equals: -100.
	self assert: account2 balance equals: 100.	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:24:19' prior: 50894052!
test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	
	"transfer -> transaction"! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:40:24' prior: 50894246!
test03AccountTransactionsInTransferAreConnected

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	
	
	
	"FALTAN CASOS BORDEEEEE"! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:44:40' prior: 50894263!
test04AccountCannotTransferToItself

	| account1 transfer|
	
	"account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	"
	
	
	"FALTAN CASOS BORDEEEEE"! !

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:33'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:33'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:23:47' prior: 50892949!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:24:25' prior: 50892954!
isComposedBy: anAccount

	self subclassResponsibility ! !
!Account methodsFor: 'balance' stamp: 'HAW 5/25/2019 12:23:40' prior: 50892959!
balance

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:27' prior: 50892963!
addTransactionsTo: aCollectionOfTransactions

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:15' prior: 50892969!
transactions

	self subclassResponsibility ! !
!Account methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:24:04' prior: 50892974!
addedTo: aPortfolio

	self subclassResponsibility ! !

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:33'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:33'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:20' prior: 50892994!
accountsIncludes: anAccount

	^accounts includes: anAccount ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:05:04' prior: 50892999!
accountsIsEmpty
	
	^accounts isEmpty ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:06' prior: 50893004!
accountsSize
	
	^accounts size! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:19:20' prior: 50893008!
add: accountToAdd

	self assertCanAdd: accountToAdd.
		
	accounts add: accountToAdd.
	accountToAdd addedTo: self 
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:17:31' prior: 50893015!
rootParents
	
	| rootParents |
	
	rootParents := Set new.
	self addRootParentsTo: rootParents.
	
	^ rootParents! !
!Portfolio methodsFor: 'initialization' stamp: 'HAW 5/25/2019 12:03:18' prior: 50893022 overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:19:36' prior: 50893028 overrides: 50894758!
balance
	
	^accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:42:55' prior: 50893034 overrides: 50894762!
addTransactionsTo: aCollectionOfTransactions

	accounts do: [ :anAccount | anAccount addTransactionsTo: aCollectionOfTransactions ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:32' prior: 50893042 overrides: 50894768!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsTo: transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:02:59' prior: 50893051 overrides: 50894773!
addedTo: aPortfolio 
	
	parents add: aPortfolio ! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:20:56' prior: 50893056!
anyRootParentIsComposedBy: accountToAdd

	^self rootParents anySatisfy: [ :aParent | aParent isComposedBy: accountToAdd]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:28:29' prior: 50893064 overrides: 50894748!
hasRegistered: aTransaction

	^accounts anySatisfy: [ :anAccount | anAccount hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/29/2019 16:24:54' prior: 50893071 overrides: 50894753!
isComposedBy: anAccount

	^ self = anAccount or: [ accounts anySatisfy: [ :composedAccount | (composedAccount isComposedBy: anAccount) or: [ anAccount isComposedBy: composedAccount ]]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:17:31' prior: 50893081!
addRootParentsTo: rootParents

	parents 
		ifEmpty: [ rootParents add: self ] 
		ifNotEmpty: [ parents do: [ :aParent | aParent addRootParentsTo: rootParents ]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:20:36' prior: 50893090!
assertCanAdd: accountToAdd

	(self anyRootParentIsComposedBy: accountToAdd) ifTrue: [ self signalCanNotAddAccount ].
! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 11:48:34' prior: 50893097!
signalCanNotAddAccount
	
	self error: self class canNotAddAccountErrorMessage! !

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:34'!
Portfolio class
	instanceVariableNames: ''!

!classDefinition: 'Portfolio class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:34'!
Portfolio class
	instanceVariableNames: ''!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'NR 11/9/2020 06:01:26' prior: 50893112!
canNotAddAccountErrorMessage
	
	^'Can not add repeated account to a portfolio!!'! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:18:21' prior: 50893118!
with: anAccount

	^self new 
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:23:59' prior: 50893124!
with: anAccount with: anotherAccount

	^self new 
		add: anAccount;
		add: anotherAccount;
		yourself! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:34'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:34'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:35' prior: 50893147 overrides: 16896425!
initialize

	super initialize.
	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'NR 11/9/2020 05:56:36' prior: 50893153 overrides: 50894762!
addTransactionsTo: aCollectionOfTransactions

	aCollectionOfTransactions addAll: transactions copy! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'as 11/9/2020 20:18:50' prior: 50893710!
hasTransfer: aTransfer
	transactions anySatisfy: [:transaction | transaction belongsTo: aTransfer].! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50893159!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50893165 overrides: 50894768!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:24:46' prior: 50893170 overrides: 50894758!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/21/2019 18:55:56' prior: 50893177 overrides: 50894748!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:54:51' prior: 50893183 overrides: 50894753!
isComposedBy: anAccount

	^self = anAccount ! !
!ReceptiveAccount methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:03:32' prior: 50893188 overrides: 50894773!
addedTo: aPortfolio 
	
	! !

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:35'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:35'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' prior: 50893208 overrides: 16881508!
value 

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:39' prior: 50893212!
affectBalance: aBalance

	self subclassResponsibility ! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:35'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:35'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/21/2019 18:54:27' prior: 50893227!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !
!AccountTransaction class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:34:48' prior: 50894187!
register: aValue on: account for: aTransfer

	| transaction |
	
	transaction := self for: aValue for: aTransfer.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:35'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:35'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45' prior: 50893249!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50893254 overrides: 50895018!
value

	^ value! !
!Deposit methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:02' prior: 50893258 overrides: 50895023!
affectBalance: aBalance

	^aBalance + value ! !

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:36'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:36'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50893272!
for: aValue

	^ self new initializeFor: aValue ! !
!Deposit class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:36:23' prior: 50894201!
for: aValue for: aTransfer

	^ TransferDeposit new initializeFor: aValue for: aTransfer.! !

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:36'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:36'!
Deposit subclass: #TransferDeposit
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:37:33' prior: 50894212!
initializeFor: aValue for: aTransfer
	value := aValue.
	transfer := aTransfer.! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:32:59' prior: 50894163!
transferWithdrawAssociated
	^transfer withdraw.! !

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:36'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:36'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46' prior: 50893292!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50893297 overrides: 50895018!
value

	^ value! !
!Withdraw methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:15' prior: 50893301 overrides: 50895023!
affectBalance: aBalance

	^aBalance - value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:36'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:36'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50893315!
for: aValue

	^ self new initializeFor: aValue ! !
!Withdraw class methodsFor: 'instance creation' stamp: 'as 11/9/2020 21:38:08' prior: 50894224!
for: aValue for: aTransfer

	^ TransferWithdraw new initializeFor: aValue for: aTransfer.! !

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:36'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:36'!
Withdraw subclass: #TransferWithdraw
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:37:43' prior: 50894218!
initializeFor: aValue for: aTransfer
	value := aValue.
	transfer := aTransfer.! !
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:32:35' prior: 50894159!
transferDepositAssociated
	^transfer deposit.! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:36'!
Object subclass: #Transfer
	instanceVariableNames: 'deposit withdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:36'!
Object subclass: #Transfer
	instanceVariableNames: 'deposit withdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:04:20' prior: 50893563!
checkDepositIsRegisteredIn: anAccount
	^anAccount hasRegistered: deposit.
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:04:06' prior: 50893557!
checkWithdrawIsRegisteredIn: anAccount
	^anAccount hasRegistered: withdraw.
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:16:25' prior: 50893998!
deposit
	^deposit.
	
	
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:33:57' prior: 50894168!
initializeWith: anAmount from: originAccount to: destinationAccount

	deposit := Deposit register: anAmount on: destinationAccount for: self.
	withdraw := Withdraw register: anAmount on: originAccount for: self.
	
	
	
	
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 21:16:11' prior: 50893994!
withdraw
	^withdraw.
	
	
	
	
	! !

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:36'!
Transfer class
	instanceVariableNames: ''!

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:36'!
Transfer class
	instanceVariableNames: ''!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/9/2020 20:05:41' prior: 50893569!
anAmountOf: anAmount from: originAccount to: destinationAccount
	^self new initializeWith: anAmount from: originAccount to: destinationAccount.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:17:21' prior: 50894701!
test03AccountTransactionsInTransferAreConnected

	| account1 account2 transfer|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	
	
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:18:29' prior: 50894718!
test04AccountCannotTransferToItself

	| account1 transfer|
	
	account1 := ReceptiveAccount new.	
	transfer := Transfer anAmountOf: 100 from: account1 to: account1.

	"self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	"
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:22:17' prior: 50895288!
test04AccountCannotTransferToItself

	| account1 |
	
	account1 := ReceptiveAccount new.	
	
	"self 
		should: [ Transfer anAmountOf: 100 from: account1 to: account1. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert:  equals: anError messageText. ]"

	! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:22:52' prior: 50889818!
invalidTransferErrorMessage
	^'transfer is invalid'.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:23:30' prior: 50895302!
test04AccountCannotTransferToItself

	| account1 |
	
	account1 := ReceptiveAccount new.	
	
	self 
		should: [ Transfer anAmountOf: 100 from: account1 to: account1. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: Transfer invalidTransferErrorMessage equals: anError messageText. ]

	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:24:09' prior: 50895319!
test04AccountCannotTransferToItself

	| account1 |
	
	account1 := ReceptiveAccount new.	
	
	self 
		should: [ Transfer anAmountOf: 100 from: account1 to: account1. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: Transfer invalidTransferErrorMessage equals: anError messageText. ]

	! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:25:37' prior: 50895264!
anAmountOf: anAmount from: originAccount to: destinationAccount
	
	originAccount = destinationAccount ifTrue: [^ Error signal: self class invalidTransferErrorMessage ].
	
	^self new initializeWith: anAmount from: originAccount to: destinationAccount.! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:25:52' prior: 50895345!
anAmountOf: anAmount from: originAccount to: destinationAccount
	
	originAccount = destinationAccount ifTrue: [^ Error signal: self invalidTransferErrorMessage ].
	
	^self new initializeWith: anAmount from: originAccount to: destinationAccount.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:26:43'!
test05AccountCannotTransferNegativeAmount

	| account1 account2|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	self 
		should: [ Transfer anAmountOf: -100 from: account1 to: account2. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: Transfer invalidTransferErrorMessage equals: anError messageText. ]

	! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:27:50' prior: 50895357!
anAmountOf: anAmount from: originAccount to: destinationAccount
	
	originAccount = destinationAccount ifTrue: [^ Error signal: self invalidTransferErrorMessage ].
	anAmount <= 0 ifTrue: [^ Error signal: self invalidTransferErrorMessage ].	
	
	^self new initializeWith: anAmount from: originAccount to: destinationAccount.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:28:27' prior: 50889900!
test05AccountCannotTransferInvalidAmount

	| account1 account2|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	self 
		should: [ Transfer anAmountOf: -100 from: account1 to: account2. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: Transfer invalidTransferErrorMessage equals: anError messageText. ]

	! !

!methodRemoval: TransferTest #test05AccountCannotTransferNegativeAmount stamp: 'as 11/14/2020 15:54:37'!
test05AccountCannotTransferNegativeAmount

	| account1 account2|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	self 
		should: [ Transfer anAmountOf: -100 from: account1 to: account2. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: Transfer invalidTransferErrorMessage equals: anError messageText. ]

	!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:32:42' prior: 50889964!
validateTransferCollaboratorsIn: aBlockToValidate
	aBlockToValidate ifTrue: [^ Error signal: self invalidTransferErrorMessage ].	! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:33:21' prior: 50895383!
anAmountOf: anAmount from: originAccount to: destinationAccount
	
	originAccount = destinationAccount ifTrue: [^ Error signal: self invalidTransferErrorMessage ].
	[anAmount <= 0] ifTrue: [^ Error signal: self invalidTransferErrorMessage ].	
	
	
	
	^self new initializeWith: anAmount from: originAccount to: destinationAccount.! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:33:33' prior: 50895434!
anAmountOf: anAmount from: originAccount to: destinationAccount
	
	originAccount = destinationAccount ifTrue: [^ Error signal: self invalidTransferErrorMessage ].
	[anAmount <= 0] value ifTrue: [^ Error signal: self invalidTransferErrorMessage ].	
	
	
	
	^self new initializeWith: anAmount from: originAccount to: destinationAccount.! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:33:46' prior: 50895426!
validateTransferCollaboratorsIn: aBlockToValidate
	aBlockToValidate value ifTrue: [^ Error signal: self invalidTransferErrorMessage ].	! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:34:39' prior: 50895448!
anAmountOf: anAmount from: originAccount to: destinationAccount
	
	"originAccount = destinationAccount ifTrue: [^ Error signal: self invalidTransferErrorMessage ].
	[anAmount <= 0] value ifTrue: [^ Error signal: self invalidTransferErrorMessage ].	"
	
	self validateTransferCollaboratorsIn: [originAccount = destinationAccount].
	self validateTransferCollaboratorsIn: [anAmount <= 0].
	
	^self new initializeWith: anAmount from: originAccount to: destinationAccount.! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:34:52' prior: 50895470!
anAmountOf: anAmount from: originAccount to: destinationAccount
	
	self validateTransferCollaboratorsIn: [originAccount = destinationAccount].
	self validateTransferCollaboratorsIn: [anAmount <= 0].
	
	^self new initializeWith: anAmount from: originAccount to: destinationAccount.! !

!classDefinition: #AccountSummaryTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:37'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:37'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryTest methodsFor: 'no messages' stamp: 'as 11/12/2020 21:37:12' prior: 50890038!
test01AccountSummaryForAnEmptyAccount
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:37:43' prior: 50895516!
test01AccountSummaryForAnEmptyAccount
	
	| account1 |
	account1 := ReceptiveAccount new.	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:38:50' prior: 50895521!
test01AccountSummaryForAnEmptyAccount
	
	| account1 |
	account1 := ReceptiveAccount new.	
	
	self assert: account1 accountSummary equals: OrderedCollection new.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:39:45' prior: 50895528!
test01AccountSummaryForAnEmptyAccount
	
	| account1 |
	account1 := ReceptiveAccount new.	
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Balance = 0').! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'as 11/12/2020 21:40:31'!
accountSummary
	^OrderedCollection with: 'Balance = 0'.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:41:01' prior: 50890073!
test02AccountSummaryForAnAccountWithADeposit
	
	| account1 |
	account1 := ReceptiveAccount new.	
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Balance = 0').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:42:00' prior: 50895551!
test02AccountSummaryForAnAccountWithADeposit
	
	| account1 |
	account1 := ReceptiveAccount new.	
	Deposit register: 100 on: account1.
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 0').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:42:34' prior: 50895561!
test02AccountSummaryForAnAccountWithADeposit
	
	| account1 |
	account1 := ReceptiveAccount new.	
	Deposit register: 100 on: account1.
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100').! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:42:56' prior: 50895545!
accountSummary
	"^OrderedCollection with: 'Balance = 0'."
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:44:11' prior: 50895585!
accountSummary
	"^OrderedCollection with: 'Balance = 0'."
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	^OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100'.
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:44:53' prior: 50890113!
test03AccountSummaryForAnAccountWithTwoDeposit
	
	| account1 |
	account1 := ReceptiveAccount new.	
	Deposit register: 100 on: account1.
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:45:12' prior: 50895601!
test03AccountSummaryForAnAccountWithTwoDeposit
	
	| account1 |
	account1 := ReceptiveAccount new.	
	Deposit register: 100 on: account1.
	Deposit register: 100 on: account1.	
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Dep�sito por 100.' with: 'Balance = 200').! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:47:54' prior: 50895591!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [summary addLast: 'Dep�sito por 100.'].
	summary addLast: 'Balance = ', transactions size * 100 asString.
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:48:12' prior: 50895627!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [summary addLast: 'Dep�sito por 100.'].
	summary addLast: 'Balance = ', transactions size * 100 asString.
	^summary.
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:48:56' prior: 50895639!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [summary addLast: 'Dep�sito por 100.'].
	summary addLast: 'Balance = ', (transactions size * 100) asString.
	^summary.
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:49:45' prior: 50895651!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [summary addLast: 'Dep�sito por 100.'].
	summary addLast: ('Balance = ', (transactions size * 100) asString).
	^summary.
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:52:12' prior: 50895663!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [summary add: 'Dep�sito por 100.'].
	summary add: ('Balance = ', (transactions size * 100) asString).
	^summary.
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:52:51' prior: 50895675!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [:aTransaction | summary add: 'Dep�sito por 100.'].
	summary add: ('Balance = ', (transactions size * 100) asString).
	^summary.
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:54:04' prior: 50890199!
test04AccountSummaryForAnAccountWithWithdraw
	
	| account1 |
	account1 := ReceptiveAccount new.	
	Withdraw register: 100 on: account1.	
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Extracci�n por 100.' with: 'Balance = -100').! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:56:41' prior: 50895687!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [:aTransaction | 
					(aTransaction isKindOf: Deposit) ifTrue: [summary add: 'Dep�sito por 100.'].
 					(aTransaction isKindOf: Withdraw ) ifTrue: [summary add: 'Extracci�n por 100.']				
		].
	summary add: ('Balance = ',  self balance asString).
	^summary.
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:58:14' prior: 50890241!
test05AccountSummaryForAnAccountWithTransferWithdraw
	
	| account1 account2|
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	TransferWithdraw register: 100 on: account1.	
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Salida por transferencia de 100.' with: 'Balance = -100').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 21:59:55' prior: 50895729!
test05AccountSummaryForAnAccountWithTransferWithdraw
	
	| account1 account2|
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Salida por transferencia de 100.' with: 'Balance = -100').! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'as 11/12/2020 22:00:53' prior: 50895712!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [:aTransaction | 
					(aTransaction isKindOf: Deposit) ifTrue: [summary add: 'Dep�sito por 100.'].
 					(aTransaction isKindOf: Withdraw ) ifTrue: [summary add: 'Extracci�n por 100.']	.
					(aTransaction isKindOf: TransferWithdraw ) ifTrue: [summary add: 'Salida por transferencia de 100.']			.		
		].
	summary add: ('Balance = ',  self balance asString).
	^summary.
	! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'as 11/14/2020 10:28:45' prior: 50895757!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [:aTransaction | 
					(aTransaction isKindOf: Deposit) ifTrue: [summary add: 'Dep�sito por 100.'].
 					(aTransaction isKindOf: Withdraw ) ifTrue: [summary add: 'Extracci�n por 100.']	
												ifFalse: [summary add: 'Salida por transferencia de 100.']
					"(aTransaction isKindOf: TransferWithdraw ) ifTrue: [summary add: 'Salida por transferencia de 100.']			.		"
		].
	summary add: ('Balance = ',  self balance asString).
	^summary.
	! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'as 11/14/2020 10:30:39' prior: 50895777!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [:aTransaction | 
					(aTransaction isKindOf: Deposit) ifTrue: [summary add: 'Dep�sito por 100.'].
 					(aTransaction isKindOf: Withdraw ) ifTrue: [
						(aTransaction isKindOf: TransferWithdraw) 
							ifTrue: [summary add: 'Salida por transferencia de 100.']	
							ifFalse: [summary add: 'Extracci�n por 100.']
						]	
												"ifFalse: [summary add: 'Salida por transferencia de 100.']
					(aTransaction isKindOf: TransferWithdraw ) ifTrue: [summary add: 'Salida por transferencia de 100.']			.		"
		].
	summary add: ('Balance = ',  self balance asString).
	^summary.
	! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'as 11/14/2020 10:31:40' prior: 50895799!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [:aTransaction | 
					(aTransaction isKindOf: Deposit) ifTrue: [summary add: 'Dep�sito por 100.'].
 					(aTransaction isKindOf: Withdraw ) ifTrue: [
						(aTransaction isKindOf: TransferWithdraw) 
							ifTrue: [summary add: 'Salida por transferencia de 100.']	
							ifFalse: [summary add: 'Extracci�n por 100.']
						]
		].
	summary add: ('Balance = ',  self balance asString).
	^summary.
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:32:56'!
test06AccountSummaryForAnAccountWithTransferDeposit
	
	| account1 account2|
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account2 accountSummary equals: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100').! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'as 11/14/2020 10:33:53' prior: 50895825!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [:aTransaction | 
 					(aTransaction isKindOf: Withdraw ) ifTrue: [
						(aTransaction isKindOf: TransferWithdraw) 
							ifTrue: [summary add: 'Salida por transferencia de 100.']	
							ifFalse: [summary add: 'Extracci�n por 100.']
						].
					 (aTransaction isKindOf: Deposit ) ifTrue: [
						(aTransaction isKindOf: TransferDeposit) 
							ifTrue: [summary add: 'Entrada por transferencia de 100.']	
							ifFalse: [summary add: 'Dep�sito por 100.']
						]
		].
	summary add: ('Balance = ',  self balance asString).
	^summary.
	! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'as 11/14/2020 10:33:57' prior: 50895860!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [:aTransaction | 
 					(aTransaction isKindOf: Withdraw ) ifTrue: [
						(aTransaction isKindOf: TransferWithdraw) 
							ifTrue: [summary add: 'Salida por transferencia de 100.']	
							ifFalse: [summary add: 'Extracci�n por 100.']
						].
					 (aTransaction isKindOf: Deposit ) ifTrue: [
						(aTransaction isKindOf: TransferDeposit) 
							ifTrue: [summary add: 'Entrada por transferencia de 100.']	
							ifFalse: [summary add: 'Dep�sito por 100.']
						].
		].
	summary add: ('Balance = ',  self balance asString).
	^summary.
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:37:19'!
test07AccountSummaryForAnAccountWithTransferDepositWithADifferentAmount
	
	| account1 account2|
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	Transfer anAmountOf: 50 from: account1 to: account2.
	
	self assert: account2 accountSummary equals: (OrderedCollection with: 'Entrada por transferencia de 50.' with: 'Balance = 50').! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'as 11/14/2020 10:39:10' prior: 50895885!
accountSummary
	| summary |
	transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	summary := OrderedCollection new.
	transactions do: [:aTransaction | 
 					(aTransaction isKindOf: Withdraw ) ifTrue: [
						(aTransaction isKindOf: TransferWithdraw) 
							ifTrue: [summary add: 'Salida por transferencia de ', aTransaction value asString, '.' ]	
							ifFalse: [summary add: 'Extracci�n por ', aTransaction value asString, '.' ]
						].
					 (aTransaction isKindOf: Deposit ) ifTrue: [
						(aTransaction isKindOf: TransferDeposit) 
							ifTrue: [summary add: 'Entrada por transferencia de ', aTransaction value asString, '.' ]	
							ifFalse: [summary add: 'Dep�sito por ', aTransaction value asString, '.' ]
						].
		].
	summary add: ('Balance = ',  self balance asString).
	^summary.
	! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'as 11/14/2020 10:39:33' prior: 50895924!
accountSummary
	| summary |
	"transactions isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0']."
	summary := OrderedCollection new.
	transactions do: [:aTransaction | 
 					(aTransaction isKindOf: Withdraw ) ifTrue: [
						(aTransaction isKindOf: TransferWithdraw) 
							ifTrue: [summary add: 'Salida por transferencia de ', aTransaction value asString, '.' ]	
							ifFalse: [summary add: 'Extracci�n por ', aTransaction value asString, '.' ]
						].
					 (aTransaction isKindOf: Deposit ) ifTrue: [
						(aTransaction isKindOf: TransferDeposit) 
							ifTrue: [summary add: 'Entrada por transferencia de ', aTransaction value asString, '.' ]	
							ifFalse: [summary add: 'Dep�sito por ', aTransaction value asString, '.' ]
						].
		].
	summary add: ('Balance = ',  self balance asString).
	^summary.
	! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'as 11/14/2020 10:39:45' prior: 50895953!
accountSummary
	| summary |
	summary := OrderedCollection new.
	transactions do: [:aTransaction | 
 					(aTransaction isKindOf: Withdraw ) ifTrue: [
						(aTransaction isKindOf: TransferWithdraw) 
							ifTrue: [summary add: 'Salida por transferencia de ', aTransaction value asString, '.' ]	
							ifFalse: [summary add: 'Extracci�n por ', aTransaction value asString, '.' ]
						].
					 (aTransaction isKindOf: Deposit ) ifTrue: [
						(aTransaction isKindOf: TransferDeposit) 
							ifTrue: [summary add: 'Entrada por transferencia de ', aTransaction value asString, '.' ]	
							ifFalse: [summary add: 'Dep�sito por ', aTransaction value asString, '.' ]
						].
		].
	summary add: ('Balance = ',  self balance asString).
	^summary.
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:44:16'!
test08AccountSummaryForAnAccountWithTransferDepositWithADifferentAmount
	
	| account1 account2|
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	Transfer anAmountOf: 50 from: account1 to: account2.
	
	self assert: account2 accountSummary equals: (OrderedCollection with: 'Entrada por transferencia de 50.' with: 'Balance = 50').! !

!methodRemoval: AccountSummaryTest #test08AccountSummaryForAnAccountWithTransferDepositWithADifferentAmount stamp: 'as 11/14/2020 15:54:39'!
test08AccountSummaryForAnAccountWithTransferDepositWithADifferentAmount
	
	| account1 account2|
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	Transfer anAmountOf: 50 from: account1 to: account2.
	
	self assert: account2 accountSummary equals: (OrderedCollection with: 'Entrada por transferencia de 50.' with: 'Balance = 50').!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:44:43'!
test07AccountSummaryForAReceptiveAccountWithTransferDepositWithADifferentAmount
	
	| account1 account2|
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	Transfer anAmountOf: 50 from: account1 to: account2.
	
	self assert: account2 accountSummary equals: (OrderedCollection with: 'Entrada por transferencia de 50.' with: 'Balance = 50').! !

!methodRemoval: AccountSummaryTest #test07AccountSummaryForAnAccountWithTransferDepositWithADifferentAmount stamp: 'as 11/14/2020 15:54:39'!
test07AccountSummaryForAnAccountWithTransferDepositWithADifferentAmount
	
	| account1 account2|
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	Transfer anAmountOf: 50 from: account1 to: account2.
	
	self assert: account2 accountSummary equals: (OrderedCollection with: 'Entrada por transferencia de 50.' with: 'Balance = 50').!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:44:54'!
test06AccountSummaryForAReceptiveAccountWithTransferDeposit
	
	| account1 account2|
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account2 accountSummary equals: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100').! !

!methodRemoval: AccountSummaryTest #test06AccountSummaryForAnAccountWithTransferDeposit stamp: 'as 11/14/2020 15:54:39'!
test06AccountSummaryForAnAccountWithTransferDeposit
	
	| account1 account2|
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account2 accountSummary equals: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100').!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:45:04'!
test05AccountSummaryForAReceptiveAccountWithTransferWithdraw
	
	| account1 account2|
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Salida por transferencia de 100.' with: 'Balance = -100').! !

!methodRemoval: AccountSummaryTest #test05AccountSummaryForAnAccountWithTransferWithdraw stamp: 'as 11/14/2020 15:54:39'!
test05AccountSummaryForAnAccountWithTransferWithdraw
	
	| account1 account2|
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Salida por transferencia de 100.' with: 'Balance = -100').!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:45:13'!
test04AccountSummaryForAReceptiveAccountWithWithdraw
	
	| account1 |
	account1 := ReceptiveAccount new.	
	Withdraw register: 100 on: account1.	
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Extracci�n por 100.' with: 'Balance = -100').! !

!methodRemoval: AccountSummaryTest #test04AccountSummaryForAnAccountWithWithdraw stamp: 'as 11/14/2020 15:54:40'!
test04AccountSummaryForAnAccountWithWithdraw
	
	| account1 |
	account1 := ReceptiveAccount new.	
	Withdraw register: 100 on: account1.	
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Extracci�n por 100.' with: 'Balance = -100').!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:45:23'!
test03AccountSummaryForAReceptiveAccountWithTwoDeposit
	
	| account1 |
	account1 := ReceptiveAccount new.	
	Deposit register: 100 on: account1.
	Deposit register: 100 on: account1.	
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Dep�sito por 100.' with: 'Balance = 200').! !

!methodRemoval: AccountSummaryTest #test03AccountSummaryForAnAccountWithTwoDeposit stamp: 'as 11/14/2020 15:54:40'!
test03AccountSummaryForAnAccountWithTwoDeposit
	
	| account1 |
	account1 := ReceptiveAccount new.	
	Deposit register: 100 on: account1.
	Deposit register: 100 on: account1.	
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Dep�sito por 100.' with: 'Balance = 200').!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:45:34'!
test02AccountSummaryForAReceptiveAccountWithADeposit
	
	| account1 |
	account1 := ReceptiveAccount new.	
	Deposit register: 100 on: account1.
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100').! !

!methodRemoval: AccountSummaryTest #test02AccountSummaryForAnAccountWithADeposit stamp: 'as 11/14/2020 15:54:40'!
test02AccountSummaryForAnAccountWithADeposit
	
	| account1 |
	account1 := ReceptiveAccount new.	
	Deposit register: 100 on: account1.
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100').!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:45:54'!
test01AccountSummaryForEmptyAccount
	
	| account1 |
	account1 := ReceptiveAccount new.	
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Balance = 0').! !

!methodRemoval: AccountSummaryTest #test01AccountSummaryForEmptyAccount stamp: 'as 11/14/2020 15:54:40'!
test01AccountSummaryForEmptyAccount
	
	| account1 |
	account1 := ReceptiveAccount new.	
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Balance = 0').!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:46:17'!
test01AccountSummaryForAnEmptyReceptiveAccount
	
	| account1 |
	account1 := ReceptiveAccount new.	
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Balance = 0').! !

!methodRemoval: AccountSummaryTest #test01AccountSummaryForAnEmptyAccount stamp: 'as 11/14/2020 15:54:40'!
test01AccountSummaryForAnEmptyAccount
	
	| account1 |
	account1 := ReceptiveAccount new.	
	
	self assert: account1 accountSummary equals: (OrderedCollection with: 'Balance = 0').!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:47:15'!
test08AccountSummaryForAnEmptyPortfolio
	
	| account1 account2|
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	Transfer anAmountOf: 50 from: account1 to: account2.
	
	self assert: account2 accountSummary equals: (OrderedCollection with: 'Entrada por transferencia de 50.' with: 'Balance = 50').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:48:19' prior: 50896236!
test08AccountSummaryForAnEmptyPortfolio
	
	| account portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Entrada por transferencia de 50.' with: 'Balance = 50').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:50:59' prior: 50896250!
test08AccountSummaryForAnEmptyPortfolio
	
	| account portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Entrada por transferencia de 50.' with: 'Balance = 50').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:51:38' prior: 50896262!
test08AccountSummaryForAnEmptyPortfolio
	
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio accountSummary equals: OrderedCollection new.! !
!Portfolio methodsFor: 'account management - private' stamp: 'as 11/14/2020 10:52:18'!
accountSummary! !
!Portfolio methodsFor: 'account management - private' stamp: 'as 11/14/2020 10:52:31' prior: 50896282!
accountSummary
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:52:43' prior: 50896274!
test08AccountSummaryForAnEmptyPortfolio
	
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Balance = 0').! !
!Portfolio methodsFor: 'account management - private' stamp: 'as 11/14/2020 10:52:59' prior: 50896286!
accountSummary
	^OrderedCollection with: 'Balance = 0'.
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:53:56'!
test08AccountSummaryForAPortfolioWithOneAccount
	
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Balance = 0').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:54:15'!
test09AccountSummaryForAnEmptyPortfolio
	
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Balance = 0').! !

!methodRemoval: AccountSummaryTest #test08AccountSummaryForAnEmptyPortfolio stamp: 'as 11/14/2020 15:54:40'!
test08AccountSummaryForAnEmptyPortfolio
	
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Balance = 0').!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:54:49' prior: 50896313!
test09AccountSummaryForAnEmptyPortfolio
	
	| account portfolio |
	
	account := ReceptiveAccount new.
	"Deposit register: 100 on: account."
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Balance = 0').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:54:59' prior: 50896331!
test09AccountSummaryForAnEmptyPortfolio
	
	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Balance = 0').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:55:39' prior: 50896343!
test09AccountSummaryForAnEmptyPortfolio 
	"AccountSummaryForAnEmptyPortfolio"
	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Balance = 0').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:55:52'!
test09AccountSummaryForAPortfolioWithOneAccount 
	"AccountSummaryForAnEmptyPortfolio"
	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Balance = 0').! !

!methodRemoval: AccountSummaryTest #test09AccountSummaryForAnEmptyPortfolio stamp: 'as 11/14/2020 15:54:40'!
test09AccountSummaryForAnEmptyPortfolio 
	"AccountSummaryForAnEmptyPortfolio"
	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Balance = 0').!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:55:57' prior: 50896368!
test09AccountSummaryForAPortfolioWithOneAccount 
	
	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Balance = 0').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:56:11'!
test08AccountSummaryForAnEmptyPortfolio
	
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Balance = 0').! !

!methodRemoval: AccountSummaryTest #test08AccountSummaryForAPortfolioWithOneAccount stamp: 'as 11/14/2020 15:54:41'!
test08AccountSummaryForAPortfolioWithOneAccount
	
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Balance = 0').!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 10:56:56' prior: 50896394!
test09AccountSummaryForAPortfolioWithOneAccount 
	
	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100').! !
!Portfolio methodsFor: 'account management - private' stamp: 'as 11/14/2020 10:58:30' prior: 50896299!
accountSummary
	accounts isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	! !
!Portfolio methodsFor: 'account management - private' stamp: 'as 11/14/2020 10:59:14' prior: 50896438!
accountSummary
	accounts isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	^OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100'.
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 11:00:34'!
test09AccountSummaryForAPortfolioWithTwoDepositAccount 
	
	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100').! !

!methodRemoval: AccountSummaryTest #test09AccountSummaryForAPortfolioWithOneAccount stamp: 'as 11/14/2020 15:54:41'!
test09AccountSummaryForAPortfolioWithOneAccount 
	
	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100').!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 11:01:00'!
test09AccountSummaryForAPortfolioWithOneDepositAccount 
	
	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100').! !

!methodRemoval: AccountSummaryTest #test09AccountSummaryForAPortfolioWithTwoDepositAccount stamp: 'as 11/14/2020 15:54:41'!
test09AccountSummaryForAPortfolioWithTwoDepositAccount 
	
	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100').!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 11:01:08'!
test10AccountSummaryForAPortfolioWithTwoDepositAccount 
	
	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 11:01:30' prior: 50896505!
test10AccountSummaryForAPortfolioWithTwoDepositAccount 
	
	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Dep�sito por 100.' with: 'Balance = 200').! !
!Portfolio methodsFor: 'account management - private' stamp: 'as 11/14/2020 11:02:44' prior: 50896444!
accountSummary
	accounts isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	
	accounts do: [:account | ]
	"^OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100'."
	! !
!Portfolio methodsFor: 'account management - private' stamp: 'as 11/14/2020 11:03:32' prior: 50896533!
accountSummary

	| summary |
	summary := OrderedCollection new.

	accounts isEmpty ifTrue: [^summary add: 'Balance = 0'].
	
	
	
	accounts do: [:account | ]
	"^OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100'."
	! !
!Portfolio methodsFor: 'account management - private' stamp: 'as 11/14/2020 11:06:34' prior: 50896543!
accountSummary

	| summary |
	summary := OrderedCollection new.

	accounts isEmpty ifTrue: [^summary add: 'Balance = 0'].
	
	^accounts first accountSummary.
	
	! !
!Portfolio methodsFor: 'account management - private' stamp: 'as 11/14/2020 11:07:17' prior: 50896554!
accountSummary

	accounts isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	
	^accounts first accountSummary.
	
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 11:09:18'!
test11AccountSummaryForAPortfolioWithTwoAccounts
	
	| account1 account2 portfolio |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Deposit register: 100 on: account2.
	portfolio := Portfolio with: account1.
	portfolio add: account2.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Dep�sito por 100.' with: 'Balance = 200').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 11:10:29' prior: 50896570!
test11AccountSummaryForAPortfolioWithTwoAccounts
	
	| account1 account2 portfolio |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Deposit register: 100 on: account2.
	portfolio := Portfolio with: account1.
	portfolio add: account2.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Dep�sito por 100.' with: 'Balance = 200').! !
!Portfolio methodsFor: 'account management - private' stamp: 'as 11/14/2020 11:13:15' prior: 50896563!
accountSummary

	| summary |
	summary := OrderedCollection new.

	accounts isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	
	accounts do: [:account | summary,account accountSummary removeLast].
	summary add: 'Balance = ', self balance asString.
	
	^summary.
	! !
!Portfolio methodsFor: 'account management - private' stamp: 'as 11/14/2020 11:14:40' prior: 50896606!
accountSummary

	| summary |
	summary := OrderedCollection new.

	accounts isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	
	accounts do: [:account | summary := summary,account accountSummary removeLast].
	summary add: 'Balance = ', self balance asString.
	
	^summary.
	! !

!classDefinition: #TerseGuideHelp category: 'TerseGuide' stamp: 'as 11/14/2020 15:54:41'!
Workspace subclass: #TerseGuideHelp
	instanceVariableNames: 'topics topicListIndex selectedTopic topicList window textPane'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerseGuide'!

!classDefinition: #TerseGuideHelp category: 'TerseGuide' stamp: 'as 11/14/2020 15:54:41'!
Workspace subclass: #TerseGuideHelp
	instanceVariableNames: 'topics topicListIndex selectedTopic topicList window textPane'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerseGuide'!

!classDefinition: 'TerseGuideHelp class' category: 'TerseGuide' stamp: 'as 11/14/2020 15:54:41'!
TerseGuideHelp class
	instanceVariableNames: 'topics'!

!classDefinition: 'TerseGuideHelp class' category: 'TerseGuide' stamp: 'as 11/14/2020 15:54:41'!
TerseGuideHelp class
	instanceVariableNames: 'topics'!

!classDefinition: #TerseGuideWindow category: 'TerseGuide' stamp: 'as 11/14/2020 15:54:41'!
WorkspaceWindow subclass: #TerseGuideWindow
	instanceVariableNames: 'textModelM list1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerseGuide'!

!classDefinition: #TerseGuideWindow category: 'TerseGuide' stamp: 'as 11/14/2020 15:54:41'!
WorkspaceWindow subclass: #TerseGuideWindow
	instanceVariableNames: 'textModelM list1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerseGuide'!

!classDefinition: 'TerseGuideWindow class' category: 'TerseGuide' stamp: 'as 11/14/2020 15:54:41'!
TerseGuideWindow class
	instanceVariableNames: ''!

!classDefinition: 'TerseGuideWindow class' category: 'TerseGuide' stamp: 'as 11/14/2020 15:54:41'!
TerseGuideWindow class
	instanceVariableNames: ''!

!classDefinition: #TerseGuideTopic category: 'TerseGuide' stamp: 'as 11/14/2020 15:54:41'!
Object subclass: #TerseGuideTopic
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerseGuide'!

!classDefinition: #TerseGuideTopic category: 'TerseGuide' stamp: 'as 11/14/2020 15:54:41'!
Object subclass: #TerseGuideTopic
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerseGuide'!

!classDefinition: 'TerseGuideTopic class' category: 'TerseGuide' stamp: 'as 11/14/2020 15:54:41'!
TerseGuideTopic class
	instanceVariableNames: ''!

!classDefinition: 'TerseGuideTopic class' category: 'TerseGuide' stamp: 'as 11/14/2020 15:54:41'!
TerseGuideTopic class
	instanceVariableNames: ''!
!TerseGuideHelp commentStamp: 'dhn 3/7/2015 13:20' prior: 0!
TerseGuideHelp is adapted from the Squeak terse guide by Chris Rathman (http://www.angelfire.com/tx4/cus/notes/smalltalk.html), maintained on the swiki at http://wiki.squeak.org/squeak/5699. Copyrights and credit for the original document belong to Chris Rathman.

Examples of use include:

TerseGuideHelp display: #arithmetic
TerseGuideHelp display: #array
TerseGuideHelp display: #transcript

TerseGuideHelp also serves as the model for TerseGuideWindow, which can be opened by:

TerseGuideWindow openTerseGuide
!
!TerseGuideWindow commentStamp: 'dhn 3/5/2016 21:50' prior: 0!
Show a terse guide to Cuis in a system window. The window has a text pane with a list pane beside it. The text pane is a kind of Workspace which has the behavior that statements in it can be Done (Cmd-d) or Printed (Cmd-p) in order to observe their effect.

TerseGuideWindow openTerseGuide
!
!TerseGuideTopic commentStamp: '<historical>' prior: 0!
I represent a topic that can be added to the TerseGuide. Subclasses of me should implement #title and #examples. For instance:

>>title
    ^ 'Numbers'

>> examples
     ^ {
            { #code -> '4 factorial' . #category -> 'Common functions' . #description -> 'factorial' } as: Dictionary.
            { #code -> '2 even' . #category -> 'Common functions' . #description -> 'check if a number is even' } as: Dictionary.
        }!
!TerseGuideHelp methodsFor: 'topics' stamp: 'RNG 7/15/2018 01:31:53'!
addAdditionalTopicsTo: topicsList
	
	self class additionalTopics do: [ :each |
		topicsList at: each title put: each
	].! !
!TerseGuideHelp methodsFor: 'topics' stamp: 'jmv 5/6/2020 11:10:35'!
coreTopics
	
	^ `Dictionary new
	at: 'Arithmetic' put: #arithmetic;
	at: 'Arrays' put: #array;
	at: 'Assignment' put: #assignment;
	at: 'Associations' put: #association;
	at: 'Bags' put: #bag;
	at: 'Bit-Wise' put: #bitwise;
	at: 'Blocks' put: #block;
	at: 'Booleans' put: #boolean;
	at: 'Canvas' put: #canvas;
	at: 'Character' put: #character;
	at: 'Coding' put: #coding;
	at: 'Colors' put: #colors;
	at: 'Conditional Statements' put: #conditionalStatement;
	at: 'Conversion' put: #conversion;
	at: 'Date' put: #date;
	at: 'Debugging' put: #debugging;
	at: 'Dictionary' put: #dictionary;
	at: 'Dynamic Messages' put: #dynamic;
	at: 'Exceptions' put: #exceptions;
	at: 'Features' put: #feature;
	at: 'File Operations' put: #fileMan;
	at: 'Fonts' put: #font;
	at: 'Forms' put: #form;
	at: 'Heap' put: #heap;
	at: 'Internal Streams' put: #internalStream;
	at: 'Intervals' put: #interval;
	at: 'Introduction' put: #introduction;
	at: 'Iterations' put: #iterationStatement;
	at: 'Layout Morph' put: #layoutMorph;
	at: 'Layout Spec' put: #layoutSpec;
	at: 'Literals' put: #literals;
	at: 'Metaclass' put: #metaclass;
	at: 'Method Calls' put: #methodCall;
	at: 'Miscellaneous' put: #misc;
	at: 'Morphs' put: #morph;
	at: 'Object' put: #anObject;
	at: 'Ordered Collections' put: #orderedCollection;
	at: 'Point' put: #point;
	at: 'PopUpMenu' put: #popUpMenu;
	at: 'Primitives' put: #primitive;
	at: 'Rectangle' put: #rectangle;
	at: 'Sets' put: #set;
	at: 'Sorted Collections' put: #sortedCollection;
	at: 'Strings' put: #string;
	at: 'Symbols' put: #symbol;
	at: 'Syntax' put: #syntax;
	at: 'Time' put: #time;
	at: 'Transcript' put: #transcript;	
	at: 'Trie' put: #trie;
	at: 'Custom Browsers' put: #customBrowsers;
	yourself`! !
!TerseGuideHelp methodsFor: 'topics' stamp: 'RNG 7/15/2018 01:31:23'!
terseTopics
	"Translate a list item to a class method selector"
	|allTopics|
	allTopics _ self coreTopics.
	self addAdditionalTopicsTo: allTopics.
	^ allTopics! !
!TerseGuideHelp methodsFor: 'initialization' stamp: 'dhn 5/17/2016 16:50' overrides: 16945446!
initialize
	super initialize.
	topics _ self terseTopics.
	topicList _ self class pages.
! !
!TerseGuideHelp methodsFor: 'user interface support' stamp: 'dhn 6/15/2016 18:29'!
selectedTopic: aTopic
	"Set the value of selectedTopic and set the contents of the text pane"
	
	selectedTopic _ aTopic.
	textPane model actualContents: self updateTopicText.
	self triggerEvent: #topicListIndex! !
!TerseGuideHelp methodsFor: 'user interface support' stamp: 'dhn 2/26/2015 07:59'!
topicList
	^ topicList! !
!TerseGuideHelp methodsFor: 'user interface support' stamp: 'dhn 2/26/2015 08:42'!
topicListIndex
	topicList ifNil: [ ^ topicListIndex _ 0 ].
	^ topicList indexOf: selectedTopic! !
!TerseGuideHelp methodsFor: 'user interface support' stamp: 'dhn 10/18/2015 20:20'!
topicListIndex: index
	"Set the vakue of topicListIndex and set the value of selectedTopic"
	
	topicListIndex _ index.
	self selectedTopic: 
		(topicList at: index ifAbsent: nil)! !
!TerseGuideHelp methodsFor: 'user interface support' stamp: 'RNG 7/15/2018 01:45:10'!
updateTopicText
	"Answer the text of the selected topic and change the window label accordingly"
	| topic topicTitle |
	
	topicListIndex = 0 ifTrue: [ window setLabel: 'Terse Guide'. ^ ''].
	topic _ topics at: selectedTopic.
	topicTitle _ topic isSymbol ifTrue: [ self terseTopics keyAtValue: topic ] ifFalse: [ topic title ].
	window setLabel: ('Terse Guide to ', topicTitle).
	^ topic isSymbol ifTrue: [ self class perform: topic ] ifFalse: [ topic script ]! !
!TerseGuideHelp methodsFor: 'accessing' stamp: 'dhn 10/18/2015 20:01'!
textPane: anObject
	"Set the value of textPane"
	
	textPane _ anObject! !
!TerseGuideHelp methodsFor: 'accessing' stamp: 'dhn 2/27/2015 21:07'!
window: anObject
	"Set the value of window"

	window _ anObject! !
!TerseGuideHelp methodsFor: 'testing' stamp: 'jmv 5/29/2020 16:30:16' overrides: 50694262!
styleByParagraphs
	"Answer true if each paragraph should be styled independent of the others.
	We want to allow mutil-paragraph comments, and we are careful for our contents to be valid Smalltalk."

	^false! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 13:18:04'!
anObject
	"Object"
	^
'| x y |
x _ self activeHand.
	"Answer a hand for the morphic world that is the current UI focus.
	This is the UI root animated by the active Process.
	This method could answer nil, if not in a UI process!!"

y _ self as: HandMorph.
	"Create an object of class aSimilarClass that has similar contents to the receiver."

y _ x asString.
	"Answer a string that represents the receiver."

x _ #foo.
y become: x. 
	"Swap the object pointers of the receiver and the argument.
	Fails if either object is a SmallInteger"

self break.
	"This is a simple message to use for inserting breakpoints during debugging.
	The debugger is opened by sending a signal. This gives a chance to restore
	invariants related to multiple processes."

y changed.
	"Receiver changed in a general way; inform all the dependents by 
	sending each dependent an update: message."

x class.
	"Answer the object which is the receiver''s class."

x className.
	"Answer a string characterizing the receiver''s class, for use in list views for example"

nil confirm: ''Are you hungry?''.	
	"Put up a yes/no menu with a caption. Answer true if the response 
	is yes, false if no. This is a modal question--the user must respond 
	yes or no."

x _ nil confirm: ''Are you hungry?'' orCancel: [x _ ''perhaps''].
	"Put up a yes/no/cancel menu with caption aString. Answer true if  
	the response is yes, false if no. If cancel is chosen, evaluate  
	cancelBlock. This is a modal question--the user must respond yes, no, or cancel."

y disableCode: [nil confirm: ''Is this necessary?''.].
	"Use this method instead of commenting temporarily disabled code.
	This way, it will be accessible with senders, references to variables, etc.
	Besides, you''ll avoid problems when the code to disable has comments!!"

y disableCode: [self executeMethod: #fullPrintString. "Execute compiledMethod against the receiver with no args"].

x fullPrintString.
	"Answer a String whose characters are a description of the receiver."

self halt.
	"This is the typical message to use for inserting breakpoints during 
	debugging. It behaves like halt:, but does not call on halt: in order to 
	avoid putting this message on the stack. Halt is especially useful when 
	the breakpoint message is an arbitrary one."

self halt: ''something to aid debugging''.
	"This is the typical message to use for inserting breakpoints during 
	debugging. It creates and schedules a Notifier with a label."

self inboundPointers.  "Answers a collection of all objects in the system that point to myself"

self inboundPointersExcluding: #().  "Answer a list of all objects in the system that point to me, excluding those in the collection of objectsToExclude. I do my best to avoid creating any temporary objects that point to myself"

nil inform: ''Nothing exceeds like excess.''.  "Display a message for the user to read and then dismiss."

x inspectWithLabel: ''Interesting Instance''.  "Create and schedule an Inspector labelled aLabel."

x isKindOf: Set. 	"Answer whether the argument is a superclass or class of the receiver."

y isMemberOf: Symbol. 
	"Answer whether the receiver is an instance of the argument class"

y longPrintString.
	"Answer a String whose characters are a description of the receiver."

nil notify: ''this is a notice''. 
	"Create and schedule a Notifier with the argument as the message in 
	order to request confirmation before a process can proceed."

x _ y outboundPointers.
"Answers a list of all objects I am causing not to be garbage-collected"

x perform: #asBag. 
	"Send the unary selector, a symbol, to the receiver.
	Fail if the number of arguments expected by the selector is not zero."

x perform: #at: with: 2. 
	"Send the selector, a symbol, to the receiver with an argument.
	Fail if the number of arguments expected by the selector is not one."

x perform: #at:put: with: 2 with: ''bar''. 
	"Send the selector, a symbol, to the receiver with the given arguments.
	Fail if the number of arguments expected by the selector is not two."

x perform: #at:put: withArguments: {2. 17.6}. 
	"Send the selector, a symbol, to the receiver with arguments in an array.
	Fail if the number of arguments expected by the selector does not match 
	the size of the array."

y printOn: String new writeStream.
	"Append to the argument, a stream, a sequence of characters that  
	identifies the receiver."

nil shouldBeImplemented.
	"Announce that this message should be implemented"

nil shouldNotImplement.
	"Announce that, although the receiver inherits this message, it should 
	not implement it."

y storeOn: String new writeStream. 
	"Append to the argument a sequence of characters that is an 
	expression whose evaluation creates an object similar to the receiver."

y storeString.
	"Answer a String representation of the receiver from which the receiver 
	can be reconstructed."

self subclassResponsibility.
	"This message sets up a framework for the behavior of the class'' subclasses.
	 Announce that the subclass should have implemented this message."

self triggerEvent: #mouseOver.
	"Evaluate all actions registered for the argument, an EventSelector. Return the 
	value of the last registered action."

x yourself.

y ~= #foo. 
	"Answer whether the receiver and the argument do not represent the 
	same object."

y ~~ #foo. 
	"Answer whether the receiver and the argument are not the same object 
	(do not have the same object pointer)."

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 13:43:44'!
arithmetic
	"Arithmetic Expressions"
	^
'| x y |
x _ 6 + 3.								"addition"
x _ 6 - 3.								"subtraction"
x _ 6 * 3.								"multiplication"
x _ 1 + 2 * 3.							"evaluation always left to right (1 + 2) * 3"
x _ 5 / 3.								"division with fractional result"
x _ 5 / 3.0.							"division with float result"
x _ 5.0 // 3.0.						"integer divide"
x _ 5.0 \\ 3.0.						"integer remainder"
x _ -5.									"unary minus"
x _ 5 sign.								"numeric sign (1, -1 or 0)"
x _ 5 negated.							"negate receiver"
x _ 1.2 integerPart.					"integer part of number (1.0)"
x _ 1.2 fractionPart.				"fractional part of number (0.2)"
x _ 5 reciprocal.						"reciprocal function"
x _ 6 * 3.1.							"auto convert to float"
x _ 5 squared.							"square function"
x _ 25 sqrt.							"square root"
x _ 5 raisedTo: 2.					"power function"
x _ 5 raisedToInteger: 2.			"power function with integer"
x _ 5 exp.								"exponential"
x _ -5 abs.								"absolute value"
x _ 3.99 rounded.						"round"
x _ 3.99 truncated.					"truncate"
x _ 3.99 roundTo: 1.					"round to specified decimal places"
x _ 3.99 truncateTo: 1.				"truncate to specified decimal places"
x _ 3.99 floor.						"integer nearest the receiver toward negative infinity"
x _ 3.99 ceiling.						"integer nearest the receiver toward  infinity"
x _ 5 factorial.						"factorial"
x _ -5 quo: 3.							"integer divide rounded toward zero"
x _ -5 rem: 3.							"integer remainder rounded toward zero"
x _ 28 gcd: 12.						"greatest common divisor"
x _ 28 lcm: 12.						"least common multiple"
x _ 28 mod: 12.						"modulo"
x _ 100 ln.								"natural logarithm"
x _ 100 log.							"base 10 logarithm"
x _ 100 log: 10	.					"logarithm with specified base"
x _ 100 floorLog: 10.				"floor of the log"
x _ 180 degreesToRadians.			"convert degrees to radians"
x _ 3.14 radiansToDegrees.			"convert radians to degrees"
x _ 0.7 sin.							"sine"
x _ 0.7 cos.							"cosine"
x _ 0.7 tan.							"tangent"
x _ 0.7 arcSin.						"arcsine"
x _ 0.7 arcCos.						"arccosine"
x _ 0.7 arcTan.						"arctangent"
x _ 10 max: 20.						"get maximum of two numbers"
x _ 10 min: 20.						"get minimum of two numbers"
x _ Float pi.							"pi"
x _ Float e.							"exp constant"
x _ Float infinity.					"infinity"
x _ Float nan.							"not-a-number"
x _ Random new next; yourself.	"establish a local pseudo-random number generator"
x next.									"random number on the interval (0.0,1.0)"
y _ 100 atRandom.						"random integer on the interval (1,receiver)"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 14:04:52'!
array
	"Arrays"
	^
'"
	Array:              Fixed length collection
	ByteArray:     Array limited to byte elements (0-255)
	WordArray:    Array limited to word elements (0-2^32)
"
| b x y sum max |	"For efficient viewing, have a Transcript open and use Cmd-d on these statements"
x _ #(4 3 2 1).								"constant array"
x _ Array with: 5 with: 4 with: 3 with: 2.         "create array with 4 elements"
x _ Array new: 4.								"allocate an array with specified size"
x													"set array elements"
   at: 1 put: 5;
   at: 2 put: 4;
   at: 3 put: 3;
   at: 4 put: 7;
   yourself.									"without this, x will be 7 (the last element)"

b _ x isEmpty.									"test if array is empty"
y _ x size.										"array size"
y _ x at: 4.									"get array element at index"
b _ x includes: 3.							"test if element is in array"
y _ x copyFrom: 2 to: 4.					"subarray"
y _ x indexOf: 3 ifAbsent: [0].			"first position of element within array"
y _ x occurrencesOf: 3.						"number of times object in collection"
x do: [:a | Transcript show: a printString; newLine].  "iterate over the array"
b _ x allSatisfy: [:a | (a >= 1) & (a <= 4)].	"test if all elements meet condition"
y _ x select: [:a | a > 2].				"return collection of elements that pass test"
y _ x reject: [:a | a < 2].				"return collection of elements that fail test"
y _ x collect: [:a | a + a].				"transform each element for new collection"
y _ x detect: [:a | a > 3] ifNone: [].	"return first element that passes test"
y _ x findFirst: [:a | a < 3].			"find position of first element that passes test"
sum _ 0. x do: [:a | sum _ sum + a]. sum.	"sum array elements"
sum _ 0. 1 to: (x size) do: [:a | sum _ sum + (x at: a)].  "sum array elements"
sum _ x inject: 0 into: [:a :c | a + c].	"sum array elements"
max _ x inject: 0 into: [:a :c | (a > c)	"find max element in array"
   ifTrue: [a]
   ifFalse: [c]].
y _ x shuffled.								"randomly shuffle collection"
y _ x asArray.									"convert to array"
y _ x asByteArray.							"convert to byte array"
y _ x asWordArray.							"convert to word array"
y _ x asOrderedCollection.					"convert to ordered collection"
y _ x asSortedCollection.					"convert to sorted collection"
y _ x asBag.									"convert to bag collection"
y _ x asSet.									"convert to set collection"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 5/11/2020 17:09:56'!
assignment
	"Assignment"
	^
'| x y z |
"either the Cuis or the ASCII convention can be used for assignment"
x _ 4.								"assignment (Cuis) using the underline character ($_)"
z := 7.								"assignment (ASCII)"
x _ y _ z _ 6.						"compound assignment"
x _ (y _ 6) + 1.
x _ Object new.					"bind to an allocated instance of a class"
x _ 123 class.						"discover the class of the object"
x _ Integer superclass.			"discover the superclass of a class"
x _ Object allInstances.		"get an array of all instances of a class"
x _ Integer allSuperclasses.	"get all superclasses of a class"
x _ 1.2 hash.						"hash value for object"
y _ x copy.							"copy the object"
y _ x shallowCopy.				"copy the object (not overridden)"
y _ x veryDeepCopy.				"complete tree copy using a dictionary"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 6/7/2015 12:37'!
association
	"Associations"
	^
'| x y |
x _ #myVar->''hello''.		"Create an association"
y _ x key.
y _ x value.

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 14:11:33'!
bag
	"Bags"
	^
'| b x y sum max |
x _ Bag with: 4 with: 3 with: 2 with: 1.	"create a Bag collection with 4 elements"
x _ Bag new.										"allocate collection"
x add: 4; add: 3; add: 1; add: 2; yourself.	"add element to collection; see NOTE"
x add: 3 withOccurrences: 2.					"add multiple copies to collection"
y _ x addAll: #(7 8 9).							"add elements to the collection and answer the added elements; see NOTE"
y _ x removeAll: #(7 8 9).						"remove elements from the collection and answer the removed elements; see NOTE"
y _ x remove: 4 ifAbsent: [].					"remove element from collection"
b _ x isEmpty.										"test if empty"
y _ x size.											"number of elements"
b _ x includes: 3.								"test if element is in collection"
y _ x occurrencesOf: 3.							"number of times object in collection"
x do: [:a | Transcript show: a printString; newLine].	"iterate over the collection"
b _ x allSatisfy: [:a | (a >= 1) & (a <= 4)].	"test if all elements meet condition"
y _ x select: [:a | a > 2].					"return collection of elements that pass test"
y _ x reject: [:a | a < 2].					"return collection of elements that fail test"
y _ x collect: [:a | a + a].					"transform each element for new collection"
y _ x detect: [:a | a > 3] ifNone: [].		"return first element that passes test"
sum _ 0. x do: [:a | sum _ sum + a]. sum.	"sum elements"
sum _ x inject: 0 into: [:a :c | a + c].	"sum elements"
max _ x inject: 0 into: [:a :c | (a > c)	"find max element in collection"
   ifTrue: [a]
   ifFalse: [c]].
y _ x asOrderedCollection.						"convert to ordered collection"
y _ x asSortedCollection.						"convert to sorted collection"
y _ x asBag.										"convert to bag collection"
y _ x asSet.										"convert to set collection"

"NOTE: methods in subclasses of Collection, of which Bag is one, answer
 the ARGUMENT instead of the resulting collection. Examples of such 
 methods are #addAll: and #removeAll:. Sending #yourself to the collection
 will answer the collection instead of the argument."

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 9/5/2015 20:34'!
bitwise
	"Bitwise Manipulation"
	^
'| b x |
x _ 16rFF bitAnd: 16r0F.			"and bits"
x _ 16rF0 bitOr: 16r0F.				"or bits"
x _ 16rFF bitXor: 16r0F.			"xor bits"
x _ 16rFF bitInvert.					"invert bits"
x _ 16r0F bitShift: 4.				"left shift"
x _ 16rF0 bitShift: -4.				"right shift"
x _ 16r80 bitAt: 8.					"bit at position (0|1)"
x _ 16r80 highBit.					"position of highest bit set"
b _ 16rFF allMask: 16r0F.			"test if all bits set in mask are set in receiver"
b _ 16rFF anyMask: 16r0F.			"test if any bits set in mask are set in receiver"
b _ 16rFF noMask: 16r0F.			"test if all bits set in mask are clear in receiver"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 14:17:04'!
block
	"Blocks"
	^
'"
	Blocks:
		- blocks are objects and may be assigned to a variable
		- value is last expression evaluated unless explicit return
		- blocks may be nested
		- specification [ arguments | | localvars | expressions ]	
		- ^expression terminates block & method (exits all nested blocks)
		- blocks intended for long term storage should not contain ^
"
| x y z fac |
x _ [ y _ 1. z _ 2. ]. x value.					"simple block usage"
x _ [ :argOne :argTwo |   argOne, '' and '' , argTwo.].     "set up block with argument passing"
Transcript show: (x value: ''First'' value: ''Second''); newLine.  "use block with argument passing"
x _ [:e | | v | v _ 1. e + v] value: 2.		"localvar in a block"
fac _ [ :n | n > 1 ifTrue:  [n * (fac value: n-1)] ifFalse: [1]].  "closure on block variable"
fac value: 5.											"closure variable scoped to its block"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 14:19:28'!
boolean
	"Booleans"
	^
'| b x y |
x _ 1. y _ 2.
b _ (x = y).							"equals"
b _ (x ~= y).							"not equals"
b _ (x == y).							"identical"
b _ (x ~~ y).							"not identical"
b _ (x > y).							"greater than"
b _ (x < y).							"less than"
b _ (x >= y).							"greater than or equal"
b _ (x <= y).							"less than or equal"
b _ b not.								"boolean not"
b _ (x < 5) & (y > 1).				"boolean and"
b _ (x < 5) | (y > 1).				"boolean or"
b _ (x < 5) and: [y > 1].			"boolean and (short-circuit)"
b _ (x < 5) or: [y > 1].			"boolean or (short-circuit)"
b _ (x < 5) eqv: (y > 1).			"test if both true or both false"
b _ (x < 5) xor: (y > 1).			"test if one true and other false"
b _ 5 between: 3 and: 12.			"between (inclusive)"
b _ 123 isKindOf: Number.			"test if object is class or subclass of"
b _ 123 isMemberOf: SmallInteger.	"test if object is type of class"
b _ 123 respondsTo: #sqrt.			"test if object responds to message"
b _ x isNil.							"test if object is nil"
b _ x isZero.							"test if number is zero"
b _ x positive.						"test if number is positive"
b _ x strictlyPositive.				"test if number is greater than zero"
b _ x negative.						"test if number is negative"
b _ x even.								"test if number is even"
b _ x odd.								"test if number is odd"
b _ x isLiteral.						"test if literal constant"
b _ x isInteger.						"test if object is integer"
b _ x isFloat.							"test if object is float"
b _ x isNumber.						"test if object is number"
b _ x isSymbol.						"test if object is a Symbol"
b _ $A isUppercase.					"test if upper case character"
b _ $A isLowercase.					"test if lower case character"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 2/19/2016 20:44'!
canvas
	"Canvas"
	^
'| x y |

"
	There is no Canvas class.
	
	A canvas is produced by sending #getCanvas to a Form.
"

x _ Form extent: 200@100 depth: 32.	"Answer a form with color depth 32"

y _ x getCanvas.							"convert form to canvas (a BitBltCanvas)"
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 14:20:26'!
character
	"Character"
	^
'| x y b |
x _ $A.										"character assignment"
y _ x isLowercase.						"test if lower case"
y _ x isUppercase.						"test if upper case"
y _ x isLetter.							"test if letter"
y _ x isDigit.								"test if digit"
y _ x isAlphaNumeric.					"test if alphanumeric"
y _ x isSeparator.						"test if seperator char"
y _ x isVowel.								"test if vowel"
y _ x digitValue.							"convert to numeric digit value"
y _ x asLowercase.						"convert to lower case"
y _ x asUppercase.						"convert to upper case"
y _ x asciiValue.							"convert to numeric ascii value"
y _ x asString.							"convert to string"
b _ $A <= $B.								"comparison"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 3/9/2019 11:52:37'!
coding
	"Code Patterns"
	^
'"
These are Cuis code patterns intended to help the programmer exploit some of the features of Cuis classes. The examples separate the model from the view and feature two styles: coupled and decoupled.

The coupled style employs the ''dependency mechanism'' and requires the model to change when the view changes and when views which use the model are added. The primary methods of the dependency mechanism are #changed: and #update: .

The decoupled style employs the ''observer pattern'' which ensures that the model can remain unaffected by changes to the view or by additional views. The primary methods of the observer pattern are #triggerEvent: and #when:send:to: . This is the preferred style for Cuis, although both styles can be found in the base.
"
| b n |

"To examine the patterns, in the parent directory which contains Cuis-Smalltalk-Dev* do the following:
	''git clone https://github.com/Cuis-Smalltalk/CodeExamples''
	
then, do the following:	
"
Feature require: #''Code-Patterns''.				"load the package"

"To browse the examples, do (Cmd-d) these statements..."

b _ BrowserWindow openBrowser.					"open a browser"
n _ b model systemCategoryList findFirst: [:a | a = #''Code-Patterns''].  "index to the above package"
b model systemCategoryListIndex: n.				"go to the system category"

"The following statements execute the examples..."

DependencyExamples relatedViews. 				"a decoupled example"
DependencyExamples unrelatedViews. 				"another decoupled example"
DependencyExamples coupledView. 					"a coupled example"
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 14:38:36'!
colors
	"Colors"
	^
'
| x t arr |			"For efficient viewing, have a Transcript open and use Cmd-d on these statements"

x _ (Color r: 0 g: 0 b: 0) name.		"answer the name of the color, if possible"
x _ (Color r: 1.0 g: 1.0 b: 1.0) name.

arr _ #((0.0 0.0 0.0) (0.0 0.0 1.0) (0.0 1.0 0.0) (0.0 1.0 1.0) (1.0 0.0 0.0) (1.0 0.0 1.0) (1.0 1.0 0.0) (1.0 1.0 1.0)).
(arr collect: [:a | Color colorFrom: a]) explore.

"In the parent directory which contains Cuis-Smalltalk-Dev* do the following:
	''git clone https://github.com/KenDickey/Cuis-Smalltalk-ColorEditor''
	''git clone https://github.com/KenDickey/Cuis-Smalltalk-NamedColors''
	''git clone https://github.com/KenDickey/Cuis-Smalltalk-Morphic-Misc1''

then, do the following:
"
Feature require: #''Morphic-ColorEditor''.	"load the ColorEditor feature and its dependencies"

"From the menu ''World>New morph...>ColorEditor'' select ColorEditorPanel or ColorPallet"
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 16:27:14'!
conditionalStatement
	"Conditional Statements"
	^
'| x switch result |
x _ 11.
x > 10 ifTrue: [Transcript show: ''ifTrue''; newLine].		"if then"
x > 10 ifFalse: [Transcript show: ''ifFalse''; newLine].	"if else"
x > 10										"if then else"
   ifTrue: [Transcript show: ''ifTrue''; newLine]
   ifFalse: [Transcript show: ''ifFalse''; newLine].
x > 10										"if else then"
   ifFalse: [Transcript show: ''ifFalse''; newLine]
   ifTrue: [Transcript show: ''ifTrue''; newLine].
Transcript
   show:
      (x > 10
         ifTrue: [''ifTrue'']
         ifFalse: [''ifFalse'']);
   newLine.
Transcript																"nested if then else"
   show:
      (x > 10
         ifTrue: [x > 5
            ifTrue: [''A'']
            ifFalse: [''B'']]
         ifFalse: [''C'']);
   newLine.
switch _ Dictionary new.											"switch (case) functionality"
switch at: $A put: [Transcript show: ''Case A''; newLine].
switch at: $B put: [Transcript show: ''Case B''; newLine].
switch at: $C put: [Transcript show: ''Case C''; newLine].
result _ (switch at: $B) value.

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 16:33:43'!
conversion
	"Conversion"
	^
'| x |
x _ 3.99 asInteger.			"convert number to integer (truncates in Cuis)"
x _ 3.99 asFraction.			"convert number to fraction"
x _ 3 asFloat.					"convert number to float"
x _ 65 asCharacter.			"convert integer to character"
x _ $A asciiValue.			"convert character to integer"
x _ 3.99 printString.		"convert object to string via printOn:"
x _ 3.99 storeString.		"convert object to string via storeOn:"
x _ 15 printStringBase: 16.
x _ 15 storeStringBase: 16.

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'RNG 12/13/2019 13:07:13'!
customBrowsers
	"Custom Browsers"
	^
'"Open a window with all methods from a particular category"
Smalltalk 
	browseMessageList: (Smalltalk allMethodsInCategory: ''testing'')
	name: ''Testing methods''
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 16:38:28'!
date
	"Date"
	^
'| w x y b block str fmt |		"For efficient viewing, have a Transcript open and use Cmd-d on these statements"
x _ Date today.								"create date for today"
w _ Date dateAndTimeNow.					"create array with current date and time"
x _ Date newDay: 12 month: #July year: 1999.	"create date from parts"
x _ Date fromDays: 36002.					"create date from elapsed days since 1/1/1901"
y _ Date dayOfWeek: #Monday.				"day of week as int (1-7)"
y _ Date indexOfMonth: #August.			"month of year as int (1-12)"
y _ Date daysInMonth: 2 forYear: 1996.	"day of month as int (1-31)"
y _ Date daysInYear: 1996.					"days in year (365|366)"
y _ Date nameOfDay: 1.						"weekday name (#Monday,...)"
y _ Date nameOfMonth: 3.					"month name (#January,...)"
y _ Date leapYear: 1997.					"1 if leap year; 0 if not leap year"
y _ x weekday.									"day of week (#Monday,...)"
y _ x previous: #Monday.					"date for previous day of week (one week ago)"
y _ x dayOfMonth.								"day of month (1-31)"
y _ x firstDayOfMonth.						"day of year for first day of month"
y _ x monthName.								"month of year (#January,...)"
y _ x monthIndex.								"month of year (1-12)"
y _ x daysInMonth.							"days in month (1-31)"
y _ x year.										"year (19xx)"
y _ x daysInYear.								"days in year (365|366)"
y _ x daysLeftInYear.						"days left in year (364|365)"
y _ x printFormat: #(2 1 3 $/ 1 1).		"print formatted date"
b _ (x < Date today).						"comparison"
y _ x julianDayNumber.
y _ x mmddyyyy.	"Answer the receiver rendered in standard fmt mm/dd/yyyy. Note that the name #mmddyyyy is slightly misleading -- the month and day numbers don''t show leading zeros, so that for example feb 1 1996 is 2/1/96"
y _ x month.
y _ x monthAbbreviation.
y _ x monthIndex.
y _ x monthName.
fmt _ #(1 2 3 $  3 1 ).		"Specify a format for the date, in the following scheme:"
									"#(item item item sep monthfmt yearfmt twoDigits) 
									items: 1=day 2=month 3=year will appear in the order given, 
									separated by sep which is either an ascii code or character. 
									monthFmt: 1=09 2=Sep 3=September 
									yearFmt: 1=1996 2=96 
									digits: (missing or)1=9 2=09. 
									See the examples in printOn: and mmddyy"
y _ x printFormat: fmt.	 	"Answer a String describing the receiver using the format denoted by the argument, fmt"
str _ ReadWriteStream on: String new.	"Specify a stream"
y _ x printOn: str.

str _ String new writeStream.	
y _ x printOn: str format: #(3 2 1 $.  1 2 ).  "the stream, not the receiver, contains the date in the specified format"
str contents.

y _ x secondsSinceSqueakEpoch.	"Answer the seconds since the Squeak epoch: 1 January 1901"
y _ x storeOn: str.
y _ x week.
y _ x weekday. 			"Answer the name of the day of the week on which the receiver falls."
y _ x weekdayIndex. 		"Sunday=1, ... , Saturday=7"
y _ x year.
y _ x yearNumber.
y _ x yyyymmdd. 			"Format the date in ISO 8601 standard like ''2002-10-22''."
block _ [ :d :m :y | {d. m. y} ].  "Specify an order for the date"
y _ x dayMonthYearDo: block. "Supply integers for day, month and year to aBlock and return the result"
y _ x dayMonthYearDo: [ :d :m :y | {y. m. d.} ].  "Order determined by block, not method name"
y _ x dayOfMonth. 		"Answer the day of the month represented by the receiver."
y _ x dayOfWeek. 			"Answer the day of the week represented by the receiver."
y _ x dayOfWeekName. 	"Answer the day of the week represented by the receiver."
y _ x dayOfYear.			"Answer the day of the year represented by the receiver."
y _ x daysInMonth.		"Answer the number of days in the month represented by the receiver."
y _ x daysInYear.			"Answer the number of days in the year represented by the receiver."
y _ x daysLeftInYear.
y _ x firstDayOfMonth.
y _ x isLeapYear.

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 4/12/2019 14:50:40'!
debugging
	"Debugging"
	^
'| a b x |
	"Some statements in this topic are designed to cause an error."
x _ Object new.
x yourself.									"returns receiver"
x inspect.									"open object inspector window"
x confirm: ''Is this correct?''.
x halt.										"breakpoint to open debugger window"
x halt: ''Halt message''.
x notify: ''Notify text''.
x error: ''Error string''.				"open up error window with title"
Smalltalk beep.
x shouldNotImplement.					"flag message should not be implemented"
x subclassResponsibility.				"flag message as abstract"
x errorImproperStore.					"flag an improper store into indexable object"
x errorNonIntegerIndex.					"flag only integers should be used as index"
x errorSubscriptBounds: 13.			"flag subscript out of bounds"
x primitiveFailed.						"system primitive failed"

a _ ''A1''. b _ ''B2''. a become: b.		"switch two objects, if neither is a SmallInteger"
Transcript show: a, b; newLine.

"Doing ''self halt.'' in Morphic code can be risky, because it can open an infinite sequence of debuggers."
{2. x. a.} print. 						"alternative to ''self halt.''"
thisContext printStack: 10.			"alternative to ''self halt.'' showing n lines of the call stack"

x doesNotUnderstand: (Message selector: #foo).  "flag that the message is not handled"

"Writing to-do notes to yourself can be done as follows:"
self flag: #someSymbol  "a reminder comment"
"...where you choose #someSymbol to be something you will not forget (your initials?)."
"Then, to retrieve all such messages, browse senders of #someSymbol using Cmd-n or the SmalltalkEditor menu."
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 16:52:18'!
dictionary
	"Dictionary"
	^
'"	
	Dictionary:
	IdentityDictionary:   uses identity test (== rather than =)
"
| b x y sum max aDx |		"For efficient viewing, have a Transcript open and use Cmd-d on these statements"
x _ Dictionary new.							"allocate collection"
x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.	"add element to collection"
x at: #e put: 3.								"set element at index; see NOTE"
b _ x isEmpty.									"test if empty"
y _ x size.										"number of elements"
y _ x at: #a ifAbsent: [].					"retrieve value for key #a"
y _ x keyAtValue: 3 ifAbsent: [].		"retrieve key for given value with error block"
y _ x removeKey: #e ifAbsent: [].		"remove element from collection"
b _ x includes: 3.							"test if element is in values collection"
b _ x includesKey: #a.						"test if element is in keys collection"
y _ x occurrencesOf: 3.						"number of times object in collection"
y _ x keys.										"set of keys"
y _ x values.									"bag of values"
x do: [:a | Transcript show: a printString; newLine].  "iterate over the values collection"
x keysDo: [:a | Transcript show: a printString; newLine].  "iterate over the keys collection"
x associationsDo: [:a | Transcript show: a printString; newLine].  "iterate over the associations"
x keysAndValuesDo: [:aKey :aValue | Transcript	"iterate over keys and values"
   show: aKey printString; space;
   show: aValue printString; newLine].
b _ x allSatisfy: [:a | (a >= 1) & (a <= 4)].  "test if all elements meet condition"
y _ x select: [:a | a > 2].				"return a dictionary with values that pass test"
y _ x reject: [:a | a < 2].				"return a dictionary with values that fail test"
y _ x collect: [:a | a + a].				"transform each element for new dictionary"
y _ x detect: [:a | a > 3] ifNone: [].	"return first value that passes test"
sum _ 0. x do: [:a | sum _ sum + a]. sum.	"sum the values"
sum _ x inject: 0 into: [:a :c | a + c].	"sum the values"
max _ x inject: 0 into: [:a :c | (a > c)	"find max value in collection"
   ifTrue: [a]
   ifFalse: [c]].
y _ x asArray.									"collect values in an array"
y _ x asOrderedCollection.					"collect values in an ordered collection"
y _ x asSortedCollection.					"collect values in a sorted collection"
y _ x asBag.									"collect values in a bag"
y _ x asSet.									"collect values in a set"

Smalltalk at: #CuisGlobal put: ''Cuis entry''.	"put global in Smalltalk Dictionary"
x _ Smalltalk at: #CuisGlobal.					"read global from Smalltalk Dictionary"
Transcript show: (CuisGlobal printString).	"entries are directly accessible by name"
Smalltalk keys do: [ :k |						"print out all non-class globals"
   ((Smalltalk at: k) isKindOf: Class)
      ifFalse: [Transcript show: k printString; newLine]].
aDx _ Dictionary new.						"set up user defined dictionary"
aDx at: #MyVar1 put: ''hello1''.			"put entry in dictionary; see NOTE"
aDx add: #MyVar2->''hello2''.				"add entry to dictionary use key->value combo; see NOTE"
aDx size.		"dictionary size"
aDx keys do: [ :k |							"print out keys in dictionary"
   Transcript show: k printString; newLine].
aDx values do: [ :k |						"print out values in dictionary"
   Transcript show: k printString; newLine].
aDx keysAndValuesDo: [:aKey :aValue |	"print out keys and values"
   Transcript
      show: aKey printString;
      space;
      show: aValue printString;
      newLine].
aDx associationsDo: [:aKeyValue |		"another iterator for printing key values"
   Transcript show: aKeyValue printString; newLine].
Smalltalk removeKey: #CuisGlobal ifAbsent: [].  "remove entry from Smalltalk dictionary"

"NOTE: methods in subclasses of Collection, of which Dictionary is one, answer
 the ARGUMENT instead of the resulting collection. Examples of such 
 methods are #add: and #at:put:. Sending #yourself to the collection
 will answer the collection instead of the argument."

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 2/24/2015 14:38'!
dynamic
	"Dynamic Message Calling/Compiling"
	^
'| receiver message result argument keyword1 keyword2 argument1 argument2 |

"unary message"
receiver _ 5.
message _ ''factorial'' asSymbol.
result _ receiver perform: message.
result _ Compiler evaluate: ((receiver storeString), '' '', message).
result _ (Message new setSelector: message arguments: #()) sentTo: receiver.

"binary message"
receiver _ 1.
message _ ''+'' asSymbol.
argument _ 2.
result _ receiver perform: message withArguments: (Array with: argument).
result _ Compiler evaluate: ((receiver storeString), '' '', message, '' '', (argument storeString)).
result _ (Message new setSelector: message arguments: (Array with: argument)) sentTo: receiver.

"keyword messages"
receiver _ 12.
keyword1 _ ''between:'' asSymbol.
keyword2 _ ''and:'' asSymbol.
argument1 _ 10.
argument2 _ 20.
result _ receiver
   perform: (keyword1, keyword2) asSymbol
   withArguments: (Array with: argument1 with: argument2).
result _ Compiler evaluate:
   ((receiver storeString), '' '', keyword1, (argument1 storeString) , '' '', keyword2, (argument2 storeString)).
result _ (Message
   new
      setSelector: (keyword1, keyword2) asSymbol
      arguments: (Array with: argument1 with: argument2))
   sentTo: receiver.

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 12/7/2015 15:50'!
exceptions
	"Exceptions"
	^
'"
To see the variety of exceptions that can be useful in Cuis, open a hierarchy browser on Error.
"
| x y |

x _  1. y _ 0.
[x / y] on: ZeroDivide do: [^ ''that is big''].

[''testFile.txt'' asFileEntry fileContents] on: MessageNotUnderstood do: [^ nil].	"avoid the exception for Cancel during the dialog"	

[''testFile.txt'' asFileEntry fileContents] on: FileDoesNotExistException do: [nil confirm: ''Rather do it yourself?''].	"avoid the file-does-not-exist dialog"	

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 2/23/2016 12:15'!
feature
	"Features"
	^
'"Part of the Cuis strategy to keep a clean, small kernel is the separation of system features into smaller, more easily understood Packages.

The basic idea is that a Feature is implemented by the Package(s) it contains.

You can load Features in your code or by..."

Feature require: #''Feature-Name''.

"You can also use the File List window to install a feature which can be in any directory (World Menu -> Open-> File List). After selecting a feature, click on ''installPackage''.

A feature may depend on other features and particular versions of those features.  Cuis checks for dependencies and if all dependencies are satisfied will load packages in the proper order.

You can create your own packages and add/remove feature requirements using the Package Browser.  World Menu -> Open -> Installed Packages


There are many features for Cuis available at GitHub.

In a web browser, 
1. view https://github.com
2. type ''Cuis-Smalltalk'' in the search box
3. see the number of features available.

When you invoke:"

Feature require: #''Feature-Name''.

"Cuis will search for packages (*.pck.st) which supply the feature in...

1. the image directory and its subdirectories ''Packages'' and ''CompatibilityPackages'' 
2. siblings of the image directory whose names start with ''Cuis-Smalltalk*'' and their subdirectories named ''Packages'' and ''CompatibilityPackages''.
"

Smalltalk imagePath.		"Cuis image directory"


"Additional information is available on the web page:

''https://github.com/Cuis-Smalltalk/Cuis-Smalltalk-Dev/blob/master/Documentation/CuisAndGitHub.md''


For an example of specifying feature requirements, consider the package file ''Cuis-Smalltalk-Dev/Packages/Graphics-Files-Additional.pck.st'' which can be viewed with the File List browser. It provides feature ''Graphics-Files-Additional'' and requires Feature ''Compression''. If in code or in a Workspace you invoke (Cmd-d):"

Feature require: #''Graphics-Files-Additional''.

"...then the Compression package will be loaded, followed by Graphics-Files-Additional."


Feature require: #''Core-Packages''. 		"load all core Cuis Packages"
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 16:59:23'!
fileMan
	"File Operations"
	^
'| b c file dirEntry fullPath |	"For efficient viewing, have a Transcript open and use Cmd-d on these statements"

DirectoryEntry roots.						"answer the drive or drives"
c _ DirectoryEntry currentDirectory.	"answer the current directory"
''testFile.txt'' asFileEntry fileContents: ''Test me now''.  "answer the directory and name of a new file; set its contents"
''testFile.txt'' asFileEntry fileContents.	"print contents of a file"

''testFile.txt'' asFileEntry
	forceWriteStreamDo: [ :ios |			"overwrite old file contents"
		ios nextPut: $M.
		ios nextPutAll: ''y text ''.
		ios nextPutAll: ''data''.
		].
''testFile.txt'' asFileEntry fileContents.	"print contents of a file"

''testFile.txt'' asFileEntry appendStreamDo: [ :fileStream |
	fileStream newLine.
	fileStream nextPutAll: ''Second text line''; newLine.
	].
''testFile.txt'' asFileEntry fileContents. 	"print it"

''testFile.txt'' asFileEntry appendContents: ''The quick red fox''.

''testFile.txt'' asFileEntry fileContents. 	"print it"

''testFile.txt'' asFileEntry forceWriteStreamDo: [ :fileStream |  "overwrite the file"
	| refStyream sharedPoint input |
	"Construct the test data."
	refStyream _ ReferenceStream on: fileStream.
	input _ Array new: 9.
	input at: 1 put: nil.
	input at: 2 put: true.
	input at: 3 put: false.
	input at: 4 put: #(-4 -4.0 ''four'' four).
	input at: 5 put: (Form extent: 63 @ 50 depth: 8).
	(input at: 5) fillWithColor: Color lightOrange.
	input at: 6 put: 1024 @ -2048.
	input at: 7 put: input.							"a cycle"
	input at: 8 put: (Array with: (sharedPoint _ 0 @ -30000)).
	input at: 9 put: sharedPoint.
	refStyream nextPut: input
	].
(''testFile.txt'' asFileEntry readStreamDo: [ :fileStream |
	(ReferenceStream on: fileStream) next.
	]) explore.

''testFile.txt'' asFileEntry delete.			"remove the test file"

b _ ''testFile.txt'' asFileEntry exists.		"test for existence of the file"

''testFile.txt'' asFileEntry fileContents.	"get the file-not-found dialog; note what Cancel does"

[''testFile.txt'' asFileEntry fileContents] on: MessageNotUnderstood do: [^ nil].  "avoid the exception for Cancel during the dialog"	

''testFile.txt'' asFileEntry assureExistence.	"put it back empty"

''testFile.txt'' asFileEntry fileContents. 		"print it"

''testFile.txt'' asFileEntry delete.				"remove the test file"

fullPath _ c pathName, ''\TestDir''.				"identify a directory"
FileIOAccessor new createDirectory: fullPath.	"create a directory"
FileIOAccessor new deleteDirectory: fullPath.	"delete directory; must be empty"
FileIOAccessor new createDirectory: ''./\TestDir''.	"another way, using regex"
FileIOAccessor new deleteDirectory: fullPath.	"delete directory; must be empty"

"The following statements show one way to either create an empty file, or use the file as-is if it already exists"
c _ DirectoryEntry currentDirectory.				"answer the current directory"
dirEntry _ c pathName asDirectoryEntry / ''testFile.txt''.  "create a system-independent path expression"
fullPath _ dirEntry asString.							"convert path expression to string"
fullPath asFileEntry assureExistence.				"create testFile.txt if it does not exist"
fullPath asFileEntry assureExistence.				"do nothing if testFile.txt already exists"
''testFile.txt'' asFileEntry delete.					"remove the test file"

DirectoryEntry smalltalkImageDirectory.			"answer the Smalltalk image directory"
DirectoryEntry vmDirectory.							"answer the VM directory"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'jmv 6/11/2020 17:04:45'!
font
	"Fonts"
	^
'"
Cuis includes by default one StrikeFont, but can also use TrueType fonts.

To add additional included fonts
"

FontFamily readAdditionalTrueTypeFonts.

FontFamily familyNames.				"list the installed fonts"

((StringMorph contents: ''Text in the selected font.'') changeFont) openInHand. "look at an example"
"
The selection of currently installed fonts may be viewed from the text editor:

World > Open... > Text Editor
...then use (Cmd-k) to see a list of installed fonts.

To use any TrueTypeFont, just open the FileList, select any .ttf file, and click on [read font].
"
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 17:01:26'!
form
	"Forms"
	^
'| x y |
x _ Form dotOfSize: 20.	"Make a form containing a dot (as yet unseen)."
x displayAt: 500@200.	"Cause the form to appear at a point on the display."
Display restore.			"Erase what was displayed."

x _ Form extent: 22@18.
	"Answer a Form with a blank bitmap of depth 1."

x _ Form extent: 22@18 depth: 8.
	"Answer a Form with blank bitmap 22 pixels wide and 18 pixels deep having color depth 8."
	
y _ x getCanvas.			"convert form to canvas (a BitBltCanvas)"

EllipseMorph new drawOn: y; morphExtent: 300@200; openInWorld.
	"Display a morph on a canvas"

x _ Form fromUser.
	"Answer a Form with bitmap initialized from the area of the display screen designated by the user."

x _ Form toothpaste: 15.
	"Draw with mouse button down; terminate by option-click."

x _ Form 
		verticalGradient: 120
		topColor: Color white
		bottomColor: (Color gray: 0.65).
	"Answer a fixed-width form, 120 pixels high, which illustrates shading."

x fillColor: Color green.
	"Set all pixels in the receiver to green."

y _ x icon.
	"Answer a 16 x 16 icon of the receiver"

y _ x magnifyBy: 1.5. 
	"Answer a Form created as a scaling of the receiver. Scale may be a Float, and may be greater or less than 1.0."

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 17:02:59'!
heap
	"Heap"
	^
'| x n sort |
x _ Heap new.						"Answer a heap of default size"
x _ Heap new: (n _ 7).			"Answer a heap of size n"
x _ Heap with: #purple with: #green.	"Answer a Heap with the two arguments as elements."
sort _ [:a :c | a > c].		"Define a sorting order"
x _ Heap withAll: #(11 32 19 21).	"Create a new heap with all the elements from a collection"
x sortBlock: sort.						"Specify how to sort the heap"
x _ Heap withAll: #(11 32 19 21) sortBlock: sort.	"Create a new heap sorted according to a sortBlock"
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 5/11/2020 17:59:02'!
internalStream
	"Internal  Streams"
	^
'| b x ios str |			"For efficient viewing, have a Transcript open and use Cmd-d on these statements"
ios _ ReadStream on: ''Hello read stream''.
ios _ ReadStream on: ''Hello read stream'' from: 1 to: 5.
[(x _ ios nextLine) notNil]
   whileTrue: [Transcript show: x; newLine].
ios position: 3.
ios position.
x _ ios next.
x _ ios peek.
x _ ios contents.
b _ ios atEnd.

ios _ ReadWriteStream on: ''Hello read stream''.
ios _ ReadWriteStream on: String new.
ios _ ReadWriteStream on: ''Hello read stream'' from: 1 to: 5.
ios _ ReadWriteStream with: ''Hello read stream''.
ios _ ReadWriteStream with: ''Hello read stream'' from: 1 to: 10.
ios position: 0.
[(x _ ios nextLine) notNil]
   whileTrue: [Transcript show: x; newLine].
ios position: 6.
ios position.
ios nextPutAll: ''Chris''.
x _ ios next.
x _ ios peek.
x _ ios contents.
b _ ios atEnd.

str _ String new writeStream.				"use a stream to form a string"
str nextPutAll: ''As of ''.					"more efficient than concatenation"
str nextPutAll: Date today asString.
str nextPut: $,; space.						"newLine and tab are also possible"
str nextPutAll: Float pi printString, '' radians = ''.  "concatenation can be used"
str nextPutAll: Float pi radiansToDegrees printString.
str nextPutAll: '' degrees.''; newLine.  "complete the formation"
x _ str contents.								"to get the results"

x _ String streamContents: [:string |	"a more compact way"
	string 
		nextPutAll: ''As of '';
		nextPutAll: Date today asString;
		nextPut: $,; space;
		nextPutAll: Float twoPi printString, '' radians = '';  "concatenation can be used"
		nextPutAll: Float twoPi radiansToDegrees printString;
		nextPutAll: '' degrees.''; newLine].  "complete the formation"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 17:07:36'!
interval
	"Intervals"
	^
'| b x y sum max |
x _ Interval from: 5 to: 10.					"create interval object"
x _ 5 to: 10.
x _ Interval from: 5 to: 10 by: 2.			"create interval object with specified increment"
x _ 5 to: 10 by: 2.
b _ x isEmpty.										"test if empty"
y _ x size.											"number of elements"
x includes: 9.										"test if element is in collection"
x do: [:k | Transcript show: k printString; newLine].	"iterate over interval"
b _ x allSatisfy: [:a | (a >= 1) & (a <= 4)].	"test if all elements meet condition"
y _ x select: [:a | a > 7].					"return collection of elements that pass test"
y _ x reject: [:a | a < 2].					"return collection of elements that fail test"
y _ x collect: [:a | a + a].					"transform each element for new collection"
y _ x detect: [:a | a > 3] ifNone: [].		"return first element that passes test"
y _ x findFirst: [:a | a > 6].				"find position of first element that passes test"
sum _ 0. x do: [:a | sum _ sum + a]. sum.	"sum elements"
sum _ 0. 1 to: (x size) do: [:a | sum _ sum + (x at: a)]. sum.	"sum elements"
sum _ x inject: 0 into: [:a :c | a + c].	"sum elements"
max _ x inject: 0 into: [:a :c | (a > c)	"find max element in collection"
   ifTrue: [a]
   ifFalse: [c]].
y _ x asArray.										"convert to array"
y _ x asOrderedCollection.						"convert to ordered collection"
y _ x asSortedCollection.						"convert to sorted collection"
y _ x asBag.										"convert to bag collection"
y _ x asSet.										"convert to set collection"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 5/11/2020 20:36:28'!
introduction
	"Using Terse Guide"
	^
'"
You are reading this in the text pane of the Terse Guide window. This pane is a kind of Workspace and is managed by the SmalltalkEditor of Cuis. This means that you can Do (Cmd-d) or Print (Cmd-p) statements in order to see the result. If you have a Transcript open, the result will appear in it.

The SmalltalkEditor enables you to Do or Print a statement when the cursor is in the statement. It is not necessary to first highlight the entire statement, unless it continues on more than one line.

This text pane is refreshed each time it is accessed. You can change the examples and run them without hurting anything. Go ahead and experiment!!

The Terse Guide does not attempt to provide the entire protocol of a topic. You are encouraged to explore further by using the Protocol Browser as follows:

Button 1>World>Open...>Browser 
then in the upper right pane:
Button 2>Message List>browse protocol

You can narrow the scope of protocol browsing by selecting a class in the upper left pane of the Protocol Browser.
"
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 17:12:40'!
iterationStatement
	"Iterations"
	^
'| x y |		"For efficient viewing, have a Transcript open and use Cmd-d on these statements"
x _ 4. y _ 1.

#(5 4 3) do: [:a | x _ x + a].					"iterate over a sequenceable collection"
x.

[x > 0] whileTrue: [x _ x - 1. y _ y * 2].	"while true loop"
y.

[x >= 4] whileFalse: [x _ x + 1. y _ y * 2].	"while false loop"
y.

x timesRepeat: [y _ y * 2].						"times repeat loop (i _ 1 to x)"
y.

1 to: x do: [:a | y _ y * 2].						"for loop"
y.

1 to: x by: 2 do: [:a | y _ y / 2].				"for loop with specified increment"
y.
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'KenD 6/2/2020 20:59:34'!
layoutMorph
	"Layout Morph"
	^
'| myLayout |
myLayout _ LayoutMorph new.		"this illustrates a mistake"

"A LayoutMorph places its submorphs in a horizontal Row or a vertical Column"
myLayout _ LayoutMorph newColumn.
myLayout _ LayoutMorph newRow color: Color cyan.
myLayout openInWorld.
myLayout morphExtent: (6 * myLayout morphExtent). "Make larger to hold submorphs"

myLayout addAllMorphs: { EllipseMorph initializedInstance. ImageMorph initializedInstance. BorderedRectMorph initializedInstance. }.

"When there is space left over, the submorphs can be shifted
 along the layout axis.  This is the axisEdgeWeight, a number from
 0 to 1, which can also be specified by a symbol."

myLayout axisEdgeWeight: #rowRight.
myLayout axisEdgeWeight: #center.
myLayout axisEdgeWeight: #rowLeft.

myLayout beColumn.
myLayout direction." #vertical "
myLayout axisEdgeWeight: #columnBottom.
myLayout axisEdgeWeight: #center.
myLayout axisEdgeWeight: #columnTop.

myLayout beRow.
myLayout direction. " #horizontal "

myLayout separation: 10@20. "set the amount of separation for submorphs"	
myLayout xSeparation.			"answer the x component of the specified separation"
myLayout ySeparation.			"answer the y component of the specified separation"
myLayout beColumn.

"Submorphs may also have a LayoutSpec to specify proportion and offAxis placement"
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'KenD 6/3/2020 15:31:03'!
layoutSpec
	"Layout Specification"
	^
'| layout ellipse ellipseLayout image interiorLayout rect |
"A LayoutMorph places its submorphs along the layout axis.
 The submorphs may use a LayoutSpec to specify, for width and height,
 a fixed or porportional extent, a minimum extent, an offAxisEdgeWeight."

"Some Morphs to use"
ellipse _ EllipseMorph initializedInstance.
rect _ BorderedRectMorph initializedInstance.
image _ ImageMorph initializedInstance.
ellipseLayout _ (LayoutSpec proportionalWidth: 0.3 fixedHeight: 60 offAxisEdgeWeight: #rowTop).
ellipseLayout proportionalWidth: 0.5  minimum: 40.
ellipse layoutSpec: ellipseLayout.
rect layoutSpec: (LayoutSpec fixedWidth: 80 proportionalHeight: 0.6 offAxisEdgeWeight: #center).
"Layouts can contain layouts"
interiorLayout _ LayoutMorph newColumn.
interiorLayout separation: 10@20.
interiorLayout layoutSpec: (LayoutSpec proportionalWidth: 0.3 proportionalHeight: 60).
interiorLayout addMorph: EllipseMorph initializedInstance.
interiorLayout addAdjusterAndMorph: (RectangleLikeMorph new) proportionalWidth: 1.0.
"A LayoutMorph to contain them"
layout _ LayoutMorph newRow.
layout addAllMorphs: { ellipse. image. interiorLayout. rect. }.
layout openInWorld.
"Make it bigger"
layout morphExtent: (3 * layout morphExtent).
"Make it colorful"
interiorLayout color: Color cyan.
layout color: Color green lighter lighter.
"add handles; mouse grab lower-right yellow circle with tooltip Change Size."
layout addHalo.
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'jmv 5/6/2020 11:14:41'!
literals
	"Literals"
	^
'"Literals are objects that are created when you compile a method. They are always available when the method is run, and the same instance is used each time. Remember that when a method is run, the source code, compiled to create it, is no longer used at all. This includes the source code for the literals. In the example below, the CompiledMethod will not have a string ''3.14'', but the Float object built after it.
Note: It is considered bad practice to later modify them, as they would no longer match their source code."
| b x |
b _ true.									"true pseudo-variable"
b _ false.									"false pseudo-variable"
x _ nil.										"nil object pseudo-variable"
x _ 1.										"SmallInteger literal"
x _ 3.14.									"Float literal"
x _ 2e-2.									"Fraction literal"
x _ 2.0e-2.									"Float literal"
x _ 7/8.										"Fraction literal"
x _ 16r0F.									"SmallInteger literal".
x _ 16rFFFFFFFF.							"LargePositiveInteger literal".
x _ 16rFFFFFFFF negated.				"LargeNegativeInteger literal".
x _ -1.										"negative SmallInteger literal"
x _ ''Hello''.								"String literal"
x _ ''I''''m here''.							"single quote escape"
x _ $A.										"Character literal"
x _ $ .										"Character literal (space)"
x _ #aSymbol.								"Symbol literal"
x _ #(3 2 1).								"Array literal"
x _ #(''abc'' 2 $a).						"mixing of types allowed (all literal)"
x _ #[3 2 1 0].							"ByteArray literal"
x _ #[1.0 3.141592 6.02e23].			"Float64Array literal"

x _ {''Hello'' size. Float pi. 1.0 arcTan }.    "Warning: NOT a literal. Created on each run"
x _ `{''Hello'' size. Float pi. 1.0 arcTan }`.  "Backtick syntax. Anything can be a literal!!"
x _ `{ 1. 3. 5. 7. 11. 13. 17} asSet`.          "A literal Set"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 17:49:15'!
metaclass
	"Class / Metaclass"
	^
'| b x |
x _ String name.							"class name"
x _ String category.						"organization category"
x _ String comment.						"class comment"
x _ String kindOfSubclass.				"subclass type - subclass: variableSubclass, etc"
x _ String definition.					"class definition"
x _ String instVarNames.				"immediate instance variable names"
x _ String allInstVarNames.			"accumulated instance variable names"
x _ String classVarNames.				"immediate class variable names"
x _ String allClassVarNames.			"accumulated class variable names"
x _ String sharedPools.					"immediate dictionaries used as shared pools"
x _ String allSharedPools.				"accumulated dictionaries used as shared pools"
x _ String selectors.					"message selectors for class"
x _ String sourceCodeAt: #indexOf:.	"source code for specified method"
x _ String allInstances.				"collection of all instances of class"
x _ String superclass.					"immediate superclass"
x _ String allSuperclasses.			"accumulated superclasses"
x _ String withAllSuperclasses.		"receiver class and accumulated superclasses"
x _ String subclasses.					"immediate subclasses"
x _ String allSubclasses.				"accumulated subclasses"
x _ String withAllSubclasses.			"receiver class and accumulated subclasses"
b _ String instSize.						"number of named instance variables"
b _ String isFixed.						"true if no indexed instance variables"
b _ String isVariable.					"true if has indexed instance variables"
b _ String isPointers.					"true if index instance vars contain objects"
b _ String isBits.						"true if index instance vars contain bytes/words"
b _ String isBytes.						"true if index instance vars contain bytes"
b _ String isWords.						"true if index instance vars contain words"
Object withAllSubclasses size.		"get total number of class entries"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'KenD 5/1/2020 16:49:17'!
methodCall
	"Method Calls"
	^
'"
	Method calls:
		- unary methods are messages with no arguments	
		- binary methods
		- keyword methods are messages with selectors including colons
 
	standard categories/protocols:
		- initialize-release    (methods called for new instance)
		- accessing             (get/set methods)
		- testing               (boolean tests - is)
		- comparing             (boolean tests with parameter
		- displaying            (gui related methods)
		- printing              (methods for printing)
		- updating              (receive notification of changes)
		- private               (methods private to class)
		- instance-creation     (class methods for creating instance)
"
| x |
x _ 2 sqrt.									"unary message"
x _ 2 raisedTo: 10.						"keyword message"
x _ 194 * 9.								"binary message"
Transcript show: (194 * 9) printString; newLine.	"combination (chaining)"
x _ 2 perform: #sqrt.					"indirect method invocation"
Transcript									"cascading ; send multiple messages to first receiver"
   show: ''hello '' ;
   show: ''world'' ;
   newLine.
"Without semicolon cascading"
x := RectangleLikeMorph new.
x color: Color yellow.
x openInWorld.
"Using semicolon cascade -- we don''t need the variable, x"
RectangleLikeMorph new
	color: Color yellow; 
	openInWorld.
3 + 2; * 100.							"result=300. Sends message to same receiver (3)"
"Parentheses are used for grouping.  In many cases parentheses can be replaced by ::"
3 squared ; + 5.  " 8 -- semicolon -> cascade to _original_ receiver (3)"
(3 squared) + 5. " 14 -- use parens to group"
3 squared :: + 5. " 14 -- same but double-colon -> cascade to _result_ of expression at left (9)"
"The double colon is useful in eliding parens from complex keyword expressions"
(3 squared between: 2 squared and: 4 squared) ifTrue: [ #Great ] ifFalse: [ #Oops ].
3 squared between: 2 squared and: 4 squared :: ifTrue: [ #Great ] ifFalse: [ #Oops ].

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 3/5/2015 11:34'!
misc
	"Miscellaneous"
	^
'| x |
Smalltalk condenseChanges.					"compress the change file"
x _ FillInTheBlankMorph request: ''Prompt Me''.		"prompt user for input"
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 17:53:32'!
morph
	"Morphs"
	^
'| x y z w v |			"For efficient viewing, have a Transcript open and use Cmd-d on these statements"
x _ Morph new.				"a new but invisible morph"
x openInWorld.				"make visible in upper left of screen"
x openInHand.				"make visible at cursor location"
								"drag with the left button; show halos with the middle button"
x name: #MyName.			"used in the halos"
x name: ''My Name''.		"alternative, allowing imbedded blanks"
x morphPosition: 100@65.	"set the morph location"
y _ FillInTheBlankMorph request: ''Please Enter Something''.	"prompt user for input"
Feature require: #''Morphic-Widgets-Extras''.	"ensure a requirement is available for the following plot"
x _ FunctionGraphMorph initializedInstance openInHand.	"example, plotting two functions"
x _ SystemWindow new openInWorld.	"open a window"
x setLabel: ''Label for It''.
y _ LayoutMorph example10.				"organizing several morphs"
x addMorph: y.								"place morphs in a SystemWindow"

z _ x submorphs at: 1 :: submorphs at: 1 :: submorphs at: 2 :: submorphs at: 2.  "select a deep submorph"
	"The ''::'' syntax avoids nested parentheses"
z name.						"name of the deep submorph"
w _ z owningWindow.		"answer the first enclosing morph that is a kind of Window"
w class.
v _ x findDeepSubmorphThat: [:m | m name = #G] ifAbsent: [nil].	"find the submorph named #F"
v == z.						"verify that v and z are identical"

LayoutMorph includeInNewMorphMenu.
	"Return true for all classes that can be instantiated from the menu"

y _ Morph initializedInstance openInHand.
	"Answer an instance of the receiver which in some sense is initialized.  In the case of Morphs, this will yield an instance that can be attached to the Hand after having received the same kind of basic initialization that would be obtained from an instance chosen from the ''new morph'' menu.
	Return nil if the receiver is reluctant for some reason to return such a thing"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 17:56:38'!
orderedCollection
	"Ordered Collections"
	^
'| b x y sum max |			"For efficient viewing, have a Transcript open and use Cmd-d on these statements"
x _ OrderedCollection with: 4 with: 3 with: 2 with: 1.	"create collection with 4 elements"
x _ OrderedCollection new.						"allocate a collection"
x add: 3; add: 2; add: 1; add: 4; yourself.	"add element to collection"
y _ x addFirst: 5; yourself.					"add element at beginning of collection"
y _ x removeFirst;	yourself.				"remove first element in collection"
y _ x addLast: 6; yourself.					"add element at end of collection"
y _ x removeLast;	yourself.					"remove last element in collection"
y _ x addAll: #(7 8 9); yourself.			"add elements to the collection"
y _ x removeAll: #(1 8 7).						"remove elements from the collection and answer the removed elements"
x at: 2 put: 3; yourself.						"set element at index"
y _ x remove: 5 ifAbsent: [].					"remove element from collection"
b _ x isEmpty.										"test if empty"
y _ x size.											"number of elements"
y _ x at: 2.										"retrieve element at index"
y _ x first.										"retrieve first element in collection"
y _ x last.											"retrieve last element in collection"
b _ x includes: 5.								"test if element is in collection"
y _ x copyFrom: 2 to: 3.						"subcollection"
y _ x indexOf: 3 ifAbsent: [0].				"first position of element within collection"
y _ x occurrencesOf: 3.						"number of times object in collection"
x do: [:a | Transcript show: a printString; newLine].	"iterate over the collection"
b _ x allSatisfy: [:a | (a >= 1) & (a <= 4)].	"test if all elements meet condition"
y _ x select: [:a | a > 2].					"return collection of elements that pass test"
y _ x reject: [:a | a < 2].					"return collection of elements that fail test"
y _ x collect: [:a | a + a].					"transform each element for new collection"
y _ x detect: [:a | a > 3] ifNone: [].		"return first element that passes test"
y _ x findFirst: [:a | a < 2].				"find position of first element that passes test"
sum _ 0. x do: [:a | sum _ sum + a]. sum.	"sum elements"
sum _ 0. 1 to: (x size) do: [:a | sum _ sum + (x at: a)]. sum.  "sum elements"
sum _ x inject: 0 into: [:a :c | a + c].	"sum elements"
max _ x inject: 0 into: [:a :c | (a > c)	"find max element in collection"
   ifTrue: [a]
   ifFalse: [c]].
y _ x shuffled.									"randomly shuffle collection"
y _ x asArray.										"convert to array"
y _ x asOrderedCollection.						"convert to ordered collection"
y _ x asSortedCollection.						"convert to sorted collection"
y _ x asBag.										"convert to bag collection"
y _ x asSet.										"convert to set collection"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 17:57:06'!
point
	"Point"
	^
'| x y |
x _ 200@100.									"obtain a new point"
y _ x x.											"x coordinate"
y _ x y.											"y coordinate"
x _ 200@100 negated.							"negates y"
x _ (200@100) negated.						"negates x and y"
x _ (-200@ -100) abs.						"absolute value of x and y"
x _ (200.5@100.5) rounded.					"round x and y"
x _ (200.5@100.5) truncated.				"truncate x and y"
x _ 200@100 + 100.							"add scale to both x and y"
x _ 200@100 - 100.							"subtract scale from both x and y"
x _ 200@100 * 2.								"multiply x and y by scale"
x _ 200@100 / 2.								"divide x and y by scale"
x _ 200@100 // 2.								"divide x and y by scale"
x _ 200@100 \\ 3.								"remainder of x and y by scale"
x _ 200@100 + (50@25).						"add points"
x _ 200@100 - (50@25).						"subtract points"
x _ 200@100 * (3@4).							"multiply points"
x _ 200@100 // (3@4).						"divide points"
x _ 200@100 max: 50@200.					"max x and y"
x _ 200@100 min: 50@200.					"min x and y"
x _ 20@5 dotProduct: 10@2.					"sum of product (x1*x2 + y1*y2)"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 8/10/2018 18:30:51'!
popUpMenu
	"PopUpMenu"
	^
'| x y b arr lin |
b _ PopUpMenu confirm: ''Are you hungry?''.
b _ PopUpMenu confirm: ''Reboot universe'' orCancel: [''Nevermind''].
b _ PopUpMenu 
		confirm: ''Are you hungry?''
		trueChoice: ''yes, I''''m famished''
		falseChoice: ''no, I just ate''.
PopUpMenu inform: ''I like Cuis''.
arr _ #(''Alpha'' ''Beta'' ''Gamma'' ''something else'').
x _ (PopUpMenu labelArray: arr) startUpWithCaption: ''Please pick one.''.
lin _ #(3).
x _ (PopUpMenu labelArray: arr lines: lin) 
	startUpWithCaption: nil 
	at: 450@200
	allowKeyboard: false.
y _ (PopUpMenu withCaption: ''Special'' chooseFrom: ''Alpha\Beta\Gamma\something else'').

x _ FillInTheBlankMorph request: ''Enter the (whatever)'' initialAnswer: ''the default''.
		"when it is not possible to pre-determine an answer"
		
"For potentially long menus, the following includes ''more...'' and ''start over...'' behavior"
x _ (PopUpMenu labels: (String streamContents: [:s | 1 to: 100 do: [:i | s print: i; newLine]])
		lines: (5 to: 100 by: 5)) startUpWithCaption: ''Long Menu Example''.		
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 3/1/2015 12:58'!
primitive
	"Primitive"
	^
'	"Some messages in the system are responded to primitively. A primitive   
	response is performed directly by the interpreter rather than by evaluating   
	expressions in a method. The methods for these messages indicate the   
	presence of a primitive response by including <primitive: xx> before the   
	first expression in the method.   
	  
	Primitives exist for several reasons. Certain basic or ''primitive'' 
	operations cannot be performed in any other way. Smalltalk without 
	primitives can move values from one variable to another, but cannot add two 
	SmallIntegers together. Many methods for arithmetic and comparison 
	between numbers are primitives. Some primitives allow Smalltalk to 
	communicate with I/O devices such as the disk, the display, and the keyboard. 
	Some primitives exist only to make the system run faster; each does the same 
	thing as a certain Smalltalk method, and its implementation as a primitive is 
	optional.  
	  
	When the Smalltalk interpreter begins to execute a method which specifies a 
	primitive response, it tries to perform the primitive action and to return a 
	result. If the routine in the interpreter for this primitive is successful, 
	it will return a value and the expressions in the method will not be evaluated. 
	If the primitive routine is not successful, the primitive ''fails'', and the 
	Smalltalk expressions in the method are executed instead. These 
	expressions are evaluated as though the primitive routine had not been 
	called.  
	  
	The Smalltalk code that is evaluated when a primitive fails usually 
	anticipates why that primitive might fail. If the primitive is optional, the 
	expressions in the method do exactly what the primitive would have done (See 
	Number @). If the primitive only works on certain classes of arguments, the 
	Smalltalk code tries to coerce the argument or appeals to a superclass to find 
	a more general way of doing the operation (see SmallInteger +). If the 
	primitive is never supposed to fail, the expressions signal an error (see 
	SmallInteger asFloat).  
	  
	Each method that specifies a primitive has a comment in it. If the primitive is 
	optional, the comment will say ''Optional''. An optional primitive that is not 
	implemented always fails, and the Smalltalk expressions do the work 
	instead.  
	 
	If a primitive is not optional, the comment will say, ''Essential''. Some 
	methods will have the comment, ''No Lookup''. See Object 
	howToModifyPrimitives for an explanation of special selectors which are 
	not looked up.  
	  
	For the primitives for +, -, *, and bitShift: in SmallInteger, and truncated 
	in Float, the primitive constructs and returns a 16-bit 
	LargePositiveInteger when the result warrants it. Returning 16-bit 
	LargePositiveIntegers from these primitives instead of failing is 
	optional in the same sense that the LargePositiveInteger arithmetic 
	primitives are optional. The comments in the SmallInteger primitives say, 
	''Fails if result is not a SmallInteger'', even though the implementor has the 
	option to construct a LargePositiveInteger. For further information on 
	primitives, see the ''Primitive Methods'' part of the chapter on the formal 
	specification of the interpreter in the Smalltalk book."'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 17:58:02'!
rectangle
	"Rectangle"
	^
'| x y b |
x _ Rectangle fromUser.	"Have the user designate the top left and bottom right corners of a rectangle."
y _ Form fromDisplay: x.	"Create a virtual bit map from the rectangle." 
y display.						"Show the rectangle at 0@0 on the display."
Display restore.				"Erase the rectangle."
		
b _ x containsPoint: 195@150.
y _ x encompass: 195@150.

y _ x expandBy: 20.
	"Answer a Rectangle that is outset from the receiver by a Rectangle, Point, or scalar."

y _ x extendBy: 55@77.
	"Answer a Rectangle with the same origin as the receiver, but whose corner is offset by a Rectangle, Point, or scalar."
	
y _ x extent.
	"Answer the receiver''s width @ the receiver''s height."

y _ x flippedBy: #vertical centerAt: 220@330. 
	"Answer a copy of the receiver flipped #vertical or #horizontal, about aPoint."

y _ x insetBy: 60. 
	"Answer a Rectangle that is inset from the receiver by delta. delta is a Rectangle, Point, or scalar."

y _ x insetOriginBy: 20 cornerBy: 20@60. 
	"Answer a Rectangle that is inset from the receiver by a given amount from the origin and corner."

y _ x left.
	"Answer the position of the receiver''s left vertical line."

y _ x left: 70.
	"Answer the receiver with it''s left side at the argument."
	
x _ Rectangle center: 40@50 extent: 200@150. 
	"Answer a rectangle whose center is at a point and whose width by height is a point.  "

x _ Rectangle encompassing: {(55@44). (33@22). (300@122)}.
	"Answer a rectangle which encompasses a list of points."

x _ Rectangle left: 65 right: 300 top: 120 bottom: 350. 
	"Answer a rectangle whose left, right, top, and bottom coordinates are determined by the arguments."

x _ Rectangle origin: 100@80 corner: 400@500. 
	"Answer a rectangle whose corners (top left and bottom right) are determined by the arguments."

x _ Rectangle origin: 100@80 extent: 300@200. 
	"Answer a rectangle whose top left corner is at a point and width by height is specified by a point."

x _ Rectangle originFromUser: 400@300.
	"Answer a rectangle that is determined by having the user designate the top left corner. The width and height are determined by the argument."

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 17:59:42'!
set
	"Sets"
	^
'| b x y sum max |
x _ Set with: 4 with: 3 with: 2 with: 1.	"create collection with 4 elements"
x _ Set new.										"allocate collection"
x add: 4; add: 3; add: 1; add: 2; yourself.	"add element to collection"
y _ x addAll: #(7 8 9).							"add elements to the collection and answer the added elements"
y _ x removeAll: #(7 8 9).						"remove elements from the collection and answer the removed elements"
y _ x remove: 4 ifAbsent: [].					"remove element from collection"
b _ x isEmpty.										"test if empty"
y _ x size.											"number of elements"
x includes: 4.										"test if element is in collection"
x do: [:a | Transcript show: a printString; newLine].	"iterate over the collection"
b _ x allSatisfy: [:a | (a >= 1) & (a <= 4)].	"test if all elements meet condition"
y _ x select: [:a | a > 2].					"return collection of elements that pass test"
y _ x reject: [:a | a < 2].					"return collection of elements that fail test"
y _ x collect: [:a | a + a].					"transform each element for new collection"
y _ x detect: [:a | a > 3] ifNone: [].		"return first element that passes test"
sum _ 0. x do: [:a | sum _ sum + a]. sum.	"sum elements"
sum _ x inject: 0 into: [:a :c | a + c].	"sum elements"
max _ x inject: 0 into: [:a :c | (a > c)	"find max element in collection"
   ifTrue: [a]
   ifFalse: [c]].
y _ x asArray.										"convert to array"
y _ x asOrderedCollection.						"convert to ordered collection"
y _ x asSortedCollection.						"convert to sorted collection"
y _ x asBag.										"convert to bag collection"
y _ x asSet.										"convert to set collection"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 18:03:26'!
sortedCollection
	"Sorted Collections"
	^
'| b x y sum max |		"For efficient viewing, have a Transcript open and use Cmd-d on these statements"
x _ SortedCollection with: 4 with: 3 with: 2 with: 1.	"create collection with 4 elements"
x _ SortedCollection new.						"allocate collection"
x _ SortedCollection sortBlock: [:a :c | a > c]."set sort criteria"
x add: 3; add: 2; add: 1; add: 4; yourself.	"add element to collection"
y _ x addFirst: 5.								"Error: Not Appropriate for a SortedCollection"
y _ x removeFirst.								"remove first element in collection"
y _ x addLast: 6.									"add element at end of collection"
y _ x removeLast.									"remove last element in collection"
y _ x addAll: #(7 8 9).							"add elements to the collection and answer the added elements"
x sortBlock: [:a :c | a > c].					"sort in descending order"
y _ x removeAll: #(7 8 9).						"remove elements from the collection and answer the removed elements"
y _ x remove: 5 ifAbsent: [].					"remove element from collection"
b _ x isEmpty.										"test if empty"
y _ x size.											"number of elements"
y _ x at: 2.											"retrieve element at index"
y _ x first.											"retrieve first element in collection"
y _ x last.											"retrieve last element in collection"
b _ x includes: 4.									"test if element is in collection"
y _ x copyFrom: 2 to: 3.							"subcollection"
y _ x indexOf: 3 ifAbsent: [0].				"first position of element within collection"
y _ x occurrencesOf: 3.							"number of times object in collection"
x do: [:a | Transcript show: a printString; newLine].	"iterate over the collection"
b _ x allSatisfy: [:a | (a >= 1) & (a <= 4)].	"test if all elements meet condition"
y _ x select: [:a | a > 2].					"return collection of elements that pass test"
y _ x reject: [:a | a < 2].					"return collection of elements that fail test"
y _ x collect: [:a | a + a].					"transform each element for new collection"
y _ x detect: [:a | a > 3] ifNone: [].		"return first element that passes test"
y _ x findFirst: [:a | a < 3].				"find position of first element that passes test"
sum _ 0. x do: [:a | sum _ sum + a]. sum.	"sum elements"
sum _ 0. 1 to: (x size) do: [:a | sum _ sum + (x at: a)]. sum.	"sum elements"
sum _ x inject: 0 into: [:a :c | a + c].	"sum elements"
max _ x inject: 0 into: [:a :c | (a > c)	"find max element in collection"
   ifTrue: [a]
   ifFalse: [c]].
y _ x asArray.										"convert to array"
y _ x asOrderedCollection.						"convert to ordered collection"
y _ x asSortedCollection.						"convert to sorted collection"
y _ x asBag.										"convert to bag collection"
y _ x asSet.										"convert to set collection"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 18:05:11'!
string
	"Strings"
	^
'| b x y |
x _ ''This is a string''.						"string assignment"
x _ ''String'', ''Concatenation''.			"string concatenation"
b _ x isEmpty.									"test if string is empty"
y _ x size.										"string size"
y _ x at: 2.									"char at location"
y _ x copyFrom: 2 to: 4.					"substring"
y _ x indexOf: $a ifAbsent: [0].			"first position of character within string"
x _ String new: 4.							"allocate string object"
x													"set string elements"
   at: 1 put: $a;
   at: 2 put: $b;
   at: 3 put: $c;
   at: 4 put: $e;
   yourself.
x _ String with: $a with: $b with: $c with: $d.	"set up 4 elements at a time"
x do: [:a | Transcript show: a printString; newLine].	"iterate over the string"
b _ x allSatisfy: [:a | (a >= $a) & (a <= $z)].	"test if all elements meet condition"
y _ x select: [:a | a > $a].				"return all elements that meet condition"

x _ String streamContents: [:str |		"using a stream to form a string"
	str 											"more efficient than concatenation"
		nextPutAll: ''This string'';
		nextPutAll: '' is formed today, '';
		nextPutAll: Date today asString;
		nextPutAll: '', without using concatenation.''].

y _ x asSymbol.								"convert string to symbol"
y _ x asArray.									"convert string to array"
x _ ''KAAPED'' asByteArray.					"convert string to byte array"
y _ x asOrderedCollection.					"convert string to ordered collection"
y _ x asSortedCollection.					"convert string to sorted collection"
y _ x asBag.									"convert string to bag collection"
y _ x asSet.									"convert string to set collection"
y _ ''world'' shuffled.						"randomly shuffle string"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 18:06:34'!
symbol
	"Symbols"
	^
'| b x y |
x _ #Hello.									"symbol assignment"
y _ #String , #Concatenation.			"symbol concatenation (result is string)"
b _ x isEmpty.								"test if symbol is empty"
y _ x size.									"string size"
y _ x at: 2.								"char at location"
y _ x copyFrom: 2 to: 4.				"substring"
y _ x indexOf: $e ifAbsent: [0].		"first position of character within string"
x do: [:a | Transcript show: a printString; newLine].	"iterate over the string"
b _ x allSatisfy: [:a | (a >= $a) & (a <= $z)].	"test if all elements meet condition"
y _ x select: [:a | a > $a].			"return all elements that meet condition"
y _ x asString.							"convert symbol to string"
y _ x asText.								"convert symbol to text"
y _ x asArray.								"convert symbol to array"
y _ x asOrderedCollection.				"convert symbol to ordered collection"
y _ x asSortedCollection.				"convert symbol to sorted collection"
y _ x asBag.								"convert symbol to bag collection"
y _ x asSet.								"convert symbol to set collection"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 5/11/2020 17:05:02'!
syntax
	"Syntax Notes"
	^
'"
	Statement form (basic binary):
		<receiver> <message selector> [<argument>]
		There are also unary and keyword forms.

	Allowable characters:
		- a-z
		- A-Z
		- 0-9
		- .+/\*~<=>@%|&?;:''#()[]{}_
		- blank, tab, cr, ff, lf

	Variables:
		- variables must be declared before use
		- shared vars must begin with uppercase
		- local vars must begin with lowercase
		- reserved names: nil, true, false, self, super, and Smalltalk

	Variable scope:
		- Global: defined in Dictionary Smalltalk and accessible by all objects in system
		- Special: (reserved) Smalltalk, super, self, true, false, & nil
		- Method Temporary: local to a method
		- Block Temporary: local to a block
		- Pool: variables in a Dictionary object
		- Method Parameters: automatic local vars created as a result of message call with params
		- Block Parameters: automatic local vars created as a result of value: message call	
		- Class: shared with all instances of one class & its subclasses
		- Class Instance: unique to each instance of a class
		- Instance Variables: unique to each instance

	Comments are enclosed in quotes
	Period (.) is the statement separator
	
	Expressions are evaluated left-to-right.
	Message precedence: unary, binary, then keyword.
	
	A message within parentheses is sent before any messages outside the parentheses.
	Expressions with parentheses can alternatively be written with ''::'' as in the following examples..."
	
BrowserWindow fullOnClass: Parser class selector: #chainExamplesDoubleColon.
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 18:07:25'!
time
	"Time"
	^
'| x y b d1 d2 w |		"For efficient viewing, have a Transcript open and use Cmd-d on these statements"
x _ Time dateAndTimeNow.			"answer the current date and time"
x _ Time now.							"answer the current time"
b _ (555 factorial) > 1.			"expend some time"
y _ Time now - x.						"time difference"
b _ x < Time now.						"compare times"
b _ y = x.								"check if equal"
d1 _ Time now asDurationSinceMidnight.
d2 _ Time now asDurationSinceMidnight.
y _ x hhmm24.							"Return a string of the form 2154 (for 9:54 pm), of exactly 4 digits"
y _ x hour.								"answer the number of hours in the receiver"
y _ x hour12.
y _ x hour24.
y _ x meridianAbbreviation.		"answer ''AM'' or ''PM''"
y _ x minute.							"answer the number of minutes in the receiver"
y _ x nanoSecond.						"answer the number of nanoSeconds in the receiver"
y _ x print24.							"Return microseconds expressed in 24-hour format"
String streamContents: [:s | Time now print24: true on: s].	"Format is ''hh:mm:ss'' if true or ''h:mm:ss am'' if false"
y _ x printMinutes.						"Return as string ''hh:mm pm''  "
String streamContents: [:s | Time now printOn: s].
y _ x second.							"answer the number of seconds in the receiver"
String streamContents: [:s | Time now storeOn: s].
x _ Time millisecondsToRun: [		"timing facility"
   1 to: 1000 do: [:index | y _ 400 factorial * index]].

w _ Time localMillisecondClock.	"milliseconds since the Smalltalk epoch"
"The Smalltalk epoch began at 00:00 on the morning of January 1, 1901, in the local host time zone."
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 18:08:36'!
transcript
	"Transcript"
	^
'TranscriptWindow openTranscript.	"in case one is not open already"
Transcript clear.						"clear the transcript window"
Transcript show: ''Hello World''.	"output string in transcript window"
Transcript nextPutAll: ''Hello World''.	"output string in transcript window"
Transcript nextPut: $A.				"output character in transcript window"
Transcript space.						"output space character in transcript window"
Transcript tab.						"output tab character in transcript window"
Transcript newLine.					"linefeed"
''Hello'' printOn: Transcript.		"append print string into the window"
''Hello'' storeOn: Transcript.		"append store string into the window"
Transcript endEntry.					"flush the output buffer"

"NOTE: from the pop-up menu, you can open a snapshot of the transcript in a workspace window."
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 2/23/2016 12:21'!
trie
	"Trie"
	^
'| t |		"For efficient viewing, have a Transcript open and use Cmd-d on these statements"
t _ Trie new.
t add: ''car''.
t at: ''car'' put: Float pi.
t at: ''cat'' put: Date today.
t explore.
(t includesKey: ''car'') print.
(t includes: ''cat'') print.
t at: ''crow'' put: 7.
t forPrefix: ''c'' keysAndValuesDo: [:key :val | {key} print].
t forPrefix: ''ca'' keysAndValuesDo: [:key :val | {key} print].

t _ Trie new.
Smalltalk allImplementedMessages do: [ :s | t add: s ].
t explore.

'
! !
!TerseGuideHelp class methodsFor: 'displaying' stamp: 'dhn 11/14/2015 13:08'!
display: aSelector    
	"Open a Workspace on the text in aSelector"    
	| window |
	  
	window _ TerseGuideHelp new.    
	window 	actualContents: (self perform: aSelector).    
	window	openLabel: ('Terse Guide to ', (self class firstPrecodeCommentFor: aSelector))! !
!TerseGuideHelp class methodsFor: 'accessing' stamp: 'RNG 7/15/2018 01:33:41'!
additionalTopicTitles

	^ (self additionalTopics collect: [ :topic | topic title ]) asArray! !
!TerseGuideHelp class methodsFor: 'accessing' stamp: 'RNG 7/15/2018 01:34:27'!
additionalTopics
	"Topics that can be dynamically added by creating subclasses of TerseGuideTopic"

	^ TerseGuideTopic allSubclasses collect: [ :topicClass | topicClass new ]! !
!TerseGuideHelp class methodsFor: 'accessing' stamp: 'jmv 5/6/2020 11:11:26'!
pages
	"Answer the topics, in order, for the window list pane"
	^ #(
		'Introduction'
		'Syntax'
		'Transcript'
		'Assignment'
		'Literals'
		'Booleans'
		'Arithmetic'
		'Bit-Wise'
		'Conversion'
		'Blocks'
		'Exceptions'
		'Method Calls'
		'Conditional Statements'
		'Iterations'
		'Character'
		'Symbols'
		'Strings'
		'Fonts'
		'Arrays'
		'Ordered Collections'
		'Sorted Collections'
		'Bags'
		'Sets'
		'Intervals'
		'Associations'
		'Dictionary'
		'Trie'
		'Heap'
		'Internal Streams'
		'Coding'
		'File Operations'
		'Features'
		'Date'
		'Time'
		'Point'
		'Rectangle'
		'Forms'
		'Canvas'
		'Colors'
		'Morphs'
		'Layout Morph'
		'Layout Spec'
		'PopUpMenu'
		'Dynamic Messages'
		'Object'
		'Metaclass'
		'Debugging'
		'Miscellaneous'
		'Primitives'
		'Custom Browsers'
	) , self additionalTopicTitles! !
!TerseGuideWindow methodsFor: 'initialization' stamp: 'dhn 6/15/2016 19:03'!
buildMorphicWindow
	"Define the window layout for Terse Guide"
	| row |
	
	list1 _ (PluggableListMorph
				model: model
				listGetter: #topicList
				indexGetter: #topicListIndex
				indexSetter: #topicListIndex:
				mainView: self
				menuGetter: nil
				keystrokeAction: nil)
					name: 'Topic List'.
	textModelM _ TextModelMorph withModel: model.
	textModelM
		askBeforeDiscardingEdits: false;
		name: 'Work Space'.
	model when: #topicListIndex send: #update: to: list1 withArguments: #(#topicListIndex).
	row _ LayoutMorph newRow.
	row
		name: #Row;
		addMorph: list1 proportionalWidth: 0.2;
		addAdjusterAndMorph: textModelM proportionalWidth: 0.8.
	self layoutMorph
		addMorph: row.
	self setLabel: 'Terse Guide'! !
!TerseGuideWindow methodsFor: 'accessing' stamp: 'dhn 5/17/2016 21:21'!
textModelM
	"Answer the value of textModelM"

	^ textModelM! !
!TerseGuideWindow class methodsFor: 'instance creation' stamp: 'dhn 5/17/2016 21:21'!
openTerseGuide
"
	TerseGuideWindow openTerseGuide.
"
	| window help |

	(window _ TerseGuideWindow open: (help _ TerseGuideHelp new) label: 'Terse Guide')
		setWindowColor:  Theme current workspace.
	help textPane: window textModelM.
	help 
		contents: '';
		window: window! !
!TerseGuideTopic methodsFor: 'accessing' stamp: 'RNG 7/15/2018 01:02:39'!
examples

	^ #()! !
!TerseGuideTopic methodsFor: 'accessing' stamp: 'RNG 7/15/2018 01:37:27'!
script

	^ String streamContents: [ :stream |
		self examples do: [ :example |
			self append: example toScript: stream
		]
	]! !
!TerseGuideTopic methodsFor: 'accessing' stamp: 'RNG 7/15/2018 01:02:32'!
title

	self subclassResponsibility! !
!TerseGuideTopic methodsFor: 'private - script building' stamp: 'RNG 7/15/2018 01:38:22'!
append: example toScript: stream

	stream
		nextPutAll: (example at: #code);
		nextPutAll: '. ';
		nextPutAll: (self commentFor: example);
		newLine! !
!TerseGuideTopic methodsFor: 'private - script building' stamp: 'RNG 7/15/2018 01:38:32'!
commentFor: example

	^ '"' , (example at: #category) , ' - ' , (example at: #description) , '"'! !
!Portfolio methodsFor: 'account management - private' stamp: 'as 11/14/2020 11:20:11' prior: 50896618!
accountSummary

	| summary |
	summary := OrderedCollection new.

	accounts isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	
	accounts do: [:account | (summary,account accountSummary) removeLast].
	summary add: 'Balance = ', self balance asString.
	
	^summary.
	! !
!Portfolio methodsFor: 'account management - private' stamp: 'as 11/14/2020 11:21:10' prior: 50899572!
accountSummary

	| summary |
	summary := OrderedCollection new.

	accounts isEmpty ifTrue: [^OrderedCollection with: 'Balance = 0'].
	
	accounts do: [:account | 
		summary := summary,account accountSummary.
		summary removeLast ].
	summary add: 'Balance = ', self balance asString.
	
	^summary.
	! !
!Portfolio methodsFor: 'account management - private' stamp: 'as 11/14/2020 11:24:31' prior: 50899584!
accountSummary

	| summary |
	summary := OrderedCollection new.
	
	accounts do: [:account | 
		summary := summary,account accountSummary.
		summary removeLast ].
	summary add: 'Balance = ', self balance asString.
	
	^summary.
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 11:26:11'!
test12dosPortfolios
	
	| account1 account2 portfolio1 portfolio2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Deposit register: 100 on: account2.
	portfolio1 := Portfolio with: account1.
	portfolio2 := Portfolio with: account2.
	portfolio1 add: portfolio2.
	
	self assert: portfolio1 accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Dep�sito por 100.' with: 'Balance = 200').! !

!methodRemoval: AccountSummaryTest #test12dosPortfolios stamp: 'as 11/14/2020 15:54:53'!
test12dosPortfolios
	
	| account1 account2 portfolio1 portfolio2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Deposit register: 100 on: account2.
	portfolio1 := Portfolio with: account1.
	portfolio2 := Portfolio with: account2.
	portfolio1 add: portfolio2.
	
	self assert: portfolio1 accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Dep�sito por 100.' with: 'Balance = 200').!
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 11:31:22' prior: 50895982!
accountSummary
	| summary |
	summary := OrderedCollection new.
	transactions do: [:aTransaction | 
 					"(aTransaction isKindOf: Withdraw ) ifTrue: [
						(aTransaction isKindOf: TransferWithdraw) 
							ifTrue: [summary add: 'Salida por transferencia de ', aTransaction value asString, '.' ]	
							ifFalse: [summary add: 'Extracci�n por ', aTransaction value asString, '.' ]
						].
					 (aTransaction isKindOf: Deposit ) ifTrue: [
						(aTransaction isKindOf: TransferDeposit) 
							ifTrue: [summary add: 'Entrada por transferencia de ', aTransaction value asString, '.' ]	
							ifFalse: [summary add: 'Dep�sito por ', aTransaction value asString, '.' ]
						]."
					
					
		].
	summary add: ('Balance = ',  self balance asString).
	^summary.
	! !
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 11:35:24' prior: 50899643!
accountSummary
	| summary |
	summary := OrderedCollection new.
	transactions do: [:aTransaction | 
 					"(aTransaction isKindOf: Withdraw ) ifTrue: [
						(aTransaction isKindOf: TransferWithdraw) 
							ifTrue: [summary add: 'Salida por transferencia de ', aTransaction value asString, '.' ]	
							ifFalse: [summary add: 'Extracci�n por ', aTransaction value asString, '.' ]
						].
					 (aTransaction isKindOf: Deposit ) ifTrue: [
						(aTransaction isKindOf: TransferDeposit) 
							ifTrue: [summary add: 'Entrada por transferencia de ', aTransaction value asString, '.' ]	
							ifFalse: [summary add: 'Dep�sito por ', aTransaction value asString, '.' ]
						]."
					summary add: aTransaction asString
					
		].
	summary add: ('Balance = ',  self balance asString).
	^summary.
	! !
!Deposit methodsFor: 'nil' stamp: 'as 11/14/2020 11:36:49' overrides: 16881101!
asString
	^'Dep�sito por ', value asString, '.'
! !
!TransferDeposit methodsFor: 'nil' stamp: 'as 11/14/2020 11:37:20' overrides: 50899698!
asString
	^'Entrada por transferencia de ', value asString, '.'! !
!Withdraw methodsFor: 'nil' stamp: 'as 11/14/2020 11:37:58' overrides: 16881101!
asString
	^'Extracci�n por ', value asString, '.'.! !
!TransferWithdraw methodsFor: 'nil' stamp: 'as 11/14/2020 11:38:33' overrides: 50899708!
asString
	^'Salida por transferencia de ', value asString, '.'.! !
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 11:39:05' prior: 50899670!
accountSummary
	| summary |
	summary := OrderedCollection new.
	transactions do: [:aTransaction | summary add: aTransaction asString].
	summary add: ('Balance = ',  self balance asString).
	^summary.
	! !

!classDefinition: #TransferNetTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:54'!
TestCase subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetTest category: 'Portfolio-Solucion' stamp: 'as 11/14/2020 15:54:54'!
TestCase subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetTest methodsFor: 'no messages' stamp: 'as 11/14/2020 11:43:57'!
test01TransferNetForEmptyReceptiveAccount
	! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 11:44:28' prior: 50899742!
test01TransferNetForEmptyReceptiveAccount
	| account1 |
	account1 := ReceptiveAccount new.	
	
	self assert: account1 transferNet equals: 0.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 11:45:30' prior: 50899747!
test01TransferNetForEmptyReceptiveAccount
	| account1 |
	account1 := ReceptiveAccount new.	
	
	self assert: account1 transferNet equals: 0.
	! !
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 11:45:44'!
transferNet
	^0.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 11:46:21'!
test01TransferNetForReceptiveAccountWithTransferDeposit
	| account1 |
	account1 := ReceptiveAccount new.	
	
	self assert: account1 transferNet equals: 0.
	! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 11:47:10'!
test02TransferNetForReceptiveAccountWithTransferDeposit
	| account1 |
	account1 := ReceptiveAccount new.	
	
	self assert: account1 transferNet equals: 0.
	! !

!methodRemoval: TransferNetTest #test01TransferNetForReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 15:54:55'!
test01TransferNetForReceptiveAccountWithTransferDeposit
	| account1 |
	account1 := ReceptiveAccount new.	
	
	self assert: account1 transferNet equals: 0.
	!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 11:47:52' prior: 50899774!
test02TransferNetForReceptiveAccountWithTransferDeposit

	| account1 account2 |
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account2 transferNet equals: 100.
	! !
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 11:48:46' prior: 50899762!
transferNet
	transactions isEmpty ifTrue: [^0].
	^100.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 11:49:07'!
test02TransferNetForReceptiveAccountWithTwoTransferDeposit

	| account1 account2 |
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account2 transferNet equals: 200.
	! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 11:49:15'!
test03TransferNetForReceptiveAccountWithTwoTransferDeposit

	| account1 account2 |
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account2 transferNet equals: 200.
	! !

!methodRemoval: TransferNetTest #test02TransferNetForReceptiveAccountWithTwoTransferDeposit stamp: 'as 11/14/2020 15:54:55'!
test02TransferNetForReceptiveAccountWithTwoTransferDeposit

	| account1 account2 |
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account2 transferNet equals: 200.
	!
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 11:51:48' prior: 50899803!
transferNet
	transactions isEmpty ifTrue: [^0].
	transactions inject: 0 into: [:transferNet :transaction | transferNet + 100]! !
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 11:51:50' prior: 50899848!
transferNet
	transactions isEmpty ifTrue: [^0].
	transactions inject: 0 into: [:transferNet :transaction | transferNet + 100].! !
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 11:52:03' prior: 50899855!
transferNet
	transactions isEmpty ifTrue: [^0].
	^transactions inject: 0 into: [:transferNet :transaction | transferNet + 100].
	! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 11:52:23'!
test03TransferNetForReceptiveAccountWithTransferWithdraw

	| account1 account2 |
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account2 transferNet equals: 200.
	! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 11:52:56'!
test04TransferNetForReceptiveAccountWithTwoTransferDeposit

	| account1 account2 |
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account2 transferNet equals: 200.
	! !

!methodRemoval: TransferNetTest #test03TransferNetForReceptiveAccountWithTwoTransferDeposit stamp: 'as 11/14/2020 15:54:56'!
test03TransferNetForReceptiveAccountWithTwoTransferDeposit

	| account1 account2 |
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account2 transferNet equals: 200.
	!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 11:53:08'!
test03TransferNetForReceptiveAccountWithTwoTransferDeposit

	| account1 account2 |
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account2 transferNet equals: 200.
	! !

!methodRemoval: TransferNetTest #test04TransferNetForReceptiveAccountWithTwoTransferDeposit stamp: 'as 11/14/2020 15:54:56'!
test04TransferNetForReceptiveAccountWithTwoTransferDeposit

	| account1 account2 |
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account2 transferNet equals: 200.
	!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 11:53:15'!
test04TransferNetForReceptiveAccountWithTransferWithdraw

	| account1 account2 |
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account2 transferNet equals: 200.
	! !

!methodRemoval: TransferNetTest #test03TransferNetForReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 15:54:56'!
test03TransferNetForReceptiveAccountWithTransferWithdraw

	| account1 account2 |
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account2 transferNet equals: 200.
	!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 11:53:51' prior: 50899936!
test04TransferNetForReceptiveAccountWithTransferWithdraw

	| account1 account2 |
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 transferNet equals: -100.
	! !
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 12:00:12' prior: 50899862!
transferNet
	transactions isEmpty ifTrue: [^0].
	^transactions inject: 0 into: [:transferNet :transaction | 
		(transaction isKindOf: TransferDeposit) ifTrue: [transferNet + transaction value ].
		(transaction isKindOf: TransferWithdraw) ifTrue: [transferNet - transaction value ]]
	! !
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 12:09:05' prior: 50899975!
transferNet
	transactions isEmpty ifTrue: [^0].
	^transactions inject: 0 into: [:transferNet :transaction | transferNet + 100].
		"(transaction isKindOf: TransferDeposit) ifTrue: [transferNet + transaction value ].
		(transaction isKindOf: TransferWithdraw) ifTrue: [transferNet - transaction value ]]"
	! !
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 12:10:50' prior: 50899987!
transferNet
	| transferNet |
	transactions isEmpty ifTrue: [^0].
	"^transactions inject: 0 into: [:transferNet :transaction | transferNet + 100].
		(transaction isKindOf: TransferDeposit) ifTrue: [transferNet + transaction value ].
		(transaction isKindOf: TransferWithdraw) ifTrue: [transferNet - transaction value ]]"
	
	transferNet := 0.
	transactions do: [:transaction |
		(transaction isKindOf: TransferDeposit) ifTrue: [transferNet + transaction value ].
		(transaction isKindOf: TransferWithdraw) ifTrue: [transferNet - transaction value ]
		]! !
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 12:11:16' prior: 50900000!
transferNet
	| transferNet |
		
	"^transactions inject: 0 into: [:transferNet :transaction | transferNet + 100].
		(transaction isKindOf: TransferDeposit) ifTrue: [transferNet + transaction value ].
		(transaction isKindOf: TransferWithdraw) ifTrue: [transferNet - transaction value ]]"
	
	transferNet := 0.
	transactions do: [:transaction |
		(transaction isKindOf: TransferDeposit) ifTrue: [transferNet + transaction value ].
		(transaction isKindOf: TransferWithdraw) ifTrue: [transferNet - transaction value ]
		].
	^transferNet.! !
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 12:11:47' prior: 50900021!
transferNet
	| transferNet |
		
	"^transactions inject: 0 into: [:transferNet :transaction | transferNet + 100].
		(transaction isKindOf: TransferDeposit) ifTrue: [transferNet + transaction value ].
		(transaction isKindOf: TransferWithdraw) ifTrue: [transferNet - transaction value ]]"
	
	transferNet := 0.
	transactions do: [:transaction |
		(transaction isKindOf: TransferDeposit) ifTrue: [transferNet := transferNet + transaction value ].
		(transaction isKindOf: TransferWithdraw) ifTrue: [transferNet :=  transferNet - transaction value ]
		].
	^transferNet.! !
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 12:11:48' prior: 50900041!
transferNet
	| transferNet |
		
	"^transactions inject: 0 into: [:transferNet :transaction | transferNet + 100].
		(transaction isKindOf: TransferDeposit) ifTrue: [transferNet + transaction value ].
		(transaction isKindOf: TransferWithdraw) ifTrue: [transferNet - transaction value ]]"
	
	transferNet := 0.
	transactions do: [:transaction |
		(transaction isKindOf: TransferDeposit) ifTrue: [transferNet := transferNet + transaction value ].
		(transaction isKindOf: TransferWithdraw) ifTrue: [transferNet := transferNet - transaction value ]
		].
	^transferNet.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 12:13:28'!
test05TransferNetForEmptyPortfolio

	| account1 account2 |
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 transferNet equals: -100.
	! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 12:14:00' prior: 50900083!
test05TransferNetForEmptyPortfolio

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio transferNet equals: 0.
	! !
!Portfolio methodsFor: 'nil' stamp: 'as 11/14/2020 12:14:30'!
transferNet
	^0.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 12:15:22'!
test06TransferNetForPortfolioWithOneReceptiveAccount

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio transferNet equals: 0.
	! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 12:16:13' prior: 50900105!
test06TransferNetForPortfolioWithOneReceptiveAccount

"test09AccountSummaryForAPortfolioWithOneDepositAccount 
	
	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100').

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio transferNet equals: 0."
	! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 12:16:28'!
test06TransferNetForAPortfolioWithOneDepositAccount

"test09AccountSummaryForAPortfolioWithOneDepositAccount 
	
	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100').

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio transferNet equals: 0."
	! !

!methodRemoval: TransferNetTest #test06TransferNetForPortfolioWithOneReceptiveAccount stamp: 'as 11/14/2020 15:54:56'!
test06TransferNetForPortfolioWithOneReceptiveAccount

"test09AccountSummaryForAPortfolioWithOneDepositAccount 
	
	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100').

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio transferNet equals: 0."
	!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 12:17:19' prior: 50900131!
test06TransferNetForAPortfolioWithOneDepositAccount
	
	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: 0
	! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 12:17:49'!
test06TransferNetForAPortfolioWithAOneTransferDepositAccount
	
	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: 0
	! !

!methodRemoval: TransferNetTest #test06TransferNetForAPortfolioWithOneDepositAccount stamp: 'as 11/14/2020 15:54:56'!
test06TransferNetForAPortfolioWithOneDepositAccount
	
	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: portfolio accountSummary equals: 0
	!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 12:19:22' prior: 50900178!
test06TransferNetForAPortfolioWithAOneTransferDepositAccount
	
	| account1 account2 portfolio|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	portfolio := Portfolio with: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: portfolio transferNet equals: 100.
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 12:20:20' prior: 50900101!
transferNet
	accounts isEmpty ifTrue: [^0].
	^100.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 12:20:50'!
test06TransferNetForAPortfolioWithATwoTransferDepositAccount
	
	| account1 account2 portfolio|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	portfolio := Portfolio with: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.	
	
	self assert: portfolio transferNet equals: 200.
	! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 12:22:28'!
test07TransferNetForAPortfolioWithATwoTransferDepositAccount
	
	| account1 account2 portfolio|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	portfolio := Portfolio with: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.	
	
	self assert: portfolio transferNet equals: 200.
	! !

!methodRemoval: TransferNetTest #test06TransferNetForAPortfolioWithATwoTransferDepositAccount stamp: 'as 11/14/2020 15:54:56'!
test06TransferNetForAPortfolioWithATwoTransferDepositAccount
	
	| account1 account2 portfolio|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	portfolio := Portfolio with: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.	
	
	self assert: portfolio transferNet equals: 200.
	!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 12:24:04' prior: 50900214!
transferNet
	accounts isEmpty ifTrue: [^0].
	^accounts inject: 0 into: [:transferNet :account | transferNet + 100].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 12:25:35' prior: 50900265!
transferNet
	accounts isEmpty ifTrue: [^0].
	^accounts inject: 0 into: [:transferNet :account | transferNet + account transferNet ].! !
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 12:27:20' prior: 50900062!
transferNet		
	^transactions inject: 0 into: [:transferNet :transaction | 
		(transaction isKindOf: TransferDeposit) ifTrue: [transferNet + transaction value ].
		(transaction isKindOf: TransferWithdraw) ifTrue: [transferNet - transaction value ]]
	
	"transferNet := 0.
	transactions do: [:transaction |
		(transaction isKindOf: TransferDeposit) ifTrue: [transferNet := transferNet + transaction value ].
		(transaction isKindOf: TransferWithdraw) ifTrue: [transferNet := transferNet - transaction value ]
		].
	^transferNet."! !
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 12:29:36' prior: 50900280!
transferNet		
	"^transactions inject: 0 into: [:transferNet :transaction | transaction accumulateTo
		(transaction isKindOf: TransferDeposit) ifTrue: [transferNet + transaction value ].
		(transaction isKindOf: TransferWithdraw) ifTrue: [transferNet - transaction value ]]"
	
	| transferNet |
	transferNet := 0.
	transactions do: [:transaction |
		(transaction isKindOf: TransferDeposit) ifTrue: [transferNet := transferNet + transaction value ].
		(transaction isKindOf: TransferWithdraw) ifTrue: [transferNet := transferNet - transaction value ]
		].
	^transferNet.! !
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 12:30:19' prior: 50900300!
transferNet		
	"^transactions inject: 0 into: [:transferNet :transaction | transaction accumulateTo
		(transaction isKindOf: TransferDeposit) ifTrue: [transferNet + transaction value ].
		(transaction isKindOf: TransferWithdraw) ifTrue: [transferNet - transaction value ]]"
	
	| transferNet |
	transferNet := 0.
	transactions do: [:transaction |
		"(transaction isKindOf: TransferDeposit) ifTrue: [transferNet := transferNet + transaction value ].
		(transaction isKindOf: TransferWithdraw) ifTrue: [transferNet := transferNet - transaction value ]"
		transferNet := transaction accumulateToTransferNet: transferNet.
		].
	^transferNet.! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 12:31:27'!
accumulateToTransferNet: aTransferNet
	^aTransferNet + value.! !
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 12:31:38'!
accumulateToTransferNet: aTransferNet
	^aTransferNet - value.! !
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 12:32:05' prior: 50900321!
transferNet			
	| transferNet |
	transferNet := 0.
	transactions do: [:transaction |
		transferNet := transaction accumulateToTransferNet: transferNet.
		].
	^transferNet.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 12:32:22' prior: 50900272!
transferNet
	^accounts inject: 0 into: [:transferNet :account | transferNet + account transferNet ].! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 12:33:09'!
test06TransferNetForAPortfolioWithAOneTransferAccount
	
	| account1 account2 portfolio|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	portfolio := Portfolio with: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: portfolio transferNet equals: 100.
	! !

!methodRemoval: TransferNetTest #test06TransferNetForAPortfolioWithAOneTransferDepositAccount stamp: 'as 11/14/2020 15:54:57'!
test06TransferNetForAPortfolioWithAOneTransferDepositAccount
	
	| account1 account2 portfolio|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	portfolio := Portfolio with: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: portfolio transferNet equals: 100.
	!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 12:33:19'!
test07TransferNetForAPortfolioWithATwoTransferAccount
	
	| account1 account2 portfolio|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	portfolio := Portfolio with: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.	
	
	self assert: portfolio transferNet equals: 200.
	! !

!methodRemoval: TransferNetTest #test07TransferNetForAPortfolioWithATwoTransferDepositAccount stamp: 'as 11/14/2020 15:54:57'!
test07TransferNetForAPortfolioWithATwoTransferDepositAccount
	
	| account1 account2 portfolio|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	portfolio := Portfolio with: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.	
	
	self assert: portfolio transferNet equals: 200.
	!

----End fileIn of C:\Users\Ami\Desktop\Facultad\Ing1\windows64-portfolio2\windows64\Portfolio2-Ejercicio.st----!

!testRun: #TransferNetTest #test01TransferNetForEmptyReceptiveAccount stamp: 'as 11/14/2020 15:56:17'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 15:56:17'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForReceptiveAccountWithTwoTransferDeposit stamp: 'as 11/14/2020 15:56:17'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 15:56:17'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetForEmptyPortfolio stamp: 'as 11/14/2020 15:56:17'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetForAPortfolioWithAOneTransferAccount stamp: 'as 11/14/2020 15:56:17'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetForAPortfolioWithATwoTransferAccount stamp: 'as 11/14/2020 15:56:17'!
PASSED!

Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #AccountSummary category: 'Portfolio2-Ejercicio' stamp: 'as 11/14/2020 15:59:21'!
Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!AccountSummary methodsFor: 'no messages' stamp: 'as 11/14/2020 16:04:51'!
accountSummary
	! !

Object subclass: #AccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #AccountSummary category: 'Portfolio2-Ejercicio' stamp: 'as 11/14/2020 16:06:37'!
Object subclass: #AccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

AccountSummary class
	instanceVariableNames: ''!

!classDefinition: 'AccountSummary class' category: 'Portfolio2-Ejercicio' stamp: 'as 11/14/2020 16:47:38'!
AccountSummary class
	instanceVariableNames: ''!

Object subclass: #AccountSummarizer
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #AccountSummarizer category: 'Portfolio2-Ejercicio' stamp: 'as 11/14/2020 16:47:44'!
Object subclass: #AccountSummarizer
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classRemoval: #AccountSummary stamp: 'as 11/14/2020 16:47:51'!
Object subclass: #AccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!AccountSummarizer class methodsFor: 'no messages' stamp: 'as 11/14/2020 16:48:32'!
newFor: anAccount
	^ self new initializeFor: anAccount.! !
!AccountSummarizer methodsFor: 'no messages' stamp: 'as 11/14/2020 16:48:58'!
initializeFor: anAccount
	account := anAccount.
	! !
!AccountSummarizer methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 16:50:01'!
summarize
	^account summarize.! !
!AccountSummarizer methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 16:52:17' prior: 50901824!
summarize
	^account summarizeWith: self.! !
!Portfolio methodsFor: 'nil' stamp: 'as 11/14/2020 16:53:18'!
summarizeWith: anAccountSummarizer
	anAccountSummarizer summarizeForPortfolio.! !
!Portfolio methodsFor: 'nil' stamp: 'as 11/14/2020 16:53:36' prior: 50901833!
summarizeWith: anAccountSummarizer
	anAccountSummarizer summarizeForPortfolio: self.! !
!AccountSummarizer methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 16:54:33'!
summarizeForPortfolio: aPortfolio
	! !
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 16:54:59'!
summarizeWith: anAccountSummarizer
	anAccountSummarizer summarizeForReceptiveAccount: self.! !
!AccountSummarizer methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 16:55:22'!
summarizeForReceptiveAccount: aReceptiveAccount
! !
!AccountSummarizer methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 16:58:34' prior: 50901844!
summarizeForPortfolio: aPortfolio
	
	| summary |
	summary := OrderedCollection new.
	
	"accounts do: [:account | 
		summary := summary,(AccountSummarizer newFor: account) summarize.
		summary removeLast ].
	summary add: 'Balance = ', aPortfolio balance asString."
	
	^summary.
	! !
!AccountSummarizer methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 17:05:49' prior: 50901854!
summarizeForReceptiveAccount: aReceptiveAccount

	"| summary |
	summary := OrderedCollection new.
	transactions do: [:aTransaction | summary add: aTransaction asString].
	summary add: ('Balance = ',  self balance asString).
	^summary."
	! !
!AccountSummarizer methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 17:08:09' prior: 50901871!
summarizeForReceptiveAccount: aReceptiveAccount

	| summary |
	summary := OrderedCollection new.
	aReceptiveAccount transactions do: [:aTransaction | summary add: aTransaction asString].
	summary add: ('Balance = ',  self balance asString).
	^summary.
	! !
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 17:11:01' prior: 50901848!
summarizeWith: anAccountSummarizer
	"anAccountSummarizer summarizeForReceptiveAccount: self."
	transactions do: [:transaction | transaction accumulateToSummary: anAccountSummarizer]! !
!Deposit methodsFor: 'nil' stamp: 'as 11/14/2020 17:12:20'!
accumulateToSummary: anAccountSummarizer
	anAccountSummarizer accumulateDeposit: self.! !
!TransferDeposit methodsFor: 'nil' stamp: 'as 11/14/2020 17:12:33' overrides: 50901901!
accumulateToSummary: anAccountSummarizer
	anAccountSummarizer accumulateTransferDeposit: self.! !
!Withdraw methodsFor: 'nil' stamp: 'as 11/14/2020 17:12:48'!
accumulateToSummary: anAccountSummarizer
	anAccountSummarizer accumulateWithdraw: self.! !
!TransferWithdraw methodsFor: 'nil' stamp: 'as 11/14/2020 17:13:03' overrides: 50901912!
accumulateToSummary: anAccountSummarizer
	anAccountSummarizer accumulateTransferWithdraw: self.! !
!AccountSummarizer methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 17:13:44'!
accumulateTransferDeposit: aDeposit
	! !

Object subclass: #AccountSummarizer
	instanceVariableNames: 'account summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

Object subclass: #AccountSummarizer
	instanceVariableNames: 'account summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

Object subclass: #AccountSummarizer
	instanceVariableNames: 'account summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!AccountSummarizer methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 17:14:24' prior: 50901859!
summarizeForPortfolio: aPortfolio
	
	"| summary |
	summary := OrderedCollection new.
	
	accounts do: [:account | 
		summary := summary,(AccountSummarizer newFor: account) summarize.
		summary removeLast ].
	summary add: 'Balance = ', aPortfolio balance asString.
	
	^summary."
	! !
!AccountSummarizer methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 17:14:32' prior: 50901882!
summarizeForReceptiveAccount: aReceptiveAccount

	"| summary |
	summary := OrderedCollection new.
	aReceptiveAccount transactions do: [:aTransaction | summary add: aTransaction asString].
	summary add: ('Balance = ',  self balance asString).
	^summary."
	! !

Object subclass: #AccountSummarizer
	instanceVariableNames: 'account summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #AccountSummarizer category: 'Portfolio2-Ejercicio' stamp: 'as 11/14/2020 17:14:39'!
Object subclass: #AccountSummarizer
	instanceVariableNames: 'account summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!AccountSummarizer methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 17:14:52' prior: 50901819!
initializeFor: anAccount
	account := anAccount.
	summary := OrderedCollection new.
	! !
!AccountSummarizer methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 17:16:14' prior: 50901829!
summarize
	account summarizeWith: self.
	! !
!AccountSummarizer methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 17:17:18' prior: 50901924!
accumulateTransferDeposit: aDeposit
	"summary add: aTransaction asString"! !
!AccountSummarizer methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 17:18:01'!
accumulateTransaction: aTransaction
	"summary add: aTransaction asString"! !
!AccountSummarizer methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 17:18:06' prior: 50901998!
accumulateTransaction: aTransaction
	summary add: aTransaction asString! !

!methodRemoval: AccountSummarizer #accumulateTransferDeposit: stamp: 'as 11/14/2020 17:18:27'!
accumulateTransferDeposit: aDeposit
	"summary add: aTransaction asString"!
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 17:19:05' prior: 50901893!
summarizeWith: anAccountSummarizer
	"anAccountSummarizer summarizeForReceptiveAccount: self."
	transactions do: [:transaction | anAccountSummarizer accumulateTransaction: transaction]! !
!AccountSummarizer methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 17:21:05' prior: 50901956!
summarizeForReceptiveAccount: aReceptiveAccount

	"| summary |
	summary := OrderedCollection new.
	aReceptiveAccount transactions do: [:aTransaction | summary add: aTransaction asString].
	summary add: ('Balance = ',  self balance asString).
	^summary."
	
	aReceptiveAccount summarizeWith: self.
	summary add: aReceptiveAccount balance ! !
!AccountSummarizer methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 17:21:31' prior: 50902025!
summarizeForReceptiveAccount: aReceptiveAccount

	"| summary |
	summary := OrderedCollection new.
	aReceptiveAccount transactions do: [:aTransaction | summary add: aTransaction asString].
	summary add: ('Balance = ',  self balance asString).
	^summary."
	
	aReceptiveAccount summarizeWith: self.
	self summarize.! !
!AccountSummarizer methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 17:21:43' prior: 50902039!
summarizeForReceptiveAccount: aReceptiveAccount

	"| summary |
	summary := OrderedCollection new.
	aReceptiveAccount transactions do: [:aTransaction | summary add: aTransaction asString].
	summary add: ('Balance = ',  self balance asString).
	^summary."
	
	aReceptiveAccount summarizeWith: self.! !

!methodRemoval: AccountSummarizer #summarizeForReceptiveAccount: stamp: 'as 11/14/2020 17:23:19'!
summarizeForReceptiveAccount: aReceptiveAccount

	"| summary |
	summary := OrderedCollection new.
	aReceptiveAccount transactions do: [:aTransaction | summary add: aTransaction asString].
	summary add: ('Balance = ',  self balance asString).
	^summary."
	
	aReceptiveAccount summarizeWith: self.!

!methodRemoval: AccountSummarizer #summarizeForPortfolio: stamp: 'as 11/14/2020 17:23:24'!
summarizeForPortfolio: aPortfolio
	
	"| summary |
	summary := OrderedCollection new.
	
	accounts do: [:account | 
		summary := summary,(AccountSummarizer newFor: account) summarize.
		summary removeLast ].
	summary add: 'Balance = ', aPortfolio balance asString.
	
	^summary."
	!
!AccountSummarizer methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 17:23:53' prior: 50901987!
summarize
	account summarizeWith: self.
	summary add: 'Balance = ', account balance asString.! !
!AccountSummarizer methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 17:24:11' prior: 50902090!
summarize
	account summarizeWith: self.
	summary add: 'Balance = ', account balance asString.
	^summary.! !
!Portfolio methodsFor: 'nil' stamp: 'as 11/14/2020 17:24:35' prior: 50901838!
summarizeWith: anAccountSummarizer
	! !
!Portfolio methodsFor: 'nil' stamp: 'as 11/14/2020 17:28:15' prior: 50902103!
summarizeWith: anAccountSummarizer
	
	"| summary |
	summary := OrderedCollection new.
	
	accounts do: [:account | 
		summary := summary,account accountSummary.
		summary removeLast ].
	summary add: 'Balance = ', self balance asString.
	
	^summary."
	
	"| summary |
	accounts do: [:account | anAccountSummarizer accumulateAccount]."
	
	! !
!Portfolio methodsFor: 'nil' stamp: 'as 11/14/2020 17:28:35' prior: 50902107!
summarizeWith: anAccountSummarizer
	
	"| summary |
	summary := OrderedCollection new.
	
	accounts do: [:account | 
		summary := summary,account accountSummary.
		summary removeLast ].
	summary add: 'Balance = ', self balance asString.
	
	^summary."
	
	| summary |
	accounts do: [:account | anAccountSummarizer accumulateAccount: account].
	
	! !
!AccountSummarizer methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 17:30:05'!
accumulateAccount: anAccount
	summary := summary, (AccountSummarizer newFor: anAccount) summarize.
	summary removeLast.
	 ! !

!testRun: #AccountSummaryTest #test01AccountSummaryForAnEmptyReceptiveAccount stamp: 'as 11/14/2020 17:30:53'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAReceptiveAccountWithADeposit stamp: 'as 11/14/2020 17:30:53'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAReceptiveAccountWithTwoDeposit stamp: 'as 11/14/2020 17:30:53'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAReceptiveAccountWithWithdraw stamp: 'as 11/14/2020 17:30:53'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryForAReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 17:30:53'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryForAReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 17:30:53'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryForAReceptiveAccountWithTransferDepositWithADifferentAmount stamp: 'as 11/14/2020 17:30:53'!
PASSED!

!testRun: #AccountSummaryTest #test08AccountSummaryForAnEmptyPortfolio stamp: 'as 11/14/2020 17:30:53'!
PASSED!

!testRun: #AccountSummaryTest #test09AccountSummaryForAPortfolioWithOneDepositAccount stamp: 'as 11/14/2020 17:30:53'!
PASSED!

!testRun: #AccountSummaryTest #test10AccountSummaryForAPortfolioWithTwoDepositAccount stamp: 'as 11/14/2020 17:30:53'!
PASSED!

!testRun: #AccountSummaryTest #test11AccountSummaryForAPortfolioWithTwoAccounts stamp: 'as 11/14/2020 17:30:53'!
PASSED!

Object subclass: #TransferNetCalculator
	instanceVariableNames: 'account transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #TransferNetCalculator category: 'Portfolio2-Ejercicio' stamp: 'as 11/14/2020 17:33:38'!
Object subclass: #TransferNetCalculator
	instanceVariableNames: 'account transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!TransferNetCalculator methodsFor: 'no messages' stamp: 'as 11/14/2020 17:34:50'!
calculateTransferNet
	account calculateTransferNetWith: self.
	^transferNet.! !
!TransferNetCalculator methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 17:35:13'!
initializeFor: anAccount
	account := anAccount.
	transferNet := 0.
	! !
!TransferNetCalculator class methodsFor: 'no messages' stamp: 'as 11/14/2020 17:35:30'!
newFor: anAccount
	^ self new initializeFor: anAccount.! !
!Portfolio methodsFor: 'nil' stamp: 'as 11/14/2020 17:36:37'!
calculateTransferNetWith: aTransferNetCalculator
	
	accounts do: [:account | aTransferNetCalculator accumulateAccount: account].
	
	! !
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 17:37:01'!
calculateTransferNetWith: aTransferNetCalculator
	"anAccountSummarizer summarizeForReceptiveAccount: self."
	transactions do: [:transaction | aTransferNetCalculator accumulateTransaction: transaction]! !
!TransferNetCalculator methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 17:37:49'!
accumulateTransaction: aTransaction
	transferNet! !

!methodRemoval: Deposit #accumulateToSummary: stamp: 'as 11/14/2020 17:38:04'!
accumulateToSummary: anAccountSummarizer
	anAccountSummarizer accumulateDeposit: self.!

!methodRemoval: TransferDeposit #accumulateToSummary: stamp: 'as 11/14/2020 17:38:13'!
accumulateToSummary: anAccountSummarizer
	anAccountSummarizer accumulateTransferDeposit: self.!

!methodRemoval: Withdraw #accumulateToSummary: stamp: 'as 11/14/2020 17:38:35'!
accumulateToSummary: anAccountSummarizer
	anAccountSummarizer accumulateWithdraw: self.!

!methodRemoval: TransferWithdraw #accumulateToSummary: stamp: 'as 11/14/2020 17:38:40'!
accumulateToSummary: anAccountSummarizer
	anAccountSummarizer accumulateTransferWithdraw: self.!

!testRun: #AccountSummaryTest #test01AccountSummaryForAnEmptyReceptiveAccount stamp: 'as 11/14/2020 17:38:47'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAReceptiveAccountWithADeposit stamp: 'as 11/14/2020 17:38:47'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAReceptiveAccountWithTwoDeposit stamp: 'as 11/14/2020 17:38:47'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAReceptiveAccountWithWithdraw stamp: 'as 11/14/2020 17:38:47'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryForAReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 17:38:47'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryForAReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 17:38:47'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryForAReceptiveAccountWithTransferDepositWithADifferentAmount stamp: 'as 11/14/2020 17:38:47'!
PASSED!

!testRun: #AccountSummaryTest #test08AccountSummaryForAnEmptyPortfolio stamp: 'as 11/14/2020 17:38:47'!
PASSED!

!testRun: #AccountSummaryTest #test09AccountSummaryForAPortfolioWithOneDepositAccount stamp: 'as 11/14/2020 17:38:47'!
PASSED!

!testRun: #AccountSummaryTest #test10AccountSummaryForAPortfolioWithTwoDepositAccount stamp: 'as 11/14/2020 17:38:47'!
PASSED!

!testRun: #AccountSummaryTest #test11AccountSummaryForAPortfolioWithTwoAccounts stamp: 'as 11/14/2020 17:38:47'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'as 11/14/2020 17:39:06'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'as 11/14/2020 17:39:06'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'as 11/14/2020 17:39:06'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'as 11/14/2020 17:39:06'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'as 11/14/2020 17:39:06'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'as 11/14/2020 17:39:06'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'as 11/14/2020 17:39:06'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'as 11/14/2020 17:39:06'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'as 11/14/2020 17:39:06'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'as 11/14/2020 17:39:06'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'as 11/14/2020 17:39:06'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'as 11/14/2020 17:39:06'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'as 11/14/2020 17:39:06'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'as 11/14/2020 17:39:06'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'as 11/14/2020 17:39:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'as 11/14/2020 17:39:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'as 11/14/2020 17:39:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'as 11/14/2020 17:39:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'as 11/14/2020 17:39:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'as 11/14/2020 17:39:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'as 11/14/2020 17:39:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'as 11/14/2020 17:39:12'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetForEmptyReceptiveAccount stamp: 'as 11/14/2020 17:39:23'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 17:39:23'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForReceptiveAccountWithTwoTransferDeposit stamp: 'as 11/14/2020 17:39:23'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 17:39:23'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetForEmptyPortfolio stamp: 'as 11/14/2020 17:39:23'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetForAPortfolioWithAOneTransferAccount stamp: 'as 11/14/2020 17:39:23'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetForAPortfolioWithATwoTransferAccount stamp: 'as 11/14/2020 17:39:23'!
PASSED!

!testRun: #TransferTest #test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer stamp: 'as 11/14/2020 17:39:28'!
PASSED!

!testRun: #TransferTest #test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer stamp: 'as 11/14/2020 17:39:28'!
PASSED!

!testRun: #TransferTest #test03AccountTransactionsInTransferAreConnected stamp: 'as 11/14/2020 17:39:28'!
PASSED!

!testRun: #TransferTest #test04AccountCannotTransferToItself stamp: 'as 11/14/2020 17:39:28'!
PASSED!

!testRun: #TransferTest #test05AccountCannotTransferInvalidAmount stamp: 'as 11/14/2020 17:39:28'!
PASSED!
!TransferNetCalculator methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 17:40:20' prior: 50902232!
accumulateTransaction: aTransaction
	aTransaction affectBalance: transferNet.! !
!TransferNetCalculator methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 17:41:24'!
accumulateAccount: anAccount
	anAccount affectBalance: transferNet.! !
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 17:46:41' prior: 50902222!
calculateTransferNetWith: aTransferNetCalculator
	"anAccountSummarizer summarizeForReceptiveAccount: self."
	"transactions do: [:transaction | aTransferNetCalculator accumulateTransaction: transaction]"
	transactions do: [:transaction |  transaction accumulateTo: aTransferNetCalculator].! !
!TransferDeposit methodsFor: 'nil' stamp: 'as 11/14/2020 17:47:33'!
accumulateTo: aTransferNetCalculator
	aTransferNetCalculator accumulateTransferDeposit: self.! !
!Deposit methodsFor: 'nil' stamp: 'as 11/14/2020 17:47:49'!
accumulateTo: aTransferNetCalculator
	aTransferNetCalculator accumulateDeposit: self.! !
!Withdraw methodsFor: 'nil' stamp: 'as 11/14/2020 17:48:03'!
accumulateTo: aTransferNetCalculator
	aTransferNetCalculator accumulateWithdraw: self.! !
!TransferWithdraw methodsFor: 'nil' stamp: 'as 11/14/2020 17:48:15' overrides: 50902467!
accumulateTo: aTransferNetCalculator
	aTransferNetCalculator accumulateTransferWithdraw: self.! !
!TransferNetCalculator methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 17:48:58'!
accumulateTransferWithdraw: aTransferWithdraw
	transferNet - aTransferWithdraw value.! !
!TransferNetCalculator methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 17:49:10'!
accumulateWithdraw: aTransferWithdraw
! !
!TransferNetCalculator methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 17:49:21'!
accumulateDeposit: aDeposit
! !
!TransferNetCalculator methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 17:49:27' prior: 50902485!
accumulateWithdraw: aWithdraw
! !

!methodRemoval: TransferNetCalculator #accumulateTransaction: stamp: 'as 11/14/2020 17:49:38'!
accumulateTransaction: aTransaction
	aTransaction affectBalance: transferNet.!
!TransferNetCalculator methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 17:50:20'!
accumulateTransferDeposit: aTransferDeposit
	transferNet + aTransferDeposit value.! !
!TransferNetCalculator methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 17:52:03' prior: 50902439!
accumulateAccount: anAccount
	transferNet := transferNet + (TransferNetCalculator newFor: anAccount) calculateTransferNet.! !
!TransferNetCalculator methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 17:52:09' prior: 50902511!
accumulateAccount: anAccount
	transferNet := transferNet + (TransferNetCalculator newFor: anAccount) calculateTransferNet.
	! !
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 17:54:44' prior: 50902015!
summarizeWith: anAccountSummarizer
	"anAccountSummarizer summarizeForReceptiveAccount: self."
	"transactions do: [:transaction | anAccountSummarizer accumulateTransaction: transaction]"
	transactions do: [:transaction | transaction accumulateTo: anAccountSummarizer]! !
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 17:55:19' prior: 50902526!
summarizeWith: anAccountSummarizer
	"anAccountSummarizer summarizeForReceptiveAccount: self."
	"transactions do: [:transaction | anAccountSummarizer accumulateTransaction: transaction]"
	transactions do: [:transaction | transaction accumulateTo: anAccountSummarizer].! !
!Portfolio methodsFor: 'nil' stamp: 'as 11/14/2020 17:55:56' prior: 50902121!
summarizeWith: anAccountSummarizer
	
	"| summary |
	summary := OrderedCollection new.
	
	accounts do: [:account | 
		summary := summary,account accountSummary.
		summary removeLast ].
	summary add: 'Balance = ', self balance asString.
	
	^summary."
	
	accounts do: [:account | anAccountSummarizer accumulateAccount: account].! !

!methodRemoval: AccountSummarizer #accumulateTransaction: stamp: 'as 11/14/2020 17:56:12'!
accumulateTransaction: aTransaction
	summary add: aTransaction asString!
!AccountSummarizer methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 17:56:43'!
accumulateDeposit: aDeposit
	summary add: aDeposit asString.! !

!methodRemoval: Deposit #asString stamp: 'as 11/14/2020 17:58:01'!
asString
	^'Dep�sito por ', value asString, '.'
!
!AccountSummarizer methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 17:58:26' prior: 50902568!
accumulateDeposit: aDeposit
	summary add: 'Dep�sito por ', aDeposit value asString, '.'.! !
!AccountSummarizer methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 17:58:58'!
accumulateTransferDeposit: aTransferDeposit
	summary add: 'Dep�sito por ', aTransferDeposit value asString, '.'.! !

!methodRemoval: TransferDeposit #asString stamp: 'as 11/14/2020 17:59:19'!
asString
	^'Entrada por transferencia de ', value asString, '.'!
!AccountSummarizer methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 17:59:28' prior: 50902583!
accumulateTransferDeposit: aTransferDeposit
	summary add: 'Entrada por transferencia de ', aTransferDeposit value asString, '.'.! !
!AccountSummarizer methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 17:59:49'!
accumulateTransferWithdraw: aTransferWithdraw
	summary add: 'Salida por transferencia de ', aTransferWithdraw value asString, '.'.! !

!methodRemoval: TransferWithdraw #asString stamp: 'as 11/14/2020 17:59:58'!
asString
	^'Salida por transferencia de ', value asString, '.'.!
!AccountSummarizer methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 18:00:31'!
accumulateWithdraw: aWithdraw
	summary add: 'Extracci�n por ', aWithdraw value asString, '.'.! !
!Portfolio methodsFor: 'nil' stamp: 'as 11/14/2020 18:02:09' prior: 50902549!
summarizeWith: anAccountSummarizer

	accounts do: [:account | anAccountSummarizer accumulateAccount: account].! !
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 18:02:25' prior: 50902445!
calculateTransferNetWith: aTransferNetCalculator

	transactions do: [:transaction |  transaction accumulateTo: aTransferNetCalculator].! !
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 18:02:31' prior: 50902538!
summarizeWith: anAccountSummarizer

	transactions do: [:transaction | transaction accumulateTo: anAccountSummarizer].! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 18:04:15' prior: 50900970!
test01TransferNetForEmptyReceptiveAccount
	| account1 |
	account1 := ReceptiveAccount new.	
	
	self assert: (TransferNetCalculator newFor: account1) calculateTransferNet equals: 0.
	! !

!testRun: #TransferNetTest #test01TransferNetForEmptyReceptiveAccount stamp: 'as 11/14/2020 18:04:19'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 18:04:51' prior: 50900978!
test02TransferNetForReceptiveAccountWithTransferDeposit

	| account1 account2 |
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: (TransferNetCalculator newFor: account2) calculateTransferNet equals: 100.
	! !

!testRun: #TransferNetTest #test02TransferNetForReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 18:04:55'!
FAILURE!

!testRun: #TransferNetTest #test02TransferNetForReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 18:04:55'!
FAILURE!

transactions!

aTransferDeposit value!
!TransferNetCalculator methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 18:07:10' prior: 50902505!
accumulateTransferDeposit: aTransferDeposit
	transferNet := transferNet + aTransferDeposit value.! !
!TransferNetCalculator methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 18:07:19' prior: 50902479!
accumulateTransferWithdraw: aTransferWithdraw
	transferNet := transferNet - aTransferWithdraw value.! !

!testRun: #TransferNetTest #test02TransferNetForReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 18:07:27'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 18:07:43' prior: 50900990!
test03TransferNetForReceptiveAccountWithTwoTransferDeposit

	| account1 account2 |
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: (TransferNetCalculator newFor: account2) calculateTransferNet equals: 200.
	! !

!testRun: #TransferNetTest #test03TransferNetForReceptiveAccountWithTwoTransferDeposit stamp: 'as 11/14/2020 18:07:49'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 18:07:59' prior: 50901004!
test04TransferNetForReceptiveAccountWithTransferWithdraw

	| account1 account2 |
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: (TransferNetCalculator newFor: account1) calculateTransferNet equals: -100.
	! !

!testRun: #TransferNetTest #test04TransferNetForReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 18:08:03'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 18:08:16' prior: 50901016!
test05TransferNetForEmptyPortfolio

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: (TransferNetCalculator newFor: portfolio ) calculateTransferNet equals: 0.
	! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 18:08:18' prior: 50902731!
test05TransferNetForEmptyPortfolio

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: (TransferNetCalculator newFor: portfolio) calculateTransferNet equals: 0.
	! !

!testRun: #TransferNetTest #test05TransferNetForEmptyPortfolio stamp: 'as 11/14/2020 18:08:22'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 18:08:47' prior: 50901024!
test06TransferNetForAPortfolioWithAOneTransferAccount
	
	| account1 account2 portfolio|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	portfolio := Portfolio with: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert:  (TransferNetCalculator newFor: portfolio) calculateTransferNet equals: 100.
	! !

!testRun: #TransferNetTest #test06TransferNetForAPortfolioWithAOneTransferAccount stamp: 'as 11/14/2020 18:08:51'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 18:08:59' prior: 50901037!
test07TransferNetForAPortfolioWithATwoTransferAccount
	
	| account1 account2 portfolio|
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.
	portfolio := Portfolio with: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.	
	
	self assert:  (TransferNetCalculator newFor: portfolio) calculateTransferNet equals: 200.
	! !

!testRun: #TransferNetTest #test07TransferNetForAPortfolioWithATwoTransferAccount stamp: 'as 11/14/2020 18:09:03'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 18:09:39' prior: 50900439!
test01AccountSummaryForAnEmptyReceptiveAccount
	
	| account1 |
	account1 := ReceptiveAccount new.	
	
	self assert:  (AccountSummarizer newFor: account1) summarize equals: (OrderedCollection with: 'Balance = 0').! !

!testRun: #AccountSummaryTest #test01AccountSummaryForAnEmptyReceptiveAccount stamp: 'as 11/14/2020 18:09:43'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 18:09:47' prior: 50902791!
test01AccountSummaryForAnEmptyReceptiveAccount
	
	| account1 |
	account1 := ReceptiveAccount new.	
	
	self assert: (AccountSummarizer newFor: account1) summarize equals: (OrderedCollection with: 'Balance = 0').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 18:10:01' prior: 50900449!
test02AccountSummaryForAReceptiveAccountWithADeposit
	
	| account1 |
	account1 := ReceptiveAccount new.	
	Deposit register: 100 on: account1.
	
	self assert: (AccountSummarizer newFor: account1) summarize equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100').! !

!testRun: #AccountSummaryTest #test02AccountSummaryForAReceptiveAccountWithADeposit stamp: 'as 11/14/2020 18:10:05'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 18:10:16' prior: 50900461!
test03AccountSummaryForAReceptiveAccountWithTwoDeposit
	
	| account1 |
	account1 := ReceptiveAccount new.	
	Deposit register: 100 on: account1.
	Deposit register: 100 on: account1.	
	
	self assert: (AccountSummarizer newFor: account1) summarize equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Dep�sito por 100.' with: 'Balance = 200').! !

!testRun: #AccountSummaryTest #test03AccountSummaryForAReceptiveAccountWithTwoDeposit stamp: 'as 11/14/2020 18:10:20'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 18:10:29' prior: 50900475!
test04AccountSummaryForAReceptiveAccountWithWithdraw
	
	| account1 |
	account1 := ReceptiveAccount new.	
	Withdraw register: 100 on: account1.	
	
	self assert: (AccountSummarizer newFor: account1) summarize equals: (OrderedCollection with: 'Extracci�n por 100.' with: 'Balance = -100').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 18:10:36' prior: 50900487!
test05AccountSummaryForAReceptiveAccountWithTransferWithdraw
	
	| account1 account2|
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: (AccountSummarizer newFor: account1) summarize equals: (OrderedCollection with: 'Salida por transferencia de 100.' with: 'Balance = -100').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 18:10:53' prior: 50900502!
test06AccountSummaryForAReceptiveAccountWithTransferDeposit
	
	| account1 account2|
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: (AccountSummarizer newFor: account2) summarize equals: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 18:11:01' prior: 50900517!
test07AccountSummaryForAReceptiveAccountWithTransferDepositWithADifferentAmount
	
	| account1 account2|
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	
	
	Transfer anAmountOf: 50 from: account1 to: account2.
	
	self assert: (AccountSummarizer newFor: account2) summarize equals: (OrderedCollection with: 'Entrada por transferencia de 50.' with: 'Balance = 50').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 18:11:23' prior: 50900532!
test08AccountSummaryForAnEmptyPortfolio
	
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: (AccountSummarizer newFor: portfolio) summarize equals: (OrderedCollection with: 'Balance = 0').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 18:11:31' prior: 50900541!
test09AccountSummaryForAPortfolioWithOneDepositAccount 
	
	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: (AccountSummarizer newFor: portfolio) summarize equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 18:11:36' prior: 50900554!
test10AccountSummaryForAPortfolioWithTwoDepositAccount 
	
	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert:(AccountSummarizer newFor: portfolio) summarize equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Dep�sito por 100.' with: 'Balance = 200').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 18:11:43' prior: 50900569!
test11AccountSummaryForAPortfolioWithTwoAccounts
	
	| account1 account2 portfolio |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Deposit register: 100 on: account2.
	portfolio := Portfolio with: account1.
	portfolio add: account2.
	
	self assert: (AccountSummarizer newFor: portfolio) summarize equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Dep�sito por 100.' with: 'Balance = 200').! !

!testRun: #AccountSummaryTest #test01AccountSummaryForAnEmptyReceptiveAccount stamp: 'as 11/14/2020 18:11:47'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAReceptiveAccountWithADeposit stamp: 'as 11/14/2020 18:11:47'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAReceptiveAccountWithTwoDeposit stamp: 'as 11/14/2020 18:11:47'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAReceptiveAccountWithWithdraw stamp: 'as 11/14/2020 18:11:48'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryForAReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 18:11:48'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryForAReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 18:11:48'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryForAReceptiveAccountWithTransferDepositWithADifferentAmount stamp: 'as 11/14/2020 18:11:48'!
PASSED!

!testRun: #AccountSummaryTest #test08AccountSummaryForAnEmptyPortfolio stamp: 'as 11/14/2020 18:11:48'!
PASSED!

!testRun: #AccountSummaryTest #test09AccountSummaryForAPortfolioWithOneDepositAccount stamp: 'as 11/14/2020 18:11:48'!
PASSED!

!testRun: #AccountSummaryTest #test10AccountSummaryForAPortfolioWithTwoDepositAccount stamp: 'as 11/14/2020 18:11:48'!
PASSED!

!testRun: #AccountSummaryTest #test11AccountSummaryForAPortfolioWithTwoAccounts stamp: 'as 11/14/2020 18:11:48'!
PASSED!

Object subclass: #AccountReporter
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #AccountReporter category: 'Portfolio2-Ejercicio' stamp: 'as 11/14/2020 18:33:28'!
Object subclass: #AccountReporter
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

AccountReporter subclass: #TransferNetCalculator
	instanceVariableNames: 'transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #TransferNetCalculator category: 'Portfolio2-Ejercicio' stamp: 'as 11/14/2020 18:33:43'!
AccountReporter subclass: #TransferNetCalculator
	instanceVariableNames: 'transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

AccountReporter subclass: #AccountSummarizer
	instanceVariableNames: 'summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #AccountSummarizer category: 'Portfolio2-Ejercicio' stamp: 'as 11/14/2020 18:33:52'!
AccountReporter subclass: #AccountSummarizer
	instanceVariableNames: 'summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!testRun: #TransferNetTest #test01TransferNetForEmptyReceptiveAccount stamp: 'as 11/14/2020 18:34:27'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 18:34:27'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForReceptiveAccountWithTwoTransferDeposit stamp: 'as 11/14/2020 18:34:27'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 18:34:27'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetForEmptyPortfolio stamp: 'as 11/14/2020 18:34:27'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetForAPortfolioWithAOneTransferAccount stamp: 'as 11/14/2020 18:34:27'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetForAPortfolioWithATwoTransferAccount stamp: 'as 11/14/2020 18:34:27'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryForAnEmptyReceptiveAccount stamp: 'as 11/14/2020 18:34:35'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAReceptiveAccountWithADeposit stamp: 'as 11/14/2020 18:34:35'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAReceptiveAccountWithTwoDeposit stamp: 'as 11/14/2020 18:34:35'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAReceptiveAccountWithWithdraw stamp: 'as 11/14/2020 18:34:35'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryForAReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 18:34:35'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryForAReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 18:34:35'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryForAReceptiveAccountWithTransferDepositWithADifferentAmount stamp: 'as 11/14/2020 18:34:35'!
PASSED!

!testRun: #AccountSummaryTest #test08AccountSummaryForAnEmptyPortfolio stamp: 'as 11/14/2020 18:34:35'!
PASSED!

!testRun: #AccountSummaryTest #test09AccountSummaryForAPortfolioWithOneDepositAccount stamp: 'as 11/14/2020 18:34:35'!
PASSED!

!testRun: #AccountSummaryTest #test10AccountSummaryForAPortfolioWithTwoDepositAccount stamp: 'as 11/14/2020 18:34:35'!
PASSED!

!testRun: #AccountSummaryTest #test11AccountSummaryForAPortfolioWithTwoAccounts stamp: 'as 11/14/2020 18:34:35'!
PASSED!

!methodRemoval: Portfolio #accountSummary stamp: 'as 11/14/2020 18:35:01'!
accountSummary

	| summary |
	summary := OrderedCollection new.
	
	accounts do: [:account | 
		summary := summary,account accountSummary.
		summary removeLast ].
	summary add: 'Balance = ', self balance asString.
	
	^summary.
	!

!methodRemoval: Portfolio #transferNet stamp: 'as 11/14/2020 18:35:13'!
transferNet
	^accounts inject: 0 into: [:transferNet :account | transferNet + account transferNet ].!
!Portfolio methodsFor: 'nil' stamp: 'as 11/14/2020 18:35:57'!
generateReportWith: anAccountReporter
	
	accounts do: [:account | anAccountReporter accumulateAccount: account].
	
	! !

!methodRemoval: ReceptiveAccount #accountSummary stamp: 'as 11/14/2020 18:36:40'!
accountSummary
	| summary |
	summary := OrderedCollection new.
	transactions do: [:aTransaction | summary add: aTransaction asString].
	summary add: ('Balance = ',  self balance asString).
	^summary.
	!

!methodRemoval: ReceptiveAccount #transferNet stamp: 'as 11/14/2020 18:36:43'!
transferNet			
	| transferNet |
	transferNet := 0.
	transactions do: [:transaction |
		transferNet := transaction accumulateToTransferNet: transferNet.
		].
	^transferNet.!
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 18:36:51' prior: 50902627!
calculateTransferNetWith: aTransferNetCalculator

	transactions do: [:transaction | transaction accumulateTo: aTransferNetCalculator].! !
!ReceptiveAccount methodsFor: 'operations' stamp: 'as 11/14/2020 18:37:31'!
generateReportWith: anAccountReporter

	transactions do: [:transaction | transaction accumulateTo: anAccountReporter].! !
!AccountSummarizer methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 18:38:01' prior: 50902097!
summarize
	account generateReportWith: self.
	summary add: 'Balance = ', account balance asString.
	^summary.! !
!TransferNetCalculator methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 18:38:15' prior: 50902200!
calculateTransferNet
	account generateReportWith: self.
	^transferNet.! !

!testRun: #AccountSummaryTest #test01AccountSummaryForAnEmptyReceptiveAccount stamp: 'as 11/14/2020 18:38:21'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAReceptiveAccountWithADeposit stamp: 'as 11/14/2020 18:38:21'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAReceptiveAccountWithTwoDeposit stamp: 'as 11/14/2020 18:38:21'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAReceptiveAccountWithWithdraw stamp: 'as 11/14/2020 18:38:21'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryForAReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 18:38:21'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryForAReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 18:38:21'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryForAReceptiveAccountWithTransferDepositWithADifferentAmount stamp: 'as 11/14/2020 18:38:21'!
PASSED!

!testRun: #AccountSummaryTest #test08AccountSummaryForAnEmptyPortfolio stamp: 'as 11/14/2020 18:38:21'!
PASSED!

!testRun: #AccountSummaryTest #test09AccountSummaryForAPortfolioWithOneDepositAccount stamp: 'as 11/14/2020 18:38:21'!
PASSED!

!testRun: #AccountSummaryTest #test10AccountSummaryForAPortfolioWithTwoDepositAccount stamp: 'as 11/14/2020 18:38:21'!
PASSED!

!testRun: #AccountSummaryTest #test11AccountSummaryForAPortfolioWithTwoAccounts stamp: 'as 11/14/2020 18:38:21'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetForEmptyReceptiveAccount stamp: 'as 11/14/2020 18:38:27'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 18:38:27'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForReceptiveAccountWithTwoTransferDeposit stamp: 'as 11/14/2020 18:38:27'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 18:38:27'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetForEmptyPortfolio stamp: 'as 11/14/2020 18:38:27'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetForAPortfolioWithAOneTransferAccount stamp: 'as 11/14/2020 18:38:27'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetForAPortfolioWithATwoTransferAccount stamp: 'as 11/14/2020 18:38:27'!
PASSED!

!methodRemoval: Portfolio #summarizeWith: stamp: 'as 11/14/2020 18:38:40'!
summarizeWith: anAccountSummarizer

	accounts do: [:account | anAccountSummarizer accumulateAccount: account].!

!methodRemoval: Portfolio #calculateTransferNetWith: stamp: 'as 11/14/2020 18:38:44'!
calculateTransferNetWith: aTransferNetCalculator
	
	accounts do: [:account | aTransferNetCalculator accumulateAccount: account].
	
	!

!methodRemoval: ReceptiveAccount #calculateTransferNetWith: stamp: 'as 11/14/2020 18:38:57'!
calculateTransferNetWith: aTransferNetCalculator

	transactions do: [:transaction | transaction accumulateTo: aTransferNetCalculator].!

!methodRemoval: ReceptiveAccount #summarizeWith: stamp: 'as 11/14/2020 18:39:01'!
summarizeWith: anAccountSummarizer

	transactions do: [:transaction | transaction accumulateTo: anAccountSummarizer].!
!Account methodsFor: 'reporting' stamp: 'as 11/14/2020 18:40:17'!
generateReportWith: anAccountReporter
	self subclassResponsibility ! !
!AccountReporter methodsFor: 'no messages' stamp: 'as 11/14/2020 18:41:51'!
accumulateAccount: anAccount
	self subclassResponsibility ! !
!AccountReporter methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 18:42:17'!
accumulateDeposit: aDeposit
	self subclassResponsibility ! !
!AccountReporter methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 18:42:39'!
accumulateTransferDeposit: aTransferDeposit
	self subclassResponsibility ! !
!AccountReporter methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 18:42:52'!
accumulateTransferWithdraw: aTransferWithdraw
	self subclassResponsibility ! !
!AccountReporter methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 18:42:59'!
accumulateWithdraw: aWithdraw
	self subclassResponsibility ! !
!AccountReporter methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 18:43:33'!
initializeFor: anAccount
	self subclassResponsibility ! !
!AccountReporter class methodsFor: 'no messages' stamp: 'as 11/14/2020 18:47:36'!
newFor: anAccount
	^ self new initializeFor: anAccount.! !

!methodRemoval: AccountSummarizer class #newFor: stamp: 'as 11/14/2020 18:48:06'!
newFor: anAccount
	^ self new initializeFor: anAccount.!

!methodRemoval: TransferNetCalculator class #newFor: stamp: 'as 11/14/2020 18:48:13'!
newFor: anAccount
	^ self new initializeFor: anAccount.!

!testRun: #TransferNetTest #test01TransferNetForEmptyReceptiveAccount stamp: 'as 11/14/2020 18:48:21'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 18:48:21'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForReceptiveAccountWithTwoTransferDeposit stamp: 'as 11/14/2020 18:48:21'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 18:48:21'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetForEmptyPortfolio stamp: 'as 11/14/2020 18:48:21'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetForAPortfolioWithAOneTransferAccount stamp: 'as 11/14/2020 18:48:21'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetForAPortfolioWithATwoTransferAccount stamp: 'as 11/14/2020 18:48:21'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryForAnEmptyReceptiveAccount stamp: 'as 11/14/2020 18:48:43'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAReceptiveAccountWithADeposit stamp: 'as 11/14/2020 18:48:43'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAReceptiveAccountWithTwoDeposit stamp: 'as 11/14/2020 18:48:43'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAReceptiveAccountWithWithdraw stamp: 'as 11/14/2020 18:48:43'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryForAReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 18:48:43'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryForAReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 18:48:43'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryForAReceptiveAccountWithTransferDepositWithADifferentAmount stamp: 'as 11/14/2020 18:48:43'!
PASSED!

!testRun: #AccountSummaryTest #test08AccountSummaryForAnEmptyPortfolio stamp: 'as 11/14/2020 18:48:43'!
PASSED!

!testRun: #AccountSummaryTest #test09AccountSummaryForAPortfolioWithOneDepositAccount stamp: 'as 11/14/2020 18:48:43'!
PASSED!

!testRun: #AccountSummaryTest #test10AccountSummaryForAPortfolioWithTwoDepositAccount stamp: 'as 11/14/2020 18:48:43'!
PASSED!

!testRun: #AccountSummaryTest #test11AccountSummaryForAPortfolioWithTwoAccounts stamp: 'as 11/14/2020 18:48:43'!
PASSED!
!AccountTransaction methodsFor: 'transfer' stamp: 'as 11/14/2020 18:51:15'!
accumulateTo: anAccountReporter
	self subclassResponsibility! !
!Deposit methodsFor: 'reporting operations' stamp: 'as 11/14/2020 18:52:19' prior: 50902462 overrides: 50903404!
accumulateTo: anAccountReporter
	anAccountReporter accumulateDeposit: self.! !
!TransferDeposit methodsFor: 'reporting operations' stamp: 'as 11/14/2020 18:52:39' prior: 50902457 overrides: 50903410!
accumulateTo: anAccountReporter
	anAccountReporter accumulateTransferDeposit: self.! !

!methodRemoval: TransferDeposit #accumulateToTransferNet: stamp: 'as 11/14/2020 18:53:13'!
accumulateToTransferNet: aTransferNet
	^aTransferNet + value.!

!methodRemoval: Withdraw #asString stamp: 'as 11/14/2020 18:54:14'!
asString
	^'Extracci�n por ', value asString, '.'.!
!Withdraw methodsFor: 'nil' stamp: 'as 11/14/2020 18:54:26' prior: 50902467 overrides: 50903404!
accumulateTo: anAccountReporter
	anAccountReporter accumulateWithdraw: self.! !

!methodRemoval: TransferWithdraw #accumulateToTransferNet: stamp: 'as 11/14/2020 18:55:06'!
accumulateToTransferNet: aTransferNet
	^aTransferNet - value.!

!methodRemoval: Transfer #checkWithdrawIsRegisteredIn: stamp: 'as 11/14/2020 18:57:35'!
checkWithdrawIsRegisteredIn: anAccount
	^anAccount hasRegistered: withdraw.
	!

!methodRemoval: Transfer #checkDepositIsRegisteredIn: stamp: 'as 11/14/2020 18:57:38'!
checkDepositIsRegisteredIn: anAccount
	^anAccount hasRegistered: deposit.
	!
!AccountTransaction methodsFor: 'reporting operations' stamp: 'as 11/14/2020 19:01:42' prior: 50903404!
accumulateTo: anAccountReporter

	self subclassResponsibility! !
!Deposit methodsFor: 'reporting operations' stamp: 'as 11/14/2020 19:01:57' prior: 50903410 overrides: 50903454!
accumulateTo: anAccountReporter

	anAccountReporter accumulateDeposit: self.! !
!Withdraw methodsFor: 'reporting operations' stamp: 'as 11/14/2020 19:02:20' prior: 50903432 overrides: 50903454!
accumulateTo: anAccountReporter

	anAccountReporter accumulateWithdraw: self.! !
!AccountSummaryTest methodsFor: 'setUp' stamp: 'as 11/14/2020 19:05:58' overrides: 16927572!
setUp! !

!classDefinition: #AccountSummaryTest category: 'Portfolio2-Ejercicio' stamp: 'as 11/14/2020 19:07:26'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: 'account11'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #AccountSummaryTest category: 'Portfolio2-Ejercicio' stamp: 'as 11/14/2020 19:07:27'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: 'account11 account22'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!AccountSummaryTest methodsFor: 'setUp' stamp: 'as 11/14/2020 19:07:23' prior: 50903473 overrides: 16927572!
setUp
	
	account11 := ReceptiveAccount new.	
	account22 := ReceptiveAccount new.	! !
!AccountSummaryTest methodsFor: 'account summary' stamp: 'as 11/14/2020 19:07:53' prior: 50902805!
test01AccountSummaryForAnEmptyReceptiveAccount
	
	account11 := ReceptiveAccount new.	
	
	self assert: (AccountSummarizer newFor: account11) summarize equals: (OrderedCollection with: 'Balance = 0').! !
!AccountSummaryTest methodsFor: 'account summary' stamp: 'as 11/14/2020 19:08:05' prior: 50902815!
test02AccountSummaryForAReceptiveAccountWithADeposit
	
	account11 := ReceptiveAccount new.	
	Deposit register: 100 on: account11.
	
	self assert: (AccountSummarizer newFor: account11) summarize equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100').! !
!AccountSummaryTest methodsFor: 'account summary' stamp: 'as 11/14/2020 19:08:23' prior: 50902832!
test03AccountSummaryForAReceptiveAccountWithTwoDeposit

	Deposit register: 100 on: account11.
	Deposit register: 100 on: account11.	
	
	self assert: (AccountSummarizer newFor: account11) summarize equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Dep�sito por 100.' with: 'Balance = 200').! !
!AccountSummaryTest methodsFor: 'account summary' stamp: 'as 11/14/2020 19:08:28' prior: 50903510!
test02AccountSummaryForAReceptiveAccountWithADeposit
	
	Deposit register: 100 on: account11.
	
	self assert: (AccountSummarizer newFor: account11) summarize equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100').! !
!AccountSummaryTest methodsFor: 'account summary' stamp: 'as 11/14/2020 19:08:32' prior: 50903500!
test01AccountSummaryForAnEmptyReceptiveAccount
	
	self assert: (AccountSummarizer newFor: account11) summarize equals: (OrderedCollection with: 'Balance = 0').! !
!AccountSummaryTest methodsFor: 'account summary' stamp: 'as 11/14/2020 19:08:42' prior: 50902851!
test04AccountSummaryForAReceptiveAccountWithWithdraw
	
	Withdraw register: 100 on: account11.	
	
	self assert: (AccountSummarizer newFor: account11) summarize equals: (OrderedCollection with: 'Extracci�n por 100.' with: 'Balance = -100').! !
!AccountSummaryTest methodsFor: 'account summary' stamp: 'as 11/14/2020 19:08:56' prior: 50902864!
test05AccountSummaryForAReceptiveAccountWithTransferWithdraw
	
	Transfer anAmountOf: 100 from: account11 to: account22.
	
	self assert: (AccountSummarizer newFor: account11) summarize equals: (OrderedCollection with: 'Salida por transferencia de 100.' with: 'Balance = -100').! !
!AccountSummaryTest methodsFor: 'account summary' stamp: 'as 11/14/2020 19:09:07' prior: 50902879!
test06AccountSummaryForAReceptiveAccountWithTransferDeposit
	
	Transfer anAmountOf: 100 from: account11 to: account22.
	
	self assert: (AccountSummarizer newFor: account22) summarize equals: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100').! !
!AccountSummaryTest methodsFor: 'account summary' stamp: 'as 11/14/2020 19:09:17' prior: 50902894!
test07AccountSummaryForAReceptiveAccountWithTransferDepositWithADifferentAmount
	
	Transfer anAmountOf: 50 from: account11 to: account22.
	
	self assert: (AccountSummarizer newFor: account22) summarize equals: (OrderedCollection with: 'Entrada por transferencia de 50.' with: 'Balance = 50').! !
!AccountSummaryTest methodsFor: 'portfolio summary' stamp: 'as 11/14/2020 19:10:00' prior: 50902950!
test11AccountSummaryForAPortfolioWithTwoAccounts
	
	| portfolio |
	Deposit register: 100 on: account11.
	Deposit register: 100 on: account22.
	portfolio := Portfolio with: account11.
	portfolio add: account22.
	
	self assert: (AccountSummarizer newFor: portfolio) summarize equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Dep�sito por 100.' with: 'Balance = 200').! !
!AccountSummaryTest methodsFor: 'portfolio summary' stamp: 'as 11/14/2020 19:10:22' prior: 50902934!
test10AccountSummaryForAPortfolioWithTwoDepositAccount 
	
	| portfolio |
	
	Deposit register: 100 on: account11.
	Deposit register: 100 on: account11.
	portfolio := Portfolio with: account11.
	
	self assert:(AccountSummarizer newFor: portfolio) summarize equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Dep�sito por 100.' with: 'Balance = 200').! !

!classDefinition: #AccountSummaryTest category: 'Portfolio2-Ejercicio' stamp: 'as 11/14/2020 19:10:34'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: 'account1 account22'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:10:34' prior: 50903603!
test11AccountSummaryForAPortfolioWithTwoAccounts
	
	| portfolio |
	Deposit register: 100 on: account1.
	Deposit register: 100 on: account22.
	portfolio := Portfolio with: account1.
	portfolio add: account22.
	
	self assert: (AccountSummarizer newFor: portfolio) summarize equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Dep�sito por 100.' with: 'Balance = 200').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:10:34' prior: 50903566!
test05AccountSummaryForAReceptiveAccountWithTransferWithdraw
	
	Transfer anAmountOf: 100 from: account1 to: account22.
	
	self assert: (AccountSummarizer newFor: account1) summarize equals: (OrderedCollection with: 'Salida por transferencia de 100.' with: 'Balance = -100').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:10:34' prior: 50903546!
test01AccountSummaryForAnEmptyReceptiveAccount
	
	self assert: (AccountSummarizer newFor: account1) summarize equals: (OrderedCollection with: 'Balance = 0').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:10:34' prior: 50903555!
test04AccountSummaryForAReceptiveAccountWithWithdraw
	
	Withdraw register: 100 on: account1.	
	
	self assert: (AccountSummarizer newFor: account1) summarize equals: (OrderedCollection with: 'Extracci�n por 100.' with: 'Balance = -100').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:10:34' prior: 50903494 overrides: 16927572!
setUp
	
	account1 := ReceptiveAccount new.	
	account22 := ReceptiveAccount new.	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:10:34' prior: 50903522!
test03AccountSummaryForAReceptiveAccountWithTwoDeposit

	Deposit register: 100 on: account1.
	Deposit register: 100 on: account1.	
	
	self assert: (AccountSummarizer newFor: account1) summarize equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Dep�sito por 100.' with: 'Balance = 200').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:10:34' prior: 50903578!
test06AccountSummaryForAReceptiveAccountWithTransferDeposit
	
	Transfer anAmountOf: 100 from: account1 to: account22.
	
	self assert: (AccountSummarizer newFor: account22) summarize equals: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:10:34' prior: 50903535!
test02AccountSummaryForAReceptiveAccountWithADeposit
	
	Deposit register: 100 on: account1.
	
	self assert: (AccountSummarizer newFor: account1) summarize equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:10:34' prior: 50903619!
test10AccountSummaryForAPortfolioWithTwoDepositAccount 
	
	| portfolio |
	
	Deposit register: 100 on: account1.
	Deposit register: 100 on: account1.
	portfolio := Portfolio with: account1.
	
	self assert:(AccountSummarizer newFor: portfolio) summarize equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Dep�sito por 100.' with: 'Balance = 200').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:10:34' prior: 50903590!
test07AccountSummaryForAReceptiveAccountWithTransferDepositWithADifferentAmount
	
	Transfer anAmountOf: 50 from: account1 to: account22.
	
	self assert: (AccountSummarizer newFor: account22) summarize equals: (OrderedCollection with: 'Entrada por transferencia de 50.' with: 'Balance = 50').! !

!classDefinition: #AccountSummaryTest category: 'Portfolio2-Ejercicio' stamp: 'as 11/14/2020 19:10:41'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: 'account1 account2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:10:41' prior: 50903691 overrides: 16927572!
setUp
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:10:41' prior: 50903710!
test06AccountSummaryForAReceptiveAccountWithTransferDeposit
	
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: (AccountSummarizer newFor: account2) summarize equals: (OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:10:41' prior: 50903658!
test05AccountSummaryForAReceptiveAccountWithTransferWithdraw
	
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: (AccountSummarizer newFor: account1) summarize equals: (OrderedCollection with: 'Salida por transferencia de 100.' with: 'Balance = -100').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:10:41' prior: 50903642!
test11AccountSummaryForAPortfolioWithTwoAccounts
	
	| portfolio |
	Deposit register: 100 on: account1.
	Deposit register: 100 on: account2.
	portfolio := Portfolio with: account1.
	portfolio add: account2.
	
	self assert: (AccountSummarizer newFor: portfolio) summarize equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Dep�sito por 100.' with: 'Balance = 200').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:10:41' prior: 50903748!
test07AccountSummaryForAReceptiveAccountWithTransferDepositWithADifferentAmount
	
	Transfer anAmountOf: 50 from: account1 to: account2.
	
	self assert: (AccountSummarizer newFor: account2) summarize equals: (OrderedCollection with: 'Entrada por transferencia de 50.' with: 'Balance = 50').! !
!AccountSummaryTest methodsFor: 'portfolio summary' stamp: 'as 11/14/2020 19:10:59' prior: 50902920!
test09AccountSummaryForAPortfolioWithOneDepositAccount 
	
	| portfolio |
	
	Deposit register: 100 on: account1.
	portfolio := Portfolio with: account1.
	
	self assert: (AccountSummarizer newFor: portfolio) summarize equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100').! !

!classDefinition: #AccountSummaryTest category: 'Portfolio2-Ejercicio' stamp: 'as 11/14/2020 19:11:24'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: 'account1 account2 portfolio1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!AccountSummaryTest methodsFor: 'setUp' stamp: 'as 11/14/2020 19:11:23' prior: 50903770 overrides: 16927572!
setUp
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.		
	portfolio1 := Portfolio new.! !
!AccountSummaryTest methodsFor: 'portfolio summary' stamp: 'as 11/14/2020 19:11:36' prior: 50902910!
test08AccountSummaryForAnEmptyPortfolio
		
	self assert: (AccountSummarizer newFor: portfolio1) summarize equals: (OrderedCollection with: 'Balance = 0').! !
!AccountSummaryTest methodsFor: 'portfolio summary' stamp: 'as 11/14/2020 19:12:09' prior: 50903828!
test09AccountSummaryForAPortfolioWithOneDepositAccount 
		
	Deposit register: 100 on: account1.
	portfolio1 add: account1.
	
	self assert: (AccountSummarizer newFor: portfolio1) summarize equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100').! !
!AccountSummaryTest methodsFor: 'portfolio summary' stamp: 'as 11/14/2020 19:12:23' prior: 50903733!
test10AccountSummaryForAPortfolioWithTwoDepositAccount 
		
	Deposit register: 100 on: account1.
	Deposit register: 100 on: account1.
	portfolio1 add: account1.
	
	self assert:(AccountSummarizer newFor: portfolio1) summarize equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Dep�sito por 100.' with: 'Balance = 200').! !
!AccountSummaryTest methodsFor: 'portfolio summary' stamp: 'as 11/14/2020 19:12:42' prior: 50903800!
test11AccountSummaryForAPortfolioWithTwoAccounts
	
	Deposit register: 100 on: account1.
	Deposit register: 100 on: account2.
	portfolio1 add: account1.
	portfolio1 add: account2.
	
	self assert: (AccountSummarizer newFor: portfolio1) summarize equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Dep�sito por 100.' with: 'Balance = 200').! !

!classDefinition: #AccountSummaryTest category: 'Portfolio2-Ejercicio' stamp: 'as 11/14/2020 19:12:51'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: 'account1 account2 portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:12:51' prior: 50903850 overrides: 16927572!
setUp
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.		
	portfolio := Portfolio new.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:12:51' prior: 50903857!
test08AccountSummaryForAnEmptyPortfolio
		
	self assert: (AccountSummarizer newFor: portfolio) summarize equals: (OrderedCollection with: 'Balance = 0').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:12:51' prior: 50903878!
test10AccountSummaryForAPortfolioWithTwoDepositAccount 
		
	Deposit register: 100 on: account1.
	Deposit register: 100 on: account1.
	portfolio add: account1.
	
	self assert:(AccountSummarizer newFor: portfolio) summarize equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Dep�sito por 100.' with: 'Balance = 200').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:12:51' prior: 50903866!
test09AccountSummaryForAPortfolioWithOneDepositAccount 
		
	Deposit register: 100 on: account1.
	portfolio add: account1.
	
	self assert: (AccountSummarizer newFor: portfolio) summarize equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Balance = 100').! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:12:51' prior: 50903892!
test11AccountSummaryForAPortfolioWithTwoAccounts
	
	Deposit register: 100 on: account1.
	Deposit register: 100 on: account2.
	portfolio add: account1.
	portfolio add: account2.
	
	self assert: (AccountSummarizer newFor: portfolio) summarize equals: (OrderedCollection with: 'Dep�sito por 100.' with: 'Dep�sito por 100.' with: 'Balance = 200').! !

!testRun: #AccountSummaryTest #test01AccountSummaryForAnEmptyReceptiveAccount stamp: 'as 11/14/2020 19:12:56'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAReceptiveAccountWithADeposit stamp: 'as 11/14/2020 19:12:56'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAReceptiveAccountWithTwoDeposit stamp: 'as 11/14/2020 19:12:56'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAReceptiveAccountWithWithdraw stamp: 'as 11/14/2020 19:12:56'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryForAReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 19:12:56'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryForAReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 19:12:56'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryForAReceptiveAccountWithTransferDepositWithADifferentAmount stamp: 'as 11/14/2020 19:12:56'!
PASSED!

!testRun: #AccountSummaryTest #test08AccountSummaryForAnEmptyPortfolio stamp: 'as 11/14/2020 19:12:56'!
PASSED!

!testRun: #AccountSummaryTest #test09AccountSummaryForAPortfolioWithOneDepositAccount stamp: 'as 11/14/2020 19:12:57'!
PASSED!

!testRun: #AccountSummaryTest #test10AccountSummaryForAPortfolioWithTwoDepositAccount stamp: 'as 11/14/2020 19:12:57'!
PASSED!

!testRun: #AccountSummaryTest #test11AccountSummaryForAPortfolioWithTwoAccounts stamp: 'as 11/14/2020 19:12:57'!
PASSED!

!classDefinition: #TransferNetTest category: 'Portfolio2-Ejercicio' stamp: 'as 11/14/2020 19:13:47'!
TestCase subclass: #TransferNetTest
	instanceVariableNames: 'account11'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #TransferNetTest category: 'Portfolio2-Ejercicio' stamp: 'as 11/14/2020 19:13:49'!
TestCase subclass: #TransferNetTest
	instanceVariableNames: 'account11 account22'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #TransferNetTest category: 'Portfolio2-Ejercicio' stamp: 'as 11/14/2020 19:13:50'!
TestCase subclass: #TransferNetTest
	instanceVariableNames: 'account11 account22 portfolio1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!TransferNetTest methodsFor: 'nil' stamp: 'as 11/14/2020 19:13:46' overrides: 16927572!
setUp
	
	account11 := ReceptiveAccount new.	
	account22:= ReceptiveAccount new.		
	portfolio1 := Portfolio new.! !
!TransferNetTest methodsFor: 'account transfer net' stamp: 'as 11/14/2020 19:14:07' prior: 50902642!
test01TransferNetForEmptyReceptiveAccount

	self assert: (TransferNetCalculator newFor: account11) calculateTransferNet equals: 0.
	! !
!TransferNetTest methodsFor: 'account transfer net' stamp: 'as 11/14/2020 19:14:20' prior: 50902655!
test02TransferNetForReceptiveAccountWithTransferDeposit

	Transfer anAmountOf: 100 from: account11 to: account22.
	
	self assert: (TransferNetCalculator newFor: account22) calculateTransferNet equals: 100.
	! !
!TransferNetTest methodsFor: 'account transfer net' stamp: 'as 11/14/2020 19:14:32' prior: 50902695!
test03TransferNetForReceptiveAccountWithTwoTransferDeposit

	Transfer anAmountOf: 100 from: account11 to: account22.
	Transfer anAmountOf: 100 from: account11 to: account22.
	
	self assert: (TransferNetCalculator newFor: account22) calculateTransferNet equals: 200.
	! !
!TransferNetTest methodsFor: 'account transfer net' stamp: 'as 11/14/2020 19:14:44' prior: 50902714!
test04TransferNetForReceptiveAccountWithTransferWithdraw

	Transfer anAmountOf: 100 from: account11 to: account22.
	
	self assert: (TransferNetCalculator newFor: account11) calculateTransferNet equals: -100.
	! !
!TransferNetTest methodsFor: 'portfolio transfer net' stamp: 'as 11/14/2020 19:15:53' prior: 50902771!
test07TransferNetForAPortfolioWithATwoTransferAccount
	
	portfolio1 add: account22.
	Transfer anAmountOf: 100 from: account11 to: account22.
	Transfer anAmountOf: 100 from: account11 to: account22.	
	
	self assert:  (TransferNetCalculator newFor: portfolio1) calculateTransferNet equals: 200.
	! !
!TransferNetTest methodsFor: 'portfolio transfer net' stamp: 'as 11/14/2020 19:16:24' prior: 50902752!
test06TransferNetForAPortfolioWithAOneTransferAccount
	
	portfolio1 add: account22.
	Transfer anAmountOf: 100 from: account11 to: account22.
	
	self assert:  (TransferNetCalculator newFor: portfolio1) calculateTransferNet equals: 100.
	! !
!TransferNetTest methodsFor: 'portfolio transfer net' stamp: 'as 11/14/2020 19:16:36' prior: 50902740!
test05TransferNetForEmptyPortfolio

	self assert: (TransferNetCalculator newFor: portfolio1) calculateTransferNet equals: 0.
	! !

!classDefinition: #TransferNetTest category: 'Portfolio2-Ejercicio' stamp: 'as 11/14/2020 19:16:44'!
TestCase subclass: #TransferNetTest
	instanceVariableNames: 'account1 account22 portfolio1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:16:44' prior: 50904088!
test07TransferNetForAPortfolioWithATwoTransferAccount
	
	portfolio1 add: account22.
	Transfer anAmountOf: 100 from: account1 to: account22.
	Transfer anAmountOf: 100 from: account1 to: account22.	
	
	self assert:  (TransferNetCalculator newFor: portfolio1) calculateTransferNet equals: 200.
	! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:16:44' prior: 50904101!
test06TransferNetForAPortfolioWithAOneTransferAccount
	
	portfolio1 add: account22.
	Transfer anAmountOf: 100 from: account1 to: account22.
	
	self assert:  (TransferNetCalculator newFor: portfolio1) calculateTransferNet equals: 100.
	! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:16:44' prior: 50904056!
test02TransferNetForReceptiveAccountWithTransferDeposit

	Transfer anAmountOf: 100 from: account1 to: account22.
	
	self assert: (TransferNetCalculator newFor: account22) calculateTransferNet equals: 100.
	! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:16:44' prior: 50904041 overrides: 16927572!
setUp
	
	account1 := ReceptiveAccount new.	
	account22:= ReceptiveAccount new.		
	portfolio1 := Portfolio new.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:16:44' prior: 50904048!
test01TransferNetForEmptyReceptiveAccount

	self assert: (TransferNetCalculator newFor: account1) calculateTransferNet equals: 0.
	! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:16:44' prior: 50904066!
test03TransferNetForReceptiveAccountWithTwoTransferDeposit

	Transfer anAmountOf: 100 from: account1 to: account22.
	Transfer anAmountOf: 100 from: account1 to: account22.
	
	self assert: (TransferNetCalculator newFor: account22) calculateTransferNet equals: 200.
	! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:16:44' prior: 50904078!
test04TransferNetForReceptiveAccountWithTransferWithdraw

	Transfer anAmountOf: 100 from: account1 to: account22.
	
	self assert: (TransferNetCalculator newFor: account1) calculateTransferNet equals: -100.
	! !

!classDefinition: #TransferNetTest category: 'Portfolio2-Ejercicio' stamp: 'as 11/14/2020 19:16:50'!
TestCase subclass: #TransferNetTest
	instanceVariableNames: 'account1 account2 portfolio1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:16:50' prior: 50904141!
test06TransferNetForAPortfolioWithAOneTransferAccount
	
	portfolio1 add: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert:  (TransferNetCalculator newFor: portfolio1) calculateTransferNet equals: 100.
	! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:16:50' prior: 50904190!
test04TransferNetForReceptiveAccountWithTransferWithdraw

	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: (TransferNetCalculator newFor: account1) calculateTransferNet equals: -100.
	! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:16:50' prior: 50904163 overrides: 16927572!
setUp
	
	account1 := ReceptiveAccount new.	
	account2:= ReceptiveAccount new.		
	portfolio1 := Portfolio new.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:16:50' prior: 50904128!
test07TransferNetForAPortfolioWithATwoTransferAccount
	
	portfolio1 add: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.	
	
	self assert:  (TransferNetCalculator newFor: portfolio1) calculateTransferNet equals: 200.
	! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:16:50' prior: 50904178!
test03TransferNetForReceptiveAccountWithTwoTransferDeposit

	Transfer anAmountOf: 100 from: account1 to: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: (TransferNetCalculator newFor: account2) calculateTransferNet equals: 200.
	! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:16:50' prior: 50904152!
test02TransferNetForReceptiveAccountWithTransferDeposit

	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: (TransferNetCalculator newFor: account2) calculateTransferNet equals: 100.
	! !

!classDefinition: #TransferNetTest category: 'Portfolio2-Ejercicio' stamp: 'as 11/14/2020 19:16:54'!
TestCase subclass: #TransferNetTest
	instanceVariableNames: 'account1 account2 portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:16:54' prior: 50904238!
test07TransferNetForAPortfolioWithATwoTransferAccount
	
	portfolio add: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.	
	
	self assert:  (TransferNetCalculator newFor: portfolio) calculateTransferNet equals: 200.
	! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:16:54' prior: 50904112!
test05TransferNetForEmptyPortfolio

	self assert: (TransferNetCalculator newFor: portfolio) calculateTransferNet equals: 0.
	! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:16:54' prior: 50904231 overrides: 16927572!
setUp
	
	account1 := ReceptiveAccount new.	
	account2:= ReceptiveAccount new.		
	portfolio := Portfolio new.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:16:54' prior: 50904209!
test06TransferNetForAPortfolioWithAOneTransferAccount
	
	portfolio add: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert:  (TransferNetCalculator newFor: portfolio) calculateTransferNet equals: 100.
	! !
!TransferNetTest methodsFor: 'account transfer net' stamp: 'as 11/14/2020 19:17:40' prior: 50904251!
test03TransferNetForReceptiveAccountWithTwoTransferDeposit

	"Transfer anAmountOf: 100 from: account1 to: account2.
	Transfer anAmountOf: 100 from: account1 to: account2."
	
	self transfer100FromAccount1ToAccount2.
	self transfer100FromAccount1ToAccount2.
	
	self assert: (TransferNetCalculator newFor: account2) calculateTransferNet equals: 200.
	! !
!TransferNetTest methodsFor: 'nil' stamp: 'as 11/14/2020 19:17:49'!
transfer100FromAccount1ToAccount2
	! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:18:04' prior: 50904335!
transfer100FromAccount1ToAccount2
	Transfer anAmountOf: 100 from: account1 to: account2! !

!testRun: #TransferNetTest #test03TransferNetForReceptiveAccountWithTwoTransferDeposit stamp: 'as 11/14/2020 19:18:14'!
PASSED!
!TransferNetTest methodsFor: 'account transfer net' stamp: 'as 11/14/2020 19:18:22' prior: 50904321!
test03TransferNetForReceptiveAccountWithTwoTransferDeposit

	self transfer100FromAccount1ToAccount2.
	self transfer100FromAccount1ToAccount2.
	
	self assert: (TransferNetCalculator newFor: account2) calculateTransferNet equals: 200.
	! !
!TransferNetTest methodsFor: 'account transfer net' stamp: 'as 11/14/2020 19:18:33' prior: 50904263!
test02TransferNetForReceptiveAccountWithTransferDeposit

	"Transfer anAmountOf: 100 from: account1 to: account2."
	self transfer100FromAccount1ToAccount2.
	self assert: (TransferNetCalculator newFor: account2) calculateTransferNet equals: 100.
	! !

!testRun: #TransferNetTest #test02TransferNetForReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 19:18:37'!
PASSED!
!TransferNetTest methodsFor: 'account transfer net' stamp: 'as 11/14/2020 19:18:42' prior: 50904362!
test02TransferNetForReceptiveAccountWithTransferDeposit

	self transfer100FromAccount1ToAccount2.
	
	self assert: (TransferNetCalculator newFor: account2) calculateTransferNet equals: 100.
	! !
!TransferNetTest methodsFor: 'account transfer net' stamp: 'as 11/14/2020 19:19:00' prior: 50904220!
test04TransferNetForReceptiveAccountWithTransferWithdraw

	self transfer100FromAccount1ToAccount2.
	
	self assert: (TransferNetCalculator newFor: account1) calculateTransferNet equals: -100.
	! !

!testRun: #TransferNetTest #test04TransferNetForReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 19:19:03'!
PASSED!
!TransferNetTest methodsFor: 'portfolio transfer net' stamp: 'as 11/14/2020 19:19:12' prior: 50904310!
test06TransferNetForAPortfolioWithAOneTransferAccount
	
	portfolio add: account2.
	self transfer100FromAccount1ToAccount2.
	
	self assert:  (TransferNetCalculator newFor: portfolio) calculateTransferNet equals: 100.
	! !
!TransferNetTest methodsFor: 'portfolio transfer net' stamp: 'as 11/14/2020 19:19:25' prior: 50904282!
test07TransferNetForAPortfolioWithATwoTransferAccount
	
	portfolio add: account2.
	"Transfer anAmountOf: 100 from: account1 to: account2.
	Transfer anAmountOf: 100 from: account1 to: account2.	"
	self transfer100FromAccount1ToAccount2.
	self transfer100FromAccount1ToAccount2.
	
	self assert:  (TransferNetCalculator newFor: portfolio) calculateTransferNet equals: 200.
	! !

!testRun: #TransferNetTest #test01TransferNetForEmptyReceptiveAccount stamp: 'as 11/14/2020 19:19:28'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForReceptiveAccountWithTransferDeposit stamp: 'as 11/14/2020 19:19:28'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForReceptiveAccountWithTwoTransferDeposit stamp: 'as 11/14/2020 19:19:28'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForReceptiveAccountWithTransferWithdraw stamp: 'as 11/14/2020 19:19:28'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetForEmptyPortfolio stamp: 'as 11/14/2020 19:19:28'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetForAPortfolioWithAOneTransferAccount stamp: 'as 11/14/2020 19:19:28'!
PASSED!

!testRun: #TransferNetTest #test07TransferNetForAPortfolioWithATwoTransferAccount stamp: 'as 11/14/2020 19:19:28'!
PASSED!
!TransferNetTest methodsFor: 'portfolio transfer net' stamp: 'as 11/14/2020 19:19:31' prior: 50904412!
test07TransferNetForAPortfolioWithATwoTransferAccount
	
	portfolio add: account2.
	self transfer100FromAccount1ToAccount2.
	self transfer100FromAccount1ToAccount2.
	
	self assert:  (TransferNetCalculator newFor: portfolio) calculateTransferNet equals: 200.
	! !

!classDefinition: #TransferTest category: 'Portfolio2-Ejercicio' stamp: 'as 11/14/2020 19:20:27'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'account11'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!

!classDefinition: #TransferTest category: 'Portfolio2-Ejercicio' stamp: 'as 11/14/2020 19:20:33'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'account11 account22'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!TransferTest methodsFor: 'nil' stamp: 'as 11/14/2020 19:20:32' overrides: 16927572!
setUp
	
	account11 := ReceptiveAccount new.	
	account22= ReceptiveAccount new.		! !
!TransferTest methodsFor: 'tests' stamp: 'as 11/14/2020 19:20:50' prior: 50901064!
test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	Transfer anAmountOf: 100 from: account11 to: account22.
	
	self assert: account11 balance equals: -100.
	self assert: account22 balance equals: 100.	
	
	! !
!TransferTest methodsFor: 'tests' stamp: 'as 11/14/2020 19:21:14' prior: 50901078!
test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| transfer|
	
	transfer := Transfer anAmountOf: 100 from: account11 to: account22.

	self assert: (account11 hasRegistered: transfer withdraw).
	self assert: (account22 hasRegistered: transfer deposit).	
	! !
!TransferTest methodsFor: 'tests' stamp: 'as 11/14/2020 19:21:32' prior: 50901094!
test03AccountTransactionsInTransferAreConnected

	| transfer|
	
	transfer := Transfer anAmountOf: 100 from: account11 to: account22.

	self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	
	
! !
!TransferTest methodsFor: 'tests' stamp: 'as 11/14/2020 19:21:48' prior: 50901110!
test04AccountCannotTransferToItself
	
	self 
		should: [ Transfer anAmountOf: 100 from: account11 to: account11. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: Transfer invalidTransferErrorMessage equals: anError messageText. ]

	! !
!TransferTest methodsFor: 'tests' stamp: 'as 11/14/2020 19:22:00' prior: 50901123!
test05AccountCannotTransferInvalidAmount
	
	self 
		should: [ Transfer anAmountOf: -100 from: account11 to: account22. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: Transfer invalidTransferErrorMessage equals: anError messageText. ]

	! !

!testRun: #TransferTest #test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer stamp: 'as 11/14/2020 19:22:07'!
ERROR!

!testRun: #TransferTest #test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer stamp: 'as 11/14/2020 19:22:07'!
ERROR!

!testRun: #TransferTest #test03AccountTransactionsInTransferAreConnected stamp: 'as 11/14/2020 19:22:07'!
ERROR!

!testRun: #TransferTest #test04AccountCannotTransferToItself stamp: 'as 11/14/2020 19:22:07'!
PASSED!

!testRun: #TransferTest #test05AccountCannotTransferInvalidAmount stamp: 'as 11/14/2020 19:22:07'!
PASSED!

!testRun: #TransferTest #test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer stamp: 'as 11/14/2020 19:23:11'!
ERROR!

!testRun: #TransferTest #test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer stamp: 'as 11/14/2020 19:23:11'!
ERROR!
!TransferTest methodsFor: 'setUp' stamp: 'as 11/14/2020 19:24:01' prior: 50904481 overrides: 16927572!
setUp
	
	account11 := ReceptiveAccount new.	
	account22 := ReceptiveAccount new.		! !
!TransferNetTest methodsFor: 'setUp' stamp: 'as 11/14/2020 19:24:11' prior: 50904303 overrides: 16927572!
setUp
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.		
	portfolio := Portfolio new.! !

!testRun: #TransferTest #test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer stamp: 'as 11/14/2020 19:24:19'!
PASSED!

!testRun: #TransferTest #test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer stamp: 'as 11/14/2020 19:24:19'!
PASSED!

!testRun: #TransferTest #test03AccountTransactionsInTransferAreConnected stamp: 'as 11/14/2020 19:24:19'!
PASSED!

!testRun: #TransferTest #test04AccountCannotTransferToItself stamp: 'as 11/14/2020 19:24:19'!
PASSED!

!testRun: #TransferTest #test05AccountCannotTransferInvalidAmount stamp: 'as 11/14/2020 19:24:19'!
PASSED!

!classDefinition: #TransferTest category: 'Portfolio2-Ejercicio' stamp: 'as 11/14/2020 19:24:38'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'account1 account22'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:24:38' prior: 50904522!
test04AccountCannotTransferToItself
	
	self 
		should: [ Transfer anAmountOf: 100 from: account1 to: account1. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: Transfer invalidTransferErrorMessage equals: anError messageText. ]

	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:24:38' prior: 50904573 overrides: 16927572!
setUp
	
	account1 := ReceptiveAccount new.	
	account22 := ReceptiveAccount new.		! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:24:38' prior: 50904509!
test03AccountTransactionsInTransferAreConnected

	| transfer|
	
	transfer := Transfer anAmountOf: 100 from: account1 to: account22.

	self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	
	
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:24:38' prior: 50904497!
test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| transfer|
	
	transfer := Transfer anAmountOf: 100 from: account1 to: account22.

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account22 hasRegistered: transfer deposit).	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:24:38' prior: 50904487!
test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	Transfer anAmountOf: 100 from: account1 to: account22.
	
	self assert: account1 balance equals: -100.
	self assert: account22 balance equals: 100.	
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:24:38' prior: 50904533!
test05AccountCannotTransferInvalidAmount
	
	self 
		should: [ Transfer anAmountOf: -100 from: account1 to: account22. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: Transfer invalidTransferErrorMessage equals: anError messageText. ]

	! !

!classDefinition: #TransferTest category: 'Portfolio2-Ejercicio' stamp: 'as 11/14/2020 19:24:44'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'account1 account2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Ejercicio'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:24:44' prior: 50904631!
test03AccountTransactionsInTransferAreConnected

	| transfer|
	
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: transfer withdraw transferDepositAssociated equals: transfer deposit.
	self assert: transfer deposit transferWithdrawAssociated equals: transfer withdraw.	
	
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:24:44' prior: 50904625 overrides: 16927572!
setUp
	
	account1 := ReceptiveAccount new.	
	account2 := ReceptiveAccount new.		! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:24:44' prior: 50904644!
test02AccountTransactionsAreRegisteredInReceptiveAccountsInvolvedAfterTransfer

	| transfer|
	
	transfer := Transfer anAmountOf: 100 from: account1 to: account2.

	self assert: (account1 hasRegistered: transfer withdraw).
	self assert: (account2 hasRegistered: transfer deposit).	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:24:44' prior: 50904668!
test05AccountCannotTransferInvalidAmount
	
	self 
		should: [ Transfer anAmountOf: -100 from: account1 to: account2. ]
		raise: Error
		withExceptionDo: [ :anError | 
			self assert: Transfer invalidTransferErrorMessage equals: anError messageText. ]

	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'as 11/14/2020 19:24:44' prior: 50904657!
test01ReceptiveAccountsInvolvedInTransferHaveCorrectBalanceAfterTransfer

	Transfer anAmountOf: 100 from: account1 to: account2.
	
	self assert: account1 balance equals: -100.
	self assert: account2 balance equals: 100.	
	
	! !