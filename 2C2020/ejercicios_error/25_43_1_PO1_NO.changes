

Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'D S 11/2/2020 20:30:43'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'D S 11/2/2020 20:31:08'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'no messages' stamp: 'D S 11/2/2020 20:32:25'!
test01
	|aPortfolio|
	
	aPortfolio := Portfolio new.
	self assert: 0 equals: aPortfolio balance. 
	! !

!testRun: #PortfolioTest #test01 stamp: 'D S 11/2/2020 20:32:30'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'D S 11/2/2020 20:32:30'!
ERROR!
!Portfolio methodsFor: 'no messages' stamp: 'D S 11/2/2020 20:32:51'!
balance

	^0.! !

!testRun: #PortfolioTest #test01 stamp: 'D S 11/2/2020 20:32:54'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 20:34:14'!
test02
	|aPortfolio anAccount|
	
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new
	anAccount add.
	aPortfolio addAccount: anAccount.
	
	self assert: 0 equals: aPortfolio balance. 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 20:34:52' prior: 50948490!
test02
	|aPortfolio anAccount|
	
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	anAccount register: (Deposit for: 500).
	aPortfolio addAccount: anAccount.
	
	self assert: 500 equals: aPortfolio balance. 
	! !

!testRun: #PortfolioTest #test02 stamp: 'D S 11/2/2020 20:34:55'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'D S 11/2/2020 20:34:55'!
ERROR!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'D S 11/2/2020 20:36:29'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 20:36:25'!
addAcount: anAccount

	accounts add: anAccount.! !

!testRun: #PortfolioTest #test01 stamp: 'D S 11/2/2020 20:36:40'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'D S 11/2/2020 20:36:40'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'D S 11/2/2020 20:36:40'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 20:36:58'!
addAccount: anAccount

	accounts add: anAccount.! !

!methodRemoval: Portfolio #addAcount: stamp: 'D S 11/2/2020 20:36:58'!
addAcount: anAccount

	accounts add: anAccount.!

!testRun: #PortfolioTest #test01 stamp: 'D S 11/2/2020 20:37:03'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'D S 11/2/2020 20:37:03'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'D S 11/2/2020 20:37:03'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 20:37:58' prior: 50948500!
test02
	|aPortfolio anAccount|
	
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	Deposit register: 500 on: anAccount. 
	aPortfolio addAccount: anAccount.
	
	self assert: 500 equals: aPortfolio balance. 
	! !

!testRun: #PortfolioTest #test01 stamp: 'D S 11/2/2020 20:38:01'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'D S 11/2/2020 20:38:01'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'D S 11/2/2020 20:38:01'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 20:38:26' prior: 50948549!
test02
	|aPortfolio anAccount|
	
	aPortfolio := Portfolio initializePortFolio.
	anAccount := ReceptiveAccount new.
	Deposit register: 500 on: anAccount. 
	aPortfolio addAccount: anAccount.
	
	self assert: 500 equals: aPortfolio balance. 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 20:38:31' prior: 50948567!
test02
	|aPortfolio anAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	Deposit register: 500 on: anAccount. 
	aPortfolio addAccount: anAccount.
	
	self assert: 500 equals: aPortfolio balance. 
	! !
!Portfolio class methodsFor: 'no messages' stamp: 'D S 11/2/2020 20:38:59'!
initializePortfolio

	^self new initialize.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 20:39:17' overrides: 16896425!
initialize
	
	accounts := Set new.! !

!testRun: #PortfolioTest #test01 stamp: 'D S 11/2/2020 20:39:21'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'D S 11/2/2020 20:39:21'!
FAILURE!

!testRun: #PortfolioTest #test02 stamp: 'D S 11/2/2020 20:39:21'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 20:40:11' prior: 50948484!
balance

	self hasAnAccount ifTrue: [^500].
	^0.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 20:40:50'!
hasAnAccount

	^(accounts size > 0).! !

!testRun: #PortfolioTest #test01 stamp: 'D S 11/2/2020 20:40:52'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'D S 11/2/2020 20:40:52'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 20:41:30'!
test03
	|aPortfolio anAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	Deposit register: 500 on: anAccount.
	Deposit register: 200 on: anAccount.
	aPortfolio addAccount: anAccount.
	
	self assert: 700 equals: aPortfolio balance. 
	! !

!testRun: #PortfolioTest #test03 stamp: 'D S 11/2/2020 20:41:38'!
FAILURE!

!testRun: #PortfolioTest #test03 stamp: 'D S 11/2/2020 20:41:38'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 20:41:58' prior: 50948605!
balance

	self hasAnAccount ifTrue: [accounts balance.].
	^0.! !

!testRun: #PortfolioTest #test01 stamp: 'D S 11/2/2020 20:42:01'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'D S 11/2/2020 20:42:01'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'D S 11/2/2020 20:42:01'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'D S 11/2/2020 20:43:29'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'D S 11/2/2020 20:43:29'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 20:43:52' prior: 50948619!
test03
	|aPortfolio anAccount anAccount2|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Deposit register: 500 on: anAccount.
	Deposit register: 200 on: anAccount2.
	aPortfolio addAccount: anAccount.
	aPortfolio addAccount: anAccount2.
	
	self assert: 700 equals: aPortfolio balance. 
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 20:44:39' prior: 50948636!
balance

	self hasAnAccount ifTrue: [500].
	^0.! !

!testRun: #PortfolioTest #test03 stamp: 'D S 11/2/2020 20:44:51'!
FAILURE!

!testRun: #PortfolioTest #test03 stamp: 'D S 11/2/2020 20:44:51'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 20:47:49' prior: 50948668!
balance

	accounts size = 1 ifTrue: [500].
	accounts size = 2 ifTrue: [700].
	^0.! !

!testRun: #PortfolioTest #test01 stamp: 'D S 11/2/2020 20:47:52'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'D S 11/2/2020 20:47:52'!
FAILURE!

!testRun: #PortfolioTest #test03 stamp: 'D S 11/2/2020 20:47:52'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 20:48:06' prior: 50948678!
balance

	(accounts size = 1) ifTrue: [^500].
	(accounts size = 2) ifTrue: [^700].
	^0.! !

!testRun: #PortfolioTest #test01 stamp: 'D S 11/2/2020 20:48:12'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'D S 11/2/2020 20:48:12'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'D S 11/2/2020 20:48:12'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 20:48:37'!
test04
	|aPortfolio anAccount anAccount2|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Deposit register: 500 on: anAccount.
	Deposit register: 300 on: anAccount2.
	aPortfolio addAccount: anAccount.
	aPortfolio addAccount: anAccount2.
	
	self assert: 800 equals: aPortfolio balance. 
	! !

!testRun: #PortfolioTest #test04 stamp: 'D S 11/2/2020 20:48:39'!
FAILURE!

!testRun: #PortfolioTest #test04 stamp: 'D S 11/2/2020 20:48:39'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 20:49:12' prior: 50948691!
balance

	accounts sum:[:anAccount| anAccount balance] ifEmpty:[0].! !

!testRun: #PortfolioTest #test01 stamp: 'D S 11/2/2020 20:49:15'!
FAILURE!

!testRun: #PortfolioTest #test02 stamp: 'D S 11/2/2020 20:49:15'!
FAILURE!

!testRun: #PortfolioTest #test03 stamp: 'D S 11/2/2020 20:49:15'!
FAILURE!

!testRun: #PortfolioTest #test04 stamp: 'D S 11/2/2020 20:49:15'!
FAILURE!

!testRun: #PortfolioTest #test01 stamp: 'D S 11/2/2020 20:49:32'!
FAILURE!

!testRun: #PortfolioTest #test01 stamp: 'D S 11/2/2020 20:49:32'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 20:49:47' prior: 50948724!
balance

	^accounts sum:[:anAccount| anAccount balance] ifEmpty:[0].! !

!testRun: #PortfolioTest #test01 stamp: 'D S 11/2/2020 20:49:52'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'D S 11/2/2020 20:49:52'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'D S 11/2/2020 20:49:52'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'D S 11/2/2020 20:49:52'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 20:50:36'!
test01initializeWithTotalBalance0
	|aPortfolio|
	
	aPortfolio := Portfolio new.
	self assert: 0 equals: aPortfolio balance. 
	! !

!methodRemoval: PortfolioTest #test01 stamp: 'D S 11/2/2020 20:50:36'!
test01
	|aPortfolio|
	
	aPortfolio := Portfolio new.
	self assert: 0 equals: aPortfolio balance. 
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 20:51:47'!
test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio
	|aPortfolio anAccount anAccount2|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Deposit register: 500 on: anAccount.
	Deposit register: 200 on: anAccount2.
	aPortfolio addAccount: anAccount.
	aPortfolio addAccount: anAccount2.
	
	self assert: 700 equals: aPortfolio balance. 
	! !

!methodRemoval: PortfolioTest #test03 stamp: 'D S 11/2/2020 20:51:47'!
test03
	|aPortfolio anAccount anAccount2|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Deposit register: 500 on: anAccount.
	Deposit register: 200 on: anAccount2.
	aPortfolio addAccount: anAccount.
	aPortfolio addAccount: anAccount2.
	
	self assert: 700 equals: aPortfolio balance. 
	!

!methodRemoval: PortfolioTest #test04 stamp: 'D S 11/2/2020 20:52:10'!
test04
	|aPortfolio anAccount anAccount2|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Deposit register: 500 on: anAccount.
	Deposit register: 300 on: anAccount2.
	aPortfolio addAccount: anAccount.
	aPortfolio addAccount: anAccount2.
	
	self assert: 800 equals: aPortfolio balance. 
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 20:56:40'!
test03
	|aPortfolio anAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	Deposit register: 500 on: anAccount.
	aPortfolio addAccount: anAccount.
	
	self assert: 700 equals: aPortfolio balance. 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 20:58:05' prior: 50948815!
test03
	|aPortfolio anAccount aDeposit|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	aDeposit := Deposit register: 500 on: anAccount.
	aPortfolio addAccount: anAccount.
	
	self assert: (Set with: aDeposit) equals: aPortfolio transactions. 
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 21:01:05'!
transactions
	|allTransactions|
	
	allTransactions := Set new.
	allTransactions := accounts do: [:aTransaction| allTransactions add: aTransaction].
	^allTransactions.! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/2/2020 21:01:49'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'D S 11/2/2020 21:01:49'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/2/2020 21:01:49'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'D S 11/2/2020 21:01:49'!
FAILURE!

!testRun: #PortfolioTest #test03 stamp: 'D S 11/2/2020 21:01:49'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 21:02:27' prior: 50948838!
transactions
	|allTransactions|
	
	allTransactions := Set new.
	allTransactions := accounts do: [:aTransaction| allTransactions add: (aTransaction transactions)].
	^allTransactions.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 21:02:41' prior: 50948861!
transactions
	|allTransactions|
	
	allTransactions := Set new.
	allTransactions := accounts do: [:anAccount| allTransactions add: (anAccount transactions)].
	^allTransactions.! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/2/2020 21:02:49'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'D S 11/2/2020 21:02:49'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/2/2020 21:02:49'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'D S 11/2/2020 21:02:49'!
FAILURE!

!testRun: #PortfolioTest #test03 stamp: 'D S 11/2/2020 21:02:49'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 21:10:07' prior: 50948826!
test03
	|aPortfolio |
	
	aPortfolio := Portfolio initializePortfolio.
	self assert: OrderedCollection new equals: aPortfolio transactions. 
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 21:10:28' prior: 50948870!
transactions
	
	^OrderedCollection new.! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/2/2020 21:10:31'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'D S 11/2/2020 21:10:31'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/2/2020 21:10:31'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'D S 11/2/2020 21:10:31'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 21:12:04'!
test04
	|aPortfolio anAccount anDeposit|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anDeposit := Deposit register: 500 on: anAccount. 
	aPortfolio addAccount: anAccount.
	
	self assert: (OrderedCollection with: (anDeposit)) equals: aPortfolio transactions. 
	! !

!methodRemoval: Portfolio #transactions stamp: 'D S 11/2/2020 21:18:21'!
transactions
	
	^OrderedCollection new.!

!methodRemoval: PortfolioTest #test03 stamp: 'D S 11/2/2020 21:18:32'!
test03
	|aPortfolio |
	
	aPortfolio := Portfolio initializePortfolio.
	self assert: OrderedCollection new equals: aPortfolio transactions. 
	!

!methodRemoval: PortfolioTest #test04 stamp: 'D S 11/2/2020 21:18:34'!
test04
	|aPortfolio anAccount anDeposit|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anDeposit := Deposit register: 500 on: anAccount. 
	aPortfolio addAccount: anAccount.
	
	self assert: (OrderedCollection with: (anDeposit)) equals: aPortfolio transactions. 
	!

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/2/2020 21:18:40'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'D S 11/2/2020 21:18:40'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/2/2020 21:18:40'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 21:21:58'!
test03
	|aPortfolio anAccount anDeposit|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anDeposit := Deposit register: 500 on: anAccount.
	
	self deny: (aPortfolio hasRegister: anDeposit). 
	! !

!testRun: #PortfolioTest #test03 stamp: 'D S 11/2/2020 21:22:04'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'D S 11/2/2020 21:22:04'!
ERROR!

!methodRemoval: Portfolio #hasAnAccount stamp: 'D S 11/2/2020 21:22:16'!
hasAnAccount

	^(accounts size > 0).!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 21:23:04'!
hasRegister: anTransaction

	^false.! !

!testRun: #PortfolioTest #test03 stamp: 'D S 11/2/2020 21:23:09'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 21:23:35'!
test04
	|aPortfolio anAccount anDeposit|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anDeposit := Deposit register: 500 on: anAccount.
	aPortfolio addAccount: anAccount.
	
	self assert: (aPortfolio hasRegister: anDeposit). 
	! !

!testRun: #PortfolioTest #test04 stamp: 'D S 11/2/2020 21:23:39'!
FAILURE!

!testRun: #PortfolioTest #test04 stamp: 'D S 11/2/2020 21:23:39'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 21:26:52' prior: 50948979!
hasRegister: anTransaction

	^accounts size > 0.! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/2/2020 21:26:55'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'D S 11/2/2020 21:26:55'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/2/2020 21:26:55'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'D S 11/2/2020 21:26:55'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'D S 11/2/2020 21:26:55'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 21:29:41'!
test05
	|aPortfolio anAccount anDeposit anAccountNotInPortfolio|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anDeposit := Deposit register: 500 on: anAccount.
	anAccountNotInPortfolio := ReceptiveAccount new.
	aPortfolio addAccount: anAccount.
	
	self deny: (aPortfolio hasRegister: (Deposit register: 200 on: anAccountNotInPortfolio)). 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 21:29:51' prior: 50949022!
test05
	|aPortfolio anAccount anAccountNotInPortfolio|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	Deposit register: 500 on: anAccount.
	anAccountNotInPortfolio := ReceptiveAccount new.
	aPortfolio addAccount: anAccount.
	
	self deny: (aPortfolio hasRegister: (Deposit register: 200 on: anAccountNotInPortfolio)). 
	! !

!testRun: #PortfolioTest #test05 stamp: 'D S 11/2/2020 21:29:56'!
FAILURE!

!testRun: #PortfolioTest #test05 stamp: 'D S 11/2/2020 21:29:56'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 21:31:29' prior: 50949003!
hasRegister: anTransaction
	|isRegistered|
	isRegistered := false.
	accounts do:[:anAccount | isRegistered := isRegistered or: (anAccount hasRegister: anTransaction)].
	^isRegistered.! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/2/2020 21:31:32'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'D S 11/2/2020 21:31:32'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/2/2020 21:31:32'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'D S 11/2/2020 21:31:32'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'D S 11/2/2020 21:31:32'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'D S 11/2/2020 21:31:32'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 21:32:26' prior: 50949057!
hasRegister: anTransaction
	|isRegistered|
	isRegistered := false.
	accounts do:[:anAccount | isRegistered := isRegistered or: (anAccount hasRegistered: anTransaction)].
	^isRegistered.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 21:32:41'!
hasRegistered: anTransaction
	|isRegistered|
	isRegistered := false.
	accounts do:[:anAccount | isRegistered := isRegistered or: (anAccount hasRegistered: anTransaction)].
	^isRegistered.! !

!methodRemoval: Portfolio #hasRegister: stamp: 'D S 11/2/2020 21:32:41'!
hasRegister: anTransaction
	|isRegistered|
	isRegistered := false.
	accounts do:[:anAccount | isRegistered := isRegistered or: (anAccount hasRegistered: anTransaction)].
	^isRegistered.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 21:32:46' prior: 50948961!
test03
	|aPortfolio anAccount anDeposit|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anDeposit := Deposit register: 500 on: anAccount.
	
	self deny: (aPortfolio hasRegistered: anDeposit). 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 21:32:49' prior: 50948986!
test04
	|aPortfolio anAccount anDeposit|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anDeposit := Deposit register: 500 on: anAccount.
	aPortfolio addAccount: anAccount.
	
	self assert: (aPortfolio hasRegistered: anDeposit). 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 21:32:52' prior: 50949038!
test05
	|aPortfolio anAccount anAccountNotInPortfolio|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	Deposit register: 500 on: anAccount.
	anAccountNotInPortfolio := ReceptiveAccount new.
	aPortfolio addAccount: anAccount.
	
	self deny: (aPortfolio hasRegistered: (Deposit register: 200 on: anAccountNotInPortfolio)). 
	! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/2/2020 21:32:58'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'D S 11/2/2020 21:32:58'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/2/2020 21:32:58'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'D S 11/2/2020 21:32:58'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'D S 11/2/2020 21:32:58'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'D S 11/2/2020 21:32:58'!
PASSED!

----QUIT----(2 November 2020 21:47:10) CuisUniversity-4383.image priorSource: 19705100!

----STARTUP---- (5 November 2020 16:38:50) as /home/dn-01/Escritorio/Ingenieria en Software I/CuisUniversity/CuisUniversity-4383.image!


!testRun: #PortfolioTest #test05 stamp: 'D S 11/5/2020 17:08:31'!
PASSED!

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 17:15:36'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'D S 11/5/2020 17:15:36'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 17:15:36'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'D S 11/5/2020 17:15:36'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'D S 11/5/2020 17:15:36'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'D S 11/5/2020 17:15:36'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 17:17:51'!
test06
	|aPortfolio anAccount anAccountNotInPortfolio anDeposit|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anDeposit := Deposit register: 500 on: anAccount.
	anAccountNotInPortfolio := ReceptiveAccount new.
	aPortfolio addAccount: anAccount.
	
	self assert: #(anDeposit) equals: aPortfolio transactions 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 17:18:10' prior: 50949190!
test06
	|aPortfolio anAccount anDeposit|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anDeposit := Deposit register: 500 on: anAccount.

	aPortfolio addAccount: anAccount.
	
	self assert: #(anDeposit) equals: aPortfolio transactions 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 17:18:29' prior: 50949205!
test06
	|aPortfolio anAccount anDeposit|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anDeposit := Deposit register: 500 on: anAccount.

	aPortfolio addAccount: anAccount.
	
	self assert: (Collection with: anDeposit) equals: aPortfolio transactions 
	! !

!testRun: #PortfolioTest #test06 stamp: 'D S 11/5/2020 17:18:41'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'D S 11/5/2020 17:18:41'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 17:19:00' prior: 50949217!
test06
	|aPortfolio anAccount anDeposit|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anDeposit := Deposit register: 500 on: anAccount.

	aPortfolio addAccount: anAccount.
	
	self assert: (Collection with: anDeposit) equals: aPortfolio transactions 
	! !

!testRun: #PortfolioTest #test06 stamp: 'D S 11/5/2020 17:19:03'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'D S 11/5/2020 17:19:03'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'D S 11/5/2020 17:20:26'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'D S 11/5/2020 17:20:26'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 17:20:41' prior: 50949234!
test06
	|aPortfolio anAccount anDeposit|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anDeposit := Deposit register: 500 on: anAccount.

	aPortfolio addAccount: anAccount.
	
	self assert: (Set with: anDeposit) equals: aPortfolio transactions 
	! !

!testRun: #PortfolioTest #test06 stamp: 'D S 11/5/2020 17:20:45'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'D S 11/5/2020 17:20:45'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 17:21:22' prior: 50949256!
test06
	|aPortfolio anAccount anDeposit|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anDeposit := Deposit register: 500 on: anAccount.

	aPortfolio addAccount: anAccount.
	
	self assert: (OrderedCollection with: anDeposit) equals: aPortfolio transactions 
	! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 17:21:24'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'D S 11/5/2020 17:21:24'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 17:21:24'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'D S 11/5/2020 17:21:24'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'D S 11/5/2020 17:21:24'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'D S 11/5/2020 17:21:24'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'D S 11/5/2020 17:21:24'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'D S 11/5/2020 17:21:24'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 17:21:58' prior: 50949273!
test06
	|aPortfolio anAccount anDeposit|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.

	aPortfolio addAccount: anAccount.
	
	self assert: #() equals: aPortfolio transactions 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 17:22:07' prior: 50949307!
test06
	|aPortfolio anAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.

	aPortfolio addAccount: anAccount.
	
	self assert: #() equals: aPortfolio transactions 
	! !

!testRun: #PortfolioTest #test06 stamp: 'D S 11/5/2020 17:22:11'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'D S 11/5/2020 17:22:11'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 17:22:34'!
transactions

	^#()! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 17:22:39'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'D S 11/5/2020 17:22:39'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 17:22:39'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'D S 11/5/2020 17:22:39'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'D S 11/5/2020 17:22:39'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'D S 11/5/2020 17:22:39'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'D S 11/5/2020 17:22:39'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 17:33:29'!
test07
	|aPortfolio anAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	aPortfolio addAccount: anAccount.
	
	self assert: (OrderedCollection with: (Deposit register: 500 on: anAccount)) equals: aPortfolio transactions 
	! !

!testRun: #PortfolioTest #test07 stamp: 'D S 11/5/2020 17:33:34'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'D S 11/5/2020 17:33:34'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 17:38:10' prior: 50949331!
transactions

	^Collection with: (Deposit register: 500 on: (accounts at:1) )! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 17:38:14'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'D S 11/5/2020 17:38:14'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 17:38:14'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'D S 11/5/2020 17:38:14'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'D S 11/5/2020 17:38:14'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'D S 11/5/2020 17:38:14'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'D S 11/5/2020 17:38:14'!
ERROR!

!testRun: #PortfolioTest #test07 stamp: 'D S 11/5/2020 17:38:14'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 17:40:05' prior: 50949371!
transactions

	(accounts isEmpty) ifTrue: [^#()].
	^ Collection with: (Deposit register: 500 on: (accounts at:1))! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 17:40:09'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'D S 11/5/2020 17:40:09'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 17:40:09'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'D S 11/5/2020 17:40:09'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'D S 11/5/2020 17:40:09'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'D S 11/5/2020 17:40:09'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'D S 11/5/2020 17:40:09'!
ERROR!

!testRun: #PortfolioTest #test07 stamp: 'D S 11/5/2020 17:40:09'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 17:41:02' prior: 50949398!
transactions

	^ (accounts at:1) transactions! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 17:41:06'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'D S 11/5/2020 17:41:06'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 17:41:06'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'D S 11/5/2020 17:41:06'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'D S 11/5/2020 17:41:06'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'D S 11/5/2020 17:41:06'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'D S 11/5/2020 17:41:06'!
ERROR!

!testRun: #PortfolioTest #test07 stamp: 'D S 11/5/2020 17:41:06'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'D S 11/5/2020 17:41:18'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 17:41:32' prior: 50948593 overrides: 16896425!
initialize
	
	accounts := OrderedCollection new.! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 17:41:43'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'D S 11/5/2020 17:41:43'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 17:41:43'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'D S 11/5/2020 17:41:43'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'D S 11/5/2020 17:41:43'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'D S 11/5/2020 17:41:43'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'D S 11/5/2020 17:41:43'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'D S 11/5/2020 17:41:43'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'D S 11/5/2020 17:41:43'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 17:41:55' prior: 50949317!
test06
	|aPortfolio anAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.

	aPortfolio addAccount: anAccount.
	
	self assert: OrderedCollection equals: aPortfolio transactions 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 17:42:09' prior: 50949484!
test06
	|aPortfolio anAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.

	aPortfolio addAccount: anAccount.
	
	self assert: OrderedCollection equals: aPortfolio transactions 
	! !

!testRun: #PortfolioTest #test06 stamp: 'D S 11/5/2020 17:42:12'!
FAILURE!

!testRun: #PortfolioTest #test06 stamp: 'D S 11/5/2020 17:42:12'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 17:42:27' prior: 50949495!
test06
	|aPortfolio anAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.

	aPortfolio addAccount: anAccount.
	
	self assert: OrderedCollection new equals: aPortfolio transactions 
	! !

!testRun: #PortfolioTest #test06 stamp: 'D S 11/5/2020 17:42:30'!
PASSED!

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 17:42:34'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'D S 11/5/2020 17:42:34'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 17:42:34'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'D S 11/5/2020 17:42:34'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'D S 11/5/2020 17:42:34'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'D S 11/5/2020 17:42:34'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'D S 11/5/2020 17:42:34'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'D S 11/5/2020 17:42:34'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 17:45:03'!
test08
	|aPortfolio anAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	aPortfolio addAccount: anAccount.
	
	self assert: (OrderedCollection with: (Deposit register: 500 on: anAccount) with: (Deposit register: 200 on: anAccount)) equals: aPortfolio transactions 
	! !

!testRun: #PortfolioTest #test08 stamp: 'D S 11/5/2020 17:45:08'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 17:46:05' prior: 50949544!
test08
	|aPortfolio anAccount anSecondAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anSecondAccount := ReceptiveAccount new.
	aPortfolio addAccount: anAccount.
	aPortfolio addAccount: anSecondAccount.
	
	self assert: (OrderedCollection with: (Deposit register: 500 on: anAccount) with: (Deposit register: 200 on: anAccount)) equals: aPortfolio transactions 
	! !

!testRun: #PortfolioTest #test08 stamp: 'D S 11/5/2020 17:46:08'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 17:46:15' prior: 50949560!
test08
	|aPortfolio anAccount anSecondAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anSecondAccount := ReceptiveAccount new.
	aPortfolio addAccount: anAccount.
	aPortfolio addAccount: anSecondAccount.
	
	self assert: (OrderedCollection with: (Deposit register: 500 on: anAccount) with: (Deposit register: 200 on: anSecondAccount)) equals: aPortfolio transactions 
	! !

!testRun: #PortfolioTest #test08 stamp: 'D S 11/5/2020 17:46:18'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'D S 11/5/2020 17:46:18'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 17:51:18' prior: 50949426!
transactions
	|allTransactions|
	allTransactions := OrderedCollection new.
	accounts do: [:anAccount | allTransactions add: (anAccount transactions)].
	^allTransactions! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 17:51:21'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'D S 11/5/2020 17:51:21'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 17:51:21'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'D S 11/5/2020 17:51:21'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'D S 11/5/2020 17:51:21'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'D S 11/5/2020 17:51:21'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'D S 11/5/2020 17:51:21'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'D S 11/5/2020 17:51:21'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'D S 11/5/2020 17:51:21'!
FAILURE!

!testRun: #PortfolioTest #test06 stamp: 'D S 11/5/2020 17:51:28'!
FAILURE!

!testRun: #PortfolioTest #test06 stamp: 'D S 11/5/2020 17:51:28'!
FAILURE!

y _ x addAll: #(7 8 9); yourself.!

y _ x addAll: #(7 8 9); yourself.!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 17:53:59' prior: 50949600!
transactions
	|allTransactions|
	allTransactions := OrderedCollection new.
	accounts do: [:anAccount | allTransactions addAll: (anAccount transactions)].
	^allTransactions! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 17:54:02'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'D S 11/5/2020 17:54:02'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 17:54:02'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'D S 11/5/2020 17:54:02'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'D S 11/5/2020 17:54:02'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'D S 11/5/2020 17:54:02'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'D S 11/5/2020 17:54:02'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'D S 11/5/2020 17:54:02'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'D S 11/5/2020 17:54:02'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 17:57:57'!
test09
	|aPortfolio aPortfolio2 anAccount anSecondAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	aPortfolio2 := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anSecondAccount := ReceptiveAccount new.
	aPortfolio addAccount: anAccount.
	aPortfolio addAccount: aPortfolio2.
	aPortfolio2 addAccount: anSecondAccount.
	
	self assert: (OrderedCollection with: (Deposit register: 500 on: anAccount) with: (Deposit register: 200 on: anSecondAccount)) equals: aPortfolio transactions 
	! !

!testRun: #PortfolioTest #test09 stamp: 'D S 11/5/2020 17:58:00'!
PASSED!

!methodRemoval: PortfolioTest #test09 stamp: 'D S 11/5/2020 17:58:29'!
test09
	|aPortfolio aPortfolio2 anAccount anSecondAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	aPortfolio2 := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anSecondAccount := ReceptiveAccount new.
	aPortfolio addAccount: anAccount.
	aPortfolio addAccount: aPortfolio2.
	aPortfolio2 addAccount: anSecondAccount.
	
	self assert: (OrderedCollection with: (Deposit register: 500 on: anAccount) with: (Deposit register: 200 on: anSecondAccount)) equals: aPortfolio transactions 
	!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 17:59:06' prior: 50949639!
transactions
	|allTransactions|
	allTransactions := OrderedCollection new.
	accounts do: [:anAccountOrPortfolio | allTransactions addAll: (anAccountOrPortfolio transactions)].
	^allTransactions! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 17:59:32' prior: 50949092!
hasRegistered: anTransaction
	|isRegistered|
	isRegistered := false.
	accounts do:[:anAccountOrPortfolio | isRegistered := isRegistered or: (anAccountOrPortfolio hasRegistered: anTransaction)].
	^isRegistered.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 17:59:50' prior: 50948744!
balance

	^accounts sum:[:anAccountOrPortfolio| anAccountOrPortfolio balance] ifEmpty:[0].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 18:00:01' prior: 50948533!
addAccount: anAccountOrPortfolio

	accounts add: anAccountOrPortfolio.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 18:29:08'!
addAccountOrPortfolio: anAccountOrPortfolio

	accounts add: anAccountOrPortfolio.! !

!methodRemoval: Portfolio #addAccount: stamp: 'D S 11/5/2020 18:29:08'!
addAccount: anAccountOrPortfolio

	accounts add: anAccountOrPortfolio.!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'D S 11/5/2020 18:29:27'!
Object subclass: #Portfolio
	instanceVariableNames: 'accountAndPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 18:29:27' prior: 50949711!
transactions
	|allTransactions|
	allTransactions := OrderedCollection new.
	accountAndPortfolios do: [:anAccountOrPortfolio | allTransactions addAll: (anAccountOrPortfolio transactions)].
	^allTransactions! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 18:29:27' prior: 50949455 overrides: 16896425!
initialize
	
	accountAndPortfolios := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 18:29:27' prior: 50949742!
addAccountOrPortfolio: anAccountOrPortfolio

	accountAndPortfolios add: anAccountOrPortfolio.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 18:29:27' prior: 50949721!
hasRegistered: anTransaction
	|isRegistered|
	isRegistered := false.
	accountAndPortfolios do:[:anAccountOrPortfolio | isRegistered := isRegistered or: (anAccountOrPortfolio hasRegistered: anTransaction)].
	^isRegistered.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 18:29:27' prior: 50949731!
balance

	^accountAndPortfolios sum:[:anAccountOrPortfolio| anAccountOrPortfolio balance] ifEmpty:[0].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 18:29:37' prior: 50948578!
test02
	|aPortfolio anAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	Deposit register: 500 on: anAccount. 
	aPortfolio addAccountOrPortfolio: anAccount.
	
	self assert: 500 equals: aPortfolio balance. 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 18:29:43' prior: 50948772!
test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio
	|aPortfolio anAccount anAccount2|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Deposit register: 500 on: anAccount.
	Deposit register: 200 on: anAccount2.
	aPortfolio addAccountOrPortfolio: anAccount.
	aPortfolio addAccountOrPortfolio: anAccount2.
	
	self assert: 700 equals: aPortfolio balance. 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 18:29:49' prior: 50949121!
test04
	|aPortfolio anAccount anDeposit|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anDeposit := Deposit register: 500 on: anAccount.
	aPortfolio addAccountOrPortfolio: anAccount.
	
	self assert: (aPortfolio hasRegistered: anDeposit). 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 18:29:53' prior: 50949133!
test05
	|aPortfolio anAccount anAccountNotInPortfolio|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	Deposit register: 500 on: anAccount.
	anAccountNotInPortfolio := ReceptiveAccount new.
	aPortfolio addAccountOrPortfolio: anAccount.
	
	self deny: (aPortfolio hasRegistered: (Deposit register: 200 on: anAccountNotInPortfolio)). 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 18:29:58' prior: 50949510!
test06
	|aPortfolio anAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.

	aPortfolio addAccountOrPortfolio: anAccount.
	
	self assert: OrderedCollection new equals: aPortfolio transactions 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 18:30:02' prior: 50949354!
test07
	|aPortfolio anAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	aPortfolio addAccountOrPortfolio: anAccount.
	
	self assert: (OrderedCollection with: (Deposit register: 500 on: anAccount)) equals: aPortfolio transactions 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 18:30:09' prior: 50949579!
test08
	|aPortfolio anAccount anSecondAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anSecondAccount := ReceptiveAccount new.
	aPortfolio addAccountOrPortfolio: anAccount.
	aPortfolio addAccountOrPortfolio: anSecondAccount.
	
	self assert: (OrderedCollection with: (Deposit register: 500 on: anAccount) with: (Deposit register: 200 on: anSecondAccount)) equals: aPortfolio transactions 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 18:32:49'!
test09
	|aPortfolio |
	
	aPortfolio := Portfolio initializePortfolio.
	
	^[aPortfolio addAccountOrPortfolio: aPortfolio.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionCantAddItself.] 
	! !

!testRun: #PortfolioTest #test09 stamp: 'D S 11/5/2020 18:33:59'!
FAILURE!

!testRun: #PortfolioTest #test09 stamp: 'D S 11/5/2020 18:33:59'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 18:35:11' prior: 50949776!
addAccountOrPortfolio: anAccountOrPortfolio

	(self == anAccountOrPortfolio) ifTrue:[^self error: self class errorDescriptionCantAddItself].
	accountAndPortfolios add: anAccountOrPortfolio.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 18:36:23'!
errorDescriptionCantAddItself

	^'You cant add the portfolio to itself'.! !

!testRun: #PortfolioTest #test09 stamp: 'D S 11/5/2020 18:37:12'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 18:38:20'!
test10
	|aPortfolio anAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new
	^[aPortfolio addAccountOrPortfolio: aPortfolio.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionCantAddItself.] 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 18:40:48' prior: 50949927!
test10
	|aPortfolio aPortfolio2 anAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	aPortfolio2 := Portfolio initializePortfolio.
	aPortfolio2 addAccountOrPortfolio: anAccount.
	aPortfolio addAccountOrPortfolio: anAccount.
	^[aPortfolio addAccountOrPortfolio: aPortfolio2.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionAccountInBothPortfolios.] 
	! !
!Portfolio methodsFor: 'adding' stamp: 'D S 11/5/2020 18:43:56' prior: 50949910!
addAccountOrPortfolio: anAccountOrPortfolio

	(self == anAccountOrPortfolio) ifTrue:[^self error: self class errorDescriptionCantAddItself].
	accountAndPortfolios add: anAccountOrPortfolio.! !
!Portfolio methodsFor: 'adding' stamp: 'D S 11/5/2020 18:44:17'!
addAccount: anAccount

	accountAndPortfolios add: anAccount.! !
!Portfolio methodsFor: 'adding' stamp: 'D S 11/5/2020 18:44:34'!
addPortfolio: anPortfolio

	(self == anPortfolio) ifTrue:[^self error: self class errorDescriptionCantAddItself].
	accountAndPortfolios add: anPortfolio.! !

!methodRemoval: Portfolio #addAccountOrPortfolio: stamp: 'D S 11/5/2020 18:44:39'!
addAccountOrPortfolio: anAccountOrPortfolio

	(self == anAccountOrPortfolio) ifTrue:[^self error: self class errorDescriptionCantAddItself].
	accountAndPortfolios add: anAccountOrPortfolio.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 18:44:48' prior: 50949799!
test02
	|aPortfolio anAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	Deposit register: 500 on: anAccount. 
	aPortfolio addAccount: anAccount.
	
	self assert: 500 equals: aPortfolio balance. 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 18:44:58' prior: 50949810!
test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio
	|aPortfolio anAccount anAccount2|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Deposit register: 500 on: anAccount.
	Deposit register: 200 on: anAccount2.
	aPortfolio addAccount: anAccount.
	aPortfolio addAccount: anAccount2.
	
	self assert: 700 equals: aPortfolio balance. 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 18:45:09' prior: 50949827!
test04
	|aPortfolio anAccount anDeposit|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anDeposit := Deposit register: 500 on: anAccount.
	aPortfolio addAccount: anAccount.
	
	self assert: (aPortfolio hasRegistered: anDeposit). 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 18:45:14' prior: 50949839!
test05
	|aPortfolio anAccount anAccountNotInPortfolio|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	Deposit register: 500 on: anAccount.
	anAccountNotInPortfolio := ReceptiveAccount new.
	aPortfolio addAccount: anAccount.
	
	self deny: (aPortfolio hasRegistered: (Deposit register: 200 on: anAccountNotInPortfolio)). 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 18:45:18' prior: 50949854!
test06
	|aPortfolio anAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.

	aPortfolio addAccount: anAccount.
	
	self assert: OrderedCollection new equals: aPortfolio transactions 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 18:45:22' prior: 50949865!
test07
	|aPortfolio anAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	aPortfolio addAccount: anAccount.
	
	self assert: (OrderedCollection with: (Deposit register: 500 on: anAccount)) equals: aPortfolio transactions 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 18:45:29' prior: 50949877!
test08
	|aPortfolio anAccount anSecondAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anSecondAccount := ReceptiveAccount new.
	aPortfolio addAccount: anAccount.
	aPortfolio addAccount: anSecondAccount.
	
	self assert: (OrderedCollection with: (Deposit register: 500 on: anAccount) with: (Deposit register: 200 on: anSecondAccount)) equals: aPortfolio transactions 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 18:45:34' prior: 50949894!
test09
	|aPortfolio |
	
	aPortfolio := Portfolio initializePortfolio.
	
	^[aPortfolio addPortfolio: aPortfolio.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionCantAddItself.] 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 18:45:47' prior: 50949940!
test10
	|aPortfolio aPortfolio2 anAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	aPortfolio2 := Portfolio initializePortfolio.
	aPortfolio2 addAccount: anAccount.
	aPortfolio addAccount: anAccount.
	^[aPortfolio addPortfolio: aPortfolio2.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionAccountInBothPortfolios.] 
	! !

!testRun: #PortfolioTest #test10 stamp: 'D S 11/5/2020 18:49:48'!
FAILURE!

!testRun: #PortfolioTest #test10 stamp: 'D S 11/5/2020 18:49:48'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'D S 11/5/2020 18:57:05' prior: 50949971!
addPortfolio: anPortfolio

	(self == anPortfolio) ifTrue:[^self error: self class errorDescriptionCantAddItself].
	((accountAndPortfolios removeAll: anPortfolio accountsAndPortfolios) ~= accountAndPortfolios) ifTrue:[^self error: self class errorDescriptionAnAccountInBothPortfolios ].
	accountAndPortfolios add: anPortfolio.! !
!Portfolio methodsFor: 'adding' stamp: 'D S 11/5/2020 18:57:25' prior: 50950114!
addPortfolio: anPortfolio

	(self == anPortfolio) ifTrue:[^self error: self class errorDescriptionCantAddItself].
	((accountAndPortfolios removeAll: anPortfolio accountsAndPortfolios) ~= accountAndPortfolios) ifTrue:[^self error: self class errorDescriptionAccountInBothPortfolios].
	accountAndPortfolios add: anPortfolio.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 18:57:50'!
errorDescriptionAccountInBothPortfolios

	^'Unable to add portfolio: anAccount is in both'.! !
!Portfolio methodsFor: 'accessing' stamp: 'D S 11/5/2020 18:58:15'!
accountsAndPortfolios! !
!Portfolio methodsFor: 'accessing' stamp: 'D S 11/5/2020 18:58:52'!
accounts

	! !

!methodRemoval: Portfolio #accounts stamp: 'D S 11/5/2020 19:00:42'!
accounts

	!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'D S 11/5/2020 19:02:42'!
Object subclass: #Portfolio
	instanceVariableNames: 'accountAndPortfolios portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'D S 11/5/2020 19:03:00'!
Object subclass: #Portfolio
	instanceVariableNames: 'account portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 19:03:00' prior: 50950127!
addPortfolio: anPortfolio

	(self == anPortfolio) ifTrue:[^self error: self class errorDescriptionCantAddItself].
	((account removeAll: anPortfolio accountsAndPortfolios) ~= account) ifTrue:[^self error: self class errorDescriptionAccountInBothPortfolios].
	account add: anPortfolio.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 19:03:00' prior: 50949966!
addAccount: anAccount

	account add: anAccount.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 19:03:00' prior: 50949771 overrides: 16896425!
initialize
	
	account := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 19:03:00' prior: 50949782!
hasRegistered: anTransaction
	|isRegistered|
	isRegistered := false.
	account do:[:anAccountOrPortfolio | isRegistered := isRegistered or: (anAccountOrPortfolio hasRegistered: anTransaction)].
	^isRegistered.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 19:03:01' prior: 50949760!
transactions
	|allTransactions|
	allTransactions := OrderedCollection new.
	account do: [:anAccountOrPortfolio | allTransactions addAll: (anAccountOrPortfolio transactions)].
	^allTransactions! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 19:03:01' prior: 50949792!
balance

	^account sum:[:anAccountOrPortfolio| anAccountOrPortfolio balance] ifEmpty:[0].! !
!Portfolio methodsFor: 'adding' stamp: 'D S 11/5/2020 19:03:12' prior: 50950171!
addPortfolio: anPortfolio

	(self == anPortfolio) ifTrue:[^self error: self class errorDescriptionCantAddItself].
	((account removeAll: anPortfolio accountsAndPortfolios) ~= account) ifTrue:[^self error: self class errorDescriptionAccountInBothPortfolios].
	portfolios add: anPortfolio.! !
!Portfolio methodsFor: 'accessing' stamp: 'D S 11/5/2020 19:04:18' prior: 50950214!
balance
	
	^(account sum:[:anAccountOrPortfolio| anAccountOrPortfolio balance] ifEmpty:[0]) + 
	(portfolios sum:[:anAccountOrPortfolio| anAccountOrPortfolio balance] ifEmpty:[0]).! !
!Portfolio methodsFor: 'accessing' stamp: 'D S 11/5/2020 19:04:37' prior: 50950194!
hasRegistered: anTransaction
	|isRegistered|
	isRegistered := false.
	account do:[:anAccountOrPortfolio | isRegistered := isRegistered or: (anAccountOrPortfolio hasRegistered: anTransaction)].
	portfolios do:[:anAccountOrPortfolio | isRegistered := isRegistered or: (anAccountOrPortfolio hasRegistered: anTransaction)].
	^isRegistered.! !
!Portfolio methodsFor: 'accessing' stamp: 'D S 11/5/2020 19:05:50' prior: 50950241!
hasRegistered: anTransaction

	account do:[:anAccountOrPortfolio | (anAccountOrPortfolio hasRegistered: anTransaction) ifTrue: [^true]].
	portfolios do:[:anAccountOrPortfolio | (anAccountOrPortfolio hasRegistered: anTransaction) ifFalse: [^false]].! !
!Portfolio methodsFor: 'accessing' stamp: 'D S 11/5/2020 19:06:27' prior: 50950204!
transactions
	|allTransactions|
	allTransactions := OrderedCollection new.
	account do: [:anAccount | allTransactions addAll: (anAccount transactions)].
	portfolios do: [:anPortfolio | allTransactions addAll: (anPortfolio transactions)].
	^allTransactions! !

!methodRemoval: Portfolio #accountsAndPortfolios stamp: 'D S 11/5/2020 19:06:37'!
accountsAndPortfolios!
!Portfolio methodsFor: 'accessing' stamp: 'D S 11/5/2020 19:07:56'!
accounts
	
	^(account sum:[:anAccountOrPortfolio| anAccountOrPortfolio balance] ifEmpty:[0]) + 
	(portfolios sum:[:anAccountOrPortfolio| anAccountOrPortfolio balance] ifEmpty:[0]).! !
!Portfolio methodsFor: 'accessing' stamp: 'D S 11/5/2020 19:09:11' prior: 50950280!
accounts

	|allAccounts|
	allAccounts := OrderedCollection new.
	allAccounts addAll: account.
	portfolios do: [:anPortfolio | allAccounts addAll: (anPortfolio accounts)].
	^allAccounts! !
!Portfolio methodsFor: 'adding' stamp: 'D S 11/5/2020 19:10:59' prior: 50950220!
addPortfolio: anPortfolio

	(self == anPortfolio) ifTrue:[^self error: self class errorDescriptionCantAddItself].
	((self accounts) do: [:anAccount | ((anPortfolio accounts) includes: anAccount) ifTrue:[^self error: self class errorDescriptionAccountInBothPortfolios ]])
	portfolios add: anPortfolio.! !
!Portfolio methodsFor: 'adding' stamp: 'D S 11/5/2020 19:11:04' prior: 50950298!
addPortfolio: anPortfolio

	(self == anPortfolio) ifTrue:[^self error: self class errorDescriptionCantAddItself].
	((self accounts) do: [:anAccount | ((anPortfolio accounts) includes: anAccount) ifTrue:[^self error: self class errorDescriptionAccountInBothPortfolios ]]).
	portfolios add: anPortfolio.! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 19:11:07'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'D S 11/5/2020 19:11:07'!
ERROR!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 19:11:07'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'D S 11/5/2020 19:11:07'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'D S 11/5/2020 19:11:07'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'D S 11/5/2020 19:11:07'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'D S 11/5/2020 19:11:07'!
ERROR!

!testRun: #PortfolioTest #test07 stamp: 'D S 11/5/2020 19:11:07'!
ERROR!

!testRun: #PortfolioTest #test08 stamp: 'D S 11/5/2020 19:11:07'!
ERROR!

!testRun: #PortfolioTest #test09 stamp: 'D S 11/5/2020 19:11:07'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'D S 11/5/2020 19:11:07'!
FAILURE!

!testRun: #PortfolioTest #test02 stamp: 'D S 11/5/2020 19:11:21'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'D S 11/5/2020 19:12:09' prior: 50950232!
balance
	
	^(account sum:[:anAccount| anAccount balance] ifEmpty:[0]) + 
	(portfolios sum:[:anPortfolio| anPortfolio balance] ifEmpty:[0]).! !
!Portfolio methodsFor: 'initialize' stamp: 'D S 11/5/2020 19:12:23' prior: 50950189 overrides: 16896425!
initialize
	
	account := OrderedCollection new.
	portfolios := OrderedCollection new.! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 19:12:27'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'D S 11/5/2020 19:12:27'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 19:12:27'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'D S 11/5/2020 19:12:27'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'D S 11/5/2020 19:12:27'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'D S 11/5/2020 19:12:27'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'D S 11/5/2020 19:12:27'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'D S 11/5/2020 19:12:27'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'D S 11/5/2020 19:12:27'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'D S 11/5/2020 19:12:27'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'D S 11/5/2020 19:12:27'!
PASSED!
!Portfolio methodsFor: 'accessing' stamp: 'D S 11/5/2020 19:13:23' prior: 50950255!
hasRegistered: anTransaction

	account do:[:anAccount | (anAccount hasRegistered: anTransaction) ifTrue: [^true]].
	portfolios do:[:aPortfolio | (aPortfolio hasRegistered: anTransaction) ifTrue: [^true]].! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 19:13:30'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'D S 11/5/2020 19:13:30'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 19:13:30'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'D S 11/5/2020 19:13:30'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'D S 11/5/2020 19:13:30'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'D S 11/5/2020 19:13:30'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'D S 11/5/2020 19:13:30'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'D S 11/5/2020 19:13:30'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'D S 11/5/2020 19:13:30'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'D S 11/5/2020 19:13:30'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'D S 11/5/2020 19:13:30'!
PASSED!
!Portfolio methodsFor: 'accessing' stamp: 'D S 11/5/2020 19:14:17' prior: 50950396!
hasRegistered: anTransaction

	account do:[:anAccount | (anAccount hasRegistered: anTransaction) ifTrue: [^true]].
	portfolios do:[:aPortfolio | (aPortfolio hasRegistered: anTransaction) ifTrue: [^true]].
	^false! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 19:14:19'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'D S 11/5/2020 19:14:19'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 19:14:19'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'D S 11/5/2020 19:14:19'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'D S 11/5/2020 19:14:19'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'D S 11/5/2020 19:14:19'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'D S 11/5/2020 19:14:19'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'D S 11/5/2020 19:14:19'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'D S 11/5/2020 19:14:19'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'D S 11/5/2020 19:14:19'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'D S 11/5/2020 19:14:19'!
PASSED!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'D S 11/5/2020 19:16:59'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 19:16:59' prior: 50950354!
balance
	
	^(accounts sum:[:anAccount| anAccount balance] ifEmpty:[0]) + 
	(portfolios sum:[:anPortfolio| anPortfolio balance] ifEmpty:[0]).! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 19:16:59' prior: 50950183!
addAccount: anAccount

	accounts add: anAccount.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 19:16:59' prior: 50950362 overrides: 16896425!
initialize
	
	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 19:16:59' prior: 50950434!
hasRegistered: anTransaction

	accounts do:[:anAccount | (anAccount hasRegistered: anTransaction) ifTrue: [^true]].
	portfolios do:[:aPortfolio | (aPortfolio hasRegistered: anTransaction) ifTrue: [^true]].
	^false! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 19:16:59' prior: 50950266!
transactions
	|allTransactions|
	allTransactions := OrderedCollection new.
	accounts do: [:anAccount | allTransactions addAll: (anAccount transactions)].
	portfolios do: [:anPortfolio | allTransactions addAll: (anPortfolio transactions)].
	^allTransactions! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 19:16:59' prior: 50950289!
accounts

	|allAccounts|
	allAccounts := OrderedCollection new.
	allAccounts addAll: accounts.
	portfolios do: [:anPortfolio | allAccounts addAll: (anPortfolio accounts)].
	^allAccounts! !
!Portfolio methodsFor: 'accessing' stamp: 'D S 11/5/2020 19:17:18'!
allAccounts

	|allAccounts|
	allAccounts := OrderedCollection new.
	allAccounts addAll: accounts.
	portfolios do: [:anPortfolio | allAccounts addAll: (anPortfolio accounts)].
	^allAccounts! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 19:17:18' prior: 50950311!
addPortfolio: anPortfolio

	(self == anPortfolio) ifTrue:[^self error: self class errorDescriptionCantAddItself].
	((self allAccounts) do: [:anAccount | ((anPortfolio allAccounts) includes: anAccount) ifTrue:[^self error: self class errorDescriptionAccountInBothPortfolios ]]).
	portfolios add: anPortfolio.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 19:17:18' prior: 50950522!
accounts

	|allAccounts|
	allAccounts := OrderedCollection new.
	allAccounts addAll: accounts.
	portfolios do: [:anPortfolio | allAccounts addAll: (anPortfolio allAccounts)].
	^allAccounts! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 19:17:18' prior: 50950531!
allAccounts

	|allAccounts|
	allAccounts := OrderedCollection new.
	allAccounts addAll: accounts.
	portfolios do: [:anPortfolio | allAccounts addAll: (anPortfolio allAccounts)].
	^allAccounts! !

!methodRemoval: Portfolio #accounts stamp: 'D S 11/5/2020 19:17:18'!
accounts

	|allAccounts|
	allAccounts := OrderedCollection new.
	allAccounts addAll: accounts.
	portfolios do: [:anPortfolio | allAccounts addAll: (anPortfolio allAccounts)].
	^allAccounts!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 19:20:21'!
test11
	|aPortfolio aPortfolio2|
	
	aPortfolio := Portfolio initializePortfolio.
	aPortfolio2 := Portfolio initializePortfolio.
	aPortfolio addPortfolio: aPortfolio2.
	^[aPortfolio addPortfolio: aPortfolio2.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionPortfolioAlreadyAdded.] 
	! !
!Portfolio methodsFor: 'adding' stamp: 'D S 11/5/2020 19:21:45' prior: 50950540!
addPortfolio: anPortfolio

	(self == anPortfolio) ifTrue:[^self error: self class errorDescriptionCantAddItself].
	(portfolios includes: anPortfolio) ifTrue: [^self error: self class errorDescriptionPortfolioAlreadyAdded].
	((self allAccounts) do: [:anAccount | ((anPortfolio allAccounts) includes: anAccount) ifTrue:[^self error: self class errorDescriptionAccountInBothPortfolios ]]).
	portfolios add: anPortfolio.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 19:21:59'!
errorDescriptionPortfolioAlreadyAdded

	^'The portfolio has been already added'.! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 19:22:03'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'D S 11/5/2020 19:22:03'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 19:22:03'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'D S 11/5/2020 19:22:03'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'D S 11/5/2020 19:22:03'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'D S 11/5/2020 19:22:03'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'D S 11/5/2020 19:22:03'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'D S 11/5/2020 19:22:03'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'D S 11/5/2020 19:22:03'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'D S 11/5/2020 19:22:03'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'D S 11/5/2020 19:22:03'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'D S 11/5/2020 19:22:03'!
PASSED!

Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

!classDefinition: #NameOfSubclass category: 'Portfolio-EjercicioV2' stamp: 'D S 11/5/2020 19:35:16'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

!classDefinition: #AccountTransaction category: 'Portfolio-EjercicioV2' stamp: 'D S 11/5/2020 19:35:23'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #AccountTransaction category: 'Portfolio-Ejercicio' stamp: 'D S 11/5/2020 19:35:26'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #NameOfSubclass stamp: 'D S 11/5/2020 19:35:41'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 19:35:46'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'D S 11/5/2020 19:35:46'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 19:35:46'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'D S 11/5/2020 19:35:46'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'D S 11/5/2020 19:35:46'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'D S 11/5/2020 19:35:46'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'D S 11/5/2020 19:35:46'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'D S 11/5/2020 19:35:46'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'D S 11/5/2020 19:35:46'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'D S 11/5/2020 19:35:46'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'D S 11/5/2020 19:35:46'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'D S 11/5/2020 19:35:46'!
PASSED!

!methodRemoval: PortfolioTest #test02 stamp: 'D S 11/5/2020 19:35:53'!
test02
	|aPortfolio anAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	Deposit register: 500 on: anAccount. 
	aPortfolio addAccount: anAccount.
	
	self assert: 500 equals: aPortfolio balance. 
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 19:37:23'!
test08TransactionsObtainAllTransactionsInAccounts
	|aPortfolio anAccount anSecondAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anSecondAccount := ReceptiveAccount new.
	aPortfolio addAccount: anAccount.
	aPortfolio addAccount: anSecondAccount.
	
	self assert: (OrderedCollection with: (Deposit register: 500 on: anAccount) with: (Deposit register: 200 on: anSecondAccount)) equals: aPortfolio transactions 
	! !

!methodRemoval: PortfolioTest #test08 stamp: 'D S 11/5/2020 19:37:23'!
test08
	|aPortfolio anAccount anSecondAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anSecondAccount := ReceptiveAccount new.
	aPortfolio addAccount: anAccount.
	aPortfolio addAccount: anSecondAccount.
	
	self assert: (OrderedCollection with: (Deposit register: 500 on: anAccount) with: (Deposit register: 200 on: anSecondAccount)) equals: aPortfolio transactions 
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 19:37:47'!
test04HasRegisterFoundTransactionCorrectly
	|aPortfolio anAccount anDeposit|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anDeposit := Deposit register: 500 on: anAccount.
	aPortfolio addAccount: anAccount.
	
	self assert: (aPortfolio hasRegistered: anDeposit). 
	! !

!methodRemoval: PortfolioTest #test04 stamp: 'D S 11/5/2020 19:37:47'!
test04
	|aPortfolio anAccount anDeposit|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anDeposit := Deposit register: 500 on: anAccount.
	aPortfolio addAccount: anAccount.
	
	self assert: (aPortfolio hasRegistered: anDeposit). 
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 19:38:27'!
test05HasRegisterDontFoundTransactionsOutOfPortfolio
	|aPortfolio anAccount anAccountNotInPortfolio|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	Deposit register: 500 on: anAccount.
	anAccountNotInPortfolio := ReceptiveAccount new.
	aPortfolio addAccount: anAccount.
	
	self deny: (aPortfolio hasRegistered: (Deposit register: 200 on: anAccountNotInPortfolio)). 
	! !

!methodRemoval: PortfolioTest #test05 stamp: 'D S 11/5/2020 19:38:27'!
test05
	|aPortfolio anAccount anAccountNotInPortfolio|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	Deposit register: 500 on: anAccount.
	anAccountNotInPortfolio := ReceptiveAccount new.
	aPortfolio addAccount: anAccount.
	
	self deny: (aPortfolio hasRegistered: (Deposit register: 200 on: anAccountNotInPortfolio)). 
	!

!methodRemoval: PortfolioTest #test06 stamp: 'D S 11/5/2020 19:38:33'!
test06
	|aPortfolio anAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.

	aPortfolio addAccount: anAccount.
	
	self assert: OrderedCollection new equals: aPortfolio transactions 
	!

!methodRemoval: PortfolioTest #test07 stamp: 'D S 11/5/2020 19:38:37'!
test07
	|aPortfolio anAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	aPortfolio addAccount: anAccount.
	
	self assert: (OrderedCollection with: (Deposit register: 500 on: anAccount)) equals: aPortfolio transactions 
	!

!methodRemoval: PortfolioTest #test03 stamp: 'D S 11/5/2020 19:38:51'!
test03
	|aPortfolio anAccount anDeposit|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anDeposit := Deposit register: 500 on: anAccount.
	
	self deny: (aPortfolio hasRegistered: anDeposit). 
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 19:38:58'!
test03HasRegisterFoundTransactionCorrectly
	|aPortfolio anAccount anDeposit|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anDeposit := Deposit register: 500 on: anAccount.
	aPortfolio addAccount: anAccount.
	
	self assert: (aPortfolio hasRegistered: anDeposit). 
	! !

!methodRemoval: PortfolioTest #test04HasRegisterFoundTransactionCorrectly stamp: 'D S 11/5/2020 19:38:58'!
test04HasRegisterFoundTransactionCorrectly
	|aPortfolio anAccount anDeposit|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anDeposit := Deposit register: 500 on: anAccount.
	aPortfolio addAccount: anAccount.
	
	self assert: (aPortfolio hasRegistered: anDeposit). 
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 19:39:02'!
test04HasRegisterDontFoundTransactionsOutOfPortfolio
	|aPortfolio anAccount anAccountNotInPortfolio|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	Deposit register: 500 on: anAccount.
	anAccountNotInPortfolio := ReceptiveAccount new.
	aPortfolio addAccount: anAccount.
	
	self deny: (aPortfolio hasRegistered: (Deposit register: 200 on: anAccountNotInPortfolio)). 
	! !

!methodRemoval: PortfolioTest #test05HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/5/2020 19:39:02'!
test05HasRegisterDontFoundTransactionsOutOfPortfolio
	|aPortfolio anAccount anAccountNotInPortfolio|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	Deposit register: 500 on: anAccount.
	anAccountNotInPortfolio := ReceptiveAccount new.
	aPortfolio addAccount: anAccount.
	
	self deny: (aPortfolio hasRegistered: (Deposit register: 200 on: anAccountNotInPortfolio)). 
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 19:39:07'!
test05TransactionsObtainAllTransactionsInAccounts
	|aPortfolio anAccount anSecondAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anSecondAccount := ReceptiveAccount new.
	aPortfolio addAccount: anAccount.
	aPortfolio addAccount: anSecondAccount.
	
	self assert: (OrderedCollection with: (Deposit register: 500 on: anAccount) with: (Deposit register: 200 on: anSecondAccount)) equals: aPortfolio transactions 
	! !

!methodRemoval: PortfolioTest #test08TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/5/2020 19:39:07'!
test08TransactionsObtainAllTransactionsInAccounts
	|aPortfolio anAccount anSecondAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anSecondAccount := ReceptiveAccount new.
	aPortfolio addAccount: anAccount.
	aPortfolio addAccount: anSecondAccount.
	
	self assert: (OrderedCollection with: (Deposit register: 500 on: anAccount) with: (Deposit register: 200 on: anSecondAccount)) equals: aPortfolio transactions 
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 19:39:34'!
test06RaiseErrorWhenTryingAddPortfolioToItself
	|aPortfolio |
	
	aPortfolio := Portfolio initializePortfolio.
	
	^[aPortfolio addPortfolio: aPortfolio.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionCantAddItself.] 
	! !

!methodRemoval: PortfolioTest #test09 stamp: 'D S 11/5/2020 19:39:34'!
test09
	|aPortfolio |
	
	aPortfolio := Portfolio initializePortfolio.
	
	^[aPortfolio addPortfolio: aPortfolio.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionCantAddItself.] 
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 19:40:04'!
test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth
	|aPortfolio aPortfolio2 anAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	aPortfolio2 := Portfolio initializePortfolio.
	aPortfolio2 addAccount: anAccount.
	aPortfolio addAccount: anAccount.
	^[aPortfolio addPortfolio: aPortfolio2.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionAccountInBothPortfolios.] 
	! !

!methodRemoval: PortfolioTest #test10 stamp: 'D S 11/5/2020 19:40:04'!
test10
	|aPortfolio aPortfolio2 anAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	aPortfolio2 := Portfolio initializePortfolio.
	aPortfolio2 addAccount: anAccount.
	aPortfolio addAccount: anAccount.
	^[aPortfolio addPortfolio: aPortfolio2.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionAccountInBothPortfolios.] 
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 19:40:30'!
test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded
	|aPortfolio aPortfolio2|
	
	aPortfolio := Portfolio initializePortfolio.
	aPortfolio2 := Portfolio initializePortfolio.
	aPortfolio addPortfolio: aPortfolio2.
	^[aPortfolio addPortfolio: aPortfolio2.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionPortfolioAlreadyAdded.] 
	! !

!methodRemoval: PortfolioTest #test11 stamp: 'D S 11/5/2020 19:40:30'!
test11
	|aPortfolio aPortfolio2|
	
	aPortfolio := Portfolio initializePortfolio.
	aPortfolio2 := Portfolio initializePortfolio.
	aPortfolio addPortfolio: aPortfolio2.
	^[aPortfolio addPortfolio: aPortfolio2.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionPortfolioAlreadyAdded.] 
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 19:41:32'!
test09
	|aPortfolio aPortfolio2 aPortfolio3|
	
	aPortfolio := Portfolio initializePortfolio.
	aPortfolio2 := Portfolio initializePortfolio.
	aPortfolio3 := Portfolio initializePortfolio.
	aPortfolio2 addPortfolio: aPortfolio3.
	aPortfolio addPortfolio: aPortfolio.
	^[aPortfolio2 addPortfolio: aPortfolio3.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionPortfolioInBothPortfolio.] 
	! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 19:41:55'!
errorDescriptionPortfolioInBothPortfolio

	^'Unable to add portfolio: a Portfolio is in both'.! !
!Portfolio methodsFor: 'adding' stamp: 'D S 11/5/2020 19:43:16' prior: 50950593!
addPortfolio: anPortfolio

	(self == anPortfolio) ifTrue:[^self error: self class errorDescriptionCantAddItself].
	(portfolios includes: anPortfolio) ifTrue: [^self error: self class errorDescriptionPortfolioAlreadyAdded].
	((self allAccounts) do: [:anAccount | ((anPortfolio allAccounts) includes: anAccount) ifTrue:[^self error: self class errorDescriptionAccountInBothPortfolios ]]).
	((self allPortfolios) do: [:aPortfolio | ((anPortfolio allPortfolios) includes: aPortfolio) ifTrue:[^self error: self class errorDescriptionPortfolioInBothPortfolios ]]).
	portfolios add: anPortfolio.! !
!Portfolio methodsFor: 'accessing' stamp: 'D S 11/5/2020 19:44:23'!
allPortfolios

	|allPortfolios|
	allPortfolios := OrderedCollection new.
	allPortfolios addAll: portfolios.
	portfolios do: [:anPortfolio | allPortfolios addAll: (anPortfolio allPortfolios)].
	^allPortfolios! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 19:44:51'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 19:44:51'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/5/2020 19:44:51'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/5/2020 19:44:51'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/5/2020 19:44:51'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/5/2020 19:44:51'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/5/2020 19:44:51'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/5/2020 19:44:51'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'D S 11/5/2020 19:44:51'!
ERROR!

!testRun: #PortfolioTest #test09 stamp: 'D S 11/5/2020 19:44:51'!
ERROR!

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 19:45:02'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 19:45:02'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/5/2020 19:45:02'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/5/2020 19:45:02'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/5/2020 19:45:02'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/5/2020 19:45:02'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/5/2020 19:45:02'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/5/2020 19:45:02'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'D S 11/5/2020 19:45:02'!
ERROR!

!testRun: #PortfolioTest #test09 stamp: 'D S 11/5/2020 19:45:02'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 19:45:12' prior: 50951019!
test09
	|aPortfolio aPortfolio2 aPortfolio3|
	
	aPortfolio := Portfolio initializePortfolio.
	aPortfolio2 := Portfolio initializePortfolio.
	aPortfolio3 := Portfolio initializePortfolio.
	aPortfolio2 addPortfolio: aPortfolio3.
	aPortfolio addPortfolio: aPortfolio3.
	^[aPortfolio2 addPortfolio: aPortfolio3.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionPortfolioInBothPortfolio.] 
	! !

!testRun: #PortfolioTest #test09 stamp: 'D S 11/5/2020 19:45:15'!
FAILURE!

!testRun: #PortfolioTest #test09 stamp: 'D S 11/5/2020 19:45:15'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 19:45:24' prior: 50951141!
test09
	|aPortfolio aPortfolio2 aPortfolio3|
	
	aPortfolio := Portfolio initializePortfolio.
	aPortfolio2 := Portfolio initializePortfolio.
	aPortfolio3 := Portfolio initializePortfolio.
	aPortfolio2 addPortfolio: aPortfolio3.
	aPortfolio addPortfolio: aPortfolio3.
	^[aPortfolio addPortfolio: aPortfolio3.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionPortfolioInBothPortfolio.] 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 19:45:33' prior: 50951163!
test09
	|aPortfolio aPortfolio2 aPortfolio3|
	
	aPortfolio := Portfolio initializePortfolio.
	aPortfolio2 := Portfolio initializePortfolio.
	aPortfolio3 := Portfolio initializePortfolio.
	aPortfolio2 addPortfolio: aPortfolio3.
	aPortfolio addPortfolio: aPortfolio3.
	^[aPortfolio addPortfolio: aPortfolio2.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionPortfolioInBothPortfolio.] 
	! !

!testRun: #PortfolioTest #test09 stamp: 'D S 11/5/2020 19:45:37'!
FAILURE!

!testRun: #PortfolioTest #test09 stamp: 'D S 11/5/2020 19:45:37'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'D S 11/5/2020 19:46:06' prior: 50951042!
addPortfolio: anPortfolio

	(self == anPortfolio) ifTrue:[^self error: self class errorDescriptionCantAddItself].
	(portfolios includes: anPortfolio) ifTrue: [^self error: self class errorDescriptionPortfolioAlreadyAdded].
	((self allAccounts) do: [:anAccount | ((anPortfolio allAccounts) includes: anAccount) ifTrue:[^self error: self class errorDescriptionAccountInBothPortfolios ]]).
	((self allPortfolios) do: [:aPortfolio | ((anPortfolio allPortfolios) includes: aPortfolio) ifTrue:[^self error: self class errorDescriptionPortfolioInBothPortfolio ]]).
	portfolios add: anPortfolio.! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 19:46:17'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 19:46:17'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/5/2020 19:46:17'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/5/2020 19:46:17'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/5/2020 19:46:17'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/5/2020 19:46:17'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/5/2020 19:46:17'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/5/2020 19:46:17'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'D S 11/5/2020 19:46:17'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 19:46:35'!
test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth
	|aPortfolio aPortfolio2 aPortfolio3|
	
	aPortfolio := Portfolio initializePortfolio.
	aPortfolio2 := Portfolio initializePortfolio.
	aPortfolio3 := Portfolio initializePortfolio.
	aPortfolio2 addPortfolio: aPortfolio3.
	aPortfolio addPortfolio: aPortfolio3.
	^[aPortfolio addPortfolio: aPortfolio2.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionPortfolioInBothPortfolio.] 
	! !

!methodRemoval: PortfolioTest #test09 stamp: 'D S 11/5/2020 19:46:38'!
test09
	|aPortfolio aPortfolio2 aPortfolio3|
	
	aPortfolio := Portfolio initializePortfolio.
	aPortfolio2 := Portfolio initializePortfolio.
	aPortfolio3 := Portfolio initializePortfolio.
	aPortfolio2 addPortfolio: aPortfolio3.
	aPortfolio addPortfolio: aPortfolio3.
	^[aPortfolio addPortfolio: aPortfolio2.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionPortfolioInBothPortfolio.] 
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 19:48:16'!
test10	
	|aPortfolio|
	
	aPortfolio := Portfolio new.
	self assert: (OrderedCollection new) equals: aPortfolio allAccounts . 
	! !

!testRun: #PortfolioTest #test10 stamp: 'D S 11/5/2020 19:48:19'!
PASSED!

!methodRemoval: PortfolioTest #test10 stamp: 'D S 11/5/2020 19:48:24'!
test10	
	|aPortfolio|
	
	aPortfolio := Portfolio new.
	self assert: (OrderedCollection new) equals: aPortfolio allAccounts . 
	!

Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

!classDefinition: #NameOfSubclass category: 'Portfolio-EjercicioV2' stamp: 'D S 11/5/2020 20:11:46'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

Object subclass: #AccountTransactionV2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #AccountTransactionV2 category: 'Portfolio-Ejercicio' stamp: 'D S 11/5/2020 20:12:13'!
Object subclass: #AccountTransactionV2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

AccountTransactionV2 class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransactionV2 class' category: 'Portfolio-Ejercicio' stamp: 'D S 11/5/2020 20:12:13'!
AccountTransactionV2 class
	instanceVariableNames: ''!
!AccountTransactionV2 methodsFor: 'value' stamp: 'D S 11/5/2020 20:12:13' overrides: 16881508!
value 

	self subclassResponsibility ! !
!AccountTransactionV2 class methodsFor: 'instance creation' stamp: 'D S 11/5/2020 20:12:13'!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

AccountTransaction subclass: #DepositV2
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #DepositV2 category: 'Portfolio-Ejercicio' stamp: 'D S 11/5/2020 20:12:25'!
AccountTransaction subclass: #DepositV2
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

DepositV2 class
	instanceVariableNames: ''!

!classDefinition: 'DepositV2 class' category: 'Portfolio-Ejercicio' stamp: 'D S 11/5/2020 20:12:25'!
DepositV2 class
	instanceVariableNames: ''!
!DepositV2 methodsFor: 'initialization' stamp: 'D S 11/5/2020 20:12:25'!
initializeFor: aValue

	value := aValue ! !
!DepositV2 methodsFor: 'value' stamp: 'D S 11/5/2020 20:12:25'!
netValue

	^ value! !
!DepositV2 methodsFor: 'value' stamp: 'D S 11/5/2020 20:12:25' overrides: 50947540!
value

	^ value! !
!DepositV2 class methodsFor: 'instance creation' stamp: 'D S 11/5/2020 20:12:25'!
for: aValue

	^ self new initializeFor: aValue ! !

AccountTransactionV2 subclass: #DepositV2
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #DepositV2 category: 'Portfolio-Ejercicio' stamp: 'D S 11/5/2020 20:12:32'!
AccountTransactionV2 subclass: #DepositV2
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

AccountTransaction subclass: #WithdrawV2
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #WithdrawV2 category: 'Portfolio-Ejercicio' stamp: 'D S 11/5/2020 20:12:41'!
AccountTransaction subclass: #WithdrawV2
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

WithdrawV2 class
	instanceVariableNames: ''!

!classDefinition: 'WithdrawV2 class' category: 'Portfolio-Ejercicio' stamp: 'D S 11/5/2020 20:12:41'!
WithdrawV2 class
	instanceVariableNames: ''!
!WithdrawV2 methodsFor: 'initialization' stamp: 'D S 11/5/2020 20:12:41'!
initializeFor: aValue

	value := aValue ! !
!WithdrawV2 methodsFor: 'value' stamp: 'D S 11/5/2020 20:12:41'!
netValue

	^ value * (-1)! !
!WithdrawV2 methodsFor: 'value' stamp: 'D S 11/5/2020 20:12:41' overrides: 50947540!
value

	^ value! !
!WithdrawV2 class methodsFor: 'instance creation' stamp: 'D S 11/5/2020 20:12:41'!
for: aValue

	^ self new initializeFor: aValue ! !

AccountTransactionV2 subclass: #WithdrawV2
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #WithdrawV2 category: 'Portfolio-Ejercicio' stamp: 'D S 11/5/2020 20:12:50'!
AccountTransactionV2 subclass: #WithdrawV2
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #PortfolioV2
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioV2 category: 'Portfolio-Ejercicio' stamp: 'D S 11/5/2020 20:13:21'!
Object subclass: #PortfolioV2
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioV2 class
	instanceVariableNames: ''!

!classDefinition: 'PortfolioV2 class' category: 'Portfolio-Ejercicio' stamp: 'D S 11/5/2020 20:13:21'!
PortfolioV2 class
	instanceVariableNames: ''!
!PortfolioV2 methodsFor: 'accessing --Private--' stamp: 'D S 11/5/2020 20:13:21'!
allAccounts

	|allAccounts|
	allAccounts := OrderedCollection new.
	allAccounts addAll: accounts.
	portfolios do: [:anPortfolio | allAccounts addAll: (anPortfolio allAccounts)].
	^allAccounts! !
!PortfolioV2 methodsFor: 'accessing --Private--' stamp: 'D S 11/5/2020 20:13:21'!
allPortfolios

	|allPortfolios|
	allPortfolios := OrderedCollection new.
	allPortfolios addAll: portfolios.
	portfolios do: [:anPortfolio | allPortfolios addAll: (anPortfolio allPortfolios)].
	^allPortfolios! !
!PortfolioV2 methodsFor: 'accessing' stamp: 'D S 11/5/2020 20:13:21'!
balance
	
	^(accounts sum:[:anAccount| anAccount balance] ifEmpty:[0]) + 
	(portfolios sum:[:anPortfolio| anPortfolio balance] ifEmpty:[0]).! !
!PortfolioV2 methodsFor: 'accessing' stamp: 'D S 11/5/2020 20:13:21'!
hasRegistered: anTransaction

	accounts do:[:anAccount | (anAccount hasRegistered: anTransaction) ifTrue: [^true]].
	portfolios do:[:aPortfolio | (aPortfolio hasRegistered: anTransaction) ifTrue: [^true]].
	^false! !
!PortfolioV2 methodsFor: 'accessing' stamp: 'D S 11/5/2020 20:13:21'!
transactions
	|allTransactions|
	allTransactions := OrderedCollection new.
	accounts do: [:anAccount | allTransactions addAll: (anAccount transactions)].
	portfolios do: [:anPortfolio | allTransactions addAll: (anPortfolio transactions)].
	^allTransactions! !
!PortfolioV2 methodsFor: 'adding' stamp: 'D S 11/5/2020 20:13:21'!
addAccount: anAccount

	accounts add: anAccount.! !
!PortfolioV2 methodsFor: 'adding' stamp: 'D S 11/5/2020 20:13:21'!
addPortfolio: anPortfolio

	(self == anPortfolio) ifTrue:[^self error: self class errorDescriptionCantAddItself].
	(portfolios includes: anPortfolio) ifTrue: [^self error: self class errorDescriptionPortfolioAlreadyAdded].
	((self allAccounts) do: [:anAccount | ((anPortfolio allAccounts) includes: anAccount) ifTrue:[^self error: self class errorDescriptionAccountInBothPortfolios ]]).
	((self allPortfolios) do: [:aPortfolio | ((anPortfolio allPortfolios) includes: aPortfolio) ifTrue:[^self error: self class errorDescriptionPortfolioInBothPortfolio ]]).
	portfolios add: anPortfolio.! !
!PortfolioV2 methodsFor: 'initialize' stamp: 'D S 11/5/2020 20:13:21' overrides: 16896425!
initialize
	
	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.! !
!PortfolioV2 class methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:13:21'!
errorDescriptionAccountInBothPortfolios

	^'Unable to add portfolio: anAccount is in both'.! !
!PortfolioV2 class methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:13:21'!
errorDescriptionCantAddItself

	^'You cant add the portfolio to itself'.! !
!PortfolioV2 class methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:13:21'!
errorDescriptionPortfolioAlreadyAdded

	^'The portfolio has been already added'.! !
!PortfolioV2 class methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:13:21'!
errorDescriptionPortfolioInBothPortfolio

	^'Unable to add portfolio: a Portfolio is in both'.! !
!PortfolioV2 class methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:13:21'!
initializePortfolio

	^self new initialize.! !

TestCase subclass: #PortfolioTestV2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTestV2 category: 'Portfolio-Ejercicio' stamp: 'D S 11/5/2020 20:13:31'!
TestCase subclass: #PortfolioTestV2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioTestV2 class
	instanceVariableNames: ''!

!classDefinition: 'PortfolioTestV2 class' category: 'Portfolio-Ejercicio' stamp: 'D S 11/5/2020 20:13:31'!
PortfolioTestV2 class
	instanceVariableNames: ''!
!PortfolioTestV2 methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:13:31'!
test01initializeWithTotalBalance0
	|aPortfolio|
	
	aPortfolio := Portfolio new.
	self assert: 0 equals: aPortfolio balance. 
	! !
!PortfolioTestV2 methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:13:31'!
test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio
	|aPortfolio anAccount anAccount2|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Deposit register: 500 on: anAccount.
	Deposit register: 200 on: anAccount2.
	aPortfolio addAccount: anAccount.
	aPortfolio addAccount: anAccount2.
	
	self assert: 700 equals: aPortfolio balance. 
	! !
!PortfolioTestV2 methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:13:31'!
test03HasRegisterFoundTransactionCorrectly
	|aPortfolio anAccount anDeposit|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anDeposit := Deposit register: 500 on: anAccount.
	aPortfolio addAccount: anAccount.
	
	self assert: (aPortfolio hasRegistered: anDeposit). 
	! !
!PortfolioTestV2 methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:13:32'!
test04HasRegisterDontFoundTransactionsOutOfPortfolio
	|aPortfolio anAccount anAccountNotInPortfolio|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	Deposit register: 500 on: anAccount.
	anAccountNotInPortfolio := ReceptiveAccount new.
	aPortfolio addAccount: anAccount.
	
	self deny: (aPortfolio hasRegistered: (Deposit register: 200 on: anAccountNotInPortfolio)). 
	! !
!PortfolioTestV2 methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:13:32'!
test05TransactionsObtainAllTransactionsInAccounts
	|aPortfolio anAccount anSecondAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	anSecondAccount := ReceptiveAccount new.
	aPortfolio addAccount: anAccount.
	aPortfolio addAccount: anSecondAccount.
	
	self assert: (OrderedCollection with: (Deposit register: 500 on: anAccount) with: (Deposit register: 200 on: anSecondAccount)) equals: aPortfolio transactions 
	! !
!PortfolioTestV2 methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:13:32'!
test06RaiseErrorWhenTryingAddPortfolioToItself
	|aPortfolio |
	
	aPortfolio := Portfolio initializePortfolio.
	
	^[aPortfolio addPortfolio: aPortfolio.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionCantAddItself.] 
	! !
!PortfolioTestV2 methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:13:32'!
test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth
	|aPortfolio aPortfolio2 anAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	aPortfolio2 := Portfolio initializePortfolio.
	aPortfolio2 addAccount: anAccount.
	aPortfolio addAccount: anAccount.
	^[aPortfolio addPortfolio: aPortfolio2.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionAccountInBothPortfolios.] 
	! !
!PortfolioTestV2 methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:13:32'!
test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded
	|aPortfolio aPortfolio2|
	
	aPortfolio := Portfolio initializePortfolio.
	aPortfolio2 := Portfolio initializePortfolio.
	aPortfolio addPortfolio: aPortfolio2.
	^[aPortfolio addPortfolio: aPortfolio2.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionPortfolioAlreadyAdded.] 
	! !
!PortfolioTestV2 methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:13:32'!
test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth
	|aPortfolio aPortfolio2 aPortfolio3|
	
	aPortfolio := Portfolio initializePortfolio.
	aPortfolio2 := Portfolio initializePortfolio.
	aPortfolio3 := Portfolio initializePortfolio.
	aPortfolio2 addPortfolio: aPortfolio3.
	aPortfolio addPortfolio: aPortfolio3.
	^[aPortfolio addPortfolio: aPortfolio2.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionPortfolioInBothPortfolio.] 
	! !

Object subclass: #ReceptiveAccountV2
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccountV2 category: 'Portfolio-Ejercicio' stamp: 'D S 11/5/2020 20:13:40'!
Object subclass: #ReceptiveAccountV2
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

ReceptiveAccountV2 class
	instanceVariableNames: ''!

!classDefinition: 'ReceptiveAccountV2 class' category: 'Portfolio-Ejercicio' stamp: 'D S 11/5/2020 20:13:40'!
ReceptiveAccountV2 class
	instanceVariableNames: ''!
!ReceptiveAccountV2 methodsFor: 'initialization' stamp: 'D S 11/5/2020 20:13:40' overrides: 16896425!
initialize

	transactions := OrderedCollection new.! !
!ReceptiveAccountV2 methodsFor: 'transactions' stamp: 'D S 11/5/2020 20:13:40'!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccountV2 methodsFor: 'transactions' stamp: 'D S 11/5/2020 20:13:40'!
transactions 

	^ transactions copy! !
!ReceptiveAccountV2 methodsFor: 'balance' stamp: 'D S 11/5/2020 20:13:40'!
balance

	^transactions sum: [ :aTransaction | aTransaction netValue] 
	ifEmpty: [ 0 ]! !
!ReceptiveAccountV2 methodsFor: 'testing' stamp: 'D S 11/5/2020 20:13:40'!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !

TestCase subclass: #ReceptiveAccountTestV2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccountTestV2 category: 'Portfolio-Ejercicio' stamp: 'D S 11/5/2020 20:13:50'!
TestCase subclass: #ReceptiveAccountTestV2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

ReceptiveAccountTestV2 class
	instanceVariableNames: ''!

!classDefinition: 'ReceptiveAccountTestV2 class' category: 'Portfolio-Ejercicio' stamp: 'D S 11/5/2020 20:13:50'!
ReceptiveAccountTestV2 class
	instanceVariableNames: ''!
!ReceptiveAccountTestV2 methodsFor: 'tests' stamp: 'D S 11/5/2020 20:13:50'!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance.
! !
!ReceptiveAccountTestV2 methodsFor: 'tests' stamp: 'D S 11/5/2020 20:13:50'!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance.
! !
!ReceptiveAccountTestV2 methodsFor: 'tests' stamp: 'D S 11/5/2020 20:13:50'!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance.
! !
!ReceptiveAccountTestV2 methodsFor: 'tests' stamp: 'D S 11/5/2020 20:13:50'!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTestV2 methodsFor: 'tests' stamp: 'D S 11/5/2020 20:13:50'!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTestV2 methodsFor: 'tests' stamp: 'D S 11/5/2020 20:13:50'!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw account |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTestV2 methodsFor: 'tests' stamp: 'D S 11/5/2020 20:13:50'!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 50 on: account1.
		
	self assert: 1 equals: account1 transactions size.
	self assert: (account1 transactions includes: deposit1).
! !

!classRemoval: #NameOfSubclass stamp: 'D S 11/5/2020 20:14:11'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

----SNAPSHOT----(5 November 2020 20:14:35) CuisUniversity-4383.image priorSource: 19760408!

Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

!classDefinition: #AccountTransaction category: 'Portfolio-EjercicioV2' stamp: 'D S 11/5/2020 20:14:38'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

!classDefinition: #Deposit category: 'Portfolio-EjercicioV2' stamp: 'D S 11/5/2020 20:14:46'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

!classDefinition: #Withdraw category: 'Portfolio-EjercicioV2' stamp: 'D S 11/5/2020 20:14:53'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

!classRemoval: #DepositV2 stamp: 'D S 11/5/2020 20:14:59'!
AccountTransactionV2 subclass: #DepositV2
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

!classRemoval: #WithdrawV2 stamp: 'D S 11/5/2020 20:15:00'!
AccountTransactionV2 subclass: #WithdrawV2
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

!classRemoval: #AccountTransactionV2 stamp: 'D S 11/5/2020 20:15:01'!
Object subclass: #AccountTransactionV2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

!classDefinition: #PortfolioTest category: 'Portfolio-EjercicioV2' stamp: 'D S 11/5/2020 20:15:10'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

!classDefinition: #Portfolio category: 'Portfolio-EjercicioV2' stamp: 'D S 11/5/2020 20:15:14'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-EjercicioV2' stamp: 'D S 11/5/2020 20:15:18'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-EjercicioV2' stamp: 'D S 11/5/2020 20:15:22'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

!classRemoval: #ReceptiveAccountTestV2 stamp: 'D S 11/5/2020 20:15:27'!
TestCase subclass: #ReceptiveAccountTestV2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

!classRemoval: #PortfolioV2 stamp: 'D S 11/5/2020 20:15:32'!
Object subclass: #PortfolioV2
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

!classRemoval: #PortfolioTestV2 stamp: 'D S 11/5/2020 20:15:39'!
TestCase subclass: #PortfolioTestV2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

!classRemoval: #ReceptiveAccountV2 stamp: 'D S 11/5/2020 20:15:46'!
Object subclass: #ReceptiveAccountV2
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/5/2020 20:15:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/5/2020 20:15:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/5/2020 20:15:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/5/2020 20:15:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/5/2020 20:15:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/5/2020 20:15:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/5/2020 20:15:49'!
PASSED!

Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios transactionsInPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

!classDefinition: #Portfolio category: 'Portfolio-EjercicioV2' stamp: 'D S 11/5/2020 20:17:22'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios transactionsInPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-EjercicioV2' stamp: 'D S 11/5/2020 20:18:10'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!
!Portfolio methodsFor: 'adding' stamp: 'D S 11/5/2020 20:18:44' prior: 50950488!
addAccount: anAccount

	accounts add: anAccount.
	anAccount addPortfolio: self! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'D S 11/5/2020 20:19:09'!
addPortfolio: aPortfolio

	portfolios add: aPortfolio! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'D S 11/5/2020 20:20:29' prior: 50947660!
hasRegistered: aTransaction

	portfolios addTransacion: aTransaction.
	^ transactions includes: aTransaction 
	! !
!Portfolio methodsFor: 'accessing --Private--' stamp: 'D S 11/5/2020 20:20:52'!
addTransaction: aTransaction

	transactionsInPortfolio add: aTransaction 

	! !

Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios transactionsInPortfolio insidePortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

!classDefinition: #Portfolio category: 'Portfolio-EjercicioV2' stamp: 'D S 11/5/2020 20:21:06'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios transactionsInPortfolio insidePortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!
!Portfolio methodsFor: 'accessing --Private--' stamp: 'D S 11/5/2020 20:21:54' prior: 50952076!
addTransaction: aTransaction

	transactionsInPortfolio add: aTransaction.
	insidePortfolio do: [:aPortfolio| aPortfolio addTransaction: aTransaction]

	! !
!Portfolio methodsFor: 'accessing' stamp: 'D S 11/5/2020 20:22:12' prior: 50950510!
transactions

	^transactionsInPortfolio ! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'D S 11/5/2020 20:22:31' prior: 50952069!
hasRegistered: aTransaction

	portfolios addTransaction: aTransaction.
	^ transactions includes: aTransaction 
	! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'D S 11/5/2020 20:22:58' prior: 50952110!
hasRegistered: aTransaction


	^ transactions includes: aTransaction 
	! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'D S 11/5/2020 20:22:59' prior: 50952117!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/5/2020 20:23:11' prior: 50947646!
register: aTransaction

	portfolios addTransaction: aTransaction.
	transactions add: aTransaction 
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/5/2020 20:23:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/5/2020 20:23:19'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/5/2020 20:23:19'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/5/2020 20:23:19'!
ERROR!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/5/2020 20:23:19'!
ERROR!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/5/2020 20:23:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/5/2020 20:23:19'!
ERROR!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'D S 11/5/2020 20:23:57' prior: 50947641 overrides: 16896425!
initialize

	transactions := OrderedCollection new.
	portfolios := OrderedCollection new.! !
!Portfolio methodsFor: 'initialize' stamp: 'D S 11/5/2020 20:24:13' prior: 50950494 overrides: 16896425!
initialize
	
	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.
	transactionsInPortfolio := OrderedCollection new.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/5/2020 20:24:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/5/2020 20:24:21'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/5/2020 20:24:21'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/5/2020 20:24:21'!
ERROR!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/5/2020 20:24:21'!
ERROR!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/5/2020 20:24:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/5/2020 20:24:21'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/5/2020 20:24:40'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/5/2020 20:25:11' prior: 50952129!
register: aTransaction

	portfolios do: [:aPortfolio | aPortfolio addTransaction: aTransaction].
	transactions add: aTransaction 
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/5/2020 20:25:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/5/2020 20:25:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/5/2020 20:25:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/5/2020 20:25:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/5/2020 20:25:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/5/2020 20:25:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/5/2020 20:25:14'!
PASSED!

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 20:25:18'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 20:25:18'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/5/2020 20:25:18'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/5/2020 20:25:18'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/5/2020 20:25:18'!
ERROR!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/5/2020 20:25:18'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/5/2020 20:25:18'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/5/2020 20:25:18'!
PASSED!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/5/2020 20:25:18'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/5/2020 20:25:18'!
ERROR!
!Portfolio methodsFor: 'initialize' stamp: 'D S 11/5/2020 20:25:41' prior: 50952170 overrides: 16896425!
initialize
	
	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.
	transactionsInPortfolio := OrderedCollection new.
	insidePortfolio := OrderedCollection new.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/5/2020 20:25:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/5/2020 20:25:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/5/2020 20:25:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/5/2020 20:25:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/5/2020 20:25:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/5/2020 20:25:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/5/2020 20:25:45'!
PASSED!

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 20:25:48'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 20:25:48'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/5/2020 20:25:48'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/5/2020 20:25:48'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/5/2020 20:25:48'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/5/2020 20:25:48'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/5/2020 20:25:48'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/5/2020 20:25:48'!
PASSED!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/5/2020 20:25:48'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:26:58' prior: 50949999!
test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio
	|aPortfolio anAccount anAccount2|
	
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Deposit register: 500 on: anAccount.
	Deposit register: 200 on: anAccount2.
	aPortfolio addAccount: anAccount.
	aPortfolio addAccount: anAccount2.
	
	self assert: 700 equals: aPortfolio balance. 
	! !

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 20:27:01'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:27:06' prior: 50950844!
test03HasRegisterFoundTransactionCorrectly
	|aPortfolio anAccount anDeposit|
	
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	anDeposit := Deposit register: 500 on: anAccount.
	aPortfolio addAccount: anAccount.
	
	self assert: (aPortfolio hasRegistered: anDeposit). 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:27:09' prior: 50950870!
test04HasRegisterDontFoundTransactionsOutOfPortfolio
	|aPortfolio anAccount anAccountNotInPortfolio|
	
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	Deposit register: 500 on: anAccount.
	anAccountNotInPortfolio := ReceptiveAccount new.
	aPortfolio addAccount: anAccount.
	
	self deny: (aPortfolio hasRegistered: (Deposit register: 200 on: anAccountNotInPortfolio)). 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:27:13' prior: 50950902!
test05TransactionsObtainAllTransactionsInAccounts
	|aPortfolio anAccount anSecondAccount|
	
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	anSecondAccount := ReceptiveAccount new.
	aPortfolio addAccount: anAccount.
	aPortfolio addAccount: anSecondAccount.
	
	self assert: (OrderedCollection with: (Deposit register: 500 on: anAccount) with: (Deposit register: 200 on: anSecondAccount)) equals: aPortfolio transactions 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:27:18' prior: 50950937!
test06RaiseErrorWhenTryingAddPortfolioToItself
	|aPortfolio |
	
	aPortfolio := Portfolio new.
	
	^[aPortfolio addPortfolio: aPortfolio.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionCantAddItself.] 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:27:22' prior: 50950958!
test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth
	|aPortfolio aPortfolio2 anAccount|
	
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	aPortfolio2 := Portfolio initializePortfolio.
	aPortfolio2 addAccount: anAccount.
	aPortfolio addAccount: anAccount.
	^[aPortfolio addPortfolio: aPortfolio2.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionAccountInBothPortfolios.] 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:27:26' prior: 50952426!
test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth
	|aPortfolio aPortfolio2 anAccount|
	
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	aPortfolio2 := Portfolio new.
	aPortfolio2 addAccount: anAccount.
	aPortfolio addAccount: anAccount.
	^[aPortfolio addPortfolio: aPortfolio2.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionAccountInBothPortfolios.] 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:27:30' prior: 50950991!
test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded
	|aPortfolio aPortfolio2|
	
	aPortfolio := Portfolio new.
	aPortfolio2 := Portfolio initializePortfolio.
	aPortfolio addPortfolio: aPortfolio2.
	^[aPortfolio addPortfolio: aPortfolio2.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionPortfolioAlreadyAdded.] 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:27:32' prior: 50952461!
test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded
	|aPortfolio aPortfolio2|
	
	aPortfolio := Portfolio new.
	aPortfolio2 := Portfolio new.
	aPortfolio addPortfolio: aPortfolio2.
	^[aPortfolio addPortfolio: aPortfolio2.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionPortfolioAlreadyAdded.] 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:27:43' prior: 50951255!
test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth
	|aPortfolio aPortfolio2 aPortfolio3|
	
	aPortfolio := Portfolio new.
	aPortfolio2 := Portfolio new.
	aPortfolio3 := Portfolio new.
	aPortfolio2 addPortfolio: aPortfolio3.
	aPortfolio addPortfolio: aPortfolio3.
	^[aPortfolio addPortfolio: aPortfolio2.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionPortfolioInBothPortfolio.] 
	! !

!methodRemoval: Portfolio class #initializePortfolio stamp: 'D S 11/5/2020 20:27:54'!
initializePortfolio

	^self new initialize.!

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 20:27:57'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 20:27:57'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/5/2020 20:27:57'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/5/2020 20:27:57'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/5/2020 20:27:57'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/5/2020 20:27:57'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/5/2020 20:27:57'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/5/2020 20:27:57'!
PASSED!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/5/2020 20:27:57'!
PASSED!
!Portfolio methodsFor: 'accessing' stamp: 'D S 11/5/2020 20:30:41' prior: 50950480!
balance
	
	^(transactionsInPortfolio sum:[:aTransaction| aTransaction netValue ] ifEmpty:[0])! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 20:30:47'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 20:30:47'!
FAILURE!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/5/2020 20:30:47'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/5/2020 20:30:47'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/5/2020 20:30:47'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/5/2020 20:30:47'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/5/2020 20:30:47'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/5/2020 20:30:47'!
PASSED!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/5/2020 20:30:47'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 20:30:47'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'D S 11/5/2020 20:31:52' prior: 50952059!
addAccount: anAccount

	accounts add: anAccount.
	anAccount addPortfolio: self.
	transactionsInPortfolio addAll: (anAccount transactions).! !
!Portfolio methodsFor: 'adding' stamp: 'D S 11/5/2020 20:32:09' prior: 50951202!
addPortfolio: anPortfolio

	(self == anPortfolio) ifTrue:[^self error: self class errorDescriptionCantAddItself].
	(portfolios includes: anPortfolio) ifTrue: [^self error: self class errorDescriptionPortfolioAlreadyAdded].
	((self allAccounts) do: [:anAccount | ((anPortfolio allAccounts) includes: anAccount) ifTrue:[^self error: self class errorDescriptionAccountInBothPortfolios ]]).
	((self allPortfolios) do: [:aPortfolio | ((anPortfolio allPortfolios) includes: aPortfolio) ifTrue:[^self error: self class errorDescriptionPortfolioInBothPortfolio ]]).
	portfolios add: anPortfolio.
	transactionsInPortfolio addAll: anPortfolio transactions.! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 20:32:15'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 20:32:15'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/5/2020 20:32:15'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/5/2020 20:32:15'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/5/2020 20:32:15'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/5/2020 20:32:15'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/5/2020 20:32:15'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/5/2020 20:32:15'!
PASSED!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/5/2020 20:32:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/5/2020 20:32:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/5/2020 20:32:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/5/2020 20:32:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/5/2020 20:32:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/5/2020 20:32:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/5/2020 20:32:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/5/2020 20:32:18'!
PASSED!

----STARTUP---- (5 November 2020 20:33:09) as /home/dn-01/Escritorio/Ingenieria en Software I/CuisUniversity/CuisUniversity-4383.image!

!Portfolio methodsFor: 'adding' stamp: 'D S 11/5/2020 20:34:38' prior: 50951202!
addPortfolio: anPortfolio

	(self == anPortfolio) ifTrue:[self error: self class errorDescriptionCantAddItself].
	(portfolios includes: anPortfolio) ifTrue: [self error: self class errorDescriptionPortfolioAlreadyAdded].
	((self allAccounts) do: [:anAccount | ((anPortfolio allAccounts) includes: anAccount) ifTrue:[self error: self class errorDescriptionAccountInBothPortfolios ]]).
	((self allPortfolios) do: [:aPortfolio | ((anPortfolio allPortfolios) includes: aPortfolio) ifTrue:[self error: self class errorDescriptionPortfolioInBothPortfolio ]]).
	portfolios add: anPortfolio.! !
!Portfolio methodsFor: 'adding' stamp: 'D S 11/5/2020 20:34:59'!
checkNotSamePortfolios: anPortfolio

	^ (self == anPortfolio) ifTrue:[self error: self class errorDescriptionCantAddItself]! !
!Portfolio methodsFor: 'adding' stamp: 'D S 11/5/2020 20:34:59' prior: 50951873!
addPortfolio: anPortfolio

	self checkNotSamePortfolios: anPortfolio.
	(portfolios includes: anPortfolio) ifTrue: [self error: self class errorDescriptionPortfolioAlreadyAdded].
	((self allAccounts) do: [:anAccount | ((anPortfolio allAccounts) includes: anAccount) ifTrue:[self error: self class errorDescriptionAccountInBothPortfolios ]]).
	((self allPortfolios) do: [:aPortfolio | ((anPortfolio allPortfolios) includes: aPortfolio) ifTrue:[self error: self class errorDescriptionPortfolioInBothPortfolio ]]).
	portfolios add: anPortfolio.! !
!Portfolio methodsFor: 'adding' stamp: 'D S 11/5/2020 20:35:32'!
checkPortfolioDontHaveThePortfolio: anPortfolio

	^ (portfolios includes: anPortfolio) ifTrue: [self error: self class errorDescriptionPortfolioAlreadyAdded]! !
!Portfolio methodsFor: 'adding' stamp: 'D S 11/5/2020 20:35:32' prior: 50951901!
addPortfolio: anPortfolio

	self checkNotSamePortfolios: anPortfolio.
	self checkPortfolioDontHaveThePortfolio: anPortfolio.
	((self allAccounts) do: [:anAccount | ((anPortfolio allAccounts) includes: anAccount) ifTrue:[self error: self class errorDescriptionAccountInBothPortfolios ]]).
	((self allPortfolios) do: [:aPortfolio | ((anPortfolio allPortfolios) includes: aPortfolio) ifTrue:[self error: self class errorDescriptionPortfolioInBothPortfolio ]]).
	portfolios add: anPortfolio.! !
!Portfolio methodsFor: 'adding' stamp: 'D S 11/5/2020 20:36:15'!
checkDoesntHaveAnAccountIncludedIn: anPortfolio

	^ (self allAccounts) do: [:anAccount | ((anPortfolio allAccounts) includes: anAccount) ifTrue:[self error: self class errorDescriptionAccountInBothPortfolios ]]! !
!Portfolio methodsFor: 'adding' stamp: 'D S 11/5/2020 20:36:15' prior: 50951929!
addPortfolio: anPortfolio

	self checkNotSamePortfolios: anPortfolio.
	self checkPortfolioDontHaveThePortfolio: anPortfolio.
	(self checkDoesntHaveAnAccountIncludedIn: anPortfolio).
	((self allPortfolios) do: [:aPortfolio | ((anPortfolio allPortfolios) includes: aPortfolio) ifTrue:[self error: self class errorDescriptionPortfolioInBothPortfolio ]]).
	portfolios add: anPortfolio.! !
!Portfolio methodsFor: 'adding' stamp: 'D S 11/5/2020 20:36:34'!
checkDoesntHaveAnAccountIncludedInPortfolio: anPortfolio

	^ (self allAccounts) do: [:anAccount | ((anPortfolio allAccounts) includes: anAccount) ifTrue:[self error: self class errorDescriptionAccountInBothPortfolios ]]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:36:34' prior: 50951957!
addPortfolio: anPortfolio

	self checkNotSamePortfolios: anPortfolio.
	self checkPortfolioDontHaveThePortfolio: anPortfolio.
	(self checkDoesntHaveAnAccountIncludedInPortfolio: anPortfolio).
	((self allPortfolios) do: [:aPortfolio | ((anPortfolio allPortfolios) includes: aPortfolio) ifTrue:[self error: self class errorDescriptionPortfolioInBothPortfolio ]]).
	portfolios add: anPortfolio.! !

!methodRemoval: Portfolio #checkDoesntHaveAnAccountIncludedIn: stamp: 'D S 11/5/2020 20:36:34'!
checkDoesntHaveAnAccountIncludedIn: anPortfolio

	^ (self allAccounts) do: [:anAccount | ((anPortfolio allAccounts) includes: anAccount) ifTrue:[self error: self class errorDescriptionAccountInBothPortfolios ]]!
!Portfolio methodsFor: 'adding' stamp: 'D S 11/5/2020 20:36:55'!
checkDoesntHaveAnPortfolioIncludedInPortfolio: anPortfolio

	^ (self allPortfolios) do: [:aPortfolio | ((anPortfolio allPortfolios) includes: aPortfolio) ifTrue:[self error: self class errorDescriptionPortfolioInBothPortfolio ]]! !
!Portfolio methodsFor: 'adding' stamp: 'D S 11/5/2020 20:36:55' prior: 50951982!
addPortfolio: anPortfolio

	self checkNotSamePortfolios: anPortfolio.
	self checkPortfolioDontHaveThePortfolio: anPortfolio.
	(self checkDoesntHaveAnAccountIncludedInPortfolio: anPortfolio).
	(self checkDoesntHaveAnPortfolioIncludedInPortfolio: anPortfolio).
	portfolios add: anPortfolio.! !

!classRemoval: #ReceptiveAccountV2 stamp: 'D S 11/5/2020 20:40:45'!
Object subclass: #ReceptiveAccountV2
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

!classRemoval: #PortfolioV2 stamp: 'D S 11/5/2020 20:40:45'!
Object subclass: #PortfolioV2
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

!classRemoval: #WithdrawV2 stamp: 'D S 11/5/2020 20:40:46'!
AccountTransactionV2 subclass: #WithdrawV2
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

!classRemoval: #DepositV2 stamp: 'D S 11/5/2020 20:40:47'!
AccountTransactionV2 subclass: #DepositV2
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

!classRemoval: #AccountTransactionV2 stamp: 'D S 11/5/2020 20:40:47'!
Object subclass: #AccountTransactionV2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

!classRemoval: #ReceptiveAccountTestV2 stamp: 'D S 11/5/2020 20:40:48'!
TestCase subclass: #ReceptiveAccountTestV2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

!classRemoval: #PortfolioTestV2 stamp: 'D S 11/5/2020 20:40:49'!
TestCase subclass: #PortfolioTestV2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 20:40:53'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 20:40:53'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/5/2020 20:40:53'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/5/2020 20:40:53'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/5/2020 20:40:53'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/5/2020 20:40:53'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/5/2020 20:40:53'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/5/2020 20:40:53'!
PASSED!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/5/2020 20:40:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/5/2020 20:40:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/5/2020 20:40:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/5/2020 20:40:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/5/2020 20:40:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/5/2020 20:40:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/5/2020 20:40:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/5/2020 20:40:57'!
PASSED!

----QUIT----(5 November 2020 20:41:01) CuisUniversity-4383.image priorSource: 19846869!

----STARTUP---- (5 November 2020 20:43:36) as /home/dn-01/Escritorio/Ingenieria en Software I/CuisUniversity/CuisUniversity-4383.image!

!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:46:26'!
test10
	|aPortfolio aPortfolio2 anAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	aPortfolio2 := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	aPortfolio2 addAccount: anAccount.
	aPortfolio addPortfolio: aPortfolio2.
	
	^[aPortfolio addAccount: anAccount.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionAccountAlreadyInPortfolio.] 
	! !

!testRun: #PortfolioTest #test10 stamp: 'D S 11/5/2020 20:46:36'!
FAILURE!

!testRun: #PortfolioTest #test10 stamp: 'D S 11/5/2020 20:46:36'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'D S 11/5/2020 20:47:22' prior: 50950488!
addAccount: anAccount

	(self allAccounts includes: anAccount) ifTrue:[self error: self class errorDescriptionAccountAlreadyInPortfolio].
	accounts add: anAccount.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:47:41'!
errorDescriptionAccountAlreadyInPortfolio

	^'The account already in portfolio'.! !

!testRun: #PortfolioTest #test10 stamp: 'D S 11/5/2020 20:47:49'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:48:18'!
test11RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded
	|aPortfolio aPortfolio2 anAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	aPortfolio2 := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	aPortfolio2 addAccount: anAccount.
	aPortfolio addPortfolio: aPortfolio2.
	
	^[aPortfolio addAccount: anAccount.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionAccountAlreadyInPortfolio.] 
	! !

!methodRemoval: PortfolioTest #test10 stamp: 'D S 11/5/2020 20:48:25'!
test10
	|aPortfolio aPortfolio2 anAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	aPortfolio2 := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	aPortfolio2 addAccount: anAccount.
	aPortfolio addPortfolio: aPortfolio2.
	
	^[aPortfolio addAccount: anAccount.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionAccountAlreadyInPortfolio.] 
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:48:30'!
test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded
	|aPortfolio aPortfolio2 anAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	aPortfolio2 := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	aPortfolio2 addAccount: anAccount.
	aPortfolio addPortfolio: aPortfolio2.
	
	^[aPortfolio addAccount: anAccount.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionAccountAlreadyInPortfolio.] 
	! !

!methodRemoval: PortfolioTest #test11RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/5/2020 20:48:30'!
test11RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded
	|aPortfolio aPortfolio2 anAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	aPortfolio2 := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	aPortfolio2 addAccount: anAccount.
	aPortfolio addPortfolio: aPortfolio2.
	
	^[aPortfolio addAccount: anAccount.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionAccountAlreadyInPortfolio.] 
	!

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 20:48:34'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 20:48:34'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/5/2020 20:48:34'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/5/2020 20:48:34'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/5/2020 20:48:34'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/5/2020 20:48:34'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/5/2020 20:48:34'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/5/2020 20:48:34'!
PASSED!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/5/2020 20:48:34'!
PASSED!

!testRun: #PortfolioTest #test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/5/2020 20:48:34'!
PASSED!
!Portfolio methodsFor: 'accessing --Private--' stamp: 'D S 11/5/2020 20:51:28' prior: 50950562!
allAccounts

	|allAccounts|
	allAccounts := OrderedCollection new.
	allAccounts addAll: accounts.
	portfolios do: [:anPortfolio | allAccounts addAll: (anPortfolio allAccounts)].
	allAccounts! !
!Portfolio methodsFor: 'accessing --Private--' stamp: 'D S 11/5/2020 20:51:47'!
obtain

	|allAccounts|
	allAccounts := OrderedCollection new.
	allAccounts addAll: accounts.
	portfolios do: [:anPortfolio | allAccounts addAll: (anPortfolio allAccounts)].
	allAccounts! !
!Portfolio methodsFor: 'accessing --Private--' stamp: 'D S 11/5/2020 20:51:47' prior: 50952289!
allAccounts

	self obtain! !
!Portfolio methodsFor: 'accessing --Private--' stamp: 'D S 11/5/2020 20:52:43'!
obtain: anMessage

	|allAccounts|
	allAccounts := OrderedCollection new.
	allAccounts addAll: accounts.
	portfolios do: [:anPortfolio | allAccounts addAll: (anPortfolio allAccounts)].
	allAccounts! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:52:43' prior: 50952307!
allAccounts

	self obtain: allAccounts! !

!methodRemoval: Portfolio #obtain stamp: 'D S 11/5/2020 20:52:43'!
obtain

	|allAccounts|
	allAccounts := OrderedCollection new.
	allAccounts addAll: accounts.
	portfolios do: [:anPortfolio | allAccounts addAll: (anPortfolio allAccounts)].
	allAccounts!
!Portfolio methodsFor: 'accessing --Private--' stamp: 'D S 11/5/2020 20:51:28' prior: 50952321!
allAccounts

	|allAccounts|
	allAccounts := OrderedCollection new.
	allAccounts addAll: accounts.
	portfolios do: [:anPortfolio | allAccounts addAll: (anPortfolio allAccounts)].
	allAccounts! !

!methodRemoval: Portfolio #obtain: stamp: 'D S 11/5/2020 20:53:30'!
obtain: anMessage

	|allAccounts|
	allAccounts := OrderedCollection new.
	allAccounts addAll: accounts.
	portfolios do: [:anPortfolio | allAccounts addAll: (anPortfolio allAccounts)].
	allAccounts!
!Portfolio methodsFor: 'adding' stamp: 'D S 11/5/2020 20:59:09'!
checkPortfolioDontHaveTheAccount: anAccount

	^ (self allAccounts includes: anAccount) ifTrue:[self error: self class errorDescriptionAccountAlreadyInPortfolio]! !
!Portfolio methodsFor: 'adding' stamp: 'D S 11/5/2020 20:59:09' prior: 50952164!
addAccount: anAccount

	self checkPortfolioDontHaveTheAccount: anAccount.
	accounts add: anAccount.! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 20:59:32'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 20:59:32'!
ERROR!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/5/2020 20:59:32'!
ERROR!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/5/2020 20:59:32'!
ERROR!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/5/2020 20:59:32'!
ERROR!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/5/2020 20:59:32'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/5/2020 20:59:32'!
ERROR!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/5/2020 20:59:32'!
ERROR!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/5/2020 20:59:32'!
ERROR!

!testRun: #PortfolioTest #test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/5/2020 20:59:32'!
ERROR!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 20:59:47'!
ERROR!
!Portfolio methodsFor: 'testing --Private--' stamp: 'D S 11/5/2020 21:00:06' prior: 50952351!
checkPortfolioDontHaveTheAccount: anAccount

	^ ((self allAccounts) includes: anAccount) ifTrue:[self error: self class errorDescriptionAccountAlreadyInPortfolio]! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 21:00:09'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 21:00:09'!
ERROR!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/5/2020 21:00:09'!
ERROR!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/5/2020 21:00:09'!
ERROR!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/5/2020 21:00:09'!
ERROR!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/5/2020 21:00:09'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/5/2020 21:00:09'!
ERROR!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/5/2020 21:00:09'!
ERROR!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/5/2020 21:00:09'!
ERROR!

!testRun: #PortfolioTest #test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/5/2020 21:00:09'!
ERROR!
!Portfolio methodsFor: 'accessing --Private--' stamp: 'D S 11/5/2020 21:00:18' prior: 50952334!
allAccounts

	|allAccounts|
	allAccounts := OrderedCollection new.
	allAccounts addAll: accounts.
	portfolios do: [:anPortfolio | allAccounts addAll: (anPortfolio allAccounts)].
	^allAccounts! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 21:00:21'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 21:00:21'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/5/2020 21:00:21'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/5/2020 21:00:21'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/5/2020 21:00:21'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/5/2020 21:00:21'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/5/2020 21:00:21'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/5/2020 21:00:21'!
PASSED!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/5/2020 21:00:21'!
PASSED!

!testRun: #PortfolioTest #test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/5/2020 21:00:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/5/2020 21:00:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/5/2020 21:00:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/5/2020 21:00:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/5/2020 21:00:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/5/2020 21:00:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/5/2020 21:00:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/5/2020 21:00:25'!
PASSED!

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 21:00:39'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 21:00:39'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/5/2020 21:00:39'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/5/2020 21:00:39'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/5/2020 21:00:39'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/5/2020 21:00:39'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/5/2020 21:00:39'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/5/2020 21:00:39'!
PASSED!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/5/2020 21:00:39'!
PASSED!

!testRun: #PortfolioTest #test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/5/2020 21:00:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/5/2020 21:00:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/5/2020 21:00:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/5/2020 21:00:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/5/2020 21:00:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/5/2020 21:00:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/5/2020 21:00:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/5/2020 21:00:39'!
PASSED!

----End fileIn of /home/dn-01/Escritorio/Ingenieria en Software I/CuisUniversity/Portfolio-EjercicioV2.st----!
!Portfolio methodsFor: 'accessing' stamp: 'D S 11/5/2020 21:02:22' prior: 50952974!
hasRegistered: anTransaction

	transactionsInPortfolio includes: anTransaction.! !
!Portfolio methodsFor: 'accessing' stamp: 'D S 11/5/2020 21:02:58' prior: 50953121!
hasRegistered: anTransaction

	^transactionsInPortfolio includes: anTransaction.! !
!Portfolio methodsFor: 'adding' stamp: 'D S 11/5/2020 21:04:33' prior: 50953003!
addPortfolio: anPortfolio

	self checkNotSamePortfolios: anPortfolio.
	self checkDoesntHaveAnPortfolioIncludedInPortfolio: anPortfolio.	
	self checkDoesntHaveAnAccountIncludedInPortfolio: anPortfolio.
	self checkDoesntHaveAnPortfolioIncludedInPortfolio: anPortfolio.
	portfolios add: anPortfolio.
	transactionsInPortfolio addAll: anPortfolio transactions.! !
!Portfolio methodsFor: 'adding' stamp: 'D S 11/5/2020 21:04:47' prior: 50952996!
addAccount: anAccount

	self checkPortfolioDontHaveTheAccount: anAccount.
	accounts add: anAccount.
	anAccount addPortfolio: self.
	transactionsInPortfolio addAll: (anAccount transactions).! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 21:04:56'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 21:04:56'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/5/2020 21:04:56'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/5/2020 21:04:56'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/5/2020 21:04:56'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/5/2020 21:04:56'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/5/2020 21:04:56'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/5/2020 21:04:56'!
FAILURE!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/5/2020 21:04:56'!
PASSED!

!testRun: #PortfolioTest #test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/5/2020 21:04:56'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/5/2020 21:04:56'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'D S 11/5/2020 21:05:34' prior: 50953133!
addPortfolio: anPortfolio

	self checkNotSamePortfolios: anPortfolio.
	self checkDoesntHaveAnPortfolioIncludedInPortfolio: anPortfolio.	
	self checkDoesntHaveAnAccountIncludedInPortfolio: anPortfolio.
	self checkPortfolioDontHaveThePortfolio: anPortfolio.
	portfolios add: anPortfolio.
	transactionsInPortfolio addAll: anPortfolio transactions.! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 21:05:37'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 21:05:37'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/5/2020 21:05:37'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/5/2020 21:05:37'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/5/2020 21:05:37'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/5/2020 21:05:37'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/5/2020 21:05:37'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/5/2020 21:05:37'!
PASSED!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/5/2020 21:05:37'!
PASSED!

!testRun: #PortfolioTest #test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/5/2020 21:05:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/5/2020 21:05:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/5/2020 21:05:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/5/2020 21:05:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/5/2020 21:05:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/5/2020 21:05:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/5/2020 21:05:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/5/2020 21:05:41'!
PASSED!

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 21:07:00'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 21:07:00'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/5/2020 21:07:00'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/5/2020 21:07:00'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/5/2020 21:07:00'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/5/2020 21:07:00'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/5/2020 21:07:00'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/5/2020 21:07:00'!
PASSED!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/5/2020 21:07:00'!
PASSED!

!testRun: #PortfolioTest #test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/5/2020 21:07:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/5/2020 21:07:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/5/2020 21:07:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/5/2020 21:07:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/5/2020 21:07:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/5/2020 21:07:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/5/2020 21:07:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/5/2020 21:07:03'!
PASSED!

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 21:07:06'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 21:07:06'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/5/2020 21:07:06'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/5/2020 21:07:06'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/5/2020 21:07:06'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/5/2020 21:07:06'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/5/2020 21:07:06'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/5/2020 21:07:06'!
PASSED!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/5/2020 21:07:06'!
PASSED!

!testRun: #PortfolioTest #test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/5/2020 21:07:06'!
PASSED!

----STARTUP---- (5 November 2020 21:10:41) as /home/dn-01/Escritorio/Ingenieria en Software I/CuisUniversity/CuisUniversity-4383.image!

!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:46:26'!
test10
	|aPortfolio aPortfolio2 anAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	aPortfolio2 := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	aPortfolio2 addAccount: anAccount.
	aPortfolio addPortfolio: aPortfolio2.
	
	^[aPortfolio addAccount: anAccount.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionAccountAlreadyInPortfolio.] 
	! !
!Portfolio methodsFor: 'adding' stamp: 'D S 11/5/2020 20:47:22' prior: 50950488!
addAccount: anAccount

	(self allAccounts includes: anAccount) ifTrue:[self error: self class errorDescriptionAccountAlreadyInPortfolio].
	accounts add: anAccount.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:47:41'!
errorDescriptionAccountAlreadyInPortfolio

	^'The account already in portfolio'.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:48:18'!
test11RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded
	|aPortfolio aPortfolio2 anAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	aPortfolio2 := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	aPortfolio2 addAccount: anAccount.
	aPortfolio addPortfolio: aPortfolio2.
	
	^[aPortfolio addAccount: anAccount.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionAccountAlreadyInPortfolio.] 
	! !

!methodRemoval: PortfolioTest #test10 stamp: 'D S 11/5/2020 21:10:44'!
test10
	|aPortfolio aPortfolio2 anAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	aPortfolio2 := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	aPortfolio2 addAccount: anAccount.
	aPortfolio addPortfolio: aPortfolio2.
	
	^[aPortfolio addAccount: anAccount.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionAccountAlreadyInPortfolio.] 
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:48:30'!
test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded
	|aPortfolio aPortfolio2 anAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	aPortfolio2 := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	aPortfolio2 addAccount: anAccount.
	aPortfolio addPortfolio: aPortfolio2.
	
	^[aPortfolio addAccount: anAccount.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionAccountAlreadyInPortfolio.] 
	! !

!methodRemoval: PortfolioTest #test11RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/5/2020 21:10:44'!
test11RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded
	|aPortfolio aPortfolio2 anAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	aPortfolio2 := Portfolio initializePortfolio.
	anAccount := ReceptiveAccount new.
	aPortfolio2 addAccount: anAccount.
	aPortfolio addPortfolio: aPortfolio2.
	
	^[aPortfolio addAccount: anAccount.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionAccountAlreadyInPortfolio.] 
	!
!Portfolio methodsFor: 'accessing --Private--' stamp: 'D S 11/5/2020 20:51:28' prior: 50950562!
allAccounts

	|allAccounts|
	allAccounts := OrderedCollection new.
	allAccounts addAll: accounts.
	portfolios do: [:anPortfolio | allAccounts addAll: (anPortfolio allAccounts)].
	allAccounts! !
!Portfolio methodsFor: 'accessing --Private--' stamp: 'D S 11/5/2020 20:51:47'!
obtain

	|allAccounts|
	allAccounts := OrderedCollection new.
	allAccounts addAll: accounts.
	portfolios do: [:anPortfolio | allAccounts addAll: (anPortfolio allAccounts)].
	allAccounts! !
!Portfolio methodsFor: 'accessing --Private--' stamp: 'D S 11/5/2020 20:51:47' prior: 50953483!
allAccounts

	self obtain! !
!Portfolio methodsFor: 'accessing --Private--' stamp: 'D S 11/5/2020 20:52:43'!
obtain: anMessage

	|allAccounts|
	allAccounts := OrderedCollection new.
	allAccounts addAll: accounts.
	portfolios do: [:anPortfolio | allAccounts addAll: (anPortfolio allAccounts)].
	allAccounts! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:52:43' prior: 50953501!
allAccounts

	self obtain: allAccounts! !

!methodRemoval: Portfolio #obtain stamp: 'D S 11/5/2020 21:10:44'!
obtain

	|allAccounts|
	allAccounts := OrderedCollection new.
	allAccounts addAll: accounts.
	portfolios do: [:anPortfolio | allAccounts addAll: (anPortfolio allAccounts)].
	allAccounts!
!Portfolio methodsFor: 'accessing --Private--' stamp: 'D S 11/5/2020 20:51:28' prior: 50953515!
allAccounts

	|allAccounts|
	allAccounts := OrderedCollection new.
	allAccounts addAll: accounts.
	portfolios do: [:anPortfolio | allAccounts addAll: (anPortfolio allAccounts)].
	allAccounts! !

!methodRemoval: Portfolio #obtain: stamp: 'D S 11/5/2020 21:10:44'!
obtain: anMessage

	|allAccounts|
	allAccounts := OrderedCollection new.
	allAccounts addAll: accounts.
	portfolios do: [:anPortfolio | allAccounts addAll: (anPortfolio allAccounts)].
	allAccounts!
!Portfolio methodsFor: 'adding' stamp: 'D S 11/5/2020 20:59:09'!
checkPortfolioDontHaveTheAccount: anAccount

	^ (self allAccounts includes: anAccount) ifTrue:[self error: self class errorDescriptionAccountAlreadyInPortfolio]! !
!Portfolio methodsFor: 'adding' stamp: 'D S 11/5/2020 20:59:09' prior: 50953397!
addAccount: anAccount

	self checkPortfolioDontHaveTheAccount: anAccount.
	accounts add: anAccount.! !
!Portfolio methodsFor: 'testing --Private--' stamp: 'D S 11/5/2020 21:00:06' prior: 50953545!
checkPortfolioDontHaveTheAccount: anAccount

	^ ((self allAccounts) includes: anAccount) ifTrue:[self error: self class errorDescriptionAccountAlreadyInPortfolio]! !
!Portfolio methodsFor: 'accessing --Private--' stamp: 'D S 11/5/2020 21:00:18' prior: 50953528!
allAccounts

	|allAccounts|
	allAccounts := OrderedCollection new.
	allAccounts addAll: accounts.
	portfolios do: [:anPortfolio | allAccounts addAll: (anPortfolio allAccounts)].
	^allAccounts! !

!classDefinition: #PortfolioTest category: 'Portfolio-EjercicioV2' stamp: 'D S 11/5/2020 21:10:44'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

!classDefinition: #PortfolioTest category: 'Portfolio-EjercicioV2' stamp: 'D S 11/5/2020 21:10:44'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/2/2020 20:50:36' prior: 50948759!
test01initializeWithTotalBalance0
	|aPortfolio|
	
	aPortfolio := Portfolio new.
	self assert: 0 equals: aPortfolio balance. 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:26:58' prior: 50949999!
test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio
	|aPortfolio anAccount anAccount2|
	
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Deposit register: 500 on: anAccount.
	Deposit register: 200 on: anAccount2.
	aPortfolio addAccount: anAccount.
	aPortfolio addAccount: anAccount2.
	
	self assert: 700 equals: aPortfolio balance. 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:27:06' prior: 50950844!
test03HasRegisterFoundTransactionCorrectly
	|aPortfolio anAccount anDeposit|
	
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	anDeposit := Deposit register: 500 on: anAccount.
	aPortfolio addAccount: anAccount.
	
	self assert: (aPortfolio hasRegistered: anDeposit). 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:27:09' prior: 50950870!
test04HasRegisterDontFoundTransactionsOutOfPortfolio
	|aPortfolio anAccount anAccountNotInPortfolio|
	
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	Deposit register: 500 on: anAccount.
	anAccountNotInPortfolio := ReceptiveAccount new.
	aPortfolio addAccount: anAccount.
	
	self deny: (aPortfolio hasRegistered: (Deposit register: 200 on: anAccountNotInPortfolio)). 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:27:13' prior: 50950902!
test05TransactionsObtainAllTransactionsInAccounts
	|aPortfolio anAccount anSecondAccount|
	
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	anSecondAccount := ReceptiveAccount new.
	aPortfolio addAccount: anAccount.
	aPortfolio addAccount: anSecondAccount.
	
	self assert: (OrderedCollection with: (Deposit register: 500 on: anAccount) with: (Deposit register: 200 on: anSecondAccount)) equals: aPortfolio transactions 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:27:18' prior: 50950937!
test06RaiseErrorWhenTryingAddPortfolioToItself
	|aPortfolio |
	
	aPortfolio := Portfolio new.
	
	^[aPortfolio addPortfolio: aPortfolio.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionCantAddItself.] 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:27:26' prior: 50950958!
test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth
	|aPortfolio aPortfolio2 anAccount|
	
	aPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	aPortfolio2 := Portfolio new.
	aPortfolio2 addAccount: anAccount.
	aPortfolio addAccount: anAccount.
	^[aPortfolio addPortfolio: aPortfolio2.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionAccountInBothPortfolios.] 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:27:32' prior: 50950991!
test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded
	|aPortfolio aPortfolio2|
	
	aPortfolio := Portfolio new.
	aPortfolio2 := Portfolio new.
	aPortfolio addPortfolio: aPortfolio2.
	^[aPortfolio addPortfolio: aPortfolio2.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionPortfolioAlreadyAdded.] 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 20:27:43' prior: 50951255!
test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth
	|aPortfolio aPortfolio2 aPortfolio3|
	
	aPortfolio := Portfolio new.
	aPortfolio2 := Portfolio new.
	aPortfolio3 := Portfolio new.
	aPortfolio2 addPortfolio: aPortfolio3.
	aPortfolio addPortfolio: aPortfolio3.
	^[aPortfolio addPortfolio: aPortfolio2.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionPortfolioInBothPortfolio.] 
	! !

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-EjercicioV2' stamp: 'D S 11/5/2020 21:10:44'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-EjercicioV2' stamp: 'D S 11/5/2020 21:10:44'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:44' prior: 50947455!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:48' prior: 50947462!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:52' prior: 50947471!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32' prior: 50947481!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46' prior: 50947491!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:14:15' prior: 50947504!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw account |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:14:01' prior: 50947516!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 50 on: account1.
		
	self assert: 1 equals: account1 transactions size.
	self assert: (account1 transactions includes: deposit1).
! !

!classDefinition: #AccountTransaction category: 'Portfolio-EjercicioV2' stamp: 'D S 11/5/2020 21:10:44'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

!classDefinition: #AccountTransaction category: 'Portfolio-EjercicioV2' stamp: 'D S 11/5/2020 21:10:44'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' prior: 50947540 overrides: 16881508!
value 

	self subclassResponsibility ! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-EjercicioV2' stamp: 'D S 11/5/2020 21:10:44'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-EjercicioV2' stamp: 'D S 11/5/2020 21:10:44'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/17/2019 03:22:00' prior: 50947844!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-EjercicioV2' stamp: 'D S 11/5/2020 21:10:44'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

!classDefinition: #Deposit category: 'Portfolio-EjercicioV2' stamp: 'D S 11/5/2020 21:10:44'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45' prior: 50947573!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'D S 11/2/2020 20:30:17' prior: 50948420!
netValue

	^ value! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50947578 overrides: 50953832!
value

	^ value! !

!classDefinition: 'Deposit class' category: 'Portfolio-EjercicioV2' stamp: 'D S 11/5/2020 21:10:44'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-EjercicioV2' stamp: 'D S 11/5/2020 21:10:44'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50947589!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Withdraw category: 'Portfolio-EjercicioV2' stamp: 'D S 11/5/2020 21:10:44'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

!classDefinition: #Withdraw category: 'Portfolio-EjercicioV2' stamp: 'D S 11/5/2020 21:10:44'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46' prior: 50947606!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'D S 11/2/2020 20:30:11' prior: 50948417!
netValue

	^ value * (-1)! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50947611 overrides: 50953832!
value

	^ value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-EjercicioV2' stamp: 'D S 11/5/2020 21:10:45'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-EjercicioV2' stamp: 'D S 11/5/2020 21:10:45'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50947623!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Portfolio category: 'Portfolio-EjercicioV2' stamp: 'D S 11/5/2020 21:10:45'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios transactionsInPortfolio insidePortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

!classDefinition: #Portfolio category: 'Portfolio-EjercicioV2' stamp: 'D S 11/5/2020 21:10:45'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios transactionsInPortfolio insidePortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!
!Portfolio methodsFor: 'accessing --Private--' stamp: 'D S 11/5/2020 19:17:18' prior: 50953569!
allAccounts

	|allAccounts|
	allAccounts := OrderedCollection new.
	allAccounts addAll: accounts.
	portfolios do: [:anPortfolio | allAccounts addAll: (anPortfolio allAccounts)].
	^allAccounts! !
!Portfolio methodsFor: 'accessing --Private--' stamp: 'D S 11/5/2020 19:44:23' prior: 50951063!
allPortfolios

	|allPortfolios|
	allPortfolios := OrderedCollection new.
	allPortfolios addAll: portfolios.
	portfolios do: [:anPortfolio | allPortfolios addAll: (anPortfolio allPortfolios)].
	^allPortfolios! !
!Portfolio methodsFor: 'accessing' stamp: 'D S 11/5/2020 20:30:41' prior: 50950480!
balance
	
	^(transactionsInPortfolio sum:[:aTransaction| aTransaction netValue ] ifEmpty:[0])! !
!Portfolio methodsFor: 'accessing' stamp: 'D S 11/5/2020 19:16:59' prior: 50950500!
hasRegistered: anTransaction

	accounts do:[:anAccount | (anAccount hasRegistered: anTransaction) ifTrue: [^true]].
	portfolios do:[:aPortfolio | (aPortfolio hasRegistered: anTransaction) ifTrue: [^true]].
	^false! !
!Portfolio methodsFor: 'accessing' stamp: 'D S 11/5/2020 20:22:12' prior: 50950510!
transactions

	^transactionsInPortfolio ! !
!Portfolio methodsFor: 'adding --Private--' stamp: 'D S 11/5/2020 20:21:54'!
addTransaction: aTransaction

	transactionsInPortfolio add: aTransaction.
	insidePortfolio do: [:aPortfolio| aPortfolio addTransaction: aTransaction]

	! !
!Portfolio methodsFor: 'adding' stamp: 'D S 11/5/2020 20:31:52' prior: 50953553!
addAccount: anAccount

	accounts add: anAccount.
	anAccount addPortfolio: self.
	transactionsInPortfolio addAll: (anAccount transactions).! !
!Portfolio methodsFor: 'adding' stamp: 'D S 11/5/2020 20:32:09' prior: 50952016!
addPortfolio: anPortfolio

	(self == anPortfolio) ifTrue:[^self error: self class errorDescriptionCantAddItself].
	(portfolios includes: anPortfolio) ifTrue: [^self error: self class errorDescriptionPortfolioAlreadyAdded].
	((self allAccounts) do: [:anAccount | ((anPortfolio allAccounts) includes: anAccount) ifTrue:[^self error: self class errorDescriptionAccountInBothPortfolios ]]).
	((self allPortfolios) do: [:aPortfolio | ((anPortfolio allPortfolios) includes: aPortfolio) ifTrue:[^self error: self class errorDescriptionPortfolioInBothPortfolio ]]).
	portfolios add: anPortfolio.
	transactionsInPortfolio addAll: anPortfolio transactions.! !
!Portfolio methodsFor: 'initialize' stamp: 'D S 11/5/2020 20:25:41' prior: 50950494 overrides: 16896425!
initialize
	
	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.
	transactionsInPortfolio := OrderedCollection new.
	insidePortfolio := OrderedCollection new.! !

!classDefinition: 'Portfolio class' category: 'Portfolio-EjercicioV2' stamp: 'D S 11/5/2020 21:10:45'!
Portfolio class
	instanceVariableNames: ''!

!classDefinition: 'Portfolio class' category: 'Portfolio-EjercicioV2' stamp: 'D S 11/5/2020 21:10:45'!
Portfolio class
	instanceVariableNames: ''!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 18:57:50' prior: 50950140!
errorDescriptionAccountInBothPortfolios

	^'Unable to add portfolio: anAccount is in both'.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 18:36:23' prior: 50949919!
errorDescriptionCantAddItself

	^'You cant add the portfolio to itself'.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 19:21:59' prior: 50950609!
errorDescriptionPortfolioAlreadyAdded

	^'The portfolio has been already added'.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 19:41:55' prior: 50951036!
errorDescriptionPortfolioInBothPortfolio

	^'Unable to add portfolio: a Portfolio is in both'.! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-EjercicioV2' stamp: 'D S 11/5/2020 21:10:45'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-EjercicioV2' stamp: 'D S 11/5/2020 21:10:45'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-EjercicioV2'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'D S 11/5/2020 20:23:57' prior: 50947641 overrides: 16896425!
initialize

	transactions := OrderedCollection new.
	portfolios := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/5/2020 20:25:11' prior: 50947646!
register: aTransaction

	portfolios do: [:aPortfolio | aPortfolio addTransaction: aTransaction].
	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50947651!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'D S 11/2/2020 20:29:56' prior: 50948412!
balance

	^transactions sum: [ :aTransaction | aTransaction netValue] 
	ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'D S 11/5/2020 20:22:59' prior: 50947660!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
	! !
!ReceptiveAccount methodsFor: 'adding --Private--' stamp: 'D S 11/5/2020 20:19:09'!
addPortfolio: aPortfolio

	portfolios add: aPortfolio! !
!Portfolio methodsFor: 'accessing' stamp: 'D S 11/5/2020 21:02:22' prior: 50953985!
hasRegistered: anTransaction

	transactionsInPortfolio includes: anTransaction.! !
!Portfolio methodsFor: 'accessing' stamp: 'D S 11/5/2020 21:02:58' prior: 50954134!
hasRegistered: anTransaction

	^transactionsInPortfolio includes: anTransaction.! !
!Portfolio methodsFor: 'adding' stamp: 'D S 11/5/2020 21:04:33' prior: 50954014!
addPortfolio: anPortfolio

	self checkNotSamePortfolios: anPortfolio.
	self checkDoesntHaveAnPortfolioIncludedInPortfolio: anPortfolio.	
	self checkDoesntHaveAnAccountIncludedInPortfolio: anPortfolio.
	self checkDoesntHaveAnPortfolioIncludedInPortfolio: anPortfolio.
	portfolios add: anPortfolio.
	transactionsInPortfolio addAll: anPortfolio transactions.! !
!Portfolio methodsFor: 'adding' stamp: 'D S 11/5/2020 21:04:47' prior: 50954007!
addAccount: anAccount

	self checkPortfolioDontHaveTheAccount: anAccount.
	accounts add: anAccount.
	anAccount addPortfolio: self.
	transactionsInPortfolio addAll: (anAccount transactions).! !
!Portfolio methodsFor: 'adding' stamp: 'D S 11/5/2020 21:05:34' prior: 50954146!
addPortfolio: anPortfolio

	self checkNotSamePortfolios: anPortfolio.
	self checkDoesntHaveAnPortfolioIncludedInPortfolio: anPortfolio.	
	self checkDoesntHaveAnAccountIncludedInPortfolio: anPortfolio.
	self checkPortfolioDontHaveThePortfolio: anPortfolio.
	portfolios add: anPortfolio.
	transactionsInPortfolio addAll: anPortfolio transactions.! !
!Portfolio methodsFor: 'accessing --Private--' stamp: 'D S 11/5/2020 21:13:53'!
from: aCollection obtain: aMessage

	|items|
	items := OrderedCollection new.
	items addAll: aCollection.
	portfolios do: [:anPortfolio | items addAll: (aMessage sendTo: anPortfolio)].
	^items! !
!Portfolio methodsFor: 'accessing --Private--' stamp: 'D S 11/5/2020 21:14:34' prior: 50953969!
allPortfolios

	^self from: portfolios obtain: [self allPortfolios].! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 21:14:39'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 21:14:39'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/5/2020 21:14:39'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/5/2020 21:14:39'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/5/2020 21:14:39'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/5/2020 21:14:39'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/5/2020 21:14:39'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/5/2020 21:14:39'!
FAILURE!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/5/2020 21:14:39'!
FAILURE!

!testRun: #PortfolioTest #test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/5/2020 21:14:39'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/5/2020 21:14:52'!
FAILURE!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/5/2020 21:15:17'!
FAILURE!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/5/2020 21:16:07'!
FAILURE!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/5/2020 21:16:36'!
FAILURE!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/5/2020 21:17:06'!
FAILURE!
!Portfolio methodsFor: 'accessing --Private--' stamp: 'D S 11/5/2020 21:18:27' prior: 50954183!
from: aCollection obtain: aMessage

	|items|
	items := OrderedCollection new.
	items addAll: aCollection.
	portfolios do: [:anPortfolio | items addAll: (anPortfolio do: aMessage)].
	^items! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 21:18:30'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 21:18:30'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/5/2020 21:18:30'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/5/2020 21:18:30'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/5/2020 21:18:30'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/5/2020 21:18:30'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/5/2020 21:18:30'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/5/2020 21:18:30'!
FAILURE!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/5/2020 21:18:30'!
FAILURE!

!testRun: #PortfolioTest #test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/5/2020 21:18:30'!
PASSED!
!Portfolio methodsFor: 'accessing --Private--' stamp: 'D S 11/5/2020 21:13:53' prior: 50954255!
from: aCollection obtain: aMessage

	|items|
	items := OrderedCollection new.
	items addAll: aCollection.
	portfolios do: [:anPortfolio | items addAll: (aMessage sendTo: anPortfolio)].
	^items! !
!Portfolio methodsFor: 'accessing --Private--' stamp: 'D S 11/5/2020 21:24:22' prior: 50954193!
allPortfolios

	^self from: portfolios obtain: [self allPortfolios].! !
!Portfolio methodsFor: 'accessing --Private--' stamp: 'D S 11/5/2020 21:30:17' prior: 50954312!
allPortfolios

	^self from: portfolios obtain: 'allPortfolios'.! !
!Portfolio methodsFor: 'accessing --Private--' stamp: 'D S 11/5/2020 21:31:04' prior: 50954302!
from: aCollection obtain: aMessage

	|items|
	items := OrderedCollection new.
	items addAll: aCollection.
	portfolios do: [:anPortfolio | items addAll: ((aMessage asMessage) sendTo: anPortfolio)].
	^items! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 21:31:07'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 21:31:07'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/5/2020 21:31:07'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/5/2020 21:31:07'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/5/2020 21:31:07'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/5/2020 21:31:07'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/5/2020 21:31:07'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/5/2020 21:31:07'!
FAILURE!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/5/2020 21:31:07'!
FAILURE!

!testRun: #PortfolioTest #test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/5/2020 21:31:07'!
PASSED!
!Portfolio methodsFor: 'accessing --Private--' stamp: 'D S 11/5/2020 21:32:00' prior: 50954318!
allPortfolios

	^self from: portfolios obtain: [:aPortfolio | aPortfolio allPortfolios].! !
!Portfolio methodsFor: 'accessing --Private--' stamp: 'D S 11/5/2020 21:32:21' prior: 50954324!
from: aCollection obtain: aMessage

	|items|
	items := OrderedCollection new.
	items addAll: aCollection.
	portfolios do: [:anPortfolio | items addAll: (aMessage value: anPortfolio)].
	^items! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 21:32:27'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 21:32:27'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/5/2020 21:32:27'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/5/2020 21:32:27'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/5/2020 21:32:27'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/5/2020 21:32:27'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/5/2020 21:32:27'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/5/2020 21:32:27'!
PASSED!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/5/2020 21:32:27'!
PASSED!

!testRun: #PortfolioTest #test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/5/2020 21:32:27'!
PASSED!
!Portfolio methodsFor: 'accessing --Private--' stamp: 'D S 11/5/2020 21:33:15' prior: 50953959!
allAccounts

	^self from: accounts obtain: [:anAccount | anAccount allAccounts ].! !

!methodRemoval: Portfolio class #initializePortfolio stamp: 'D S 11/5/2020 21:33:39'!
initializePortfolio

	^self new initialize.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 21:33:48' prior: 50953445!
test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded
	|aPortfolio aPortfolio2 anAccount|
	
	aPortfolio := Portfolio initializePortfolio.
	aPortfolio2 := Portfolio new.
	anAccount := ReceptiveAccount new.
	aPortfolio2 addAccount: anAccount.
	aPortfolio addPortfolio: aPortfolio2.
	
	^[aPortfolio addAccount: anAccount.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionAccountAlreadyInPortfolio.] 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 21:33:50' prior: 50954435!
test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded
	|aPortfolio aPortfolio2 anAccount|
	
	aPortfolio := Portfolio new.
	aPortfolio2 := Portfolio new.
	anAccount := ReceptiveAccount new.
	aPortfolio2 addAccount: anAccount.
	aPortfolio addPortfolio: aPortfolio2.
	
	^[aPortfolio addAccount: anAccount.
	self fail] 
		on: Error
		do: [:anError | self assert: anError messageText = Portfolio errorDescriptionAccountAlreadyInPortfolio.] 
	! !

----End fileIn of /home/dn-01/Escritorio/Ingenieria en Software I/CuisUniversity/Portfolio-Ejercicio.st----!

!classRemoval: #ReceptiveAccount stamp: 'D S 11/5/2020 21:35:03'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'D S 11/5/2020 21:35:04'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'D S 11/5/2020 21:35:04'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'D S 11/5/2020 21:35:05'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'D S 11/5/2020 21:35:06'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'D S 11/5/2020 21:35:06'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'D S 11/5/2020 21:35:07'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of /home/dn-01/Escritorio/Ingenieria en Software I/CuisUniversity/Portfolio-Ejercicio.st----!
!Portfolio methodsFor: 'accessing --Private--' stamp: 'D S 11/5/2020 21:36:32' prior: 50955469!
allAccounts

	^self from: accounts obtain: [:anAccount | anAccount allAccounts ].! !
!Portfolio methodsFor: 'accessing --Private--' stamp: 'D S 11/5/2020 21:36:49' prior: 50955478!
allPortfolios

	^self from: portfolios obtain: [:aPortfolio | aPortfolio allPortfolios].! !
!Portfolio methodsFor: 'accessing --Private--' stamp: 'D S 11/5/2020 21:37:13'!
from: aCollection obtain: aMessage

	|items|
	items := OrderedCollection new.
	items addAll: aCollection.
	portfolios do: [:anPortfolio | items addAll: (aMessage value: anPortfolio)].
	^items! !
!Portfolio methodsFor: 'accessing --Private--' stamp: 'D S 11/5/2020 21:37:21' prior: 50955677!
from: aCollection obtain: aClosure

	|items|
	items := OrderedCollection new.
	items addAll: aCollection.
	portfolios do: [:anPortfolio | items addAll: (aClosure value: anPortfolio)].
	^items! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 21:37:33'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 21:37:33'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/5/2020 21:37:33'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/5/2020 21:37:33'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/5/2020 21:37:33'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/5/2020 21:37:33'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/5/2020 21:37:33'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/5/2020 21:37:33'!
PASSED!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/5/2020 21:37:33'!
PASSED!

!testRun: #PortfolioTest #test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/5/2020 21:37:33'!
PASSED!
!Portfolio methodsFor: 'accessing --Private--' stamp: 'D S 11/5/2020 21:40:57'!
obtain: aCollection andForEachPortfolioDo: aClosure

	|items|
	items := OrderedCollection new.
	items addAll: aCollection.
	portfolios do: [:anPortfolio | items addAll: (aClosure value: anPortfolio)].
	^items! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 21:40:57' prior: 50955671!
allPortfolios

	^self obtain: portfolios andForEachPortfolioDo: [:aPortfolio | aPortfolio allPortfolios].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 21:40:57' prior: 50955665!
allAccounts

	^self obtain: accounts andForEachPortfolioDo: [:anAccount | anAccount allAccounts ].! !

!methodRemoval: Portfolio #from:obtain: stamp: 'D S 11/5/2020 21:40:57'!
from: aCollection obtain: aClosure

	|items|
	items := OrderedCollection new.
	items addAll: aCollection.
	portfolios do: [:anPortfolio | items addAll: (aClosure value: anPortfolio)].
	^items!
!Portfolio methodsFor: 'accessing --Private--' stamp: 'D S 11/5/2020 21:42:01'!
obtain: aCollection andForEachPortfolioAdd: aClosure

	|items|
	items := OrderedCollection new.
	items addAll: aCollection.
	portfolios do: [:anPortfolio | items addAll: (aClosure value: anPortfolio)].
	^items! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 21:42:01' prior: 50955744!
allPortfolios

	^self obtain: portfolios andForEachPortfolioAdd: [:aPortfolio | aPortfolio allPortfolios].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 21:42:01' prior: 50955751!
allAccounts

	^self obtain: accounts andForEachPortfolioAdd: [:anAccount | anAccount allAccounts ].! !

!methodRemoval: Portfolio #obtain:andForEachPortfolioDo: stamp: 'D S 11/5/2020 21:42:01'!
obtain: aCollection andForEachPortfolioDo: aClosure

	|items|
	items := OrderedCollection new.
	items addAll: aCollection.
	portfolios do: [:anPortfolio | items addAll: (aClosure value: anPortfolio)].
	^items!
!Portfolio methodsFor: 'accessing --Private--' stamp: 'D S 11/5/2020 21:42:24' prior: 50955783!
allAccounts

	^self obtain: accounts andForEachPortfolioAdd: [:aPortfolio | aPortfolio allAccounts ].! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 21:49:46'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 21:49:46'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/5/2020 21:49:46'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/5/2020 21:49:46'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/5/2020 21:49:46'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/5/2020 21:49:46'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/5/2020 21:49:46'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/5/2020 21:49:46'!
PASSED!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/5/2020 21:49:46'!
PASSED!

!testRun: #PortfolioTest #test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/5/2020 21:49:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/5/2020 21:49:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/5/2020 21:49:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/5/2020 21:49:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/5/2020 21:49:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/5/2020 21:49:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/5/2020 21:49:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/5/2020 21:49:46'!
PASSED!

!classRemoval: #ReceptiveAccount stamp: 'D S 11/5/2020 21:49:58'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'D S 11/5/2020 21:49:59'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'D S 11/5/2020 21:50:00'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'D S 11/5/2020 21:50:00'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'D S 11/5/2020 21:50:01'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'D S 11/5/2020 21:50:01'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'D S 11/5/2020 21:50:02'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of /home/dn-01/Escritorio/Ingenieria en Software I/CuisUniversity/Portfolio-EjercicioV2.st----!
!Portfolio methodsFor: 'accessing --Private--' stamp: 'D S 11/5/2020 21:50:40'!
obtain: aCollection forEachPortfolioAdd: aMessage

	|items|
	items := OrderedCollection new.
	items addAll: aCollection.
	portfolios do: [:anPortfolio | items addAll: (aMessage value: anPortfolio)].
	^items! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 21:50:40' prior: 50956284!
allPortfolios

	^self obtain: portfolios forEachPortfolioAdd: [:aPortfolio | aPortfolio allPortfolios].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 21:50:41' prior: 50956278!
allAccounts

	^self obtain: accounts forEachPortfolioAdd: [:anAccount | anAccount allAccounts ].! !

!methodRemoval: Portfolio #from:obtain: stamp: 'D S 11/5/2020 21:50:41'!
from: aCollection obtain: aMessage

	|items|
	items := OrderedCollection new.
	items addAll: aCollection.
	portfolios do: [:anPortfolio | items addAll: (aMessage value: anPortfolio)].
	^items!
!Portfolio methodsFor: 'accessing --Private--' stamp: 'D S 11/5/2020 21:50:52' prior: 50956501!
allAccounts

	^self obtain: accounts forEachPortfolioAdd: [:aPortfolio | aPortfolio allAccounts ].! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 21:51:39'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 21:51:39'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/5/2020 21:51:39'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/5/2020 21:51:39'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/5/2020 21:51:39'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/5/2020 21:51:39'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/5/2020 21:51:39'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/5/2020 21:51:39'!
PASSED!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/5/2020 21:51:39'!
PASSED!

!testRun: #PortfolioTest #test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/5/2020 21:51:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/5/2020 21:51:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/5/2020 21:51:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/5/2020 21:51:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/5/2020 21:51:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/5/2020 21:51:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/5/2020 21:51:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/5/2020 21:51:42'!
PASSED!

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 21:51:48'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 21:51:48'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/5/2020 21:51:48'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/5/2020 21:51:48'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/5/2020 21:51:48'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/5/2020 21:51:48'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/5/2020 21:51:48'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/5/2020 21:51:48'!
PASSED!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/5/2020 21:51:48'!
PASSED!

!testRun: #PortfolioTest #test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/5/2020 21:51:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/5/2020 21:51:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/5/2020 21:51:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/5/2020 21:51:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/5/2020 21:51:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/5/2020 21:51:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/5/2020 21:51:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/5/2020 21:51:48'!
PASSED!

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 21:52:16'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 21:52:16'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/5/2020 21:52:16'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/5/2020 21:52:16'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/5/2020 21:52:16'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/5/2020 21:52:16'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/5/2020 21:52:16'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/5/2020 21:52:16'!
PASSED!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/5/2020 21:52:16'!
PASSED!

!testRun: #PortfolioTest #test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/5/2020 21:52:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/5/2020 21:52:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/5/2020 21:52:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/5/2020 21:52:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/5/2020 21:52:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/5/2020 21:52:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/5/2020 21:52:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/5/2020 21:52:16'!
PASSED!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'D S 11/5/2020 22:27:22'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions includedInPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 22:27:22' prior: 50956454!
register: aTransaction

	includedInPortfolios do: [:aPortfolio | aPortfolio addTransaction: aTransaction].
	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 22:27:22' prior: 50956448 overrides: 16896425!
initialize

	transactions := OrderedCollection new.
	includedInPortfolios := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 22:27:22' prior: 50956476!
addPortfolio: aPortfolio

	includedInPortfolios add: aPortfolio! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'D S 11/5/2020 22:27:49'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios transactionsInPortfolio insidePortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 22:27:49' prior: 50956389!
addTransaction: aTransaction

	transactionsInPortfolio add: aTransaction.
	insidePortfolios do: [:aPortfolio| aPortfolio addTransaction: aTransaction]

	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 22:27:49' prior: 50956380 overrides: 16896425!
initialize
	
	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.
	transactionsInPortfolio := OrderedCollection new.
	insidePortfolios := OrderedCollection new.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'D S 11/5/2020 22:28:08'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios transactionsInAccountsInsidePortfolio insidePortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 22:28:08' prior: 50956357!
addAccount: anAccount

	self checkPortfolioDontHaveTheAccount: anAccount.
	accounts add: anAccount.
	anAccount addPortfolio: self.
	transactionsInAccountsInsidePortfolio addAll: (anAccount transactions).! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 22:28:08' prior: 50956366!
addPortfolio: anPortfolio

	self checkNotSamePortfolios: anPortfolio.
	self checkDoesntHaveAnPortfolioIncludedInPortfolio: anPortfolio.	
	self checkDoesntHaveAnAccountIncludedInPortfolio: anPortfolio.
	self checkPortfolioDontHaveThePortfolio: anPortfolio.
	portfolios add: anPortfolio.
	transactionsInAccountsInsidePortfolio addAll: anPortfolio transactions.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 22:28:08' prior: 50956305!
hasRegistered: anTransaction

	^transactionsInAccountsInsidePortfolio includes: anTransaction.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 22:28:08' prior: 50956299!
balance
	
	^(transactionsInAccountsInsidePortfolio sum:[:aTransaction| aTransaction netValue ] ifEmpty:[0])! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 22:28:08' prior: 50956755!
addTransaction: aTransaction

	transactionsInAccountsInsidePortfolio add: aTransaction.
	insidePortfolios do: [:aPortfolio| aPortfolio addTransaction: aTransaction]

	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 22:28:08' prior: 50956764 overrides: 16896425!
initialize
	
	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.
	transactionsInAccountsInsidePortfolio := OrderedCollection new.
	insidePortfolios := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 22:28:08' prior: 50956310!
transactions

	^transactionsInAccountsInsidePortfolio ! !

Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios transactionsInAccountsInsidePortfolio insidePortfolios balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'D S 11/5/2020 22:28:34'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios transactionsInAccountsInsidePortfolio insidePortfolios balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/5/2020 22:29:26' prior: 50956724!
register: aTransaction

	includedInPortfolios do: [:aPortfolio | aPortfolio addTransaction: aTransaction.
								aPortfolio modifyBalance: aTransaction netValue].
	transactions add: aTransaction 
! !
!Portfolio methodsFor: 'accessing --Private--' stamp: 'D S 11/5/2020 22:30:06'!
modifyBalance: aNetValue

	balance := balance + aNetValue! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'D S 11/5/2020 22:30:41'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios transactionsInAccountsInsidePortfolio insidePortfolios totalBalance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'D S 11/5/2020 22:30:41' prior: 50956871!
modifyBalance: aNetValue

	totalBalance := totalBalance + aNetValue! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 22:30:52'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 22:30:52'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/5/2020 22:30:52'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/5/2020 22:30:52'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/5/2020 22:30:52'!
ERROR!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/5/2020 22:30:52'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/5/2020 22:30:52'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/5/2020 22:30:52'!
PASSED!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/5/2020 22:30:52'!
PASSED!

!testRun: #PortfolioTest #test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/5/2020 22:30:52'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/5/2020 22:30:52'!
ERROR!
!Portfolio methodsFor: 'initialize' stamp: 'D S 11/5/2020 22:31:12' prior: 50956830 overrides: 16896425!
initialize
	
	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.
	transactionsInAccountsInsidePortfolio := OrderedCollection new.
	insidePortfolios := OrderedCollection new.
	totalBalance := 0! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 22:31:16'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 22:31:16'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/5/2020 22:31:16'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/5/2020 22:31:16'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/5/2020 22:31:16'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/5/2020 22:31:16'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/5/2020 22:31:16'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/5/2020 22:31:16'!
PASSED!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/5/2020 22:31:16'!
PASSED!

!testRun: #PortfolioTest #test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/5/2020 22:31:16'!
PASSED!

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 22:31:33'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 22:31:33'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/5/2020 22:31:33'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/5/2020 22:31:33'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/5/2020 22:31:33'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/5/2020 22:31:33'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/5/2020 22:31:33'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/5/2020 22:31:33'!
PASSED!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/5/2020 22:31:33'!
PASSED!

!testRun: #PortfolioTest #test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/5/2020 22:31:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/5/2020 22:31:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/5/2020 22:31:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/5/2020 22:31:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/5/2020 22:31:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/5/2020 22:31:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/5/2020 22:31:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/5/2020 22:31:33'!
PASSED!

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 22:31:53'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 22:31:53'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/5/2020 22:31:53'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/5/2020 22:31:53'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/5/2020 22:31:53'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/5/2020 22:31:53'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/5/2020 22:31:53'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/5/2020 22:31:53'!
PASSED!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/5/2020 22:31:53'!
PASSED!

!testRun: #PortfolioTest #test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/5/2020 22:31:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/5/2020 22:31:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/5/2020 22:31:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/5/2020 22:31:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/5/2020 22:31:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/5/2020 22:31:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/5/2020 22:31:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/5/2020 22:31:53'!
PASSED!
!Portfolio methodsFor: 'adding --Private--' stamp: 'D S 11/5/2020 22:33:04'!
addNetValueToBalance: aNetValue

	totalBalance := totalBalance + aNetValue! !

!methodRemoval: Portfolio #modifyBalance: stamp: 'D S 11/5/2020 22:33:04'!
modifyBalance: aNetValue

	totalBalance := totalBalance + aNetValue!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'D S 11/5/2020 22:33:19' prior: 50956862!
register: aTransaction

	includedInPortfolios do: [:aPortfolio | aPortfolio addTransaction: aTransaction.
								aPortfolio addNetValueToBalance: aTransaction netValue].
	transactions add: aTransaction 
! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 22:37:47'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 22:37:47'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/5/2020 22:37:47'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/5/2020 22:37:47'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/5/2020 22:37:47'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/5/2020 22:37:47'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/5/2020 22:37:47'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/5/2020 22:37:47'!
PASSED!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/5/2020 22:37:47'!
PASSED!

!testRun: #PortfolioTest #test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/5/2020 22:37:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/5/2020 22:37:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/5/2020 22:37:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/5/2020 22:37:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/5/2020 22:37:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/5/2020 22:37:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/5/2020 22:37:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/5/2020 22:37:47'!
PASSED!

----SNAPSHOT----(5 November 2020 22:38:25) CuisUniversity-4383.image priorSource: 19855520!

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/5/2020 22:38:28'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/5/2020 22:38:28'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/5/2020 22:38:28'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/5/2020 22:38:28'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/5/2020 22:38:28'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/5/2020 22:38:28'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/5/2020 22:38:28'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/5/2020 22:38:28'!
PASSED!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/5/2020 22:38:28'!
PASSED!

!testRun: #PortfolioTest #test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/5/2020 22:38:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/5/2020 22:38:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/5/2020 22:38:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/5/2020 22:38:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/5/2020 22:38:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/5/2020 22:38:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/5/2020 22:38:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/5/2020 22:38:28'!
PASSED!

----QUIT----(5 November 2020 22:39:25) CuisUniversity-4383.image priorSource: 20017297!

----STARTUP---- (8 November 2020 16:37:24) as /home/dn-01/Escritorio/Ingenieria en Software I/CuisUniversity/CuisUniversity-4383.image!

!Portfolio methodsFor: 'accessing' stamp: 'D S 11/8/2020 16:38:42' prior: 50956814!
balance
	
	^totalBalance! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/8/2020 16:38:44'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/8/2020 16:38:44'!
FAILURE!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/8/2020 16:38:44'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/8/2020 16:38:44'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/8/2020 16:38:44'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/8/2020 16:38:44'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/8/2020 16:38:44'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/8/2020 16:38:44'!
PASSED!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/8/2020 16:38:44'!
PASSED!

!testRun: #PortfolioTest #test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/8/2020 16:38:44'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/8/2020 16:38:44'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'D S 11/8/2020 16:39:25' prior: 50956783!
addAccount: anAccount

	self checkPortfolioDontHaveTheAccount: anAccount.
	accounts add: anAccount.
	anAccount addPortfolio: self.
	transactionsInAccountsInsidePortfolio addAll: (anAccount transactions).
	totalBalance := anAccount balance.! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/8/2020 16:39:29'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/8/2020 16:39:29'!
FAILURE!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/8/2020 16:39:29'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/8/2020 16:39:29'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/8/2020 16:39:29'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/8/2020 16:39:29'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/8/2020 16:39:29'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/8/2020 16:39:29'!
PASSED!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/8/2020 16:39:29'!
PASSED!

!testRun: #PortfolioTest #test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/8/2020 16:39:29'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/8/2020 16:39:29'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'D S 11/8/2020 16:39:57' prior: 50957311!
addAccount: anAccount

	self checkPortfolioDontHaveTheAccount: anAccount.
	accounts add: anAccount.
	anAccount addPortfolio: self.
	transactionsInAccountsInsidePortfolio addAll: (anAccount transactions).
	totalBalance := totalBalance + anAccount balance.! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/8/2020 16:40:00'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/8/2020 16:40:00'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/8/2020 16:40:00'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/8/2020 16:40:00'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/8/2020 16:40:00'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/8/2020 16:40:00'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/8/2020 16:40:00'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/8/2020 16:40:00'!
PASSED!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/8/2020 16:40:00'!
PASSED!

!testRun: #PortfolioTest #test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/8/2020 16:40:00'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'D S 11/8/2020 16:40:26' prior: 50956793!
addPortfolio: anPortfolio

	self checkNotSamePortfolios: anPortfolio.
	self checkDoesntHaveAnPortfolioIncludedInPortfolio: anPortfolio.	
	self checkDoesntHaveAnAccountIncludedInPortfolio: anPortfolio.
	self checkPortfolioDontHaveThePortfolio: anPortfolio.
	portfolios add: anPortfolio.
	transactionsInAccountsInsidePortfolio addAll: anPortfolio transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/8/2020 16:43:32'!
test11
	|aPortfolio anAccount aPortfolio2|
	
	aPortfolio := Portfolio new.
	aPortfolio2 := Portfolio new.
	anAccount := ReceptiveAccount new.
	Deposit register: 500 on: anAccount.
	aPortfolio2 addAccount: anAccount. 
	aPortfolio addPortfolio: aPortfolio.
	
	self assert: 50 equals: aPortfolio balance. 
	! !

!testRun: #PortfolioTest #test11 stamp: 'D S 11/8/2020 16:43:35'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'D S 11/8/2020 16:43:35'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/8/2020 16:43:40' prior: 50957426!
test11
	|aPortfolio anAccount aPortfolio2|
	
	aPortfolio := Portfolio new.
	aPortfolio2 := Portfolio new.
	anAccount := ReceptiveAccount new.
	Deposit register: 500 on: anAccount.
	aPortfolio2 addAccount: anAccount. 
	aPortfolio addPortfolio: aPortfolio2.
	
	self assert: 50 equals: aPortfolio balance. 
	! !

!testRun: #PortfolioTest #test11 stamp: 'D S 11/8/2020 16:43:42'!
FAILURE!

!testRun: #PortfolioTest #test11 stamp: 'D S 11/8/2020 16:43:42'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'D S 11/8/2020 16:43:56' prior: 50957412!
addPortfolio: anPortfolio

	self checkNotSamePortfolios: anPortfolio.
	self checkDoesntHaveAnPortfolioIncludedInPortfolio: anPortfolio.	
	self checkDoesntHaveAnAccountIncludedInPortfolio: anPortfolio.
	self checkPortfolioDontHaveThePortfolio: anPortfolio.
	portfolios add: anPortfolio.
	transactionsInAccountsInsidePortfolio addAll: anPortfolio transactions.
	totalBalance := 50! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/8/2020 16:43:59'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/8/2020 16:43:59'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/8/2020 16:43:59'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/8/2020 16:43:59'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/8/2020 16:43:59'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/8/2020 16:43:59'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/8/2020 16:43:59'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/8/2020 16:43:59'!
PASSED!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/8/2020 16:43:59'!
PASSED!

!testRun: #PortfolioTest #test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/8/2020 16:43:59'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'D S 11/8/2020 16:43:59'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/8/2020 16:44:46'!
test12
	|aPortfolio aPortfolio2 anAccount anAccount2|
	
	aPortfolio := Portfolio new.
	aPortfolio2 := Portfolio new.
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Deposit register: 500 on: anAccount.
	Deposit register: 200 on: anAccount2.
	aPortfolio2 addAccount: anAccount.
	aPortfolio2 addAccount: anAccount2.
	aPortfolio addPortfolio: aPortfolio2.
	
	self assert: 700 equals: aPortfolio balance. 
	! !

!testRun: #PortfolioTest #test12 stamp: 'D S 11/8/2020 16:44:49'!
FAILURE!

!testRun: #PortfolioTest #test12 stamp: 'D S 11/8/2020 16:44:49'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'D S 11/8/2020 16:45:06' prior: 50957461!
addPortfolio: anPortfolio

	self checkNotSamePortfolios: anPortfolio.
	self checkDoesntHaveAnPortfolioIncludedInPortfolio: anPortfolio.	
	self checkDoesntHaveAnAccountIncludedInPortfolio: anPortfolio.
	self checkPortfolioDontHaveThePortfolio: anPortfolio.
	portfolios add: anPortfolio.
	transactionsInAccountsInsidePortfolio addAll: anPortfolio transactions.
	totalBalance := anPortfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/8/2020 16:45:18'!
test13
	|aPortfolio aPortfolio2 anAccount anAccount2|
	
	aPortfolio := Portfolio new.
	aPortfolio2 := Portfolio new.
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Deposit register: 500 on: anAccount.
	Deposit register: 200 on: anAccount2.
	aPortfolio addAccount: anAccount.
	aPortfolio2 addAccount: anAccount2.
	aPortfolio addPortfolio: aPortfolio2.
	
	self assert: 700 equals: aPortfolio balance. 
	! !

!testRun: #PortfolioTest #test13 stamp: 'D S 11/8/2020 16:45:21'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'D S 11/8/2020 16:45:21'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'D S 11/8/2020 16:45:39' prior: 50957537!
addPortfolio: anPortfolio

	self checkNotSamePortfolios: anPortfolio.
	self checkDoesntHaveAnPortfolioIncludedInPortfolio: anPortfolio.	
	self checkDoesntHaveAnAccountIncludedInPortfolio: anPortfolio.
	self checkPortfolioDontHaveThePortfolio: anPortfolio.
	portfolios add: anPortfolio.
	transactionsInAccountsInsidePortfolio addAll: anPortfolio transactions.
	totalBalance := totalBalance + anPortfolio balance..! !
!Portfolio methodsFor: 'adding' stamp: 'D S 11/8/2020 16:45:40' prior: 50957574!
addPortfolio: anPortfolio

	self checkNotSamePortfolios: anPortfolio.
	self checkDoesntHaveAnPortfolioIncludedInPortfolio: anPortfolio.	
	self checkDoesntHaveAnAccountIncludedInPortfolio: anPortfolio.
	self checkPortfolioDontHaveThePortfolio: anPortfolio.
	portfolios add: anPortfolio.
	transactionsInAccountsInsidePortfolio addAll: anPortfolio transactions.
	totalBalance := totalBalance + anPortfolio balance.! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/8/2020 16:45:42'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/8/2020 16:45:42'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/8/2020 16:45:42'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/8/2020 16:45:42'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/8/2020 16:45:42'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/8/2020 16:45:42'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/8/2020 16:45:42'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/8/2020 16:45:42'!
PASSED!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/8/2020 16:45:42'!
PASSED!

!testRun: #PortfolioTest #test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/8/2020 16:45:42'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'D S 11/8/2020 16:45:42'!
FAILURE!

!testRun: #PortfolioTest #test12 stamp: 'D S 11/8/2020 16:45:42'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'D S 11/8/2020 16:45:42'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'D S 11/8/2020 16:45:42'!
FAILURE!

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/8/2020 16:46:07'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/8/2020 16:46:07'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/8/2020 16:46:07'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/8/2020 16:46:07'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/8/2020 16:46:07'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/8/2020 16:46:07'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/8/2020 16:46:07'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/8/2020 16:46:07'!
PASSED!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/8/2020 16:46:07'!
PASSED!

!testRun: #PortfolioTest #test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/8/2020 16:46:07'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'D S 11/8/2020 16:46:07'!
FAILURE!

!testRun: #PortfolioTest #test12 stamp: 'D S 11/8/2020 16:46:07'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'D S 11/8/2020 16:46:07'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'D S 11/8/2020 16:46:07'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/8/2020 16:46:36' prior: 50957444!
test11
	|aPortfolio anAccount aPortfolio2|
	
	aPortfolio := Portfolio new.
	aPortfolio2 := Portfolio new.
	anAccount := ReceptiveAccount new.
	Deposit register: 500 on: anAccount.
	aPortfolio2 addAccount: anAccount. 
	aPortfolio addPortfolio: aPortfolio2.
	
	self assert: 500 equals: aPortfolio balance. 
	! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/8/2020 16:46:39'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/8/2020 16:46:39'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/8/2020 16:46:39'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/8/2020 16:46:39'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/8/2020 16:46:39'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/8/2020 16:46:39'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/8/2020 16:46:39'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/8/2020 16:46:39'!
PASSED!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/8/2020 16:46:39'!
PASSED!

!testRun: #PortfolioTest #test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/8/2020 16:46:39'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'D S 11/8/2020 16:46:39'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'D S 11/8/2020 16:46:39'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'D S 11/8/2020 16:46:39'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/8/2020 16:48:08'!
test11AddingAPortfolioIncreaseBalanceEqualToPortfolioBalance
	|aPortfolio aPortfolio2 anAccount anAccount2|
	
	aPortfolio := Portfolio new.
	aPortfolio2 := Portfolio new.
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Deposit register: 500 on: anAccount.
	Deposit register: 200 on: anAccount2.
	aPortfolio addAccount: anAccount.
	aPortfolio2 addAccount: anAccount2.
	aPortfolio addPortfolio: aPortfolio2.
	
	self assert: 700 equals: aPortfolio balance. 
	! !

!methodRemoval: PortfolioTest #test13 stamp: 'D S 11/8/2020 16:48:08'!
test13
	|aPortfolio aPortfolio2 anAccount anAccount2|
	
	aPortfolio := Portfolio new.
	aPortfolio2 := Portfolio new.
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Deposit register: 500 on: anAccount.
	Deposit register: 200 on: anAccount2.
	aPortfolio addAccount: anAccount.
	aPortfolio2 addAccount: anAccount2.
	aPortfolio addPortfolio: aPortfolio2.
	
	self assert: 700 equals: aPortfolio balance. 
	!

!methodRemoval: PortfolioTest #test11 stamp: 'D S 11/8/2020 16:48:12'!
test11
	|aPortfolio anAccount aPortfolio2|
	
	aPortfolio := Portfolio new.
	aPortfolio2 := Portfolio new.
	anAccount := ReceptiveAccount new.
	Deposit register: 500 on: anAccount.
	aPortfolio2 addAccount: anAccount. 
	aPortfolio addPortfolio: aPortfolio2.
	
	self assert: 500 equals: aPortfolio balance. 
	!

!methodRemoval: PortfolioTest #test12 stamp: 'D S 11/8/2020 16:48:17'!
test12
	|aPortfolio aPortfolio2 anAccount anAccount2|
	
	aPortfolio := Portfolio new.
	aPortfolio2 := Portfolio new.
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Deposit register: 500 on: anAccount.
	Deposit register: 200 on: anAccount2.
	aPortfolio2 addAccount: anAccount.
	aPortfolio2 addAccount: anAccount2.
	aPortfolio addPortfolio: aPortfolio2.
	
	self assert: 700 equals: aPortfolio balance. 
	!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/8/2020 16:53:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/8/2020 16:53:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/8/2020 16:53:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/8/2020 16:53:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/8/2020 16:53:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/8/2020 16:53:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/8/2020 16:53:29'!
PASSED!
!Portfolio methodsFor: 'accessing --Private--' stamp: 'D S 11/8/2020 16:54:10' prior: 50956484!
obtain: aCollection forEachPortfolioAdd: aMessage

	|items|
	items := OrderedCollection new.
	items addAll: aCollection.
	portfolios do: [:anPortfolio | items addAll: (aMessage value: anPortfolio)].
	^items! !
!Portfolio methodsFor: 'accessing --Private--' stamp: 'D S 11/8/2020 16:54:25' prior: 50957846!
obtain: aCollection forEachPortfolioAdd: aClosure

	|items|
	items := OrderedCollection new.
	items addAll: aCollection.
	portfolios do: [:anPortfolio | items addAll: (aClosure value: anPortfolio)].
	^items! !
!ReceptiveAccount methodsFor: 'adding --Private--' stamp: 'D S 11/8/2020 16:55:21'!
addIncludedPortfolio: aPortfolio

	includedInPortfolios add: aPortfolio! !

!methodRemoval: ReceptiveAccount #addPortfolio: stamp: 'D S 11/8/2020 16:55:21'!
addPortfolio: aPortfolio

	includedInPortfolios add: aPortfolio!
!Portfolio methodsFor: 'adding' stamp: 'D S 11/8/2020 16:55:40' prior: 50957363!
addAccount: anAccount

	self checkPortfolioDontHaveTheAccount: anAccount.
	accounts add: anAccount.
	anAccount addIncludedPortfolio: self.
	transactionsInAccountsInsidePortfolio addAll: (anAccount transactions).
	totalBalance := totalBalance + anAccount balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/8/2020 16:56:52' prior: 50957758!
test11AddingAPortfolioIncreaseBalanceEqualToPortfolioBalance
	|aPortfolio aPortfolio2 anAccount anAccount2|
	
	aPortfolio := Portfolio new.
	aPortfolio2 := Portfolio new.
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Deposit register: 500 on: anAccount.
	Deposit register: 200 on: anAccount2.
	aPortfolio addAccount: anAccount.
	aPortfolio2 addAccount: anAccount2.
	aPortfolio addPortfolio: aPortfolio2.
	Withdraw register: 100 on: anAccount2.
	
	self assert: 700 equals: aPortfolio balance. 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/8/2020 16:56:55' prior: 50957888!
test11AddingAPortfolioIncreaseBalanceEqualToPortfolioBalance
	|aPortfolio aPortfolio2 anAccount anAccount2|
	
	aPortfolio := Portfolio new.
	aPortfolio2 := Portfolio new.
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Deposit register: 500 on: anAccount.
	Deposit register: 200 on: anAccount2.
	aPortfolio addAccount: anAccount.
	aPortfolio2 addAccount: anAccount2.
	aPortfolio addPortfolio: aPortfolio2.
	Withdraw register: 100 on: anAccount2.
	
	self assert: 600 equals: aPortfolio balance. 
	! !

!testRun: #PortfolioTest #test11AddingAPortfolioIncreaseBalanceEqualToPortfolioBalance stamp: 'D S 11/8/2020 16:56:58'!
FAILURE!

!testRun: #PortfolioTest #test11AddingAPortfolioIncreaseBalanceEqualToPortfolioBalance stamp: 'D S 11/8/2020 16:56:58'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/8/2020 16:57:17'!
test12
	|aPortfolio aPortfolio2 anAccount anAccount2|
	
	aPortfolio := Portfolio new.
	aPortfolio2 := Portfolio new.
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Deposit register: 500 on: anAccount.
	Deposit register: 200 on: anAccount2.
	aPortfolio addAccount: anAccount.
	aPortfolio2 addAccount: anAccount2.
	aPortfolio addPortfolio: aPortfolio2.
	
	self assert: 700 equals: aPortfolio balance. 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/8/2020 16:59:31' prior: 50957936!
test12
	|aPortfolio aPortfolio2 anAccount anAccount2|
	
	aPortfolio := Portfolio new.
	aPortfolio2 := Portfolio new.
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Deposit register: 500 on: anAccount.
	Deposit register: 200 on: anAccount2.
	aPortfolio addAccount: anAccount.
	aPortfolio2 addAccount: anAccount2.
	aPortfolio addPortfolio: aPortfolio2.
	Withdraw register: 100 on: anAccount2.
	
	self assert: 600 equals: aPortfolio balance. 
	! !

!testRun: #PortfolioTest #test12 stamp: 'D S 11/8/2020 16:59:34'!
FAILURE!

!testRun: #PortfolioTest #test12 stamp: 'D S 11/8/2020 16:59:34'!
FAILURE!

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/8/2020 17:01:01'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/8/2020 17:01:01'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/8/2020 17:01:01'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/8/2020 17:01:01'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/8/2020 17:01:01'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/8/2020 17:01:01'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/8/2020 17:01:01'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/8/2020 17:01:01'!
PASSED!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/8/2020 17:01:01'!
PASSED!

!testRun: #PortfolioTest #test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/8/2020 17:01:01'!
PASSED!

!testRun: #PortfolioTest #test11AddingAPortfolioIncreaseBalanceEqualToPortfolioBalance stamp: 'D S 11/8/2020 17:01:01'!
FAILURE!

!testRun: #PortfolioTest #test12 stamp: 'D S 11/8/2020 17:01:01'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/8/2020 16:48:08' prior: 50957908!
test11AddingAPortfolioIncreaseBalanceEqualToPortfolioBalance
	|aPortfolio aPortfolio2 anAccount anAccount2|
	
	aPortfolio := Portfolio new.
	aPortfolio2 := Portfolio new.
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Deposit register: 500 on: anAccount.
	Deposit register: 200 on: anAccount2.
	aPortfolio addAccount: anAccount.
	aPortfolio2 addAccount: anAccount2.
	aPortfolio addPortfolio: aPortfolio2.
	
	self assert: 700 equals: aPortfolio balance. 
	! !

!testRun: #PortfolioTest #test11AddingAPortfolioIncreaseBalanceEqualToPortfolioBalance stamp: 'D S 11/8/2020 17:02:20'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'D S 11/8/2020 17:03:44'!
FAILURE!

!testRun: #PortfolioTest #test12 stamp: 'D S 11/8/2020 17:03:44'!
FAILURE!
!Portfolio methodsFor: 'adding --Private--' stamp: 'D S 11/8/2020 17:05:15' prior: 50957108!
addNetValueToBalance: aNetValue

	totalBalance := totalBalance + aNetValue.
	insidePortfolios do: [:aPortfolio | aPortfolio addNetValueToBalance: aNetValue].! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/8/2020 17:05:19'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/8/2020 17:05:19'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/8/2020 17:05:19'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/8/2020 17:05:19'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/8/2020 17:05:19'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/8/2020 17:05:19'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/8/2020 17:05:19'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/8/2020 17:05:19'!
PASSED!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/8/2020 17:05:19'!
PASSED!

!testRun: #PortfolioTest #test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/8/2020 17:05:19'!
PASSED!

!testRun: #PortfolioTest #test11AddingAPortfolioIncreaseBalanceEqualToPortfolioBalance stamp: 'D S 11/8/2020 17:05:19'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'D S 11/8/2020 17:05:19'!
FAILURE!

!testRun: #PortfolioTest #test12 stamp: 'D S 11/8/2020 17:05:19'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'D S 11/8/2020 17:06:08' prior: 50957590!
addPortfolio: anPortfolio

	self checkNotSamePortfolios: anPortfolio.
	self checkDoesntHaveAnPortfolioIncludedInPortfolio: anPortfolio.	
	self checkDoesntHaveAnAccountIncludedInPortfolio: anPortfolio.
	self checkPortfolioDontHaveThePortfolio: anPortfolio.
	portfolios add: anPortfolio.
	transactionsInAccountsInsidePortfolio addAll: anPortfolio transactions.
	totalBalance := totalBalance + anPortfolio balance.
	anPortfolio addIncludedIn: self.! !
!Portfolio methodsFor: 'adding --Private--' stamp: 'D S 11/8/2020 17:06:40'!
addIncludedIn: aPortfolio

	insidePortfolios add: aPortfolio! !

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/8/2020 17:06:43'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/8/2020 17:06:43'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/8/2020 17:06:43'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/8/2020 17:06:43'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/8/2020 17:06:43'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/8/2020 17:06:43'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/8/2020 17:06:43'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/8/2020 17:06:43'!
PASSED!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/8/2020 17:06:43'!
PASSED!

!testRun: #PortfolioTest #test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/8/2020 17:06:43'!
PASSED!

!testRun: #PortfolioTest #test11AddingAPortfolioIncreaseBalanceEqualToPortfolioBalance stamp: 'D S 11/8/2020 17:06:43'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'D S 11/8/2020 17:06:43'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'D S 11/8/2020 17:08:19'!
test12WithdrawingFromAccountAffectPortfoliosWhoHasIncludedTheAccount
	|aPortfolio aPortfolio2 anAccount anAccount2|
	
	aPortfolio := Portfolio new.
	aPortfolio2 := Portfolio new.
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Deposit register: 500 on: anAccount.
	Deposit register: 200 on: anAccount2.
	aPortfolio addAccount: anAccount.
	aPortfolio2 addAccount: anAccount2.
	aPortfolio addPortfolio: aPortfolio2.
	Withdraw register: 100 on: anAccount2.
	
	self assert: 600 equals: aPortfolio balance. 
	! !

!methodRemoval: PortfolioTest #test12 stamp: 'D S 11/8/2020 17:08:19'!
test12
	|aPortfolio aPortfolio2 anAccount anAccount2|
	
	aPortfolio := Portfolio new.
	aPortfolio2 := Portfolio new.
	anAccount := ReceptiveAccount new.
	anAccount2 := ReceptiveAccount new.
	Deposit register: 500 on: anAccount.
	Deposit register: 200 on: anAccount2.
	aPortfolio addAccount: anAccount.
	aPortfolio2 addAccount: anAccount2.
	aPortfolio addPortfolio: aPortfolio2.
	Withdraw register: 100 on: anAccount2.
	
	self assert: 600 equals: aPortfolio balance. 
	!

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/8/2020 17:08:44'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/8/2020 17:08:44'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/8/2020 17:08:44'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/8/2020 17:08:44'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/8/2020 17:08:44'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/8/2020 17:08:44'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/8/2020 17:08:44'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/8/2020 17:08:44'!
PASSED!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/8/2020 17:08:44'!
PASSED!

!testRun: #PortfolioTest #test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/8/2020 17:08:44'!
PASSED!

!testRun: #PortfolioTest #test11AddingAPortfolioIncreaseBalanceEqualToPortfolioBalance stamp: 'D S 11/8/2020 17:08:44'!
PASSED!

!testRun: #PortfolioTest #test12WithdrawingFromAccountAffectPortfoliosWhoHasIncludedTheAccount stamp: 'D S 11/8/2020 17:08:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/8/2020 17:08:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/8/2020 17:08:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/8/2020 17:08:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/8/2020 17:08:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/8/2020 17:08:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/8/2020 17:08:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/8/2020 17:08:49'!
PASSED!

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/8/2020 17:08:54'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/8/2020 17:08:54'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/8/2020 17:08:54'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/8/2020 17:08:54'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/8/2020 17:08:54'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/8/2020 17:08:54'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/8/2020 17:08:54'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/8/2020 17:08:54'!
PASSED!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/8/2020 17:08:54'!
PASSED!

!testRun: #PortfolioTest #test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/8/2020 17:08:54'!
PASSED!

!testRun: #PortfolioTest #test11AddingAPortfolioIncreaseBalanceEqualToPortfolioBalance stamp: 'D S 11/8/2020 17:08:54'!
PASSED!

!testRun: #PortfolioTest #test12WithdrawingFromAccountAffectPortfoliosWhoHasIncludedTheAccount stamp: 'D S 11/8/2020 17:08:54'!
PASSED!

----SNAPSHOT----(8 November 2020 17:09:06) CuisUniversity-4383.image priorSource: 20019440!

!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/8/2020 17:09:10'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/8/2020 17:09:10'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/8/2020 17:09:10'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/8/2020 17:09:10'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/8/2020 17:09:10'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/8/2020 17:09:10'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/8/2020 17:09:10'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/8/2020 17:09:10'!
PASSED!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/8/2020 17:09:10'!
PASSED!

!testRun: #PortfolioTest #test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/8/2020 17:09:10'!
PASSED!

!testRun: #PortfolioTest #test11AddingAPortfolioIncreaseBalanceEqualToPortfolioBalance stamp: 'D S 11/8/2020 17:09:10'!
PASSED!

!testRun: #PortfolioTest #test12WithdrawingFromAccountAffectPortfoliosWhoHasIncludedTheAccount stamp: 'D S 11/8/2020 17:09:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/8/2020 17:09:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/8/2020 17:09:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/8/2020 17:09:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/8/2020 17:09:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/8/2020 17:09:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/8/2020 17:09:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/8/2020 17:09:10'!
PASSED!

----QUIT----(8 November 2020 17:09:38) CuisUniversity-4383.image priorSource: 20053467!

----STARTUP---- (8 November 2020 19:05:42) as /home/dn-01/Escritorio/Ingenieria en Software I/CuisUniversity/CuisUniversity-4383.image!


!testRun: #PortfolioTest #test01initializeWithTotalBalance0 stamp: 'D S 11/8/2020 19:07:53'!
PASSED!

!testRun: #PortfolioTest #test02BalanceReturnTotalBalanceOfAllAccountsInPortfolio stamp: 'D S 11/8/2020 19:07:53'!
PASSED!

!testRun: #PortfolioTest #test03HasRegisterFoundTransactionCorrectly stamp: 'D S 11/8/2020 19:07:53'!
PASSED!

!testRun: #PortfolioTest #test04HasRegisterDontFoundTransactionsOutOfPortfolio stamp: 'D S 11/8/2020 19:07:53'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsObtainAllTransactionsInAccounts stamp: 'D S 11/8/2020 19:07:53'!
PASSED!

!testRun: #PortfolioTest #test06RaiseErrorWhenTryingAddPortfolioToItself stamp: 'D S 11/8/2020 19:07:53'!
PASSED!

!testRun: #PortfolioTest #test07RaiseErrorWhenTryingToAddAPortfolioWithAnAccountInBoth stamp: 'D S 11/8/2020 19:07:53'!
PASSED!

!testRun: #PortfolioTest #test08RaiseErrorWhenTryingAddPortfolioAlreadyAdded stamp: 'D S 11/8/2020 19:07:53'!
PASSED!

!testRun: #PortfolioTest #test09RaiseErrorWhenTryingToAddAPortfolioWithAPortfolioInBoth stamp: 'D S 11/8/2020 19:07:53'!
PASSED!

!testRun: #PortfolioTest #test10RaiseErrorWhenTryingToAddAnAccountInAPortfolioAlreadyAdded stamp: 'D S 11/8/2020 19:07:53'!
PASSED!

!testRun: #PortfolioTest #test11AddingAPortfolioIncreaseBalanceEqualToPortfolioBalance stamp: 'D S 11/8/2020 19:07:53'!
PASSED!

!testRun: #PortfolioTest #test12WithdrawingFromAccountAffectPortfoliosWhoHasIncludedTheAccount stamp: 'D S 11/8/2020 19:07:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'D S 11/8/2020 19:07:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'D S 11/8/2020 19:07:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'D S 11/8/2020 19:07:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'D S 11/8/2020 19:07:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'D S 11/8/2020 19:07:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'D S 11/8/2020 19:07:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'D S 11/8/2020 19:07:53'!
PASSED!