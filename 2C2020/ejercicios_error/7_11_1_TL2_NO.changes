

----STARTUP---- (16 November 2020 17:42:01) as C:\Program Files\CuisUniversity\CuisUniversity-4365.image!


Object subclass: #TusLibrosAPI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TusLibrosAPI category: #'Portfolio-Solucion' stamp: 'eb 11/16/2020 17:42:35'!
Object subclass: #TusLibrosAPI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TusLibrosAPI stamp: 'eb 11/16/2020 17:42:43'!
Object subclass: #TusLibrosAPI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #TusLibrosAPI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosAPI category: #TusLibros stamp: 'eb 11/16/2020 17:42:54'!
Object subclass: #TusLibrosAPI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #TusLibrosAPITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosAPITest category: #TusLibros stamp: 'eb 11/16/2020 17:43:04'!
TestCase subclass: #TusLibrosAPITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosAPITest methodsFor: 'nil' stamp: 'eb 11/16/2020 17:44:57'!
test01Gets400OnCreateCartAttempWithInvalidRequestSintaxs
	! !
!TusLibrosAPITest methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 17:45:09'!
test01Gets200OnCreateCartAttempWithValidRequestSintaxs
	! !
!TusLibrosAPITest methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 17:45:29'!
test01Gets200OnCreateCartAttempWithValidRequestSyntax
	! !

!methodRemoval: TusLibrosAPITest #test01Gets200OnCreateCartAttempWithValidRequestSintaxs stamp: 'eb 11/16/2020 17:45:29'!
test01Gets200OnCreateCartAttempWithValidRequestSintaxs
	!
!TusLibrosAPITest methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 17:45:38'!
test02Gets400OnCreateCartAttempWithInvalidRequestSyntax
	! !

!methodRemoval: TusLibrosAPITest #test01Gets400OnCreateCartAttempWithInvalidRequestSintaxs stamp: 'eb 11/16/2020 17:45:38'!
test01Gets400OnCreateCartAttempWithInvalidRequestSintaxs
	!
!TusLibrosAPITest methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 17:45:54'!
test01Gets400OnCreateCartAttempWithValidRequestSyntax
	! !

!methodRemoval: TusLibrosAPITest #test01Gets200OnCreateCartAttempWithValidRequestSyntax stamp: 'eb 11/16/2020 17:45:54'!
test01Gets200OnCreateCartAttempWithValidRequestSyntax
	!
!TusLibrosAPITest methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 17:45:58'!
test02Gets200OnCreateCartAttempWithInvalidRequestSyntax
	! !

!methodRemoval: TusLibrosAPITest #test02Gets400OnCreateCartAttempWithInvalidRequestSyntax stamp: 'eb 11/16/2020 17:45:58'!
test02Gets400OnCreateCartAttempWithInvalidRequestSyntax
	!
!TusLibrosAPITest methodsFor: 'create cart endpoint' stamp: 'eb 11/16/2020 17:49:02'!
test01Gets400OnCreateCartAttempWithInvalidRequestSyntax
	! !

!methodRemoval: TusLibrosAPITest #test01Gets400OnCreateCartAttempWithValidRequestSyntax stamp: 'eb 11/16/2020 17:49:02'!
test01Gets400OnCreateCartAttempWithValidRequestSyntax
	!
!TusLibrosAPITest methodsFor: 'create cart endpoint' stamp: 'eb 11/16/2020 17:49:10'!
test02Gets200OnCreateCartAttempWithValidRequestSyntax
	! !

!methodRemoval: TusLibrosAPITest #test02Gets200OnCreateCartAttempWithInvalidRequestSyntax stamp: 'eb 11/16/2020 17:49:10'!
test02Gets200OnCreateCartAttempWithInvalidRequestSyntax
	!
!TusLibrosAPITest methodsFor: 'create cart endpoint' stamp: 'eb 11/16/2020 17:49:25'!
test03CreatesCartOnCreateCartAttempWithValidRequestSyntax
	! !
!TusLibrosAPITest methodsFor: 'create cart endpoint' stamp: 'eb 11/16/2020 17:53:40' prior: 50995165!
test01Gets400OnCreateCartAttempWithInvalidRequestSyntax

	| api |
	
	api _ TusLibrosAPI new.
	
	self should: [ api post: 'createCart' with: '']
		raise: Error
		withMessageText: api class badRequest.
	! !

Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: #TusLibros stamp: 'eb 11/16/2020 18:53:56'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: #TusLibros stamp: 'eb 11/16/2020 18:54:01'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'no messages' stamp: 'eb 11/16/2020 18:54:57'!
test01CartIsEmptyAtTheBeginning
	
	| cart |
	
	cart _ Cart new .
	
	self assert: cart isEmpty .! !

!testRun: #CartTest #test01CartIsEmptyAtTheBeginning stamp: 'eb 11/16/2020 18:54:59'!
ERROR!
!Cart methodsFor: 'testing' stamp: 'eb 11/16/2020 18:55:10'!
isEmpty
	self shouldBeImplemented.! !
!Cart methodsFor: 'testing' stamp: 'eb 11/16/2020 18:55:16' prior: 50995231!
isEmpty

	^ true .! !

!testRun: #CartTest #test01CartIsEmptyAtTheBeginning stamp: 'eb 11/16/2020 18:55:19'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyAtTheBeginning stamp: 'eb 11/16/2020 18:55:19'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyAtTheBeginning stamp: 'eb 11/16/2020 18:55:22'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyAtTheBeginning stamp: 'eb 11/16/2020 18:55:24'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 18:55:33' prior: 50995223!
test01CartIsEmptyAtTheBeginning
	
	| cart |
	
	cart _ Cart new .
	
	self assert: cart isEmpty .! !

Object subclass: #Catalogue
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Catalogue category: #TusLibros stamp: 'eb 11/16/2020 18:58:07'!
Object subclass: #Catalogue
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #CatalogueTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CatalogueTest category: #TusLibros stamp: 'eb 11/16/2020 18:58:14'!
TestCase subclass: #CatalogueTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Catalogue category: #TusLibros stamp: 'eb 11/16/2020 19:00:01'!
Object subclass: #Catalogue
	instanceVariableNames: 'elements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Catalogue methodsFor: 'no messages' stamp: 'eb 11/16/2020 18:59:59' overrides: 16896425!
initialize
	
	elements _ OrderedCollection new .! !
!Catalogue class methodsFor: 'no messages' stamp: 'eb 11/16/2020 19:01:36'!
with: anElement
	
	self new initializeWith: anElement.! !
!Catalogue methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:03:05'!
initializeWith: anElement
	
	elements _ OrderedCollection with: anElement .! !

!methodRemoval: Catalogue #initialize stamp: 'eb 11/16/2020 19:03:09'!
initialize
	
	elements _ OrderedCollection new .!
!Catalogue class methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:03:20' prior: 50995290!
with: anElement
	
	self new initializeWith: anElement yourself .! !
!Catalogue class methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:03:32' prior: 50995305!
with: anElement
	
	self new initializeWith: anElement yourself .! !
!Catalogue methodsFor: 'nil' stamp: 'eb 11/16/2020 19:04:08' overrides: 16896425!
initialize

	elements  _ OrderedCollection new .! !
!Catalogue methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:04:29'!
add: anElement
	
	elements add: anElement .! !

!methodRemoval: Catalogue #initializeWith: stamp: 'eb 11/16/2020 19:04:32'!
initializeWith: anElement
	
	elements _ OrderedCollection with: anElement .!
!Catalogue class methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:04:39' prior: 50995311!
with: anElement
	
	self new add: anElement yourself .! !
!Catalogue methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:05:31'!
with: anElement
	
	elements add: anElement .! !
!Catalogue methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:05:31' prior: 50995321!
add: anElement
	
	elements with: anElement .! !
!Catalogue class methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:05:31' prior: 50995331!
with: anElement
	
	self new with: anElement yourself .! !
!Catalogue methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:05:31' prior: 50995336!
with: anElement
	
	elements with: anElement .! !

!methodRemoval: Catalogue #add: stamp: 'eb 11/16/2020 19:05:32'!
add: anElement
	
	elements with: anElement .!
!Catalogue methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:05:35' prior: 50995351!
with: anElement
	
	elements add: anElement .! !
!Catalogue class methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:05:48' prior: 50995346!
with: anElement
	
	^ self new with: anElement yourself .! !

!classRemoval: #CatalogueTest stamp: 'eb 11/16/2020 19:06:01'!
TestCase subclass: #CatalogueTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:06:15'!
test02
	
	| cart catalogue |
	
	cart _ Cart new .
	
	self assert: cart isEmpty .! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:06:43' prior: 50995375!
test02
	
	| cart catalogue |
	
	cart _ Cart new .
	
	catalogue _ Catalogue with: 'book1' with: 'book2'.
	
	self deny: cart isEmpty .! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:07:15'!
test02CanAddToCartABookInCatalogue
	
	| cart catalogue |
	
	cart _ Cart new .
	
	catalogue _ Catalogue with: 'book1' with: 'book2'.
	
	self deny: cart isEmpty .! !

!methodRemoval: CartTest #test02 stamp: 'eb 11/16/2020 19:07:19'!
test02
	
	| cart catalogue |
	
	cart _ Cart new .
	
	catalogue _ Catalogue with: 'book1' with: 'book2'.
	
	self deny: cart isEmpty .!
!CartTest methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:09:21' prior: 50995388!
test02CanAddToCartABookInCatalogue
	
	| cart catalogue |
	
	cart _ Cart new .
	
	catalogue _ Catalogue with: 'book1' with: 'book2'.
	
	cart add: 'book1'.
	
	self deny: cart isEmpty .
	
	self assert: (cart has: 'book1').! !

!testRun: #CartTest #test02CanAddToCartABookInCatalogue stamp: 'eb 11/16/2020 19:09:38'!
ERROR!
!Catalogue class methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:10:31'!
with: anElement with: anotherElement
	
	| catalogue |
	
	catalogue _ self with: anElement.
	
	^ catalogue with: anotherElement yourself .! !

!testRun: #CartTest #test02CanAddToCartABookInCatalogue stamp: 'eb 11/16/2020 19:10:45'!
ERROR!

!testRun: #CartTest #test02CanAddToCartABookInCatalogue stamp: 'eb 11/16/2020 19:10:45'!
ERROR!
!Cart methodsFor: 'adding' stamp: 'eb 11/16/2020 19:11:21'!
add: aString 
	self shouldBeImplemented.! !

!classDefinition: #Cart category: #TusLibros stamp: 'eb 11/16/2020 19:12:01'!
Object subclass: #Cart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'adding' stamp: 'eb 11/16/2020 19:11:58' prior: 50995429!
add: aBook
	
	books add: aBook.! !

!testRun: #CartTest #test02CanAddToCartABookInCatalogue stamp: 'eb 11/16/2020 19:12:05'!
ERROR!
!CartTest methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:12:12'!
elementest02CanAddToCartABookInCatalogue
	
	| cart catalogue |
	
	cart _ Cart new .
	
	catalogue _ Catalogue with: 'book1' with: 'book2'.
	
	cart add: 'book1'.
	
	self deny: cart isEmpty .
	
	self assert: (cart has: 'book1').! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:12:14' prior: 50995403!
test02CanAddToCartABookInCatalogue
	
	| cart catalogue |
	
	cart _ Cart new .
	
	catalogue _ Catalogue with: 'book1' with: 'book2'.
	
	cart add: 'book1'.
	
	self deny: cart isEmpty .
	
	self assert: (cart has: 'book1').! !

!methodRemoval: CartTest #elementest02CanAddToCartABookInCatalogue stamp: 'eb 11/16/2020 19:12:21'!
elementest02CanAddToCartABookInCatalogue
	
	| cart catalogue |
	
	cart _ Cart new .
	
	catalogue _ Catalogue with: 'book1' with: 'book2'.
	
	cart add: 'book1'.
	
	self deny: cart isEmpty .
	
	self assert: (cart has: 'book1').!
!Cart methodsFor: 'nil' stamp: 'eb 11/16/2020 19:12:36' overrides: 16896425!
initialize
	
	books _ OrderedCollection new.! !

!classDefinition: #Catalogue category: #TusLibros stamp: 'eb 11/16/2020 19:13:10'!
Object subclass: #Catalogue
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Catalogue methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:13:10' prior: 50995316 overrides: 16896425!
initialize

	books  _ OrderedCollection new .! !
!Catalogue methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:13:10' prior: 50995359!
with: anElement
	
	books add: anElement .! !
!Catalogue methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:13:16' prior: 50995495!
with: aBook
	
	books add: aBook .! !
!Catalogue methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:13:25'!
add: aBook
	
	books add: aBook .! !
!Catalogue class methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:13:25'!
add: anElement
	
	^ self new with: anElement yourself .! !
!Catalogue class methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:13:25' prior: 50995364!
with: anElement
	
	^ self new add: anElement yourself .! !
!Catalogue class methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:13:25' prior: 50995416!
with: anElement with: anotherElement
	
	| catalogue |
	
	catalogue _ self add: anElement.
	
	^ catalogue add: anotherElement yourself .! !
!Catalogue class methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:13:25' prior: 50995508!
add: anElement
	
	^ self new add: anElement yourself .! !

!methodRemoval: Catalogue #with: stamp: 'eb 11/16/2020 19:13:25'!
with: aBook
	
	books add: aBook .!

!methodRemoval: Catalogue class #with: stamp: 'eb 11/16/2020 19:13:25'!
with: anElement
	
	^ self new add: anElement yourself .!
!Catalogue class methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:13:59'!
with: aBook
	
	^ self new add: aBook yourself .! !

!methodRemoval: Catalogue class #add: stamp: 'eb 11/16/2020 19:14:02'!
add: anElement
	
	^ self new add: anElement yourself .!
!Catalogue class methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:14:21' prior: 50995518!
with: aBook with: anotherBook
	
	| catalogue |
	
	catalogue _ self with: aBook.
	
	^ catalogue add: anotherBook yourself .! !

!testRun: #CartTest #test02CanAddToCartABookInCatalogue stamp: 'eb 11/16/2020 19:14:27'!
FAILURE!

!testRun: #CartTest #test02CanAddToCartABookInCatalogue stamp: 'eb 11/16/2020 19:14:27'!
FAILURE!
!Cart methodsFor: 'testing' stamp: 'eb 11/16/2020 19:14:54' prior: 50995235!
isEmpty

	^ books isEmpty .! !

!testRun: #CartTest #test02CanAddToCartABookInCatalogue stamp: 'eb 11/16/2020 19:14:59'!
ERROR!

!testRun: #CartTest #test02CanAddToCartABookInCatalogue stamp: 'eb 11/16/2020 19:15:00'!
ERROR!
!Cart methodsFor: 'testing' stamp: 'eb 11/16/2020 19:15:14'!
has: aString 
	self shouldBeImplemented.! !
!Cart methodsFor: 'testing' stamp: 'eb 11/16/2020 19:15:30' prior: 50995569!
has: aBook
	
	^ books includes: aBook.! !
!Cart methodsFor: 'testing' stamp: 'eb 11/16/2020 19:15:32' prior: 50995573!
has: aBook
	
	^ books includes: aBook.! !

!testRun: #CartTest #test02CanAddToCartABookInCatalogue stamp: 'eb 11/16/2020 19:15:33'!
PASSED!

!testRun: #CartTest #test02CanAddToCartABookInCatalogue stamp: 'eb 11/16/2020 19:15:36'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:16:09'!
test03CanNotAddToCartABookThatIsNotPresentInCatalogue
	
	| cart catalogue |
	
	cart _ Cart new .
	
	catalogue _ Catalogue with: 'book1' with: 'book2'.
	
	cart add: 'book1'.
	
	self deny: cart isEmpty .
	
	self assert: (cart has: 'book1').! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:16:54' prior: 50995587!
test03CanNotAddToCartABookThatIsNotPresentInCatalogue
	
	| cart catalogue |
	
	cart _ Cart new .
	
	catalogue _ Catalogue with: 'book1' with: 'book2'.
	
	cart add: 'book3'.
	
	self assert: cart isEmpty .
	
	self deny: (cart has: 'book3').! !

!testRun: #CartTest #test03CanNotAddToCartABookThatIsNotPresentInCatalogue stamp: 'eb 11/16/2020 19:17:02'!
FAILURE!

!testRun: #CartTest #test03CanNotAddToCartABookThatIsNotPresentInCatalogue stamp: 'eb 11/16/2020 19:17:02'!
FAILURE!
!CartTest methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:17:14' prior: 50995598!
test03CanNotAddToCartABookThatIsNotPresentInCatalogue
	
	| cart catalogue |
	
	cart _ Cart new .
	
	catalogue _ Catalogue with: 'book1' with: 'book2'.
	
	cart add: 'book3' from: catalogue.
	
	self assert: cart isEmpty .
	
	self deny: (cart has: 'book3').! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:17:23' prior: 50995458!
test02CanAddToCartABookInCatalogue
	
	| cart catalogue |
	
	cart _ Cart new .
	
	catalogue _ Catalogue with: 'book1' with: 'book2'.
	
	cart add: 'book1' from: catalogue .
	
	self deny: cart isEmpty .
	
	self assert: (cart has: 'book1').! !
!Cart methodsFor: 'adding' stamp: 'eb 11/16/2020 19:17:31'!
add: aBook from: aCatalogue
	
	books add: aBook.! !

!methodRemoval: Cart #add: stamp: 'eb 11/16/2020 19:17:34'!
add: aBook
	
	books add: aBook.!
!Cart methodsFor: 'adding' stamp: 'eb 11/16/2020 19:18:31' prior: 50995637!
add: aBook from: aCatalogue
	
	aCatalogue add: aBook to: self. ! !
!Catalogue methodsFor: 'adding' stamp: 'eb 11/16/2020 19:19:26'!
add: aBook to: aCart
	
	
	
	books add: aBook .! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:21:24' prior: 50995616!
test03CanNotAddToCartABookThatIsNotPresentInCatalogue
	
	| cart catalogue |
	
	cart _ Cart new .
	
	catalogue _ Catalogue with: 'book1' with: 'book2'.
	
	self should: [ cart add: 'book1' from: catalogue .]
		raise: Error
		withMessageText: Catalogue bookIsNotInCatalogueErrorDescription.
	
	self assert: cart isEmpty .
	
	self deny: (cart has: 'book3').! !

!testRun: #CartTest #test03CanNotAddToCartABookThatIsNotPresentInCatalogue stamp: 'eb 11/16/2020 19:21:37'!
ERROR!

!testRun: #CartTest #test03CanNotAddToCartABookThatIsNotPresentInCatalogue stamp: 'eb 11/16/2020 19:21:37'!
ERROR!
!Catalogue class methodsFor: 'error descriptions' stamp: 'eb 11/16/2020 19:21:47'!
bookIsNotInCatalogueErrorDescription
	self shouldBeImplemented.! !
!Catalogue class methodsFor: 'error descriptions' stamp: 'eb 11/16/2020 19:21:56' prior: 50995675!
bookIsNotInCatalogueErrorDescription
	
	^ 'Book is not in catalogue'.! !

!testRun: #CartTest #test03CanNotAddToCartABookThatIsNotPresentInCatalogue stamp: 'eb 11/16/2020 19:22:03'!
FAILURE!

!testRun: #CartTest #test03CanNotAddToCartABookThatIsNotPresentInCatalogue stamp: 'eb 11/16/2020 19:22:03'!
FAILURE!
!CartTest methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:22:10' prior: 50995654!
test03CanNotAddToCartABookThatIsNotPresentInCatalogue
	
	| cart catalogue |
	
	cart _ Cart new .
	
	catalogue _ Catalogue with: 'book1' with: 'book2'.
	
	self should: [ cart add: 'book1' from: catalogue . self fail.]
		raise: Error
		withMessageText: Catalogue bookIsNotInCatalogueErrorDescription.
	
	self assert: cart isEmpty .
	
	self deny: (cart has: 'book3').! !

!testRun: #CartTest #test03CanNotAddToCartABookThatIsNotPresentInCatalogue stamp: 'eb 11/16/2020 19:22:14'!
FAILURE!

!testRun: #CartTest #test03CanNotAddToCartABookThatIsNotPresentInCatalogue stamp: 'eb 11/16/2020 19:22:14'!
FAILURE!
!Catalogue methodsFor: 'adding' stamp: 'eb 11/16/2020 19:24:08' prior: 50995649!
add: aBook to: aCart
	
	(books includes: aBook) ifFalse: [self error: self class bookIsNotInCatalogueErrorDescription ].
	
	aCart add: aBook.! !
!Cart methodsFor: 'adding' stamp: 'eb 11/16/2020 19:24:23'!
add: aBook
	
	books add: aBook .! !

!testRun: #CartTest #test03CanNotAddToCartABookThatIsNotPresentInCatalogue stamp: 'eb 11/16/2020 19:24:26'!
FAILURE!

!testRun: #CartTest #test03CanNotAddToCartABookThatIsNotPresentInCatalogue stamp: 'eb 11/16/2020 19:24:26'!
FAILURE!
!CartTest methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:24:39' prior: 50995694!
test03CanNotAddToCartABookThatIsNotPresentInCatalogue
	
	| cart catalogue |
	
	cart _ Cart new .
	
	catalogue _ Catalogue with: 'book1' with: 'book2'.
	
	self should: [ cart add: 'book3' from: catalogue . self fail.]
		raise: Error
		withMessageText: Catalogue bookIsNotInCatalogueErrorDescription.
	
	self assert: cart isEmpty .
	
	self deny: (cart has: 'book3').! !

!testRun: #CartTest #test03CanNotAddToCartABookThatIsNotPresentInCatalogue stamp: 'eb 11/16/2020 19:24:40'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:25:14' prior: 50995735!
test03CanNotAddToCartABookThatIsNotPresentInCatalogue
	
	| cart catalogue |
	
	cart _ Cart new .
	
	catalogue _ Catalogue with: 'book1' with: 'book2'.
	
	self should: [ cart add: 'book3' from: catalogue . self fail.]
		raise: Error
		withMessageText: Catalogue bookIsNotInCatalogueErrorDescription.
	
	self assert: cart isEmpty .
	
	self deny: (cart has: 'book3').! !
!Cart methodsFor: 'adding' stamp: 'eb 11/16/2020 19:25:25' prior: 50995723!
add: aBook
	
	self halt .
	
	books add: aBook .! !

!testRun: #CartTest #test03CanNotAddToCartABookThatIsNotPresentInCatalogue stamp: 'eb 11/16/2020 19:25:28'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:27:03'!
test04
	
	| cart |
	
	cart _ Cart new.
	
	cart add: 'loquesea' .! !
!Cart methodsFor: 'adding' stamp: 'eb 11/16/2020 19:29:01' prior: 50995768!
add: aBook
	
	(thisContext sender isKindOf: Catalogue) ifTrue: [books add: aBook .].
	
	! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:29:30' prior: 50995776!
test04
	
	| cart |
	
	cart _ Cart new.
	
	cart add: 'loquesea' .
	
	self deny: (cart has: 'loquesea')! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:29:31' prior: 50995787!
test04
	
	| cart |
	
	cart _ Cart new.
	
	cart add: 'loquesea' .
	
	self deny: (cart has: 'loquesea').! !

!testRun: #CartTest #test04 stamp: 'eb 11/16/2020 19:29:33'!
PASSED!

!testRun: #CartTest #test04 stamp: 'eb 11/16/2020 19:29:37'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:30:43' prior: 50995794!
test04
	
	| cart catalogue |
	
	cart _ Cart new.
	
	catalogue _ Catalogue new .
	
	cart add: 'loquesea' from: catalogue .
	
	self deny: (cart has: 'loquesea').! !

!testRun: #CartTest #test04 stamp: 'eb 11/16/2020 19:30:44'!
ERROR!
!CartTest methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:30:56' prior: 50995805!
test04
	
	| cart |
	
	cart _ Cart new.
	
	cart add: 'loquesea' .
	
	self deny: (cart has: 'loquesea').! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:31:28'!
test00
	
	| cart |
	
	cart _ Cart new.
	
	cart add: 'loquesea' .
	
	self deny: (cart has: 'loquesea').! !

!methodRemoval: CartTest #test04 stamp: 'eb 11/16/2020 19:31:30'!
test04
	
	| cart |
	
	cart _ Cart new.
	
	cart add: 'loquesea' .
	
	self deny: (cart has: 'loquesea').!
!CartTest methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:32:00'!
test04MultipleBooksInCatalogueCanBeAddedToCart

	| cart catalogue |
	
	! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'eb 11/16/2020 19:32:41' prior: 50995834!
test04MultipleBooksInCatalogueCanBeAddedToCart

	| cart catalogue |
	
	cart _ Cart new .
	
	catalogue _ Catalogue with: 'book1' with: 'book2'.
	
	cart add: 'book1' from: catalogue .
	
	cart add: 'book2' from: catalogue .
	
	self deny: cart isEmpty .
	
	self assert: (cart has: 'book1').
	
	self assert: (cart has: 'book2').
	! !

!testRun: #CartTest #test04MultipleBooksInCatalogueCanBeAddedToCart stamp: 'eb 11/16/2020 19:32:42'!
FAILURE!

!testRun: #CartTest #test04MultipleBooksInCatalogueCanBeAddedToCart stamp: 'eb 11/16/2020 19:32:42'!
FAILURE!

!testRun: #CartTest #test04MultipleBooksInCatalogueCanBeAddedToCart stamp: 'eb 11/16/2020 19:32:52'!
FAILURE!

cart isEmpty !

!testRun: #CartTest #test01CartIsEmptyAtTheBeginning stamp: 'eb 11/16/2020 19:33:46'!
PASSED!

!testRun: #CartTest #test02CanAddToCartABookInCatalogue stamp: 'eb 11/16/2020 19:33:48'!
FAILURE!

!testRun: #CartTest #test02CanAddToCartABookInCatalogue stamp: 'eb 11/16/2020 19:33:48'!
FAILURE!
!Cart methodsFor: 'adding' stamp: 'eb 11/16/2020 19:34:14' prior: 50995781!
add: aBook
	
	self halt.
	
	(thisContext sender isKindOf: Catalogue) ifTrue: [books add: aBook .].
	
	! !

self sender isKindOf: Catalogue.!

self sender isKindOf: Catalogue.!

self sender class isKindOf: Catalogue .!

self sender class  = Catalogue!

----QUIT----(16 November 2020 20:15:46) CuisUniversity-4365.image priorSource: 21229256!

----STARTUP---- (17 November 2020 15:19:33) as C:\Program Files\CuisUniversity\CuisUniversity-4365.image!


----QUIT----(17 November 2020 15:30:54) CuisUniversity-4365.image priorSource: 21255450!

----STARTUP---- (26 November 2020 15:47:52) as C:\Program Files\CuisUniversity\CuisUniversity-4365.image!


!classRemoval: #TusLibrosAPI stamp: 'eb 11/26/2020 15:49:42'!
Object subclass: #TusLibrosAPI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Catalogue stamp: 'eb 11/26/2020 15:49:42'!
Object subclass: #Catalogue
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'eb 11/26/2020 15:49:42'!
Object subclass: #Cart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #TusLibrosAPITest stamp: 'eb 11/26/2020 15:49:43'!
TestCase subclass: #TusLibrosAPITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'eb 11/26/2020 15:49:43'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\ebonansea\Documents\Personal\Facultad\Ingenieria de software 1\Ejercicios propios\20-TusLibros\it-2\TusLibros.st----!

!classRemoval: #Trailer stamp: 'eb 11/26/2020 15:51:50'!
Object subclass: #Trailer
	instanceVariableNames: 'weightCapacity heightCapacity container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #WorkingNormal stamp: 'eb 11/26/2020 15:51:50'!
RobotState subclass: #WorkingNormal
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #SensorsFailure stamp: 'eb 11/26/2020 15:51:51'!
RobotState subclass: #SensorsFailure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #OutOfOrder stamp: 'eb 11/26/2020 15:51:51'!
RobotState subclass: #OutOfOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #MechanicalFailure stamp: 'eb 11/26/2020 15:51:51'!
RobotState subclass: #MechanicalFailure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #RobotState stamp: 'eb 11/26/2020 15:51:52'!
Object subclass: #RobotState
	instanceVariableNames: 'robot'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #Robot stamp: 'eb 11/26/2020 15:51:52'!
Object subclass: #Robot
	instanceVariableNames: 'status trailer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #ProductB stamp: 'eb 11/26/2020 15:51:52'!
Product subclass: #ProductB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #ProductA stamp: 'eb 11/26/2020 15:51:53'!
Product subclass: #ProductA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #Product stamp: 'eb 11/26/2020 15:51:53'!
Object subclass: #Product
	instanceVariableNames: 'weight height'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #TrailerTest stamp: 'eb 11/26/2020 15:51:54'!
TestCase subclass: #TrailerTest
	instanceVariableNames: 'trailer weightCapacity halfExceededHeightCapacity'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #RobotTest stamp: 'eb 11/26/2020 15:51:54'!
TestCase subclass: #RobotTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #ProductTest stamp: 'eb 11/26/2020 15:51:54'!
TestCase subclass: #ProductTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #MerchantProcessorSimulator stamp: 'eb 11/26/2020 15:52:07'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'lastTransactionId valid'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'eb 11/26/2020 15:52:07'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expiration owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'eb 11/26/2020 15:52:08'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'eb 11/26/2020 15:52:08'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCardTest stamp: 'eb 11/26/2020 15:52:09'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'eb 11/26/2020 15:52:09'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'eb 11/26/2020 15:52:09'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\ebonansea\Documents\Personal\Facultad\Ingenieria de software 1\Ejercicios propios\20-TusLibros\it-2\TusLibros.st----!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 15:53:16'!
test03CreditCardExpirationDateCanNotLessThanToday

	self should:[ CreditCard of: 'Alan Key' withNumber: 1234567891011121 andExpiration: FixedGregorianDate yesterday. self fail]
		raise: Error
		withMessageText: CreditCard dateCanNotLessThanTodayErrorDescription.! !

!methodRemoval: CreditCardTest #test03CreditCardDateCanNotLessThanToday stamp: 'eb 11/26/2020 15:53:16'!
test03CreditCardDateCanNotLessThanToday

	self should:[ CreditCard of: 'Alan Key' withNumber: 1234567891011121 andExpiration: FixedGregorianDate yesterday. self fail]
		raise: Error
		withMessageText: CreditCard dateCanNotLessThanTodayErrorDescription.!
!CreditCardTest methodsFor: 'test' stamp: 'eb 11/26/2020 16:15:52'!
test03CreditCardExpirationDateCanNotBeLessThanToday

	self should:[ CreditCard of: 'Alan Key' withNumber: 1234567891011121 andExpiration: FixedGregorianDate yesterday. self fail]
		raise: Error
		withMessageText: CreditCard dateCanNotLessThanTodayErrorDescription.! !

!methodRemoval: CreditCardTest #test03CreditCardExpirationDateCanNotLessThanToday stamp: 'eb 11/26/2020 16:15:52'!
test03CreditCardExpirationDateCanNotLessThanToday

	self should:[ CreditCard of: 'Alan Key' withNumber: 1234567891011121 andExpiration: FixedGregorianDate yesterday. self fail]
		raise: Error
		withMessageText: CreditCard dateCanNotLessThanTodayErrorDescription.!
!CreditCardTest methodsFor: 'test' stamp: 'eb 11/26/2020 16:16:12' prior: 50997072!
test03CreditCardExpirationDateCanNotBeLessThanToday

	self should:[ CreditCard of: 'Alan Key' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear yesterday. self fail]
		raise: Error
		withMessageText: CreditCard dateCanNotLessThanTodayErrorDescription.! !

!testRun: #CreditCardTest #test03CreditCardExpirationDateCanNotBeLessThanToday stamp: 'eb 11/26/2020 16:16:22'!
FAILURE!

!testRun: #CreditCardTest #test03CreditCardExpirationDateCanNotBeLessThanToday stamp: 'eb 11/26/2020 16:16:22'!
FAILURE!
!CreditCardTest methodsFor: 'test' stamp: 'eb 11/26/2020 16:17:38' prior: 50996780!
test02CreditCardNumberMustHaveSixteenDigits

	self should:[ CreditCard of: 'Alan Kay' withNumber: 0 andExpiration: FixedGregorianDate today. self fail]
		raise: Error
		withMessageText: CreditCard numberMustHaveSixteenDigitsErrorDescription.! !
!CreditCardTest methodsFor: 'test' stamp: 'eb 11/26/2020 16:17:47' prior: 50997096!
test03CreditCardExpirationDateCanNotBeLessThanToday

	self should:[ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear yesterday. self fail]
		raise: Error
		withMessageText: CreditCard dateCanNotLessThanTodayErrorDescription.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 16:18:01' prior: 50996958!
dateCanNotLessThanTodayErrorDescription
	
	^ 'Date can not be less than today'! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 16:18:16'!
dateCanNotBeLessThanTodayErrorDescription
	
	^ 'Date can not be less than today'! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 16:18:16' prior: 50996970!
of: anOwner withNumber: aNumber andExpiration: anExpiration

	( anOwner isEmpty ) ifTrue: [ self error: self ownerNameCanNotEmptyErrorDescription ].
	(aNumber asString size ~= 16) ifTrue: [ self error: self numberMustHaveSixteenDigitsErrorDescription ].
	(anExpiration < FixedGregorianDate today) ifTrue: [ self error: self dateCanNotBeLessThanTodayErrorDescription ].

	^ self new of: anOwner withNumber: aNumber andExpiration: anExpiration .! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 16:18:16' prior: 50997126!
test03CreditCardExpirationDateCanNotBeLessThanToday

	self should:[ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear yesterday. self fail]
		raise: Error
		withMessageText: CreditCard dateCanNotBeLessThanTodayErrorDescription.! !

!methodRemoval: CreditCard class #dateCanNotLessThanTodayErrorDescription stamp: 'eb 11/26/2020 16:18:16'!
dateCanNotLessThanTodayErrorDescription
	
	^ 'Date can not be less than today'!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 16:18:26' prior: 50996987!
ownerNameCanNotEmptyErrorDescription
	
	^ 'Owner name can not be empty'! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 16:18:37'!
ownerNameCanNotBeEmptyErrorDescription
	
	^ 'Owner name can not be empty'! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 16:18:37' prior: 50997150!
of: anOwner withNumber: aNumber andExpiration: anExpiration

	( anOwner isEmpty ) ifTrue: [ self error: self ownerNameCanNotBeEmptyErrorDescription ].
	(aNumber asString size ~= 16) ifTrue: [ self error: self numberMustHaveSixteenDigitsErrorDescription ].
	(anExpiration < FixedGregorianDate today) ifTrue: [ self error: self dateCanNotBeLessThanTodayErrorDescription ].

	^ self new of: anOwner withNumber: aNumber andExpiration: anExpiration .! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 16:18:37' prior: 50996769!
test01CreditCardOwnerNameCanNotEmpty

	self should:[ CreditCard of: '' withNumber: 1234567891011121 andExpiration: FixedGregorianDate today. self fail]
		raise: Error
		withMessageText: CreditCard ownerNameCanNotBeEmptyErrorDescription.! !

!methodRemoval: CreditCard class #ownerNameCanNotEmptyErrorDescription stamp: 'eb 11/26/2020 16:18:37'!
ownerNameCanNotEmptyErrorDescription
	
	^ 'Owner name can not be empty'!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 16:18:43'!
ownerNameCanNotEmBeptyErrorDescription
	
	^ 'Owner name can not be empty'! !

!methodRemoval: CreditCard class #ownerNameCanNotBeEmptyErrorDescription stamp: 'eb 11/26/2020 16:18:48'!
ownerNameCanNotBeEmptyErrorDescription
	
	^ 'Owner name can not be empty'!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 16:19:01'!
ownerNameCanNotBeEmptyErrorDescription
	
	^ 'Owner name can not be empty'! !

!methodRemoval: CreditCard class #ownerNameCanNotEmBeptyErrorDescription stamp: 'eb 11/26/2020 16:19:01'!
ownerNameCanNotEmBeptyErrorDescription
	
	^ 'Owner name can not be empty'!
!CreditCard class methodsFor: 'instance creation' stamp: 'eb 11/26/2020 16:19:44' prior: 50997198!
of: anOwner withNumber: aNumber andExpiration: anExpiration

	(anOwner isEmpty) ifTrue: [ self error: self ownerNameCanNotBeEmptyErrorDescription ].
	(aNumber asString size ~= 16) ifTrue: [ self error: self numberMustHaveSixteenDigitsErrorDescription ].
	(anExpiration < FixedGregorianDate today) ifTrue: [ self error: self dateCanNotBeLessThanTodayErrorDescription ].

	^ self new of: anOwner withNumber: aNumber andExpiration: anExpiration .! !
!CreditCard class methodsFor: 'instance creation' stamp: 'eb 11/26/2020 16:20:49' prior: 50997255!
of: anOwner withNumber: aNumber andExpiration: anExpiration

	(anOwner isEmpty) ifTrue: [ self error: self ownerNameCanNotBeEmptyErrorDescription ].
	(aNumber asString size ~= 16) ifTrue: [ self error: self numberMustHaveSixteenDigitsErrorDescription ].
	(anExpiration < GregorianMonthOfYear today) ifTrue: [ self error: self dateCanNotBeLessThanTodayErrorDescription ].

	^ self new of: anOwner withNumber: aNumber andExpiration: anExpiration .! !
!CreditCard class methodsFor: 'instance creation' stamp: 'eb 11/26/2020 16:21:30' prior: 50997273!
of: anOwner withNumber: aNumber andExpiration: anExpiration

	(anOwner isEmpty) ifTrue: [ self error: self ownerNameCanNotBeEmptyErrorDescription ].
	(aNumber asString size ~= 16) ifTrue: [ self error: self numberMustHaveSixteenDigitsErrorDescription ].
	(anExpiration < GregorianMonthOfYear current) ifTrue: [ self error: self dateCanNotBeLessThanTodayErrorDescription ].

	^ self new of: anOwner withNumber: aNumber andExpiration: anExpiration .! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'eb 11/26/2020 16:21:51'!
monthCanNotBeLessThanCurrentErrorDescription
	
	^ 'Date can not be less than today'! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 16:21:51' prior: 50997168!
test03CreditCardExpirationDateCanNotBeLessThanToday

	self should:[ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear yesterday. self fail]
		raise: Error
		withMessageText: CreditCard monthCanNotBeLessThanCurrentErrorDescription.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 16:21:51' prior: 50997291!
of: anOwner withNumber: aNumber andExpiration: anExpiration

	(anOwner isEmpty) ifTrue: [ self error: self ownerNameCanNotBeEmptyErrorDescription ].
	(aNumber asString size ~= 16) ifTrue: [ self error: self numberMustHaveSixteenDigitsErrorDescription ].
	(anExpiration < GregorianMonthOfYear current) ifTrue: [ self error: self monthCanNotBeLessThanCurrentErrorDescription ].

	^ self new of: anOwner withNumber: aNumber andExpiration: anExpiration .! !

!methodRemoval: CreditCard class #dateCanNotBeLessThanTodayErrorDescription stamp: 'eb 11/26/2020 16:21:51'!
dateCanNotBeLessThanTodayErrorDescription
	
	^ 'Date can not be less than today'!
!CreditCardTest methodsFor: 'test' stamp: 'eb 11/26/2020 16:22:16'!
test01CreditCardOwnerNameCanNotBeEmpty

	self should:[ CreditCard of: '' withNumber: 1234567891011121 andExpiration: FixedGregorianDate today. self fail]
		raise: Error
		withMessageText: CreditCard ownerNameCanNotBeEmptyErrorDescription.! !

!methodRemoval: CreditCardTest #test01CreditCardOwnerNameCanNotEmpty stamp: 'eb 11/26/2020 16:22:16'!
test01CreditCardOwnerNameCanNotEmpty

	self should:[ CreditCard of: '' withNumber: 1234567891011121 andExpiration: FixedGregorianDate today. self fail]
		raise: Error
		withMessageText: CreditCard ownerNameCanNotBeEmptyErrorDescription.!
!CreditCardTest methodsFor: 'test' stamp: 'eb 11/26/2020 16:22:40'!
test03CreditCardExpirationMonthCanNotBeLessThanCurrent

	self should:[ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear yesterday. self fail]
		raise: Error
		withMessageText: CreditCard monthCanNotBeLessThanCurrentErrorDescription.! !

!methodRemoval: CreditCardTest #test03CreditCardExpirationDateCanNotBeLessThanToday stamp: 'eb 11/26/2020 16:22:40'!
test03CreditCardExpirationDateCanNotBeLessThanToday

	self should:[ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear yesterday. self fail]
		raise: Error
		withMessageText: CreditCard monthCanNotBeLessThanCurrentErrorDescription.!

!testRun: #CreditCardTest #test01CreditCardOwnerNameCanNotBeEmpty stamp: 'eb 11/26/2020 16:23:22'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberMustHaveSixteenDigits stamp: 'eb 11/26/2020 16:23:22'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardExpirationMonthCanNotBeLessThanCurrent stamp: 'eb 11/26/2020 16:23:22'!
FAILURE!

!testRun: #CreditCardTest #test03CreditCardExpirationMonthCanNotBeLessThanCurrent stamp: 'eb 11/26/2020 16:23:22'!
FAILURE!

!testRun: #CreditCardTest #test01CreditCardOwnerNameCanNotBeEmpty stamp: 'eb 11/26/2020 16:23:36'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberMustHaveSixteenDigits stamp: 'eb 11/26/2020 16:23:39'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'eb 11/26/2020 16:23:53' prior: 50997349!
test01CreditCardOwnerNameCanNotBeEmpty

	self should:[ CreditCard of: '' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current. self fail]
		raise: Error
		withMessageText: CreditCard ownerNameCanNotBeEmptyErrorDescription.! !
!CreditCardTest methodsFor: 'test' stamp: 'eb 11/26/2020 16:24:02' prior: 50997115!
test02CreditCardNumberMustHaveSixteenDigits

	self should:[ CreditCard of: 'Alan Kay' withNumber: 0 andExpiration: GregorianMonthOfYear current. self fail]
		raise: Error
		withMessageText: CreditCard numberMustHaveSixteenDigitsErrorDescription.! !
!CreditCardTest methodsFor: 'test' stamp: 'eb 11/26/2020 16:24:44' prior: 50997370!
test03CreditCardExpirationMonthCanNotBeLessThanCurrent

	self should:[ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: (GregorianMonthOfYear year: 2020 month: April). self fail]
		raise: Error
		withMessageText: CreditCard monthCanNotBeLessThanCurrentErrorDescription.! !

!testRun: #CreditCardTest #test03CreditCardExpirationMonthCanNotBeLessThanCurrent stamp: 'eb 11/26/2020 16:24:49'!
FAILURE!

!testRun: #CreditCardTest #test03CreditCardExpirationMonthCanNotBeLessThanCurrent stamp: 'eb 11/26/2020 16:24:49'!
FAILURE!
!CreditCardTest methodsFor: 'test' stamp: 'eb 11/26/2020 16:26:10' prior: 50997438!
test03CreditCardExpirationMonthCanNotBeLessThanCurrent

	self should:[ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: (GregorianMonthOfYear yearNumber: 2020 monthNumber: April). self fail]
		raise: Error
		withMessageText: CreditCard monthCanNotBeLessThanCurrentErrorDescription.! !

!testRun: #CreditCardTest #test03CreditCardExpirationMonthCanNotBeLessThanCurrent stamp: 'eb 11/26/2020 16:26:12'!
FAILURE!

!testRun: #CreditCardTest #test03CreditCardExpirationMonthCanNotBeLessThanCurrent stamp: 'eb 11/26/2020 16:26:12'!
FAILURE!
!CreditCardTest methodsFor: 'test' stamp: 'eb 11/26/2020 16:26:19' prior: 50997458!
test03CreditCardExpirationMonthCanNotBeLessThanCurrent

	self should:[ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: (GregorianMonthOfYear yearNumber: 2020 monthNumber: 1). self fail]
		raise: Error
		withMessageText: CreditCard monthCanNotBeLessThanCurrentErrorDescription.! !

!testRun: #CreditCardTest #test03CreditCardExpirationMonthCanNotBeLessThanCurrent stamp: 'eb 11/26/2020 16:26:20'!
PASSED!
!CashierTest methodsFor: 'empty cashier' stamp: 'eb 11/26/2020 16:29:00' prior: 50996677!
test01CashierCanNotCheckoutWithEmptyCart

	| cashier cart aCatalog creditCard |
	
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	
	self should: [ cashier checkout: cart with: creditCard using: merchantProcessor . self fail] 
		raise: Error
		withMessageText: Cashier canNotCheckoutForEmptyCartErrorDescription.
! !
!CashierTest methodsFor: 'not empty cashier' stamp: 'eb 11/26/2020 16:30:19' prior: 50996695!
test02CashierCheckoutWithCartWithAnElement

	| cashier cart aCatalog creditCard transactionId |
	
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	aCatalog add: 'book1' -> 2.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	cart add: 'book1' .
	
	transactionId _ cashier checkout: cart with: creditCard using: merchantProcessor.
	self assert: merchantProcessor lastTransactionId equals: transactionId.! !
!CashierTest methodsFor: 'not empty cashier' stamp: 'eb 11/26/2020 16:30:27' prior: 50996714!
test03CashierCheckoutWithCartWithManyElements

	| cashier cart aCatalog creditCard transactionId |
	
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	aCatalog add: 'book1' -> 2; add: 'book2' -> 3; add: 'book3' -> 4.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	
	cart add: 'book1'.
	cart add: 2 of: 'book2'. 
	
	transactionId _ cashier checkout: cart with: creditCard using: merchantProcessor.
	self assert: merchantProcessor lastTransactionId equals: transactionId.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 16:32:36' prior: 50996893!
checkout: aCart with: aCreditCard using: aMerchantProcessor

	| price |
	
	price _ self priceOf: aCart.
	
	(aCart isEmpty) ifTrue: [ self error: self class canNotCheckoutForEmptyCartErrorDescription ].
	
	^ [ aMerchantProcessor pay: price with: aCreditCard ] on:Error do:[ self error: self class errorInMerchantProcessorErrorDescription ].! !
!Cashier methodsFor: 'checkout' stamp: 'eb 11/26/2020 16:37:30' prior: 50997557!
checkout: aCart with: aCreditCard using: aMerchantProcessor

	| price |
	
	price _ self priceOf: aCart.
	
	(aCart isEmpty) ifTrue: [ self error: self class canNotCheckoutForEmptyCartErrorDescription ].
	
	^ [ aMerchantProcessor pay: price with: aCreditCard ] on:Error do:[ self error: self class errorInMerchantProcessorErrorDescription ].! !

!methodRemoval: Cashier #priceOf: stamp: 'eb 11/26/2020 16:37:59'!
priceOf: aCart

	 ^ aCart price.!
!Cashier methodsFor: 'checkout' stamp: 'eb 11/26/2020 16:38:19' prior: 50997571!
checkout: aCart with: aCreditCard using: aMerchantProcessor

	| price |

	(aCart isEmpty) ifTrue: [ self error: self class canNotCheckoutForEmptyCartErrorDescription ].
	price _ aCart price.
	^ [ aMerchantProcessor pay: price with: aCreditCard ] on:Error do:[ self error: self class errorInMerchantProcessorErrorDescription ].! !
!Cashier methodsFor: 'checkout' stamp: 'eb 11/26/2020 16:38:23' prior: 50997588!
checkout: aCart with: aCreditCard using: aMerchantProcessor
	| price |

	(aCart isEmpty) ifTrue: [ self error: self class canNotCheckoutForEmptyCartErrorDescription ].
	price _ aCart price.
	^ [ aMerchantProcessor pay: price with: aCreditCard ] on:Error do:[ self error: self class errorInMerchantProcessorErrorDescription ].! !
!Cashier methodsFor: 'checkout' stamp: 'eb 11/26/2020 16:38:26' prior: 50997601!
checkout: aCart with: aCreditCard using: aMerchantProcessor
	| price |
	(aCart isEmpty) ifTrue: [ self error: self class canNotCheckoutForEmptyCartErrorDescription ].
	price _ aCart price.
	^ [ aMerchantProcessor pay: price with: aCreditCard ] on:Error do:[ self error: self class errorInMerchantProcessorErrorDescription ].! !
!Cashier methodsFor: 'checkout' stamp: 'eb 11/26/2020 16:38:53' prior: 50997614!
checkout: aCart with: aCreditCard using: aMerchantProcessor
	| price |
	(aCart isEmpty) ifTrue: [ self error: self class canNotCheckoutForEmptyCartErrorDescription ].
	price _ aCart price.
	^ [ aMerchantProcessor pay: price with: aCreditCard ] 
		on:Error 
		do:[ self error: self class errorInMerchantProcessorErrorDescription ].! !
!Cashier methodsFor: 'checkout' stamp: 'eb 11/26/2020 16:38:59' prior: 50997627!
checkout: aCart with: aCreditCard using: aMerchantProcessor
	| price |
	(aCart isEmpty) ifTrue: [ self error: self class canNotCheckoutForEmptyCartErrorDescription ].
	price _ aCart price.
	^ [ aMerchantProcessor pay: price with: aCreditCard ] 
		on: Error 
		do: [ self error: self class errorInMerchantProcessorErrorDescription ].! !

Object subclass: #Ticket
	instanceVariableNames: 'transactionId amount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Ticket category: #TusLibros stamp: 'eb 11/26/2020 16:40:12'!
Object subclass: #Ticket
	instanceVariableNames: 'transactionId amount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Ticket methodsFor: 'accessing' stamp: 'eb 11/26/2020 16:40:32'!
transactionId

	^ transactionId .! !
!Ticket methodsFor: 'accessing' stamp: 'eb 11/26/2020 16:40:44'!
amount

	^ amount .! !
!Ticket methodsFor: 'initialization' stamp: 'eb 11/26/2020 16:41:29'!
initializeWith: aTransactionId of: anAmount

	transactionId _ aTransactionId .
	
	amount _ anAmount .! !
!Ticket class methodsFor: 'no messages' stamp: 'eb 11/26/2020 16:42:17'!
with: aTransactionId of: anAmount

	^ self new initializeWith: aTransactionId of: anAmount .! !
!CashierTest methodsFor: 'not empty cashier' stamp: 'eb 11/26/2020 16:44:49' prior: 50997515!
test02CashierCheckoutWithCartWithAnElement

	| cashier cart aCatalog creditCard ticket |
	
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	aCatalog add: 'book1' -> 2.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	cart add: 'book1' .
	ticket _ cashier checkout: cart with: creditCard using: merchantProcessor.
	
	self assert: (aCatalog at: 'book1') equals: (ticket amount).
	self assert: merchantProcessor lastTransactionId equals: (ticket transactionId ).! !
!CashierTest methodsFor: 'not empty cashier' stamp: 'eb 11/26/2020 16:44:51' prior: 50997685!
test02CashierCheckoutWithCartWithAnElement

	| cashier cart aCatalog creditCard ticket |
	
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	aCatalog add: 'book1' -> 2.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	cart add: 'book1' .
	ticket _ cashier checkout: cart with: creditCard using: merchantProcessor.
	
	self assert: (aCatalog at: 'book1') equals: (ticket amount).
	self assert: merchantProcessor lastTransactionId equals: (ticket transactionId).! !

Object subclass: #Cashier
	instanceVariableNames: 'lastTransactionId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'eb 11/26/2020 16:45:19'!
Object subclass: #Cashier
	instanceVariableNames: 'lastTransactionId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'nil' stamp: 'eb 11/26/2020 16:45:36'!
iniitalize
	
	lastTransactionId _ 0.! !
!Cashier methodsFor: 'initialization' stamp: 'eb 11/26/2020 16:45:58' overrides: 16896425!
initialize
	
	lastTransactionId _ 0.! !

!methodRemoval: Cashier #iniitalize stamp: 'eb 11/26/2020 16:45:58'!
iniitalize
	
	lastTransactionId _ 0.!
!Cashier methodsFor: 'initialization' stamp: 'eb 11/26/2020 16:46:05' prior: 50997744 overrides: 16896425!
initialize
	
	super initialize .
	
	lastTransactionId _ 0.! !
!Cashier methodsFor: 'nil' stamp: 'eb 11/26/2020 16:46:34'!
lastTransactionId
	
	^ lastTransactionId .! !
!CashierTest methodsFor: 'not empty cashier' stamp: 'eb 11/26/2020 16:47:10' prior: 50997707!
test02CashierCheckoutWithCartWithAnElement

	| cashier cart aCatalog creditCard ticket |
	
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	aCatalog add: 'book1' -> 2.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	cart add: 'book1' .
	ticket _ cashier checkout: cart with: creditCard using: merchantProcessor.
	
	self assert: (aCatalog at: 'book1') equals: ticket amount.
	self assert: cashier lastTransactionId equals: ticket transactionId.! !

!testRun: #CashierTest #test02CashierCheckoutWithCartWithAnElement stamp: 'eb 11/26/2020 16:47:15'!
FAILURE!

!testRun: #CashierTest #test02CashierCheckoutWithCartWithAnElement stamp: 'eb 11/26/2020 16:47:15'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'eb 11/26/2020 16:48:12' prior: 50997641!
checkout: aCart with: aCreditCard using: aMerchantProcessor
	| price |
	(aCart isEmpty) ifTrue: [ self error: self class canNotCheckoutForEmptyCartErrorDescription ].
	price _ aCart price.
	[ aMerchantProcessor pay: price with: aCreditCard ] 
		on: Error 
		do: [ self error: self class errorInMerchantProcessorErrorDescription ].
		
	lastTransactionId _ lastTransactionId + 1.
		
	^ Ticket with: lastTransactionId of: price .! !

!testRun: #CashierTest #test02CashierCheckoutWithCartWithAnElement stamp: 'eb 11/26/2020 16:48:20'!
PASSED!

!testRun: #CashierTest #test03CashierCheckoutWithCartWithManyElements stamp: 'eb 11/26/2020 16:48:22'!
FAILURE!

!testRun: #CashierTest #test03CashierCheckoutWithCartWithManyElements stamp: 'eb 11/26/2020 16:48:22'!
FAILURE!
!CashierTest methodsFor: 'not empty cashier' stamp: 'eb 11/26/2020 16:48:51' prior: 50997535!
test03CashierCheckoutWithCartWithManyElements

	| cashier cart aCatalog creditCard transactionId |
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	aCatalog add: 'book1' -> 2; add: 'book2' -> 3; add: 'book3' -> 4.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	cart add: 'book1'.
	cart add: 2 of: 'book2'. 
	transactionId _ cashier checkout: cart with: creditCard using: merchantProcessor.
	self assert: merchantProcessor lastTransactionId equals: transactionId.! !
!CashierTest methodsFor: 'not empty cashier' stamp: 'eb 11/26/2020 16:49:02' prior: 50997761!
test02CashierCheckoutWithCartWithAnElement

	| cashier cart aCatalog creditCard ticket |
	
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	aCatalog add: 'book1' -> 2.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	cart add: 'book1' .
	ticket _ cashier checkout: cart with: creditCard using: merchantProcessor.
	
	self assert: cart price equals: ticket amount.
	self assert: cashier lastTransactionId equals: ticket transactionId.! !

!testRun: #CashierTest #test02CashierCheckoutWithCartWithAnElement stamp: 'eb 11/26/2020 16:49:04'!
PASSED!
!CashierTest methodsFor: 'not empty cashier' stamp: 'eb 11/26/2020 16:49:30' prior: 50997816!
test03CashierCheckoutWithCartWithManyElements

	| cashier cart aCatalog creditCard ticket |
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	aCatalog add: 'book1' -> 2; add: 'book2' -> 3; add: 'book3' -> 4.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	cart add: 'book1'.
	cart add: 2 of: 'book2'. 
	ticket _ cashier checkout: cart with: creditCard using: merchantProcessor.
	
	self assert: cart price equals: ticket amount.
	
	self assert: cashier lastTransactionId equals: ticket transactionId.! !

!testRun: #CashierTest #test03CashierCheckoutWithCartWithManyElements stamp: 'eb 11/26/2020 16:49:32'!
PASSED!

!testRun: #CashierTest #test04CanNotBuyOnMerchantProcessorError stamp: 'eb 11/26/2020 16:49:37'!
ERROR!

!testRun: #CashierTest #test04CanNotBuyOnMerchantProcessorError stamp: 'eb 11/26/2020 16:49:37'!
ERROR!
!CashierTest methodsFor: 'not empty cashier' stamp: 'eb 11/26/2020 16:50:06' prior: 50996736!
test04CanNotBuyOnMerchantProcessorError

	| cashier cart aCatalog creditCard |
	
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	aCatalog add: 'book1' -> 2; add: 'book2' -> 3; add: 'book3' -> 4.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	
	cart add: 'book1'.
	
	merchantProcessor invalidate.
	
	self should: [cashier checkout: cart with: creditCard using: merchantProcessor. self fail]
		raise: Error  
		withMessageText: Cashier errorInMerchantProcessorErrorDescription.
! !

!testRun: #CashierTest #test04CanNotBuyOnMerchantProcessorError stamp: 'eb 11/26/2020 16:50:07'!
PASSED!
!CashierTest methodsFor: 'empty cashier' stamp: 'eb 11/26/2020 16:52:56' prior: 50997496!
test01CashierCanNotCheckoutWithEmptyCart
	| cashier cart aCatalog creditCard previousTransactionId |
	
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	previousTransactionId _ cashier lastTransactionId .
	
	self should: [ cashier checkout: cart with: creditCard using: merchantProcessor . self fail] 
		raise: Error
		withMessageText: Cashier canNotCheckoutForEmptyCartErrorDescription.
		
	self assert: cashier lastTransactionId equals: previousTransactionId .
! !

!testRun: #CashierTest #test01CashierCanNotCheckoutWithEmptyCart stamp: 'eb 11/26/2020 16:52:57'!
PASSED!
!CashierTest methodsFor: 'not empty cashier' stamp: 'eb 11/26/2020 16:53:51' prior: 50997895!
test04CanNotBuyOnMerchantProcessorError
	| cashier cart aCatalog creditCard previousTransactionId |
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	aCatalog add: 'book1' -> 2; add: 'book2' -> 3; add: 'book3' -> 4.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	cart add: 'book1'.
	
	previousTransactionId _ cashier lastTransactionId .
	merchantProcessor invalidate.
	self should: [cashier checkout: cart with: creditCard using: merchantProcessor. self fail]
		raise: Error  
		withMessageText: Cashier errorInMerchantProcessorErrorDescription.
	self assert: cashier lastTransactionId equals: previousTransactionId .	
! !

!testRun: #CashierTest #test04CanNotBuyOnMerchantProcessorError stamp: 'eb 11/26/2020 16:53:52'!
PASSED!

Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorSimulator category: #TusLibros stamp: 'eb 11/26/2020 16:57:52'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorSimulator category: #TusLibros stamp: 'eb 11/26/2020 16:58:01'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'state' stamp: 'eb 11/26/2020 16:58:12'!
state

	^ state. ! !

!methodRemoval: MerchantProcessorSimulator #state stamp: 'eb 11/26/2020 16:58:16'!
state

	^ state. !

!methodRemoval: MerchantProcessorSimulator #invalidate stamp: 'eb 11/26/2020 16:58:19'!
invalidate

	valid _ false.!

!methodRemoval: MerchantProcessorSimulator #lastTransactionId stamp: 'eb 11/26/2020 16:58:25'!
lastTransactionId

	^ lastTransactionId!
!MerchantProcessorSimulator methodsFor: 'accessing' stamp: 'eb 11/26/2020 16:58:36'!
state
	
	^ state .! !
!MerchantProcessorSimulator methodsFor: 'initialization' stamp: 'eb 11/26/2020 16:58:51' prior: 50997007 overrides: 16896425!
initialize
	state _ #WorkingNormal. ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'eb 11/26/2020 16:58:55'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 16:58:55'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'eb 11/26/2020 16:58:55'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'eb 11/26/2020 16:58:55'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'eb 11/26/2020 16:58:55'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'eb 11/26/2020 16:58:55'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'eb 11/26/2020 16:58:55'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'eb 11/26/2020 16:58:55'!
ERROR!

!testRun: #CashierTest #test01CashierCanNotCheckoutWithEmptyCart stamp: 'eb 11/26/2020 16:58:55'!
PASSED!

!testRun: #CashierTest #test02CashierCheckoutWithCartWithAnElement stamp: 'eb 11/26/2020 16:58:55'!
ERROR!

!testRun: #CashierTest #test03CashierCheckoutWithCartWithManyElements stamp: 'eb 11/26/2020 16:58:55'!
ERROR!

!testRun: #CashierTest #test04CanNotBuyOnMerchantProcessorError stamp: 'eb 11/26/2020 16:58:55'!
ERROR!

!testRun: #CreditCardTest #test01CreditCardOwnerNameCanNotBeEmpty stamp: 'eb 11/26/2020 16:58:55'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberMustHaveSixteenDigits stamp: 'eb 11/26/2020 16:58:55'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardExpirationMonthCanNotBeLessThanCurrent stamp: 'eb 11/26/2020 16:58:55'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'eb 11/26/2020 16:59:02'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 16:59:02'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'eb 11/26/2020 16:59:02'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'eb 11/26/2020 16:59:02'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'eb 11/26/2020 16:59:02'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'eb 11/26/2020 16:59:02'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'eb 11/26/2020 16:59:02'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'eb 11/26/2020 16:59:02'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 16:59:05'!
ERROR!

!testRun: #CreditCardTest #test01CreditCardOwnerNameCanNotBeEmpty stamp: 'eb 11/26/2020 16:59:17'!
PASSED!

!testRun: #CashierTest #test01CashierCanNotCheckoutWithEmptyCart stamp: 'eb 11/26/2020 16:59:20'!
PASSED!

!testRun: #CashierTest #test02CashierCheckoutWithCartWithAnElement stamp: 'eb 11/26/2020 16:59:22'!
ERROR!

!testRun: #CashierTest #test02CashierCheckoutWithCartWithAnElement stamp: 'eb 11/26/2020 16:59:22'!
ERROR!
!MerchantProcessorSimulator methodsFor: 'operations' stamp: 'eb 11/26/2020 17:02:08' prior: 50997021!
pay: aPrice with: aCreditCard 
	(state = #StolenCreditCard) ifTrue: [ self error: self class stolenCreditCardErrorDescription] .
	
	(state = #NotEnoughCredit) ifTrue: [ self error: self class notEnoughCreditErrorDescription] .
	^ self .
! !
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 17:02:32'!
stolenCreditCardErrorDescription

	^ 'Credit card is stolen.'! !
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 17:02:53'!
notEnoughCreditErrorDescription

	^ 'Credit is not enough.'! !

!methodRemoval: MerchantProcessorSimulator class #errorDoingTransactionErrorDescription stamp: 'eb 11/26/2020 17:02:55'!
errorDoingTransactionErrorDescription

	^ 'Error doing transaction error description'!

!methodRemoval: MerchantProcessorSimulator #state stamp: 'eb 11/26/2020 17:03:26'!
state
	
	^ state .!
!MerchantProcessorSimulator methodsFor: 'nil' stamp: 'eb 11/26/2020 17:04:06'!
asStolenCreditCard
	
	state _ #StolenCreditCard.
	
	^ self .! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 17:04:23'!
asNotEnoughCredit
	
	state _ #NotEnoughCredit.
	
	^ self .! !
!CashierTest methodsFor: 'test' stamp: 'eb 11/26/2020 17:06:25'!
test04CanNotBuyWithStolenCreditCard
	| cashier cart aCatalog creditCard previousTransactionId |
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	aCatalog add: 'book1' -> 2; add: 'book2' -> 3; add: 'book3' -> 4.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	cart add: 'book1'.
	
	previousTransactionId _ cashier lastTransactionId .
	self should: [cashier checkout: cart with: creditCard using: merchantProcessor asStolenCreditCard . self fail]
		raise: Error  
		withMessageText: Cashier errorInMerchantProcessorErrorDescription.
	self assert: cashier lastTransactionId equals: previousTransactionId .	
! !

!methodRemoval: CashierTest #test04CanNotBuyOnMerchantProcessorError stamp: 'eb 11/26/2020 17:06:29'!
test04CanNotBuyOnMerchantProcessorError
	| cashier cart aCatalog creditCard previousTransactionId |
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	aCatalog add: 'book1' -> 2; add: 'book2' -> 3; add: 'book3' -> 4.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	cart add: 'book1'.
	
	previousTransactionId _ cashier lastTransactionId .
	merchantProcessor invalidate.
	self should: [cashier checkout: cart with: creditCard using: merchantProcessor. self fail]
		raise: Error  
		withMessageText: Cashier errorInMerchantProcessorErrorDescription.
	self assert: cashier lastTransactionId equals: previousTransactionId .	
!

!testRun: #CashierTest #test04CanNotBuyWithStolenCreditCard stamp: 'eb 11/26/2020 17:06:31'!
PASSED!
!MerchantProcessorSimulator methodsFor: 'state' stamp: 'eb 11/26/2020 17:06:53'!
withStolenCreditCard
	
	state _ #StolenCreditCard.
	
	^ self .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 17:06:53' prior: 50998160!
test04CanNotBuyWithStolenCreditCard
	| cashier cart aCatalog creditCard previousTransactionId |
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	aCatalog add: 'book1' -> 2; add: 'book2' -> 3; add: 'book3' -> 4.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	cart add: 'book1'.
	
	previousTransactionId _ cashier lastTransactionId .
	self should: [cashier checkout: cart with: creditCard using: merchantProcessor withStolenCreditCard . self fail]
		raise: Error  
		withMessageText: Cashier errorInMerchantProcessorErrorDescription.
	self assert: cashier lastTransactionId equals: previousTransactionId .	
! !

!methodRemoval: MerchantProcessorSimulator #asStolenCreditCard stamp: 'eb 11/26/2020 17:06:53'!
asStolenCreditCard
	
	state _ #StolenCreditCard.
	
	^ self .!
!CashierTest methodsFor: 'test' stamp: 'eb 11/26/2020 17:07:35'!
test04CanNotBuyWithNotEnoughCredit
	| cashier cart aCatalog creditCard previousTransactionId |
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	aCatalog add: 'book1' -> 2; add: 'book2' -> 3; add: 'book3' -> 4.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	cart add: 'book1'.
	
	previousTransactionId _ cashier lastTransactionId .
	self should: [cashier checkout: cart with: creditCard using: merchantProcessor asNotEnoughCredit . self fail]
		raise: Error  
		withMessageText: Cashier errorInMerchantProcessorErrorDescription.
	self assert: cashier lastTransactionId equals: previousTransactionId .	
! !
!CashierTest methodsFor: 'test' stamp: 'eb 11/26/2020 17:07:47'!
test05CanNotBuyWithNotEnoughCredit
	| cashier cart aCatalog creditCard previousTransactionId |
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	aCatalog add: 'book1' -> 2; add: 'book2' -> 3; add: 'book3' -> 4.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	cart add: 'book1'.
	
	previousTransactionId _ cashier lastTransactionId .
	self should: [cashier checkout: cart with: creditCard using: merchantProcessor asNotEnoughCredit . self fail]
		raise: Error  
		withMessageText: Cashier errorInMerchantProcessorErrorDescription.
	self assert: cashier lastTransactionId equals: previousTransactionId .	
! !

!methodRemoval: CashierTest #test04CanNotBuyWithNotEnoughCredit stamp: 'eb 11/26/2020 17:07:47'!
test04CanNotBuyWithNotEnoughCredit
	| cashier cart aCatalog creditCard previousTransactionId |
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	aCatalog add: 'book1' -> 2; add: 'book2' -> 3; add: 'book3' -> 4.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	cart add: 'book1'.
	
	previousTransactionId _ cashier lastTransactionId .
	self should: [cashier checkout: cart with: creditCard using: merchantProcessor asNotEnoughCredit . self fail]
		raise: Error  
		withMessageText: Cashier errorInMerchantProcessorErrorDescription.
	self assert: cashier lastTransactionId equals: previousTransactionId .	
!

!testRun: #CashierTest #test05CanNotBuyWithNotEnoughCredit stamp: 'eb 11/26/2020 17:07:48'!
PASSED!
!MerchantProcessorSimulator methodsFor: 'state' stamp: 'eb 11/26/2020 17:08:13'!
withNotEnoughCredit
	
	state _ #NotEnoughCredit.
	
	^ self .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 17:08:13' prior: 50998277!
test05CanNotBuyWithNotEnoughCredit
	| cashier cart aCatalog creditCard previousTransactionId |
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	aCatalog add: 'book1' -> 2; add: 'book2' -> 3; add: 'book3' -> 4.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	cart add: 'book1'.
	
	previousTransactionId _ cashier lastTransactionId .
	self should: [cashier checkout: cart with: creditCard using: merchantProcessor withNotEnoughCredit . self fail]
		raise: Error  
		withMessageText: Cashier errorInMerchantProcessorErrorDescription.
	self assert: cashier lastTransactionId equals: previousTransactionId .	
! !

!methodRemoval: MerchantProcessorSimulator #asNotEnoughCredit stamp: 'eb 11/26/2020 17:08:13'!
asNotEnoughCredit
	
	state _ #NotEnoughCredit.
	
	^ self .!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 17:09:14'!
canNotCheckoutWithStolenCreditCardErrorDescription
	
	^ 'Can not checkout with stolen credit card error description'! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 17:09:38'!
canNotCheckoutWithNotEnoughCreditErrorDescription
	
	^ 'Can not checkout with not enough credit'.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 17:09:43' prior: 50998368!
canNotCheckoutWithStolenCreditCardErrorDescription
	
	^ 'Can not checkout with stolen credit card'.! !

!methodRemoval: Cashier class #errorInMerchantProcessorErrorDescription stamp: 'eb 11/26/2020 17:09:46'!
errorInMerchantProcessorErrorDescription
	
	^ 'Error in merchant processor'!
!CashierTest methodsFor: 'test' stamp: 'eb 11/26/2020 17:10:13' prior: 50998222!
test04CanNotBuyWithStolenCreditCard
	| cashier cart aCatalog creditCard previousTransactionId |
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	aCatalog add: 'book1' -> 2; add: 'book2' -> 3; add: 'book3' -> 4.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	cart add: 'book1'.
	
	previousTransactionId _ cashier lastTransactionId .
	self should: [cashier checkout: cart with: creditCard using: merchantProcessor withStolenCreditCard . self fail]
		raise: Error  
		withMessageText: Cashier canNotCheckoutWithStolenCreditCardErrorDescription .
	self assert: cashier lastTransactionId equals: previousTransactionId .	
! !
!CashierTest methodsFor: 'test' stamp: 'eb 11/26/2020 17:10:25' prior: 50998337!
test05CanNotBuyWithNotEnoughCredit
	| cashier cart aCatalog creditCard previousTransactionId |
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	aCatalog add: 'book1' -> 2; add: 'book2' -> 3; add: 'book3' -> 4.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	cart add: 'book1'.
	
	previousTransactionId _ cashier lastTransactionId .
	self should: [cashier checkout: cart with: creditCard using: merchantProcessor withNotEnoughCredit . self fail]
		raise: Error  
		withMessageText: Cashier canNotCheckoutWithNotEnoughCreditErrorDescription .
	self assert: cashier lastTransactionId equals: previousTransactionId .	
! !

Object subclass: #StolenCreditCardError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StolenCreditCardError category: #TusLibros stamp: 'eb 11/26/2020 17:11:17'!
Object subclass: #StolenCreditCardError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #NotEnoughCreditError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #NotEnoughCreditError category: #TusLibros stamp: 'eb 11/26/2020 17:11:26'!
Object subclass: #NotEnoughCreditError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!methodRemoval: MerchantProcessorSimulator class #notEnoughCreditErrorDescription stamp: 'eb 11/26/2020 17:11:39'!
notEnoughCreditErrorDescription

	^ 'Credit is not enough.'!

!methodRemoval: MerchantProcessorSimulator class #stolenCreditCardErrorDescription stamp: 'eb 11/26/2020 17:11:39'!
stolenCreditCardErrorDescription

	^ 'Credit card is stolen.'!
!MerchantProcessorSimulator methodsFor: 'operations' stamp: 'eb 11/26/2020 17:13:04' prior: 50998119!
pay: aPrice with: aCreditCard 
	(state = #StolenCreditCard) ifTrue: [ self error: StolenCreditCardError ] .
	
	(state = #NotEnoughCredit) ifTrue: [ self error: NotEnoughCreditError ] .
	^ self .
! !
!MerchantProcessorSimulator methodsFor: 'operations' stamp: 'eb 11/26/2020 17:13:30' prior: 50998481!
pay: aPrice with: aCreditCard 
	(state = #StolenCreditCard) ifTrue: [ self signal: StolenCreditCardError ] .
	
	(state = #NotEnoughCredit) ifTrue: [ self error: NotEnoughCreditError ] .
	^ self .
! !
!MerchantProcessorSimulator methodsFor: 'operations' stamp: 'eb 11/26/2020 17:14:12' prior: 50998491!
pay: aPrice with: aCreditCard 
	(state = #StolenCreditCard) ifTrue: [ ^ StolenCreditCardError new ] .
	
	(state = #NotEnoughCredit) ifTrue: [ ^ NotEnoughCreditError new ] .
	^ self .
! !

!testRun: #CashierTest #test01CashierCanNotCheckoutWithEmptyCart stamp: 'eb 11/26/2020 17:14:20'!
PASSED!

!testRun: #CashierTest #test02CashierCheckoutWithCartWithAnElement stamp: 'eb 11/26/2020 17:14:20'!
PASSED!

!testRun: #CashierTest #test03CashierCheckoutWithCartWithManyElements stamp: 'eb 11/26/2020 17:14:20'!
PASSED!

!testRun: #CashierTest #test04CanNotBuyWithStolenCreditCard stamp: 'eb 11/26/2020 17:14:20'!
FAILURE!

!testRun: #CashierTest #test05CanNotBuyWithNotEnoughCredit stamp: 'eb 11/26/2020 17:14:20'!
FAILURE!

!testRun: #CashierTest #test04CanNotBuyWithStolenCreditCard stamp: 'eb 11/26/2020 17:14:23'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'eb 11/26/2020 17:14:47' prior: 50997789!
checkout: aCart with: aCreditCard using: aMerchantProcessor
	| price |
	(aCart isEmpty) ifTrue: [ self error: self class canNotCheckoutForEmptyCartErrorDescription ].
	price _ aCart price.
	[ aMerchantProcessor pay: price with: aCreditCard ] 
		on: StolenCreditCardError 
		do: [ self error: self class errorInMerchantProcessorErrorDescription ].
		
	lastTransactionId _ lastTransactionId + 1.
		
	^ Ticket with: lastTransactionId of: price .! !
!Cashier methodsFor: 'checkout' stamp: 'eb 11/26/2020 17:15:03' prior: 50998530!
checkout: aCart with: aCreditCard using: aMerchantProcessor
	| price |
	(aCart isEmpty) ifTrue: [ self error: self class canNotCheckoutForEmptyCartErrorDescription ].
	price _ aCart price.
	[ aMerchantProcessor pay: price with: aCreditCard ] 
		on: StolenCreditCardError 
		do: [ self error: self class canNotCheckoutWithStolenCreditCardErrorDescription ].
		
	lastTransactionId _ lastTransactionId + 1.
		
	^ Ticket with: lastTransactionId of: price .! !

!testRun: #CashierTest #test04CanNotBuyWithStolenCreditCard stamp: 'eb 11/26/2020 17:15:08'!
FAILURE!

!testRun: #CashierTest #test04CanNotBuyWithStolenCreditCard stamp: 'eb 11/26/2020 17:15:08'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'eb 11/26/2020 17:15:48' prior: 50998547!
checkout: aCart with: aCreditCard using: aMerchantProcessor
	| price |
	(aCart isEmpty) ifTrue: [ self error: self class canNotCheckoutForEmptyCartErrorDescription ].
	price _ aCart price.
	[ aMerchantProcessor pay: price with: aCreditCard ] 
		on: StolenCreditCardError 
		do: [ self error: self class canNotCheckoutWithStolenCreditCardErrorDescription ]
		on: NotEnoughCreditError 
		do: [ self error: self class canNotCheckoutWithNotEnoughCreditErrorDescription ].
		
	lastTransactionId _ lastTransactionId + 1.
		
	^ Ticket with: lastTransactionId of: price .! !

Error subclass: #StolenCreditCardError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StolenCreditCardError category: #TusLibros stamp: 'eb 11/26/2020 17:16:11'!
Error subclass: #StolenCreditCardError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Error subclass: #NotEnoughCreditError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #NotEnoughCreditError category: #TusLibros stamp: 'eb 11/26/2020 17:16:15'!
Error subclass: #NotEnoughCreditError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CashierTest #test01CashierCanNotCheckoutWithEmptyCart stamp: 'eb 11/26/2020 17:16:18'!
PASSED!

!testRun: #CashierTest #test02CashierCheckoutWithCartWithAnElement stamp: 'eb 11/26/2020 17:16:18'!
PASSED!

!testRun: #CashierTest #test03CashierCheckoutWithCartWithManyElements stamp: 'eb 11/26/2020 17:16:18'!
PASSED!

!testRun: #CashierTest #test04CanNotBuyWithStolenCreditCard stamp: 'eb 11/26/2020 17:16:18'!
FAILURE!

!testRun: #CashierTest #test05CanNotBuyWithNotEnoughCredit stamp: 'eb 11/26/2020 17:16:18'!
FAILURE!

!testRun: #CashierTest #test04CanNotBuyWithStolenCreditCard stamp: 'eb 11/26/2020 17:16:23'!
FAILURE!

!testRun: #CashierTest #test04CanNotBuyWithStolenCreditCard stamp: 'eb 11/26/2020 17:16:23'!
FAILURE!
!MerchantProcessorSimulator methodsFor: 'operations' stamp: 'eb 11/26/2020 17:21:35' prior: 50998501!
pay: aPrice with: aCreditCard 
	(state = #StolenCreditCard) ifTrue: [ StolenCreditCardError signal ] .
	
	(state = #NotEnoughCredit) ifTrue: [ NotEnoughCreditError signal ] .
	^ self .
! !

!testRun: #CashierTest #test01CashierCanNotCheckoutWithEmptyCart stamp: 'eb 11/26/2020 17:21:45'!
PASSED!

!testRun: #CashierTest #test02CashierCheckoutWithCartWithAnElement stamp: 'eb 11/26/2020 17:21:45'!
PASSED!

!testRun: #CashierTest #test03CashierCheckoutWithCartWithManyElements stamp: 'eb 11/26/2020 17:21:45'!
PASSED!

!testRun: #CashierTest #test04CanNotBuyWithStolenCreditCard stamp: 'eb 11/26/2020 17:21:45'!
PASSED!

!testRun: #CashierTest #test05CanNotBuyWithNotEnoughCredit stamp: 'eb 11/26/2020 17:21:45'!
PASSED!

!testRun: #CashierTest #test04CanNotBuyWithStolenCreditCard stamp: 'eb 11/26/2020 17:21:47'!
PASSED!

!testRun: #CashierTest #test01CashierCanNotCheckoutWithEmptyCart stamp: 'eb 11/26/2020 17:22:29'!
PASSED!

!testRun: #CashierTest #test02CashierCheckoutWithCartWithAnElement stamp: 'eb 11/26/2020 17:22:29'!
PASSED!

!testRun: #CashierTest #test03CashierCheckoutWithCartWithManyElements stamp: 'eb 11/26/2020 17:22:29'!
PASSED!

!testRun: #CashierTest #test04CanNotBuyWithStolenCreditCard stamp: 'eb 11/26/2020 17:22:29'!
PASSED!

!testRun: #CashierTest #test05CanNotBuyWithNotEnoughCredit stamp: 'eb 11/26/2020 17:22:29'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'eb 11/26/2020 17:22:36'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 17:22:36'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'eb 11/26/2020 17:22:36'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'eb 11/26/2020 17:22:36'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'eb 11/26/2020 17:22:36'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'eb 11/26/2020 17:22:36'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'eb 11/26/2020 17:22:36'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'eb 11/26/2020 17:22:36'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'eb 11/26/2020 17:22:42'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 17:22:43'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 17:22:43'!
ERROR!
!Cart methodsFor: 'initialization' stamp: 'eb 11/26/2020 17:22:59' prior: 50996835!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Dictionary new.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'eb 11/26/2020 17:23:01'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 17:23:01'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'eb 11/26/2020 17:23:01'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'eb 11/26/2020 17:23:01'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'eb 11/26/2020 17:23:01'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'eb 11/26/2020 17:23:01'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'eb 11/26/2020 17:23:01'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'eb 11/26/2020 17:23:01'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 17:23:06'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 17:23:06'!
ERROR!
!CartTest methodsFor: 'support' stamp: 'eb 11/26/2020 17:24:10' prior: 50996646!
defaultCatalog
	| catalog |
	
	catalog _ Dictionary new .
	
	catalog at: self itemSellByTheStore put: 1.
	^ catalog .! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'eb 11/26/2020 17:24:13'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 17:24:13'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'eb 11/26/2020 17:24:13'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'eb 11/26/2020 17:24:13'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'eb 11/26/2020 17:24:13'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'eb 11/26/2020 17:24:13'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'eb 11/26/2020 17:24:13'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'eb 11/26/2020 17:24:13'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'eb 11/26/2020 17:24:24'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 17:24:24'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'eb 11/26/2020 17:24:24'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'eb 11/26/2020 17:24:24'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'eb 11/26/2020 17:24:24'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'eb 11/26/2020 17:24:24'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'eb 11/26/2020 17:24:24'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'eb 11/26/2020 17:24:24'!
ERROR!
!Cart methodsFor: 'adding' stamp: 'eb 11/26/2020 17:24:54' prior: 50996862!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	1 to: aQuantity do: [ :aNumber | items at: anItem put: 1 ] .! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'eb 11/26/2020 17:24:56'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 17:24:56'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'eb 11/26/2020 17:24:56'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'eb 11/26/2020 17:24:56'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'eb 11/26/2020 17:24:56'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'eb 11/26/2020 17:24:56'!
FAILURE!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'eb 11/26/2020 17:24:56'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'eb 11/26/2020 17:24:56'!
FAILURE!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'eb 11/26/2020 17:25:15'!
FAILURE!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'eb 11/26/2020 17:25:15'!
FAILURE!
!Cart methodsFor: 'testing' stamp: 'eb 11/26/2020 17:25:35' prior: 50996850!
includes: anItem

	^items keys includes: anItem ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'eb 11/26/2020 17:25:37'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 17:25:37'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'eb 11/26/2020 17:25:37'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'eb 11/26/2020 17:25:37'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'eb 11/26/2020 17:25:37'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'eb 11/26/2020 17:25:37'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'eb 11/26/2020 17:25:37'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'eb 11/26/2020 17:25:37'!
FAILURE!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'eb 11/26/2020 17:25:37'!
FAILURE!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'eb 11/26/2020 17:25:48'!
FAILURE!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'eb 11/26/2020 17:25:48'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'eb 11/26/2020 17:25:55'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 17:25:56'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'eb 11/26/2020 17:25:57'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'eb 11/26/2020 17:25:58'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'eb 11/26/2020 17:25:59'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'eb 11/26/2020 17:26:00'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'eb 11/26/2020 17:26:01'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'eb 11/26/2020 17:26:02'!
FAILURE!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'eb 11/26/2020 17:26:02'!
FAILURE!
!Cart methodsFor: 'queries' stamp: 'eb 11/26/2020 17:26:20' prior: 50996841!
occurrencesOf: anItem

	^items keys occurrencesOf: anItem  ! !
!Cart methodsFor: 'queries' stamp: 'eb 11/26/2020 17:26:40' prior: 50998924!
occurrencesOf: anItem

	^items occurrencesOf: anItem  ! !
!Cart methodsFor: 'initialization' stamp: 'eb 11/26/2020 17:26:51' prior: 50998719!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !
!Cart methodsFor: 'testing' stamp: 'eb 11/26/2020 17:26:56' prior: 50998855!
includes: anItem

	^items includes: anItem ! !
!Cart methodsFor: 'adding' stamp: 'eb 11/26/2020 17:27:52' prior: 50998815!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	1 to: aQuantity do: [ :aNumber | items add: anItem ] .! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'eb 11/26/2020 17:28:34'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 17:28:34'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'eb 11/26/2020 17:28:34'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'eb 11/26/2020 17:28:34'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'eb 11/26/2020 17:28:34'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'eb 11/26/2020 17:28:34'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'eb 11/26/2020 17:28:34'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'eb 11/26/2020 17:28:34'!
PASSED!
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:43' prior: 50998757!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'eb 11/26/2020 17:29:04'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 17:29:06'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 17:29:06'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 17:29:20'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 17:29:20'!
ERROR!
!CartTest methodsFor: 'support' stamp: 'eb 11/26/2020 17:31:00' prior: 50998978!
defaultCatalog
	| catalog |
	
	catalog _ Dictionary new .
	
	catalog at: self itemSellByTheStore put: 10.
	^ catalog .! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'eb 11/26/2020 17:31:03'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 17:31:03'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'eb 11/26/2020 17:31:03'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'eb 11/26/2020 17:31:03'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'eb 11/26/2020 17:31:03'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'eb 11/26/2020 17:31:03'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'eb 11/26/2020 17:31:03'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'eb 11/26/2020 17:31:03'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'eb 11/26/2020 17:31:10'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 17:31:10'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'eb 11/26/2020 17:31:10'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'eb 11/26/2020 17:31:10'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'eb 11/26/2020 17:31:10'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'eb 11/26/2020 17:31:10'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'eb 11/26/2020 17:31:10'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'eb 11/26/2020 17:31:10'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'eb 11/26/2020 17:31:18'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 17:31:18'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'eb 11/26/2020 17:31:18'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'eb 11/26/2020 17:31:18'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'eb 11/26/2020 17:31:18'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'eb 11/26/2020 17:31:18'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'eb 11/26/2020 17:31:18'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'eb 11/26/2020 17:31:18'!
PASSED!

!testRun: #CashierTest #test01CashierCanNotCheckoutWithEmptyCart stamp: 'eb 11/26/2020 17:31:18'!
PASSED!

!testRun: #CashierTest #test02CashierCheckoutWithCartWithAnElement stamp: 'eb 11/26/2020 17:31:18'!
PASSED!

!testRun: #CashierTest #test03CashierCheckoutWithCartWithManyElements stamp: 'eb 11/26/2020 17:31:18'!
PASSED!

!testRun: #CashierTest #test04CanNotBuyWithStolenCreditCard stamp: 'eb 11/26/2020 17:31:18'!
PASSED!

!testRun: #CashierTest #test05CanNotBuyWithNotEnoughCredit stamp: 'eb 11/26/2020 17:31:18'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardOwnerNameCanNotBeEmpty stamp: 'eb 11/26/2020 17:31:18'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberMustHaveSixteenDigits stamp: 'eb 11/26/2020 17:31:18'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardExpirationMonthCanNotBeLessThanCurrent stamp: 'eb 11/26/2020 17:31:18'!
PASSED!