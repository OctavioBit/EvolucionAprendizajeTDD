

----SNAPSHOT----(25 May 2021 21:26:07) CuisUniversity-4532bis.image priorSource: 17130767!

!testRun: #PortfolioTest #test24 stamp: 'GR 5/25/2021 21:26:29'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'GR 5/25/2021 21:26:30'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'GR 5/25/2021 21:26:30'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'GR 5/25/2021 21:26:30'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'GR 5/25/2021 21:26:30'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'GR 5/25/2021 21:26:30'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'GR 5/25/2021 21:26:30'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'GR 5/25/2021 21:26:30'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'GR 5/25/2021 21:26:30'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'GR 5/25/2021 21:26:30'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'GR 5/25/2021 21:26:30'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'GR 5/25/2021 21:26:30'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'GR 5/25/2021 21:26:30'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'GR 5/25/2021 21:26:31'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'GR 5/25/2021 21:26:31'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'GR 5/25/2021 21:26:31'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'GR 5/25/2021 21:26:31'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'GR 5/25/2021 21:26:31'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'GR 5/25/2021 21:26:31'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'GR 5/25/2021 21:26:31'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'GR 5/25/2021 21:26:31'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'GR 5/25/2021 21:26:31'!
PASSED!

!testRun: #PortfolioTest #test22 stamp: 'GR 5/25/2021 21:26:31'!
PASSED!

!testRun: #PortfolioTest #test23 stamp: 'GR 5/25/2021 21:26:31'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'GR 5/25/2021 21:26:31'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 21:27:25' prior: 50866974!
test24

	|portfolio1 portfolio2 portfolio3|
	
	portfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.

	portfolio3 := Portfolio new.
	
	portfolio1	 add: portfolio2.
	
	portfolio2 add: portfolio3.
	
	self 
		should: [portfolio3 add: portfolio1]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio ownerHasAssetsInCommonErrorDescription.
		].
	
	
	! !

!testRun: #PortfolioTest #test24 stamp: 'GR 5/25/2021 21:27:27'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'GR 5/25/2021 21:27:27'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'GR 5/25/2021 21:27:27'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'GR 5/25/2021 21:27:27'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'GR 5/25/2021 21:27:27'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'GR 5/25/2021 21:27:27'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'GR 5/25/2021 21:27:27'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'GR 5/25/2021 21:27:27'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'GR 5/25/2021 21:27:27'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'GR 5/25/2021 21:27:27'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'GR 5/25/2021 21:27:27'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'GR 5/25/2021 21:27:27'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'GR 5/25/2021 21:27:28'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'GR 5/25/2021 21:27:28'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'GR 5/25/2021 21:27:28'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'GR 5/25/2021 21:27:28'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'GR 5/25/2021 21:27:28'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'GR 5/25/2021 21:27:28'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'GR 5/25/2021 21:27:28'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'GR 5/25/2021 21:27:28'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'GR 5/25/2021 21:27:28'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'GR 5/25/2021 21:27:28'!
PASSED!

!testRun: #PortfolioTest #test22 stamp: 'GR 5/25/2021 21:27:28'!
PASSED!

!testRun: #PortfolioTest #test23 stamp: 'GR 5/25/2021 21:27:28'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'GR 5/25/2021 21:27:28'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 21:27:49' prior: 50867051!
test24

	|portfolio1|
	
	portfolio1 := Portfolio new.
	
	self 
		should: [portfolio1 add: portfolio1]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio ownerHasAssetsInCommonErrorDescription.
		].
	
	
	! !

!testRun: #PortfolioTest #test24 stamp: 'GR 5/25/2021 21:27:51'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 21:29:41' prior: 50866779!
add: anAssetToAdd 

	(self == anAssetToAdd ) ifTrue: [^self error: Portfolio assetIsSelfErrorDescription].

	(self hasAssetsInCommonWith: anAssetToAdd) ifTrue: [^self error: Portfolio assetHasAssetsInCommonErrorDescription ].
	
	(owner anySatisfy: [:anOwner | anOwner hasAssetsInCommonWith: anAssetToAdd]) ifTrue: [^self error: Portfolio ownerHasAssetsInCommonErrorDescription ].
	
	(owner anySatisfy: [:anOwner | anOwner ownerHasAssetsInCommonWith: anAssetToAdd]) ifTrue: [^self error: Portfolio ownerHasAssetsInCommonErrorDescription ].
	
	assets add: anAssetToAdd.
	
	anAssetToAdd setOwnerTo: self.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 21:29:54'!
assetIsSelfErrorDescription
	self shouldBeImplemented.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 21:30:11' prior: 50867161!
assetIsSelfErrorDescription
	
	^'Asset is self'.! !

!testRun: #PortfolioTest #test24 stamp: 'GR 5/25/2021 21:30:12'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 21:30:23' prior: 50867125!
test24

	|portfolio1|
	
	portfolio1 := Portfolio new.
	
	self 
		should: [portfolio1 add: portfolio1]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio assetIsSelfErrorDescription .
		].
	
	
	! !

!testRun: #PortfolioTest #test24 stamp: 'GR 5/25/2021 21:30:26'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'GR 5/25/2021 21:30:27'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'GR 5/25/2021 21:30:27'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'GR 5/25/2021 21:30:27'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'GR 5/25/2021 21:30:27'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'GR 5/25/2021 21:30:27'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'GR 5/25/2021 21:30:27'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'GR 5/25/2021 21:30:27'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'GR 5/25/2021 21:30:27'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'GR 5/25/2021 21:30:27'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'GR 5/25/2021 21:30:27'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'GR 5/25/2021 21:30:27'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'GR 5/25/2021 21:30:27'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'GR 5/25/2021 21:30:27'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'GR 5/25/2021 21:30:27'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'GR 5/25/2021 21:30:27'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'GR 5/25/2021 21:30:27'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'GR 5/25/2021 21:30:27'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'GR 5/25/2021 21:30:28'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'GR 5/25/2021 21:30:28'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'GR 5/25/2021 21:30:28'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'GR 5/25/2021 21:30:28'!
PASSED!

!testRun: #PortfolioTest #test22 stamp: 'GR 5/25/2021 21:30:28'!
PASSED!

!testRun: #PortfolioTest #test23 stamp: 'GR 5/25/2021 21:30:28'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'GR 5/25/2021 21:30:28'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 21:36:56' prior: 50867139!
add: anAssetToAdd 

	(self == anAssetToAdd ) ifTrue: [^self error: Portfolio assetIsSelfErrorDescription].

	(self hasAssetsInCommonWith: anAssetToAdd) ifTrue: [^self error: Portfolio assetHasAssetsInCommonErrorDescription ].
	
	(owner anySatisfy: [:anOwner | anOwner ownerHasAssetsInCommonWith: anAssetToAdd]) ifTrue: [^self error: Portfolio ownerHasAssetsInCommonErrorDescription ].
	
	assets add: anAssetToAdd.
	
	anAssetToAdd setOwnerTo: self.! !

!testRun: #PortfolioTest #test01 stamp: 'GR 5/25/2021 21:36:59'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'GR 5/25/2021 21:36:59'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'GR 5/25/2021 21:37:00'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'GR 5/25/2021 21:37:00'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'GR 5/25/2021 21:37:00'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'GR 5/25/2021 21:37:01'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'GR 5/25/2021 21:37:01'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'GR 5/25/2021 21:37:01'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'GR 5/25/2021 21:37:01'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'GR 5/25/2021 21:37:02'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'GR 5/25/2021 21:37:02'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'GR 5/25/2021 21:37:02'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'GR 5/25/2021 21:37:02'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'GR 5/25/2021 21:37:02'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'GR 5/25/2021 21:37:02'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'GR 5/25/2021 21:37:02'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'GR 5/25/2021 21:37:02'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'GR 5/25/2021 21:37:02'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'GR 5/25/2021 21:37:02'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'GR 5/25/2021 21:37:02'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'GR 5/25/2021 21:37:02'!
PASSED!

!testRun: #PortfolioTest #test22 stamp: 'GR 5/25/2021 21:37:02'!
PASSED!

!testRun: #PortfolioTest #test23 stamp: 'GR 5/25/2021 21:37:02'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'GR 5/25/2021 21:37:02'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 21:45:53' prior: 50867242!
add: anAssetToAdd 

	(self == anAssetToAdd ) ifTrue: [^self error: Portfolio assetIsSelfErrorDescription].

	(self hasAssetsInCommonWith: anAssetToAdd) ifTrue: [^self error: Portfolio assetHasAssetsInCommonErrorDescription ].
	
	(owner anySatisfy: [:anOwner | anOwner ownerHasAssetsInCommonWith: anAssetToAdd]) ifTrue: [^self error: Portfolio ownerHasAssetsInCommonErrorDescription ].
	
	assets add: anAssetToAdd.
	
	anAssetToAdd setOwnerTo: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 21:47:18' prior: 50867315!
add: anAssetToAdd

	
	owner ifEmpty: [self hasAssetsInCommonWith: anAssetToAdd] ifNotEmpty: [owner anySatisfy: [:anOwner | anOwner ownerHasAssetsInCommonWith: anAssetToAdd]].
	
	(self == anAssetToAdd ) ifTrue: [^self error: Portfolio assetIsSelfErrorDescription].

	(self hasAssetsInCommonWith: anAssetToAdd) ifTrue: [^self error: Portfolio assetHasAssetsInCommonErrorDescription ].
	
	(owner anySatisfy: [:anOwner | anOwner ownerHasAssetsInCommonWith: anAssetToAdd]) ifTrue: [^self error: Portfolio ownerHasAssetsInCommonErrorDescription ].
	
	assets add: anAssetToAdd.
	
	anAssetToAdd setOwnerTo: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 21:55:29' prior: 50867332!
add: anAssetToAdd
	
	(self == anAssetToAdd ) ifTrue: [^self error: Portfolio assetIsSelfErrorDescription].

	(owner anySatisfy: [:anOwner | anOwner ownerHasAssetsInCommonWith: anAssetToAdd]) ifTrue: [^self error: Portfolio ownerHasAssetsInCommonErrorDescription ].
	
	assets add: anAssetToAdd.
	
	anAssetToAdd setOwnerTo: self.! !

!testRun: #PortfolioTest #test01 stamp: 'GR 5/25/2021 21:55:33'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'GR 5/25/2021 21:55:33'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'GR 5/25/2021 21:55:33'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'GR 5/25/2021 21:55:33'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'GR 5/25/2021 21:55:33'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'GR 5/25/2021 21:55:33'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'GR 5/25/2021 21:55:33'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'GR 5/25/2021 21:55:33'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'GR 5/25/2021 21:55:33'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'GR 5/25/2021 21:55:33'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'GR 5/25/2021 21:55:33'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'GR 5/25/2021 21:55:33'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'GR 5/25/2021 21:55:34'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'GR 5/25/2021 21:55:34'!
FAILURE!

!testRun: #PortfolioTest #test15 stamp: 'GR 5/25/2021 21:55:34'!
FAILURE!

!testRun: #PortfolioTest #test16 stamp: 'GR 5/25/2021 21:55:34'!
FAILURE!

!testRun: #PortfolioTest #test17 stamp: 'GR 5/25/2021 21:55:34'!
FAILURE!

!testRun: #PortfolioTest #test18 stamp: 'GR 5/25/2021 21:55:34'!
FAILURE!

!testRun: #PortfolioTest #test19 stamp: 'GR 5/25/2021 21:55:34'!
FAILURE!

!testRun: #PortfolioTest #test20 stamp: 'GR 5/25/2021 21:55:34'!
FAILURE!

!testRun: #PortfolioTest #test21 stamp: 'GR 5/25/2021 21:55:34'!
PASSED!

!testRun: #PortfolioTest #test22 stamp: 'GR 5/25/2021 21:55:34'!
PASSED!

!testRun: #PortfolioTest #test23 stamp: 'GR 5/25/2021 21:55:34'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'GR 5/25/2021 21:55:34'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 21:56:46' prior: 50867354!
add: anAssetToAdd

	(self == anAssetToAdd ) ifTrue: [^self error: Portfolio assetIsSelfErrorDescription].
	
	(self hasAssetsInCommonWith: anAssetToAdd) ifTrue: [^self error: Portfolio assetHasAssetsInCommonErrorDescription ].
	
	(owner anySatisfy: [:anOwner | anOwner ownerHasAssetsInCommonWith: anAssetToAdd]) ifTrue: [^self error: Portfolio ownerHasAssetsInCommonErrorDescription ].
	
	
	(owner anySatisfy: [:anOwner | anOwner ownerHasAssetsInCommonWith: anAssetToAdd]) ifTrue: [^self error: Portfolio ownerHasAssetsInCommonErrorDescription ].
	
	assets add: anAssetToAdd.
	
	anAssetToAdd setOwnerTo: self.! !

!testRun: #PortfolioTest #test01 stamp: 'GR 5/25/2021 21:56:48'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'GR 5/25/2021 21:56:48'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'GR 5/25/2021 21:56:48'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'GR 5/25/2021 21:56:48'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'GR 5/25/2021 21:56:48'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'GR 5/25/2021 21:56:48'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'GR 5/25/2021 21:56:48'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'GR 5/25/2021 21:56:48'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'GR 5/25/2021 21:56:49'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'GR 5/25/2021 21:56:49'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'GR 5/25/2021 21:56:49'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'GR 5/25/2021 21:56:49'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'GR 5/25/2021 21:56:49'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'GR 5/25/2021 21:56:49'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'GR 5/25/2021 21:56:49'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'GR 5/25/2021 21:56:49'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'GR 5/25/2021 21:56:49'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'GR 5/25/2021 21:56:49'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'GR 5/25/2021 21:56:49'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'GR 5/25/2021 21:56:49'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'GR 5/25/2021 21:56:49'!
PASSED!

!testRun: #PortfolioTest #test22 stamp: 'GR 5/25/2021 21:56:49'!
PASSED!

!testRun: #PortfolioTest #test23 stamp: 'GR 5/25/2021 21:56:49'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'GR 5/25/2021 21:56:50'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:02:16'!
test01EmptyPortfolioShouldHaveZeroBalance

	|portfolio|
	
	portfolio := Portfolio new.
	
	self assert: 0 equals: portfolio balance.
	
! !

!methodRemoval: PortfolioTest #test01 stamp: 'GR 5/25/2021 22:02:29'!
test01

	|portfolio|
	
	portfolio := Portfolio new.
	
	self assert: 0 equals: portfolio balance.
	
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:05:40'!
test02PortfolioWithOneAccountShouldHaveSameBalanceAsAccount

	|portfolio account|
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	Deposit register: 100 on: account. 
	
	portfolio add: account.
	
	self assert: 100 equals: portfolio balance.
	
! !

!methodRemoval: PortfolioTest #test02 stamp: 'GR 5/25/2021 22:05:46'!
test02

	|portfolio account|
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	Deposit register: 100 on: account. 
	
	portfolio add: account.
	
	self assert: 100 equals: portfolio balance.
	
!

----SNAPSHOT----(25 May 2021 22:05:52) CuisUniversity-4532bis.image priorSource: 17130856!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:07:12'!
test03PortfolioShouldHaveSameBalanceAsSumOfAssetsBalance

	|portfolio account1 account2|
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	Deposit register: 100 on: account1. 
	
	portfolio add: account1.
	
	account2 := ReceptiveAccount new.
	
	Deposit register: 200 on: account2. 
	
	portfolio add: account2.
	
	self assert: 300 equals: portfolio balance.
	
! !

!methodRemoval: PortfolioTest #test03 stamp: 'GR 5/25/2021 22:07:19'!
test03

	|portfolio account1 account2|
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	Deposit register: 100 on: account1. 
	
	portfolio add: account1.
	
	account2 := ReceptiveAccount new.
	
	Deposit register: 200 on: account2. 
	
	portfolio add: account2.
	
	self assert: 300 equals: portfolio balance.
	
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:09:09'!
test04EmptyPortfolioShouldNotHaveRegisteredTransaction

	|portfolio deposit|
	
	portfolio := Portfolio new.
	
	deposit := Deposit for: 100. 
	
	self deny: (portfolio hasRegistered: deposit).
	
! !

!methodRemoval: PortfolioTest #test04 stamp: 'GR 5/25/2021 22:09:13'!
test04

	|portfolio deposit|
	
	portfolio := Portfolio new.
	
	deposit := Deposit for: 100. 
	
	self deny: (portfolio hasRegistered: deposit).
	
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:09:38' prior: 50867565!
test04EmptyPortfolioShouldNotHaveRegisteredTransaction

	|portfolio transaction|
	
	portfolio := Portfolio new.
	
	transaction := Deposit for: 100. 
	
	self deny: (portfolio hasRegistered: transaction).
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:10:00' prior: 50860196!
test05

	|portfolio account transaction|
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	transaction := Deposit register: 100 on: account. 
	
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: transaction).
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:10:35'!
test05PortfolioShouldHaveRegisteredItsAssetsTransactions

	|portfolio account transaction|
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	transaction := Deposit register: 100 on: account. 
	
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: transaction).
	
! !

!methodRemoval: PortfolioTest #test05 stamp: 'GR 5/25/2021 22:10:40'!
test05

	|portfolio account transaction|
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	transaction := Deposit register: 100 on: account. 
	
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: transaction).
	
!

!methodRemoval: PortfolioTest #test04EmptyPortfolioShouldNotHaveRegisteredTransaction stamp: 'GR 5/25/2021 22:12:29'!
test04EmptyPortfolioShouldNotHaveRegisteredTransaction

	|portfolio transaction|
	
	portfolio := Portfolio new.
	
	transaction := Deposit for: 100. 
	
	self deny: (portfolio hasRegistered: transaction).
	
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:12:34'!
test04PortfolioShouldHaveRegisteredItsAssetsTransactions

	|portfolio account transaction|
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	transaction := Deposit register: 100 on: account. 
	
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: transaction).
	
! !

!methodRemoval: PortfolioTest #test05PortfolioShouldHaveRegisteredItsAssetsTransactions stamp: 'GR 5/25/2021 22:12:34'!
test05PortfolioShouldHaveRegisteredItsAssetsTransactions

	|portfolio account transaction|
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	transaction := Deposit register: 100 on: account. 
	
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: transaction).
	
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:13:18'!
test05PortfolioShouldNotHaveResgisteredUnrelatedTransactions

	|portfolio account deposit|
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	deposit := Deposit for: 100. 
	
	portfolio add: account.
	
	self deny: (portfolio hasRegistered: deposit).
	
! !

!methodRemoval: PortfolioTest #test06 stamp: 'GR 5/25/2021 22:13:18'!
test06

	|portfolio account deposit|
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	deposit := Deposit for: 100. 
	
	portfolio add: account.
	
	self deny: (portfolio hasRegistered: deposit).
	
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:13:47'!
test06EmptyPortfolioShouldNotHaveTransactions

	|portfolio|
	
	portfolio := Portfolio new.
	
	self assert: (portfolio transactions isEmpty).
	
! !

!methodRemoval: PortfolioTest #test07 stamp: 'GR 5/25/2021 22:13:47'!
test07

	|portfolio|
	
	portfolio := Portfolio new.
	
	self assert: (portfolio transactions isEmpty).
	
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:13:57' prior: 50867661!
test05PortfolioShouldNotHaveResgisteredUnrelatedTransactions

	|portfolio account transaction|
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	transaction := Deposit for: 100. 
	
	portfolio add: account.
	
	self deny: (portfolio hasRegistered: transaction).
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:15:49'!
test07PortfolioShouldKnowItsTransactions

	|portfolio account deposit transactions|
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: account. 
	
	portfolio add: account.
	
	transactions := portfolio transactions.
	
	self assert: 1 equals: transactions size.
	
	self assert: transactions includes: deposit.
! !

!methodRemoval: PortfolioTest #test08 stamp: 'GR 5/25/2021 22:15:49'!
test08

	|portfolio account deposit transactions|
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: account. 
	
	portfolio add: account.
	
	transactions := portfolio transactions.
	
	self assert: 1 equals: transactions size.
	
	self assert: transactions includes: deposit.
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:18:27'!
test08PortfolioShouldKnowItsAssetsTransactions

	|portfolio account1 deposit1 transactions account2 deposit2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account1. 
	
	portfolio add: account1.
	
	account2 := ReceptiveAccount new.
	
	deposit2 := Deposit register: 100 on: account2. 
	
	portfolio add: account2.
	
	transactions := portfolio transactions.
	
	self assert: 2 equals: transactions size.
	
	self assert: transactions includes: deposit1.
	
	self assert: transactions includes: deposit2.
! !

!methodRemoval: PortfolioTest #test09 stamp: 'GR 5/25/2021 22:18:27'!
test09

	|portfolio account1 deposit1 transactions account2 deposit2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account1. 
	
	portfolio add: account1.
	
	account2 := ReceptiveAccount new.
	
	deposit2 := Deposit register: 100 on: account2. 
	
	portfolio add: account2.
	
	transactions := portfolio transactions.
	
	self assert: 2 equals: transactions size.
	
	self assert: transactions includes: deposit1.
	
	self assert: transactions includes: deposit2.
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:19:00'!
test07PortfolioWithOneAccountShouldKnowItsTransactions

	|portfolio account deposit transactions|
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: account. 
	
	portfolio add: account.
	
	transactions := portfolio transactions.
	
	self assert: 1 equals: transactions size.
	
	self assert: transactions includes: deposit.
! !

!methodRemoval: PortfolioTest #test07PortfolioShouldKnowItsTransactions stamp: 'GR 5/25/2021 22:19:00'!
test07PortfolioShouldKnowItsTransactions

	|portfolio account deposit transactions|
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: account. 
	
	portfolio add: account.
	
	transactions := portfolio transactions.
	
	self assert: 1 equals: transactions size.
	
	self assert: transactions includes: deposit.
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:19:22' prior: 50867735!
test08PortfolioShouldKnowItsAssetsTransactions

	|portfolio account1 deposit1 account2 deposit2 transactions|
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account1. 
	
	portfolio add: account1.
	
	account2 := ReceptiveAccount new.
	
	deposit2 := Deposit register: 100 on: account2. 
	
	portfolio add: account2.
	
	transactions := portfolio transactions.
	
	self assert: 2 equals: transactions size.
	
	self assert: transactions includes: deposit1.
	
	self assert: transactions includes: deposit2.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:21:02'!
test09CombinedPortfolioShouldKnowItsBalance

	|portfolio1 portfolio2 account |
	
	portfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.
	
	account := ReceptiveAccount new.
	
	Deposit register: 100 on: account. 
	
	portfolio2 add: account.
	
	portfolio1 add: portfolio2.
	
	self assert: 100 equals: portfolio1 balance.! !

!methodRemoval: PortfolioTest #test10 stamp: 'GR 5/25/2021 22:21:02'!
test10

	|portfolio1 portfolio2 account |
	
	portfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.
	
	account := ReceptiveAccount new.
	
	Deposit register: 100 on: account. 
	
	portfolio2 add: account.
	
	portfolio1 add: portfolio2.
	
	self assert: 100 equals: portfolio1 balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:21:37' prior: 50867825!
test09CombinedPortfolioShouldKnowItsBalance

	|parentPortfolio portfolio2 account |
	
	parentPortfolio := Portfolio new.
	
	portfolio2 := Portfolio new.
	
	account := ReceptiveAccount new.
	
	Deposit register: 100 on: account. 
	
	portfolio2 add: account.
	
	parentPortfolio add: portfolio2.
	
	self assert: 100 equals: parentPortfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:21:52' prior: 50867850!
test09CombinedPortfolioShouldKnowItsBalance

	|parentPortfolio childPortfolio account |
	
	parentPortfolio := Portfolio new.
	
	childPortfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	Deposit register: 100 on: account. 
	
	childPortfolio add: account.
	
	parentPortfolio add: childPortfolio.
	
	self assert: 100 equals: parentPortfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:23:34' prior: 50867864!
test09CombinedPortfolioShouldKnowItsBalance

	|portfolio1 portfolio2 portfolio3 account1 account2|
	
	portfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.
	
	portfolio3 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	Deposit register: 100 on: account1. 
	
	portfolio1 add: account1.
	
	account2 := ReceptiveAccount new.
	
	Deposit register: 200 on: account2. 
	
	portfolio2 add: account2.
	
	portfolio3 add: portfolio1 .
	
	portfolio3 add: portfolio2.
	
	self assert: 300 equals: portfolio3 balance.! !

!methodRemoval: PortfolioTest #test11 stamp: 'GR 5/25/2021 22:23:46'!
test11

	|portfolio1 portfolio2 portfolio3 account1 account2|
	
	portfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.
	
	portfolio3 := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	Deposit register: 100 on: account1. 
	
	portfolio1 add: account1.
	
	account2 := ReceptiveAccount new.
	
	Deposit register: 200 on: account2. 
	
	portfolio2 add: account2.
	
	portfolio3 add: portfolio1 .
	
	portfolio3 add: portfolio2.
	
	self assert: 300 equals: portfolio3 balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:24:27' prior: 50867879!
test09CombinedPortfolioShouldKnowItsBalance

	|portfolio1 portfolio2 parentPortfolio account1 account2|
	
	portfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.
	
	parentPortfolio := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	Deposit register: 100 on: account1. 
	
	portfolio1 add: account1.
	
	account2 := ReceptiveAccount new.
	
	Deposit register: 200 on: account2. 
	
	portfolio2 add: account2.
	
	parentPortfolio add: portfolio1 .
	
	parentPortfolio add: portfolio2.
	
	self assert: 300 equals: parentPortfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:24:50' prior: 50867916!
test09CombinedPortfolioShouldKnowItsBalance

	|parentPortfolio portfolio1 portfolio2 account1 account2|
	
	portfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.
	
	parentPortfolio := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	Deposit register: 100 on: account1. 
	
	portfolio1 add: account1.
	
	account2 := ReceptiveAccount new.
	
	Deposit register: 200 on: account2. 
	
	portfolio2 add: account2.
	
	parentPortfolio add: portfolio1 .
	
	parentPortfolio add: portfolio2.
	
	self assert: 300 equals: parentPortfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:24:57' prior: 50867937!
test09CombinedPortfolioShouldKnowItsBalance

	|parentPortfolio childPortfolio1 portfolio2 account1 account2|
	
	childPortfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.
	
	parentPortfolio := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	Deposit register: 100 on: account1. 
	
	childPortfolio1 add: account1.
	
	account2 := ReceptiveAccount new.
	
	Deposit register: 200 on: account2. 
	
	portfolio2 add: account2.
	
	parentPortfolio add: childPortfolio1 .
	
	parentPortfolio add: portfolio2.
	
	self assert: 300 equals: parentPortfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:25:08' prior: 50867958!
test09CombinedPortfolioShouldKnowItsBalance

	|parentPortfolio childPortfolio1 childPortfolio2 account1 account2|
	
	childPortfolio1 := Portfolio new.
	
	childPortfolio2 := Portfolio new.
	
	parentPortfolio := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	Deposit register: 100 on: account1. 
	
	childPortfolio1 add: account1.
	
	account2 := ReceptiveAccount new.
	
	Deposit register: 200 on: account2. 
	
	childPortfolio2 add: account2.
	
	parentPortfolio add: childPortfolio1 .
	
	parentPortfolio add: childPortfolio2.
	
	self assert: 300 equals: parentPortfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:27:34'!
test09PortfolioShouldHaveRegisteredItsAssetsTransactions

	|portfolio1 portfolio2 account deposit|
	
	portfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: account. 
	
	portfolio2 add: account.
	
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 hasRegistered: deposit).! !

!methodRemoval: PortfolioTest #test12 stamp: 'GR 5/25/2021 22:27:34'!
test12

	|portfolio1 portfolio2 account deposit|
	
	portfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: account. 
	
	portfolio2 add: account.
	
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 hasRegistered: deposit).!

!methodRemoval: PortfolioTest #test04PortfolioShouldHaveRegisteredItsAssetsTransactions stamp: 'GR 5/25/2021 22:27:44'!
test04PortfolioShouldHaveRegisteredItsAssetsTransactions

	|portfolio account transaction|
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	transaction := Deposit register: 100 on: account. 
	
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: transaction).
	
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:29:32'!
test10PortfolioShouldKnowItsAssetsTransactions

	|portfolio1 portfolio2 account deposit transactions|
	
	portfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: account. 
	
	portfolio2 add: account.
	
	portfolio1 add: portfolio2.
	
	transactions := portfolio1 transactions.
	
	self assert: 1 equals: transactions size.
	
	self assert: (transactions includes: deposit ).! !

!methodRemoval: PortfolioTest #test13 stamp: 'GR 5/25/2021 22:29:32'!
test13

	|portfolio1 portfolio2 account deposit transactions|
	
	portfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: account. 
	
	portfolio2 add: account.
	
	portfolio1 add: portfolio2.
	
	transactions := portfolio1 transactions.
	
	self assert: 1 equals: transactions size.
	
	self assert: (transactions includes: deposit ).!

!methodRemoval: PortfolioTest #test08PortfolioShouldKnowItsAssetsTransactions stamp: 'GR 5/25/2021 22:29:44'!
test08PortfolioShouldKnowItsAssetsTransactions

	|portfolio account1 deposit1 account2 deposit2 transactions|
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account1. 
	
	portfolio add: account1.
	
	account2 := ReceptiveAccount new.
	
	deposit2 := Deposit register: 100 on: account2. 
	
	portfolio add: account2.
	
	transactions := portfolio transactions.
	
	self assert: 2 equals: transactions size.
	
	self assert: transactions includes: deposit1.
	
	self assert: transactions includes: deposit2.
!

!methodRemoval: PortfolioTest #test07PortfolioWithOneAccountShouldKnowItsTransactions stamp: 'GR 5/25/2021 22:29:46'!
test07PortfolioWithOneAccountShouldKnowItsTransactions

	|portfolio account deposit transactions|
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: account. 
	
	portfolio add: account.
	
	transactions := portfolio transactions.
	
	self assert: 1 equals: transactions size.
	
	self assert: transactions includes: deposit.
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:30:12' prior: 50868039!
test10PortfolioShouldKnowItsAssetsTransactions

	|parentPortfolio portfolio2 account deposit transactions|
	
	parentPortfolio := Portfolio new.
	
	portfolio2 := Portfolio new.
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: account. 
	
	portfolio2 add: account.
	
	parentPortfolio add: portfolio2.
	
	transactions := parentPortfolio transactions.
	
	self assert: 1 equals: transactions size.
	
	self assert: (transactions includes: deposit ).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:30:23' prior: 50868108!
test10PortfolioShouldKnowItsAssetsTransactions

	|parentPortfolio childPortfolio account deposit transactions|
	
	parentPortfolio := Portfolio new.
	
	childPortfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: account. 
	
	childPortfolio add: account.
	
	parentPortfolio add: childPortfolio.
	
	transactions := parentPortfolio transactions.
	
	self assert: 1 equals: transactions size.
	
	self assert: (transactions includes: deposit ).! !

!methodRemoval: PortfolioTest #test14 stamp: 'GR 5/25/2021 22:31:59'!
test14

	|portfolio2 account|
	
	portfolio2 := Portfolio new.
	
	account := ReceptiveAccount new.
	
	portfolio2 add: account.
	
	self 
		should: [portfolio2 add: account]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio assetHasAssetsInCommonErrorDescription.
		].
	
	
	!
!Portfolio methodsFor: 'operations' stamp: 'GR 5/25/2021 22:33:16' prior: 50867423!
add: anAssetToAdd

	(self == anAssetToAdd ) ifTrue: [^self error: Portfolio assetIsSelfErrorDescription].
	
	(self hasAssetsInCommonWith: anAssetToAdd) ifTrue: [^self error: Portfolio assetHasAssetsInCommonErrorDescription ].
	
	(owner anySatisfy: [:anOwner | anOwner ownerHasAssetsInCommonWith: anAssetToAdd]) ifTrue: [^self error: Portfolio ownerHasAssetsInCommonErrorDescription ].
	
	assets add: anAssetToAdd.
	
	anAssetToAdd setOwnerTo: self.! !

!methodRemoval: PortfolioTest #test15 stamp: 'GR 5/25/2021 22:34:41'!
test15

	|portfolio1 portfolio2 account|
	
	portfolio2 := Portfolio new.
	
	account := ReceptiveAccount new.
	
	portfolio2 add: account.
	
	portfolio1 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	self 
		should: [portfolio1 add: account]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio assetHasAssetsInCommonErrorDescription.
		].
	
	
	!

!methodRemoval: PortfolioTest #test16 stamp: 'GR 5/25/2021 22:34:43'!
test16

	|portfolio1 portfolio2 portfolio3 account|
	
	portfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.
	
	portfolio3 := Portfolio new.
	
	account := ReceptiveAccount new.
	
	portfolio3 add: account.
	
	portfolio2 add: portfolio3.
	
	portfolio1 add: portfolio2.
	
	self 
		should: [portfolio1 add: account]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio assetHasAssetsInCommonErrorDescription.
		].
	
	
	!

!methodRemoval: PortfolioTest #test17 stamp: 'GR 5/25/2021 22:34:45'!
test17

	|portfolio1 portfolio2 account|
	
	portfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.
	
	account := ReceptiveAccount new.
	
	portfolio1 add: account.
	
	portfolio2 add: account.
	
	self 
		should: [portfolio1 add: portfolio2]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio assetHasAssetsInCommonErrorDescription.
		].
	
	
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:35:08' prior: 50866158!
test18

	|portfolio1 portfolio2 parentPortfolio account|
	
	portfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.

	parentPortfolio := Portfolio new.
		
	account := ReceptiveAccount new.
	
	portfolio1 add: account.
	
	portfolio2 add: account.
	
	parentPortfolio add: portfolio1.
	
	self 
		should: [parentPortfolio add: portfolio2]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio assetHasAssetsInCommonErrorDescription.
		].
	
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:35:17' prior: 50868221!
test18

	|childPortfolio1 portfolio2 parentPortfolio account|
	
	childPortfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.

	parentPortfolio := Portfolio new.
		
	account := ReceptiveAccount new.
	
	childPortfolio1 add: account.
	
	portfolio2 add: account.
	
	parentPortfolio add: childPortfolio1.
	
	self 
		should: [parentPortfolio add: portfolio2]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio assetHasAssetsInCommonErrorDescription.
		].
	
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:35:26' prior: 50868240!
test18

	|childPortfolio1 childPortfolio2 parentPortfolio account|
	
	childPortfolio1 := Portfolio new.
	
	childPortfolio2 := Portfolio new.

	parentPortfolio := Portfolio new.
		
	account := ReceptiveAccount new.
	
	childPortfolio1 add: account.
	
	childPortfolio2 add: account.
	
	parentPortfolio add: childPortfolio1.
	
	self 
		should: [parentPortfolio add: childPortfolio2]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio assetHasAssetsInCommonErrorDescription.
		].
	
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:35:33' prior: 50868260!
test18

	|parentPortfolio childPortfolio1 childPortfolio2 account|
	
	childPortfolio1 := Portfolio new.
	
	childPortfolio2 := Portfolio new.

	parentPortfolio := Portfolio new.
		
	account := ReceptiveAccount new.
	
	childPortfolio1 add: account.
	
	childPortfolio2 add: account.
	
	parentPortfolio add: childPortfolio1.
	
	self 
		should: [parentPortfolio add: childPortfolio2]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio assetHasAssetsInCommonErrorDescription.
		].
	
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:36:13'!
test11CantAddAssetWithAssetsInCommon

	|parentPortfolio childPortfolio1 childPortfolio2 account|
	
	childPortfolio1 := Portfolio new.
	
	childPortfolio2 := Portfolio new.

	parentPortfolio := Portfolio new.
		
	account := ReceptiveAccount new.
	
	childPortfolio1 add: account.
	
	childPortfolio2 add: account.
	
	parentPortfolio add: childPortfolio1.
	
	self 
		should: [parentPortfolio add: childPortfolio2]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio assetHasAssetsInCommonErrorDescription.
		].
	
	
	! !

!methodRemoval: PortfolioTest #test18 stamp: 'GR 5/25/2021 22:36:13'!
test18

	|parentPortfolio childPortfolio1 childPortfolio2 account|
	
	childPortfolio1 := Portfolio new.
	
	childPortfolio2 := Portfolio new.

	parentPortfolio := Portfolio new.
		
	account := ReceptiveAccount new.
	
	childPortfolio1 add: account.
	
	childPortfolio2 add: account.
	
	parentPortfolio add: childPortfolio1.
	
	self 
		should: [parentPortfolio add: childPortfolio2]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio assetHasAssetsInCommonErrorDescription.
		].
	
	
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:36:37' prior: 50866190!
test19

	|parentPortfolio portfolio2|
	
	parentPortfolio := Portfolio new.
	
	portfolio2 := Portfolio new.
	
	parentPortfolio add: portfolio2 .
	
	self 
		should: [parentPortfolio add: portfolio2]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio assetHasAssetsInCommonErrorDescription.
		].
	
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:36:45' prior: 50868340!
test19

	|parentPortfolio childPortfolio|
	
	parentPortfolio := Portfolio new.
	
	childPortfolio := Portfolio new.
	
	parentPortfolio add: childPortfolio .
	
	self 
		should: [parentPortfolio add: childPortfolio]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio assetHasAssetsInCommonErrorDescription.
		].
	
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:38:08'!
test12CannotAddSameAssetTwice

	|parentPortfolio childPortfolio|
	
	parentPortfolio := Portfolio new.
	
	childPortfolio := Portfolio new.
	
	parentPortfolio add: childPortfolio .
	
	self 
		should: [parentPortfolio add: childPortfolio]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio assetHasAssetsInCommonErrorDescription.
		].
	
	
	! !

!methodRemoval: PortfolioTest #test19 stamp: 'GR 5/25/2021 22:38:09'!
test19

	|parentPortfolio childPortfolio|
	
	parentPortfolio := Portfolio new.
	
	childPortfolio := Portfolio new.
	
	parentPortfolio add: childPortfolio .
	
	self 
		should: [parentPortfolio add: childPortfolio]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio assetHasAssetsInCommonErrorDescription.
		].
	
	
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:38:15'!
test11CannotAddAssetWithAssetsInCommon

	|parentPortfolio childPortfolio1 childPortfolio2 account|
	
	childPortfolio1 := Portfolio new.
	
	childPortfolio2 := Portfolio new.

	parentPortfolio := Portfolio new.
		
	account := ReceptiveAccount new.
	
	childPortfolio1 add: account.
	
	childPortfolio2 add: account.
	
	parentPortfolio add: childPortfolio1.
	
	self 
		should: [parentPortfolio add: childPortfolio2]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio assetHasAssetsInCommonErrorDescription.
		].
	
	
	! !

!methodRemoval: PortfolioTest #test11CantAddAssetWithAssetsInCommon stamp: 'GR 5/25/2021 22:38:15'!
test11CantAddAssetWithAssetsInCommon

	|parentPortfolio childPortfolio1 childPortfolio2 account|
	
	childPortfolio1 := Portfolio new.
	
	childPortfolio2 := Portfolio new.

	parentPortfolio := Portfolio new.
		
	account := ReceptiveAccount new.
	
	childPortfolio1 add: account.
	
	childPortfolio2 add: account.
	
	parentPortfolio add: childPortfolio1.
	
	self 
		should: [parentPortfolio add: childPortfolio2]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio assetHasAssetsInCommonErrorDescription.
		].
	
	
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:39:06'!
test13CannotAddAssetWithAssetsInCommon

	|portfolio1 portfolio2 portfolio3 portfolio4|
	
	portfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.

	portfolio3 := Portfolio new.
	
	portfolio4 := Portfolio new.
	
	portfolio1 add: portfolio4 .
	
	portfolio2 add: portfolio4 .
	
	portfolio3 add: portfolio1.
	
	self 
		should: [portfolio3 add: portfolio2]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio assetHasAssetsInCommonErrorDescription.
		].
	
	
	! !

!methodRemoval: PortfolioTest #test20 stamp: 'GR 5/25/2021 22:39:07'!
test20

	|portfolio1 portfolio2 portfolio3 portfolio4|
	
	portfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.

	portfolio3 := Portfolio new.
	
	portfolio4 := Portfolio new.
	
	portfolio1 add: portfolio4 .
	
	portfolio2 add: portfolio4 .
	
	portfolio3 add: portfolio1.
	
	self 
		should: [portfolio3 add: portfolio2]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio assetHasAssetsInCommonErrorDescription.
		].
	
	
	!

!methodRemoval: PortfolioTest #test11CannotAddAssetWithAssetsInCommon stamp: 'GR 5/25/2021 22:39:17'!
test11CannotAddAssetWithAssetsInCommon

	|parentPortfolio childPortfolio1 childPortfolio2 account|
	
	childPortfolio1 := Portfolio new.
	
	childPortfolio2 := Portfolio new.

	parentPortfolio := Portfolio new.
		
	account := ReceptiveAccount new.
	
	childPortfolio1 add: account.
	
	childPortfolio2 add: account.
	
	parentPortfolio add: childPortfolio1.
	
	self 
		should: [parentPortfolio add: childPortfolio2]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio assetHasAssetsInCommonErrorDescription.
		].
	
	
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:40:02' prior: 50868441!
test13CannotAddAssetWithAssetsInCommon

	|portfolio1 portfolio2 parentPortfolio portfolio4|
	
	portfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.

	parentPortfolio := Portfolio new.
	
	portfolio4 := Portfolio new.
	
	portfolio1 add: portfolio4 .
	
	portfolio2 add: portfolio4 .
	
	parentPortfolio add: portfolio1.
	
	self 
		should: [parentPortfolio add: portfolio2]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio assetHasAssetsInCommonErrorDescription.
		].
	
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:40:40' prior: 50868499!
test13CannotAddAssetWithAssetsInCommon

	|childPortfolio1 portfolio2 parentPortfolio portfolio4|
	
	childPortfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.

	parentPortfolio := Portfolio new.
	
	portfolio4 := Portfolio new.
	
	childPortfolio1 add: portfolio4 .
	
	portfolio2 add: portfolio4 .
	
	parentPortfolio add: childPortfolio1.
	
	self 
		should: [parentPortfolio add: portfolio2]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio assetHasAssetsInCommonErrorDescription.
		].
	
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:40:48' prior: 50868519!
test13CannotAddAssetWithAssetsInCommon

	|childPortfolio1 childPortfolio2 parentPortfolio portfolio4|
	
	childPortfolio1 := Portfolio new.
	
	childPortfolio2 := Portfolio new.

	parentPortfolio := Portfolio new.
	
	portfolio4 := Portfolio new.
	
	childPortfolio1 add: portfolio4 .
	
	childPortfolio2 add: portfolio4 .
	
	parentPortfolio add: childPortfolio1.
	
	self 
		should: [parentPortfolio add: childPortfolio2]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio assetHasAssetsInCommonErrorDescription.
		].
	
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:40:58' prior: 50868540!
test13CannotAddAssetWithAssetsInCommon

	|childPortfolio1 childPortfolio2 parentPortfolio assetInCommon|
	
	childPortfolio1 := Portfolio new.
	
	childPortfolio2 := Portfolio new.

	parentPortfolio := Portfolio new.
	
	assetInCommon := Portfolio new.
	
	childPortfolio1 add: assetInCommon .
	
	childPortfolio2 add: assetInCommon .
	
	parentPortfolio add: childPortfolio1.
	
	self 
		should: [parentPortfolio add: childPortfolio2]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio assetHasAssetsInCommonErrorDescription.
		].
	
	
	! !

!methodRemoval: PortfolioTest #test22 stamp: 'GR 5/25/2021 22:42:03'!
test22

	|portfolio1 portfolio2 portfolio3 account|
	
	portfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.
	
	portfolio3 := Portfolio new.

	account := ReceptiveAccount new.
	
	portfolio1 add: account .
	
	portfolio1 add: portfolio2.
	
	portfolio3 add: portfolio2.
	
	self 
		should: [portfolio2 add: account]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio ownerHasAssetsInCommonErrorDescription.
		].
	
	
	!

!methodRemoval: PortfolioTest #test21 stamp: 'GR 5/25/2021 22:42:28'!
test21

	|portfolio1 portfolio2 account|
	
	portfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.

	account := ReceptiveAccount new.
	
	portfolio1 add: account .
	
	portfolio1 add: portfolio2.
	
	
	self 
		should: [portfolio2 add: account]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio ownerHasAssetsInCommonErrorDescription.
		].
	
	
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:44:23' prior: 50866758!
test23

	|parentPortfolio portfolio2 portfolio3 account|
	
	parentPortfolio := Portfolio new.
	
	portfolio2 := Portfolio new.
	
	portfolio3 := Portfolio new.

	account := ReceptiveAccount new.
	
	parentPortfolio add: account .
	
	parentPortfolio	 add: portfolio2.
	
	portfolio2 add: portfolio3.
	
	self 
		should: [portfolio3 add: account]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio ownerHasAssetsInCommonErrorDescription.
		].
	
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:45:02' prior: 50868616!
test23

	|rootPortfolio portfolio2 portfolio3 account|
	
	rootPortfolio := Portfolio new.
	
	portfolio2 := Portfolio new.
	
	portfolio3 := Portfolio new.

	account := ReceptiveAccount new.
	
	rootPortfolio add: account .
	
	rootPortfolio	 add: portfolio2.
	
	portfolio2 add: portfolio3.
	
	self 
		should: [portfolio3 add: account]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio ownerHasAssetsInCommonErrorDescription.
		].
	
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:45:17' prior: 50868635!
test23

	|rootPortfolio middlePortfolio portfolio3 account|
	
	rootPortfolio := Portfolio new.
	
	middlePortfolio := Portfolio new.
	
	portfolio3 := Portfolio new.

	account := ReceptiveAccount new.
	
	rootPortfolio add: account .
	
	rootPortfolio	 add: middlePortfolio.
	
	middlePortfolio add: portfolio3.
	
	self 
		should: [portfolio3 add: account]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio ownerHasAssetsInCommonErrorDescription.
		].
	
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:45:33' prior: 50868654!
test23

	|rootPortfolio middlePortfolio leavePortfolio account|
	
	rootPortfolio := Portfolio new.
	
	middlePortfolio := Portfolio new.
	
	leavePortfolio := Portfolio new.

	account := ReceptiveAccount new.
	
	rootPortfolio add: account .
	
	rootPortfolio	 add: middlePortfolio.
	
	middlePortfolio add: leavePortfolio.
	
	self 
		should: [leavePortfolio add: account]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio ownerHasAssetsInCommonErrorDescription.
		].
	
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:45:48' prior: 50868673!
test23

	|rootPortfolio middlePortfolio leavePortfolio assetInCommon|
	
	rootPortfolio := Portfolio new.
	
	middlePortfolio := Portfolio new.
	
	leavePortfolio := Portfolio new.

	assetInCommon := ReceptiveAccount new.
	
	rootPortfolio add: assetInCommon .
	
	rootPortfolio	 add: middlePortfolio.
	
	middlePortfolio add: leavePortfolio.
	
	self 
		should: [leavePortfolio add: assetInCommon]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio ownerHasAssetsInCommonErrorDescription.
		].
	
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:49:57' prior: 50868693!
test23

	|rootPortfolio middlePortfolio leavePortfolio portfolio4 assetInCommon|
	
	rootPortfolio := Portfolio new.
	
	middlePortfolio := Portfolio new.
	
	leavePortfolio := Portfolio new.
	
	portfolio4 := Portfolio new.

	assetInCommon := ReceptiveAccount new.
	
	rootPortfolio add: assetInCommon .
	
	rootPortfolio	 add: middlePortfolio.
	
	middlePortfolio add: leavePortfolio.
	
	self 
		should: [leavePortfolio add: assetInCommon]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio ownerHasAssetsInCommonErrorDescription.
		].
	
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:50:16' prior: 50868714!
test23

	|rootPortfolio middlePortfolio leafPortfolio portfolio4 assetInCommon|
	
	rootPortfolio := Portfolio new.
	
	middlePortfolio := Portfolio new.
	
	leafPortfolio := Portfolio new.
	
	portfolio4 := Portfolio new.

	assetInCommon := ReceptiveAccount new.
	
	rootPortfolio add: assetInCommon .
	
	rootPortfolio	 add: middlePortfolio.
	
	middlePortfolio add: leafPortfolio.
	
	self 
		should: [leafPortfolio add: assetInCommon]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio ownerHasAssetsInCommonErrorDescription.
		].
	
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:50:29' prior: 50868736!
test23

	|rootPortfolio middlePortfolio leafPortfolio portfolioWithAssetInCommon assetInCommon|
	
	rootPortfolio := Portfolio new.
	
	middlePortfolio := Portfolio new.
	
	leafPortfolio := Portfolio new.
	
	portfolioWithAssetInCommon := Portfolio new.

	assetInCommon := ReceptiveAccount new.
	
	rootPortfolio add: assetInCommon .
	
	rootPortfolio	 add: middlePortfolio.
	
	middlePortfolio add: leafPortfolio.
	
	self 
		should: [leafPortfolio add: assetInCommon]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio ownerHasAssetsInCommonErrorDescription.
		].
	
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:50:51' prior: 50868758!
test23

	|rootPortfolio middlePortfolio leafPortfolio portfolioWithAssetInCommon assetInCommon|
	
	rootPortfolio := Portfolio new.
	
	middlePortfolio := Portfolio new.
	
	leafPortfolio := Portfolio new.
	
	portfolioWithAssetInCommon := Portfolio new.

	assetInCommon := ReceptiveAccount new.
	
	portfolioWithAssetInCommon add: assetInCommon .
	
	rootPortfolio add: assetInCommon .
	
	rootPortfolio	 add: middlePortfolio.
	
	middlePortfolio add: leafPortfolio.
	
	self 
		should: [leafPortfolio add: assetInCommon]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio ownerHasAssetsInCommonErrorDescription.
		].
	
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:50:58' prior: 50868781!
test23

	|rootPortfolio middlePortfolio leafPortfolio portfolioWithAssetInCommon assetInCommon|
	
	rootPortfolio := Portfolio new.
	
	middlePortfolio := Portfolio new.
	
	leafPortfolio := Portfolio new.
	
	portfolioWithAssetInCommon := Portfolio new.

	assetInCommon := ReceptiveAccount new.
	
	portfolioWithAssetInCommon add: assetInCommon .
	
	rootPortfolio add: assetInCommon .
	
	rootPortfolio	 add: middlePortfolio.
	
	middlePortfolio add: leafPortfolio.
	
	self 
		should: [leafPortfolio add: portfolioWithAssetInCommon]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio ownerHasAssetsInCommonErrorDescription.
		].
	
	
	! !

!testRun: #PortfolioTest #test23 stamp: 'GR 5/25/2021 22:51:00'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveZeroBalance stamp: 'GR 5/25/2021 22:51:00'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOneAccountShouldHaveSameBalanceAsAccount stamp: 'GR 5/25/2021 22:51:00'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioShouldHaveSameBalanceAsSumOfAssetsBalance stamp: 'GR 5/25/2021 22:51:00'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioShouldNotHaveResgisteredUnrelatedTransactions stamp: 'GR 5/25/2021 22:51:00'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioShouldNotHaveTransactions stamp: 'GR 5/25/2021 22:51:00'!
PASSED!

!testRun: #PortfolioTest #test09CombinedPortfolioShouldKnowItsBalance stamp: 'GR 5/25/2021 22:51:00'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioShouldHaveRegisteredItsAssetsTransactions stamp: 'GR 5/25/2021 22:51:00'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioShouldKnowItsAssetsTransactions stamp: 'GR 5/25/2021 22:51:00'!
PASSED!

!testRun: #PortfolioTest #test12CannotAddSameAssetTwice stamp: 'GR 5/25/2021 22:51:00'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddAssetWithAssetsInCommon stamp: 'GR 5/25/2021 22:51:00'!
PASSED!

!testRun: #PortfolioTest #test23 stamp: 'GR 5/25/2021 22:51:01'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'GR 5/25/2021 22:51:01'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:51:44'!
test14CannotAddAssetWithAssetsInCommonWithAncestry

	|rootPortfolio middlePortfolio leafPortfolio portfolioWithAssetInCommon assetInCommon|
	
	rootPortfolio := Portfolio new.
	
	middlePortfolio := Portfolio new.
	
	leafPortfolio := Portfolio new.
	
	portfolioWithAssetInCommon := Portfolio new.

	assetInCommon := ReceptiveAccount new.
	
	portfolioWithAssetInCommon add: assetInCommon .
	
	rootPortfolio add: assetInCommon .
	
	rootPortfolio	 add: middlePortfolio.
	
	middlePortfolio add: leafPortfolio.
	
	self 
		should: [leafPortfolio add: portfolioWithAssetInCommon]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio ownerHasAssetsInCommonErrorDescription.
		].
	
	
	! !

!methodRemoval: PortfolioTest #test23 stamp: 'GR 5/25/2021 22:51:48'!
test23

	|rootPortfolio middlePortfolio leafPortfolio portfolioWithAssetInCommon assetInCommon|
	
	rootPortfolio := Portfolio new.
	
	middlePortfolio := Portfolio new.
	
	leafPortfolio := Portfolio new.
	
	portfolioWithAssetInCommon := Portfolio new.

	assetInCommon := ReceptiveAccount new.
	
	portfolioWithAssetInCommon add: assetInCommon .
	
	rootPortfolio add: assetInCommon .
	
	rootPortfolio	 add: middlePortfolio.
	
	middlePortfolio add: leafPortfolio.
	
	self 
		should: [leafPortfolio add: portfolioWithAssetInCommon]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio ownerHasAssetsInCommonErrorDescription.
		].
	
	
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:51:59'!
test24CannotAddSelf

	|portfolio1|
	
	portfolio1 := Portfolio new.
	
	self 
		should: [portfolio1 add: portfolio1]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio assetIsSelfErrorDescription .
		].
	
	
	! !

!methodRemoval: PortfolioTest #test24 stamp: 'GR 5/25/2021 22:52:02'!
test24

	|portfolio1|
	
	portfolio1 := Portfolio new.
	
	self 
		should: [portfolio1 add: portfolio1]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio assetIsSelfErrorDescription .
		].
	
	
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:52:09'!
test04PortfolioShouldNotHaveResgisteredUnrelatedTransactions

	|portfolio account transaction|
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	transaction := Deposit for: 100. 
	
	portfolio add: account.
	
	self deny: (portfolio hasRegistered: transaction).
	
! !

!methodRemoval: PortfolioTest #test05PortfolioShouldNotHaveResgisteredUnrelatedTransactions stamp: 'GR 5/25/2021 22:52:09'!
test05PortfolioShouldNotHaveResgisteredUnrelatedTransactions

	|portfolio account transaction|
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	transaction := Deposit for: 100. 
	
	portfolio add: account.
	
	self deny: (portfolio hasRegistered: transaction).
	
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:52:15'!
test05EmptyPortfolioShouldNotHaveTransactions

	|portfolio|
	
	portfolio := Portfolio new.
	
	self assert: (portfolio transactions isEmpty).
	
! !

!methodRemoval: PortfolioTest #test06EmptyPortfolioShouldNotHaveTransactions stamp: 'GR 5/25/2021 22:52:15'!
test06EmptyPortfolioShouldNotHaveTransactions

	|portfolio|
	
	portfolio := Portfolio new.
	
	self assert: (portfolio transactions isEmpty).
	
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:52:37'!
test06PortfolioShouldHaveRegisteredItsAssetsTransactions

	|portfolio1 portfolio2 account deposit|
	
	portfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: account. 
	
	portfolio2 add: account.
	
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 hasRegistered: deposit).! !

!methodRemoval: PortfolioTest #test09PortfolioShouldHaveRegisteredItsAssetsTransactions stamp: 'GR 5/25/2021 22:52:37'!
test09PortfolioShouldHaveRegisteredItsAssetsTransactions

	|portfolio1 portfolio2 account deposit|
	
	portfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: account. 
	
	portfolio2 add: account.
	
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 hasRegistered: deposit).!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:52:42'!
test07CombinedPortfolioShouldKnowItsBalance

	|parentPortfolio childPortfolio1 childPortfolio2 account1 account2|
	
	childPortfolio1 := Portfolio new.
	
	childPortfolio2 := Portfolio new.
	
	parentPortfolio := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	Deposit register: 100 on: account1. 
	
	childPortfolio1 add: account1.
	
	account2 := ReceptiveAccount new.
	
	Deposit register: 200 on: account2. 
	
	childPortfolio2 add: account2.
	
	parentPortfolio add: childPortfolio1 .
	
	parentPortfolio add: childPortfolio2.
	
	self assert: 300 equals: parentPortfolio balance.! !

!methodRemoval: PortfolioTest #test09CombinedPortfolioShouldKnowItsBalance stamp: 'GR 5/25/2021 22:52:42'!
test09CombinedPortfolioShouldKnowItsBalance

	|parentPortfolio childPortfolio1 childPortfolio2 account1 account2|
	
	childPortfolio1 := Portfolio new.
	
	childPortfolio2 := Portfolio new.
	
	parentPortfolio := Portfolio new.
	
	account1 := ReceptiveAccount new.
	
	Deposit register: 100 on: account1. 
	
	childPortfolio1 add: account1.
	
	account2 := ReceptiveAccount new.
	
	Deposit register: 200 on: account2. 
	
	childPortfolio2 add: account2.
	
	parentPortfolio add: childPortfolio1 .
	
	parentPortfolio add: childPortfolio2.
	
	self assert: 300 equals: parentPortfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:52:52'!
test08PortfolioShouldKnowItsAssetsTransactions

	|parentPortfolio childPortfolio account deposit transactions|
	
	parentPortfolio := Portfolio new.
	
	childPortfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: account. 
	
	childPortfolio add: account.
	
	parentPortfolio add: childPortfolio.
	
	transactions := parentPortfolio transactions.
	
	self assert: 1 equals: transactions size.
	
	self assert: (transactions includes: deposit ).! !

!methodRemoval: PortfolioTest #test10PortfolioShouldKnowItsAssetsTransactions stamp: 'GR 5/25/2021 22:52:52'!
test10PortfolioShouldKnowItsAssetsTransactions

	|parentPortfolio childPortfolio account deposit transactions|
	
	parentPortfolio := Portfolio new.
	
	childPortfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: account. 
	
	childPortfolio add: account.
	
	parentPortfolio add: childPortfolio.
	
	transactions := parentPortfolio transactions.
	
	self assert: 1 equals: transactions size.
	
	self assert: (transactions includes: deposit ).!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:52:59'!
test09CannotAddSameAssetTwice

	|parentPortfolio childPortfolio|
	
	parentPortfolio := Portfolio new.
	
	childPortfolio := Portfolio new.
	
	parentPortfolio add: childPortfolio .
	
	self 
		should: [parentPortfolio add: childPortfolio]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio assetHasAssetsInCommonErrorDescription.
		].
	
	
	! !

!methodRemoval: PortfolioTest #test12CannotAddSameAssetTwice stamp: 'GR 5/25/2021 22:52:59'!
test12CannotAddSameAssetTwice

	|parentPortfolio childPortfolio|
	
	parentPortfolio := Portfolio new.
	
	childPortfolio := Portfolio new.
	
	parentPortfolio add: childPortfolio .
	
	self 
		should: [parentPortfolio add: childPortfolio]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio assetHasAssetsInCommonErrorDescription.
		].
	
	
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:53:04'!
test10CannotAddAssetWithAssetsInCommon

	|childPortfolio1 childPortfolio2 parentPortfolio assetInCommon|
	
	childPortfolio1 := Portfolio new.
	
	childPortfolio2 := Portfolio new.

	parentPortfolio := Portfolio new.
	
	assetInCommon := Portfolio new.
	
	childPortfolio1 add: assetInCommon .
	
	childPortfolio2 add: assetInCommon .
	
	parentPortfolio add: childPortfolio1.
	
	self 
		should: [parentPortfolio add: childPortfolio2]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio assetHasAssetsInCommonErrorDescription.
		].
	
	
	! !

!methodRemoval: PortfolioTest #test13CannotAddAssetWithAssetsInCommon stamp: 'GR 5/25/2021 22:53:04'!
test13CannotAddAssetWithAssetsInCommon

	|childPortfolio1 childPortfolio2 parentPortfolio assetInCommon|
	
	childPortfolio1 := Portfolio new.
	
	childPortfolio2 := Portfolio new.

	parentPortfolio := Portfolio new.
	
	assetInCommon := Portfolio new.
	
	childPortfolio1 add: assetInCommon .
	
	childPortfolio2 add: assetInCommon .
	
	parentPortfolio add: childPortfolio1.
	
	self 
		should: [parentPortfolio add: childPortfolio2]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio assetHasAssetsInCommonErrorDescription.
		].
	
	
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:53:08'!
test11CannotAddAssetWithAssetsInCommonWithAncestry

	|rootPortfolio middlePortfolio leafPortfolio portfolioWithAssetInCommon assetInCommon|
	
	rootPortfolio := Portfolio new.
	
	middlePortfolio := Portfolio new.
	
	leafPortfolio := Portfolio new.
	
	portfolioWithAssetInCommon := Portfolio new.

	assetInCommon := ReceptiveAccount new.
	
	portfolioWithAssetInCommon add: assetInCommon .
	
	rootPortfolio add: assetInCommon .
	
	rootPortfolio	 add: middlePortfolio.
	
	middlePortfolio add: leafPortfolio.
	
	self 
		should: [leafPortfolio add: portfolioWithAssetInCommon]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio ownerHasAssetsInCommonErrorDescription.
		].
	
	
	! !

!methodRemoval: PortfolioTest #test14CannotAddAssetWithAssetsInCommonWithAncestry stamp: 'GR 5/25/2021 22:53:08'!
test14CannotAddAssetWithAssetsInCommonWithAncestry

	|rootPortfolio middlePortfolio leafPortfolio portfolioWithAssetInCommon assetInCommon|
	
	rootPortfolio := Portfolio new.
	
	middlePortfolio := Portfolio new.
	
	leafPortfolio := Portfolio new.
	
	portfolioWithAssetInCommon := Portfolio new.

	assetInCommon := ReceptiveAccount new.
	
	portfolioWithAssetInCommon add: assetInCommon .
	
	rootPortfolio add: assetInCommon .
	
	rootPortfolio	 add: middlePortfolio.
	
	middlePortfolio add: leafPortfolio.
	
	self 
		should: [leafPortfolio add: portfolioWithAssetInCommon]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio ownerHasAssetsInCommonErrorDescription.
		].
	
	
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 5/25/2021 22:53:14'!
test12CannotAddSelf

	|portfolio1|
	
	portfolio1 := Portfolio new.
	
	self 
		should: [portfolio1 add: portfolio1]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio assetIsSelfErrorDescription .
		].
	
	
	! !

!methodRemoval: PortfolioTest #test24CannotAddSelf stamp: 'GR 5/25/2021 22:53:15'!
test24CannotAddSelf

	|portfolio1|
	
	portfolio1 := Portfolio new.
	
	self 
		should: [portfolio1 add: portfolio1]
		
		raise: Error
		
		withExceptionDo: [:anError | 
			
			self assert: anError messageText = Portfolio assetIsSelfErrorDescription .
		].
	
	
	!

----SNAPSHOT----(25 May 2021 23:15:01) CuisUniversity-4532bis.image priorSource: 17148263!