

----QUIT----(9 March 2021 14:58:42) CuisUniversity-4532.image priorSource: 13044060!

----STARTUP---- (9 March 2021 14:58:43) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4532.image!


----QUIT----(9 March 2021 14:58:43) CuisUniversity-4532.image priorSource: 16885479!

----STARTUP---- (27 May 2021 20:40:48) as /home/alejandro/Documents/Cs.Computacion/Inge 1/linux64/CuisUniversity-4532.image!


----End fileIn of /home/alejandro/Documents/Cs.Computacion/Inge 1/linux64/Portfolio-Solucion.st----!

TestCase subclass: #Portfolio2Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio2Test category: 'Portfolio-Solucion' stamp: 'Am 5/27/2021 20:43:03'!
TestCase subclass: #Portfolio2Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio2Test methodsFor: 'no messages' stamp: 'Am 5/27/2021 20:44:26'!
test01transfer100
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 20:46:38' prior: 50860066!
test01transfer100
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 20:47:42' prior: 50860073!
test01transfer100
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	account1 transferAmount: 100 to: account2.
	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 20:48:29' prior: 50860080!
test01transfer100
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	account1 transferAmount: 100 to: account2.
	
	self assert: (account2 balance = 100).
	
	
	

	
	! !

!testRun: #Portfolio2Test #test01transfer100 stamp: 'Am 5/27/2021 20:48:36'!
ERROR!

!testRun: #Portfolio2Test #test01transfer100 stamp: 'Am 5/27/2021 20:48:36'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 20:49:01'!
transferAmount: aSmallInteger to: aReceptiveAccount 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 20:54:33' prior: 50860104!
transferAmount: anAmount to: anAccount 
! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Am 5/27/2021 20:56:25'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 20:55:59' prior: 50860110!
transferAmount: anAmount to: anAccount 
	Transfer from: self to:anAccount withAmount: anAmount.
! !

!testRun: #Portfolio2Test #test01transfer100 stamp: 'Am 5/27/2021 20:56:43'!
ERROR!

!testRun: #Portfolio2Test #test01transfer100 stamp: 'Am 5/27/2021 20:56:43'!
ERROR!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 20:56:54'!
from: aReceptiveAccount to: aReceptiveAccount2 withAmount: aSmallInteger 
	self shouldBeImplemented.! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:00:33' prior: 50860133!
from: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount 
	|aTransfer|
	aTransfer:=Transfer new.
	aTransfer madeFrom: aReceptiveAccount to: aReceptiveAccount2  withAmount: anAmount.
	! !

!testRun: #Portfolio2Test #test01transfer100 stamp: 'Am 5/27/2021 21:00:40'!
ERROR!
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:00:47'!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: aSmallInteger 
	self shouldBeImplemented.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:02:15' prior: 50860152!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: aSmallInteger 
	aReceptiveAccount2 registerTransfer: self.! !

!testRun: #Portfolio2Test #test01transfer100 stamp: 'Am 5/27/2021 21:02:19'!
ERROR!
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:03:16' prior: 50860159!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount 
	aReceptiveAccount2 registerTransfer: self withAmount: anAmount.! !

!testRun: #Portfolio2Test #test01transfer100 stamp: 'Am 5/27/2021 21:06:12'!
ERROR!

!testRun: #Portfolio2Test #test01transfer100 stamp: 'Am 5/27/2021 21:06:12'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:06:21'!
registerTransfer: aTransfer withAmount: aSmallInteger 
	self shouldBeImplemented.! !

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions transfers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'Am 5/27/2021 21:07:12'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions transfers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #Portfolio2Test #test01transfer100 stamp: 'Am 5/27/2021 21:07:26'!
ERROR!

!testRun: #Portfolio2Test #test01transfer100 stamp: 'Am 5/27/2021 21:07:26'!
ERROR!

!testRun: #Portfolio2Test #test01transfer100 stamp: 'Am 5/27/2021 21:07:40'!
ERROR!

!testRun: #Portfolio2Test #test01transfer100 stamp: 'Am 5/27/2021 21:07:40'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:08:18' prior: 50860182!
registerTransfer: aTransfer withAmount: anAmount 
	transfers add: anAmount.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'Am 5/27/2021 21:08:46' prior: 50859893 overrides: 16896425!
initialize

	super initialize.
	transactions := OrderedCollection new.
	transfers := OrderedCollection new.! !

!testRun: #Portfolio2Test #test01transfer100 stamp: 'Am 5/27/2021 21:08:54'!
FAILURE!

!testRun: #Portfolio2Test #test01transfer100 stamp: 'Am 5/27/2021 21:08:54'!
FAILURE!

----End fileIn of /home/alejandro/Documents/Cs.Computacion/Inge 1/linux64/Packages/TerseGuide.pck.st----!
!ReceptiveAccount methodsFor: 'balance' stamp: 'Am 5/27/2021 21:12:40' prior: 50859916 overrides: 50859721!
balance
	
	^(transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]) +(transfers sum: [:element|element] ifEmpty: [0] )! !

!testRun: #Portfolio2Test #test01transfer100 stamp: 'Am 5/27/2021 21:13:02'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Am 5/27/2021 21:13:17'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Am 5/27/2021 21:13:17'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Am 5/27/2021 21:13:17'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Am 5/27/2021 21:13:17'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Am 5/27/2021 21:13:17'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Am 5/27/2021 21:13:17'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Am 5/27/2021 21:13:17'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Am 5/27/2021 21:13:17'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Am 5/27/2021 21:13:17'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Am 5/27/2021 21:13:17'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Am 5/27/2021 21:13:17'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Am 5/27/2021 21:13:17'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Am 5/27/2021 21:13:17'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Am 5/27/2021 21:13:17'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Am 5/27/2021 21:13:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Am 5/27/2021 21:13:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Am 5/27/2021 21:13:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Am 5/27/2021 21:13:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Am 5/27/2021 21:13:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Am 5/27/2021 21:13:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Am 5/27/2021 21:13:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Am 5/27/2021 21:13:22'!
PASSED!
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:14:02'!
test01transfer100ModifiesRecieverBalance
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	account1 transferAmount: 100 to: account2.
	
	self assert: (account2 balance = 100).
	
	
	

	
	! !

!methodRemoval: Portfolio2Test #test01transfer100 stamp: 'Am 5/27/2021 21:14:02'!
test01transfer100
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	account1 transferAmount: 100 to: account2.
	
	self assert: (account2 balance = 100).
	
	
	

	
	!
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:14:15'!
test01transfer100ModifiesSenderBalance
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	account1 transferAmount: 100 to: account2.
	
	self assert: (account2 balance = 100).
	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:14:21' prior: 50863271!
test01transfer100ModifiesSenderBalance
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	account1 transferAmount: 100 to: account2.
	
	self assert: (account1 balance = -100).
	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:14:30'!
test02transfer100ModifiesSenderBalance
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	account1 transferAmount: 100 to: account2.
	
	self assert: (account1 balance = -100).
	
	
	

	
	! !

!methodRemoval: Portfolio2Test #test01transfer100ModifiesSenderBalance stamp: 'Am 5/27/2021 21:14:30'!
test01transfer100ModifiesSenderBalance
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	account1 transferAmount: 100 to: account2.
	
	self assert: (account1 balance = -100).
	
	
	

	
	!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/27/2021 21:14:33'!
FAILURE!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/27/2021 21:14:33'!
FAILURE!
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:15:28' prior: 50860169!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount 
	aReceptiveAccount2 registerTransfer: self withAmount: anAmount.
	aReceptiveAccount registerOutboundTransfer: self withAmount: anAmount.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:16:19'!
registerInboundTransfer: aTransfer withAmount: anAmount 
	transfers add: anAmount.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:16:19' prior: 50863320!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount 
	aReceptiveAccount2 registerInboundTransfer: self withAmount: anAmount.
	aReceptiveAccount registerOutboundTransfer: self withAmount: anAmount.! !

!methodRemoval: ReceptiveAccount #registerTransfer:withAmount: stamp: 'Am 5/27/2021 21:16:19'!
registerTransfer: aTransfer withAmount: anAmount 
	transfers add: anAmount.!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/27/2021 21:16:34'!
ERROR!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/27/2021 21:16:34'!
ERROR!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/27/2021 21:16:48'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:17:06'!
registerOutboundTransfer: aTransfer withAmount: aSmallInteger 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:17:25' prior: 50863361!
registerOutboundTransfer: aTransfer withAmount: anAmount 
	transfers add: anAmount negated.! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/27/2021 21:17:28'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/27/2021 21:17:33'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/27/2021 21:17:33'!
PASSED!

AccountTransaction subclass: #Transfer
	instanceVariableNames: 'inbound outbound amount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Am 5/27/2021 21:19:03'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: 'inbound outbound amount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:19:45' prior: 50863336!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount 
	outbound:=aReceptiveAccount .
	inbound:= aReceptiveAccount2 .
	amount:= anAmount.
	aReceptiveAccount2 registerInboundTransfer: self withAmount: anAmount.
	aReceptiveAccount registerOutboundTransfer: self withAmount: anAmount.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:21:51' prior: 50863398!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount 
	outbound:=aReceptiveAccount .
	inbound:= aReceptiveAccount2 .
	amount:= anAmount.
	aReceptiveAccount2 registerTransfer: self.
	aReceptiveAccount registerTransfer: self.! !

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/27/2021 21:22:03'!
ERROR!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/27/2021 21:22:03'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:22:11'!
registerTransfer: aTransfer 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:22:22' prior: 50863428!
registerTransfer: aTransfer 
	transfers add: aTransfer.! !

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/27/2021 21:22:24'!
ERROR!

!methodRemoval: ReceptiveAccount #registerOutboundTransfer:withAmount: stamp: 'Am 5/27/2021 21:22:38'!
registerOutboundTransfer: aTransfer withAmount: anAmount 
	transfers add: anAmount negated.!

!methodRemoval: ReceptiveAccount #registerInboundTransfer:withAmount: stamp: 'Am 5/27/2021 21:22:42'!
registerInboundTransfer: aTransfer withAmount: anAmount 
	transfers add: anAmount.!
!ReceptiveAccount methodsFor: 'balance' stamp: 'Am 5/27/2021 21:24:41' prior: 50863157 overrides: 50859721!
balance
	
	^(transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]) +(transactions 
		inject: 0
		into: [ :currentBalance :transfer | transfer affectBalance: currentBalance fromAccount:self ] )! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/27/2021 21:24:52'!
FAILURE!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/27/2021 21:24:52'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'Am 5/27/2021 21:25:16' prior: 50863454 overrides: 50859721!
balance
	
	^(transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]) +(transfers 
		inject: 0
		into: [ :currentBalance :transfer | transfer affectBalance: currentBalance fromAccount:self ] )! !

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/27/2021 21:25:26'!
ERROR!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/27/2021 21:25:26'!
ERROR!
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:25:40'!
affectBalance: aSmallInteger fromAccount: aReceptiveAccount 
	self shouldBeImplemented.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:28:01' prior: 50863490!
affectBalance: aBalance fromAccount: anAccount 
	(anAccount = outbound) ifTrue: [aBalance - amount]  ifFalse: [ aBalance + amount].
	
	"PONER ERROR DESPUES"! !

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/27/2021 21:28:03'!
ERROR!
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:28:33' prior: 50863496!
affectBalance: aBalance fromAccount: anAccount 
	^(anAccount = outbound) ifTrue: [aBalance - amount]  ifFalse: [ aBalance + amount].
	
	"PONER ERROR DESPUES"! !

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/27/2021 21:28:44'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/27/2021 21:28:50'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'Am 5/27/2021 21:29:08' prior: 50863473 overrides: 50859721!
balance
	
	^(transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]) + (transfers 
		inject: 0
		into: [ :currentBalance :transfer | transfer affectBalance: currentBalance fromAccount:self ] )! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:32:02' prior: 50863252!
test01transfer100ModifiesRecieverBalance
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	Transfer from: account1 to:account2 withAmount: 100.
	
	self assert: (account2 balance = 100).
	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:32:17' prior: 50863292!
test02transfer100ModifiesSenderBalance
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	Transfer from: account1 to:account2 withAmount: 100.
	
	self assert: (account1 balance = -100).
	
	
	

	
	! !

!methodRemoval: ReceptiveAccount #transferAmount:to: stamp: 'Am 5/27/2021 21:32:29'!
transferAmount: anAmount to: anAccount 
	Transfer from: self to:anAccount withAmount: anAmount.
!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/27/2021 21:32:38'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/27/2021 21:32:38'!
PASSED!

----SNAPSHOT----(27 May 2021 21:33:01) CuisUniversity-4532.image priorSource: 16885703!

----STARTUP---- (30 May 2021 18:08:21) as /home/alejandro/Documents/Cs.Computacion/Inge 1/linux64/CuisUniversity-4532.image!


Object subclass: #Transfer
	instanceVariableNames: 'inbound outbound amount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Am 5/30/2021 18:09:25'!
Object subclass: #Transfer
	instanceVariableNames: 'inbound outbound amount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 18:09:32'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 18:09:32'!
PASSED!
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:23:22'!
test03transferDoesntAddTransactions
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	Transfer from: account1 to:account2 withAmount: 100.
	
	self assert: (account1 transactions = OrderedCollection new).
	
	
	

	
	! !

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 18:23:26'!
PASSED!
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:23:37' prior: 50863595!
test03transferDoesntAddTransactions
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	Transfer from: account1 to:account2 withAmount: 100.
	
	self assert: (account1 transactions = OrderedCollection new).
	self assert: (account2 transactions = OrderedCollection new).

	
	
	

	
	! !

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 18:23:44'!
PASSED!
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:26:47'!
test04transferRegitersExtractionLeg
	|account1 account2 transfer|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.
	
	self assert: (account1 transactions = OrderedCollection new).

	
	
	

	
	! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:27:14' prior: 50860140!
from: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount 
	|aTransfer|
	aTransfer:=Transfer new.
	aTransfer madeFrom: aReceptiveAccount to: aReceptiveAccount2  withAmount: anAmount.
	^aTransfer
	! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:27:15' prior: 50863638!
from: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount 
	|aTransfer|
	aTransfer:=Transfer new.
	aTransfer madeFrom: aReceptiveAccount to: aReceptiveAccount2  withAmount: anAmount.
	^aTransfer.
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:27:46' prior: 50863626!
test04transferRegitersExtractionLeg
	|account1 account2 transfer|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.
	
	self assert: (transfer extractionLeg = account1).

	
	
	

	
	! !

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 18:27:53'!
ERROR!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 18:27:53'!
ERROR!
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:28:01'!
extractionLeg
	self shouldBeImplemented.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:28:13' prior: 50863676!
extractionLeg
	^inbound! !

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 18:28:16'!
FAILURE!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Am 5/30/2021 18:29:19'!
Object subclass: #Transfer
	instanceVariableNames: 'inbound sender amount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:29:19' prior: 50863411!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount 
	sender:=aReceptiveAccount .
	inbound:= aReceptiveAccount2 .
	amount:= anAmount.
	aReceptiveAccount2 registerTransfer: self.
	aReceptiveAccount registerTransfer: self.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:29:19' prior: 50863508!
affectBalance: aBalance fromAccount: anAccount 
	^(anAccount = sender) ifTrue: [aBalance - amount]  ifFalse: [ aBalance + amount].
	
	"PONER ERROR DESPUES"! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Am 5/30/2021 18:29:27'!
Object subclass: #Transfer
	instanceVariableNames: 'reciever sender amount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:29:27' prior: 50863696!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount 
	sender:=aReceptiveAccount .
	reciever:= aReceptiveAccount2 .
	amount:= anAmount.
	aReceptiveAccount2 registerTransfer: self.
	aReceptiveAccount registerTransfer: self.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:29:27' prior: 50863681!
extractionLeg
	^reciever! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:29:34' prior: 50863734!
extractionLeg
	^sender! !

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 18:29:46'!
PASSED!
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:30:02'!
test04transferRegitersDepositLeg
	|account1 account2 transfer|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.
	
	self assert: (transfer depositLeg = account2).

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:30:19'!
test05transferRegitersDepositLeg
	|account1 account2 transfer|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.
	
	self assert: (transfer depositLeg = account2).

	
	
	

	
	! !

!methodRemoval: Portfolio2Test #test04transferRegitersDepositLeg stamp: 'Am 5/30/2021 18:30:19'!
test04transferRegitersDepositLeg
	|account1 account2 transfer|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.
	
	self assert: (transfer depositLeg = account2).

	
	
	

	
	!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 18:30:21'!
ERROR!
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:30:27'!
depositLeg
	self shouldBeImplemented.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:30:39' prior: 50863781!
depositLeg
	^reciever.! !

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 18:30:40'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 18:30:40'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 18:30:40'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 18:30:40'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 18:30:40'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 18:30:40'!
PASSED!
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:31:01'!
test06transferRegitersValue
	|account1 account2 transfer|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.
	
	self assert: (transfer value = 100).

	
	
	

	
	! !

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 18:31:05'!
FAILURE!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 18:31:05'!
FAILURE!
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:31:45' overrides: 16881508!
value
	^amount.! !

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 18:31:51'!
PASSED!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:34:18'!
negativeValueTransfer
	"Cannot do a negative value transfer"! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:34:37' prior: 50863809!
test06transferRegitersValue
	|account1 account2 transfer|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.
	
	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:35:02'!
test07transferCantTakeNegativeValues
	|account1 account2 transfer|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.
	
	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:36:45' prior: 50863849!
test07transferCantTakeNegativeValues
	|account1 account2 transfer|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	self 
		should: [ transfer:=Transfer from: account1 to:account2 withAmount: 100. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Transfer  equals: anError messageText.
			]
	
	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:37:22' prior: 50863859!
test07transferCantTakeNegativeValues
	|account1 account2 transfer|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	self 
		should: [ transfer:=Transfer from: account1 to:account2 withAmount: 100. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Transfer negativeValueTransfer equals: anError messageText.
			]
	
	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:37:38' prior: 50863874!
test07transferCantTakeNegativeValues
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	self 
		should: [ Transfer from: account1 to:account2 withAmount: 100. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Transfer negativeValueTransfer equals: anError messageText.
			]
	
	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:37:42' prior: 50863890!
test07transferCantTakeNegativeValues
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	self 
		should: [ Transfer from: account1 to:account2 withAmount: -100. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Transfer negativeValueTransfer equals: anError messageText.
			]
	
	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 18:37:46'!
FAILURE!
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:40:03' prior: 50863723!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount 

	(anAmount <=0) ifTrue:[self error: self class negativeValueTransfer ].

	sender:=aReceptiveAccount .
	reciever:= aReceptiveAccount2 .
	amount:= anAmount.
	aReceptiveAccount2 registerTransfer: self.
	aReceptiveAccount registerTransfer: self.! !

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 18:40:09'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 18:40:09'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 18:40:09'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 18:40:09'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 18:40:09'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 18:40:09'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 18:40:09'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 18:40:09'!
PASSED!

----SNAPSHOT----(30 May 2021 18:42:06) CuisUniversity-4532.image priorSource: 17021376!
!Portfolio2Test methodsFor: 'transferTests' stamp: 'Am 5/30/2021 18:47:30'!
test08accountSummaryDepositAmount0
	|account1 |
	account1:= ReceptiveAccount new.
	
	self assert: (account1 accountSummary at: 0)  equals: 0.
	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test08accountSummaryDepositAmount0 stamp: 'Am 5/30/2021 18:48:28'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:48:41'!
accountSummary
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:48:58' prior: 50863976!
accountSummary
	^OrderedCollection new add:0.! !

!testRun: #Portfolio2Test #test08accountSummaryDepositAmount0 stamp: 'Am 5/30/2021 18:49:00'!
ERROR!

!testRun: #Portfolio2Test #test08accountSummaryDepositAmount0 stamp: 'Am 5/30/2021 18:49:04'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:50:01' prior: 50863981!
accountSummary
	|reporte|
	reporte:=OrderedCollection new.
	^ reporte add:0.! !

!testRun: #Portfolio2Test #test08accountSummaryDepositAmount0 stamp: 'Am 5/30/2021 18:50:07'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:50:40' prior: 50863993!
accountSummary
	|reporte|
	reporte:=OrderedCollection new.
	reporte add: 0.
	^ reporte.! !

!testRun: #Portfolio2Test #test08accountSummaryDepositAmount0 stamp: 'Am 5/30/2021 18:50:47'!
ERROR!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 18:50:56' prior: 50863965!
test08accountSummaryDepositAmount0
	|account1 |
	account1:= ReceptiveAccount new.
	
	self assert: (account1 accountSummary at: 1)  equals: 0.
	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test08accountSummaryDepositAmount0 stamp: 'Am 5/30/2021 18:50:58'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 18:50:58'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 18:50:58'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 18:50:58'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 18:50:58'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 18:50:58'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 18:50:58'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 18:50:58'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryDepositAmount0 stamp: 'Am 5/30/2021 18:50:58'!
PASSED!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 18:51:59'!
test09accountSummaryDepositAmount100
	|account1 |
	account1:= ReceptiveAccount new.
	
	self assert: (account1 accountSummary at: 1)  equals: 0.
	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 18:52:31' prior: 50864048!
test09accountSummaryDepositAmount100
	|account1 |
	account1:= ReceptiveAccount new.
	
	
	
	self assert: (account1 accountSummary at: 1)  equals: 0.
	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 18:53:27' prior: 50864056!
test09accountSummaryDepositAmount100
	|account1 |
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	
	self assert: (account1 accountSummary at: 1)  equals: 100.
	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 18:53:34'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:56:13' prior: 50864002!
accountSummary
	|reporte |
	reporte:=OrderedCollection new.
	
	reporte add:( transactions inject: 0 into: [:aTransaction| aTransaction value]).
	
	^ reporte.! !

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 18:56:41'!
ERROR!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 18:58:21'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:00:03' prior: 50864078!
accountSummary
	|reporte |
	reporte:=OrderedCollection new.
	
	reporte add:( transactions sum: [:aTransaction| aTransaction value]).
	
	^ reporte.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:00:24' prior: 50864093!
accountSummary
	|reporte |
	reporte:=OrderedCollection new.
	
	reporte add:( transactions sum: [:aTransaction| aTransaction value] ifEmpty:[0]).
	
	^ reporte.! !

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:00:33'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 19:00:33'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 19:00:33'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 19:00:33'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 19:00:33'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 19:00:33'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 19:00:33'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 19:00:33'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryDepositAmount0 stamp: 'Am 5/30/2021 19:00:33'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:00:33'!
PASSED!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:01:46'!
test09accountSummaryTwoDepositAmount200
	|account1 |
	account1:= ReceptiveAccount new.
	
	Deposit register: 200 on: account1.
	
	self assert: (account1 accountSummary at: 1)  equals: 200.
	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test09accountSummaryTwoDepositAmount200 stamp: 'Am 5/30/2021 19:01:48'!
PASSED!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:02:02' prior: 50864141!
test09accountSummaryTwoDepositAmount200
	|account1 |
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	Deposit register: 100 on: account1.

	
	self assert: (account1 accountSummary at: 1)  equals: 200.
	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test09accountSummaryTwoDepositAmount200 stamp: 'Am 5/30/2021 19:02:04'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 19:02:04'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 19:02:04'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 19:02:04'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 19:02:04'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 19:02:04'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 19:02:04'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 19:02:04'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryDepositAmount0 stamp: 'Am 5/30/2021 19:02:04'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:02:04'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryTwoDepositAmount200 stamp: 'Am 5/30/2021 19:02:04'!
PASSED!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:07:51'!
test08accountSummaryBalanceAmount0
	|account1 |
	account1:= ReceptiveAccount new.
	
	self assert: (account1 accountSummary at: 1)  equals: 0.
	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:09:23' prior: 50864200!
test08accountSummaryBalanceAmount0
	|account1 |
	account1:= ReceptiveAccount new.
	
	self assert: (account1 accountSummary at: 1)  equals: ('Balance: 0').
	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:09:28'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:10:37' prior: 50864101!
accountSummary
	|reporte balance |
	reporte:=OrderedCollection new.
	
	balance:=( transactions sum: [:aTransaction| aTransaction value] ifEmpty:[0]).
	reporte add: ('Balance: ', balance asString).
	
	^ reporte.! !

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:10:43'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 19:10:43'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 19:10:43'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 19:10:43'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 19:10:43'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 19:10:43'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 19:10:43'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 19:10:43'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:10:43'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryDepositAmount0 stamp: 'Am 5/30/2021 19:10:43'!
FAILURE!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:10:43'!
FAILURE!

!testRun: #Portfolio2Test #test09accountSummaryTwoDepositAmount200 stamp: 'Am 5/30/2021 19:10:43'!
FAILURE!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:10:51'!
PASSED!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:12:03' prior: 50864220!
accountSummary
	|reporte |
	reporte:=OrderedCollection new.
	reporte add: ('Balance: ', self balance asString).
	
	^ reporte.! !

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:12:11'!
PASSED!

!methodRemoval: Portfolio2Test #test08accountSummaryDepositAmount0 stamp: 'Am 5/30/2021 19:12:20'!
test08accountSummaryDepositAmount0
	|account1 |
	account1:= ReceptiveAccount new.
	
	self assert: (account1 accountSummary at: 1)  equals: 0.
	

	
	
	

	
	!

!methodRemoval: Portfolio2Test #test09accountSummaryTwoDepositAmount200 stamp: 'Am 5/30/2021 19:12:24'!
test09accountSummaryTwoDepositAmount200
	|account1 |
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	Deposit register: 100 on: account1.

	
	self assert: (account1 accountSummary at: 1)  equals: 200.
	

	
	
	

	
	!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:13:48' prior: 50864208!
test08accountSummaryBalanceAmount0
	|account1 |
	account1:= ReceptiveAccount new.
	
	self assert: (account1 accountSummary at: 1)  equals: ('Balance = 0').
	

	
	
	

	
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:13:58' prior: 50864273!
accountSummary
	|reporte |
	reporte:=OrderedCollection new.
	reporte add: ('Balance = ', self balance asString).
	
	^ reporte.! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:14:43' prior: 50864065!
test09accountSummaryDepositAmount100
	|account1 |
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	
	self assert: (account1 accountSummary at: 1)  equals: ('Deposito por 100').
	self assert: (account1 accountSummary at: 2)  equals: ('Balance = 100').

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:14:48'!
FAILURE!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:14:57'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:16:02' prior: 50864311!
accountSummary
	|reporte |
	reporte:=OrderedCollection new.
	reporte add: ('Deposito por 100').
	
	reporte add: ('Balance = ', self balance asString).
	
	^ reporte.! !

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:16:11'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 19:16:11'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 19:16:11'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 19:16:11'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 19:16:11'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 19:16:11'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 19:16:11'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 19:16:11'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:16:11'!
FAILURE!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:16:11'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:16:11'!
FAILURE!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:16:27'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 19:16:27'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 19:16:27'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 19:16:27'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 19:16:27'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 19:16:27'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 19:16:27'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 19:16:27'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:16:27'!
FAILURE!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:16:27'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:16:27'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:18:16' prior: 50864337!
accountSummary
	|reporte |
	reporte:=OrderedCollection new.
	reporte addLast: ('Deposito por 100').
	
	reporte addLast: ('Balance = ', self balance asString).
	
	^ reporte.! !

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:18:30'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 19:18:30'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 19:18:30'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 19:18:30'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 19:18:30'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 19:18:30'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 19:18:30'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 19:18:30'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:18:30'!
FAILURE!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:18:30'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:18:30'!
FAILURE!

|account1 |
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	account1 accountSummary .!

|account1 |
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	account1 accountSummary at: 1!

	account1 accountSummary at: 2!

|account1 |
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	account1 accountSummary at: 2!

|account1 |
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	account1 accountSummary at: 1.
	account1 accountSummary at: 2.!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:23:09' prior: 50864318!
test09accountSummaryDepositAmount100
	|account1 |
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	
	self assert: ((account1 accountSummary) at: 1)  equals: ('Deposito por 100').
	self assert: ((account1 accountSummary) at: 2)  equals: ('Balance = 100').

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:23:12'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 19:23:12'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 19:23:12'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 19:23:12'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 19:23:12'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 19:23:12'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 19:23:12'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 19:23:12'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:23:12'!
FAILURE!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:23:12'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:23:12'!
FAILURE!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:23:41'!
FAILURE!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:23:41'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:25:13' prior: 50864417!
accountSummary
	|reporte |
	reporte:=OrderedCollection new.
	
	transactions do: [:aTransaction| reporte add: ('Deposito por ', aTransaction value asString)].
	
	reporte addLast: ('Balance = ', self balance asString).
	
	^ reporte.! !

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:25:22'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 19:25:22'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 19:25:22'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 19:25:22'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 19:25:22'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 19:25:22'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 19:25:22'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 19:25:22'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:25:22'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:25:22'!
PASSED!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:26:07'!
test09accountSummaryTwoDepositAmount250
	|account1 |
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	Deposit register: 150 on: account1.

	
	self assert: ((account1 accountSummary) at: 1)  equals: ('Deposito por 100').
	self assert: ((account1 accountSummary) at: 2)  equals: ('Deposito por 100').
	self assert: ((account1 accountSummary) at: 3)  equals: ('Balance = 100').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:26:19'!
test10accountSummaryTwoDepositAmount250
	|account1 |
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	Deposit register: 150 on: account1.

	
	self assert: ((account1 accountSummary) at: 1)  equals: ('Deposito por 100').
	self assert: ((account1 accountSummary) at: 2)  equals: ('Deposito por 100').
	self assert: ((account1 accountSummary) at: 3)  equals: ('Balance = 100').

	

	
	
	

	
	! !

!methodRemoval: Portfolio2Test #test09accountSummaryTwoDepositAmount250 stamp: 'Am 5/30/2021 19:26:19'!
test09accountSummaryTwoDepositAmount250
	|account1 |
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	Deposit register: 150 on: account1.

	
	self assert: ((account1 accountSummary) at: 1)  equals: ('Deposito por 100').
	self assert: ((account1 accountSummary) at: 2)  equals: ('Deposito por 100').
	self assert: ((account1 accountSummary) at: 3)  equals: ('Balance = 100').

	

	
	
	

	
	!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 5/30/2021 19:26:24'!
FAILURE!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:26:34' prior: 50864592!
test10accountSummaryTwoDepositAmount250
	|account1 |
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	Deposit register: 150 on: account1.

	
	self assert: ((account1 accountSummary) at: 1)  equals: ('Deposito por 100').
	self assert: ((account1 accountSummary) at: 2)  equals: ('Deposito por 150').
	self assert: ((account1 accountSummary) at: 3)  equals: ('Balance = 100').

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 5/30/2021 19:26:34'!
FAILURE!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:26:41' prior: 50864628!
test10accountSummaryTwoDepositAmount250
	|account1 |
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	Deposit register: 150 on: account1.

	
	self assert: ((account1 accountSummary) at: 1)  equals: ('Deposito por 100').
	self assert: ((account1 accountSummary) at: 2)  equals: ('Deposito por 150').
	self assert: ((account1 accountSummary) at: 3)  equals: ('Balance = 200').

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 5/30/2021 19:26:41'!
FAILURE!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:26:52' prior: 50864648!
test10accountSummaryTwoDepositAmount250
	|account1 |
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	Deposit register: 150 on: account1.

	
	self assert: ((account1 accountSummary) at: 1)  equals: ('Deposito por 100').
	self assert: ((account1 accountSummary) at: 2)  equals: ('Deposito por 150').
	self assert: ((account1 accountSummary) at: 3)  equals: ('Balance = 250').

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 5/30/2021 19:26:52'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 19:26:52'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 19:26:52'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 19:26:52'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 19:26:52'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 19:26:52'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 19:26:52'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 19:26:52'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:26:52'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:26:52'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 5/30/2021 19:26:52'!
PASSED!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:28:00'!
test10accountSummaryWithdrawAmount100
	|account1 |
	account1:= ReceptiveAccount new.
	
	Withdraw register: 100 on: account1.

	
	self assert: ((account1 accountSummary) at: 1)  equals: ('Extraccion por 100').
	self assert: ((account1 accountSummary) at: 3)  equals: ('Balance = -100').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:28:09'!
test11accountSummaryWithdrawAmount100
	|account1 |
	account1:= ReceptiveAccount new.
	
	Withdraw register: 100 on: account1.

	
	self assert: ((account1 accountSummary) at: 1)  equals: ('Extraccion por 100').
	self assert: ((account1 accountSummary) at: 3)  equals: ('Balance = -100').

	

	
	
	

	
	! !

!methodRemoval: Portfolio2Test #test10accountSummaryWithdrawAmount100 stamp: 'Am 5/30/2021 19:28:09'!
test10accountSummaryWithdrawAmount100
	|account1 |
	account1:= ReceptiveAccount new.
	
	Withdraw register: 100 on: account1.

	
	self assert: ((account1 accountSummary) at: 1)  equals: ('Extraccion por 100').
	self assert: ((account1 accountSummary) at: 3)  equals: ('Balance = -100').

	

	
	
	

	
	!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 5/30/2021 19:28:10'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:29:12' prior: 50864533!
accountSummary
	|reporte |
	reporte:=OrderedCollection new.
	
	transactions do: [:aTransaction| (aTransaction isKindOf: Deposit ) ifTrue:[reporte add: ('Deposito por ', aTransaction value asString)]].
	
	reporte addLast: ('Balance = ', self balance asString).
	
	^ reporte.! !

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:29:24'!
PASSED!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:30:19' prior: 50864761!
accountSummary
	|reporte |
	reporte:=OrderedCollection new.
	
	transactions do: [:aTransaction| (aTransaction isKindOf: Deposit ) ifTrue:[reporte add: ('Deposito por ', aTransaction value asString)]
													ifFalse:[reporte add: ('Extraccion por ', aTransaction value negated asString)]].
	
	reporte addLast: ('Balance = ', self balance asString).
	
	^ reporte.! !

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 5/30/2021 19:30:29'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:30:54' prior: 50864777!
accountSummary
	|reporte |
	reporte:=OrderedCollection new.
	
	transactions do: [:aTransaction| (aTransaction isKindOf: Deposit ) ifTrue:[reporte add: ('Deposito por ', aTransaction value asString)]
													ifFalse:[reporte add: ('Extraccion por ', aTransaction value asString)]].
	
	reporte addLast: ('Balance = ', self balance asString).
	
	^ reporte.! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:31:05' prior: 50864732!
test11accountSummaryWithdrawAmount100
	|account1 |
	account1:= ReceptiveAccount new.
	
	Withdraw register: 100 on: account1.

	
	self assert: ((account1 accountSummary) at: 1)  equals: ('Extraccion por 100').
	self assert: ((account1 accountSummary) at: 2)  equals: ('Balance = -100').

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 5/30/2021 19:31:05'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 19:31:05'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 19:31:05'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 19:31:05'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 19:31:05'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 19:31:05'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 19:31:05'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 19:31:05'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:31:05'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:31:05'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 5/30/2021 19:31:05'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 5/30/2021 19:31:05'!
PASSED!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:32:43'!
test11accountSummaryTwoWithdrawAmount100
	|account1 |
	account1:= ReceptiveAccount new.
	
	Withdraw register: 100 on: account1.
	Withdraw register: 150 on: account1.


	
	self assert: ((account1 accountSummary) at: 1)  equals: ('Extraccion por 100').
	self assert: ((account1 accountSummary) at: 2)  equals: ('Extraccion por 150').
	self assert: ((account1 accountSummary) at: 3)  equals: ('Balance = -250').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:32:57'!
test12accountSummaryTwoWithdrawAmount100
	|account1 |
	account1:= ReceptiveAccount new.
	
	Withdraw register: 100 on: account1.
	Withdraw register: 150 on: account1.


	
	self assert: ((account1 accountSummary) at: 1)  equals: ('Extraccion por 100').
	self assert: ((account1 accountSummary) at: 2)  equals: ('Extraccion por 150').
	self assert: ((account1 accountSummary) at: 3)  equals: ('Balance = -250').

	

	
	
	

	
	! !

!methodRemoval: Portfolio2Test #test11accountSummaryTwoWithdrawAmount100 stamp: 'Am 5/30/2021 19:32:57'!
test11accountSummaryTwoWithdrawAmount100
	|account1 |
	account1:= ReceptiveAccount new.
	
	Withdraw register: 100 on: account1.
	Withdraw register: 150 on: account1.


	
	self assert: ((account1 accountSummary) at: 1)  equals: ('Extraccion por 100').
	self assert: ((account1 accountSummary) at: 2)  equals: ('Extraccion por 150').
	self assert: ((account1 accountSummary) at: 3)  equals: ('Balance = -250').

	

	
	
	

	
	!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 5/30/2021 19:33:00'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 19:33:00'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 19:33:00'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 19:33:00'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 19:33:00'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 19:33:00'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 19:33:00'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 19:33:00'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:33:00'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:33:00'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 5/30/2021 19:33:00'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 5/30/2021 19:33:00'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 5/30/2021 19:33:00'!
PASSED!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:33:29'!
test13accountSummaryOutboundTransfer
	|account1 |
	account1:= ReceptiveAccount new.
	
	Withdraw register: 100 on: account1.
	Withdraw register: 150 on: account1.


	
	self assert: ((account1 accountSummary) at: 1)  equals: ('Extraccion por 100').
	self assert: ((account1 accountSummary) at: 2)  equals: ('Extraccion por 150').
	self assert: ((account1 accountSummary) at: 3)  equals: ('Balance = -250').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:35:04' prior: 50864955!
test13accountSummaryOutboundTransfer
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Transfer from: account1 to: account2  withAmount: 200.	
	self assert: ((account1 accountSummary) at: 1)  equals: ('Salida por transferencia de 200').
	self assert: ((account1 accountSummary) at: 2)  equals: ('Balance = -200').

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 5/30/2021 19:35:13'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:36:22' prior: 50864796!
accountSummary
	|reporte |
	reporte:=OrderedCollection new.
	
	transactions do: [:aTransaction| (aTransaction isKindOf: Deposit ) ifTrue:[reporte add: ('Deposito por ', aTransaction value asString)]
													ifFalse:[reporte add: ('Extraccion por ', aTransaction value asString)]].
												
												
	transfers do: [:aTransfer| (aTransfer)].
		
	reporte addLast: ('Balance = ', self balance asString).
	
	^ reporte.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:38:19' prior: 50864991!
accountSummary
	|reporte |
	reporte:=OrderedCollection new.
	
	transactions do: [:aTransaction| (aTransaction isKindOf: Deposit ) ifTrue:[reporte add: ('Deposito por ', aTransaction value asString)]
													ifFalse:[reporte add: ('Extraccion por ', aTransaction value asString)]].
												
												
	transfers do: [:aTransfer| (aTransfer extractionLeg = self) ifTrue:[reporte add: ('Salida por transferencia de', aTransfer value asString)].
						(aTransfer depositLeg = self) ifTrue: [reporte add: ('Entrada por transferencia de', aTransfer value asString)]
		
		].
		
	reporte addLast: ('Balance = ', self balance asString).
	
	^ reporte.! !

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 5/30/2021 19:38:39'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:39:07' prior: 50865008!
accountSummary
	|reporte |
	reporte:=OrderedCollection new.
	
	transactions do: [:aTransaction| (aTransaction isKindOf: Deposit ) ifTrue:[reporte add: ('Deposito por ', aTransaction value asString)]
													ifFalse:[reporte add: ('Extraccion por ', aTransaction value asString)]].
												
												
	transfers do: [:aTransfer| (aTransfer extractionLeg = self) ifTrue:[reporte add: ('Salida por transferencia de ', aTransfer value asString)].
						(aTransfer depositLeg = self) ifTrue: [reporte add: ('Entrada por transferencia de ', aTransfer value asString)]
		
		].
		
	reporte addLast: ('Balance = ', self balance asString).
	
	^ reporte.! !

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 5/30/2021 19:39:14'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 19:39:14'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 19:39:14'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 19:39:14'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 19:39:14'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 19:39:14'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 19:39:14'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 19:39:14'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:39:14'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:39:14'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 5/30/2021 19:39:14'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 5/30/2021 19:39:14'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 5/30/2021 19:39:14'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 5/30/2021 19:39:14'!
PASSED!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:39:40'!
test14accountSummaryInboundTransfer
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Transfer from: account1 to: account2  withAmount: 200.	
	self assert: ((account2 accountSummary) at: 1)  equals: ('Entrada por transferencia de 200').
	self assert: ((account2 accountSummary) at: 2)  equals: ('Balance = 200').

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 5/30/2021 19:39:41'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 19:39:41'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 19:39:41'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 19:39:41'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 19:39:41'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 19:39:41'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 19:39:41'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 19:39:41'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:39:41'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:39:41'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 5/30/2021 19:39:41'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 5/30/2021 19:39:41'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 5/30/2021 19:39:41'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 5/30/2021 19:39:41'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 5/30/2021 19:39:41'!
PASSED!

----SNAPSHOT----(30 May 2021 19:40:01) CuisUniversity-4532.image priorSource: 17033949!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:44:23'!
test15transferNetNoTransaction
	|account1|
	account1:= ReceptiveAccount new.
	
	self assert: (account1 transferNet)  equals: (0).

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferNet' stamp: 'Am 5/30/2021 19:44:44' prior: 50865170!
test15transferNetNoTransaction
	|account1|
	account1:= ReceptiveAccount new.
	
	self assert: (account1 transferNet)  equals: (0).
	
	

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 5/30/2021 19:44:44'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:44:53'!
transferNet
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:45:02' prior: 50865189!
transferNet
^0! !

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 5/30/2021 19:45:04'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 19:45:04'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 19:45:04'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 19:45:04'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 19:45:04'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 19:45:04'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 19:45:04'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 19:45:04'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:45:04'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:45:04'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 5/30/2021 19:45:04'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 5/30/2021 19:45:04'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 5/30/2021 19:45:04'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 5/30/2021 19:45:04'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 5/30/2021 19:45:04'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 5/30/2021 19:45:04'!
PASSED!
!Portfolio2Test methodsFor: 'transferNet' stamp: 'Am 5/30/2021 19:46:21'!
test15transferNetOutboundTransaction100
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Transfer from: account1 to:account2  	withAmount:100.
	self assert: (account1 transferNet)  equals: (100).
	
	

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferNet' stamp: 'Am 5/30/2021 19:46:30' prior: 50865249!
test15transferNetOutboundTransaction100
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Transfer from: account1 to:account2  	withAmount:100.
	self assert: (account1 transferNet)  equals: (-100).
	
	

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test15transferNetOutboundTransaction100 stamp: 'Am 5/30/2021 19:46:31'!
FAILURE!
!Portfolio2Test methodsFor: 'transferNet' stamp: 'Am 5/30/2021 19:46:52'!
test16transferNetInboundTransaction100
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Transfer from: account1 to:account2  	withAmount:100.
	self assert: (account2 transferNet)  equals: (100).
	
	

	

	
	
	

	
	! !

!methodRemoval: Portfolio2Test #test15transferNetOutboundTransaction100 stamp: 'Am 5/30/2021 19:46:59'!
test15transferNetOutboundTransaction100
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Transfer from: account1 to:account2  	withAmount:100.
	self assert: (account1 transferNet)  equals: (-100).
	
	

	

	
	
	

	
	!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 5/30/2021 19:47:05'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:48:07' prior: 50865194!
transferNet
	^transfers do: [:aTransfer| (aTransfer extractionLeg = self) ifTrue:[aTransfer value negated].
						(aTransfer depositLeg = self) ifTrue: [aTransfer value]
		
		].! !

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 5/30/2021 19:48:15'!
FAILURE!
!Portfolio2Test methodsFor: 'transferNet' stamp: 'Am 5/30/2021 19:48:31' prior: 50865274!
test16transferNetInboundTransaction100
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Transfer from: account1 to:account2  	withAmount:100.
	self assert: (account2 transferNet)  equals: 100.
	
	

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 5/30/2021 19:48:31'!
FAILURE!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 5/30/2021 19:48:41'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:49:12' prior: 50865300!
transferNet
	^ transfers sum: [:aTransfer| (aTransfer extractionLeg = self) ifTrue:[aTransfer value negated].
						(aTransfer depositLeg = self) ifTrue: [aTransfer value]
		
		] ifEmpty:[0].! !

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 5/30/2021 19:49:29'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 19:49:29'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 19:49:29'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 19:49:29'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 19:49:29'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 19:49:29'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 19:49:29'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 19:49:29'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:49:29'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:49:29'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 5/30/2021 19:49:29'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 5/30/2021 19:49:29'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 5/30/2021 19:49:29'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 5/30/2021 19:49:29'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 5/30/2021 19:49:29'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 5/30/2021 19:49:29'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 5/30/2021 19:49:29'!
PASSED!
!Portfolio2Test methodsFor: 'transferNet' stamp: 'Am 5/30/2021 19:49:52'!
test17transferNetOutboundTransaction100
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Transfer from: account1 to:account2  	withAmount:100.
	self assert: (account1 transferNet)  equals: -100.
	
	

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 5/30/2021 19:49:53'!
FAILURE!
!Portfolio2Test methodsFor: 'transferNet' stamp: 'Am 5/30/2021 19:50:11' prior: 50865394!
test17transferNetOutboundTransaction100
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Transfer from: account1 to:account2  	withAmount:100.
	self assert: (account1 transferNet)  equals: 100 negated.
	
	

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 5/30/2021 19:50:12'!
FAILURE!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 5/30/2021 19:50:28'!
FAILURE!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 5/30/2021 19:50:28'!
FAILURE!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 5/30/2021 19:50:33'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:52:12' prior: 50865330!
transferNet
	^ transfers sum: [:aTransfer| (aTransfer extractionLeg = self) ifTrue:[(aTransfer value) negated].
						(aTransfer depositLeg = self) ifTrue: [aTransfer value]
		
		] ifEmpty:[0].! !

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 5/30/2021 19:52:21'!
FAILURE!

|hola|
hola:= OrderedCollection new.
hola add: 1 negated.

hola sum: [:elem| elem] ifEmpty:[0].!

|hola|
hola:= OrderedCollection new.
hola add: 1.

hola sum: [:elem| elem negated] ifEmpty:[0].!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:55:11' prior: 50865435!
transferNet
|local|
	 local:=transfers sum: [:aTransfer| (aTransfer extractionLeg = self) ifTrue:[(aTransfer value) negated].
						(aTransfer depositLeg = self) ifTrue: [aTransfer value]
		
		] ifEmpty:[0].
	
	^local
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 20:00:23' prior: 50865454!
transferNet
|local2|
	 local2:=transfers sum: [:aTransfer| (aTransfer extractionLeg = self) ifTrue:[(aTransfer value) negated].
						(aTransfer depositLeg = self) ifTrue: [aTransfer value].
		
		] ifEmpty:[0].
	
	^local2
	! !

aTransfer!

self value negated!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 20:02:44' prior: 50865465!
transferNet
|local2|
	 local2:=transfers sum: [:aTransfer| (aTransfer extractionLeg = self) ifTrue:[(aTransfer value) negated].
						(aTransfer depositLeg = self) ifTrue: [aTransfer value]] ifEmpty:[0].
	
	^local2
	! !

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 5/30/2021 20:02:49'!
FAILURE!
!Portfolio2Test methodsFor: 'transferNet' stamp: 'Am 5/30/2021 20:03:04' prior: 50865409!
test17transferNetOutboundTransaction100
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Transfer from: account1 to:account2  	withAmount:100.
	self assert: (account1 transferNet)  equals: (100 negated).
	
	

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 5/30/2021 20:03:09'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 20:05:07' prior: 50865477!
transferNet
|local2|
	 local2:=transfers sum: [:aTransfer| 
						(aTransfer extractionLeg = self) ifTrue:[^(aTransfer value) negated].
						(aTransfer depositLeg = self) ifTrue: [^aTransfer value]] 
					ifEmpty:[0].
	
	^local2
	! !

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 5/30/2021 20:05:13'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 20:05:13'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 20:05:13'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 20:05:13'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 20:05:13'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 20:05:13'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 20:05:13'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 20:05:13'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 20:05:13'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 20:05:13'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 5/30/2021 20:05:13'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 5/30/2021 20:05:14'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 5/30/2021 20:05:14'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 5/30/2021 20:05:14'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 5/30/2021 20:05:14'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 5/30/2021 20:05:14'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 5/30/2021 20:05:14'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 5/30/2021 20:05:14'!
PASSED!
!Portfolio2Test methodsFor: 'transferNet' stamp: 'Am 5/30/2021 20:05:34' prior: 50865491!
test17transferNetOutboundTransaction100
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Transfer from: account1 to:account2  	withAmount:100.
	Transfer from: account1 to:account2  	withAmount:100.

	self assert: (account1 transferNet)  equals: (200 negated).
	
	

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 5/30/2021 20:05:42'!
FAILURE!
!Portfolio2Test methodsFor: 'transferNet' stamp: 'Am 5/30/2021 20:05:57' prior: 50865576!
test17transferNetOutboundTransaction100
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Transfer from: account1 to:account2  	withAmount:100.

	self assert: (account1 transferNet)  equals: (100 negated).
	
	

	

	
	
	

	
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 20:06:26' prior: 50865506!
transferNet
|local2|
	 local2:=transfers sum: [:aTransfer| 
						(aTransfer extractionLeg = self) ifTrue:[((aTransfer value) negated)].
						(aTransfer depositLeg = self) ifTrue: [aTransfer value]] 
					ifEmpty:[0].
	
	^local2
	! !

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 5/30/2021 20:06:39'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 20:10:23' prior: 50865605!
transferNet
|local2|
	 local2:=transfers inject: 0 into: [:sum :aTransfer| 
						(aTransfer extractionLeg = self) ifTrue:[sum +aTransfer value negated].
						(aTransfer depositLeg = self) ifTrue: [sum +aTransfer value]].
	
	^local2
	! !

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 5/30/2021 20:10:36'!
FAILURE!

----SNAPSHOT----(30 May 2021 20:13:01) CuisUniversity-4532.image priorSource: 17072533!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 20:14:54' prior: 50865619!
transferNet
|local2|
	 local2:=transfers inject: 0 into: [:sum :aTransfer| 
						(aTransfer extractionLeg = self) ifTrue:[sum +aTransfer value negated] ifFalse: [sum +aTransfer value]].
	
	^local2
	! !

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 5/30/2021 20:15:04'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 20:15:04'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 20:15:04'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 20:15:04'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 20:15:04'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 20:15:04'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 20:15:04'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 20:15:04'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 20:15:04'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 20:15:04'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 5/30/2021 20:15:04'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 5/30/2021 20:15:04'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 5/30/2021 20:15:04'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 5/30/2021 20:15:04'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 5/30/2021 20:15:04'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 5/30/2021 20:15:04'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 5/30/2021 20:15:04'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 5/30/2021 20:15:04'!
PASSED!

----QUIT----(30 May 2021 20:18:50) CuisUniversity-4532.image priorSource: 17087419!

----STARTUP---- (2 June 2021 15:21:18) as /home/alejandro/Documents/Cs.Computacion/Inge 1/linux64/CuisUniversity-4532.image!

!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 15:21:35' prior: 50863433!
registerTransfer: aTransfer 
	transactions add: aTransfer.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 15:25:42' prior: 50865035!
accountSummary
	|reporte |
	reporte:=OrderedCollection new.
	
	transactions do: [:aTransaction| 
	(aTransaction isKindOf: Deposit ) ifTrue:[reporte add: ('Deposito por ', aTransaction value asString)].
	(aTransaction isKindOf: Withdraw ) ifTrue:[reporte add: ('Extraccion por ', aTransaction value asString).].
	(aTransaction isKindOf: Transfer ) ifTrue:[
		(aTransaction extractionLeg = self)ifTrue: [reporte add: ('Salida por transferencia de ', aTransaction value asString)].
		(aTransaction  = self)ifTrue: [reporte add: ('Entrada por transferencia de ', aTransaction value asString)]				     		
										
										].].
												
		
	reporte addLast: ('Balance = ', self balance asString).
	
	^ reporte.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 15:26:12' prior: 50865718!
accountSummary
	|reporte |
	reporte:=OrderedCollection new.
	
	transactions do: [:aTransaction| 
	(aTransaction isKindOf: Deposit ) ifTrue:[reporte add: ('Deposito por ', aTransaction value asString)].
	(aTransaction isKindOf: Withdraw ) ifTrue:[reporte add: ('Extraccion por ', aTransaction value asString).].
	(aTransaction isKindOf: Transfer ) ifTrue:[
		(aTransaction extractionLeg = self)ifTrue: [reporte add: ('Salida por transferencia de ', aTransaction value asString)].
		(aTransaction  depositLeg  = self )ifTrue: [reporte add: ('Entrada por transferencia de ', aTransaction value asString)]				     		
										
										].].
												
		
	reporte addLast: ('Balance = ', self balance asString).
	
	^ reporte.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 15:29:14' prior: 50865636!
transferNet
|local2|
	"local2:=transactions inject: 0 into: [:sum :aTransfer| 
						(aTransfer extractionLeg = self) ifTrue:[sum +aTransfer value negated] ifFalse: [sum +aTransfer value]]."
					
	local2:= transactions sum: [:total :aTransaction|
		(aTransaction isKindOf: Transfer) ifTrue: [
				(aTransaction depositLeg = self) ifTrue:[aTransaction value] ifFalse:[aTransaction value negated]		].] ifEmpty:[0].
	
	^local2
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 15:29:19' prior: 50865770!
transferNet
|local2|
	"local2:=transactions inject: 0 into: [:sum :aTransfer| 
						(aTransfer extractionLeg = self) ifTrue:[sum +aTransfer value negated] ifFalse: [sum +aTransfer value]]."
					
	local2:= transactions sum: [:aTransaction|
		(aTransaction isKindOf: Transfer) ifTrue: [
				(aTransaction depositLeg = self) ifTrue:[aTransaction value] ifFalse:[aTransaction value negated]		].] ifEmpty:[0].
	
	^local2
	! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'Am 6/2/2021 15:32:24' prior: 50863524 overrides: 50859721!
balance
	
	^(transactions 
		inject: 0
		into: [ :currentBalance :transaction | 
			(transaction isKindOf: Transfer) ifFalse:[transaction affectBalance: currentBalance] ifTrue:[ transaction affectBalance: currentBalance  self.]]).! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'Am 6/2/2021 15:34:48' prior: 50865804 overrides: 50859721!
balance
	
	^(transactions 
		inject: 0
		into: [ :currentBalance :transaction | 
			(transaction isKindOf: Transfer) ifFalse:[transaction affectBalance: currentBalance] ifTrue:[ transaction affectBalance: currentBalance fromAccount: self.]]).! !
!Portfolio2Test methodsFor: 'transferTests' stamp: 'Am 6/2/2021 15:35:16' prior: 50863610!
test03transferDoesntAddTransactions
"	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	Transfer from: account1 to:account2 withAmount: 100.
	
	self assert: (account1 transactions = OrderedCollection new).
	self assert: (account2 transactions = OrderedCollection new).

	
	"! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 15:35:20'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 15:35:20'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 15:35:20'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 6/2/2021 15:35:20'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 6/2/2021 15:35:20'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 15:35:20'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 15:35:20'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 15:35:25'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 15:35:25'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 15:35:25'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 15:35:25'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 15:35:25'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 15:35:25'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 15:35:25'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 15:35:29'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 15:35:29'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 15:35:29'!
PASSED!

----SNAPSHOT----(2 June 2021 15:35:34) CuisUniversity-4532.image priorSource: 17089706!
!Behavior method!
initialize
	[ super initialize ] valueCoveringAll:
		{20 to: 29}.
	(transactions _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (33 to: 44)
		declaredAt: (33 to: 44).
	(transfers _ [
	(OrderedCollection
		cover: (86 to: 102)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (73 to: 81)
		declaredAt: (73 to: 81).! !
!Behavior method!
from: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount
	| aTransfer |
	(aTransfer _ [
	(Transfer
		cover: (95 to: 102)
		declaredAt: (95 to: 102)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (84 to: 92)
		declaredAt: (72 to: 80).
	[
	(aTransfer
		cover: (110 to: 118)
		declaredAt: (72 to: 80))
		madeFrom:
			(aReceptiveAccount
				cover: (130 to: 146)
				declaredAt: (7 to: 23))
		to:
			(aReceptiveAccount2
				cover: (152 to: 169)
				declaredAt: (29 to: 46))
		withAmount:
			(anAmount
				cover: (184 to: 191)
				declaredAt: (60 to: 67)) ] valueCoveringAll:
		{120 to: 128. 148 to: 150. 172 to: 182}.
	^ aTransfer
		cover: (196 to: 204)
		declaredAt: (72 to: 80).! !
!Behavior method!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount
	[
	([
	(anAmount
		cover: (77 to: 84)
		declaredAt: (64 to: 71)) <=
		(0 coverAll:
			{88 to: 88}) ] valueCoveringAll:
		{86 to: 87}) ifTrue: [
		[
		(self coverAll:
			{99 to: 102}) error:
			([
			([
			(self coverAll:
				{111 to: 114}) class ] valueCoveringAll:
				{116 to: 120}) negativeValueTransfer ] valueCoveringAll:
				{122 to: 142}) ] valueCoveringAll:
			{104 to: 109} ]] valueCoveringAll:
		{91 to: 97}.
	(sender _ aReceptiveAccount
		cover: (157 to: 173)
		declaredAt: (11 to: 27))
		cover: (149 to: 154)
		declaredAt: (149 to: 154).
	(reciever _ aReceptiveAccount2
		cover: (189 to: 206)
		declaredAt: (33 to: 50))
		cover: (178 to: 185)
		declaredAt: (178 to: 185).
	(amount _ anAmount
		cover: (220 to: 227)
		declaredAt: (64 to: 71))
		cover: (211 to: 216)
		declaredAt: (211 to: 216).
	[
	(aReceptiveAccount2
		cover: (231 to: 248)
		declaredAt: (33 to: 50)) registerTransfer:
		(self coverAll:
			{268 to: 271}) ] valueCoveringAll:
		{250 to: 266}.
	[
	(aReceptiveAccount
		cover: (275 to: 291)
		declaredAt: (11 to: 27)) registerTransfer:
		(self coverAll:
			{311 to: 314}) ] valueCoveringAll:
		{293 to: 309}.! !
!Behavior method!
registerTransfer: aTransfer
	[
	(transactions
		cover: (31 to: 42)
		declaredAt: (31 to: 42)) add:
		(aTransfer
			cover: (49 to: 57)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{44 to: 47}.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (14 to: 25)
		declaredAt: (14 to: 25))
		inject:
			(0 coverAll:
				{38 to: 38})
		into: [ :currentBalance :transaction |
			[
			([
			(transaction
				cover: (86 to: 96)
				declaredAt: (67 to: 77)) isKindOf:
				(Transfer
					cover: (108 to: 115)
					declaredAt: (108 to: 115)) ] valueCoveringAll:
				{98 to: 106})
				ifFalse: [
					[
					(transaction
						cover: (127 to: 137)
						declaredAt: (67 to: 77)) affectBalance:
						(currentBalance
							cover: (154 to: 167)
							declaredAt: (51 to: 64)) ] valueCoveringAll:
						{139 to: 152} ]
				ifTrue: [
					[
					(transaction
						cover: (179 to: 189)
						declaredAt: (67 to: 77))
						affectBalance:
							(currentBalance
								cover: (206 to: 219)
								declaredAt: (51 to: 64))
						fromAccount:
							(self coverAll:
								{234 to: 237}) ] valueCoveringAll:
						{191 to: 204. 221 to: 232} ]] valueCoveringAll:
				{118 to: 125. 170 to: 176} ]] valueCoveringAll:
		{30 to: 36. 42 to: 46}.! !
!Behavior method!
affectBalance: aBalance fromAccount: anAccount
	^ [
	([
	(anAccount
		cover: (52 to: 60)
		declaredAt: (38 to: 46)) =
		(sender
			cover: (64 to: 69)
			declaredAt: (64 to: 69)) ] valueCoveringAll:
		{62 to: 62})
		ifTrue: [
			[
			(aBalance
				cover: (81 to: 88)
				declaredAt: (16 to: 23)) -
				(amount
					cover: (92 to: 97)
					declaredAt: (92 to: 97)) ] valueCoveringAll:
				{90 to: 90} ]
		ifFalse: [
			[
			(aBalance
				cover: (112 to: 119)
				declaredAt: (16 to: 23)) +
				(amount
					cover: (123 to: 128)
					declaredAt: (92 to: 97)) ] valueCoveringAll:
				{121 to: 121} ]
	"PONER ERROR DESPUES" ] valueCoveringAll:
		{72 to: 78. 101 to: 108}.! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 15:37:57'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 15:37:57'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 15:37:57'!
PASSED!
!Behavior method!
extractionLeg
	^ sender
		cover: (17 to: 22)
		declaredAt: (17 to: 22).! !

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 6/2/2021 15:37:57'!
PASSED!
!Behavior method!
depositLeg
	^ reciever
		cover: (14 to: 21)
		declaredAt: (14 to: 21).! !

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 6/2/2021 15:37:57'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 15:37:57'!
PASSED!
!Behavior method!
negativeValueTransfer
	"Cannot do a negative value transfer"
	^ self.! !

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 15:37:57'!
PASSED!
!Behavior method!
accountSummary
	| reporte |
	(reporte _ [
	(OrderedCollection
		cover: (38 to: 54)
		declaredAt: (38 to: 54)) new ] valueCoveringAll:
		{56 to: 58})
		cover: (29 to: 35)
		declaredAt: (18 to: 24).
	[
	(transactions
		cover: (64 to: 75)
		declaredAt: (64 to: 75)) do: [ :aTransaction |
		[
		([
		(aTransaction
			cover: (100 to: 111)
			declaredAt: (83 to: 94)) isKindOf:
			(Deposit
				cover: (123 to: 129)
				declaredAt: (123 to: 129)) ] valueCoveringAll:
			{113 to: 121}) ifTrue: [
			[
			(reporte
				cover: (141 to: 147)
				declaredAt: (18 to: 24)) add:
				([
				('Deposito por ' coverAll:
					{155 to: 169}) ,
					([
					([
					(aTransaction
						cover: (172 to: 183)
						declaredAt: (83 to: 94)) value ] valueCoveringAll:
						{185 to: 189}) asString ] valueCoveringAll:
						{191 to: 198}) ] valueCoveringAll:
					{170 to: 170}) ] valueCoveringAll:
				{149 to: 152} ]] valueCoveringAll:
			{133 to: 139}.
		[
		([
		(aTransaction
			cover: (205 to: 216)
			declaredAt: (83 to: 94)) isKindOf:
			(Withdraw
				cover: (228 to: 235)
				declaredAt: (228 to: 235)) ] valueCoveringAll:
			{218 to: 226}) ifTrue: [
			[
			(reporte
				cover: (247 to: 253)
				declaredAt: (18 to: 24)) add:
				([
				('Extraccion por ' coverAll:
					{261 to: 277}) ,
					([
					([
					(aTransaction
						cover: (280 to: 291)
						declaredAt: (83 to: 94)) value ] valueCoveringAll:
						{293 to: 297}) asString ] valueCoveringAll:
						{299 to: 306}) ] valueCoveringAll:
					{278 to: 278}) ] valueCoveringAll:
				{255 to: 258} ]] valueCoveringAll:
			{239 to: 245}.
		[
		([
		(aTransaction
			cover: (314 to: 325)
			declaredAt: (83 to: 94)) isKindOf:
			(Transfer
				cover: (337 to: 344)
				declaredAt: (337 to: 344)) ] valueCoveringAll:
			{327 to: 335}) ifTrue: [
			[
			([
			([
			(aTransaction
				cover: (360 to: 371)
				declaredAt: (83 to: 94)) extractionLeg ] valueCoveringAll:
				{373 to: 385}) =
				(self coverAll:
					{389 to: 392}) ] valueCoveringAll:
				{387 to: 387}) ifTrue: [
				[
				(reporte
					cover: (403 to: 409)
					declaredAt: (18 to: 24)) add:
					([
					('Salida por transferencia de ' coverAll:
						{417 to: 446}) ,
						([
						([
						(aTransaction
							cover: (449 to: 460)
							declaredAt: (83 to: 94)) value ] valueCoveringAll:
							{462 to: 466}) asString ] valueCoveringAll:
							{468 to: 475}) ] valueCoveringAll:
						{447 to: 447}) ] valueCoveringAll:
					{411 to: 414} ]] valueCoveringAll:
				{394 to: 400}.
			[
			([
			([
			(aTransaction
				cover: (483 to: 494)
				declaredAt: (83 to: 94)) depositLeg ] valueCoveringAll:
				{497 to: 506}) =
				(self coverAll:
					{511 to: 514}) ] valueCoveringAll:
				{509 to: 509}) ifTrue: [
				[
				(reporte
					cover: (526 to: 532)
					declaredAt: (18 to: 24)) add:
					([
					('Entrada por transferencia de ' coverAll:
						{540 to: 570}) ,
						([
						([
						(aTransaction
							cover: (573 to: 584)
							declaredAt: (83 to: 94)) value ] valueCoveringAll:
							{586 to: 590}) asString ] valueCoveringAll:
							{592 to: 599}) ] valueCoveringAll:
						{571 to: 571}) ] valueCoveringAll:
					{534 to: 537} ]] valueCoveringAll:
				{517 to: 523} ]] valueCoveringAll:
			{348 to: 354} ]] valueCoveringAll:
		{77 to: 79}.
	[
	(reporte
		cover: (657 to: 663)
		declaredAt: (18 to: 24)) addLast:
		([
		('Balance = ' coverAll:
			{675 to: 686}) ,
			([
			([
			(self coverAll:
				{689 to: 692}) balance ] valueCoveringAll:
				{694 to: 700}) asString ] valueCoveringAll:
				{702 to: 709}) ] valueCoveringAll:
			{687 to: 687}) ] valueCoveringAll:
		{665 to: 672}.
	^ reporte
		cover: (718 to: 724)
		declaredAt: (18 to: 24).! !

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 15:37:57'!
PASSED!
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 15:37:57'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 15:37:57'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 15:37:57'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 15:37:57'!
PASSED!
!Behavior method!
value
	^ amount
		cover: (9 to: 14)
		declaredAt: (9 to: 14).! !

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 15:37:57'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 15:37:57'!
PASSED!
!Behavior method!
transferNet
	"local2:=transactions inject: 0 into: [:sum :aTransfer| 
						(aTransfer extractionLeg = self) ifTrue:[sum +aTransfer value negated] ifFalse: [sum +aTransfer value]]."
	| local2 |
	(local2 _ [
	(transactions
		cover: (208 to: 219)
		declaredAt: (208 to: 219))
		sum: [ :aTransaction |
			[
			([
			(aTransaction
				cover: (245 to: 256)
				declaredAt: (228 to: 239)) isKindOf:
				(Transfer
					cover: (268 to: 275)
					declaredAt: (268 to: 275)) ] valueCoveringAll:
				{258 to: 266}) ifTrue: [
				[
				([
				([
				(aTransaction
					cover: (293 to: 304)
					declaredAt: (228 to: 239)) depositLeg ] valueCoveringAll:
					{306 to: 315}) =
					(self coverAll:
						{319 to: 322}) ] valueCoveringAll:
					{317 to: 317})
					ifTrue: [
						[
						(aTransaction
							cover: (333 to: 344)
							declaredAt: (228 to: 239)) value ] valueCoveringAll:
							{346 to: 350} ]
					ifFalse: [
						[
						([
						(aTransaction
							cover: (362 to: 373)
							declaredAt: (228 to: 239)) value ] valueCoveringAll:
							{375 to: 379}) negated ] valueCoveringAll:
							{381 to: 387} ]] valueCoveringAll:
					{325 to: 331. 353 to: 360} ]] valueCoveringAll:
				{278 to: 284} ]
		ifEmpty: [
			0 coverAll:
				{404 to: 404} ]] valueCoveringAll:
		{221 to: 224. 395 to: 402})
		cover: (199 to: 204)
		declaredAt: (14 to: 19).
	^ local2
		cover: (412 to: 417)
		declaredAt: (14 to: 19).! !

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 15:37:57'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 15:37:57'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 15:37:57'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 16:59:37'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 16:59:37'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 16:59:37'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 6/2/2021 16:59:37'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 6/2/2021 16:59:37'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 16:59:37'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 16:59:37'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 16:59:37'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 16:59:37'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 16:59:37'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 16:59:37'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 16:59:37'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 16:59:37'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 16:59:37'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 16:59:37'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 16:59:37'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 16:59:37'!
PASSED!
!Behavior method!
initialize
	[ super initialize ] valueCoveringAll:
		{20 to: 29}.
	(transactions _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (33 to: 44)
		declaredAt: (33 to: 44).
	(transfers _ [
	(OrderedCollection
		cover: (86 to: 102)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (73 to: 81)
		declaredAt: (73 to: 81).! !
!Behavior method!
from: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount
	| aTransfer |
	(aTransfer _ [
	(Transfer
		cover: (95 to: 102)
		declaredAt: (95 to: 102)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (84 to: 92)
		declaredAt: (72 to: 80).
	[
	(aTransfer
		cover: (110 to: 118)
		declaredAt: (72 to: 80))
		madeFrom:
			(aReceptiveAccount
				cover: (130 to: 146)
				declaredAt: (7 to: 23))
		to:
			(aReceptiveAccount2
				cover: (152 to: 169)
				declaredAt: (29 to: 46))
		withAmount:
			(anAmount
				cover: (184 to: 191)
				declaredAt: (60 to: 67)) ] valueCoveringAll:
		{120 to: 128. 148 to: 150. 172 to: 182}.
	^ aTransfer
		cover: (196 to: 204)
		declaredAt: (72 to: 80).! !
!Behavior method!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount
	[
	([
	(anAmount
		cover: (77 to: 84)
		declaredAt: (64 to: 71)) <=
		(0 coverAll:
			{88 to: 88}) ] valueCoveringAll:
		{86 to: 87}) ifTrue: [
		[
		(self coverAll:
			{99 to: 102}) error:
			([
			([
			(self coverAll:
				{111 to: 114}) class ] valueCoveringAll:
				{116 to: 120}) negativeValueTransfer ] valueCoveringAll:
				{122 to: 142}) ] valueCoveringAll:
			{104 to: 109} ]] valueCoveringAll:
		{91 to: 97}.
	(sender _ aReceptiveAccount
		cover: (157 to: 173)
		declaredAt: (11 to: 27))
		cover: (149 to: 154)
		declaredAt: (149 to: 154).
	(reciever _ aReceptiveAccount2
		cover: (189 to: 206)
		declaredAt: (33 to: 50))
		cover: (178 to: 185)
		declaredAt: (178 to: 185).
	(amount _ anAmount
		cover: (220 to: 227)
		declaredAt: (64 to: 71))
		cover: (211 to: 216)
		declaredAt: (211 to: 216).
	[
	(aReceptiveAccount2
		cover: (231 to: 248)
		declaredAt: (33 to: 50)) registerTransfer:
		(self coverAll:
			{268 to: 271}) ] valueCoveringAll:
		{250 to: 266}.
	[
	(aReceptiveAccount
		cover: (275 to: 291)
		declaredAt: (11 to: 27)) registerTransfer:
		(self coverAll:
			{311 to: 314}) ] valueCoveringAll:
		{293 to: 309}.! !
!Behavior method!
registerTransfer: aTransfer
	[
	(transactions
		cover: (31 to: 42)
		declaredAt: (31 to: 42)) add:
		(aTransfer
			cover: (49 to: 57)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{44 to: 47}.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (14 to: 25)
		declaredAt: (14 to: 25))
		inject:
			(0 coverAll:
				{38 to: 38})
		into: [ :currentBalance :transaction |
			[
			([
			(transaction
				cover: (86 to: 96)
				declaredAt: (67 to: 77)) isKindOf:
				(Transfer
					cover: (108 to: 115)
					declaredAt: (108 to: 115)) ] valueCoveringAll:
				{98 to: 106})
				ifFalse: [
					[
					(transaction
						cover: (127 to: 137)
						declaredAt: (67 to: 77)) affectBalance:
						(currentBalance
							cover: (154 to: 167)
							declaredAt: (51 to: 64)) ] valueCoveringAll:
						{139 to: 152} ]
				ifTrue: [
					[
					(transaction
						cover: (179 to: 189)
						declaredAt: (67 to: 77))
						affectBalance:
							(currentBalance
								cover: (206 to: 219)
								declaredAt: (51 to: 64))
						fromAccount:
							(self coverAll:
								{234 to: 237}) ] valueCoveringAll:
						{191 to: 204. 221 to: 232} ]] valueCoveringAll:
				{118 to: 125. 170 to: 176} ]] valueCoveringAll:
		{30 to: 36. 42 to: 46}.! !
!Behavior method!
affectBalance: aBalance fromAccount: anAccount
	^ [
	([
	(anAccount
		cover: (52 to: 60)
		declaredAt: (38 to: 46)) =
		(sender
			cover: (64 to: 69)
			declaredAt: (64 to: 69)) ] valueCoveringAll:
		{62 to: 62})
		ifTrue: [
			[
			(aBalance
				cover: (81 to: 88)
				declaredAt: (16 to: 23)) -
				(amount
					cover: (92 to: 97)
					declaredAt: (92 to: 97)) ] valueCoveringAll:
				{90 to: 90} ]
		ifFalse: [
			[
			(aBalance
				cover: (112 to: 119)
				declaredAt: (16 to: 23)) +
				(amount
					cover: (123 to: 128)
					declaredAt: (92 to: 97)) ] valueCoveringAll:
				{121 to: 121} ]
	"PONER ERROR DESPUES" ] valueCoveringAll:
		{72 to: 78. 101 to: 108}.! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 16:59:58'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 16:59:58'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 16:59:58'!
PASSED!
!Behavior method!
extractionLeg
	^ sender
		cover: (17 to: 22)
		declaredAt: (17 to: 22).! !

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 6/2/2021 16:59:58'!
PASSED!
!Behavior method!
depositLeg
	^ reciever
		cover: (14 to: 21)
		declaredAt: (14 to: 21).! !

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 6/2/2021 16:59:58'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 16:59:58'!
PASSED!
!Behavior method!
negativeValueTransfer
	"Cannot do a negative value transfer"
	^ self.! !

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 16:59:58'!
PASSED!
!Behavior method!
accountSummary
	| reporte |
	(reporte _ [
	(OrderedCollection
		cover: (38 to: 54)
		declaredAt: (38 to: 54)) new ] valueCoveringAll:
		{56 to: 58})
		cover: (29 to: 35)
		declaredAt: (18 to: 24).
	[
	(transactions
		cover: (64 to: 75)
		declaredAt: (64 to: 75)) do: [ :aTransaction |
		[
		([
		(aTransaction
			cover: (100 to: 111)
			declaredAt: (83 to: 94)) isKindOf:
			(Deposit
				cover: (123 to: 129)
				declaredAt: (123 to: 129)) ] valueCoveringAll:
			{113 to: 121}) ifTrue: [
			[
			(reporte
				cover: (141 to: 147)
				declaredAt: (18 to: 24)) add:
				([
				('Deposito por ' coverAll:
					{155 to: 169}) ,
					([
					([
					(aTransaction
						cover: (172 to: 183)
						declaredAt: (83 to: 94)) value ] valueCoveringAll:
						{185 to: 189}) asString ] valueCoveringAll:
						{191 to: 198}) ] valueCoveringAll:
					{170 to: 170}) ] valueCoveringAll:
				{149 to: 152} ]] valueCoveringAll:
			{133 to: 139}.
		[
		([
		(aTransaction
			cover: (205 to: 216)
			declaredAt: (83 to: 94)) isKindOf:
			(Withdraw
				cover: (228 to: 235)
				declaredAt: (228 to: 235)) ] valueCoveringAll:
			{218 to: 226}) ifTrue: [
			[
			(reporte
				cover: (247 to: 253)
				declaredAt: (18 to: 24)) add:
				([
				('Extraccion por ' coverAll:
					{261 to: 277}) ,
					([
					([
					(aTransaction
						cover: (280 to: 291)
						declaredAt: (83 to: 94)) value ] valueCoveringAll:
						{293 to: 297}) asString ] valueCoveringAll:
						{299 to: 306}) ] valueCoveringAll:
					{278 to: 278}) ] valueCoveringAll:
				{255 to: 258} ]] valueCoveringAll:
			{239 to: 245}.
		[
		([
		(aTransaction
			cover: (314 to: 325)
			declaredAt: (83 to: 94)) isKindOf:
			(Transfer
				cover: (337 to: 344)
				declaredAt: (337 to: 344)) ] valueCoveringAll:
			{327 to: 335}) ifTrue: [
			[
			([
			([
			(aTransaction
				cover: (360 to: 371)
				declaredAt: (83 to: 94)) extractionLeg ] valueCoveringAll:
				{373 to: 385}) =
				(self coverAll:
					{389 to: 392}) ] valueCoveringAll:
				{387 to: 387}) ifTrue: [
				[
				(reporte
					cover: (403 to: 409)
					declaredAt: (18 to: 24)) add:
					([
					('Salida por transferencia de ' coverAll:
						{417 to: 446}) ,
						([
						([
						(aTransaction
							cover: (449 to: 460)
							declaredAt: (83 to: 94)) value ] valueCoveringAll:
							{462 to: 466}) asString ] valueCoveringAll:
							{468 to: 475}) ] valueCoveringAll:
						{447 to: 447}) ] valueCoveringAll:
					{411 to: 414} ]] valueCoveringAll:
				{394 to: 400}.
			[
			([
			([
			(aTransaction
				cover: (483 to: 494)
				declaredAt: (83 to: 94)) depositLeg ] valueCoveringAll:
				{497 to: 506}) =
				(self coverAll:
					{511 to: 514}) ] valueCoveringAll:
				{509 to: 509}) ifTrue: [
				[
				(reporte
					cover: (526 to: 532)
					declaredAt: (18 to: 24)) add:
					([
					('Entrada por transferencia de ' coverAll:
						{540 to: 570}) ,
						([
						([
						(aTransaction
							cover: (573 to: 584)
							declaredAt: (83 to: 94)) value ] valueCoveringAll:
							{586 to: 590}) asString ] valueCoveringAll:
							{592 to: 599}) ] valueCoveringAll:
						{571 to: 571}) ] valueCoveringAll:
					{534 to: 537} ]] valueCoveringAll:
				{517 to: 523} ]] valueCoveringAll:
			{348 to: 354} ]] valueCoveringAll:
		{77 to: 79}.
	[
	(reporte
		cover: (657 to: 663)
		declaredAt: (18 to: 24)) addLast:
		([
		('Balance = ' coverAll:
			{675 to: 686}) ,
			([
			([
			(self coverAll:
				{689 to: 692}) balance ] valueCoveringAll:
				{694 to: 700}) asString ] valueCoveringAll:
				{702 to: 709}) ] valueCoveringAll:
			{687 to: 687}) ] valueCoveringAll:
		{665 to: 672}.
	^ reporte
		cover: (718 to: 724)
		declaredAt: (18 to: 24).! !

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 16:59:59'!
PASSED!
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 16:59:59'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 16:59:59'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 16:59:59'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 16:59:59'!
PASSED!
!Behavior method!
value
	^ amount
		cover: (9 to: 14)
		declaredAt: (9 to: 14).! !

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 16:59:59'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 16:59:59'!
PASSED!
!Behavior method!
transferNet
	"local2:=transactions inject: 0 into: [:sum :aTransfer| 
						(aTransfer extractionLeg = self) ifTrue:[sum +aTransfer value negated] ifFalse: [sum +aTransfer value]]."
	| local2 |
	(local2 _ [
	(transactions
		cover: (208 to: 219)
		declaredAt: (208 to: 219))
		sum: [ :aTransaction |
			[
			([
			(aTransaction
				cover: (245 to: 256)
				declaredAt: (228 to: 239)) isKindOf:
				(Transfer
					cover: (268 to: 275)
					declaredAt: (268 to: 275)) ] valueCoveringAll:
				{258 to: 266}) ifTrue: [
				[
				([
				([
				(aTransaction
					cover: (293 to: 304)
					declaredAt: (228 to: 239)) depositLeg ] valueCoveringAll:
					{306 to: 315}) =
					(self coverAll:
						{319 to: 322}) ] valueCoveringAll:
					{317 to: 317})
					ifTrue: [
						[
						(aTransaction
							cover: (333 to: 344)
							declaredAt: (228 to: 239)) value ] valueCoveringAll:
							{346 to: 350} ]
					ifFalse: [
						[
						([
						(aTransaction
							cover: (362 to: 373)
							declaredAt: (228 to: 239)) value ] valueCoveringAll:
							{375 to: 379}) negated ] valueCoveringAll:
							{381 to: 387} ]] valueCoveringAll:
					{325 to: 331. 353 to: 360} ]] valueCoveringAll:
				{278 to: 284} ]
		ifEmpty: [
			0 coverAll:
				{404 to: 404} ]] valueCoveringAll:
		{221 to: 224. 395 to: 402})
		cover: (199 to: 204)
		declaredAt: (14 to: 19).
	^ local2
		cover: (412 to: 417)
		declaredAt: (14 to: 19).! !

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 16:59:59'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 16:59:59'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 16:59:59'!
PASSED!
!Behavior method!
initialize
	[ super initialize ] valueCoveringAll:
		{20 to: 29}.
	(transactions _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (33 to: 44)
		declaredAt: (33 to: 44).
	(transfers _ [
	(OrderedCollection
		cover: (86 to: 102)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (73 to: 81)
		declaredAt: (73 to: 81).! !
!Behavior method!
from: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount
	| aTransfer |
	(aTransfer _ [
	(Transfer
		cover: (95 to: 102)
		declaredAt: (95 to: 102)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (84 to: 92)
		declaredAt: (72 to: 80).
	[
	(aTransfer
		cover: (110 to: 118)
		declaredAt: (72 to: 80))
		madeFrom:
			(aReceptiveAccount
				cover: (130 to: 146)
				declaredAt: (7 to: 23))
		to:
			(aReceptiveAccount2
				cover: (152 to: 169)
				declaredAt: (29 to: 46))
		withAmount:
			(anAmount
				cover: (184 to: 191)
				declaredAt: (60 to: 67)) ] valueCoveringAll:
		{120 to: 128. 148 to: 150. 172 to: 182}.
	^ aTransfer
		cover: (196 to: 204)
		declaredAt: (72 to: 80).! !
!Behavior method!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount
	[
	([
	(anAmount
		cover: (77 to: 84)
		declaredAt: (64 to: 71)) <=
		(0 coverAll:
			{88 to: 88}) ] valueCoveringAll:
		{86 to: 87}) ifTrue: [
		[
		(self coverAll:
			{99 to: 102}) error:
			([
			([
			(self coverAll:
				{111 to: 114}) class ] valueCoveringAll:
				{116 to: 120}) negativeValueTransfer ] valueCoveringAll:
				{122 to: 142}) ] valueCoveringAll:
			{104 to: 109} ]] valueCoveringAll:
		{91 to: 97}.
	(sender _ aReceptiveAccount
		cover: (157 to: 173)
		declaredAt: (11 to: 27))
		cover: (149 to: 154)
		declaredAt: (149 to: 154).
	(reciever _ aReceptiveAccount2
		cover: (189 to: 206)
		declaredAt: (33 to: 50))
		cover: (178 to: 185)
		declaredAt: (178 to: 185).
	(amount _ anAmount
		cover: (220 to: 227)
		declaredAt: (64 to: 71))
		cover: (211 to: 216)
		declaredAt: (211 to: 216).
	[
	(aReceptiveAccount2
		cover: (231 to: 248)
		declaredAt: (33 to: 50)) registerTransfer:
		(self coverAll:
			{268 to: 271}) ] valueCoveringAll:
		{250 to: 266}.
	[
	(aReceptiveAccount
		cover: (275 to: 291)
		declaredAt: (11 to: 27)) registerTransfer:
		(self coverAll:
			{311 to: 314}) ] valueCoveringAll:
		{293 to: 309}.! !
!Behavior method!
registerTransfer: aTransfer
	[
	(transactions
		cover: (31 to: 42)
		declaredAt: (31 to: 42)) add:
		(aTransfer
			cover: (49 to: 57)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{44 to: 47}.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (14 to: 25)
		declaredAt: (14 to: 25))
		inject:
			(0 coverAll:
				{38 to: 38})
		into: [ :currentBalance :transaction |
			[
			([
			(transaction
				cover: (86 to: 96)
				declaredAt: (67 to: 77)) isKindOf:
				(Transfer
					cover: (108 to: 115)
					declaredAt: (108 to: 115)) ] valueCoveringAll:
				{98 to: 106})
				ifFalse: [
					[
					(transaction
						cover: (127 to: 137)
						declaredAt: (67 to: 77)) affectBalance:
						(currentBalance
							cover: (154 to: 167)
							declaredAt: (51 to: 64)) ] valueCoveringAll:
						{139 to: 152} ]
				ifTrue: [
					[
					(transaction
						cover: (179 to: 189)
						declaredAt: (67 to: 77))
						affectBalance:
							(currentBalance
								cover: (206 to: 219)
								declaredAt: (51 to: 64))
						fromAccount:
							(self coverAll:
								{234 to: 237}) ] valueCoveringAll:
						{191 to: 204. 221 to: 232} ]] valueCoveringAll:
				{118 to: 125. 170 to: 176} ]] valueCoveringAll:
		{30 to: 36. 42 to: 46}.! !
!Behavior method!
affectBalance: aBalance fromAccount: anAccount
	^ [
	([
	(anAccount
		cover: (52 to: 60)
		declaredAt: (38 to: 46)) =
		(sender
			cover: (64 to: 69)
			declaredAt: (64 to: 69)) ] valueCoveringAll:
		{62 to: 62})
		ifTrue: [
			[
			(aBalance
				cover: (81 to: 88)
				declaredAt: (16 to: 23)) -
				(amount
					cover: (92 to: 97)
					declaredAt: (92 to: 97)) ] valueCoveringAll:
				{90 to: 90} ]
		ifFalse: [
			[
			(aBalance
				cover: (112 to: 119)
				declaredAt: (16 to: 23)) +
				(amount
					cover: (123 to: 128)
					declaredAt: (92 to: 97)) ] valueCoveringAll:
				{121 to: 121} ]
	"PONER ERROR DESPUES" ] valueCoveringAll:
		{72 to: 78. 101 to: 108}.! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:00:41'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 17:00:41'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 17:00:41'!
PASSED!
!Behavior method!
extractionLeg
	^ sender
		cover: (17 to: 22)
		declaredAt: (17 to: 22).! !

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 6/2/2021 17:00:41'!
PASSED!
!Behavior method!
depositLeg
	^ reciever
		cover: (14 to: 21)
		declaredAt: (14 to: 21).! !

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 6/2/2021 17:00:41'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 17:00:41'!
PASSED!
!Behavior method!
negativeValueTransfer
	"Cannot do a negative value transfer"
	^ self.! !

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 17:00:41'!
PASSED!
!Behavior method!
accountSummary
	| reporte |
	(reporte _ [
	(OrderedCollection
		cover: (38 to: 54)
		declaredAt: (38 to: 54)) new ] valueCoveringAll:
		{56 to: 58})
		cover: (29 to: 35)
		declaredAt: (18 to: 24).
	[
	(transactions
		cover: (64 to: 75)
		declaredAt: (64 to: 75)) do: [ :aTransaction |
		[
		([
		(aTransaction
			cover: (100 to: 111)
			declaredAt: (83 to: 94)) isKindOf:
			(Deposit
				cover: (123 to: 129)
				declaredAt: (123 to: 129)) ] valueCoveringAll:
			{113 to: 121}) ifTrue: [
			[
			(reporte
				cover: (141 to: 147)
				declaredAt: (18 to: 24)) add:
				([
				('Deposito por ' coverAll:
					{155 to: 169}) ,
					([
					([
					(aTransaction
						cover: (172 to: 183)
						declaredAt: (83 to: 94)) value ] valueCoveringAll:
						{185 to: 189}) asString ] valueCoveringAll:
						{191 to: 198}) ] valueCoveringAll:
					{170 to: 170}) ] valueCoveringAll:
				{149 to: 152} ]] valueCoveringAll:
			{133 to: 139}.
		[
		([
		(aTransaction
			cover: (205 to: 216)
			declaredAt: (83 to: 94)) isKindOf:
			(Withdraw
				cover: (228 to: 235)
				declaredAt: (228 to: 235)) ] valueCoveringAll:
			{218 to: 226}) ifTrue: [
			[
			(reporte
				cover: (247 to: 253)
				declaredAt: (18 to: 24)) add:
				([
				('Extraccion por ' coverAll:
					{261 to: 277}) ,
					([
					([
					(aTransaction
						cover: (280 to: 291)
						declaredAt: (83 to: 94)) value ] valueCoveringAll:
						{293 to: 297}) asString ] valueCoveringAll:
						{299 to: 306}) ] valueCoveringAll:
					{278 to: 278}) ] valueCoveringAll:
				{255 to: 258} ]] valueCoveringAll:
			{239 to: 245}.
		[
		([
		(aTransaction
			cover: (314 to: 325)
			declaredAt: (83 to: 94)) isKindOf:
			(Transfer
				cover: (337 to: 344)
				declaredAt: (337 to: 344)) ] valueCoveringAll:
			{327 to: 335}) ifTrue: [
			[
			([
			([
			(aTransaction
				cover: (360 to: 371)
				declaredAt: (83 to: 94)) extractionLeg ] valueCoveringAll:
				{373 to: 385}) =
				(self coverAll:
					{389 to: 392}) ] valueCoveringAll:
				{387 to: 387}) ifTrue: [
				[
				(reporte
					cover: (403 to: 409)
					declaredAt: (18 to: 24)) add:
					([
					('Salida por transferencia de ' coverAll:
						{417 to: 446}) ,
						([
						([
						(aTransaction
							cover: (449 to: 460)
							declaredAt: (83 to: 94)) value ] valueCoveringAll:
							{462 to: 466}) asString ] valueCoveringAll:
							{468 to: 475}) ] valueCoveringAll:
						{447 to: 447}) ] valueCoveringAll:
					{411 to: 414} ]] valueCoveringAll:
				{394 to: 400}.
			[
			([
			([
			(aTransaction
				cover: (483 to: 494)
				declaredAt: (83 to: 94)) depositLeg ] valueCoveringAll:
				{497 to: 506}) =
				(self coverAll:
					{511 to: 514}) ] valueCoveringAll:
				{509 to: 509}) ifTrue: [
				[
				(reporte
					cover: (526 to: 532)
					declaredAt: (18 to: 24)) add:
					([
					('Entrada por transferencia de ' coverAll:
						{540 to: 570}) ,
						([
						([
						(aTransaction
							cover: (573 to: 584)
							declaredAt: (83 to: 94)) value ] valueCoveringAll:
							{586 to: 590}) asString ] valueCoveringAll:
							{592 to: 599}) ] valueCoveringAll:
						{571 to: 571}) ] valueCoveringAll:
					{534 to: 537} ]] valueCoveringAll:
				{517 to: 523} ]] valueCoveringAll:
			{348 to: 354} ]] valueCoveringAll:
		{77 to: 79}.
	[
	(reporte
		cover: (657 to: 663)
		declaredAt: (18 to: 24)) addLast:
		([
		('Balance = ' coverAll:
			{675 to: 686}) ,
			([
			([
			(self coverAll:
				{689 to: 692}) balance ] valueCoveringAll:
				{694 to: 700}) asString ] valueCoveringAll:
				{702 to: 709}) ] valueCoveringAll:
			{687 to: 687}) ] valueCoveringAll:
		{665 to: 672}.
	^ reporte
		cover: (718 to: 724)
		declaredAt: (18 to: 24).! !

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 17:00:41'!
PASSED!
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 17:00:41'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 17:00:41'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 17:00:41'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 17:00:41'!
PASSED!
!Behavior method!
value
	^ amount
		cover: (9 to: 14)
		declaredAt: (9 to: 14).! !

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 17:00:41'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 17:00:41'!
PASSED!
!Behavior method!
transferNet
	"local2:=transactions inject: 0 into: [:sum :aTransfer| 
						(aTransfer extractionLeg = self) ifTrue:[sum +aTransfer value negated] ifFalse: [sum +aTransfer value]]."
	| local2 |
	(local2 _ [
	(transactions
		cover: (208 to: 219)
		declaredAt: (208 to: 219))
		sum: [ :aTransaction |
			[
			([
			(aTransaction
				cover: (245 to: 256)
				declaredAt: (228 to: 239)) isKindOf:
				(Transfer
					cover: (268 to: 275)
					declaredAt: (268 to: 275)) ] valueCoveringAll:
				{258 to: 266}) ifTrue: [
				[
				([
				([
				(aTransaction
					cover: (293 to: 304)
					declaredAt: (228 to: 239)) depositLeg ] valueCoveringAll:
					{306 to: 315}) =
					(self coverAll:
						{319 to: 322}) ] valueCoveringAll:
					{317 to: 317})
					ifTrue: [
						[
						(aTransaction
							cover: (333 to: 344)
							declaredAt: (228 to: 239)) value ] valueCoveringAll:
							{346 to: 350} ]
					ifFalse: [
						[
						([
						(aTransaction
							cover: (362 to: 373)
							declaredAt: (228 to: 239)) value ] valueCoveringAll:
							{375 to: 379}) negated ] valueCoveringAll:
							{381 to: 387} ]] valueCoveringAll:
					{325 to: 331. 353 to: 360} ]] valueCoveringAll:
				{278 to: 284} ]
		ifEmpty: [
			0 coverAll:
				{404 to: 404} ]] valueCoveringAll:
		{221 to: 224. 395 to: 402})
		cover: (199 to: 204)
		declaredAt: (14 to: 19).
	^ local2
		cover: (412 to: 417)
		declaredAt: (14 to: 19).! !

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 17:00:41'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 17:00:41'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 17:00:41'!
PASSED!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (26 to: 42)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (61 to: 77)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{79 to: 81})
		cover: (50 to: 56)
		declaredAt: (50 to: 56).! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (13 to: 20)
		declaredAt: (13 to: 20))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (42 to: 50)
				declaredAt: (30 to: 38)) balance ] valueCoveringAll:
				{52 to: 58} ]
		ifEmpty: [
			0 coverAll:
				{73 to: 73} ]] valueCoveringAll:
		{22 to: 25. 62 to: 69}.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Am 6/2/2021 17:00:41'!
PASSED!
!Behavior method!
with: anAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}.
	[ cascadeReceiver add: anAccount ] valueCoveringAll:
		{32 to: 45}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{50 to: 57} ] value.! !
!Behavior method!
add: accountToAdd
	[
	(self coverAll:
		{21 to: 24}) assertCanAdd:
		(accountToAdd
			cover: (40 to: 51)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{26 to: 38}.
	[
	(accounts
		cover: (58 to: 65)
		declaredAt: (58 to: 65)) add:
		(accountToAdd
			cover: (72 to: 83)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{67 to: 70}.
	[
	(accountToAdd
		cover: (87 to: 98)
		declaredAt: (6 to: 17)) addedTo:
		(self coverAll:
			{109 to: 112}) ] valueCoveringAll:
		{100 to: 107}.! !
!Behavior method!
assertCanAdd: accountToAdd
	[
	([
	(self coverAll:
		{31 to: 34}) anyRootParentIsComposedBy:
		(accountToAdd
			cover: (63 to: 74)
			declaredAt: (15 to: 26)) ] valueCoveringAll:
		{36 to: 61}) ifTrue: [
		[
		(self coverAll:
			{87 to: 90}) signalCanNotAddAccount ] valueCoveringAll:
			{92 to: 113} ]] valueCoveringAll:
		{77 to: 83}.! !
!Behavior method!
anyRootParentIsComposedBy: accountToAdd
	^ [
	([
	(self coverAll:
		{44 to: 47}) rootParents ] valueCoveringAll:
		{49 to: 59}) anySatisfy: [ :aParent |
		[
		(aParent
			cover: (86 to: 92)
			declaredAt: (76 to: 82)) isComposedBy:
			(accountToAdd
				cover: (108 to: 119)
				declaredAt: (28 to: 39)) ] valueCoveringAll:
			{94 to: 106} ]] valueCoveringAll:
		{61 to: 71}.! !
!Behavior method!
rootParents
	| rootParents |
	(rootParents _ [
	(Set
		cover: (50 to: 52)
		declaredAt: (50 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(self coverAll:
		{60 to: 63}) addRootParentsTo:
		(rootParents
			cover: (83 to: 93)
			declaredAt: (18 to: 28)) ] valueCoveringAll:
		{65 to: 81}.
	^ rootParents
		cover: (101 to: 111)
		declaredAt: (18 to: 28).! !
!Behavior method!
addRootParentsTo: rootParents
	[
	(parents
		cover: (33 to: 39)
		declaredAt: (33 to: 39))
		ifEmpty: [
			[
			(rootParents
				cover: (55 to: 65)
				declaredAt: (19 to: 29)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (96 to: 102)
				declaredAt: (33 to: 39)) do: [ :aParent |
				[
				(aParent
					cover: (121 to: 127)
					declaredAt: (111 to: 117)) addRootParentsTo:
					(rootParents
						cover: (147 to: 157)
						declaredAt: (19 to: 29)) ] valueCoveringAll:
					{129 to: 145} ]] valueCoveringAll:
				{104 to: 106} ]] valueCoveringAll:
		{44 to: 51. 82 to: 92}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	([
	(self coverAll:
		{29 to: 32}) =
		(anAccount
			cover: (36 to: 44)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 34}) or: [
		[
		(accounts
			cover: (52 to: 59)
			declaredAt: (52 to: 59)) anySatisfy: [ :composedAccount |
			[
			([
			(composedAccount
				cover: (95 to: 109)
				declaredAt: (76 to: 90)) isComposedBy:
				(anAccount
					cover: (125 to: 133)
					declaredAt: (15 to: 23)) ] valueCoveringAll:
				{111 to: 123}) or: [
				[
				(anAccount
					cover: (142 to: 150)
					declaredAt: (15 to: 23)) isComposedBy:
					(composedAccount
						cover: (166 to: 180)
						declaredAt: (76 to: 90)) ] valueCoveringAll:
					{152 to: 164} ]] valueCoveringAll:
				{136 to: 138} ]] valueCoveringAll:
			{61 to: 71} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
addedTo: aPortfolio
	^ self.! !

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Am 6/2/2021 17:00:41'!
PASSED!
!Behavior method!
with: anAccount with: anotherAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{41 to: 44}) new ] valueCoveringAll:
		{46 to: 48}.
	[ cascadeReceiver add: anAccount ] valueCoveringAll:
		{53 to: 66}.
	[ cascadeReceiver add: anotherAccount ] valueCoveringAll:
		{71 to: 89}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{94 to: 101} ] value.! !
!Behavior method!
addedTo: aPortfolio
	[
	(parents
		cover: (25 to: 31)
		declaredAt: (25 to: 31)) add:
		(aPortfolio
			cover: (38 to: 47)
			declaredAt: (10 to: 19)) ] valueCoveringAll:
		{33 to: 36}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	(self coverAll:
		{28 to: 31}) =
		(anAccount
			cover: (35 to: 43)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{33 to: 33}.! !

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Am 6/2/2021 17:00:41'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) anySatisfy: [ :anAccount |
		[
		(anAccount
			cover: (68 to: 76)
			declaredAt: (56 to: 64)) hasRegistered:
			(aTransaction
				cover: (93 to: 104)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{78 to: 91} ]] valueCoveringAll:
		{41 to: 51}.! !

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Am 6/2/2021 17:00:41'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Am 6/2/2021 17:00:41'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Am 6/2/2021 17:00:41'!
PASSED!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (53 to: 69)
		declaredAt: (53 to: 69)) new ] valueCoveringAll:
		{71 to: 73})
		cover: (37 to: 48)
		declaredAt: (19 to: 30).
	[
	(accounts
		cover: (77 to: 84)
		declaredAt: (77 to: 84)) do: [ :anAccount |
		[
		(anAccount
			cover: (105 to: 113)
			declaredAt: (93 to: 101)) addTransactionsTo:
			(transactions
				cover: (134 to: 145)
				declaredAt: (19 to: 30)) ] valueCoveringAll:
			{115 to: 132} ]] valueCoveringAll:
		{86 to: 88}.
	^ transactions
		cover: (154 to: 165)
		declaredAt: (19 to: 30).! !

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Am 6/2/2021 17:00:41'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(aCollectionOfTransactions
		cover: (48 to: 72)
		declaredAt: (20 to: 44)) addAll:
		(transactions
			cover: (82 to: 93)
			declaredAt: (82 to: 93)) ] valueCoveringAll:
		{74 to: 80}.! !

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Am 6/2/2021 17:00:41'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(accounts
		cover: (48 to: 55)
		declaredAt: (48 to: 55)) do: [ :anAccount |
		[
		(anAccount
			cover: (76 to: 84)
			declaredAt: (64 to: 72)) addTransactionsTo:
			(aCollectionOfTransactions
				cover: (105 to: 129)
				declaredAt: (20 to: 44)) ] valueCoveringAll:
			{86 to: 103} ]] valueCoveringAll:
		{57 to: 59}.! !

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Am 6/2/2021 17:00:41'!
PASSED!
!Behavior method!
signalCanNotAddAccount
	[
	(self coverAll:
		{27 to: 30}) error:
		([
		([
		(self coverAll:
			{39 to: 42}) class ] valueCoveringAll:
			{44 to: 48}) canNotAddAccountErrorMessage ] valueCoveringAll:
			{50 to: 77}) ] valueCoveringAll:
		{32 to: 37}.! !
!Behavior method!
canNotAddAccountErrorMessage
	^ 'Can not add repeated account to a portfolio' coverAll:
		{34 to: 78}.! !
!Behavior method!
accountsSize
	^ [
	(accounts
		cover: (18 to: 25)
		declaredAt: (18 to: 25)) size ] valueCoveringAll:
		{27 to: 30}.! !
!Behavior method!
accountsIncludes: anAccount
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) includes:
		(anAccount
			cover: (51 to: 59)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{41 to: 49}.! !

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Am 6/2/2021 17:00:41'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Am 6/2/2021 17:00:41'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Am 6/2/2021 17:00:41'!
PASSED!
!Behavior method!
accountsIsEmpty
	^ [
	(accounts
		cover: (21 to: 28)
		declaredAt: (21 to: 28)) isEmpty ] valueCoveringAll:
		{30 to: 36}.! !

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Am 6/2/2021 17:00:41'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Am 6/2/2021 17:00:42'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Am 6/2/2021 17:00:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Am 6/2/2021 17:00:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Am 6/2/2021 17:00:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Am 6/2/2021 17:00:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Am 6/2/2021 17:00:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Am 6/2/2021 17:00:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Am 6/2/2021 17:00:42'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Am 6/2/2021 17:00:42'!
PASSED!

!methodRemoval: ReceptiveAccount #addedTo: stamp: 'Am 6/2/2021 17:01:35'!
addedTo: aPortfolio 
	
	!
!Behavior method!
initialize
	[ super initialize ] valueCoveringAll:
		{20 to: 29}.
	(transactions _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (33 to: 44)
		declaredAt: (33 to: 44).
	(transfers _ [
	(OrderedCollection
		cover: (86 to: 102)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (73 to: 81)
		declaredAt: (73 to: 81).! !
!Behavior method!
from: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount
	| aTransfer |
	(aTransfer _ [
	(Transfer
		cover: (95 to: 102)
		declaredAt: (95 to: 102)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (84 to: 92)
		declaredAt: (72 to: 80).
	[
	(aTransfer
		cover: (110 to: 118)
		declaredAt: (72 to: 80))
		madeFrom:
			(aReceptiveAccount
				cover: (130 to: 146)
				declaredAt: (7 to: 23))
		to:
			(aReceptiveAccount2
				cover: (152 to: 169)
				declaredAt: (29 to: 46))
		withAmount:
			(anAmount
				cover: (184 to: 191)
				declaredAt: (60 to: 67)) ] valueCoveringAll:
		{120 to: 128. 148 to: 150. 172 to: 182}.
	^ aTransfer
		cover: (196 to: 204)
		declaredAt: (72 to: 80).! !
!Behavior method!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount
	[
	([
	(anAmount
		cover: (77 to: 84)
		declaredAt: (64 to: 71)) <=
		(0 coverAll:
			{88 to: 88}) ] valueCoveringAll:
		{86 to: 87}) ifTrue: [
		[
		(self coverAll:
			{99 to: 102}) error:
			([
			([
			(self coverAll:
				{111 to: 114}) class ] valueCoveringAll:
				{116 to: 120}) negativeValueTransfer ] valueCoveringAll:
				{122 to: 142}) ] valueCoveringAll:
			{104 to: 109} ]] valueCoveringAll:
		{91 to: 97}.
	(sender _ aReceptiveAccount
		cover: (157 to: 173)
		declaredAt: (11 to: 27))
		cover: (149 to: 154)
		declaredAt: (149 to: 154).
	(reciever _ aReceptiveAccount2
		cover: (189 to: 206)
		declaredAt: (33 to: 50))
		cover: (178 to: 185)
		declaredAt: (178 to: 185).
	(amount _ anAmount
		cover: (220 to: 227)
		declaredAt: (64 to: 71))
		cover: (211 to: 216)
		declaredAt: (211 to: 216).
	[
	(aReceptiveAccount2
		cover: (231 to: 248)
		declaredAt: (33 to: 50)) registerTransfer:
		(self coverAll:
			{268 to: 271}) ] valueCoveringAll:
		{250 to: 266}.
	[
	(aReceptiveAccount
		cover: (275 to: 291)
		declaredAt: (11 to: 27)) registerTransfer:
		(self coverAll:
			{311 to: 314}) ] valueCoveringAll:
		{293 to: 309}.! !
!Behavior method!
registerTransfer: aTransfer
	[
	(transactions
		cover: (31 to: 42)
		declaredAt: (31 to: 42)) add:
		(aTransfer
			cover: (49 to: 57)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{44 to: 47}.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (14 to: 25)
		declaredAt: (14 to: 25))
		inject:
			(0 coverAll:
				{38 to: 38})
		into: [ :currentBalance :transaction |
			[
			([
			(transaction
				cover: (86 to: 96)
				declaredAt: (67 to: 77)) isKindOf:
				(Transfer
					cover: (108 to: 115)
					declaredAt: (108 to: 115)) ] valueCoveringAll:
				{98 to: 106})
				ifFalse: [
					[
					(transaction
						cover: (127 to: 137)
						declaredAt: (67 to: 77)) affectBalance:
						(currentBalance
							cover: (154 to: 167)
							declaredAt: (51 to: 64)) ] valueCoveringAll:
						{139 to: 152} ]
				ifTrue: [
					[
					(transaction
						cover: (179 to: 189)
						declaredAt: (67 to: 77))
						affectBalance:
							(currentBalance
								cover: (206 to: 219)
								declaredAt: (51 to: 64))
						fromAccount:
							(self coverAll:
								{234 to: 237}) ] valueCoveringAll:
						{191 to: 204. 221 to: 232} ]] valueCoveringAll:
				{118 to: 125. 170 to: 176} ]] valueCoveringAll:
		{30 to: 36. 42 to: 46}.! !
!Behavior method!
affectBalance: aBalance fromAccount: anAccount
	^ [
	([
	(anAccount
		cover: (52 to: 60)
		declaredAt: (38 to: 46)) =
		(sender
			cover: (64 to: 69)
			declaredAt: (64 to: 69)) ] valueCoveringAll:
		{62 to: 62})
		ifTrue: [
			[
			(aBalance
				cover: (81 to: 88)
				declaredAt: (16 to: 23)) -
				(amount
					cover: (92 to: 97)
					declaredAt: (92 to: 97)) ] valueCoveringAll:
				{90 to: 90} ]
		ifFalse: [
			[
			(aBalance
				cover: (112 to: 119)
				declaredAt: (16 to: 23)) +
				(amount
					cover: (123 to: 128)
					declaredAt: (92 to: 97)) ] valueCoveringAll:
				{121 to: 121} ]
	"PONER ERROR DESPUES" ] valueCoveringAll:
		{72 to: 78. 101 to: 108}.! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:01:41'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 17:01:41'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 17:01:41'!
PASSED!
!Behavior method!
extractionLeg
	^ sender
		cover: (17 to: 22)
		declaredAt: (17 to: 22).! !

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 6/2/2021 17:01:41'!
PASSED!
!Behavior method!
depositLeg
	^ reciever
		cover: (14 to: 21)
		declaredAt: (14 to: 21).! !

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 6/2/2021 17:01:41'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 17:01:41'!
PASSED!
!Behavior method!
negativeValueTransfer
	"Cannot do a negative value transfer"
	^ self.! !

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 17:01:41'!
PASSED!
!Behavior method!
accountSummary
	| reporte |
	(reporte _ [
	(OrderedCollection
		cover: (38 to: 54)
		declaredAt: (38 to: 54)) new ] valueCoveringAll:
		{56 to: 58})
		cover: (29 to: 35)
		declaredAt: (18 to: 24).
	[
	(transactions
		cover: (64 to: 75)
		declaredAt: (64 to: 75)) do: [ :aTransaction |
		[
		([
		(aTransaction
			cover: (100 to: 111)
			declaredAt: (83 to: 94)) isKindOf:
			(Deposit
				cover: (123 to: 129)
				declaredAt: (123 to: 129)) ] valueCoveringAll:
			{113 to: 121}) ifTrue: [
			[
			(reporte
				cover: (141 to: 147)
				declaredAt: (18 to: 24)) add:
				([
				('Deposito por ' coverAll:
					{155 to: 169}) ,
					([
					([
					(aTransaction
						cover: (172 to: 183)
						declaredAt: (83 to: 94)) value ] valueCoveringAll:
						{185 to: 189}) asString ] valueCoveringAll:
						{191 to: 198}) ] valueCoveringAll:
					{170 to: 170}) ] valueCoveringAll:
				{149 to: 152} ]] valueCoveringAll:
			{133 to: 139}.
		[
		([
		(aTransaction
			cover: (205 to: 216)
			declaredAt: (83 to: 94)) isKindOf:
			(Withdraw
				cover: (228 to: 235)
				declaredAt: (228 to: 235)) ] valueCoveringAll:
			{218 to: 226}) ifTrue: [
			[
			(reporte
				cover: (247 to: 253)
				declaredAt: (18 to: 24)) add:
				([
				('Extraccion por ' coverAll:
					{261 to: 277}) ,
					([
					([
					(aTransaction
						cover: (280 to: 291)
						declaredAt: (83 to: 94)) value ] valueCoveringAll:
						{293 to: 297}) asString ] valueCoveringAll:
						{299 to: 306}) ] valueCoveringAll:
					{278 to: 278}) ] valueCoveringAll:
				{255 to: 258} ]] valueCoveringAll:
			{239 to: 245}.
		[
		([
		(aTransaction
			cover: (314 to: 325)
			declaredAt: (83 to: 94)) isKindOf:
			(Transfer
				cover: (337 to: 344)
				declaredAt: (337 to: 344)) ] valueCoveringAll:
			{327 to: 335}) ifTrue: [
			[
			([
			([
			(aTransaction
				cover: (360 to: 371)
				declaredAt: (83 to: 94)) extractionLeg ] valueCoveringAll:
				{373 to: 385}) =
				(self coverAll:
					{389 to: 392}) ] valueCoveringAll:
				{387 to: 387}) ifTrue: [
				[
				(reporte
					cover: (403 to: 409)
					declaredAt: (18 to: 24)) add:
					([
					('Salida por transferencia de ' coverAll:
						{417 to: 446}) ,
						([
						([
						(aTransaction
							cover: (449 to: 460)
							declaredAt: (83 to: 94)) value ] valueCoveringAll:
							{462 to: 466}) asString ] valueCoveringAll:
							{468 to: 475}) ] valueCoveringAll:
						{447 to: 447}) ] valueCoveringAll:
					{411 to: 414} ]] valueCoveringAll:
				{394 to: 400}.
			[
			([
			([
			(aTransaction
				cover: (483 to: 494)
				declaredAt: (83 to: 94)) depositLeg ] valueCoveringAll:
				{497 to: 506}) =
				(self coverAll:
					{511 to: 514}) ] valueCoveringAll:
				{509 to: 509}) ifTrue: [
				[
				(reporte
					cover: (526 to: 532)
					declaredAt: (18 to: 24)) add:
					([
					('Entrada por transferencia de ' coverAll:
						{540 to: 570}) ,
						([
						([
						(aTransaction
							cover: (573 to: 584)
							declaredAt: (83 to: 94)) value ] valueCoveringAll:
							{586 to: 590}) asString ] valueCoveringAll:
							{592 to: 599}) ] valueCoveringAll:
						{571 to: 571}) ] valueCoveringAll:
					{534 to: 537} ]] valueCoveringAll:
				{517 to: 523} ]] valueCoveringAll:
			{348 to: 354} ]] valueCoveringAll:
		{77 to: 79}.
	[
	(reporte
		cover: (657 to: 663)
		declaredAt: (18 to: 24)) addLast:
		([
		('Balance = ' coverAll:
			{675 to: 686}) ,
			([
			([
			(self coverAll:
				{689 to: 692}) balance ] valueCoveringAll:
				{694 to: 700}) asString ] valueCoveringAll:
				{702 to: 709}) ] valueCoveringAll:
			{687 to: 687}) ] valueCoveringAll:
		{665 to: 672}.
	^ reporte
		cover: (718 to: 724)
		declaredAt: (18 to: 24).! !

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 17:01:41'!
PASSED!
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 17:01:41'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 17:01:41'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 17:01:41'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 17:01:41'!
PASSED!
!Behavior method!
value
	^ amount
		cover: (9 to: 14)
		declaredAt: (9 to: 14).! !

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 17:01:41'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 17:01:41'!
PASSED!
!Behavior method!
transferNet
	"local2:=transactions inject: 0 into: [:sum :aTransfer| 
						(aTransfer extractionLeg = self) ifTrue:[sum +aTransfer value negated] ifFalse: [sum +aTransfer value]]."
	| local2 |
	(local2 _ [
	(transactions
		cover: (208 to: 219)
		declaredAt: (208 to: 219))
		sum: [ :aTransaction |
			[
			([
			(aTransaction
				cover: (245 to: 256)
				declaredAt: (228 to: 239)) isKindOf:
				(Transfer
					cover: (268 to: 275)
					declaredAt: (268 to: 275)) ] valueCoveringAll:
				{258 to: 266}) ifTrue: [
				[
				([
				([
				(aTransaction
					cover: (293 to: 304)
					declaredAt: (228 to: 239)) depositLeg ] valueCoveringAll:
					{306 to: 315}) =
					(self coverAll:
						{319 to: 322}) ] valueCoveringAll:
					{317 to: 317})
					ifTrue: [
						[
						(aTransaction
							cover: (333 to: 344)
							declaredAt: (228 to: 239)) value ] valueCoveringAll:
							{346 to: 350} ]
					ifFalse: [
						[
						([
						(aTransaction
							cover: (362 to: 373)
							declaredAt: (228 to: 239)) value ] valueCoveringAll:
							{375 to: 379}) negated ] valueCoveringAll:
							{381 to: 387} ]] valueCoveringAll:
					{325 to: 331. 353 to: 360} ]] valueCoveringAll:
				{278 to: 284} ]
		ifEmpty: [
			0 coverAll:
				{404 to: 404} ]] valueCoveringAll:
		{221 to: 224. 395 to: 402})
		cover: (199 to: 204)
		declaredAt: (14 to: 19).
	^ local2
		cover: (412 to: 417)
		declaredAt: (14 to: 19).! !

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 17:01:41'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 17:01:41'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 17:01:41'!
PASSED!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (26 to: 42)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (61 to: 77)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{79 to: 81})
		cover: (50 to: 56)
		declaredAt: (50 to: 56).! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (13 to: 20)
		declaredAt: (13 to: 20))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (42 to: 50)
				declaredAt: (30 to: 38)) balance ] valueCoveringAll:
				{52 to: 58} ]
		ifEmpty: [
			0 coverAll:
				{73 to: 73} ]] valueCoveringAll:
		{22 to: 25. 62 to: 69}.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Am 6/2/2021 17:01:41'!
PASSED!
!Behavior method!
with: anAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}.
	[ cascadeReceiver add: anAccount ] valueCoveringAll:
		{32 to: 45}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{50 to: 57} ] value.! !
!Behavior method!
add: accountToAdd
	[
	(self coverAll:
		{21 to: 24}) assertCanAdd:
		(accountToAdd
			cover: (40 to: 51)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{26 to: 38}.
	[
	(accounts
		cover: (58 to: 65)
		declaredAt: (58 to: 65)) add:
		(accountToAdd
			cover: (72 to: 83)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{67 to: 70}.
	[
	(accountToAdd
		cover: (87 to: 98)
		declaredAt: (6 to: 17)) addedTo:
		(self coverAll:
			{109 to: 112}) ] valueCoveringAll:
		{100 to: 107}.! !
!Behavior method!
assertCanAdd: accountToAdd
	[
	([
	(self coverAll:
		{31 to: 34}) anyRootParentIsComposedBy:
		(accountToAdd
			cover: (63 to: 74)
			declaredAt: (15 to: 26)) ] valueCoveringAll:
		{36 to: 61}) ifTrue: [
		[
		(self coverAll:
			{87 to: 90}) signalCanNotAddAccount ] valueCoveringAll:
			{92 to: 113} ]] valueCoveringAll:
		{77 to: 83}.! !
!Behavior method!
anyRootParentIsComposedBy: accountToAdd
	^ [
	([
	(self coverAll:
		{44 to: 47}) rootParents ] valueCoveringAll:
		{49 to: 59}) anySatisfy: [ :aParent |
		[
		(aParent
			cover: (86 to: 92)
			declaredAt: (76 to: 82)) isComposedBy:
			(accountToAdd
				cover: (108 to: 119)
				declaredAt: (28 to: 39)) ] valueCoveringAll:
			{94 to: 106} ]] valueCoveringAll:
		{61 to: 71}.! !
!Behavior method!
rootParents
	| rootParents |
	(rootParents _ [
	(Set
		cover: (50 to: 52)
		declaredAt: (50 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(self coverAll:
		{60 to: 63}) addRootParentsTo:
		(rootParents
			cover: (83 to: 93)
			declaredAt: (18 to: 28)) ] valueCoveringAll:
		{65 to: 81}.
	^ rootParents
		cover: (101 to: 111)
		declaredAt: (18 to: 28).! !
!Behavior method!
addRootParentsTo: rootParents
	[
	(parents
		cover: (33 to: 39)
		declaredAt: (33 to: 39))
		ifEmpty: [
			[
			(rootParents
				cover: (55 to: 65)
				declaredAt: (19 to: 29)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (96 to: 102)
				declaredAt: (33 to: 39)) do: [ :aParent |
				[
				(aParent
					cover: (121 to: 127)
					declaredAt: (111 to: 117)) addRootParentsTo:
					(rootParents
						cover: (147 to: 157)
						declaredAt: (19 to: 29)) ] valueCoveringAll:
					{129 to: 145} ]] valueCoveringAll:
				{104 to: 106} ]] valueCoveringAll:
		{44 to: 51. 82 to: 92}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	([
	(self coverAll:
		{29 to: 32}) =
		(anAccount
			cover: (36 to: 44)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 34}) or: [
		[
		(accounts
			cover: (52 to: 59)
			declaredAt: (52 to: 59)) anySatisfy: [ :composedAccount |
			[
			([
			(composedAccount
				cover: (95 to: 109)
				declaredAt: (76 to: 90)) isComposedBy:
				(anAccount
					cover: (125 to: 133)
					declaredAt: (15 to: 23)) ] valueCoveringAll:
				{111 to: 123}) or: [
				[
				(anAccount
					cover: (142 to: 150)
					declaredAt: (15 to: 23)) isComposedBy:
					(composedAccount
						cover: (166 to: 180)
						declaredAt: (76 to: 90)) ] valueCoveringAll:
					{152 to: 164} ]] valueCoveringAll:
				{136 to: 138} ]] valueCoveringAll:
			{61 to: 71} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
addedTo: aPortfolio
	[
	(self coverAll:
		{23 to: 26}) subclassResponsibility ] valueCoveringAll:
		{28 to: 49}.! !

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Am 6/2/2021 17:01:41'!
ERROR!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Am 6/2/2021 17:01:41'!
ERROR!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) anySatisfy: [ :anAccount |
		[
		(anAccount
			cover: (68 to: 76)
			declaredAt: (56 to: 64)) hasRegistered:
			(aTransaction
				cover: (93 to: 104)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{78 to: 91} ]] valueCoveringAll:
		{41 to: 51}.! !

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Am 6/2/2021 17:01:41'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Am 6/2/2021 17:01:41'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Am 6/2/2021 17:01:41'!
ERROR!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (53 to: 69)
		declaredAt: (53 to: 69)) new ] valueCoveringAll:
		{71 to: 73})
		cover: (37 to: 48)
		declaredAt: (19 to: 30).
	[
	(accounts
		cover: (77 to: 84)
		declaredAt: (77 to: 84)) do: [ :anAccount |
		[
		(anAccount
			cover: (105 to: 113)
			declaredAt: (93 to: 101)) addTransactionsTo:
			(transactions
				cover: (134 to: 145)
				declaredAt: (19 to: 30)) ] valueCoveringAll:
			{115 to: 132} ]] valueCoveringAll:
		{86 to: 88}.
	^ transactions
		cover: (154 to: 165)
		declaredAt: (19 to: 30).! !

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Am 6/2/2021 17:01:41'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Am 6/2/2021 17:01:41'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Am 6/2/2021 17:01:41'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Am 6/2/2021 17:01:41'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Am 6/2/2021 17:01:41'!
ERROR!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Am 6/2/2021 17:01:41'!
ERROR!
!Behavior method!
addedTo: aPortfolio
	[
	(parents
		cover: (25 to: 31)
		declaredAt: (25 to: 31)) add:
		(aPortfolio
			cover: (38 to: 47)
			declaredAt: (10 to: 19)) ] valueCoveringAll:
		{33 to: 36}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	(self coverAll:
		{28 to: 31}) =
		(anAccount
			cover: (35 to: 43)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{33 to: 33}.! !

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Am 6/2/2021 17:01:41'!
ERROR!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Am 6/2/2021 17:01:41'!
ERROR!
!Behavior method!
with: anAccount with: anotherAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{41 to: 44}) new ] valueCoveringAll:
		{46 to: 48}.
	[ cascadeReceiver add: anAccount ] valueCoveringAll:
		{53 to: 66}.
	[ cascadeReceiver add: anotherAccount ] valueCoveringAll:
		{71 to: 89}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{94 to: 101} ] value.! !

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Am 6/2/2021 17:01:41'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Am 6/2/2021 17:01:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Am 6/2/2021 17:01:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Am 6/2/2021 17:01:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Am 6/2/2021 17:01:41'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Am 6/2/2021 17:01:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Am 6/2/2021 17:01:41'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Am 6/2/2021 17:01:41'!
PASSED!

----STARTUP---- (2 June 2021 17:02:55) as /home/alejandro/Documents/Cs.Computacion/Inge 1/linux64/CuisUniversity-4532.image!

!Behavior method!
initialize
	[ super initialize ] valueCoveringAll:
		{20 to: 29}.
	(transactions _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (33 to: 44)
		declaredAt: (33 to: 44).
	(transfers _ [
	(OrderedCollection
		cover: (86 to: 102)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (73 to: 81)
		declaredAt: (73 to: 81).! !
!Behavior method!
from: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount
	| aTransfer |
	(aTransfer _ [
	(Transfer
		cover: (95 to: 102)
		declaredAt: (95 to: 102)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (84 to: 92)
		declaredAt: (72 to: 80).
	[
	(aTransfer
		cover: (110 to: 118)
		declaredAt: (72 to: 80))
		madeFrom:
			(aReceptiveAccount
				cover: (130 to: 146)
				declaredAt: (7 to: 23))
		to:
			(aReceptiveAccount2
				cover: (152 to: 169)
				declaredAt: (29 to: 46))
		withAmount:
			(anAmount
				cover: (184 to: 191)
				declaredAt: (60 to: 67)) ] valueCoveringAll:
		{120 to: 128. 148 to: 150. 172 to: 182}.
	^ aTransfer
		cover: (196 to: 204)
		declaredAt: (72 to: 80).! !
!Behavior method!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount
	[
	([
	(anAmount
		cover: (77 to: 84)
		declaredAt: (64 to: 71)) <=
		(0 coverAll:
			{88 to: 88}) ] valueCoveringAll:
		{86 to: 87}) ifTrue: [
		[
		(self coverAll:
			{99 to: 102}) error:
			([
			([
			(self coverAll:
				{111 to: 114}) class ] valueCoveringAll:
				{116 to: 120}) negativeValueTransfer ] valueCoveringAll:
				{122 to: 142}) ] valueCoveringAll:
			{104 to: 109} ]] valueCoveringAll:
		{91 to: 97}.
	(sender _ aReceptiveAccount
		cover: (157 to: 173)
		declaredAt: (11 to: 27))
		cover: (149 to: 154)
		declaredAt: (149 to: 154).
	(reciever _ aReceptiveAccount2
		cover: (189 to: 206)
		declaredAt: (33 to: 50))
		cover: (178 to: 185)
		declaredAt: (178 to: 185).
	(amount _ anAmount
		cover: (220 to: 227)
		declaredAt: (64 to: 71))
		cover: (211 to: 216)
		declaredAt: (211 to: 216).
	[
	(aReceptiveAccount2
		cover: (231 to: 248)
		declaredAt: (33 to: 50)) registerTransfer:
		(self coverAll:
			{268 to: 271}) ] valueCoveringAll:
		{250 to: 266}.
	[
	(aReceptiveAccount
		cover: (275 to: 291)
		declaredAt: (11 to: 27)) registerTransfer:
		(self coverAll:
			{311 to: 314}) ] valueCoveringAll:
		{293 to: 309}.! !
!Behavior method!
registerTransfer: aTransfer
	[
	(transactions
		cover: (31 to: 42)
		declaredAt: (31 to: 42)) add:
		(aTransfer
			cover: (49 to: 57)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{44 to: 47}.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (14 to: 25)
		declaredAt: (14 to: 25))
		inject:
			(0 coverAll:
				{38 to: 38})
		into: [ :currentBalance :transaction |
			[
			([
			(transaction
				cover: (86 to: 96)
				declaredAt: (67 to: 77)) isKindOf:
				(Transfer
					cover: (108 to: 115)
					declaredAt: (108 to: 115)) ] valueCoveringAll:
				{98 to: 106})
				ifFalse: [
					[
					(transaction
						cover: (127 to: 137)
						declaredAt: (67 to: 77)) affectBalance:
						(currentBalance
							cover: (154 to: 167)
							declaredAt: (51 to: 64)) ] valueCoveringAll:
						{139 to: 152} ]
				ifTrue: [
					[
					(transaction
						cover: (179 to: 189)
						declaredAt: (67 to: 77))
						affectBalance:
							(currentBalance
								cover: (206 to: 219)
								declaredAt: (51 to: 64))
						fromAccount:
							(self coverAll:
								{234 to: 237}) ] valueCoveringAll:
						{191 to: 204. 221 to: 232} ]] valueCoveringAll:
				{118 to: 125. 170 to: 176} ]] valueCoveringAll:
		{30 to: 36. 42 to: 46}.! !
!Behavior method!
affectBalance: aBalance fromAccount: anAccount
	^ [
	([
	(anAccount
		cover: (52 to: 60)
		declaredAt: (38 to: 46)) =
		(sender
			cover: (64 to: 69)
			declaredAt: (64 to: 69)) ] valueCoveringAll:
		{62 to: 62})
		ifTrue: [
			[
			(aBalance
				cover: (81 to: 88)
				declaredAt: (16 to: 23)) -
				(amount
					cover: (92 to: 97)
					declaredAt: (92 to: 97)) ] valueCoveringAll:
				{90 to: 90} ]
		ifFalse: [
			[
			(aBalance
				cover: (112 to: 119)
				declaredAt: (16 to: 23)) +
				(amount
					cover: (123 to: 128)
					declaredAt: (92 to: 97)) ] valueCoveringAll:
				{121 to: 121} ]
	"PONER ERROR DESPUES" ] valueCoveringAll:
		{72 to: 78. 101 to: 108}.! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:03:13'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 17:03:13'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 17:03:13'!
PASSED!
!Behavior method!
extractionLeg
	^ sender
		cover: (17 to: 22)
		declaredAt: (17 to: 22).! !

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 6/2/2021 17:03:13'!
PASSED!
!Behavior method!
depositLeg
	^ reciever
		cover: (14 to: 21)
		declaredAt: (14 to: 21).! !

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 6/2/2021 17:03:13'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 17:03:13'!
PASSED!
!Behavior method!
negativeValueTransfer
	"Cannot do a negative value transfer"
	^ self.! !

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 17:03:13'!
PASSED!
!Behavior method!
accountSummary
	| reporte |
	(reporte _ [
	(OrderedCollection
		cover: (38 to: 54)
		declaredAt: (38 to: 54)) new ] valueCoveringAll:
		{56 to: 58})
		cover: (29 to: 35)
		declaredAt: (18 to: 24).
	[
	(transactions
		cover: (64 to: 75)
		declaredAt: (64 to: 75)) do: [ :aTransaction |
		[
		([
		(aTransaction
			cover: (100 to: 111)
			declaredAt: (83 to: 94)) isKindOf:
			(Deposit
				cover: (123 to: 129)
				declaredAt: (123 to: 129)) ] valueCoveringAll:
			{113 to: 121}) ifTrue: [
			[
			(reporte
				cover: (141 to: 147)
				declaredAt: (18 to: 24)) add:
				([
				('Deposito por ' coverAll:
					{155 to: 169}) ,
					([
					([
					(aTransaction
						cover: (172 to: 183)
						declaredAt: (83 to: 94)) value ] valueCoveringAll:
						{185 to: 189}) asString ] valueCoveringAll:
						{191 to: 198}) ] valueCoveringAll:
					{170 to: 170}) ] valueCoveringAll:
				{149 to: 152} ]] valueCoveringAll:
			{133 to: 139}.
		[
		([
		(aTransaction
			cover: (205 to: 216)
			declaredAt: (83 to: 94)) isKindOf:
			(Withdraw
				cover: (228 to: 235)
				declaredAt: (228 to: 235)) ] valueCoveringAll:
			{218 to: 226}) ifTrue: [
			[
			(reporte
				cover: (247 to: 253)
				declaredAt: (18 to: 24)) add:
				([
				('Extraccion por ' coverAll:
					{261 to: 277}) ,
					([
					([
					(aTransaction
						cover: (280 to: 291)
						declaredAt: (83 to: 94)) value ] valueCoveringAll:
						{293 to: 297}) asString ] valueCoveringAll:
						{299 to: 306}) ] valueCoveringAll:
					{278 to: 278}) ] valueCoveringAll:
				{255 to: 258} ]] valueCoveringAll:
			{239 to: 245}.
		[
		([
		(aTransaction
			cover: (314 to: 325)
			declaredAt: (83 to: 94)) isKindOf:
			(Transfer
				cover: (337 to: 344)
				declaredAt: (337 to: 344)) ] valueCoveringAll:
			{327 to: 335}) ifTrue: [
			[
			([
			([
			(aTransaction
				cover: (360 to: 371)
				declaredAt: (83 to: 94)) extractionLeg ] valueCoveringAll:
				{373 to: 385}) =
				(self coverAll:
					{389 to: 392}) ] valueCoveringAll:
				{387 to: 387}) ifTrue: [
				[
				(reporte
					cover: (403 to: 409)
					declaredAt: (18 to: 24)) add:
					([
					('Salida por transferencia de ' coverAll:
						{417 to: 446}) ,
						([
						([
						(aTransaction
							cover: (449 to: 460)
							declaredAt: (83 to: 94)) value ] valueCoveringAll:
							{462 to: 466}) asString ] valueCoveringAll:
							{468 to: 475}) ] valueCoveringAll:
						{447 to: 447}) ] valueCoveringAll:
					{411 to: 414} ]] valueCoveringAll:
				{394 to: 400}.
			[
			([
			([
			(aTransaction
				cover: (483 to: 494)
				declaredAt: (83 to: 94)) depositLeg ] valueCoveringAll:
				{497 to: 506}) =
				(self coverAll:
					{511 to: 514}) ] valueCoveringAll:
				{509 to: 509}) ifTrue: [
				[
				(reporte
					cover: (526 to: 532)
					declaredAt: (18 to: 24)) add:
					([
					('Entrada por transferencia de ' coverAll:
						{540 to: 570}) ,
						([
						([
						(aTransaction
							cover: (573 to: 584)
							declaredAt: (83 to: 94)) value ] valueCoveringAll:
							{586 to: 590}) asString ] valueCoveringAll:
							{592 to: 599}) ] valueCoveringAll:
						{571 to: 571}) ] valueCoveringAll:
					{534 to: 537} ]] valueCoveringAll:
				{517 to: 523} ]] valueCoveringAll:
			{348 to: 354} ]] valueCoveringAll:
		{77 to: 79}.
	[
	(reporte
		cover: (657 to: 663)
		declaredAt: (18 to: 24)) addLast:
		([
		('Balance = ' coverAll:
			{675 to: 686}) ,
			([
			([
			(self coverAll:
				{689 to: 692}) balance ] valueCoveringAll:
				{694 to: 700}) asString ] valueCoveringAll:
				{702 to: 709}) ] valueCoveringAll:
			{687 to: 687}) ] valueCoveringAll:
		{665 to: 672}.
	^ reporte
		cover: (718 to: 724)
		declaredAt: (18 to: 24).! !

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 17:03:13'!
PASSED!
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 17:03:13'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 17:03:13'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 17:03:13'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 17:03:13'!
PASSED!
!Behavior method!
value
	^ amount
		cover: (9 to: 14)
		declaredAt: (9 to: 14).! !

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 17:03:13'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 17:03:13'!
PASSED!
!Behavior method!
transferNet
	"local2:=transactions inject: 0 into: [:sum :aTransfer| 
						(aTransfer extractionLeg = self) ifTrue:[sum +aTransfer value negated] ifFalse: [sum +aTransfer value]]."
	| local2 |
	(local2 _ [
	(transactions
		cover: (208 to: 219)
		declaredAt: (208 to: 219))
		sum: [ :aTransaction |
			[
			([
			(aTransaction
				cover: (245 to: 256)
				declaredAt: (228 to: 239)) isKindOf:
				(Transfer
					cover: (268 to: 275)
					declaredAt: (268 to: 275)) ] valueCoveringAll:
				{258 to: 266}) ifTrue: [
				[
				([
				([
				(aTransaction
					cover: (293 to: 304)
					declaredAt: (228 to: 239)) depositLeg ] valueCoveringAll:
					{306 to: 315}) =
					(self coverAll:
						{319 to: 322}) ] valueCoveringAll:
					{317 to: 317})
					ifTrue: [
						[
						(aTransaction
							cover: (333 to: 344)
							declaredAt: (228 to: 239)) value ] valueCoveringAll:
							{346 to: 350} ]
					ifFalse: [
						[
						([
						(aTransaction
							cover: (362 to: 373)
							declaredAt: (228 to: 239)) value ] valueCoveringAll:
							{375 to: 379}) negated ] valueCoveringAll:
							{381 to: 387} ]] valueCoveringAll:
					{325 to: 331. 353 to: 360} ]] valueCoveringAll:
				{278 to: 284} ]
		ifEmpty: [
			0 coverAll:
				{404 to: 404} ]] valueCoveringAll:
		{221 to: 224. 395 to: 402})
		cover: (199 to: 204)
		declaredAt: (14 to: 19).
	^ local2
		cover: (412 to: 417)
		declaredAt: (14 to: 19).! !

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 17:03:13'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 17:03:13'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 17:03:13'!
PASSED!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (26 to: 42)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (61 to: 77)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{79 to: 81})
		cover: (50 to: 56)
		declaredAt: (50 to: 56).! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (13 to: 20)
		declaredAt: (13 to: 20))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (42 to: 50)
				declaredAt: (30 to: 38)) balance ] valueCoveringAll:
				{52 to: 58} ]
		ifEmpty: [
			0 coverAll:
				{73 to: 73} ]] valueCoveringAll:
		{22 to: 25. 62 to: 69}.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Am 6/2/2021 17:03:14'!
PASSED!
!Behavior method!
with: anAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}.
	[ cascadeReceiver add: anAccount ] valueCoveringAll:
		{32 to: 45}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{50 to: 57} ] value.! !
!Behavior method!
add: accountToAdd
	[
	(self coverAll:
		{21 to: 24}) assertCanAdd:
		(accountToAdd
			cover: (40 to: 51)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{26 to: 38}.
	[
	(accounts
		cover: (58 to: 65)
		declaredAt: (58 to: 65)) add:
		(accountToAdd
			cover: (72 to: 83)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{67 to: 70}.
	[
	(accountToAdd
		cover: (87 to: 98)
		declaredAt: (6 to: 17)) addedTo:
		(self coverAll:
			{109 to: 112}) ] valueCoveringAll:
		{100 to: 107}.! !
!Behavior method!
assertCanAdd: accountToAdd
	[
	([
	(self coverAll:
		{31 to: 34}) anyRootParentIsComposedBy:
		(accountToAdd
			cover: (63 to: 74)
			declaredAt: (15 to: 26)) ] valueCoveringAll:
		{36 to: 61}) ifTrue: [
		[
		(self coverAll:
			{87 to: 90}) signalCanNotAddAccount ] valueCoveringAll:
			{92 to: 113} ]] valueCoveringAll:
		{77 to: 83}.! !
!Behavior method!
anyRootParentIsComposedBy: accountToAdd
	^ [
	([
	(self coverAll:
		{44 to: 47}) rootParents ] valueCoveringAll:
		{49 to: 59}) anySatisfy: [ :aParent |
		[
		(aParent
			cover: (86 to: 92)
			declaredAt: (76 to: 82)) isComposedBy:
			(accountToAdd
				cover: (108 to: 119)
				declaredAt: (28 to: 39)) ] valueCoveringAll:
			{94 to: 106} ]] valueCoveringAll:
		{61 to: 71}.! !
!Behavior method!
rootParents
	| rootParents |
	(rootParents _ [
	(Set
		cover: (50 to: 52)
		declaredAt: (50 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(self coverAll:
		{60 to: 63}) addRootParentsTo:
		(rootParents
			cover: (83 to: 93)
			declaredAt: (18 to: 28)) ] valueCoveringAll:
		{65 to: 81}.
	^ rootParents
		cover: (101 to: 111)
		declaredAt: (18 to: 28).! !
!Behavior method!
addRootParentsTo: rootParents
	[
	(parents
		cover: (33 to: 39)
		declaredAt: (33 to: 39))
		ifEmpty: [
			[
			(rootParents
				cover: (55 to: 65)
				declaredAt: (19 to: 29)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (96 to: 102)
				declaredAt: (33 to: 39)) do: [ :aParent |
				[
				(aParent
					cover: (121 to: 127)
					declaredAt: (111 to: 117)) addRootParentsTo:
					(rootParents
						cover: (147 to: 157)
						declaredAt: (19 to: 29)) ] valueCoveringAll:
					{129 to: 145} ]] valueCoveringAll:
				{104 to: 106} ]] valueCoveringAll:
		{44 to: 51. 82 to: 92}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	([
	(self coverAll:
		{29 to: 32}) =
		(anAccount
			cover: (36 to: 44)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 34}) or: [
		[
		(accounts
			cover: (52 to: 59)
			declaredAt: (52 to: 59)) anySatisfy: [ :composedAccount |
			[
			([
			(composedAccount
				cover: (95 to: 109)
				declaredAt: (76 to: 90)) isComposedBy:
				(anAccount
					cover: (125 to: 133)
					declaredAt: (15 to: 23)) ] valueCoveringAll:
				{111 to: 123}) or: [
				[
				(anAccount
					cover: (142 to: 150)
					declaredAt: (15 to: 23)) isComposedBy:
					(composedAccount
						cover: (166 to: 180)
						declaredAt: (76 to: 90)) ] valueCoveringAll:
					{152 to: 164} ]] valueCoveringAll:
				{136 to: 138} ]] valueCoveringAll:
			{61 to: 71} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
addedTo: aPortfolio
	^ self.! !

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Am 6/2/2021 17:03:14'!
PASSED!
!Behavior method!
with: anAccount with: anotherAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{41 to: 44}) new ] valueCoveringAll:
		{46 to: 48}.
	[ cascadeReceiver add: anAccount ] valueCoveringAll:
		{53 to: 66}.
	[ cascadeReceiver add: anotherAccount ] valueCoveringAll:
		{71 to: 89}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{94 to: 101} ] value.! !
!Behavior method!
addedTo: aPortfolio
	[
	(parents
		cover: (25 to: 31)
		declaredAt: (25 to: 31)) add:
		(aPortfolio
			cover: (38 to: 47)
			declaredAt: (10 to: 19)) ] valueCoveringAll:
		{33 to: 36}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	(self coverAll:
		{28 to: 31}) =
		(anAccount
			cover: (35 to: 43)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{33 to: 33}.! !

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Am 6/2/2021 17:03:14'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) anySatisfy: [ :anAccount |
		[
		(anAccount
			cover: (68 to: 76)
			declaredAt: (56 to: 64)) hasRegistered:
			(aTransaction
				cover: (93 to: 104)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{78 to: 91} ]] valueCoveringAll:
		{41 to: 51}.! !

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Am 6/2/2021 17:03:14'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Am 6/2/2021 17:03:14'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Am 6/2/2021 17:03:14'!
PASSED!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (53 to: 69)
		declaredAt: (53 to: 69)) new ] valueCoveringAll:
		{71 to: 73})
		cover: (37 to: 48)
		declaredAt: (19 to: 30).
	[
	(accounts
		cover: (77 to: 84)
		declaredAt: (77 to: 84)) do: [ :anAccount |
		[
		(anAccount
			cover: (105 to: 113)
			declaredAt: (93 to: 101)) addTransactionsTo:
			(transactions
				cover: (134 to: 145)
				declaredAt: (19 to: 30)) ] valueCoveringAll:
			{115 to: 132} ]] valueCoveringAll:
		{86 to: 88}.
	^ transactions
		cover: (154 to: 165)
		declaredAt: (19 to: 30).! !

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Am 6/2/2021 17:03:14'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(aCollectionOfTransactions
		cover: (48 to: 72)
		declaredAt: (20 to: 44)) addAll:
		(transactions
			cover: (82 to: 93)
			declaredAt: (82 to: 93)) ] valueCoveringAll:
		{74 to: 80}.! !

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Am 6/2/2021 17:03:14'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(accounts
		cover: (48 to: 55)
		declaredAt: (48 to: 55)) do: [ :anAccount |
		[
		(anAccount
			cover: (76 to: 84)
			declaredAt: (64 to: 72)) addTransactionsTo:
			(aCollectionOfTransactions
				cover: (105 to: 129)
				declaredAt: (20 to: 44)) ] valueCoveringAll:
			{86 to: 103} ]] valueCoveringAll:
		{57 to: 59}.! !

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Am 6/2/2021 17:03:14'!
PASSED!
!Behavior method!
signalCanNotAddAccount
	[
	(self coverAll:
		{27 to: 30}) error:
		([
		([
		(self coverAll:
			{39 to: 42}) class ] valueCoveringAll:
			{44 to: 48}) canNotAddAccountErrorMessage ] valueCoveringAll:
			{50 to: 77}) ] valueCoveringAll:
		{32 to: 37}.! !
!Behavior method!
canNotAddAccountErrorMessage
	^ 'Can not add repeated account to a portfolio' coverAll:
		{34 to: 78}.! !
!Behavior method!
accountsSize
	^ [
	(accounts
		cover: (18 to: 25)
		declaredAt: (18 to: 25)) size ] valueCoveringAll:
		{27 to: 30}.! !
!Behavior method!
accountsIncludes: anAccount
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) includes:
		(anAccount
			cover: (51 to: 59)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{41 to: 49}.! !

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Am 6/2/2021 17:03:14'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Am 6/2/2021 17:03:14'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Am 6/2/2021 17:03:14'!
PASSED!
!Behavior method!
accountsIsEmpty
	^ [
	(accounts
		cover: (21 to: 28)
		declaredAt: (21 to: 28)) isEmpty ] valueCoveringAll:
		{30 to: 36}.! !

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Am 6/2/2021 17:03:14'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Am 6/2/2021 17:03:14'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Am 6/2/2021 17:03:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Am 6/2/2021 17:03:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Am 6/2/2021 17:03:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Am 6/2/2021 17:03:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Am 6/2/2021 17:03:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Am 6/2/2021 17:03:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Am 6/2/2021 17:03:14'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Am 6/2/2021 17:03:14'!
PASSED!

AccountTransaction subclass: #TransferLegs
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferLegs category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 17:09:22'!
AccountTransaction subclass: #TransferLegs
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferLegs subclass: #recieverLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferLegs subclass: #RecieverLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #RecieverLeg category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 17:09:40'!
TransferLegs subclass: #RecieverLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferLegs subclass: #SenderLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #SenderLeg category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 17:09:47'!
TransferLegs subclass: #SenderLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!RecieverLeg class methodsFor: 'nil' stamp: 'Am 6/2/2021 17:11:46'!
forTransfer: aTransfer
	^ self new initializeFor: aTransfer! !
!TransferLegs class methodsFor: 'no messages' stamp: 'Am 6/2/2021 17:12:19'!
forTransfer: aTransfer
	^ self new initializeFor: aTransfer! !

!methodRemoval: RecieverLeg class #forTransfer: stamp: 'Am 6/2/2021 17:12:26'!
forTransfer: aTransfer
	^ self new initializeFor: aTransfer!
!TransferLegs methodsFor: 'no messages' stamp: 'Am 6/2/2021 17:12:52'!
initializeFor: aTransfer
	self subclassResponsibility ! !
!TransferLegs methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:13:10' prior: 50866732!
initializeFor: aTransfer
	transfer= aTransfer! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:15:43' prior: 50863923!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount 

	(anAmount <=0) ifTrue:[self error: self class negativeValueTransfer ].

	sender:=SenderLeg forTransfer: self.
	reciever:= SenderLeg forTransfer: self.
	amount:= anAmount.
	aReceptiveAccount2 registerTransfer: self.
	aReceptiveAccount registerTransfer: self.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:16:00' prior: 50866742!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount 

	(anAmount <=0) ifTrue:[self error: self class negativeValueTransfer ].

	sender:=SenderLeg forTransfer: self.
	reciever:= RecieverLeg forTransfer: self.
	amount:= anAmount.
	aReceptiveAccount2 registerTransfer: self.
	aReceptiveAccount registerTransfer: self.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:16:33' prior: 50866756!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount 

	(anAmount <=0) ifTrue:[self error: self class negativeValueTransfer ].

	sender:=SenderLeg forTransfer: self.
	reciever:= RecieverLeg forTransfer: self.
	amount:= anAmount.
	aReceptiveAccount2 registerTransfer: sender.
	aReceptiveAccount registerTransfer: reciever.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:17:14' prior: 50865787!
transferNet
|local2|
	"local2:=transactions inject: 0 into: [:sum :aTransfer| 
						(aTransfer extractionLeg = self) ifTrue:[sum +aTransfer value negated] ifFalse: [sum +aTransfer value]]."
					
	local2:= transactions sum: [:aTransaction|
		(aTransaction isKindOf: TransferLegs) ifTrue: [
				(aTransaction depositLeg = self) ifTrue:[aTransaction value] ifFalse:[aTransaction value negated]		].] ifEmpty:[0].
	
	^local2
	! !

!classRenamed: #TransferLegs as: #TransferLeg stamp: 'Am 6/2/2021 17:17:26'!
Smalltalk renameClassNamed: #TransferLegs as: #TransferLeg!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:17:27' prior: 50866784!
transferNet
|local2|
	"local2:=transactions inject: 0 into: [:sum :aTransfer| 
						(aTransfer extractionLeg = self) ifTrue:[sum +aTransfer value negated] ifFalse: [sum +aTransfer value]]."
					
	local2:= transactions sum: [:aTransaction|
		(aTransaction isKindOf: TransferLeg) ifTrue: [
				(aTransaction depositLeg = self) ifTrue:[aTransaction value] ifFalse:[aTransaction value negated]		].] ifEmpty:[0].
	
	^local2
	! !

RecieverLeg new isKindOf: TransferLeg.!

RecieverLeg new isKindOf: Deposit!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:22:14' prior: 50865744!
accountSummary
	|reporte |
	reporte:=OrderedCollection new.
	
	transactions do: [:aTransaction| 
	(aTransaction isKindOf: Deposit ) ifTrue:[reporte add: ('Deposito por ', aTransaction value asString)].
	(aTransaction isKindOf: Withdraw ) ifTrue:[reporte add: ('Extraccion por ', aTransaction value asString).].
	(aTransaction isKindOf: TransferLeg ) ifTrue:[
		(aTransaction isKindOf: SenderLeg)ifTrue: [reporte add: ('Salida por transferencia de ', aTransaction value asString)].
		(aTransaction  isKindOf: RecieverLeg )ifTrue: [reporte add: ('Entrada por transferencia de ', aTransaction value asString)]				     		
										
										].].
												
		
		
	reporte addLast: ('Balance = ', self balance asString).
	
	^ reporte.! !
!TransferLeg methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:23:11' overrides: 50859951!
value
	self subclassResponsibility ! !
!RecieverLeg methodsFor: 'nil' stamp: 'Am 6/2/2021 17:23:26' overrides: 50866851!
value
	^transfer value.! !
!SenderLeg methodsFor: 'no messages' stamp: 'Am 6/2/2021 17:23:44' overrides: 50866851!
value
	^transfer value! !
!TransferLeg methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:25:20' overrides: 50859955!
affectBalance: aBalance

	^aBalance + transfer value! !
!TransferLeg methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:25:34' prior: 50866863 overrides: 50859955!
affectBalance: aBalance

	self subclassResponsibility ! !
!RecieverLeg methodsFor: 'nil' stamp: 'Am 6/2/2021 17:25:45' overrides: 50866869!
affectBalance: aBalance

	^aBalance + transfer value ! !
!SenderLeg methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:25:57' overrides: 50866869!
affectBalance: aBalance

	^aBalance - transfer value ! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'Am 6/2/2021 17:26:32' prior: 50865815 overrides: 50859721!
balance
	
	^(transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance]).! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:29:50' prior: 50866805!
transferNet
			
	^((transactions select: [:aTransaction| aTransaction isKindOf: TransferLeg ])
		inject: 0
		into: [ :currentBalance :aTransfer | aTransfer affectBalance: currentBalance]).
	
	! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:30:03'!
ERROR!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 17:30:03'!
ERROR!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 17:30:03'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 6/2/2021 17:30:03'!
FAILURE!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 6/2/2021 17:30:03'!
FAILURE!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 17:30:03'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 17:30:03'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 17:30:03'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 17:30:03'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 17:30:03'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 17:30:03'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 17:30:03'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 17:30:03'!
ERROR!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 17:30:03'!
ERROR!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 17:30:03'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 17:30:03'!
ERROR!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 17:30:03'!
ERROR!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:30:22'!
ERROR!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 17:30:22'!
ERROR!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 17:30:22'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 6/2/2021 17:30:22'!
FAILURE!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 6/2/2021 17:30:22'!
FAILURE!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 17:30:22'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 17:30:22'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 17:30:22'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 17:30:22'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 17:30:22'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 17:30:22'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 17:30:22'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 17:30:22'!
ERROR!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 17:30:22'!
ERROR!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 17:30:22'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 17:30:22'!
ERROR!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 17:30:22'!
ERROR!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:30:25'!
ERROR!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:31:28'!
ERROR!

!methodRemoval: Transfer #affectBalance:fromAccount: stamp: 'Am 6/2/2021 17:32:09'!
affectBalance: aBalance fromAccount: anAccount 
	^(anAccount = sender) ifTrue: [aBalance - amount]  ifFalse: [ aBalance + amount].
	
	"PONER ERROR DESPUES"!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:32:45'!
ERROR!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 17:32:45'!
ERROR!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 17:32:45'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 6/2/2021 17:32:45'!
FAILURE!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 6/2/2021 17:32:45'!
FAILURE!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 17:32:45'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 17:32:45'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 17:32:45'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 17:32:45'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 17:32:45'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 17:32:45'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 17:32:45'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 17:32:45'!
ERROR!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 17:32:45'!
ERROR!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 17:32:45'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 17:32:45'!
ERROR!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 17:32:45'!
ERROR!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:32:48'!
ERROR!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:34:08'!
ERROR!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:34:23'!
ERROR!

transfer value !

transfer!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:36:19'!
ERROR!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 17:36:19'!
ERROR!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 17:36:19'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 6/2/2021 17:36:19'!
FAILURE!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 6/2/2021 17:36:19'!
FAILURE!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 17:36:19'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 17:36:19'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 17:36:19'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 17:36:19'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 17:36:19'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 17:36:19'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 17:36:19'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 17:36:19'!
ERROR!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 17:36:19'!
ERROR!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 17:36:19'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 17:36:19'!
ERROR!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 17:36:19'!
ERROR!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:36:21'!
ERROR!

self!
!TransferLeg methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:39:39' prior: 50866737!
initializeFor: aTransfer
	transfer := aTransfer! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:39:45'!
FAILURE!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 17:39:45'!
FAILURE!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 17:39:45'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 6/2/2021 17:39:45'!
FAILURE!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 6/2/2021 17:39:45'!
FAILURE!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 17:39:45'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 17:39:45'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 17:39:45'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 17:39:45'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 17:39:45'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 17:39:45'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 17:39:45'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 17:39:45'!
FAILURE!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 17:39:45'!
FAILURE!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 17:39:45'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 17:39:45'!
FAILURE!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 17:39:45'!
FAILURE!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:39:50'!
FAILURE!

self!

transfer!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:42:58'!
FAILURE!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:42:58'!
FAILURE!
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:43:49' prior: 50866770!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount 

	(anAmount <=0) ifTrue:[self error: self class negativeValueTransfer ].

	sender:=SenderLeg forTransfer: self.
	reciever:= RecieverLeg forTransfer: self.
	amount:= anAmount.
	aReceptiveAccount registerTransfer: sender.
	aReceptiveAccount2 registerTransfer: reciever.! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:43:55'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 17:43:55'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 17:43:55'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 6/2/2021 17:43:55'!
FAILURE!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 6/2/2021 17:43:55'!
FAILURE!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 17:43:55'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 17:43:55'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 17:43:55'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 17:43:55'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 17:43:55'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 17:43:55'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 17:43:55'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 17:43:55'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 17:43:55'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 17:43:55'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 17:43:55'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 17:43:55'!
PASSED!
!RecieverLeg methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:46:22'!
otherLeg
	transfer  senderLeg.! !
!SenderLeg methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:46:53'!
otherLeg	

transfer recieverLeg.! !
!TransferLeg methodsFor: 'nil' stamp: 'Am 6/2/2021 17:47:08'!
otherLeg
	self subclassResponsibility ! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:47:33'!
senderLeg
	^sender! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:47:33' prior: 50863658!
test04transferRegitersExtractionLeg
	|account1 account2 transfer|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.
	
	self assert: (transfer senderLeg = account1).

	
	
	

	
	! !

!methodRemoval: Transfer #extractionLeg stamp: 'Am 6/2/2021 17:47:33'!
extractionLeg
	^sender!
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:48:00'!
recieverLeg
	^reciever.! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:48:00' prior: 50863756!
test05transferRegitersDepositLeg
	|account1 account2 transfer|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.
	
	self assert: (transfer recieverLeg = account2).

	
	
	

	
	! !

!methodRemoval: Transfer #depositLeg stamp: 'Am 6/2/2021 17:48:00'!
depositLeg
	^reciever.!
!Portfolio2Test methodsFor: 'transferTests' stamp: 'Am 6/2/2021 17:50:59' prior: 50867307!
test04transferRegitersExtractionLeg
	|account1 account2 transfer senderLeg|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.
	senderLeg:= transfer senderLeg.
	
	self assert: (senderLeg otherLeg = transfer recieverLeg).

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferTests' stamp: 'Am 6/2/2021 17:51:31'!
test04SenderLegKnowsRecieverLeg
	|account1 account2 transfer senderLeg|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.
	senderLeg:= transfer senderLeg.
	
	self assert: (senderLeg otherLeg = transfer recieverLeg).

	
	
	

	
	! !

!methodRemoval: Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 6/2/2021 17:51:31'!
test04transferRegitersExtractionLeg
	|account1 account2 transfer senderLeg|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.
	senderLeg:= transfer senderLeg.
	
	self assert: (senderLeg otherLeg = transfer recieverLeg).

	
	
	

	
	!
!Portfolio2Test methodsFor: 'transferTests' stamp: 'Am 6/2/2021 17:51:46'!
test05tRecieverLegKnowsSenderLeg
	|account1 account2 transfer|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.
	
	self assert: (transfer recieverLeg = account2).

	
	
	

	
	! !

!methodRemoval: Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 6/2/2021 17:51:46'!
test05transferRegitersDepositLeg
	|account1 account2 transfer|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.
	
	self assert: (transfer recieverLeg = account2).

	
	
	

	
	!
!Portfolio2Test methodsFor: 'transferTests' stamp: 'Am 6/2/2021 17:52:27' prior: 50867378!
test05tRecieverLegKnowsSenderLeg
	|account1 account2 transfer recieverLeg|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.
	recieverLeg:= transfer senderLeg.
	
	self assert: (recieverLeg otherLeg = transfer senderLeg).

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferTests' stamp: 'Am 6/2/2021 17:52:48' prior: 50867401!
test05tRecieverLegKnowsSenderLeg
	|account1 account2 transfer recieverLeg|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.
	recieverLeg:= transfer recieverLeg.
	
	self assert: (recieverLeg otherLeg = transfer senderLeg).

	
	
	

	
	! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:52:52'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 17:52:52'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 17:52:52'!
PASSED!

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'Am 6/2/2021 17:52:52'!
FAILURE!

!testRun: #Portfolio2Test #test05tRecieverLegKnowsSenderLeg stamp: 'Am 6/2/2021 17:52:52'!
FAILURE!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 17:52:52'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 17:52:52'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 17:52:52'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 17:52:52'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 17:52:52'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 17:52:52'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 17:52:52'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 17:52:52'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 17:52:52'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 17:52:52'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 17:52:52'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 17:52:52'!
PASSED!

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'Am 6/2/2021 17:53:06'!
FAILURE!

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'Am 6/2/2021 17:53:06'!
FAILURE!
!SenderLeg methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:53:49' prior: 50867295 overrides: 50867299!
otherLeg	

^transfer recieverLeg.! !

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'Am 6/2/2021 17:53:56'!
PASSED!
!RecieverLeg methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:54:12' prior: 50867291 overrides: 50867299!
otherLeg
	^transfer  senderLeg.! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:54:15'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 17:54:15'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 17:54:15'!
PASSED!

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'Am 6/2/2021 17:54:15'!
PASSED!

!testRun: #Portfolio2Test #test05tRecieverLegKnowsSenderLeg stamp: 'Am 6/2/2021 17:54:15'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 17:54:15'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 17:54:15'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 17:54:15'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 17:54:15'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 17:54:15'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 17:54:15'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 17:54:15'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 17:54:15'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 17:54:15'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 17:54:15'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 17:54:15'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 17:54:15'!
PASSED!
!Behavior method!
initialize
	[ super initialize ] valueCoveringAll:
		{20 to: 29}.
	(transactions _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (33 to: 44)
		declaredAt: (33 to: 44).
	(transfers _ [
	(OrderedCollection
		cover: (86 to: 102)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (73 to: 81)
		declaredAt: (73 to: 81).! !
!Behavior method!
from: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount
	| aTransfer |
	(aTransfer _ [
	(Transfer
		cover: (95 to: 102)
		declaredAt: (95 to: 102)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (84 to: 92)
		declaredAt: (72 to: 80).
	[
	(aTransfer
		cover: (110 to: 118)
		declaredAt: (72 to: 80))
		madeFrom:
			(aReceptiveAccount
				cover: (130 to: 146)
				declaredAt: (7 to: 23))
		to:
			(aReceptiveAccount2
				cover: (152 to: 169)
				declaredAt: (29 to: 46))
		withAmount:
			(anAmount
				cover: (184 to: 191)
				declaredAt: (60 to: 67)) ] valueCoveringAll:
		{120 to: 128. 148 to: 150. 172 to: 182}.
	^ aTransfer
		cover: (196 to: 204)
		declaredAt: (72 to: 80).! !
!Behavior method!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount
	[
	([
	(anAmount
		cover: (77 to: 84)
		declaredAt: (64 to: 71)) <=
		(0 coverAll:
			{88 to: 88}) ] valueCoveringAll:
		{86 to: 87}) ifTrue: [
		[
		(self coverAll:
			{99 to: 102}) error:
			([
			([
			(self coverAll:
				{111 to: 114}) class ] valueCoveringAll:
				{116 to: 120}) negativeValueTransfer ] valueCoveringAll:
				{122 to: 142}) ] valueCoveringAll:
			{104 to: 109} ]] valueCoveringAll:
		{91 to: 97}.
	(sender _ [
	(SenderLeg
		cover: (157 to: 165)
		declaredAt: (157 to: 165)) forTransfer:
		(self coverAll:
			{180 to: 183}) ] valueCoveringAll:
		{167 to: 178})
		cover: (149 to: 154)
		declaredAt: (149 to: 154).
	(reciever _ [
	(RecieverLeg
		cover: (198 to: 208)
		declaredAt: (198 to: 208)) forTransfer:
		(self coverAll:
			{223 to: 226}) ] valueCoveringAll:
		{210 to: 221})
		cover: (187 to: 194)
		declaredAt: (187 to: 194).
	(amount _ anAmount
		cover: (239 to: 246)
		declaredAt: (64 to: 71))
		cover: (230 to: 235)
		declaredAt: (230 to: 235).
	[
	(aReceptiveAccount
		cover: (250 to: 266)
		declaredAt: (11 to: 27)) registerTransfer:
		(sender
			cover: (286 to: 291)
			declaredAt: (149 to: 154)) ] valueCoveringAll:
		{268 to: 284}.
	[
	(aReceptiveAccount2
		cover: (295 to: 312)
		declaredAt: (33 to: 50)) registerTransfer:
		(reciever
			cover: (332 to: 339)
			declaredAt: (187 to: 194)) ] valueCoveringAll:
		{314 to: 330}.! !
!Behavior method!
forTransfer: aTransfer
	^ [
	([
	(self coverAll:
		{27 to: 30}) new ] valueCoveringAll:
		{32 to: 34}) initializeFor:
		(aTransfer
			cover: (51 to: 59)
			declaredAt: (14 to: 22)) ] valueCoveringAll:
		{36 to: 49}.! !
!Behavior method!
initializeFor: aTransfer
	(transfer _ aTransfer
		cover: (39 to: 47)
		declaredAt: (16 to: 24))
		cover: (27 to: 34)
		declaredAt: (27 to: 34).! !
!Behavior method!
registerTransfer: aTransfer
	[
	(transactions
		cover: (31 to: 42)
		declaredAt: (31 to: 42)) add:
		(aTransfer
			cover: (49 to: 57)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{44 to: 47}.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (14 to: 25)
		declaredAt: (14 to: 25))
		inject:
			(0 coverAll:
				{38 to: 38})
		into: [ :currentBalance :transaction |
			[
			(transaction
				cover: (81 to: 91)
				declaredAt: (67 to: 77)) affectBalance:
				(currentBalance
					cover: (108 to: 121)
					declaredAt: (51 to: 64)) ] valueCoveringAll:
				{93 to: 106} ]] valueCoveringAll:
		{30 to: 36. 42 to: 46}.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		([
		(transfer
			cover: (39 to: 46)
			declaredAt: (39 to: 46)) value ] valueCoveringAll:
			{48 to: 52}) ] valueCoveringAll:
		{37 to: 37}.! !
!Behavior method!
value
	^ amount
		cover: (9 to: 14)
		declaredAt: (9 to: 14).! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:54:33'!
PASSED!
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		([
		(transfer
			cover: (39 to: 46)
			declaredAt: (39 to: 46)) value ] valueCoveringAll:
			{48 to: 52}) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 17:54:33'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 17:54:33'!
PASSED!
!Behavior method!
senderLeg
	^ sender
		cover: (13 to: 18)
		declaredAt: (13 to: 18).! !
!Behavior method!
otherLeg
	^ [
	(transfer
		cover: (13 to: 20)
		declaredAt: (13 to: 20)) recieverLeg ] valueCoveringAll:
		{22 to: 32}.! !
!Behavior method!
recieverLeg
	^ reciever
		cover: (15 to: 22)
		declaredAt: (15 to: 22).! !

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'Am 6/2/2021 17:54:33'!
PASSED!
!Behavior method!
otherLeg
	^ [
	(transfer
		cover: (12 to: 19)
		declaredAt: (12 to: 19)) senderLeg ] valueCoveringAll:
		{22 to: 30}.! !

!testRun: #Portfolio2Test #test05tRecieverLegKnowsSenderLeg stamp: 'Am 6/2/2021 17:54:33'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 17:54:33'!
PASSED!
!Behavior method!
negativeValueTransfer
	"Cannot do a negative value transfer"
	^ self.! !

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 17:54:33'!
PASSED!
!Behavior method!
accountSummary
	| reporte |
	(reporte _ [
	(OrderedCollection
		cover: (38 to: 54)
		declaredAt: (38 to: 54)) new ] valueCoveringAll:
		{56 to: 58})
		cover: (29 to: 35)
		declaredAt: (18 to: 24).
	[
	(transactions
		cover: (64 to: 75)
		declaredAt: (64 to: 75)) do: [ :aTransaction |
		[
		([
		(aTransaction
			cover: (100 to: 111)
			declaredAt: (83 to: 94)) isKindOf:
			(Deposit
				cover: (123 to: 129)
				declaredAt: (123 to: 129)) ] valueCoveringAll:
			{113 to: 121}) ifTrue: [
			[
			(reporte
				cover: (141 to: 147)
				declaredAt: (18 to: 24)) add:
				([
				('Deposito por ' coverAll:
					{155 to: 169}) ,
					([
					([
					(aTransaction
						cover: (172 to: 183)
						declaredAt: (83 to: 94)) value ] valueCoveringAll:
						{185 to: 189}) asString ] valueCoveringAll:
						{191 to: 198}) ] valueCoveringAll:
					{170 to: 170}) ] valueCoveringAll:
				{149 to: 152} ]] valueCoveringAll:
			{133 to: 139}.
		[
		([
		(aTransaction
			cover: (205 to: 216)
			declaredAt: (83 to: 94)) isKindOf:
			(Withdraw
				cover: (228 to: 235)
				declaredAt: (228 to: 235)) ] valueCoveringAll:
			{218 to: 226}) ifTrue: [
			[
			(reporte
				cover: (247 to: 253)
				declaredAt: (18 to: 24)) add:
				([
				('Extraccion por ' coverAll:
					{261 to: 277}) ,
					([
					([
					(aTransaction
						cover: (280 to: 291)
						declaredAt: (83 to: 94)) value ] valueCoveringAll:
						{293 to: 297}) asString ] valueCoveringAll:
						{299 to: 306}) ] valueCoveringAll:
					{278 to: 278}) ] valueCoveringAll:
				{255 to: 258} ]] valueCoveringAll:
			{239 to: 245}.
		[
		([
		(aTransaction
			cover: (314 to: 325)
			declaredAt: (83 to: 94)) isKindOf:
			(TransferLeg
				cover: (337 to: 347)
				declaredAt: (337 to: 347)) ] valueCoveringAll:
			{327 to: 335}) ifTrue: [
			[
			([
			(aTransaction
				cover: (363 to: 374)
				declaredAt: (83 to: 94)) isKindOf:
				(SenderLeg
					cover: (386 to: 394)
					declaredAt: (386 to: 394)) ] valueCoveringAll:
				{376 to: 384}) ifTrue: [
				[
				(reporte
					cover: (405 to: 411)
					declaredAt: (18 to: 24)) add:
					([
					('Salida por transferencia de ' coverAll:
						{419 to: 448}) ,
						([
						([
						(aTransaction
							cover: (451 to: 462)
							declaredAt: (83 to: 94)) value ] valueCoveringAll:
							{464 to: 468}) asString ] valueCoveringAll:
							{470 to: 477}) ] valueCoveringAll:
						{449 to: 449}) ] valueCoveringAll:
					{413 to: 416} ]] valueCoveringAll:
				{396 to: 402}.
			[
			([
			(aTransaction
				cover: (485 to: 496)
				declaredAt: (83 to: 94)) isKindOf:
				(RecieverLeg
					cover: (509 to: 519)
					declaredAt: (509 to: 519)) ] valueCoveringAll:
				{499 to: 507}) ifTrue: [
				[
				(reporte
					cover: (531 to: 537)
					declaredAt: (18 to: 24)) add:
					([
					('Entrada por transferencia de ' coverAll:
						{545 to: 575}) ,
						([
						([
						(aTransaction
							cover: (578 to: 589)
							declaredAt: (83 to: 94)) value ] valueCoveringAll:
							{591 to: 595}) asString ] valueCoveringAll:
							{597 to: 604}) ] valueCoveringAll:
						{576 to: 576}) ] valueCoveringAll:
					{539 to: 542} ]] valueCoveringAll:
				{522 to: 528} ]] valueCoveringAll:
			{351 to: 357} ]] valueCoveringAll:
		{77 to: 79}.
	[
	(reporte
		cover: (665 to: 671)
		declaredAt: (18 to: 24)) addLast:
		([
		('Balance = ' coverAll:
			{683 to: 694}) ,
			([
			([
			(self coverAll:
				{697 to: 700}) balance ] valueCoveringAll:
				{702 to: 708}) asString ] valueCoveringAll:
				{710 to: 717}) ] valueCoveringAll:
			{695 to: 695}) ] valueCoveringAll:
		{673 to: 680}.
	^ reporte
		cover: (726 to: 732)
		declaredAt: (18 to: 24).! !

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 17:54:34'!
PASSED!
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 17:54:34'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 17:54:34'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 17:54:34'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 17:54:34'!
PASSED!
!Behavior method!
value
	^ [
	(transfer
		cover: (9 to: 16)
		declaredAt: (9 to: 16)) value ] valueCoveringAll:
		{18 to: 22}.! !

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 17:54:34'!
PASSED!
!Behavior method!
value
	^ [
	(transfer
		cover: (9 to: 16)
		declaredAt: (9 to: 16)) value ] valueCoveringAll:
		{18 to: 22}.! !

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 17:54:34'!
PASSED!
!Behavior method!
transferNet
	^ [
	([
	(transactions
		cover: (21 to: 32)
		declaredAt: (21 to: 32)) select: [ :aTransaction |
		[
		(aTransaction
			cover: (58 to: 69)
			declaredAt: (44 to: 55)) isKindOf:
			(TransferLeg
				cover: (81 to: 91)
				declaredAt: (81 to: 91)) ] valueCoveringAll:
			{71 to: 79} ]] valueCoveringAll:
		{34 to: 40})
		inject:
			(0 coverAll:
				{106 to: 106})
		into: [ :currentBalance :aTransfer |
			[
			(aTransfer
				cover: (147 to: 155)
				declaredAt: (135 to: 143)) affectBalance:
				(currentBalance
					cover: (172 to: 185)
					declaredAt: (119 to: 132)) ] valueCoveringAll:
				{157 to: 170} ]] valueCoveringAll:
		{98 to: 104. 110 to: 114}.! !

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 17:54:34'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 17:54:34'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 17:54:34'!
PASSED!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (26 to: 42)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (61 to: 77)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{79 to: 81})
		cover: (50 to: 56)
		declaredAt: (50 to: 56).! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (13 to: 20)
		declaredAt: (13 to: 20))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (42 to: 50)
				declaredAt: (30 to: 38)) balance ] valueCoveringAll:
				{52 to: 58} ]
		ifEmpty: [
			0 coverAll:
				{73 to: 73} ]] valueCoveringAll:
		{22 to: 25. 62 to: 69}.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Am 6/2/2021 17:54:34'!
PASSED!
!Behavior method!
with: anAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}.
	[ cascadeReceiver add: anAccount ] valueCoveringAll:
		{32 to: 45}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{50 to: 57} ] value.! !
!Behavior method!
add: accountToAdd
	[
	(self coverAll:
		{21 to: 24}) assertCanAdd:
		(accountToAdd
			cover: (40 to: 51)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{26 to: 38}.
	[
	(accounts
		cover: (58 to: 65)
		declaredAt: (58 to: 65)) add:
		(accountToAdd
			cover: (72 to: 83)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{67 to: 70}.
	[
	(accountToAdd
		cover: (87 to: 98)
		declaredAt: (6 to: 17)) addedTo:
		(self coverAll:
			{109 to: 112}) ] valueCoveringAll:
		{100 to: 107}.! !
!Behavior method!
assertCanAdd: accountToAdd
	[
	([
	(self coverAll:
		{31 to: 34}) anyRootParentIsComposedBy:
		(accountToAdd
			cover: (63 to: 74)
			declaredAt: (15 to: 26)) ] valueCoveringAll:
		{36 to: 61}) ifTrue: [
		[
		(self coverAll:
			{87 to: 90}) signalCanNotAddAccount ] valueCoveringAll:
			{92 to: 113} ]] valueCoveringAll:
		{77 to: 83}.! !
!Behavior method!
anyRootParentIsComposedBy: accountToAdd
	^ [
	([
	(self coverAll:
		{44 to: 47}) rootParents ] valueCoveringAll:
		{49 to: 59}) anySatisfy: [ :aParent |
		[
		(aParent
			cover: (86 to: 92)
			declaredAt: (76 to: 82)) isComposedBy:
			(accountToAdd
				cover: (108 to: 119)
				declaredAt: (28 to: 39)) ] valueCoveringAll:
			{94 to: 106} ]] valueCoveringAll:
		{61 to: 71}.! !
!Behavior method!
rootParents
	| rootParents |
	(rootParents _ [
	(Set
		cover: (50 to: 52)
		declaredAt: (50 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(self coverAll:
		{60 to: 63}) addRootParentsTo:
		(rootParents
			cover: (83 to: 93)
			declaredAt: (18 to: 28)) ] valueCoveringAll:
		{65 to: 81}.
	^ rootParents
		cover: (101 to: 111)
		declaredAt: (18 to: 28).! !
!Behavior method!
addRootParentsTo: rootParents
	[
	(parents
		cover: (33 to: 39)
		declaredAt: (33 to: 39))
		ifEmpty: [
			[
			(rootParents
				cover: (55 to: 65)
				declaredAt: (19 to: 29)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (96 to: 102)
				declaredAt: (33 to: 39)) do: [ :aParent |
				[
				(aParent
					cover: (121 to: 127)
					declaredAt: (111 to: 117)) addRootParentsTo:
					(rootParents
						cover: (147 to: 157)
						declaredAt: (19 to: 29)) ] valueCoveringAll:
					{129 to: 145} ]] valueCoveringAll:
				{104 to: 106} ]] valueCoveringAll:
		{44 to: 51. 82 to: 92}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	([
	(self coverAll:
		{29 to: 32}) =
		(anAccount
			cover: (36 to: 44)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 34}) or: [
		[
		(accounts
			cover: (52 to: 59)
			declaredAt: (52 to: 59)) anySatisfy: [ :composedAccount |
			[
			([
			(composedAccount
				cover: (95 to: 109)
				declaredAt: (76 to: 90)) isComposedBy:
				(anAccount
					cover: (125 to: 133)
					declaredAt: (15 to: 23)) ] valueCoveringAll:
				{111 to: 123}) or: [
				[
				(anAccount
					cover: (142 to: 150)
					declaredAt: (15 to: 23)) isComposedBy:
					(composedAccount
						cover: (166 to: 180)
						declaredAt: (76 to: 90)) ] valueCoveringAll:
					{152 to: 164} ]] valueCoveringAll:
				{136 to: 138} ]] valueCoveringAll:
			{61 to: 71} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
addedTo: aPortfolio
	^ self.! !

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Am 6/2/2021 17:54:34'!
PASSED!
!Behavior method!
with: anAccount with: anotherAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{41 to: 44}) new ] valueCoveringAll:
		{46 to: 48}.
	[ cascadeReceiver add: anAccount ] valueCoveringAll:
		{53 to: 66}.
	[ cascadeReceiver add: anotherAccount ] valueCoveringAll:
		{71 to: 89}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{94 to: 101} ] value.! !
!Behavior method!
addedTo: aPortfolio
	[
	(parents
		cover: (25 to: 31)
		declaredAt: (25 to: 31)) add:
		(aPortfolio
			cover: (38 to: 47)
			declaredAt: (10 to: 19)) ] valueCoveringAll:
		{33 to: 36}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	(self coverAll:
		{28 to: 31}) =
		(anAccount
			cover: (35 to: 43)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{33 to: 33}.! !

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Am 6/2/2021 17:54:34'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) anySatisfy: [ :anAccount |
		[
		(anAccount
			cover: (68 to: 76)
			declaredAt: (56 to: 64)) hasRegistered:
			(aTransaction
				cover: (93 to: 104)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{78 to: 91} ]] valueCoveringAll:
		{41 to: 51}.! !

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Am 6/2/2021 17:54:34'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Am 6/2/2021 17:54:34'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Am 6/2/2021 17:54:34'!
PASSED!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (53 to: 69)
		declaredAt: (53 to: 69)) new ] valueCoveringAll:
		{71 to: 73})
		cover: (37 to: 48)
		declaredAt: (19 to: 30).
	[
	(accounts
		cover: (77 to: 84)
		declaredAt: (77 to: 84)) do: [ :anAccount |
		[
		(anAccount
			cover: (105 to: 113)
			declaredAt: (93 to: 101)) addTransactionsTo:
			(transactions
				cover: (134 to: 145)
				declaredAt: (19 to: 30)) ] valueCoveringAll:
			{115 to: 132} ]] valueCoveringAll:
		{86 to: 88}.
	^ transactions
		cover: (154 to: 165)
		declaredAt: (19 to: 30).! !

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Am 6/2/2021 17:54:34'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(aCollectionOfTransactions
		cover: (48 to: 72)
		declaredAt: (20 to: 44)) addAll:
		(transactions
			cover: (82 to: 93)
			declaredAt: (82 to: 93)) ] valueCoveringAll:
		{74 to: 80}.! !

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Am 6/2/2021 17:54:34'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(accounts
		cover: (48 to: 55)
		declaredAt: (48 to: 55)) do: [ :anAccount |
		[
		(anAccount
			cover: (76 to: 84)
			declaredAt: (64 to: 72)) addTransactionsTo:
			(aCollectionOfTransactions
				cover: (105 to: 129)
				declaredAt: (20 to: 44)) ] valueCoveringAll:
			{86 to: 103} ]] valueCoveringAll:
		{57 to: 59}.! !

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Am 6/2/2021 17:54:34'!
PASSED!
!Behavior method!
signalCanNotAddAccount
	[
	(self coverAll:
		{27 to: 30}) error:
		([
		([
		(self coverAll:
			{39 to: 42}) class ] valueCoveringAll:
			{44 to: 48}) canNotAddAccountErrorMessage ] valueCoveringAll:
			{50 to: 77}) ] valueCoveringAll:
		{32 to: 37}.! !
!Behavior method!
canNotAddAccountErrorMessage
	^ 'Can not add repeated account to a portfolio' coverAll:
		{34 to: 78}.! !
!Behavior method!
accountsSize
	^ [
	(accounts
		cover: (18 to: 25)
		declaredAt: (18 to: 25)) size ] valueCoveringAll:
		{27 to: 30}.! !
!Behavior method!
accountsIncludes: anAccount
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) includes:
		(anAccount
			cover: (51 to: 59)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{41 to: 49}.! !

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Am 6/2/2021 17:54:34'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Am 6/2/2021 17:54:34'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Am 6/2/2021 17:54:34'!
PASSED!
!Behavior method!
accountsIsEmpty
	^ [
	(accounts
		cover: (21 to: 28)
		declaredAt: (21 to: 28)) isEmpty ] valueCoveringAll:
		{30 to: 36}.! !

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Am 6/2/2021 17:54:34'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Am 6/2/2021 17:54:34'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Am 6/2/2021 17:54:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Am 6/2/2021 17:54:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Am 6/2/2021 17:54:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Am 6/2/2021 17:54:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Am 6/2/2021 17:54:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Am 6/2/2021 17:54:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Am 6/2/2021 17:54:34'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Am 6/2/2021 17:54:34'!
PASSED!

----SNAPSHOT----(2 June 2021 18:16:16) CuisUniversity-4532.image priorSource: 17095777!
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 18:16:23' prior: 50867222!
madeFrom: senderAccount to: recieverAccount withAmount: anAmount 

	(anAmount <=0) ifTrue:[self error: self class negativeValueTransfer ].

	sender:=SenderLeg forTransfer: self.
	reciever:= RecieverLeg forTransfer: self.
	amount:= anAmount.
	senderAccount registerTransfer: sender.
	recieverAccount registerTransfer: reciever.! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 18:16:33'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 18:16:33'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 18:16:33'!
PASSED!

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'Am 6/2/2021 18:16:33'!
PASSED!

!testRun: #Portfolio2Test #test05tRecieverLegKnowsSenderLeg stamp: 'Am 6/2/2021 18:16:33'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 18:16:33'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 18:16:33'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 18:16:33'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 18:16:33'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 18:16:33'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 18:16:33'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 18:16:33'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 18:16:33'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 18:16:33'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 18:16:33'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 18:16:33'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 18:16:33'!
PASSED!
!AccountTransaction methodsFor: 'nil' stamp: 'Am 6/2/2021 18:18:43'!
report
self subclassResponsibility 
	! !
!TransferLeg methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 18:18:57' overrides: 50868393!
report
	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 18:20:03'!
reportTo: aReportSet
self subclassResponsibility 
	! !

!methodRemoval: AccountTransaction #report stamp: 'Am 6/2/2021 18:20:10'!
report
self subclassResponsibility 
	!
!TransferLeg methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 18:20:24' overrides: 50868402!
reportTo: aReportSet
	self subclassResponsibility ! !

!methodRemoval: TransferLeg #report stamp: 'Am 6/2/2021 18:20:31'!
report
	self subclassResponsibility !
!Deposit methodsFor: 'nil' stamp: 'Am 6/2/2021 18:21:56' overrides: 50868402!
reportTo: aReportSet
	aReportSet add: ('Deposito por ', self value asString)! !
!Withdraw methodsFor: 'nil' stamp: 'Am 6/2/2021 18:23:56' overrides: 50868402!
reportTo: aReportSet
	aReportSet add: ('Extraccion por ', self value asString).! !
!RecieverLeg methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 18:24:33' overrides: 50868411!
reportTo: aReportSet
	aReportSet add:('Entrada por transferencia de ', self value asString)! !
!SenderLeg methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 18:25:06' overrides: 50868411!
reportTo: aReportSet	
 aReportSet add: ('Salida por transferencia de ', self value asString)! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 18:25:41' prior: 50866824!
accountSummary
	|reporte |
	reporte:=OrderedCollection new.
	
	transactions do: [:aTransaction| aTransaction reportTo: reporte.].
												
		
		
	reporte addLast: ('Balance = ', self balance asString).
	
	^ reporte.! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 18:25:50'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 18:25:50'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 18:25:50'!
PASSED!

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'Am 6/2/2021 18:25:50'!
PASSED!

!testRun: #Portfolio2Test #test05tRecieverLegKnowsSenderLeg stamp: 'Am 6/2/2021 18:25:50'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 18:25:50'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 18:25:50'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 18:25:50'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 18:25:50'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 18:25:50'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 18:25:50'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 18:25:50'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 18:25:50'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 18:25:50'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 18:25:50'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 18:25:50'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 18:25:50'!
PASSED!

----SNAPSHOT----(2 June 2021 19:01:20) CuisUniversity-4532.image priorSource: 17173478!

----End fileIn of /home/alejandro/Downloads/replaceStringMorphWithLabelMorph.st----!

Object subclass: #MethodAccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #MethodAccountSummary category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 19:39:20'!
Object subclass: #MethodAccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!MethodAccountSummary class methodsFor: 'nil' stamp: 'Am 6/2/2021 19:39:57'!
for: anAccount
	^self new initializeFor:anAccount ! !

Object subclass: #MethodAccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #MethodAccountSummary category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 19:40:05'!
Object subclass: #MethodAccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!MethodAccountSummary methodsFor: 'no messages' stamp: 'Am 6/2/2021 19:40:32'!
initializeFor: anAccount
	account:= anAccount! !

----SNAPSHOT----(2 June 2021 19:52:47) CuisUniversity-4532.image priorSource: 17179421!

----SNAPSHOT----(2 June 2021 19:57:02) CuisUniversity-4532.image priorSource: 17186832!

----SNAPSHOT----(2 June 2021 19:57:06) CuisUniversity-4532.image priorSource: 17186921!

!classRemoval: #MethodAccountSummary stamp: 'Am 6/2/2021 19:57:25'!
Object subclass: #MethodAccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #MethodAccountSummary category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 19:59:10'!
Object subclass: #MethodAccountSummary
	instanceVariableNames: 'transactions account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!MethodAccountSummary class methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 19:59:10'!
transactions: aTransactions account: aSelf
	^self new initializeTransactions: aTransactions account: aSelf! !
!MethodAccountSummary methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 19:59:10'!
initializeTransactions: aTransactions account: aSelf
	transactions := aTransactions.
	account := aSelf.! !
!MethodAccountSummary methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 19:59:10'!
generate
	|reporte |
	reporte:=OrderedCollection new.
	
	transactions do: [:aTransaction| aTransaction reportTo: reporte.].
												
		
		
	reporte addLast: ('Balance = ', account balance asString).
	
	^ reporte.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 19:59:10' prior: 50868443!
accountSummary
	^(MethodAccountSummary transactions: transactions account: self) generate! !
!MethodAccountSummary methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:02:20' prior: 50868778!
generate
	 
	reporte :=OrderedCollection new.
	
	transactions do: [:aTransaction| aTransaction reportTo: reporte.].
												
		
		
	reporte addLast: ('Balance = ', account balance asString).
	
	^ reporte.! !

!classDefinition: #MethodAccountSummary category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 20:02:20'!
Object subclass: #MethodAccountSummary
	instanceVariableNames: 'transactions account reporte'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!MethodAccountSummary methodsFor: 'evaluating' stamp: 'Am 6/2/2021 20:02:39' prior: 50868795!
generate
	transactions do: [:aTransaction| aTransaction reportTo: reporte.].
												
		
		
	reporte addLast: ('Balance = ', account balance asString).
	
	^ reporte.! !
!MethodAccountSummary methodsFor: 'initialization' stamp: 'Am 6/2/2021 20:02:49' prior: 50868771!
initializeTransactions: aTransactions account: aSelf
	transactions := aTransactions.
	account := aSelf.
	reporte :=OrderedCollection new.! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 20:03:19'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 20:03:19'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 20:03:19'!
PASSED!

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'Am 6/2/2021 20:03:19'!
PASSED!

!testRun: #Portfolio2Test #test05tRecieverLegKnowsSenderLeg stamp: 'Am 6/2/2021 20:03:19'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 20:03:19'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 20:03:19'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 20:03:19'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 20:03:19'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 20:03:19'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 20:03:19'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 20:03:19'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 20:03:19'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 20:03:19'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 20:03:19'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 20:03:19'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 20:03:19'!
PASSED!
!MethodAccountSummary methodsFor: 'evaluating' stamp: 'Am 6/2/2021 20:04:27' prior: 50868814!
generate
	transactions do: [:aTransaction| aTransaction reportTo: self].
												
		
		
	reporte addLast: ('Balance = ', account balance asString).
	
	^ reporte.! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:07:27' prior: 50868419 overrides: 50868402!
reportTo: aMethodAccountSummary
	aMethodAccountSummary reportDeposit: self.! !
!RecieverLeg methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:08:19' prior: 50868430 overrides: 50868411!
reportTo: aMethodAccountSummary
	"aReportSet add:('Entrada por transferencia de ', self value asString)"
	aMethodAccountSummary reportRecieverLeg: self.! !
!SenderLeg methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:08:56' prior: 50868436 overrides: 50868411!
reportTo: aMethodAccountSummary
	
	aMethodAccountSummary reportSenderLeg: self.! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:09:53' prior: 50868424 overrides: 50868402!
reportTo: aMethodAccountSummary
	aMethodAccountSummary reportWithdraw: self.! !

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 20:10:05'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 20:10:05'!
ERROR!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 20:10:05'!
ERROR!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 20:10:05'!
ERROR!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 20:10:05'!
ERROR!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 20:10:05'!
ERROR!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 20:10:05'!
ERROR!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 20:10:24'!
ERROR!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 20:10:35'!
ERROR!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 20:10:39'!
ERROR!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 20:10:40'!
ERROR!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 20:10:57'!
ERROR!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 20:10:57'!
ERROR!
!MethodAccountSummary methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:11:09'!
reportDeposit: aDeposit 
	self shouldBeImplemented.! !
!MethodAccountSummary methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:11:32' prior: 50868966!
reportDeposit: aDeposit 
	reporte add: ('Deposito por ', aDeposit value asString)! !

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 20:11:39'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 20:11:49'!
ERROR!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 20:11:49'!
ERROR!
!MethodAccountSummary methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:12:06'!
reportWithdraw: aWithdraw 
	self shouldBeImplemented.! !
!MethodAccountSummary methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:12:34' prior: 50868987!
reportWithdraw: aWithdraw 
	reporte add: ('Extraccion por ', aWithdraw value asString)! !

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 20:12:37'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 20:12:45'!
ERROR!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 20:12:45'!
ERROR!
!MethodAccountSummary methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:12:55'!
reportSenderLeg: aSenderLeg 
	self shouldBeImplemented.! !
!MethodAccountSummary methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:13:27' prior: 50869008!
reportSenderLeg: aSenderLeg 
	reporte add: ('Salida por transferencia de ', aSenderLeg value asString)! !

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 20:13:29'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 20:13:35'!
ERROR!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 20:13:36'!
ERROR!
!MethodAccountSummary methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:13:42'!
reportRecieverLeg: aRecieverLeg 
	self shouldBeImplemented.! !
!MethodAccountSummary methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:14:07' prior: 50869030!
reportRecieverLeg: aRecieverLeg 
	reporte add: ('Entrada por transferencia de ', aRecieverLeg value asString).! !

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 20:14:09'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 20:14:11'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 20:14:11'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 20:14:11'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 20:14:11'!
PASSED!

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'Am 6/2/2021 20:14:11'!
PASSED!

!testRun: #Portfolio2Test #test05tRecieverLegKnowsSenderLeg stamp: 'Am 6/2/2021 20:14:11'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 20:14:11'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 20:14:11'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 20:14:11'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 20:14:11'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 20:14:11'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 20:14:11'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 20:14:11'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 20:14:11'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 20:14:11'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 20:14:11'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 20:14:11'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 20:14:11'!
PASSED!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:27:12'!
generateReport: aReportGenerator
	transactions do: [:aTransaction| aTransaction reportTo: aReportGenerator]
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:30:14' prior: 50869104!
generateReport: aReportGenerator
	transactions do: [:aTransaction| aTransaction reportTo: aReportGenerator].
	^aReportGenerator finishReport.
	! !

!methodRemoval: MethodAccountSummary class #transactions:account: stamp: 'Am 6/2/2021 20:32:56'!
transactions: aTransactions account: aSelf
	^self new initializeTransactions: aTransactions account: aSelf!
!MethodAccountSummary methodsFor: 'evaluating' stamp: 'Am 6/2/2021 20:33:30'!
finishReport										
	reporte addLast: ('Balance = ', account balance asString).
	^ reporte.! !

!methodRemoval: MethodAccountSummary #generate stamp: 'Am 6/2/2021 20:33:41'!
generate
	transactions do: [:aTransaction| aTransaction reportTo: self].
												
		
		
	reporte addLast: ('Balance = ', account balance asString).
	
	^ reporte.!
!MethodAccountSummary methodsFor: 'initialization' stamp: 'Am 6/2/2021 20:34:04' overrides: 16896425!
initialize
	reporte :=OrderedCollection new.! !

!methodRemoval: MethodAccountSummary #initializeTransactions:account: stamp: 'Am 6/2/2021 20:34:09'!
initializeTransactions: aTransactions account: aSelf
	transactions := aTransactions.
	account := aSelf.
	reporte :=OrderedCollection new.!

|method|
method:= MethodAccountSummary new!

Object subclass: #MethodAccountSummary
	instanceVariableNames: 'reporte'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #MethodAccountSummary category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 20:35:22'!
Object subclass: #MethodAccountSummary
	instanceVariableNames: 'reporte'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 20:37:11' prior: 50864302!
test08accountSummaryBalanceAmount0
	|account1 |
	account1:= ReceptiveAccount new.
	
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Balance = 0').
	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 20:37:18'!
ERROR!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 20:37:18'!
ERROR!

Object subclass: #MethodAccountSummary
	instanceVariableNames: 'reporte balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #MethodAccountSummary category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 20:39:51'!
Object subclass: #MethodAccountSummary
	instanceVariableNames: 'reporte balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!MethodAccountSummary methodsFor: 'initialization' stamp: 'Am 6/2/2021 20:40:03' prior: 50869139 overrides: 16896425!
initialize
	reporte :=OrderedCollection new.
	balance:=0.! !
!MethodAccountSummary methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:40:35' prior: 50868971!
reportDeposit: aDeposit 
	reporte add: ('Deposito por ', aDeposit value asString).
	balance:= balance+aDeposit.
	! !
!MethodAccountSummary methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:40:49' prior: 50869036!
reportRecieverLeg: aRecieverLeg 
	reporte add: ('Entrada por transferencia de ', aRecieverLeg value asString).
	balance:= balance+ aRecieverLeg ! !
!MethodAccountSummary methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:40:50' prior: 50869209!
reportRecieverLeg: aRecieverLeg 
	reporte add: ('Entrada por transferencia de ', aRecieverLeg value asString).
	balance:= balance+ aRecieverLeg.! !
!MethodAccountSummary methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:40:56' prior: 50869217!
reportRecieverLeg: aRecieverLeg 
	reporte add: ('Entrada por transferencia de ', aRecieverLeg value asString).
	balance:= balance+ aRecieverLeg value.! !
!MethodAccountSummary methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:41:05' prior: 50869202!
reportDeposit: aDeposit 
	reporte add: ('Deposito por ', aDeposit value asString).
	balance:= balance+aDeposit value.
	! !
!MethodAccountSummary methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:41:25' prior: 50869014!
reportSenderLeg: aSenderLeg 
	reporte add: ('Salida por transferencia de ', aSenderLeg value asString).
	balance:= balance -aSenderLeg value.! !
!MethodAccountSummary methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:41:50' prior: 50868992!
reportWithdraw: aWithdraw 
	reporte add: ('Extraccion por ', aWithdraw value asString).
	balance:= balance - aWithdraw value.! !
!MethodAccountSummary methodsFor: 'evaluating' stamp: 'Am 6/2/2021 20:42:07' prior: 50869125!
finishReport										
	reporte addLast: ('Balance = ', balance asString).
	^ reporte.! !

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 20:42:19'!
PASSED!

----SNAPSHOT----(2 June 2021 20:43:17) CuisUniversity-4532.image priorSource: 17187010!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 20:44:37' prior: 50864478!
test09accountSummaryDepositAmount100
	|account1 |
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Deposito por 100').
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 2)  equals: ('Balance = 100').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 20:45:18' prior: 50864668!
test10accountSummaryTwoDepositAmount250
	|account1 |
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	Deposit register: 150 on: account1.

	
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Deposito por 100').
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 2)  equals: ('Deposito por 150').
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 3)  equals: ('Balance = 250').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 20:45:25' prior: 50864811!
test11accountSummaryWithdrawAmount100
	|account1 |
	account1:= ReceptiveAccount new.
	
	Withdraw register: 100 on: account1.

	
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Extraccion por 100').
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 2)  equals: ('Balance = -100').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 20:45:34' prior: 50864879!
test12accountSummaryTwoWithdrawAmount100
	|account1 |
	account1:= ReceptiveAccount new.
	
	Withdraw register: 100 on: account1.
	Withdraw register: 150 on: account1.


	
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Extraccion por 100').
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 2)  equals: ('Extraccion por 150').
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 3)  equals: ('Balance = -250').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 20:45:41' prior: 50864972!
test13accountSummaryOutboundTransfer
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Transfer from: account1 to: account2  withAmount: 200.	
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Salida por transferencia de 200').
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 2)  equals: ('Balance = -200').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 20:45:49' prior: 50865104!
test14accountSummaryInboundTransfer
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Transfer from: account1 to: account2  withAmount: 200.	
	self assert: ((account2 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Entrada por transferencia de 200').
	self assert: ((account2 generateReport: 		MethodAccountSummary  new) at: 2)  equals: ('Balance = 200').

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 20:45:55'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 20:45:55'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 20:45:55'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 20:45:55'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 20:45:55'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 20:45:55'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 20:45:55'!
PASSED!

Object subclass: #MethodTransferNet
	instanceVariableNames: 'reporte balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #MethodTransferNet category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 20:46:58'!
Object subclass: #MethodTransferNet
	instanceVariableNames: 'reporte balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #MethodTransferNet stamp: 'Am 6/2/2021 20:47:31'!
Object subclass: #MethodTransferNet
	instanceVariableNames: 'reporte balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----SNAPSHOT----(2 June 2021 20:47:40) CuisUniversity-4532.image priorSource: 17203679!

Object subclass: #MethodTransferNet
	instanceVariableNames: 'reporte balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #MethodTransferNet category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 20:47:55'!
Object subclass: #MethodTransferNet
	instanceVariableNames: 'reporte balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

MethodTransferNet class
	instanceVariableNames: ''!

!classDefinition: 'MethodTransferNet class' category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 20:47:55'!
MethodTransferNet class
	instanceVariableNames: ''!
!MethodTransferNet methodsFor: 'initialization' stamp: 'Am 6/2/2021 20:47:55' overrides: 16896425!
initialize
	reporte :=OrderedCollection new.
	balance:=0.! !
!MethodTransferNet methodsFor: 'evaluating' stamp: 'Am 6/2/2021 20:47:55'!
finishReport										
	reporte addLast: ('Balance = ', balance asString).
	^ reporte.! !
!MethodTransferNet methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:47:55'!
reportDeposit: aDeposit 
	reporte add: ('Deposito por ', aDeposit value asString).
	balance:= balance+aDeposit value.
	! !
!MethodTransferNet methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:47:55'!
reportRecieverLeg: aRecieverLeg 
	reporte add: ('Entrada por transferencia de ', aRecieverLeg value asString).
	balance:= balance+ aRecieverLeg value.! !
!MethodTransferNet methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:47:55'!
reportSenderLeg: aSenderLeg 
	reporte add: ('Salida por transferencia de ', aSenderLeg value asString).
	balance:= balance -aSenderLeg value.! !
!MethodTransferNet methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:47:55'!
reportWithdraw: aWithdraw 
	reporte add: ('Extraccion por ', aWithdraw value asString).
	balance:= balance - aWithdraw value.! !

Object subclass: #MethodTransferNet
	instanceVariableNames: 'balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #MethodTransferNet category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 20:48:19'!
Object subclass: #MethodTransferNet
	instanceVariableNames: 'balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!MethodTransferNet methodsFor: 'evaluating' stamp: 'Am 6/2/2021 20:48:39' prior: 50869440!
finishReport										
	^ balance.! !
!MethodTransferNet methodsFor: 'initialization' stamp: 'Am 6/2/2021 20:48:56' prior: 50869435 overrides: 16896425!
initialize
	
	balance:=0.! !
!MethodTransferNet methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:49:07' prior: 50869446!
reportDeposit: aDeposit 
	
	! !
!MethodTransferNet methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:49:15' prior: 50869469!
reportWithdraw: aWithdraw 
	! !
!MethodTransferNet methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:49:28' prior: 50869453!
reportRecieverLeg: aRecieverLeg 
	
	balance:= balance+ aRecieverLeg value.! !
!MethodTransferNet methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:49:35' prior: 50869461!
reportSenderLeg: aSenderLeg 
	
	balance:= balance -aSenderLeg value.! !
!Portfolio2Test methodsFor: 'transferNet' stamp: 'Am 6/2/2021 20:50:21' prior: 50865178!
test15transferNetNoTransaction
	|account1|
	account1:= ReceptiveAccount new.
	
	self assert: (account1 generateReport: MethodTransferNet new)  equals: (0).
	
	

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferNet' stamp: 'Am 6/2/2021 20:50:40' prior: 50865312!
test16transferNetInboundTransaction100
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Transfer from: account1 to:account2  	withAmount:100.
	self assert: (account2 generateReport: MethodTransferNet new)  equals: 100.
	
	

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferNet' stamp: 'Am 6/2/2021 20:50:50' prior: 50865593!
test17transferNetOutboundTransaction100
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Transfer from: account1 to:account2  	withAmount:100.

	self assert: (account1 generateReport: MethodTransferNet new)  equals: (100 negated).
	
	

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 20:50:55'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 20:50:55'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 20:50:56'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 20:50:56'!
PASSED!

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'Am 6/2/2021 20:50:56'!
PASSED!

!testRun: #Portfolio2Test #test05tRecieverLegKnowsSenderLeg stamp: 'Am 6/2/2021 20:50:56'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 20:50:56'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 20:50:56'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 20:50:56'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 20:50:56'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 20:50:56'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 20:50:56'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 20:50:56'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 20:50:56'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 20:50:56'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 20:50:56'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 20:50:56'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 20:50:56'!
PASSED!

Object subclass: #ReportMethods
	instanceVariableNames: 'balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportMethods category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 20:52:08'!
Object subclass: #ReportMethods
	instanceVariableNames: 'balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

ReportMethods class
	instanceVariableNames: ''!

!classDefinition: 'ReportMethods class' category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 20:52:08'!
ReportMethods class
	instanceVariableNames: ''!
!ReportMethods methodsFor: 'initialization' stamp: 'Am 6/2/2021 20:52:08' overrides: 16896425!
initialize
	
	balance:=0.! !
!ReportMethods methodsFor: 'evaluating' stamp: 'Am 6/2/2021 20:52:08'!
finishReport										
	^ balance.! !
!ReportMethods methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:52:08'!
reportDeposit: aDeposit 
	
	! !
!ReportMethods methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:52:08'!
reportRecieverLeg: aRecieverLeg 
	
	balance:= balance+ aRecieverLeg value.! !
!ReportMethods methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:52:08'!
reportSenderLeg: aSenderLeg 
	
	balance:= balance -aSenderLeg value.! !
!ReportMethods methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:52:08'!
reportWithdraw: aWithdraw 
	! !

!classRenamed: #ReportMethods as: #ReportMethod stamp: 'Am 6/2/2021 20:52:22'!
Smalltalk renameClassNamed: #ReportMethods as: #ReportMethod!

!classRemoval: #ReportMethod stamp: 'Am 6/2/2021 20:53:02'!
Object subclass: #ReportMethod
	instanceVariableNames: 'balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----SNAPSHOT----(2 June 2021 20:53:09) CuisUniversity-4532.image priorSource: 17208360!

!classDefinition: #ReportMethod category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 20:53:29'!
Object subclass: #ReportMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #MethodTransferNet category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 20:53:29'!
ReportMethod subclass: #MethodTransferNet
	instanceVariableNames: 'balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #MethodTransferNet
	instanceVariableNames: 'balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #MethodTransferNet category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 20:54:19'!
Object subclass: #MethodTransferNet
	instanceVariableNames: 'balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReportMethod stamp: 'Am 6/2/2021 20:54:29'!
Object subclass: #ReportMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #ReportMethod
	instanceVariableNames: 'balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportMethod category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 20:54:47'!
Object subclass: #ReportMethod
	instanceVariableNames: 'balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

ReportMethod class
	instanceVariableNames: ''!

!classDefinition: 'ReportMethod class' category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 20:54:47'!
ReportMethod class
	instanceVariableNames: ''!
!ReportMethod methodsFor: 'initialization' stamp: 'Am 6/2/2021 20:54:47' overrides: 16896425!
initialize
	
	balance:=0.! !
!ReportMethod methodsFor: 'evaluating' stamp: 'Am 6/2/2021 20:54:47'!
finishReport										
	^ balance.! !
!ReportMethod methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:54:47'!
reportDeposit: aDeposit 
	
	! !
!ReportMethod methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:54:47'!
reportRecieverLeg: aRecieverLeg 
	
	balance:= balance+ aRecieverLeg value.! !
!ReportMethod methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:54:48'!
reportSenderLeg: aSenderLeg 
	
	balance:= balance -aSenderLeg value.! !
!ReportMethod methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:54:48'!
reportWithdraw: aWithdraw 
	! !
!ReportMethod methodsFor: 'evaluating' stamp: 'Am 6/2/2021 20:55:09' prior: 50869727!
finishReport										
	self subclassResponsibility .! !
!ReportMethod methodsFor: 'initialization' stamp: 'Am 6/2/2021 20:55:20' prior: 50869723 overrides: 16896425!
initialize
	
	self subclassResponsibility .! !
!ReportMethod methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:55:34' prior: 50869731!
reportDeposit: aDeposit 
	self subclassResponsibility .
	
	! !
!ReportMethod methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:55:38' prior: 50869735!
reportRecieverLeg: aRecieverLeg 
	
	self subclassResponsibility .! !
!ReportMethod methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:55:41' prior: 50869740!
reportSenderLeg: aSenderLeg 
	
	self subclassResponsibility .! !
!ReportMethod methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:55:50' prior: 50869745!
reportWithdraw: aWithdraw 
 		self subclassResponsibility .
	! !

Object subclass: #ReportMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportMethod category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 20:55:58'!
Object subclass: #ReportMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

ReportMethod subclass: #MethodTransferNet
	instanceVariableNames: 'balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #MethodTransferNet category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 20:56:08'!
ReportMethod subclass: #MethodTransferNet
	instanceVariableNames: 'balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

ReportMethod subclass: #MethodAccountSummary
	instanceVariableNames: 'reporte balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #MethodAccountSummary category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 20:56:17'!
ReportMethod subclass: #MethodAccountSummary
	instanceVariableNames: 'reporte balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----SNAPSHOT----(2 June 2021 20:58:00) CuisUniversity-4532.image priorSource: 17216538!

!methodRemoval: ReceptiveAccount #accountSummary stamp: 'Am 6/2/2021 21:00:48'!
accountSummary
	^(MethodAccountSummary transactions: transactions account: self) generate!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 21:09:01'!
test18accountSummaryEmptyPortfolio
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Transfer from: account1 to: account2  withAmount: 200.	
	self assert: ((account2 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Entrada por transferencia de 200').
	self assert: ((account2 generateReport: 		MethodAccountSummary  new) at: 2)  equals: ('Balance = 200').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 21:09:56' prior: 50869827!
test18accountSummaryEmptyPortfolio
	|portfolio|
	portfolio:= ReceptiveAccount new.

	self assert: ((portfolio generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Balance = 0').

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test18accountSummaryEmptyPortfolio stamp: 'Am 6/2/2021 21:10:06'!
PASSED!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 21:10:55' prior: 50869844!
test18accountSummaryEmptyPortfolio
	|portfolio|
	portfolio:= Portfolio new.

	self assert: ((portfolio generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Balance = 0').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 21:11:04' prior: 50869857!
test18accountSummaryEmptyPortfolio
	|portfolio|
	portfolio:= Portfolio new.

	self assert: ((portfolio generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Balance = 0').

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test18accountSummaryEmptyPortfolio stamp: 'Am 6/2/2021 21:11:09'!
ERROR!

!testRun: #Portfolio2Test #test18accountSummaryEmptyPortfolio stamp: 'Am 6/2/2021 21:11:09'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 21:11:28'!
generateReport: aMethodAccountSummary 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 21:12:07' prior: 50869882!
generateReport: aReportMethod 
	aReportMethod finish.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 21:12:27' prior: 50869888!
generateReport: aReportMethod 
	^aReportMethod finish.! !

!testRun: #Portfolio2Test #test18accountSummaryEmptyPortfolio stamp: 'Am 6/2/2021 21:12:28'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 21:13:02' prior: 50869893!
generateReport: aReportMethod 
	^aReportMethod finishReport.! !

!testRun: #Portfolio2Test #test18accountSummaryEmptyPortfolio stamp: 'Am 6/2/2021 21:13:20'!
PASSED!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 21:13:44'!
test18accountSummaryPortfolioWithOneAccount
	|portfolio|
	portfolio:= Portfolio new.

	self assert: ((portfolio generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Balance = 0').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 21:14:37'!
test19accountSummaryPortfolioWithOneAccount
	|portfolio|
	portfolio:= Portfolio new.

	self assert: ((portfolio generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Balance = 0').

	

	
	
	

	
	! !

!methodRemoval: Portfolio2Test #test18accountSummaryPortfolioWithOneAccount stamp: 'Am 6/2/2021 21:14:37'!
test18accountSummaryPortfolioWithOneAccount
	|portfolio|
	portfolio:= Portfolio new.

	self assert: ((portfolio generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Balance = 0').

	

	
	
	

	
	!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 21:15:30' prior: 50869918!
test19accountSummaryPortfolioWithOneAccount
	|portfolio account1|
	portfolio:= Portfolio new.
	
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	Deposit register: 150 on: account1.

	self assert: ((portfolio generateReport: 		MethodAccountSummary  new) = (account1 generateReport: 		MethodAccountSummary  new)) .

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithOneAccount stamp: 'Am 6/2/2021 21:15:38'!
FAILURE!

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithOneAccount stamp: 'Am 6/2/2021 21:15:38'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 21:16:10' prior: 50869901!
generateReport: aReportMethod 

	
	^aReportMethod finishReport.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 21:17:11' prior: 50869959!
generateReport: aReportMethod 

	accounts do:[:anAccount| anAccount reportTo: aReportMethod].
	^aReportMethod finishReport.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 21:18:20' prior: 50869964!
generateReport: aReportMethod 

	accounts do:[:anAccount| ^ anAccount generateReport: aReportMethod].
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 21:18:40' prior: 50869971!
generateReport: aReportMethod 

	accounts do:[:anAccount| anAccount generateReport: aReportMethod].
	^aReportMethod finishReport.! !

!methodRemoval: ReceptiveAccount #transferNet stamp: 'Am 6/2/2021 21:19:29'!
transferNet
			
	^((transactions select: [:aTransaction| aTransaction isKindOf: TransferLeg ])
		inject: 0
		into: [ :currentBalance :aTransfer | aTransfer affectBalance: currentBalance]).
	
	!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Am 6/2/2021 21:19:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Am 6/2/2021 21:19:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Am 6/2/2021 21:19:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Am 6/2/2021 21:19:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Am 6/2/2021 21:19:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Am 6/2/2021 21:19:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Am 6/2/2021 21:19:38'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 21:19:50'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 21:19:50'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 21:19:50'!
PASSED!

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'Am 6/2/2021 21:19:50'!
PASSED!

!testRun: #Portfolio2Test #test05tRecieverLegKnowsSenderLeg stamp: 'Am 6/2/2021 21:19:50'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 21:19:50'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 21:19:50'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 21:19:50'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 21:19:50'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 21:19:50'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 21:19:50'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 21:19:50'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 21:19:50'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 21:19:50'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 21:19:50'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 21:19:50'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 21:19:50'!
PASSED!

!testRun: #Portfolio2Test #test18accountSummaryEmptyPortfolio stamp: 'Am 6/2/2021 21:19:50'!
PASSED!

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithOneAccount stamp: 'Am 6/2/2021 21:19:50'!
FAILURE!

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithOneAccount stamp: 'Am 6/2/2021 21:19:50'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 21:21:17'!
generatePartialReport: aReportGenerator
	transactions do: [:aTransaction| aTransaction reportTo: aReportGenerator].
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 21:21:44' prior: 50869978!
generateReport: aReportMethod 

	accounts do:[:anAccount| anAccount generatePartialReport: aReportMethod].
	^aReportMethod finishReport.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Am 6/2/2021 21:21:46'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Am 6/2/2021 21:21:46'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Am 6/2/2021 21:21:46'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Am 6/2/2021 21:21:46'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Am 6/2/2021 21:21:46'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Am 6/2/2021 21:21:46'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Am 6/2/2021 21:21:46'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Am 6/2/2021 21:21:46'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Am 6/2/2021 21:21:46'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Am 6/2/2021 21:21:46'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Am 6/2/2021 21:21:46'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Am 6/2/2021 21:21:46'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Am 6/2/2021 21:21:46'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Am 6/2/2021 21:21:46'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Am 6/2/2021 21:21:46'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 21:21:59'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 21:21:59'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 21:21:59'!
PASSED!

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'Am 6/2/2021 21:21:59'!
PASSED!

!testRun: #Portfolio2Test #test05tRecieverLegKnowsSenderLeg stamp: 'Am 6/2/2021 21:21:59'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 21:21:59'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 21:21:59'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 21:21:59'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 21:21:59'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 21:21:59'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 21:21:59'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 21:21:59'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 21:21:59'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 21:21:59'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 21:21:59'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 21:21:59'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 21:21:59'!
PASSED!

!testRun: #Portfolio2Test #test18accountSummaryEmptyPortfolio stamp: 'Am 6/2/2021 21:21:59'!
PASSED!

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithOneAccount stamp: 'Am 6/2/2021 21:21:59'!
FAILURE!

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithOneAccount stamp: 'Am 6/2/2021 21:21:59'!
FAILURE!

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithOneAccount stamp: 'Am 6/2/2021 21:22:27'!
FAILURE!

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithOneAccount stamp: 'Am 6/2/2021 21:22:27'!
FAILURE!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 21:23:18' prior: 50869938!
test19accountSummaryPortfolioWithOneAccount
	|portfolio account1|
	portfolio:= Portfolio new.
	
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	Deposit register: 150 on: account1.
	
	

	self assert: ((portfolio generateReport: 		MethodAccountSummary  new) = (account1 generateReport: 		MethodAccountSummary  new)) .

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 21:24:25' prior: 50870229!
test19accountSummaryPortfolioWithOneAccount
	|portfolio account1|
	portfolio:= Portfolio new.
	
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	Deposit register: 150 on: account1.
	
	portfolio add: account1.

	self assert: ((portfolio generateReport: 		MethodAccountSummary  new) = (account1 generateReport: 		MethodAccountSummary  new)) .

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithOneAccount stamp: 'Am 6/2/2021 21:24:30'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 21:24:30'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 21:24:30'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 21:24:30'!
PASSED!

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'Am 6/2/2021 21:24:30'!
PASSED!

!testRun: #Portfolio2Test #test05tRecieverLegKnowsSenderLeg stamp: 'Am 6/2/2021 21:24:30'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 21:24:30'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 21:24:30'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 21:24:30'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 21:24:30'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 21:24:30'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 21:24:30'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 21:24:30'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 21:24:30'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 21:24:30'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 21:24:30'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 21:24:30'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 21:24:30'!
PASSED!

!testRun: #Portfolio2Test #test18accountSummaryEmptyPortfolio stamp: 'Am 6/2/2021 21:24:30'!
PASSED!

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithOneAccount stamp: 'Am 6/2/2021 21:24:30'!
PASSED!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 21:26:13'!
test19accountSummaryPortfolioWithTwoAccount
	|portfolio account1|
	portfolio:= Portfolio new.
	
	account1:= ReceptiveAccount new.
	Deposit register: 150 on: account1.
	
	portfolio add: account1.
	
	account1:= ReceptiveAccount new.
	Withdraw register: 100 on: account1.
	portfolio add: account1.


	self assert: ((portfolio generateReport: 		MethodAccountSummary  new) = (account1 generateReport: 		MethodAccountSummary  new)) .

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 21:28:15' prior: 50870324!
test19accountSummaryPortfolioWithTwoAccount
	|portfolio account1 mensajeEsperado|
	portfolio:= Portfolio new.
	
	account1:= ReceptiveAccount new.
	Deposit register: 150 on: account1.
	
	portfolio add: account1.
	
	account1:= ReceptiveAccount new.
	Withdraw register: 100 on: account1.
	portfolio add: account1.

	mensajeEsperado:= OrderedCollection new.
	mensajeEsperado addLast: 'Deposito por 150'.

	self assert: ((portfolio generateReport: 		MethodAccountSummary  new) = (account1 generateReport: 		MethodAccountSummary  new)) .

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 21:30:07' prior: 50870244!
test19accountSummaryPortfolioWithOneAccount
	|portfolio account1 account2|
	portfolio:= Portfolio new.
	
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Deposit register: 100 on: account1.
	Withdraw register: 150 on: account1.
	Transfer from: account1 to: account2 withAmount: 150.
	Transfer from: account2 to: account1 withAmount: 350.
	
	portfolio add: account1.

	self assert: ((portfolio generateReport: 		MethodAccountSummary  new) = (account1 generateReport: 		MethodAccountSummary  new)) .

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithOneAccount stamp: 'Am 6/2/2021 21:30:12'!
PASSED!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 21:33:37' prior: 50870341!
test19accountSummaryPortfolioWithTwoAccount
	|portfolio account1 account2 mensajeEsperado|
	portfolio:= Portfolio new.
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	Deposit register: 150 on: account1.
	Withdraw register: 100 on: account2.
	Transfer from: account1 to: account2 withAmount: 300.
	

	mensajeEsperado:= OrderedCollection new.
	mensajeEsperado addLast: 'Deposito por 150'.
	mensajeEsperado addLast: 'Extraccion por 100'.
	mensajeEsperado addLast: 'Salida por transferencia de 300'.
	mensajeEsperado addLast: 'Entrada por transferencia de 300'.

	



	self assert: ((portfolio generateReport: 		MethodAccountSummary  new) = (account1 generateReport: 		MethodAccountSummary  new)) .

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 21:34:15' prior: 50870386!
test19accountSummaryPortfolioWithTwoAccount
	|portfolio account1 account2 mensajeEsperado|
	portfolio:= Portfolio new.
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	Deposit register: 150 on: account1.
	Withdraw register: 100 on: account2.
	Transfer from: account1 to: account2 withAmount: 300.
	

	mensajeEsperado:= OrderedCollection new.
	mensajeEsperado addLast: 'Deposito por 150'.
	mensajeEsperado addLast: 'Extraccion por 100'.
	mensajeEsperado addLast: 'Salida por transferencia de 300'.
	mensajeEsperado addLast: 'Entrada por transferencia de 300'.
	mensajeEsperado addLast: 'Balance = 50 '.




	self assert: ((portfolio generateReport: 		MethodAccountSummary  new) = (account1 generateReport: 		MethodAccountSummary  new)) .

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 21:34:17' prior: 50870414!
test19accountSummaryPortfolioWithTwoAccount
	|portfolio account1 account2 mensajeEsperado|
	portfolio:= Portfolio new.
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	Deposit register: 150 on: account1.
	Withdraw register: 100 on: account2.
	Transfer from: account1 to: account2 withAmount: 300.
	

	mensajeEsperado:= OrderedCollection new.
	mensajeEsperado addLast: 'Deposito por 150'.
	mensajeEsperado addLast: 'Extraccion por 100'.
	mensajeEsperado addLast: 'Salida por transferencia de 300'.
	mensajeEsperado addLast: 'Entrada por transferencia de 300'.
	mensajeEsperado addLast: 'Balance = 50'.




	self assert: ((portfolio generateReport: 		MethodAccountSummary  new) = (account1 generateReport: 		MethodAccountSummary  new)) .

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 21:34:30' prior: 50870443!
test19accountSummaryPortfolioWithTwoAccount
	|portfolio account1 account2 mensajeEsperado|
	portfolio:= Portfolio new.
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	Deposit register: 150 on: account1.
	Withdraw register: 100 on: account2.
	Transfer from: account1 to: account2 withAmount: 300.
	

	mensajeEsperado:= OrderedCollection new.
	mensajeEsperado addLast: 'Deposito por 150'.
	mensajeEsperado addLast: 'Extraccion por 100'.
	mensajeEsperado addLast: 'Salida por transferencia de 300'.
	mensajeEsperado addLast: 'Entrada por transferencia de 300'.
	mensajeEsperado addLast: 'Balance = 50'.




	self assert: ((portfolio generateReport: 		MethodAccountSummary  new) = mensajeEsperado) .

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithTwoAccount stamp: 'Am 6/2/2021 21:34:36'!
FAILURE!

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithTwoAccount stamp: 'Am 6/2/2021 21:34:36'!
FAILURE!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 21:35:00'!
test20accountSummaryPortfolioWithTwoAccount
	|portfolio account1 account2 mensajeEsperado|
	portfolio:= Portfolio new.
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	Deposit register: 150 on: account1.
	Withdraw register: 100 on: account2.
	Transfer from: account1 to: account2 withAmount: 300.
	

	mensajeEsperado:= OrderedCollection new.
	mensajeEsperado addLast: 'Deposito por 150'.
	mensajeEsperado addLast: 'Extraccion por 100'.
	mensajeEsperado addLast: 'Salida por transferencia de 300'.
	mensajeEsperado addLast: 'Entrada por transferencia de 300'.
	mensajeEsperado addLast: 'Balance = 50'.




	self assert: ((portfolio generateReport: 		MethodAccountSummary  new) = mensajeEsperado) .

	

	
	
	

	
	! !

!methodRemoval: Portfolio2Test #test19accountSummaryPortfolioWithTwoAccount stamp: 'Am 6/2/2021 21:35:00'!
test19accountSummaryPortfolioWithTwoAccount
	|portfolio account1 account2 mensajeEsperado|
	portfolio:= Portfolio new.
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	Deposit register: 150 on: account1.
	Withdraw register: 100 on: account2.
	Transfer from: account1 to: account2 withAmount: 300.
	

	mensajeEsperado:= OrderedCollection new.
	mensajeEsperado addLast: 'Deposito por 150'.
	mensajeEsperado addLast: 'Extraccion por 100'.
	mensajeEsperado addLast: 'Salida por transferencia de 300'.
	mensajeEsperado addLast: 'Entrada por transferencia de 300'.
	mensajeEsperado addLast: 'Balance = 50'.




	self assert: ((portfolio generateReport: 		MethodAccountSummary  new) = mensajeEsperado) .

	

	
	
	

	
	!

portfolio generateReport: 		MethodAccountSummary  new!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 21:36:31' prior: 50870506!
test20accountSummaryPortfolioWithTwoAccount
	|portfolio account1 account2 mensajeEsperado|
	portfolio:= Portfolio new.
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	Deposit register: 150 on: account1.
	Withdraw register: 100 on: account2.
	Transfer from: account1 to: account2 withAmount: 300.
	

	mensajeEsperado:= OrderedCollection new.
	mensajeEsperado addLast: 'Deposito por 150'.
	mensajeEsperado addLast: 'Salida por transferencia de 300'.
	mensajeEsperado addLast: 'Extraccion por 100'.
	mensajeEsperado addLast: 'Entrada por transferencia de 300'.
	mensajeEsperado addLast: 'Balance = 50'.




	self assert: ((portfolio generateReport: 		MethodAccountSummary  new) = mensajeEsperado) .

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test20accountSummaryPortfolioWithTwoAccount stamp: 'Am 6/2/2021 21:36:36'!
PASSED!

!testRun: #Portfolio2Test #test20accountSummaryPortfolioWithTwoAccount stamp: 'Am 6/2/2021 21:36:38'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 21:36:38'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 21:36:38'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 21:36:38'!
PASSED!

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'Am 6/2/2021 21:36:38'!
PASSED!

!testRun: #Portfolio2Test #test05tRecieverLegKnowsSenderLeg stamp: 'Am 6/2/2021 21:36:38'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 21:36:38'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 21:36:38'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 21:36:38'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 21:36:38'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 21:36:38'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 21:36:38'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 21:36:39'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 21:36:39'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 21:36:39'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 21:36:39'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 21:36:39'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 21:36:39'!
PASSED!

!testRun: #Portfolio2Test #test18accountSummaryEmptyPortfolio stamp: 'Am 6/2/2021 21:36:39'!
PASSED!

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithOneAccount stamp: 'Am 6/2/2021 21:36:39'!
PASSED!

!testRun: #Portfolio2Test #test20accountSummaryPortfolioWithTwoAccount stamp: 'Am 6/2/2021 21:36:39'!
PASSED!

----SNAPSHOT----(2 June 2021 21:36:50) CuisUniversity-4532.image priorSource: 17221377!

----QUIT----(2 June 2021 21:38:07) CuisUniversity-4532.image priorSource: 17248403!

----STARTUP---- (3 June 2021 10:14:51) as /home/sebasbocaccio/Desktop/FACU/Inge1/linux64/CuisUniversity-4532.image!

!Withdraw methodsFor: 'balance' stamp: 'SB 6/3/2021 10:15:34' prior: 50860035 overrides: 50859955!
affectBalance: aBalance
	^aBalance - value! !
!Account methodsFor: 'transactions' stamp: 'SB 6/3/2021 10:15:48' prior: 50859725!
addTransactionsTo: aCollectionOfTransactions
	self subclassResponsibility ! !
!Account methodsFor: 'composition' stamp: 'SB 6/3/2021 10:15:55' prior: 50859734!
addedTo: aPortfolio
	self subclassResponsibility ! !
!RecieverLeg methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 10:20:19' prior: 50868902 overrides: 50868411!
reportTo: aMethodAccountSummary
	aMethodAccountSummary reportRecieverLeg: self.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 10:24:45' prior: 50868325!
madeFrom: senderAccount to: recieverAccount withAmount: anAmount 

	(anAmount <=0) ifTrue:[self error: self class negativeValueTransfer ].
	sender:=SenderLeg forTransfer: self.
	reciever:= RecieverLeg forTransfer: self.
	amount:= anAmount.
	senderAccount registerTransfer: sender.
	recieverAccount registerTransfer: reciever.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 10:25:01'!
assertValidTransfer: anAmount

	^ (anAmount <=0) ifTrue:[self error: self class negativeValueTransfer ]! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 10:25:01' prior: 50870695!
madeFrom: senderAccount to: recieverAccount withAmount: anAmount 

	self assertValidTransfer: anAmount.
	sender:=SenderLeg forTransfer: self.
	reciever:= RecieverLeg forTransfer: self.
	amount:= anAmount.
	senderAccount registerTransfer: sender.
	recieverAccount registerTransfer: reciever.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 10:25:13' prior: 50870715!
madeFrom: senderAccount to: recieverAccount withAmount: anAmount 

	self assertValidTransfer: anAmount.
	
	sender:=SenderLeg forTransfer: self.
	reciever:= RecieverLeg forTransfer: self.
	amount:= anAmount.
	senderAccount registerTransfer: sender.
	recieverAccount registerTransfer: reciever.! !
!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 10:27:18'!
test04transferSenderCannotBeEqualToReceiver
	|account1 account2 transfer senderLeg|
	account1:= ReceptiveAccount new.
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.

	self assert: (senderLeg otherLeg = transfer recieverLeg).

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 10:28:03'!
test03transferSenderCannotBeEqualToReceiver
	|account1 account2 transfer senderLeg|
	account1:= ReceptiveAccount new.
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.

	self assert: (senderLeg otherLeg = transfer recieverLeg).

	
	
	

	
	! !

!methodRemoval: Portfolio2Test #test04transferSenderCannotBeEqualToReceiver stamp: 'SB 6/3/2021 10:28:03'!
test04transferSenderCannotBeEqualToReceiver
	|account1 account2 transfer senderLeg|
	account1:= ReceptiveAccount new.
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.

	self assert: (senderLeg otherLeg = transfer recieverLeg).

	
	
	

	
	!
!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 10:28:13' prior: 50870751!
test03transferSenderCannotBeEqualToReceiver
	|account1 account2 transfer senderLeg|
	account1:= ReceptiveAccount new.
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.

	self assert: (senderLeg otherLeg = transfer recieverLeg).

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 10:29:18' prior: 50870774!
test03transferSenderCannotBeEqualToReceiver
	|account1|
	account1:= ReceptiveAccount new.
	self 
		should: [ Transfer from: account1 to:account1 withAmount: 100. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Transfer sameSenderThanReceiver equals: anError messageText.
			]
	
	! !

!methodRemoval: Portfolio2Test #test03transferDoesntAddTransactions stamp: 'SB 6/3/2021 10:30:05'!
test03transferDoesntAddTransactions
"	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	Transfer from: account1 to:account2 withAmount: 100.
	
	self assert: (account1 transactions = OrderedCollection new).
	self assert: (account2 transactions = OrderedCollection new).

	
	"!

!testRun: #Portfolio2Test #test03transferSenderCannotBeEqualToReceiver stamp: 'SB 6/3/2021 10:30:09'!
FAILURE!

!testRun: #Portfolio2Test #test03transferSenderCannotBeEqualToReceiver stamp: 'SB 6/3/2021 10:30:09'!
FAILURE!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 10:33:54' prior: 50863833!
negativeValueTransfer
	^'Cannot do a negative value transfer'! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'SB 6/3/2021 10:34:14'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'SB 6/3/2021 10:34:14'!
PASSED!

!testRun: #Portfolio2Test #test03transferSenderCannotBeEqualToReceiver stamp: 'SB 6/3/2021 10:34:14'!
FAILURE!

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'SB 6/3/2021 10:34:14'!
PASSED!

!testRun: #Portfolio2Test #test05tRecieverLegKnowsSenderLeg stamp: 'SB 6/3/2021 10:34:14'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'SB 6/3/2021 10:34:14'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'SB 6/3/2021 10:34:14'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'SB 6/3/2021 10:34:14'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'SB 6/3/2021 10:34:14'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'SB 6/3/2021 10:34:14'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'SB 6/3/2021 10:34:14'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'SB 6/3/2021 10:34:14'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'SB 6/3/2021 10:34:14'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'SB 6/3/2021 10:34:14'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'SB 6/3/2021 10:34:14'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'SB 6/3/2021 10:34:14'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'SB 6/3/2021 10:34:14'!
PASSED!

!testRun: #Portfolio2Test #test18accountSummaryEmptyPortfolio stamp: 'SB 6/3/2021 10:34:14'!
PASSED!

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithOneAccount stamp: 'SB 6/3/2021 10:34:14'!
PASSED!

!testRun: #Portfolio2Test #test20accountSummaryPortfolioWithTwoAccount stamp: 'SB 6/3/2021 10:34:14'!
PASSED!

!testRun: #Portfolio2Test #test03transferSenderCannotBeEqualToReceiver stamp: 'SB 6/3/2021 10:34:14'!
FAILURE!
!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 10:34:31' prior: 50870785!
test03transferSenderCannotBeEqualToReceiver
	"|account1|
	account1:= ReceptiveAccount new.
	self 
		should: [ Transfer from: account1 to:account1 withAmount: 100. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Transfer sameSenderThanReceiver equals: anError messageText.
			]
	
	"! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'SB 6/3/2021 10:34:35'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'SB 6/3/2021 10:34:35'!
PASSED!

!testRun: #Portfolio2Test #test03transferSenderCannotBeEqualToReceiver stamp: 'SB 6/3/2021 10:34:35'!
PASSED!

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'SB 6/3/2021 10:34:35'!
PASSED!

!testRun: #Portfolio2Test #test05tRecieverLegKnowsSenderLeg stamp: 'SB 6/3/2021 10:34:35'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'SB 6/3/2021 10:34:35'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'SB 6/3/2021 10:34:35'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'SB 6/3/2021 10:34:35'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'SB 6/3/2021 10:34:35'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'SB 6/3/2021 10:34:35'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'SB 6/3/2021 10:34:35'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'SB 6/3/2021 10:34:35'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'SB 6/3/2021 10:34:35'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'SB 6/3/2021 10:34:35'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'SB 6/3/2021 10:34:35'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'SB 6/3/2021 10:34:35'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'SB 6/3/2021 10:34:35'!
PASSED!

!testRun: #Portfolio2Test #test18accountSummaryEmptyPortfolio stamp: 'SB 6/3/2021 10:34:35'!
PASSED!

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithOneAccount stamp: 'SB 6/3/2021 10:34:35'!
PASSED!

!testRun: #Portfolio2Test #test20accountSummaryPortfolioWithTwoAccount stamp: 'SB 6/3/2021 10:34:35'!
PASSED!
!Transfer methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 10:36:16'!
WithSender: aSender assertValidTransfer: anAmount

	^ (anAmount <=0) ifTrue:[self error: self class negativeValueTransfer ]! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 10:36:16' prior: 50870728!
madeFrom: senderAccount to: recieverAccount withAmount: anAmount 

	self WithSender: sender assertValidTransfer: anAmount.
	
	sender:=SenderLeg forTransfer: self.
	reciever:= RecieverLeg forTransfer: self.
	amount:= anAmount.
	senderAccount registerTransfer: sender.
	recieverAccount registerTransfer: reciever.! !

!methodRemoval: Transfer #assertValidTransfer: stamp: 'SB 6/3/2021 10:36:16'!
assertValidTransfer: anAmount

	^ (anAmount <=0) ifTrue:[self error: self class negativeValueTransfer ]!
!Transfer methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 10:36:48'!
assertValidTransferWithSender: aSender aReceiver: aReceiver andAmount: anAmount

	^ (anAmount <=0) ifTrue:[self error: self class negativeValueTransfer ]! !

!methodRemoval: Transfer #WithSender:assertValidTransfer: stamp: 'SB 6/3/2021 10:37:02'!
WithSender: aSender assertValidTransfer: anAmount

	^ (anAmount <=0) ifTrue:[self error: self class negativeValueTransfer ]!
!Transfer methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 10:38:33' prior: 50870978!
madeFrom: aSenderAccount to: aRecieverAccount withAmount: anAmount 

	self assertValidTransferWithSender: aSenderAccount aReceiver: aRecieverAccount andAmount: anAmount.
	
	sender:=SenderLeg forTransfer: self.
	reciever:= RecieverLeg forTransfer: self.
	amount:= anAmount.
	aSenderAccount registerTransfer: sender.
	aRecieverAccount registerTransfer: reciever.! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'SB 6/3/2021 10:38:51'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'SB 6/3/2021 10:38:51'!
PASSED!

!testRun: #Portfolio2Test #test03transferSenderCannotBeEqualToReceiver stamp: 'SB 6/3/2021 10:38:51'!
PASSED!

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'SB 6/3/2021 10:38:51'!
PASSED!

!testRun: #Portfolio2Test #test05tRecieverLegKnowsSenderLeg stamp: 'SB 6/3/2021 10:38:51'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'SB 6/3/2021 10:38:51'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'SB 6/3/2021 10:38:51'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'SB 6/3/2021 10:38:51'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'SB 6/3/2021 10:38:51'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'SB 6/3/2021 10:38:51'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'SB 6/3/2021 10:38:51'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'SB 6/3/2021 10:38:51'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'SB 6/3/2021 10:38:51'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'SB 6/3/2021 10:38:51'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'SB 6/3/2021 10:38:51'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'SB 6/3/2021 10:38:51'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'SB 6/3/2021 10:38:51'!
PASSED!

!testRun: #Portfolio2Test #test18accountSummaryEmptyPortfolio stamp: 'SB 6/3/2021 10:38:51'!
PASSED!

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithOneAccount stamp: 'SB 6/3/2021 10:38:51'!
PASSED!

!testRun: #Portfolio2Test #test20accountSummaryPortfolioWithTwoAccount stamp: 'SB 6/3/2021 10:38:51'!
PASSED!
!Transfer methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 10:39:18' prior: 50870996!
assertValidTransferWithSender: aSender aReceiver: aReceiver andAmount: anAmount

	anAmount <=0 ifTrue:[self error: self class negativeValueTransfer ]
! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #Portfolio2Test #test03transferSenderCannotBeEqualToReceiver stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #Portfolio2Test #test05tRecieverLegKnowsSenderLeg stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #Portfolio2Test #test18accountSummaryEmptyPortfolio stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithOneAccount stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #Portfolio2Test #test20accountSummaryPortfolioWithTwoAccount stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SB 6/3/2021 10:39:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SB 6/3/2021 10:39:21'!
PASSED!
!Transfer methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 10:39:50' prior: 50871091!
assertValidTransferWithSender: aSender aReceiver: aReceiver andAmount: anAmount

	anAmount <=0 ifTrue:[self error: self class negativeValueTransfer ].
	aSender = aReceiver ifTrue:[self error: self class ]
! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 10:40:29'!
sameLegsTransfer
	^ 'Sender leg cannot be the same as the receiver leg'! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 10:40:46' prior: 50871247!
assertValidTransferWithSender: aSender aReceiver: aReceiver andAmount: anAmount

	anAmount <=0 ifTrue:[self error: self class negativeValueTransfer ].
	aSender = aReceiver ifTrue:[self error: self class sameLegsTransfer ]
! !
!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 10:41:06' prior: 50870893!
test03transferSenderCannotBeEqualToReceiver
	|account1|
	account1:= ReceptiveAccount new.
	self 
		should: [ Transfer from: account1 to:account1 withAmount: 100. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Transfer sameLegsTransfer equals: anError messageText.
			]
	
	! !

!testRun: #Portfolio2Test #test03transferSenderCannotBeEqualToReceiver stamp: 'SB 6/3/2021 10:41:13'!
PASSED!
!Behavior method!
initialize
	[ super initialize ] valueCoveringAll:
		{20 to: 29}.
	(transactions _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (33 to: 44)
		declaredAt: (33 to: 44).
	(transfers _ [
	(OrderedCollection
		cover: (86 to: 102)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (73 to: 81)
		declaredAt: (73 to: 81).! !
!Behavior method!
from: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount
	| aTransfer |
	(aTransfer _ [
	(Transfer
		cover: (95 to: 102)
		declaredAt: (95 to: 102)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (84 to: 92)
		declaredAt: (72 to: 80).
	[
	(aTransfer
		cover: (110 to: 118)
		declaredAt: (72 to: 80))
		madeFrom:
			(aReceptiveAccount
				cover: (130 to: 146)
				declaredAt: (7 to: 23))
		to:
			(aReceptiveAccount2
				cover: (152 to: 169)
				declaredAt: (29 to: 46))
		withAmount:
			(anAmount
				cover: (184 to: 191)
				declaredAt: (60 to: 67)) ] valueCoveringAll:
		{120 to: 128. 148 to: 150. 172 to: 182}.
	^ aTransfer
		cover: (196 to: 204)
		declaredAt: (72 to: 80).! !
!Behavior method!
madeFrom: aSenderAccount to: aRecieverAccount withAmount: anAmount
	[
	(self coverAll:
		{71 to: 74})
		assertValidTransferWithSender:
			(aSenderAccount
				cover: (107 to: 120)
				declaredAt: (11 to: 24))
		aReceiver:
			(aRecieverAccount
				cover: (133 to: 148)
				declaredAt: (30 to: 45))
		andAmount:
			(anAmount
				cover: (161 to: 168)
				declaredAt: (59 to: 66)) ] valueCoveringAll:
		{76 to: 105. 122 to: 131. 150 to: 159}.
	(sender _ [
	(SenderLeg
		cover: (182 to: 190)
		declaredAt: (182 to: 190)) forTransfer:
		(self coverAll:
			{205 to: 208}) ] valueCoveringAll:
		{192 to: 203})
		cover: (174 to: 179)
		declaredAt: (174 to: 179).
	(reciever _ [
	(RecieverLeg
		cover: (223 to: 233)
		declaredAt: (223 to: 233)) forTransfer:
		(self coverAll:
			{248 to: 251}) ] valueCoveringAll:
		{235 to: 246})
		cover: (212 to: 219)
		declaredAt: (212 to: 219).
	(amount _ anAmount
		cover: (264 to: 271)
		declaredAt: (59 to: 66))
		cover: (255 to: 260)
		declaredAt: (255 to: 260).
	[
	(aSenderAccount
		cover: (275 to: 288)
		declaredAt: (11 to: 24)) registerTransfer:
		(sender
			cover: (308 to: 313)
			declaredAt: (174 to: 179)) ] valueCoveringAll:
		{290 to: 306}.
	[
	(aRecieverAccount
		cover: (317 to: 332)
		declaredAt: (30 to: 45)) registerTransfer:
		(reciever
			cover: (352 to: 359)
			declaredAt: (212 to: 219)) ] valueCoveringAll:
		{334 to: 350}.! !
!Behavior method!
assertValidTransferWithSender: aSender aReceiver: aReceiver andAmount: anAmount
	[
	([
	(anAmount
		cover: (83 to: 90)
		declaredAt: (72 to: 79)) <=
		(0 coverAll:
			{94 to: 94}) ] valueCoveringAll:
		{92 to: 93}) ifTrue: [
		[
		(self coverAll:
			{104 to: 107}) error:
			([
			([
			(self coverAll:
				{116 to: 119}) class ] valueCoveringAll:
				{121 to: 125}) negativeValueTransfer ] valueCoveringAll:
				{127 to: 147}) ] valueCoveringAll:
			{109 to: 114} ]] valueCoveringAll:
		{96 to: 102}.
	[
	([
	(aSender
		cover: (153 to: 159)
		declaredAt: (32 to: 38)) =
		(aReceiver
			cover: (163 to: 171)
			declaredAt: (51 to: 59)) ] valueCoveringAll:
		{161 to: 161}) ifTrue: [
		[
		(self coverAll:
			{181 to: 184}) error:
			([
			([
			(self coverAll:
				{193 to: 196}) class ] valueCoveringAll:
				{198 to: 202}) sameLegsTransfer ] valueCoveringAll:
				{204 to: 219}) ] valueCoveringAll:
			{186 to: 191} ]] valueCoveringAll:
		{173 to: 179}.! !
!Behavior method!
forTransfer: aTransfer
	^ [
	([
	(self coverAll:
		{27 to: 30}) new ] valueCoveringAll:
		{32 to: 34}) initializeFor:
		(aTransfer
			cover: (51 to: 59)
			declaredAt: (14 to: 22)) ] valueCoveringAll:
		{36 to: 49}.! !
!Behavior method!
initializeFor: aTransfer
	(transfer _ aTransfer
		cover: (39 to: 47)
		declaredAt: (16 to: 24))
		cover: (27 to: 34)
		declaredAt: (27 to: 34).! !
!Behavior method!
registerTransfer: aTransfer
	[
	(transactions
		cover: (31 to: 42)
		declaredAt: (31 to: 42)) add:
		(aTransfer
			cover: (49 to: 57)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{44 to: 47}.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (14 to: 25)
		declaredAt: (14 to: 25))
		inject:
			(0 coverAll:
				{38 to: 38})
		into: [ :currentBalance :transaction |
			[
			(transaction
				cover: (81 to: 91)
				declaredAt: (67 to: 77)) affectBalance:
				(currentBalance
					cover: (108 to: 121)
					declaredAt: (51 to: 64)) ] valueCoveringAll:
				{93 to: 106} ]] valueCoveringAll:
		{30 to: 36. 42 to: 46}.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		([
		(transfer
			cover: (39 to: 46)
			declaredAt: (39 to: 46)) value ] valueCoveringAll:
			{48 to: 52}) ] valueCoveringAll:
		{37 to: 37}.! !
!Behavior method!
value
	^ amount
		cover: (9 to: 14)
		declaredAt: (9 to: 14).! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'SB 6/3/2021 10:42:18'!
PASSED!
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		([
		(transfer
			cover: (39 to: 46)
			declaredAt: (39 to: 46)) value ] valueCoveringAll:
			{48 to: 52}) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'SB 6/3/2021 10:42:18'!
PASSED!
!Behavior method!
sameLegsTransfer
	^ 'Sender leg cannot be the same as the receiver leg' coverAll:
		{21 to: 71}.! !

!testRun: #Portfolio2Test #test03transferSenderCannotBeEqualToReceiver stamp: 'SB 6/3/2021 10:42:18'!
PASSED!
!Behavior method!
senderLeg
	^ sender
		cover: (13 to: 18)
		declaredAt: (13 to: 18).! !
!Behavior method!
otherLeg
	^ [
	(transfer
		cover: (13 to: 20)
		declaredAt: (13 to: 20)) recieverLeg ] valueCoveringAll:
		{22 to: 32}.! !
!Behavior method!
recieverLeg
	^ reciever
		cover: (15 to: 22)
		declaredAt: (15 to: 22).! !

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'SB 6/3/2021 10:42:18'!
PASSED!
!Behavior method!
otherLeg
	^ [
	(transfer
		cover: (12 to: 19)
		declaredAt: (12 to: 19)) senderLeg ] valueCoveringAll:
		{22 to: 30}.! !

!testRun: #Portfolio2Test #test05tRecieverLegKnowsSenderLeg stamp: 'SB 6/3/2021 10:42:18'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'SB 6/3/2021 10:42:18'!
PASSED!
!Behavior method!
negativeValueTransfer
	^ 'Cannot do a negative value transfer' coverAll:
		{25 to: 61}.! !

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'SB 6/3/2021 10:42:18'!
PASSED!
!Behavior method!
initialize
	(reporte _ [
	(OrderedCollection
		cover: (23 to: 39)
		declaredAt: (23 to: 39)) new ] valueCoveringAll:
		{41 to: 43})
		cover: (13 to: 19)
		declaredAt: (13 to: 19).
	(balance _ 0 coverAll:
		{56 to: 56})
		cover: (47 to: 53)
		declaredAt: (47 to: 53).! !
!Behavior method!
generateReport: aReportGenerator
	[
	(transactions
		cover: (35 to: 46)
		declaredAt: (35 to: 46)) do: [ :aTransaction |
		[
		(aTransaction
			cover: (68 to: 79)
			declaredAt: (54 to: 65)) reportTo:
			(aReportGenerator
				cover: (91 to: 106)
				declaredAt: (17 to: 32)) ] valueCoveringAll:
			{81 to: 89} ]] valueCoveringAll:
		{48 to: 50}.
	^ [
	(aReportGenerator
		cover: (112 to: 127)
		declaredAt: (17 to: 32)) finishReport ] valueCoveringAll:
		{129 to: 140}.! !
!Behavior method!
finishReport
	[
	(reporte
		cover: (25 to: 31)
		declaredAt: (25 to: 31)) addLast:
		([
		('Balance = ' coverAll:
			{43 to: 54}) ,
			([
			(balance
				cover: (57 to: 63)
				declaredAt: (57 to: 63)) asString ] valueCoveringAll:
				{65 to: 72}) ] valueCoveringAll:
			{55 to: 55}) ] valueCoveringAll:
		{33 to: 40}.
	^ reporte
		cover: (79 to: 85)
		declaredAt: (25 to: 31).! !

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'SB 6/3/2021 10:42:18'!
PASSED!
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
reportTo: aMethodAccountSummary
	[
	(aMethodAccountSummary
		cover: (34 to: 54)
		declaredAt: (11 to: 31)) reportDeposit:
		(self coverAll:
			{71 to: 74}) ] valueCoveringAll:
		{56 to: 69}.! !
!Behavior method!
reportDeposit: aDeposit
	[
	(reporte
		cover: (27 to: 33)
		declaredAt: (27 to: 33)) add:
		([
		('Deposito por ' coverAll:
			{41 to: 55}) ,
			([
			([
			(aDeposit
				cover: (58 to: 65)
				declaredAt: (16 to: 23)) value ] valueCoveringAll:
				{67 to: 71}) asString ] valueCoveringAll:
				{73 to: 80}) ] valueCoveringAll:
			{56 to: 56}) ] valueCoveringAll:
		{35 to: 38}.
	(balance _ [
	(balance
		cover: (85 to: 91)
		declaredAt: (85 to: 91)) +
		([
		(aDeposit
			cover: (103 to: 110)
			declaredAt: (16 to: 23)) value ] valueCoveringAll:
			{112 to: 116}) ] valueCoveringAll:
		{102 to: 102})
		cover: (95 to: 101)
		declaredAt: (85 to: 91).! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'SB 6/3/2021 10:42:18'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'SB 6/3/2021 10:42:18'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
reportTo: aMethodAccountSummary
	[
	(aMethodAccountSummary
		cover: (34 to: 54)
		declaredAt: (11 to: 31)) reportWithdraw:
		(self coverAll:
			{72 to: 75}) ] valueCoveringAll:
		{56 to: 70}.! !
!Behavior method!
reportWithdraw: aWithdraw
	[
	(reporte
		cover: (29 to: 35)
		declaredAt: (29 to: 35)) add:
		([
		('Extraccion por ' coverAll:
			{43 to: 59}) ,
			([
			([
			(aWithdraw
				cover: (62 to: 70)
				declaredAt: (17 to: 25)) value ] valueCoveringAll:
				{72 to: 76}) asString ] valueCoveringAll:
				{78 to: 85}) ] valueCoveringAll:
			{60 to: 60}) ] valueCoveringAll:
		{37 to: 40}.
	(balance _ [
	(balance
		cover: (90 to: 96)
		declaredAt: (90 to: 96)) -
		([
		(aWithdraw
			cover: (110 to: 118)
			declaredAt: (17 to: 25)) value ] valueCoveringAll:
			{120 to: 124}) ] valueCoveringAll:
		{108 to: 108})
		cover: (100 to: 106)
		declaredAt: (90 to: 96).! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'SB 6/3/2021 10:42:18'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'SB 6/3/2021 10:42:18'!
PASSED!
!Behavior method!
reportTo: aMethodAccountSummary
	[
	(aMethodAccountSummary
		cover: (36 to: 56)
		declaredAt: (11 to: 31)) reportSenderLeg:
		(self coverAll:
			{75 to: 78}) ] valueCoveringAll:
		{58 to: 73}.! !
!Behavior method!
reportSenderLeg: aSenderLeg
	[
	(reporte
		cover: (31 to: 37)
		declaredAt: (31 to: 37)) add:
		([
		('Salida por transferencia de ' coverAll:
			{45 to: 74}) ,
			([
			([
			(aSenderLeg
				cover: (77 to: 86)
				declaredAt: (18 to: 27)) value ] valueCoveringAll:
				{88 to: 92}) asString ] valueCoveringAll:
				{94 to: 101}) ] valueCoveringAll:
			{75 to: 75}) ] valueCoveringAll:
		{39 to: 42}.
	(balance _ [
	(balance
		cover: (106 to: 112)
		declaredAt: (106 to: 112)) -
		([
		(aSenderLeg
			cover: (125 to: 134)
			declaredAt: (18 to: 27)) value ] valueCoveringAll:
			{136 to: 140}) ] valueCoveringAll:
		{124 to: 124})
		cover: (116 to: 122)
		declaredAt: (106 to: 112).! !
!Behavior method!
value
	^ [
	(transfer
		cover: (9 to: 16)
		declaredAt: (9 to: 16)) value ] valueCoveringAll:
		{18 to: 22}.! !

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'SB 6/3/2021 10:42:18'!
PASSED!
!Behavior method!
reportTo: aMethodAccountSummary
	[
	(aMethodAccountSummary
		cover: (34 to: 54)
		declaredAt: (11 to: 31)) reportRecieverLeg:
		(self coverAll:
			{75 to: 78}) ] valueCoveringAll:
		{56 to: 73}.! !
!Behavior method!
reportRecieverLeg: aRecieverLeg
	[
	(reporte
		cover: (35 to: 41)
		declaredAt: (35 to: 41)) add:
		([
		('Entrada por transferencia de ' coverAll:
			{49 to: 79}) ,
			([
			([
			(aRecieverLeg
				cover: (82 to: 93)
				declaredAt: (20 to: 31)) value ] valueCoveringAll:
				{95 to: 99}) asString ] valueCoveringAll:
				{101 to: 108}) ] valueCoveringAll:
			{80 to: 80}) ] valueCoveringAll:
		{43 to: 46}.
	(balance _ [
	(balance
		cover: (113 to: 119)
		declaredAt: (113 to: 119)) +
		([
		(aRecieverLeg
			cover: (132 to: 143)
			declaredAt: (20 to: 31)) value ] valueCoveringAll:
			{145 to: 149}) ] valueCoveringAll:
		{130 to: 130})
		cover: (123 to: 129)
		declaredAt: (113 to: 119).! !
!Behavior method!
value
	^ [
	(transfer
		cover: (9 to: 16)
		declaredAt: (9 to: 16)) value ] valueCoveringAll:
		{18 to: 22}.! !

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'SB 6/3/2021 10:42:18'!
PASSED!
!Behavior method!
initialize
	(balance _ 0 coverAll:
		{24 to: 24})
		cover: (15 to: 21)
		declaredAt: (15 to: 21).! !
!Behavior method!
finishReport
	^ balance
		cover: (27 to: 33)
		declaredAt: (27 to: 33).! !

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'SB 6/3/2021 10:42:18'!
PASSED!
!Behavior method!
reportRecieverLeg: aRecieverLeg
	(balance _ [
	(balance
		cover: (37 to: 43)
		declaredAt: (37 to: 43)) +
		([
		(aRecieverLeg
			cover: (56 to: 67)
			declaredAt: (20 to: 31)) value ] valueCoveringAll:
			{69 to: 73}) ] valueCoveringAll:
		{54 to: 54})
		cover: (47 to: 53)
		declaredAt: (37 to: 43).! !

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'SB 6/3/2021 10:42:18'!
PASSED!
!Behavior method!
reportSenderLeg: aSenderLeg
	(balance _ [
	(balance
		cover: (33 to: 39)
		declaredAt: (33 to: 39)) -
		([
		(aSenderLeg
			cover: (52 to: 61)
			declaredAt: (18 to: 27)) value ] valueCoveringAll:
			{63 to: 67}) ] valueCoveringAll:
		{51 to: 51})
		cover: (43 to: 49)
		declaredAt: (33 to: 39).! !

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'SB 6/3/2021 10:42:18'!
PASSED!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (26 to: 42)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (61 to: 77)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{79 to: 81})
		cover: (50 to: 56)
		declaredAt: (50 to: 56).! !
!Behavior method!
generateReport: aReportMethod
	[
	(accounts
		cover: (34 to: 41)
		declaredAt: (34 to: 41)) do: [ :anAccount |
		[
		(anAccount
			cover: (59 to: 67)
			declaredAt: (48 to: 56)) generatePartialReport:
			(aReportMethod
				cover: (92 to: 104)
				declaredAt: (17 to: 29)) ] valueCoveringAll:
			{69 to: 90} ]] valueCoveringAll:
		{43 to: 45}.
	^ [
	(aReportMethod
		cover: (110 to: 122)
		declaredAt: (17 to: 29)) finishReport ] valueCoveringAll:
		{124 to: 135}.! !

!testRun: #Portfolio2Test #test18accountSummaryEmptyPortfolio stamp: 'SB 6/3/2021 10:42:18'!
PASSED!
!Behavior method!
add: accountToAdd
	[
	(self coverAll:
		{21 to: 24}) assertCanAdd:
		(accountToAdd
			cover: (40 to: 51)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{26 to: 38}.
	[
	(accounts
		cover: (58 to: 65)
		declaredAt: (58 to: 65)) add:
		(accountToAdd
			cover: (72 to: 83)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{67 to: 70}.
	[
	(accountToAdd
		cover: (87 to: 98)
		declaredAt: (6 to: 17)) addedTo:
		(self coverAll:
			{109 to: 112}) ] valueCoveringAll:
		{100 to: 107}.! !
!Behavior method!
assertCanAdd: accountToAdd
	[
	([
	(self coverAll:
		{31 to: 34}) anyRootParentIsComposedBy:
		(accountToAdd
			cover: (63 to: 74)
			declaredAt: (15 to: 26)) ] valueCoveringAll:
		{36 to: 61}) ifTrue: [
		[
		(self coverAll:
			{87 to: 90}) signalCanNotAddAccount ] valueCoveringAll:
			{92 to: 113} ]] valueCoveringAll:
		{77 to: 83}.! !
!Behavior method!
anyRootParentIsComposedBy: accountToAdd
	^ [
	([
	(self coverAll:
		{44 to: 47}) rootParents ] valueCoveringAll:
		{49 to: 59}) anySatisfy: [ :aParent |
		[
		(aParent
			cover: (86 to: 92)
			declaredAt: (76 to: 82)) isComposedBy:
			(accountToAdd
				cover: (108 to: 119)
				declaredAt: (28 to: 39)) ] valueCoveringAll:
			{94 to: 106} ]] valueCoveringAll:
		{61 to: 71}.! !
!Behavior method!
rootParents
	| rootParents |
	(rootParents _ [
	(Set
		cover: (50 to: 52)
		declaredAt: (50 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(self coverAll:
		{60 to: 63}) addRootParentsTo:
		(rootParents
			cover: (83 to: 93)
			declaredAt: (18 to: 28)) ] valueCoveringAll:
		{65 to: 81}.
	^ rootParents
		cover: (101 to: 111)
		declaredAt: (18 to: 28).! !
!Behavior method!
addRootParentsTo: rootParents
	[
	(parents
		cover: (33 to: 39)
		declaredAt: (33 to: 39))
		ifEmpty: [
			[
			(rootParents
				cover: (55 to: 65)
				declaredAt: (19 to: 29)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (96 to: 102)
				declaredAt: (33 to: 39)) do: [ :aParent |
				[
				(aParent
					cover: (121 to: 127)
					declaredAt: (111 to: 117)) addRootParentsTo:
					(rootParents
						cover: (147 to: 157)
						declaredAt: (19 to: 29)) ] valueCoveringAll:
					{129 to: 145} ]] valueCoveringAll:
				{104 to: 106} ]] valueCoveringAll:
		{44 to: 51. 82 to: 92}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	([
	(self coverAll:
		{29 to: 32}) =
		(anAccount
			cover: (36 to: 44)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 34}) or: [
		[
		(accounts
			cover: (52 to: 59)
			declaredAt: (52 to: 59)) anySatisfy: [ :composedAccount |
			[
			([
			(composedAccount
				cover: (95 to: 109)
				declaredAt: (76 to: 90)) isComposedBy:
				(anAccount
					cover: (125 to: 133)
					declaredAt: (15 to: 23)) ] valueCoveringAll:
				{111 to: 123}) or: [
				[
				(anAccount
					cover: (142 to: 150)
					declaredAt: (15 to: 23)) isComposedBy:
					(composedAccount
						cover: (166 to: 180)
						declaredAt: (76 to: 90)) ] valueCoveringAll:
					{152 to: 164} ]] valueCoveringAll:
				{136 to: 138} ]] valueCoveringAll:
			{61 to: 71} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
addedTo: aPortfolio
	^ self.! !
!Behavior method!
generatePartialReport: aReportGenerator
	[
	(transactions
		cover: (42 to: 53)
		declaredAt: (42 to: 53)) do: [ :aTransaction |
		[
		(aTransaction
			cover: (75 to: 86)
			declaredAt: (61 to: 72)) reportTo:
			(aReportGenerator
				cover: (98 to: 113)
				declaredAt: (24 to: 39)) ] valueCoveringAll:
			{88 to: 96} ]] valueCoveringAll:
		{55 to: 57}.! !

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithOneAccount stamp: 'SB 6/3/2021 10:42:18'!
PASSED!
!Behavior method!
isComposedBy: anAccount
	^ [
	(self coverAll:
		{28 to: 31}) =
		(anAccount
			cover: (35 to: 43)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{33 to: 33}.! !

!testRun: #Portfolio2Test #test20accountSummaryPortfolioWithTwoAccount stamp: 'SB 6/3/2021 10:42:18'!
PASSED!
!Behavior method!
balance
	^ [
	(accounts
		cover: (13 to: 20)
		declaredAt: (13 to: 20))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (42 to: 50)
				declaredAt: (30 to: 38)) balance ] valueCoveringAll:
				{52 to: 58} ]
		ifEmpty: [
			0 coverAll:
				{73 to: 73} ]] valueCoveringAll:
		{22 to: 25. 62 to: 69}.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'SB 6/3/2021 10:42:18'!
PASSED!
!Behavior method!
with: anAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}.
	[ cascadeReceiver add: anAccount ] valueCoveringAll:
		{32 to: 45}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{50 to: 57} ] value.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'SB 6/3/2021 10:42:18'!
PASSED!
!Behavior method!
with: anAccount with: anotherAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{41 to: 44}) new ] valueCoveringAll:
		{46 to: 48}.
	[ cascadeReceiver add: anAccount ] valueCoveringAll:
		{53 to: 66}.
	[ cascadeReceiver add: anotherAccount ] valueCoveringAll:
		{71 to: 89}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{94 to: 101} ] value.! !
!Behavior method!
addedTo: aPortfolio
	[
	(parents
		cover: (25 to: 31)
		declaredAt: (25 to: 31)) add:
		(aPortfolio
			cover: (38 to: 47)
			declaredAt: (10 to: 19)) ] valueCoveringAll:
		{33 to: 36}.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (27 to: 34)
		declaredAt: (16 to: 23)) -
		(value
			cover: (38 to: 42)
			declaredAt: (38 to: 42)) ] valueCoveringAll:
		{36 to: 36}.! !

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'SB 6/3/2021 10:42:18'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) anySatisfy: [ :anAccount |
		[
		(anAccount
			cover: (68 to: 76)
			declaredAt: (56 to: 64)) hasRegistered:
			(aTransaction
				cover: (93 to: 104)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{78 to: 91} ]] valueCoveringAll:
		{41 to: 51}.! !

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'SB 6/3/2021 10:42:18'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'SB 6/3/2021 10:42:18'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'SB 6/3/2021 10:42:18'!
PASSED!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (53 to: 69)
		declaredAt: (53 to: 69)) new ] valueCoveringAll:
		{71 to: 73})
		cover: (37 to: 48)
		declaredAt: (19 to: 30).
	[
	(accounts
		cover: (77 to: 84)
		declaredAt: (77 to: 84)) do: [ :anAccount |
		[
		(anAccount
			cover: (105 to: 113)
			declaredAt: (93 to: 101)) addTransactionsTo:
			(transactions
				cover: (134 to: 145)
				declaredAt: (19 to: 30)) ] valueCoveringAll:
			{115 to: 132} ]] valueCoveringAll:
		{86 to: 88}.
	^ transactions
		cover: (154 to: 165)
		declaredAt: (19 to: 30).! !

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'SB 6/3/2021 10:42:18'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(aCollectionOfTransactions
		cover: (48 to: 72)
		declaredAt: (20 to: 44)) addAll:
		(transactions
			cover: (82 to: 93)
			declaredAt: (82 to: 93)) ] valueCoveringAll:
		{74 to: 80}.! !

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'SB 6/3/2021 10:42:18'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(accounts
		cover: (48 to: 55)
		declaredAt: (48 to: 55)) do: [ :anAccount |
		[
		(anAccount
			cover: (76 to: 84)
			declaredAt: (64 to: 72)) addTransactionsTo:
			(aCollectionOfTransactions
				cover: (105 to: 129)
				declaredAt: (20 to: 44)) ] valueCoveringAll:
			{86 to: 103} ]] valueCoveringAll:
		{57 to: 59}.! !

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'SB 6/3/2021 10:42:18'!
PASSED!
!Behavior method!
signalCanNotAddAccount
	[
	(self coverAll:
		{27 to: 30}) error:
		([
		([
		(self coverAll:
			{39 to: 42}) class ] valueCoveringAll:
			{44 to: 48}) canNotAddAccountErrorMessage ] valueCoveringAll:
			{50 to: 77}) ] valueCoveringAll:
		{32 to: 37}.! !
!Behavior method!
canNotAddAccountErrorMessage
	^ 'Can not add repeated account to a portfolio' coverAll:
		{34 to: 78}.! !
!Behavior method!
accountsSize
	^ [
	(accounts
		cover: (18 to: 25)
		declaredAt: (18 to: 25)) size ] valueCoveringAll:
		{27 to: 30}.! !
!Behavior method!
accountsIncludes: anAccount
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) includes:
		(anAccount
			cover: (51 to: 59)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{41 to: 49}.! !

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'SB 6/3/2021 10:42:18'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'SB 6/3/2021 10:42:18'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'SB 6/3/2021 10:42:18'!
PASSED!
!Behavior method!
accountsIsEmpty
	^ [
	(accounts
		cover: (21 to: 28)
		declaredAt: (21 to: 28)) isEmpty ] valueCoveringAll:
		{30 to: 36}.! !

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'SB 6/3/2021 10:42:18'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'SB 6/3/2021 10:42:18'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'SB 6/3/2021 10:42:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SB 6/3/2021 10:42:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SB 6/3/2021 10:42:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SB 6/3/2021 10:42:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SB 6/3/2021 10:42:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SB 6/3/2021 10:42:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SB 6/3/2021 10:42:18'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SB 6/3/2021 10:42:18'!
PASSED!
!Transfer methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 10:46:06' prior: 50871011!
madeFrom: aSenderAccount to: aRecieverAccount withAmount: anAmount 

	self assertValidTransferWithSender: aSenderAccount aReceiver: aRecieverAccount andAmount: anAmount.
	
	amount:= anAmount.
	
	sender:=SenderLeg forTransfer: self.
	reciever:= RecieverLeg forTransfer: self.
	aSenderAccount registerTransfer: sender.
	aRecieverAccount registerTransfer: reciever.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 10:47:10'!
setTransferLegsUsingSenderLeg: aRecieverAccount andReceiverLeg: aSenderAccount

	sender:=SenderLeg forTransfer: self.
	reciever:= RecieverLeg forTransfer: self.
	aSenderAccount registerTransfer: sender.
	aRecieverAccount registerTransfer: reciever! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 10:47:10' prior: 50872176!
madeFrom: aSenderAccount to: aRecieverAccount withAmount: anAmount 

	self assertValidTransferWithSender: aSenderAccount aReceiver: aRecieverAccount andAmount: anAmount.
	
	amount:= anAmount.
	
	self setTransferLegsUsingSenderLeg: aRecieverAccount andReceiverLeg: aSenderAccount.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 10:47:42' prior: 50872201!
madeFrom: aSenderAccount to: aRecieverAccount withAmount: anAmount 

	self assertValidTransferWithSender: aSenderAccount aReceiver: aRecieverAccount andAmount: anAmount.
	
	self setTransferLegsUsingSenderLeg: aRecieverAccount andReceiverLeg: aSenderAccount.
	amount:= anAmount.! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'SB 6/3/2021 10:47:53'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'SB 6/3/2021 10:47:53'!
PASSED!

!testRun: #Portfolio2Test #test03transferSenderCannotBeEqualToReceiver stamp: 'SB 6/3/2021 10:47:53'!
PASSED!

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'SB 6/3/2021 10:47:53'!
PASSED!

!testRun: #Portfolio2Test #test05tRecieverLegKnowsSenderLeg stamp: 'SB 6/3/2021 10:47:53'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'SB 6/3/2021 10:47:53'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'SB 6/3/2021 10:47:53'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'SB 6/3/2021 10:47:53'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'SB 6/3/2021 10:47:53'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'SB 6/3/2021 10:47:53'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'SB 6/3/2021 10:47:53'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'SB 6/3/2021 10:47:53'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'SB 6/3/2021 10:47:53'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'SB 6/3/2021 10:47:53'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'SB 6/3/2021 10:47:53'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'SB 6/3/2021 10:47:53'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'SB 6/3/2021 10:47:53'!
PASSED!

!testRun: #Portfolio2Test #test18accountSummaryEmptyPortfolio stamp: 'SB 6/3/2021 10:47:53'!
PASSED!

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithOneAccount stamp: 'SB 6/3/2021 10:47:53'!
PASSED!

!testRun: #Portfolio2Test #test20accountSummaryPortfolioWithTwoAccount stamp: 'SB 6/3/2021 10:47:53'!
PASSED!
!Transfer methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 10:48:20' prior: 50871263!
assertValidTransferWithSender: aSender aReceiver: aReceiver andAmount: anAmount

	anAmount <=0 ifTrue:[self error: self class negativeValueTransfer ].
	aSender = aReceiver ifTrue:[self error: self class sameLegsTransfer ].
	

! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'SB 6/3/2021 10:50:34'!
test21accountSummaryPortfolioWithPortfolio
	|portfolio account1 account2 mensajeEsperado|
	portfolio:= Portfolio new.
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	Deposit register: 150 on: account1.
	Withdraw register: 100 on: account2.
	Transfer from: account1 to: account2 withAmount: 300.
	

	mensajeEsperado:= OrderedCollection new.
	mensajeEsperado addLast: 'Deposito por 150'.
	mensajeEsperado addLast: 'Salida por transferencia de 300'.
	mensajeEsperado addLast: 'Extraccion por 100'.
	mensajeEsperado addLast: 'Entrada por transferencia de 300'.
	mensajeEsperado addLast: 'Balance = 50'.




	self assert: ((portfolio generateReport: 		MethodAccountSummary  new) = mensajeEsperado) .

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'SB 6/3/2021 10:55:07' prior: 50872300!
test21accountSummaryPortfolioWithPortfolio
	|portfolio1 portfolio2 account1 account2 mensajeEsperado|
	portfolio1:= Portfolio new.
	portfolio2:= Portfolio new.
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount  new.
	portfolio1 add: account1.
	portfolio2 add: portfolio1.
	Deposit register: 150 on: account1.
	Withdraw register: 100 on: account1.
	Transfer from: account1 to: account2 withAmount: 300.
	

	mensajeEsperado:= OrderedCollection new.
	mensajeEsperado addLast: 'Deposito por 150'.
	mensajeEsperado addLast: 'Salida por transferencia de 300'.
	mensajeEsperado addLast: 'Extraccion por 100'.
	mensajeEsperado addLast: 'Entrada por transferencia de 300'.
	mensajeEsperado addLast: 'Balance = 50'.




	self assert: ((portfolio1 generateReport: 		MethodAccountSummary  new) = mensajeEsperado) .

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'SB 6/3/2021 10:55:45' prior: 50872328!
test21accountSummaryPortfolioWithPortfolio
	|portfolio1 portfolio2 account1 account2 mensajeEsperado|
	portfolio1:= Portfolio new.
	portfolio2:= Portfolio new.
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount  new.
	portfolio1 add: account1.
	portfolio2 add: portfolio1.
	Deposit register: 150 on: account1.
	Withdraw register: 100 on: account1.
	Transfer from: account1 to: account2 withAmount: 300.
	

	mensajeEsperado:= OrderedCollection new.
	mensajeEsperado addLast: 'Deposito por 150'.
	mensajeEsperado addLast: 'Salida por transferencia de 300'.
	mensajeEsperado addLast: 'Extraccion por 100'.
	mensajeEsperado addLast: 'Entrada por transferencia de 300'.
	mensajeEsperado addLast: 'Balance = 50'.

	self assert: ((portfolio2 generateReport: 		MethodAccountSummary  new) = mensajeEsperado) .

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'SB 6/3/2021 11:04:42' prior: 50872357!
test21accountSummaryPortfolioWithPortfolio
	|portfolio1 portfolio2 account1 account2 mensajeEsperado|
	portfolio1:= Portfolio new.
	portfolio2:= Portfolio new.
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount  new.
	portfolio1 add: account1.
	portfolio2 add: portfolio1.
	Deposit register: 150 on: account1.
	Withdraw register: 100 on: account1.
	Transfer from: account1 to: account2 withAmount: 300.
	

	mensajeEsperado:= OrderedCollection new.
	mensajeEsperado addLast: 'Deposito por 150'.
	mensajeEsperado addLast: 'Extraccion por 100'.
	mensajeEsperado addLast: 'Salida por transferencia de 300'.
	mensajeEsperado addLast: 'Balance = 50'.

	self assert: ((portfolio2 generateReport: 		MethodAccountSummary  new) = mensajeEsperado) .

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test21accountSummaryPortfolioWithPortfolio stamp: 'SB 6/3/2021 11:07:12'!
ERROR!

!testRun: #Portfolio2Test #test21accountSummaryPortfolioWithPortfolio stamp: 'SB 6/3/2021 11:07:12'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 11:07:21'!
generatePartialReport: aMethodAccountSummary 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 11:09:06' prior: 50872420!
generatePartialReport: aReportMethod
	accounts do:[:anAccount| anAccount generatePartialReport: aReportMethod].
! !

!testRun: #Portfolio2Test #test21accountSummaryPortfolioWithPortfolio stamp: 'SB 6/3/2021 11:09:07'!
FAILURE!

!testRun: #Portfolio2Test #test21accountSummaryPortfolioWithPortfolio stamp: 'SB 6/3/2021 11:12:27'!
FAILURE!

!testRun: #Portfolio2Test #test21accountSummaryPortfolioWithPortfolio stamp: 'SB 6/3/2021 11:12:27'!
FAILURE!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'SB 6/3/2021 11:13:27' prior: 50872386!
test21accountSummaryPortfolioWithPortfolio
	|portfolio1 portfolio2 account1 account2 mensajeEsperado|
	portfolio1:= Portfolio new.
	portfolio2:= Portfolio new.
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount  new.
	portfolio1 add: account1.
	portfolio2 add: portfolio1.
	Deposit register: 150 on: account1.
	Withdraw register: 100 on: account1.
	Transfer from: account1 to: account2 withAmount: 300.
	

	mensajeEsperado:= OrderedCollection new.
	mensajeEsperado addLast: 'Deposito por 150'.
	mensajeEsperado addLast: 'Extraccion por 100'.
	mensajeEsperado addLast: 'Salida por transferencia de 300'.
	mensajeEsperado addLast: 'Balance = -250'.

	self assert: ((portfolio2 generateReport: 		MethodAccountSummary  new) = mensajeEsperado) .

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test21accountSummaryPortfolioWithPortfolio stamp: 'SB 6/3/2021 11:13:31'!
PASSED!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'SB 6/3/2021 11:14:20' prior: 50872443!
test21accountSummaryPortfolioWithPortfolio
	|portfolio1 portfolio2 account1 account2 mensajeEsperado|
	portfolio1:= Portfolio new.
	portfolio2:= Portfolio new.
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount  new.
	portfolio1 add: account1.
	portfolio2 add: portfolio1.
	Deposit register: 150 on: account1.
	Withdraw register: 100 on: account1.
	Transfer from: account1 to: account2 withAmount: 300.
	

	mensajeEsperado:= OrderedCollection new.
	mensajeEsperado addLast: 'Deposito por 150'.
	mensajeEsperado addLast: 'Extraccion por 100'.
	mensajeEsperado addLast: 'Salida por transferencia de 300'.
	mensajeEsperado addLast: 'Balance = -250'.

	self assert: ((portfolio2 generateReport: 		MethodAccountSummary  new) = mensajeEsperado) .

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'nil' stamp: 'SB 6/3/2021 11:27:40' overrides: 16927572!
setUp! !
!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 11:30:04' prior: 50863535!
test01transfer100ModifiesRecieverBalance
	|account10 account2|
	account10:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	Transfer from: account10 to:account2 withAmount: 100.
	
	self assert: (account2 balance = 100).
	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 11:30:09' prior: 50872505!
test01transfer100ModifiesRecieverBalance
	|account10 account20|
	account10:= ReceptiveAccount new.
	account20:= ReceptiveAccount new.
	Transfer from: account10 to:account20 withAmount: 100.
	
	self assert: (account20 balance = 100).
	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 11:30:35' prior: 50863546!
test02transfer100ModifiesSenderBalance
	|account1 account20|
	account1:= ReceptiveAccount new.
	account20:= ReceptiveAccount new.
	
	Transfer from: account1 to:account20 withAmount: 100.
	
	self assert: (account1 balance = -100).
	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 11:30:43' prior: 50872527!
test02transfer100ModifiesSenderBalance
	|account10 account20|
	account10:= ReceptiveAccount new.
	account20:= ReceptiveAccount new.
	
	Transfer from: account10 to:account20 withAmount: 100.
	
	self assert: (account10 balance = -100).
	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 11:31:07' prior: 50871273!
test03transferSenderCannotBeEqualToReceiver
	|account10|
	account10:= ReceptiveAccount new.
	self 
		should: [ Transfer from: account10 to:account10 withAmount: 100. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Transfer sameLegsTransfer equals: anError messageText.
			]
	
	! !
!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 11:31:22' prior: 50867352!
test04SenderLegKnowsRecieverLeg
	|account10 account2 transfer senderLeg|
	account10:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	transfer:=Transfer from: account10 to:account2 withAmount: 100.
	senderLeg:= transfer senderLeg.
	
	self assert: (senderLeg otherLeg = transfer recieverLeg).

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 11:31:27' prior: 50872562!
test04SenderLegKnowsRecieverLeg
	|account10 account20 transfer senderLeg|
	account10:= ReceptiveAccount new.
	account20:= ReceptiveAccount new.
	
	transfer:=Transfer from: account10 to:account20 withAmount: 100.
	senderLeg:= transfer senderLeg.
	
	self assert: (senderLeg otherLeg = transfer recieverLeg).

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 11:31:48' prior: 50867414!
test05tRecieverLegKnowsSenderLeg
	|account10 account2 transfer recieverLeg|
	account10:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	transfer:=Transfer from: account10 to:account2 withAmount: 100.
	recieverLeg:= transfer recieverLeg.
	
	self assert: (recieverLeg otherLeg = transfer senderLeg).

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 11:32:16' prior: 50872588!
test05tRecieverLegKnowsSenderLeg
	|account10 account20 transfer recieverLeg|
	account10:= ReceptiveAccount new.
	account20:= ReceptiveAccount new.
	
	transfer:=Transfer from: account10 to:account20 withAmount: 100.
	recieverLeg:= transfer recieverLeg.
	
	self assert: (recieverLeg otherLeg = transfer senderLeg).

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 11:32:31' prior: 50863839!
test06transferRegitersValue
	|account10 account2 transfer|
	account10:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	
	transfer:=Transfer from: account10 to:account2 withAmount: 100.
	
	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 11:32:40' prior: 50872615!
test06transferRegitersValue
	|account10 account20 transfer|
	account10:= ReceptiveAccount new.
	account20:= ReceptiveAccount new.
	
	
	transfer:=Transfer from: account10 to:account20 withAmount: 100.
	
	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 11:32:56' prior: 50863905!
test07transferCantTakeNegativeValues
	|account10 account2|
	account10:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	self 
		should: [ Transfer from: account10 to:account2 withAmount: -100. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Transfer negativeValueTransfer equals: anError messageText.
			]
	
	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 11:33:05' prior: 50872635!
test07transferCantTakeNegativeValues
	|account10 account20|
	account10:= ReceptiveAccount new.
	account20:= ReceptiveAccount new.
	
	self 
		should: [ Transfer from: account10 to:account20 withAmount: -100. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Transfer negativeValueTransfer equals: anError messageText.
			]
	
	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'SB 6/3/2021 11:33:23' prior: 50869166!
test08accountSummaryBalanceAmount0
	|account10 |
	account10:= ReceptiveAccount new.
	
	self assert: ((account10 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Balance = 0').
	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'SB 6/3/2021 11:33:33' prior: 50869269!
test09accountSummaryDepositAmount100
	|account10 |
	account10:= ReceptiveAccount new.
	
	Deposit register: 100 on: account10.
	
	self assert: ((account10 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Deposito por 100').
	self assert: ((account10 generateReport: 		MethodAccountSummary  new) at: 2)  equals: ('Balance = 100').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'SB 6/3/2021 11:33:53' prior: 50869283!
test10accountSummaryTwoDepositAmount250
	|account10 |
	account10:= ReceptiveAccount new.
	
	Deposit register: 100 on: account10.
	Deposit register: 150 on: account10.

	
	self assert: ((account10 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Deposito por 100').
	self assert: ((account10 generateReport: 		MethodAccountSummary  new) at: 2)  equals: ('Deposito por 150').
	self assert: ((account10 generateReport: 		MethodAccountSummary  new) at: 3)  equals: ('Balance = 250').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'SB 6/3/2021 11:34:06' prior: 50869302!
test11accountSummaryWithdrawAmount100
	|account10 |
	account10:= ReceptiveAccount new.
	
	Withdraw register: 100 on: account10.

	
	self assert: ((account10 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Extraccion por 100').
	self assert: ((account10 generateReport: 		MethodAccountSummary  new) at: 2)  equals: ('Balance = -100').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'SB 6/3/2021 11:34:13' prior: 50869317!
test12accountSummaryTwoWithdrawAmount100
	|account10 |
	account10:= ReceptiveAccount new.
	
	Withdraw register: 100 on: account10.
	Withdraw register: 150 on: account10.


	
	self assert: ((account10 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Extraccion por 100').
	self assert: ((account10 generateReport: 		MethodAccountSummary  new) at: 2)  equals: ('Extraccion por 150').
	self assert: ((account10 generateReport: 		MethodAccountSummary  new) at: 3)  equals: ('Balance = -250').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'SB 6/3/2021 11:34:22' prior: 50869336!
test13accountSummaryOutboundTransfer
	|account10 account2|
	account10:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Transfer from: account10 to: account2  withAmount: 200.	
	self assert: ((account10 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Salida por transferencia de 200').
	self assert: ((account10 generateReport: 		MethodAccountSummary  new) at: 2)  equals: ('Balance = -200').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'SB 6/3/2021 11:34:29' prior: 50872744!
test13accountSummaryOutboundTransfer
	|account10 account20|
	account10:= ReceptiveAccount new.
	account20:= ReceptiveAccount new.

	Transfer from: account10 to: account20  withAmount: 200.	
	self assert: ((account10 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Salida por transferencia de 200').
	self assert: ((account10 generateReport: 		MethodAccountSummary  new) at: 2)  equals: ('Balance = -200').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'SB 6/3/2021 11:34:40' prior: 50869353!
test14accountSummaryInboundTransfer
	|account10 account2|
	account10:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Transfer from: account10 to: account2  withAmount: 200.	
	self assert: ((account2 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Entrada por transferencia de 200').
	self assert: ((account2 generateReport: 		MethodAccountSummary  new) at: 2)  equals: ('Balance = 200').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'SB 6/3/2021 11:34:46' prior: 50872778!
test14accountSummaryInboundTransfer
	|account10 account20|
	account10:= ReceptiveAccount new.
	account20:= ReceptiveAccount new.

	Transfer from: account10 to: account20  withAmount: 200.	
	self assert: ((account20 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Entrada por transferencia de 200').
	self assert: ((account20 generateReport: 		MethodAccountSummary  new) at: 2)  equals: ('Balance = 200').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferNet' stamp: 'SB 6/3/2021 11:34:57' prior: 50869521!
test15transferNetNoTransaction
	|account10|
	account10:= ReceptiveAccount new.
	
	self assert: (account10 generateReport: MethodTransferNet new)  equals: (0).
	
	

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferNet' stamp: 'SB 6/3/2021 11:35:06' prior: 50869530!
test16transferNetInboundTransaction100
	|account10 account2|
	account10:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Transfer from: account10 to:account2  	withAmount:100.
	self assert: (account2 generateReport: MethodTransferNet new)  equals: 100.
	
	

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferNet' stamp: 'SB 6/3/2021 11:35:13' prior: 50872821!
test16transferNetInboundTransaction100
	|account10 account20|
	account10:= ReceptiveAccount new.
	account20:= ReceptiveAccount new.

	Transfer from: account10 to:account20  	withAmount:100.
	self assert: (account20 generateReport: MethodTransferNet new)  equals: 100.
	
	

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferNet' stamp: 'SB 6/3/2021 11:35:20' prior: 50869542!
test17transferNetOutboundTransaction100
	|account10 account2|
	account10:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Transfer from: account10 to:account2  	withAmount:100.

	self assert: (account10 generateReport: MethodTransferNet new)  equals: (100 negated).
	
	

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferNet' stamp: 'SB 6/3/2021 11:35:29' prior: 50872845!
test17transferNetOutboundTransaction100
	|account10 account20|
	account10:= ReceptiveAccount new.
	account20:= ReceptiveAccount new.

	Transfer from: account10 to:account20  	withAmount:100.

	self assert: (account10 generateReport: MethodTransferNet new)  equals: (100 negated).
	
	

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'SB 6/3/2021 11:36:00' prior: 50869867!
test18accountSummaryEmptyPortfolio
	|portfolio10|
	portfolio10:= Portfolio new.

	self assert: ((portfolio10 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Balance = 0').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'SB 6/3/2021 11:36:09' prior: 50870362!
test19accountSummaryPortfolioWithOneAccount
	|portfolio10 account1 account2|
	portfolio10:= Portfolio new.
	
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Deposit register: 100 on: account1.
	Withdraw register: 150 on: account1.
	Transfer from: account1 to: account2 withAmount: 150.
	Transfer from: account2 to: account1 withAmount: 350.
	
	portfolio10 add: account1.

	self assert: ((portfolio10 generateReport: 		MethodAccountSummary  new) = (account1 generateReport: 		MethodAccountSummary  new)) .

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'SB 6/3/2021 11:36:20' prior: 50872881!
test19accountSummaryPortfolioWithOneAccount
	|portfolio10 account10 account2|
	portfolio10:= Portfolio new.
	
	account10:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Deposit register: 100 on: account10.
	Withdraw register: 150 on: account10.
	Transfer from: account10 to: account2 withAmount: 150.
	Transfer from: account2 to: account10 withAmount: 350.
	
	portfolio10 add: account10.

	self assert: ((portfolio10 generateReport: 		MethodAccountSummary  new) = (account10 generateReport: 		MethodAccountSummary  new)) .

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'SB 6/3/2021 11:36:24' prior: 50872901!
test19accountSummaryPortfolioWithOneAccount
	|portfolio10 account10 account20|
	portfolio10:= Portfolio new.
	
	account10:= ReceptiveAccount new.
	account20:= ReceptiveAccount new.

	Deposit register: 100 on: account10.
	Withdraw register: 150 on: account10.
	Transfer from: account10 to: account20 withAmount: 150.
	Transfer from: account20 to: account10 withAmount: 350.
	
	portfolio10 add: account10.

	self assert: ((portfolio10 generateReport: 		MethodAccountSummary  new) = (account10 generateReport: 		MethodAccountSummary  new)) .

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'SB 6/3/2021 11:36:35' prior: 50870564!
test20accountSummaryPortfolioWithTwoAccount
	|portfolio10 account1 account2 mensajeEsperado|
	portfolio10:= Portfolio new.
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	portfolio10 add: account1.
	portfolio10 add: account2.
	Deposit register: 150 on: account1.
	Withdraw register: 100 on: account2.
	Transfer from: account1 to: account2 withAmount: 300.
	

	mensajeEsperado:= OrderedCollection new.
	mensajeEsperado addLast: 'Deposito por 150'.
	mensajeEsperado addLast: 'Salida por transferencia de 300'.
	mensajeEsperado addLast: 'Extraccion por 100'.
	mensajeEsperado addLast: 'Entrada por transferencia de 300'.
	mensajeEsperado addLast: 'Balance = 50'.




	self assert: ((portfolio10 generateReport: 		MethodAccountSummary  new) = mensajeEsperado) .

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'SB 6/3/2021 11:36:40' prior: 50872943!
test20accountSummaryPortfolioWithTwoAccount
	|portfolio10 account10 account2 mensajeEsperado|
	portfolio10:= Portfolio new.
	account10:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	portfolio10 add: account10.
	portfolio10 add: account2.
	Deposit register: 150 on: account10.
	Withdraw register: 100 on: account2.
	Transfer from: account10 to: account2 withAmount: 300.
	

	mensajeEsperado:= OrderedCollection new.
	mensajeEsperado addLast: 'Deposito por 150'.
	mensajeEsperado addLast: 'Salida por transferencia de 300'.
	mensajeEsperado addLast: 'Extraccion por 100'.
	mensajeEsperado addLast: 'Entrada por transferencia de 300'.
	mensajeEsperado addLast: 'Balance = 50'.




	self assert: ((portfolio10 generateReport: 		MethodAccountSummary  new) = mensajeEsperado) .

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'SB 6/3/2021 11:36:50' prior: 50872971!
test20accountSummaryPortfolioWithTwoAccount
	|portfolio10 account10 account20 mensajeEsperado|
	portfolio10:= Portfolio new.
	account10:= ReceptiveAccount new.
	account20:= ReceptiveAccount new.
	portfolio10 add: account10.
	portfolio10 add: account20.
	Deposit register: 150 on: account10.
	Withdraw register: 100 on: account20.
	Transfer from: account10 to: account20 withAmount: 300.
	

	mensajeEsperado:= OrderedCollection new.
	mensajeEsperado addLast: 'Deposito por 150'.
	mensajeEsperado addLast: 'Salida por transferencia de 300'.
	mensajeEsperado addLast: 'Extraccion por 100'.
	mensajeEsperado addLast: 'Entrada por transferencia de 300'.
	mensajeEsperado addLast: 'Balance = 50'.




	self assert: ((portfolio10 generateReport: 		MethodAccountSummary  new) = mensajeEsperado) .

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'SB 6/3/2021 11:36:57' prior: 50872474!
test21accountSummaryPortfolioWithPortfolio
	|portfolio10 portfolio2 account1 account2 mensajeEsperado|
	portfolio10:= Portfolio new.
	portfolio2:= Portfolio new.
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount  new.
	portfolio10 add: account1.
	portfolio2 add: portfolio10.
	Deposit register: 150 on: account1.
	Withdraw register: 100 on: account1.
	Transfer from: account1 to: account2 withAmount: 300.
	

	mensajeEsperado:= OrderedCollection new.
	mensajeEsperado addLast: 'Deposito por 150'.
	mensajeEsperado addLast: 'Extraccion por 100'.
	mensajeEsperado addLast: 'Salida por transferencia de 300'.
	mensajeEsperado addLast: 'Balance = -250'.

	self assert: ((portfolio2 generateReport: 		MethodAccountSummary  new) = mensajeEsperado) .

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'SB 6/3/2021 11:37:05' prior: 50873028!
test21accountSummaryPortfolioWithPortfolio
	|portfolio10 portfolio20 account1 account2 mensajeEsperado|
	portfolio10:= Portfolio new.
	portfolio20:= Portfolio new.
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount  new.
	portfolio10 add: account1.
	portfolio20 add: portfolio10.
	Deposit register: 150 on: account1.
	Withdraw register: 100 on: account1.
	Transfer from: account1 to: account2 withAmount: 300.
	

	mensajeEsperado:= OrderedCollection new.
	mensajeEsperado addLast: 'Deposito por 150'.
	mensajeEsperado addLast: 'Extraccion por 100'.
	mensajeEsperado addLast: 'Salida por transferencia de 300'.
	mensajeEsperado addLast: 'Balance = -250'.

	self assert: ((portfolio20 generateReport: 		MethodAccountSummary  new) = mensajeEsperado) .

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'SB 6/3/2021 11:37:09' prior: 50873056!
test21accountSummaryPortfolioWithPortfolio
	|portfolio10 portfolio20 account10 account2 mensajeEsperado|
	portfolio10:= Portfolio new.
	portfolio20:= Portfolio new.
	account10:= ReceptiveAccount new.
	account2:= ReceptiveAccount  new.
	portfolio10 add: account10.
	portfolio20 add: portfolio10.
	Deposit register: 150 on: account10.
	Withdraw register: 100 on: account10.
	Transfer from: account10 to: account2 withAmount: 300.
	

	mensajeEsperado:= OrderedCollection new.
	mensajeEsperado addLast: 'Deposito por 150'.
	mensajeEsperado addLast: 'Extraccion por 100'.
	mensajeEsperado addLast: 'Salida por transferencia de 300'.
	mensajeEsperado addLast: 'Balance = -250'.

	self assert: ((portfolio20 generateReport: 		MethodAccountSummary  new) = mensajeEsperado) .

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'SB 6/3/2021 11:37:16' prior: 50873084!
test21accountSummaryPortfolioWithPortfolio
	|portfolio10 portfolio20 account10 account20 mensajeEsperado|
	portfolio10:= Portfolio new.
	portfolio20:= Portfolio new.
	account10:= ReceptiveAccount new.
	account20:= ReceptiveAccount  new.
	portfolio10 add: account10.
	portfolio20 add: portfolio10.
	Deposit register: 150 on: account10.
	Withdraw register: 100 on: account10.
	Transfer from: account10 to: account20 withAmount: 300.
	

	mensajeEsperado:= OrderedCollection new.
	mensajeEsperado addLast: 'Deposito por 150'.
	mensajeEsperado addLast: 'Extraccion por 100'.
	mensajeEsperado addLast: 'Salida por transferencia de 300'.
	mensajeEsperado addLast: 'Balance = -250'.

	self assert: ((portfolio20 generateReport: 		MethodAccountSummary  new) = mensajeEsperado) .

	

	
	
	

	
	! !

!classDefinition: #Portfolio2Test category: 'Portfolio-Solucion' stamp: 'SB 6/3/2021 11:38:11'!
TestCase subclass: #Portfolio2Test
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio2Test category: 'Portfolio-Solucion' stamp: 'SB 6/3/2021 11:38:12'!
TestCase subclass: #Portfolio2Test
	instanceVariableNames: 'portfolio portfolio1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio2Test category: 'Portfolio-Solucion' stamp: 'SB 6/3/2021 11:38:14'!
TestCase subclass: #Portfolio2Test
	instanceVariableNames: 'portfolio portfolio1 portfolio2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio2Test category: 'Portfolio-Solucion' stamp: 'SB 6/3/2021 11:38:15'!
TestCase subclass: #Portfolio2Test
	instanceVariableNames: 'portfolio portfolio1 portfolio2 account1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio2Test category: 'Portfolio-Solucion' stamp: 'SB 6/3/2021 11:38:16'!
TestCase subclass: #Portfolio2Test
	instanceVariableNames: 'portfolio portfolio1 portfolio2 account1 account2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 11:38:09' prior: 50872501 overrides: 16927572!
setUp
	portfolio := Portfolio  new.
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount  new.
	account2 := ReceptiveAccount new.
	! !
!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 11:38:33' prior: 50872516!
test01transfer100ModifiesRecieverBalance
	
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	Transfer from: account1 to:account2 withAmount: 100.
	
	self assert: (account2 balance = 100).
	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 11:38:38' prior: 50873192!
test01transfer100ModifiesRecieverBalance

	Transfer from: account1 to:account2 withAmount: 100.
	
	self assert: (account2 balance = 100).
	
	
	

	
	! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'SB 6/3/2021 11:38:41'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'SB 6/3/2021 11:38:46'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'SB 6/3/2021 11:39:07'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'SB 6/3/2021 11:39:11'!
PASSED!
!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 11:39:20' prior: 50873202!
test01transfer100ModifiesRecieverBalance

	Transfer from: account1 to:account2 withAmount: 100.
	self assert: (account2 balance = 100).
	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 11:39:35' prior: 50872538!
test02transfer100ModifiesSenderBalance
	

	Transfer from: account1 to:account2 withAmount: 100.
	self assert: (account1 balance = -100).
	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 11:40:09' prior: 50872549!
test03transferSenderCannotBeEqualToReceiver

	self 
		should: [ Transfer from: account1 to:account1 withAmount: 100. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Transfer sameLegsTransfer equals: anError messageText.
			]
	
	! !

!testRun: #Portfolio2Test #test03transferSenderCannotBeEqualToReceiver stamp: 'SB 6/3/2021 11:40:13'!
PASSED!
!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 11:40:38' prior: 50872575!
test04SenderLegKnowsRecieverLeg
	|transfer senderLeg|
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.
	senderLeg:= transfer senderLeg.
	self assert: (senderLeg otherLeg = transfer recieverLeg).

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 11:40:53' prior: 50872601!
test05tRecieverLegKnowsSenderLeg
	| transfer recieverLeg|
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.
	recieverLeg:= transfer recieverLeg.
	self assert: (recieverLeg otherLeg = transfer senderLeg).

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 11:42:05' prior: 50872625!
test06transferRegitersValue
	|account10 account20 transfer|
	account10:= ReceptiveAccount new.
	account20:= ReceptiveAccount new.
	
	
	transfer:=Transfer from: account10 to:account20 withAmount: 100.
	self assert: transfer value equals: 100
	
	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'SB 6/3/2021 11:42:15'!
PASSED!
!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 11:42:34' prior: 50873276!
test06transferRegitersValue
	
	|transfer|
	transfer:=Transfer from: account1 to:account2 withAmount: 100.
	self assert: transfer value equals: 100
	
	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 11:42:49' prior: 50872650!
test07transferCantTakeNegativeValues
	
	self 
		should: [ Transfer from: account1 to:account2 withAmount: -100. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Transfer negativeValueTransfer equals: anError messageText.
			]
	
	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'SB 6/3/2021 11:43:00' prior: 50872665!
test08accountSummaryBalanceAmount0
	
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Balance = 0').
	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'SB 6/3/2021 11:43:14' prior: 50872675!
test09accountSummaryDepositAmount100
	
	Deposit register: 100 on: account1.
	
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Deposito por 100').
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 2)  equals: ('Balance = 100').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'SB 6/3/2021 11:43:26' prior: 50872690!
test10accountSummaryTwoDepositAmount250
	
	Deposit register: 100 on: account1.
	Deposit register: 150 on: account1.

	
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Deposito por 100').
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 2)  equals: ('Deposito por 150').
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 3)  equals: ('Balance = 250').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'SB 6/3/2021 11:43:44' prior: 50872709!
test11accountSummaryWithdrawAmount100
	
	Withdraw register: 100 on: account1.

	
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Extraccion por 100').
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 2)  equals: ('Balance = -100').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'SB 6/3/2021 11:44:00' prior: 50872724!
test12accountSummaryTwoWithdrawAmount100

	Withdraw register: 100 on: account1.
	Withdraw register: 150 on: account1.


	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Extraccion por 100').
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 2)  equals: ('Extraccion por 150').
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 3)  equals: ('Balance = -250').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'SB 6/3/2021 11:44:13' prior: 50872761!
test13accountSummaryOutboundTransfer
	

	Transfer from: account1 to: account2  withAmount: 200.	
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Salida por transferencia de 200').
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 2)  equals: ('Balance = -200').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'SB 6/3/2021 11:44:29' prior: 50872795!
test14accountSummaryInboundTransfer
	
	Transfer from: account1 to: account2  withAmount: 200.	
	
	self assert: ((account2 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Entrada por transferencia de 200').
	self assert: ((account2 generateReport: 		MethodAccountSummary  new) at: 2)  equals: ('Balance = 200').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferNet' stamp: 'SB 6/3/2021 11:44:42' prior: 50872812!
test15transferNetNoTransaction
	
	self assert: (account1 generateReport: MethodTransferNet new)  equals: (0).
	
	

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #Portfolio2Test #test03transferSenderCannotBeEqualToReceiver stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #Portfolio2Test #test05tRecieverLegKnowsSenderLeg stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #Portfolio2Test #test18accountSummaryEmptyPortfolio stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithOneAccount stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #Portfolio2Test #test20accountSummaryPortfolioWithTwoAccount stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #Portfolio2Test #test21accountSummaryPortfolioWithPortfolio stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SB 6/3/2021 11:44:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SB 6/3/2021 11:44:46'!
PASSED!
!Portfolio2Test methodsFor: 'transferNet' stamp: 'SB 6/3/2021 11:44:58' prior: 50872833!
test16transferNetInboundTransaction100
	

	Transfer from: account1 to:account2  	withAmount:100.
	self assert: (account2 generateReport: MethodTransferNet new)  equals: 100.
	
	

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferNet' stamp: 'SB 6/3/2021 11:45:12' prior: 50872858!
test17transferNetOutboundTransaction100
	
	Transfer from: account1 to:account2  	withAmount:100.
	self assert: (account1 generateReport: MethodTransferNet new)  equals: (100 negated).
	
	

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'SB 6/3/2021 11:45:22' prior: 50872871!
test18accountSummaryEmptyPortfolio
	
	self assert: ((portfolio1 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Balance = 0').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'SB 6/3/2021 11:45:45' prior: 50872922!
test19accountSummaryPortfolioWithOneAccount
	

	Deposit register: 100 on: account1.
	Withdraw register: 150 on: account1.
	Transfer from: account1 to: account2 withAmount: 150.
	Transfer from: account2 to: account1 withAmount: 350.
	
	portfolio1 add: account1.
	self assert: ((portfolio1 generateReport: 		MethodAccountSummary  new) = (account1 generateReport: 		MethodAccountSummary  new)) .

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'SB 6/3/2021 11:46:20' prior: 50872999!
test20accountSummaryPortfolioWithTwoAccount
	| mensajeEsperado|
	
	portfolio1 add: account1.
	portfolio1 add: account2.
	Deposit register: 150 on: account1.
	Withdraw register: 100 on: account2.
	Transfer from: account1 to: account2 withAmount: 300.
	

	mensajeEsperado:= OrderedCollection new.
	mensajeEsperado addLast: 'Deposito por 150'.
	mensajeEsperado addLast: 'Salida por transferencia de 300'.
	mensajeEsperado addLast: 'Extraccion por 100'.
	mensajeEsperado addLast: 'Entrada por transferencia de 300'.
	mensajeEsperado addLast: 'Balance = 50'.




	self assert: ((portfolio1 generateReport: 		MethodAccountSummary  new) = mensajeEsperado) .

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'SB 6/3/2021 11:49:45' prior: 50873112!
test21accountSummaryPortfolioWithPortfolio
	| mensajeEsperado|
	
	portfolio1 add: account1.
	portfolio2 add: portfolio1.
	Deposit register: 150 on: account1.
	Withdraw register: 100 on: account1.
	Transfer from: account1 to: account2 withAmount: 300.
	

	mensajeEsperado:= OrderedCollection new.
	mensajeEsperado addLast: 'Deposito por 150'.
	mensajeEsperado addLast: 'Extraccion por 100'.
	mensajeEsperado addLast: 'Salida por transferencia de 300'.
	mensajeEsperado addLast: 'Balance = -250'.

	self assert: ((portfolio2 generateReport: 		MethodAccountSummary  new) = mensajeEsperado) .

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test21accountSummaryPortfolioWithPortfolio stamp: 'SB 6/3/2021 11:49:49'!
PASSED!
!Portfolio2Test methodsFor: 'accountSummaryTest' stamp: 'SB 6/3/2021 11:52:09' prior: 50873381!
test13accountSummaryOutboundTransfer
	
	Transfer from: account1 to: account2  withAmount: 200.	
	
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Salida por transferencia de 200').
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 2)  equals: ('Balance = -200').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummaryTest' stamp: 'SB 6/3/2021 11:53:07' prior: 50873311!
test08accountSummaryBalanceAmount0
	
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Balance = 0').
	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummaryTest' stamp: 'SB 6/3/2021 11:53:31' prior: 50873595!
test19accountSummaryPortfolioWithOneAccount
	

	Deposit register: 100 on: account1.
	Withdraw register: 150 on: account1.
	Transfer from: account1 to: account2 withAmount: 150.
	Transfer from: account2 to: account1 withAmount: 350.
	portfolio1 add: account1.
	
	self assert: ((portfolio1 generateReport: 		MethodAccountSummary  new) = (account1 generateReport: 		MethodAccountSummary  new)) .

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'private - assertion' stamp: 'SB 6/3/2021 11:55:33'!
assertReport: aReport EqualsExpectedReport: aExpectedReport
	self assert: aReport = aExpectedReport ! !
!Portfolio2Test methodsFor: 'accountSummaryTest' stamp: 'SB 6/3/2021 11:58:00' prior: 50873675!
test08accountSummaryBalanceAmount0
	
self assertReport: (account1 generateReport: 		MethodAccountSummary  new)         EqualsExpectedReport:(OrderedCollection with: 'Balance = 0')
	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'SB 6/3/2021 11:58:04'!
PASSED!

x _ OrderedCollection with: 4 with: 3 with: 2 with: 1!
!Portfolio2Test methodsFor: 'accountSummaryTest' stamp: 'SB 6/3/2021 11:59:59' prior: 50873319!
test09accountSummaryDepositAmount100
	
	Deposit register: 100 on: account1.
	
	self assertReport: (account1 generateReport: 		MethodAccountSummary  new)         EqualsExpectedReport:(OrderedCollection with: 'Deposito por 100' with:'Balance = 100')
	

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'SB 6/3/2021 12:00:03'!
PASSED!
!Portfolio2Test methodsFor: 'accountSummaryTest' stamp: 'SB 6/3/2021 12:01:00' prior: 50873332!
test10accountSummaryTwoDepositAmount250
	
	Deposit register: 100 on: account1.
	Deposit register: 150 on: account1.

	self assertReport: (account1 generateReport: 		MethodAccountSummary  new)         EqualsExpectedReport:(OrderedCollection with: 'Deposito por 100' with: 'Deposito por 150'with:'Balance = 250')
	

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummaryTest' stamp: 'SB 6/3/2021 12:01:06' prior: 50873736!
test10accountSummaryTwoDepositAmount250
	
	Deposit register: 100 on: account1.
	Deposit register: 150 on: account1.

	self assertReport: (account1 generateReport: 		MethodAccountSummary  new)         EqualsExpectedReport:(OrderedCollection with: 'Deposito por 100' with: 'Deposito por 150'with:' Balance = 250')
	

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'SB 6/3/2021 12:01:16'!
FAILURE!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'SB 6/3/2021 12:01:16'!
FAILURE!
!Portfolio2Test methodsFor: 'accountSummaryTest' stamp: 'SB 6/3/2021 12:01:36' prior: 50873750!
test10accountSummaryTwoDepositAmount250
	
	Deposit register: 100 on: account1.
	Deposit register: 150 on: account1.

	self assertReport: (account1 generateReport: 		MethodAccountSummary  new)         EqualsExpectedReport:(OrderedCollection with: 'Deposito por 100' with: 'Deposito por 150'with: 'Balance = 250')
	

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'SB 6/3/2021 12:01:38'!
PASSED!
!Portfolio2Test methodsFor: 'accountSummaryTest' stamp: 'SB 6/3/2021 12:02:07' prior: 50873350!
test11accountSummaryWithdrawAmount100
	
	Withdraw register: 100 on: account1.

	self assertReport: (account1 generateReport: 		MethodAccountSummary  new)         EqualsExpectedReport:(OrderedCollection with: 'Extraccion por 100' with:'Balance = -100')

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'SB 6/3/2021 12:02:10'!
PASSED!
!Portfolio2Test methodsFor: 'accountSummaryTest' stamp: 'SB 6/3/2021 12:02:50' prior: 50873363!
test12accountSummaryTwoWithdrawAmount100

	Withdraw register: 100 on: account1.
	Withdraw register: 150 on: account1.


	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Extraccion por 100').
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 2)  equals: ('Extraccion por 150').
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 3)  equals: ('Balance = -250').
	
	self assertReport: (account1 generateReport: 		MethodAccountSummary  new)         EqualsExpectedReport:(OrderedCollection with: 'Extraccion por 100' with: 'Extraccion por 150' with:'Balance = -250')

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummaryTest' stamp: 'SB 6/3/2021 12:02:56' prior: 50873803!
test12accountSummaryTwoWithdrawAmount100

	Withdraw register: 100 on: account1.
	Withdraw register: 150 on: account1.


	self assertReport: (account1 generateReport: 		MethodAccountSummary  new)         EqualsExpectedReport:(OrderedCollection with: 'Extraccion por 100' with: 'Extraccion por 150' with:'Balance = -250')

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferNetTest' stamp: 'SB 6/3/2021 13:45:36' prior: 50873409!
test15transferNetNoTransaction
	
	self assert: (account1 generateReport: MethodTransferNet new)  equals: 0.
	
	

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'SB 6/3/2021 13:45:38'!
PASSED!
!Portfolio2Test methodsFor: 'transferNetTest' stamp: 'SB 6/3/2021 13:45:47' prior: 50873577!
test17transferNetOutboundTransaction100
	
	Transfer from: account1 to:account2  	withAmount:100.
	self assert: (account1 generateReport: MethodTransferNet new)  equals: 100 negated.
	
	

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'SB 6/3/2021 13:45:54'!
PASSED!
!Portfolio2Test methodsFor: 'accountSummaryTest' stamp: 'SB 6/3/2021 14:18:01' prior: 50873827!
test12accountSummaryTwoWithdrawAmount100

	Withdraw register: 100 on: account1.
	Withdraw register: 150 on: account1.


	self assertReport: (account1 generateReport: 		MethodAccountSummary  new) EqualsExpectedReport:(OrderedCollection with: 'Extraccion por 100' with: 'Extraccion por 150' with:'Balance = -250')

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummaryTest' stamp: 'SB 6/3/2021 14:19:02' prior: 50873661!
test13accountSummaryOutboundTransfer
	
	Transfer from: account1 to: account2  withAmount: 200.	
	
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Salida por transferencia de 200').
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 2)  equals: ('Balance = -200').
	
	self assertReport: (account1 generateReport: 		MethodAccountSummary  new) EqualsExpectedReport:(OrderedCollection with: 'Salida por transferencia de 200'with:'Balance = -200')

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'SB 6/3/2021 14:19:05'!
PASSED!
!Portfolio2Test methodsFor: 'accountSummaryTest' stamp: 'SB 6/3/2021 14:19:41' prior: 50873879!
test13accountSummaryOutboundTransfer
	
	Transfer from: account1 to: account2  withAmount: 200.	
	
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Salida por transferencia de 200').
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 2)  equals: ('Balance = -200').
	
	self assertReport: (account1 generateReport: 		MethodAccountSummary  new) EqualsExpectedReport:( OrderedCollection with: 'Salida por transferencia de 200'with:'Balance = -200')

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummaryTest' stamp: 'SB 6/3/2021 14:20:17' prior: 50873395!
test14accountSummaryInboundTransfer
	
	Transfer from: account1 to: account2  withAmount: 200.	
	
	self assert: ((account2 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Entrada por transferencia de 200').
	self assert: ((account2 generateReport: 		MethodAccountSummary  new) at: 2)  equals: ('Balance = 200').
	
	self assertReport: (account1 generateReport: 		MethodAccountSummary  new) EqualsExpectedReport:( OrderedCollection with: 'Entrada por transferencia de 200'with:'Balance = 200')

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'SB 6/3/2021 14:20:20'!
FAILURE!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'SB 6/3/2021 14:20:20'!
FAILURE!
!Portfolio2Test methodsFor: 'accountSummaryTest' stamp: 'SB 6/3/2021 14:20:37' prior: 50873922!
test14accountSummaryInboundTransfer
	
	Transfer from: account1 to: account2  withAmount: 200.	
	
	self assert: ((account2 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Entrada por transferencia de 200').
	self assert: ((account2 generateReport: 		MethodAccountSummary  new) at: 2)  equals: ('Balance = 200').
	
	self assertReport: (account1 generateReport: 		MethodAccountSummary  new) EqualsExpectedReport:( OrderedCollection with: 'Entrada por transferencia de 200'with: 'Balance = 200')

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummaryTest' stamp: 'SB 6/3/2021 14:20:50' prior: 50873948!
test14accountSummaryInboundTransfer
	
	Transfer from: account1 to: account2  withAmount: 200.	
	
	self assertReport: (account2 generateReport: 		MethodAccountSummary  new) EqualsExpectedReport:( OrderedCollection with: 'Entrada por transferencia de 200'with: 'Balance = 200')

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'SB 6/3/2021 14:20:53'!
PASSED!
!Portfolio2Test methodsFor: 'accountSummaryTest' stamp: 'SB 6/3/2021 14:21:00' prior: 50873902!
test13accountSummaryOutboundTransfer
	
	Transfer from: account1 to: account2  withAmount: 200.	
	
	self assertReport: (account1 generateReport: 		MethodAccountSummary  new) EqualsExpectedReport:( OrderedCollection with: 'Salida por transferencia de 200'with:'Balance = -200')

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummaryTest' stamp: 'SB 6/3/2021 14:21:06' prior: 50873865!
test12accountSummaryTwoWithdrawAmount100

	Withdraw register: 100 on: account1.
	Withdraw register: 150 on: account1.

	self assertReport: (account1 generateReport: 		MethodAccountSummary  new) EqualsExpectedReport:(OrderedCollection with: 'Extraccion por 100' with: 'Extraccion por 150' with:'Balance = -250')

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummaryTest' stamp: 'SB 6/3/2021 14:25:01' prior: 50873587!
test18accountSummaryEmptyPortfolio
	
self assertReport: (account2 generateReport: 		MethodAccountSummary  new) EqualsExpectedReport: OrderedCollection new
	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummaryTest' stamp: 'SB 6/3/2021 14:25:16' prior: 50874011!
test18accountSummaryEmptyPortfolio
	
self assertReport: (account2 generateReport: 		MethodAccountSummary  new) EqualsExpectedReport: OrderedCollection new
	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummaryTest' stamp: 'SB 6/3/2021 14:25:38' prior: 50874020!
test18accountSummaryEmptyPortfolio
	
self assertReport: (account2 generateReport: 		MethodAccountSummary  new) EqualsExpectedReport: (OrderedCollection with: 'Balance = 0')
	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test18accountSummaryEmptyPortfolio stamp: 'SB 6/3/2021 14:25:40'!
PASSED!
!Portfolio2Test methodsFor: 'accountSummaryTest' stamp: 'SB 6/3/2021 14:27:32' prior: 50873611!
test20accountSummaryPortfolioWithTwoAccount
	| mensajeEsperado|
	
	portfolio1 add: account1.
	portfolio1 add: account2.
	Deposit register: 150 on: account1.
	Withdraw register: 100 on: account2.
	Transfer from: account1 to: account2 withAmount: 300.
	

	mensajeEsperado:= OrderedCollection with: 'Deposito por 150' with: 'Salida por transferencia de 300' with: 'Extraccion por 100' with: 'Entrada por transferencia de 300' with: 'Balance = 50'.

	self assert: ((portfolio1 generateReport: 		MethodAccountSummary  new) = mensajeEsperado) .

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test20accountSummaryPortfolioWithTwoAccount stamp: 'SB 6/3/2021 14:27:35'!
PASSED!
!Portfolio2Test methodsFor: 'accountSummaryTest' stamp: 'SB 6/3/2021 14:27:49' prior: 50874042!
test20accountSummaryPortfolioWithTwoAccount
	| mensajeEsperado|
	
	portfolio1 add: account1.
	portfolio1 add: account2.
	Deposit register: 150 on: account1.
	Withdraw register: 100 on: account2.
	Transfer from: account1 to: account2 withAmount: 300.
	
	mensajeEsperado:= OrderedCollection with: 'Deposito por 150' with: 'Salida por transferencia de 300' with: 'Extraccion por 100' with: 'Entrada por transferencia de 300' with: 'Balance = 50'.

	self assert: ((portfolio1 generateReport: 		MethodAccountSummary  new) = mensajeEsperado) .

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummaryTest' stamp: 'SB 6/3/2021 14:29:13' prior: 50873635!
test21accountSummaryPortfolioWithPortfolio
	| mensajeEsperado|
	
	portfolio1 add: account1.
	portfolio2 add: portfolio1.
	Deposit register: 150 on: account1.
	Withdraw register: 100 on: account1.
	Transfer from: account1 to: account2 withAmount: 300.
	

	mensajeEsperado:= OrderedCollection with: 'Deposito por 150' with: 'Extraccion por 100' with: 'Salida por transferencia de 300' with: 'Balance = -250'.	
	self assert: ((portfolio2 generateReport: 		MethodAccountSummary  new) = mensajeEsperado) .
	
	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummaryTest' stamp: 'SB 6/3/2021 14:30:08' prior: 50874066!
test20accountSummaryPortfolioWithTwoAccount
	| mensajeEsperado|
	
	portfolio1 add: account1.
	portfolio1 add: account2.
	Deposit register: 150 on: account1.
	Withdraw register: 100 on: account2.
	Transfer from: account1 to: account2 withAmount: 300.
	
	mensajeEsperado:= OrderedCollection with: 'Deposito por 150' with: 'Salida por transferencia de 300' with: 'Extraccion por 100' with: 'Entrada por transferencia de 300' with: 'Balance = 50'.


	self assert: (portfolio1 generateReport: 		MethodAccountSummary  new) equals: mensajeEsperado .

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummaryTest' stamp: 'SB 6/3/2021 14:30:13' prior: 50874107!
test20accountSummaryPortfolioWithTwoAccount
	| mensajeEsperado|
	
	portfolio1 add: account1.
	portfolio1 add: account2.
	Deposit register: 150 on: account1.
	Withdraw register: 100 on: account2.
	Transfer from: account1 to: account2 withAmount: 300.
	
	mensajeEsperado:= OrderedCollection with: 'Deposito por 150' with: 'Salida por transferencia de 300' with: 'Extraccion por 100' with: 'Entrada por transferencia de 300' with: 'Balance = 50'.

	self assert: (portfolio1 generateReport: 		MethodAccountSummary  new) equals: mensajeEsperado .

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummaryTest' stamp: 'SB 6/3/2021 14:30:21' prior: 50874128!
test20accountSummaryPortfolioWithTwoAccount
	| mensajeEsperado|
	
	portfolio1 add: account1.
	portfolio1 add: account2.
	Deposit register: 150 on: account1.
	Withdraw register: 100 on: account2.
	Transfer from: account1 to: account2 withAmount: 300.
	
	mensajeEsperado:= OrderedCollection with: 'Deposito por 150' with: 'Salida por transferencia de 300' with: 'Extraccion por 100' with: 'Entrada por transferencia de 300' with: 'Balance = 50'.
	self assert: (portfolio1 generateReport: 		MethodAccountSummary  new) equals: mensajeEsperado .

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test20accountSummaryPortfolioWithTwoAccount stamp: 'SB 6/3/2021 14:30:23'!
PASSED!
!Portfolio2Test methodsFor: 'accountSummaryTest' stamp: 'SB 6/3/2021 14:30:46' prior: 50874087!
test21accountSummaryPortfolioWithPortfolio
	| mensajeEsperado|
	
	portfolio1 add: account1.
	portfolio2 add: portfolio1.
	Deposit register: 150 on: account1.
	Withdraw register: 100 on: account1.
	Transfer from: account1 to: account2 withAmount: 300.
	

	mensajeEsperado:= OrderedCollection with: 'Deposito por 150' with: 'Extraccion por 100' with: 'Salida por transferencia de 300' with: 'Balance = -250'.	
	self assert: ((portfolio2 generateReport: 		MethodAccountSummary  new) = mensajeEsperado) .
	self assert: (portfolio2 generateReport: 		MethodAccountSummary  new) equals: mensajeEsperado .
	
	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummaryTest' stamp: 'SB 6/3/2021 14:30:51' prior: 50874173!
test21accountSummaryPortfolioWithPortfolio
	| mensajeEsperado|
	
	portfolio1 add: account1.
	portfolio2 add: portfolio1.
	Deposit register: 150 on: account1.
	Withdraw register: 100 on: account1.
	Transfer from: account1 to: account2 withAmount: 300.
	

	mensajeEsperado:= OrderedCollection with: 'Deposito por 150' with: 'Extraccion por 100' with: 'Salida por transferencia de 300' with: 'Balance = -250'.	
	self assert: (portfolio2 generateReport: 		MethodAccountSummary  new) equals: mensajeEsperado .
	
	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test21accountSummaryPortfolioWithPortfolio stamp: 'SB 6/3/2021 14:30:54'!
PASSED!
!Portfolio2Test methodsFor: 'accountSummaryTest' stamp: 'SB 6/3/2021 14:31:41' prior: 50873683!
test19accountSummaryPortfolioWithOneAccount
	
	Deposit register: 100 on: account1.
	Withdraw register: 150 on: account1.
	Transfer from: account1 to: account2 withAmount: 150.
	Transfer from: account2 to: account1 withAmount: 350.
	portfolio1 add: account1.
	
	self assert: ((portfolio1 generateReport: 		MethodAccountSummary  new) = (account1 generateReport: 		MethodAccountSummary  new)) .

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummaryTest' stamp: 'SB 6/3/2021 14:31:59' prior: 50874196!
test21accountSummaryPortfolioWithPortfolio
	| mensajeEsperado|
	
	portfolio1 add: account1.
	portfolio2 add: portfolio1.
	Deposit register: 150 on: account1.
	Withdraw register: 100 on: account1.
	Transfer from: account1 to: account2 withAmount: 300.
	
	mensajeEsperado:= OrderedCollection with: 'Deposito por 150' with: 'Extraccion por 100' with: 'Salida por transferencia de 300' with: 'Balance = -250'.	
	self assert: (portfolio2 generateReport: 		MethodAccountSummary  new) equals: mensajeEsperado .
	
	

	
	
	

	
	! !
!Account methodsFor: 'nil' stamp: 'SB 6/3/2021 14:33:33'!
generatePartialReport: aReportGenerator
	self subclassResponsibility .! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 14:34:32' prior: 50870085 overrides: 50874254!
generatePartialReport: aReportGenerator
	transactions do: [:aTransaction| aTransaction reportTo: aReportGenerator].
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 14:34:46' prior: 50869111!
generateReport: aReportGenerator
	self generatePartialReport: aReportGenerator .
	^aReportGenerator finishReport.
	! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'SB 6/3/2021 14:34:51'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'SB 6/3/2021 14:34:51'!
PASSED!

!testRun: #Portfolio2Test #test03transferSenderCannotBeEqualToReceiver stamp: 'SB 6/3/2021 14:34:51'!
PASSED!

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'SB 6/3/2021 14:34:51'!
PASSED!

!testRun: #Portfolio2Test #test05tRecieverLegKnowsSenderLeg stamp: 'SB 6/3/2021 14:34:51'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'SB 6/3/2021 14:34:51'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'SB 6/3/2021 14:34:51'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'SB 6/3/2021 14:34:51'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'SB 6/3/2021 14:34:51'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'SB 6/3/2021 14:34:51'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'SB 6/3/2021 14:34:51'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'SB 6/3/2021 14:34:51'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'SB 6/3/2021 14:34:51'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'SB 6/3/2021 14:34:51'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'SB 6/3/2021 14:34:51'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'SB 6/3/2021 14:34:51'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'SB 6/3/2021 14:34:51'!
PASSED!

!testRun: #Portfolio2Test #test18accountSummaryEmptyPortfolio stamp: 'SB 6/3/2021 14:34:51'!
PASSED!

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithOneAccount stamp: 'SB 6/3/2021 14:34:51'!
PASSED!

!testRun: #Portfolio2Test #test20accountSummaryPortfolioWithTwoAccount stamp: 'SB 6/3/2021 14:34:51'!
PASSED!

!testRun: #Portfolio2Test #test21accountSummaryPortfolioWithPortfolio stamp: 'SB 6/3/2021 14:34:51'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'SB 6/3/2021 14:34:51'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'SB 6/3/2021 14:34:51'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'SB 6/3/2021 14:34:51'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'SB 6/3/2021 14:34:51'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'SB 6/3/2021 14:34:51'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'SB 6/3/2021 14:34:51'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'SB 6/3/2021 14:34:51'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'SB 6/3/2021 14:34:52'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'SB 6/3/2021 14:34:52'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'SB 6/3/2021 14:34:52'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'SB 6/3/2021 14:34:52'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'SB 6/3/2021 14:34:52'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'SB 6/3/2021 14:34:52'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'SB 6/3/2021 14:34:52'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'SB 6/3/2021 14:34:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SB 6/3/2021 14:34:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SB 6/3/2021 14:34:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SB 6/3/2021 14:34:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SB 6/3/2021 14:34:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SB 6/3/2021 14:34:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SB 6/3/2021 14:34:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SB 6/3/2021 14:34:52'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 14:36:00' prior: 50870092!
generateReport: aReportMethod 

	self generatePartialReport:  aReportMethod .
	^aReportMethod finishReport.! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #Portfolio2Test #test03transferSenderCannotBeEqualToReceiver stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #Portfolio2Test #test05tRecieverLegKnowsSenderLeg stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #Portfolio2Test #test18accountSummaryEmptyPortfolio stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithOneAccount stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #Portfolio2Test #test20accountSummaryPortfolioWithTwoAccount stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #Portfolio2Test #test21accountSummaryPortfolioWithPortfolio stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SB 6/3/2021 14:36:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SB 6/3/2021 14:36:04'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 14:36:11' prior: 50872426 overrides: 50874254!
generatePartialReport: aReportMethod

	accounts do:[:anAccount| anAccount generatePartialReport: aReportMethod].
! !
!Account methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 14:36:21'!
generateReport: aReportGenerator
	self subclassResponsibility .! !

----QUIT----(3 June 2021 14:50:41) CuisUniversity-4532.image priorSource: 17248492!

----STARTUP---- (3 June 2021 15:18:40) as /home/sebasbocaccio/Desktop/FACU/Inge1/linux64/CuisUniversity-4532.image!


!classRenamed: #ReportMethod as: #Report stamp: 'SB 6/3/2021 15:21:59'!
Smalltalk renameClassNamed: #ReportMethod as: #Report!

!classRenamed: #MethodAccountSummary as: #AccountSummary stamp: 'SB 6/3/2021 15:22:07'!
Smalltalk renameClassNamed: #MethodAccountSummary as: #AccountSummary!
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 15:22:08' prior: 50874235!
test21accountSummaryPortfolioWithPortfolio
	| mensajeEsperado|
	
	portfolio1 add: account1.
	portfolio2 add: portfolio1.
	Deposit register: 150 on: account1.
	Withdraw register: 100 on: account1.
	Transfer from: account1 to: account2 withAmount: 300.
	
	mensajeEsperado:= OrderedCollection with: 'Deposito por 150' with: 'Extraccion por 100' with: 'Salida por transferencia de 300' with: 'Balance = -250'.	
	self assert: (portfolio2 generateReport: 		AccountSummary  new) equals: mensajeEsperado .
	
	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 15:22:08' prior: 50873997!
test12accountSummaryTwoWithdrawAmount100

	Withdraw register: 100 on: account1.
	Withdraw register: 150 on: account1.

	self assertReport: (account1 generateReport: 		AccountSummary  new) EqualsExpectedReport:(OrderedCollection with: 'Extraccion por 100' with: 'Extraccion por 150' with:'Balance = -250')

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 15:22:08' prior: 50873721!
test09accountSummaryDepositAmount100
	
	Deposit register: 100 on: account1.
	
	self assertReport: (account1 generateReport: 		AccountSummary  new)         EqualsExpectedReport:(OrderedCollection with: 'Deposito por 100' with:'Balance = 100')
	

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 15:22:08' prior: 50874149!
test20accountSummaryPortfolioWithTwoAccount
	| mensajeEsperado|
	
	portfolio1 add: account1.
	portfolio1 add: account2.
	Deposit register: 150 on: account1.
	Withdraw register: 100 on: account2.
	Transfer from: account1 to: account2 withAmount: 300.
	
	mensajeEsperado:= OrderedCollection with: 'Deposito por 150' with: 'Salida por transferencia de 300' with: 'Extraccion por 100' with: 'Entrada por transferencia de 300' with: 'Balance = 50'.
	self assert: (portfolio1 generateReport: 		AccountSummary  new) equals: mensajeEsperado .

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 15:22:08' prior: 50874219!
test19accountSummaryPortfolioWithOneAccount
	
	Deposit register: 100 on: account1.
	Withdraw register: 150 on: account1.
	Transfer from: account1 to: account2 withAmount: 150.
	Transfer from: account2 to: account1 withAmount: 350.
	portfolio1 add: account1.
	
	self assert: ((portfolio1 generateReport: 		AccountSummary  new) = (account1 generateReport: 		AccountSummary  new)) .

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 15:22:08' prior: 50873788!
test11accountSummaryWithdrawAmount100
	
	Withdraw register: 100 on: account1.

	self assertReport: (account1 generateReport: 		AccountSummary  new)         EqualsExpectedReport:(OrderedCollection with: 'Extraccion por 100' with:'Balance = -100')

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 15:22:08' prior: 50874029!
test18accountSummaryEmptyPortfolio
	
self assertReport: (account2 generateReport: 		AccountSummary  new) EqualsExpectedReport: (OrderedCollection with: 'Balance = 0')
	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 15:22:08' prior: 50873771!
test10accountSummaryTwoDepositAmount250
	
	Deposit register: 100 on: account1.
	Deposit register: 150 on: account1.

	self assertReport: (account1 generateReport: 		AccountSummary  new)         EqualsExpectedReport:(OrderedCollection with: 'Deposito por 100' with: 'Deposito por 150'with: 'Balance = 250')
	

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 15:22:08' prior: 50873968!
test14accountSummaryInboundTransfer
	
	Transfer from: account1 to: account2  withAmount: 200.	
	
	self assertReport: (account2 generateReport: 		AccountSummary  new) EqualsExpectedReport:( OrderedCollection with: 'Entrada por transferencia de 200'with: 'Balance = 200')

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 15:22:08' prior: 50873984!
test13accountSummaryOutboundTransfer
	
	Transfer from: account1 to: account2  withAmount: 200.	
	
	self assertReport: (account1 generateReport: 		AccountSummary  new) EqualsExpectedReport:( OrderedCollection with: 'Salida por transferencia de 200'with:'Balance = -200')

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 15:22:08' prior: 50873706!
test08accountSummaryBalanceAmount0
	
self assertReport: (account1 generateReport: 		AccountSummary  new)         EqualsExpectedReport:(OrderedCollection with: 'Balance = 0')
	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #Portfolio2Test #test03transferSenderCannotBeEqualToReceiver stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #Portfolio2Test #test05tRecieverLegKnowsSenderLeg stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #Portfolio2Test #test18accountSummaryEmptyPortfolio stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithOneAccount stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #Portfolio2Test #test20accountSummaryPortfolioWithTwoAccount stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #Portfolio2Test #test21accountSummaryPortfolioWithPortfolio stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SB 6/3/2021 15:22:20'!
PASSED!

!classRenamed: #AccountSummary as: #AccountSummaryReport stamp: 'SB 6/3/2021 15:22:28'!
Smalltalk renameClassNamed: #AccountSummary as: #AccountSummaryReport!
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 15:22:29' prior: 50874613!
test21accountSummaryPortfolioWithPortfolio
	| mensajeEsperado|
	
	portfolio1 add: account1.
	portfolio2 add: portfolio1.
	Deposit register: 150 on: account1.
	Withdraw register: 100 on: account1.
	Transfer from: account1 to: account2 withAmount: 300.
	
	mensajeEsperado:= OrderedCollection with: 'Deposito por 150' with: 'Extraccion por 100' with: 'Salida por transferencia de 300' with: 'Balance = -250'.	
	self assert: (portfolio2 generateReport: 		AccountSummaryReport  new) equals: mensajeEsperado .
	
	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 15:22:29' prior: 50874633!
test12accountSummaryTwoWithdrawAmount100

	Withdraw register: 100 on: account1.
	Withdraw register: 150 on: account1.

	self assertReport: (account1 generateReport: 		AccountSummaryReport  new) EqualsExpectedReport:(OrderedCollection with: 'Extraccion por 100' with: 'Extraccion por 150' with:'Balance = -250')

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 15:22:29' prior: 50874647!
test09accountSummaryDepositAmount100
	
	Deposit register: 100 on: account1.
	
	self assertReport: (account1 generateReport: 		AccountSummaryReport  new)         EqualsExpectedReport:(OrderedCollection with: 'Deposito por 100' with:'Balance = 100')
	

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 15:22:29' prior: 50874659!
test20accountSummaryPortfolioWithTwoAccount
	| mensajeEsperado|
	
	portfolio1 add: account1.
	portfolio1 add: account2.
	Deposit register: 150 on: account1.
	Withdraw register: 100 on: account2.
	Transfer from: account1 to: account2 withAmount: 300.
	
	mensajeEsperado:= OrderedCollection with: 'Deposito por 150' with: 'Salida por transferencia de 300' with: 'Extraccion por 100' with: 'Entrada por transferencia de 300' with: 'Balance = 50'.
	self assert: (portfolio1 generateReport: 		AccountSummaryReport  new) equals: mensajeEsperado .

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 15:22:29' prior: 50874680!
test19accountSummaryPortfolioWithOneAccount
	
	Deposit register: 100 on: account1.
	Withdraw register: 150 on: account1.
	Transfer from: account1 to: account2 withAmount: 150.
	Transfer from: account2 to: account1 withAmount: 350.
	portfolio1 add: account1.
	
	self assert: ((portfolio1 generateReport: 		AccountSummaryReport  new) = (account1 generateReport: 		AccountSummaryReport  new)) .

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 15:22:29' prior: 50874696!
test11accountSummaryWithdrawAmount100
	
	Withdraw register: 100 on: account1.

	self assertReport: (account1 generateReport: 		AccountSummaryReport  new)         EqualsExpectedReport:(OrderedCollection with: 'Extraccion por 100' with:'Balance = -100')

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 15:22:29' prior: 50874708!
test18accountSummaryEmptyPortfolio
	
self assertReport: (account2 generateReport: 		AccountSummaryReport  new) EqualsExpectedReport: (OrderedCollection with: 'Balance = 0')
	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 15:22:29' prior: 50874717!
test10accountSummaryTwoDepositAmount250
	
	Deposit register: 100 on: account1.
	Deposit register: 150 on: account1.

	self assertReport: (account1 generateReport: 		AccountSummaryReport  new)         EqualsExpectedReport:(OrderedCollection with: 'Deposito por 100' with: 'Deposito por 150'with: 'Balance = 250')
	

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 15:22:29' prior: 50874731!
test14accountSummaryInboundTransfer
	
	Transfer from: account1 to: account2  withAmount: 200.	
	
	self assertReport: (account2 generateReport: 		AccountSummaryReport  new) EqualsExpectedReport:( OrderedCollection with: 'Entrada por transferencia de 200'with: 'Balance = 200')

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 15:22:29' prior: 50874744!
test13accountSummaryOutboundTransfer
	
	Transfer from: account1 to: account2  withAmount: 200.	
	
	self assertReport: (account1 generateReport: 		AccountSummaryReport  new) EqualsExpectedReport:( OrderedCollection with: 'Salida por transferencia de 200'with:'Balance = -200')

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 15:22:29' prior: 50874757!
test08accountSummaryBalanceAmount0
	
self assertReport: (account1 generateReport: 		AccountSummaryReport  new)         EqualsExpectedReport:(OrderedCollection with: 'Balance = 0')
	

	
	
	

	
	! !

!classRenamed: #MethodTransferNet as: #TransferNetReport stamp: 'SB 6/3/2021 15:22:44'!
Smalltalk renameClassNamed: #MethodTransferNet as: #TransferNetReport!
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 15:22:45' prior: 50873852!
test17transferNetOutboundTransaction100
	
	Transfer from: account1 to:account2  	withAmount:100.
	self assert: (account1 generateReport: TransferNetReport new)  equals: 100 negated.
	
	

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 15:22:45' prior: 50873568!
test16transferNetInboundTransaction100
	

	Transfer from: account1 to:account2  	withAmount:100.
	self assert: (account2 generateReport: TransferNetReport new)  equals: 100.
	
	

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'SB 6/3/2021 15:22:45' prior: 50873841!
test15transferNetNoTransaction
	
	self assert: (account1 generateReport: TransferNetReport new)  equals: 0.
	
	

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #Portfolio2Test #test03transferSenderCannotBeEqualToReceiver stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #Portfolio2Test #test05tRecieverLegKnowsSenderLeg stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #Portfolio2Test #test18accountSummaryEmptyPortfolio stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithOneAccount stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #Portfolio2Test #test20accountSummaryPortfolioWithTwoAccount stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #Portfolio2Test #test21accountSummaryPortfolioWithPortfolio stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SB 6/3/2021 15:22:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SB 6/3/2021 15:22:54'!
PASSED!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (26 to: 42)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (61 to: 77)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{79 to: 81})
		cover: (50 to: 56)
		declaredAt: (50 to: 56).! !
!Behavior method!
initialize
	[ super initialize ] valueCoveringAll:
		{20 to: 29}.
	(transactions _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (33 to: 44)
		declaredAt: (33 to: 44).
	(transfers _ [
	(OrderedCollection
		cover: (86 to: 102)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (73 to: 81)
		declaredAt: (73 to: 81).! !
!Behavior method!
from: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount
	| aTransfer |
	(aTransfer _ [
	(Transfer
		cover: (95 to: 102)
		declaredAt: (95 to: 102)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (84 to: 92)
		declaredAt: (72 to: 80).
	[
	(aTransfer
		cover: (110 to: 118)
		declaredAt: (72 to: 80))
		madeFrom:
			(aReceptiveAccount
				cover: (130 to: 146)
				declaredAt: (7 to: 23))
		to:
			(aReceptiveAccount2
				cover: (152 to: 169)
				declaredAt: (29 to: 46))
		withAmount:
			(anAmount
				cover: (184 to: 191)
				declaredAt: (60 to: 67)) ] valueCoveringAll:
		{120 to: 128. 148 to: 150. 172 to: 182}.
	^ aTransfer
		cover: (196 to: 204)
		declaredAt: (72 to: 80).! !
!Behavior method!
madeFrom: aSenderAccount to: aRecieverAccount withAmount: anAmount
	[
	(self coverAll:
		{71 to: 74})
		assertValidTransferWithSender:
			(aSenderAccount
				cover: (107 to: 120)
				declaredAt: (11 to: 24))
		aReceiver:
			(aRecieverAccount
				cover: (133 to: 148)
				declaredAt: (30 to: 45))
		andAmount:
			(anAmount
				cover: (161 to: 168)
				declaredAt: (59 to: 66)) ] valueCoveringAll:
		{76 to: 105. 122 to: 131. 150 to: 159}.
	[
	(self coverAll:
		{174 to: 177})
		setTransferLegsUsingSenderLeg:
			(aRecieverAccount
				cover: (210 to: 225)
				declaredAt: (30 to: 45))
		andReceiverLeg:
			(aSenderAccount
				cover: (243 to: 256)
				declaredAt: (11 to: 24)) ] valueCoveringAll:
		{179 to: 208. 227 to: 241}.
	(amount _ anAmount
		cover: (269 to: 276)
		declaredAt: (59 to: 66))
		cover: (260 to: 265)
		declaredAt: (260 to: 265).! !
!Behavior method!
assertValidTransferWithSender: aSender aReceiver: aReceiver andAmount: anAmount
	[
	([
	(anAmount
		cover: (83 to: 90)
		declaredAt: (72 to: 79)) <=
		(0 coverAll:
			{94 to: 94}) ] valueCoveringAll:
		{92 to: 93}) ifTrue: [
		[
		(self coverAll:
			{104 to: 107}) error:
			([
			([
			(self coverAll:
				{116 to: 119}) class ] valueCoveringAll:
				{121 to: 125}) negativeValueTransfer ] valueCoveringAll:
				{127 to: 147}) ] valueCoveringAll:
			{109 to: 114} ]] valueCoveringAll:
		{96 to: 102}.
	[
	([
	(aSender
		cover: (153 to: 159)
		declaredAt: (32 to: 38)) =
		(aReceiver
			cover: (163 to: 171)
			declaredAt: (51 to: 59)) ] valueCoveringAll:
		{161 to: 161}) ifTrue: [
		[
		(self coverAll:
			{181 to: 184}) error:
			([
			([
			(self coverAll:
				{193 to: 196}) class ] valueCoveringAll:
				{198 to: 202}) sameLegsTransfer ] valueCoveringAll:
				{204 to: 219}) ] valueCoveringAll:
			{186 to: 191} ]] valueCoveringAll:
		{173 to: 179}.! !
!Behavior method!
setTransferLegsUsingSenderLeg: aRecieverAccount andReceiverLeg: aSenderAccount
	(sender _ [
	(SenderLeg
		cover: (90 to: 98)
		declaredAt: (90 to: 98)) forTransfer:
		(self coverAll:
			{113 to: 116}) ] valueCoveringAll:
		{100 to: 111})
		cover: (82 to: 87)
		declaredAt: (82 to: 87).
	(reciever _ [
	(RecieverLeg
		cover: (131 to: 141)
		declaredAt: (131 to: 141)) forTransfer:
		(self coverAll:
			{156 to: 159}) ] valueCoveringAll:
		{143 to: 154})
		cover: (120 to: 127)
		declaredAt: (120 to: 127).
	[
	(aSenderAccount
		cover: (163 to: 176)
		declaredAt: (65 to: 78)) registerTransfer:
		(sender
			cover: (196 to: 201)
			declaredAt: (82 to: 87)) ] valueCoveringAll:
		{178 to: 194}.
	[
	(aRecieverAccount
		cover: (205 to: 220)
		declaredAt: (32 to: 47)) registerTransfer:
		(reciever
			cover: (240 to: 247)
			declaredAt: (120 to: 127)) ] valueCoveringAll:
		{222 to: 238}.! !
!Behavior method!
forTransfer: aTransfer
	^ [
	([
	(self coverAll:
		{27 to: 30}) new ] valueCoveringAll:
		{32 to: 34}) initializeFor:
		(aTransfer
			cover: (51 to: 59)
			declaredAt: (14 to: 22)) ] valueCoveringAll:
		{36 to: 49}.! !
!Behavior method!
initializeFor: aTransfer
	(transfer _ aTransfer
		cover: (39 to: 47)
		declaredAt: (16 to: 24))
		cover: (27 to: 34)
		declaredAt: (27 to: 34).! !
!Behavior method!
registerTransfer: aTransfer
	[
	(transactions
		cover: (31 to: 42)
		declaredAt: (31 to: 42)) add:
		(aTransfer
			cover: (49 to: 57)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{44 to: 47}.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (14 to: 25)
		declaredAt: (14 to: 25))
		inject:
			(0 coverAll:
				{38 to: 38})
		into: [ :currentBalance :transaction |
			[
			(transaction
				cover: (81 to: 91)
				declaredAt: (67 to: 77)) affectBalance:
				(currentBalance
					cover: (108 to: 121)
					declaredAt: (51 to: 64)) ] valueCoveringAll:
				{93 to: 106} ]] valueCoveringAll:
		{30 to: 36. 42 to: 46}.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		([
		(transfer
			cover: (39 to: 46)
			declaredAt: (39 to: 46)) value ] valueCoveringAll:
			{48 to: 52}) ] valueCoveringAll:
		{37 to: 37}.! !
!Behavior method!
value
	^ amount
		cover: (9 to: 14)
		declaredAt: (9 to: 14).! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'SB 6/3/2021 15:24:31'!
PASSED!
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		([
		(transfer
			cover: (39 to: 46)
			declaredAt: (39 to: 46)) value ] valueCoveringAll:
			{48 to: 52}) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'SB 6/3/2021 15:24:31'!
PASSED!
!Behavior method!
sameLegsTransfer
	^ 'Sender leg cannot be the same as the receiver leg' coverAll:
		{21 to: 71}.! !

!testRun: #Portfolio2Test #test03transferSenderCannotBeEqualToReceiver stamp: 'SB 6/3/2021 15:24:31'!
PASSED!
!Behavior method!
senderLeg
	^ sender
		cover: (13 to: 18)
		declaredAt: (13 to: 18).! !
!Behavior method!
otherLeg
	^ [
	(transfer
		cover: (13 to: 20)
		declaredAt: (13 to: 20)) recieverLeg ] valueCoveringAll:
		{22 to: 32}.! !
!Behavior method!
recieverLeg
	^ reciever
		cover: (15 to: 22)
		declaredAt: (15 to: 22).! !

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'SB 6/3/2021 15:24:31'!
PASSED!
!Behavior method!
otherLeg
	^ [
	(transfer
		cover: (12 to: 19)
		declaredAt: (12 to: 19)) senderLeg ] valueCoveringAll:
		{22 to: 30}.! !

!testRun: #Portfolio2Test #test05tRecieverLegKnowsSenderLeg stamp: 'SB 6/3/2021 15:24:31'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'SB 6/3/2021 15:24:31'!
PASSED!
!Behavior method!
negativeValueTransfer
	^ 'Cannot do a negative value transfer' coverAll:
		{25 to: 61}.! !

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'SB 6/3/2021 15:24:31'!
PASSED!
!Behavior method!
initialize
	(reporte _ [
	(OrderedCollection
		cover: (23 to: 39)
		declaredAt: (23 to: 39)) new ] valueCoveringAll:
		{41 to: 43})
		cover: (13 to: 19)
		declaredAt: (13 to: 19).
	(balance _ 0 coverAll:
		{56 to: 56})
		cover: (47 to: 53)
		declaredAt: (47 to: 53).! !
!Behavior method!
generateReport: aReportGenerator
	[
	(self coverAll:
		{35 to: 38}) generatePartialReport:
		(aReportGenerator
			cover: (63 to: 78)
			declaredAt: (17 to: 32)) ] valueCoveringAll:
		{40 to: 61}.
	^ [
	(aReportGenerator
		cover: (84 to: 99)
		declaredAt: (17 to: 32)) finishReport ] valueCoveringAll:
		{101 to: 112}.! !
!Behavior method!
generatePartialReport: aReportGenerator
	[
	(transactions
		cover: (42 to: 53)
		declaredAt: (42 to: 53)) do: [ :aTransaction |
		[
		(aTransaction
			cover: (75 to: 86)
			declaredAt: (61 to: 72)) reportTo:
			(aReportGenerator
				cover: (98 to: 113)
				declaredAt: (24 to: 39)) ] valueCoveringAll:
			{88 to: 96} ]] valueCoveringAll:
		{55 to: 57}.! !
!Behavior method!
finishReport
	[
	(reporte
		cover: (25 to: 31)
		declaredAt: (25 to: 31)) addLast:
		([
		('Balance = ' coverAll:
			{43 to: 54}) ,
			([
			(balance
				cover: (57 to: 63)
				declaredAt: (57 to: 63)) asString ] valueCoveringAll:
				{65 to: 72}) ] valueCoveringAll:
			{55 to: 55}) ] valueCoveringAll:
		{33 to: 40}.
	^ reporte
		cover: (79 to: 85)
		declaredAt: (25 to: 31).! !

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'SB 6/3/2021 15:24:31'!
PASSED!
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
reportTo: aMethodAccountSummary
	[
	(aMethodAccountSummary
		cover: (34 to: 54)
		declaredAt: (11 to: 31)) reportDeposit:
		(self coverAll:
			{71 to: 74}) ] valueCoveringAll:
		{56 to: 69}.! !
!Behavior method!
reportDeposit: aDeposit
	[
	(reporte
		cover: (27 to: 33)
		declaredAt: (27 to: 33)) add:
		([
		('Deposito por ' coverAll:
			{41 to: 55}) ,
			([
			([
			(aDeposit
				cover: (58 to: 65)
				declaredAt: (16 to: 23)) value ] valueCoveringAll:
				{67 to: 71}) asString ] valueCoveringAll:
				{73 to: 80}) ] valueCoveringAll:
			{56 to: 56}) ] valueCoveringAll:
		{35 to: 38}.
	(balance _ [
	(balance
		cover: (85 to: 91)
		declaredAt: (85 to: 91)) +
		([
		(aDeposit
			cover: (103 to: 110)
			declaredAt: (16 to: 23)) value ] valueCoveringAll:
			{112 to: 116}) ] valueCoveringAll:
		{102 to: 102})
		cover: (95 to: 101)
		declaredAt: (85 to: 91).! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'SB 6/3/2021 15:24:31'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'SB 6/3/2021 15:24:31'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
reportTo: aMethodAccountSummary
	[
	(aMethodAccountSummary
		cover: (34 to: 54)
		declaredAt: (11 to: 31)) reportWithdraw:
		(self coverAll:
			{72 to: 75}) ] valueCoveringAll:
		{56 to: 70}.! !
!Behavior method!
reportWithdraw: aWithdraw
	[
	(reporte
		cover: (29 to: 35)
		declaredAt: (29 to: 35)) add:
		([
		('Extraccion por ' coverAll:
			{43 to: 59}) ,
			([
			([
			(aWithdraw
				cover: (62 to: 70)
				declaredAt: (17 to: 25)) value ] valueCoveringAll:
				{72 to: 76}) asString ] valueCoveringAll:
				{78 to: 85}) ] valueCoveringAll:
			{60 to: 60}) ] valueCoveringAll:
		{37 to: 40}.
	(balance _ [
	(balance
		cover: (90 to: 96)
		declaredAt: (90 to: 96)) -
		([
		(aWithdraw
			cover: (110 to: 118)
			declaredAt: (17 to: 25)) value ] valueCoveringAll:
			{120 to: 124}) ] valueCoveringAll:
		{108 to: 108})
		cover: (100 to: 106)
		declaredAt: (90 to: 96).! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'SB 6/3/2021 15:24:31'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'SB 6/3/2021 15:24:31'!
PASSED!
!Behavior method!
reportTo: aMethodAccountSummary
	[
	(aMethodAccountSummary
		cover: (36 to: 56)
		declaredAt: (11 to: 31)) reportSenderLeg:
		(self coverAll:
			{75 to: 78}) ] valueCoveringAll:
		{58 to: 73}.! !
!Behavior method!
reportSenderLeg: aSenderLeg
	[
	(reporte
		cover: (31 to: 37)
		declaredAt: (31 to: 37)) add:
		([
		('Salida por transferencia de ' coverAll:
			{45 to: 74}) ,
			([
			([
			(aSenderLeg
				cover: (77 to: 86)
				declaredAt: (18 to: 27)) value ] valueCoveringAll:
				{88 to: 92}) asString ] valueCoveringAll:
				{94 to: 101}) ] valueCoveringAll:
			{75 to: 75}) ] valueCoveringAll:
		{39 to: 42}.
	(balance _ [
	(balance
		cover: (106 to: 112)
		declaredAt: (106 to: 112)) -
		([
		(aSenderLeg
			cover: (125 to: 134)
			declaredAt: (18 to: 27)) value ] valueCoveringAll:
			{136 to: 140}) ] valueCoveringAll:
		{124 to: 124})
		cover: (116 to: 122)
		declaredAt: (106 to: 112).! !
!Behavior method!
value
	^ [
	(transfer
		cover: (9 to: 16)
		declaredAt: (9 to: 16)) value ] valueCoveringAll:
		{18 to: 22}.! !

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'SB 6/3/2021 15:24:31'!
PASSED!
!Behavior method!
reportTo: aMethodAccountSummary
	[
	(aMethodAccountSummary
		cover: (34 to: 54)
		declaredAt: (11 to: 31)) reportRecieverLeg:
		(self coverAll:
			{75 to: 78}) ] valueCoveringAll:
		{56 to: 73}.! !
!Behavior method!
reportRecieverLeg: aRecieverLeg
	[
	(reporte
		cover: (35 to: 41)
		declaredAt: (35 to: 41)) add:
		([
		('Entrada por transferencia de ' coverAll:
			{49 to: 79}) ,
			([
			([
			(aRecieverLeg
				cover: (82 to: 93)
				declaredAt: (20 to: 31)) value ] valueCoveringAll:
				{95 to: 99}) asString ] valueCoveringAll:
				{101 to: 108}) ] valueCoveringAll:
			{80 to: 80}) ] valueCoveringAll:
		{43 to: 46}.
	(balance _ [
	(balance
		cover: (113 to: 119)
		declaredAt: (113 to: 119)) +
		([
		(aRecieverLeg
			cover: (132 to: 143)
			declaredAt: (20 to: 31)) value ] valueCoveringAll:
			{145 to: 149}) ] valueCoveringAll:
		{130 to: 130})
		cover: (123 to: 129)
		declaredAt: (113 to: 119).! !
!Behavior method!
value
	^ [
	(transfer
		cover: (9 to: 16)
		declaredAt: (9 to: 16)) value ] valueCoveringAll:
		{18 to: 22}.! !

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'SB 6/3/2021 15:24:31'!
PASSED!
!Behavior method!
initialize
	(balance _ 0 coverAll:
		{24 to: 24})
		cover: (15 to: 21)
		declaredAt: (15 to: 21).! !
!Behavior method!
finishReport
	^ balance
		cover: (27 to: 33)
		declaredAt: (27 to: 33).! !

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'SB 6/3/2021 15:24:31'!
PASSED!
!Behavior method!
reportRecieverLeg: aRecieverLeg
	(balance _ [
	(balance
		cover: (37 to: 43)
		declaredAt: (37 to: 43)) +
		([
		(aRecieverLeg
			cover: (56 to: 67)
			declaredAt: (20 to: 31)) value ] valueCoveringAll:
			{69 to: 73}) ] valueCoveringAll:
		{54 to: 54})
		cover: (47 to: 53)
		declaredAt: (37 to: 43).! !

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'SB 6/3/2021 15:24:31'!
PASSED!
!Behavior method!
reportSenderLeg: aSenderLeg
	(balance _ [
	(balance
		cover: (33 to: 39)
		declaredAt: (33 to: 39)) -
		([
		(aSenderLeg
			cover: (52 to: 61)
			declaredAt: (18 to: 27)) value ] valueCoveringAll:
			{63 to: 67}) ] valueCoveringAll:
		{51 to: 51})
		cover: (43 to: 49)
		declaredAt: (33 to: 39).! !

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'SB 6/3/2021 15:24:31'!
PASSED!

!testRun: #Portfolio2Test #test18accountSummaryEmptyPortfolio stamp: 'SB 6/3/2021 15:24:31'!
PASSED!
!Behavior method!
add: accountToAdd
	[
	(self coverAll:
		{21 to: 24}) assertCanAdd:
		(accountToAdd
			cover: (40 to: 51)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{26 to: 38}.
	[
	(accounts
		cover: (58 to: 65)
		declaredAt: (58 to: 65)) add:
		(accountToAdd
			cover: (72 to: 83)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{67 to: 70}.
	[
	(accountToAdd
		cover: (87 to: 98)
		declaredAt: (6 to: 17)) addedTo:
		(self coverAll:
			{109 to: 112}) ] valueCoveringAll:
		{100 to: 107}.! !
!Behavior method!
assertCanAdd: accountToAdd
	[
	([
	(self coverAll:
		{31 to: 34}) anyRootParentIsComposedBy:
		(accountToAdd
			cover: (63 to: 74)
			declaredAt: (15 to: 26)) ] valueCoveringAll:
		{36 to: 61}) ifTrue: [
		[
		(self coverAll:
			{87 to: 90}) signalCanNotAddAccount ] valueCoveringAll:
			{92 to: 113} ]] valueCoveringAll:
		{77 to: 83}.! !
!Behavior method!
anyRootParentIsComposedBy: accountToAdd
	^ [
	([
	(self coverAll:
		{44 to: 47}) rootParents ] valueCoveringAll:
		{49 to: 59}) anySatisfy: [ :aParent |
		[
		(aParent
			cover: (86 to: 92)
			declaredAt: (76 to: 82)) isComposedBy:
			(accountToAdd
				cover: (108 to: 119)
				declaredAt: (28 to: 39)) ] valueCoveringAll:
			{94 to: 106} ]] valueCoveringAll:
		{61 to: 71}.! !
!Behavior method!
rootParents
	| rootParents |
	(rootParents _ [
	(Set
		cover: (50 to: 52)
		declaredAt: (50 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(self coverAll:
		{60 to: 63}) addRootParentsTo:
		(rootParents
			cover: (83 to: 93)
			declaredAt: (18 to: 28)) ] valueCoveringAll:
		{65 to: 81}.
	^ rootParents
		cover: (101 to: 111)
		declaredAt: (18 to: 28).! !
!Behavior method!
addRootParentsTo: rootParents
	[
	(parents
		cover: (33 to: 39)
		declaredAt: (33 to: 39))
		ifEmpty: [
			[
			(rootParents
				cover: (55 to: 65)
				declaredAt: (19 to: 29)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (96 to: 102)
				declaredAt: (33 to: 39)) do: [ :aParent |
				[
				(aParent
					cover: (121 to: 127)
					declaredAt: (111 to: 117)) addRootParentsTo:
					(rootParents
						cover: (147 to: 157)
						declaredAt: (19 to: 29)) ] valueCoveringAll:
					{129 to: 145} ]] valueCoveringAll:
				{104 to: 106} ]] valueCoveringAll:
		{44 to: 51. 82 to: 92}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	([
	(self coverAll:
		{29 to: 32}) =
		(anAccount
			cover: (36 to: 44)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 34}) or: [
		[
		(accounts
			cover: (52 to: 59)
			declaredAt: (52 to: 59)) anySatisfy: [ :composedAccount |
			[
			([
			(composedAccount
				cover: (95 to: 109)
				declaredAt: (76 to: 90)) isComposedBy:
				(anAccount
					cover: (125 to: 133)
					declaredAt: (15 to: 23)) ] valueCoveringAll:
				{111 to: 123}) or: [
				[
				(anAccount
					cover: (142 to: 150)
					declaredAt: (15 to: 23)) isComposedBy:
					(composedAccount
						cover: (166 to: 180)
						declaredAt: (76 to: 90)) ] valueCoveringAll:
					{152 to: 164} ]] valueCoveringAll:
				{136 to: 138} ]] valueCoveringAll:
			{61 to: 71} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
addedTo: aPortfolio
	^ self.! !
!Behavior method!
generateReport: aReportMethod
	[
	(self coverAll:
		{34 to: 37}) generatePartialReport:
		(aReportMethod
			cover: (63 to: 75)
			declaredAt: (17 to: 29)) ] valueCoveringAll:
		{39 to: 60}.
	^ [
	(aReportMethod
		cover: (81 to: 93)
		declaredAt: (17 to: 29)) finishReport ] valueCoveringAll:
		{95 to: 106}.! !
!Behavior method!
generatePartialReport: aReportMethod
	[
	(accounts
		cover: (40 to: 47)
		declaredAt: (40 to: 47)) do: [ :anAccount |
		[
		(anAccount
			cover: (65 to: 73)
			declaredAt: (54 to: 62)) generatePartialReport:
			(aReportMethod
				cover: (98 to: 110)
				declaredAt: (24 to: 36)) ] valueCoveringAll:
			{75 to: 96} ]] valueCoveringAll:
		{49 to: 51}.! !

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithOneAccount stamp: 'SB 6/3/2021 15:24:31'!
PASSED!
!Behavior method!
isComposedBy: anAccount
	^ [
	(self coverAll:
		{28 to: 31}) =
		(anAccount
			cover: (35 to: 43)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{33 to: 33}.! !

!testRun: #Portfolio2Test #test20accountSummaryPortfolioWithTwoAccount stamp: 'SB 6/3/2021 15:24:32'!
PASSED!
!Behavior method!
addedTo: aPortfolio
	[
	(parents
		cover: (25 to: 31)
		declaredAt: (25 to: 31)) add:
		(aPortfolio
			cover: (38 to: 47)
			declaredAt: (10 to: 19)) ] valueCoveringAll:
		{33 to: 36}.! !

!testRun: #Portfolio2Test #test21accountSummaryPortfolioWithPortfolio stamp: 'SB 6/3/2021 15:24:32'!
PASSED!
!Behavior method!
balance
	^ [
	(accounts
		cover: (13 to: 20)
		declaredAt: (13 to: 20))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (42 to: 50)
				declaredAt: (30 to: 38)) balance ] valueCoveringAll:
				{52 to: 58} ]
		ifEmpty: [
			0 coverAll:
				{73 to: 73} ]] valueCoveringAll:
		{22 to: 25. 62 to: 69}.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'SB 6/3/2021 15:24:32'!
PASSED!
!Behavior method!
with: anAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}.
	[ cascadeReceiver add: anAccount ] valueCoveringAll:
		{32 to: 45}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{50 to: 57} ] value.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'SB 6/3/2021 15:24:32'!
PASSED!
!Behavior method!
with: anAccount with: anotherAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{41 to: 44}) new ] valueCoveringAll:
		{46 to: 48}.
	[ cascadeReceiver add: anAccount ] valueCoveringAll:
		{53 to: 66}.
	[ cascadeReceiver add: anotherAccount ] valueCoveringAll:
		{71 to: 89}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{94 to: 101} ] value.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (27 to: 34)
		declaredAt: (16 to: 23)) -
		(value
			cover: (38 to: 42)
			declaredAt: (38 to: 42)) ] valueCoveringAll:
		{36 to: 36}.! !

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'SB 6/3/2021 15:24:32'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) anySatisfy: [ :anAccount |
		[
		(anAccount
			cover: (68 to: 76)
			declaredAt: (56 to: 64)) hasRegistered:
			(aTransaction
				cover: (93 to: 104)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{78 to: 91} ]] valueCoveringAll:
		{41 to: 51}.! !

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'SB 6/3/2021 15:24:32'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'SB 6/3/2021 15:24:32'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'SB 6/3/2021 15:24:32'!
PASSED!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (53 to: 69)
		declaredAt: (53 to: 69)) new ] valueCoveringAll:
		{71 to: 73})
		cover: (37 to: 48)
		declaredAt: (19 to: 30).
	[
	(accounts
		cover: (77 to: 84)
		declaredAt: (77 to: 84)) do: [ :anAccount |
		[
		(anAccount
			cover: (105 to: 113)
			declaredAt: (93 to: 101)) addTransactionsTo:
			(transactions
				cover: (134 to: 145)
				declaredAt: (19 to: 30)) ] valueCoveringAll:
			{115 to: 132} ]] valueCoveringAll:
		{86 to: 88}.
	^ transactions
		cover: (154 to: 165)
		declaredAt: (19 to: 30).! !

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'SB 6/3/2021 15:24:32'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(aCollectionOfTransactions
		cover: (48 to: 72)
		declaredAt: (20 to: 44)) addAll:
		(transactions
			cover: (82 to: 93)
			declaredAt: (82 to: 93)) ] valueCoveringAll:
		{74 to: 80}.! !

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'SB 6/3/2021 15:24:32'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(accounts
		cover: (48 to: 55)
		declaredAt: (48 to: 55)) do: [ :anAccount |
		[
		(anAccount
			cover: (76 to: 84)
			declaredAt: (64 to: 72)) addTransactionsTo:
			(aCollectionOfTransactions
				cover: (105 to: 129)
				declaredAt: (20 to: 44)) ] valueCoveringAll:
			{86 to: 103} ]] valueCoveringAll:
		{57 to: 59}.! !

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'SB 6/3/2021 15:24:32'!
PASSED!
!Behavior method!
signalCanNotAddAccount
	[
	(self coverAll:
		{27 to: 30}) error:
		([
		([
		(self coverAll:
			{39 to: 42}) class ] valueCoveringAll:
			{44 to: 48}) canNotAddAccountErrorMessage ] valueCoveringAll:
			{50 to: 77}) ] valueCoveringAll:
		{32 to: 37}.! !
!Behavior method!
canNotAddAccountErrorMessage
	^ 'Can not add repeated account to a portfolio' coverAll:
		{34 to: 78}.! !
!Behavior method!
accountsSize
	^ [
	(accounts
		cover: (18 to: 25)
		declaredAt: (18 to: 25)) size ] valueCoveringAll:
		{27 to: 30}.! !
!Behavior method!
accountsIncludes: anAccount
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) includes:
		(anAccount
			cover: (51 to: 59)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{41 to: 49}.! !

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'SB 6/3/2021 15:24:32'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'SB 6/3/2021 15:24:32'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'SB 6/3/2021 15:24:32'!
PASSED!
!Behavior method!
accountsIsEmpty
	^ [
	(accounts
		cover: (21 to: 28)
		declaredAt: (21 to: 28)) isEmpty ] valueCoveringAll:
		{30 to: 36}.! !

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'SB 6/3/2021 15:24:32'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'SB 6/3/2021 15:24:32'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'SB 6/3/2021 15:24:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SB 6/3/2021 15:24:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SB 6/3/2021 15:24:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SB 6/3/2021 15:24:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SB 6/3/2021 15:24:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SB 6/3/2021 15:24:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SB 6/3/2021 15:24:32'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SB 6/3/2021 15:24:32'!
PASSED!
!Portfolio2Test methodsFor: 'transferNetTest' stamp: 'SB 6/3/2021 15:27:09'!
test17transferNetWithDepositAndWithdrawAreNotConsidered
	
	Transfer from: account1 to:account2  	withAmount:100.
	self assert: (account1 generateReport: TransferNetReport new)  equals: 100 negated.
	
	

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferNetTest' stamp: 'SB 6/3/2021 15:27:25'!
test22transferNetWithDepositAndWithdrawAreNotConsidered
	
	Transfer from: account1 to:account2  	withAmount:100.
	self assert: (account1 generateReport: TransferNetReport new)  equals: 100 negated.
	
	

	

	
	
	

	
	! !

!methodRemoval: Portfolio2Test #test17transferNetWithDepositAndWithdrawAreNotConsidered stamp: 'SB 6/3/2021 15:27:25'!
test17transferNetWithDepositAndWithdrawAreNotConsidered
	
	Transfer from: account1 to:account2  	withAmount:100.
	self assert: (account1 generateReport: TransferNetReport new)  equals: 100 negated.
	
	

	

	
	
	

	
	!
!Portfolio2Test methodsFor: 'transferNetTest' stamp: 'SB 6/3/2021 15:27:59' prior: 50876175!
test22transferNetWithDepositAndWithdrawAreNotConsidered
	
	Withdraw register: 100 on: account1.
	Deposit register: 100 on: account1.

	self assert: (account1 generateReport: TransferNetReport new)  equals: 100 negated.
	
	

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferNetTest' stamp: 'SB 6/3/2021 15:28:09' prior: 50876196!
test22transferNetWithDepositAndWithdrawAreNotConsidered
	
	Withdraw register: 100 on: account1.
	Deposit register: 100 on: account1.

	self assert: (account1 generateReport: TransferNetReport new)  equals: 0 .
	
	

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test22transferNetWithDepositAndWithdrawAreNotConsidered stamp: 'SB 6/3/2021 15:28:12'!
PASSED!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (26 to: 42)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (61 to: 77)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{79 to: 81})
		cover: (50 to: 56)
		declaredAt: (50 to: 56).! !
!Behavior method!
initialize
	[ super initialize ] valueCoveringAll:
		{20 to: 29}.
	(transactions _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (33 to: 44)
		declaredAt: (33 to: 44).
	(transfers _ [
	(OrderedCollection
		cover: (86 to: 102)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (73 to: 81)
		declaredAt: (73 to: 81).! !
!Behavior method!
from: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount
	| aTransfer |
	(aTransfer _ [
	(Transfer
		cover: (95 to: 102)
		declaredAt: (95 to: 102)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (84 to: 92)
		declaredAt: (72 to: 80).
	[
	(aTransfer
		cover: (110 to: 118)
		declaredAt: (72 to: 80))
		madeFrom:
			(aReceptiveAccount
				cover: (130 to: 146)
				declaredAt: (7 to: 23))
		to:
			(aReceptiveAccount2
				cover: (152 to: 169)
				declaredAt: (29 to: 46))
		withAmount:
			(anAmount
				cover: (184 to: 191)
				declaredAt: (60 to: 67)) ] valueCoveringAll:
		{120 to: 128. 148 to: 150. 172 to: 182}.
	^ aTransfer
		cover: (196 to: 204)
		declaredAt: (72 to: 80).! !
!Behavior method!
madeFrom: aSenderAccount to: aRecieverAccount withAmount: anAmount
	[
	(self coverAll:
		{71 to: 74})
		assertValidTransferWithSender:
			(aSenderAccount
				cover: (107 to: 120)
				declaredAt: (11 to: 24))
		aReceiver:
			(aRecieverAccount
				cover: (133 to: 148)
				declaredAt: (30 to: 45))
		andAmount:
			(anAmount
				cover: (161 to: 168)
				declaredAt: (59 to: 66)) ] valueCoveringAll:
		{76 to: 105. 122 to: 131. 150 to: 159}.
	[
	(self coverAll:
		{174 to: 177})
		setTransferLegsUsingSenderLeg:
			(aRecieverAccount
				cover: (210 to: 225)
				declaredAt: (30 to: 45))
		andReceiverLeg:
			(aSenderAccount
				cover: (243 to: 256)
				declaredAt: (11 to: 24)) ] valueCoveringAll:
		{179 to: 208. 227 to: 241}.
	(amount _ anAmount
		cover: (269 to: 276)
		declaredAt: (59 to: 66))
		cover: (260 to: 265)
		declaredAt: (260 to: 265).! !
!Behavior method!
assertValidTransferWithSender: aSender aReceiver: aReceiver andAmount: anAmount
	[
	([
	(anAmount
		cover: (83 to: 90)
		declaredAt: (72 to: 79)) <=
		(0 coverAll:
			{94 to: 94}) ] valueCoveringAll:
		{92 to: 93}) ifTrue: [
		[
		(self coverAll:
			{104 to: 107}) error:
			([
			([
			(self coverAll:
				{116 to: 119}) class ] valueCoveringAll:
				{121 to: 125}) negativeValueTransfer ] valueCoveringAll:
				{127 to: 147}) ] valueCoveringAll:
			{109 to: 114} ]] valueCoveringAll:
		{96 to: 102}.
	[
	([
	(aSender
		cover: (153 to: 159)
		declaredAt: (32 to: 38)) =
		(aReceiver
			cover: (163 to: 171)
			declaredAt: (51 to: 59)) ] valueCoveringAll:
		{161 to: 161}) ifTrue: [
		[
		(self coverAll:
			{181 to: 184}) error:
			([
			([
			(self coverAll:
				{193 to: 196}) class ] valueCoveringAll:
				{198 to: 202}) sameLegsTransfer ] valueCoveringAll:
				{204 to: 219}) ] valueCoveringAll:
			{186 to: 191} ]] valueCoveringAll:
		{173 to: 179}.! !
!Behavior method!
setTransferLegsUsingSenderLeg: aRecieverAccount andReceiverLeg: aSenderAccount
	(sender _ [
	(SenderLeg
		cover: (90 to: 98)
		declaredAt: (90 to: 98)) forTransfer:
		(self coverAll:
			{113 to: 116}) ] valueCoveringAll:
		{100 to: 111})
		cover: (82 to: 87)
		declaredAt: (82 to: 87).
	(reciever _ [
	(RecieverLeg
		cover: (131 to: 141)
		declaredAt: (131 to: 141)) forTransfer:
		(self coverAll:
			{156 to: 159}) ] valueCoveringAll:
		{143 to: 154})
		cover: (120 to: 127)
		declaredAt: (120 to: 127).
	[
	(aSenderAccount
		cover: (163 to: 176)
		declaredAt: (65 to: 78)) registerTransfer:
		(sender
			cover: (196 to: 201)
			declaredAt: (82 to: 87)) ] valueCoveringAll:
		{178 to: 194}.
	[
	(aRecieverAccount
		cover: (205 to: 220)
		declaredAt: (32 to: 47)) registerTransfer:
		(reciever
			cover: (240 to: 247)
			declaredAt: (120 to: 127)) ] valueCoveringAll:
		{222 to: 238}.! !
!Behavior method!
forTransfer: aTransfer
	^ [
	([
	(self coverAll:
		{27 to: 30}) new ] valueCoveringAll:
		{32 to: 34}) initializeFor:
		(aTransfer
			cover: (51 to: 59)
			declaredAt: (14 to: 22)) ] valueCoveringAll:
		{36 to: 49}.! !
!Behavior method!
initializeFor: aTransfer
	(transfer _ aTransfer
		cover: (39 to: 47)
		declaredAt: (16 to: 24))
		cover: (27 to: 34)
		declaredAt: (27 to: 34).! !
!Behavior method!
registerTransfer: aTransfer
	[
	(transactions
		cover: (31 to: 42)
		declaredAt: (31 to: 42)) add:
		(aTransfer
			cover: (49 to: 57)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{44 to: 47}.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (14 to: 25)
		declaredAt: (14 to: 25))
		inject:
			(0 coverAll:
				{38 to: 38})
		into: [ :currentBalance :transaction |
			[
			(transaction
				cover: (81 to: 91)
				declaredAt: (67 to: 77)) affectBalance:
				(currentBalance
					cover: (108 to: 121)
					declaredAt: (51 to: 64)) ] valueCoveringAll:
				{93 to: 106} ]] valueCoveringAll:
		{30 to: 36. 42 to: 46}.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		([
		(transfer
			cover: (39 to: 46)
			declaredAt: (39 to: 46)) value ] valueCoveringAll:
			{48 to: 52}) ] valueCoveringAll:
		{37 to: 37}.! !
!Behavior method!
value
	^ amount
		cover: (9 to: 14)
		declaredAt: (9 to: 14).! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'SB 6/3/2021 15:28:20'!
PASSED!
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		([
		(transfer
			cover: (39 to: 46)
			declaredAt: (39 to: 46)) value ] valueCoveringAll:
			{48 to: 52}) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'SB 6/3/2021 15:28:20'!
PASSED!
!Behavior method!
sameLegsTransfer
	^ 'Sender leg cannot be the same as the receiver leg' coverAll:
		{21 to: 71}.! !

!testRun: #Portfolio2Test #test03transferSenderCannotBeEqualToReceiver stamp: 'SB 6/3/2021 15:28:20'!
PASSED!
!Behavior method!
senderLeg
	^ sender
		cover: (13 to: 18)
		declaredAt: (13 to: 18).! !
!Behavior method!
otherLeg
	^ [
	(transfer
		cover: (13 to: 20)
		declaredAt: (13 to: 20)) recieverLeg ] valueCoveringAll:
		{22 to: 32}.! !
!Behavior method!
recieverLeg
	^ reciever
		cover: (15 to: 22)
		declaredAt: (15 to: 22).! !

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'SB 6/3/2021 15:28:20'!
PASSED!
!Behavior method!
otherLeg
	^ [
	(transfer
		cover: (12 to: 19)
		declaredAt: (12 to: 19)) senderLeg ] valueCoveringAll:
		{22 to: 30}.! !

!testRun: #Portfolio2Test #test05tRecieverLegKnowsSenderLeg stamp: 'SB 6/3/2021 15:28:20'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'SB 6/3/2021 15:28:20'!
PASSED!
!Behavior method!
negativeValueTransfer
	^ 'Cannot do a negative value transfer' coverAll:
		{25 to: 61}.! !

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'SB 6/3/2021 15:28:20'!
PASSED!
!Behavior method!
initialize
	(reporte _ [
	(OrderedCollection
		cover: (23 to: 39)
		declaredAt: (23 to: 39)) new ] valueCoveringAll:
		{41 to: 43})
		cover: (13 to: 19)
		declaredAt: (13 to: 19).
	(balance _ 0 coverAll:
		{56 to: 56})
		cover: (47 to: 53)
		declaredAt: (47 to: 53).! !
!Behavior method!
generateReport: aReportGenerator
	[
	(self coverAll:
		{35 to: 38}) generatePartialReport:
		(aReportGenerator
			cover: (63 to: 78)
			declaredAt: (17 to: 32)) ] valueCoveringAll:
		{40 to: 61}.
	^ [
	(aReportGenerator
		cover: (84 to: 99)
		declaredAt: (17 to: 32)) finishReport ] valueCoveringAll:
		{101 to: 112}.! !
!Behavior method!
generatePartialReport: aReportGenerator
	[
	(transactions
		cover: (42 to: 53)
		declaredAt: (42 to: 53)) do: [ :aTransaction |
		[
		(aTransaction
			cover: (75 to: 86)
			declaredAt: (61 to: 72)) reportTo:
			(aReportGenerator
				cover: (98 to: 113)
				declaredAt: (24 to: 39)) ] valueCoveringAll:
			{88 to: 96} ]] valueCoveringAll:
		{55 to: 57}.! !
!Behavior method!
finishReport
	[
	(reporte
		cover: (25 to: 31)
		declaredAt: (25 to: 31)) addLast:
		([
		('Balance = ' coverAll:
			{43 to: 54}) ,
			([
			(balance
				cover: (57 to: 63)
				declaredAt: (57 to: 63)) asString ] valueCoveringAll:
				{65 to: 72}) ] valueCoveringAll:
			{55 to: 55}) ] valueCoveringAll:
		{33 to: 40}.
	^ reporte
		cover: (79 to: 85)
		declaredAt: (25 to: 31).! !

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'SB 6/3/2021 15:28:20'!
PASSED!
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
reportTo: aMethodAccountSummary
	[
	(aMethodAccountSummary
		cover: (34 to: 54)
		declaredAt: (11 to: 31)) reportDeposit:
		(self coverAll:
			{71 to: 74}) ] valueCoveringAll:
		{56 to: 69}.! !
!Behavior method!
reportDeposit: aDeposit
	[
	(reporte
		cover: (27 to: 33)
		declaredAt: (27 to: 33)) add:
		([
		('Deposito por ' coverAll:
			{41 to: 55}) ,
			([
			([
			(aDeposit
				cover: (58 to: 65)
				declaredAt: (16 to: 23)) value ] valueCoveringAll:
				{67 to: 71}) asString ] valueCoveringAll:
				{73 to: 80}) ] valueCoveringAll:
			{56 to: 56}) ] valueCoveringAll:
		{35 to: 38}.
	(balance _ [
	(balance
		cover: (85 to: 91)
		declaredAt: (85 to: 91)) +
		([
		(aDeposit
			cover: (103 to: 110)
			declaredAt: (16 to: 23)) value ] valueCoveringAll:
			{112 to: 116}) ] valueCoveringAll:
		{102 to: 102})
		cover: (95 to: 101)
		declaredAt: (85 to: 91).! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'SB 6/3/2021 15:28:20'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'SB 6/3/2021 15:28:20'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
reportTo: aMethodAccountSummary
	[
	(aMethodAccountSummary
		cover: (34 to: 54)
		declaredAt: (11 to: 31)) reportWithdraw:
		(self coverAll:
			{72 to: 75}) ] valueCoveringAll:
		{56 to: 70}.! !
!Behavior method!
reportWithdraw: aWithdraw
	[
	(reporte
		cover: (29 to: 35)
		declaredAt: (29 to: 35)) add:
		([
		('Extraccion por ' coverAll:
			{43 to: 59}) ,
			([
			([
			(aWithdraw
				cover: (62 to: 70)
				declaredAt: (17 to: 25)) value ] valueCoveringAll:
				{72 to: 76}) asString ] valueCoveringAll:
				{78 to: 85}) ] valueCoveringAll:
			{60 to: 60}) ] valueCoveringAll:
		{37 to: 40}.
	(balance _ [
	(balance
		cover: (90 to: 96)
		declaredAt: (90 to: 96)) -
		([
		(aWithdraw
			cover: (110 to: 118)
			declaredAt: (17 to: 25)) value ] valueCoveringAll:
			{120 to: 124}) ] valueCoveringAll:
		{108 to: 108})
		cover: (100 to: 106)
		declaredAt: (90 to: 96).! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'SB 6/3/2021 15:28:20'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'SB 6/3/2021 15:28:20'!
PASSED!
!Behavior method!
reportTo: aMethodAccountSummary
	[
	(aMethodAccountSummary
		cover: (36 to: 56)
		declaredAt: (11 to: 31)) reportSenderLeg:
		(self coverAll:
			{75 to: 78}) ] valueCoveringAll:
		{58 to: 73}.! !
!Behavior method!
reportSenderLeg: aSenderLeg
	[
	(reporte
		cover: (31 to: 37)
		declaredAt: (31 to: 37)) add:
		([
		('Salida por transferencia de ' coverAll:
			{45 to: 74}) ,
			([
			([
			(aSenderLeg
				cover: (77 to: 86)
				declaredAt: (18 to: 27)) value ] valueCoveringAll:
				{88 to: 92}) asString ] valueCoveringAll:
				{94 to: 101}) ] valueCoveringAll:
			{75 to: 75}) ] valueCoveringAll:
		{39 to: 42}.
	(balance _ [
	(balance
		cover: (106 to: 112)
		declaredAt: (106 to: 112)) -
		([
		(aSenderLeg
			cover: (125 to: 134)
			declaredAt: (18 to: 27)) value ] valueCoveringAll:
			{136 to: 140}) ] valueCoveringAll:
		{124 to: 124})
		cover: (116 to: 122)
		declaredAt: (106 to: 112).! !
!Behavior method!
value
	^ [
	(transfer
		cover: (9 to: 16)
		declaredAt: (9 to: 16)) value ] valueCoveringAll:
		{18 to: 22}.! !

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'SB 6/3/2021 15:28:20'!
PASSED!
!Behavior method!
reportTo: aMethodAccountSummary
	[
	(aMethodAccountSummary
		cover: (34 to: 54)
		declaredAt: (11 to: 31)) reportRecieverLeg:
		(self coverAll:
			{75 to: 78}) ] valueCoveringAll:
		{56 to: 73}.! !
!Behavior method!
reportRecieverLeg: aRecieverLeg
	[
	(reporte
		cover: (35 to: 41)
		declaredAt: (35 to: 41)) add:
		([
		('Entrada por transferencia de ' coverAll:
			{49 to: 79}) ,
			([
			([
			(aRecieverLeg
				cover: (82 to: 93)
				declaredAt: (20 to: 31)) value ] valueCoveringAll:
				{95 to: 99}) asString ] valueCoveringAll:
				{101 to: 108}) ] valueCoveringAll:
			{80 to: 80}) ] valueCoveringAll:
		{43 to: 46}.
	(balance _ [
	(balance
		cover: (113 to: 119)
		declaredAt: (113 to: 119)) +
		([
		(aRecieverLeg
			cover: (132 to: 143)
			declaredAt: (20 to: 31)) value ] valueCoveringAll:
			{145 to: 149}) ] valueCoveringAll:
		{130 to: 130})
		cover: (123 to: 129)
		declaredAt: (113 to: 119).! !
!Behavior method!
value
	^ [
	(transfer
		cover: (9 to: 16)
		declaredAt: (9 to: 16)) value ] valueCoveringAll:
		{18 to: 22}.! !

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'SB 6/3/2021 15:28:20'!
PASSED!
!Behavior method!
initialize
	(balance _ 0 coverAll:
		{24 to: 24})
		cover: (15 to: 21)
		declaredAt: (15 to: 21).! !
!Behavior method!
finishReport
	^ balance
		cover: (27 to: 33)
		declaredAt: (27 to: 33).! !

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'SB 6/3/2021 15:28:20'!
PASSED!
!Behavior method!
reportRecieverLeg: aRecieverLeg
	(balance _ [
	(balance
		cover: (37 to: 43)
		declaredAt: (37 to: 43)) +
		([
		(aRecieverLeg
			cover: (56 to: 67)
			declaredAt: (20 to: 31)) value ] valueCoveringAll:
			{69 to: 73}) ] valueCoveringAll:
		{54 to: 54})
		cover: (47 to: 53)
		declaredAt: (37 to: 43).! !

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'SB 6/3/2021 15:28:20'!
PASSED!
!Behavior method!
reportSenderLeg: aSenderLeg
	(balance _ [
	(balance
		cover: (33 to: 39)
		declaredAt: (33 to: 39)) -
		([
		(aSenderLeg
			cover: (52 to: 61)
			declaredAt: (18 to: 27)) value ] valueCoveringAll:
			{63 to: 67}) ] valueCoveringAll:
		{51 to: 51})
		cover: (43 to: 49)
		declaredAt: (33 to: 39).! !

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'SB 6/3/2021 15:28:20'!
PASSED!

!testRun: #Portfolio2Test #test18accountSummaryEmptyPortfolio stamp: 'SB 6/3/2021 15:28:20'!
PASSED!
!Behavior method!
add: accountToAdd
	[
	(self coverAll:
		{21 to: 24}) assertCanAdd:
		(accountToAdd
			cover: (40 to: 51)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{26 to: 38}.
	[
	(accounts
		cover: (58 to: 65)
		declaredAt: (58 to: 65)) add:
		(accountToAdd
			cover: (72 to: 83)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{67 to: 70}.
	[
	(accountToAdd
		cover: (87 to: 98)
		declaredAt: (6 to: 17)) addedTo:
		(self coverAll:
			{109 to: 112}) ] valueCoveringAll:
		{100 to: 107}.! !
!Behavior method!
assertCanAdd: accountToAdd
	[
	([
	(self coverAll:
		{31 to: 34}) anyRootParentIsComposedBy:
		(accountToAdd
			cover: (63 to: 74)
			declaredAt: (15 to: 26)) ] valueCoveringAll:
		{36 to: 61}) ifTrue: [
		[
		(self coverAll:
			{87 to: 90}) signalCanNotAddAccount ] valueCoveringAll:
			{92 to: 113} ]] valueCoveringAll:
		{77 to: 83}.! !
!Behavior method!
anyRootParentIsComposedBy: accountToAdd
	^ [
	([
	(self coverAll:
		{44 to: 47}) rootParents ] valueCoveringAll:
		{49 to: 59}) anySatisfy: [ :aParent |
		[
		(aParent
			cover: (86 to: 92)
			declaredAt: (76 to: 82)) isComposedBy:
			(accountToAdd
				cover: (108 to: 119)
				declaredAt: (28 to: 39)) ] valueCoveringAll:
			{94 to: 106} ]] valueCoveringAll:
		{61 to: 71}.! !
!Behavior method!
rootParents
	| rootParents |
	(rootParents _ [
	(Set
		cover: (50 to: 52)
		declaredAt: (50 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(self coverAll:
		{60 to: 63}) addRootParentsTo:
		(rootParents
			cover: (83 to: 93)
			declaredAt: (18 to: 28)) ] valueCoveringAll:
		{65 to: 81}.
	^ rootParents
		cover: (101 to: 111)
		declaredAt: (18 to: 28).! !
!Behavior method!
addRootParentsTo: rootParents
	[
	(parents
		cover: (33 to: 39)
		declaredAt: (33 to: 39))
		ifEmpty: [
			[
			(rootParents
				cover: (55 to: 65)
				declaredAt: (19 to: 29)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (96 to: 102)
				declaredAt: (33 to: 39)) do: [ :aParent |
				[
				(aParent
					cover: (121 to: 127)
					declaredAt: (111 to: 117)) addRootParentsTo:
					(rootParents
						cover: (147 to: 157)
						declaredAt: (19 to: 29)) ] valueCoveringAll:
					{129 to: 145} ]] valueCoveringAll:
				{104 to: 106} ]] valueCoveringAll:
		{44 to: 51. 82 to: 92}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	([
	(self coverAll:
		{29 to: 32}) =
		(anAccount
			cover: (36 to: 44)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 34}) or: [
		[
		(accounts
			cover: (52 to: 59)
			declaredAt: (52 to: 59)) anySatisfy: [ :composedAccount |
			[
			([
			(composedAccount
				cover: (95 to: 109)
				declaredAt: (76 to: 90)) isComposedBy:
				(anAccount
					cover: (125 to: 133)
					declaredAt: (15 to: 23)) ] valueCoveringAll:
				{111 to: 123}) or: [
				[
				(anAccount
					cover: (142 to: 150)
					declaredAt: (15 to: 23)) isComposedBy:
					(composedAccount
						cover: (166 to: 180)
						declaredAt: (76 to: 90)) ] valueCoveringAll:
					{152 to: 164} ]] valueCoveringAll:
				{136 to: 138} ]] valueCoveringAll:
			{61 to: 71} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
addedTo: aPortfolio
	^ self.! !
!Behavior method!
generateReport: aReportMethod
	[
	(self coverAll:
		{34 to: 37}) generatePartialReport:
		(aReportMethod
			cover: (63 to: 75)
			declaredAt: (17 to: 29)) ] valueCoveringAll:
		{39 to: 60}.
	^ [
	(aReportMethod
		cover: (81 to: 93)
		declaredAt: (17 to: 29)) finishReport ] valueCoveringAll:
		{95 to: 106}.! !
!Behavior method!
generatePartialReport: aReportMethod
	[
	(accounts
		cover: (40 to: 47)
		declaredAt: (40 to: 47)) do: [ :anAccount |
		[
		(anAccount
			cover: (65 to: 73)
			declaredAt: (54 to: 62)) generatePartialReport:
			(aReportMethod
				cover: (98 to: 110)
				declaredAt: (24 to: 36)) ] valueCoveringAll:
			{75 to: 96} ]] valueCoveringAll:
		{49 to: 51}.! !

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithOneAccount stamp: 'SB 6/3/2021 15:28:20'!
PASSED!
!Behavior method!
isComposedBy: anAccount
	^ [
	(self coverAll:
		{28 to: 31}) =
		(anAccount
			cover: (35 to: 43)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{33 to: 33}.! !

!testRun: #Portfolio2Test #test20accountSummaryPortfolioWithTwoAccount stamp: 'SB 6/3/2021 15:28:20'!
PASSED!
!Behavior method!
addedTo: aPortfolio
	[
	(parents
		cover: (25 to: 31)
		declaredAt: (25 to: 31)) add:
		(aPortfolio
			cover: (38 to: 47)
			declaredAt: (10 to: 19)) ] valueCoveringAll:
		{33 to: 36}.! !

!testRun: #Portfolio2Test #test21accountSummaryPortfolioWithPortfolio stamp: 'SB 6/3/2021 15:28:20'!
PASSED!
!Behavior method!
reportWithdraw: aWithdraw
	^ self.! !
!Behavior method!
reportDeposit: aDeposit
	^ self.! !

!testRun: #Portfolio2Test #test22transferNetWithDepositAndWithdrawAreNotConsidered stamp: 'SB 6/3/2021 15:28:20'!
PASSED!
!Behavior method!
balance
	^ [
	(accounts
		cover: (13 to: 20)
		declaredAt: (13 to: 20))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (42 to: 50)
				declaredAt: (30 to: 38)) balance ] valueCoveringAll:
				{52 to: 58} ]
		ifEmpty: [
			0 coverAll:
				{73 to: 73} ]] valueCoveringAll:
		{22 to: 25. 62 to: 69}.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'SB 6/3/2021 15:28:20'!
PASSED!
!Behavior method!
with: anAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}.
	[ cascadeReceiver add: anAccount ] valueCoveringAll:
		{32 to: 45}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{50 to: 57} ] value.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'SB 6/3/2021 15:28:20'!
PASSED!
!Behavior method!
with: anAccount with: anotherAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{41 to: 44}) new ] valueCoveringAll:
		{46 to: 48}.
	[ cascadeReceiver add: anAccount ] valueCoveringAll:
		{53 to: 66}.
	[ cascadeReceiver add: anotherAccount ] valueCoveringAll:
		{71 to: 89}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{94 to: 101} ] value.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (27 to: 34)
		declaredAt: (16 to: 23)) -
		(value
			cover: (38 to: 42)
			declaredAt: (38 to: 42)) ] valueCoveringAll:
		{36 to: 36}.! !

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'SB 6/3/2021 15:28:20'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) anySatisfy: [ :anAccount |
		[
		(anAccount
			cover: (68 to: 76)
			declaredAt: (56 to: 64)) hasRegistered:
			(aTransaction
				cover: (93 to: 104)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{78 to: 91} ]] valueCoveringAll:
		{41 to: 51}.! !

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'SB 6/3/2021 15:28:20'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'SB 6/3/2021 15:28:20'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'SB 6/3/2021 15:28:20'!
PASSED!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (53 to: 69)
		declaredAt: (53 to: 69)) new ] valueCoveringAll:
		{71 to: 73})
		cover: (37 to: 48)
		declaredAt: (19 to: 30).
	[
	(accounts
		cover: (77 to: 84)
		declaredAt: (77 to: 84)) do: [ :anAccount |
		[
		(anAccount
			cover: (105 to: 113)
			declaredAt: (93 to: 101)) addTransactionsTo:
			(transactions
				cover: (134 to: 145)
				declaredAt: (19 to: 30)) ] valueCoveringAll:
			{115 to: 132} ]] valueCoveringAll:
		{86 to: 88}.
	^ transactions
		cover: (154 to: 165)
		declaredAt: (19 to: 30).! !

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'SB 6/3/2021 15:28:20'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(aCollectionOfTransactions
		cover: (48 to: 72)
		declaredAt: (20 to: 44)) addAll:
		(transactions
			cover: (82 to: 93)
			declaredAt: (82 to: 93)) ] valueCoveringAll:
		{74 to: 80}.! !

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'SB 6/3/2021 15:28:20'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(accounts
		cover: (48 to: 55)
		declaredAt: (48 to: 55)) do: [ :anAccount |
		[
		(anAccount
			cover: (76 to: 84)
			declaredAt: (64 to: 72)) addTransactionsTo:
			(aCollectionOfTransactions
				cover: (105 to: 129)
				declaredAt: (20 to: 44)) ] valueCoveringAll:
			{86 to: 103} ]] valueCoveringAll:
		{57 to: 59}.! !

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'SB 6/3/2021 15:28:20'!
PASSED!
!Behavior method!
signalCanNotAddAccount
	[
	(self coverAll:
		{27 to: 30}) error:
		([
		([
		(self coverAll:
			{39 to: 42}) class ] valueCoveringAll:
			{44 to: 48}) canNotAddAccountErrorMessage ] valueCoveringAll:
			{50 to: 77}) ] valueCoveringAll:
		{32 to: 37}.! !
!Behavior method!
canNotAddAccountErrorMessage
	^ 'Can not add repeated account to a portfolio' coverAll:
		{34 to: 78}.! !
!Behavior method!
accountsSize
	^ [
	(accounts
		cover: (18 to: 25)
		declaredAt: (18 to: 25)) size ] valueCoveringAll:
		{27 to: 30}.! !
!Behavior method!
accountsIncludes: anAccount
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) includes:
		(anAccount
			cover: (51 to: 59)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{41 to: 49}.! !

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'SB 6/3/2021 15:28:20'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'SB 6/3/2021 15:28:20'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'SB 6/3/2021 15:28:20'!
PASSED!
!Behavior method!
accountsIsEmpty
	^ [
	(accounts
		cover: (21 to: 28)
		declaredAt: (21 to: 28)) isEmpty ] valueCoveringAll:
		{30 to: 36}.! !

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'SB 6/3/2021 15:28:20'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'SB 6/3/2021 15:28:20'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'SB 6/3/2021 15:28:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'SB 6/3/2021 15:28:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'SB 6/3/2021 15:28:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'SB 6/3/2021 15:28:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'SB 6/3/2021 15:28:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'SB 6/3/2021 15:28:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'SB 6/3/2021 15:28:21'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'SB 6/3/2021 15:28:21'!
PASSED!
!TransferNetReport methodsFor: 'report' stamp: 'SB 6/3/2021 15:29:19' prior: 50869504 overrides: 50869776!
reportWithdraw: aWithdraw 
	|i|
	i := 1
	! !
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (26 to: 42)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (61 to: 77)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{79 to: 81})
		cover: (50 to: 56)
		declaredAt: (50 to: 56).! !
!Behavior method!
initialize
	[ super initialize ] valueCoveringAll:
		{20 to: 29}.
	(transactions _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (33 to: 44)
		declaredAt: (33 to: 44).
	(transfers _ [
	(OrderedCollection
		cover: (86 to: 102)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (73 to: 81)
		declaredAt: (73 to: 81).! !
!Behavior method!
from: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount
	| aTransfer |
	(aTransfer _ [
	(Transfer
		cover: (95 to: 102)
		declaredAt: (95 to: 102)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (84 to: 92)
		declaredAt: (72 to: 80).
	[
	(aTransfer
		cover: (110 to: 118)
		declaredAt: (72 to: 80))
		madeFrom:
			(aReceptiveAccount
				cover: (130 to: 146)
				declaredAt: (7 to: 23))
		to:
			(aReceptiveAccount2
				cover: (152 to: 169)
				declaredAt: (29 to: 46))
		withAmount:
			(anAmount
				cover: (184 to: 191)
				declaredAt: (60 to: 67)) ] valueCoveringAll:
		{120 to: 128. 148 to: 150. 172 to: 182}.
	^ aTransfer
		cover: (196 to: 204)
		declaredAt: (72 to: 80).! !
!Behavior method!
madeFrom: aSenderAccount to: aRecieverAccount withAmount: anAmount
	[
	(self coverAll:
		{71 to: 74})
		assertValidTransferWithSender:
			(aSenderAccount
				cover: (107 to: 120)
				declaredAt: (11 to: 24))
		aReceiver:
			(aRecieverAccount
				cover: (133 to: 148)
				declaredAt: (30 to: 45))
		andAmount:
			(anAmount
				cover: (161 to: 168)
				declaredAt: (59 to: 66)) ] valueCoveringAll:
		{76 to: 105. 122 to: 131. 150 to: 159}.
	[
	(self coverAll:
		{174 to: 177})
		setTransferLegsUsingSenderLeg:
			(aRecieverAccount
				cover: (210 to: 225)
				declaredAt: (30 to: 45))
		andReceiverLeg:
			(aSenderAccount
				cover: (243 to: 256)
				declaredAt: (11 to: 24)) ] valueCoveringAll:
		{179 to: 208. 227 to: 241}.
	(amount _ anAmount
		cover: (269 to: 276)
		declaredAt: (59 to: 66))
		cover: (260 to: 265)
		declaredAt: (260 to: 265).! !
!Behavior method!
assertValidTransferWithSender: aSender aReceiver: aReceiver andAmount: anAmount
	[
	([
	(anAmount
		cover: (83 to: 90)
		declaredAt: (72 to: 79)) <=
		(0 coverAll:
			{94 to: 94}) ] valueCoveringAll:
		{92 to: 93}) ifTrue: [
		[
		(self coverAll:
			{104 to: 107}) error:
			([
			([
			(self coverAll:
				{116 to: 119}) class ] valueCoveringAll:
				{121 to: 125}) negativeValueTransfer ] valueCoveringAll:
				{127 to: 147}) ] valueCoveringAll:
			{109 to: 114} ]] valueCoveringAll:
		{96 to: 102}.
	[
	([
	(aSender
		cover: (153 to: 159)
		declaredAt: (32 to: 38)) =
		(aReceiver
			cover: (163 to: 171)
			declaredAt: (51 to: 59)) ] valueCoveringAll:
		{161 to: 161}) ifTrue: [
		[
		(self coverAll:
			{181 to: 184}) error:
			([
			([
			(self coverAll:
				{193 to: 196}) class ] valueCoveringAll:
				{198 to: 202}) sameLegsTransfer ] valueCoveringAll:
				{204 to: 219}) ] valueCoveringAll:
			{186 to: 191} ]] valueCoveringAll:
		{173 to: 179}.! !
!Behavior method!
setTransferLegsUsingSenderLeg: aRecieverAccount andReceiverLeg: aSenderAccount
	(sender _ [
	(SenderLeg
		cover: (90 to: 98)
		declaredAt: (90 to: 98)) forTransfer:
		(self coverAll:
			{113 to: 116}) ] valueCoveringAll:
		{100 to: 111})
		cover: (82 to: 87)
		declaredAt: (82 to: 87).
	(reciever _ [
	(RecieverLeg
		cover: (131 to: 141)
		declaredAt: (131 to: 141)) forTransfer:
		(self coverAll:
			{156 to: 159}) ] valueCoveringAll:
		{143 to: 154})
		cover: (120 to: 127)
		declaredAt: (120 to: 127).
	[
	(aSenderAccount
		cover: (163 to: 176)
		declaredAt: (65 to: 78)) registerTransfer:
		(sender
			cover: (196 to: 201)
			declaredAt: (82 to: 87)) ] valueCoveringAll:
		{178 to: 194}.
	[
	(aRecieverAccount
		cover: (205 to: 220)
		declaredAt: (32 to: 47)) registerTransfer:
		(reciever
			cover: (240 to: 247)
			declaredAt: (120 to: 127)) ] valueCoveringAll:
		{222 to: 238}.! !
!Behavior method!
forTransfer: aTransfer
	^ [
	([
	(self coverAll:
		{27 to: 30}) new ] valueCoveringAll:
		{32 to: 34}) initializeFor:
		(aTransfer
			cover: (51 to: 59)
			declaredAt: (14 to: 22)) ] valueCoveringAll:
		{36 to: 49}.! !
!Behavior method!
initializeFor: aTransfer
	(transfer _ aTransfer
		cover: (39 to: 47)
		declaredAt: (16 to: 24))
		cover: (27 to: 34)
		declaredAt: (27 to: 34).! !
!Behavior method!
registerTransfer: aTransfer
	[
	(transactions
		cover: (31 to: 42)
		declaredAt: (31 to: 42)) add:
		(aTransfer
			cover: (49 to: 57)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{44 to: 47}.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (14 to: 25)
		declaredAt: (14 to: 25))
		inject:
			(0 coverAll:
				{38 to: 38})
		into: [ :currentBalance :transaction |
			[
			(transaction
				cover: (81 to: 91)
				declaredAt: (67 to: 77)) affectBalance:
				(currentBalance
					cover: (108 to: 121)
					declaredAt: (51 to: 64)) ] valueCoveringAll:
				{93 to: 106} ]] valueCoveringAll:
		{30 to: 36. 42 to: 46}.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		([
		(transfer
			cover: (39 to: 46)
			declaredAt: (39 to: 46)) value ] valueCoveringAll:
			{48 to: 52}) ] valueCoveringAll:
		{37 to: 37}.! !
!Behavior method!
value
	^ amount
		cover: (9 to: 14)
		declaredAt: (9 to: 14).! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'SB 6/3/2021 15:29:32'!
PASSED!
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		([
		(transfer
			cover: (39 to: 46)
			declaredAt: (39 to: 46)) value ] valueCoveringAll:
			{48 to: 52}) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'SB 6/3/2021 15:29:32'!
PASSED!
!Behavior method!
sameLegsTransfer
	^ 'Sender leg cannot be the same as the receiver leg' coverAll:
		{21 to: 71}.! !

!testRun: #Portfolio2Test #test03transferSenderCannotBeEqualToReceiver stamp: 'SB 6/3/2021 15:29:32'!
PASSED!
!Behavior method!
senderLeg
	^ sender
		cover: (13 to: 18)
		declaredAt: (13 to: 18).! !
!Behavior method!
otherLeg
	^ [
	(transfer
		cover: (13 to: 20)
		declaredAt: (13 to: 20)) recieverLeg ] valueCoveringAll:
		{22 to: 32}.! !
!Behavior method!
recieverLeg
	^ reciever
		cover: (15 to: 22)
		declaredAt: (15 to: 22).! !

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'SB 6/3/2021 15:29:32'!
PASSED!
!Behavior method!
otherLeg
	^ [
	(transfer
		cover: (12 to: 19)
		declaredAt: (12 to: 19)) senderLeg ] valueCoveringAll:
		{22 to: 30}.! !

!testRun: #Portfolio2Test #test05tRecieverLegKnowsSenderLeg stamp: 'SB 6/3/2021 15:29:32'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'SB 6/3/2021 15:29:32'!
PASSED!
!Behavior method!
negativeValueTransfer
	^ 'Cannot do a negative value transfer' coverAll:
		{25 to: 61}.! !

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'SB 6/3/2021 15:29:32'!
PASSED!
!Behavior method!
initialize
	(reporte _ [
	(OrderedCollection
		cover: (23 to: 39)
		declaredAt: (23 to: 39)) new ] valueCoveringAll:
		{41 to: 43})
		cover: (13 to: 19)
		declaredAt: (13 to: 19).
	(balance _ 0 coverAll:
		{56 to: 56})
		cover: (47 to: 53)
		declaredAt: (47 to: 53).! !
!Behavior method!
generateReport: aReportGenerator
	[
	(self coverAll:
		{35 to: 38}) generatePartialReport:
		(aReportGenerator
			cover: (63 to: 78)
			declaredAt: (17 to: 32)) ] valueCoveringAll:
		{40 to: 61}.
	^ [
	(aReportGenerator
		cover: (84 to: 99)
		declaredAt: (17 to: 32)) finishReport ] valueCoveringAll:
		{101 to: 112}.! !
!Behavior method!
generatePartialReport: aReportGenerator
	[
	(transactions
		cover: (42 to: 53)
		declaredAt: (42 to: 53)) do: [ :aTransaction |
		[
		(aTransaction
			cover: (75 to: 86)
			declaredAt: (61 to: 72)) reportTo:
			(aReportGenerator
				cover: (98 to: 113)
				declaredAt: (24 to: 39)) ] valueCoveringAll:
			{88 to: 96} ]] valueCoveringAll:
		{55 to: 57}.! !
!Behavior method!
finishReport
	[
	(reporte
		cover: (25 to: 31)
		declaredAt: (25 to: 31)) addLast:
		([
		('Balance = ' coverAll:
			{43 to: 54}) ,
			([
			(balance
				cover: (57 to: 63)
				declaredAt: (57 to: 63)) asString ] valueCoveringAll:
				{65 to: 72}) ] valueCoveringAll:
			{55 to: 55}) ] valueCoveringAll:
		{33 to: 40}.
	^ reporte
		cover: (79 to: 85)
		declaredAt: (25 to: 31).! !

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'SB 6/3/2021 15:29:32'!
PASSED!
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
reportTo: aMethodAccountSummary
	[
	(aMethodAccountSummary
		cover: (34 to: 54)
		declaredAt: (11 to: 31)) reportDeposit:
		(self coverAll:
			{71 to: 74}) ] valueCoveringAll:
		{56 to: 69}.! !
!Behavior method!
reportDeposit: aDeposit
	[
	(reporte
		cover: (27 to: 33)
		declaredAt: (27 to: 33)) add:
		([
		('Deposito por ' coverAll:
			{41 to: 55}) ,
			([
			([
			(aDeposit
				cover: (58 to: 65)
				declaredAt: (16 to: 23)) value ] valueCoveringAll:
				{67 to: 71}) asString ] valueCoveringAll:
				{73 to: 80}) ] valueCoveringAll:
			{56 to: 56}) ] valueCoveringAll:
		{35 to: 38}.
	(balance _ [
	(balance
		cover: (85 to: 91)
		declaredAt: (85 to: 91)) +
		([
		(aDeposit
			cover: (103 to: 110)
			declaredAt: (16 to: 23)) value ] valueCoveringAll:
			{112 to: 116}) ] valueCoveringAll:
		{102 to: 102})
		cover: (95 to: 101)
		declaredAt: (85 to: 91).! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'SB 6/3/2021 15:29:32'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'SB 6/3/2021 15:29:33'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
reportTo: aMethodAccountSummary
	[
	(aMethodAccountSummary
		cover: (34 to: 54)
		declaredAt: (11 to: 31)) reportWithdraw:
		(self coverAll:
			{72 to: 75}) ] valueCoveringAll:
		{56 to: 70}.! !
!Behavior method!
reportWithdraw: aWithdraw
	[
	(reporte
		cover: (29 to: 35)
		declaredAt: (29 to: 35)) add:
		([
		('Extraccion por ' coverAll:
			{43 to: 59}) ,
			([
			([
			(aWithdraw
				cover: (62 to: 70)
				declaredAt: (17 to: 25)) value ] valueCoveringAll:
				{72 to: 76}) asString ] valueCoveringAll:
				{78 to: 85}) ] valueCoveringAll:
			{60 to: 60}) ] valueCoveringAll:
		{37 to: 40}.
	(balance _ [
	(balance
		cover: (90 to: 96)
		declaredAt: (90 to: 96)) -
		([
		(aWithdraw
			cover: (110 to: 118)
			declaredAt: (17 to: 25)) value ] valueCoveringAll:
			{120 to: 124}) ] valueCoveringAll:
		{108 to: 108})
		cover: (100 to: 106)
		declaredAt: (90 to: 96).! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'SB 6/3/2021 15:29:33'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'SB 6/3/2021 15:29:33'!
PASSED!
!Behavior method!
reportTo: aMethodAccountSummary
	[
	(aMethodAccountSummary
		cover: (36 to: 56)
		declaredAt: (11 to: 31)) reportSenderLeg:
		(self coverAll:
			{75 to: 78}) ] valueCoveringAll:
		{58 to: 73}.! !
!Behavior method!
reportSenderLeg: aSenderLeg
	[
	(reporte
		cover: (31 to: 37)
		declaredAt: (31 to: 37)) add:
		([
		('Salida por transferencia de ' coverAll:
			{45 to: 74}) ,
			([
			([
			(aSenderLeg
				cover: (77 to: 86)
				declaredAt: (18 to: 27)) value ] valueCoveringAll:
				{88 to: 92}) asString ] valueCoveringAll:
				{94 to: 101}) ] valueCoveringAll:
			{75 to: 75}) ] valueCoveringAll:
		{39 to: 42}.
	(balance _ [
	(balance
		cover: (106 to: 112)
		declaredAt: (106 to: 112)) -
		([
		(aSenderLeg
			cover: (125 to: 134)
			declaredAt: (18 to: 27)) value ] valueCoveringAll:
			{136 to: 140}) ] valueCoveringAll:
		{124 to: 124})
		cover: (116 to: 122)
		declaredAt: (106 to: 112).! !
!Behavior method!
value
	^ [
	(transfer
		cover: (9 to: 16)
		declaredAt: (9 to: 16)) value ] valueCoveringAll:
		{18 to: 22}.! !

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'SB 6/3/2021 15:29:33'!
PASSED!
!Behavior method!
reportTo: aMethodAccountSummary
	[
	(aMethodAccountSummary
		cover: (34 to: 54)
		declaredAt: (11 to: 31)) reportRecieverLeg:
		(self coverAll:
			{75 to: 78}) ] valueCoveringAll:
		{56 to: 73}.! !
!Behavior method!
reportRecieverLeg: aRecieverLeg
	[
	(reporte
		cover: (35 to: 41)
		declaredAt: (35 to: 41)) add:
		([
		('Entrada por transferencia de ' coverAll:
			{49 to: 79}) ,
			([
			([
			(aRecieverLeg
				cover: (82 to: 93)
				declaredAt: (20 to: 31)) value ] valueCoveringAll:
				{95 to: 99}) asString ] valueCoveringAll:
				{101 to: 108}) ] valueCoveringAll:
			{80 to: 80}) ] valueCoveringAll:
		{43 to: 46}.
	(balance _ [
	(balance
		cover: (113 to: 119)
		declaredAt: (113 to: 119)) +
		([
		(aRecieverLeg
			cover: (132 to: 143)
			declaredAt: (20 to: 31)) value ] valueCoveringAll:
			{145 to: 149}) ] valueCoveringAll:
		{130 to: 130})
		cover: (123 to: 129)
		declaredAt: (113 to: 119).! !
!Behavior method!
value
	^ [
	(transfer
		cover: (9 to: 16)
		declaredAt: (9 to: 16)) value ] valueCoveringAll:
		{18 to: 22}.! !

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'SB 6/3/2021 15:29:33'!
PASSED!
!Behavior method!
initialize
	(balance _ 0 coverAll:
		{24 to: 24})
		cover: (15 to: 21)
		declaredAt: (15 to: 21).! !
!Behavior method!
finishReport
	^ balance
		cover: (27 to: 33)
		declaredAt: (27 to: 33).! !

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'SB 6/3/2021 15:29:33'!
PASSED!
!Behavior method!
reportRecieverLeg: aRecieverLeg
	(balance _ [
	(balance
		cover: (37 to: 43)
		declaredAt: (37 to: 43)) +
		([
		(aRecieverLeg
			cover: (56 to: 67)
			declaredAt: (20 to: 31)) value ] valueCoveringAll:
			{69 to: 73}) ] valueCoveringAll:
		{54 to: 54})
		cover: (47 to: 53)
		declaredAt: (37 to: 43).! !

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'SB 6/3/2021 15:29:33'!
PASSED!
!Behavior method!
reportSenderLeg: aSenderLeg
	(balance _ [
	(balance
		cover: (33 to: 39)
		declaredAt: (33 to: 39)) -
		([
		(aSenderLeg
			cover: (52 to: 61)
			declaredAt: (18 to: 27)) value ] valueCoveringAll:
			{63 to: 67}) ] valueCoveringAll:
		{51 to: 51})
		cover: (43 to: 49)
		declaredAt: (33 to: 39).! !

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'SB 6/3/2021 15:29:33'!
PASSED!

!testRun: #Portfolio2Test #test18accountSummaryEmptyPortfolio stamp: 'SB 6/3/2021 15:29:33'!
PASSED!
!Behavior method!
add: accountToAdd
	[
	(self coverAll:
		{21 to: 24}) assertCanAdd:
		(accountToAdd
			cover: (40 to: 51)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{26 to: 38}.
	[
	(accounts
		cover: (58 to: 65)
		declaredAt: (58 to: 65)) add:
		(accountToAdd
			cover: (72 to: 83)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{67 to: 70}.
	[
	(accountToAdd
		cover: (87 to: 98)
		declaredAt: (6 to: 17)) addedTo:
		(self coverAll:
			{109 to: 112}) ] valueCoveringAll:
		{100 to: 107}.! !
!Behavior method!
assertCanAdd: accountToAdd
	[
	([
	(self coverAll:
		{31 to: 34}) anyRootParentIsComposedBy:
		(accountToAdd
			cover: (63 to: 74)
			declaredAt: (15 to: 26)) ] valueCoveringAll:
		{36 to: 61}) ifTrue: [
		[
		(self coverAll:
			{87 to: 90}) signalCanNotAddAccount ] valueCoveringAll:
			{92 to: 113} ]] valueCoveringAll:
		{77 to: 83}.! !
!Behavior method!
anyRootParentIsComposedBy: accountToAdd
	^ [
	([
	(self coverAll:
		{44 to: 47}) rootParents ] valueCoveringAll:
		{49 to: 59}) anySatisfy: [ :aParent |
		[
		(aParent
			cover: (86 to: 92)
			declaredAt: (76 to: 82)) isComposedBy:
			(accountToAdd
				cover: (108 to: 119)
				declaredAt: (28 to: 39)) ] valueCoveringAll:
			{94 to: 106} ]] valueCoveringAll:
		{61 to: 71}.! !
!Behavior method!
rootParents
	| rootParents |
	(rootParents _ [
	(Set
		cover: (50 to: 52)
		declaredAt: (50 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(self coverAll:
		{60 to: 63}) addRootParentsTo:
		(rootParents
			cover: (83 to: 93)
			declaredAt: (18 to: 28)) ] valueCoveringAll:
		{65 to: 81}.
	^ rootParents
		cover: (101 to: 111)
		declaredAt: (18 to: 28).! !
!Behavior method!
addRootParentsTo: rootParents
	[
	(parents
		cover: (33 to: 39)
		declaredAt: (33 to: 39))
		ifEmpty: [
			[
			(rootParents
				cover: (55 to: 65)
				declaredAt: (19 to: 29)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (96 to: 102)
				declaredAt: (33 to: 39)) do: [ :aParent |
				[
				(aParent
					cover: (121 to: 127)
					declaredAt: (111 to: 117)) addRootParentsTo:
					(rootParents
						cover: (147 to: 157)
						declaredAt: (19 to: 29)) ] valueCoveringAll:
					{129 to: 145} ]] valueCoveringAll:
				{104 to: 106} ]] valueCoveringAll:
		{44 to: 51. 82 to: 92}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	([
	(self coverAll:
		{29 to: 32}) =
		(anAccount
			cover: (36 to: 44)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 34}) or: [
		[
		(accounts
			cover: (52 to: 59)
			declaredAt: (52 to: 59)) anySatisfy: [ :composedAccount |
			[
			([
			(composedAccount
				cover: (95 to: 109)
				declaredAt: (76 to: 90)) isComposedBy:
				(anAccount
					cover: (125 to: 133)
					declaredAt: (15 to: 23)) ] valueCoveringAll:
				{111 to: 123}) or: [
				[
				(anAccount
					cover: (142 to: 150)
					declaredAt: (15 to: 23)) isComposedBy:
					(composedAccount
						cover: (166 to: 180)
						declaredAt: (76 to: 90)) ] valueCoveringAll:
					{152 to: 164} ]] valueCoveringAll:
				{136 to: 138} ]] valueCoveringAll:
			{61 to: 71} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
addedTo: aPortfolio
	^ self.! !
!Behavior method!
generateReport: aReportMethod
	[
	(self coverAll:
		{34 to: 37}) generatePartialReport:
		(aReportMethod
			cover: (63 to: 75)
			declaredAt: (17 to: 29)) ] valueCoveringAll:
		{39 to: 60}.
	^ [
	(aReportMethod
		cover: (81 to: 93)
		declaredAt: (17 to: 29)) finishReport ] valueCoveringAll:
		{95 to: 106}.! !
!Behavior method!
generatePartialReport: aReportMethod
	[
	(accounts
		cover: (40 to: 47)
		declaredAt: (40 to: 47)) do: [ :anAccount |
		[
		(anAccount
			cover: (65 to: 73)
			declaredAt: (54 to: 62)) generatePartialReport:
			(aReportMethod
				cover: (98 to: 110)
				declaredAt: (24 to: 36)) ] valueCoveringAll:
			{75 to: 96} ]] valueCoveringAll:
		{49 to: 51}.! !

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithOneAccount stamp: 'SB 6/3/2021 15:29:33'!
PASSED!
!Behavior method!
isComposedBy: anAccount
	^ [
	(self coverAll:
		{28 to: 31}) =
		(anAccount
			cover: (35 to: 43)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{33 to: 33}.! !

!testRun: #Portfolio2Test #test20accountSummaryPortfolioWithTwoAccount stamp: 'SB 6/3/2021 15:29:33'!
PASSED!
!Behavior method!
addedTo: aPortfolio
	[
	(parents
		cover: (25 to: 31)
		declaredAt: (25 to: 31)) add:
		(aPortfolio
			cover: (38 to: 47)
			declaredAt: (10 to: 19)) ] valueCoveringAll:
		{33 to: 36}.! !

!testRun: #Portfolio2Test #test21accountSummaryPortfolioWithPortfolio stamp: 'SB 6/3/2021 15:29:33'!
PASSED!
!Behavior method!
reportWithdraw: aWithdraw
	| i |
	(i _ 1 coverAll:
		{39 to: 39})
		cover: (34 to: 34)
		declaredAt: (30 to: 30).! !
!Behavior method!
reportDeposit: aDeposit
	^ self.! !

!testRun: #Portfolio2Test #test22transferNetWithDepositAndWithdrawAreNotConsidered stamp: 'SB 6/3/2021 15:29:33'!
PASSED!
!TransferNetReport methodsFor: 'report' stamp: 'SB 6/3/2021 15:30:24' prior: 50877134 overrides: 50869776!
reportWithdraw: aWithdraw 
	! !
!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 15:33:52'!
test23transferHasOnlyOneValue
	
	self 
		should: [ Transfer from: account1 to:account2 withAmount: -100. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Transfer negativeValueTransfer equals: anError messageText.
			]
	
	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 15:37:05' prior: 50877833!
test23transferHasOnlyOneValue
	|transfer recieverLeg senderLeg|
	transfer:=Transfer from: account1 to:account2 withAmount: 10000000000000000000000000000000000000.
	recieverLeg:= transfer recieverLeg.
	senderLeg := transfer senderLeg.
	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 15:38:11' prior: 50877845!
test23transferHasOnlyOneValue
	|transfer recieverLeg senderLeg|
	transfer:=Transfer from: account1 to:account2 withAmount: 10000000000000000000000000000000000000.
	recieverLeg:= transfer recieverLeg.
	senderLeg := transfer senderLeg.
	
	self assert: recieverLeg value equals: senderLeg value.
	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test23transferHasOnlyOneValue stamp: 'SB 6/3/2021 15:38:15'!
PASSED!
!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 15:38:47' prior: 50877856!
test23transferHasOnlyOneValue
	|transfer recieverLeg senderLeg|
	transfer:=Transfer from: account1 to:account2 withAmount: 10000000000000000000000000000000000000.
	recieverLeg:= transfer recieverLeg.
	senderLeg := transfer senderLeg.
	
	self assert: recieverLeg value equals: 10000000000000000000000000000000000000
	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test23transferHasOnlyOneValue stamp: 'SB 6/3/2021 15:38:52'!
PASSED!
!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 15:39:11' prior: 50877872!
test23transferHasOnlyOneValue
	|transfer recieverLeg senderLeg|
	transfer:=Transfer from: account1 to:account2 withAmount: 10000000000000000000000000000000000000000 factorial.
	recieverLeg:= transfer recieverLeg.
	senderLeg := transfer senderLeg.
	
	self assert: recieverLeg value equals: 10000000000000000000000000000000000000 factorial 
	

	
	
	

	
	! !

----SNAPSHOT----(3 June 2021 15:39:28) CuisUniversity-4532.image priorSource: 17374274!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'SB 6/3/2021 15:39:33'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'SB 6/3/2021 15:39:33'!
PASSED!

!testRun: #Portfolio2Test #test03transferSenderCannotBeEqualToReceiver stamp: 'SB 6/3/2021 15:39:33'!
PASSED!

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'SB 6/3/2021 15:39:33'!
PASSED!

!testRun: #Portfolio2Test #test05tRecieverLegKnowsSenderLeg stamp: 'SB 6/3/2021 15:39:33'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'SB 6/3/2021 15:39:33'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'SB 6/3/2021 15:39:33'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'SB 6/3/2021 15:39:33'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'SB 6/3/2021 15:39:33'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'SB 6/3/2021 15:39:33'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'SB 6/3/2021 15:39:33'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'SB 6/3/2021 15:39:33'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'SB 6/3/2021 15:39:33'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'SB 6/3/2021 15:39:33'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'SB 6/3/2021 15:39:33'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'SB 6/3/2021 15:39:33'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'SB 6/3/2021 15:39:33'!
PASSED!

!testRun: #Portfolio2Test #test18accountSummaryEmptyPortfolio stamp: 'SB 6/3/2021 15:39:33'!
PASSED!

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithOneAccount stamp: 'SB 6/3/2021 15:39:33'!
PASSED!

!testRun: #Portfolio2Test #test20accountSummaryPortfolioWithTwoAccount stamp: 'SB 6/3/2021 15:39:33'!
PASSED!

!testRun: #Portfolio2Test #test21accountSummaryPortfolioWithPortfolio stamp: 'SB 6/3/2021 15:39:33'!
PASSED!

!testRun: #Portfolio2Test #test22transferNetWithDepositAndWithdrawAreNotConsidered stamp: 'SB 6/3/2021 15:39:33'!
PASSED!

----STARTUP---- (3 June 2021 15:40:35) as /home/sebasbocaccio/Desktop/FACU/Inge1/linux64/CuisUniversity-4532.image!

!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 15:41:06' prior: 50877889!
test23transferHasOnlyOneValue
	|transfer recieverLeg senderLeg|
	transfer:=Transfer from: account1 to:account2 withAmount: 1000 factorial.
	recieverLeg:= transfer recieverLeg.
	senderLeg := transfer senderLeg.
	
	self assert: recieverLeg value equals: 1000 factorial 
	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test23transferHasOnlyOneValue stamp: 'SB 6/3/2021 15:41:13'!
PASSED!
!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 15:41:22' prior: 50877983!
test23transferHasOnlyOneValue
	|transfer recieverLeg senderLeg|
	transfer:=Transfer from: account1 to:account2 withAmount: 10000 factorial.
	recieverLeg:= transfer recieverLeg.
	senderLeg := transfer senderLeg.
	
	self assert: recieverLeg value equals: 10000 factorial 
	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test23transferHasOnlyOneValue stamp: 'SB 6/3/2021 15:41:27'!
PASSED!
!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 15:42:03' prior: 50877998!
test23transferHasOnlyOneValue
	|transfer recieverLeg senderLeg|
	transfer:=Transfer from: account1 to:account2 withAmount: 10000 factorial.
	recieverLeg:= transfer recieverLeg.
	senderLeg := transfer senderLeg.
	
	self assert: recieverLeg value == 10000 factorial equals:  true
	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 15:42:11' prior: 50878013!
test23transferHasOnlyOneValue
	|transfer recieverLeg senderLeg|
	transfer:=Transfer from: account1 to:account2 withAmount: 10000 factorial.
	recieverLeg:= transfer recieverLeg.
	senderLeg := transfer senderLeg.
	
	self assert: (recieverLeg value == 10000 factorial) equals:  true
	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 15:42:15' prior: 50878026!
test23transferHasOnlyOneValue
	|transfer recieverLeg senderLeg|
	transfer:=Transfer from: account1 to:account2 withAmount: 10000 factorial.
	recieverLeg:= transfer recieverLeg.
	senderLeg := transfer senderLeg.
	
	self assert: (recieverLeg value == 10000 factorial) equals:  true.
	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test23transferHasOnlyOneValue stamp: 'SB 6/3/2021 15:42:23'!
FAILURE!

!testRun: #Portfolio2Test #test23transferHasOnlyOneValue stamp: 'SB 6/3/2021 15:42:23'!
FAILURE!
!Portfolio2Test methodsFor: 'transferTests' stamp: 'SB 6/3/2021 15:42:41' prior: 50878039!
test23transferHasOnlyOneValue
	|transfer recieverLeg senderLeg|
	transfer:=Transfer from: account1 to:account2 withAmount: 10000 factorial.
	recieverLeg:= transfer recieverLeg.
	senderLeg := transfer senderLeg.
	
	self assert: (recieverLeg value == senderLeg value) equals:  true.
	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test23transferHasOnlyOneValue stamp: 'SB 6/3/2021 15:42:44'!
PASSED!
!Portfolio2Test methodsFor: 'transferNetTest' stamp: 'SB 6/3/2021 15:43:48'!
test22transferNetWithEmptyPortfolio
	
	Withdraw register: 100 on: account1.
	Deposit register: 100 on: account1.

	self assert: (account1 generateReport: TransferNetReport new)  equals: 0 .
	
	

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferNetTest' stamp: 'SB 6/3/2021 15:44:07' prior: 50878073!
test22transferNetWithEmptyPortfolio
	

	self assert: (portfolio1 generateReport: TransferNetReport new)  equals: 0 .
	
	

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferNetTest' stamp: 'SB 6/3/2021 15:44:30'!
test24transferNetWithEmptyPortfolio
	

	self assert: (portfolio1 generateReport: TransferNetReport new)  equals: 0 .
	
	

	

	
	
	

	
	! !

!methodRemoval: Portfolio2Test #test22transferNetWithEmptyPortfolio stamp: 'SB 6/3/2021 15:44:30'!
test22transferNetWithEmptyPortfolio
	

	self assert: (portfolio1 generateReport: TransferNetReport new)  equals: 0 .
	
	

	

	
	
	

	
	!
!Portfolio2Test methodsFor: 'transferNetTest' stamp: 'SB 6/3/2021 15:45:06'!
test25transferNetWithPortfolioIncludingAccount
	

	self assert: (portfolio1 generateReport: TransferNetReport new)  equals: 0 .
	
	

	

	
	
	

	
	! !

!methodRemoval: Portfolio2Test #test24transferNetWithEmptyPortfolio stamp: 'SB 6/3/2021 15:45:06'!
test24transferNetWithEmptyPortfolio
	

	self assert: (portfolio1 generateReport: TransferNetReport new)  equals: 0 .
	
	

	

	
	
	

	
	!
!Portfolio2Test methodsFor: 'transferNetTest' stamp: 'SB 6/3/2021 15:45:28' prior: 50878105!
test25transferNetWithPortfolioIncludingAccount
		

	self assert: (portfolio1 generateReport: TransferNetReport new)  equals: 0 .
	
	

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferNetTest' stamp: 'SB 6/3/2021 15:46:21' prior: 50878120!
test25transferNetWithPortfolioIncludingAccount
	|deposit|	
	deposit := Deposit register: 100 on: account1.
	portfolio := Portfolio with: account1.
				

	self assert: (portfolio1 generateReport: TransferNetReport new)  equals: 0 .
	
	

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferNetTest' stamp: 'SB 6/3/2021 15:46:33' prior: 50878128!
test25transferNetWithPortfolioIncludingAccount
	|deposit|	
	Deposit register: 100 on: account1.
	portfolio := Portfolio with: account1.
				

	self assert: (portfolio1 generateReport: TransferNetReport new)  equals: 0 .
	
	

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test25transferNetWithPortfolioIncludingAccount stamp: 'SB 6/3/2021 15:46:39'!
PASSED!
!Portfolio2Test methodsFor: 'transferNetTest' stamp: 'SB 6/3/2021 15:47:22' prior: 50878139!
test25transferNetWithPortfolioIncludingAccount
	|deposit|	
	Deposit register: 100 on: account1.
	Withdraw register: 200 on: account1.

	portfolio := Portfolio with: account1.
				

	self assert: (portfolio1 generateReport: TransferNetReport new)  equals: 0 .
	
	

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferNetTest' stamp: 'SB 6/3/2021 15:48:13' prior: 50878154!
test25transferNetWithPortfolioIncludingAccount
	|deposit|	
	Deposit register: 100 on: account1.
	Withdraw register: 200 on: account1.
	Transfer from: account1 to:account2 withAmount: 100.
	Transfer from: account2 to:account1 withAmount: 200.

	portfolio := Portfolio with: account1.
				

	self assert: (portfolio1 generateReport: TransferNetReport new)  equals: 0 .
	
	

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferNetTest' stamp: 'SB 6/3/2021 15:48:57' prior: 50878166!
test25transferNetWithPortfolioIncludingAccount
	|deposit|	
	Deposit register: 100 on: account1.
	Withdraw register: 200 on: account1.
	Transfer from: account1 to:account2 withAmount: 100.
	Transfer from: account2 to:account1 withAmount: 300.

	portfolio := Portfolio with: account1.
				

	self assert: (portfolio1 generateReport: TransferNetReport new)  equals: 200 .
	
	

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test25transferNetWithPortfolioIncludingAccount stamp: 'SB 6/3/2021 15:49:04'!
FAILURE!

!testRun: #Portfolio2Test #test25transferNetWithPortfolioIncludingAccount stamp: 'SB 6/3/2021 15:49:04'!
FAILURE!
!Portfolio2Test methodsFor: 'transferNetTest' stamp: 'SB 6/3/2021 15:49:52' prior: 50878182!
test25transferNetWithPortfolioIncludingAccount
	|deposit|	
	Deposit register: 100 on: account1.
	Withdraw register: 200 on: account1.
	Transfer from: account1 to:account2 withAmount: 100.
	Transfer from: account2 to:account1 withAmount: 300.

	portfolio := Portfolio with: account1.
				
	self assert: (portfolio1 generateReport: TransferNetReport new) equals: 200 .
	
	

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test25transferNetWithPortfolioIncludingAccount stamp: 'SB 6/3/2021 15:50:13'!
FAILURE!

!testRun: #Portfolio2Test #test25transferNetWithPortfolioIncludingAccount stamp: 'SB 6/3/2021 15:50:13'!
FAILURE!
!Portfolio2Test methodsFor: 'transferNetTest' stamp: 'SB 6/3/2021 15:51:04' prior: 50878205!
test25transferNetWithPortfolioIncludingAccount
	|deposit|	
	Deposit register: 100 on: account1.
	Withdraw register: 200 on: account1.
	Transfer from: account1 to:account2 withAmount: 100.
	Transfer from: account2 to:account1 withAmount: 300.

	portfolio1 := Portfolio with: account1.
				
	self assert: (portfolio1 generateReport: TransferNetReport new) equals: 200 .
	
	

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test25transferNetWithPortfolioIncludingAccount stamp: 'SB 6/3/2021 15:51:09'!
PASSED!
!Portfolio2Test methodsFor: 'transferNetTest' stamp: 'SB 6/3/2021 15:52:17'!
test26transferNetWithPortfolioWithPortfolio
	|deposit|	
	Deposit register: 100 on: account1.
	Withdraw register: 200 on: account1.
	Transfer from: account1 to:account2 withAmount: 100.
	Transfer from: account2 to:account1 withAmount: 300.

	portfolio1 := Portfolio with: account1.
	portfolio2 := Portfolio with: portfolio1.			
	self assert: (portfolio2 generateReport: TransferNetReport new) equals: 200 .
	
	

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferNetTest' stamp: 'SB 6/3/2021 15:52:25' prior: 50878247!
test26transferNetWithPortfolioWithPortfolio
	|deposit|	
	Deposit register: 100 on: account1.
	Withdraw register: 200 on: account1.
	Transfer from: account1 to:account2 withAmount: 100.
	Transfer from: account2 to:account1 withAmount: 400.

	portfolio1 := Portfolio with: account1.
	portfolio2 := Portfolio with: portfolio1.			
	self assert: (portfolio2 generateReport: TransferNetReport new) equals: 200 .
	
	

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferNetTest' stamp: 'SB 6/3/2021 15:52:36' prior: 50878264!
test26transferNetWithPortfolioWithPortfolio
	|deposit|	
	Deposit register: 100 on: account1.
	Withdraw register: 200 on: account1.
	Transfer from: account1 to:account2 withAmount: 100.
	Transfer from: account2 to:account1 withAmount: 400.

	portfolio1 := Portfolio with: account1.
	portfolio2 := Portfolio with: portfolio1.			
	self assert: (portfolio2 generateReport: TransferNetReport new) equals: 300 .
	
	

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test26transferNetWithPortfolioWithPortfolio stamp: 'SB 6/3/2021 15:54:34'!
PASSED!
!Portfolio2Test methodsFor: 'transferNetTest' stamp: 'SB 6/3/2021 15:55:06' prior: 50878228!
test25transferNetWithPortfolioIncludingAccount
	|deposit|	
	Deposit register: 100 on: account1.
	Withdraw register: 200 on: account1.
	Transfer from: account1 to:account2 withAmount: 100.
	Transfer from: account2 to:account1 withAmount: 300.
	portfolio1 := Portfolio with: account1.
				
	self assert: (portfolio1 generateReport: TransferNetReport new) equals: 200 .
	
	

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferNetTest' stamp: 'SB 6/3/2021 15:55:42'!
test27transferNetWithPortfolioWithTwoPortfolioAndOneAccountOnEach
	|deposit|	
	Deposit register: 100 on: account1.
	Withdraw register: 200 on: account1.
	Transfer from: account1 to:account2 withAmount: 100.
	Transfer from: account2 to:account1 withAmount: 400.

	portfolio1 := Portfolio with: account1.
	portfolio2 := Portfolio with: portfolio1.			
	self assert: (portfolio2 generateReport: TransferNetReport new) equals: 300 .
	
	

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferNetTest' stamp: 'SB 6/3/2021 15:56:46' prior: 50878316!
test27transferNetWithPortfolioWithTwoPortfolioAndOneAccountOnEach
	|deposit|	
	Deposit register: 100 on: account1.
	Withdraw register: 200 on: account1.
	Transfer from: account1 to:account2 withAmount: 100.
	Transfer from: account2 to:account1 withAmount: 400.

	portfolio1 := Portfolio with: account1.
	portfolio2 := Portfolio with: account2.
	portfolio add: portfolio1 .
	portfolio add: portfolio2 .
	
	self assert: (portfolio2 generateReport: TransferNetReport new) equals: 300 .
	
	

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferNetTest' stamp: 'SB 6/3/2021 15:57:16' prior: 50878333!
test27transferNetWithPortfolioWithTwoPortfolioAndOneAccountOnEach
	|deposit|	
	Transfer from: account1 to:account2 withAmount: 100.
	Transfer from: account2 to:account1 withAmount: 400.

	portfolio1 := Portfolio with: account1.
	portfolio2 := Portfolio with: account2.
	portfolio add: portfolio1 .
	portfolio add: portfolio2 .
	
	self assert: (portfolio2 generateReport: TransferNetReport new) equals: 300 .
	
	

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferNetTest' stamp: 'SB 6/3/2021 15:57:33' prior: 50878352!
test27transferNetWithPortfolioWithTwoPortfolioAndOneAccountOnEach
	|deposit|	
	
	Transfer from: account1 to:account2 withAmount: 100.
	Transfer from: account2 to:account1 withAmount: 400.
	portfolio1 := Portfolio with: account1.
	portfolio2 := Portfolio with: account2.
	portfolio add: portfolio1 .
	portfolio add: portfolio2 .
	
	self assert: (portfolio2 generateReport: TransferNetReport new) equals: 300 .
	
	

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferNetTest' stamp: 'SB 6/3/2021 15:57:42' prior: 50878369!
test27transferNetWithPortfolioWithTwoPortfolioAndOneAccountOnEach
	|deposit|	
	
	Transfer from: account1 to:account2 withAmount: 100.
	Transfer from: account2 to:account1 withAmount: 400.
	portfolio1 := Portfolio with: account1.
	portfolio2 := Portfolio with: account2.
	portfolio add: portfolio1 .
	portfolio add: portfolio2 .
	
	self assert: (portfolio2 generateReport: TransferNetReport new) equals: 0 .
	
	

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test27transferNetWithPortfolioWithTwoPortfolioAndOneAccountOnEach stamp: 'SB 6/3/2021 15:57:51'!
FAILURE!

!testRun: #Portfolio2Test #test27transferNetWithPortfolioWithTwoPortfolioAndOneAccountOnEach stamp: 'SB 6/3/2021 15:57:51'!
FAILURE!
!Portfolio2Test methodsFor: 'transferNetTest' stamp: 'SB 6/3/2021 15:58:03' prior: 50878386!
test27transferNetWithPortfolioWithTwoPortfolioAndOneAccountOnEach
	|deposit|	
	
	Transfer from: account1 to:account2 withAmount: 100.
	Transfer from: account2 to:account1 withAmount: 400.
	portfolio1 := Portfolio with: account1.
	portfolio2 := Portfolio with: account2.
	portfolio add: portfolio1 .
	portfolio add: portfolio2 .
	
	self assert: (portfolio generateReport: TransferNetReport new) equals: 0 .
	
	

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferNetTest' stamp: 'SB 6/3/2021 15:58:07' prior: 50878411!
test27transferNetWithPortfolioWithTwoPortfolioAndOneAccountOnEach	
	Transfer from: account1 to:account2 withAmount: 100.
	Transfer from: account2 to:account1 withAmount: 400.
	portfolio1 := Portfolio with: account1.
	portfolio2 := Portfolio with: account2.
	portfolio add: portfolio1 .
	portfolio add: portfolio2 .
	
	self assert: (portfolio generateReport: TransferNetReport new) equals: 0 .
	
	

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test27transferNetWithPortfolioWithTwoPortfolioAndOneAccountOnEach stamp: 'SB 6/3/2021 15:58:11'!
PASSED!
!Portfolio2Test methodsFor: 'transferNetTest' stamp: 'SB 6/3/2021 15:58:16' prior: 50878281!
test26transferNetWithPortfolioWithPortfolio

	Deposit register: 100 on: account1.
	Withdraw register: 200 on: account1.
	Transfer from: account1 to:account2 withAmount: 100.
	Transfer from: account2 to:account1 withAmount: 400.

	portfolio1 := Portfolio with: account1.
	portfolio2 := Portfolio with: portfolio1.			
	self assert: (portfolio2 generateReport: TransferNetReport new) equals: 300 .
	
	

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferNetTest' stamp: 'SB 6/3/2021 15:58:21' prior: 50878301!
test25transferNetWithPortfolioIncludingAccount

	Deposit register: 100 on: account1.
	Withdraw register: 200 on: account1.
	Transfer from: account1 to:account2 withAmount: 100.
	Transfer from: account2 to:account1 withAmount: 300.
	portfolio1 := Portfolio with: account1.
				
	self assert: (portfolio1 generateReport: TransferNetReport new) equals: 200 .
	
	

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test21accountSummaryPortfolioWithPortfolio stamp: 'SB 6/3/2021 15:59:36'!
PASSED!

----QUIT----(3 June 2021 15:59:49) CuisUniversity-4532.image priorSource: 17480067!