

----QUIT----(9 March 2021 14:58:42) CuisUniversity-4532.image priorSource: 13044060!

----STARTUP---- (9 March 2021 14:58:43) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4532.image!


----QUIT----(9 March 2021 14:58:43) CuisUniversity-4532.image priorSource: 16885479!

----STARTUP---- (10 May 2021 17:19:00) as /home/lbiglieri/Downloads/build/CuisUniversity/linux64/CuisUniversity-4532.image!


----QUIT----(10 May 2021 17:19:31) CuisUniversity-4532.image priorSource: 16885703!

----STARTUP---- (5 June 2021 11:28:35) as /home/lbiglieri/Downloads/build/CuisUniversity/imagen2/CuisUniversity-4532.image!


----End fileIn of /home/lbiglieri/Downloads/build/CuisUniversity/imagen2/MarsRover-WithHeading.st----!

----SNAPSHOT----(5 June 2021 11:30:12) CuisUniversity-4532.image priorSource: 16885915!

----SNAPSHOT----(5 June 2021 11:30:20) CuisUniversity-4532.image priorSource: 16903233!

TestCase subclass: #FollowingTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #FollowingTest category: 'MarsRover-WithHeading' stamp: 'LB 6/5/2021 11:30:32'!
TestCase subclass: #FollowingTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverLog category: 'MarsRover-WithHeading' stamp: 'LB 6/5/2021 11:33:12'!
Object subclass: #MarsRoverLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!FollowingTest methodsFor: 'nil' stamp: 'LB 6/5/2021 11:33:06'!
test01LogASingleForwardFromAnyHeading

	| marsRover log |
	
	marsRover := MarsRover at: 0@0 heading: #North.
	log := MarsRoverLog new.
	marsRover addLog: log.
	
	marsRover process: 'frfrfrf'.
	
	self assert: 4 equals: log size.
	self assert: '0@1' equals: (log at: 	1).
	self assert: '1@1' equals: (log at: 	2).
	self assert: '1@0' equals: (log at: 	3).
	self assert: '0@0' equals: (log at: 	4).! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 11:33:24' prior: 50859902!
test01LogASingleForwardFromAnyHeading

	| marsRover positionLog |
	
	marsRover := MarsRover at: 0@0 heading: #North.
	positionLog := MarsRoverLog new.
	marsRover addLog: positionLog.
	
	marsRover process: 'frfrfrf'.
	
	self assert: 4 equals: positionLog size.
	self assert: '0@1' equals: (positionLog at: 	1).
	self assert: '1@1' equals: (positionLog at: 	2).
	self assert: '1@0' equals: (positionLog at: 	3).
	self assert: '0@0' equals: (positionLog at: 	4).! !

!testRun: #FollowingTest #test01LogASingleForwardFromAnyHeading stamp: 'LB 6/5/2021 11:33:32'!
ERROR!
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 11:34:09' prior: 50859918!
test01LogASingleForwardFromAnyHeading

	| marsRover positionLog |
	
	marsRover := MarsRover at: 0@0 heading: #North.
	positionLog := MarsRoverLog new.
	marsRover addPositionLog: positionLog.
	
	marsRover process: 'frfrfrf'.
	
	self assert: 4 equals: positionLog size.
	self assert: '0@1' equals: (positionLog at: 	1).
	self assert: '1@1' equals: (positionLog at: 	2).
	self assert: '1@0' equals: (positionLog at: 	3).
	self assert: '0@0' equals: (positionLog at: 	4).! !

!testRun: #FollowingTest #test01LogASingleForwardFromAnyHeading stamp: 'LB 6/5/2021 11:34:10'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 11:34:16'!
addPositionLog: aMarsRoverLog 
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'LB 6/5/2021 11:34:32'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 11:34:30' prior: 50859960!
addPositionLog: aMarsRoverLog 
	positionLog := aMarsRoverLog.! !

!testRun: #FollowingTest #test01LogASingleForwardFromAnyHeading stamp: 'LB 6/5/2021 11:34:40'!
ERROR!

!classDefinition: #MarsRoverLog category: 'MarsRover-WithHeading' stamp: 'LB 6/5/2021 11:35:06'!
Object subclass: #MarsRoverLog
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverLog methodsFor: 'nil' stamp: 'LB 6/5/2021 11:35:03' overrides: 16880927!
size
	^log size.! !

!testRun: #FollowingTest #test01LogASingleForwardFromAnyHeading stamp: 'LB 6/5/2021 11:35:14'!
ERROR!

!testRun: #FollowingTest #test01LogASingleForwardFromAnyHeading stamp: 'LB 6/5/2021 11:35:14'!
ERROR!
!MarsRoverLog methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 11:35:45' overrides: 16896425!
initialize
	log := OrderedCollection new.! !
!MarsRoverLog methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 11:36:18' overrides: 16880774!
at: anIndex
	^log at: anIndex.! !

!testRun: #FollowingTest #test01LogASingleForwardFromAnyHeading stamp: 'LB 6/5/2021 11:36:23'!
FAILURE!

!testRun: #FollowingTest #test01LogASingleForwardFromAnyHeading stamp: 'LB 6/5/2021 11:36:23'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'LB 6/5/2021 11:37:26' prior: 50859559!
moveForward
	
	head moveForward: self.
	positionLog add: position.! !
!MarsRover methodsFor: 'moving' stamp: 'LB 6/5/2021 11:39:45' prior: 50860016!
moveForward
	
	head moveForward: self.
	positionLog notify: position.! !
!MarsRover methodsFor: 'moving' stamp: 'LB 6/5/2021 11:40:23' prior: 50860021!
moveForward
	
	head moveForward: self.
	positionLog notify: position asString.! !
!MarsRoverLog methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 11:41:33' overrides: 16882681!
notify: aChange
	^log add: aChange.! !

!testRun: #FollowingTest #test01LogASingleForwardFromAnyHeading stamp: 'LB 6/5/2021 11:41:39'!
PASSED!
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 11:41:55'!
test01LogForwardFromAnyHeading

	| marsRover positionLog |
	
	marsRover := MarsRover at: 0@0 heading: #North.
	positionLog := MarsRoverLog new.
	marsRover addPositionLog: positionLog.
	
	marsRover process: 'frfrfrf'.
	
	self assert: 4 equals: positionLog size.
	self assert: '0@1' equals: (positionLog at: 	1).
	self assert: '1@1' equals: (positionLog at: 	2).
	self assert: '1@0' equals: (positionLog at: 	3).
	self assert: '0@0' equals: (positionLog at: 	4).! !

!methodRemoval: FollowingTest #test01LogASingleForwardFromAnyHeading stamp: 'LB 6/5/2021 11:41:59'!
test01LogASingleForwardFromAnyHeading

	| marsRover positionLog |
	
	marsRover := MarsRover at: 0@0 heading: #North.
	positionLog := MarsRoverLog new.
	marsRover addPositionLog: positionLog.
	
	marsRover process: 'frfrfrf'.
	
	self assert: 4 equals: positionLog size.
	self assert: '0@1' equals: (positionLog at: 	1).
	self assert: '1@1' equals: (positionLog at: 	2).
	self assert: '1@0' equals: (positionLog at: 	3).
	self assert: '0@0' equals: (positionLog at: 	4).!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 11:42:03'!
PASSED!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 11:42:03'!
PASSED!
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 11:43:06'!
test02LogBackwardsFromAnyHeading

	| marsRover positionLog |
	
	marsRover := MarsRover at: 0@0 heading: #South.
	positionLog := MarsRoverLog new.
	marsRover addPositionLog: positionLog.
	
	marsRover process: 'brbrbrb'.
	
	self assert: 4 equals: positionLog size.
	self assert: '0@1' equals: (positionLog at: 	1).
	self assert: '1@1' equals: (positionLog at: 	2).
	self assert: '1@0' equals: (positionLog at: 	3).
	self assert: '0@0' equals: (positionLog at: 	4).! !

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 11:43:06'!
FAILURE!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 11:43:32'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'LB 6/5/2021 11:43:49' prior: 50859551!
moveBackward
	
	head moveBackward: self.
	positionLog notify: position asString.! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 11:43:51'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 11:43:51'!
PASSED!
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 11:49:32'!
test03LogRightRotationFromAnyHeading

	| marsRover positionLog |
	
	marsRover := MarsRover at: 0@0 heading: #North.
	positionLog := MarsRoverLog new.
	marsRover addRotationLog: positionLog.
	
	marsRover process: 'rrrr'.
	
	self assert: 4 equals: positionLog size.
	self assert: 'Rotated East.' equals: (positionLog at: 	1).
	self assert: 'Rotated South.' equals: (positionLog at: 	2).
	self assert: 'Rotated West.' equals: (positionLog at: 	3).
	self assert: 'Rotated North.' equals: (positionLog at: 	4).! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 11:49:44' prior: 50860116!
test03LogRightRotationFromAnyHeading

	| marsRover rotationLog |
	
	marsRover := MarsRover at: 0@0 heading: #North.
	rotationLog := MarsRoverLog new.
	marsRover addRotationLog: rotationLog.
	
	marsRover process: 'rrrr'.
	
	self assert: 4 equals: rotationLog size.
	self assert: 'Rotated East.' equals: (rotationLog at: 	1).
	self assert: 'Rotated South.' equals: (rotationLog at: 	2).
	self assert: 'Rotated West.' equals: (rotationLog at: 	3).
	self assert: 'Rotated North.' equals: (rotationLog at: 	4).! !

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 11:49:51'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 11:49:55'!
addRotationLog: aMarsRoverLog 
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'LB 6/5/2021 11:50:12'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionLog rotationLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 11:50:10' prior: 50860157!
addRotationLog: aMarsRoverLog 
	rotationLog := aMarsRoverLog.! !

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 11:50:13'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'LB 6/5/2021 11:51:53' prior: 50859525!
rotateRight
	
	head rotateRight: self.
	(head isHeading: #East) ifTrue: [rotationLog add: 'Rotated East.'].
	(head isHeading: #South) ifTrue: [rotationLog add: 'Rotated South.'].
	(head isHeading: #West) ifTrue: [rotationLog add: 'Rotated West.'].
	(head isHeading: #North) ifTrue: [rotationLog add: 'Rotated North.'].! !
!MarsRover methodsFor: 'heading' stamp: 'LB 6/5/2021 11:52:45' prior: 50860179!
rotateRight
	
	head rotateRight: self.
	(head isHeading: #East) ifTrue: [rotationLog notify: 'Rotated East.'].
	(head isHeading: #South) ifTrue: [rotationLog notify: 'Rotated South.'].
	(head isHeading: #West) ifTrue: [rotationLog notify: 'Rotated West.'].
	(head isHeading: #North) ifTrue: [rotationLog notify: 'Rotated North.'].! !

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 11:53:11'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 11:54:02'!
PASSED!
!MarsRoverLog methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 11:54:29'!
notifyChange: aChange
	^log add: aChange.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 11:54:29' prior: 50860026!
moveForward
	
	head moveForward: self.
	positionLog notifyChange: position asString.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 11:54:29' prior: 50860104!
moveBackward
	
	head moveBackward: self.
	positionLog notifyChange: position asString.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 11:54:29' prior: 50860192!
rotateRight
	
	head rotateRight: self.
	(head isHeading: #East) ifTrue: [rotationLog notifyChange: 'Rotated East.'].
	(head isHeading: #South) ifTrue: [rotationLog notifyChange: 'Rotated South.'].
	(head isHeading: #West) ifTrue: [rotationLog notifyChange: 'Rotated West.'].
	(head isHeading: #North) ifTrue: [rotationLog notifyChange: 'Rotated North.'].! !

!methodRemoval: MarsRoverLog #notify: stamp: 'LB 6/5/2021 11:54:29'!
notify: aChange
	^log add: aChange.!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 11:54:41'!
ERROR!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 11:54:41'!
ERROR!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 11:54:41'!
PASSED!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 11:55:07'!
ERROR!
!MarsRover methodsFor: 'initialization' stamp: 'LB 6/5/2021 11:56:14' prior: 50859500!
initializeAt: aPosition heading: aHeading

	position := aPosition.
	head := aHeading.
	positionLog := MarsRoverLog new.
	rotationLog := MarsRoverLog new.! !
!MarsRover methodsFor: 'initialization' stamp: 'LB 6/5/2021 11:56:39' prior: 50860259!
initializeAt: aPosition heading: aHeading

	position := aPosition.
	head := aHeading.! !
!MarsRover methodsFor: 'moving' stamp: 'LB 6/5/2021 11:57:10' prior: 50860217!
moveForward
	
	head moveForward: self.
	positionLog ifNotNil: [
		positionLog notifyChange: position asString.
	]! !
!MarsRover methodsFor: 'moving' stamp: 'LB 6/5/2021 11:57:23' prior: 50860223!
moveBackward
	
	head moveBackward: self.
	positionLog ifNotNil: [
		positionLog notifyChange: position asString.
	]
	! !
!MarsRover methodsFor: 'heading' stamp: 'LB 6/5/2021 11:57:44' prior: 50860229!
rotateRight
	
	head rotateRight: self.
	rotationLog  ifNotNil:  [
		(head isHeading: #East) ifTrue: [rotationLog notifyChange: 'Rotated East.'].
		(head isHeading: #South) ifTrue: [rotationLog notifyChange: 'Rotated South.'].
		(head isHeading: #West) ifTrue: [rotationLog notifyChange: 'Rotated West.'].
		(head isHeading: #North) ifTrue: [rotationLog notifyChange: 'Rotated North.'].
	]! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 11:57:48'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 11:57:50'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 11:57:54'!
PASSED!
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 11:58:32'!
test04LogLeftRotationFromAnyHeading

	| marsRover rotationLog |
	
	marsRover := MarsRover at: 0@0 heading: #North.
	rotationLog := MarsRoverLog new.
	marsRover addRotationLog: rotationLog.
	
	marsRover process: 'llll'.
	
	self assert: 4 equals: rotationLog size.
	self assert: 'Rotated West.' equals: (rotationLog at: 	1).
	self assert: 'Rotated South.' equals: (rotationLog at: 	2).
	self assert: 'Rotated East.' equals: (rotationLog at: 	3).
	self assert: 'Rotated North.' equals: (rotationLog at: 	4).! !

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 11:58:33'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'LB 6/5/2021 11:58:55' prior: 50859521!
rotateLeft
	
	head rotateLeft: self.
	rotationLog  ifNotNil:  [
		(head isHeading: #East) ifTrue: [rotationLog notifyChange: 'Rotated East.'].
		(head isHeading: #South) ifTrue: [rotationLog notifyChange: 'Rotated South.'].
		(head isHeading: #West) ifTrue: [rotationLog notifyChange: 'Rotated West.'].
		(head isHeading: #North) ifTrue: [rotationLog notifyChange: 'Rotated North.'].
	]! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 11:58:57'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 11:58:57'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 11:58:57'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 11:58:57'!
PASSED!

----SNAPSHOT----(5 June 2021 11:59:06) CuisUniversity-4532.image priorSource: 16903322!

!classDefinition: #MarsRoverWindow category: 'MarsRover-WithHeading' stamp: 'LB 6/5/2021 12:03:20'!
Object subclass: #MarsRoverWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 12:03:15'!
test05WindowUpdatesPositionInForwardMovement

	| marsRover positionLog |
	
	marsRover := MarsRover at: 0@0 heading: #North.
	positionLog := MarsRoverWindow new.
	marsRover addPositionLog: positionLog.
	
	marsRover process: 'f'.
	self assert: '0@1' equals: (positionLog position).
	marsRover process: 'rf'.
	self assert: '1@1' equals: (positionLog position).
	marsRover process: 'rf'.
	self assert: '1@0' equals: (positionLog position).
	marsRover process: 'rf'.
	self assert: '0@0' equals: (positionLog position).! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 12:03:30' prior: 50860372!
test05WindowUpdatesPositionInForwardMovement

	| marsRover positionWindow |
	
	marsRover := MarsRover at: 0@0 heading: #North.
	positionWindow := MarsRoverWindow new.
	marsRover addPositionLog: positionWindow.
	
	marsRover process: 'f'.
	self assert: '0@1' equals: (positionWindow position).
	marsRover process: 'rf'.
	self assert: '1@1' equals: (positionWindow position).
	marsRover process: 'rf'.
	self assert: '1@0' equals: (positionWindow position).
	marsRover process: 'rf'.
	self assert: '0@0' equals: (positionWindow position).! !

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 12:03:36'!
ERROR!
!MarsRoverWindow methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 12:03:44'!
notifyChange: aString 
	self shouldBeImplemented.! !

!classDefinition: #MarsRoverWindow category: 'MarsRover-WithHeading' stamp: 'LB 6/5/2021 12:04:14'!
Object subclass: #MarsRoverWindow
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverWindow methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 12:04:13' prior: 50860415!
notifyChange: aString 
	position := aString.! !

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 12:04:15'!
ERROR!
!MarsRoverWindow methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 12:04:26'!
position
	self shouldBeImplemented.
	^position! !
!MarsRoverWindow methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 12:04:33' prior: 50860436!
position
	^position! !

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 12:04:35'!
PASSED!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 12:04:35'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 12:04:35'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 12:04:35'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 12:04:35'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 12:04:35'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 12:04:44'!
PASSED!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 12:04:44'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 12:04:44'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 12:04:44'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 12:04:44'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 12:04:44'!
PASSED!
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 12:05:34'!
test06WindowUpdatesPositionInBackwardsMovement

	| marsRover positionWindow |
	
	marsRover := MarsRover at: 0@0 heading: #South.
	positionWindow := MarsRoverWindow new.
	marsRover addPositionLog: positionWindow.
	
	marsRover process: 'b'.
	self assert: '0@1' equals: (positionWindow position).
	marsRover process: 'rb'.
	self assert: '1@1' equals: (positionWindow position).
	marsRover process: 'rb'.
	self assert: '1@0' equals: (positionWindow position).
	marsRover process: 'rb'.
	self assert: '0@0' equals: (positionWindow position).! !

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 12:05:35'!
PASSED!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 12:05:35'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 12:05:35'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 12:05:35'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 12:05:35'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 12:05:35'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 12:05:35'!
PASSED!

!methodRemoval: FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 12:06:07'!
test06WindowUpdatesPositionInBackwardsMovement

	| marsRover positionWindow |
	
	marsRover := MarsRover at: 0@0 heading: #South.
	positionWindow := MarsRoverWindow new.
	marsRover addPositionLog: positionWindow.
	
	marsRover process: 'b'.
	self assert: '0@1' equals: (positionWindow position).
	marsRover process: 'rb'.
	self assert: '1@1' equals: (positionWindow position).
	marsRover process: 'rb'.
	self assert: '1@0' equals: (positionWindow position).
	marsRover process: 'rb'.
	self assert: '0@0' equals: (positionWindow position).!
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 12:06:22' prior: 50860392!
test05WindowUpdatesPositionInForwardMovement

	| marsRover positionWindow |
	
	marsRover := MarsRover at: 0@0 heading: #North.
	positionWindow := MarsRoverWindow new.
	marsRover addPositionWindow: positionWindow.
	
	marsRover process: 'f'.
	self assert: '0@1' equals: (positionWindow position).
	marsRover process: 'rf'.
	self assert: '1@1' equals: (positionWindow position).
	marsRover process: 'rf'.
	self assert: '1@0' equals: (positionWindow position).
	marsRover process: 'rf'.
	self assert: '0@0' equals: (positionWindow position).! !

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 12:06:24'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 12:06:27'!
addPositionWindow: aMarsRoverWindow 
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'LB 6/5/2021 12:06:41'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionLog rotationLog positionWindow'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 12:06:39' prior: 50860571!
addPositionWindow: aMarsRoverWindow 
	positionWindow := aMarsRoverWindow.! !

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 12:06:42'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'LB 6/5/2021 12:07:15' prior: 50860273!
moveForward
	
	head moveForward: self.
	positionLog ifNotNil: [
		positionLog notifyChange: position asString.
	].
	positionWindow ifNotNil: [
		positionWindow notifyChange: position asString.
	].! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 12:07:17'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 12:07:17'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 12:07:17'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 12:07:17'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 12:07:17'!
PASSED!
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 12:07:34'!
test06WindowUpdatesPositionInBackwardsMovement

    | marsRover positionWindow |
    
    marsRover := MarsRover at: 0@0 heading: #South.
    positionWindow := MarsRoverWindow new.
    marsRover addPositionWindow: positionWindow.
    
    marsRover process: 'b'.
    self assert: '0@1' equals: (positionWindow position).
    marsRover process: 'rb'.
    self assert: '1@1' equals: (positionWindow position).
    marsRover process: 'rb'.
    self assert: '1@0' equals: (positionWindow position).
    marsRover process: 'rb'.
    self assert: '0@0' equals: (positionWindow position).! !

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 12:07:35'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'LB 6/5/2021 12:07:51' prior: 50860280!
moveBackward
	
	head moveBackward: self.
	positionLog ifNotNil: [
		positionLog notifyChange: position asString.
	].
	positionWindow ifNotNil: [
		positionWindow notifyChange: position asString.
	].
	! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 12:07:55'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 12:07:55'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 12:07:55'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 12:07:55'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 12:07:55'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 12:07:55'!
PASSED!
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 12:09:10'!
test07WindowUpdatesHeadingInRightRotation

    | marsRover positionWindow |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    positionWindow := MarsRoverWindow new.
    marsRover addPositionWindow: positionWindow.
    
    marsRover process: 'r'.
    self assert: 'East' equals: (positionWindow position).
    marsRover process: 'r'.
    self assert: 'South' equals: (positionWindow position).
    marsRover process: 'r'.
    self assert: 'West' equals: (positionWindow position).
    marsRover process: 'r'.
    self assert: 'North' equals: (positionWindow position).! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 12:09:22' prior: 50860673!
test07WindowUpdatesHeadingInRightRotation

    | marsRover positionWindow |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    positionWindow := MarsRoverWindow new.
    marsRover addRotationWindow: positionWindow.
    
    marsRover process: 'r'.
    self assert: 'East' equals: (positionWindow position).
    marsRover process: 'r'.
    self assert: 'South' equals: (positionWindow position).
    marsRover process: 'r'.
    self assert: 'West' equals: (positionWindow position).
    marsRover process: 'r'.
    self assert: 'North' equals: (positionWindow position).! !

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 12:09:24'!
ERROR!
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 12:09:47' prior: 50860695!
test07WindowUpdatesHeadingInRightRotation

    | marsRover positionWindow |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    positionWindow := MarsRoverWindow new.
    marsRover addRotationWindow: positionWindow.
    
    marsRover process: 'r'.
    self assert: 'East' equals: (positionWindow orientation).
    marsRover process: 'r'.
    self assert: 'South' equals: (positionWindow orientation).
    marsRover process: 'r'.
    self assert: 'West' equals: (positionWindow orientation).
    marsRover process: 'r'.
    self assert: 'North' equals: (positionWindow orientation).! !

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 12:09:52'!
ERROR!
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 12:10:08' prior: 50860720!
test07WindowUpdatesHeadingInRightRotation

    | marsRover rotationWindow |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    rotationWindow := MarsRoverWindow new.
    marsRover addRotationWindow: rotationWindow.
    
    marsRover process: 'r'.
    self assert: 'East' equals: (rotationWindow orientation).
    marsRover process: 'r'.
    self assert: 'South' equals: (rotationWindow orientation).
    marsRover process: 'r'.
    self assert: 'West' equals: (rotationWindow orientation).
    marsRover process: 'r'.
    self assert: 'North' equals: (rotationWindow orientation).! !

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 12:10:11'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 12:10:13'!
addRotationWindow: aMarsRoverWindow 
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'LB 6/5/2021 12:10:31'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionLog rotationLog positionWindow rotationWindow'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 12:10:30' prior: 50860770!
addRotationWindow: aMarsRoverWindow 
	rotationWindow := aMarsRoverWindow.! !

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 12:10:33'!
ERROR!
!MarsRoverWindow methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 12:10:37'!
orientation
	self shouldBeImplemented.! !

!classDefinition: #MarsRoverWindow category: 'MarsRover-WithHeading' stamp: 'LB 6/5/2021 12:10:51'!
Object subclass: #MarsRoverWindow
	instanceVariableNames: 'position orientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverWindow methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 12:10:49' prior: 50860794!
orientation
	^orientation! !

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 12:10:52'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'LB 6/5/2021 12:11:31' prior: 50860287!
rotateRight
	
	head rotateRight: self.
	rotationLog  ifNotNil:  [
		(head isHeading: #East) ifTrue: [rotationLog notifyChange: 'Rotated East.'].
		(head isHeading: #South) ifTrue: [rotationLog notifyChange: 'Rotated South.'].
		(head isHeading: #West) ifTrue: [rotationLog notifyChange: 'Rotated West.'].
		(head isHeading: #North) ifTrue: [rotationLog notifyChange: 'Rotated North.'].
	].
	rotationWindow  ifNotNil:  [
		(head isHeading: #East) ifTrue: [rotationWindow notifyChange: 'East.'].
		(head isHeading: #South) ifTrue: [rotationWindow notifyChange: 'South.'].
		(head isHeading: #West) ifTrue: [rotationWindow notifyChange: 'West.'].
		(head isHeading: #North) ifTrue: [rotationWindow notifyChange: 'North.'].
	]! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 12:11:33'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 12:11:33'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 12:11:33'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 12:11:33'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 12:11:33'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 12:11:33'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 12:11:33'!
FAILURE!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 12:11:33'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'LB 6/5/2021 12:11:51' prior: 50860814!
rotateRight
	
	head rotateRight: self.
	rotationLog  ifNotNil:  [
		(head isHeading: #East) ifTrue: [rotationLog notifyChange: 'Rotated East.'].
		(head isHeading: #South) ifTrue: [rotationLog notifyChange: 'Rotated South.'].
		(head isHeading: #West) ifTrue: [rotationLog notifyChange: 'Rotated West.'].
		(head isHeading: #North) ifTrue: [rotationLog notifyChange: 'Rotated North.'].
	].
	rotationWindow ifNotNil:  [
		(head isHeading: #East) ifTrue: [rotationWindow notifyChange: 'East.'].
		(head isHeading: #South) ifTrue: [rotationWindow notifyChange: 'South.'].
		(head isHeading: #West) ifTrue: [rotationWindow notifyChange: 'West.'].
		(head isHeading: #North) ifTrue: [rotationWindow notifyChange: 'North.'].
	]! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 12:12:56' prior: 50860745!
test07WindowUpdatesHeadingInRightRotation

    | marsRover rotationWindow |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    rotationWindow := MarsRoverWindow new.
    marsRover addRotationWindow: rotationWindow.
    
    marsRover process: 'r'.
    self assert: 'East' equals: (rotationWindow position).
    marsRover process: 'r'.
    self assert: 'South' equals: (rotationWindow position).
    marsRover process: 'r'.
    self assert: 'West' equals: (rotationWindow position).
    marsRover process: 'r'.
    self assert: 'North' equals: (rotationWindow position).! !

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 12:12:57'!
FAILURE!
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 12:13:08' prior: 50860892!
test07WindowUpdatesHeadingInRightRotation

    | marsRover rotationWindow |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    rotationWindow := MarsRoverWindow new.
    marsRover addRotationWindow: rotationWindow.
    
    marsRover process: 'r'.
    self assert: 'East.' equals: (rotationWindow position).
    marsRover process: 'r'.
    self assert: 'South.' equals: (rotationWindow position).
    marsRover process: 'r'.
    self assert: 'West.' equals: (rotationWindow position).
    marsRover process: 'r'.
    self assert: 'North.' equals: (rotationWindow position).! !

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 12:13:10'!
PASSED!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 12:13:10'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 12:13:10'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 12:13:10'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 12:13:10'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 12:13:10'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 12:13:10'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 12:13:10'!
PASSED!
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 12:14:38' prior: 50860917!
test07WindowUpdatesHeadingInRightRotation

    | marsRover rotationWindow |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    rotationWindow := MarsRoverWindow new.
    marsRover addRotationWindow: rotationWindow.
    
    marsRover process: 'r'.
    self assert: 'East.' equals: (rotationWindow orientation).
    marsRover process: 'r'.
    self assert: 'South.' equals: (rotationWindow orientation).
    marsRover process: 'r'.
    self assert: 'West.' equals: (rotationWindow orientation).
    marsRover process: 'r'.
    self assert: 'North.' equals: (rotationWindow orientation).! !

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 12:14:40'!
FAILURE!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 12:14:40'!
FAILURE!
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 12:15:27' prior: 50860965!
test07WindowUpdatesHeadingInRightRotation

    | marsRover rotationWindow |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    rotationWindow := MarsRoverWindow new.
    marsRover addRotationWindow: rotationWindow.
    
    marsRover process: 'r'.
    self assert: 'East.' equals: (rotationWindow orientation).
    marsRover process: 'r'.
    self assert: 'South.' equals: (rotationWindow orientation).
    marsRover process: 'r'.
    self assert: 'West.' equals: (rotationWindow orientation).
    marsRover process: 'r'.
    self assert: 'North.' equals: (rotationWindow orientation).! !
!MarsRover methodsFor: 'heading' stamp: 'LB 6/5/2021 12:15:44' prior: 50860866!
rotateRight
	
	head rotateRight: self.
	rotationLog  ifNotNil:  [
		(head isHeading: #East) ifTrue: [rotationLog notifyChange: 'Rotated East.'].
		(head isHeading: #South) ifTrue: [rotationLog notifyChange: 'Rotated South.'].
		(head isHeading: #West) ifTrue: [rotationLog notifyChange: 'Rotated West.'].
		(head isHeading: #North) ifTrue: [rotationLog notifyChange: 'Rotated North.'].
	].
	rotationWindow ifNotNil:  [
		(head isHeading: #East) ifTrue: [rotationWindow notifyRotationChange: 'East.'].
		(head isHeading: #South) ifTrue: [rotationWindow notifyRotationChange: 'South.'].
		(head isHeading: #West) ifTrue: [rotationWindow notifyRotationChange: 'West.'].
		(head isHeading: #North) ifTrue: [rotationWindow notifyRotationChange: 'North.'].
	]! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 12:15:49'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 12:15:49'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 12:15:49'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 12:15:49'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 12:15:49'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 12:15:49'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 12:15:49'!
ERROR!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 12:15:49'!
ERROR!
!MarsRoverWindow methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 12:15:53'!
notifyRotationChange: aString 
	self shouldBeImplemented.! !
!MarsRoverWindow methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 12:16:12' prior: 50861069!
notifyRotationChange: anOrientation 
	orientation := anOrientation.! !

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 12:16:14'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 12:16:15'!
PASSED!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 12:16:17'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 12:16:17'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 12:16:17'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 12:16:17'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 12:16:17'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 12:16:17'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 12:16:17'!
PASSED!
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 12:16:44'!
test07WindowUpdatesHeadingInLeftRotation

    | marsRover rotationWindow |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    rotationWindow := MarsRoverWindow new.
    marsRover addRotationWindow: rotationWindow.
    
    marsRover process: 'l'.
    self assert: 'West.' equals: (rotationWindow orientation).
    marsRover process: 'l'.
    self assert: 'South.' equals: (rotationWindow orientation).
    marsRover process: 'l'.
    self assert: 'East.' equals: (rotationWindow orientation).
    marsRover process: 'l'.
    self assert: 'North.' equals: (rotationWindow orientation).! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 12:16:53'!
test08WindowUpdatesHeadingInLeftRotation

    | marsRover rotationWindow |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    rotationWindow := MarsRoverWindow new.
    marsRover addRotationWindow: rotationWindow.
    
    marsRover process: 'l'.
    self assert: 'West.' equals: (rotationWindow orientation).
    marsRover process: 'l'.
    self assert: 'South.' equals: (rotationWindow orientation).
    marsRover process: 'l'.
    self assert: 'East.' equals: (rotationWindow orientation).
    marsRover process: 'l'.
    self assert: 'North.' equals: (rotationWindow orientation).! !

!methodRemoval: FollowingTest #test07WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/5/2021 12:16:53'!
test07WindowUpdatesHeadingInLeftRotation

    | marsRover rotationWindow |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    rotationWindow := MarsRoverWindow new.
    marsRover addRotationWindow: rotationWindow.
    
    marsRover process: 'l'.
    self assert: 'West.' equals: (rotationWindow orientation).
    marsRover process: 'l'.
    self assert: 'South.' equals: (rotationWindow orientation).
    marsRover process: 'l'.
    self assert: 'East.' equals: (rotationWindow orientation).
    marsRover process: 'l'.
    self assert: 'North.' equals: (rotationWindow orientation).!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/5/2021 12:16:56'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'LB 6/5/2021 12:17:10' prior: 50860334!
rotateLeft
	
	head rotateLeft: self.
	rotationLog  ifNotNil:  [
		(head isHeading: #East) ifTrue: [rotationLog notifyChange: 'Rotated East.'].
		(head isHeading: #South) ifTrue: [rotationLog notifyChange: 'Rotated South.'].
		(head isHeading: #West) ifTrue: [rotationLog notifyChange: 'Rotated West.'].
		(head isHeading: #North) ifTrue: [rotationLog notifyChange: 'Rotated North.'].
	].
	rotationWindow ifNotNil:  [
		(head isHeading: #East) ifTrue: [rotationWindow notifyRotationChange: 'East.'].
		(head isHeading: #South) ifTrue: [rotationWindow notifyRotationChange: 'South.'].
		(head isHeading: #West) ifTrue: [rotationWindow notifyRotationChange: 'West.'].
		(head isHeading: #North) ifTrue: [rotationWindow notifyRotationChange: 'North.'].
	]! !

!testRun: #MarsRoverTest #test01 stamp: 'LB 6/5/2021 12:17:13'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'LB 6/5/2021 12:17:13'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'LB 6/5/2021 12:17:13'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'LB 6/5/2021 12:17:13'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'LB 6/5/2021 12:17:13'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'LB 6/5/2021 12:17:13'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'LB 6/5/2021 12:17:13'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'LB 6/5/2021 12:17:13'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'LB 6/5/2021 12:17:13'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'LB 6/5/2021 12:17:13'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'LB 6/5/2021 12:17:13'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'LB 6/5/2021 12:17:13'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'LB 6/5/2021 12:17:13'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'LB 6/5/2021 12:17:13'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'LB 6/5/2021 12:17:13'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'LB 6/5/2021 12:17:13'!
PASSED!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 12:17:21'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 12:17:21'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 12:17:21'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 12:17:21'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 12:17:21'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 12:17:21'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 12:17:21'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/5/2021 12:17:21'!
PASSED!

----SNAPSHOT----(5 June 2021 12:18:41) CuisUniversity-4532.image priorSource: 16918742!

----SNAPSHOT----(5 June 2021 12:24:39) CuisUniversity-4532.image priorSource: 16947722!
!MarsRover methodsFor: 'moving' stamp: 'LB 6/5/2021 12:32:49'!
notifyPositionChange
	positionLog ifNotNil: [
		positionLog notifyChange: position asString.
	].
	positionWindow ifNotNil: [
		positionWindow notifyChange: position asString.
	].! !
!MarsRover methodsFor: 'moving' stamp: 'LB 6/5/2021 12:33:00' prior: 50860594!
moveForward
	
	head moveForward: self.
	self notifyPositionChange.! !
!MarsRover methodsFor: 'moving' stamp: 'LB 6/5/2021 12:33:05' prior: 50860644!
moveBackward
	
	head moveBackward: self.
	self notifyPositionChange.! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 12:33:07'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 12:33:07'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 12:33:07'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 12:33:07'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 12:33:07'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 12:33:07'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 12:33:07'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/5/2021 12:33:07'!
PASSED!

Object subclass: #MarsRover
	instanceVariableNames: 'position head positionObservers rotationLog rotationWindow'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'LB 6/5/2021 12:34:23'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionObservers rotationLog rotationWindow'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 12:34:42' prior: 50859973!
addPositionLog: aMarsRoverLog 
	positionObservers add: aMarsRoverLog.! !
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 12:34:53' prior: 50860585!
addPositionWindow: aMarsRoverWindow 
	positionObservers add: aMarsRoverWindow.! !
!MarsRover methodsFor: 'initialization' stamp: 'LB 6/5/2021 12:35:11' prior: 50860267!
initializeAt: aPosition heading: aHeading

	position := aPosition.
	head := aHeading.
	positionObservers := OrderedCollection new.! !
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 12:35:51' prior: 50861272!
notifyPositionChange
	positionObservers do: [:anObserver | anObserver notifyChange: position asString.].! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 12:35:55'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 12:35:55'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 12:35:55'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 12:35:55'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 12:35:55'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 12:35:55'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 12:35:55'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/5/2021 12:35:55'!
PASSED!

Object subclass: #MarsRover
	instanceVariableNames: 'position head positionObservers rotationObservers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'LB 6/5/2021 12:36:06'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionObservers rotationObservers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'initialization' stamp: 'LB 6/5/2021 12:36:17' prior: 50861344!
initializeAt: aPosition heading: aHeading

	position := aPosition.
	head := aHeading.
	positionObservers := OrderedCollection new.
	rotationObservers := OrderedCollection new.! !
!MarsRover methodsFor: 'heading' stamp: 'LB 6/5/2021 12:38:22' prior: 50861016!
rotateRight
	
	head rotateRight: self.
	rotationObservers do: [:anObserver |  
		(head isHeading: #East) ifTrue: [anObserver notifyRotationChange: 'East.'].
		(head isHeading: #South) ifTrue: [anObserver notifyRotationChange: 'South.'].
		(head isHeading: #West) ifTrue: [anObserver notifyRotationChange: 'West.'].
		(head isHeading: #North) ifTrue: [anObserver notifyRotationChange: 'North.'].
	].! !
!MarsRover methodsFor: 'heading' stamp: 'LB 6/5/2021 12:38:33' prior: 50861178!
rotateLeft
	
	head rotateLeft: self.
	rotationObservers do: [:anObserver |  
		(head isHeading: #East) ifTrue: [anObserver notifyRotationChange: 'East.'].
		(head isHeading: #South) ifTrue: [anObserver notifyRotationChange: 'South.'].
		(head isHeading: #West) ifTrue: [anObserver notifyRotationChange: 'West.'].
		(head isHeading: #North) ifTrue: [anObserver notifyRotationChange: 'North.'].
	].! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 12:38:35'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 12:38:35'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 12:38:35'!
FAILURE!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 12:38:35'!
FAILURE!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 12:38:35'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 12:38:35'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 12:38:35'!
FAILURE!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/5/2021 12:38:35'!
FAILURE!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 12:38:40'!
FAILURE!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 12:38:40'!
FAILURE!
!MarsRoverLog methodsFor: 'aaa' stamp: 'LB 6/5/2021 12:39:00'!
notifyRotationChange: aChange
	^log add: aChange.! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 12:39:02'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 12:39:02'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 12:39:02'!
FAILURE!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 12:39:02'!
FAILURE!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 12:39:02'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 12:39:02'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 12:39:02'!
FAILURE!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/5/2021 12:39:02'!
FAILURE!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 12:39:06'!
FAILURE!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 12:39:06'!
FAILURE!
!FollowingTest methodsFor: 'test' stamp: 'LB 6/5/2021 12:39:27' prior: 50860135!
test03LogRightRotationFromAnyHeading

	| marsRover rotationLog |
	
	marsRover := MarsRover at: 0@0 heading: #North.
	rotationLog := MarsRoverLog new.
	marsRover addRotationLog: rotationLog.
	
	marsRover process: 'rrrr'.
	
	self assert: 4 equals: rotationLog size.
	self assert: 'East.' equals: (rotationLog at: 	1).
	self assert: 'South.' equals: (rotationLog at: 	2).
	self assert: 'West.' equals: (rotationLog at: 	3).
	self assert: 'North.' equals: (rotationLog at: 	4).! !
!MarsRoverLog methodsFor: 'aaa' stamp: 'LB 6/5/2021 12:39:49' prior: 50861471!
notifyRotationChange: aChange
	^log add: aChange.! !

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 12:39:55'!
FAILURE!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 12:39:55'!
FAILURE!

marsRover!
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 12:40:52' prior: 50860171!
addRotationLog: aMarsRoverLog 
	rotationObservers add: aMarsRoverLog.! !
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 12:41:00' prior: 50860785!
addRotationWindow: aMarsRoverWindow 
	rotationObservers add: aMarsRoverWindow.! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 12:41:01'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 12:41:01'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 12:41:01'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 12:41:01'!
FAILURE!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 12:41:01'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 12:41:01'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 12:41:01'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/5/2021 12:41:01'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 12:41:01'!
FAILURE!
!FollowingTest methodsFor: 'test' stamp: 'LB 6/5/2021 12:41:13' prior: 50860312!
test04LogLeftRotationFromAnyHeading

	| marsRover rotationLog |
	
	marsRover := MarsRover at: 0@0 heading: #North.
	rotationLog := MarsRoverLog new.
	marsRover addRotationLog: rotationLog.
	
	marsRover process: 'llll'.
	
	self assert: 4 equals: rotationLog size.
	self assert: 'West.' equals: (rotationLog at: 	1).
	self assert: 'South.' equals: (rotationLog at: 	2).
	self assert: 'East.' equals: (rotationLog at: 	3).
	self assert: 'North.' equals: (rotationLog at: 	4).! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 12:41:16'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 12:41:16'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 12:41:16'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 12:41:16'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 12:41:16'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 12:41:16'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 12:41:16'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/5/2021 12:41:16'!
PASSED!
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 12:41:44'!
addPositionObserver: aMarsRoverLog 
	positionObservers add: aMarsRoverLog.! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 12:41:44' prior: 50860080!
test02LogBackwardsFromAnyHeading

	| marsRover positionLog |
	
	marsRover := MarsRover at: 0@0 heading: #South.
	positionLog := MarsRoverLog new.
	marsRover addPositionObserver: positionLog.
	
	marsRover process: 'brbrbrb'.
	
	self assert: 4 equals: positionLog size.
	self assert: '0@1' equals: (positionLog at: 	1).
	self assert: '1@1' equals: (positionLog at: 	2).
	self assert: '1@0' equals: (positionLog at: 	3).
	self assert: '0@0' equals: (positionLog at: 	4).! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 12:41:44' prior: 50860039!
test01LogForwardFromAnyHeading

	| marsRover positionLog |
	
	marsRover := MarsRover at: 0@0 heading: #North.
	positionLog := MarsRoverLog new.
	marsRover addPositionObserver: positionLog.
	
	marsRover process: 'frfrfrf'.
	
	self assert: 4 equals: positionLog size.
	self assert: '0@1' equals: (positionLog at: 	1).
	self assert: '1@1' equals: (positionLog at: 	2).
	self assert: '1@0' equals: (positionLog at: 	3).
	self assert: '0@0' equals: (positionLog at: 	4).! !

!methodRemoval: MarsRover #addPositionLog: stamp: 'LB 6/5/2021 12:41:44'!
addPositionLog: aMarsRoverLog 
	positionObservers add: aMarsRoverLog.!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 12:41:50'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 12:41:50'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 12:41:50'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 12:41:50'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 12:41:50'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 12:41:50'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 12:41:50'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/5/2021 12:41:50'!
PASSED!

!methodRemoval: MarsRover #addPositionObserver: stamp: 'LB 6/5/2021 12:42:02'!
addPositionObserver: aMarsRoverLog 
	positionObservers add: aMarsRoverLog.!
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 12:42:13'!
addPositionObserver: aMarsRoverWindow 
	positionObservers add: aMarsRoverWindow.! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 12:42:13' prior: 50860548!
test05WindowUpdatesPositionInForwardMovement

	| marsRover positionWindow |
	
	marsRover := MarsRover at: 0@0 heading: #North.
	positionWindow := MarsRoverWindow new.
	marsRover addPositionObserver: positionWindow.
	
	marsRover process: 'f'.
	self assert: '0@1' equals: (positionWindow position).
	marsRover process: 'rf'.
	self assert: '1@1' equals: (positionWindow position).
	marsRover process: 'rf'.
	self assert: '1@0' equals: (positionWindow position).
	marsRover process: 'rf'.
	self assert: '0@0' equals: (positionWindow position).! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 12:42:13' prior: 50860619!
test06WindowUpdatesPositionInBackwardsMovement

    | marsRover positionWindow |
    
    marsRover := MarsRover at: 0@0 heading: #South.
    positionWindow := MarsRoverWindow new.
    marsRover addPositionObserver: positionWindow.
    
    marsRover process: 'b'.
    self assert: '0@1' equals: (positionWindow position).
    marsRover process: 'rb'.
    self assert: '1@1' equals: (positionWindow position).
    marsRover process: 'rb'.
    self assert: '1@0' equals: (positionWindow position).
    marsRover process: 'rb'.
    self assert: '0@0' equals: (positionWindow position).! !

!methodRemoval: MarsRover #addPositionWindow: stamp: 'LB 6/5/2021 12:42:13'!
addPositionWindow: aMarsRoverWindow 
	positionObservers add: aMarsRoverWindow.!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 12:42:19'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 12:42:19'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 12:42:19'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 12:42:19'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 12:42:19'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 12:42:19'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 12:42:19'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/5/2021 12:42:19'!
PASSED!
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 12:42:34'!
addRotationObserver: aMarsRoverLog 
	rotationObservers add: aMarsRoverLog.! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 12:42:34' prior: 50861509!
test03LogRightRotationFromAnyHeading

	| marsRover rotationLog |
	
	marsRover := MarsRover at: 0@0 heading: #North.
	rotationLog := MarsRoverLog new.
	marsRover addRotationObserver: rotationLog.
	
	marsRover process: 'rrrr'.
	
	self assert: 4 equals: rotationLog size.
	self assert: 'East.' equals: (rotationLog at: 	1).
	self assert: 'South.' equals: (rotationLog at: 	2).
	self assert: 'West.' equals: (rotationLog at: 	3).
	self assert: 'North.' equals: (rotationLog at: 	4).! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 12:42:34' prior: 50861579!
test04LogLeftRotationFromAnyHeading

	| marsRover rotationLog |
	
	marsRover := MarsRover at: 0@0 heading: #North.
	rotationLog := MarsRoverLog new.
	marsRover addRotationObserver: rotationLog.
	
	marsRover process: 'llll'.
	
	self assert: 4 equals: rotationLog size.
	self assert: 'West.' equals: (rotationLog at: 	1).
	self assert: 'South.' equals: (rotationLog at: 	2).
	self assert: 'East.' equals: (rotationLog at: 	3).
	self assert: 'North.' equals: (rotationLog at: 	4).! !

!methodRemoval: MarsRover #addRotationLog: stamp: 'LB 6/5/2021 12:42:34'!
addRotationLog: aMarsRoverLog 
	rotationObservers add: aMarsRoverLog.!

!methodRemoval: MarsRover #addRotationObserver: stamp: 'LB 6/5/2021 12:42:40'!
addRotationObserver: aMarsRoverLog 
	rotationObservers add: aMarsRoverLog.!
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 12:42:48'!
addRotationObserver: aMarsRoverWindow 
	rotationObservers add: aMarsRoverWindow.! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 12:42:48' prior: 50861131!
test08WindowUpdatesHeadingInLeftRotation

    | marsRover rotationWindow |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    rotationWindow := MarsRoverWindow new.
    marsRover addRotationObserver: rotationWindow.
    
    marsRover process: 'l'.
    self assert: 'West.' equals: (rotationWindow orientation).
    marsRover process: 'l'.
    self assert: 'South.' equals: (rotationWindow orientation).
    marsRover process: 'l'.
    self assert: 'East.' equals: (rotationWindow orientation).
    marsRover process: 'l'.
    self assert: 'North.' equals: (rotationWindow orientation).! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 12:42:48' prior: 50860994!
test07WindowUpdatesHeadingInRightRotation

    | marsRover rotationWindow |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    rotationWindow := MarsRoverWindow new.
    marsRover addRotationObserver: rotationWindow.
    
    marsRover process: 'r'.
    self assert: 'East.' equals: (rotationWindow orientation).
    marsRover process: 'r'.
    self assert: 'South.' equals: (rotationWindow orientation).
    marsRover process: 'r'.
    self assert: 'West.' equals: (rotationWindow orientation).
    marsRover process: 'r'.
    self assert: 'North.' equals: (rotationWindow orientation).! !

!methodRemoval: MarsRover #addRotationWindow: stamp: 'LB 6/5/2021 12:42:48'!
addRotationWindow: aMarsRoverWindow 
	rotationObservers add: aMarsRoverWindow.!
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 12:43:02' prior: 50861830!
addRotationObserver: aRotationObserver
	rotationObservers add: aRotationObserver.! !
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 12:43:11' prior: 50861700!
addPositionObserver: aPositionObserver 
	positionObservers add: aPositionObserver.! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 12:43:13'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 12:43:13'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 12:43:13'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 12:43:13'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 12:43:13'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 12:43:13'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 12:43:13'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/5/2021 12:43:13'!
PASSED!
!MarsRover methodsFor: 'heading' stamp: 'LB 6/5/2021 12:43:31'!
notifyRotationChange
	rotationObservers do: [:anObserver |  
		(head isHeading: #East) ifTrue: [anObserver notifyRotationChange: 'East.'].
		(head isHeading: #South) ifTrue: [anObserver notifyRotationChange: 'South.'].
		(head isHeading: #West) ifTrue: [anObserver notifyRotationChange: 'West.'].
		(head isHeading: #North) ifTrue: [anObserver notifyRotationChange: 'North.'].
	].! !
!MarsRover methodsFor: 'heading' stamp: 'LB 6/5/2021 12:43:41' prior: 50861423!
rotateLeft
	
	head rotateLeft: self.
	self notifyRotationChange.! !
!MarsRover methodsFor: 'heading' stamp: 'LB 6/5/2021 12:43:46' prior: 50861407!
rotateRight
	
	head rotateRight: self.
	self notifyRotationChange.! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 12:43:52'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 12:43:52'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 12:43:52'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 12:43:52'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 12:43:52'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 12:43:52'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 12:43:52'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/5/2021 12:43:52'!
PASSED!

----SNAPSHOT----(5 June 2021 12:47:15) CuisUniversity-4532.image priorSource: 16947811!

----SNAPSHOT----(5 June 2021 12:51:58) CuisUniversity-4532.image priorSource: 16970317!
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 12:52:32' prior: 50861922!
notifyRotationChange
	rotationObservers do: [:anObserver |  anObserver notifyRotationChange: head].
		"(head isHeading: #East) ifTrue: [anObserver notifyRotationChange: 'East.'].
		(head isHeading: #South) ifTrue: [anObserver notifyRotationChange: 'South.'].
		(head isHeading: #West) ifTrue: [anObserver notifyRotationChange: 'West.'].
		(head isHeading: #North) ifTrue: [anObserver notifyRotationChange: 'North.'].
	]."! !

!classDefinition: #MarsRoverWindow category: 'MarsRover-WithHeading' stamp: 'LB 6/5/2021 12:53:40'!
Object subclass: #MarsRoverWindow
	instanceVariableNames: 'position orientation head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverWindow methodsFor: 'aaa' stamp: 'LB 6/5/2021 12:53:38' prior: 50861074!
notifyRotationChange: aHeading
	head := aHeading.! !
!MarsRoverWindow methodsFor: 'testing' stamp: 'LB 6/5/2021 12:54:54' prior: 50860807!
orientation
	(head isHeading: #East) ifTrue: [^'East.'].
	(head isHeading: #South) ifTrue: [^'South.'].
	(head isHeading: #West) ifTrue: [^'West.'].
	(head isHeading: #North) ifTrue: [^'North.'].! !

Object subclass: #MarsRoverWindow
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverWindow category: 'MarsRover-WithHeading' stamp: 'LB 6/5/2021 12:55:14'!
Object subclass: #MarsRoverWindow
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverLog methodsFor: 'aaa' stamp: 'LB 6/5/2021 12:55:32' prior: 50861527!
notifyRotationChange: aHeading
	^log add: aHeading.! !
!MarsRoverLog methodsFor: 'aaa' stamp: 'LB 6/5/2021 12:56:13' prior: 50862031!
notifyRotationChange: aHeading
	(aHeading isHeading: #East) ifTrue: [^log add: 'East.'].
	(aHeading isHeading: #South) ifTrue: [^log add: 'South.'].
	(aHeading isHeading: #West) ifTrue: [^log add: 'West.'].
	(aHeading isHeading: #North) ifTrue: [^log add: 'North.'].! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 12:56:18'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 12:56:18'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 12:56:18'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 12:56:18'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 12:56:18'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 12:56:18'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 12:56:18'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/5/2021 12:56:18'!
PASSED!
!MarsRoverWindow methodsFor: 'aaa' stamp: 'LB 6/5/2021 12:57:19'!
notifyPositionChange: aString 
	position := aString.! !
!MarsRoverLog methodsFor: 'aaa' stamp: 'LB 6/5/2021 12:57:19'!
notifyPositionChange: aChange
	^log add: aChange.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 12:57:19' prior: 50861351!
notifyPositionChange
	positionObservers do: [:anObserver | anObserver notifyPositionChange: position asString.].! !

!methodRemoval: MarsRoverWindow #notifyChange: stamp: 'LB 6/5/2021 12:57:19'!
notifyChange: aString 
	position := aString.!

!methodRemoval: MarsRoverLog #notifyChange: stamp: 'LB 6/5/2021 12:57:19'!
notifyChange: aChange
	^log add: aChange.!
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 12:57:25' prior: 50862082!
notifyPositionChange
	positionObservers do: [:anObserver | anObserver notifyPositionChange: position].! !
!MarsRoverLog methodsFor: 'aaa' stamp: 'LB 6/5/2021 12:57:37' prior: 50862077!
notifyPositionChange: aPosition
	^log add: aPosition asString.! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 12:57:43'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 12:57:43'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 12:57:43'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 12:57:43'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 12:57:43'!
FAILURE!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 12:57:43'!
FAILURE!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 12:57:43'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/5/2021 12:57:43'!
PASSED!
!MarsRoverWindow methodsFor: 'aaa' stamp: 'LB 6/5/2021 12:57:58' prior: 50862073!
notifyPositionChange: aPosition 
	position := aPosition asString.! !
!MarsRoverWindow methodsFor: 'aaa' stamp: 'LB 6/5/2021 12:58:14' prior: 50862133!
notifyPositionChange: aPosition 
	position := aPosition.! !
!MarsRoverWindow methodsFor: 'testing' stamp: 'LB 6/5/2021 12:58:24' prior: 50860441!
position
	^position asString.! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 12:58:28'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 12:58:28'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 12:58:28'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 12:58:28'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 12:58:28'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 12:58:28'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 12:58:28'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/5/2021 12:58:28'!
PASSED!
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 12:58:49' prior: 50861979!
notifyRotationChange
	rotationObservers do: [:anObserver |  anObserver notifyRotationChange: head].! !
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 12:59:17' prior: 50862173!
notifyRotationChange
	rotationObservers do: [:anObserver | anObserver notifyRotationChange: head].! !

----SNAPSHOT----(5 June 2021 13:02:35) CuisUniversity-4532.image priorSource: 16970406!

Object subclass: #MarsRoverObserver
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverObserver category: 'MarsRover-WithHeading' stamp: 'LB 6/5/2021 13:02:57'!
Object subclass: #MarsRoverObserver
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoverObserver subclass: #MarsRoverLog
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverLog category: 'MarsRover-WithHeading' stamp: 'LB 6/5/2021 13:03:05'!
MarsRoverObserver subclass: #MarsRoverLog
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoverObserver subclass: #MarsRoverWindow
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverWindow category: 'MarsRover-WithHeading' stamp: 'LB 6/5/2021 13:03:13'!
MarsRoverObserver subclass: #MarsRoverWindow
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverObserver methodsFor: 'no messages' stamp: 'LB 6/5/2021 13:03:30'!
notifyRotationChange: aHeading
	self subclassResponsibility.! !
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 13:03:38'!
notifyPositionChange: aPosition
	self subclassResponsibility.! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 13:04:56'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 13:04:56'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 13:04:56'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 13:04:56'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 13:04:56'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 13:04:56'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 13:04:56'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/5/2021 13:04:56'!
PASSED!

----SNAPSHOT----(5 June 2021 13:07:47) CuisUniversity-4532.image priorSource: 16977093!

----STARTUP---- (5 June 2021 20:24:52) as /home/lbiglieri/Downloads/build/CuisUniversity/imagen2/CuisUniversity-4532.image!


!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'LB 6/5/2021 20:49:45'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionObservers rotationObservers observers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 20:49:43' prior: 50861885!
addRotationObserver: aRotationObserver
	observers add: aRotationObserver.! !
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 20:49:57'!
addObserver: aRotationObserver
	observers add: aRotationObserver.! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 20:49:57' prior: 50861858!
test07WindowUpdatesHeadingInRightRotation

    | marsRover rotationWindow |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    rotationWindow := MarsRoverWindow new.
    marsRover addObserver: rotationWindow.
    
    marsRover process: 'r'.
    self assert: 'East.' equals: (rotationWindow orientation).
    marsRover process: 'r'.
    self assert: 'South.' equals: (rotationWindow orientation).
    marsRover process: 'r'.
    self assert: 'West.' equals: (rotationWindow orientation).
    marsRover process: 'r'.
    self assert: 'North.' equals: (rotationWindow orientation).! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 20:49:57' prior: 50861784!
test03LogRightRotationFromAnyHeading

	| marsRover rotationLog |
	
	marsRover := MarsRover at: 0@0 heading: #North.
	rotationLog := MarsRoverLog new.
	marsRover addObserver: rotationLog.
	
	marsRover process: 'rrrr'.
	
	self assert: 4 equals: rotationLog size.
	self assert: 'East.' equals: (rotationLog at: 	1).
	self assert: 'South.' equals: (rotationLog at: 	2).
	self assert: 'West.' equals: (rotationLog at: 	3).
	self assert: 'North.' equals: (rotationLog at: 	4).! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 20:49:57' prior: 50861803!
test04LogLeftRotationFromAnyHeading

	| marsRover rotationLog |
	
	marsRover := MarsRover at: 0@0 heading: #North.
	rotationLog := MarsRoverLog new.
	marsRover addObserver: rotationLog.
	
	marsRover process: 'llll'.
	
	self assert: 4 equals: rotationLog size.
	self assert: 'West.' equals: (rotationLog at: 	1).
	self assert: 'South.' equals: (rotationLog at: 	2).
	self assert: 'East.' equals: (rotationLog at: 	3).
	self assert: 'North.' equals: (rotationLog at: 	4).! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 20:49:57' prior: 50861836!
test08WindowUpdatesHeadingInLeftRotation

    | marsRover rotationWindow |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    rotationWindow := MarsRoverWindow new.
    marsRover addObserver: rotationWindow.
    
    marsRover process: 'l'.
    self assert: 'West.' equals: (rotationWindow orientation).
    marsRover process: 'l'.
    self assert: 'South.' equals: (rotationWindow orientation).
    marsRover process: 'l'.
    self assert: 'East.' equals: (rotationWindow orientation).
    marsRover process: 'l'.
    self assert: 'North.' equals: (rotationWindow orientation).! !

!methodRemoval: MarsRover #addRotationObserver: stamp: 'LB 6/5/2021 20:49:57'!
addRotationObserver: aRotationObserver
	observers add: aRotationObserver.!
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 20:50:08' prior: 50862283!
addObserver: anObserver
	observers add: anObserver.! !
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 20:50:15' prior: 50862373!
addObserver: anObserver
	observers add: anObserver.! !
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 20:50:37' prior: 50861891!
addPositionObserver: anObserver
	observers add: anObserver.! !

!methodRemoval: MarsRover #addObserver: stamp: 'LB 6/5/2021 20:50:43'!
addObserver: anObserver
	observers add: anObserver.!
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 20:50:56'!
addObserver: anObserver
	observers add: anObserver.! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 20:50:56' prior: 50861647!
test01LogForwardFromAnyHeading

	| marsRover positionLog |
	
	marsRover := MarsRover at: 0@0 heading: #North.
	positionLog := MarsRoverLog new.
	marsRover addObserver: positionLog.
	
	marsRover process: 'frfrfrf'.
	
	self assert: 4 equals: positionLog size.
	self assert: '0@1' equals: (positionLog at: 	1).
	self assert: '1@1' equals: (positionLog at: 	2).
	self assert: '1@0' equals: (positionLog at: 	3).
	self assert: '0@0' equals: (positionLog at: 	4).! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 20:50:56' prior: 50861706!
test05WindowUpdatesPositionInForwardMovement

	| marsRover positionWindow |
	
	marsRover := MarsRover at: 0@0 heading: #North.
	positionWindow := MarsRoverWindow new.
	marsRover addObserver: positionWindow.
	
	marsRover process: 'f'.
	self assert: '0@1' equals: (positionWindow position).
	marsRover process: 'rf'.
	self assert: '1@1' equals: (positionWindow position).
	marsRover process: 'rf'.
	self assert: '1@0' equals: (positionWindow position).
	marsRover process: 'rf'.
	self assert: '0@0' equals: (positionWindow position).! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 20:50:56' prior: 50861726!
test06WindowUpdatesPositionInBackwardsMovement

    | marsRover positionWindow |
    
    marsRover := MarsRover at: 0@0 heading: #South.
    positionWindow := MarsRoverWindow new.
    marsRover addObserver: positionWindow.
    
    marsRover process: 'b'.
    self assert: '0@1' equals: (positionWindow position).
    marsRover process: 'rb'.
    self assert: '1@1' equals: (positionWindow position).
    marsRover process: 'rb'.
    self assert: '1@0' equals: (positionWindow position).
    marsRover process: 'rb'.
    self assert: '0@0' equals: (positionWindow position).! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 20:50:56' prior: 50861629!
test02LogBackwardsFromAnyHeading

	| marsRover positionLog |
	
	marsRover := MarsRover at: 0@0 heading: #South.
	positionLog := MarsRoverLog new.
	marsRover addObserver: positionLog.
	
	marsRover process: 'brbrbrb'.
	
	self assert: 4 equals: positionLog size.
	self assert: '0@1' equals: (positionLog at: 	1).
	self assert: '1@1' equals: (positionLog at: 	2).
	self assert: '1@0' equals: (positionLog at: 	3).
	self assert: '0@0' equals: (positionLog at: 	4).! !

!methodRemoval: MarsRover #addPositionObserver: stamp: 'LB 6/5/2021 20:50:56'!
addPositionObserver: anObserver
	observers add: anObserver.!
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 20:51:24' prior: 50862096!
notifyPositionChange
	observers do: [:anObserver | anObserver notifyPositionChange: position].! !
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 20:51:29' prior: 50862179!
notifyRotationChange
	observers do: [:anObserver | anObserver notifyRotationChange: head].! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 20:51:35'!
ERROR!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 20:51:35'!
ERROR!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 20:51:35'!
ERROR!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 20:51:35'!
ERROR!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 20:51:35'!
ERROR!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 20:51:35'!
ERROR!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 20:51:35'!
ERROR!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/5/2021 20:51:35'!
ERROR!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 20:51:44'!
ERROR!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 20:51:44'!
ERROR!
!MarsRover methodsFor: 'initialization' stamp: 'LB 6/5/2021 20:52:12' prior: 50861398!
initializeAt: aPosition heading: aHeading

	position := aPosition.
	head := aHeading.
	observers := OrderedCollection new.
	rotationObservers := OrderedCollection new.! !
!MarsRover methodsFor: 'initialization' stamp: 'LB 6/5/2021 20:52:16' prior: 50862522!
initializeAt: aPosition heading: aHeading

	position := aPosition.
	head := aHeading.
	observers := OrderedCollection new.! !

Object subclass: #MarsRover
	instanceVariableNames: 'position head observers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'LB 6/5/2021 20:52:24'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head observers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 20:52:26'!
FAILURE!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 20:52:26'!
FAILURE!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 20:52:26'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 20:52:26'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 20:52:26'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 20:52:26'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 20:52:26'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/5/2021 20:52:26'!
PASSED!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 20:52:37'!
FAILURE!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 20:52:37'!
FAILURE!

----STARTUP---- (5 June 2021 21:05:47) as /home/lbiglieri/Downloads/build/CuisUniversity/imagen2/CuisUniversity-4532.image!


Object subclass: #Zzz
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Zzz category: 'MarsRover-WithHeading' stamp: 'LB 6/5/2021 21:07:32'!
Object subclass: #Zzz
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Object subclass: #Zzz
	instanceVariableNames: 'positionObservers rotationObservers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Zzz category: 'MarsRover-WithHeading' stamp: 'LB 6/5/2021 21:07:57'!
Object subclass: #Zzz
	instanceVariableNames: 'positionObservers rotationObservers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Zzz methodsFor: 'no messages' stamp: 'LB 6/5/2021 21:14:00'!
add: anObserver for: aState
	(aState = #Position) ifTrue: [^self addPositionObserver: anObserver].
	(aState = #Rotation) ifTrue: [^self addRotationObserver: anObserver].! !
!Zzz methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:14:37'!
addPositionObserver: anObserver
	positionObservers add: anObserver.! !
!Zzz methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:14:56'!
addRotationObserver: anObserver
	rotationObservers add: anObserver.! !

!classDefinition: #Zzz category: 'MarsRover-WithHeading' stamp: 'LB 6/5/2021 21:19:50'!
Object subclass: #Zzz
	instanceVariableNames: 'positionObservers rotationObservers marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Zzz category: 'MarsRover-WithHeading' stamp: 'LB 6/5/2021 21:19:52'!
Object subclass: #Zzz
	instanceVariableNames: 'positionObservers rotationObservers marsRover orientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Zzz category: 'MarsRover-WithHeading' stamp: 'LB 6/5/2021 21:19:57'!
Object subclass: #Zzz
	instanceVariableNames: 'positionObservers rotationObservers marsRover orientation position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Zzz methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:19:48'!
update
	(marsRover isHeading: orientation) ifFalse: [self updateHeading].
	(marsRover position = position) ifFalse: [self updatePosition].! !
!Zzz methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:21:49'!
updatePosition
	position := marsRover position.
	positionObservers do: [:anObserver | anObserver notifyPositionChange: position].! !
!Zzz methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:23:10'!
updateHeading
	orientation := marsRover head.
	rotationObservers do: [:anObserver | anObserver notifyRotationChange: orientation].! !
!MarsRover methodsFor: 'testing' stamp: 'LB 6/5/2021 21:24:03'!
head
	^head! !
!MarsRover methodsFor: 'testing' stamp: 'LB 6/5/2021 21:24:14'!
position
	^position! !
!Zzz methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:25:35' prior: 50862337!
update
	(marsRover head isHeading: orientation) ifFalse: [self updateHeading].
	(marsRover position = position) ifFalse: [self updatePosition].! !
!Zzz methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:27:25' prior: 50862351!
updateHeading
	(marsRover head isHeading: #North) ifTrue: [orientation := #North].
	(marsRover head isHeading: #East) ifTrue: [orientation := #East].
	(marsRover head isHeading: #South) ifTrue: [orientation := #South].
	(marsRover head isHeading: #West) ifTrue: [orientation := #West].
	rotationObservers do: [:anObserver | anObserver notifyRotationChange: orientation].! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 21:27:58'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 21:27:58'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 21:27:58'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 21:27:58'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 21:27:58'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 21:27:58'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 21:27:58'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/5/2021 21:27:58'!
PASSED!
!Zzz class methodsFor: 'no messages' stamp: 'LB 6/5/2021 21:28:52'!
for: aMarsRover
	self initializeFor: aMarsRover ! !
!Zzz class methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:28:57' prior: 50862414!
for: aMarsRover
	self new initializeFor: aMarsRover ! !
!Zzz methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:30:41'!
initializeFor: aMarsRover
	marsRover  := aMarsRover.
	position := marsRover position.
	orientation := marsRover position.! !

!classDefinition: #Zzz category: 'MarsRover-WithHeading' stamp: 'LB 6/5/2021 21:32:23'!
Object subclass: #Zzz
	instanceVariableNames: 'positionObservers rotationObservers marsRover orientation position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Zzz methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:32:17' prior: 50862365!
update
	(marsRover head = head) ifFalse: [self updateHeading].
	(marsRover position = position) ifFalse: [self updatePosition].! !
!Zzz methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:33:59' prior: 50862373!
updateHeading
	head := marsRover head.
	rotationObservers do: [:anObserver | 
		(marsRover head isHeading: #North) ifTrue: [anObserver notifyRotationChange: #North].
		(marsRover head isHeading: #East) ifTrue: [anObserver notifyRotationChange: #East].
		(marsRover head isHeading: #South) ifTrue: [anObserver notifyRotationChange: #South].
		(marsRover head isHeading: #West) ifTrue: [anObserver notifyRotationChange: #West].
	]! !

Object subclass: #Zzz
	instanceVariableNames: 'positionObservers rotationObservers marsRover position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Zzz category: 'MarsRover-WithHeading' stamp: 'LB 6/5/2021 21:34:12'!
Object subclass: #Zzz
	instanceVariableNames: 'positionObservers rotationObservers marsRover position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Zzz methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:34:25' prior: 50862423!
initializeFor: aMarsRover
	marsRover  := aMarsRover.
	position := marsRover position.
	head := marsRover head.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'LB 6/5/2021 21:36:31'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionObservers rotationObservers observers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'initialization' stamp: 'LB 6/5/2021 21:36:30' prior: 50861398!
initializeAt: aPosition heading: aHeading

	position := aPosition.
	head := aHeading.
	observers := Zzz for: self.
	positionObservers := OrderedCollection new.
	rotationObservers := OrderedCollection new.! !
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 21:38:32'!
addObserver: anObserver for: anObservable
	observers add: anObserver for: anObservable! !
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 21:39:03' prior: 50861885!
addRotationObserver: aRotationObserver
	observers add: aRotationObserver for: #Rotation.
	"rotationObservers add: aRotationObserver."! !
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 21:39:25' prior: 50861891!
addPositionObserver: aPositionObserver 
	observers add: aPositionObserver for: #Position.
	"positionObservers add: aPositionObserver."! !
!Zzz methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:40:12' prior: 50862446!
updateHeading
	head := marsRover head.
	rotationObservers do: [:anObserver | 
		(marsRover head isHeading: #North) ifTrue: [anObserver notifyRotationChange: 'North.'].
		(marsRover head isHeading: #East) ifTrue: [anObserver notifyRotationChange: 'East.'].
		(marsRover head isHeading: #South) ifTrue: [anObserver notifyRotationChange: 'South.'].
		(marsRover head isHeading: #West) ifTrue: [anObserver notifyRotationChange: 'West.'].
	]! !
!Zzz methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:40:31' prior: 50862293!
add: anObserver for: anObservable
	(anObservable = #Position) ifTrue: [^self addPositionObserver: anObserver].
	(anObservable = #Rotation) ifTrue: [^self addRotationObserver: anObserver].! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 21:40:34'!
ERROR!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 21:40:34'!
ERROR!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 21:40:34'!
ERROR!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 21:40:34'!
ERROR!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 21:40:34'!
ERROR!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 21:40:34'!
ERROR!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 21:40:34'!
ERROR!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/5/2021 21:40:34'!
ERROR!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 21:40:48'!
ERROR!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 21:40:48'!
ERROR!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 21:41:15'!
ERROR!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 21:41:15'!
ERROR!

Zzz for: self.!

Zzz for: self.!
!Zzz class methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:42:33' prior: 50862419!
for: aMarsRover
	^self new initializeFor: aMarsRover ! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 21:42:40'!
ERROR!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 21:42:40'!
ERROR!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 21:42:40'!
ERROR!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 21:42:40'!
ERROR!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 21:42:40'!
ERROR!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 21:42:40'!
ERROR!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 21:42:40'!
ERROR!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/5/2021 21:42:40'!
ERROR!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 21:42:47'!
ERROR!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 21:42:47'!
ERROR!
!Zzz methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:43:43' prior: 50862477!
initializeFor: aMarsRover
	marsRover  := aMarsRover.
	position := marsRover position.
	head := marsRover head.
	positionObservers := OrderedCollection new.
	rotationObservers := OrderedCollection new.! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 21:43:48'!
FAILURE!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 21:43:48'!
FAILURE!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 21:43:48'!
FAILURE!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 21:43:48'!
FAILURE!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 21:43:48'!
FAILURE!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 21:43:48'!
FAILURE!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 21:43:48'!
ERROR!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/5/2021 21:43:48'!
ERROR!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 21:43:54'!
FAILURE!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 21:43:54'!
FAILURE!
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 21:44:51' prior: 50862096!
notifyPositionChange
	observers update.
	"positionObservers do: [:anObserver | anObserver notifyPositionChange: position]."! !
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 21:45:00' prior: 50862179!
notifyRotationChange
	observers update.
	"rotationObservers do: [:anObserver | anObserver notifyRotationChange: head]."! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 21:45:02'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 21:45:02'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 21:45:02'!
ERROR!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 21:45:02'!
ERROR!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 21:45:02'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 21:45:02'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 21:45:02'!
ERROR!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/5/2021 21:45:02'!
ERROR!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 21:45:36'!
ERROR!
!Zzz methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:47:03' prior: 50862522!
updateHeading
	head := marsRover head.
	rotationObservers do: [:anObserver | 
		(marsRover head isHeading: #North) ifTrue: [anObserver notifyRotationChange: #North].
		(marsRover head isHeading: #East) ifTrue: [anObserver notifyRotationChange: #East].
		(marsRover head isHeading: #South) ifTrue: [anObserver notifyRotationChange: #South].
		(marsRover head isHeading: #West) ifTrue: [anObserver notifyRotationChange: #West].
	]! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 21:47:06'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 21:47:06'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 21:47:06'!
ERROR!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 21:47:06'!
ERROR!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 21:47:06'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 21:47:06'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 21:47:06'!
ERROR!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/5/2021 21:47:06'!
ERROR!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 21:47:20'!
ERROR!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 21:47:20'!
ERROR!
!MarsRoverLog methodsFor: 'updating' stamp: 'LB 6/5/2021 21:47:46' prior: 50862036 overrides: 50862226!
notifyRotationChange: aHead
	(aHead isHeading: #East) ifTrue: [^log add: 'East.'].
	(aHead isHeading: #South) ifTrue: [^log add: 'South.'].
	(aHead isHeading: #West) ifTrue: [^log add: 'West.'].
	(aHead isHeading: #North) ifTrue: [^log add: 'North.'].! !
!MarsRoverWindow methodsFor: 'updating' stamp: 'LB 6/5/2021 21:47:58' prior: 50862004 overrides: 50862226!
notifyRotationChange: aHead
	head := aHead.! !
!Zzz methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:48:23' prior: 50862709!
updateHeading
	head := marsRover head.
	rotationObservers do: [:anObserver | anObserver notifyRotationChange: head.]! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 21:48:26'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 21:48:26'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 21:48:26'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 21:48:26'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 21:48:26'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 21:48:26'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 21:48:26'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/5/2021 21:48:26'!
PASSED!

----SNAPSHOT----(5 June 2021 21:49:02) CuisUniversity-4532.image priorSource: 16979560!

!classRenamed: #MarsRoverObserver as: #MarsRoverFollower stamp: 'LB 6/5/2021 21:51:35'!
Smalltalk renameClassNamed: #MarsRoverObserver as: #MarsRoverFollower!

!classRenamed: #Zzz as: #MarsRoverObserver stamp: 'LB 6/5/2021 21:51:49'!
Smalltalk renameClassNamed: #Zzz as: #MarsRoverObserver!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:51:49' prior: 50862493!
initializeAt: aPosition heading: aHeading

	position := aPosition.
	head := aHeading.
	observers := MarsRoverObserver for: self.
	positionObservers := OrderedCollection new.
	rotationObservers := OrderedCollection new.! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 21:51:56'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 21:51:56'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 21:51:56'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 21:51:56'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 21:51:56'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 21:51:56'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 21:51:56'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/5/2021 21:51:56'!
PASSED!
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 21:53:14'!
addPositionObserver: aPositionObserver for: anObservable  
	observers add: aPositionObserver for: #Position.
	"positionObservers add: aPositionObserver."! !
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:53:14'!
addPositionObserver: anObserver for: anObservable 
	positionObservers add: anObserver.! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:53:14' prior: 50861629!
test02LogBackwardsFromAnyHeading

	| marsRover positionLog |
	
	marsRover := MarsRover at: 0@0 heading: #South.
	positionLog := MarsRoverLog new.
	marsRover addPositionObserver: positionLog for: #Position.
	
	marsRover process: 'brbrbrb'.
	
	self assert: 4 equals: positionLog size.
	self assert: '0@1' equals: (positionLog at: 	1).
	self assert: '1@1' equals: (positionLog at: 	2).
	self assert: '1@0' equals: (positionLog at: 	3).
	self assert: '0@0' equals: (positionLog at: 	4).! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:53:14' prior: 50861647!
test01LogForwardFromAnyHeading

	| marsRover positionLog |
	
	marsRover := MarsRover at: 0@0 heading: #North.
	positionLog := MarsRoverLog new.
	marsRover addPositionObserver: positionLog for: #Position.
	
	marsRover process: 'frfrfrf'.
	
	self assert: 4 equals: positionLog size.
	self assert: '0@1' equals: (positionLog at: 	1).
	self assert: '1@1' equals: (positionLog at: 	2).
	self assert: '1@0' equals: (positionLog at: 	3).
	self assert: '0@0' equals: (positionLog at: 	4).! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:53:14' prior: 50861706!
test05WindowUpdatesPositionInForwardMovement

	| marsRover positionWindow |
	
	marsRover := MarsRover at: 0@0 heading: #North.
	positionWindow := MarsRoverWindow new.
	marsRover addPositionObserver: positionWindow for: #Position.
	
	marsRover process: 'f'.
	self assert: '0@1' equals: (positionWindow position).
	marsRover process: 'rf'.
	self assert: '1@1' equals: (positionWindow position).
	marsRover process: 'rf'.
	self assert: '1@0' equals: (positionWindow position).
	marsRover process: 'rf'.
	self assert: '0@0' equals: (positionWindow position).! !
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:53:14' prior: 50862539!
add: anObserver for: anObservable
	(anObservable = #Position) ifTrue: [^self addPositionObserver: anObserver for: #Position].
	(anObservable = #Rotation) ifTrue: [^self addRotationObserver: anObserver].! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:53:14' prior: 50861726!
test06WindowUpdatesPositionInBackwardsMovement

    | marsRover positionWindow |
    
    marsRover := MarsRover at: 0@0 heading: #South.
    positionWindow := MarsRoverWindow new.
    marsRover addPositionObserver: positionWindow for: #Position.
    
    marsRover process: 'b'.
    self assert: '0@1' equals: (positionWindow position).
    marsRover process: 'rb'.
    self assert: '1@1' equals: (positionWindow position).
    marsRover process: 'rb'.
    self assert: '1@0' equals: (positionWindow position).
    marsRover process: 'rb'.
    self assert: '0@0' equals: (positionWindow position).! !

!methodRemoval: MarsRover #addPositionObserver: stamp: 'LB 6/5/2021 21:53:14'!
addPositionObserver: aPositionObserver 
	observers add: aPositionObserver for: #Position.
	"positionObservers add: aPositionObserver."!

!methodRemoval: MarsRoverObserver #addPositionObserver: stamp: 'LB 6/5/2021 21:53:14'!
addPositionObserver: anObserver
	positionObservers add: anObserver.!
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 21:54:20' prior: 50862857!
addPositionObserver: aPositionObserver for: anObservable  
	observers add: aPositionObserver for: anObservable.
	"positionObservers add: aPositionObserver."! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 21:54:23'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 21:54:23'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 21:54:23'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 21:54:23'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 21:54:23'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 21:54:23'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 21:54:23'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/5/2021 21:54:23'!
PASSED!
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 21:54:42' prior: 50862502!
addObserver: aFollower for: anObservable
	observers add: aFollower for: anObservable! !
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:55:10'!
addRotationObserver: anObserver for: anObservable 
	rotationObservers add: anObserver.! !
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 21:55:10'!
addRotationObserver: aRotationObserver for: anObservable 
	observers add: aRotationObserver for: #Rotation.
	"rotationObservers add: aRotationObserver."! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:55:10' prior: 50861784!
test03LogRightRotationFromAnyHeading

	| marsRover rotationLog |
	
	marsRover := MarsRover at: 0@0 heading: #North.
	rotationLog := MarsRoverLog new.
	marsRover addRotationObserver: rotationLog for: #Rotation.
	
	marsRover process: 'rrrr'.
	
	self assert: 4 equals: rotationLog size.
	self assert: 'East.' equals: (rotationLog at: 	1).
	self assert: 'South.' equals: (rotationLog at: 	2).
	self assert: 'West.' equals: (rotationLog at: 	3).
	self assert: 'North.' equals: (rotationLog at: 	4).! !
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:55:10' prior: 50862930!
add: anObserver for: anObservable
	(anObservable = #Position) ifTrue: [^self addPositionObserver: anObserver for: #Position].
	(anObservable = #Rotation) ifTrue: [^self addRotationObserver: anObserver for: #Rotation].! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:55:10' prior: 50861858!
test07WindowUpdatesHeadingInRightRotation

    | marsRover rotationWindow |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    rotationWindow := MarsRoverWindow new.
    marsRover addRotationObserver: rotationWindow for: #Rotation.
    
    marsRover process: 'r'.
    self assert: 'East.' equals: (rotationWindow orientation).
    marsRover process: 'r'.
    self assert: 'South.' equals: (rotationWindow orientation).
    marsRover process: 'r'.
    self assert: 'West.' equals: (rotationWindow orientation).
    marsRover process: 'r'.
    self assert: 'North.' equals: (rotationWindow orientation).! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:55:10' prior: 50861803!
test04LogLeftRotationFromAnyHeading

	| marsRover rotationLog |
	
	marsRover := MarsRover at: 0@0 heading: #North.
	rotationLog := MarsRoverLog new.
	marsRover addRotationObserver: rotationLog for: #Rotation.
	
	marsRover process: 'llll'.
	
	self assert: 4 equals: rotationLog size.
	self assert: 'West.' equals: (rotationLog at: 	1).
	self assert: 'South.' equals: (rotationLog at: 	2).
	self assert: 'East.' equals: (rotationLog at: 	3).
	self assert: 'North.' equals: (rotationLog at: 	4).! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:55:10' prior: 50861836!
test08WindowUpdatesHeadingInLeftRotation

    | marsRover rotationWindow |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    rotationWindow := MarsRoverWindow new.
    marsRover addRotationObserver: rotationWindow for: #Rotation.
    
    marsRover process: 'l'.
    self assert: 'West.' equals: (rotationWindow orientation).
    marsRover process: 'l'.
    self assert: 'South.' equals: (rotationWindow orientation).
    marsRover process: 'l'.
    self assert: 'East.' equals: (rotationWindow orientation).
    marsRover process: 'l'.
    self assert: 'North.' equals: (rotationWindow orientation).! !

!methodRemoval: MarsRoverObserver #addRotationObserver: stamp: 'LB 6/5/2021 21:55:10'!
addRotationObserver: anObserver
	rotationObservers add: anObserver.!

!methodRemoval: MarsRover #addRotationObserver: stamp: 'LB 6/5/2021 21:55:10'!
addRotationObserver: aRotationObserver
	observers add: aRotationObserver for: #Rotation.
	"rotationObservers add: aRotationObserver."!
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 21:55:17' prior: 50863019!
addRotationObserver: aRotationObserver for: anObservable 
	observers add: aRotationObserver for: anObservable.
	"rotationObservers add: aRotationObserver."! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 21:55:21'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 21:55:21'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 21:55:21'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 21:55:21'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 21:55:21'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 21:55:21'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 21:55:21'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/5/2021 21:55:21'!
PASSED!
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 21:55:34' prior: 50862974!
addPositionObserver: aFollower for: anObservable  
	observers add: aFollower for: anObservable.
	"positionObservers add: aPositionObserver."! !
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 21:55:39' prior: 50863132!
addRotationObserver: aFollower for: anObservable 
	observers add: aFollower for: anObservable.
	"rotationObservers add: aRotationObserver."! !

!methodRemoval: MarsRover #addObserver:for: stamp: 'LB 6/5/2021 21:55:44'!
addObserver: aFollower for: anObservable
	observers add: aFollower for: anObservable!
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:55:59'!
addObserver: anObserver for: anObservable 
	positionObservers add: anObserver.! !
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 21:55:59'!
addObserver: aFollower for: anObservable  
	observers add: aFollower for: anObservable.
	"positionObservers add: aPositionObserver."! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:55:59' prior: 50862940!
test06WindowUpdatesPositionInBackwardsMovement

    | marsRover positionWindow |
    
    marsRover := MarsRover at: 0@0 heading: #South.
    positionWindow := MarsRoverWindow new.
    marsRover addObserver: positionWindow for: #Position.
    
    marsRover process: 'b'.
    self assert: '0@1' equals: (positionWindow position).
    marsRover process: 'rb'.
    self assert: '1@1' equals: (positionWindow position).
    marsRover process: 'rb'.
    self assert: '1@0' equals: (positionWindow position).
    marsRover process: 'rb'.
    self assert: '0@0' equals: (positionWindow position).! !
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:55:59' prior: 50863046!
add: anObserver for: anObservable
	(anObservable = #Position) ifTrue: [^self addObserver: anObserver for: #Position].
	(anObservable = #Rotation) ifTrue: [^self addRotationObserver: anObserver for: #Rotation].! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:55:59' prior: 50862890!
test01LogForwardFromAnyHeading

	| marsRover positionLog |
	
	marsRover := MarsRover at: 0@0 heading: #North.
	positionLog := MarsRoverLog new.
	marsRover addObserver: positionLog for: #Position.
	
	marsRover process: 'frfrfrf'.
	
	self assert: 4 equals: positionLog size.
	self assert: '0@1' equals: (positionLog at: 	1).
	self assert: '1@1' equals: (positionLog at: 	2).
	self assert: '1@0' equals: (positionLog at: 	3).
	self assert: '0@0' equals: (positionLog at: 	4).! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:55:59' prior: 50862909!
test05WindowUpdatesPositionInForwardMovement

	| marsRover positionWindow |
	
	marsRover := MarsRover at: 0@0 heading: #North.
	positionWindow := MarsRoverWindow new.
	marsRover addObserver: positionWindow for: #Position.
	
	marsRover process: 'f'.
	self assert: '0@1' equals: (positionWindow position).
	marsRover process: 'rf'.
	self assert: '1@1' equals: (positionWindow position).
	marsRover process: 'rf'.
	self assert: '1@0' equals: (positionWindow position).
	marsRover process: 'rf'.
	self assert: '0@0' equals: (positionWindow position).! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:55:59' prior: 50862871!
test02LogBackwardsFromAnyHeading

	| marsRover positionLog |
	
	marsRover := MarsRover at: 0@0 heading: #South.
	positionLog := MarsRoverLog new.
	marsRover addObserver: positionLog for: #Position.
	
	marsRover process: 'brbrbrb'.
	
	self assert: 4 equals: positionLog size.
	self assert: '0@1' equals: (positionLog at: 	1).
	self assert: '1@1' equals: (positionLog at: 	2).
	self assert: '1@0' equals: (positionLog at: 	3).
	self assert: '0@0' equals: (positionLog at: 	4).! !

!methodRemoval: MarsRoverObserver #addPositionObserver:for: stamp: 'LB 6/5/2021 21:55:59'!
addPositionObserver: anObserver for: anObservable 
	positionObservers add: anObserver.!

!methodRemoval: MarsRover #addPositionObserver:for: stamp: 'LB 6/5/2021 21:55:59'!
addPositionObserver: aFollower for: anObservable  
	observers add: aFollower for: anObservable.
	"positionObservers add: aPositionObserver."!

!methodRemoval: MarsRover #addObserver:for: stamp: 'LB 6/5/2021 21:56:07'!
addObserver: aFollower for: anObservable  
	observers add: aFollower for: anObservable.
	"positionObservers add: aPositionObserver."!
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 21:56:39'!
addObserver: aFollower for: anObservable 
	observers add: aFollower for: anObservable.
	"rotationObservers add: aRotationObserver."! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 21:56:41'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 21:56:41'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 21:56:41'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 21:56:41'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 21:56:41'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 21:56:41'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 21:56:41'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/5/2021 21:56:41'!
PASSED!
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:57:04' prior: 50863187!
addObserver: aFollower for: anObservable 
	positionObservers add: aFollower.! !
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:59:29'!
addPositionFollower: aFollower
	positionObservers add: aFollower.! !

!methodRemoval: MarsRoverObserver #addObserver:for: stamp: 'LB 6/5/2021 21:59:35'!
addObserver: aFollower for: anObservable 
	positionObservers add: aFollower.!
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 21:59:50'!
addRotationFollower: anObserver 
	rotationObservers add: anObserver.! !
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 22:00:00' prior: 50863222!
add: anObserver for: anObservable
	(anObservable = #Position) ifTrue: [^self addPositionObserver: anObserver].
	(anObservable = #Rotation) ifTrue: [^self addRotationObserver: anObserver for: #Rotation].! !
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 22:00:17' prior: 50863364!
add: anObserver for: anObservable
	(anObservable = #Position) ifTrue: [^self addPositionFollower: anObserver].
	(anObservable = #Rotation) ifTrue: [^self addRotationFollower: anObserver].! !

!methodRemoval: MarsRoverObserver #addRotationObserver:for: stamp: 'LB 6/5/2021 22:00:21'!
addRotationObserver: anObserver for: anObservable 
	rotationObservers add: anObserver.!

!methodRemoval: MarsRover #addObserver:for: stamp: 'LB 6/5/2021 22:00:38'!
addObserver: aFollower for: anObservable 
	observers add: aFollower for: anObservable.
	"rotationObservers add: aRotationObserver."!
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 22:00:49'!
addObserver: aFollower for: anObservable 
	observers add: aFollower for: anObservable.
	"rotationObservers add: aRotationObserver."! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 22:00:49' prior: 50863079!
test04LogLeftRotationFromAnyHeading

	| marsRover rotationLog |
	
	marsRover := MarsRover at: 0@0 heading: #North.
	rotationLog := MarsRoverLog new.
	marsRover addObserver: rotationLog for: #Rotation.
	
	marsRover process: 'llll'.
	
	self assert: 4 equals: rotationLog size.
	self assert: 'West.' equals: (rotationLog at: 	1).
	self assert: 'South.' equals: (rotationLog at: 	2).
	self assert: 'East.' equals: (rotationLog at: 	3).
	self assert: 'North.' equals: (rotationLog at: 	4).! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 22:00:49' prior: 50863056!
test07WindowUpdatesHeadingInRightRotation

    | marsRover rotationWindow |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    rotationWindow := MarsRoverWindow new.
    marsRover addObserver: rotationWindow for: #Rotation.
    
    marsRover process: 'r'.
    self assert: 'East.' equals: (rotationWindow orientation).
    marsRover process: 'r'.
    self assert: 'South.' equals: (rotationWindow orientation).
    marsRover process: 'r'.
    self assert: 'West.' equals: (rotationWindow orientation).
    marsRover process: 'r'.
    self assert: 'North.' equals: (rotationWindow orientation).! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 22:00:49' prior: 50863027!
test03LogRightRotationFromAnyHeading

	| marsRover rotationLog |
	
	marsRover := MarsRover at: 0@0 heading: #North.
	rotationLog := MarsRoverLog new.
	marsRover addObserver: rotationLog for: #Rotation.
	
	marsRover process: 'rrrr'.
	
	self assert: 4 equals: rotationLog size.
	self assert: 'East.' equals: (rotationLog at: 	1).
	self assert: 'South.' equals: (rotationLog at: 	2).
	self assert: 'West.' equals: (rotationLog at: 	3).
	self assert: 'North.' equals: (rotationLog at: 	4).! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 22:00:49' prior: 50863098!
test08WindowUpdatesHeadingInLeftRotation

    | marsRover rotationWindow |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    rotationWindow := MarsRoverWindow new.
    marsRover addObserver: rotationWindow for: #Rotation.
    
    marsRover process: 'l'.
    self assert: 'West.' equals: (rotationWindow orientation).
    marsRover process: 'l'.
    self assert: 'South.' equals: (rotationWindow orientation).
    marsRover process: 'l'.
    self assert: 'East.' equals: (rotationWindow orientation).
    marsRover process: 'l'.
    self assert: 'North.' equals: (rotationWindow orientation).! !

!methodRemoval: MarsRover #addRotationObserver:for: stamp: 'LB 6/5/2021 22:00:49'!
addRotationObserver: aFollower for: anObservable 
	observers add: aFollower for: anObservable.
	"rotationObservers add: aRotationObserver."!
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 22:00:57' prior: 50863395!
addObserver: aFollower for: anObservable 
	observers add: aFollower for: anObservable.! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 22:00:59'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 22:00:59'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 22:00:59'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 22:00:59'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 22:00:59'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 22:00:59'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 22:00:59'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/5/2021 22:00:59'!
PASSED!
!MarsRover methodsFor: 'command processing' stamp: 'LB 6/5/2021 22:06:31' prior: 50859575!
process: aSequenceOfCommands

	aSequenceOfCommands do: [:aCommand | self processCommand: aCommand. observers update]
! !
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 22:06:45' prior: 50862673!
notifyRotationChange
	"observers update."
	"rotationObservers do: [:anObserver | anObserver notifyRotationChange: head]."! !
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 22:06:49' prior: 50862666!
notifyPositionChange
	"observers update."
	"positionObservers do: [:anObserver | anObserver notifyPositionChange: position]."! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 22:06:51'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 22:06:51'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 22:06:51'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 22:06:51'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 22:06:51'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 22:06:51'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 22:06:51'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/5/2021 22:06:51'!
PASSED!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 22:07:00'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 22:07:00'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 22:07:00'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 22:07:00'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 22:07:00'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 22:07:00'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 22:07:00'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/5/2021 22:07:00'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'LB 6/5/2021 22:07:00'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'LB 6/5/2021 22:07:00'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'LB 6/5/2021 22:07:00'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'LB 6/5/2021 22:07:00'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'LB 6/5/2021 22:07:00'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'LB 6/5/2021 22:07:00'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'LB 6/5/2021 22:07:00'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'LB 6/5/2021 22:07:00'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'LB 6/5/2021 22:07:00'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'LB 6/5/2021 22:07:00'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'LB 6/5/2021 22:07:00'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'LB 6/5/2021 22:07:00'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'LB 6/5/2021 22:07:00'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'LB 6/5/2021 22:07:00'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'LB 6/5/2021 22:07:00'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'LB 6/5/2021 22:07:00'!
PASSED!
!MarsRover methodsFor: 'heading' stamp: 'LB 6/5/2021 22:07:08' prior: 50861937!
rotateLeft
	
	head rotateLeft: self.! !
!MarsRover methodsFor: 'heading' stamp: 'LB 6/5/2021 22:07:13' prior: 50861942!
rotateRight
	
	head rotateRight: self.! !
!MarsRover methodsFor: 'moving' stamp: 'LB 6/5/2021 22:07:22' prior: 50861281!
moveForward
	
	head moveForward: self.! !
!MarsRover methodsFor: 'moving' stamp: 'LB 6/5/2021 22:07:27' prior: 50861286!
moveBackward
	
	head moveBackward: self.! !

!methodRemoval: MarsRover #notifyRotationChange stamp: 'LB 6/5/2021 22:07:36'!
notifyRotationChange
	"observers update."
	"rotationObservers do: [:anObserver | anObserver notifyRotationChange: head]."!

!methodRemoval: MarsRover #notifyPositionChange stamp: 'LB 6/5/2021 22:07:39'!
notifyPositionChange
	"observers update."
	"positionObservers do: [:anObserver | anObserver notifyPositionChange: position]."!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 22:07:41'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 22:07:41'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 22:07:41'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 22:07:41'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 22:07:41'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 22:07:41'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 22:07:41'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/5/2021 22:07:41'!
PASSED!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 22:07:44'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 22:07:44'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 22:07:44'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 22:07:44'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 22:07:44'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 22:07:44'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 22:07:44'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/5/2021 22:07:44'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'LB 6/5/2021 22:07:44'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'LB 6/5/2021 22:07:44'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'LB 6/5/2021 22:07:44'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'LB 6/5/2021 22:07:44'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'LB 6/5/2021 22:07:44'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'LB 6/5/2021 22:07:44'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'LB 6/5/2021 22:07:44'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'LB 6/5/2021 22:07:44'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'LB 6/5/2021 22:07:44'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'LB 6/5/2021 22:07:44'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'LB 6/5/2021 22:07:44'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'LB 6/5/2021 22:07:44'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'LB 6/5/2021 22:07:44'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'LB 6/5/2021 22:07:44'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'LB 6/5/2021 22:07:44'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'LB 6/5/2021 22:07:44'!
PASSED!

Object subclass: #MarsRover
	instanceVariableNames: 'position head observers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'LB 6/5/2021 22:08:05'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head observers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'following' stamp: 'LB 6/5/2021 22:08:21'!
addFollower: aFollower for: anObservable 
	observers add: aFollower for: anObservable.! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 22:08:21' prior: 50863444!
test03LogRightRotationFromAnyHeading

	| marsRover rotationLog |
	
	marsRover := MarsRover at: 0@0 heading: #North.
	rotationLog := MarsRoverLog new.
	marsRover addFollower: rotationLog for: #Rotation.
	
	marsRover process: 'rrrr'.
	
	self assert: 4 equals: rotationLog size.
	self assert: 'East.' equals: (rotationLog at: 	1).
	self assert: 'South.' equals: (rotationLog at: 	2).
	self assert: 'West.' equals: (rotationLog at: 	3).
	self assert: 'North.' equals: (rotationLog at: 	4).! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 22:08:21' prior: 50863200!
test06WindowUpdatesPositionInBackwardsMovement

    | marsRover positionWindow |
    
    marsRover := MarsRover at: 0@0 heading: #South.
    positionWindow := MarsRoverWindow new.
    marsRover addFollower: positionWindow for: #Position.
    
    marsRover process: 'b'.
    self assert: '0@1' equals: (positionWindow position).
    marsRover process: 'rb'.
    self assert: '1@1' equals: (positionWindow position).
    marsRover process: 'rb'.
    self assert: '1@0' equals: (positionWindow position).
    marsRover process: 'rb'.
    self assert: '0@0' equals: (positionWindow position).! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 22:08:21' prior: 50863422!
test07WindowUpdatesHeadingInRightRotation

    | marsRover rotationWindow |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    rotationWindow := MarsRoverWindow new.
    marsRover addFollower: rotationWindow for: #Rotation.
    
    marsRover process: 'r'.
    self assert: 'East.' equals: (rotationWindow orientation).
    marsRover process: 'r'.
    self assert: 'South.' equals: (rotationWindow orientation).
    marsRover process: 'r'.
    self assert: 'West.' equals: (rotationWindow orientation).
    marsRover process: 'r'.
    self assert: 'North.' equals: (rotationWindow orientation).! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 22:08:21' prior: 50863271!
test02LogBackwardsFromAnyHeading

	| marsRover positionLog |
	
	marsRover := MarsRover at: 0@0 heading: #South.
	positionLog := MarsRoverLog new.
	marsRover addFollower: positionLog for: #Position.
	
	marsRover process: 'brbrbrb'.
	
	self assert: 4 equals: positionLog size.
	self assert: '0@1' equals: (positionLog at: 	1).
	self assert: '1@1' equals: (positionLog at: 	2).
	self assert: '1@0' equals: (positionLog at: 	3).
	self assert: '0@0' equals: (positionLog at: 	4).! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 22:08:21' prior: 50863463!
test08WindowUpdatesHeadingInLeftRotation

    | marsRover rotationWindow |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    rotationWindow := MarsRoverWindow new.
    marsRover addFollower: rotationWindow for: #Rotation.
    
    marsRover process: 'l'.
    self assert: 'West.' equals: (rotationWindow orientation).
    marsRover process: 'l'.
    self assert: 'South.' equals: (rotationWindow orientation).
    marsRover process: 'l'.
    self assert: 'East.' equals: (rotationWindow orientation).
    marsRover process: 'l'.
    self assert: 'North.' equals: (rotationWindow orientation).! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 22:08:21' prior: 50863403!
test04LogLeftRotationFromAnyHeading

	| marsRover rotationLog |
	
	marsRover := MarsRover at: 0@0 heading: #North.
	rotationLog := MarsRoverLog new.
	marsRover addFollower: rotationLog for: #Rotation.
	
	marsRover process: 'llll'.
	
	self assert: 4 equals: rotationLog size.
	self assert: 'West.' equals: (rotationLog at: 	1).
	self assert: 'South.' equals: (rotationLog at: 	2).
	self assert: 'East.' equals: (rotationLog at: 	3).
	self assert: 'North.' equals: (rotationLog at: 	4).! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 22:08:21' prior: 50863250!
test05WindowUpdatesPositionInForwardMovement

	| marsRover positionWindow |
	
	marsRover := MarsRover at: 0@0 heading: #North.
	positionWindow := MarsRoverWindow new.
	marsRover addFollower: positionWindow for: #Position.
	
	marsRover process: 'f'.
	self assert: '0@1' equals: (positionWindow position).
	marsRover process: 'rf'.
	self assert: '1@1' equals: (positionWindow position).
	marsRover process: 'rf'.
	self assert: '1@0' equals: (positionWindow position).
	marsRover process: 'rf'.
	self assert: '0@0' equals: (positionWindow position).! !
!FollowingTest methodsFor: 'as yet unclassified' stamp: 'LB 6/5/2021 22:08:21' prior: 50863232!
test01LogForwardFromAnyHeading

	| marsRover positionLog |
	
	marsRover := MarsRover at: 0@0 heading: #North.
	positionLog := MarsRoverLog new.
	marsRover addFollower: positionLog for: #Position.
	
	marsRover process: 'frfrfrf'.
	
	self assert: 4 equals: positionLog size.
	self assert: '0@1' equals: (positionLog at: 	1).
	self assert: '1@1' equals: (positionLog at: 	2).
	self assert: '1@0' equals: (positionLog at: 	3).
	self assert: '0@0' equals: (positionLog at: 	4).! !

!methodRemoval: MarsRover #addObserver:for: stamp: 'LB 6/5/2021 22:08:21'!
addObserver: aFollower for: anObservable 
	observers add: aFollower for: anObservable.!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/5/2021 22:08:30'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/5/2021 22:08:30'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/5/2021 22:08:30'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/5/2021 22:08:30'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/5/2021 22:08:30'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/5/2021 22:08:30'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/5/2021 22:08:30'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/5/2021 22:08:30'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'LB 6/5/2021 22:08:30'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'LB 6/5/2021 22:08:30'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'LB 6/5/2021 22:08:30'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'LB 6/5/2021 22:08:30'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'LB 6/5/2021 22:08:30'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'LB 6/5/2021 22:08:30'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'LB 6/5/2021 22:08:30'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'LB 6/5/2021 22:08:30'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'LB 6/5/2021 22:08:30'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'LB 6/5/2021 22:08:30'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'LB 6/5/2021 22:08:30'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'LB 6/5/2021 22:08:30'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'LB 6/5/2021 22:08:30'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'LB 6/5/2021 22:08:30'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'LB 6/5/2021 22:08:30'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'LB 6/5/2021 22:08:30'!
PASSED!
!MarsRover methodsFor: 'initialization' stamp: 'LB 6/5/2021 22:10:50' prior: 50862821!
initializeAt: aPosition heading: aHeading

	position := aPosition.
	head := aHeading.
	observers := MarsRoverObserver for: self.! !

----SNAPSHOT----(5 June 2021 22:16:31) CuisUniversity-4532.image priorSource: 16997055!

----QUIT----(5 June 2021 22:16:50) CuisUniversity-4532.image priorSource: 17035395!

----STARTUP---- (6 June 2021 11:14:53) as /home/lbiglieri/Downloads/build/CuisUniversity/imagen2/CuisUniversity-4532.image!

!FollowingTest methodsFor: 'test' stamp: 'LB 6/6/2021 12:44:08'!
test09

    | marsRover rotationWindow |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    rotationWindow := MarsRoverWindow new.

    self should: [marsRover addFollower: rotationWindow for: #Invalid]
	raiseError: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: MarsRoverObserver invalidFollower equals: anError message].! !
!FollowingTest methodsFor: 'test' stamp: 'LB 6/6/2021 12:44:17' prior: 50864016!
test09

    | marsRover window |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    window := MarsRoverWindow new.

    self should: [marsRover addFollower: window for: #Invalid]
	raiseError: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: MarsRoverObserver invalidFollower equals: anError message].! !
!FollowingTest methodsFor: 'test' stamp: 'LB 6/6/2021 12:45:29' prior: 50864030!
test09

    | marsRover window |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    window := MarsRoverWindow new.

    self 
	should: [marsRover addFollower: window for: #Invalid]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: MarsRoverObserver invalidFollowerErrorDescription equals: anError messageText].! !

!testRun: #FollowingTest #test09 stamp: 'LB 6/6/2021 12:45:36'!
FAILURE!
!MarsRoverObserver class methodsFor: 'as yet unclassified' stamp: 'LB 6/6/2021 12:46:15'!
invalidFollowerErrorDescription
	^'Error Invalid Follower'! !
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/6/2021 12:46:51' prior: 50863374!
add: anObserver for: anObservable
	(anObservable = #Position) ifTrue: [^self addPositionFollower: anObserver].
	(anObservable = #Rotation) ifTrue: [^self addRotationFollower: anObserver].
	
	^self error: self class invalidFollowerErrorDescription.! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/6/2021 12:46:55'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/6/2021 12:46:55'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/6/2021 12:46:55'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/6/2021 12:46:55'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/6/2021 12:46:55'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/6/2021 12:46:55'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/6/2021 12:46:55'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/6/2021 12:46:55'!
PASSED!

!testRun: #FollowingTest #test09 stamp: 'LB 6/6/2021 12:46:55'!
PASSED!
!FollowingTest methodsFor: 'test' stamp: 'LB 6/6/2021 12:49:00'!
test09ObservableStateShouldBeValid

    | marsRover window |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    window := MarsRoverWindow new.

    self 
	should: [marsRover addFollower: window for: #Invalid]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: MarsRoverObserver invalidFollowerErrorDescription equals: anError messageText].! !

!methodRemoval: FollowingTest #test09 stamp: 'LB 6/6/2021 12:49:06'!
test09

    | marsRover window |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    window := MarsRoverWindow new.

    self 
	should: [marsRover addFollower: window for: #Invalid]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: MarsRoverObserver invalidFollowerErrorDescription equals: anError messageText].!

!testRun: #FollowingTest #test09ObservableStateShouldBeValid stamp: 'LB 6/6/2021 12:49:08'!
PASSED!
!FollowingTest methodsFor: 'test' stamp: 'LB 6/6/2021 12:52:49'!
test10

    | marsRover log |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    log := MarsRoverWindow new.
	marsRover addFollower: log for: #Position.

    self 
	should: [marsRover addFollower: log for: #Position]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: MarsRoverObserver followerIsAlreadyObservingThisStateErrorDescription equals: anError messageText].! !

!testRun: #FollowingTest #test10 stamp: 'LB 6/6/2021 12:52:56'!
FAILURE!
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/6/2021 12:54:06' prior: 50863348!
addPositionFollower: aFollower
	(positionObservers includes: aFollower) ifTrue: [^self error: self class followerIsAlreadyObservingThisStateErrorDescription].
	positionObservers add: aFollower.! !
!MarsRoverObserver class methodsFor: 'as yet unclassified' stamp: 'LB 6/6/2021 12:54:34'!
followerIsAlreadyObservingThisStateErrorDescription
	^'Error follower is already observing this state.'! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/6/2021 12:54:39'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/6/2021 12:54:39'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/6/2021 12:54:39'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/6/2021 12:54:39'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/6/2021 12:54:39'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/6/2021 12:54:39'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/6/2021 12:54:39'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/6/2021 12:54:39'!
PASSED!

!testRun: #FollowingTest #test09ObservableStateShouldBeValid stamp: 'LB 6/6/2021 12:54:39'!
PASSED!

!testRun: #FollowingTest #test10 stamp: 'LB 6/6/2021 12:54:39'!
PASSED!

----QUIT----(6 June 2021 18:55:09) CuisUniversity-4532.image priorSource: 17035484!

----STARTUP---- (6 June 2021 19:06:44) as /home/lbiglieri/Downloads/build/CuisUniversity/imagen2/CuisUniversity-4532.image!


!classDefinition: #MarsRoverWindow category: 'MarsRover-WithHeading' stamp: 'LB 6/6/2021 19:11:44'!
MarsRoverFollower subclass: #MarsRoverWindow
	instanceVariableNames: 'position head orientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverWindow methodsFor: 'updating' stamp: 'LB 6/6/2021 19:11:43' prior: 50862771 overrides: 50862226!
notifyRotationChange: aHead
	(aHead isHeading: #East) ifTrue: [orientation := 'East.'].
	(aHead isHeading: #South) ifTrue: [orientation := 'South.'].
	(aHead isHeading: #West) ifTrue: [orientation := 'West.'].
	(aHead isHeading: #North) ifTrue: [orientation := 'North.'].! !
!MarsRoverWindow methodsFor: 'testing' stamp: 'LB 6/6/2021 19:11:53' prior: 50862009!
orientation
	^orientation! !

MarsRoverFollower subclass: #MarsRoverWindow
	instanceVariableNames: 'position orientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverWindow category: 'MarsRover-WithHeading' stamp: 'LB 6/6/2021 19:11:58'!
MarsRoverFollower subclass: #MarsRoverWindow
	instanceVariableNames: 'position orientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/6/2021 19:12:00'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/6/2021 19:12:00'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/6/2021 19:12:00'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/6/2021 19:12:00'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/6/2021 19:12:00'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/6/2021 19:12:00'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/6/2021 19:12:00'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/6/2021 19:12:00'!
PASSED!

!testRun: #FollowingTest #test09ObservableStateShouldBeValid stamp: 'LB 6/6/2021 19:12:00'!
PASSED!

!testRun: #FollowingTest #test10 stamp: 'LB 6/6/2021 19:12:00'!
PASSED!
!FollowingTest methodsFor: 'test' stamp: 'LB 6/6/2021 19:15:50' prior: 50864137!
test10

    | marsRover window |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    window := MarsRoverWindow new.
	marsRover addFollower: window for: #Position.

    self 
	should: [marsRover addFollower: window for: #Position]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: MarsRoverObserver followerIsAlreadyObservingThisStateErrorDescription equals: anError messageText].! !
!FollowingTest methodsFor: 'test' stamp: 'LB 6/6/2021 19:16:29' prior: 50864281!
test10

    | marsRover log |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    log := MarsRoverWindow new.
	marsRover addFollower: log for: #Position.

    self 
	should: [marsRover addFollower: log for: #Position]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: MarsRoverObserver followerIsAlreadyObservingThisStateErrorDescription equals: anError messageText].! !

!testRun: #FollowingTest #test10 stamp: 'LB 6/6/2021 19:16:29'!
PASSED!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/6/2021 19:16:29'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/6/2021 19:16:29'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/6/2021 19:16:29'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/6/2021 19:16:29'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/6/2021 19:16:29'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/6/2021 19:16:29'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/6/2021 19:16:29'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/6/2021 19:16:29'!
PASSED!

!testRun: #FollowingTest #test09ObservableStateShouldBeValid stamp: 'LB 6/6/2021 19:16:29'!
PASSED!

!testRun: #FollowingTest #test10 stamp: 'LB 6/6/2021 19:16:29'!
PASSED!
!FollowingTest methodsFor: 'test' stamp: 'LB 6/6/2021 19:17:21' prior: 50864297!
test10

    | marsRover log |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    log := MarsRoverLog new.
	marsRover addFollower: log for: #Position.

    self 
	should: [marsRover addFollower: log for: #Position]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: MarsRoverObserver followerIsAlreadyObservingThisStateErrorDescription equals: anError messageText].! !

!testRun: #FollowingTest #test10 stamp: 'LB 6/6/2021 19:17:22'!
PASSED!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/6/2021 19:17:22'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/6/2021 19:17:22'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/6/2021 19:17:22'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/6/2021 19:17:22'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/6/2021 19:17:22'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/6/2021 19:17:22'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/6/2021 19:17:22'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/6/2021 19:17:22'!
PASSED!

!testRun: #FollowingTest #test09ObservableStateShouldBeValid stamp: 'LB 6/6/2021 19:17:22'!
PASSED!

!testRun: #FollowingTest #test10 stamp: 'LB 6/6/2021 19:17:22'!
PASSED!
!FollowingTest methodsFor: 'test' stamp: 'LB 6/6/2021 19:17:45'!
test11

    | marsRover window |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    window := MarsRoverWindow new.
	marsRover addFollower: window for: #Rotation.

    self 
	should: [marsRover addFollower: window for: #Rotation]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: MarsRoverObserver followerIsAlreadyObservingThisStateErrorDescription equals: anError messageText].! !

!testRun: #FollowingTest #test11 stamp: 'LB 6/6/2021 19:17:47'!
FAILURE!
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/6/2021 19:18:10' prior: 50863358!
addRotationFollower: aFollower 
	(rotationObservers includes: aFollower) ifTrue: [^self error: self class followerIsAlreadyObservingThisStateErrorDescription].
	rotationObservers add: aFollower.! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/6/2021 19:18:13'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/6/2021 19:18:13'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/6/2021 19:18:13'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/6/2021 19:18:13'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/6/2021 19:18:13'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/6/2021 19:18:13'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/6/2021 19:18:13'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/6/2021 19:18:13'!
PASSED!

!testRun: #FollowingTest #test09ObservableStateShouldBeValid stamp: 'LB 6/6/2021 19:18:13'!
PASSED!

!testRun: #FollowingTest #test10 stamp: 'LB 6/6/2021 19:18:13'!
PASSED!

!testRun: #FollowingTest #test11 stamp: 'LB 6/6/2021 19:18:13'!
PASSED!

|set|
set:= Set new.
set add: 1.
set.
set add: 2.
set.
set add: 1.
set.!

| marsRover window |
marsRover := MarsRover at: 0@0 heading: #North.
window := MarsRoverWindow new.
marsRover addFollower: window for: #Rotation.
window rotation.!


| marsRover window |
marsRover := MarsRover at: 0@0 heading: #North.
window := MarsRoverWindow new.
marsRover addFollower: window for: #Rotation.
window orientation.!

| marsRover window |
marsRover := MarsRover at: 0@0 heading: #North.
window := MarsRoverWindow new.
marsRover addFollower: window for: #Rotation.
marsRover process: 'l'.
window orientation.!
!FollowingTest methodsFor: 'test' stamp: 'LB 6/6/2021 20:41:50'!
test12WindowShouldHoldStateWhenCreated

	| marsRover window |
	marsRover := MarsRover at: 0@0 heading: #North.
	window := MarsRoverWindow new.marsRover addFollower: window for: #Rotation.

	self assert: 'North.' equals: window orientation.! !

!testRun: #FollowingTest #test12WindowShouldHoldStateWhenCreated stamp: 'LB 6/6/2021 20:41:53'!
FAILURE!

|set|
set:= Set new.
set add: 1.
set.
set add: 2.
set.
set add: 1.
set. 
!

|set|
set:= Set new.
set add: 1.
set.
set add: 2.!

|set|
set:= Set new.
set add: 1.
set.
set add: 2.!

|set|
set:= Set new.
set add: 1.
set.
set add: 2.
set.!
!MarsRoverFollower methodsFor: 'updating' stamp: 'LB 6/6/2021 21:09:09'!
headingAsString: aHead
	(aHead isHeading: #East) ifTrue: [^'East.'].
	(aHead isHeading: #South) ifTrue: [^'South.'].
	(aHead isHeading: #West) ifTrue: [^'West.'].
	(aHead isHeading: #North) ifTrue: [^'North.'].! !
!MarsRoverLog methodsFor: 'updating' stamp: 'LB 6/6/2021 21:09:33' prior: 50862759 overrides: 50862226!
notifyRotationChange: aHead
	log add: (self headingAsString: aHead).! !
!MarsRoverWindow methodsFor: 'updating' stamp: 'LB 6/6/2021 21:10:02' prior: 50864219 overrides: 50862226!
notifyRotationChange: aHead
	orientation := self headingAsString: aHead.! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/6/2021 21:10:04'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/6/2021 21:10:04'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/6/2021 21:10:04'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/6/2021 21:10:04'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/6/2021 21:10:04'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/6/2021 21:10:04'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/6/2021 21:10:04'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/6/2021 21:10:04'!
PASSED!

!testRun: #FollowingTest #test09ObservableStateShouldBeValid stamp: 'LB 6/6/2021 21:10:04'!
PASSED!

!testRun: #FollowingTest #test10 stamp: 'LB 6/6/2021 21:10:04'!
PASSED!

!testRun: #FollowingTest #test11 stamp: 'LB 6/6/2021 21:10:04'!
PASSED!

!testRun: #FollowingTest #test12WindowShouldHoldStateWhenCreated stamp: 'LB 6/6/2021 21:10:04'!
FAILURE!

!testRun: #FollowingTest #test12WindowShouldHoldStateWhenCreated stamp: 'LB 6/6/2021 21:10:04'!
FAILURE!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/6/2021 21:11:18'!
PASSED!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/6/2021 21:11:20'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/6/2021 21:11:20'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/6/2021 21:11:20'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/6/2021 21:11:20'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/6/2021 21:11:20'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/6/2021 21:11:20'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/6/2021 21:11:20'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/6/2021 21:11:20'!
PASSED!

!testRun: #FollowingTest #test09ObservableStateShouldBeValid stamp: 'LB 6/6/2021 21:11:20'!
PASSED!

!testRun: #FollowingTest #test10 stamp: 'LB 6/6/2021 21:11:20'!
PASSED!

!testRun: #FollowingTest #test11 stamp: 'LB 6/6/2021 21:11:20'!
PASSED!

!testRun: #FollowingTest #test12WindowShouldHoldStateWhenCreated stamp: 'LB 6/6/2021 21:11:20'!
FAILURE!

!testRun: #FollowingTest #test12WindowShouldHoldStateWhenCreated stamp: 'LB 6/6/2021 21:11:20'!
FAILURE!
!FollowingTest methodsFor: 'test' stamp: 'LB 6/6/2021 21:14:35'!
test12WindowShouldNotKnowStateWhenCreated

	| marsRover window |
	marsRover := MarsRover at: 0@0 heading: #North.
	window := MarsRoverWindow new.
	marsRover addFollower: window for: #Rotation.

	self assert: 'Unknown.' equals: window orientation.! !

!methodRemoval: FollowingTest #test12WindowShouldHoldStateWhenCreated stamp: 'LB 6/6/2021 21:14:41'!
test12WindowShouldHoldStateWhenCreated

	| marsRover window |
	marsRover := MarsRover at: 0@0 heading: #North.
	window := MarsRoverWindow new.marsRover addFollower: window for: #Rotation.

	self assert: 'North.' equals: window orientation.!
!FollowingTest methodsFor: 'test' stamp: 'LB 6/6/2021 21:15:00' prior: 50864602!
test12WindowShouldNotKnowStateWhenCreated

	| marsRover window |
	marsRover := MarsRover at: 0@0 heading: #North.
	window := MarsRoverWindow new.
	marsRover addFollower: window for: #Rotation.

	self assert: 'Unknown.' equals: window orientation.
	self assert: 'Unknown.' equals: window position.! !

!testRun: #FollowingTest #test12WindowShouldNotKnowStateWhenCreated stamp: 'LB 6/6/2021 21:15:03'!
FAILURE!
!MarsRoverWindow methodsFor: 'nil' stamp: 'LB 6/6/2021 21:15:42' overrides: 16896425!
initialize
	orientation := 'Unknown.'.
	position := 'Unknown.'.! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/6/2021 21:16:02'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/6/2021 21:16:02'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/6/2021 21:16:02'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/6/2021 21:16:02'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/6/2021 21:16:02'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/6/2021 21:16:02'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/6/2021 21:16:02'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/6/2021 21:16:02'!
PASSED!

!testRun: #FollowingTest #test09ObservableStateShouldBeValid stamp: 'LB 6/6/2021 21:16:02'!
PASSED!

!testRun: #FollowingTest #test10 stamp: 'LB 6/6/2021 21:16:02'!
PASSED!

!testRun: #FollowingTest #test11 stamp: 'LB 6/6/2021 21:16:02'!
PASSED!

!testRun: #FollowingTest #test12WindowShouldNotKnowStateWhenCreated stamp: 'LB 6/6/2021 21:16:02'!
PASSED!
!FollowingTest methodsFor: 'test' stamp: 'LB 6/6/2021 21:24:23'!
test13FollowerCantObserveMoreThanOneMarsRover

	| marsRover marsRover2 window |
	marsRover := MarsRover at: 0@0 heading: #North.
	marsRover2 := MarsRover at: 0@0 heading: #North.
	window := MarsRoverWindow new.
	marsRover addFollower: window for: #Rotation.
	self should: [marsRover2 addFollower: window for: #Position]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: MarsRoverFollower alreadyFollowingAMarsRoverErrorDescription equals: anError messageText].! !

!testRun: #FollowingTest #test13FollowerCantObserveMoreThanOneMarsRover stamp: 'LB 6/6/2021 21:24:26'!
FAILURE!
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/6/2021 21:30:44' prior: 50864067!
add: anObserver for: anObservable
	anObserver follow: marsRover.
	(anObservable = #Position) ifTrue: [^self addPositionFollower: anObserver].
	(anObservable = #Rotation) ifTrue: [^self addRotationFollower: anObserver].
	
	^self error: self class invalidFollowerErrorDescription.! !

!classDefinition: #MarsRoverFollower category: 'MarsRover-WithHeading' stamp: 'LB 6/6/2021 21:32:43'!
Object subclass: #MarsRoverFollower
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverFollower methodsFor: 'updating' stamp: 'LB 6/6/2021 21:32:39'!
follow: aMarsRover
	marsRover ifNil: [marsRover := aMarsRover].
	(marsRover ~= aMarsRover) ifTrue: [^self error: self class error].! !
!MarsRoverFollower methodsFor: 'updating' stamp: 'LB 6/6/2021 21:32:54' prior: 50864725!
follow: aMarsRover
	marsRover ifNil: [marsRover := aMarsRover].
	(marsRover ~= aMarsRover) ifTrue: [^self error: self class alreadyFollowingAMarsRoverErrorDescription].! !
!MarsRoverFollower class methodsFor: 'no messages' stamp: 'LB 6/6/2021 21:33:21'!
alreadyFollowingAMarsRoverErrorDescription
	^'already following a different MarsRover'! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/6/2021 21:33:23'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/6/2021 21:33:23'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/6/2021 21:33:23'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/6/2021 21:33:23'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/6/2021 21:33:23'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/6/2021 21:33:23'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/6/2021 21:33:23'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/6/2021 21:33:23'!
PASSED!

!testRun: #FollowingTest #test09ObservableStateShouldBeValid stamp: 'LB 6/6/2021 21:33:23'!
PASSED!

!testRun: #FollowingTest #test10 stamp: 'LB 6/6/2021 21:33:23'!
PASSED!

!testRun: #FollowingTest #test11 stamp: 'LB 6/6/2021 21:33:23'!
PASSED!

!testRun: #FollowingTest #test12WindowShouldNotKnowStateWhenCreated stamp: 'LB 6/6/2021 21:33:23'!
PASSED!

!testRun: #FollowingTest #test13FollowerCantObserveMoreThanOneMarsRover stamp: 'LB 6/6/2021 21:33:23'!
PASSED!
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/6/2021 21:35:16' prior: 50864705!
add: anObserver for: anObservable
	anObserver attachTo: self.
	(anObservable = #Position) ifTrue: [^self addPositionFollower: anObserver].
	(anObservable = #Rotation) ifTrue: [^self addRotationFollower: anObserver].
	
	^self error: self class invalidFollowerErrorDescription.! !

!classDefinition: #MarsRoverFollower category: 'MarsRover-WithHeading' stamp: 'LB 6/6/2021 21:36:04'!
Object subclass: #MarsRoverFollower
	instanceVariableNames: 'marsRover marsRoverObserver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverFollower methodsFor: 'updating' stamp: 'LB 6/6/2021 21:36:02'!
attachTo: aMarsRoverObserver
	marsRoverObserver ifNil: [marsRoverObserver := aMarsRoverObserver].
	(marsRoverObserver ~= aMarsRoverObserver) ifTrue: [^self error: self class alreadyFollowingAMarsRoverErrorDescription].! !

!methodRemoval: MarsRoverFollower #follow: stamp: 'LB 6/6/2021 21:36:07'!
follow: aMarsRover
	marsRover ifNil: [marsRover := aMarsRover].
	(marsRover ~= aMarsRover) ifTrue: [^self error: self class alreadyFollowingAMarsRoverErrorDescription].!

Object subclass: #MarsRoverFollower
	instanceVariableNames: 'marsRoverObserver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverFollower category: 'MarsRover-WithHeading' stamp: 'LB 6/6/2021 21:36:12'!
Object subclass: #MarsRoverFollower
	instanceVariableNames: 'marsRoverObserver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/6/2021 21:36:14'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/6/2021 21:36:14'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/6/2021 21:36:14'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/6/2021 21:36:14'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/6/2021 21:36:14'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/6/2021 21:36:14'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/6/2021 21:36:14'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/6/2021 21:36:14'!
PASSED!

!testRun: #FollowingTest #test09ObservableStateShouldBeValid stamp: 'LB 6/6/2021 21:36:14'!
PASSED!

!testRun: #FollowingTest #test10 stamp: 'LB 6/6/2021 21:36:14'!
PASSED!

!testRun: #FollowingTest #test11 stamp: 'LB 6/6/2021 21:36:14'!
PASSED!

!testRun: #FollowingTest #test12WindowShouldNotKnowStateWhenCreated stamp: 'LB 6/6/2021 21:36:14'!
PASSED!

!testRun: #FollowingTest #test13FollowerCantObserveMoreThanOneMarsRover stamp: 'LB 6/6/2021 21:36:14'!
PASSED!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/6/2021 21:36:16'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/6/2021 21:36:16'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/6/2021 21:36:16'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/6/2021 21:36:16'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/6/2021 21:36:16'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/6/2021 21:36:16'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/6/2021 21:36:16'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/6/2021 21:36:16'!
PASSED!

!testRun: #FollowingTest #test09ObservableStateShouldBeValid stamp: 'LB 6/6/2021 21:36:16'!
PASSED!

!testRun: #FollowingTest #test10 stamp: 'LB 6/6/2021 21:36:16'!
PASSED!

!testRun: #FollowingTest #test11 stamp: 'LB 6/6/2021 21:36:16'!
PASSED!

!testRun: #FollowingTest #test12WindowShouldNotKnowStateWhenCreated stamp: 'LB 6/6/2021 21:36:16'!
PASSED!

!testRun: #FollowingTest #test13FollowerCantObserveMoreThanOneMarsRover stamp: 'LB 6/6/2021 21:36:16'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'LB 6/6/2021 21:36:16'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'LB 6/6/2021 21:36:16'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'LB 6/6/2021 21:36:16'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'LB 6/6/2021 21:36:16'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'LB 6/6/2021 21:36:16'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'LB 6/6/2021 21:36:16'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'LB 6/6/2021 21:36:16'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'LB 6/6/2021 21:36:16'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'LB 6/6/2021 21:36:16'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'LB 6/6/2021 21:36:16'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'LB 6/6/2021 21:36:16'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'LB 6/6/2021 21:36:16'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'LB 6/6/2021 21:36:16'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'LB 6/6/2021 21:36:16'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'LB 6/6/2021 21:36:16'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'LB 6/6/2021 21:36:16'!
PASSED!
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/6/2021 21:36:30' prior: 50864787!
add: aFollower for: anObservable
	aFollower attachTo: self.
	(anObservable = #Position) ifTrue: [^self addPositionFollower: aFollower].
	(anObservable = #Rotation) ifTrue: [^self addRotationFollower: aFollower].
	
	^self error: self class invalidFollowerErrorDescription.! !
!FollowingTest methodsFor: 'test' stamp: 'LB 6/6/2021 21:38:23'!
test14FollowerShouldBeAMarsRoverFollower

	| marsRover invalidFollower |
	marsRover := MarsRover at: 0@0 heading: #North.
	invalidFollower := String new.
	
	self should: [marsRover addFollower: invalidFollower for: #Rotation]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: MarsRoverFollower alreadyFollowingAMarsRoverErrorDescription equals: anError messageText].! !
!FollowingTest methodsFor: 'test' stamp: 'LB 6/6/2021 21:38:29' prior: 50864968!
test14FollowerShouldBeAMarsRoverFollower

	| marsRover invalidFollower |
	marsRover := MarsRover at: 0@0 heading: #North.
	invalidFollower := String new.
	
	self should: [marsRover addFollower: invalidFollower for: #Rotation]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: MarsRoverFollower invalidFollowerErrorDescription equals: anError messageText].! !
!FollowingTest methodsFor: 'test' stamp: 'LB 6/6/2021 21:38:48' prior: 50864984!
test14FollowerShouldBeAMarsRoverFollower

	| marsRover invalidFollower |
	marsRover := MarsRover at: 0@0 heading: #North.
	invalidFollower := String new.
	
	self should: [marsRover addFollower: invalidFollower for: #Rotation]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: MarsRoverObserver invalidFollowerErrorDescription equals: anError messageText].! !

!testRun: #FollowingTest #test14FollowerShouldBeAMarsRoverFollower stamp: 'LB 6/6/2021 21:38:59'!
ERROR!
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/6/2021 21:39:54' prior: 50864957!
add: aFollower for: anObservable
	(aFollower isKindOf: MarsRoverFollower) ifFalse: [^self error: self class invalidFollowerErrorDescription.].
	aFollower attachTo: self.
	(anObservable = #Position) ifTrue: [^self addPositionFollower: aFollower].
	(anObservable = #Rotation) ifTrue: [^self addRotationFollower: aFollower].
	
	^self error: self class invalidFollowerErrorDescription.! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/6/2021 21:39:56'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/6/2021 21:39:56'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/6/2021 21:39:56'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/6/2021 21:39:56'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/6/2021 21:39:56'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/6/2021 21:39:56'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/6/2021 21:39:56'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/6/2021 21:39:56'!
PASSED!

!testRun: #FollowingTest #test09ObservableStateShouldBeValid stamp: 'LB 6/6/2021 21:39:56'!
PASSED!

!testRun: #FollowingTest #test10 stamp: 'LB 6/6/2021 21:39:56'!
PASSED!

!testRun: #FollowingTest #test11 stamp: 'LB 6/6/2021 21:39:56'!
PASSED!

!testRun: #FollowingTest #test12WindowShouldNotKnowStateWhenCreated stamp: 'LB 6/6/2021 21:39:56'!
PASSED!

!testRun: #FollowingTest #test13FollowerCantObserveMoreThanOneMarsRover stamp: 'LB 6/6/2021 21:39:56'!
PASSED!

!testRun: #FollowingTest #test14FollowerShouldBeAMarsRoverFollower stamp: 'LB 6/6/2021 21:39:56'!
PASSED!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/6/2021 21:39:58'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/6/2021 21:39:58'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/6/2021 21:39:58'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/6/2021 21:39:58'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/6/2021 21:39:58'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/6/2021 21:39:58'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/6/2021 21:39:58'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/6/2021 21:39:58'!
PASSED!

!testRun: #FollowingTest #test09ObservableStateShouldBeValid stamp: 'LB 6/6/2021 21:39:58'!
PASSED!

!testRun: #FollowingTest #test10 stamp: 'LB 6/6/2021 21:39:58'!
PASSED!

!testRun: #FollowingTest #test11 stamp: 'LB 6/6/2021 21:39:58'!
PASSED!

!testRun: #FollowingTest #test12WindowShouldNotKnowStateWhenCreated stamp: 'LB 6/6/2021 21:39:58'!
PASSED!

!testRun: #FollowingTest #test13FollowerCantObserveMoreThanOneMarsRover stamp: 'LB 6/6/2021 21:39:58'!
PASSED!

!testRun: #FollowingTest #test14FollowerShouldBeAMarsRoverFollower stamp: 'LB 6/6/2021 21:39:58'!
PASSED!
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/6/2021 21:41:25'!
assertValidFollower: aFollower
	(aFollower isKindOf: MarsRoverFollower) ifFalse: [^self error: self class invalidFollowerErrorDescription.]! !
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/6/2021 21:42:18' prior: 50865018!
add: aFollower for: anObservable
	self assertValidFollower: aFollower.
	aFollower attachTo: self.
	
	(anObservable = #Position) ifTrue: [^self addPositionFollower: aFollower].
	(anObservable = #Rotation) ifTrue: [^self addRotationFollower: aFollower].
	
	^self error: self class invalidFollowerErrorDescription.! !
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/6/2021 21:44:00' prior: 50865130!
add: aFollower for: anObservable
	self assertValidFollower: aFollower.
	aFollower attachTo: self.
	
	self attach: aFollower toObservable: anObservable.
	(anObservable = #Position) ifTrue: [^self addPositionFollower: aFollower].
	(anObservable = #Rotation) ifTrue: [^self addRotationFollower: aFollower].
	
	^self error: self class invalidFollowerErrorDescription.! !
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/6/2021 21:44:15'!
attach: aFollower toObservable: anObservable.
	(anObservable = #Position) ifTrue: [^self addPositionFollower: aFollower].
	(anObservable = #Rotation) ifTrue: [^self addRotationFollower: aFollower].
	
	^self error: self class invalidFollowerErrorDescription.! !
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/6/2021 21:44:20' prior: 50865143!
add: aFollower for: anObservable
	self assertValidFollower: aFollower.
	aFollower attachTo: self.
	
	self attach: aFollower toObservable: anObservable.! !
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/6/2021 21:44:22' prior: 50865170!
add: aFollower for: anObservable
	self assertValidFollower: aFollower.
	aFollower attachTo: self.
	self attach: aFollower toObservable: anObservable.! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/6/2021 21:44:31'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/6/2021 21:44:31'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/6/2021 21:44:31'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/6/2021 21:44:31'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/6/2021 21:44:31'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/6/2021 21:44:31'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/6/2021 21:44:31'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/6/2021 21:44:31'!
PASSED!

!testRun: #FollowingTest #test09ObservableStateShouldBeValid stamp: 'LB 6/6/2021 21:44:31'!
PASSED!

!testRun: #FollowingTest #test10 stamp: 'LB 6/6/2021 21:44:31'!
PASSED!

!testRun: #FollowingTest #test11 stamp: 'LB 6/6/2021 21:44:31'!
PASSED!

!testRun: #FollowingTest #test12WindowShouldNotKnowStateWhenCreated stamp: 'LB 6/6/2021 21:44:31'!
PASSED!

!testRun: #FollowingTest #test13FollowerCantObserveMoreThanOneMarsRover stamp: 'LB 6/6/2021 21:44:31'!
PASSED!

!testRun: #FollowingTest #test14FollowerShouldBeAMarsRoverFollower stamp: 'LB 6/6/2021 21:44:31'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'LB 6/6/2021 21:44:31'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'LB 6/6/2021 21:44:31'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'LB 6/6/2021 21:44:31'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'LB 6/6/2021 21:44:31'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'LB 6/6/2021 21:44:31'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'LB 6/6/2021 21:44:31'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'LB 6/6/2021 21:44:31'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'LB 6/6/2021 21:44:31'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'LB 6/6/2021 21:44:31'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'LB 6/6/2021 21:44:31'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'LB 6/6/2021 21:44:31'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'LB 6/6/2021 21:44:31'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'LB 6/6/2021 21:44:31'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'LB 6/6/2021 21:44:31'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'LB 6/6/2021 21:44:31'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'LB 6/6/2021 21:44:31'!
PASSED!
!Behavior method!
at: aPosition heading: aCardinalPoint
	^ [
	([
	(self coverAll:
		{43 to: 46}) new ] valueCoveringAll:
		{48 to: 50})
		initializeAt:
			(aPosition
				cover: (66 to: 74)
				declaredAt: (5 to: 13))
		heading:
			([
			(MarsRoverHeading
				cover: (86 to: 101)
				declaredAt: (86 to: 101)) heading:
				(aCardinalPoint
					cover: (112 to: 125)
					declaredAt: (24 to: 37)) ] valueCoveringAll:
				{103 to: 110}) ] valueCoveringAll:
		{52 to: 64. 76 to: 83}.! !
!Behavior method!
heading: aCardinalPoint
	^ [
	([
	(self coverAll:
		{28 to: 31}) subclasses ] valueCoveringAll:
		{33 to: 42})
		detect: [ :aMarsRoverPositionClass |
			[
			(aMarsRoverPositionClass
				cover: (84 to: 106)
				declaredAt: (58 to: 80)) isFor:
				(aCardinalPoint
					cover: (115 to: 128)
					declaredAt: (10 to: 23)) ] valueCoveringAll:
				{108 to: 113} ]
		ifFound: [ :aMarsRoverPositionClass |
			[
			(aMarsRoverPositionClass
				cover: (172 to: 194)
				declaredAt: (146 to: 168)) new ] valueCoveringAll:
				{196 to: 198} ]
		ifNone: [
			[
			(self coverAll:
				{214 to: 217}) error:
				([
				(MarsRover
					cover: (226 to: 234)
					declaredAt: (226 to: 234)) invalidCardinalPointErrorDescription ] valueCoveringAll:
					{236 to: 271}) ] valueCoveringAll:
				{219 to: 224} ]] valueCoveringAll:
		{47 to: 53. 134 to: 141. 204 to: 210}.! !
!Behavior method!
isFor: aCardinalPoint
	^ [
	([
	(self coverAll:
		{26 to: 29}) cardinalPoint ] valueCoveringAll:
		{31 to: 43}) =
		(aCardinalPoint
			cover: (47 to: 60)
			declaredAt: (8 to: 21)) ] valueCoveringAll:
		{45 to: 45}.! !
!Behavior method!
cardinalPoint
	^ #East coverAll:
		{18 to: 22}.! !
!Behavior method!
cardinalPoint
	^ #North coverAll:
		{18 to: 23}.! !
!Behavior method!
initializeAt: aPosition heading: aHeading
	(position _ aPosition
		cover: (57 to: 65)
		declaredAt: (15 to: 23))
		cover: (45 to: 52)
		declaredAt: (45 to: 52).
	(head _ aHeading
		cover: (77 to: 84)
		declaredAt: (34 to: 41))
		cover: (69 to: 72)
		declaredAt: (69 to: 72).
	(observers _ [
	(MarsRoverObserver
		cover: (101 to: 117)
		declaredAt: (101 to: 117)) for:
		(self coverAll:
			{124 to: 127}) ] valueCoveringAll:
		{119 to: 122})
		cover: (88 to: 96)
		declaredAt: (88 to: 96).! !
!Behavior method!
for: aMarsRover
	^ [
	([
	(self coverAll:
		{19 to: 22}) new ] valueCoveringAll:
		{24 to: 26}) initializeFor:
		(aMarsRover
			cover: (43 to: 52)
			declaredAt: (6 to: 15)) ] valueCoveringAll:
		{28 to: 41}.! !
!Behavior method!
initializeFor: aMarsRover
	(marsRover _ aMarsRover
		cover: (42 to: 51)
		declaredAt: (16 to: 25))
		cover: (28 to: 36)
		declaredAt: (28 to: 36).
	(position _ [
	(marsRover
		cover: (67 to: 75)
		declaredAt: (28 to: 36)) position ] valueCoveringAll:
		{77 to: 84})
		cover: (55 to: 62)
		declaredAt: (55 to: 62).
	(head _ [
	(marsRover
		cover: (96 to: 104)
		declaredAt: (28 to: 36)) head ] valueCoveringAll:
		{106 to: 109})
		cover: (88 to: 91)
		declaredAt: (88 to: 91).
	(positionObservers _ [
	(OrderedCollection
		cover: (134 to: 150)
		declaredAt: (134 to: 150)) new ] valueCoveringAll:
		{152 to: 154})
		cover: (113 to: 129)
		declaredAt: (113 to: 129).
	(rotationObservers _ [
	(OrderedCollection
		cover: (179 to: 195)
		declaredAt: (134 to: 150)) new ] valueCoveringAll:
		{197 to: 199})
		cover: (158 to: 174)
		declaredAt: (158 to: 174).! !
!Behavior method!
position
	^ position
		cover: (12 to: 19)
		declaredAt: (12 to: 19).! !
!Behavior method!
head
	^ head
		cover: (8 to: 11)
		declaredAt: (8 to: 11).! !
!Behavior method!
initialize
	(log _ [
	(OrderedCollection
		cover: (20 to: 36)
		declaredAt: (20 to: 36)) new ] valueCoveringAll:
		{38 to: 40})
		cover: (13 to: 15)
		declaredAt: (13 to: 15).! !
!Behavior method!
addFollower: aFollower for: anObservable
	[
	(observers
		cover: (44 to: 52)
		declaredAt: (44 to: 52))
		add:
			(aFollower
				cover: (59 to: 67)
				declaredAt: (14 to: 22))
		for:
			(anObservable
				cover: (74 to: 85)
				declaredAt: (29 to: 40)) ] valueCoveringAll:
		{54 to: 57. 69 to: 72}.! !
!Behavior method!
add: aFollower for: anObservable
	[
	(self coverAll:
		{35 to: 38}) assertValidFollower:
		(aFollower
			cover: (61 to: 69)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{40 to: 59}.
	[
	(aFollower
		cover: (73 to: 81)
		declaredAt: (6 to: 14)) attachTo:
		(self coverAll:
			{93 to: 96}) ] valueCoveringAll:
		{83 to: 91}.
	[
	(self coverAll:
		{100 to: 103})
		attach:
			(aFollower
				cover: (113 to: 121)
				declaredAt: (6 to: 14))
		toObservable:
			(anObservable
				cover: (137 to: 148)
				declaredAt: (21 to: 32)) ] valueCoveringAll:
		{105 to: 111. 123 to: 135}.! !
!Behavior method!
assertValidFollower: aFollower
	[
	([
	(aFollower
		cover: (34 to: 42)
		declaredAt: (22 to: 30)) isKindOf:
		(MarsRoverFollower
			cover: (54 to: 70)
			declaredAt: (54 to: 70)) ] valueCoveringAll:
		{44 to: 52}) ifFalse: [ ^ [
		(self coverAll:
			{84 to: 87}) error:
			([
			([
			(self coverAll:
				{96 to: 99}) class ] valueCoveringAll:
				{101 to: 105}) invalidFollowerErrorDescription ] valueCoveringAll:
				{107 to: 137}) ] valueCoveringAll:
			{89 to: 94} ]] valueCoveringAll:
		{73 to: 80}.! !
!Behavior method!
attachTo: aMarsRoverObserver
	[
	(marsRoverObserver
		cover: (31 to: 47)
		declaredAt: (31 to: 47)) ifNil: [
		(marsRoverObserver _ aMarsRoverObserver
			cover: (78 to: 95)
			declaredAt: (11 to: 28))
			cover: (57 to: 73)
			declaredAt: (31 to: 47) ]] valueCoveringAll:
		{49 to: 54}.
	[
	([
	(marsRoverObserver
		cover: (101 to: 117)
		declaredAt: (31 to: 47)) ~=
		(aMarsRoverObserver
			cover: (122 to: 139)
			declaredAt: (11 to: 28)) ] valueCoveringAll:
		{119 to: 120}) ifTrue: [ ^ [
		(self coverAll:
			{152 to: 155}) error:
			([
			([
			(self coverAll:
				{164 to: 167}) class ] valueCoveringAll:
				{169 to: 173}) alreadyFollowingAMarsRoverErrorDescription ] valueCoveringAll:
				{175 to: 216}) ] valueCoveringAll:
			{157 to: 162} ]] valueCoveringAll:
		{142 to: 148}.! !
!Behavior method!
attach: aFollower toObservable: anObservable
	self coverAll:
		{85 to: 88}.
	[
	([
	(anObservable
		cover: (49 to: 60)
		declaredAt: (33 to: 44)) =
		(#Position coverAll:
			{64 to: 72}) ] valueCoveringAll:
		{62 to: 62}) ifTrue: [ ^ [
		(self coverAll:
			{161 to: 164}) addPositionFollower:
			(aFollower
				cover: (111 to: 119)
				declaredAt: (9 to: 17)) ] valueCoveringAll:
			{90 to: 109} ]] valueCoveringAll:
		{75 to: 81}.
	[
	([
	(anObservable
		cover: (125 to: 136)
		declaredAt: (33 to: 44)) =
		(#Rotation coverAll:
			{140 to: 148}) ] valueCoveringAll:
		{138 to: 138}) ifTrue: [ ^ [
		(self coverAll:
			{203 to: 206}) addRotationFollower:
			(aFollower
				cover: (187 to: 195)
				declaredAt: (9 to: 17)) ] valueCoveringAll:
			{166 to: 185} ]] valueCoveringAll:
		{151 to: 157}.
	^ [
	(self coverAll:
		{215 to: 218}) error:
		([
		([ self class ] valueCoveringAll:
			{220 to: 224}) invalidFollowerErrorDescription ] valueCoveringAll:
			{226 to: 256}) ] valueCoveringAll:
		{208 to: 213}.! !
!Behavior method!
addPositionFollower: aFollower
	[
	([
	(positionObservers
		cover: (34 to: 50)
		declaredAt: (34 to: 50)) includes:
		(aFollower
			cover: (62 to: 70)
			declaredAt: (22 to: 30)) ] valueCoveringAll:
		{52 to: 60}) ifTrue: [ ^ [
		(self coverAll:
			{83 to: 86}) error:
			([
			([
			(self coverAll:
				{95 to: 98}) class ] valueCoveringAll:
				{100 to: 104}) followerIsAlreadyObservingThisStateErrorDescription ] valueCoveringAll:
				{106 to: 156}) ] valueCoveringAll:
			{88 to: 93} ]] valueCoveringAll:
		{73 to: 79}.
	[
	(positionObservers
		cover: (161 to: 177)
		declaredAt: (34 to: 50)) add:
		(aFollower
			cover: (184 to: 192)
			declaredAt: (22 to: 30)) ] valueCoveringAll:
		{179 to: 182}.! !
!Behavior method!
process: aSequenceOfCommands
	[
	(aSequenceOfCommands
		cover: (32 to: 50)
		declaredAt: (10 to: 28)) do: [ :aCommand |
		[
		(self coverAll:
			{69 to: 72}) processCommand:
			(aCommand
				cover: (90 to: 97)
				declaredAt: (58 to: 65)) ] valueCoveringAll:
			{74 to: 88}.
		[
		(observers
			cover: (100 to: 108)
			declaredAt: (100 to: 108)) update ] valueCoveringAll:
			{110 to: 115} ]] valueCoveringAll:
		{52 to: 54}.! !
!Behavior method!
processCommand: aCommand
	[
	([
	(self coverAll:
		{29 to: 32}) isForwardCommand:
		(aCommand
			cover: (52 to: 59)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{34 to: 50}) ifTrue: [ ^ [
		(self coverAll:
			{74 to: 77}) moveForward ] valueCoveringAll:
			{79 to: 89} ]] valueCoveringAll:
		{62 to: 68}.
	[
	([
	(self coverAll:
		{96 to: 99}) isBackwardCommand:
		(aCommand
			cover: (120 to: 127)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{101 to: 118}) ifTrue: [ ^ [
		(self coverAll:
			{142 to: 145}) moveBackward ] valueCoveringAll:
			{147 to: 158} ]] valueCoveringAll:
		{130 to: 136}.
	[
	([
	(self coverAll:
		{165 to: 168}) isRotateRightCommand:
		(aCommand
			cover: (192 to: 199)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{170 to: 190}) ifTrue: [ ^ [
		(self coverAll:
			{214 to: 217}) rotateRight ] valueCoveringAll:
			{219 to: 229} ]] valueCoveringAll:
		{202 to: 208}.
	[
	([
	(self coverAll:
		{236 to: 239}) isRotateLeftCommand:
		(aCommand
			cover: (262 to: 269)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{241 to: 260}) ifTrue: [ ^ [
		(self coverAll:
			{284 to: 287}) rotateLeft ] valueCoveringAll:
			{289 to: 298} ]] valueCoveringAll:
		{272 to: 278}.
	[
	(self coverAll:
		{305 to: 308}) signalInvalidCommand ] valueCoveringAll:
		{310 to: 329}.! !
!Behavior method!
isForwardCommand: aCommand
	^ [
	(aCommand
		cover: (31 to: 38)
		declaredAt: (19 to: 26)) =
		($f coverAll:
			{42 to: 43}) ] valueCoveringAll:
		{40 to: 40}.! !
!Behavior method!
moveForward
	[
	(head
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) moveForward:
		(self coverAll:
			{34 to: 37}) ] valueCoveringAll:
		{21 to: 32}.! !
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveNorth ] valueCoveringAll:
		{40 to: 48}.! !
!Behavior method!
moveNorth
	(position _ [
	(position
		cover: (14 to: 21)
		declaredAt: (14 to: 21)) +
		([
		(0 coverAll:
			{38 to: 38}) @
			(1 coverAll:
				{40 to: 40}) ] valueCoveringAll:
			{39 to: 39}) ] valueCoveringAll:
		{35 to: 35})
		cover: (26 to: 33)
		declaredAt: (14 to: 21).! !
!Behavior method!
update
	[
	([
	([
	(marsRover
		cover: (10 to: 18)
		declaredAt: (10 to: 18)) head ] valueCoveringAll:
		{20 to: 23}) =
		(head
			cover: (27 to: 30)
			declaredAt: (27 to: 30)) ] valueCoveringAll:
		{25 to: 25}) ifFalse: [
		[
		(self coverAll:
			{43 to: 46}) updateHeading ] valueCoveringAll:
			{48 to: 60} ]] valueCoveringAll:
		{33 to: 40}.
	[
	([
	([
	(marsRover
		cover: (66 to: 74)
		declaredAt: (10 to: 18)) position ] valueCoveringAll:
		{76 to: 83}) =
		(position
			cover: (87 to: 94)
			declaredAt: (87 to: 94)) ] valueCoveringAll:
		{85 to: 85}) ifFalse: [
		[
		(self coverAll:
			{107 to: 110}) updatePosition ] valueCoveringAll:
			{112 to: 125} ]] valueCoveringAll:
		{97 to: 104}.! !
!Behavior method!
updatePosition
	(position _ [
	(marsRover
		cover: (29 to: 37)
		declaredAt: (29 to: 37)) position ] valueCoveringAll:
		{39 to: 46})
		cover: (17 to: 24)
		declaredAt: (17 to: 24).
	[
	(positionObservers
		cover: (50 to: 66)
		declaredAt: (50 to: 66)) do: [ :anObserver |
		[
		(anObserver
			cover: (87 to: 96)
			declaredAt: (74 to: 83)) notifyPositionChange:
			(position
				cover: (120 to: 127)
				declaredAt: (17 to: 24)) ] valueCoveringAll:
			{98 to: 118} ]] valueCoveringAll:
		{68 to: 70}.! !
!Behavior method!
notifyPositionChange: aPosition
	^ [
	(log
		cover: (35 to: 37)
		declaredAt: (35 to: 37)) add:
		([
		(aPosition
			cover: (44 to: 52)
			declaredAt: (23 to: 31)) asString ] valueCoveringAll:
			{54 to: 61}) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
isBackwardCommand: aCommand
	^ [
	(aCommand
		cover: (32 to: 39)
		declaredAt: (20 to: 27)) =
		($b coverAll:
			{43 to: 44}) ] valueCoveringAll:
		{41 to: 41}.! !
!Behavior method!
isRotateRightCommand: aCommand
	^ [
	(aCommand
		cover: (35 to: 42)
		declaredAt: (23 to: 30)) =
		($r coverAll:
			{46 to: 47}) ] valueCoveringAll:
		{44 to: 44}.! !
!Behavior method!
rotateRight
	[
	(head
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) rotateRight:
		(self coverAll:
			{34 to: 37}) ] valueCoveringAll:
		{21 to: 32}.! !
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headEast ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
headEast
	(head _ [
	(MarsRoverHeadingEast
		cover: (21 to: 40)
		declaredAt: (21 to: 40)) new ] valueCoveringAll:
		{42 to: 44})
		cover: (13 to: 16)
		declaredAt: (13 to: 16).! !
!Behavior method!
updateHeading
	(head _ [
	(marsRover
		cover: (24 to: 32)
		declaredAt: (24 to: 32)) head ] valueCoveringAll:
		{34 to: 37})
		cover: (16 to: 19)
		declaredAt: (16 to: 19).
	[
	(rotationObservers
		cover: (41 to: 57)
		declaredAt: (41 to: 57)) do: [ :anObserver |
		[
		(anObserver
			cover: (78 to: 87)
			declaredAt: (65 to: 74)) notifyRotationChange:
			(head
				cover: (111 to: 114)
				declaredAt: (16 to: 19)) ] valueCoveringAll:
			{89 to: 109} ]] valueCoveringAll:
		{59 to: 61}.! !
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveEast ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
moveEast
	(position _ [
	(position
		cover: (13 to: 20)
		declaredAt: (13 to: 20)) +
		([
		(1 coverAll:
			{37 to: 37}) @
			(0 coverAll:
				{39 to: 39}) ] valueCoveringAll:
			{38 to: 38}) ] valueCoveringAll:
		{34 to: 34})
		cover: (25 to: 32)
		declaredAt: (13 to: 20).! !
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headSouth ] valueCoveringAll:
		{40 to: 48}.! !
!Behavior method!
headSouth
	(head _ [
	(MarsRoverHeadingSouth
		cover: (22 to: 42)
		declaredAt: (22 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 17)
		declaredAt: (14 to: 17).! !
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveSouth ] valueCoveringAll:
		{40 to: 48}.! !
!Behavior method!
moveSouth
	(position _ [
	(position
		cover: (14 to: 21)
		declaredAt: (14 to: 21)) +
		([
		(0 coverAll:
			{38 to: 38}) @
			(-1 coverAll:
				{40 to: 41}) ] valueCoveringAll:
			{39 to: 39}) ] valueCoveringAll:
		{35 to: 35})
		cover: (26 to: 33)
		declaredAt: (14 to: 21).! !
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headWest ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
headWest
	(head _ [
	(MarsRoverHeadingWest
		cover: (21 to: 40)
		declaredAt: (21 to: 40)) new ] valueCoveringAll:
		{42 to: 44})
		cover: (13 to: 16)
		declaredAt: (13 to: 16).! !
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveWest ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
moveWest
	(position _ [
	(position
		cover: (13 to: 20)
		declaredAt: (13 to: 20)) +
		([
		(-1 coverAll:
			{37 to: 38}) @
			(0 coverAll:
				{40 to: 40}) ] valueCoveringAll:
			{39 to: 39}) ] valueCoveringAll:
		{34 to: 34})
		cover: (25 to: 32)
		declaredAt: (13 to: 20).! !
!Behavior method!
size
	^ [
	(log
		cover: (8 to: 10)
		declaredAt: (8 to: 10)) size ] valueCoveringAll:
		{12 to: 15}.! !
!Behavior method!
at: anIndex
	^ [
	(log
		cover: (15 to: 17)
		declaredAt: (15 to: 17)) at:
		(anIndex
			cover: (23 to: 29)
			declaredAt: (5 to: 11)) ] valueCoveringAll:
		{19 to: 21}.! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/6/2021 21:44:38'!
PASSED!
!Behavior method!
cardinalPoint
	^ #South coverAll:
		{18 to: 23}.! !
!Behavior method!
moveBackward
	[
	(head
		cover: (17 to: 20)
		declaredAt: (17 to: 20)) moveBackward:
		(self coverAll:
			{36 to: 39}) ] valueCoveringAll:
		{22 to: 34}.! !
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (30 to: 39)
		declaredAt: (15 to: 24)) moveNorth ] valueCoveringAll:
		{41 to: 49}.! !
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (15 to: 24)) moveEast ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headNorth ] valueCoveringAll:
		{40 to: 48}.! !
!Behavior method!
headNorth
	(head _ [
	(MarsRoverHeadingNorth
		cover: (22 to: 42)
		declaredAt: (22 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 17)
		declaredAt: (14 to: 17).! !
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (30 to: 39)
		declaredAt: (15 to: 24)) moveSouth ] valueCoveringAll:
		{41 to: 49}.! !
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (30 to: 39)
		declaredAt: (15 to: 24)) moveWest ] valueCoveringAll:
		{41 to: 48}.! !

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/6/2021 21:44:39'!
PASSED!
!Behavior method!
addRotationFollower: aFollower
	[
	([
	(rotationObservers
		cover: (35 to: 51)
		declaredAt: (35 to: 51)) includes:
		(aFollower
			cover: (63 to: 71)
			declaredAt: (22 to: 30)) ] valueCoveringAll:
		{53 to: 61}) ifTrue: [ ^ [
		(self coverAll:
			{84 to: 87}) error:
			([
			([
			(self coverAll:
				{96 to: 99}) class ] valueCoveringAll:
				{101 to: 105}) followerIsAlreadyObservingThisStateErrorDescription ] valueCoveringAll:
				{107 to: 157}) ] valueCoveringAll:
			{89 to: 94} ]] valueCoveringAll:
		{74 to: 80}.
	[
	(rotationObservers
		cover: (162 to: 178)
		declaredAt: (35 to: 51)) add:
		(aFollower
			cover: (185 to: 193)
			declaredAt: (22 to: 30)) ] valueCoveringAll:
		{180 to: 183}.! !
!Behavior method!
notifyRotationChange: aHead
	[
	(log
		cover: (30 to: 32)
		declaredAt: (30 to: 32)) add:
		([
		(self coverAll:
			{40 to: 43}) headingAsString:
			(aHead
				cover: (62 to: 66)
				declaredAt: (23 to: 27)) ] valueCoveringAll:
			{45 to: 60}) ] valueCoveringAll:
		{34 to: 37}.! !
!Behavior method!
headingAsString: aHead
	[
	([
	(aHead
		cover: (26 to: 30)
		declaredAt: (18 to: 22)) isHeading:
		(#East coverAll:
			{43 to: 47}) ] valueCoveringAll:
		{32 to: 41}) ifTrue: [ ^ 'East.' coverAll:
			{60 to: 66} ]] valueCoveringAll:
		{50 to: 56}.
	[
	([
	(aHead
		cover: (72 to: 76)
		declaredAt: (18 to: 22)) isHeading:
		(#South coverAll:
			{89 to: 94}) ] valueCoveringAll:
		{78 to: 87}) ifTrue: [ ^ 'South.' coverAll:
			{107 to: 114} ]] valueCoveringAll:
		{97 to: 103}.
	[
	([
	(aHead
		cover: (120 to: 124)
		declaredAt: (18 to: 22)) isHeading:
		(#West coverAll:
			{137 to: 141}) ] valueCoveringAll:
		{126 to: 135}) ifTrue: [ ^ 'West.' coverAll:
			{154 to: 160} ]] valueCoveringAll:
		{144 to: 150}.
	[
	([
	(aHead
		cover: (166 to: 170)
		declaredAt: (18 to: 22)) isHeading:
		(#North coverAll:
			{183 to: 188}) ] valueCoveringAll:
		{172 to: 181}) ifTrue: [ ^ 'North.' coverAll:
			{201 to: 208} ]] valueCoveringAll:
		{191 to: 197}.! !
!Behavior method!
isHeading: aCardinalPoint
	^ [
	([
	(self coverAll:
		{30 to: 33}) class ] valueCoveringAll:
		{35 to: 39}) isFor:
		(aCardinalPoint
			cover: (48 to: 61)
			declaredAt: (12 to: 25)) ] valueCoveringAll:
		{41 to: 46}.! !
!Behavior method!
cardinalPoint
	^ #West coverAll:
		{18 to: 22}.! !

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/6/2021 21:44:39'!
PASSED!
!Behavior method!
isRotateLeftCommand: aCommand
	^ [
	(aCommand
		cover: (34 to: 41)
		declaredAt: (22 to: 29)) =
		($l coverAll:
			{45 to: 46}) ] valueCoveringAll:
		{43 to: 43}.! !
!Behavior method!
rotateLeft
	[
	(head
		cover: (15 to: 18)
		declaredAt: (15 to: 18)) rotateLeft:
		(self coverAll:
			{32 to: 35}) ] valueCoveringAll:
		{20 to: 30}.! !
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headWest ] valueCoveringAll:
		{39 to: 46}.! !
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headSouth ] valueCoveringAll:
		{39 to: 47}.! !
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headEast ] valueCoveringAll:
		{39 to: 46}.! !
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headNorth ] valueCoveringAll:
		{39 to: 47}.! !

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/6/2021 21:44:39'!
PASSED!
!Behavior method!
initialize
	(orientation _ 'Unknown.' coverAll:
		{28 to: 37})
		cover: (13 to: 23)
		declaredAt: (13 to: 23).
	(position _ 'Unknown.' coverAll:
		{53 to: 62})
		cover: (41 to: 48)
		declaredAt: (41 to: 48).! !
!Behavior method!
notifyPositionChange: aPosition
	(position _ aPosition
		cover: (47 to: 55)
		declaredAt: (23 to: 31))
		cover: (35 to: 42)
		declaredAt: (35 to: 42).! !
!Behavior method!
position
	^ [
	(position
		cover: (12 to: 19)
		declaredAt: (12 to: 19)) asString ] valueCoveringAll:
		{21 to: 28}.! !

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/6/2021 21:44:39'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/6/2021 21:44:39'!
PASSED!
!Behavior method!
notifyRotationChange: aHead
	(orientation _ [
	(self coverAll:
		{45 to: 48}) headingAsString:
		(aHead
			cover: (67 to: 71)
			declaredAt: (23 to: 27)) ] valueCoveringAll:
		{50 to: 65})
		cover: (30 to: 40)
		declaredAt: (30 to: 40).! !
!Behavior method!
orientation
	^ orientation
		cover: (15 to: 25)
		declaredAt: (15 to: 25).! !

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/6/2021 21:44:39'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/6/2021 21:44:39'!
PASSED!
!Behavior method!
invalidFollowerErrorDescription
	^ 'Error Invalid Follower' coverAll:
		{35 to: 58}.! !

!testRun: #FollowingTest #test09ObservableStateShouldBeValid stamp: 'LB 6/6/2021 21:44:39'!
PASSED!
!Behavior method!
followerIsAlreadyObservingThisStateErrorDescription
	^ 'Error follower is already observing this state.' coverAll:
		{55 to: 103}.! !

!testRun: #FollowingTest #test10 stamp: 'LB 6/6/2021 21:44:39'!
PASSED!

!testRun: #FollowingTest #test11 stamp: 'LB 6/6/2021 21:44:39'!
PASSED!

!testRun: #FollowingTest #test12WindowShouldNotKnowStateWhenCreated stamp: 'LB 6/6/2021 21:44:39'!
PASSED!
!Behavior method!
alreadyFollowingAMarsRoverErrorDescription
	^ 'already following a different MarsRover' coverAll:
		{46 to: 86}.! !

!testRun: #FollowingTest #test13FollowerCantObserveMoreThanOneMarsRover stamp: 'LB 6/6/2021 21:44:39'!
PASSED!

!testRun: #FollowingTest #test14FollowerShouldBeAMarsRoverFollower stamp: 'LB 6/6/2021 21:44:39'!
PASSED!
!Behavior method!
isAt: aPosition heading: aCardinalPoint
	^ [
	([
	(position
		cover: (44 to: 51)
		declaredAt: (44 to: 51)) =
		(aPosition
			cover: (55 to: 63)
			declaredAt: (7 to: 15)) ] valueCoveringAll:
		{53 to: 53}) and: [
		[
		(head
			cover: (72 to: 75)
			declaredAt: (72 to: 75)) isHeading:
			(aCardinalPoint
				cover: (88 to: 101)
				declaredAt: (26 to: 39)) ] valueCoveringAll:
			{77 to: 86} ]] valueCoveringAll:
		{65 to: 68}.! !

!testRun: #MarsRoverTest #test01 stamp: 'LB 6/6/2021 21:44:39'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'LB 6/6/2021 21:44:39'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'LB 6/6/2021 21:44:39'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'LB 6/6/2021 21:44:39'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'LB 6/6/2021 21:44:39'!
PASSED!
!Behavior method!
signalInvalidCommand
	[
	(self coverAll:
		{25 to: 28}) error:
		([
		(self coverAll:
			{37 to: 40}) invalidCommandErrorDescription ] valueCoveringAll:
			{42 to: 71}) ] valueCoveringAll:
		{30 to: 35}.! !
!Behavior method!
invalidCommandErrorDescription
	^ 'Invalid command' coverAll:
		{36 to: 52}.! !

!testRun: #MarsRoverTest #test06 stamp: 'LB 6/6/2021 21:44:39'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'LB 6/6/2021 21:44:39'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'LB 6/6/2021 21:44:39'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'LB 6/6/2021 21:44:39'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'LB 6/6/2021 21:44:39'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'LB 6/6/2021 21:44:39'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'LB 6/6/2021 21:44:39'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'LB 6/6/2021 21:44:39'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'LB 6/6/2021 21:44:39'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'LB 6/6/2021 21:44:39'!
PASSED!
!Behavior method!
invalidCardinalPointErrorDescription
	^ 'Invalid cardinal point' coverAll:
		{42 to: 65}.! !

!testRun: #MarsRoverTest #test16 stamp: 'LB 6/6/2021 21:44:39'!
PASSED!
!Behavior method!
at: aPosition heading: aCardinalPoint
	^ [
	([
	(self coverAll:
		{43 to: 46}) new ] valueCoveringAll:
		{48 to: 50})
		initializeAt:
			(aPosition
				cover: (66 to: 74)
				declaredAt: (5 to: 13))
		heading:
			([
			(MarsRoverHeading
				cover: (86 to: 101)
				declaredAt: (86 to: 101)) heading:
				(aCardinalPoint
					cover: (112 to: 125)
					declaredAt: (24 to: 37)) ] valueCoveringAll:
				{103 to: 110}) ] valueCoveringAll:
		{52 to: 64. 76 to: 83}.! !
!Behavior method!
heading: aCardinalPoint
	^ [
	([
	(self coverAll:
		{28 to: 31}) subclasses ] valueCoveringAll:
		{33 to: 42})
		detect: [ :aMarsRoverPositionClass |
			[
			(aMarsRoverPositionClass
				cover: (84 to: 106)
				declaredAt: (58 to: 80)) isFor:
				(aCardinalPoint
					cover: (115 to: 128)
					declaredAt: (10 to: 23)) ] valueCoveringAll:
				{108 to: 113} ]
		ifFound: [ :aMarsRoverPositionClass |
			[
			(aMarsRoverPositionClass
				cover: (172 to: 194)
				declaredAt: (146 to: 168)) new ] valueCoveringAll:
				{196 to: 198} ]
		ifNone: [
			[
			(self coverAll:
				{214 to: 217}) error:
				([
				(MarsRover
					cover: (226 to: 234)
					declaredAt: (226 to: 234)) invalidCardinalPointErrorDescription ] valueCoveringAll:
					{236 to: 271}) ] valueCoveringAll:
				{219 to: 224} ]] valueCoveringAll:
		{47 to: 53. 134 to: 141. 204 to: 210}.! !
!Behavior method!
isFor: aCardinalPoint
	^ [
	([
	(self coverAll:
		{26 to: 29}) cardinalPoint ] valueCoveringAll:
		{31 to: 43}) =
		(aCardinalPoint
			cover: (47 to: 60)
			declaredAt: (8 to: 21)) ] valueCoveringAll:
		{45 to: 45}.! !
!Behavior method!
cardinalPoint
	^ #East coverAll:
		{18 to: 22}.! !
!Behavior method!
cardinalPoint
	^ #North coverAll:
		{18 to: 23}.! !
!Behavior method!
initializeAt: aPosition heading: aHeading
	(position _ aPosition
		cover: (57 to: 65)
		declaredAt: (15 to: 23))
		cover: (45 to: 52)
		declaredAt: (45 to: 52).
	(head _ aHeading
		cover: (77 to: 84)
		declaredAt: (34 to: 41))
		cover: (69 to: 72)
		declaredAt: (69 to: 72).
	(observers _ [
	(MarsRoverObserver
		cover: (101 to: 117)
		declaredAt: (101 to: 117)) for:
		(self coverAll:
			{124 to: 127}) ] valueCoveringAll:
		{119 to: 122})
		cover: (88 to: 96)
		declaredAt: (88 to: 96).! !
!Behavior method!
for: aMarsRover
	^ [
	([
	(self coverAll:
		{19 to: 22}) new ] valueCoveringAll:
		{24 to: 26}) initializeFor:
		(aMarsRover
			cover: (43 to: 52)
			declaredAt: (6 to: 15)) ] valueCoveringAll:
		{28 to: 41}.! !
!Behavior method!
initializeFor: aMarsRover
	(marsRover _ aMarsRover
		cover: (42 to: 51)
		declaredAt: (16 to: 25))
		cover: (28 to: 36)
		declaredAt: (28 to: 36).
	(position _ [
	(marsRover
		cover: (67 to: 75)
		declaredAt: (28 to: 36)) position ] valueCoveringAll:
		{77 to: 84})
		cover: (55 to: 62)
		declaredAt: (55 to: 62).
	(head _ [
	(marsRover
		cover: (96 to: 104)
		declaredAt: (28 to: 36)) head ] valueCoveringAll:
		{106 to: 109})
		cover: (88 to: 91)
		declaredAt: (88 to: 91).
	(positionObservers _ [
	(OrderedCollection
		cover: (134 to: 150)
		declaredAt: (134 to: 150)) new ] valueCoveringAll:
		{152 to: 154})
		cover: (113 to: 129)
		declaredAt: (113 to: 129).
	(rotationObservers _ [
	(OrderedCollection
		cover: (179 to: 195)
		declaredAt: (134 to: 150)) new ] valueCoveringAll:
		{197 to: 199})
		cover: (158 to: 174)
		declaredAt: (158 to: 174).! !
!Behavior method!
position
	^ position
		cover: (12 to: 19)
		declaredAt: (12 to: 19).! !
!Behavior method!
head
	^ head
		cover: (8 to: 11)
		declaredAt: (8 to: 11).! !
!Behavior method!
initialize
	(log _ [
	(OrderedCollection
		cover: (20 to: 36)
		declaredAt: (20 to: 36)) new ] valueCoveringAll:
		{38 to: 40})
		cover: (13 to: 15)
		declaredAt: (13 to: 15).! !
!Behavior method!
addFollower: aFollower for: anObservable
	[
	(observers
		cover: (44 to: 52)
		declaredAt: (44 to: 52))
		add:
			(aFollower
				cover: (59 to: 67)
				declaredAt: (14 to: 22))
		for:
			(anObservable
				cover: (74 to: 85)
				declaredAt: (29 to: 40)) ] valueCoveringAll:
		{54 to: 57. 69 to: 72}.! !
!Behavior method!
add: aFollower for: anObservable
	[
	(self coverAll:
		{35 to: 38}) assertValidFollower:
		(aFollower
			cover: (61 to: 69)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{40 to: 59}.
	[
	(aFollower
		cover: (73 to: 81)
		declaredAt: (6 to: 14)) attachTo:
		(self coverAll:
			{93 to: 96}) ] valueCoveringAll:
		{83 to: 91}.
	[
	(self coverAll:
		{100 to: 103})
		attach:
			(aFollower
				cover: (113 to: 121)
				declaredAt: (6 to: 14))
		toObservable:
			(anObservable
				cover: (137 to: 148)
				declaredAt: (21 to: 32)) ] valueCoveringAll:
		{105 to: 111. 123 to: 135}.! !
!Behavior method!
assertValidFollower: aFollower
	[
	([
	(aFollower
		cover: (34 to: 42)
		declaredAt: (22 to: 30)) isKindOf:
		(MarsRoverFollower
			cover: (54 to: 70)
			declaredAt: (54 to: 70)) ] valueCoveringAll:
		{44 to: 52}) ifFalse: [ ^ [
		(self coverAll:
			{84 to: 87}) error:
			([
			([
			(self coverAll:
				{96 to: 99}) class ] valueCoveringAll:
				{101 to: 105}) invalidFollowerErrorDescription ] valueCoveringAll:
				{107 to: 137}) ] valueCoveringAll:
			{89 to: 94} ]] valueCoveringAll:
		{73 to: 80}.! !
!Behavior method!
attachTo: aMarsRoverObserver
	[
	(marsRoverObserver
		cover: (31 to: 47)
		declaredAt: (31 to: 47)) ifNil: [
		(marsRoverObserver _ aMarsRoverObserver
			cover: (78 to: 95)
			declaredAt: (11 to: 28))
			cover: (57 to: 73)
			declaredAt: (31 to: 47) ]] valueCoveringAll:
		{49 to: 54}.
	[
	([
	(marsRoverObserver
		cover: (101 to: 117)
		declaredAt: (31 to: 47)) ~=
		(aMarsRoverObserver
			cover: (122 to: 139)
			declaredAt: (11 to: 28)) ] valueCoveringAll:
		{119 to: 120}) ifTrue: [ ^ [
		(self coverAll:
			{152 to: 155}) error:
			([
			([
			(self coverAll:
				{164 to: 167}) class ] valueCoveringAll:
				{169 to: 173}) alreadyFollowingAMarsRoverErrorDescription ] valueCoveringAll:
				{175 to: 216}) ] valueCoveringAll:
			{157 to: 162} ]] valueCoveringAll:
		{142 to: 148}.! !
!Behavior method!
attach: aFollower toObservable: anObservable
	self coverAll:
		{85 to: 88}.
	[
	([
	(anObservable
		cover: (49 to: 60)
		declaredAt: (33 to: 44)) =
		(#Position coverAll:
			{64 to: 72}) ] valueCoveringAll:
		{62 to: 62}) ifTrue: [ ^ [
		(self coverAll:
			{161 to: 164}) addPositionFollower:
			(aFollower
				cover: (111 to: 119)
				declaredAt: (9 to: 17)) ] valueCoveringAll:
			{90 to: 109} ]] valueCoveringAll:
		{75 to: 81}.
	[
	([
	(anObservable
		cover: (125 to: 136)
		declaredAt: (33 to: 44)) =
		(#Rotation coverAll:
			{140 to: 148}) ] valueCoveringAll:
		{138 to: 138}) ifTrue: [ ^ [
		(self coverAll:
			{203 to: 206}) addRotationFollower:
			(aFollower
				cover: (187 to: 195)
				declaredAt: (9 to: 17)) ] valueCoveringAll:
			{166 to: 185} ]] valueCoveringAll:
		{151 to: 157}.
	^ [
	(self coverAll:
		{215 to: 218}) error:
		([
		([ self class ] valueCoveringAll:
			{220 to: 224}) invalidFollowerErrorDescription ] valueCoveringAll:
			{226 to: 256}) ] valueCoveringAll:
		{208 to: 213}.! !
!Behavior method!
addPositionFollower: aFollower
	[
	([
	(positionObservers
		cover: (34 to: 50)
		declaredAt: (34 to: 50)) includes:
		(aFollower
			cover: (62 to: 70)
			declaredAt: (22 to: 30)) ] valueCoveringAll:
		{52 to: 60}) ifTrue: [ ^ [
		(self coverAll:
			{83 to: 86}) error:
			([
			([
			(self coverAll:
				{95 to: 98}) class ] valueCoveringAll:
				{100 to: 104}) followerIsAlreadyObservingThisStateErrorDescription ] valueCoveringAll:
				{106 to: 156}) ] valueCoveringAll:
			{88 to: 93} ]] valueCoveringAll:
		{73 to: 79}.
	[
	(positionObservers
		cover: (161 to: 177)
		declaredAt: (34 to: 50)) add:
		(aFollower
			cover: (184 to: 192)
			declaredAt: (22 to: 30)) ] valueCoveringAll:
		{179 to: 182}.! !
!Behavior method!
process: aSequenceOfCommands
	[
	(aSequenceOfCommands
		cover: (32 to: 50)
		declaredAt: (10 to: 28)) do: [ :aCommand |
		[
		(self coverAll:
			{69 to: 72}) processCommand:
			(aCommand
				cover: (90 to: 97)
				declaredAt: (58 to: 65)) ] valueCoveringAll:
			{74 to: 88}.
		[
		(observers
			cover: (100 to: 108)
			declaredAt: (100 to: 108)) update ] valueCoveringAll:
			{110 to: 115} ]] valueCoveringAll:
		{52 to: 54}.! !
!Behavior method!
processCommand: aCommand
	[
	([
	(self coverAll:
		{29 to: 32}) isForwardCommand:
		(aCommand
			cover: (52 to: 59)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{34 to: 50}) ifTrue: [ ^ [
		(self coverAll:
			{74 to: 77}) moveForward ] valueCoveringAll:
			{79 to: 89} ]] valueCoveringAll:
		{62 to: 68}.
	[
	([
	(self coverAll:
		{96 to: 99}) isBackwardCommand:
		(aCommand
			cover: (120 to: 127)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{101 to: 118}) ifTrue: [ ^ [
		(self coverAll:
			{142 to: 145}) moveBackward ] valueCoveringAll:
			{147 to: 158} ]] valueCoveringAll:
		{130 to: 136}.
	[
	([
	(self coverAll:
		{165 to: 168}) isRotateRightCommand:
		(aCommand
			cover: (192 to: 199)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{170 to: 190}) ifTrue: [ ^ [
		(self coverAll:
			{214 to: 217}) rotateRight ] valueCoveringAll:
			{219 to: 229} ]] valueCoveringAll:
		{202 to: 208}.
	[
	([
	(self coverAll:
		{236 to: 239}) isRotateLeftCommand:
		(aCommand
			cover: (262 to: 269)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{241 to: 260}) ifTrue: [ ^ [
		(self coverAll:
			{284 to: 287}) rotateLeft ] valueCoveringAll:
			{289 to: 298} ]] valueCoveringAll:
		{272 to: 278}.
	[
	(self coverAll:
		{305 to: 308}) signalInvalidCommand ] valueCoveringAll:
		{310 to: 329}.! !
!Behavior method!
isForwardCommand: aCommand
	^ [
	(aCommand
		cover: (31 to: 38)
		declaredAt: (19 to: 26)) =
		($f coverAll:
			{42 to: 43}) ] valueCoveringAll:
		{40 to: 40}.! !
!Behavior method!
moveForward
	[
	(head
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) moveForward:
		(self coverAll:
			{34 to: 37}) ] valueCoveringAll:
		{21 to: 32}.! !
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveNorth ] valueCoveringAll:
		{40 to: 48}.! !
!Behavior method!
moveNorth
	(position _ [
	(position
		cover: (14 to: 21)
		declaredAt: (14 to: 21)) +
		([
		(0 coverAll:
			{38 to: 38}) @
			(1 coverAll:
				{40 to: 40}) ] valueCoveringAll:
			{39 to: 39}) ] valueCoveringAll:
		{35 to: 35})
		cover: (26 to: 33)
		declaredAt: (14 to: 21).! !
!Behavior method!
update
	[
	([
	([
	(marsRover
		cover: (10 to: 18)
		declaredAt: (10 to: 18)) head ] valueCoveringAll:
		{20 to: 23}) =
		(head
			cover: (27 to: 30)
			declaredAt: (27 to: 30)) ] valueCoveringAll:
		{25 to: 25}) ifFalse: [
		[
		(self coverAll:
			{43 to: 46}) updateHeading ] valueCoveringAll:
			{48 to: 60} ]] valueCoveringAll:
		{33 to: 40}.
	[
	([
	([
	(marsRover
		cover: (66 to: 74)
		declaredAt: (10 to: 18)) position ] valueCoveringAll:
		{76 to: 83}) =
		(position
			cover: (87 to: 94)
			declaredAt: (87 to: 94)) ] valueCoveringAll:
		{85 to: 85}) ifFalse: [
		[
		(self coverAll:
			{107 to: 110}) updatePosition ] valueCoveringAll:
			{112 to: 125} ]] valueCoveringAll:
		{97 to: 104}.! !
!Behavior method!
updatePosition
	(position _ [
	(marsRover
		cover: (29 to: 37)
		declaredAt: (29 to: 37)) position ] valueCoveringAll:
		{39 to: 46})
		cover: (17 to: 24)
		declaredAt: (17 to: 24).
	[
	(positionObservers
		cover: (50 to: 66)
		declaredAt: (50 to: 66)) do: [ :anObserver |
		[
		(anObserver
			cover: (87 to: 96)
			declaredAt: (74 to: 83)) notifyPositionChange:
			(position
				cover: (120 to: 127)
				declaredAt: (17 to: 24)) ] valueCoveringAll:
			{98 to: 118} ]] valueCoveringAll:
		{68 to: 70}.! !
!Behavior method!
notifyPositionChange: aPosition
	^ [
	(log
		cover: (35 to: 37)
		declaredAt: (35 to: 37)) add:
		([
		(aPosition
			cover: (44 to: 52)
			declaredAt: (23 to: 31)) asString ] valueCoveringAll:
			{54 to: 61}) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
isBackwardCommand: aCommand
	^ [
	(aCommand
		cover: (32 to: 39)
		declaredAt: (20 to: 27)) =
		($b coverAll:
			{43 to: 44}) ] valueCoveringAll:
		{41 to: 41}.! !
!Behavior method!
isRotateRightCommand: aCommand
	^ [
	(aCommand
		cover: (35 to: 42)
		declaredAt: (23 to: 30)) =
		($r coverAll:
			{46 to: 47}) ] valueCoveringAll:
		{44 to: 44}.! !
!Behavior method!
rotateRight
	[
	(head
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) rotateRight:
		(self coverAll:
			{34 to: 37}) ] valueCoveringAll:
		{21 to: 32}.! !
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headEast ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
headEast
	(head _ [
	(MarsRoverHeadingEast
		cover: (21 to: 40)
		declaredAt: (21 to: 40)) new ] valueCoveringAll:
		{42 to: 44})
		cover: (13 to: 16)
		declaredAt: (13 to: 16).! !
!Behavior method!
updateHeading
	(head _ [
	(marsRover
		cover: (24 to: 32)
		declaredAt: (24 to: 32)) head ] valueCoveringAll:
		{34 to: 37})
		cover: (16 to: 19)
		declaredAt: (16 to: 19).
	[
	(rotationObservers
		cover: (41 to: 57)
		declaredAt: (41 to: 57)) do: [ :anObserver |
		[
		(anObserver
			cover: (78 to: 87)
			declaredAt: (65 to: 74)) notifyRotationChange:
			(head
				cover: (111 to: 114)
				declaredAt: (16 to: 19)) ] valueCoveringAll:
			{89 to: 109} ]] valueCoveringAll:
		{59 to: 61}.! !
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveEast ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
moveEast
	(position _ [
	(position
		cover: (13 to: 20)
		declaredAt: (13 to: 20)) +
		([
		(1 coverAll:
			{37 to: 37}) @
			(0 coverAll:
				{39 to: 39}) ] valueCoveringAll:
			{38 to: 38}) ] valueCoveringAll:
		{34 to: 34})
		cover: (25 to: 32)
		declaredAt: (13 to: 20).! !
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headSouth ] valueCoveringAll:
		{40 to: 48}.! !
!Behavior method!
headSouth
	(head _ [
	(MarsRoverHeadingSouth
		cover: (22 to: 42)
		declaredAt: (22 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 17)
		declaredAt: (14 to: 17).! !
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveSouth ] valueCoveringAll:
		{40 to: 48}.! !
!Behavior method!
moveSouth
	(position _ [
	(position
		cover: (14 to: 21)
		declaredAt: (14 to: 21)) +
		([
		(0 coverAll:
			{38 to: 38}) @
			(-1 coverAll:
				{40 to: 41}) ] valueCoveringAll:
			{39 to: 39}) ] valueCoveringAll:
		{35 to: 35})
		cover: (26 to: 33)
		declaredAt: (14 to: 21).! !
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headWest ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
headWest
	(head _ [
	(MarsRoverHeadingWest
		cover: (21 to: 40)
		declaredAt: (21 to: 40)) new ] valueCoveringAll:
		{42 to: 44})
		cover: (13 to: 16)
		declaredAt: (13 to: 16).! !
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveWest ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
moveWest
	(position _ [
	(position
		cover: (13 to: 20)
		declaredAt: (13 to: 20)) +
		([
		(-1 coverAll:
			{37 to: 38}) @
			(0 coverAll:
				{40 to: 40}) ] valueCoveringAll:
			{39 to: 39}) ] valueCoveringAll:
		{34 to: 34})
		cover: (25 to: 32)
		declaredAt: (13 to: 20).! !
!Behavior method!
size
	^ [
	(log
		cover: (8 to: 10)
		declaredAt: (8 to: 10)) size ] valueCoveringAll:
		{12 to: 15}.! !
!Behavior method!
at: anIndex
	^ [
	(log
		cover: (15 to: 17)
		declaredAt: (15 to: 17)) at:
		(anIndex
			cover: (23 to: 29)
			declaredAt: (5 to: 11)) ] valueCoveringAll:
		{19 to: 21}.! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/6/2021 21:46:12'!
PASSED!
!Behavior method!
cardinalPoint
	^ #South coverAll:
		{18 to: 23}.! !
!Behavior method!
moveBackward
	[
	(head
		cover: (17 to: 20)
		declaredAt: (17 to: 20)) moveBackward:
		(self coverAll:
			{36 to: 39}) ] valueCoveringAll:
		{22 to: 34}.! !
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (30 to: 39)
		declaredAt: (15 to: 24)) moveNorth ] valueCoveringAll:
		{41 to: 49}.! !
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (15 to: 24)) moveEast ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headNorth ] valueCoveringAll:
		{40 to: 48}.! !
!Behavior method!
headNorth
	(head _ [
	(MarsRoverHeadingNorth
		cover: (22 to: 42)
		declaredAt: (22 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 17)
		declaredAt: (14 to: 17).! !
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (30 to: 39)
		declaredAt: (15 to: 24)) moveSouth ] valueCoveringAll:
		{41 to: 49}.! !
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (30 to: 39)
		declaredAt: (15 to: 24)) moveWest ] valueCoveringAll:
		{41 to: 48}.! !

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/6/2021 21:46:12'!
PASSED!
!Behavior method!
addRotationFollower: aFollower
	[
	([
	(rotationObservers
		cover: (35 to: 51)
		declaredAt: (35 to: 51)) includes:
		(aFollower
			cover: (63 to: 71)
			declaredAt: (22 to: 30)) ] valueCoveringAll:
		{53 to: 61}) ifTrue: [ ^ [
		(self coverAll:
			{84 to: 87}) error:
			([
			([
			(self coverAll:
				{96 to: 99}) class ] valueCoveringAll:
				{101 to: 105}) followerIsAlreadyObservingThisStateErrorDescription ] valueCoveringAll:
				{107 to: 157}) ] valueCoveringAll:
			{89 to: 94} ]] valueCoveringAll:
		{74 to: 80}.
	[
	(rotationObservers
		cover: (162 to: 178)
		declaredAt: (35 to: 51)) add:
		(aFollower
			cover: (185 to: 193)
			declaredAt: (22 to: 30)) ] valueCoveringAll:
		{180 to: 183}.! !
!Behavior method!
notifyRotationChange: aHead
	[
	(log
		cover: (30 to: 32)
		declaredAt: (30 to: 32)) add:
		([
		(self coverAll:
			{40 to: 43}) headingAsString:
			(aHead
				cover: (62 to: 66)
				declaredAt: (23 to: 27)) ] valueCoveringAll:
			{45 to: 60}) ] valueCoveringAll:
		{34 to: 37}.! !
!Behavior method!
headingAsString: aHead
	[
	([
	(aHead
		cover: (26 to: 30)
		declaredAt: (18 to: 22)) isHeading:
		(#East coverAll:
			{43 to: 47}) ] valueCoveringAll:
		{32 to: 41}) ifTrue: [ ^ 'East.' coverAll:
			{60 to: 66} ]] valueCoveringAll:
		{50 to: 56}.
	[
	([
	(aHead
		cover: (72 to: 76)
		declaredAt: (18 to: 22)) isHeading:
		(#South coverAll:
			{89 to: 94}) ] valueCoveringAll:
		{78 to: 87}) ifTrue: [ ^ 'South.' coverAll:
			{107 to: 114} ]] valueCoveringAll:
		{97 to: 103}.
	[
	([
	(aHead
		cover: (120 to: 124)
		declaredAt: (18 to: 22)) isHeading:
		(#West coverAll:
			{137 to: 141}) ] valueCoveringAll:
		{126 to: 135}) ifTrue: [ ^ 'West.' coverAll:
			{154 to: 160} ]] valueCoveringAll:
		{144 to: 150}.
	[
	([
	(aHead
		cover: (166 to: 170)
		declaredAt: (18 to: 22)) isHeading:
		(#North coverAll:
			{183 to: 188}) ] valueCoveringAll:
		{172 to: 181}) ifTrue: [ ^ 'North.' coverAll:
			{201 to: 208} ]] valueCoveringAll:
		{191 to: 197}.! !
!Behavior method!
isHeading: aCardinalPoint
	^ [
	([
	(self coverAll:
		{30 to: 33}) class ] valueCoveringAll:
		{35 to: 39}) isFor:
		(aCardinalPoint
			cover: (48 to: 61)
			declaredAt: (12 to: 25)) ] valueCoveringAll:
		{41 to: 46}.! !
!Behavior method!
cardinalPoint
	^ #West coverAll:
		{18 to: 22}.! !

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/6/2021 21:46:12'!
PASSED!
!Behavior method!
isRotateLeftCommand: aCommand
	^ [
	(aCommand
		cover: (34 to: 41)
		declaredAt: (22 to: 29)) =
		($l coverAll:
			{45 to: 46}) ] valueCoveringAll:
		{43 to: 43}.! !
!Behavior method!
rotateLeft
	[
	(head
		cover: (15 to: 18)
		declaredAt: (15 to: 18)) rotateLeft:
		(self coverAll:
			{32 to: 35}) ] valueCoveringAll:
		{20 to: 30}.! !
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headWest ] valueCoveringAll:
		{39 to: 46}.! !
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headSouth ] valueCoveringAll:
		{39 to: 47}.! !
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headEast ] valueCoveringAll:
		{39 to: 46}.! !
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headNorth ] valueCoveringAll:
		{39 to: 47}.! !

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/6/2021 21:46:12'!
PASSED!
!Behavior method!
initialize
	(orientation _ 'Unknown.' coverAll:
		{28 to: 37})
		cover: (13 to: 23)
		declaredAt: (13 to: 23).
	(position _ 'Unknown.' coverAll:
		{53 to: 62})
		cover: (41 to: 48)
		declaredAt: (41 to: 48).! !
!Behavior method!
notifyPositionChange: aPosition
	(position _ aPosition
		cover: (47 to: 55)
		declaredAt: (23 to: 31))
		cover: (35 to: 42)
		declaredAt: (35 to: 42).! !
!Behavior method!
position
	^ [
	(position
		cover: (12 to: 19)
		declaredAt: (12 to: 19)) asString ] valueCoveringAll:
		{21 to: 28}.! !

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/6/2021 21:46:12'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/6/2021 21:46:12'!
PASSED!
!Behavior method!
notifyRotationChange: aHead
	(orientation _ [
	(self coverAll:
		{45 to: 48}) headingAsString:
		(aHead
			cover: (67 to: 71)
			declaredAt: (23 to: 27)) ] valueCoveringAll:
		{50 to: 65})
		cover: (30 to: 40)
		declaredAt: (30 to: 40).! !
!Behavior method!
orientation
	^ orientation
		cover: (15 to: 25)
		declaredAt: (15 to: 25).! !

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/6/2021 21:46:12'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/6/2021 21:46:12'!
PASSED!
!Behavior method!
invalidFollowerErrorDescription
	^ 'Error Invalid Follower' coverAll:
		{35 to: 58}.! !

!testRun: #FollowingTest #test09ObservableStateShouldBeValid stamp: 'LB 6/6/2021 21:46:12'!
PASSED!
!Behavior method!
followerIsAlreadyObservingThisStateErrorDescription
	^ 'Error follower is already observing this state.' coverAll:
		{55 to: 103}.! !

!testRun: #FollowingTest #test10 stamp: 'LB 6/6/2021 21:46:12'!
PASSED!

!testRun: #FollowingTest #test11 stamp: 'LB 6/6/2021 21:46:12'!
PASSED!

!testRun: #FollowingTest #test12WindowShouldNotKnowStateWhenCreated stamp: 'LB 6/6/2021 21:46:12'!
PASSED!
!Behavior method!
alreadyFollowingAMarsRoverErrorDescription
	^ 'already following a different MarsRover' coverAll:
		{46 to: 86}.! !

!testRun: #FollowingTest #test13FollowerCantObserveMoreThanOneMarsRover stamp: 'LB 6/6/2021 21:46:12'!
PASSED!

!testRun: #FollowingTest #test14FollowerShouldBeAMarsRoverFollower stamp: 'LB 6/6/2021 21:46:12'!
PASSED!
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/6/2021 21:49:57' prior: 50862776!
updateHeading
	head := marsRover head.
	rotationObservers first notifyRotationChange: head.
	"rotationObservers do: [:anObserver | anObserver notifyRotationChange: head.]"! !
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/6/2021 21:50:11' prior: 50862344!
updatePosition
	position := marsRover position.
	positionObservers first notifyRotationChange: head.
	"positionObservers do: [:anObserver | anObserver notifyPositionChange: position]."! !
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/6/2021 21:50:18' prior: 50866834!
updatePosition
	position := marsRover position.
	positionObservers first notifyPositionChange: head.
	"positionObservers do: [:anObserver | anObserver notifyPositionChange: position]."! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/6/2021 21:50:20'!
ERROR!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/6/2021 21:50:20'!
ERROR!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/6/2021 21:50:20'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/6/2021 21:50:20'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/6/2021 21:50:20'!
FAILURE!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/6/2021 21:50:20'!
FAILURE!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/6/2021 21:50:20'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/6/2021 21:50:20'!
PASSED!

!testRun: #FollowingTest #test09ObservableStateShouldBeValid stamp: 'LB 6/6/2021 21:50:20'!
PASSED!

!testRun: #FollowingTest #test10 stamp: 'LB 6/6/2021 21:50:20'!
PASSED!

!testRun: #FollowingTest #test11 stamp: 'LB 6/6/2021 21:50:20'!
PASSED!

!testRun: #FollowingTest #test12WindowShouldNotKnowStateWhenCreated stamp: 'LB 6/6/2021 21:50:20'!
PASSED!

!testRun: #FollowingTest #test13FollowerCantObserveMoreThanOneMarsRover stamp: 'LB 6/6/2021 21:50:20'!
PASSED!

!testRun: #FollowingTest #test14FollowerShouldBeAMarsRoverFollower stamp: 'LB 6/6/2021 21:50:20'!
PASSED!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/6/2021 21:50:45'!
ERROR!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/6/2021 21:50:45'!
ERROR!
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/6/2021 21:51:27' prior: 50866825!
updateHeading
	head := marsRover head.
	rotationObservers ifNotEmpty: [rotationObservers first notifyRotationChange: head].
	"rotationObservers do: [:anObserver | anObserver notifyRotationChange: head.]"! !
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/6/2021 21:51:40' prior: 50866843!
updatePosition
	position := marsRover position.
	positionObservers ifNotEmpty: [positionObservers first notifyPositionChange: head.]
	"positionObservers do: [:anObserver | anObserver notifyPositionChange: position]."! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/6/2021 21:51:42'!
FAILURE!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/6/2021 21:51:42'!
FAILURE!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/6/2021 21:51:42'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/6/2021 21:51:42'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/6/2021 21:51:42'!
FAILURE!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/6/2021 21:51:42'!
FAILURE!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/6/2021 21:51:42'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/6/2021 21:51:42'!
PASSED!

!testRun: #FollowingTest #test09ObservableStateShouldBeValid stamp: 'LB 6/6/2021 21:51:42'!
PASSED!

!testRun: #FollowingTest #test10 stamp: 'LB 6/6/2021 21:51:42'!
PASSED!

!testRun: #FollowingTest #test11 stamp: 'LB 6/6/2021 21:51:42'!
PASSED!

!testRun: #FollowingTest #test12WindowShouldNotKnowStateWhenCreated stamp: 'LB 6/6/2021 21:51:43'!
PASSED!

!testRun: #FollowingTest #test13FollowerCantObserveMoreThanOneMarsRover stamp: 'LB 6/6/2021 21:51:43'!
PASSED!

!testRun: #FollowingTest #test14FollowerShouldBeAMarsRoverFollower stamp: 'LB 6/6/2021 21:51:43'!
PASSED!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/6/2021 21:51:46'!
FAILURE!

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/6/2021 21:51:46'!
FAILURE!
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/6/2021 21:52:16' prior: 50866913!
updatePosition
	position := marsRover position.
	positionObservers ifNotEmpty: [positionObservers first notifyPositionChange: position.]
	"positionObservers do: [:anObserver | anObserver notifyPositionChange: position]."! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/6/2021 21:52:18'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/6/2021 21:52:18'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/6/2021 21:52:18'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/6/2021 21:52:18'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/6/2021 21:52:18'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/6/2021 21:52:18'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/6/2021 21:52:18'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/6/2021 21:52:18'!
PASSED!

!testRun: #FollowingTest #test09ObservableStateShouldBeValid stamp: 'LB 6/6/2021 21:52:18'!
PASSED!

!testRun: #FollowingTest #test10 stamp: 'LB 6/6/2021 21:52:18'!
PASSED!

!testRun: #FollowingTest #test11 stamp: 'LB 6/6/2021 21:52:18'!
PASSED!

!testRun: #FollowingTest #test12WindowShouldNotKnowStateWhenCreated stamp: 'LB 6/6/2021 21:52:18'!
PASSED!

!testRun: #FollowingTest #test13FollowerCantObserveMoreThanOneMarsRover stamp: 'LB 6/6/2021 21:52:18'!
PASSED!

!testRun: #FollowingTest #test14FollowerShouldBeAMarsRoverFollower stamp: 'LB 6/6/2021 21:52:18'!
PASSED!
!FollowingTest methodsFor: 'test' stamp: 'LB 6/6/2021 21:54:21'!
test15LogAndWindowCanObserveTheSameObservable

	| marsRover window log |
	marsRover := MarsRover at: 0@0 heading: #North.
	window := MarsRoverWindow new.
	log := MarsRoverLog new.
	
	marsRover addFollower: window for: #Rotation.
	marsRover addFollower: window for: #Position.
	marsRover addFollower: log for: #Rotation.
	marsRover addFollower: log for: #Position.
	
	marsRover process: 'lrlrlrlr'.
	
	! !
!FollowingTest methodsFor: 'test' stamp: 'LB 6/6/2021 21:55:36' prior: 50867028!
test15LogAndWindowCanObserveTheSameObservable

	| marsRover window log |
	marsRover := MarsRover at: 0@0 heading: #North.
	window := MarsRoverWindow new.
	log := MarsRoverLog new.
	
	marsRover addFollower: window for: #Rotation.
	marsRover addFollower: window for: #Position.
	marsRover addFollower: log for: #Rotation.
	marsRover addFollower: log for: #Position.
	
	marsRover process: 'frfrfrfr'.
	
	self assert: 8 equals: log size.
	self assert: '0@1' equals: (log at: 	1).
	self assert: 'East.' equals: (log at: 	2).
	self assert: '1@1' equals: (log at: 	2).
	self assert: '1@0' equals: (log at: 	3).
	self assert: '0@0' equals: (log at: 	4).! !
!FollowingTest methodsFor: 'test' stamp: 'LB 6/6/2021 21:59:12' prior: 50867044!
test15LogAndWindowCanObserveTheSameObservable

	| marsRover window log |
	marsRover := MarsRover at: 0@0 heading: #North.
	window := MarsRoverWindow new.
	log := MarsRoverLog new.
	
	marsRover addFollower: window for: #Rotation.
	marsRover addFollower: window for: #Position.
	marsRover addFollower: log for: #Rotation.
	marsRover addFollower: log for: #Position.
	
	marsRover process: 'fr'.
	self assert: '0@1' equals: window position.
	self assert: 'East.' equals: window orientation.
	
	marsRover process: 'fr'.
	self assert: '1@1' equals: window position.
	self assert: 'South.' equals: window orientation.
	
	marsRover process: 'fr'.
	self assert: '1@0' equals: window position.
	self assert: 'West.' equals: window orientation.
	
	marsRover process: 'fr'.
	self assert: '0@0' equals: window position.
	self assert: 'North.' equals: window orientation.
	
	self assert: 8 equals: log size.
	self assert: '0@1' equals: (log at: 	1).
	self assert: '1@1' equals: (log at: 	3).
	self assert: '1@0' equals: (log at: 	5).
	self assert: '0@0' equals: (log at: 	7).
	
	self assert: 'East.' equals: (log at: 	2).
	self assert: 'South.' equals: (log at: 	4).
	self assert: 'West.' equals: (log at: 	6).
	self assert: 'North.' equals: (log at: 	8).
	! !

!testRun: #FollowingTest #test15LogAndWindowCanObserveTheSameObservable stamp: 'LB 6/6/2021 21:59:13'!
FAILURE!
!FollowingTest methodsFor: 'test' stamp: 'LB 6/6/2021 21:59:25' prior: 50867067!
test15LogAndWindowCanObserveTheSameObservable

	| marsRover window log |
	marsRover := MarsRover at: 0@0 heading: #North.
	window := MarsRoverWindow new.
	log := MarsRoverLog new.
	
	marsRover addFollower: log for: #Rotation.
	marsRover addFollower: log for: #Position.
	marsRover addFollower: window for: #Rotation.
	marsRover addFollower: window for: #Position.
	
	marsRover process: 'fr'.
	self assert: '0@1' equals: window position.
	self assert: 'East.' equals: window orientation.
	
	marsRover process: 'fr'.
	self assert: '1@1' equals: window position.
	self assert: 'South.' equals: window orientation.
	
	marsRover process: 'fr'.
	self assert: '1@0' equals: window position.
	self assert: 'West.' equals: window orientation.
	
	marsRover process: 'fr'.
	self assert: '0@0' equals: window position.
	self assert: 'North.' equals: window orientation.
	
	self assert: 8 equals: log size.
	self assert: '0@1' equals: (log at: 	1).
	self assert: '1@1' equals: (log at: 	3).
	self assert: '1@0' equals: (log at: 	5).
	self assert: '0@0' equals: (log at: 	7).
	
	self assert: 'East.' equals: (log at: 	2).
	self assert: 'South.' equals: (log at: 	4).
	self assert: 'West.' equals: (log at: 	6).
	self assert: 'North.' equals: (log at: 	8).
	! !

!testRun: #FollowingTest #test15LogAndWindowCanObserveTheSameObservable stamp: 'LB 6/6/2021 21:59:26'!
FAILURE!
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/6/2021 21:59:47' prior: 50866974!
updatePosition
	position := marsRover position.
	positionObservers do: [:anObserver | anObserver notifyPositionChange: position].! !
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/6/2021 21:59:54' prior: 50866903!
updateHeading
	head := marsRover head.
	rotationObservers do: [:anObserver | anObserver notifyRotationChange: head.]! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/6/2021 21:59:56'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/6/2021 21:59:56'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/6/2021 21:59:56'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/6/2021 21:59:56'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/6/2021 21:59:56'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/6/2021 21:59:56'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/6/2021 21:59:56'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/6/2021 21:59:56'!
PASSED!

!testRun: #FollowingTest #test09ObservableStateShouldBeValid stamp: 'LB 6/6/2021 21:59:56'!
PASSED!

!testRun: #FollowingTest #test10 stamp: 'LB 6/6/2021 21:59:56'!
PASSED!

!testRun: #FollowingTest #test11 stamp: 'LB 6/6/2021 21:59:56'!
PASSED!

!testRun: #FollowingTest #test12WindowShouldNotKnowStateWhenCreated stamp: 'LB 6/6/2021 21:59:56'!
PASSED!

!testRun: #FollowingTest #test13FollowerCantObserveMoreThanOneMarsRover stamp: 'LB 6/6/2021 21:59:56'!
PASSED!

!testRun: #FollowingTest #test14FollowerShouldBeAMarsRoverFollower stamp: 'LB 6/6/2021 21:59:56'!
PASSED!

!testRun: #FollowingTest #test15LogAndWindowCanObserveTheSameObservable stamp: 'LB 6/6/2021 21:59:56'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'LB 6/6/2021 22:02:24'!
test10FollowerCantObserveSameState

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: #East.
	
	marsRover process: 'r'.
	
	self assert: (marsRover isAt: 1@2 heading: #South)! !
!FollowingTest methodsFor: 'test' stamp: 'LB 6/6/2021 22:02:24'!
test10FollowerCantObserveSameState

    | marsRover log |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    log := MarsRoverLog new.
	marsRover addFollower: log for: #Position.

    self 
	should: [marsRover addFollower: log for: #Position]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: MarsRoverObserver followerIsAlreadyObservingThisStateErrorDescription equals: anError messageText].! !

!methodRemoval: MarsRoverTest #test10 stamp: 'LB 6/6/2021 22:02:24'!
test10

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: #East.
	
	marsRover process: 'r'.
	
	self assert: (marsRover isAt: 1@2 heading: #South)!

!methodRemoval: FollowingTest #test10 stamp: 'LB 6/6/2021 22:02:24'!
test10

    | marsRover log |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    log := MarsRoverLog new.
	marsRover addFollower: log for: #Position.

    self 
	should: [marsRover addFollower: log for: #Position]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: MarsRoverObserver followerIsAlreadyObservingThisStateErrorDescription equals: anError messageText].!
!MarsRoverTest methodsFor: 'tests' stamp: 'LB 6/6/2021 22:02:46'!
test10

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: #East.
	
	marsRover process: 'r'.
	
	self assert: (marsRover isAt: 1@2 heading: #South)! !
!FollowingTest methodsFor: 'test' stamp: 'LB 6/6/2021 22:02:46'!
test10

    | marsRover log |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    log := MarsRoverLog new.
	marsRover addFollower: log for: #Position.

    self 
	should: [marsRover addFollower: log for: #Position]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: MarsRoverObserver followerIsAlreadyObservingThisStateErrorDescription equals: anError messageText].! !

!methodRemoval: MarsRoverTest #test10FollowerCantObserveSameState stamp: 'LB 6/6/2021 22:02:46'!
test10FollowerCantObserveSameState

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: #East.
	
	marsRover process: 'r'.
	
	self assert: (marsRover isAt: 1@2 heading: #South)!

!methodRemoval: FollowingTest #test10FollowerCantObserveSameState stamp: 'LB 6/6/2021 22:02:46'!
test10FollowerCantObserveSameState

    | marsRover log |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    log := MarsRoverLog new.
	marsRover addFollower: log for: #Position.

    self 
	should: [marsRover addFollower: log for: #Position]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: MarsRoverObserver followerIsAlreadyObservingThisStateErrorDescription equals: anError messageText].!
!FollowingTest methodsFor: 'test' stamp: 'LB 6/6/2021 22:03:52'!
test10AStateObserversCantHaveDuplicates

    | marsRover log |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    log := MarsRoverLog new.
	marsRover addFollower: log for: #Position.

    self 
	should: [marsRover addFollower: log for: #Position]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: MarsRoverObserver followerIsAlreadyObservingThisStateErrorDescription equals: anError messageText].! !

!methodRemoval: FollowingTest #test10 stamp: 'LB 6/6/2021 22:03:52'!
test10

    | marsRover log |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    log := MarsRoverLog new.
	marsRover addFollower: log for: #Position.

    self 
	should: [marsRover addFollower: log for: #Position]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: MarsRoverObserver followerIsAlreadyObservingThisStateErrorDescription equals: anError messageText].!
!FollowingTest methodsFor: 'test' stamp: 'LB 6/6/2021 22:05:08'!
test10FollowerCantObservePositionMoreThanOnce

    | marsRover log |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    log := MarsRoverLog new.
	marsRover addFollower: log for: #Position.

    self 
	should: [marsRover addFollower: log for: #Position]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: MarsRoverObserver followerIsAlreadyObservingThisStateErrorDescription equals: anError messageText].! !

!methodRemoval: FollowingTest #test10AStateObserversCantHaveDuplicates stamp: 'LB 6/6/2021 22:05:08'!
test10AStateObserversCantHaveDuplicates

    | marsRover log |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    log := MarsRoverLog new.
	marsRover addFollower: log for: #Position.

    self 
	should: [marsRover addFollower: log for: #Position]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: MarsRoverObserver followerIsAlreadyObservingThisStateErrorDescription equals: anError messageText].!
!FollowingTest methodsFor: 'test' stamp: 'LB 6/6/2021 22:05:26'!
test11FollowerCantObserveRotationMoreThanOnce

    | marsRover window |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    window := MarsRoverWindow new.
	marsRover addFollower: window for: #Rotation.

    self 
	should: [marsRover addFollower: window for: #Rotation]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: MarsRoverObserver followerIsAlreadyObservingThisStateErrorDescription equals: anError messageText].! !

!methodRemoval: FollowingTest #test11 stamp: 'LB 6/6/2021 22:05:26'!
test11

    | marsRover window |
    
    marsRover := MarsRover at: 0@0 heading: #North.
    window := MarsRoverWindow new.
	marsRover addFollower: window for: #Rotation.

    self 
	should: [marsRover addFollower: window for: #Rotation]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: MarsRoverObserver followerIsAlreadyObservingThisStateErrorDescription equals: anError messageText].!

!classDefinition: #MarsRoverObserver category: 'MarsRover-WithHeading' stamp: 'LB 6/6/2021 22:08:00'!
Object subclass: #MarsRoverObserver
	instanceVariableNames: 'positionFollowers rotationObservers marsRover position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/6/2021 22:08:00' prior: 50864156!
addPositionFollower: aFollower
	(positionFollowers includes: aFollower) ifTrue: [^self error: self class followerIsAlreadyObservingThisStateErrorDescription].
	positionFollowers add: aFollower.! !
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/6/2021 22:08:00' prior: 50867159!
updatePosition
	position := marsRover position.
	positionFollowers do: [:anObserver | anObserver notifyPositionChange: position].! !
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/6/2021 22:08:00' prior: 50862624!
initializeFor: aMarsRover
	marsRover  := aMarsRover.
	position := marsRover position.
	head := marsRover head.
	positionFollowers := OrderedCollection new.
	rotationObservers := OrderedCollection new.! !

!classDefinition: #MarsRoverObserver category: 'MarsRover-WithHeading' stamp: 'LB 6/6/2021 22:08:10'!
Object subclass: #MarsRoverObserver
	instanceVariableNames: 'positionFollowers rotationFollowers marsRover position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/6/2021 22:08:10' prior: 50867441!
initializeFor: aMarsRover
	marsRover  := aMarsRover.
	position := marsRover position.
	head := marsRover head.
	positionFollowers := OrderedCollection new.
	rotationFollowers := OrderedCollection new.! !
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/6/2021 22:08:10' prior: 50864415!
addRotationFollower: aFollower 
	(rotationFollowers includes: aFollower) ifTrue: [^self error: self class followerIsAlreadyObservingThisStateErrorDescription].
	rotationFollowers add: aFollower.! !
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/6/2021 22:08:10' prior: 50867167!
updateHeading
	head := marsRover head.
	rotationFollowers do: [:anObserver | anObserver notifyRotationChange: head.]! !

!classDefinition: #MarsRoverObserver category: 'MarsRover-WithHeading' stamp: 'LB 6/6/2021 22:08:34'!
Object subclass: #MarsRoverObserver
	instanceVariableNames: 'positionFollowers rotationFollowers marsRover currentPosition head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/6/2021 22:08:34' prior: 50867433!
updatePosition
	currentPosition := marsRover position.
	positionFollowers do: [:anObserver | anObserver notifyPositionChange: currentPosition].! !
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/6/2021 22:08:34' prior: 50867461!
initializeFor: aMarsRover
	marsRover  := aMarsRover.
	currentPosition := marsRover position.
	head := marsRover head.
	positionFollowers := OrderedCollection new.
	rotationFollowers := OrderedCollection new.! !
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/6/2021 22:08:34' prior: 50862439!
update
	(marsRover head = head) ifFalse: [self updateHeading].
	(marsRover position = currentPosition) ifFalse: [self updatePosition].! !

!classDefinition: #MarsRoverObserver category: 'MarsRover-WithHeading' stamp: 'LB 6/6/2021 22:08:40'!
Object subclass: #MarsRoverObserver
	instanceVariableNames: 'positionFollowers rotationFollowers marsRover currentPosition currentHead'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/6/2021 22:08:40' prior: 50867516!
update
	(marsRover head = currentHead) ifFalse: [self updateHeading].
	(marsRover position = currentPosition) ifFalse: [self updatePosition].! !
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/6/2021 22:08:40' prior: 50867506!
initializeFor: aMarsRover
	marsRover  := aMarsRover.
	currentPosition := marsRover position.
	currentHead := marsRover head.
	positionFollowers := OrderedCollection new.
	rotationFollowers := OrderedCollection new.! !
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'LB 6/6/2021 22:08:40' prior: 50867481!
updateHeading
	currentHead := marsRover head.
	rotationFollowers do: [:anObserver | anObserver notifyRotationChange: currentHead.]! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/6/2021 22:09:41'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/6/2021 22:09:41'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/6/2021 22:09:41'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/6/2021 22:09:41'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/6/2021 22:09:41'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/6/2021 22:09:41'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/6/2021 22:09:41'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/6/2021 22:09:41'!
PASSED!

!testRun: #FollowingTest #test09ObservableStateShouldBeValid stamp: 'LB 6/6/2021 22:09:41'!
PASSED!

!testRun: #FollowingTest #test10FollowerCantObservePositionMoreThanOnce stamp: 'LB 6/6/2021 22:09:41'!
PASSED!

!testRun: #FollowingTest #test11FollowerCantObserveRotationMoreThanOnce stamp: 'LB 6/6/2021 22:09:41'!
PASSED!

!testRun: #FollowingTest #test12WindowShouldNotKnowStateWhenCreated stamp: 'LB 6/6/2021 22:09:41'!
PASSED!

!testRun: #FollowingTest #test13FollowerCantObserveMoreThanOneMarsRover stamp: 'LB 6/6/2021 22:09:41'!
PASSED!

!testRun: #FollowingTest #test14FollowerShouldBeAMarsRoverFollower stamp: 'LB 6/6/2021 22:09:41'!
PASSED!

!testRun: #FollowingTest #test15LogAndWindowCanObserveTheSameObservable stamp: 'LB 6/6/2021 22:09:41'!
PASSED!
!MarsRoverWindow methodsFor: 'testing' stamp: 'LB 6/6/2021 22:12:02' prior: 50862143!
position
	^position! !
!MarsRoverWindow methodsFor: 'updating' stamp: 'LB 6/6/2021 22:12:07' prior: 50862138 overrides: 50862231!
notifyPositionChange: aPosition 
	position := aPosition asString.! !

!testRun: #FollowingTest #test01LogForwardFromAnyHeading stamp: 'LB 6/6/2021 22:12:10'!
PASSED!

!testRun: #FollowingTest #test02LogBackwardsFromAnyHeading stamp: 'LB 6/6/2021 22:12:10'!
PASSED!

!testRun: #FollowingTest #test03LogRightRotationFromAnyHeading stamp: 'LB 6/6/2021 22:12:10'!
PASSED!

!testRun: #FollowingTest #test04LogLeftRotationFromAnyHeading stamp: 'LB 6/6/2021 22:12:10'!
PASSED!

!testRun: #FollowingTest #test05WindowUpdatesPositionInForwardMovement stamp: 'LB 6/6/2021 22:12:10'!
PASSED!

!testRun: #FollowingTest #test06WindowUpdatesPositionInBackwardsMovement stamp: 'LB 6/6/2021 22:12:10'!
PASSED!

!testRun: #FollowingTest #test07WindowUpdatesHeadingInRightRotation stamp: 'LB 6/6/2021 22:12:10'!
PASSED!

!testRun: #FollowingTest #test08WindowUpdatesHeadingInLeftRotation stamp: 'LB 6/6/2021 22:12:10'!
PASSED!

!testRun: #FollowingTest #test09ObservableStateShouldBeValid stamp: 'LB 6/6/2021 22:12:10'!
PASSED!

!testRun: #FollowingTest #test10FollowerCantObservePositionMoreThanOnce stamp: 'LB 6/6/2021 22:12:10'!
PASSED!

!testRun: #FollowingTest #test11FollowerCantObserveRotationMoreThanOnce stamp: 'LB 6/6/2021 22:12:10'!
PASSED!

!testRun: #FollowingTest #test12WindowShouldNotKnowStateWhenCreated stamp: 'LB 6/6/2021 22:12:10'!
PASSED!

!testRun: #FollowingTest #test13FollowerCantObserveMoreThanOneMarsRover stamp: 'LB 6/6/2021 22:12:10'!
PASSED!

!testRun: #FollowingTest #test14FollowerShouldBeAMarsRoverFollower stamp: 'LB 6/6/2021 22:12:10'!
PASSED!

!testRun: #FollowingTest #test15LogAndWindowCanObserveTheSameObservable stamp: 'LB 6/6/2021 22:12:10'!
PASSED!

----SNAPSHOT----(6 June 2021 22:13:09) CuisUniversity-4532.image priorSource: 17041664!

----QUIT----(6 June 2021 22:18:35) CuisUniversity-4532.image priorSource: 17152584!