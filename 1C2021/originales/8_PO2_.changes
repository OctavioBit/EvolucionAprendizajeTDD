

----QUIT----(9 March 2021 14:58:42) CuisUniversity-4532.image priorSource: 13044060!

----STARTUP---- (9 March 2021 14:58:43) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4532.image!


----QUIT----(9 March 2021 14:58:43) CuisUniversity-4532.image priorSource: 16885479!

----STARTUP---- (3 May 2021 21:55:46) as /home/igna/Desktop/linux64/CuisUniversity-4532.image!


----STARTUP---- (3 May 2021 22:05:01) as /home/igna/Desktop/linux64/CuisUniversity-4532.image!


----STARTUP---- (10 May 2021 19:18:59) as /home/igna/Desktop/CuisNuevo/CuisUniversity-4532.image!


TestCase subclass: #Rot13Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Rot13'!

!classDefinition: #Rot13Test category: 'Rot13' stamp: 'ijgt 5/10/2021 19:21:50'!
TestCase subclass: #Rot13Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Rot13'!
!Rot13Test methodsFor: 'no messages' stamp: 'ijgt 5/10/2021 19:22:06'!
test01

	! !
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'ijgt 5/10/2021 19:24:42' prior: 50859345!
test01

	self assert: '' asRot13 equals: ''! !

!testRun: #Rot13Test #test01 stamp: 'ijgt 5/10/2021 19:28:30'!
ERROR!
!String methodsFor: '*Rot13' stamp: 'ijgt 5/10/2021 19:29:26'!
asRot13
	self shouldBeImplemented.! !
!String methodsFor: '*Rot13' stamp: 'ijgt 5/10/2021 19:47:15' prior: 50859355!
asRot13
	^ ''! !

!testRun: #Rot13Test #test01 stamp: 'ijgt 5/10/2021 19:47:52'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'ijgt 5/10/2021 19:47:52'!
PASSED!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'ijgt 5/10/2021 19:49:57'!
test02

	self assert: 'a' asRot13 equals: 'n'! !

!testRun: #Rot13Test #test02 stamp: 'ijgt 5/10/2021 20:05:22'!
FAILURE!
!Rot13Test methodsFor: 'assertions' stamp: 'ijgt 5/10/2021 20:05:28' overrides: 16927375!
assert: aFalse description: aBlockClosure 
	self shouldBeImplemented.! !

!testRun: #Rot13Test #test02 stamp: 'ijgt 5/10/2021 20:05:53'!
ERROR!

!methodRemoval: Rot13Test #assert:description: stamp: 'ijgt 5/10/2021 20:06:28'!
assert: aFalse description: aBlockClosure 
	self shouldBeImplemented.!

!testRun: #Rot13Test #test02 stamp: 'ijgt 5/10/2021 20:06:35'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'ijgt 5/10/2021 20:08:58' prior: 50859359!
asRot13
	self = 'a' ifTrue: [^'n'].
	^ ''! !

!testRun: #Rot13Test #test02 stamp: 'ijgt 5/10/2021 20:09:10'!
PASSED!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'ijgt 5/10/2021 20:17:41'!
test03

	self assert: 'b' asRot13 equals: 'o'! !

!testRun: #Rot13Test #test03 stamp: 'ijgt 5/10/2021 20:17:43'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'ijgt 5/10/2021 20:18:05' prior: 50859389!
asRot13
	self = 'a' ifTrue: [^'n'].
	self = 'b' ifTrue: [^'o'].
	^ ''! !

!testRun: #Rot13Test #test03 stamp: 'ijgt 5/10/2021 20:18:07'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'ijgt 5/10/2021 20:18:07'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'ijgt 5/10/2021 20:18:07'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'ijgt 5/10/2021 20:18:07'!
PASSED!
!String methodsFor: '*Rot13' stamp: 'ijgt 5/10/2021 20:24:06' prior: 50859403!
asRot13
	self = '' ifTrue: [^''].
	^(Character asciiValue: (self first asciiValue + 13)) asString! !

!testRun: #Rot13Test #test03 stamp: 'ijgt 5/10/2021 20:24:12'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'ijgt 5/10/2021 20:24:12'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'ijgt 5/10/2021 20:24:12'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'ijgt 5/10/2021 20:24:12'!
PASSED!
!String methodsFor: '*Rot13' stamp: 'ijgt 5/10/2021 20:36:02' prior: 50859417!
asRot13
	self = '' ifTrue: [^''].
	self = 'z' ifTrue: [^'m'].
	^(Character asciiValue: (self first asciiValue + 13)) asString! !
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'ijgt 5/10/2021 20:36:23'!
test04

	self assert: 'z' asRot13 equals: 'm'! !
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'ijgt 5/10/2021 20:39:03'!
test05

	self assert: 'p' asRot13 equals: 'c'! !

!testRun: #Rot13Test #test05 stamp: 'ijgt 5/10/2021 20:39:04'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'ijgt 5/10/2021 20:39:29' prior: 50859432!
asRot13
	self = '' ifTrue: [^''].
	self = 'z' ifTrue: [^'m'].
	self = 'p' ifTrue: [^'c'].
	^(Character asciiValue: (self first asciiValue + 13)) asString! !

!testRun: #Rot13Test #test05 stamp: 'ijgt 5/10/2021 20:39:31'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'ijgt 5/10/2021 20:39:31'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'ijgt 5/10/2021 20:39:31'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'ijgt 5/10/2021 20:39:31'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'ijgt 5/10/2021 20:39:31'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'ijgt 5/10/2021 20:39:31'!
PASSED!
!String methodsFor: '*Rot13' stamp: 'ijgt 5/10/2021 20:46:39' prior: 50859450!
asRot13
	self = '' ifTrue: [^''].
	self first asciiValue > 'm' ifTrue: [^(Character asciiValue: (self first asciiValue + 13)) asString].
	^(Character asciiValue: (self first asciiValue + 13)) asString! !
!String methodsFor: '*Rot13' stamp: 'ijgt 5/10/2021 20:46:52' prior: 50859471!
asRot13
	self = '' ifTrue: [^''].
	self first asciiValue > 'm' ifTrue: [^(Character asciiValue: (self first asciiValue - 13)) asString].
	^(Character asciiValue: (self first asciiValue + 13)) asString! !
!String methodsFor: '*Rot13' stamp: 'ijgt 5/10/2021 20:48:41' prior: 50859480!
asRot13
	self = '' ifTrue: [^''].
	self first asciiValue > ($m asciiValue) ifTrue: [^(Character asciiValue: (self first asciiValue - 13)) asString].
	^(Character asciiValue: (self first asciiValue + 13)) asString! !

!testRun: #Rot13Test #test01 stamp: 'ijgt 5/10/2021 20:48:46'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'ijgt 5/10/2021 20:48:46'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'ijgt 5/10/2021 20:48:46'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'ijgt 5/10/2021 20:48:46'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'ijgt 5/10/2021 20:48:46'!
PASSED!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'ijgt 5/10/2021 20:54:27'!
test06

	self assert: ' ' asRot13 equals: ' '! !

!testRun: #Rot13Test #test06 stamp: 'ijgt 5/10/2021 20:54:29'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'ijgt 5/10/2021 20:54:50' prior: 50859489!
asRot13
	self = '' ifTrue: [^''].
	self = ' ' ifTrue: [^' '].
	self first asciiValue > ($m asciiValue) ifTrue: [^(Character asciiValue: (self first asciiValue - 13)) asString].
	^(Character asciiValue: (self first asciiValue + 13)) asString! !

!testRun: #Rot13Test #test06 stamp: 'ijgt 5/10/2021 20:54:52'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'ijgt 5/10/2021 20:54:52'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'ijgt 5/10/2021 20:54:52'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'ijgt 5/10/2021 20:54:52'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'ijgt 5/10/2021 20:54:52'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'ijgt 5/10/2021 20:54:52'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'ijgt 5/10/2021 20:54:52'!
PASSED!
!String methodsFor: '*Rot13' stamp: 'ijgt 5/10/2021 21:13:44' prior: 50859517!
asRot13
	self = '' ifTrue: [^''].
	self = ' ' ifTrue: [^' '].
	(($a asciiValue <= self first asciiValue) and: (self first asciiValue <= $z asciiValue)) ifTrue: [
	self first asciiValue > ($m asciiValue) ifTrue: [^(Character asciiValue: (self first asciiValue - 13)) asString].
	self first asciiValue <= ($m asciiValue) ifTrue: [^(Character asciiValue: (self first asciiValue + 13)) asString].
	]! !
!String methodsFor: '*Rot13' stamp: 'ijgt 5/10/2021 21:14:19' prior: 50859543!
asRot13
	self = '' ifTrue: [^''].
	self = ' ' ifTrue: [^' '].
	(($a asciiValue <= self first asciiValue) and: (self first asciiValue <= $z asciiValue)) ifTrue: [
		self first asciiValue > ($m asciiValue) ifTrue: 
			[^(Character asciiValue: (self first asciiValue - 13)) asString].
		self first asciiValue <= ($m asciiValue) ifTrue:
			[^(Character asciiValue: (self first asciiValue + 13)) asString].
	]! !

!testRun: #Rot13Test #test06 stamp: 'ijgt 5/10/2021 21:14:27'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'ijgt 5/10/2021 21:14:27'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'ijgt 5/10/2021 21:14:27'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'ijgt 5/10/2021 21:14:27'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'ijgt 5/10/2021 21:14:27'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'ijgt 5/10/2021 21:14:27'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'ijgt 5/10/2021 21:14:27'!
PASSED!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'ijgt 5/10/2021 21:15:22'!
test08

	self assert: '?' asRot13 equals: '?'! !
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'ijgt 5/10/2021 21:20:08'!
test09

	self assert: 'ñ' asRot13 equals: 'ñ'! !

!testRun: #Rot13Test #test09 stamp: 'ijgt 5/10/2021 21:20:09'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'ijgt 5/10/2021 21:20:09'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'ijgt 5/10/2021 21:20:09'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'ijgt 5/10/2021 21:20:09'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'ijgt 5/10/2021 21:20:09'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'ijgt 5/10/2021 21:20:09'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'ijgt 5/10/2021 21:20:09'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'ijgt 5/10/2021 21:20:09'!
PASSED!

!testRun: #Rot13Test #test09 stamp: 'ijgt 5/10/2021 21:20:09'!
PASSED!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'ijgt 5/10/2021 21:20:20'!
test10

	self assert: 'A' asRot13 equals: 'N'! !

!testRun: #Rot13Test #test10 stamp: 'ijgt 5/10/2021 21:20:24'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'ijgt 5/10/2021 21:20:54' prior: 50859558!
asRot13
	self = '' ifTrue: [^''].
	self = 'A' ifTrue: [^'N'].
	(($a asciiValue <= self first asciiValue) and: (self first asciiValue <= $z asciiValue)) ifTrue: [
		self first asciiValue > ($m asciiValue) ifTrue: 
			[^(Character asciiValue: (self first asciiValue - 13)) asString].
		self first asciiValue <= ($m asciiValue) ifTrue:
			[^(Character asciiValue: (self first asciiValue + 13)) asString].
	]! !

!testRun: #Rot13Test #test10 stamp: 'ijgt 5/10/2021 21:21:02'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'ijgt 5/10/2021 21:21:02'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'ijgt 5/10/2021 21:21:02'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'ijgt 5/10/2021 21:21:02'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'ijgt 5/10/2021 21:21:02'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'ijgt 5/10/2021 21:21:02'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'ijgt 5/10/2021 21:21:02'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'ijgt 5/10/2021 21:21:02'!
PASSED!

!testRun: #Rot13Test #test09 stamp: 'ijgt 5/10/2021 21:21:02'!
PASSED!

!testRun: #Rot13Test #test10 stamp: 'ijgt 5/10/2021 21:21:02'!
PASSED!
!String methodsFor: '*Rot13' stamp: 'ijgt 5/10/2021 21:21:46' prior: 50859625!
asRot13
	self = '' ifTrue: [^''].
	self = 'A' ifTrue: [^'N'].
	(($a asciiValue <= self first asciiValue) and: (self first asciiValue <= $z asciiValue)) ifTrue: [
		self first asciiValue > ($m asciiValue) ifTrue: 
			[^(Character asciiValue: (self first asciiValue - 13)) asString].
		self first asciiValue <= ($m asciiValue) ifTrue:
			[^(Character asciiValue: (self first asciiValue + 13)) asString].
	].
	^self! !

!testRun: #Rot13Test #test10 stamp: 'ijgt 5/10/2021 21:22:37'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'ijgt 5/10/2021 21:22:37'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'ijgt 5/10/2021 21:22:37'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'ijgt 5/10/2021 21:22:37'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'ijgt 5/10/2021 21:22:37'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'ijgt 5/10/2021 21:22:37'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'ijgt 5/10/2021 21:22:37'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'ijgt 5/10/2021 21:22:37'!
PASSED!

!testRun: #Rot13Test #test09 stamp: 'ijgt 5/10/2021 21:22:37'!
PASSED!

!testRun: #Rot13Test #test10 stamp: 'ijgt 5/10/2021 21:22:37'!
PASSED!

!testRun: #Rot13Test #test10 stamp: 'ijgt 5/10/2021 21:22:42'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'ijgt 5/10/2021 21:22:42'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'ijgt 5/10/2021 21:22:42'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'ijgt 5/10/2021 21:22:42'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'ijgt 5/10/2021 21:22:42'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'ijgt 5/10/2021 21:22:42'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'ijgt 5/10/2021 21:22:42'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'ijgt 5/10/2021 21:22:42'!
PASSED!

!testRun: #Rot13Test #test09 stamp: 'ijgt 5/10/2021 21:22:42'!
PASSED!

!testRun: #Rot13Test #test10 stamp: 'ijgt 5/10/2021 21:22:42'!
PASSED!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'ijgt 5/10/2021 21:23:02'!
test11

	self assert: 'N' asRot13 equals: 'A'! !

!testRun: #Rot13Test #test11 stamp: 'ijgt 5/10/2021 21:23:05'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'ijgt 5/10/2021 21:23:24' prior: 50859663!
asRot13
	self = '' ifTrue: [^''].
	self = 'A' ifTrue: [^'N'].
	self = 'N' ifTrue: [^'A'].
	(($a asciiValue <= self first asciiValue) and: (self first asciiValue <= $z asciiValue)) ifTrue: [
		self first asciiValue > ($m asciiValue) ifTrue: 
			[^(Character asciiValue: (self first asciiValue - 13)) asString].
		self first asciiValue <= ($m asciiValue) ifTrue:
			[^(Character asciiValue: (self first asciiValue + 13)) asString].
	].
	^self! !

!testRun: #Rot13Test #test11 stamp: 'ijgt 5/10/2021 21:23:26'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'ijgt 5/10/2021 21:23:26'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'ijgt 5/10/2021 21:23:26'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'ijgt 5/10/2021 21:23:26'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'ijgt 5/10/2021 21:23:26'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'ijgt 5/10/2021 21:23:26'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'ijgt 5/10/2021 21:23:26'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'ijgt 5/10/2021 21:23:26'!
PASSED!

!testRun: #Rot13Test #test09 stamp: 'ijgt 5/10/2021 21:23:26'!
PASSED!

!testRun: #Rot13Test #test10 stamp: 'ijgt 5/10/2021 21:23:26'!
PASSED!

!testRun: #Rot13Test #test11 stamp: 'ijgt 5/10/2021 21:23:26'!
PASSED!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'ijgt 5/10/2021 21:23:47'!
test12

	self assert: 'Z' asRot13 equals: 'M'! !

!testRun: #Rot13Test #test12 stamp: 'ijgt 5/10/2021 21:23:51'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'ijgt 5/10/2021 21:24:16' prior: 50859731!
asRot13
	self = '' ifTrue: [^''].
	self = 'A' ifTrue: [^'N'].
	self = 'N' ifTrue: [^'A'].
	self = 'Z' ifTrue: [^'M'].
	(($a asciiValue <= self first asciiValue) and: (self first asciiValue <= $z asciiValue)) ifTrue: [
		self first asciiValue > ($m asciiValue) ifTrue: 
			[^(Character asciiValue: (self first asciiValue - 13)) asString].
		self first asciiValue <= ($m asciiValue) ifTrue:
			[^(Character asciiValue: (self first asciiValue + 13)) asString].
	].
	^self! !

----STARTUP---- (12 May 2021 19:17:15) as /home/igna/Desktop/CuisNuevo/CuisUniversity-4532.image!


TestCase subclass: #DecimalToStringRomanNumberConversionTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Roman-Numbers-Integration'!

!classDefinition: #DecimalToStringRomanNumberConversionTest category: 'Roman-Numbers-Integration' stamp: 'ijgt 5/12/2021 19:20:00'!
TestCase subclass: #DecimalToStringRomanNumberConversionTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Roman-Numbers-Integration'!
!DecimalToStringRomanNumberConversionTest methodsFor: 'nil' stamp: 'ijgt 5/12/2021 19:20:47'!
test01

	self assert: 1 asRomanString equals: 'I'.! !

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/12/2021 19:20:51'!
ERROR!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/12/2021 19:22:06'!
asRomanString
	self shouldBeImplemented.! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/12/2021 19:22:41' prior: 50859359!
asRomanString
	^'I'! !

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/12/2021 19:22:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/12/2021 19:22:44'!
PASSED!
!DecimalToStringRomanNumberConversionTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/12/2021 19:24:23'!
test02

	self assert: 2 asRomanString equals: 'II'.! !

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/12/2021 19:24:47'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/12/2021 19:24:47'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/12/2021 19:25:47' prior: 50859364!
asRomanString
	self = 2 ifTrue: [^'II'].
	^'I'! !

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/12/2021 19:25:57'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/12/2021 19:26:09'!
PASSED!
!DecimalToStringRomanNumberConversionTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/12/2021 19:27:34'!
test03

	self assert: 3 asRomanString equals: 'III'.! !

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/12/2021 19:27:39'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/12/2021 19:28:02' prior: 50859387!
asRomanString
	self = 2 ifTrue: [^'II'].
	self = 3 ifTrue: [^'III'].
	^'I'! !

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/12/2021 19:28:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/12/2021 19:28:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/12/2021 19:28:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/12/2021 19:28:05'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/12/2021 19:35:13' prior: 50859408!
asRomanString
	
	^String streamContents: [:stream | 
		self timesRepeat: [stream nextPut: $I] ]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/12/2021 19:35:20'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/12/2021 19:35:20'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/12/2021 19:35:20'!
PASSED!
!DecimalToStringRomanNumberConversionTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/12/2021 19:37:11' prior: 50859399!
test03

	self assert: 4 asRomanString equals: 'IV'.! !
!DecimalToStringRomanNumberConversionTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/12/2021 19:37:24'!
test04

	self assert: 4 asRomanString equals: 'IV'.! !

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/12/2021 19:37:26'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/12/2021 19:43:14' prior: 50859427!
asRomanString
	
	^String streamContents: [:stream | 
		(self between: 1 and: 3) ifTrue: [ self timesRepeat: [stream nextPut: $I] ].
		self = 4 ifTrue:[stream nextPutAll: 'IV']. ]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/12/2021 19:43:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/12/2021 19:43:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/12/2021 19:43:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/12/2021 19:43:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/12/2021 19:43:33'!
PASSED!
!DecimalToStringRomanNumberConversionTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/12/2021 19:44:20'!
test05

	self assert: 5 asRomanString equals: 'V'.! !

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/12/2021 19:44:21'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/12/2021 19:44:40' prior: 50859459!
asRomanString
	
	^String streamContents: [:stream | 
		(self between: 1 and: 3) ifTrue: [ self timesRepeat: [stream nextPut: $I] ].
		self = 4 ifTrue:[stream nextPutAll: 'IV']. 
		self = 5 ifTrue:[stream nextPutAll: 'V'].]! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/12/2021 19:44:49' prior: 50859494!
asRomanString
	
	^String streamContents: [:stream | 
		(self between: 1 and: 3) ifTrue: [ self timesRepeat: [stream nextPut: $I] ].
		self = 4 ifTrue:[stream nextPutAll: 'IV']. 
		self = 5 ifTrue:[stream nextPutAll: 'V'].
	]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/12/2021 19:44:56'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/12/2021 19:44:56'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/12/2021 19:44:56'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/12/2021 19:44:57'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/12/2021 19:44:57'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/12/2021 19:44:57'!
PASSED!
!DecimalToStringRomanNumberConversionTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/12/2021 19:47:11'!
test06

	self assert: 6 asRomanString equals: 'VI'.! !

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/12/2021 19:47:14'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/12/2021 19:47:36' prior: 50859505!
asRomanString
	
	^String streamContents: [:stream | 
		(self between: 1 and: 3) ifTrue: [ self timesRepeat: [stream nextPut: $I] ].
		self = 4 ifTrue:[stream nextPutAll: 'IV']. 
		self = 5 ifTrue:[stream nextPutAll: 'V'].
		self = 6 ifTrue:[stream nextPutAll: 'VI'].
	]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/12/2021 19:48:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/12/2021 19:48:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/12/2021 19:48:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/12/2021 19:48:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/12/2021 19:48:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/12/2021 19:48:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/12/2021 19:48:06'!
PASSED!
!DecimalToStringRomanNumberConversionTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/12/2021 19:48:59'!
test07

	self assert: 7 asRomanString equals: 'VII'.! !

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/12/2021 19:49:00'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/12/2021 19:49:20' prior: 50859544!
asRomanString
	
	^String streamContents: [:stream | 
		(self between: 1 and: 3) ifTrue: [ self timesRepeat: [stream nextPut: $I] ].
		self = 4 ifTrue:[stream nextPutAll: 'IV']. 
		self = 5 ifTrue:[stream nextPutAll: 'V'].
		self = 6 ifTrue:[stream nextPutAll: 'VI'].
		self = 7 ifTrue:[stream nextPutAll: 'VII'].
	]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/12/2021 19:49:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/12/2021 19:49:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/12/2021 19:49:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/12/2021 19:49:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/12/2021 19:49:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/12/2021 19:49:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/12/2021 19:49:28'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/12/2021 19:49:28'!
PASSED!
!DecimalToStringRomanNumberConversionTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/12/2021 20:08:46'!
test08

	self assert: 8 asRomanString equals: 'VIII'.! !

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/12/2021 20:08:49'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/12/2021 20:09:10' prior: 50859588!
asRomanString
	
	^String streamContents: [:stream | 
		(self between: 1 and: 3) ifTrue: [ self timesRepeat: [stream nextPut: $I] ].
		self = 4 ifTrue:[stream nextPutAll: 'IV']. 
		self = 5 ifTrue:[stream nextPutAll: 'V'].
		self = 6 ifTrue:[stream nextPutAll: 'VI'].
		self = 7 ifTrue:[stream nextPutAll: 'VII'].
		self = 8 ifTrue:[stream nextPutAll: 'VIII'].
	]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/12/2021 20:09:12'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/12/2021 20:09:12'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/12/2021 20:09:12'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/12/2021 20:09:12'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/12/2021 20:09:12'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/12/2021 20:09:12'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/12/2021 20:09:12'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/12/2021 20:09:12'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/12/2021 20:09:12'!
PASSED!
!DecimalToStringRomanNumberConversionTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/12/2021 20:09:53'!
test09

	self assert: 9 asRomanString equals: 'IX'.! !

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/12/2021 20:10:11'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/12/2021 20:10:38' prior: 50859637!
asRomanString
	
	^String streamContents: [:stream | 
		(self between: 1 and: 3) ifTrue: [ self timesRepeat: [stream nextPut: $I] ].
		self = 4 ifTrue:[stream nextPutAll: 'IV']. 
		self = 5 ifTrue:[stream nextPutAll: 'V'].
		self = 6 ifTrue:[stream nextPutAll: 'VI'].
		self = 7 ifTrue:[stream nextPutAll: 'VII'].
		self = 8 ifTrue:[stream nextPutAll: 'VIII'].
		self = 9 ifTrue:[stream nextPutAll: 'IX'].
	]! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/12/2021 20:13:04' prior: 50859690!
asRomanString
	
	^String streamContents: [:stream | 
		(self between: 1 and: 3) ifTrue: [ self timesRepeat: [stream nextPut: $I] ].
		self = 4 ifTrue:[stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [stream nextPut:$V. (self -5) timesRepeat: [stream nextPut: $I] ].
		self = 9 ifTrue:[stream nextPutAll: 'IX'].
	]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/12/2021 20:13:07'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/12/2021 20:13:07'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/12/2021 20:13:07'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/12/2021 20:13:07'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/12/2021 20:13:07'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/12/2021 20:13:07'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/12/2021 20:13:07'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/12/2021 20:13:07'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/12/2021 20:13:07'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/12/2021 20:13:07'!
PASSED!
!DecimalToStringRomanNumberConversionTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/12/2021 20:16:53'!
test10

	self assert: 10 asRomanString equals: 'X'.! !

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/12/2021 20:16:54'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/12/2021 20:17:13' prior: 50859706!
asRomanString
	
	^String streamContents: [:stream | 
		(self between: 1 and: 3) ifTrue: [ self timesRepeat: [stream nextPut: $I] ].
		self = 4 ifTrue:[stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [stream nextPut:$V. (self -5) timesRepeat: [stream nextPut: $I] ].
		self = 9 ifTrue:[stream nextPutAll: 'IX'].
		self = 10 ifTrue:[stream nextPutAll: 'X'].
	]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/12/2021 20:17:15'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/12/2021 20:17:15'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/12/2021 20:17:15'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/12/2021 20:17:15'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/12/2021 20:17:15'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/12/2021 20:17:15'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/12/2021 20:17:15'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/12/2021 20:17:15'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/12/2021 20:17:15'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/12/2021 20:17:15'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/12/2021 20:17:15'!
PASSED!
!DecimalToStringRomanNumberConversionTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/12/2021 20:17:24'!
test11

	self assert: 11 asRomanString equals: 'XI'.! !

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/12/2021 20:17:25'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/12/2021 20:17:41' prior: 50859761!
asRomanString
	
	^String streamContents: [:stream | 
		(self between: 1 and: 3) ifTrue: [ self timesRepeat: [stream nextPut: $I] ].
		self = 4 ifTrue:[stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [stream nextPut:$V. (self -5) timesRepeat: [stream nextPut: $I] ].
		self = 9 ifTrue:[stream nextPutAll: 'IX'].
		self = 10 ifTrue:[stream nextPutAll: 'X'].
		self = 11 ifTrue:[stream nextPutAll: 'XI'].
	]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/12/2021 20:17:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/12/2021 20:17:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/12/2021 20:17:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/12/2021 20:17:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/12/2021 20:17:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/12/2021 20:17:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/12/2021 20:17:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/12/2021 20:17:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/12/2021 20:17:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/12/2021 20:17:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/12/2021 20:17:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/12/2021 20:17:44'!
PASSED!
!DecimalToStringRomanNumberConversionTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/12/2021 20:18:20'!
test12

	self assert: 12 asRomanString equals: 'XII'.! !

!testRun: #DecimalToStringRomanNumberConversionTest #test12 stamp: 'ijgt 5/12/2021 20:18:21'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/12/2021 20:18:41' prior: 50859821!
asRomanString
	
	^String streamContents: [:stream | 
		(self between: 1 and: 3) ifTrue: [ self timesRepeat: [stream nextPut: $I] ].
		self = 4 ifTrue:[stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [stream nextPut:$V. (self -5) timesRepeat: [stream nextPut: $I] ].
		self = 9 ifTrue:[stream nextPutAll: 'IX'].
		self = 10 ifTrue:[stream nextPutAll: 'X'].
		self = 11 ifTrue:[stream nextPutAll: 'XI'].
		self = 12 ifTrue:[stream nextPutAll: 'XII'].
	]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test12 stamp: 'ijgt 5/12/2021 20:18:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/12/2021 20:18:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/12/2021 20:18:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/12/2021 20:18:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/12/2021 20:18:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/12/2021 20:18:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/12/2021 20:18:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/12/2021 20:18:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/12/2021 20:18:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/12/2021 20:18:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/12/2021 20:18:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/12/2021 20:18:44'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test12 stamp: 'ijgt 5/12/2021 20:18:44'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/12/2021 20:21:36' prior: 50859886!
asRomanString
	
	^String streamContents: [:stream | 
		(self between: 1 and: 3) ifTrue: [ self timesRepeat: [stream nextPut: $I] ].
		self = 4 ifTrue:[stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [stream nextPut:$V. (self -5) timesRepeat: [stream nextPut: $I] ].
		self = 9 ifTrue:[stream nextPutAll: 'IX'].
		(self between: 10 and: 13) ifTrue: [stream nextPut:$X. (self -10) timesRepeat: [stream nextPut: $I] ].
	]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test12 stamp: 'ijgt 5/12/2021 20:21:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/12/2021 20:21:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/12/2021 20:21:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/12/2021 20:21:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/12/2021 20:21:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/12/2021 20:21:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/12/2021 20:21:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/12/2021 20:21:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/12/2021 20:21:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/12/2021 20:21:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/12/2021 20:21:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/12/2021 20:21:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test12 stamp: 'ijgt 5/12/2021 20:21:42'!
PASSED!
!DecimalToStringRomanNumberConversionTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/12/2021 20:22:51'!
test13

	self assert: 14 asRomanString equals: 'XIV'.! !

!testRun: #DecimalToStringRomanNumberConversionTest #test13 stamp: 'ijgt 5/12/2021 20:22:53'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/12/2021 20:23:23' prior: 50859946!
asRomanString
	
	^String streamContents: [:stream | 
		(self between: 1 and: 3) ifTrue: [ self timesRepeat: [stream nextPut: $I] ].
		self = 4 ifTrue:[stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [stream nextPut:$V. (self -5) timesRepeat: [stream nextPut: $I] ].
		self = 9 ifTrue:[stream nextPutAll: 'IX'].
		(self between: 10 and: 13) ifTrue: [stream nextPut:$X. (self -10) timesRepeat: [stream nextPut: $I] ].
		self = 14 ifTrue:[stream nextPutAll: 'XIV'].
	]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test13 stamp: 'ijgt 5/12/2021 20:24:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/12/2021 20:24:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/12/2021 20:24:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/12/2021 20:24:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/12/2021 20:24:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/12/2021 20:24:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/12/2021 20:24:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/12/2021 20:24:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/12/2021 20:24:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/12/2021 20:24:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/12/2021 20:24:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/12/2021 20:24:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test12 stamp: 'ijgt 5/12/2021 20:24:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test13 stamp: 'ijgt 5/12/2021 20:24:06'!
PASSED!
!DecimalToStringRomanNumberConversionTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/12/2021 20:24:15'!
test14

	self assert: 15 asRomanString equals: 'XV'.! !

!testRun: #DecimalToStringRomanNumberConversionTest #test14 stamp: 'ijgt 5/12/2021 20:24:18'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/12/2021 20:24:39' prior: 50860014!
asRomanString
	
	^String streamContents: [:stream | 
		(self between: 1 and: 3) ifTrue: [ self timesRepeat: [stream nextPut: $I] ].
		self = 4 ifTrue:[stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [stream nextPut:$V. (self -5) timesRepeat: [stream nextPut: $I] ].
		self = 9 ifTrue:[stream nextPutAll: 'IX'].
		(self between: 10 and: 13) ifTrue: [stream nextPut:$X. (self -10) timesRepeat: [stream nextPut: $I] ].
		self = 14 ifTrue:[stream nextPutAll: 'XIV'].
		self = 15 ifTrue:[stream nextPutAll: 'XV'].
	]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test14 stamp: 'ijgt 5/12/2021 20:24:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/12/2021 20:24:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/12/2021 20:24:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/12/2021 20:24:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/12/2021 20:24:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/12/2021 20:24:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/12/2021 20:24:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/12/2021 20:24:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/12/2021 20:24:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/12/2021 20:24:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/12/2021 20:24:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/12/2021 20:24:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test12 stamp: 'ijgt 5/12/2021 20:24:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test13 stamp: 'ijgt 5/12/2021 20:24:42'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test14 stamp: 'ijgt 5/12/2021 20:24:42'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/12/2021 20:26:21' prior: 50860087!
asRomanString
	
	^String streamContents: [:stream | 
		(self between: 1 and: 3) ifTrue: [ self timesRepeat: [stream nextPut: $I] ].
		self = 4 ifTrue:[stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [stream nextPut:$V. (self -5) timesRepeat: [stream nextPut: $I] ].
		self = 9 ifTrue:[stream nextPutAll: 'IX'].
		(self between: 10 and: 13) ifTrue: [stream nextPut:$X. (self -10) timesRepeat: [stream nextPut: $I] ].
		self = 14 ifTrue:[stream nextPutAll: 'XIV'].
		(self between: 15 and: 18) ifTrue: [stream nextPutAll:'XV'. (self -10) timesRepeat: [stream nextPut: $I] ].
	]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test14 stamp: 'ijgt 5/12/2021 20:26:37'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/12/2021 20:26:54' prior: 50860155!
asRomanString
	
	^String streamContents: [:stream | 
		(self between: 1 and: 3) ifTrue: [ self timesRepeat: [stream nextPut: $I] ].
		self = 4 ifTrue:[stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [stream nextPut:$V. (self -5) timesRepeat: [stream nextPut: $I] ].
		self = 9 ifTrue:[stream nextPutAll: 'IX'].
		(self between: 10 and: 13) ifTrue: [stream nextPut:$X. (self -10) timesRepeat: [stream nextPut: $I] ].
		self = 14 ifTrue:[stream nextPutAll: 'XIV'].
		(self between: 15 and: 18) ifTrue: [stream nextPutAll:'XV'. (self -15) timesRepeat: [stream nextPut: $I] ].
	]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test14 stamp: 'ijgt 5/12/2021 20:27:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/12/2021 20:27:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/12/2021 20:27:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/12/2021 20:27:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/12/2021 20:27:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/12/2021 20:27:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/12/2021 20:27:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/12/2021 20:27:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/12/2021 20:27:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/12/2021 20:27:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/12/2021 20:27:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/12/2021 20:27:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test12 stamp: 'ijgt 5/12/2021 20:27:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test13 stamp: 'ijgt 5/12/2021 20:27:03'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test14 stamp: 'ijgt 5/12/2021 20:27:03'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/12/2021 23:12:47'!
number: aNumber between: aFirstNumber and: aSecondNumber withRomanNumber: aRomanNumber xxx: aSecondRomanNumber withStream: stream
	
	(self between: aFirstNumber and: aSecondNumber ) ifTrue: [ 
		stream nextPutAll: aSecondRomanNumber.
		(self - aFirstNumber) timesRepeat: [stream nextPut: $I] ].
	self = aNumber ifTrue:[stream nextPutAll: aRomanNumber].! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/12/2021 23:16:49' prior: 50860180!
asRomanString
	
	^String streamContents: [:stream |
		
		(self between: 1 and: 3) ifTrue: [ self timesRepeat: [stream nextPut: $I] ].
		self = 4 ifTrue:[stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [stream nextPut:$V. (self -5) timesRepeat: [stream nextPut: $I] ].
		self = 9 ifTrue:[stream nextPutAll: 'IX'].
		(self between: 10 and: 13) ifTrue: [stream nextPut:$X. (self -10) timesRepeat: [stream nextPut: $I] ].
		self number: 14 between: 15 and: 18 withRomanNumber: 'XIV' xxx: 'XV' withStream: stream.
		]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test14 stamp: 'ijgt 5/12/2021 23:16:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/12/2021 23:16:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/12/2021 23:16:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/12/2021 23:16:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/12/2021 23:16:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/12/2021 23:16:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/12/2021 23:16:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/12/2021 23:16:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/12/2021 23:16:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/12/2021 23:16:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/12/2021 23:16:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/12/2021 23:16:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test12 stamp: 'ijgt 5/12/2021 23:16:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test13 stamp: 'ijgt 5/12/2021 23:16:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test14 stamp: 'ijgt 5/12/2021 23:16:53'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/12/2021 23:22:39'!
number: aNumber withRomanNumber: aRomanNumber xxx: aSecondRomanNumber withStream: stream
	
	(self between: (aNumber + 1) and: (aNumber + 4) ) ifTrue: [ 
		stream nextPutAll: aSecondRomanNumber.
		(self - (aNumber + 1) ) timesRepeat: [stream nextPut: $I] ].
	self = aNumber ifTrue:[stream nextPutAll: aRomanNumber].! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/12/2021 23:22:52' prior: 50860265!
asRomanString
	
	^String streamContents: [:stream |
		
		(self between: 1 and: 3) ifTrue: [ self timesRepeat: [stream nextPut: $I] ].
		self = 4 ifTrue:[stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [stream nextPut:$V. (self -5) timesRepeat: [stream nextPut: $I] ].
		self = 9 ifTrue:[stream nextPutAll: 'IX'].
		(self between: 10 and: 13) ifTrue: [stream nextPut:$X. (self -10) timesRepeat: [stream nextPut: $I] ].
		self number: 14 withRomanNumber: 'XIV' xxx: 'XV' withStream: stream.
		]! !

!methodRemoval: Integer #number:between:and:withRomanNumber:xxx:withStream: stamp: 'ijgt 5/12/2021 23:23:00'!
number: aNumber between: aFirstNumber and: aSecondNumber withRomanNumber: aRomanNumber xxx: aSecondRomanNumber withStream: stream
	
	(self between: aFirstNumber and: aSecondNumber ) ifTrue: [ 
		stream nextPutAll: aSecondRomanNumber.
		(self - aFirstNumber) timesRepeat: [stream nextPut: $I] ].
	self = aNumber ifTrue:[stream nextPutAll: aRomanNumber].!

!testRun: #DecimalToStringRomanNumberConversionTest #test14 stamp: 'ijgt 5/12/2021 23:23:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/12/2021 23:23:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/12/2021 23:23:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/12/2021 23:23:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/12/2021 23:23:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/12/2021 23:23:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/12/2021 23:23:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/12/2021 23:23:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/12/2021 23:23:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/12/2021 23:23:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/12/2021 23:23:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/12/2021 23:23:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test12 stamp: 'ijgt 5/12/2021 23:23:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test13 stamp: 'ijgt 5/12/2021 23:23:06'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test14 stamp: 'ijgt 5/12/2021 23:23:06'!
PASSED!
!DecimalToStringRomanNumberConversionTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/12/2021 23:23:57'!
test15

	self assert: 19 asRomanString equals: 'XIX'.! !

!testRun: #DecimalToStringRomanNumberConversionTest #test15 stamp: 'ijgt 5/12/2021 23:23:57'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/12/2021 23:24:56' prior: 50860347!
asRomanString
	
	^String streamContents: [:stream |
		
		(self between: 1 and: 3) ifTrue: [ self timesRepeat: [stream nextPut: $I] ].
		self = 4 ifTrue:[stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [stream nextPut:$V. (self -5) timesRepeat: [stream nextPut: $I] ].
		self = 9 ifTrue:[stream nextPutAll: 'IX'].
		(self between: 10 and: 13) ifTrue: [stream nextPut:$X. (self -10) timesRepeat: [stream nextPut: $I] ].
		self number: 14 withRomanNumber: 'XIV' xxx: 'XV' withStream: stream.
		self number: 19 withRomanNumber: 'XIX' xxx: 'XX' withStream: stream.
		]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test15 stamp: 'ijgt 5/12/2021 23:24:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/12/2021 23:24:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/12/2021 23:24:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/12/2021 23:24:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/12/2021 23:24:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/12/2021 23:24:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/12/2021 23:24:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/12/2021 23:24:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/12/2021 23:24:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/12/2021 23:24:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/12/2021 23:24:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/12/2021 23:24:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test12 stamp: 'ijgt 5/12/2021 23:24:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test13 stamp: 'ijgt 5/12/2021 23:24:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test14 stamp: 'ijgt 5/12/2021 23:24:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test15 stamp: 'ijgt 5/12/2021 23:24:58'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/12/2021 23:28:45' prior: 50860439!
asRomanString
	
	^String streamContents: [:stream |
		
		(self between: 1 and: 3) ifTrue: [ self timesRepeat: [stream nextPut: $I] ].
		self = 4 ifTrue:[stream nextPutAll: 'IV'].
		(self between: 5 and: 8) ifTrue: [stream nextPut:$V. (self -5) timesRepeat: [stream nextPut: $I] ].
		self = 9 ifTrue:[stream nextPutAll: 'IX'].
		(self between: 10 and: 13) ifTrue: [stream nextPut:$X. (self -10) timesRepeat: [stream nextPut: $I] ].
		self number: 14 withRomanNumber: 'XIV' xxx: 'XV' withStream: stream.
		self number: 19 withRomanNumber: 'XIX' xxx: 'XX' withStream: stream.
		]! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/12/2021 23:30:10' prior: 50860512!
asRomanString
	
	^String streamContents: [:stream |
		
		(self between: 1 and: 3) ifTrue: [ self timesRepeat: [stream nextPut: $I] ].
		self number: 4 withRomanNumber: 'IV' xxx: 'V' withStream: stream.
		self number: 9 withRomanNumber: 'IX' xxx: 'X' withStream: stream.
		self number: 14 withRomanNumber: 'XIV' xxx: 'XV' withStream: stream.
		self number: 19 withRomanNumber: 'XIX' xxx: 'XX' withStream: stream.
		]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test15 stamp: 'ijgt 5/12/2021 23:30:51'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/12/2021 23:30:51'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/12/2021 23:30:51'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/12/2021 23:30:51'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/12/2021 23:30:51'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/12/2021 23:30:51'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/12/2021 23:30:51'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/12/2021 23:30:51'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/12/2021 23:30:51'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/12/2021 23:30:51'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/12/2021 23:30:51'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/12/2021 23:30:51'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test12 stamp: 'ijgt 5/12/2021 23:30:51'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test13 stamp: 'ijgt 5/12/2021 23:30:51'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test14 stamp: 'ijgt 5/12/2021 23:30:51'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test15 stamp: 'ijgt 5/12/2021 23:30:51'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/12/2021 23:31:32'!
number: aNumber withRomanNumber: aRomanNumber andSecondRomanNumber: aSecondRomanNumber withStream: stream
	
	(self between: (aNumber + 1) and: (aNumber + 4) ) ifTrue: [ 
		stream nextPutAll: aSecondRomanNumber.
		(self - (aNumber + 1) ) timesRepeat: [stream nextPut: $I] ].
	self = aNumber ifTrue:[stream nextPutAll: aRomanNumber].! !
!Integer methodsFor: 'as yet unclassified' stamp: 'ijgt 5/12/2021 23:31:32' prior: 50860534!
asRomanString
	
	^String streamContents: [:stream |
		
		(self between: 1 and: 3) ifTrue: [ self timesRepeat: [stream nextPut: $I] ].
		self number: 4 withRomanNumber: 'IV' andSecondRomanNumber: 'V' withStream: stream.
		self number: 9 withRomanNumber: 'IX' andSecondRomanNumber: 'X' withStream: stream.
		self number: 14 withRomanNumber: 'XIV' andSecondRomanNumber: 'XV' withStream: stream.
		self number: 19 withRomanNumber: 'XIX' andSecondRomanNumber: 'XX' withStream: stream.
		]! !

!methodRemoval: Integer #number:withRomanNumber:xxx:withStream: stamp: 'ijgt 5/12/2021 23:31:32'!
number: aNumber withRomanNumber: aRomanNumber xxx: aSecondRomanNumber withStream: stream
	
	(self between: (aNumber + 1) and: (aNumber + 4) ) ifTrue: [ 
		stream nextPutAll: aSecondRomanNumber.
		(self - (aNumber + 1) ) timesRepeat: [stream nextPut: $I] ].
	self = aNumber ifTrue:[stream nextPutAll: aRomanNumber].!
!DecimalToStringRomanNumberConversionTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/12/2021 23:33:52'!
test16

	self assert: 14 asRomanString equals: 'XXIV'.! !

!testRun: #DecimalToStringRomanNumberConversionTest #test16 stamp: 'ijgt 5/12/2021 23:33:53'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/12/2021 23:34:32' prior: 50860616!
asRomanString
	
	^String streamContents: [:stream |
		
		(self between: 1 and: 3) ifTrue: [ self timesRepeat: [stream nextPut: $I] ].
		self number: 4 withRomanNumber: 'IV' andSecondRomanNumber: 'V' withStream: stream.
		self number: 9 withRomanNumber: 'IX' andSecondRomanNumber: 'X' withStream: stream.
		self number: 14 withRomanNumber: 'XIV' andSecondRomanNumber: 'XV' withStream: stream.
		self number: 19 withRomanNumber: 'XIX' andSecondRomanNumber: 'XX' withStream: stream.
		self number: 24 withRomanNumber: 'XXIV' andSecondRomanNumber: 'XXV' withStream: stream.
		]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test16 stamp: 'ijgt 5/12/2021 23:34:34'!
FAILURE!
!DecimalToStringRomanNumberConversionTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/12/2021 23:35:53' prior: 50860648!
test16

	self assert: 24 asRomanString equals: 'XXIV'.! !

!testRun: #DecimalToStringRomanNumberConversionTest #test16 stamp: 'ijgt 5/12/2021 23:35:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/12/2021 23:35:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/12/2021 23:35:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/12/2021 23:35:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/12/2021 23:35:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/12/2021 23:35:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/12/2021 23:35:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/12/2021 23:35:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/12/2021 23:35:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/12/2021 23:35:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/12/2021 23:35:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/12/2021 23:35:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test12 stamp: 'ijgt 5/12/2021 23:35:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test13 stamp: 'ijgt 5/12/2021 23:35:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test14 stamp: 'ijgt 5/12/2021 23:35:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test15 stamp: 'ijgt 5/12/2021 23:35:55'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test16 stamp: 'ijgt 5/12/2021 23:35:55'!
PASSED!
!DecimalToStringRomanNumberConversionTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/12/2021 23:37:59'!
test18

	self assert: 29 asRomanString equals: 'XIX'.! !
!DecimalToStringRomanNumberConversionTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/12/2021 23:38:09' prior: 50860743!
test18

	self assert: 29 asRomanString equals: 'XXIX'.! !

!testRun: #DecimalToStringRomanNumberConversionTest #test18 stamp: 'ijgt 5/12/2021 23:38:11'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/12/2021 23:38:49' prior: 50860657!
asRomanString
	
	^String streamContents: [:stream |
		
		(self between: 1 and: 3) ifTrue: [ self timesRepeat: [stream nextPut: $I] ].
		self number: 4 withRomanNumber: 'IV' andSecondRomanNumber: 'V' withStream: stream.
		self number: 9 withRomanNumber: 'IX' andSecondRomanNumber: 'X' withStream: stream.
		self number: 14 withRomanNumber: 'XIV' andSecondRomanNumber: 'XV' withStream: stream.
		self number: 19 withRomanNumber: 'XIX' andSecondRomanNumber: 'XX' withStream: stream.
		self number: 24 withRomanNumber: 'XXIV' andSecondRomanNumber: 'XXV' withStream: stream.
		self number: 29 withRomanNumber: 'XXIX' andSecondRomanNumber: 'XXX' withStream: stream.
		]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test18 stamp: 'ijgt 5/12/2021 23:38:51'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/12/2021 23:38:51'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/12/2021 23:38:51'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/12/2021 23:38:51'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/12/2021 23:38:51'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/12/2021 23:38:51'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/12/2021 23:38:51'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/12/2021 23:38:51'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/12/2021 23:38:51'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/12/2021 23:38:51'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/12/2021 23:38:51'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/12/2021 23:38:51'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test12 stamp: 'ijgt 5/12/2021 23:38:51'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test13 stamp: 'ijgt 5/12/2021 23:38:51'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test14 stamp: 'ijgt 5/12/2021 23:38:51'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test15 stamp: 'ijgt 5/12/2021 23:38:51'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test16 stamp: 'ijgt 5/12/2021 23:38:51'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test18 stamp: 'ijgt 5/12/2021 23:38:51'!
PASSED!
!DecimalToStringRomanNumberConversionTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/12/2021 23:44:44'!
test17

	self assert: 29 asRomanString equals: 'XXIX'.! !

!methodRemoval: DecimalToStringRomanNumberConversionTest #test18 stamp: 'ijgt 5/12/2021 23:44:44'!
test18

	self assert: 29 asRomanString equals: 'XXIX'.!
!DecimalToStringRomanNumberConversionTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/12/2021 23:44:58'!
test18

	self assert: 34 asRomanString equals: 'XXXIV'.! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/12/2021 23:45:29' prior: 50860758!
asRomanString
	
	^String streamContents: [:stream |
		
		(self between: 1 and: 3) ifTrue: [ self timesRepeat: [stream nextPut: $I] ].
		self number: 4 withRomanNumber: 'IV' andSecondRomanNumber: 'V' withStream: stream.
		self number: 9 withRomanNumber: 'IX' andSecondRomanNumber: 'X' withStream: stream.
		self number: 14 withRomanNumber: 'XIV' andSecondRomanNumber: 'XV' withStream: stream.
		self number: 19 withRomanNumber: 'XIX' andSecondRomanNumber: 'XX' withStream: stream.
		self number: 24 withRomanNumber: 'XXIV' andSecondRomanNumber: 'XXV' withStream: stream.
		self number: 29 withRomanNumber: 'XXIX' andSecondRomanNumber: 'XXX' withStream: stream.
		self number: 34 withRomanNumber: 'XXXIV' andSecondRomanNumber: 'XXXV' withStream: stream.
		]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test18 stamp: 'ijgt 5/12/2021 23:45:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/12/2021 23:45:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/12/2021 23:45:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/12/2021 23:45:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/12/2021 23:45:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/12/2021 23:45:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/12/2021 23:45:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/12/2021 23:45:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/12/2021 23:45:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/12/2021 23:45:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/12/2021 23:45:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/12/2021 23:45:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test12 stamp: 'ijgt 5/12/2021 23:45:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test13 stamp: 'ijgt 5/12/2021 23:45:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test14 stamp: 'ijgt 5/12/2021 23:45:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test15 stamp: 'ijgt 5/12/2021 23:45:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test16 stamp: 'ijgt 5/12/2021 23:45:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test17 stamp: 'ijgt 5/12/2021 23:45:36'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test18 stamp: 'ijgt 5/12/2021 23:45:36'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/13/2021 00:02:53'!
convertDigitUsing: stream

		(self between: 1 and: 3) ifTrue: [ self timesRepeat: [stream nextPut: $I] ].! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/13/2021 00:04:57' prior: 50860945!
convertDigitUsing: stream

	(self between: 1 and: 3) ifTrue: [ self timesRepeat: [stream nextPut: $I] ].
	self = 4 ifTrue:[stream nextPutAll: 'IV'].
	(self between: 5 and: 8 ) ifTrue: [ 
		stream nextPutAll: 'V'.
		(self - 5 ) timesRepeat: [stream nextPut: $I] ].
	self = 9 ifTrue:[stream nextPutAll: 'IX'].! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/13/2021 00:18:51' prior: 50860857!
asRomanString
	
	^String streamContents: [:stream |
		self convertDigitUsing: stream.
		self >= 10 ifTrue:[
			stream nextPut: $X.
			(self-10) convertDigitUsing: stream
			]
		]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test18 stamp: 'ijgt 5/13/2021 00:19:02'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConversionTest #test18 stamp: 'ijgt 5/13/2021 00:19:42'!
FAILURE!

!methodRemoval: DecimalToStringRomanNumberConversionTest #test18 stamp: 'ijgt 5/13/2021 00:21:54'!
test18

	self assert: 34 asRomanString equals: 'XXXIV'.!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/13/2021 00:22:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/13/2021 00:22:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/13/2021 00:22:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/13/2021 00:22:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/13/2021 00:22:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/13/2021 00:22:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/13/2021 00:22:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/13/2021 00:22:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/13/2021 00:22:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/13/2021 00:22:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/13/2021 00:22:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test12 stamp: 'ijgt 5/13/2021 00:22:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test13 stamp: 'ijgt 5/13/2021 00:22:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test14 stamp: 'ijgt 5/13/2021 00:22:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test15 stamp: 'ijgt 5/13/2021 00:22:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test16 stamp: 'ijgt 5/13/2021 00:22:01'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConversionTest #test17 stamp: 'ijgt 5/13/2021 00:22:01'!
FAILURE!

!methodRemoval: DecimalToStringRomanNumberConversionTest #test16 stamp: 'ijgt 5/13/2021 00:23:07'!
test16

	self assert: 24 asRomanString equals: 'XXIV'.!

!methodRemoval: DecimalToStringRomanNumberConversionTest #test17 stamp: 'ijgt 5/13/2021 00:23:11'!
test17

	self assert: 29 asRomanString equals: 'XXIX'.!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/13/2021 00:23:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/13/2021 00:23:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/13/2021 00:23:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/13/2021 00:23:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/13/2021 00:23:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/13/2021 00:23:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/13/2021 00:23:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/13/2021 00:23:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/13/2021 00:23:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/13/2021 00:23:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/13/2021 00:23:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test12 stamp: 'ijgt 5/13/2021 00:23:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test13 stamp: 'ijgt 5/13/2021 00:23:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test14 stamp: 'ijgt 5/13/2021 00:23:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test15 stamp: 'ijgt 5/13/2021 00:23:13'!
PASSED!
!DecimalToStringRomanNumberConversionTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/13/2021 00:23:35'!
test16

	self assert: 20 asRomanString equals: 'XX'.! !

!testRun: #DecimalToStringRomanNumberConversionTest #test16 stamp: 'ijgt 5/13/2021 00:23:39'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/13/2021 00:25:05' prior: 50860965!
asRomanString
	
	^String streamContents: [:stream |
		self convertDigitUsing: stream.
		self >= 10 ifTrue:[
			stream nextPut: $X.
			(self-10) convertDigitUsing: stream
			].
		self >= 20 ifTrue:[
			stream nextPut: $X.
			(self-20) convertDigitUsing: stream
			]
		]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test16 stamp: 'ijgt 5/13/2021 00:25:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/13/2021 00:25:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/13/2021 00:25:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/13/2021 00:25:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/13/2021 00:25:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/13/2021 00:25:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/13/2021 00:25:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/13/2021 00:25:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/13/2021 00:25:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/13/2021 00:25:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/13/2021 00:25:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/13/2021 00:25:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test12 stamp: 'ijgt 5/13/2021 00:25:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test13 stamp: 'ijgt 5/13/2021 00:25:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test14 stamp: 'ijgt 5/13/2021 00:25:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test15 stamp: 'ijgt 5/13/2021 00:25:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test16 stamp: 'ijgt 5/13/2021 00:25:08'!
PASSED!
!DecimalToStringRomanNumberConversionTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/13/2021 00:26:57'!
test17

	self assert: 30 asRomanString equals: 'XX'.! !

!testRun: #DecimalToStringRomanNumberConversionTest #test17 stamp: 'ijgt 5/13/2021 00:26:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/13/2021 00:26:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/13/2021 00:26:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/13/2021 00:26:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/13/2021 00:26:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/13/2021 00:26:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/13/2021 00:26:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/13/2021 00:26:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/13/2021 00:26:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/13/2021 00:26:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/13/2021 00:26:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/13/2021 00:26:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test12 stamp: 'ijgt 5/13/2021 00:26:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test13 stamp: 'ijgt 5/13/2021 00:26:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test14 stamp: 'ijgt 5/13/2021 00:26:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test15 stamp: 'ijgt 5/13/2021 00:26:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test16 stamp: 'ijgt 5/13/2021 00:26:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test17 stamp: 'ijgt 5/13/2021 00:26:59'!
PASSED!
!DecimalToStringRomanNumberConversionTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/13/2021 00:27:05' prior: 50861175!
test17

	self assert: 30 asRomanString equals: 'XXX'.! !

!testRun: #DecimalToStringRomanNumberConversionTest #test17 stamp: 'ijgt 5/13/2021 00:27:07'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/13/2021 00:28:30' prior: 50861108!
asRomanString
	
	^String streamContents: [:stream |
		self convertDigitUsing: stream.
		self >= 10 ifTrue:[
			stream nextPut: $X.
			(self-10) convertDigitUsing: stream
			].
		self >= 20 ifTrue:[
			stream nextPut: $X.
			(self-20) convertDigitUsing: stream
			].
		self >= 30 ifTrue:[
			stream nextPut: $X.
			(self-30) convertDigitUsing: stream
			]
		]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test17 stamp: 'ijgt 5/13/2021 00:28:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/13/2021 00:28:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/13/2021 00:28:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/13/2021 00:28:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/13/2021 00:28:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/13/2021 00:28:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/13/2021 00:28:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/13/2021 00:28:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/13/2021 00:28:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/13/2021 00:28:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/13/2021 00:28:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/13/2021 00:28:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test12 stamp: 'ijgt 5/13/2021 00:28:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test13 stamp: 'ijgt 5/13/2021 00:28:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test14 stamp: 'ijgt 5/13/2021 00:28:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test15 stamp: 'ijgt 5/13/2021 00:28:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test16 stamp: 'ijgt 5/13/2021 00:28:33'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test17 stamp: 'ijgt 5/13/2021 00:28:33'!
PASSED!
!DecimalToStringRomanNumberConversionTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/13/2021 00:28:51'!
test18

	self assert: 40 asRomanString equals: 'XL'.! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/13/2021 00:29:49' prior: 50861248!
asRomanString
	
	^String streamContents: [:stream |
		self convertDigitUsing: stream.
		self >= 10 ifTrue:[
			stream nextPut: $X.
			(self-10) convertDigitUsing: stream
			].
		self >= 20 ifTrue:[
			stream nextPut: $X.
			(self-20) convertDigitUsing: stream
			].
		self >= 30 ifTrue:[
			stream nextPut: $X.
			(self-30) convertDigitUsing: stream
			].
		self >= 40 ifTrue:[
			stream nextPut: $X.
			(self-40) convertDigitUsing: stream
			].
		]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test18 stamp: 'ijgt 5/13/2021 00:30:03'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/13/2021 00:38:44' prior: 50861326!
asRomanString
	
	^String streamContents: [:stream |
		self >= 40 ifTrue:[
			stream nextPutAll: 'XL'.
			(self-40) convertDigitUsing: stream
		] ifFalse:[
		self convertDigitUsing: stream.
		self >= 10 ifTrue:[
			stream nextPut: $X.
			(self-10) convertDigitUsing: stream
			].
		self >= 20 ifTrue:[
			stream nextPut: $X.
			(self-20) convertDigitUsing: stream
			].
		self >= 30 ifTrue:[
			stream nextPut: $X.
			(self-30) convertDigitUsing: stream
			].
		]
		]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test18 stamp: 'ijgt 5/13/2021 00:39:14'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/13/2021 00:39:14'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/13/2021 00:39:14'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/13/2021 00:39:14'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/13/2021 00:39:14'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/13/2021 00:39:14'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/13/2021 00:39:14'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/13/2021 00:39:14'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/13/2021 00:39:14'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/13/2021 00:39:14'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/13/2021 00:39:14'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/13/2021 00:39:14'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test12 stamp: 'ijgt 5/13/2021 00:39:14'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test13 stamp: 'ijgt 5/13/2021 00:39:14'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test14 stamp: 'ijgt 5/13/2021 00:39:14'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test15 stamp: 'ijgt 5/13/2021 00:39:14'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test16 stamp: 'ijgt 5/13/2021 00:39:14'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test17 stamp: 'ijgt 5/13/2021 00:39:14'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test18 stamp: 'ijgt 5/13/2021 00:39:14'!
PASSED!

Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: ''!

!classDefinition: #MarsRover category: '' stamp: 'ijgt 5/13/2021 21:05:10'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: ''!

MarsRover subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: ''!

!classRemoval: #MarsRover stamp: 'ijgt 5/13/2021 21:05:46'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: ''!

TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: ''!

!classDefinition: #MarsRoverTest category: '' stamp: 'ijgt 5/13/2021 21:08:54'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: ''!

TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'ijgt 5/13/2021 21:09:17'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'no messages' stamp: 'ijgt 5/13/2021 21:09:35'!
test01

	! !

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'ijgt 5/13/2021 21:39:04'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/13/2021 21:38:33' prior: 50861466!
test01

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	self assert: (marsRover position) equals: 0@0.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/13/2021 21:39:51' prior: 50861477!
test01

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #North.! !

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/13/2021 21:39:57'!
ERROR!
!MarsRover class methodsFor: 'creation' stamp: 'ijgt 5/13/2021 21:40:49'!
in: aPoint heading: aSymbol 
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'creation' stamp: 'ijgt 5/13/2021 21:41:22' prior: 50861495!
in: aPoint heading: aDirection
	! !
!MarsRover class methodsFor: 'creation' stamp: 'ijgt 5/13/2021 21:41:49' prior: 50861500!
in: aCoordinate heading: aDirection
	! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/14/2021 00:04:26' prior: 50861347!
asRomanString
	
	^String streamContents: [:stream |
		self >= 40 ifTrue:[
			stream nextPutAll: 'XL'.
			(self-40) convertDigitUsing: stream
		] ifFalse:[
		self convertDigitUsing: stream.
		
		(self//10) timesRepeat: [
			stream nextPut: $X.
			self - 10 convertDigitUsing: stream.	
			]
		]
	]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test18 stamp: 'ijgt 5/14/2021 00:04:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/14/2021 00:04:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/14/2021 00:04:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/14/2021 00:04:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/14/2021 00:04:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/14/2021 00:04:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/14/2021 00:04:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/14/2021 00:04:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/14/2021 00:04:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/14/2021 00:04:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/14/2021 00:04:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/14/2021 00:04:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test12 stamp: 'ijgt 5/14/2021 00:04:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test13 stamp: 'ijgt 5/14/2021 00:04:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test14 stamp: 'ijgt 5/14/2021 00:04:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test15 stamp: 'ijgt 5/14/2021 00:04:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test16 stamp: 'ijgt 5/14/2021 00:04:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test17 stamp: 'ijgt 5/14/2021 00:04:32'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test18 stamp: 'ijgt 5/14/2021 00:04:32'!
PASSED!
!DecimalToStringRomanNumberConversionTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/14/2021 00:09:43'!
test19

	self assert: 45 asRomanString equals: 'XLV'.! !

!testRun: #DecimalToStringRomanNumberConversionTest #test19 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test12 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test13 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test14 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test15 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test16 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test17 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test18 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test19 stamp: 'ijgt 5/14/2021 00:10:53'!
PASSED!
!DecimalToStringRomanNumberConversionTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/14/2021 00:11:09' prior: 50861583!
test19

	self assert: 35 asRomanString equals: 'XXXV'.! !

!testRun: #DecimalToStringRomanNumberConversionTest #test19 stamp: 'ijgt 5/14/2021 00:11:11'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/14/2021 00:14:58' prior: 50861509!
asRomanString
	
	^String streamContents: [:stream |
		self >= 40 ifTrue:[
			stream nextPutAll: 'XL'.
			(self-40) convertDigitUsing: stream
		] ifFalse:[
		
		(self//10) timesRepeat: [
			stream nextPut: $X.	
			].
		self \\ 10 convertDigitUsing: stream.
		]
	]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test19 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test12 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test13 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test14 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test15 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test16 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test17 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test18 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test19 stamp: 'ijgt 5/14/2021 00:15:01'!
PASSED!
!DecimalToStringRomanNumberConversionTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/14/2021 00:16:02'!
test20

	self assert: 50 asRomanString equals: 'L'.! !

!testRun: #DecimalToStringRomanNumberConversionTest #test20 stamp: 'ijgt 5/14/2021 00:16:03'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/14/2021 00:16:19' prior: 50861663!
asRomanString
	
	^String streamContents: [:stream |
		self >= 40 ifTrue:[
			stream nextPutAll: 'XL'.
			(self-40) convertDigitUsing: stream
		] ifFalse:[
		(self//10) timesRepeat: [
			stream nextPut: $X.	
			].
		self \\ 10 convertDigitUsing: stream.
		]
	]! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/14/2021 00:18:03' prior: 50861749!
asRomanString
	
	^String streamContents: [:stream |
		self >= 40 ifTrue:[
			(self >= 50) ifTrue: [
			stream nextPutAll: 'L'.
			(self-50) convertDigitUsing: stream
			] ifFalse: [
			stream nextPutAll: 'XL'.
			(self-40) convertDigitUsing: stream
			]
		] ifFalse:[
		(self//10) timesRepeat: [
			stream nextPut: $X.	
			].
		self \\ 10 convertDigitUsing: stream.
		]
	]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test20 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test12 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test13 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test14 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test15 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test16 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test17 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test18 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test19 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test20 stamp: 'ijgt 5/14/2021 00:18:05'!
PASSED!

!methodRemoval: Integer #number:withRomanNumber:andSecondRomanNumber:withStream: stamp: 'ijgt 5/14/2021 00:24:48'!
number: aNumber withRomanNumber: aRomanNumber andSecondRomanNumber: aSecondRomanNumber withStream: stream
	
	(self between: (aNumber + 1) and: (aNumber + 4) ) ifTrue: [ 
		stream nextPutAll: aSecondRomanNumber.
		(self - (aNumber + 1) ) timesRepeat: [stream nextPut: $I] ].
	self = aNumber ifTrue:[stream nextPutAll: aRomanNumber].!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/14/2021 00:26:29'!
convertTensUsing: stream

	|tens|
	tens := self // 10.
	(tens between: 1 and: 3) ifTrue: [ tens timesRepeat: [stream nextPut: $X] ].
	tens = 4 ifTrue:[stream nextPutAll: 'XL'].
	(tens between: 5 and: 8 ) ifTrue: [ 
		stream nextPutAll: 'L'.
		(tens - 5 ) timesRepeat: [stream nextPut: $X] ].
	tens = 9 ifTrue:[stream nextPutAll: 'XC'].! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/14/2021 00:27:00' prior: 50861761!
asRomanString
	
	^String streamContents: [:stream |
		self convertTensUsing: stream.
		self convertDigitUsing: stream.
	]! !

!testRun: #IntegerTest #test01readFromWithEmptyStringRaisesAnError stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #test02readFromWithInvalidStringRaisesAnError stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnLn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnLp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnSn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnSp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpLn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpLp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpSn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpSp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnLn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnLp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnSn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnSp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpLn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpLp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpSn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpSp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBenchFib stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBigReceiverInexactNthRoot stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBigReceiverInexactSqrt stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBitAt stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBitLogic stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBitReversal stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testBitReversalCorrectClass stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testCrossSumBase stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testDifferentBases stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testDivLnLn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testDivLnLp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testDivLnSn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testDivLnSp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testDivLpLn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testDivLpLp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testDivLpSn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testDivLpSp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testDivSnLn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testDivSnLp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testDivSnSn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testDivSnSp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testDivSpLn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testDivSpLp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testDivSpSn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testDivSpSp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testEven stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testExactRaisedTo stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testExactSqrt stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testFloorLog stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testFloorLogExactness stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testGCDAndLCM stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testGCDExample stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testGCDProperties stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testHighBit stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testHighBitOfMagnitude stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testIntegerDivision stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testIntegerPadding stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testIntegerReadFrom stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testIsInteger stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testIsPowerOfTwo stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testIsPowerOfTwoM6873 stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testIsPrime stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testIsProbablyPrime stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testLCMExample stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testLCMProperties stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testLargePrimesUpTo stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testLn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testLog stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testLowBit stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testModLnLn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testModLnLp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testModLnSn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testModLnSp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testModLpLn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testModLpLp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testModLpSn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testModLpSp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testModSnLn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testModSnLp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testModSnSn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testModSnSp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testModSpLn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testModSpLp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testModSpSn stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testModSpSp stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testMontgomeryMultiplication stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testNegativeIntegerPrinting stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testNew stamp: 'ijgt 5/14/2021 00:27:05'!
ERROR!

!testRun: #IntegerTest #testNew stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testNthRoot stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testNthRootErrorConditions stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testNthRootExactness stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testNthRootExactnessForHugeValue stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testNthRootImmuneToDoubleRounding stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testNthRootTruncated stamp: 'ijgt 5/14/2021 00:27:05'!
PASSED!

!testRun: #IntegerTest #testNumberOfDigits stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testPositiveIntegerPrinting stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testPrimesUpTo stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testPrintOnBaseShowRadix stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testPrintStringBase stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testQuoLnLn stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testQuoLnLp stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testQuoLnSn stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testQuoLnSp stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testQuoLpLn stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testQuoLpLp stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testQuoLpSn stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testQuoLpSp stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testQuoRem stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testQuoSnLn stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testQuoSnLp stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testQuoSnSn stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testQuoSnSp stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testQuoSpLn stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testQuoSpLp stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testQuoSpSn stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testQuoSpSp stamp: 'ijgt 5/14/2021 00:27:06'!
PASSED!

!testRun: #IntegerTest #testRaisedToModulo stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testRange stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testReadFrom stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testRemLnLn stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testRemLnLp stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testRemLnSn stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testRemLnSp stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testRemLpLn stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testRemLpLp stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testRemLpSn stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testRemLpSp stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testRemSnLn stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testRemSnLp stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testRemSnSn stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testRemSnSp stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testRemSpLn stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testRemSpLp stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testRemSpSn stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testRemSpSp stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testRomanPrinting stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnLn stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnLp stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnSn stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnSp stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpLn stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpLp stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpSn stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpSp stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnLn stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnLp stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnSn stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnSp stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpLn stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpLp stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpSn stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpSp stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testSqrtFloor stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testStringAsNumber stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testTwoComplementBitLogicWithCarry stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #IntegerTest #testTwoComplementRightShift stamp: 'ijgt 5/14/2021 00:27:07'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test20 stamp: 'ijgt 5/14/2021 00:27:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/14/2021 00:27:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/14/2021 00:27:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/14/2021 00:27:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/14/2021 00:27:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/14/2021 00:27:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/14/2021 00:27:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/14/2021 00:27:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/14/2021 00:27:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/14/2021 00:27:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/14/2021 00:27:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/14/2021 00:27:13'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConversionTest #test12 stamp: 'ijgt 5/14/2021 00:27:13'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConversionTest #test13 stamp: 'ijgt 5/14/2021 00:27:13'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConversionTest #test14 stamp: 'ijgt 5/14/2021 00:27:13'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConversionTest #test15 stamp: 'ijgt 5/14/2021 00:27:13'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConversionTest #test16 stamp: 'ijgt 5/14/2021 00:27:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test17 stamp: 'ijgt 5/14/2021 00:27:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test18 stamp: 'ijgt 5/14/2021 00:27:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test19 stamp: 'ijgt 5/14/2021 00:27:13'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConversionTest #test20 stamp: 'ijgt 5/14/2021 00:27:13'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/14/2021 00:27:36'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/14/2021 00:28:52' prior: 50861871!
asRomanString
	
	^String streamContents: [:stream |
		self convertTensUsing: stream.
		self \\ 10 convertDigitUsing: stream.
	]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/14/2021 00:28:54'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test20 stamp: 'ijgt 5/14/2021 00:28:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/14/2021 00:28:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/14/2021 00:28:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/14/2021 00:28:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/14/2021 00:28:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/14/2021 00:28:58'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/14/2021 00:28:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/14/2021 00:28:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/14/2021 00:28:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/14/2021 00:28:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/14/2021 00:28:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/14/2021 00:28:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test12 stamp: 'ijgt 5/14/2021 00:28:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test13 stamp: 'ijgt 5/14/2021 00:28:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test14 stamp: 'ijgt 5/14/2021 00:28:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test15 stamp: 'ijgt 5/14/2021 00:28:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test16 stamp: 'ijgt 5/14/2021 00:28:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test17 stamp: 'ijgt 5/14/2021 00:28:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test18 stamp: 'ijgt 5/14/2021 00:28:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test19 stamp: 'ijgt 5/14/2021 00:28:59'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test20 stamp: 'ijgt 5/14/2021 00:28:59'!
PASSED!
!DecimalToStringRomanNumberConversionTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/14/2021 00:31:11'!
test21

	self assert: 102 asRomanString equals: 'CII'.! !

!testRun: #DecimalToStringRomanNumberConversionTest #test21 stamp: 'ijgt 5/14/2021 00:32:37'!
FAILURE!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/14/2021 00:33:04'!
convertHundredsUsing: stream

	|tens|
	tens := self // 10.
	(tens between: 1 and: 3) ifTrue: [ tens timesRepeat: [stream nextPut: $X] ].
	tens = 4 ifTrue:[stream nextPutAll: 'XL'].
	(tens between: 5 and: 8 ) ifTrue: [ 
		stream nextPutAll: 'L'.
		(tens - 5 ) timesRepeat: [stream nextPut: $X] ].
	tens = 9 ifTrue:[stream nextPutAll: 'XC'].! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/14/2021 00:33:21' prior: 50862444!
convertHundredsUsing: stream

	|hundreds|
	hundreds := self // 10.
	(hundreds between: 1 and: 3) ifTrue: [ hundreds timesRepeat: [stream nextPut: $X] ].
	hundreds = 4 ifTrue:[stream nextPutAll: 'XL'].
	(hundreds between: 5 and: 8 ) ifTrue: [ 
		stream nextPutAll: 'L'.
		(hundreds - 5 ) timesRepeat: [stream nextPut: $X] ].
	hundreds = 9 ifTrue:[stream nextPutAll: 'XC'].! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/14/2021 00:33:57' prior: 50862458!
convertHundredsUsing: stream

	|hundreds|
	hundreds := self // 100.
	(hundreds between: 1 and: 3) ifTrue: [ hundreds timesRepeat: [stream nextPut: $C] ].
	hundreds = 4 ifTrue:[stream nextPutAll: 'CD'].
	(hundreds between: 5 and: 8 ) ifTrue: [ 
		stream nextPutAll: 'D'.
		(hundreds - 5 ) timesRepeat: [stream nextPut: $C] ].
	hundreds = 9 ifTrue:[stream nextPutAll: 'CM'].! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/14/2021 00:34:51' prior: 50862357!
asRomanString
	
	^String streamContents: [:stream |
		self convertHundredsUsing: stream.
		self convertTensUsing: stream.
		self \\ 10 convertDigitUsing: stream.
	]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test21 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test12 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test13 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test14 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test15 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test16 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test17 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test18 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test19 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test20 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test21 stamp: 'ijgt 5/14/2021 00:35:02'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/14/2021 00:39:31'!
xxx: stream unit: aUnit five: aFive ten: aTen

	(self between: 1 and: 3) ifTrue: [ self timesRepeat: [stream nextPut: aUnit] ].
	self = 4 ifTrue:[stream nextPutAll: aFive].
	(self between: 5 and: 8 ) ifTrue: [ 
		stream nextPutAll: 'L'.
		(self - 5 ) timesRepeat: [stream nextPut: aUnit] ].
	self = 9 ifTrue:[stream nextPutAll: aTen].! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/14/2021 00:39:56'!
convertUsing: stream unit: aUnit five: aFive ten: aTen

	(self between: 1 and: 3) ifTrue: [ self timesRepeat: [stream nextPut: aUnit] ].
	self = 4 ifTrue:[stream nextPutAll: aFive].
	(self between: 5 and: 8 ) ifTrue: [ 
		stream nextPutAll: 'L'.
		(self - 5 ) timesRepeat: [stream nextPut: aUnit] ].
	self = 9 ifTrue:[stream nextPutAll: aTen].! !

!methodRemoval: Integer #xxx:unit:five:ten: stamp: 'ijgt 5/14/2021 00:39:56'!
xxx: stream unit: aUnit five: aFive ten: aTen

	(self between: 1 and: 3) ifTrue: [ self timesRepeat: [stream nextPut: aUnit] ].
	self = 4 ifTrue:[stream nextPutAll: aFive].
	(self between: 5 and: 8 ) ifTrue: [ 
		stream nextPutAll: 'L'.
		(self - 5 ) timesRepeat: [stream nextPut: aUnit] ].
	self = 9 ifTrue:[stream nextPutAll: aTen].!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/14/2021 00:41:18' prior: 50862488!
asRomanString
	
	^String streamContents: [:stream |
		self convertHundredsUsing: stream.
		self convertTensUsing: stream.
		(self \\ 10) convertUsing: stream unit:$I five:$V ten:$X.
	]! !
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/14/2021 00:45:13' prior: 50862608!
asRomanString
	
	^String streamContents: [:stream |
		(self // 100) convertUsing: stream unit:$C five:$D ten:$M.
		(self \\ 100) //10 convertUsing: stream unit:$X five:$L ten:$C.
		(self \\ 10) convertUsing: stream unit:$I five:$V ten:$X.
	]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test21 stamp: 'ijgt 5/14/2021 00:45:16'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/14/2021 00:45:16'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/14/2021 00:45:16'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/14/2021 00:45:16'!
ERROR!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/14/2021 00:45:16'!
ERROR!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/14/2021 00:45:16'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/14/2021 00:45:16'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/14/2021 00:45:16'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/14/2021 00:45:16'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/14/2021 00:45:16'!
ERROR!

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/14/2021 00:45:16'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/14/2021 00:45:16'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test12 stamp: 'ijgt 5/14/2021 00:45:16'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test13 stamp: 'ijgt 5/14/2021 00:45:16'!
ERROR!

!testRun: #DecimalToStringRomanNumberConversionTest #test14 stamp: 'ijgt 5/14/2021 00:45:16'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConversionTest #test15 stamp: 'ijgt 5/14/2021 00:45:16'!
ERROR!

!testRun: #DecimalToStringRomanNumberConversionTest #test16 stamp: 'ijgt 5/14/2021 00:45:16'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test17 stamp: 'ijgt 5/14/2021 00:45:16'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test18 stamp: 'ijgt 5/14/2021 00:45:16'!
ERROR!

!testRun: #DecimalToStringRomanNumberConversionTest #test19 stamp: 'ijgt 5/14/2021 00:45:16'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConversionTest #test20 stamp: 'ijgt 5/14/2021 00:45:16'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test21 stamp: 'ijgt 5/14/2021 00:45:16'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/14/2021 00:46:05' prior: 50862617!
asRomanString
	
	^String streamContents: [:stream |
		(self // 100) convertUsing: stream unit:$C five:$D ten:$X.
		(self \\ 100) //10 convertUsing: stream unit:$X five:$L ten:$C.
		(self \\ 10) convertUsing: stream unit:$I five:$V ten:$X.
	]! !

!testRun: #DecimalToStringRomanNumberConversionTest #test21 stamp: 'ijgt 5/14/2021 00:46:07'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test01 stamp: 'ijgt 5/14/2021 00:46:07'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test02 stamp: 'ijgt 5/14/2021 00:46:07'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test03 stamp: 'ijgt 5/14/2021 00:46:07'!
ERROR!

!testRun: #DecimalToStringRomanNumberConversionTest #test04 stamp: 'ijgt 5/14/2021 00:46:07'!
ERROR!

!testRun: #DecimalToStringRomanNumberConversionTest #test05 stamp: 'ijgt 5/14/2021 00:46:07'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConversionTest #test06 stamp: 'ijgt 5/14/2021 00:46:07'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConversionTest #test07 stamp: 'ijgt 5/14/2021 00:46:07'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConversionTest #test08 stamp: 'ijgt 5/14/2021 00:46:07'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConversionTest #test09 stamp: 'ijgt 5/14/2021 00:46:07'!
ERROR!

!testRun: #DecimalToStringRomanNumberConversionTest #test10 stamp: 'ijgt 5/14/2021 00:46:07'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test11 stamp: 'ijgt 5/14/2021 00:46:07'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test12 stamp: 'ijgt 5/14/2021 00:46:07'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test13 stamp: 'ijgt 5/14/2021 00:46:07'!
ERROR!

!testRun: #DecimalToStringRomanNumberConversionTest #test14 stamp: 'ijgt 5/14/2021 00:46:07'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConversionTest #test15 stamp: 'ijgt 5/14/2021 00:46:07'!
ERROR!

!testRun: #DecimalToStringRomanNumberConversionTest #test16 stamp: 'ijgt 5/14/2021 00:46:07'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test17 stamp: 'ijgt 5/14/2021 00:46:07'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test18 stamp: 'ijgt 5/14/2021 00:46:07'!
ERROR!

!testRun: #DecimalToStringRomanNumberConversionTest #test19 stamp: 'ijgt 5/14/2021 00:46:08'!
FAILURE!

!testRun: #DecimalToStringRomanNumberConversionTest #test20 stamp: 'ijgt 5/14/2021 00:46:08'!
PASSED!

!testRun: #DecimalToStringRomanNumberConversionTest #test21 stamp: 'ijgt 5/14/2021 00:46:08'!
PASSED!
!Integer methodsFor: '*Roman-Numbers-Integration' stamp: 'ijgt 5/14/2021 00:47:52' prior: 50862699!
asRomanString
	
	^String streamContents: [:stream |
		(self // 100) convertUsing: stream unit:$C five:$D ten:$M.
		(self \\ 100) //10 convertUsing: stream unit:$X five:$L ten:$C.
		(self \\ 10) convertUsing: stream unit:$I five:$V ten:$X.
	]! !
!MarsRover class methodsFor: 'creation' stamp: 'ijgt 5/14/2021 15:35:17' prior: 50861504!
in: aCoordinate heading: aDirection
	
	^ self new initializeIn: aCoordinate heading: aDirection.! !
!MarsRover methodsFor: 'no messages' stamp: 'ijgt 5/14/2021 15:36:22'!
initializeIn: aCoordinate heading: aDirection

	position := aCoordinate.
	direction := aDirection.! !

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 15:36:27'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 15:36:27'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 15:36:53'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 15:36:53'!
ERROR!
!MarsRover methodsFor: 'testing' stamp: 'ijgt 5/14/2021 15:39:20'!
position
	self shouldBeImplemented.
	^position! !
!MarsRover methodsFor: 'testing' stamp: 'ijgt 5/14/2021 15:39:27' prior: 50862813!
position

	^position! !

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 15:39:50'!
ERROR!
!MarsRover methodsFor: 'testing' stamp: 'ijgt 5/14/2021 15:40:10'!
direction
	self shouldBeImplemented.
	^direction! !
!MarsRover methodsFor: 'testing' stamp: 'ijgt 5/14/2021 15:40:14' prior: 50862824!
direction
	
	^direction! !

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 15:40:16'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 15:40:20'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 15:41:12'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/14/2021 15:43:59'!
test02

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process "".
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #North.! !

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 15:44:02'!
ERROR!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/14/2021 15:44:22' prior: 50862840!
test02

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: ''.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #North.! !

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 15:44:25'!
ERROR!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 15:44:56'!
process: aString 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 15:45:06' prior: 50862863!
process: aString 
	! !

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 15:45:10'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 15:45:10'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 15:45:10'!
PASSED!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 15:45:46' prior: 50862868!
process: aString
	! !

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 15:45:51'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 15:45:51'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 15:45:51'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/14/2021 15:46:28'!
test03

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'f'.
	self assert: (marsRover position) equals: 0@1.
	self assert: (marsRover direction) equals: #North.! !

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 15:46:44'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 15:46:44'!
FAILURE!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 15:50:11' prior: 50862879!
process: aString
	
	aString = 'f' ifTrue:[position := position + 0@1]! !

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 15:50:28'!
ERROR!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 15:51:29' prior: 50862904!
process: aString
	
	aString = 'f' ifTrue:[position := position + (0@1)]! !

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 15:51:31'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 15:51:38'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 15:51:43'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 15:51:43'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 15:51:43'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 15:53:36'!
test04

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'b'.
	self assert: (marsRover position) equals: 0@-1.
	self assert: (marsRover direction) equals: #North.! !

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 15:53:38'!
FAILURE!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 15:55:01' prior: 50862912!
process: aString
	
	aString = 'f' ifTrue:[position := position + (0@1)].
	aString = 'b' ifTrue:[position := position + (0@-1)].! !

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 15:55:03'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 15:55:03'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 15:55:03'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 15:55:03'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 15:55:03'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 15:55:11'!
test05

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'l'.
	self assert: (marsRover position) equals: 0@-1.
	self assert: (marsRover direction) equals: #North.! !

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 15:55:13'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 15:55:42' prior: 50862960!
test05

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'l'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #West.! !

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 15:55:44'!
FAILURE!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 15:56:56' prior: 50862941!
process: aString
	
	aString = 'f' ifTrue:[position := position + (0@1)].
	aString = 'b' ifTrue:[position := position + (0@-1)].
	aString = 'l' ifTrue:[direction := #West].! !

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 15:57:32'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 15:57:32'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 15:57:32'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 15:57:32'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 15:57:32'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 15:57:32'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 15:58:23'!
test06

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'r'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #East.! !

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 15:58:25'!
FAILURE!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 15:58:47' prior: 50862984!
process: aString
	
	aString = 'f' ifTrue:[position := position + (0@1)].
	aString = 'b' ifTrue:[position := position + (0@-1)].
	aString = 'l' ifTrue:[direction := #West].
	aString = 'r' ifTrue:[direction := #East].! !

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 15:58:48'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 15:58:48'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 15:58:48'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 15:58:48'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 15:58:48'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 15:58:48'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 15:58:48'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 15:59:05'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 15:59:05'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 15:59:05'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 15:59:05'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 15:59:05'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 15:59:05'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 16:15:28'!
test07

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	self should: [marsRover process: 'h'] raise: Error withExceptionDo: [:anError | 
		self assert: (anError messageText) equals: marsRover invalidCommandErrorDescription.
		self assert: (marsRover position) equals: 0@0.
		self assert: (marsRover direction) equals: #North.
		].! !

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 16:15:42'!
FAILURE!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 16:15:42'!
FAILURE!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 16:16:15'!
FAILURE!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 16:16:35'!
FAILURE!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 16:18:51' prior: 50863018!
process: aString

	aString = '' ifTrue:[].
	aString = 'f' ifTrue:[position := position + (0@1)].
	aString = 'b' ifTrue:[position := position + (0@-1)].
	aString = 'l' ifTrue:[direction := #West].
	aString = 'r' ifTrue:[direction := #East].
	! !

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 16:18:56'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 16:18:56'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 16:18:56'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 16:18:56'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 16:18:56'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 16:18:56'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 16:18:56'!
FAILURE!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 16:18:56'!
FAILURE!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 16:24:24' prior: 50863082!
process: aString

	aString = '' ifTrue:[^0].
	aString = 'f' ifTrue:[^position := position + (0@1)].
	aString = 'b' ifTrue:[^position := position + (0@-1)].
	aString = 'l' ifTrue:[^direction := #West].
	aString = 'r' ifTrue:[^direction := #East].
	^ self invalidCommandErrorDescription. 
	
	! !
!MarsRover methodsFor: 'error descriptions' stamp: 'ijgt 5/14/2021 16:25:47'!
invalidCommandErrorDescription

	^ ''! !
!MarsRover methodsFor: 'error descriptions' stamp: 'ijgt 5/14/2021 16:30:02' prior: 50863124!
invalidCommandErrorDescription

	^ 'Invalid command received'! !
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 16:30:43' prior: 50863112!
process: aString

	aString = '' ifTrue:[^0].
	aString = 'f' ifTrue:[^position := position + (0@1)].
	aString = 'b' ifTrue:[^position := position + (0@-1)].
	aString = 'l' ifTrue:[^direction := #West].
	aString = 'r' ifTrue:[^direction := #East].
	self error: self invalidCommandErrorDescription. 
	
	! !

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 16:30:51'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 16:30:55'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 16:31:04'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 16:31:04'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 16:31:04'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 16:31:04'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 16:31:04'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 16:31:04'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 16:31:04'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 16:31:54'!
test08

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'ff'.
	self assert: (marsRover position) equals: 0@2.
	self assert: (marsRover direction) equals: #North.! !

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 16:31:55'!
ERROR!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 16:33:57' prior: 50863134!
process: aString

	aString = '' ifTrue:[^0].
	aString = 'f' ifTrue:[^position := position + (0@1)].
	aString = 'b' ifTrue:[^position := position + (0@-1)].
	aString = 'l' ifTrue:[^direction := #West].
	aString = 'r' ifTrue:[^direction := #East].
	aString = 'ff' ifTrue:[^position := position + (0@2)].
	self error: self invalidCommandErrorDescription.! !

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 16:34:00'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 16:34:00'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 16:34:00'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 16:34:00'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 16:34:00'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 16:34:00'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 16:34:00'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 16:34:00'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 16:34:00'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 16:34:16' prior: 50863168!
test08

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'fb'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #North.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 16:31:54' prior: 50863216!
test08

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'ff'.
	self assert: (marsRover position) equals: 0@2.
	self assert: (marsRover direction) equals: #North.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 16:34:54'!
test09

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'fb'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #North.! !

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 16:34:56'!
ERROR!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 16:35:24' prior: 50863180!
process: aString

	aString = '' ifTrue:[^0].
	aString = 'f' ifTrue:[^position := position + (0@1)].
	aString = 'b' ifTrue:[^position := position + (0@-1)].
	aString = 'l' ifTrue:[^direction := #West].
	aString = 'r' ifTrue:[^direction := #East].
	aString = 'ff' ifTrue:[^position := position + (0@2)].
	aString = 'fb' ifTrue:[^position := position + (0@0)].
	self error: self invalidCommandErrorDescription.! !

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 16:35:33'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 16:35:33'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 16:35:33'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 16:35:33'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 16:35:33'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 16:35:33'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 16:35:33'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 16:35:33'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 16:35:33'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 16:35:33'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 16:35:50'!
test10

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'fr'.
	self assert: (marsRover position) equals: 0@1.
	self assert: (marsRover direction) equals: #West.! !

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 16:35:51'!
ERROR!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 16:36:53' prior: 50863246!
process: aString

	aString = '' ifTrue:[^0].
	aString = 'f' ifTrue:[^position := position + (0@1)].
	aString = 'b' ifTrue:[^position := position + (0@-1)].
	aString = 'l' ifTrue:[^direction := #West].
	aString = 'r' ifTrue:[^direction := #East].
	aString = 'ff' ifTrue:[^position := position + (0@2)].
	aString = 'fb' ifTrue:[^position := position + (0@0)].
	aString = 'fr' ifTrue:[position := position + (0@1). ^direction := #West].
	self error: self invalidCommandErrorDescription.! !

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 16:36:54'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 16:36:54'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 16:36:54'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 16:36:54'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 16:36:54'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 16:36:54'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 16:36:54'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 16:36:54'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 16:36:54'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 16:36:54'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 16:36:54'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 16:37:17'!
test11

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'fl'.
	self assert: (marsRover position) equals: 0@1.
	self assert: (marsRover direction) equals: #East.! !

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 16:37:19'!
ERROR!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 16:37:43' prior: 50863297!
process: aString

	aString = '' ifTrue:[^0].
	aString = 'f' ifTrue:[^position := position + (0@1)].
	aString = 'b' ifTrue:[^position := position + (0@-1)].
	aString = 'l' ifTrue:[^direction := #West].
	aString = 'r' ifTrue:[^direction := #East].
	aString = 'ff' ifTrue:[^position := position + (0@2)].
	aString = 'fb' ifTrue:[^position := position + (0@0)].
	aString = 'fr' ifTrue:[position := position + (0@1). ^direction := #West].
	aString = 'fl' ifTrue:[position := position + (0@1). ^direction := #East].
	self error: self invalidCommandErrorDescription.! !

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 16:37:44'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 16:37:44'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 16:37:44'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 16:37:44'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 16:37:44'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 16:37:44'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 16:37:44'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 16:37:44'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 16:37:44'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 16:37:44'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 16:37:44'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 16:37:44'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 16:38:26'!
test12

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'bl'.
	self assert: (marsRover position) equals: 0@-1.
	self assert: (marsRover direction) equals: #West.! !

!testRun: #MarsRoverTest #test12 stamp: 'ijgt 5/14/2021 16:38:30'!
ERROR!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 16:39:31' prior: 50863353!
process: aString

	aString = '' ifTrue:[^0].
	aString = 'f' ifTrue:[^position := position + (0@1)].
	aString = 'b' ifTrue:[^position := position + (0@-1)].
	aString = 'l' ifTrue:[^direction := #West].
	aString = 'r' ifTrue:[^direction := #East].
	aString = 'ff' ifTrue:[^position := position + (0@2)].
	aString = 'fb' ifTrue:[^position := position + (0@0)].
	aString = 'fr' ifTrue:[position := position + (0@1). ^direction := #East].
	aString = 'fl' ifTrue:[position := position + (0@1). ^direction := #West].
	aString = 'bl' ifTrue:[position := position + (0@-1). ^direction := #West].
	self error: self invalidCommandErrorDescription.! !

!testRun: #MarsRoverTest #test12 stamp: 'ijgt 5/14/2021 16:39:32'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 16:39:32'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 16:39:32'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 16:39:32'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 16:39:32'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 16:39:32'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 16:39:32'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 16:39:32'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 16:39:32'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 16:39:32'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 16:39:32'!
FAILURE!

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 16:39:32'!
FAILURE!

!testRun: #MarsRoverTest #test12 stamp: 'ijgt 5/14/2021 16:39:32'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 16:39:35'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 16:40:01' prior: 50863285!
test10

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'fr'.
	self assert: (marsRover position) equals: 0@1.
	self assert: (marsRover direction) equals: #East.! !

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 16:40:03'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 16:40:05'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 16:40:14' prior: 50863341!
test11

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'fl'.
	self assert: (marsRover position) equals: 0@1.
	self assert: (marsRover direction) equals: #West.! !

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 16:40:16'!
PASSED!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 16:45:12' prior: 50863414!
process: aString

	aString do:[:aCommand | self runCommand: aCommand].
	aString = '' ifTrue:[^0].
	aString = 'f' ifTrue:[^position := position + (0@1)].
	aString = 'b' ifTrue:[^position := position + (0@-1)].
	aString = 'l' ifTrue:[^direction := #West].
	aString = 'r' ifTrue:[^direction := #East].
	aString = 'ff' ifTrue:[^position := position + (0@2)].
	aString = 'fb' ifTrue:[^position := position + (0@0)].
	aString = 'fr' ifTrue:[position := position + (0@1). ^direction := #East].
	aString = 'fl' ifTrue:[position := position + (0@1). ^direction := #West].
	aString = 'bl' ifTrue:[position := position + (0@-1). ^direction := #West].
	self error: self invalidCommandErrorDescription.! !
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 16:46:04' prior: 50863496!
process: aString

	aString do:[:aCommand | self runCommand: aCommand].! !
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 16:48:20'!
runCommand: aCommand

	aCommand = $f ifTrue:[^position := position + (0@1)].
	aCommand = $b ifTrue:[^position := position + (0@-1)].
	aCommand = $l ifTrue:[^direction := #West].
	aCommand = $r ifTrue:[^direction := #East].
	self error: self invalidCommandErrorDescription.! !

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 16:49:51'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 16:49:51'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 16:49:51'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 16:49:51'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 16:49:51'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 16:49:51'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 16:49:51'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 16:49:51'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 16:49:51'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 16:49:51'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 16:49:51'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'ijgt 5/14/2021 16:49:51'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 16:51:09'!
test13

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'll'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #South.! !

!testRun: #MarsRoverTest #test13 stamp: 'ijgt 5/14/2021 16:51:12'!
FAILURE!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 16:56:10' prior: 50863526!
runCommand: aCommand

	aCommand = $f ifTrue:[^position := position + (0@1)].
	aCommand = $b ifTrue:[^position := position + (0@-1)].
	aCommand = $l ifTrue:[direction = #North ifTrue:[^ direction := #West].
		direction = #West ifTrue:[^direction := #South].
		].
	aCommand = $r ifTrue:[^direction := #East].
	self error: self invalidCommandErrorDescription.! !

!testRun: #MarsRoverTest #test13 stamp: 'ijgt 5/14/2021 16:56:22'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 16:56:22'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 16:56:22'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 16:56:22'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 16:56:22'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 16:56:22'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 16:56:22'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 16:56:22'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 16:56:22'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 16:56:22'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 16:56:22'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 16:56:22'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'ijgt 5/14/2021 16:56:22'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'ijgt 5/14/2021 16:56:22'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 16:56:44'!
test14

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'lll'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #South.! !

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 16:56:58'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 16:56:58'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 16:56:58'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 16:56:58'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 16:56:58'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 16:56:58'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 16:56:58'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 16:56:58'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 16:56:58'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 16:56:58'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 16:56:58'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'ijgt 5/14/2021 16:56:58'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'ijgt 5/14/2021 16:56:58'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 16:56:58'!
ERROR!

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 16:56:58'!
ERROR!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 16:57:11' prior: 50863625!
test14

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'lll'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #East.! !

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 16:57:16'!
ERROR!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 16:57:47' prior: 50863670!
test14

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'lll'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #East.! !

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 16:57:48'!
ERROR!

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 16:58:06'!
ERROR!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 16:58:48' prior: 50863578!
runCommand: aCommand

	aCommand = $f ifTrue:[^position := position + (0@1)].
	aCommand = $b ifTrue:[^position := position + (0@-1)].
	aCommand = $l ifTrue:[direction = #North ifTrue:[^ direction := #West].
		direction = #West ifTrue:[^direction := #South].
		direction = #South ifTrue:[^direction := #East].
		direction = #East ifTrue:[^direction := #North].
		].
	aCommand = $r ifTrue:[^direction := #East].
	self error: self invalidCommandErrorDescription.! !

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 16:58:50'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 16:58:50'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 16:58:50'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 16:58:50'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 16:58:50'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 16:58:50'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 16:58:50'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 16:58:50'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 16:58:50'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 16:58:50'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 16:58:50'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 16:58:50'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'ijgt 5/14/2021 16:58:50'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'ijgt 5/14/2021 16:58:50'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 16:58:50'!
PASSED!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 16:59:14' prior: 50863696!
runCommand: aCommand

	aCommand = $f ifTrue:[^position := position + (0@1)].
	aCommand = $b ifTrue:[^position := position + (0@-1)].
	aCommand = $l ifTrue:[
		direction = #North ifTrue:[^ direction := #West].
		direction = #West ifTrue:[^direction := #South].
		direction = #South ifTrue:[^direction := #East].
		direction = #East ifTrue:[^direction := #North].
		].
	aCommand = $r ifTrue:[^direction := #East].
	self error: self invalidCommandErrorDescription.! !

Object subclass: #MarsRoverState
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverState category: 'MarsRover' stamp: 'ijgt 5/14/2021 17:00:34'!
Object subclass: #MarsRoverState
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

MarsRoverState subclass: #MarsRoverHeadingNorth
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

MarsRoverState subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverHeadingNorth category: 'MarsRover' stamp: 'ijgt 5/14/2021 17:02:36'!
MarsRoverState subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

MarsRoverState subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverHeadingWest category: 'MarsRover' stamp: 'ijgt 5/14/2021 17:02:45'!
MarsRoverState subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

MarsRoverState subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverHeadingSouth category: 'MarsRover' stamp: 'ijgt 5/14/2021 17:02:48'!
MarsRoverState subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

MarsRoverState subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverHeadingEast category: 'MarsRover' stamp: 'ijgt 5/14/2021 17:02:52'!
MarsRoverState subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Object subclass: #MarsRoverState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverState category: 'MarsRover' stamp: 'ijgt 5/14/2021 17:03:43'!
Object subclass: #MarsRoverState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverState methodsFor: 'no messages' stamp: 'ijgt 5/14/2021 17:04:58'!
rotateLeft: aMarsRover

	self shouldBeImplemented! !
!MarsRoverState methodsFor: 'as yet unclassified' stamp: 'ijgt 5/14/2021 17:05:10' prior: 50863842!
rotateLeft: aMarsRover

	self subclassResponsibility ! !
!MarsRoverState methodsFor: 'as yet unclassified' stamp: 'ijgt 5/14/2021 17:05:21'!
rotateRight: aMarsRover

	self subclassResponsibility ! !
!MarsRoverState methodsFor: 'as yet unclassified' stamp: 'ijgt 5/14/2021 17:05:41' prior: 50863852!
rotateRight: aMarsRover

	self subclassResponsibility! !
!MarsRoverHeadingEast methodsFor: 'no messages' stamp: 'ijgt 5/14/2021 17:07:44' overrides: 50863847!
rotateLeft: aMarsRover

	aMarsRover headNorth! !
!MarsRoverHeadingEast methodsFor: 'as yet unclassified' stamp: 'ijgt 5/14/2021 17:10:25' overrides: 50863857!
rotateRight: aMarsRover

	aMarsRover headSouth! !
!MarsRoverHeadingNorth methodsFor: 'no messages' stamp: 'ijgt 5/14/2021 17:11:01' overrides: 50863857!
rotateRight: aMarsRover

	aMarsRover headEast! !
!MarsRoverHeadingNorth methodsFor: 'as yet unclassified' stamp: 'ijgt 5/14/2021 17:11:10' overrides: 50863847!
rotateLeft: aMarsRover

	aMarsRover headWest! !
!MarsRoverHeadingSouth methodsFor: 'no messages' stamp: 'ijgt 5/14/2021 17:11:27' overrides: 50863857!
rotateRight: aMarsRover

	aMarsRover headWest! !
!MarsRoverHeadingSouth methodsFor: 'as yet unclassified' stamp: 'ijgt 5/14/2021 17:11:37'!
rotateEast: aMarsRover

	aMarsRover headEast! !
!MarsRoverHeadingWest methodsFor: 'no messages' stamp: 'ijgt 5/14/2021 17:11:50' overrides: 50863857!
rotateRight: aMarsRover

	aMarsRover headNorth! !
!MarsRoverHeadingWest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/14/2021 17:11:59' overrides: 50863847!
rotateLeft: aMarsRover

	aMarsRover headSouth! !
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 17:12:38'!
headNorth

	direction := #North! !
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 17:14:08' prior: 50863901!
headNorth

	direction := MarsRoverHeadingNorth new.! !
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 17:14:22'!
headSouth

	direction := MarsRoverHeadingSouth new.! !
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 17:14:30'!
headEast

	direction := MarsRoverHeadingEast new.! !
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 17:14:38'!
headWest

	direction := MarsRoverHeadingWest new.! !
!MarsRover methodsFor: 'initialize' stamp: 'ijgt 5/14/2021 17:17:08' prior: 50862798!
initializeIn: aCoordinate heading: aDirection

	position := aCoordinate.
	direction := MarsRoverState heading: aDirection.! !
!MarsRoverState class methodsFor: 'no messages' stamp: 'ijgt 5/14/2021 17:17:25'!
heading: aDirection

	! !
!MarsRoverState class methodsFor: 'as yet unclassified' stamp: 'ijgt 5/14/2021 17:19:55' prior: 50863929!
heading: aDirection

	self allSubclasses detect: [:aCardinalPoint | aCardinalPoint canHandle: aDirection]! !
!MarsRoverState class methodsFor: 'creation' stamp: 'ijgt 5/14/2021 17:21:46' prior: 50863934!
heading: aDirection

	self allSubclasses detect: [:aCardinalPoint | aCardinalPoint canHandle: aDirection]! !
!MarsRoverState class methodsFor: 'creation' stamp: 'ijgt 5/14/2021 17:22:54' prior: 50863941!
heading: aDirection

	^ (self allSubclasses detect: [:aCardinalPoint | aCardinalPoint canHandle: aDirection]) new.! !
!MarsRoverHeadingEast class methodsFor: 'no messages' stamp: 'ijgt 5/14/2021 17:24:26'!
canHandle: aDirection

	^aDirection = #East.! !
!MarsRoverHeadingNorth class methodsFor: 'no messages' stamp: 'ijgt 5/14/2021 17:25:26'!
canHandle: aDirection

	^ aDirection = #North! !
!MarsRoverHeadingSouth class methodsFor: 'no messages' stamp: 'ijgt 5/14/2021 17:25:42'!
canHandle: aDirection

	^ aDirection = #South! !
!MarsRoverHeadingWest class methodsFor: 'no messages' stamp: 'ijgt 5/14/2021 17:25:59'!
canHandle: aDirection

	^ aDirection = #West! !

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 17:26:29'!
FAILURE!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 17:26:29'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 17:26:29'!
FAILURE!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 17:26:29'!
FAILURE!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 17:26:29'!
ERROR!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 17:26:29'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 17:26:29'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 17:26:29'!
FAILURE!

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 17:26:29'!
FAILURE!

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 17:26:29'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 17:26:29'!
ERROR!

!testRun: #MarsRoverTest #test12 stamp: 'ijgt 5/14/2021 17:26:29'!
ERROR!

!testRun: #MarsRoverTest #test13 stamp: 'ijgt 5/14/2021 17:26:29'!
ERROR!

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 17:26:29'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 17:26:34'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 17:27:43'!
FAILURE!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 17:29:00' prior: 50863749!
runCommand: aCommand

	aCommand = $f ifTrue:[^position := position + (0@1)].
	aCommand = $b ifTrue:[^position := position + (0@-1)].
	aCommand = $l ifTrue:[^direction rotateLeft: self	].
	aCommand = $r ifTrue:[^direction := #East].
	self error: self invalidCommandErrorDescription.! !

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 17:29:05'!
FAILURE!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 17:29:05'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 17:29:05'!
FAILURE!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 17:29:05'!
FAILURE!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 17:29:05'!
FAILURE!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 17:29:05'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 17:29:05'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 17:29:05'!
FAILURE!

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 17:29:05'!
FAILURE!

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 17:29:05'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 17:29:05'!
FAILURE!

!testRun: #MarsRoverTest #test12 stamp: 'ijgt 5/14/2021 17:29:05'!
FAILURE!

!testRun: #MarsRoverTest #test13 stamp: 'ijgt 5/14/2021 17:29:05'!
FAILURE!

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 17:29:05'!
ERROR!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 17:29:28' prior: 50864013!
runCommand: aCommand

	aCommand = $f ifTrue:[^position := position + (0@1)].
	aCommand = $b ifTrue:[^position := position + (0@-1)].
	aCommand = $l ifTrue:[^direction rotateLeft: self	].
	aCommand = $r ifTrue:[^direction rotateRight: self].
	self error: self invalidCommandErrorDescription.! !
!MarsRover methodsFor: 'testing' stamp: 'ijgt 5/14/2021 17:35:09' prior: 50862829!
direction
	
	^direction cardinalDirection! !
!MarsRoverState methodsFor: 'as yet unclassified' stamp: 'ijgt 5/14/2021 17:35:27'!
cardianlDirection

	self subclassResponsibility ! !
!MarsRoverState methodsFor: 'as yet unclassified' stamp: 'ijgt 5/14/2021 17:35:44'!
cardinalDirection

	self subclassResponsibility ! !

!methodRemoval: MarsRoverState #cardianlDirection stamp: 'ijgt 5/14/2021 17:35:44'!
cardianlDirection

	self subclassResponsibility !
!MarsRoverHeadingEast methodsFor: 'testing' stamp: 'ijgt 5/14/2021 17:36:47' overrides: 50864081!
cardinalDirection

	^#East! !
!MarsRoverHeadingNorth methodsFor: 'testing' stamp: 'ijgt 5/14/2021 17:37:17' overrides: 50864081!
cardinalDirection

	^#North! !
!MarsRoverHeadingSouth methodsFor: 'testing' stamp: 'ijgt 5/14/2021 17:37:38' overrides: 50864081!
cardinalDirection

	^#South! !
!MarsRoverHeadingWest methodsFor: 'testing' stamp: 'ijgt 5/14/2021 17:37:58' overrides: 50864081!
cardinalDirection

	^#West! !

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 17:38:11'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 17:38:11'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 17:38:11'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 17:38:11'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 17:38:11'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 17:38:11'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 17:38:11'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 17:38:11'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 17:38:11'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 17:38:11'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 17:38:11'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'ijgt 5/14/2021 17:38:11'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'ijgt 5/14/2021 17:38:11'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 17:38:11'!
ERROR!

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 17:38:11'!
ERROR!
!MarsRoverHeadingSouth methodsFor: 'rotating' stamp: 'ijgt 5/14/2021 17:39:10' overrides: 50863847!
rotateLeft: aMarsRover

	aMarsRover headEast! !

!methodRemoval: MarsRoverHeadingSouth #rotateEast: stamp: 'ijgt 5/14/2021 17:39:10'!
rotateEast: aMarsRover

	aMarsRover headEast!

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 17:39:17'!
FAILURE!

!testRun: #MarsRoverTest #test13 stamp: 'ijgt 5/14/2021 17:41:54'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'ijgt 5/14/2021 17:41:57'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 17:41:58'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 17:42:00'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 17:42:03'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 17:42:07'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 17:42:07'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 17:42:07'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 17:42:07'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 17:42:07'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 17:42:07'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 17:42:07'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 17:42:07'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 17:42:07'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 17:42:07'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 17:42:07'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'ijgt 5/14/2021 17:42:07'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'ijgt 5/14/2021 17:42:07'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 17:42:07'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 17:42:17'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 17:42:17'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 17:42:17'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 17:42:17'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 17:42:17'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 17:42:17'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 17:42:17'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 17:42:17'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 17:42:17'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 17:42:17'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 17:42:17'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'ijgt 5/14/2021 17:42:17'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'ijgt 5/14/2021 17:42:17'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 17:42:17'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 17:43:14'!
test15

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'llf'.
	self assert: (marsRover position) equals: 0@-1.
	self assert: (marsRover direction) equals: #South.! !

!testRun: #MarsRoverTest #test15 stamp: 'ijgt 5/14/2021 17:43:17'!
FAILURE!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 17:48:07' prior: 50864059!
runCommand: aCommand

	aCommand = $f ifTrue:[^direction moveForward].
	aCommand = $b ifTrue:[^direction moveBackward].
	aCommand = $l ifTrue:[^direction rotateLeft: self	].
	aCommand = $r ifTrue:[^direction rotateRight: self].
	self error: self invalidCommandErrorDescription.! !
!MarsRoverState methodsFor: 'moving' stamp: 'ijgt 5/14/2021 17:49:04'!
moveForward: aMarsRover

	self subclassResponsibility! !
!MarsRoverState methodsFor: 'moving' stamp: 'ijgt 5/14/2021 17:49:12'!
moveBackward: aMarsRover

	self subclassResponsibility! !
!MarsRoverHeadingEast methodsFor: 'moving' stamp: 'ijgt 5/14/2021 17:50:25' overrides: 50864257!
moveForward: aMarsRover

	aMarsRover moveEast! !
!MarsRoverHeadingEast methodsFor: 'moving' stamp: 'ijgt 5/14/2021 17:51:27' overrides: 50864261!
moveBackward: aMarsRover

	aMarsRover moveWest! !
!MarsRoverHeadingNorth methodsFor: 'moving' stamp: 'ijgt 5/14/2021 17:52:35' overrides: 50864257!
moveForward: aMarsRover

	aMarsRover moveNorth! !
!MarsRoverHeadingNorth methodsFor: 'moving' stamp: 'ijgt 5/14/2021 17:52:48' overrides: 50864261!
moveBackward: aMarsRover

	aMarsRover moveSouth! !
!MarsRoverHeadingSouth methodsFor: 'moving' stamp: 'ijgt 5/14/2021 17:53:05' overrides: 50864257!
moveForward: aMarsRover

	aMarsRover moveSouth! !
!MarsRoverHeadingSouth methodsFor: 'moving' stamp: 'ijgt 5/14/2021 17:53:15' overrides: 50864261!
moveBackward: aMarsRover

	aMarsRover moveNorth! !
!MarsRoverHeadingWest methodsFor: 'moving' stamp: 'ijgt 5/14/2021 17:53:28' overrides: 50864257!
moveForward: aMarsRover

	aMarsRover moveWest! !
!MarsRoverHeadingWest methodsFor: 'moving' stamp: 'ijgt 5/14/2021 17:53:36' overrides: 50864261!
moveBackward: aMarsRover

	aMarsRover moveEast! !
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 17:54:31'!
moveNorth

	position := position + (0@1)! !
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 17:54:41'!
moveSouth

	position := position + (0@-1)! !
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 17:54:54'!
moveEast

	position := position + (1@0)! !
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 17:55:01'!
moveWest

	position := position + (-1@0)! !

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 17:55:08'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 17:55:08'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 17:55:08'!
ERROR!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 17:55:08'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 17:55:08'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 17:55:08'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 17:55:08'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 17:55:08'!
ERROR!

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 17:55:08'!
ERROR!

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 17:55:08'!
ERROR!

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 17:55:08'!
ERROR!

!testRun: #MarsRoverTest #test12 stamp: 'ijgt 5/14/2021 17:55:08'!
ERROR!

!testRun: #MarsRoverTest #test13 stamp: 'ijgt 5/14/2021 17:55:08'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 17:55:08'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'ijgt 5/14/2021 17:55:08'!
ERROR!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 17:55:11'!
ERROR!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 17:55:51' prior: 50864246!
runCommand: aCommand

	aCommand = $f ifTrue:[^direction moveForward: self].
	aCommand = $b ifTrue:[^direction moveBackward: self].
	aCommand = $l ifTrue:[^direction rotateLeft: self	].
	aCommand = $r ifTrue:[^direction rotateRight: self].
	self error: self invalidCommandErrorDescription.! !

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 17:55:54'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 17:55:54'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 17:55:54'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 17:55:54'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 17:55:54'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 17:55:54'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 17:55:54'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 17:55:54'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 17:55:54'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 17:55:54'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 17:55:54'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'ijgt 5/14/2021 17:55:54'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'ijgt 5/14/2021 17:55:54'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 17:55:54'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'ijgt 5/14/2021 17:55:54'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 17:59:25'!
test16

	self should: [MarsRover in: 0@0 heading: #Down.] raise: Error withExceptionDo: [:anError | 
		self assert: (anError messageText) equals: (MarsRover invalidDirectionErrorDescription)
		].! !

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 17:59:42'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 17:59:42'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 17:59:42'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 17:59:42'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 17:59:42'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 17:59:42'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 17:59:42'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 17:59:42'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 17:59:42'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 17:59:42'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 17:59:42'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'ijgt 5/14/2021 17:59:42'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'ijgt 5/14/2021 17:59:42'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 17:59:42'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'ijgt 5/14/2021 17:59:42'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'ijgt 5/14/2021 17:59:42'!
ERROR!

!testRun: #MarsRoverTest #test16 stamp: 'ijgt 5/14/2021 17:59:42'!
ERROR!
!MarsRover class methodsFor: 'error description' stamp: 'ijgt 5/14/2021 18:00:03'!
invalidDirectionErrorDescription
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'error description' stamp: 'ijgt 5/14/2021 18:00:23' prior: 50864456!
invalidDirectionErrorDescription
	
	^'Invalid direction provided'! !
!MarsRover class methodsFor: 'error description' stamp: 'ijgt 5/14/2021 18:00:46' prior: 50864462!
invalidDirectionErrorDescription
	
	^'Invalid direction received'! !

!testRun: #MarsRoverTest #test16 stamp: 'ijgt 5/14/2021 18:00:48'!
FAILURE!
!MarsRoverState class methodsFor: 'creation' stamp: 'ijgt 5/14/2021 18:05:59' prior: 50863948!
heading: aDirection

	^ self allSubclasses detect: [:aCardinalPoint | aCardinalPoint canHandle: aDirection] ifFound: [:aCardinalPoint | aCardinalPoint new] ifNone: [self error: MarsRover invalidDirectionErrorDescription]! !

!testRun: #MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 18:06:12'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 18:06:12'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 18:06:12'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 18:06:12'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 18:06:12'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 18:06:12'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 18:06:12'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 18:06:12'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 18:06:12'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 18:06:12'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 18:06:12'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'ijgt 5/14/2021 18:06:12'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'ijgt 5/14/2021 18:06:12'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 18:06:12'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'ijgt 5/14/2021 18:06:12'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'ijgt 5/14/2021 18:06:12'!
PASSED!
!MarsRover methodsFor: 'processing' stamp: 'ijgt 5/14/2021 18:13:27' prior: 50864359!
runCommand: aCommand

	"Se podría crear una clase Command para eliminar estos ifs, sobre todo si se espera agregar
	más comandos en el futuro."
	aCommand = $f ifTrue:[^direction moveForward: self].
	aCommand = $b ifTrue:[^direction moveBackward: self].
	aCommand = $l ifTrue:[^direction rotateLeft: self	].
	aCommand = $r ifTrue:[^direction rotateRight: self].
	self error: self invalidCommandErrorDescription.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:16:04'!
test01creationIsValid

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #North.! !

!methodRemoval: MarsRoverTest #test01 stamp: 'ijgt 5/14/2021 18:16:04'!
test01

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #North.!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 18:16:23'!
PASSED!

!testRun: #MarsRoverTest #test01creationIsValid stamp: 'ijgt 5/14/2021 18:16:29'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 18:16:29'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 18:16:29'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 18:16:29'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 18:16:29'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 18:16:29'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 18:16:29'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 18:16:29'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 18:16:29'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 18:16:29'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 18:16:29'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'ijgt 5/14/2021 18:16:29'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'ijgt 5/14/2021 18:16:29'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 18:16:29'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'ijgt 5/14/2021 18:16:29'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'ijgt 5/14/2021 18:16:29'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:17:34'!
test02processEmptyCommandShouldDonNothing

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: ''.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #North.! !

!methodRemoval: MarsRoverTest #test02 stamp: 'ijgt 5/14/2021 18:17:34'!
test02

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: ''.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #North.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:17:45'!
test02processEmptyCommandShouldDoNothing

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: ''.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #North.! !

!methodRemoval: MarsRoverTest #test02processEmptyCommandShouldDonNothing stamp: 'ijgt 5/14/2021 18:17:45'!
test02processEmptyCommandShouldDonNothing

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: ''.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #North.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:18:03'!
test02emptyCommandShouldDoNothing

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: ''.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #North.! !

!methodRemoval: MarsRoverTest #test02processEmptyCommandShouldDoNothing stamp: 'ijgt 5/14/2021 18:18:03'!
test02processEmptyCommandShouldDoNothing

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: ''.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #North.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:18:52'!
test03forwardCommandMovesForwardHeadingNorth

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'f'.
	self assert: (marsRover position) equals: 0@1.
	self assert: (marsRover direction) equals: #North.! !

!methodRemoval: MarsRoverTest #test03 stamp: 'ijgt 5/14/2021 18:18:52'!
test03

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'f'.
	self assert: (marsRover position) equals: 0@1.
	self assert: (marsRover direction) equals: #North.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:19:27'!
test04backwardCommandMovesBackwardHeadingNorth

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'b'.
	self assert: (marsRover position) equals: 0@-1.
	self assert: (marsRover direction) equals: #North.! !

!methodRemoval: MarsRoverTest #test04 stamp: 'ijgt 5/14/2021 18:19:27'!
test04

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'b'.
	self assert: (marsRover position) equals: 0@-1.
	self assert: (marsRover direction) equals: #North.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:19:57'!
test05leftCommandRotatesLeftHeadingNorth

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'l'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #West.! !

!methodRemoval: MarsRoverTest #test05 stamp: 'ijgt 5/14/2021 18:19:57'!
test05

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'l'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #West.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:20:25'!
test06rightCommandRotatesRightHeadingNorth

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'r'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #East.! !

!methodRemoval: MarsRoverTest #test06 stamp: 'ijgt 5/14/2021 18:20:25'!
test06

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'r'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #East.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:20:55'!
test07invalidCommandShouldRaiseErrorAndDoNothing

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	self should: [marsRover process: 'h'] raise: Error withExceptionDo: [:anError | 
		self assert: (anError messageText) equals: marsRover invalidCommandErrorDescription.
		self assert: (marsRover position) equals: 0@0.
		self assert: (marsRover direction) equals: #North.
		].! !

!methodRemoval: MarsRoverTest #test07 stamp: 'ijgt 5/14/2021 18:20:55'!
test07

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	self should: [marsRover process: 'h'] raise: Error withExceptionDo: [:anError | 
		self assert: (anError messageText) equals: marsRover invalidCommandErrorDescription.
		self assert: (marsRover position) equals: 0@0.
		self assert: (marsRover direction) equals: #North.
		].!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:21:40'!
test08forwardCommandTwiceMovesForwardTwice

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'ff'.
	self assert: (marsRover position) equals: 0@2.
	self assert: (marsRover direction) equals: #North.! !

!methodRemoval: MarsRoverTest #test08 stamp: 'ijgt 5/14/2021 18:21:41'!
test08

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'ff'.
	self assert: (marsRover position) equals: 0@2.
	self assert: (marsRover direction) equals: #North.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:21:51'!
test08forwardCommandTwiceMovesForwardTwiceHeadingNorth

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'ff'.
	self assert: (marsRover position) equals: 0@2.
	self assert: (marsRover direction) equals: #North.! !

!methodRemoval: MarsRoverTest #test08forwardCommandTwiceMovesForwardTwice stamp: 'ijgt 5/14/2021 18:21:51'!
test08forwardCommandTwiceMovesForwardTwice

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'ff'.
	self assert: (marsRover position) equals: 0@2.
	self assert: (marsRover direction) equals: #North.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:23:03'!
test09forwardAndBackwardStaysInPlaceHeadingNorth

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'fb'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #North.! !

!methodRemoval: MarsRoverTest #test09 stamp: 'ijgt 5/14/2021 18:23:03'!
test09

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'fb'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #North.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:25:15'!
test03forwardCommandMovesForward

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'f'.
	self assert: (marsRover position) equals: 0@1.
	self assert: (marsRover direction) equals: #North.! !

!methodRemoval: MarsRoverTest #test03forwardCommandMovesForwardHeadingNorth stamp: 'ijgt 5/14/2021 18:25:15'!
test03forwardCommandMovesForwardHeadingNorth

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'f'.
	self assert: (marsRover position) equals: 0@1.
	self assert: (marsRover direction) equals: #North.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:25:24'!
test04backwardCommandMovesBackward

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'b'.
	self assert: (marsRover position) equals: 0@-1.
	self assert: (marsRover direction) equals: #North.! !

!methodRemoval: MarsRoverTest #test04backwardCommandMovesBackwardHeadingNorth stamp: 'ijgt 5/14/2021 18:25:24'!
test04backwardCommandMovesBackwardHeadingNorth

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'b'.
	self assert: (marsRover position) equals: 0@-1.
	self assert: (marsRover direction) equals: #North.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:25:39'!
test05leftCommandRotatesLeft

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'l'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #West.! !

!methodRemoval: MarsRoverTest #test05leftCommandRotatesLeftHeadingNorth stamp: 'ijgt 5/14/2021 18:25:39'!
test05leftCommandRotatesLeftHeadingNorth

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'l'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #West.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:26:03'!
test06rightCommandRotatesRight

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'r'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #East.! !

!methodRemoval: MarsRoverTest #test06rightCommandRotatesRightHeadingNorth stamp: 'ijgt 5/14/2021 18:26:03'!
test06rightCommandRotatesRightHeadingNorth

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'r'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #East.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:26:23'!
test08forwardCommandTwiceMovesForwardTwice

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'ff'.
	self assert: (marsRover position) equals: 0@2.
	self assert: (marsRover direction) equals: #North.! !

!methodRemoval: MarsRoverTest #test08forwardCommandTwiceMovesForwardTwiceHeadingNorth stamp: 'ijgt 5/14/2021 18:26:23'!
test08forwardCommandTwiceMovesForwardTwiceHeadingNorth

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'ff'.
	self assert: (marsRover position) equals: 0@2.
	self assert: (marsRover direction) equals: #North.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:26:33'!
test09forwardAndBackwardStaysInPlace

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'fb'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #North.! !

!methodRemoval: MarsRoverTest #test09forwardAndBackwardStaysInPlaceHeadingNorth stamp: 'ijgt 5/14/2021 18:26:33'!
test09forwardAndBackwardStaysInPlaceHeadingNorth

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'fb'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #North.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:27:09'!
test10forwardRight

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'fr'.
	self assert: (marsRover position) equals: 0@1.
	self assert: (marsRover direction) equals: #East.! !

!methodRemoval: MarsRoverTest #test10 stamp: 'ijgt 5/14/2021 18:27:09'!
test10

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'fr'.
	self assert: (marsRover position) equals: 0@1.
	self assert: (marsRover direction) equals: #East.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:27:25'!
test10forwardRightMovesAndRotates

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'fr'.
	self assert: (marsRover position) equals: 0@1.
	self assert: (marsRover direction) equals: #East.! !

!methodRemoval: MarsRoverTest #test10forwardRight stamp: 'ijgt 5/14/2021 18:27:25'!
test10forwardRight

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'fr'.
	self assert: (marsRover position) equals: 0@1.
	self assert: (marsRover direction) equals: #East.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:27:47'!
test11forwardLeftMovesAndRotates

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'fl'.
	self assert: (marsRover position) equals: 0@1.
	self assert: (marsRover direction) equals: #West.! !

!methodRemoval: MarsRoverTest #test11 stamp: 'ijgt 5/14/2021 18:27:47'!
test11

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'fl'.
	self assert: (marsRover position) equals: 0@1.
	self assert: (marsRover direction) equals: #West.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:28:22'!
test12backwardLeftMovesAndRotates

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'bl'.
	self assert: (marsRover position) equals: 0@-1.
	self assert: (marsRover direction) equals: #West.! !

!methodRemoval: MarsRoverTest #test12 stamp: 'ijgt 5/14/2021 18:28:22'!
test12

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'bl'.
	self assert: (marsRover position) equals: 0@-1.
	self assert: (marsRover direction) equals: #West.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:28:40'!
test13leftLeftRotatesTwice

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'll'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #South.! !

!methodRemoval: MarsRoverTest #test13 stamp: 'ijgt 5/14/2021 18:28:40'!
test13

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'll'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #South.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:28:58'!
test14leftLeftLeftRotateThrice

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'lll'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #East.! !

!methodRemoval: MarsRoverTest #test14 stamp: 'ijgt 5/14/2021 18:28:58'!
test14

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'lll'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #East.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:29:45'!
test15leftLeftForwardRotatesTwiceAndMoves

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'llf'.
	self assert: (marsRover position) equals: 0@-1.
	self assert: (marsRover direction) equals: #South.! !

!methodRemoval: MarsRoverTest #test15 stamp: 'ijgt 5/14/2021 18:29:45'!
test15

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #North.
	marsRover process: 'llf'.
	self assert: (marsRover position) equals: 0@-1.
	self assert: (marsRover direction) equals: #South.!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:30:05'!
test16invalidDirectionShouldRaiseError

	self should: [MarsRover in: 0@0 heading: #Down.] raise: Error withExceptionDo: [:anError | 
		self assert: (anError messageText) equals: (MarsRover invalidDirectionErrorDescription)
		].! !

!methodRemoval: MarsRoverTest #test16 stamp: 'ijgt 5/14/2021 18:30:05'!
test16

	self should: [MarsRover in: 0@0 heading: #Down.] raise: Error withExceptionDo: [:anError | 
		self assert: (anError messageText) equals: (MarsRover invalidDirectionErrorDescription)
		].!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:30:47'!
test17headingSouth

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #South.
	marsRover process: 'll'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #North.! !

!testRun: #MarsRoverTest #test17headingSouth stamp: 'ijgt 5/14/2021 18:30:52'!
PASSED!

!testRun: #MarsRoverTest #test01creationIsValid stamp: 'ijgt 5/14/2021 18:30:52'!
PASSED!

!testRun: #MarsRoverTest #test02emptyCommandShouldDoNothing stamp: 'ijgt 5/14/2021 18:30:52'!
PASSED!

!testRun: #MarsRoverTest #test03forwardCommandMovesForward stamp: 'ijgt 5/14/2021 18:30:52'!
PASSED!

!testRun: #MarsRoverTest #test04backwardCommandMovesBackward stamp: 'ijgt 5/14/2021 18:30:52'!
PASSED!

!testRun: #MarsRoverTest #test05leftCommandRotatesLeft stamp: 'ijgt 5/14/2021 18:30:52'!
PASSED!

!testRun: #MarsRoverTest #test06rightCommandRotatesRight stamp: 'ijgt 5/14/2021 18:30:52'!
PASSED!

!testRun: #MarsRoverTest #test07invalidCommandShouldRaiseErrorAndDoNothing stamp: 'ijgt 5/14/2021 18:30:52'!
PASSED!

!testRun: #MarsRoverTest #test08forwardCommandTwiceMovesForwardTwice stamp: 'ijgt 5/14/2021 18:30:52'!
PASSED!

!testRun: #MarsRoverTest #test09forwardAndBackwardStaysInPlace stamp: 'ijgt 5/14/2021 18:30:52'!
PASSED!

!testRun: #MarsRoverTest #test10forwardRightMovesAndRotates stamp: 'ijgt 5/14/2021 18:30:52'!
PASSED!

!testRun: #MarsRoverTest #test11forwardLeftMovesAndRotates stamp: 'ijgt 5/14/2021 18:30:52'!
PASSED!

!testRun: #MarsRoverTest #test12backwardLeftMovesAndRotates stamp: 'ijgt 5/14/2021 18:30:52'!
PASSED!

!testRun: #MarsRoverTest #test13leftLeftRotatesTwice stamp: 'ijgt 5/14/2021 18:30:52'!
PASSED!

!testRun: #MarsRoverTest #test14leftLeftLeftRotateThrice stamp: 'ijgt 5/14/2021 18:30:52'!
PASSED!

!testRun: #MarsRoverTest #test15leftLeftForwardRotatesTwiceAndMoves stamp: 'ijgt 5/14/2021 18:30:52'!
PASSED!

!testRun: #MarsRoverTest #test16invalidDirectionShouldRaiseError stamp: 'ijgt 5/14/2021 18:30:52'!
PASSED!

!testRun: #MarsRoverTest #test17headingSouth stamp: 'ijgt 5/14/2021 18:30:52'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:31:13'!
test18headingEast

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #East.
	marsRover process: 'lr'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #East.! !

!testRun: #MarsRoverTest #test18headingEast stamp: 'ijgt 5/14/2021 18:31:15'!
PASSED!

!testRun: #MarsRoverTest #test01creationIsValid stamp: 'ijgt 5/14/2021 18:31:15'!
PASSED!

!testRun: #MarsRoverTest #test02emptyCommandShouldDoNothing stamp: 'ijgt 5/14/2021 18:31:15'!
PASSED!

!testRun: #MarsRoverTest #test03forwardCommandMovesForward stamp: 'ijgt 5/14/2021 18:31:15'!
PASSED!

!testRun: #MarsRoverTest #test04backwardCommandMovesBackward stamp: 'ijgt 5/14/2021 18:31:15'!
PASSED!

!testRun: #MarsRoverTest #test05leftCommandRotatesLeft stamp: 'ijgt 5/14/2021 18:31:15'!
PASSED!

!testRun: #MarsRoverTest #test06rightCommandRotatesRight stamp: 'ijgt 5/14/2021 18:31:15'!
PASSED!

!testRun: #MarsRoverTest #test07invalidCommandShouldRaiseErrorAndDoNothing stamp: 'ijgt 5/14/2021 18:31:15'!
PASSED!

!testRun: #MarsRoverTest #test08forwardCommandTwiceMovesForwardTwice stamp: 'ijgt 5/14/2021 18:31:15'!
PASSED!

!testRun: #MarsRoverTest #test09forwardAndBackwardStaysInPlace stamp: 'ijgt 5/14/2021 18:31:15'!
PASSED!

!testRun: #MarsRoverTest #test10forwardRightMovesAndRotates stamp: 'ijgt 5/14/2021 18:31:15'!
PASSED!

!testRun: #MarsRoverTest #test11forwardLeftMovesAndRotates stamp: 'ijgt 5/14/2021 18:31:15'!
PASSED!

!testRun: #MarsRoverTest #test12backwardLeftMovesAndRotates stamp: 'ijgt 5/14/2021 18:31:15'!
PASSED!

!testRun: #MarsRoverTest #test13leftLeftRotatesTwice stamp: 'ijgt 5/14/2021 18:31:15'!
PASSED!

!testRun: #MarsRoverTest #test14leftLeftLeftRotateThrice stamp: 'ijgt 5/14/2021 18:31:15'!
PASSED!

!testRun: #MarsRoverTest #test15leftLeftForwardRotatesTwiceAndMoves stamp: 'ijgt 5/14/2021 18:31:15'!
PASSED!

!testRun: #MarsRoverTest #test16invalidDirectionShouldRaiseError stamp: 'ijgt 5/14/2021 18:31:15'!
PASSED!

!testRun: #MarsRoverTest #test17headingSouth stamp: 'ijgt 5/14/2021 18:31:15'!
PASSED!

!testRun: #MarsRoverTest #test18headingEast stamp: 'ijgt 5/14/2021 18:31:15'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:33:03'!
test19headingWestMovingRotatin

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #West.
	marsRover process: 'ffllbll'.
	self assert: (marsRover position) equals: 3@0.
	self assert: (marsRover direction) equals: #West.! !

!testRun: #MarsRoverTest #test19headingWestMovingRotatin stamp: 'ijgt 5/14/2021 18:33:06'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:33:20' prior: 50865224!
test19headingWestMovingRotatin

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #West.
	marsRover process: 'ffllbll'.
	self assert: (marsRover position) equals: -3@0.
	self assert: (marsRover direction) equals: #West.! !

!testRun: #MarsRoverTest #test19headingWestMovingRotatin stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!testRun: #MarsRoverTest #test01creationIsValid stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!testRun: #MarsRoverTest #test02emptyCommandShouldDoNothing stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!testRun: #MarsRoverTest #test03forwardCommandMovesForward stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!testRun: #MarsRoverTest #test04backwardCommandMovesBackward stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!testRun: #MarsRoverTest #test05leftCommandRotatesLeft stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!testRun: #MarsRoverTest #test06rightCommandRotatesRight stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!testRun: #MarsRoverTest #test07invalidCommandShouldRaiseErrorAndDoNothing stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!testRun: #MarsRoverTest #test08forwardCommandTwiceMovesForwardTwice stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!testRun: #MarsRoverTest #test09forwardAndBackwardStaysInPlace stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!testRun: #MarsRoverTest #test10forwardRightMovesAndRotates stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!testRun: #MarsRoverTest #test11forwardLeftMovesAndRotates stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!testRun: #MarsRoverTest #test12backwardLeftMovesAndRotates stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!testRun: #MarsRoverTest #test13leftLeftRotatesTwice stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!testRun: #MarsRoverTest #test14leftLeftLeftRotateThrice stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!testRun: #MarsRoverTest #test15leftLeftForwardRotatesTwiceAndMoves stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!testRun: #MarsRoverTest #test16invalidDirectionShouldRaiseError stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!testRun: #MarsRoverTest #test17headingSouth stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!testRun: #MarsRoverTest #test18headingEast stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!testRun: #MarsRoverTest #test19headingWestMovingRotatin stamp: 'ijgt 5/14/2021 18:33:21'!
PASSED!

!methodRemoval: MarsRoverTest #test17headingSouth stamp: 'ijgt 5/14/2021 18:33:38'!
test17headingSouth

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #South.
	marsRover process: 'll'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #North.!

!methodRemoval: MarsRoverTest #test18headingEast stamp: 'ijgt 5/14/2021 18:33:42'!
test18headingEast

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #East.
	marsRover process: 'lr'.
	self assert: (marsRover position) equals: 0@0.
	self assert: (marsRover direction) equals: #East.!

!methodRemoval: MarsRoverTest #test19headingWestMovingRotatin stamp: 'ijgt 5/14/2021 18:33:46'!
test19headingWestMovingRotatin

	| marsRover |
	marsRover := MarsRover in: 0@0 heading: #West.
	marsRover process: 'ffllbll'.
	self assert: (marsRover position) equals: -3@0.
	self assert: (marsRover direction) equals: #West.!

!testRun: #MarsRoverTest #test01creationIsValid stamp: 'ijgt 5/14/2021 18:34:15'!
PASSED!

!testRun: #MarsRoverTest #test02emptyCommandShouldDoNothing stamp: 'ijgt 5/14/2021 18:34:15'!
PASSED!

!testRun: #MarsRoverTest #test03forwardCommandMovesForward stamp: 'ijgt 5/14/2021 18:34:15'!
PASSED!

!testRun: #MarsRoverTest #test04backwardCommandMovesBackward stamp: 'ijgt 5/14/2021 18:34:15'!
PASSED!

!testRun: #MarsRoverTest #test05leftCommandRotatesLeft stamp: 'ijgt 5/14/2021 18:34:15'!
PASSED!

!testRun: #MarsRoverTest #test06rightCommandRotatesRight stamp: 'ijgt 5/14/2021 18:34:15'!
PASSED!

!testRun: #MarsRoverTest #test07invalidCommandShouldRaiseErrorAndDoNothing stamp: 'ijgt 5/14/2021 18:34:15'!
PASSED!

!testRun: #MarsRoverTest #test08forwardCommandTwiceMovesForwardTwice stamp: 'ijgt 5/14/2021 18:34:15'!
PASSED!

!testRun: #MarsRoverTest #test09forwardAndBackwardStaysInPlace stamp: 'ijgt 5/14/2021 18:34:15'!
PASSED!

!testRun: #MarsRoverTest #test10forwardRightMovesAndRotates stamp: 'ijgt 5/14/2021 18:34:15'!
PASSED!

!testRun: #MarsRoverTest #test11forwardLeftMovesAndRotates stamp: 'ijgt 5/14/2021 18:34:15'!
PASSED!

!testRun: #MarsRoverTest #test12backwardLeftMovesAndRotates stamp: 'ijgt 5/14/2021 18:34:15'!
PASSED!

!testRun: #MarsRoverTest #test13leftLeftRotatesTwice stamp: 'ijgt 5/14/2021 18:34:15'!
PASSED!

!testRun: #MarsRoverTest #test14leftLeftLeftRotateThrice stamp: 'ijgt 5/14/2021 18:34:15'!
PASSED!

!testRun: #MarsRoverTest #test15leftLeftForwardRotatesTwiceAndMoves stamp: 'ijgt 5/14/2021 18:34:15'!
PASSED!

!testRun: #MarsRoverTest #test16invalidDirectionShouldRaiseError stamp: 'ijgt 5/14/2021 18:34:15'!
PASSED!
!MarsRoverTest methodsFor: 'setUp' stamp: 'ijgt 5/14/2021 18:38:14' overrides: 16927572!
setUp

	! !

Object subclass: #NameOfSubclass
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #NameOfSubclass category: 'MarsRover' stamp: 'ijgt 5/14/2021 18:38:27'!
Object subclass: #NameOfSubclass
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #NameOfSubclass stamp: 'ijgt 5/14/2021 18:38:37'!
Object subclass: #NameOfSubclass
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'aMarsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'ijgt 5/14/2021 18:38:55'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'aMarsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'setUp' stamp: 'ijgt 5/14/2021 18:39:24' prior: 50865391 overrides: 16927572!
setUp

	aMarsRover := MarsRover in: 0@0 heading: #North.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:40:07' prior: 50864540!
test01creationIsValid

	self assert: (aMarsRover position) equals: 0@0.
	self assert: (aMarsRover direction) equals: #North.! !

!testRun: #MarsRoverTest #test01creationIsValid stamp: 'ijgt 5/14/2021 18:40:13'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:40:26' prior: 50864636!
test02emptyCommandShouldDoNothing

	aMarsRover process: ''.
	self assert: (aMarsRover position) equals: 0@0.
	self assert: (aMarsRover direction) equals: #North.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:40:41' prior: 50864817!
test03forwardCommandMovesForward

	aMarsRover process: 'f'.
	self assert: (aMarsRover position) equals: 0@1.
	self assert: (aMarsRover direction) equals: #North.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:40:56' prior: 50864838!
test04backwardCommandMovesBackward

	aMarsRover process: 'b'.
	self assert: (aMarsRover position) equals: 0@-1.
	self assert: (aMarsRover direction) equals: #North.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:41:12' prior: 50864859!
test05leftCommandRotatesLeft

	aMarsRover process: 'l'.
	self assert: (aMarsRover position) equals: 0@0.
	self assert: (aMarsRover direction) equals: #West.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:41:29' prior: 50864879!
test06rightCommandRotatesRight

	aMarsRover process: 'r'.
	self assert: (aMarsRover position) equals: 0@0.
	self assert: (aMarsRover direction) equals: #East.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:41:48' prior: 50864730!
test07invalidCommandShouldRaiseErrorAndDoNothing

	self should: [aMarsRover process: 'h'] raise: Error withExceptionDo: [:anError | 
		self assert: (anError messageText) equals: aMarsRover invalidCommandErrorDescription.
		self assert: (aMarsRover position) equals: 0@0.
		self assert: (aMarsRover direction) equals: #North.
		].! !

!testRun: #MarsRoverTest #test01creationIsValid stamp: 'ijgt 5/14/2021 18:41:50'!
PASSED!

!testRun: #MarsRoverTest #test02emptyCommandShouldDoNothing stamp: 'ijgt 5/14/2021 18:41:50'!
PASSED!

!testRun: #MarsRoverTest #test03forwardCommandMovesForward stamp: 'ijgt 5/14/2021 18:41:50'!
PASSED!

!testRun: #MarsRoverTest #test04backwardCommandMovesBackward stamp: 'ijgt 5/14/2021 18:41:50'!
PASSED!

!testRun: #MarsRoverTest #test05leftCommandRotatesLeft stamp: 'ijgt 5/14/2021 18:41:50'!
PASSED!

!testRun: #MarsRoverTest #test06rightCommandRotatesRight stamp: 'ijgt 5/14/2021 18:41:50'!
PASSED!

!testRun: #MarsRoverTest #test07invalidCommandShouldRaiseErrorAndDoNothing stamp: 'ijgt 5/14/2021 18:41:50'!
PASSED!

!testRun: #MarsRoverTest #test08forwardCommandTwiceMovesForwardTwice stamp: 'ijgt 5/14/2021 18:41:50'!
PASSED!

!testRun: #MarsRoverTest #test09forwardAndBackwardStaysInPlace stamp: 'ijgt 5/14/2021 18:41:50'!
PASSED!

!testRun: #MarsRoverTest #test10forwardRightMovesAndRotates stamp: 'ijgt 5/14/2021 18:41:50'!
PASSED!

!testRun: #MarsRoverTest #test11forwardLeftMovesAndRotates stamp: 'ijgt 5/14/2021 18:41:50'!
PASSED!

!testRun: #MarsRoverTest #test12backwardLeftMovesAndRotates stamp: 'ijgt 5/14/2021 18:41:50'!
PASSED!

!testRun: #MarsRoverTest #test13leftLeftRotatesTwice stamp: 'ijgt 5/14/2021 18:41:50'!
PASSED!

!testRun: #MarsRoverTest #test14leftLeftLeftRotateThrice stamp: 'ijgt 5/14/2021 18:41:50'!
PASSED!

!testRun: #MarsRoverTest #test15leftLeftForwardRotatesTwiceAndMoves stamp: 'ijgt 5/14/2021 18:41:50'!
PASSED!

!testRun: #MarsRoverTest #test16invalidDirectionShouldRaiseError stamp: 'ijgt 5/14/2021 18:41:50'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:42:04' prior: 50864899!
test08forwardCommandTwiceMovesForwardTwice

	aMarsRover process: 'ff'.
	self assert: (aMarsRover position) equals: 0@2.
	self assert: (aMarsRover direction) equals: #North.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:42:19' prior: 50864921!
test09forwardAndBackwardStaysInPlace

	aMarsRover process: 'fb'.
	self assert: (aMarsRover position) equals: 0@0.
	self assert: (aMarsRover direction) equals: #North.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:42:32' prior: 50864960!
test10forwardRightMovesAndRotates

	aMarsRover process: 'fr'.
	self assert: (aMarsRover position) equals: 0@1.
	self assert: (aMarsRover direction) equals: #East.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:42:47' prior: 50864979!
test11forwardLeftMovesAndRotates

	aMarsRover process: 'fl'.
	self assert: (aMarsRover position) equals: 0@1.
	self assert: (aMarsRover direction) equals: #West.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:43:00' prior: 50864997!
test12backwardLeftMovesAndRotates

	aMarsRover process: 'bl'.
	self assert: (aMarsRover position) equals: 0@-1.
	self assert: (aMarsRover direction) equals: #West.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:43:13' prior: 50865015!
test13leftLeftRotatesTwice

	aMarsRover process: 'll'.
	self assert: (aMarsRover position) equals: 0@0.
	self assert: (aMarsRover direction) equals: #South.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:43:35' prior: 50865033!
test14leftLeftLeftRotateThrice

	aMarsRover process: 'lll'.
	self assert: (aMarsRover position) equals: 0@0.
	self assert: (aMarsRover direction) equals: #East.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'ijgt 5/14/2021 18:43:47' prior: 50865051!
test15leftLeftForwardRotatesTwiceAndMoves

	aMarsRover process: 'llf'.
	self assert: (aMarsRover position) equals: 0@-1.
	self assert: (aMarsRover direction) equals: #South.! !

!testRun: #MarsRoverTest #test01creationIsValid stamp: 'ijgt 5/14/2021 18:43:58'!
PASSED!

!testRun: #MarsRoverTest #test02emptyCommandShouldDoNothing stamp: 'ijgt 5/14/2021 18:43:58'!
PASSED!

!testRun: #MarsRoverTest #test03forwardCommandMovesForward stamp: 'ijgt 5/14/2021 18:43:58'!
PASSED!

!testRun: #MarsRoverTest #test04backwardCommandMovesBackward stamp: 'ijgt 5/14/2021 18:43:58'!
PASSED!

!testRun: #MarsRoverTest #test05leftCommandRotatesLeft stamp: 'ijgt 5/14/2021 18:43:58'!
PASSED!

!testRun: #MarsRoverTest #test06rightCommandRotatesRight stamp: 'ijgt 5/14/2021 18:43:58'!
PASSED!

!testRun: #MarsRoverTest #test07invalidCommandShouldRaiseErrorAndDoNothing stamp: 'ijgt 5/14/2021 18:43:58'!
PASSED!

!testRun: #MarsRoverTest #test08forwardCommandTwiceMovesForwardTwice stamp: 'ijgt 5/14/2021 18:43:58'!
PASSED!

!testRun: #MarsRoverTest #test09forwardAndBackwardStaysInPlace stamp: 'ijgt 5/14/2021 18:43:58'!
PASSED!

!testRun: #MarsRoverTest #test10forwardRightMovesAndRotates stamp: 'ijgt 5/14/2021 18:43:58'!
PASSED!

!testRun: #MarsRoverTest #test11forwardLeftMovesAndRotates stamp: 'ijgt 5/14/2021 18:43:58'!
PASSED!

!testRun: #MarsRoverTest #test12backwardLeftMovesAndRotates stamp: 'ijgt 5/14/2021 18:43:58'!
PASSED!

!testRun: #MarsRoverTest #test13leftLeftRotatesTwice stamp: 'ijgt 5/14/2021 18:43:58'!
PASSED!

!testRun: #MarsRoverTest #test14leftLeftLeftRotateThrice stamp: 'ijgt 5/14/2021 18:43:58'!
PASSED!

!testRun: #MarsRoverTest #test15leftLeftForwardRotatesTwiceAndMoves stamp: 'ijgt 5/14/2021 18:43:58'!
PASSED!

!testRun: #MarsRoverTest #test16invalidDirectionShouldRaiseError stamp: 'ijgt 5/14/2021 18:43:58'!
PASSED!

----QUIT----(14 May 2021 18:46:29) CuisUniversity-4532.image priorSource: 16885703!

----STARTUP---- (17 May 2021 20:17:03) as /home/igna/Desktop/CuisNuevo/CuisUniversity-4532.image!


----End fileIn of /home/igna/Desktop/17-Portfolio 1/Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 5/17/2021 20:19:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 5/17/2021 20:19:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 5/17/2021 20:19:41'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 5/17/2021 20:19:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 5/17/2021 20:19:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 5/17/2021 20:19:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 5/17/2021 20:19:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 5/17/2021 20:19:41'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 5/17/2021 20:19:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 5/17/2021 20:19:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 5/17/2021 20:23:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 5/17/2021 20:23:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 5/17/2021 20:23:27'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'ijgt 5/17/2021 20:33:46' prior: 50865886!
balance

	^ self depositsBalance - (self withdrawalsBalance)! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'ijgt 5/17/2021 20:37:16'!
depositsBalance

	^ transactions inject: 0 into: [:aTransaction | aTransaction isDeposit]! !
!AccountTransaction methodsFor: 'testing' stamp: 'ijgt 5/17/2021 20:37:39'!
isDeposit

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'testing' stamp: 'ijgt 5/17/2021 20:38:17'!
isWithdraw

	self subclassResponsibility ! !
!Deposit methodsFor: 'testing' stamp: 'ijgt 5/17/2021 20:38:38' overrides: 50865960!
isDeposit

	^ true! !
!Deposit methodsFor: 'testing' stamp: 'ijgt 5/17/2021 20:38:48' overrides: 50865964!
isWithdraw

	^ false! !
!Withdraw methodsFor: 'testing' stamp: 'ijgt 5/17/2021 20:39:03' overrides: 50865960!
isDeposit

	^false! !
!Withdraw methodsFor: 'testing' stamp: 'ijgt 5/17/2021 20:39:14' overrides: 50865964!
isWithdraw

	^true! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'ijgt 5/17/2021 20:40:43' prior: 50865954!
depositsBalance

	^ (transactions select: [:aTransaction | aTransaction isDeposit]) sum: [:aTransaction | aTransaction value] ifEmpty: [0]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'ijgt 5/17/2021 20:41:16'!
withdrawalsBalance

	^ (transactions select: [:aTransaction | aTransaction isWithdraw]) sum: [:aTransaction | aTransaction value] ifEmpty: [0]! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 5/17/2021 20:42:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 5/17/2021 20:42:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 5/17/2021 20:42:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 5/17/2021 20:42:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 5/17/2021 20:42:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 5/17/2021 20:42:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 5/17/2021 20:42:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 5/17/2021 20:42:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 5/17/2021 20:42:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 5/17/2021 20:42:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 5/17/2021 20:42:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 5/17/2021 20:42:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 5/17/2021 20:42:46'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'ijgt 5/17/2021 20:46:01' prior: 50865746!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 50 on: account1.
		
	self assert: 1 equals: account1 transactions size.
	self assert: (account1 transactions includes: deposit1).! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'ijgt 5/17/2021 20:46:45'!
test08

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 50 on: account1.
		
	! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'ijgt 5/17/2021 20:48:27' prior: 50866061!
test08

	! !

!methodRemoval: ReceptiveAccountTest #test08 stamp: 'ijgt 5/17/2021 20:48:35'!
test08

	!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'ijgt 5/17/2021 20:49:00'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'no messages' stamp: 'ijgt 5/17/2021 20:49:22'!
test01! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/17/2021 20:49:36' prior: 50866086!
test01

	! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'ijgt 5/17/2021 20:51:44'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/17/2021 20:51:22' prior: 50866089!
test01

	|aPortfolio|
	aPortfolio := Portfolio new
	self assert: (aPortfolio accounts)! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/17/2021 20:52:24' prior: 50866100!
test01

	|aPortfolio|
	aPortfolio := Portfolio new.
	self assert: (aPortfolio accounts isEmpty)! !

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/17/2021 20:52:30'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/17/2021 20:52:30'!
ERROR!
!Portfolio class methodsFor: 'no messages' stamp: 'ijgt 5/17/2021 20:54:30' overrides: 16783533!
new

	self initialize! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ijgt 5/17/2021 20:54:40' prior: 50866117 overrides: 16783533!
new

	^self initialize! !
!Portfolio methodsFor: 'no messages' stamp: 'ijgt 5/17/2021 20:55:30' overrides: 16896425!
initialize

	accounts := OrderedCollection new! !

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/17/2021 20:55:43'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/17/2021 20:55:43'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/17/2021 20:55:52'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/17/2021 20:56:23'!
accounts

	^ accounts ! !

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/17/2021 20:56:28'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/17/2021 20:56:28'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/17/2021 20:57:05'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/17/2021 20:57:05'!
ERROR!
!Portfolio class methodsFor: 'creation' stamp: 'ijgt 5/17/2021 20:57:50' prior: 50866122 overrides: 16783533!
new

	self initialize! !

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/17/2021 20:57:57'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/17/2021 20:57:57'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/17/2021 20:58:35'!
ERROR!
!Portfolio class methodsFor: 'algo' stamp: 'ijgt 5/17/2021 20:59:17'!
accounts
	self shouldBeImplemented.! !
!Portfolio class methodsFor: 'algo' stamp: 'ijgt 5/17/2021 20:59:32' prior: 50866161!
accounts
	! !

!methodRemoval: Portfolio class #accounts stamp: 'ijgt 5/17/2021 20:59:45'!
accounts
	!
!Portfolio class methodsFor: 'creation' stamp: 'ijgt 5/17/2021 21:00:38' prior: 50866151 overrides: 16783533!
new

	^ self new initialize! !
!Portfolio class methodsFor: 'creation' stamp: 'ijgt 5/17/2021 21:01:05'!
create

	^ self new initialize! !
!Portfolio class methodsFor: 'creation' stamp: 'ijgt 5/17/2021 21:01:16' prior: 50866172 overrides: 16783533!
new

	^ self initialize! !
!Portfolio class methodsFor: 'creation' stamp: 'ijgt 5/17/2021 21:01:21' prior: 50866181 overrides: 16783533!
new

	self initialize! !
!Portfolio class methodsFor: 'creation' stamp: 'ijgt 5/17/2021 21:01:30' prior: 50866186 overrides: 16783533!
new

	^ self initialize! !

!methodRemoval: Portfolio class #new stamp: 'ijgt 5/17/2021 21:01:49'!
new

	^ self initialize!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/17/2021 21:01:59' prior: 50866106!
test01

	|aPortfolio|
	aPortfolio := Portfolio create.
	self assert: (aPortfolio accounts isEmpty)! !

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/17/2021 21:02:02'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/17/2021 21:02:04'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/17/2021 21:04:54'!
test02

	|aPortfolio anAccount|
	aPortfolio := Portfolio create.
	aPortfolio addAccount: anAccount.
	self assert: (aPortfolio accounts isEmpty)! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/17/2021 21:06:05' prior: 50866209!
test02

	|aPortfolio account|
	aPortfolio := Portfolio create.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	aPortfolio addAccount: account.
	self assert: (aPortfolio accounts isEmpty)! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/17/2021 21:06:44' prior: 50866217!
test02

	|aPortfolio account|
	aPortfolio := Portfolio create.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	aPortfolio addAccount: account.
	self assert: (aPortfolio accounts isEmpty)! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/17/2021 21:08:22' prior: 50866228!
test02

	|aPortfolio account|
	aPortfolio := Portfolio create.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	self assert: (aPortfolio accounts includes: account) .! !

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/17/2021 21:08:27'!
ERROR!
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/17/2021 21:08:43'!
addAccount: aReceptiveAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/17/2021 21:09:12' prior: 50866250!
addAccount: aReceptiveAccount 
	accounts add: aReceptiveAccount! !
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/17/2021 21:09:17' prior: 50866255!
addAccount: aReceptiveAccount

	accounts add: aReceptiveAccount! !

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/17/2021 21:10:32'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/17/2021 21:10:32'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/17/2021 21:10:32'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/17/2021 21:10:50'!
test03

	|aPortfolio account|
	aPortfolio := Portfolio create.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	aPortfolio addAccount: account.
	self assert: (aPortfolio accounts includes: account) .! !

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/17/2021 21:10:52'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/17/2021 21:10:52'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/17/2021 21:10:52'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/17/2021 21:10:52'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'ijgt 5/17/2021 21:43:26' prior: 50865992!
withdrawalsBalance

	^ (transactions select: [:aTransaction | aTransaction isKindOf: Withdraw]) sum: [:aTransaction | aTransaction value] ifEmpty: [0]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'ijgt 5/17/2021 21:43:37' prior: 50865985!
depositsBalance

	^ (transactions select: [:aTransaction | aTransaction isKindOf: Deposit ]) sum: [:aTransaction | aTransaction value] ifEmpty: [0]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 5/17/2021 21:43:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 5/17/2021 21:43:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 5/17/2021 21:43:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 5/17/2021 21:43:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 5/17/2021 21:43:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 5/17/2021 21:43:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 5/17/2021 21:43:41'!
PASSED!

!methodRemoval: AccountTransaction #isDeposit stamp: 'ijgt 5/17/2021 21:43:52'!
isDeposit

	self subclassResponsibility !

!methodRemoval: AccountTransaction #isWithdraw stamp: 'ijgt 5/17/2021 21:43:56'!
isWithdraw

	self subclassResponsibility !

!methodRemoval: Withdraw #isDeposit stamp: 'ijgt 5/17/2021 21:44:08'!
isDeposit

	^false!

!methodRemoval: Withdraw #isWithdraw stamp: 'ijgt 5/17/2021 21:44:12'!
isWithdraw

	^true!

!methodRemoval: Deposit #isDeposit stamp: 'ijgt 5/17/2021 21:44:19'!
isDeposit

	^ true!

!methodRemoval: Deposit #isWithdraw stamp: 'ijgt 5/17/2021 21:44:23'!
isWithdraw

	^ false!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/17/2021 21:46:06'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/17/2021 21:48:29' prior: 50866272!
test03

	|aPortfolio account|
	aPortfolio := Portfolio create.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio addAccount: account.
	self assert: (aPortfolio balance) equals: 100! !

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/17/2021 21:48:32'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'ijgt 5/17/2021 21:48:49'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'balance' stamp: 'ijgt 5/17/2021 21:49:30' prior: 50866369!
balance
	
	^ accounts sum! !

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/17/2021 21:49:33'!
FAILURE!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/17/2021 21:49:45'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'ijgt 5/17/2021 21:52:13' prior: 50866373!
balance
	
	^ 100! !

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/17/2021 21:52:18'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/17/2021 21:52:18'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/17/2021 21:52:18'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/17/2021 21:52:32'!
test04

	|aPortfolio account|
	aPortfolio := Portfolio create.
	account := ReceptiveAccount new.
	Deposit register: 101 on: account.
	
	aPortfolio addAccount: account.
	self assert: (aPortfolio balance) equals: 101! !

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/17/2021 21:52:37'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/17/2021 21:53:56' prior: 50866392!
test04

	|aPortfolio account|
	aPortfolio := Portfolio create.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	
	aPortfolio addAccount: account.
	self assert: (aPortfolio balance) equals: 200! !

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/17/2021 21:53:57'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/17/2021 21:55:19' prior: 50866404!
test04

	|aPortfolio account secondAccount|
	aPortfolio := Portfolio create.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	secondAccount := ReceptiveAccount new.
	Deposit register: 100 on: secondAccount .	
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: secondAccount.
	self assert: (aPortfolio balance) equals: 200! !

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/17/2021 21:55:51'!
FAILURE!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/17/2021 21:55:51'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'ijgt 5/17/2021 21:56:39' prior: 50866382!
balance
	
	^ accounts sum: [:account | account balance]! !

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/17/2021 21:56:43'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/17/2021 21:56:50'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/17/2021 21:59:59' prior: 50866417!
test04

	|aPortfolio account |
	aPortfolio := Portfolio create.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: account.
	self assert: (aPortfolio balance) equals: 200! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/17/2021 22:00:33'!
test05

	|aPortfolio account |
	aPortfolio := Portfolio create.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: account.
	self assert: (aPortfolio balance) equals: 200! !

----QUIT----(17 May 2021 22:15:18) CuisUniversity-4532.image priorSource: 17088489!

----STARTUP---- (20 May 2021 16:14:14) as /home/igna/Desktop/CuisNuevo/CuisUniversity-4532.image!


!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/20/2021 16:14:47'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 16:21:09' prior: 50866446!
test04

	|aPortfolio account |
	aPortfolio := Portfolio create.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: account.
	self assert: (aPortfolio balance) equals: 100! !

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/20/2021 16:21:13'!
FAILURE!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/20/2021 16:23:19'!
FAILURE!
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/20/2021 16:26:26' prior: 50866260!
addAccount: aReceptiveAccount

	(accounts includes: aReceptiveAccount) ifFalse: [accounts add: aReceptiveAccount].! !

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/20/2021 16:26:42'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/20/2021 16:26:42'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/20/2021 16:26:42'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/20/2021 16:26:42'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/20/2021 16:26:42'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/20/2021 16:26:42'!
FAILURE!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/20/2021 16:26:42'!
FAILURE!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/20/2021 16:26:55'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 16:27:08' prior: 50866198!
test01

	|aPortfolio|
	aPortfolio := Portfolio new.
	self assert: (aPortfolio accounts isEmpty)! !

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/20/2021 16:27:09'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/20/2021 16:27:09'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/20/2021 16:27:09'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/20/2021 16:27:09'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/20/2021 16:27:09'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/20/2021 16:27:09'!
FAILURE!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/20/2021 16:27:09'!
FAILURE!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/20/2021 16:27:15'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 16:27:29' prior: 50866239!
test02

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	self assert: (aPortfolio accounts includes: account) .! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 16:27:34' prior: 50866357!
test03

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio addAccount: account.
	self assert: (aPortfolio balance) equals: 100! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 16:27:40' prior: 50866476!
test04

	|aPortfolio account |
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: account.
	self assert: (aPortfolio balance) equals: 100! !

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/20/2021 16:27:44'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/20/2021 16:27:46'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/20/2021 16:27:47'!
PASSED!

!methodRemoval: Portfolio class #create stamp: 'ijgt 5/20/2021 16:28:01'!
create

	^ self new initialize!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 16:28:42' prior: 50866457!
test05

	|aPortfolio account |
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: account.
	self assert: (aPortfolio balance) equals: 200! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 16:30:05' prior: 50866583!
test05

	|aPortfolio account aSecondPortfolio|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aSecondPortfolio := Portfolio new.
	
	aPortfolio addAccount: aSecondPortfolio.
	self assert: (aPortfolio balance) equals: 100! !

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/20/2021 16:30:07'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'ijgt 5/20/2021 16:30:51' prior: 50866436!
balance
	
	^ accounts sum: [:account | account balance] ifEmpty: [0]! !

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/20/2021 16:30:57'!
FAILURE!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/20/2021 16:30:57'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 16:31:35' prior: 50866594!
test05

	|aPortfolio account aSecondPortfolio|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aSecondPortfolio := Portfolio new.
	
	aSecondPortfolio addAccount: aPortfolio.
	aPortfolio addAccount: aSecondPortfolio.
	self assert: (aPortfolio balance) equals: 100! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 16:32:04' prior: 50866618!
test05

	|aPortfolio account aSecondPortfolio|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aSecondPortfolio := Portfolio new.
	
	aSecondPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self assert: (aPortfolio balance) equals: 100! !

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/20/2021 16:32:07'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/20/2021 16:32:07'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/20/2021 16:32:07'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/20/2021 16:32:07'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/20/2021 16:32:07'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/20/2021 16:32:07'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 16:33:05' prior: 50866631!
test05

	|aPortfolio account aSecondPortfolio|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aSecondPortfolio := Portfolio new.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self assert: (aPortfolio balance) equals: 100! !

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/20/2021 16:33:07'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/20/2021 16:33:07'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/20/2021 16:33:07'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/20/2021 16:33:07'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/20/2021 16:33:07'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/20/2021 16:33:07'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 16:35:14'!
test06

	|aPortfolio|
	aPortfolio := Portfolio new.
	
	aPortfolio addAccount: aPortfolio.
	self assert: (aPortfolio balance) equals: 100! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 16:37:53' prior: 50866685!
test06

	|aPortfolio|
	aPortfolio := Portfolio new.
	
	aPortfolio addAccount: aPortfolio.
	self assert: [aPortfolio accounts isEmpty]! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 16:38:00' prior: 50866693!
test06

	|aPortfolio|
	aPortfolio := Portfolio new.
	
	aPortfolio addAccount: aPortfolio.
	self assert: aPortfolio accounts isEmpty! !

----SNAPSHOT----(20 May 2021 16:38:16) CuisUniversity-4532.image priorSource: 17114139!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/20/2021 16:38:25'!
FAILURE!
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/20/2021 16:42:31' prior: 50866492!
addAccount: aReceptiveAccount

	(self ~= aReceptiveAccount and: [accounts includes: aReceptiveAccount]) ifFalse: [accounts add: aReceptiveAccount].! !

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/20/2021 16:42:32'!
FAILURE!
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/20/2021 16:43:25' prior: 50866712!
addAccount: aReceptiveAccount

	((self ~= aReceptiveAccount) and: [accounts includes: aReceptiveAccount]) ifFalse: [accounts add: aReceptiveAccount].! !

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/20/2021 16:43:26'!
FAILURE!
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/20/2021 16:44:25' prior: 50866722!
addAccount: aReceptiveAccount

	((self ~= aReceptiveAccount) or: [accounts includes: aReceptiveAccount]) ifFalse: [accounts add: aReceptiveAccount].! !

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/20/2021 16:44:35'!
FAILURE!
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/20/2021 16:45:57' prior: 50866732!
addAccount: aReceptiveAccount

	((self == aReceptiveAccount) or: [accounts includes: aReceptiveAccount]) ifFalse: [accounts add: aReceptiveAccount].! !

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/20/2021 16:46:05'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/20/2021 16:46:11'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/20/2021 16:46:11'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/20/2021 16:46:11'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/20/2021 16:46:11'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/20/2021 16:46:11'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/20/2021 16:46:11'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 16:48:21'!
test07

	|aPortfolio aSecondPortfolio|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	
	aPortfolio addAccount: aSecondPortfolio.
	aSecondPortfolio addAccount: aPortfolio.
	self assert: aSecondPortfolio accounts isEmpty! !
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/20/2021 16:49:45' prior: 50866742!
addAccount: anAccount

	((self == anAccount) or: [accounts includes: anAccount]) ifFalse: [accounts add: anAccount].! !

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/20/2021 16:49:55'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/20/2021 16:49:57'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/20/2021 16:49:58'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/20/2021 16:50:00'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/20/2021 16:50:01'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/20/2021 16:50:03'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/20/2021 20:12:08'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/20/2021 20:12:10'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/20/2021 20:12:11'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 20:14:19' prior: 50866562!
test04

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: account.
	self assert: (aPortfolio balance) equals: 100! !

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/20/2021 20:14:20'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/20/2021 20:14:20'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/20/2021 20:14:20'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/20/2021 20:14:20'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/20/2021 20:14:20'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/20/2021 20:14:20'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/20/2021 20:14:20'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/20/2021 20:14:20'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/20/2021 20:14:20'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 20:19:34' prior: 50866805!
test04

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio addAccount: account.
	self should: [aPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: Portfolio accountCanNotBeAddedErrorDescription]! !

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/20/2021 20:19:39'!
FAILURE!
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/20/2021 20:21:31' prior: 50866777!
addAccount: anAccount

	((self == anAccount) or: [accounts includes: anAccount]) ifTrue: [self error: self accountCanNotBeAddedErrorDescription].
	accounts add: anAccount! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 20:24:54' prior: 50866837!
test04

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio addAccount: account.
	self should: [aPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription]! !
!Portfolio methodsFor: 'error descriptions' stamp: 'ijgt 5/20/2021 20:26:10'!
accountCanNotBeAddedErrorDescription

	^ ''! !
!Portfolio methodsFor: 'error descriptions' stamp: 'ijgt 5/20/2021 20:28:38' prior: 50866876!
accountCanNotBeAddedErrorDescription

	^ 'Account already exists in Portfolio, or is the Portfolio itself.'! !

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/20/2021 20:29:07'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 20:31:39' prior: 50866658!
test05

	|aPortfolio account aSecondPortfolio|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aSecondPortfolio := Portfolio new.
	
	aPortfolio addAccount: account.
	self should: [aPortfolio addAccount: aSecondPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription]! !

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/20/2021 20:31:44'!
FAILURE!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/20/2021 20:31:44'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 16:33:05' prior: 50866890!
test05

	|aPortfolio account aSecondPortfolio|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aSecondPortfolio := Portfolio new.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self assert: (aPortfolio balance) equals: 100! !

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/20/2021 20:32:20'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 20:32:46' prior: 50866700!
test06

	|aPortfolio|
	aPortfolio := Portfolio new.
	
	
	
	aPortfolio addAccount: aPortfolio.
	self assert: aPortfolio accounts isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 20:33:17' prior: 50866926!
test06

	|aPortfolio|
	aPortfolio := Portfolio new.
	
	self should: [aPortfolio addAccount: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].! !

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/20/2021 20:33:27'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/20/2021 20:33:27'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/20/2021 20:33:27'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/20/2021 20:33:27'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/20/2021 20:33:27'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/20/2021 20:33:27'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/20/2021 20:33:27'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/20/2021 20:33:27'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/20/2021 20:33:27'!
FAILURE!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/20/2021 20:33:33'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/20/2021 20:34:34' prior: 50866766!
test07

	|aPortfolio aSecondPortfolio|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aSecondPortfolio addAccount: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aSecondPortfolio accounts isEmpty! !

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/20/2021 20:34:36'!
FAILURE!

Object subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'ijgt 5/20/2021 20:47:32'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'initialize' stamp: 'ijgt 5/20/2021 20:47:51' prior: 50866126 overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/20/2021 20:51:03' prior: 50866853!
addAccount: anAccount

	(self canAddAccount: anAccount) ifFalse: [self error: self accountCanNotBeAddedErrorDescription].
	accounts add: anAccount! !
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/20/2021 20:54:39'!
canAddAccount: anAccount

	(self == anAccount or: [accounts includes: anAccount]) not.
	parents do: []! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'ijgt 5/20/2021 21:59:46'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts parents rootPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/20/2021 21:59:37' prior: 50867012!
canAddAccount: anAccount

	(self == anAccount or: [accounts includes: anAccount]) not.
	rootPortfolios do: [:aPortfolio | aPortfolio canAddAccount: anAccount]
	! !

Object subclass: #Portfolio
	instanceVariableNames: 'accounts rootPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'ijgt 5/20/2021 21:59:56'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts rootPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'initialize' stamp: 'ijgt 5/20/2021 22:00:33' prior: 50866999 overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	rootPortfolios := OrderedCollection new.! !
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/21/2021 15:43:10'!
register: anAccount

	(self canAddAccount: anAccount) ifFalse: [self error: self accountCanNotBeAddedErrorDescription].
	accounts add: anAccount! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 15:43:10' prior: 50866862!
test04

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio register: account.
	self should: [aPortfolio register: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 15:43:10' prior: 50866968!
test07

	|aPortfolio aSecondPortfolio|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	
	aPortfolio register: aSecondPortfolio.
	self should: [aSecondPortfolio register: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aSecondPortfolio accounts isEmpty! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 15:43:10' prior: 50866911!
test05

	|aPortfolio account aSecondPortfolio|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aSecondPortfolio := Portfolio new.
	
	aPortfolio register: account.
	aPortfolio register: aSecondPortfolio.
	self assert: (aPortfolio balance) equals: 100! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 15:43:10' prior: 50866933!
test06

	|aPortfolio|
	aPortfolio := Portfolio new.
	
	self should: [aPortfolio register: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 15:43:10' prior: 50866552!
test03

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio register: account.
	self assert: (aPortfolio balance) equals: 100! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 15:43:10' prior: 50866543!
test02

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio register: account.
	self assert: (aPortfolio accounts includes: account) .! !

!methodRemoval: Portfolio #addAccount: stamp: 'ijgt 5/21/2021 15:43:10'!
addAccount: anAccount

	(self canAddAccount: anAccount) ifFalse: [self error: self accountCanNotBeAddedErrorDescription].
	accounts add: anAccount!
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/21/2021 15:43:49'!
canRegister: anAccount

	(self == anAccount or: [accounts includes: anAccount]) not.
	rootPortfolios do: [:aPortfolio | aPortfolio canAddAccount: anAccount]
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 15:43:49' prior: 50867027!
canAddAccount: anAccount

	(self == anAccount or: [accounts includes: anAccount]) not.
	rootPortfolios do: [:aPortfolio | aPortfolio canRegister: anAccount]
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 15:43:49' prior: 50867054!
register: anAccount

	(self canRegister: anAccount) ifFalse: [self error: self accountCanNotBeAddedErrorDescription].
	accounts add: anAccount! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 15:43:49' prior: 50867141!
canRegister: anAccount

	(self == anAccount or: [accounts includes: anAccount]) not.
	rootPortfolios do: [:aPortfolio | aPortfolio canRegister: anAccount]
	! !

!methodRemoval: Portfolio #canAddAccount: stamp: 'ijgt 5/21/2021 15:43:49'!
canAddAccount: anAccount

	(self == anAccount or: [accounts includes: anAccount]) not.
	rootPortfolios do: [:aPortfolio | aPortfolio canRegister: anAccount]
	!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 15:47:27'!
test08

	|aPortfolio|
	aPortfolio := Portfolio new.
	
	self should: [aPortfolio register: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 15:47:56'!
test99

	|aPortfolio aSecondPortfolio|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	
	aPortfolio register: aSecondPortfolio.
	self should: [aSecondPortfolio register: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aSecondPortfolio accounts isEmpty! !

!methodRemoval: PortfolioTest #test07 stamp: 'ijgt 5/21/2021 15:47:56'!
test07

	|aPortfolio aSecondPortfolio|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	
	aPortfolio register: aSecondPortfolio.
	self should: [aSecondPortfolio register: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aSecondPortfolio accounts isEmpty!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 15:48:02'!
test07

	|aPortfolio|
	aPortfolio := Portfolio new.
	
	self should: [aPortfolio register: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].! !

!methodRemoval: PortfolioTest #test08 stamp: 'ijgt 5/21/2021 15:48:08'!
test08

	|aPortfolio|
	aPortfolio := Portfolio new.
	
	self should: [aPortfolio register: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 15:48:36' prior: 50867221!
test07

	|aPortfolio|
	aPortfolio := Portfolio new.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 15:55:26' prior: 50867241!
test07

	|aPortfolio account |
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	self assert: (aPortfolio transactions) isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 15:55:42' prior: 50867246!
test07

	|aPortfolio |
	aPortfolio := Portfolio new.
	
	self assert: (aPortfolio transactions) isEmpty! !

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 15:55:49'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 15:56:10'!
transactions
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 15:56:37' prior: 50867263!
transactions
	
	^ OrderedCollection new! !

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 15:56:43'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 15:56:43'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 15:56:43'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/21/2021 15:56:43'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/21/2021 15:56:43'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/21/2021 15:56:43'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/21/2021 15:56:43'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 15:56:43'!
PASSED!

!testRun: #PortfolioTest #test99 stamp: 'ijgt 5/21/2021 15:56:43'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 15:57:05'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 15:57:07'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 15:57:07'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'ijgt 5/21/2021 16:04:47'!
addAccount: aTransaction

	transactions add: aTransaction 
! !
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/21/2021 16:04:47'!
addAccount: anAccount

	(self canRegister: anAccount) ifFalse: [self error: self accountCanNotBeAddedErrorDescription].
	accounts add: anAccount! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 16:04:47' prior: 50867116!
test03

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio addAccount: account.
	self assert: (aPortfolio balance) equals: 100! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 16:04:47' prior: 50867126!
test02

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	self assert: (aPortfolio accounts includes: account) .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 16:04:47' prior: 50867062!
test04

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio addAccount: account.
	self should: [aPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 16:04:47' prior: 50867192!
test99

	|aPortfolio aSecondPortfolio|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aSecondPortfolio addAccount: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aSecondPortfolio accounts isEmpty! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 16:04:47' prior: 50867092!
test05

	|aPortfolio account aSecondPortfolio|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aSecondPortfolio := Portfolio new.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self assert: (aPortfolio balance) equals: 100! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 16:04:47' prior: 50867105!
test06

	|aPortfolio|
	aPortfolio := Portfolio new.
	
	self should: [aPortfolio addAccount: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].! !
!AccountTransaction class methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 16:04:47' prior: 50865783!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account addAccount: transaction.
		
	^ transaction! !

!methodRemoval: ReceptiveAccount #register: stamp: 'ijgt 5/21/2021 16:04:47'!
register: aTransaction

	transactions add: aTransaction 
!

!methodRemoval: Portfolio #register: stamp: 'ijgt 5/21/2021 16:04:47'!
register: anAccount

	(self canRegister: anAccount) ifFalse: [self error: self accountCanNotBeAddedErrorDescription].
	accounts add: anAccount!
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/21/2021 16:05:32'!
canAddAccount: anAccount

	(self == anAccount or: [accounts includes: anAccount]) not.
	rootPortfolios do: [:aPortfolio | aPortfolio canRegister: anAccount]
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 16:05:32' prior: 50867305!
addAccount: anAccount

	(self canAddAccount: anAccount) ifFalse: [self error: self accountCanNotBeAddedErrorDescription].
	accounts add: anAccount! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 16:05:32' prior: 50867167!
canRegister: anAccount

	(self == anAccount or: [accounts includes: anAccount]) not.
	rootPortfolios do: [:aPortfolio | aPortfolio canAddAccount: anAccount]
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 16:05:32' prior: 50867404!
canAddAccount: anAccount

	(self == anAccount or: [accounts includes: anAccount]) not.
	rootPortfolios do: [:aPortfolio | aPortfolio canAddAccount: anAccount]
	! !

!methodRemoval: Portfolio #canRegister: stamp: 'ijgt 5/21/2021 16:05:32'!
canRegister: anAccount

	(self == anAccount or: [accounts includes: anAccount]) not.
	rootPortfolios do: [:aPortfolio | aPortfolio canAddAccount: anAccount]
	!
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/21/2021 16:18:05' prior: 50867413!
addAccount: anAccount

	(self canAddAccount: anAccount) ifFalse: [self error: self accountCanNotBeAddedErrorDescription].

	(anAccount isKindOf: Portfolio) ifTrue: [
		anAccount addRootPortfolios: rootPortfolios.
		].
	accounts add: anAccount! !
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/21/2021 16:19:43'!
addRootPortfolios: aPortfolioCollection

	 aPortfolioCollection do:[:aPortfolio | rootPortfolios add: aPortfolio].

! !
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/21/2021 16:24:32' prior: 50867445!
addAccount: anAccount

	(self canAddAccount: anAccount) ifFalse: [self error: self accountCanNotBeAddedErrorDescription].

	(anAccount isKindOf: Portfolio) ifTrue: [
		anAccount addRootPortfolios: rootPortfolios ofParent: self.
		].
	accounts add: anAccount! !
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/21/2021 16:34:19' prior: 50867455!
addRootPortfolios: aPortfolioCollection

	rootPortfolios ifEmpty: [rootPortfolios add: self] ifNotEmpty: [aPortfolioCollection do:[:aPortfolio | rootPortfolios add: aPortfolio] ].
	 

! !
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/21/2021 16:50:03' prior: 50867462!
addAccount: anAccount

	(self canAddAccount: anAccount) ifFalse: [self error: self accountCanNotBeAddedErrorDescription].

	(anAccount isKindOf: Portfolio) ifTrue: [
		anAccount addRootPortfolios: rootPortfolios ofParent: self.
		].
	accounts add: anAccount! !
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/21/2021 16:50:56'!
addRootPortfolios: aPortfolioCollection ofParent: aParentPortfolio

	aPortfolioCollection ifEmpty: [rootPortfolios add: aParentPortfolio ] ifNotEmpty: [aPortfolioCollection do:[:aPortfolio | rootPortfolios add: aPortfolio] ].
	 

! !

!methodRemoval: Portfolio #addRootPortfolios: stamp: 'ijgt 5/21/2021 16:51:01'!
addRootPortfolios: aPortfolioCollection

	rootPortfolios ifEmpty: [rootPortfolios add: self] ifNotEmpty: [aPortfolioCollection do:[:aPortfolio | rootPortfolios add: aPortfolio] ].
	 

!
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/21/2021 16:53:31'!
assertCanAddAccount: anAccount

	(self == anAccount or: [accounts includes: anAccount]) not.
	rootPortfolios do: [:aPortfolio | aPortfolio canAddAccount: anAccount]
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 16:53:31' prior: 50867430!
canAddAccount: anAccount

	(self == anAccount or: [accounts includes: anAccount]) not.
	rootPortfolios do: [:aPortfolio | aPortfolio assertCanAddAccount: anAccount]
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 16:53:31' prior: 50867482!
addAccount: anAccount

	(self assertCanAddAccount: anAccount) ifFalse: [self error: self accountCanNotBeAddedErrorDescription].

	(anAccount isKindOf: Portfolio) ifTrue: [
		anAccount addRootPortfolios: rootPortfolios ofParent: self.
		].
	accounts add: anAccount! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 16:53:31' prior: 50867511!
assertCanAddAccount: anAccount

	(self == anAccount or: [accounts includes: anAccount]) not.
	rootPortfolios do: [:aPortfolio | aPortfolio assertCanAddAccount: anAccount]
	! !

!methodRemoval: Portfolio #canAddAccount: stamp: 'ijgt 5/21/2021 16:53:31'!
canAddAccount: anAccount

	(self == anAccount or: [accounts includes: anAccount]) not.
	rootPortfolios do: [:aPortfolio | aPortfolio assertCanAddAccount: anAccount]
	!
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/21/2021 17:25:59' prior: 50867541!
assertCanAddAccount: anAccount

	^ (rootPortfolios allSatisfy: [:ada | ada containsAccount: anAccount not]) "esto es suficiente si rootPortfolios es no vacio"
	and: [self containsAccount: anAccount not] "si rootPortfolios es vacio, necesito ver containsAccount de migo mismo"
	"La segunda parte del and: es redundante si rootPortfolios es no vacio. Por ahora lo dejamos asi por elegancia"
	! !
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/21/2021 17:30:24'!
containsAccount: anAccount
	
	^ self == anAccount or: [accounts anySatisfy: [:account | account containsAccount: anAccount] ]! !

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 17:30:38'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:30:41'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:30:41'!
ERROR!
!ReceptiveAccount methodsFor: 'testing' stamp: 'ijgt 5/21/2021 17:32:11'!
containsAccount: anAccount

	^ self == anAccount! !

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 17:32:35'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:32:36'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:32:36'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:32:57'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:32:57'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/21/2021 17:33:19' prior: 50867557!
assertCanAddAccount: anAccount

	^ (rootPortfolios allSatisfy: [:ada | (ada containsAccount: anAccount) not]) "esto es suficiente si rootPortfolios es no vacio"
	and: [(self containsAccount: anAccount) not] "si rootPortfolios es vacio, necesito ver containsAccount de migo mismo"
	"La segunda parte del and: es redundante si rootPortfolios es no vacio. Por ahora lo dejamos asi por elegancia"
	! !

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:33:20'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:33:23'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/21/2021 17:33:25'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/21/2021 17:33:26'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/21/2021 17:33:27'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/21/2021 17:33:29'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 17:33:30'!
PASSED!

!testRun: #PortfolioTest #test99 stamp: 'ijgt 5/21/2021 17:33:43'!
PASSED!

!testRun: #PortfolioTest #test99 stamp: 'ijgt 5/21/2021 17:33:45'!
PASSED!

Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Account category: 'Portfolio-Ejercicio' stamp: 'ijgt 5/21/2021 17:40:01'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Account subclass: #Portfolio
	instanceVariableNames: 'accounts rootPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'ijgt 5/21/2021 17:41:00'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts rootPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'ijgt 5/21/2021 17:41:21'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Account methodsFor: 'no messages' stamp: 'ijgt 5/21/2021 17:43:04'!
balance

	self subclassResponsibility ! !
!Account methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 17:44:05'!
hasRegistered

	self subclassResponsibility ! !
!Account methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 17:44:38'!
addAccount: anAccount

	self subclassResponsibility ! !
!Account methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 17:44:55'!
transactions

	self subclassResponsibility ! !
!Account methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 17:45:16'!
hasRegistered: aTransaction

	self subclassResponsibility ! !

!methodRemoval: Account #hasRegistered stamp: 'ijgt 5/21/2021 17:45:19'!
hasRegistered

	self subclassResponsibility !
!Account methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 17:45:59'!
containsAccount: anAccount

	self subclassResponsibility ! !
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/21/2021 17:51:06' prior: 50867529 overrides: 50867684!
addAccount: anAccount

	(self assertCanAddAccount: anAccount) ifFalse: [self error: self accountCanNotBeAddedErrorDescription].
	anAccount addRootPortfolios: rootPortfolios ofParent: self.
	accounts add: anAccount! !
!ReceptiveAccount methodsFor: 'add' stamp: 'ijgt 5/21/2021 17:51:49'!
register: aTransaction

	transactions add: aTransaction 
! !
!Account methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 17:51:49'!
register: anAccount

	self subclassResponsibility ! !
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/21/2021 17:51:49' overrides: 50867721!
register: anAccount

	(self assertCanAddAccount: anAccount) ifFalse: [self error: self accountCanNotBeAddedErrorDescription].
	anAccount addRootPortfolios: rootPortfolios ofParent: self.
	accounts add: anAccount! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 17:51:49' prior: 50867375!
test06

	|aPortfolio|
	aPortfolio := Portfolio new.
	
	self should: [aPortfolio register: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 17:51:49' prior: 50867313!
test03

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio register: account.
	self assert: (aPortfolio balance) equals: 100! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 17:51:49' prior: 50867332!
test04

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio register: account.
	self should: [aPortfolio register: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 17:51:49' prior: 50867323!
test02

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio register: account.
	self assert: (aPortfolio accounts includes: account) .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 17:51:49' prior: 50867346!
test99

	|aPortfolio aSecondPortfolio|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	
	aPortfolio register: aSecondPortfolio.
	self should: [aSecondPortfolio register: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aSecondPortfolio accounts isEmpty! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 17:51:49' prior: 50867362!
test05

	|aPortfolio account aSecondPortfolio|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aSecondPortfolio := Portfolio new.
	
	aPortfolio register: account.
	aPortfolio register: aSecondPortfolio.
	self assert: (aPortfolio balance) equals: 100! !
!AccountTransaction class methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 17:51:49' prior: 50867386!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!methodRemoval: ReceptiveAccount #addAccount: stamp: 'ijgt 5/21/2021 17:51:49'!
addAccount: aTransaction

	transactions add: aTransaction 
!

!methodRemoval: Account #addAccount: stamp: 'ijgt 5/21/2021 17:51:49'!
addAccount: anAccount

	self subclassResponsibility !

!methodRemoval: Portfolio #addAccount: stamp: 'ijgt 5/21/2021 17:51:49'!
addAccount: anAccount

	(self assertCanAddAccount: anAccount) ifFalse: [self error: self accountCanNotBeAddedErrorDescription].
	anAccount addRootPortfolios: rootPortfolios ofParent: self.
	accounts add: anAccount!
!ReceptiveAccount methodsFor: 'add' stamp: 'ijgt 5/21/2021 17:52:30'!
addAccount: anAccount

	! !
!Portfolio methodsFor: 'add' stamp: 'ijgt 5/21/2021 17:53:36'!
addAccount: anAccount

	(self assertCanAddAccount: anAccount) ifFalse: [self error: self accountCanNotBeAddedErrorDescription].
	anAccount addRootPortfolios: rootPortfolios ofParent: self.
	accounts add: anAccount! !

!methodRemoval: Portfolio #register: stamp: 'ijgt 5/21/2021 17:53:36'!
register: anAccount

	(self assertCanAddAccount: anAccount) ifFalse: [self error: self accountCanNotBeAddedErrorDescription].
	anAccount addRootPortfolios: rootPortfolios ofParent: self.
	accounts add: anAccount!
!Account methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 17:53:55' prior: 50867721!
register: anTransaction

	self subclassResponsibility ! !
!Account methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 17:54:08'!
addAccount: anAccount

	self subclassResponsibility ! !
!Account methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 17:54:13' prior: 50867856!
register: aTransaction

	self subclassResponsibility ! !

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 17:54:39'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:54:39'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/21/2021 17:54:39'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/21/2021 17:54:39'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/21/2021 17:54:39'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/21/2021 17:54:39'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 17:54:39'!
PASSED!

!testRun: #PortfolioTest #test99 stamp: 'ijgt 5/21/2021 17:54:39'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 17:54:42'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:54:42'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/21/2021 17:54:42'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/21/2021 17:54:42'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/21/2021 17:54:42'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/21/2021 17:54:42'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 17:54:42'!
PASSED!

!testRun: #PortfolioTest #test99 stamp: 'ijgt 5/21/2021 17:54:42'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 17:54:46'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:54:46'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/21/2021 17:54:46'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/21/2021 17:54:46'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/21/2021 17:54:46'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/21/2021 17:54:46'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 17:54:46'!
PASSED!

!testRun: #PortfolioTest #test99 stamp: 'ijgt 5/21/2021 17:54:46'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 17:54:49'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 17:54:53'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 17:54:53'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 17:55:03'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:55:03'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/21/2021 17:55:03'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/21/2021 17:55:03'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/21/2021 17:55:03'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/21/2021 17:55:03'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 17:55:03'!
PASSED!

!testRun: #PortfolioTest #test99 stamp: 'ijgt 5/21/2021 17:55:03'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 17:55:10'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:55:10'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/21/2021 17:55:10'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/21/2021 17:55:10'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/21/2021 17:55:10'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/21/2021 17:55:10'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 17:55:10'!
PASSED!

!testRun: #PortfolioTest #test99 stamp: 'ijgt 5/21/2021 17:55:10'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 17:55:43'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:55:45'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:55:45'!
ERROR!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 17:56:22' prior: 50867771!
test02

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	self assert: (aPortfolio accounts includes: account) .! !

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:56:24'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 17:57:06'!
addRootPortfolios: anOrderedCollection ofParent: aPortfolio 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'ijgt 5/21/2021 17:57:13' prior: 50867990!
addRootPortfolios: anOrderedCollection ofParent: aPortfolio 
	! !

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:57:32'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 17:57:32'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:57:32'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/21/2021 17:57:32'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/21/2021 17:57:32'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/21/2021 17:57:32'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/21/2021 17:57:32'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 17:57:32'!
PASSED!

!testRun: #PortfolioTest #test99 stamp: 'ijgt 5/21/2021 17:57:32'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:57:36'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 17:57:47' prior: 50867747!
test03

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio addAccount: account.
	self assert: (aPortfolio balance) equals: 100! !

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/21/2021 17:57:49'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 17:58:10' prior: 50867757!
test04

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio addAccount: account.
	self should: [aPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription]! !

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/21/2021 17:58:14'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 17:58:28' prior: 50867796!
test05

	|aPortfolio account aSecondPortfolio|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aSecondPortfolio := Portfolio new.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self assert: (aPortfolio balance) equals: 100! !

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/21/2021 17:58:30'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 17:58:30'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:58:30'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/21/2021 17:58:30'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/21/2021 17:58:30'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/21/2021 17:58:30'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/21/2021 17:58:30'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 17:58:30'!
PASSED!

!testRun: #PortfolioTest #test99 stamp: 'ijgt 5/21/2021 17:58:30'!
ERROR!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 17:58:47' prior: 50867736!
test06

	|aPortfolio|
	aPortfolio := Portfolio new.
	
	self should: [aPortfolio addAccount: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].! !

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/21/2021 17:58:49'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 17:58:54'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 17:58:54'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:58:54'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/21/2021 17:58:54'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/21/2021 17:58:54'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/21/2021 17:58:54'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/21/2021 17:58:54'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 17:58:54'!
PASSED!

!testRun: #PortfolioTest #test99 stamp: 'ijgt 5/21/2021 17:58:54'!
ERROR!

!testRun: #PortfolioTest #test99 stamp: 'ijgt 5/21/2021 17:58:54'!
ERROR!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 17:59:01'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 17:59:22' prior: 50867780!
test99

	|aPortfolio aSecondPortfolio|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aSecondPortfolio addAccount: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aSecondPortfolio accounts isEmpty! !

!testRun: #PortfolioTest #test99 stamp: 'ijgt 5/21/2021 17:59:23'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 17:59:27'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 17:59:27'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/21/2021 17:59:27'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/21/2021 17:59:27'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/21/2021 17:59:27'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/21/2021 17:59:27'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 17:59:27'!
PASSED!

!testRun: #PortfolioTest #test99 stamp: 'ijgt 5/21/2021 17:59:27'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 18:06:14' prior: 50868127!
test99

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aSecondPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aSecondPortfolio accounts isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 18:07:55' prior: 50868164!
test99

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aSecondPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aPortfolio accounts includes: account.
	self assert: aPortfolio accounts size equals: 1.! !

!testRun: #PortfolioTest #test99 stamp: 'ijgt 5/21/2021 18:07:57'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 18:08:31'!
test100

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aSecondPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aPortfolio accounts includes: account.
	self assert: aPortfolio accounts size equals: 1.! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 17:59:22' prior: 50868182!
test99

	|aPortfolio aSecondPortfolio|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aSecondPortfolio addAccount: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aSecondPortfolio accounts isEmpty! !

!testRun: #PortfolioTest #test99 stamp: 'ijgt 5/21/2021 18:08:59'!
PASSED!

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/21/2021 18:09:02'!
FAILURE!

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/21/2021 18:09:02'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 18:10:13' prior: 50868203!
test100

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aSecondPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self assert: aPortfolio accounts includes: account! !

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/21/2021 18:10:14'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 18:12:50' prior: 50868245!
test100

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aSecondPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self assert: (aPortfolio containsAccount: account)! !

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/21/2021 18:12:51'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 18:12:51'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 18:12:51'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/21/2021 18:12:51'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/21/2021 18:12:51'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/21/2021 18:12:51'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/21/2021 18:12:51'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 18:12:51'!
PASSED!

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/21/2021 18:12:51'!
PASSED!

!testRun: #PortfolioTest #test99 stamp: 'ijgt 5/21/2021 18:12:51'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 18:08:31' prior: 50868260!
test100

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aSecondPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aPortfolio accounts includes: account.
	self assert: aPortfolio accounts size equals: 1.! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 18:15:38' prior: 50868296!
test100

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aSecondPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: (aPortfolio containsAccount: account).
	self assert: aPortfolio accounts size equals: 1.
	self assert: aSecondPortfolio accounts size equals: 1.! !

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/21/2021 18:15:41'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 18:15:41'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 18:15:41'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/21/2021 18:15:41'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/21/2021 18:15:41'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/21/2021 18:15:41'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/21/2021 18:15:41'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 18:15:41'!
PASSED!

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/21/2021 18:15:41'!
PASSED!

!testRun: #PortfolioTest #test99 stamp: 'ijgt 5/21/2021 18:15:41'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 18:16:17'!
test08

	|aPortfolio |
	aPortfolio := Portfolio new.
	
	self assert: (aPortfolio transactions) isEmpty! !

!methodRemoval: PortfolioTest #test07 stamp: 'ijgt 5/21/2021 18:16:17'!
test07

	|aPortfolio |
	aPortfolio := Portfolio new.
	
	self assert: (aPortfolio transactions) isEmpty!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 18:16:27'!
test07

	|aPortfolio aSecondPortfolio|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aSecondPortfolio addAccount: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aSecondPortfolio accounts isEmpty! !

!methodRemoval: PortfolioTest #test99 stamp: 'ijgt 5/21/2021 18:16:27'!
test99

	|aPortfolio aSecondPortfolio|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aSecondPortfolio addAccount: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aSecondPortfolio accounts isEmpty!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 5/21/2021 18:16:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 5/21/2021 18:16:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 5/21/2021 18:16:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 5/21/2021 18:16:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 5/21/2021 18:16:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 5/21/2021 18:16:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 5/21/2021 18:16:49'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 18:20:34' prior: 50868315!
test100

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aSecondPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: (aPortfolio containsAccount: account).
	self assert: aPortfolio accounts size equals: 1.
	self assert: aSecondPortfolio accounts size equals: 1.! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 18:21:02' prior: 50868427!
test100

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aSecondPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: (aPortfolio containsAccount: account).
	self assert: aPortfolio accounts size equals: 2.
	self assert: aSecondPortfolio accounts isEmpty.! !

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/21/2021 18:21:03'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 18:21:03'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 18:21:03'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/21/2021 18:21:03'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/21/2021 18:21:03'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/21/2021 18:21:03'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/21/2021 18:21:03'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 18:21:03'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'ijgt 5/21/2021 18:21:03'!
PASSED!

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/21/2021 18:21:03'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 18:21:56'!
test101

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aSecondPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: (aPortfolio containsAccount: account).
	self assert: aPortfolio accounts size equals: 2.
	self assert: aSecondPortfolio accounts isEmpty.! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 18:35:15' prior: 50868492!
test101

	|aPortfolio aLeftRootPortfolio aRightRootPortfolio account|
	aPortfolio := Portfolio new.
	aLeftRootPortfolio := Portfolio new.
	aRightRootPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aLeftRootPortfolio addAccount: account.
	aRightRootPortfolio addAccount: account.
	aLeftRootPortfolio addAccount: aPortfolio .
	aRightRootPortfolio addAccount: aPortfolio .
	
	self should: [aPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: (aRightRootPortfolio containsAccount: account).
	self assert: (aLeftRootPortfolio containsAccount: account).
	self assert: aRightRootPortfolio accounts size equals: 2.
	self assert: aLeftRootPortfolio accounts size equals: 2.
	self assert: aPortfolio accounts isEmpty.! !

!testRun: #PortfolioTest #test101 stamp: 'ijgt 5/21/2021 18:35:38'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 18:35:38'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 18:35:38'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/21/2021 18:35:38'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/21/2021 18:35:38'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/21/2021 18:35:38'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/21/2021 18:35:38'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 18:35:38'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'ijgt 5/21/2021 18:35:38'!
PASSED!

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/21/2021 18:35:38'!
PASSED!

!testRun: #PortfolioTest #test101 stamp: 'ijgt 5/21/2021 18:35:38'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 18:37:33'!
test102

	|aPortfolio aLeftRootPortfolio aRightRootPortfolio account|
	aPortfolio := Portfolio new.
	aLeftRootPortfolio := Portfolio new.
	aRightRootPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aLeftRootPortfolio addAccount: account.
	aRightRootPortfolio addAccount: account.
	aLeftRootPortfolio addAccount: aPortfolio .
	aRightRootPortfolio addAccount: aPortfolio .
	
	self should: [aPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: (aRightRootPortfolio containsAccount: account).
	self assert: (aLeftRootPortfolio containsAccount: account).
	self assert: aRightRootPortfolio accounts size equals: 2.
	self assert: aLeftRootPortfolio accounts size equals: 2.
	self assert: aPortfolio accounts isEmpty.! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 18:40:17' prior: 50868569!
test102

	|aPortfolio aLeftParentPortfolio aLeftRootPortfolio aRightRootPortfolio account|
	aPortfolio := Portfolio new.
	aLeftRootPortfolio := Portfolio new.
	aLeftParentPortfolio := Portfolio new.
	aRightRootPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aLeftRootPortfolio addAccount: account.
	aRightRootPortfolio addAccount: account.
	aLeftParentPortfolio addAccount: aPortfolio .
	aRightRootPortfolio addAccount: aPortfolio .
	
	self should: [aPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: (aRightRootPortfolio containsAccount: account).
	self assert: (aLeftRootPortfolio containsAccount: account).
	self assert: aRightRootPortfolio accounts size equals: 2.
	self assert: aLeftRootPortfolio accounts size equals: 1.
	self assert: aLeftParentPortfolio accounts size equals: 1.
	self assert: aPortfolio accounts isEmpty.! !

!testRun: #PortfolioTest #test102 stamp: 'ijgt 5/21/2021 18:40:19'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 18:40:19'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 18:40:19'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/21/2021 18:40:19'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/21/2021 18:40:19'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/21/2021 18:40:19'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/21/2021 18:40:19'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 18:40:19'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'ijgt 5/21/2021 18:40:19'!
PASSED!

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/21/2021 18:40:19'!
PASSED!

!testRun: #PortfolioTest #test101 stamp: 'ijgt 5/21/2021 18:40:19'!
PASSED!

!testRun: #PortfolioTest #test102 stamp: 'ijgt 5/21/2021 18:40:19'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 18:42:34'!
test103

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	aSecondPortfolio addAccount: account.
	self should: [aPortfolio addAccount: aSecondPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aPortfolio accounts size equals: 1.! !

!testRun: #PortfolioTest #test103 stamp: 'ijgt 5/21/2021 18:42:36'!
FAILURE!
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/21/2021 18:44:46' prior: 50867572 overrides: 50867702!
containsAccount: anAccount
	
	^ self == anAccount or: [accounts anySatisfy: [:account | (account containsAccount: anAccount) or: [anAccount containsAccount: account] ] ]! !

!testRun: #PortfolioTest #test103 stamp: 'ijgt 5/21/2021 18:44:54'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/21/2021 18:44:59'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/21/2021 18:44:59'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/21/2021 18:44:59'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/21/2021 18:44:59'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/21/2021 18:44:59'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/21/2021 18:44:59'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/21/2021 18:44:59'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'ijgt 5/21/2021 18:44:59'!
PASSED!

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/21/2021 18:44:59'!
PASSED!

!testRun: #PortfolioTest #test101 stamp: 'ijgt 5/21/2021 18:44:59'!
PASSED!

!testRun: #PortfolioTest #test102 stamp: 'ijgt 5/21/2021 18:44:59'!
PASSED!

!testRun: #PortfolioTest #test103 stamp: 'ijgt 5/21/2021 18:44:59'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 18:45:20'!
test09

	|aPortfolio |
	aPortfolio := Portfolio new.
	
	self assert: (aPortfolio transactions) isEmpty! !

!methodRemoval: PortfolioTest #test08 stamp: 'ijgt 5/21/2021 18:45:20'!
test08

	|aPortfolio |
	aPortfolio := Portfolio new.
	
	self assert: (aPortfolio transactions) isEmpty!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/21/2021 18:45:29'!
test08

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	aSecondPortfolio addAccount: account.
	self should: [aPortfolio addAccount: aSecondPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aPortfolio accounts size equals: 1.! !

!methodRemoval: PortfolioTest #test103 stamp: 'ijgt 5/21/2021 18:45:35'!
test103

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	aSecondPortfolio addAccount: account.
	self should: [aPortfolio addAccount: aSecondPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aPortfolio accounts size equals: 1.!

!testRun: #PortfolioTest #test08 stamp: 'ijgt 5/21/2021 18:45:38'!
PASSED!

----QUIT----(22 May 2021 00:25:51) CuisUniversity-4532.image priorSource: 17121798!

----STARTUP---- (22 May 2021 16:10:50) as /home/igna/Desktop/CuisNuevo/CuisUniversity-4532.image!

!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 16:12:55'!
test10

	|aPortfolio account |
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	self assert: (aPortfolio transactions) isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 16:15:50' prior: 50868774!
test10

	|aPortfolio account transaction|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	aPortfolio addAccount: account.
	
	self assert: (aPortfolio transactions) size equals: 1.
	self assert: aPortfolio transactions includes: transaction.! !

!testRun: #PortfolioTest #test10 stamp: 'ijgt 5/22/2021 16:15:51'!
FAILURE!
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/22/2021 16:21:36' prior: 50867268 overrides: 50867689!
transactions
	
	^ accounts isEmpty ifTrue: [OrderedCollection new] ifFalse: [accounts first transactions]! !

!testRun: #PortfolioTest #test10 stamp: 'ijgt 5/22/2021 16:21:38'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/22/2021 16:21:38'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/22/2021 16:21:38'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/22/2021 16:21:38'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/22/2021 16:21:38'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/22/2021 16:21:38'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/22/2021 16:21:38'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/22/2021 16:21:38'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'ijgt 5/22/2021 16:21:38'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'ijgt 5/22/2021 16:21:38'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'ijgt 5/22/2021 16:21:38'!
PASSED!

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/22/2021 16:21:38'!
PASSED!

!testRun: #PortfolioTest #test101 stamp: 'ijgt 5/22/2021 16:21:38'!
PASSED!

!testRun: #PortfolioTest #test102 stamp: 'ijgt 5/22/2021 16:21:38'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 16:22:28'!
test11

	|aPortfolio account transaction1 transaction2|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction1 := Deposit register: 100 on: account.
	transaction2 := Deposit register: 100 on: account.
	aPortfolio addAccount: account.
	
	self assert: (aPortfolio transactions) size equals: 2.
	self assert: aPortfolio transactions includes: transaction1.
	self assert: aPortfolio transactions includes: transaction2.! !

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 16:22:51'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/22/2021 16:22:51'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/22/2021 16:22:51'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/22/2021 16:22:51'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/22/2021 16:22:51'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/22/2021 16:22:51'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/22/2021 16:22:51'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/22/2021 16:22:51'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'ijgt 5/22/2021 16:22:51'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'ijgt 5/22/2021 16:22:51'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'ijgt 5/22/2021 16:22:51'!
PASSED!

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/22/2021 16:22:51'!
PASSED!

!testRun: #PortfolioTest #test101 stamp: 'ijgt 5/22/2021 16:22:51'!
PASSED!

!testRun: #PortfolioTest #test102 stamp: 'ijgt 5/22/2021 16:22:51'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 16:22:51'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 16:23:32' prior: 50868837!
test11

	|aPortfolio account transaction1 transaction2|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction1 := Deposit register: 100 on: account.
	transaction2 := Deposit register: 100 on: account.
	aPortfolio addAccount: account.
	
	self assert: (transaction1 == transaction2).
	self assert: (aPortfolio transactions) size equals: 2.
	self assert: aPortfolio transactions includes: transaction1.
	self assert: aPortfolio transactions includes: transaction2.! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 16:23:37' prior: 50868890!
test11

	|aPortfolio account transaction1 transaction2|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction1 := Deposit register: 100 on: account.
	transaction2 := Deposit register: 100 on: account.
	aPortfolio addAccount: account.
	
	self deny: (transaction1 == transaction2).
	self assert: (aPortfolio transactions) size equals: 2.
	self assert: aPortfolio transactions includes: transaction1.
	self assert: aPortfolio transactions includes: transaction2.! !

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 16:23:46'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/22/2021 16:23:46'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/22/2021 16:23:46'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/22/2021 16:23:46'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/22/2021 16:23:46'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/22/2021 16:23:46'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/22/2021 16:23:46'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/22/2021 16:23:46'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'ijgt 5/22/2021 16:23:46'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'ijgt 5/22/2021 16:23:46'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'ijgt 5/22/2021 16:23:46'!
PASSED!

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/22/2021 16:23:46'!
PASSED!

!testRun: #PortfolioTest #test101 stamp: 'ijgt 5/22/2021 16:23:46'!
PASSED!

!testRun: #PortfolioTest #test102 stamp: 'ijgt 5/22/2021 16:23:46'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 16:23:46'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 16:25:21' prior: 50868908!
test11

	|aPortfolio account transaction1 transaction2|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction1 := Deposit register: 100 on: account.
	transaction2 := Withdraw register: 100 on: account.
	aPortfolio addAccount: account.
	
	self assert: (aPortfolio transactions) size equals: 2.
	self assert: aPortfolio transactions includes: transaction1.
	self assert: aPortfolio transactions includes: transaction2.! !
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/22/2021 16:25:49' prior: 50868682 overrides: 50867702!
containsAccount: anAccount
	
	^ self = anAccount or: [accounts anySatisfy: [:account | (account containsAccount: anAccount) or: [anAccount containsAccount: account] ] ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'ijgt 5/22/2021 16:26:03' prior: 50867586 overrides: 50867702!
containsAccount: anAccount

	^ self = anAccount! !

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/22/2021 16:26:42'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/22/2021 16:26:42'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/22/2021 16:26:42'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/22/2021 16:26:42'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/22/2021 16:26:42'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/22/2021 16:26:42'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/22/2021 16:26:42'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'ijgt 5/22/2021 16:26:42'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'ijgt 5/22/2021 16:26:42'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'ijgt 5/22/2021 16:26:42'!
PASSED!

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/22/2021 16:26:42'!
PASSED!

!testRun: #PortfolioTest #test101 stamp: 'ijgt 5/22/2021 16:26:42'!
PASSED!

!testRun: #PortfolioTest #test102 stamp: 'ijgt 5/22/2021 16:26:42'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 16:26:42'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 16:28:17' prior: 50868962!
test11

	|aPortfolio account1 account2 transaction1 transaction2|
	aPortfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	transaction1 := Deposit register: 100 on: account1.
	transaction2 := Withdraw register: 100 on: account2.
	aPortfolio addAccount: account1.
	aPortfolio addAccount: account2.
	
	self assert: (aPortfolio transactions) size equals: 2.
	self assert: aPortfolio transactions includes: transaction1.
	self assert: aPortfolio transactions includes: transaction2.! !

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 16:28:18'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 16:31:42' prior: 50869027!
test11

	|aPortfolio account1 account2 transaction1 transaction2|
	aPortfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	transaction1 := Deposit register: 100 on: account1.
	transaction2 := Deposit register: 100 on: account2.
	aPortfolio addAccount: account1.
	aPortfolio addAccount: account2.

	self assert: (aPortfolio transactions) size equals: 2.
	self assert: aPortfolio transactions includes: transaction1.
	self assert: aPortfolio transactions includes: transaction2.! !

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 16:31:43'!
FAILURE!
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/22/2021 16:36:54' prior: 50868798 overrides: 50867689!
transactions
	
	^ accounts inject: OrderedCollection new into: [:transactions :account | transactions addAll: account transactions].! !

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 16:36:58'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 16:37:28' prior: 50869049!
test11

	|aPortfolio account1 account2 transaction1 transaction2|
	aPortfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	transaction1 := Deposit register: 100 on: account1.
	transaction2 := Withdraw register: 100 on: account2.
	aPortfolio addAccount: account1.
	aPortfolio addAccount: account2.

	self assert: (aPortfolio transactions) size equals: 2.
	self assert: aPortfolio transactions includes: transaction1.
	self assert: aPortfolio transactions includes: transaction2.! !

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 16:37:32'!
FAILURE!
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/22/2021 16:38:23' prior: 50869071 overrides: 50867689!
transactions
	
	^ accounts inject: (OrderedCollection new) into: [:transactions :account | transactions addAll: account transactions].! !

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 16:39:43'!
FAILURE!

!testRun: #PortfolioTest #test10 stamp: 'ijgt 5/22/2021 16:44:36'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'ijgt 5/22/2021 16:44:40'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 16:44:44'!
FAILURE!

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 16:44:44'!
FAILURE!

aPortfolio transactions!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 5/22/2021 16:47:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 5/22/2021 16:47:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 5/22/2021 16:47:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 5/22/2021 16:47:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 5/22/2021 16:47:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 5/22/2021 16:47:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 5/22/2021 16:47:36'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/22/2021 16:49:44' prior: 50869104 overrides: 50867689!
transactions
	
	|listOfTransactions|
	listOfTransactions := OrderedCollection new.
	^ accounts inject: listOfTransactions into: [:transactions :account | transactions addAll: account transactions].! !

!testRun: #PortfolioTest #test09 stamp: 'ijgt 5/22/2021 16:49:54'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'ijgt 5/22/2021 16:49:55'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 16:49:57'!
FAILURE!

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 16:49:57'!
FAILURE!
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/22/2021 16:51:46' prior: 50869152 overrides: 50867689!
transactions
	
	|listOfTransactions|
	listOfTransactions := OrderedCollection new.
	^ accounts inject: listOfTransactions into: [:transactions :account | transactions addAll: account transactions. transactions].! !

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 16:51:55'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 16:51:58'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/22/2021 16:52:30' prior: 50869172 overrides: 50867689!
transactions
	
	^ accounts inject: OrderedCollection new into: [:transactions :account | transactions addAll: account transactions. transactions].! !

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/22/2021 16:52:34'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/22/2021 16:52:34'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/22/2021 16:52:34'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/22/2021 16:52:34'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/22/2021 16:52:34'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/22/2021 16:52:34'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/22/2021 16:52:34'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'ijgt 5/22/2021 16:52:34'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'ijgt 5/22/2021 16:52:34'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'ijgt 5/22/2021 16:52:34'!
PASSED!

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/22/2021 16:52:34'!
PASSED!

!testRun: #PortfolioTest #test101 stamp: 'ijgt 5/22/2021 16:52:34'!
PASSED!

!testRun: #PortfolioTest #test102 stamp: 'ijgt 5/22/2021 16:52:34'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 16:52:34'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 16:53:56'!
test12

	|aPortfolio account |
	aPortfolio := Portfolio new.
	
	self assert: (aPortfolio hasRegistered: account)! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 16:54:26' prior: 50869228!
test12

	|aPortfolio account |
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	self assert: (aPortfolio transactions hasRegistered: account)! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 16:56:03' prior: 50869235!
test12

	|aPortfolio |
	aPortfolio := Portfolio new.
	
	self assert: (aPortfolio hasRegistered: Deposit)! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 16:56:24' prior: 50869243!
test12

	|aPortfolio |
	aPortfolio := Portfolio new.
	
	self assert: (aPortfolio hasRegistered: Deposit)! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 16:57:21' prior: 50869250!
test12

	|aPortfolio |
	aPortfolio := Portfolio new.
	
	self assert: (aPortfolio hasRegistered: (Deposit for: 100) )! !

!testRun: #PortfolioTest #test12 stamp: 'ijgt 5/22/2021 16:57:24'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'ijgt 5/22/2021 16:57:34'!
ERROR!
!Account methodsFor: 'as yet unclassified' stamp: 'ijgt 5/22/2021 16:58:44' prior: 50867693!
hasRegistered: aTransaction

	^ false ! !

!testRun: #PortfolioTest #test12 stamp: 'ijgt 5/22/2021 16:58:46'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 16:59:05' prior: 50869257!
test12

	|aPortfolio |
	aPortfolio := Portfolio new.
	
	self deny: (aPortfolio hasRegistered: (Deposit for: 100) )! !

!testRun: #PortfolioTest #test12 stamp: 'ijgt 5/22/2021 16:59:08'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/22/2021 16:59:08'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/22/2021 16:59:08'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/22/2021 16:59:08'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/22/2021 16:59:08'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/22/2021 16:59:08'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/22/2021 16:59:08'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/22/2021 16:59:08'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'ijgt 5/22/2021 16:59:08'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'ijgt 5/22/2021 16:59:08'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'ijgt 5/22/2021 16:59:08'!
PASSED!

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/22/2021 16:59:08'!
PASSED!

!testRun: #PortfolioTest #test101 stamp: 'ijgt 5/22/2021 16:59:08'!
PASSED!

!testRun: #PortfolioTest #test102 stamp: 'ijgt 5/22/2021 16:59:08'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 16:59:08'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'ijgt 5/22/2021 16:59:08'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 17:02:36'!
test13

	|aPortfolio account transaction|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := (Deposit for: 100 on: account).
	
	self assert: (aPortfolio hasRegistered: transaction)! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 17:03:30' prior: 50869320!
test13

	|aPortfolio account transaction|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := (Deposit register: 100 on: account).
	aPortfolio addAccount: account.
	
	self assert: (aPortfolio hasRegistered: transaction)! !

!testRun: #PortfolioTest #test13 stamp: 'ijgt 5/22/2021 17:03:32'!
FAILURE!
!Account methodsFor: 'as yet unclassified' stamp: 'ijgt 5/22/2021 17:05:16' prior: 50869269!
hasRegistered: aTransaction

	^ self transactions includes: aTransaction ! !

!testRun: #PortfolioTest #test13 stamp: 'ijgt 5/22/2021 17:05:18'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/22/2021 17:05:18'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/22/2021 17:05:18'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/22/2021 17:05:18'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/22/2021 17:05:18'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/22/2021 17:05:18'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/22/2021 17:05:18'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/22/2021 17:05:18'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'ijgt 5/22/2021 17:05:18'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'ijgt 5/22/2021 17:05:18'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'ijgt 5/22/2021 17:05:18'!
PASSED!

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/22/2021 17:05:18'!
PASSED!

!testRun: #PortfolioTest #test101 stamp: 'ijgt 5/22/2021 17:05:18'!
PASSED!

!testRun: #PortfolioTest #test102 stamp: 'ijgt 5/22/2021 17:05:18'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 17:05:18'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'ijgt 5/22/2021 17:05:18'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'ijgt 5/22/2021 17:05:18'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/22/2021 17:17:30' prior: 50867602!
assertCanAddAccount: anAccount

	^ (rootPortfolios allSatisfy: [:portfolio | (portfolio containsAccount: anAccount) not]) 
	and: [(self containsAccount: anAccount) not] "si rootPortfolios es vacio, necesito ver containsAccount de migo mismo"
	"La segunda parte del and: es redundante si rootPortfolios es no vacio. Por ahora lo dejamos asi por elegancia"
	! !
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/22/2021 17:17:38' prior: 50869390!
assertCanAddAccount: anAccount

	^ (rootPortfolios allSatisfy: [:portfolio | (portfolio containsAccount: anAccount) not]) 
	and: [(self containsAccount: anAccount) not]
	! !
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/22/2021 17:17:43' prior: 50869404!
assertCanAddAccount: anAccount

	^ (rootPortfolios allSatisfy: [:portfolio | (portfolio containsAccount: anAccount) not]) and: [(self containsAccount: anAccount) not]
	! !
!Account methodsFor: 'add' stamp: 'ijgt 5/22/2021 17:33:23'!
addRoot! !
!Account methodsFor: 'add' stamp: 'ijgt 5/22/2021 17:33:46'!
addRootPortfolios: anOrderedCollection ofParent: aPortfolio 
	
	self subclassResponsibility! !

!methodRemoval: Account #addRoot stamp: 'ijgt 5/22/2021 17:33:55'!
addRoot!
!Account methodsFor: 'testing' stamp: 'ijgt 5/22/2021 17:35:28' prior: 50869344!
hasRegistered: aTransaction

	^ self transactions includes: aTransaction! !
!Portfolio methodsFor: 'testing' stamp: 'ijgt 5/22/2021 17:36:08' overrides: 50869432!
hasRegistered: aTransaction

	^ self transactions includes: aTransaction! !
!Account methodsFor: 'testing' stamp: 'ijgt 5/22/2021 17:36:20' prior: 50869432!
hasRegistered: aTransaction

	self subclassResponsibility! !

!testRun: #PortfolioTest #test01 stamp: 'ijgt 5/22/2021 17:36:25'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'ijgt 5/22/2021 17:36:25'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ijgt 5/22/2021 17:36:25'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'ijgt 5/22/2021 17:36:25'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'ijgt 5/22/2021 17:36:25'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'ijgt 5/22/2021 17:36:25'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'ijgt 5/22/2021 17:36:25'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'ijgt 5/22/2021 17:36:25'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'ijgt 5/22/2021 17:36:25'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'ijgt 5/22/2021 17:36:25'!
PASSED!

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/22/2021 17:36:25'!
PASSED!

!testRun: #PortfolioTest #test101 stamp: 'ijgt 5/22/2021 17:36:25'!
PASSED!

!testRun: #PortfolioTest #test102 stamp: 'ijgt 5/22/2021 17:36:25'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'ijgt 5/22/2021 17:36:25'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'ijgt 5/22/2021 17:36:25'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'ijgt 5/22/2021 17:36:25'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 17:39:49'!
test01newPortfolioShouldBeEmpty

	|aPortfolio|
	aPortfolio := Portfolio new.
	self assert: (aPortfolio accounts isEmpty)! !

!methodRemoval: PortfolioTest #test01 stamp: 'ijgt 5/22/2021 17:39:49'!
test01

	|aPortfolio|
	aPortfolio := Portfolio new.
	self assert: (aPortfolio accounts isEmpty)!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 17:40:50'!
test02newPortfolioCanAddAccount

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	self assert: (aPortfolio accounts includes: account) .! !

!methodRemoval: PortfolioTest #test02 stamp: 'ijgt 5/22/2021 17:40:50'!
test02

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	self assert: (aPortfolio accounts includes: account) .!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 17:41:28'!
test03portfolioCanCalculateBalanceWithOneAccount

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio addAccount: account.
	self assert: (aPortfolio balance) equals: 100! !

!methodRemoval: PortfolioTest #test03 stamp: 'ijgt 5/22/2021 17:41:28'!
test03

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio addAccount: account.
	self assert: (aPortfolio balance) equals: 100!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 17:42:26'!
test04portfolioCanNotAddSameAccountTwice

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio addAccount: account.
	self should: [aPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription]! !

!methodRemoval: PortfolioTest #test04 stamp: 'ijgt 5/22/2021 17:42:26'!
test04

	|aPortfolio account|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aPortfolio addAccount: account.
	self should: [aPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription]!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 17:44:07'!
test05portfolioCanCalculateBalanceRecursively

	|aPortfolio account aSecondPortfolio|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aSecondPortfolio := Portfolio new.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self assert: (aPortfolio balance) equals: 100! !

!methodRemoval: PortfolioTest #test05 stamp: 'ijgt 5/22/2021 17:44:07'!
test05

	|aPortfolio account aSecondPortfolio|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	aSecondPortfolio := Portfolio new.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self assert: (aPortfolio balance) equals: 100!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 17:45:20'!
test06portfolioCanNotAddHimself

	|aPortfolio|
	aPortfolio := Portfolio new.
	
	self should: [aPortfolio addAccount: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].! !

!methodRemoval: PortfolioTest #test06 stamp: 'ijgt 5/22/2021 17:45:20'!
test06

	|aPortfolio|
	aPortfolio := Portfolio new.
	
	self should: [aPortfolio addAccount: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 17:48:23'!
test07portfolioCanNotContainItselfRecursively

	|aPortfolio aSecondPortfolio|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aSecondPortfolio addAccount: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aSecondPortfolio accounts isEmpty! !

!methodRemoval: PortfolioTest #test07 stamp: 'ijgt 5/22/2021 17:48:23'!
test07

	|aPortfolio aSecondPortfolio|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aSecondPortfolio addAccount: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aSecondPortfolio accounts isEmpty!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 17:48:33'!
test06portfolioCanNotAddItself

	|aPortfolio|
	aPortfolio := Portfolio new.
	
	self should: [aPortfolio addAccount: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].! !

!methodRemoval: PortfolioTest #test06portfolioCanNotAddHimself stamp: 'ijgt 5/22/2021 17:48:33'!
test06portfolioCanNotAddHimself

	|aPortfolio|
	aPortfolio := Portfolio new.
	
	self should: [aPortfolio addAccount: aPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 17:50:18'!
test08portfolioCanNotAddPortfolioWithRepeatedAccount

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	aSecondPortfolio addAccount: account.
	self should: [aPortfolio addAccount: aSecondPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aPortfolio accounts size equals: 1.! !

!methodRemoval: PortfolioTest #test08 stamp: 'ijgt 5/22/2021 17:50:18'!
test08

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	aSecondPortfolio addAccount: account.
	self should: [aPortfolio addAccount: aSecondPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: aPortfolio accounts size equals: 1.!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 17:51:00'!
test09newPortfolioHasNoTransactions

	|aPortfolio |
	aPortfolio := Portfolio new.
	
	self assert: (aPortfolio transactions) isEmpty! !

!methodRemoval: PortfolioTest #test09 stamp: 'ijgt 5/22/2021 17:51:00'!
test09

	|aPortfolio |
	aPortfolio := Portfolio new.
	
	self assert: (aPortfolio transactions) isEmpty!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 17:52:18'!
test10portfolioCanReturnTransactionsWithOneAccount

	|aPortfolio account transaction|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	aPortfolio addAccount: account.
	
	self assert: (aPortfolio transactions) size equals: 1.
	self assert: aPortfolio transactions includes: transaction.! !

!methodRemoval: PortfolioTest #test10 stamp: 'ijgt 5/22/2021 17:52:18'!
test10

	|aPortfolio account transaction|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := Deposit register: 100 on: account.
	aPortfolio addAccount: account.
	
	self assert: (aPortfolio transactions) size equals: 1.
	self assert: aPortfolio transactions includes: transaction.!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 17:52:57'!
test11portfolioCanReturnTransactionsWithTwoAccounts

	|aPortfolio account1 account2 transaction1 transaction2|
	aPortfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	transaction1 := Deposit register: 100 on: account1.
	transaction2 := Withdraw register: 100 on: account2.
	aPortfolio addAccount: account1.
	aPortfolio addAccount: account2.

	self assert: (aPortfolio transactions) size equals: 2.
	self assert: aPortfolio transactions includes: transaction1.
	self assert: aPortfolio transactions includes: transaction2.! !

!methodRemoval: PortfolioTest #test11 stamp: 'ijgt 5/22/2021 17:52:57'!
test11

	|aPortfolio account1 account2 transaction1 transaction2|
	aPortfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	transaction1 := Deposit register: 100 on: account1.
	transaction2 := Withdraw register: 100 on: account2.
	aPortfolio addAccount: account1.
	aPortfolio addAccount: account2.

	self assert: (aPortfolio transactions) size equals: 2.
	self assert: aPortfolio transactions includes: transaction1.
	self assert: aPortfolio transactions includes: transaction2.!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 17:54:13'!
test12newPortfolioHasNotRegisteredDeposit

	|aPortfolio |
	aPortfolio := Portfolio new.
	
	self deny: (aPortfolio hasRegistered: (Deposit for: 100) )! !

!methodRemoval: PortfolioTest #test12 stamp: 'ijgt 5/22/2021 17:54:13'!
test12

	|aPortfolio |
	aPortfolio := Portfolio new.
	
	self deny: (aPortfolio hasRegistered: (Deposit for: 100) )!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 17:54:48'!
test13portfolioHasRegisteredTransaction

	|aPortfolio account transaction|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := (Deposit register: 100 on: account).
	aPortfolio addAccount: account.
	
	self assert: (aPortfolio hasRegistered: transaction)! !

!methodRemoval: PortfolioTest #test13 stamp: 'ijgt 5/22/2021 17:54:48'!
test13

	|aPortfolio account transaction|
	aPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	transaction := (Deposit register: 100 on: account).
	aPortfolio addAccount: account.
	
	self assert: (aPortfolio hasRegistered: transaction)!

!testRun: #PortfolioTest #test01newPortfolioShouldBeEmpty stamp: 'ijgt 5/22/2021 17:55:08'!
PASSED!

!testRun: #PortfolioTest #test02newPortfolioCanAddAccount stamp: 'ijgt 5/22/2021 17:55:08'!
PASSED!

!testRun: #PortfolioTest #test03portfolioCanCalculateBalanceWithOneAccount stamp: 'ijgt 5/22/2021 17:55:08'!
PASSED!

!testRun: #PortfolioTest #test04portfolioCanNotAddSameAccountTwice stamp: 'ijgt 5/22/2021 17:55:08'!
PASSED!

!testRun: #PortfolioTest #test05portfolioCanCalculateBalanceRecursively stamp: 'ijgt 5/22/2021 17:55:08'!
PASSED!

!testRun: #PortfolioTest #test06portfolioCanNotAddItself stamp: 'ijgt 5/22/2021 17:55:08'!
PASSED!

!testRun: #PortfolioTest #test07portfolioCanNotContainItselfRecursively stamp: 'ijgt 5/22/2021 17:55:08'!
PASSED!

!testRun: #PortfolioTest #test08portfolioCanNotAddPortfolioWithRepeatedAccount stamp: 'ijgt 5/22/2021 17:55:08'!
PASSED!

!testRun: #PortfolioTest #test09newPortfolioHasNoTransactions stamp: 'ijgt 5/22/2021 17:55:08'!
PASSED!

!testRun: #PortfolioTest #test100 stamp: 'ijgt 5/22/2021 17:55:08'!
PASSED!

!testRun: #PortfolioTest #test101 stamp: 'ijgt 5/22/2021 17:55:08'!
PASSED!

!testRun: #PortfolioTest #test102 stamp: 'ijgt 5/22/2021 17:55:08'!
PASSED!

!testRun: #PortfolioTest #test10portfolioCanReturnTransactionsWithOneAccount stamp: 'ijgt 5/22/2021 17:55:08'!
PASSED!

!testRun: #PortfolioTest #test11portfolioCanReturnTransactionsWithTwoAccounts stamp: 'ijgt 5/22/2021 17:55:08'!
PASSED!

!testRun: #PortfolioTest #test12newPortfolioHasNotRegisteredDeposit stamp: 'ijgt 5/22/2021 17:55:08'!
PASSED!

!testRun: #PortfolioTest #test13portfolioHasRegisteredTransaction stamp: 'ijgt 5/22/2021 17:55:08'!
PASSED!

!methodRemoval: PortfolioTest #test102 stamp: 'ijgt 5/22/2021 17:58:10'!
test102

	|aPortfolio aLeftParentPortfolio aLeftRootPortfolio aRightRootPortfolio account|
	aPortfolio := Portfolio new.
	aLeftRootPortfolio := Portfolio new.
	aLeftParentPortfolio := Portfolio new.
	aRightRootPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aLeftRootPortfolio addAccount: account.
	aRightRootPortfolio addAccount: account.
	aLeftParentPortfolio addAccount: aPortfolio .
	aRightRootPortfolio addAccount: aPortfolio .
	
	self should: [aPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: (aRightRootPortfolio containsAccount: account).
	self assert: (aLeftRootPortfolio containsAccount: account).
	self assert: aRightRootPortfolio accounts size equals: 2.
	self assert: aLeftRootPortfolio accounts size equals: 1.
	self assert: aLeftParentPortfolio accounts size equals: 1.
	self assert: aPortfolio accounts isEmpty.!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 17:59:37' prior: 50868513!
test101

	"Test escrito después de TDD."

	|aPortfolio aLeftRootPortfolio aRightRootPortfolio account|
	aPortfolio := Portfolio new.
	aLeftRootPortfolio := Portfolio new.
	aRightRootPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aLeftRootPortfolio addAccount: account.
	aRightRootPortfolio addAccount: account.
	aLeftRootPortfolio addAccount: aPortfolio .
	aRightRootPortfolio addAccount: aPortfolio .
	
	self should: [aPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: (aRightRootPortfolio containsAccount: account).
	self assert: (aLeftRootPortfolio containsAccount: account).
	self assert: aRightRootPortfolio accounts size equals: 2.
	self assert: aLeftRootPortfolio accounts size equals: 2.
	self assert: aPortfolio accounts isEmpty.! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 17:59:56' prior: 50868448!
test100

	"Test escrito después de TDD."

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aSecondPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: (aPortfolio containsAccount: account).
	self assert: aPortfolio accounts size equals: 2.
	self assert: aSecondPortfolio accounts isEmpty.! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:02:01'!
test100portfolioCanNotAddAccountAlreadyInParentPortfolio

	"Test escrito después de TDD."

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aSecondPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: (aPortfolio containsAccount: account).
	self assert: aPortfolio accounts size equals: 2.
	self assert: aSecondPortfolio accounts isEmpty.! !

!methodRemoval: PortfolioTest #test100 stamp: 'ijgt 5/22/2021 18:02:01'!
test100

	"Test escrito después de TDD."

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aSecondPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: (aPortfolio containsAccount: account).
	self assert: aPortfolio accounts size equals: 2.
	self assert: aSecondPortfolio accounts isEmpty.!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:02:14'!
test15portfolioCanNotAddAccountAlreadyInParentPortfolio

	"Test escrito después de TDD."

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aSecondPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: (aPortfolio containsAccount: account).
	self assert: aPortfolio accounts size equals: 2.
	self assert: aSecondPortfolio accounts isEmpty.! !

!methodRemoval: PortfolioTest #test100portfolioCanNotAddAccountAlreadyInParentPortfolio stamp: 'ijgt 5/22/2021 18:02:14'!
test100portfolioCanNotAddAccountAlreadyInParentPortfolio

	"Test escrito después de TDD."

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aSecondPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: (aPortfolio containsAccount: account).
	self assert: aPortfolio accounts size equals: 2.
	self assert: aSecondPortfolio accounts isEmpty.!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:02:24'!
test14portfolioCanNotAddAccountAlreadyInParentPortfolio

	"Test escrito después de TDD."

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aSecondPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: (aPortfolio containsAccount: account).
	self assert: aPortfolio accounts size equals: 2.
	self assert: aSecondPortfolio accounts isEmpty.! !

!methodRemoval: PortfolioTest #test15portfolioCanNotAddAccountAlreadyInParentPortfolio stamp: 'ijgt 5/22/2021 18:02:24'!
test15portfolioCanNotAddAccountAlreadyInParentPortfolio

	"Test escrito después de TDD."

	|aPortfolio aSecondPortfolio account|
	aPortfolio := Portfolio new.
	aSecondPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aPortfolio addAccount: account.
	aPortfolio addAccount: aSecondPortfolio.
	self should: [aSecondPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: (aPortfolio containsAccount: account).
	self assert: aPortfolio accounts size equals: 2.
	self assert: aSecondPortfolio accounts isEmpty.!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:03:38'!
test15portfolioCanNotAddAccountAlreadyInMultipleParentPortfolios

	"Test escrito después de TDD."

	|aPortfolio aLeftRootPortfolio aRightRootPortfolio account|
	aPortfolio := Portfolio new.
	aLeftRootPortfolio := Portfolio new.
	aRightRootPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aLeftRootPortfolio addAccount: account.
	aRightRootPortfolio addAccount: account.
	aLeftRootPortfolio addAccount: aPortfolio .
	aRightRootPortfolio addAccount: aPortfolio .
	
	self should: [aPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: (aRightRootPortfolio containsAccount: account).
	self assert: (aLeftRootPortfolio containsAccount: account).
	self assert: aRightRootPortfolio accounts size equals: 2.
	self assert: aLeftRootPortfolio accounts size equals: 2.
	self assert: aPortfolio accounts isEmpty.! !

!methodRemoval: PortfolioTest #test101 stamp: 'ijgt 5/22/2021 18:03:38'!
test101

	"Test escrito después de TDD."

	|aPortfolio aLeftRootPortfolio aRightRootPortfolio account|
	aPortfolio := Portfolio new.
	aLeftRootPortfolio := Portfolio new.
	aRightRootPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	aLeftRootPortfolio addAccount: account.
	aRightRootPortfolio addAccount: account.
	aLeftRootPortfolio addAccount: aPortfolio .
	aRightRootPortfolio addAccount: aPortfolio .
	
	self should: [aPortfolio addAccount: account] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: aPortfolio accountCanNotBeAddedErrorDescription].
	self assert: (aRightRootPortfolio containsAccount: account).
	self assert: (aLeftRootPortfolio containsAccount: account).
	self assert: aRightRootPortfolio accounts size equals: 2.
	self assert: aLeftRootPortfolio accounts size equals: 2.
	self assert: aPortfolio accounts isEmpty.!

!testRun: #PortfolioTest #test01newPortfolioShouldBeEmpty stamp: 'ijgt 5/22/2021 18:03:56'!
PASSED!

!testRun: #PortfolioTest #test02newPortfolioCanAddAccount stamp: 'ijgt 5/22/2021 18:03:56'!
PASSED!

!testRun: #PortfolioTest #test03portfolioCanCalculateBalanceWithOneAccount stamp: 'ijgt 5/22/2021 18:03:56'!
PASSED!

!testRun: #PortfolioTest #test04portfolioCanNotAddSameAccountTwice stamp: 'ijgt 5/22/2021 18:03:56'!
PASSED!

!testRun: #PortfolioTest #test05portfolioCanCalculateBalanceRecursively stamp: 'ijgt 5/22/2021 18:03:56'!
PASSED!

!testRun: #PortfolioTest #test06portfolioCanNotAddItself stamp: 'ijgt 5/22/2021 18:03:56'!
PASSED!

!testRun: #PortfolioTest #test07portfolioCanNotContainItselfRecursively stamp: 'ijgt 5/22/2021 18:03:56'!
PASSED!

!testRun: #PortfolioTest #test08portfolioCanNotAddPortfolioWithRepeatedAccount stamp: 'ijgt 5/22/2021 18:03:56'!
PASSED!

!testRun: #PortfolioTest #test09newPortfolioHasNoTransactions stamp: 'ijgt 5/22/2021 18:03:56'!
PASSED!

!testRun: #PortfolioTest #test10portfolioCanReturnTransactionsWithOneAccount stamp: 'ijgt 5/22/2021 18:03:56'!
PASSED!

!testRun: #PortfolioTest #test11portfolioCanReturnTransactionsWithTwoAccounts stamp: 'ijgt 5/22/2021 18:03:56'!
PASSED!

!testRun: #PortfolioTest #test12newPortfolioHasNotRegisteredDeposit stamp: 'ijgt 5/22/2021 18:03:56'!
PASSED!

!testRun: #PortfolioTest #test13portfolioHasRegisteredTransaction stamp: 'ijgt 5/22/2021 18:03:56'!
PASSED!

!testRun: #PortfolioTest #test14portfolioCanNotAddAccountAlreadyInParentPortfolio stamp: 'ijgt 5/22/2021 18:03:56'!
PASSED!

!testRun: #PortfolioTest #test15portfolioCanNotAddAccountAlreadyInMultipleParentPortfolios stamp: 'ijgt 5/22/2021 18:03:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 5/22/2021 18:03:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 5/22/2021 18:03:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 5/22/2021 18:03:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 5/22/2021 18:03:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 5/22/2021 18:03:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 5/22/2021 18:03:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 5/22/2021 18:03:57'!
PASSED!
!PortfolioTest methodsFor: 'setUp' stamp: 'ijgt 5/22/2021 18:08:09' overrides: 16927572!
setUp

	! !

TestCase subclass: #PortfolioTest
	instanceVariableNames: 'aPortfolio account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio anAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'ijgt 5/22/2021 18:09:22'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio anAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'setUp' stamp: 'ijgt 5/22/2021 18:09:59' prior: 50870228 overrides: 16927572!
setUp

	portfolio := Portfolio new.
	anAccount := ReceptiveAccount new.! !

TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio anAccount withdrawal deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'ijgt 5/22/2021 18:10:40'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio anAccount withdrawal deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'setUp' stamp: 'ijgt 5/22/2021 18:11:37' prior: 50870255 overrides: 16927572!
setUp

	portfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	deposit := Deposit for: 100.
	withdrawal := Withdraw for: 100.! !

TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio secondPortfolio anAccount withdrawal deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'ijgt 5/22/2021 18:11:57'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio secondPortfolio anAccount withdrawal deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'setUp' stamp: 'ijgt 5/22/2021 18:12:10' prior: 50870275 overrides: 16927572!
setUp

	portfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	deposit := Deposit for: 100.
	withdrawal := Withdraw for: 100.! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:12:23' prior: 50869486!
test01newPortfolioShouldBeEmpty

	self assert: (portfolio accounts isEmpty)! !

!testRun: #PortfolioTest #test01newPortfolioShouldBeEmpty stamp: 'ijgt 5/22/2021 18:12:25'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:12:45' prior: 50869498!
test02newPortfolioCanAddAccount
	
	portfolio addAccount: anAccount.
	self assert: (portfolio accounts includes: anAccount) .! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:13:09' prior: 50869515!
test03portfolioCanCalculateBalanceWithOneAccount

	Deposit register: 100 on: anAccount.
	
	portfolio addAccount: anAccount.
	self assert: (portfolio balance) equals: 100! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:13:31' prior: 50869535!
test04portfolioCanNotAddSameAccountTwice

	Deposit register: 100 on: anAccount.
	
	portfolio addAccount: anAccount.
	self should: [portfolio addAccount: anAccount] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: portfolio accountCanNotBeAddedErrorDescription]! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:14:06' prior: 50869563!
test05portfolioCanCalculateBalanceRecursively

	Deposit register: 100 on: anAccount.
	
	portfolio addAccount: anAccount.
	portfolio addAccount: secondPortfolio.
	self assert: (portfolio balance) equals: 100! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:14:22' prior: 50869641!
test06portfolioCanNotAddItself

	self should: [portfolio addAccount: portfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: portfolio accountCanNotBeAddedErrorDescription].! !

!testRun: #PortfolioTest #test01newPortfolioShouldBeEmpty stamp: 'ijgt 5/22/2021 18:14:26'!
PASSED!

!testRun: #PortfolioTest #test02newPortfolioCanAddAccount stamp: 'ijgt 5/22/2021 18:14:26'!
PASSED!

!testRun: #PortfolioTest #test03portfolioCanCalculateBalanceWithOneAccount stamp: 'ijgt 5/22/2021 18:14:26'!
PASSED!

!testRun: #PortfolioTest #test04portfolioCanNotAddSameAccountTwice stamp: 'ijgt 5/22/2021 18:14:26'!
PASSED!

!testRun: #PortfolioTest #test05portfolioCanCalculateBalanceRecursively stamp: 'ijgt 5/22/2021 18:14:26'!
PASSED!

!testRun: #PortfolioTest #test06portfolioCanNotAddItself stamp: 'ijgt 5/22/2021 18:14:26'!
PASSED!

!testRun: #PortfolioTest #test07portfolioCanNotContainItselfRecursively stamp: 'ijgt 5/22/2021 18:14:26'!
PASSED!

!testRun: #PortfolioTest #test08portfolioCanNotAddPortfolioWithRepeatedAccount stamp: 'ijgt 5/22/2021 18:14:26'!
PASSED!

!testRun: #PortfolioTest #test09newPortfolioHasNoTransactions stamp: 'ijgt 5/22/2021 18:14:26'!
PASSED!

!testRun: #PortfolioTest #test10portfolioCanReturnTransactionsWithOneAccount stamp: 'ijgt 5/22/2021 18:14:26'!
PASSED!

!testRun: #PortfolioTest #test11portfolioCanReturnTransactionsWithTwoAccounts stamp: 'ijgt 5/22/2021 18:14:26'!
PASSED!

!testRun: #PortfolioTest #test12newPortfolioHasNotRegisteredDeposit stamp: 'ijgt 5/22/2021 18:14:26'!
PASSED!

!testRun: #PortfolioTest #test13portfolioHasRegisteredTransaction stamp: 'ijgt 5/22/2021 18:14:26'!
PASSED!

!testRun: #PortfolioTest #test14portfolioCanNotAddAccountAlreadyInParentPortfolio stamp: 'ijgt 5/22/2021 18:14:26'!
PASSED!

!testRun: #PortfolioTest #test15portfolioCanNotAddAccountAlreadyInMultipleParentPortfolios stamp: 'ijgt 5/22/2021 18:14:26'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:14:53' prior: 50869610!
test07portfolioCanNotContainItselfRecursively
	
	portfolio addAccount: secondPortfolio.
	self should: [secondPortfolio addAccount: portfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: portfolio accountCanNotBeAddedErrorDescription].
	self assert: secondPortfolio accounts isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:16:10' prior: 50869663!
test08portfolioCanNotAddPortfolioWithRepeatedAccount
	
	portfolio addAccount: anAccount.
	secondPortfolio addAccount: anAccount.
	self should: [portfolio addAccount: secondPortfolio] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: portfolio accountCanNotBeAddedErrorDescription].
	self assert: portfolio accounts size equals: 1.! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:16:26' prior: 50869698!
test09newPortfolioHasNoTransactions

	self assert: (portfolio transactions) isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:17:10' prior: 50869710!
test10portfolioCanReturnTransactionsWithOneAccount

	|transaction|
	transaction := Deposit register: 100 on: anAccount.
	portfolio addAccount: anAccount.
	
	self assert: (portfolio transactions) size equals: 1.
	self assert: portfolio transactions includes: transaction.! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:17:55' prior: 50869736!
test11portfolioCanReturnTransactionsWithTwoAccounts

	| account2 transaction1 transaction2|
	account2 := ReceptiveAccount new.
	transaction1 := Deposit register: 100 on: anAccount.
	transaction2 := Withdraw register: 100 on: account2.
	portfolio addAccount: anAccount.
	portfolio addAccount: account2.

	self assert: (portfolio transactions) size equals: 2.
	self assert: portfolio transactions includes: transaction1.
	self assert: portfolio transactions includes: transaction2.! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:18:27' prior: 50869775!
test12newPortfolioHasNotRegisteredDeposit

	self deny: (portfolio hasRegistered: (Deposit for: 100) )! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:18:53' prior: 50869788!
test13portfolioHasRegisteredTransaction

	| transaction|
	transaction := (Deposit register: 100 on: anAccount).
	portfolio addAccount: anAccount.
	
	self assert: (portfolio hasRegistered: transaction)! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:19:36' prior: 50870038!
test14portfolioCanNotAddAccountAlreadyInParentPortfolio

	"Test escrito después de TDD."

	portfolio addAccount: anAccount.
	portfolio addAccount: secondPortfolio.
	self should: [secondPortfolio addAccount: anAccount] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: portfolio accountCanNotBeAddedErrorDescription].
	self assert: (portfolio containsAccount: anAccount).
	self assert: portfolio accounts size equals: 2.
	self assert: secondPortfolio accounts isEmpty.! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:21:09' prior: 50870085!
test15portfolioCanNotAddAccountAlreadyInMultipleParentPortfolios

	"Test escrito después de TDD."

	|aLeftRootPortfolio aRightRootPortfolio |
	aLeftRootPortfolio := Portfolio new.
	aRightRootPortfolio := Portfolio new.
	
	aLeftRootPortfolio addAccount: anAccount.
	aRightRootPortfolio addAccount: anAccount.
	aLeftRootPortfolio addAccount: portfolio .
	aRightRootPortfolio addAccount: portfolio .
	
	self should: [portfolio addAccount: anAccount] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: portfolio accountCanNotBeAddedErrorDescription].
	self assert: (aRightRootPortfolio containsAccount: anAccount).
	self assert: (aLeftRootPortfolio containsAccount: anAccount).
	self assert: aRightRootPortfolio accounts size equals: 2.
	self assert: aLeftRootPortfolio accounts size equals: 2.
	self assert: portfolio accounts isEmpty.! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:23:33' prior: 50870517!
test15portfolioCanNotAddAccountAlreadyInMultipleParentPortfolios

	"Test escrito después de TDD."

	|aLeftRootPortfolio aRightRootPortfolio |
	aLeftRootPortfolio := Portfolio new.
	aRightRootPortfolio := Portfolio new.
	
	aLeftRootPortfolio addAccount: anAccount.
	aRightRootPortfolio addAccount: anAccount.
	aLeftRootPortfolio addAccount: portfolio .
	aRightRootPortfolio addAccount: portfolio .
	
	self should: [portfolio addAccount: anAccount] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: portfolio accountCanNotBeAddedErrorDescription].
	self assert: (aRightRootPortfolio containsAccount: anAccount).
	self assert: aRightRootPortfolio accounts size equals: 2.
	self assert: (aLeftRootPortfolio containsAccount: anAccount).
	self assert: aLeftRootPortfolio accounts size equals: 2.
	self assert: portfolio accounts isEmpty.! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:24:12'!
m1: aRightRootPortfolio

	self assert: (aRightRootPortfolio containsAccount: anAccount).
	self assert: aRightRootPortfolio accounts size equals: 2! !
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:24:12' prior: 50870547!
test15portfolioCanNotAddAccountAlreadyInMultipleParentPortfolios

	"Test escrito después de TDD."

	|aLeftRootPortfolio aRightRootPortfolio |
	aLeftRootPortfolio := Portfolio new.
	aRightRootPortfolio := Portfolio new.
	
	aLeftRootPortfolio addAccount: anAccount.
	aRightRootPortfolio addAccount: anAccount.
	aLeftRootPortfolio addAccount: portfolio .
	aRightRootPortfolio addAccount: portfolio .
	
	self should: [portfolio addAccount: anAccount] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: portfolio accountCanNotBeAddedErrorDescription].
	self m1: aRightRootPortfolio.
	self assert: (aLeftRootPortfolio containsAccount: anAccount).
	self assert: aLeftRootPortfolio accounts size equals: 2.
	self assert: portfolio accounts isEmpty.! !

!methodRemoval: PortfolioTest #m1: stamp: 'ijgt 5/22/2021 18:27:44'!
m1: aRightRootPortfolio

	self assert: (aRightRootPortfolio containsAccount: anAccount).
	self assert: aRightRootPortfolio accounts size equals: 2!
!PortfolioTest methodsFor: 'tests' stamp: 'ijgt 5/22/2021 18:23:33' prior: 50870585!
test15portfolioCanNotAddAccountAlreadyInMultipleParentPortfolios

	"Test escrito después de TDD."

	|aLeftRootPortfolio aRightRootPortfolio |
	aLeftRootPortfolio := Portfolio new.
	aRightRootPortfolio := Portfolio new.
	
	aLeftRootPortfolio addAccount: anAccount.
	aRightRootPortfolio addAccount: anAccount.
	aLeftRootPortfolio addAccount: portfolio .
	aRightRootPortfolio addAccount: portfolio .
	
	self should: [portfolio addAccount: anAccount] raise: Error withExceptionDo: [:anError | self assert: (anError messageText) equals: portfolio accountCanNotBeAddedErrorDescription].
	self assert: (aRightRootPortfolio containsAccount: anAccount).
	self assert: aRightRootPortfolio accounts size equals: 2.
	self assert: (aLeftRootPortfolio containsAccount: anAccount).
	self assert: aLeftRootPortfolio accounts size equals: 2.
	self assert: portfolio accounts isEmpty.! !

TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio secondPortfolio anAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'ijgt 5/22/2021 18:32:29'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio secondPortfolio anAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'setUp' stamp: 'ijgt 5/22/2021 18:32:36' prior: 50870298 overrides: 16927572!
setUp

	portfolio := Portfolio new.
	secondPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.! !

!testRun: #PortfolioTest #test01newPortfolioShouldBeEmpty stamp: 'ijgt 5/22/2021 18:32:40'!
PASSED!

!testRun: #PortfolioTest #test02newPortfolioCanAddAccount stamp: 'ijgt 5/22/2021 18:32:40'!
PASSED!

!testRun: #PortfolioTest #test03portfolioCanCalculateBalanceWithOneAccount stamp: 'ijgt 5/22/2021 18:32:40'!
PASSED!

!testRun: #PortfolioTest #test04portfolioCanNotAddSameAccountTwice stamp: 'ijgt 5/22/2021 18:32:40'!
PASSED!

!testRun: #PortfolioTest #test05portfolioCanCalculateBalanceRecursively stamp: 'ijgt 5/22/2021 18:32:40'!
PASSED!

!testRun: #PortfolioTest #test06portfolioCanNotAddItself stamp: 'ijgt 5/22/2021 18:32:40'!
PASSED!

!testRun: #PortfolioTest #test07portfolioCanNotContainItselfRecursively stamp: 'ijgt 5/22/2021 18:32:40'!
PASSED!

!testRun: #PortfolioTest #test08portfolioCanNotAddPortfolioWithRepeatedAccount stamp: 'ijgt 5/22/2021 18:32:40'!
PASSED!

!testRun: #PortfolioTest #test09newPortfolioHasNoTransactions stamp: 'ijgt 5/22/2021 18:32:40'!
PASSED!

!testRun: #PortfolioTest #test10portfolioCanReturnTransactionsWithOneAccount stamp: 'ijgt 5/22/2021 18:32:40'!
PASSED!

!testRun: #PortfolioTest #test11portfolioCanReturnTransactionsWithTwoAccounts stamp: 'ijgt 5/22/2021 18:32:40'!
PASSED!

!testRun: #PortfolioTest #test12newPortfolioHasNotRegisteredDeposit stamp: 'ijgt 5/22/2021 18:32:40'!
PASSED!

!testRun: #PortfolioTest #test13portfolioHasRegisteredTransaction stamp: 'ijgt 5/22/2021 18:32:40'!
PASSED!

!testRun: #PortfolioTest #test14portfolioCanNotAddAccountAlreadyInParentPortfolio stamp: 'ijgt 5/22/2021 18:32:40'!
PASSED!

!testRun: #PortfolioTest #test15portfolioCanNotAddAccountAlreadyInMultipleParentPortfolios stamp: 'ijgt 5/22/2021 18:32:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 5/22/2021 18:32:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 5/22/2021 18:32:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 5/22/2021 18:32:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 5/22/2021 18:32:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 5/22/2021 18:32:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 5/22/2021 18:32:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 5/22/2021 18:32:42'!
PASSED!

----QUIT----(22 May 2021 18:35:46) CuisUniversity-4532.image priorSource: 17187766!

----STARTUP---- (27 May 2021 20:35:00) as /home/igna/Desktop/CuisNuevo/CuisUniversity-4532.image!


!classRemoval: #Withdraw stamp: 'ijgt 5/27/2021 20:35:10'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'ijgt 5/27/2021 20:35:10'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'ijgt 5/27/2021 20:35:11'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccount stamp: 'ijgt 5/27/2021 20:35:11'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'ijgt 5/27/2021 20:35:11'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts rootPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Account stamp: 'ijgt 5/27/2021 20:35:12'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'ijgt 5/27/2021 20:35:12'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'ijgt 5/27/2021 20:35:12'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio secondPortfolio anAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of /home/igna/Desktop/CuisNuevo/Portfolio-Solucion.st----!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 5/27/2021 20:40:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 5/27/2021 20:40:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 5/27/2021 20:40:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 5/27/2021 20:40:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 5/27/2021 20:40:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 5/27/2021 20:40:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 5/27/2021 20:40:40'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'ijgt 5/27/2021 20:40:42'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'ijgt 5/27/2021 20:40:42'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'ijgt 5/27/2021 20:40:42'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'ijgt 5/27/2021 20:40:42'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'ijgt 5/27/2021 20:40:42'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'ijgt 5/27/2021 20:40:42'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'ijgt 5/27/2021 20:40:42'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'ijgt 5/27/2021 20:40:42'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'ijgt 5/27/2021 20:40:42'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'ijgt 5/27/2021 20:40:42'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'ijgt 5/27/2021 20:40:42'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'ijgt 5/27/2021 20:40:42'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'ijgt 5/27/2021 20:40:42'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'ijgt 5/27/2021 20:40:42'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'ijgt 5/27/2021 20:40:42'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'ijgt 5/27/2021 20:40:44'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'ijgt 5/27/2021 20:40:44'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'ijgt 5/27/2021 20:40:44'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'ijgt 5/27/2021 20:40:44'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'ijgt 5/27/2021 20:40:44'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'ijgt 5/27/2021 20:40:44'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'ijgt 5/27/2021 20:40:44'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'ijgt 5/27/2021 20:40:44'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'ijgt 5/27/2021 20:40:44'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'ijgt 5/27/2021 20:40:44'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'ijgt 5/27/2021 20:40:44'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'ijgt 5/27/2021 20:40:44'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'ijgt 5/27/2021 20:40:44'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'ijgt 5/27/2021 20:40:44'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'ijgt 5/27/2021 20:40:44'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'ijgt 5/27/2021 20:40:45'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'ijgt 5/27/2021 20:40:45'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'ijgt 5/27/2021 20:40:45'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'ijgt 5/27/2021 20:40:45'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'ijgt 5/27/2021 20:40:45'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'ijgt 5/27/2021 20:40:45'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'ijgt 5/27/2021 20:40:45'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'ijgt 5/27/2021 20:40:45'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'ijgt 5/27/2021 20:40:45'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'ijgt 5/27/2021 20:40:45'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'ijgt 5/27/2021 20:40:45'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'ijgt 5/27/2021 20:40:45'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'ijgt 5/27/2021 20:40:45'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'ijgt 5/27/2021 20:40:45'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'ijgt 5/27/2021 20:40:45'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'ijgt 5/27/2021 20:40:53'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'ijgt 5/27/2021 20:40:53'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'ijgt 5/27/2021 20:40:53'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'ijgt 5/27/2021 20:40:53'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'ijgt 5/27/2021 20:40:53'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'ijgt 5/27/2021 20:40:53'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'ijgt 5/27/2021 20:40:53'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'ijgt 5/27/2021 20:40:53'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'ijgt 5/27/2021 20:40:53'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'ijgt 5/27/2021 20:40:53'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'ijgt 5/27/2021 20:40:53'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'ijgt 5/27/2021 20:40:53'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'ijgt 5/27/2021 20:40:53'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'ijgt 5/27/2021 20:40:53'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'ijgt 5/27/2021 20:40:53'!
PASSED!

TestCase subclass: #TransferenciaTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #TransferenciaTest category: 'Portfolio-18' stamp: 'ijgt 5/27/2021 20:45:33'!
TestCase subclass: #TransferenciaTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!
!TransferenciaTest methodsFor: 'no messages' stamp: 'ijgt 5/27/2021 20:45:48'!
test01

	! !

!classDefinition: #Transferencia category: 'Portfolio-18' stamp: 'ijgt 5/27/2021 20:52:18'!
Object subclass: #Transferencia
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!
!TransferenciaTest methodsFor: 'tests' stamp: 'ijgt 5/27/2021 20:51:51' prior: 50871800!
test01

	|anAccount anotherAccount anAmount |
	anAccount  := ReceptiveAccount new.
	Transferencia from: anAccount to: anotherAccount withValue: anAmount.
	self assert: (anAccount balance) ! !
!TransferenciaTest methodsFor: 'tests' stamp: 'ijgt 5/27/2021 20:54:32' prior: 50871811!
test01

	|anAccount anotherAccount|
	anAccount  := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transferencia from: anAccount to: anotherAccount withValue: 50.
	self assert: (anotherAccount balance) equals: 50 ! !

!testRun: #TransferenciaTest #test01 stamp: 'ijgt 5/27/2021 20:55:17'!
ERROR!
!Transferencia class methodsFor: 'instance creation' stamp: 'ijgt 5/27/2021 20:55:37'!
from: aReceptiveAccount to: aReceptiveAccount2 withValue: aSmallInteger 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFrom: aReceptiveAccount to: aReceptiveAccount2 withValue: aSmallInteger ! !
!Transferencia class methodsFor: 'instance creation' stamp: 'ijgt 5/27/2021 20:57:17' prior: 50871833!
from: aReceptiveAccount to: aSecondReceptiveAccount withValue: anAmount

	^self new initializeFrom: aReceptiveAccount to: aSecondReceptiveAccount withValue: anAmount ! !

!testRun: #TransferenciaTest #test01 stamp: 'ijgt 5/27/2021 20:57:19'!
ERROR!

!classDefinition: #Transferencia category: 'Portfolio-18' stamp: 'ijgt 5/27/2021 20:57:36'!
Object subclass: #Transferencia
	instanceVariableNames: 'receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #Transferencia category: 'Portfolio-18' stamp: 'ijgt 5/27/2021 20:57:36'!
Object subclass: #Transferencia
	instanceVariableNames: 'receptiveAccount secondReceptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #Transferencia category: 'Portfolio-18' stamp: 'ijgt 5/27/2021 20:57:36'!
Object subclass: #Transferencia
	instanceVariableNames: 'receptiveAccount secondReceptiveAccount amount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!
!Transferencia methodsFor: 'initialize' stamp: 'ijgt 5/27/2021 20:57:36'!
initializeFrom: aReceptiveAccount to: aSecondReceptiveAccount withValue: anAmount 
	self shouldBeImplemented.
	receptiveAccount := aReceptiveAccount.
	secondReceptiveAccount := aSecondReceptiveAccount.
	amount := anAmount.! !

!classDefinition: #Transferencia category: 'Portfolio-18' stamp: 'ijgt 5/27/2021 21:02:48'!
Object subclass: #Transferencia
	instanceVariableNames: 'receptiveAccount secondReceptiveAccount amount senderAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #Transferencia category: 'Portfolio-18' stamp: 'ijgt 5/27/2021 21:02:50'!
Object subclass: #Transferencia
	instanceVariableNames: 'receptiveAccount secondReceptiveAccount amount senderAccount receiverAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!
!Transferencia methodsFor: 'initialize' stamp: 'ijgt 5/27/2021 21:02:44' prior: 50871880!
initializeFrom: aReceptiveAccount to: aSecondReceptiveAccount withValue: anAmount 

	senderAccount := aReceptiveAccount.
	receiverAccount := aSecondReceptiveAccount.
	
	Deposit register: 50 on: receiverAccount ! !

!testRun: #TransferenciaTest #test01 stamp: 'ijgt 5/27/2021 21:02:54'!
PASSED!

!testRun: #TransferenciaTest #test01 stamp: 'ijgt 5/27/2021 21:02:54'!
PASSED!

Object subclass: #Transferencia
	instanceVariableNames: 'senderAccount receiverAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #Transferencia category: 'Portfolio-18' stamp: 'ijgt 5/27/2021 21:03:05'!
Object subclass: #Transferencia
	instanceVariableNames: 'senderAccount receiverAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!testRun: #TransferenciaTest #test01 stamp: 'ijgt 5/27/2021 21:03:11'!
PASSED!
!TransferenciaTest methodsFor: 'tests' stamp: 'ijgt 5/27/2021 21:04:01'!
test02

	|anAccount anotherAccount|
	anAccount  := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transferencia from: anAccount to: anotherAccount withValue: 50.
	self assert: (anAccount balance) equals: 50! !
!TransferenciaTest methodsFor: 'tests' stamp: 'ijgt 5/27/2021 21:04:12' prior: 50871939!
test02

	|anAccount anotherAccount|
	anAccount  := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transferencia from: anAccount to: anotherAccount withValue: 50.
	self assert: (anAccount balance) equals: (-50)! !

!testRun: #TransferenciaTest #test02 stamp: 'ijgt 5/27/2021 21:04:15'!
FAILURE!
!Transferencia methodsFor: 'initialize' stamp: 'ijgt 5/27/2021 21:04:56' prior: 50871909!
initializeFrom: aReceptiveAccount to: aSecondReceptiveAccount withValue: anAmount 

	senderAccount := aReceptiveAccount.
	receiverAccount := aSecondReceptiveAccount.
	
	Withdraw register: 50 on: senderAccount.
	Deposit register: 50 on: receiverAccount ! !

!testRun: #TransferenciaTest #test02 stamp: 'ijgt 5/27/2021 21:04:57'!
PASSED!

!testRun: #TransferenciaTest #test01 stamp: 'ijgt 5/27/2021 21:04:57'!
PASSED!

!testRun: #TransferenciaTest #test02 stamp: 'ijgt 5/27/2021 21:04:57'!
PASSED!
!TransferenciaTest methodsFor: 'tests' stamp: 'ijgt 5/27/2021 21:05:42' prior: 50871949!
test02

	|anAccount anotherAccount|
	anAccount  := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transferencia from: anAccount to: anotherAccount withValue: 51.
	self assert: (anAccount balance) equals: (-51)! !
!TransferenciaTest methodsFor: 'tests' stamp: 'ijgt 5/27/2021 21:05:50' prior: 50871981!
test02

	|anAccount anotherAccount|
	anAccount  := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transferencia from: anAccount to: anotherAccount withValue: 50.
	self assert: (anAccount balance) equals: (-50)! !

!testRun: #TransferenciaTest #test02 stamp: 'ijgt 5/27/2021 21:05:51'!
PASSED!

!testRun: #TransferenciaTest #test01 stamp: 'ijgt 5/27/2021 21:05:51'!
PASSED!

!testRun: #TransferenciaTest #test02 stamp: 'ijgt 5/27/2021 21:05:51'!
PASSED!
!TransferenciaTest methodsFor: 'tests' stamp: 'ijgt 5/27/2021 21:06:01'!
test03

	|anAccount anotherAccount|
	anAccount  := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transferencia from: anAccount to: anotherAccount withValue: 60.
	self assert: (anAccount balance) equals: (-60)! !

!testRun: #TransferenciaTest #test03 stamp: 'ijgt 5/27/2021 21:06:02'!
FAILURE!
!Transferencia methodsFor: 'initialize' stamp: 'ijgt 5/27/2021 21:06:29' prior: 50871962!
initializeFrom: aReceptiveAccount to: aSecondReceptiveAccount withValue: anAmount 

	senderAccount := aReceptiveAccount.
	receiverAccount := aSecondReceptiveAccount.
	
	Withdraw register: anAmount on: senderAccount.
	Deposit register: anAmount on: receiverAccount ! !

!testRun: #TransferenciaTest #test03 stamp: 'ijgt 5/27/2021 21:06:30'!
PASSED!

!testRun: #TransferenciaTest #test01 stamp: 'ijgt 5/27/2021 21:06:30'!
PASSED!

!testRun: #TransferenciaTest #test02 stamp: 'ijgt 5/27/2021 21:06:30'!
PASSED!

!testRun: #TransferenciaTest #test03 stamp: 'ijgt 5/27/2021 21:06:30'!
PASSED!
!TransferenciaTest methodsFor: 'tests' stamp: 'ijgt 5/27/2021 21:10:22'!
test04

	|anAccount anotherAccount|
	anAccount  := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	self should: [Transferencia from: anAccount to: anotherAccount withValue: -60] raise: Error withExceptionDo: 
		[:anError | self assert: (anError messageText) equals: Transferencia canNotTransferNegativeAmountErrorDescription]! !
!TransferenciaTest methodsFor: 'tests' stamp: 'ijgt 5/27/2021 21:10:51' prior: 50872044!
test04

	|anAccount anotherAccount|
	anAccount  := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	self should: [Transferencia from: anAccount to: anotherAccount withValue: -60] 
		raise: Error 
		withExceptionDo: [:anError | self assert: (anError messageText) 
			equals: Transferencia canNotTransferNegativeAmountErrorDescription]! !

!testRun: #TransferenciaTest #test04 stamp: 'ijgt 5/27/2021 21:10:55'!
FAILURE!

!testRun: #TransferenciaTest #test04 stamp: 'ijgt 5/27/2021 21:11:26'!
FAILURE!

!testRun: #TransferenciaTest #test04 stamp: 'ijgt 5/27/2021 21:11:44'!
FAILURE!

!testRun: #TransferenciaTest #test04 stamp: 'ijgt 5/27/2021 21:11:44'!
FAILURE!
!Transferencia methodsFor: 'initialize' stamp: 'ijgt 5/27/2021 21:14:56' prior: 50872023!
initializeFrom: aReceptiveAccount to: aSecondReceptiveAccount withValue: anAmount 

	self assertAmountIsValid: anAmount ifFalse: [self canNotTransferNegativeAmountErrorDescription].
	senderAccount := aReceptiveAccount.
	receiverAccount := aSecondReceptiveAccount.
	
	Withdraw register: anAmount on: senderAccount.
	Deposit register: anAmount on: receiverAccount ! !
!Transferencia methodsFor: 'initialize' stamp: 'ijgt 5/27/2021 21:15:35' prior: 50872082!
initializeFrom: aReceptiveAccount to: aSecondReceptiveAccount withValue: anAmount 

	(self assertAmountIsValid: anAmount) ifFalse: [self canNotTransferNegativeAmountErrorDescription].
	senderAccount := aReceptiveAccount.
	receiverAccount := aSecondReceptiveAccount.
	
	Withdraw register: anAmount on: senderAccount.
	Deposit register: anAmount on: receiverAccount ! !
!Transferencia methodsFor: 'initialize' stamp: 'ijgt 5/27/2021 21:16:24'!
assertAmountIsValid: anAmount

	^ anAmount > 0! !
!Transferencia methodsFor: 'initialize' stamp: 'ijgt 5/27/2021 21:18:48' prior: 50872097!
initializeFrom: aReceptiveAccount to: aSecondReceptiveAccount withValue: anAmount 

	(self assertAmountIsValid: anAmount) ifFalse: [self error: self canNotTransferNegativeAmountErrorDescription].
	senderAccount := aReceptiveAccount.
	receiverAccount := aSecondReceptiveAccount.
	
	Withdraw register: anAmount on: senderAccount.
	Deposit register: anAmount on: receiverAccount ! !
!Transferencia class methodsFor: 'instance creation' stamp: 'ijgt 5/27/2021 21:19:41'!
canNotTransferNegativeAmountErrorDescription

	^ 'Amount to transfer must be positive.'! !
!Transferencia methodsFor: 'initialize' stamp: 'ijgt 5/27/2021 21:20:18' prior: 50872116!
initializeFrom: aReceptiveAccount to: aSecondReceptiveAccount withValue: anAmount 

	(self assertAmountIsValid: anAmount) ifFalse: [self error: self class canNotTransferNegativeAmountErrorDescription].
	senderAccount := aReceptiveAccount.
	receiverAccount := aSecondReceptiveAccount.
	
	Withdraw register: anAmount on: senderAccount.
	Deposit register: anAmount on: receiverAccount ! !

!testRun: #TransferenciaTest #test04 stamp: 'ijgt 5/27/2021 21:20:24'!
PASSED!

!testRun: #TransferenciaTest #test01 stamp: 'ijgt 5/27/2021 21:20:27'!
PASSED!

!testRun: #TransferenciaTest #test02 stamp: 'ijgt 5/27/2021 21:20:27'!
PASSED!

!testRun: #TransferenciaTest #test03 stamp: 'ijgt 5/27/2021 21:20:27'!
PASSED!

!testRun: #TransferenciaTest #test04 stamp: 'ijgt 5/27/2021 21:20:27'!
PASSED!
!TransferenciaTest methodsFor: 'tests' stamp: 'ijgt 5/27/2021 21:24:39'!
test05

	|anAccount anotherAccount transferencia|
	anAccount  := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	transferencia := Transferencia from: anAccount to: anotherAccount withValue: 50.
	
	self assert: transferencia senderAccount equals: anAccount.
	self assert: transferencia receiverAccount equals: anotherAccount.	! !

!testRun: #TransferenciaTest #test05 stamp: 'ijgt 5/27/2021 21:24:41'!
ERROR!
!Transferencia methodsFor: 'testing' stamp: 'ijgt 5/27/2021 21:24:55'!
senderAccount
	self shouldBeImplemented.
	^senderAccount! !
!Transferencia methodsFor: 'testing' stamp: 'ijgt 5/27/2021 21:25:01' prior: 50872180!
senderAccount
	
	^senderAccount! !

!testRun: #TransferenciaTest #test05 stamp: 'ijgt 5/27/2021 21:25:06'!
ERROR!
!Transferencia methodsFor: 'testing' stamp: 'ijgt 5/27/2021 21:25:20'!
receiverAccount
	self shouldBeImplemented.
	^receiverAccount! !
!Transferencia methodsFor: 'testing' stamp: 'ijgt 5/27/2021 21:25:23' prior: 50872191!
receiverAccount
	
	^receiverAccount! !

!testRun: #TransferenciaTest #test05 stamp: 'ijgt 5/27/2021 21:25:25'!
PASSED!

!testRun: #TransferenciaTest #test01 stamp: 'ijgt 5/27/2021 21:25:25'!
PASSED!

!testRun: #TransferenciaTest #test02 stamp: 'ijgt 5/27/2021 21:25:25'!
PASSED!

!testRun: #TransferenciaTest #test03 stamp: 'ijgt 5/27/2021 21:25:25'!
PASSED!

!testRun: #TransferenciaTest #test04 stamp: 'ijgt 5/27/2021 21:25:25'!
PASSED!

!testRun: #TransferenciaTest #test05 stamp: 'ijgt 5/27/2021 21:25:25'!
PASSED!
!TransferenciaTest methodsFor: 'tests' stamp: 'ijgt 5/27/2021 21:55:06'!
test06

	|anAccount anotherAccount transferencia|
	anAccount  := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	transferencia := Transferencia from: anAccount to: anotherAccount withValue: 50.
	
	self assert: anAccount transferencias includes: transferencia.! !

----QUIT----(27 May 2021 21:55:35) CuisUniversity-4532.image priorSource: 17251183!

----STARTUP---- (28 May 2021 17:31:05) as /home/igna/Desktop/CuisNuevo/CuisUniversity-4532.image!


!classRenamed: #Transferencia as: #Transfer stamp: 'ijgt 5/28/2021 17:33:19'!
Smalltalk renameClassNamed: #Transferencia as: #Transfer!
!TransferenciaTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/28/2021 17:33:20' prior: 50872010!
test03

	|anAccount anotherAccount|
	anAccount  := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anAccount to: anotherAccount withValue: 60.
	self assert: (anAccount balance) equals: (-60)! !
!TransferenciaTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/28/2021 17:33:20' prior: 50871992!
test02

	|anAccount anotherAccount|
	anAccount  := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anAccount to: anotherAccount withValue: 50.
	self assert: (anAccount balance) equals: (-50)! !
!TransferenciaTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/28/2021 17:33:20' prior: 50872164!
test05

	|anAccount anotherAccount transferencia|
	anAccount  := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	transferencia := Transfer from: anAccount to: anotherAccount withValue: 50.
	
	self assert: transferencia senderAccount equals: anAccount.
	self assert: transferencia receiverAccount equals: anotherAccount.	! !
!TransferenciaTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/28/2021 17:33:20' prior: 50871820!
test01

	|anAccount anotherAccount|
	anAccount  := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anAccount to: anotherAccount withValue: 50.
	self assert: (anotherAccount balance) equals: 50 ! !
!TransferenciaTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/28/2021 17:33:20' prior: 50872058!
test04

	|anAccount anotherAccount|
	anAccount  := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	self should: [Transfer from: anAccount to: anotherAccount withValue: -60] 
		raise: Error 
		withExceptionDo: [:anError | self assert: (anError messageText) 
			equals: Transfer canNotTransferNegativeAmountErrorDescription]! !
!TransferenciaTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/28/2021 17:33:20' prior: 50872215!
test06

	|anAccount anotherAccount transferencia|
	anAccount  := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	transferencia := Transfer from: anAccount to: anotherAccount withValue: 50.
	
	self assert: anAccount transferencias includes: transferencia.! !

!classRenamed: #TransferenciaTest as: #TransferTest stamp: 'ijgt 5/28/2021 17:33:36'!
Smalltalk renameClassNamed: #TransferenciaTest as: #TransferTest!

Object subclass: #TransferLegs
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #TransferLegs category: 'Portfolio-18' stamp: 'ijgt 5/28/2021 17:34:00'!
Object subclass: #TransferLegs
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

Object subclass: #Transfer
	instanceVariableNames: 'withdrawLeg depositLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #Transfer category: 'Portfolio-18' stamp: 'ijgt 5/28/2021 17:42:44'!
Object subclass: #Transfer
	instanceVariableNames: 'withdrawLeg depositLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!
!Transfer methodsFor: 'testing patas' stamp: 'ijgt 5/28/2021 17:44:14' prior: 50872185!
senderAccount
	
	^withdrawLeg account! !
!Transfer methodsFor: 'testing patas' stamp: 'ijgt 5/28/2021 17:44:38' prior: 50872196!
receiverAccount
	
	^depositLeg account! !

Object subclass: #Transfer
	instanceVariableNames: 'value withdrawLeg depositLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #Transfer category: 'Portfolio-18' stamp: 'ijgt 5/28/2021 18:07:28'!
Object subclass: #Transfer
	instanceVariableNames: 'value withdrawLeg depositLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!
!Transfer methodsFor: 'initialize' stamp: 'ijgt 5/28/2021 18:13:36' prior: 50872137!
initializeFrom: aReceptiveAccount to: aSecondReceptiveAccount withValue: anAmount 

	(self assertAmountIsValid: anAmount) ifFalse: [self error: self class canNotTransferNegativeAmountErrorDescription].
	withdrawLeg := aReceptiveAccount withdrawTransaction: self.
	depositLeg := aSecondReceptiveAccount depositTransaction: self.
	value := anAmount.! !
!Transfer methodsFor: 'initialize' stamp: 'ijgt 5/28/2021 18:16:54' prior: 50872360!
initializeFrom: aReceptiveAccount to: aSecondReceptiveAccount withValue: anAmount 

	(self assertAmountIsValid: anAmount) ifFalse: [self error: self class canNotTransferNegativeAmountErrorDescription].
	withdrawLeg := aReceptiveAccount withdrawTransfer: self.
	depositLeg := aSecondReceptiveAccount depositTransfer: self.
	value := anAmount.! !
!ReceptiveAccount methodsFor: 'transfers' stamp: 'ijgt 5/28/2021 18:17:49'!
withdrawTransfer: aTransfer

	! !

TransferLegs subclass: #TransferWithdrawLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #TransferWithdrawLeg category: 'Portfolio-18' stamp: 'ijgt 5/28/2021 18:23:05'!
TransferLegs subclass: #TransferWithdrawLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

TransferLegs subclass: #TransferDepositLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #TransferDepositLeg category: 'Portfolio-18' stamp: 'ijgt 5/28/2021 18:23:10'!
TransferLegs subclass: #TransferDepositLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!
!ReceptiveAccount methodsFor: 'transfers' stamp: 'ijgt 5/28/2021 18:25:41' prior: 50872388!
withdrawTransfer: aTransfer

	^ TransferWithdrawLeg forTransfer: aTransfer withAccount: self.! !
!ReceptiveAccount methodsFor: 'transfers' stamp: 'ijgt 5/28/2021 18:26:02'!
depositTransfer: aTransfer

	^ TransferDepositLeg forTransfer: aTransfer withAccount: self.! !

!testRun: #TransferTest #test01 stamp: 'ijgt 5/28/2021 18:26:13'!
ERROR!

!testRun: #TransferTest #test01 stamp: 'ijgt 5/28/2021 18:26:13'!
ERROR!
!Transfer methodsFor: 'initialize' stamp: 'ijgt 5/28/2021 18:30:18' prior: 50872374!
initializeFrom: aReceptiveAccount to: aSecondReceptiveAccount withValue: anAmount 

	(self assertAmountIsValid: anAmount) ifFalse: [self error: self class canNotTransferNegativeAmountErrorDescription].
	withdrawLeg := aReceptiveAccount withdrawTransfer: self.
	depositLeg := aSecondReceptiveAccount depositTransfer: self.
	value := anAmount.
	
	Withdraw register: anAmount on: aReceptiveAccount.
	Deposit register: anAmount on: aSecondReceptiveAccount.! !

!testRun: #TransferTest #test01 stamp: 'ijgt 5/28/2021 18:30:26'!
ERROR!

!testRun: #TransferTest #test01 stamp: 'ijgt 5/28/2021 18:30:26'!
ERROR!
!TransferLegs class methodsFor: 'no messages' stamp: 'ijgt 5/28/2021 18:32:32'!
forTransfer: aTransfer withAccount: anAccount

	self subclassResponsibility! !
!TransferDepositLeg class methodsFor: 'no messages' stamp: 'ijgt 5/28/2021 18:33:05' overrides: 50872456!
forTransfer: aTransfer withAccount: anAccount! !
!TransferDepositLeg class methodsFor: 'as yet unclassified' stamp: 'ijgt 5/28/2021 18:33:16' prior: 50872462 overrides: 50872456!
forTransfer: aTransfer withAccount: anAccount! !
!TransferWithdrawLeg class methodsFor: 'no messages' stamp: 'ijgt 5/28/2021 18:33:38' overrides: 50872456!
forTransfer: aTransfer withAccount: anAccount! !

!testRun: #TransferTest #test01 stamp: 'ijgt 5/28/2021 18:34:10'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'ijgt 5/28/2021 18:34:12'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'ijgt 5/28/2021 18:34:13'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'ijgt 5/28/2021 18:34:15'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'ijgt 5/28/2021 18:34:16'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'ijgt 5/28/2021 18:34:17'!
ERROR!

!testRun: #TransferTest #test05 stamp: 'ijgt 5/28/2021 18:34:17'!
ERROR!
!TransferTest methodsFor: 'tests' stamp: 'ijgt 5/28/2021 18:42:42' prior: 50872259!
test05

	|anAccount anotherAccount transferencia|
	anAccount  := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	transferencia := Transfer from: anAccount to: anotherAccount withValue: 50.
	
	self assert: transferencia withdrawLeg equals: transferencia depositLeg withdrawLeg.! !
!Transfer methodsFor: 'testing patas' stamp: 'ijgt 5/28/2021 18:43:13'!
depositLeg
	
	^depositLeg! !
!Transfer methodsFor: 'testing patas' stamp: 'ijgt 5/28/2021 18:43:33'!
withdrawLeg
	
	^withdrawLeg! !

!methodRemoval: Transfer #senderAccount stamp: 'ijgt 5/28/2021 18:43:40'!
senderAccount
	
	^withdrawLeg account!

!methodRemoval: Transfer #receiverAccount stamp: 'ijgt 5/28/2021 18:43:45'!
receiverAccount
	
	^depositLeg account!

!testRun: #TransferTest #test05 stamp: 'ijgt 5/28/2021 18:44:14'!
ERROR!

!testRun: #TransferTest #test05 stamp: 'ijgt 5/28/2021 18:44:14'!
ERROR!

!classDefinition: #TransferDepositLeg category: 'Portfolio-18' stamp: 'ijgt 5/28/2021 18:45:50'!
TransferLegs subclass: #TransferDepositLeg
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!
!TransferDepositLeg methodsFor: 'no messages' stamp: 'ijgt 5/28/2021 18:45:42'!
withdrawLeg

	^ transfer withdrawLeg! !

TransferLegs subclass: #TransferDepositLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #TransferDepositLeg category: 'Portfolio-18' stamp: 'ijgt 5/28/2021 18:46:00'!
TransferLegs subclass: #TransferDepositLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

Object subclass: #TransferLegs
	instanceVariableNames: 'withdrawLeg depositLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #TransferLegs category: 'Portfolio-18' stamp: 'ijgt 5/28/2021 18:46:15'!
Object subclass: #TransferLegs
	instanceVariableNames: 'withdrawLeg depositLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

Object subclass: #TransferLegs
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #TransferLegs category: 'Portfolio-18' stamp: 'ijgt 5/28/2021 18:47:03'!
Object subclass: #TransferLegs
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!
!TransferWithdrawLeg methodsFor: 'no messages' stamp: 'ijgt 5/28/2021 18:47:35'!
depositLeg

	^ transfer depositLeg! !

!testRun: #TransferTest #test05 stamp: 'ijgt 5/28/2021 18:47:55'!
ERROR!

!testRun: #TransferTest #test05 stamp: 'ijgt 5/28/2021 18:47:55'!
ERROR!

!classDefinition: 'TransferLegs class' category: 'Portfolio-18' stamp: 'ijgt 5/28/2021 18:52:27'!
TransferLegs class
	instanceVariableNames: 'transfer'!
!TransferLegs class methodsFor: 'creation' stamp: 'ijgt 5/28/2021 18:52:24' prior: 50872456!
forTransfer: aTransfer withAccount: anAccount

	transfer := aTransfer.! !

!testRun: #TransferTest #test05 stamp: 'ijgt 5/28/2021 18:52:49'!
ERROR!

!testRun: #TransferTest #test05 stamp: 'ijgt 5/28/2021 18:52:49'!
ERROR!
!TransferLegs class methodsFor: 'creation' stamp: 'ijgt 5/28/2021 18:54:39' prior: 50872588!
forTransfer: aTransfer withAccount: anAccount

	self new initializeForTransfer: aTransfer! !
!TransferLegs methodsFor: 'no messages' stamp: 'ijgt 5/28/2021 18:55:03'!
initializeForTransfer: aTransfer

	transfer := aTransfer.! !

!testRun: #TransferTest #test05 stamp: 'ijgt 5/28/2021 18:55:11'!
ERROR!

!testRun: #TransferTest #test05 stamp: 'ijgt 5/28/2021 18:55:11'!
ERROR!
!TransferTest methodsFor: 'tests' stamp: 'ijgt 5/28/2021 18:56:25' prior: 50872494!
test05

	|anAccount anotherAccount transferencia|
	anAccount  := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	transferencia := Transfer from: anAccount to: anotherAccount withValue: 50.
	
	self assert: (transferencia withdrawLeg) equals: (transferencia depositLeg) withdrawLeg.! !
!ReceptiveAccount methodsFor: 'transfers' stamp: 'ijgt 5/28/2021 18:57:30' prior: 50872423!
depositTransfer: aTransfer

	^ (TransferDepositLeg forTransfer: aTransfer withAccount: self).! !
!ReceptiveAccount methodsFor: 'transfers' stamp: 'ijgt 5/28/2021 18:57:39' prior: 50872417!
withdrawTransfer: aTransfer

	^ (TransferWithdrawLeg forTransfer: aTransfer withAccount: self).! !

!testRun: #TransferTest #test05 stamp: 'ijgt 5/28/2021 18:57:44'!
ERROR!

!testRun: #TransferTest #test05 stamp: 'ijgt 5/28/2021 18:57:44'!
ERROR!

!methodRemoval: TransferDepositLeg class #forTransfer:withAccount: stamp: 'ijgt 5/28/2021 18:58:16'!
forTransfer: aTransfer withAccount: anAccount!

!methodRemoval: TransferWithdrawLeg class #forTransfer:withAccount: stamp: 'ijgt 5/28/2021 18:58:28'!
forTransfer: aTransfer withAccount: anAccount!

!testRun: #TransferTest #test05 stamp: 'ijgt 5/28/2021 18:58:45'!
ERROR!

!testRun: #TransferTest #test05 stamp: 'ijgt 5/28/2021 18:58:45'!
ERROR!

!testRun: #TransferTest #test05 stamp: 'ijgt 5/28/2021 18:59:17'!
ERROR!

!testRun: #TransferTest #test05 stamp: 'ijgt 5/28/2021 18:59:17'!
ERROR!
!TransferLegs class methodsFor: 'creation' stamp: 'ijgt 5/28/2021 18:59:52' prior: 50872598!
forTransfer: aTransfer withAccount: anAccount

	^ self new initializeForTransfer: aTransfer! !

!testRun: #TransferTest #test05 stamp: 'ijgt 5/28/2021 19:00:00'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'ijgt 5/28/2021 19:00:02'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'ijgt 5/28/2021 19:00:03'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'ijgt 5/28/2021 19:00:05'!
ERROR!

!testRun: #TransferTest #test06 stamp: 'ijgt 5/28/2021 19:00:05'!
ERROR!
!TransferTest methodsFor: 'tests' stamp: 'ijgt 5/28/2021 19:01:06' prior: 50872298!
test06

	|anAccount anotherAccount transferencia|
	anAccount  := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	transferencia := Transfer from: anAccount to: anotherAccount withValue: 50.
	
	! !
!TransferTest methodsFor: 'tests' stamp: 'ijgt 5/28/2021 19:01:18' prior: 50872681!
test06

	|anAccount anotherAccount transferencia|
	anAccount  := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	transferencia := Transfer from: anAccount to: anotherAccount withValue: 50.
	
	self assert: (transferencia withdrawLeg) equals: (transferencia depositLeg) withdrawLeg.! !

!testRun: #TransferTest #test06 stamp: 'ijgt 5/28/2021 19:01:20'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'ijgt 5/28/2021 19:01:20'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'ijgt 5/28/2021 19:01:20'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'ijgt 5/28/2021 19:01:20'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'ijgt 5/28/2021 19:01:20'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'ijgt 5/28/2021 19:01:20'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'ijgt 5/28/2021 19:01:20'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'ijgt 5/28/2021 19:01:30'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'ijgt 5/28/2021 19:01:30'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'ijgt 5/28/2021 19:01:30'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'ijgt 5/28/2021 19:01:30'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'ijgt 5/28/2021 19:01:30'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'ijgt 5/28/2021 19:01:30'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'ijgt 5/28/2021 19:01:30'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'ijgt 5/28/2021 19:01:35'!
PASSED!
!TransferTest methodsFor: 'tests' stamp: 'ijgt 5/28/2021 19:01:53' prior: 50872691!
test06

	|anAccount anotherAccount transferencia|
	anAccount  := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	transferencia := Transfer from: anAccount to: anotherAccount withValue: 50.
	
	self assert: (transferencia depositLeg ) equals: (transferencia withdrawLeg ) depositLeg .! !

!testRun: #TransferTest #test06 stamp: 'ijgt 5/28/2021 19:01:54'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'ijgt 5/28/2021 19:01:54'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'ijgt 5/28/2021 19:01:54'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'ijgt 5/28/2021 19:01:54'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'ijgt 5/28/2021 19:01:54'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'ijgt 5/28/2021 19:01:54'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'ijgt 5/28/2021 19:01:54'!
PASSED!

----QUIT----(28 May 2021 19:03:45) CuisUniversity-4532.image priorSource: 17298422!

----STARTUP---- (31 May 2021 15:41:29) as /home/igna/Desktop/CuisNuevo/CuisUniversity-4532.image!

!TransferTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 15:52:57'!
test07

	|anAccount|
	anAccount  := ReceptiveAccount new.
	self should: [Transfer from: anAccount to: anAccount withValue: 50] raise: Error withMessageText: [].! !
!TransferTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 15:56:27' prior: 50872773!
test07

	|anAccount|
	anAccount  := ReceptiveAccount new.
	self should: [Transfer from: anAccount to: anAccount withValue: 50] raise: Error withMessageText: [Transfer invalidAccountErrorDescription].! !

!testRun: #TransferTest #test07 stamp: 'ijgt 5/31/2021 15:56:33'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'ijgt 5/31/2021 16:00:04'!
invalidAccountErrorDescription

	^ 'Accounts in transfer must be different.'! !

!testRun: #TransferTest #test01 stamp: 'ijgt 5/31/2021 16:00:11'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'ijgt 5/31/2021 16:00:11'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'ijgt 5/31/2021 16:00:11'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'ijgt 5/31/2021 16:00:11'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'ijgt 5/31/2021 16:00:11'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'ijgt 5/31/2021 16:00:11'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'ijgt 5/31/2021 16:00:11'!
FAILURE!

!testRun: #TransferTest #test07 stamp: 'ijgt 5/31/2021 16:00:11'!
FAILURE!
!Transfer methodsFor: 'initialize' stamp: 'ijgt 5/31/2021 16:01:44' prior: 50872434!
initializeFrom: aReceptiveAccount to: aSecondReceptiveAccount withValue: anAmount 

	self assertTransferIsValidFrom: aReceptiveAccount to: aSecondReceptiveAccount withValue: anAmount.
	withdrawLeg := aReceptiveAccount withdrawTransfer: self.
	depositLeg := aSecondReceptiveAccount depositTransfer: self.
	value := anAmount.
	
	Withdraw register: anAmount on: aReceptiveAccount.
	Deposit register: anAmount on: aSecondReceptiveAccount.! !

!testRun: #TransferTest #test07 stamp: 'ijgt 5/31/2021 16:01:47'!
FAILURE!
!Transfer methodsFor: 'initialize' stamp: 'ijgt 5/31/2021 16:04:05'!
assertTransferIsValidFrom: anAccount to: aSecondAccount withValue: anAmount

	(anAmount > 0) ifFalse: [^self error: self class canNotTransferNegativeAmountErrorDescription]! !
!Transfer methodsFor: 'initialize' stamp: 'ijgt 5/31/2021 16:05:32' prior: 50872836!
assertTransferIsValidFrom: anAccount to: aSecondAccount withValue: anAmount

	(anAmount > 0) ifFalse: [^self error: self class canNotTransferNegativeAmountErrorDescription].
	(anAccount == aSecondAccount) ifTrue: [^ self error: self class invalidAccountErrorDescription]! !

!methodRemoval: Transfer #assertAmountIsValid: stamp: 'ijgt 5/31/2021 16:05:43'!
assertAmountIsValid: anAmount

	^ anAmount > 0!

!testRun: #TransferTest #test07 stamp: 'ijgt 5/31/2021 16:05:48'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'ijgt 5/31/2021 16:05:50'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'ijgt 5/31/2021 16:05:50'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'ijgt 5/31/2021 16:05:50'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'ijgt 5/31/2021 16:05:50'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'ijgt 5/31/2021 16:05:50'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'ijgt 5/31/2021 16:05:50'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'ijgt 5/31/2021 16:05:50'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'ijgt 5/31/2021 16:05:53'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'ijgt 5/31/2021 16:05:53'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'ijgt 5/31/2021 16:05:53'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'ijgt 5/31/2021 16:05:53'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'ijgt 5/31/2021 16:05:53'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'ijgt 5/31/2021 16:05:53'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'ijgt 5/31/2021 16:05:53'!
PASSED!

TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #ReportTest category: 'Portfolio-18' stamp: 'ijgt 5/31/2021 16:12:18'!
TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #Report category: 'Portfolio-18' stamp: 'ijgt 5/31/2021 16:16:09'!
Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!
!ReportTest methodsFor: 'no messages' stamp: 'ijgt 5/31/2021 16:15:46'!
test01

	| accountReport anAccount |
	accountReport := Report for: anAccount.
	self assert: (accountReport at: 1) equals: ('Balance: 0')! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'ijgt 5/31/2021 16:18:59' prior: 50872913!
test01

	| accountReport |
	accountReport := Report for: ReceptiveAccount new.
	self assert: (accountReport at: 1) equals: ('Balance = 0').
	self assert: (accountReport size) equals: 1.! !
!TransferLegs methodsFor: 'testing' stamp: 'ijgt 5/31/2021 16:21:40'!
withdrawLeg

	self shouldBeImplemented! !
!TransferLegs methodsFor: 'testing' stamp: 'ijgt 5/31/2021 16:21:45'!
depositLeg

	self shouldBeImplemented! !
!TransferDepositLeg methodsFor: 'testing' stamp: 'ijgt 5/31/2021 16:22:06' overrides: 50872934!
depositLeg

	^ self! !

!methodRemoval: TransferDepositLeg #depositLeg stamp: 'ijgt 5/31/2021 16:22:58'!
depositLeg

	^ self!

!methodRemoval: TransferLegs #withdrawLeg stamp: 'ijgt 5/31/2021 16:23:13'!
withdrawLeg

	self shouldBeImplemented!

!methodRemoval: TransferLegs #depositLeg stamp: 'ijgt 5/31/2021 16:23:18'!
depositLeg

	self shouldBeImplemented!

!testRun: #TransferTest #test01 stamp: 'ijgt 5/31/2021 16:23:26'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'ijgt 5/31/2021 16:23:26'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'ijgt 5/31/2021 16:23:26'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'ijgt 5/31/2021 16:23:26'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'ijgt 5/31/2021 16:23:26'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'ijgt 5/31/2021 16:23:26'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'ijgt 5/31/2021 16:23:26'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 5/31/2021 16:26:22'!
ERROR!
!Report class methodsFor: 'instance creation' stamp: 'ijgt 5/31/2021 16:26:40'!
for: aReceptiveAccount 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aReceptiveAccount ! !
!Report class methodsFor: 'instance creation' stamp: 'ijgt 5/31/2021 16:27:19' prior: 50872972!
for: anAccount
	
	^self new initializeFor: anAccount ! !

!testRun: #ReportTest #test01 stamp: 'ijgt 5/31/2021 16:27:21'!
ERROR!

!classDefinition: #Report category: 'Portfolio-18' stamp: 'ijgt 5/31/2021 16:27:36'!
Object subclass: #Report
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!
!Report methodsFor: 'initialize' stamp: 'ijgt 5/31/2021 16:27:36'!
initializeFor: anAccount 
	self shouldBeImplemented.
	account := anAccount.! !
!Report methodsFor: 'initialize' stamp: 'ijgt 5/31/2021 16:29:11' prior: 50872994!
initializeFor: anAccount 
	
	account := anAccount.! !

!testRun: #ReportTest #test01 stamp: 'ijgt 5/31/2021 16:29:13'!
ERROR!
!Report methodsFor: 'initialize' stamp: 'ijgt 5/31/2021 16:36:05' prior: 50873000!
initializeFor: anAccount 
	
	account := anAccount.! !
!ReportTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 16:38:15' prior: 50872921!
test01

	| accountReport |
	accountReport := Report for: ReceptiveAccount new.
	self assert: (accountReport at: 1) equals: ('Balance = 0').
	self assert: (accountReport size) equals: 1.! !
!Report class methodsFor: 'instance creation' stamp: 'ijgt 5/31/2021 16:39:22' prior: 50872981!
for: anAccount
	
	^self new initializeFor: anAccount ; report! !
!Report methodsFor: 'report' stamp: 'ijgt 5/31/2021 16:39:50'!
report

! !
!Report methodsFor: 'report' stamp: 'ijgt 5/31/2021 16:39:51' prior: 50873025!
report

	! !
!Report methodsFor: 'report' stamp: 'ijgt 5/31/2021 16:39:53' prior: 50873028!
report

	! !
!Report methodsFor: 'report' stamp: 'ijgt 5/31/2021 16:40:45' prior: 50873031!
report

	^ 'Balance = 0'! !
!ReportTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 16:41:40' prior: 50873012!
test01

	| accountReport |
	accountReport := Report for: ReceptiveAccount new.
	self assert: (accountReport at: 1) equals: ('Balance = 0').
	self assert: (accountReport size) equals: 1.! !
!Report methodsFor: 'report' stamp: 'ijgt 5/31/2021 16:43:04' prior: 50873034!
report

	|aReport|
	aReport := OrderedCollection new.
	aReport add: 'Balance = 0'.
	
	^ aReport! !

!testRun: #ReportTest #test01 stamp: 'ijgt 5/31/2021 16:43:09'!
PASSED!
!ReportTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 16:44:09'!
test02

	| accountReport |
	accountReport := Report for: (ReceptiveAccount new).
	self assert: (accountReport at: 1) equals: ('Balance = 0').
	self assert: (accountReport size) equals: 1.! !
!ReportTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 16:47:58' prior: 50873055!
test02

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Deposit for 100').
	self assert: (accountReport at: 2) equals: ('Balance = 100').
	self assert: (accountReport size) equals: 1.! !
!ReportTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 16:48:13' prior: 50873064!
test02

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Deposit for 100.').
	self assert: (accountReport at: 2) equals: ('Balance = 100').
	self assert: (accountReport size) equals: 1.! !
!ReportTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 16:48:20' prior: 50873077!
test02

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Deposit for 100.').
	self assert: (accountReport at: 2) equals: ('Balance = 100').
	self assert: (accountReport size) equals: 2.! !

!testRun: #ReportTest #test02 stamp: 'ijgt 5/31/2021 16:48:23'!
FAILURE!

!testRun: #ReportTest #test02 stamp: 'ijgt 5/31/2021 16:48:23'!
FAILURE!
!Report methodsFor: 'report' stamp: 'ijgt 5/31/2021 16:52:40' prior: 50873047!
report

	|aReport|
	aReport := OrderedCollection new.
	account transactions = 0 ifFalse: [aReport add: 'Deposit for 100.'].
	aReport add: 'Balance = ', account balance asString.
	
	^ aReport! !

!testRun: #ReportTest #test02 stamp: 'ijgt 5/31/2021 16:52:44'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 5/31/2021 16:52:47'!
FAILURE!

!testRun: #ReportTest #test02 stamp: 'ijgt 5/31/2021 16:52:47'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 5/31/2021 16:52:47'!
FAILURE!

!testRun: #ReportTest #test01 stamp: 'ijgt 5/31/2021 16:52:52'!
FAILURE!

!testRun: #ReportTest #test01 stamp: 'ijgt 5/31/2021 16:52:52'!
FAILURE!
!Report methodsFor: 'report' stamp: 'ijgt 5/31/2021 16:53:20' prior: 50873108!
report

	|aReport|
	aReport := OrderedCollection new.
	account transactions isEmpty ifFalse: [aReport add: 'Deposit for 100.'].
	aReport add: 'Balance = ', account balance asString.
	
	^ aReport! !

!testRun: #ReportTest #test01 stamp: 'ijgt 5/31/2021 16:53:24'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 5/31/2021 16:53:26'!
PASSED!
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 5/31/2021 21:41:18'!
summary

	! !
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 5/31/2021 21:41:56' prior: 50873145!
summary

	|aReport|
	aReport := OrderedCollection new.
	transactions isEmpty ifFalse: [aReport add: 'Deposit for 100.'].
	aReport add: 'Balance = ', self balance asString.
	
	^ aReport! !
!Report methodsFor: 'report' stamp: 'ijgt 5/31/2021 21:42:11' prior: 50873131!
report

	^ account summary! !

!testRun: #ReportTest #test01 stamp: 'ijgt 5/31/2021 21:42:15'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 5/31/2021 21:42:16'!
PASSED!
!ReportTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 21:42:52'!
test03

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Deposit for 100.').
	self assert: (accountReport at: 2) equals: ('Balance = 100').
	self assert: (accountReport size) equals: 2.! !
!ReportTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 21:43:39' prior: 50873166!
test03

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Deposit register: 100 on: anAccount.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Deposit for 100.').
	self assert: (accountReport at: 1) equals: ('Deposit for 100.').
	self assert: (accountReport at: 2) equals: ('Balance = 100').
	self assert: (accountReport size) equals: 2.! !

!testRun: #ReportTest #test03 stamp: 'ijgt 5/31/2021 21:43:41'!
FAILURE!
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 5/31/2021 21:45:49' prior: 50873149!
summary

	|aReport|
	aReport := OrderedCollection new.
	transactions do: [:transaction|
		aReport add: 'Deposit for 100.'
		].
	aReport add: 'Balance = ', self balance asString.
	
	^ aReport! !
!ReportTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 21:46:26' prior: 50873179!
test03

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Deposit register: 50 on: anAccount.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Deposit for 100.').
	self assert: (accountReport at: 2) equals: ('Deposit for 50.').
	self assert: (accountReport at: 3) equals: ('Balance = 100').
	self assert: (accountReport size) equals: 3.! !
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 5/31/2021 21:47:15' prior: 50873198!
summary

	|aReport|
	aReport := OrderedCollection new.
	transactions do: [:transaction|
		aReport add: 'Deposit for ', transaction amount asString.
		].
	aReport add: 'Balance = ', self balance asString.
	
	^ aReport! !
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 5/31/2021 21:48:00' prior: 50873224!
summary

	|aReport|
	aReport := OrderedCollection new.
	transactions do: [:transaction|
		aReport add: 'Deposit for ', transaction value asString.
		].
	aReport add: 'Balance = ', self balance asString.
	
	^ aReport! !

!testRun: #ReportTest #test03 stamp: 'ijgt 5/31/2021 21:48:19'!
FAILURE!

!testRun: #ReportTest #test03 stamp: 'ijgt 5/31/2021 21:48:19'!
FAILURE!
!ReportTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 21:48:50' prior: 50873207!
test03

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Deposit register: 50 on: anAccount.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Deposit for 100').
	self assert: (accountReport at: 2) equals: ('Deposit for 50').
	self assert: (accountReport at: 3) equals: ('Balance = 100').
	self assert: (accountReport size) equals: 3.! !

!testRun: #ReportTest #test03 stamp: 'ijgt 5/31/2021 21:48:53'!
FAILURE!
!ReportTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 21:49:00' prior: 50873249!
test03

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Deposit register: 50 on: anAccount.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Deposit for 100').
	self assert: (accountReport at: 2) equals: ('Deposit for 50').
	self assert: (accountReport at: 3) equals: ('Balance = 150').
	self assert: (accountReport size) equals: 3.! !

!testRun: #ReportTest #test03 stamp: 'ijgt 5/31/2021 21:49:01'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 5/31/2021 21:49:01'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 5/31/2021 21:49:01'!
FAILURE!

!testRun: #ReportTest #test03 stamp: 'ijgt 5/31/2021 21:49:01'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 5/31/2021 21:49:01'!
FAILURE!

!testRun: #ReportTest #test03 stamp: 'ijgt 5/31/2021 21:49:11'!
PASSED!
!ReportTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 21:49:23' prior: 50873090!
test02

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Deposit for 100').
	self assert: (accountReport at: 2) equals: ('Balance = 100').
	self assert: (accountReport size) equals: 2.! !

!testRun: #ReportTest #test01 stamp: 'ijgt 5/31/2021 21:49:28'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 5/31/2021 21:49:28'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 5/31/2021 21:49:28'!
PASSED!
!ReportTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 21:49:57'!
test04

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Deposit for 100').
	self assert: (accountReport at: 2) equals: ('Withdraw for 50').
	self assert: (accountReport at: 3) equals: ('Balance = 50').
	self assert: (accountReport size) equals: 3.! !

!testRun: #ReportTest #test04 stamp: 'ijgt 5/31/2021 21:50:02'!
FAILURE!

!testRun: #ReportTest #test04 stamp: 'ijgt 5/31/2021 21:50:02'!
FAILURE!
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 5/31/2021 21:51:31' prior: 50873234!
summary

	|aReport|
	aReport := OrderedCollection new.
	transactions do: [:transaction|
		(transaction isKindOf: #Deposit) ifTrue: [aReport add: 'Deposit for ', transaction value asString].
		(transaction isKindOf: #Withdraw) ifTrue: [aReport add: 'Withdraw for ', transaction value asString].
		].
	aReport add: 'Balance = ', self balance asString.
	
	^ aReport! !

!testRun: #ReportTest #test04 stamp: 'ijgt 5/31/2021 21:51:37'!
FAILURE!

!testRun: #ReportTest #test04 stamp: 'ijgt 5/31/2021 21:51:37'!
FAILURE!

!testRun: #ReportTest #test04 stamp: 'ijgt 5/31/2021 21:51:58'!
FAILURE!

!testRun: #ReportTest #test04 stamp: 'ijgt 5/31/2021 21:51:58'!
FAILURE!

!testRun: #ReportTest #test04 stamp: 'ijgt 5/31/2021 21:52:16'!
FAILURE!
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 5/31/2021 21:52:57' prior: 50873339!
summary

	|aReport|
	aReport := OrderedCollection new.
	transactions do: [:transaction|
		(transaction isKindOf: Deposit) ifTrue: [aReport add: 'Deposit for ', transaction value asString].
		(transaction isKindOf: Withdraw) ifTrue: [aReport add: 'Withdraw for ', transaction value asString].
		].
	aReport add: 'Balance = ', self balance asString.
	
	^ aReport! !

!testRun: #ReportTest #test04 stamp: 'ijgt 5/31/2021 21:53:03'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 5/31/2021 21:53:05'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 5/31/2021 21:53:05'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 5/31/2021 21:53:05'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 5/31/2021 21:53:05'!
PASSED!
!ReportTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 21:57:48'!
test05

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 100.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Salida por transferencia de 100').
	self assert: (accountReport at: 3) equals: ('Balance = -100').
	self assert: (accountReport size) equals: 3.! !
!ReportTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 21:57:57' prior: 50873390!
test05

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 100.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Salida por transferencia de 100').
	self assert: (accountReport at: 3) equals: ('Balance = -100').
	self assert: (accountReport size) equals: 2.! !
!ReportTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 21:58:04' prior: 50873406!
test05

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 100.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Salida por transferencia de 100').
	self assert: (accountReport at: 2) equals: ('Balance = -100').
	self assert: (accountReport size) equals: 2.! !

!testRun: #ReportTest #test05 stamp: 'ijgt 5/31/2021 21:58:09'!
FAILURE!
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 5/31/2021 21:58:53' prior: 50873365!
summary

	|aReport|
	aReport := OrderedCollection new.
	transactions do: [:transaction|
		(transaction isKindOf: Deposit) ifTrue: [aReport add: 'Depósito por ', transaction value asString].
		(transaction isKindOf: Withdraw) ifTrue: [aReport add: 'Extracción por ', transaction value asString].
		].
	aReport add: 'Balance = ', self balance asString.
	
	^ aReport! !
!ReportTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 21:59:27' prior: 50873298!
test02

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Depósito por 100').
	self assert: (accountReport at: 2) equals: ('Balance = 100').
	self assert: (accountReport size) equals: 2.! !

!testRun: #ReportTest #test01 stamp: 'ijgt 5/31/2021 21:59:31'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 5/31/2021 21:59:32'!
PASSED!
!ReportTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 21:59:49' prior: 50873268!
test03

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Deposit register: 50 on: anAccount.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Depósito por 100').
	self assert: (accountReport at: 2) equals: ('Depósito por 50').
	self assert: (accountReport at: 3) equals: ('Balance = 150').
	self assert: (accountReport size) equals: 3.! !

!testRun: #ReportTest #test03 stamp: 'ijgt 5/31/2021 21:59:52'!
PASSED!
!ReportTest methodsFor: 'tests' stamp: 'ijgt 5/31/2021 22:00:13' prior: 50873318!
test04

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Depósito por 100').
	self assert: (accountReport at: 2) equals: ('Extracción por 50').
	self assert: (accountReport at: 3) equals: ('Balance = 50').
	self assert: (accountReport size) equals: 3.! !

!testRun: #ReportTest #test01 stamp: 'ijgt 5/31/2021 22:00:20'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 5/31/2021 22:00:20'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 5/31/2021 22:00:20'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 5/31/2021 22:00:20'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 5/31/2021 22:00:20'!
FAILURE!

!testRun: #ReportTest #test05 stamp: 'ijgt 5/31/2021 22:00:20'!
FAILURE!

!testRun: #ReportTest #test01 stamp: 'ijgt 5/31/2021 22:00:26'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 5/31/2021 22:00:27'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 5/31/2021 22:00:28'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 5/31/2021 22:00:29'!
PASSED!

----QUIT----(31 May 2021 22:05:23) CuisUniversity-4532.image priorSource: 17315738!

----STARTUP---- (1 June 2021 15:46:31) as /home/igna/Desktop/CuisNuevo/CuisUniversity-4532.image!


!testRun: #ReportTest #test01 stamp: 'ijgt 6/1/2021 15:50:21'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/1/2021 15:50:22'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/1/2021 15:50:24'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/1/2021 15:50:25'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 15:50:26'!
FAILURE!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 15:50:26'!
FAILURE!
!Transfer methodsFor: 'initialize' stamp: 'ijgt 6/1/2021 15:54:11' prior: 50872817!
initializeFrom: aReceptiveAccount to: aSecondReceptiveAccount withValue: anAmount 

	self assertTransferIsValidFrom: aReceptiveAccount to: aSecondReceptiveAccount withValue: anAmount.
	withdrawLeg := aReceptiveAccount withdrawTransfer: self.
	depositLeg := aSecondReceptiveAccount depositTransfer: self.
	value := anAmount.
	
	TransferWithdrawLeg register: anAmount on: aReceptiveAccount.
	TransferDepositLeg register: anAmount on: aSecondReceptiveAccount.! !
!TransferLegs class methodsFor: 'creation' stamp: 'ijgt 6/1/2021 15:54:56'!
register: anAmount on: anAccount! !
!TransferLegs class methodsFor: 'creation' stamp: 'ijgt 6/1/2021 16:00:36' prior: 50873569!
register: anAmount on: anAccount

	| transaction |
	
	transaction := self for: anAmount.
	anAccount register: transaction.
	
	^ transaction! !

!testRun: #ReportTest #test04 stamp: 'ijgt 6/1/2021 16:01:10'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 16:01:11'!
ERROR!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 16:01:11'!
ERROR!
!TransferDepositLeg class methodsFor: 'nil' stamp: 'ijgt 6/1/2021 16:04:24'!
for: aValue

	^ self new initializeFor: aValue ! !
!TransferWithdrawLeg class methodsFor: 'no messages' stamp: 'ijgt 6/1/2021 16:04:38'!
for: aValue

	^ self new initializeFor: aValue ! !
!Transfer methodsFor: 'value' stamp: 'ijgt 6/1/2021 16:08:57' overrides: 16881508!
value

	^ value! !
!TransferDepositLeg methodsFor: 'testing' stamp: 'ijgt 6/1/2021 16:09:25'!
affectBalance: aBalance

	^aBalance + transfer value! !
!TransferLegs methodsFor: 'affectBalance' stamp: 'ijgt 6/1/2021 16:09:57'!
affectBalance: aBalance

	self subclassResponsibility! !
!TransferWithdrawLeg methodsFor: 'affectBalance' stamp: 'ijgt 6/1/2021 16:10:23' overrides: 50873605!
affectBalance: aBalance

	^aBalance + transfer value ! !

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 16:10:43'!
ERROR!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 16:10:43'!
ERROR!
!TransferLegs class methodsFor: 'creation' stamp: 'ijgt 6/1/2021 16:12:59'!
forTransfer: aTransfer 

	^ self new initializeForTransfer: aTransfer! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'ijgt 6/1/2021 16:12:59' prior: 50872633!
withdrawTransfer: aTransfer

	^ (TransferWithdrawLeg forTransfer: aTransfer ).! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'ijgt 6/1/2021 16:12:59' prior: 50872627!
depositTransfer: aTransfer

	^ (TransferDepositLeg forTransfer: aTransfer ).! !

!methodRemoval: TransferLegs class #forTransfer:withAccount: stamp: 'ijgt 6/1/2021 16:12:59'!
forTransfer: aTransfer withAccount: anAccount

	^ self new initializeForTransfer: aTransfer!
!TransferWithdrawLeg methodsFor: 'affectBalance' stamp: 'ijgt 6/1/2021 16:17:25' prior: 50873610 overrides: 50873605!
affectBalance: aBalance

	^aBalance - transfer value ! !

!methodRemoval: TransferDepositLeg class #for: stamp: 'ijgt 6/1/2021 16:17:37'!
for: aValue

	^ self new initializeFor: aValue !

!methodRemoval: TransferWithdrawLeg class #for: stamp: 'ijgt 6/1/2021 16:17:51'!
for: aValue

	^ self new initializeFor: aValue !
!Transfer methodsFor: 'initialize' stamp: 'ijgt 6/1/2021 16:25:33' prior: 50873552!
initializeFrom: aReceptiveAccount to: aSecondReceptiveAccount withValue: anAmount 

	self assertTransferIsValidFrom: aReceptiveAccount to: aSecondReceptiveAccount withValue: anAmount.
	withdrawLeg := aReceptiveAccount withdrawTransfer: self.
	depositLeg := aSecondReceptiveAccount depositTransfer: self.
	value := anAmount.
	
	aReceptiveAccount register: (TransferWithdrawLeg forTransfer: self).! !
!ReceptiveAccount methodsFor: 'transfers' stamp: 'ijgt 6/1/2021 16:30:15' prior: 50873631!
depositTransfer: aTransfer
	
	|transferLeg|
	
	transferLeg := TransferDepositLeg forTransfer: aTransfer.
	self register: transferLeg.
	^ transferLeg.! !
!ReceptiveAccount methodsFor: 'transfers' stamp: 'ijgt 6/1/2021 16:30:48' prior: 50873625!
withdrawTransfer: aTransfer

	|transferLeg|
	
	transferLeg := TransferWithdrawLeg forTransfer: aTransfer.
	self register: transferLeg.
	^ transferLeg.! !
!Transfer methodsFor: 'initialize' stamp: 'ijgt 6/1/2021 16:31:14' prior: 50873657!
initializeFrom: aReceptiveAccount to: aSecondReceptiveAccount withValue: anAmount 

	self assertTransferIsValidFrom: aReceptiveAccount to: aSecondReceptiveAccount withValue: anAmount.
	withdrawLeg := aReceptiveAccount withdrawTransfer: self.
	depositLeg := aSecondReceptiveAccount depositTransfer: self.
	value := anAmount.! !
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 6/1/2021 16:33:44' prior: 50873441!
summary

	|aReport|
	aReport := OrderedCollection new.
	transactions do: [:transaction|
		(transaction isKindOf: Deposit) ifTrue: [aReport add: 'Depósito por ', transaction value asString].
		(transaction isKindOf: Withdraw) ifTrue: [aReport add: 'Extracción por ', transaction value asString].
		(transaction isKindOf: TransferWithdrawLeg) ifTrue: [aReport add: 'Salida por transferencia de ', transaction value asString].
		].
	aReport add: 'Balance = ', self balance asString.
	
	^ aReport! !
!TransferLegs methodsFor: 'value' stamp: 'ijgt 6/1/2021 16:34:57' overrides: 16881508!
value

	^ transfer value! !

!methodRemoval: TransferLegs class #register:on: stamp: 'ijgt 6/1/2021 16:35:53'!
register: anAmount on: anAccount

	| transaction |
	
	transaction := self for: anAmount.
	anAccount register: transaction.
	
	^ transaction!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 16:36:07'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/1/2021 16:36:10'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/1/2021 16:36:10'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/1/2021 16:36:10'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/1/2021 16:36:10'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 16:36:10'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'ijgt 6/1/2021 16:36:21'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'ijgt 6/1/2021 16:36:21'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'ijgt 6/1/2021 16:36:21'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'ijgt 6/1/2021 16:36:21'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'ijgt 6/1/2021 16:36:21'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'ijgt 6/1/2021 16:36:21'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'ijgt 6/1/2021 16:36:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 6/1/2021 16:36:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 6/1/2021 16:36:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 6/1/2021 16:36:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 6/1/2021 16:36:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 6/1/2021 16:36:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 6/1/2021 16:36:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 6/1/2021 16:36:28'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'ijgt 6/1/2021 16:36:31'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'ijgt 6/1/2021 16:36:31'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'ijgt 6/1/2021 16:36:31'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'ijgt 6/1/2021 16:36:31'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'ijgt 6/1/2021 16:36:31'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'ijgt 6/1/2021 16:36:31'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'ijgt 6/1/2021 16:36:31'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'ijgt 6/1/2021 16:36:31'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'ijgt 6/1/2021 16:36:31'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'ijgt 6/1/2021 16:36:31'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'ijgt 6/1/2021 16:36:31'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'ijgt 6/1/2021 16:36:31'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'ijgt 6/1/2021 16:36:31'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'ijgt 6/1/2021 16:36:31'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'ijgt 6/1/2021 16:36:31'!
PASSED!
!ReportTest methodsFor: 'tests' stamp: 'ijgt 6/1/2021 16:37:45'!
test06

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 100.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Salida por transferencia de 100').
	self assert: (accountReport at: 2) equals: ('Balance = -100').
	self assert: (accountReport size) equals: 2.! !
!ReportTest methodsFor: 'tests' stamp: 'ijgt 6/1/2021 16:38:11' prior: 50873845!
test06

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 100.
	accountReport := Report for: (anotherAccount).
	self assert: (accountReport at: 1) equals: ('Entrada por transferencia de 100').
	self assert: (accountReport at: 2) equals: ('Balance = 100').
	self assert: (accountReport size) equals: 2.! !

!testRun: #ReportTest #test06 stamp: 'ijgt 6/1/2021 16:38:20'!
FAILURE!
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 6/1/2021 16:38:58' prior: 50873702!
summary

	|aReport|
	aReport := OrderedCollection new.
	transactions do: [:transaction|
		(transaction isKindOf: Deposit) ifTrue: [aReport add: 'Depósito por ', transaction value asString].
		(transaction isKindOf: Withdraw) ifTrue: [aReport add: 'Extracción por ', transaction value asString].
		(transaction isKindOf: TransferWithdrawLeg) ifTrue: [aReport add: 'Salida por transferencia de ', transaction value asString].
		(transaction isKindOf: TransferDepositLeg) ifTrue: [aReport add: 'Entrada por transferencia de ', transaction value asString].
		].
	aReport add: 'Balance = ', self balance asString.
	
	^ aReport! !

!testRun: #ReportTest #test06 stamp: 'ijgt 6/1/2021 16:39:06'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/1/2021 16:39:09'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/1/2021 16:39:09'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/1/2021 16:39:09'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/1/2021 16:39:09'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 16:39:09'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/1/2021 16:39:09'!
PASSED!
!ReportTest methodsFor: 'tests' stamp: 'ijgt 6/1/2021 16:42:22'!
test07

	| accountReport |
	accountReport := Report for: Portfolio new.
	self assert: (accountReport at: 1) equals: ('Balance = 0').
	self assert: (accountReport size) equals: 1.! !

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 16:42:29'!
ERROR!
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/1/2021 16:45:18'!
summary

	! !
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/1/2021 16:45:37' prior: 50873928!
summary

	^ 'Balance = 0'! !

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 16:45:48'!
FAILURE!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 16:45:48'!
FAILURE!
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/1/2021 16:46:59' prior: 50873931!
summary

	|aReport|
	aReport := OrderedCollection new.
	aReport add: 'Balance = 0'.
	
	^ aReport! !

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 16:47:05'!
PASSED!
!ReportTest methodsFor: 'tests' stamp: 'ijgt 6/1/2021 16:50:21'!
test08

	| anAccount aPortfolio portfolioReport|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	aPortfolio := Portfolio new.
	portfolioReport := Report for: (aPortfolio).
	self assert: (portfolioReport at: 1) equals: ('Depósito por 100').
	self assert: (portfolioReport at: 2) equals: ('Extracción por 50').
	self assert: (portfolioReport at: 3) equals: ('Balance = 50').
	self assert: (portfolioReport size) equals: 3.! !
!ReportTest methodsFor: 'tests' stamp: 'ijgt 6/1/2021 16:50:58' prior: 50873947!
test08

	| anAccount aPortfolio portfolioReport|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	aPortfolio := Portfolio with: anAccount.
	portfolioReport := Report for: (aPortfolio).
	self assert: (portfolioReport at: 1) equals: ('Depósito por 100').
	self assert: (portfolioReport at: 2) equals: ('Extracción por 50').
	self assert: (portfolioReport at: 3) equals: ('Balance = 50').
	self assert: (portfolioReport size) equals: 3.! !

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 16:50:59'!
FAILURE!
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/1/2021 16:55:40' prior: 50873939!
summary

	|aReport|
	aReport := OrderedCollection new.
	accounts do: [:account | aReport addAll: account summary].
	aReport add: 'Balance =', self balance asString
	
	^ aReport! !
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/1/2021 16:55:42' prior: 50873986!
summary

	|aReport|
	aReport := OrderedCollection new.
	accounts do: [:account | aReport addAll: account summary].
	aReport add: 'Balance =', self balance asString.
	
	^ aReport! !

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 16:55:49'!
FAILURE!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 16:55:49'!
FAILURE!
!ReportTest methodsFor: 'tests' stamp: 'ijgt 6/1/2021 16:56:15' prior: 50873965!
test08

	| anAccount aPortfolio portfolioReport|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	aPortfolio := Portfolio with: anAccount.
	portfolioReport := Report for: (aPortfolio).
	self assert: (portfolioReport at: 1) equals: ('Depósito por 100').
	self assert: (portfolioReport at: 2) equals: ('Extracción por 50').
	self assert: (portfolioReport at: 3) equals: ('Balance = 50').
	self assert: (portfolioReport at: 3) equals: ('Balance = 50').
	self assert: (portfolioReport size) equals: 4.! !

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 16:56:17'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/1/2021 16:56:17'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/1/2021 16:56:17'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/1/2021 16:56:17'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/1/2021 16:56:17'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 16:56:17'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/1/2021 16:56:17'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 16:56:17'!
FAILURE!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 16:56:17'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 16:56:17'!
FAILURE!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 16:57:02'!
FAILURE!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 16:57:02'!
FAILURE!
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/1/2021 16:57:29' prior: 50873995!
summary

	|aReport|
	aReport := OrderedCollection new.
	accounts do: [:account | aReport addAll: account summary].
	aReport add: 'Balance = ', self balance asString.
	
	^ aReport! !

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 16:57:37'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 16:57:39'!
PASSED!
!ReportTest methodsFor: 'tests' stamp: 'ijgt 6/1/2021 16:58:07' prior: 50874008!
test08

	| anAccount aPortfolio portfolioReport|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	aPortfolio := Portfolio with: anAccount.
	portfolioReport := Report for: (aPortfolio).
	self assert: (portfolioReport at: 1) equals: ('Depósito por 100').
	self assert: (portfolioReport at: 2) equals: ('Extracción por 50').
	self assert: (portfolioReport at: 3) equals: ('Balance = 50').
	self assert: (portfolioReport at: 4) equals: ('Balance = 50').
	self assert: (portfolioReport size) equals: 4.! !

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 16:58:09'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/1/2021 16:58:09'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/1/2021 16:58:09'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/1/2021 16:58:09'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/1/2021 16:58:09'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 16:58:09'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/1/2021 16:58:09'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 16:58:09'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 16:58:09'!
PASSED!
!Account methodsFor: 'report' stamp: 'ijgt 6/1/2021 16:58:42'!
summary
	
	self subclassResponsibility! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'ijgt 6/1/2021 16:58:58'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'ijgt 6/1/2021 16:58:58'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'ijgt 6/1/2021 16:58:58'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'ijgt 6/1/2021 16:58:58'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'ijgt 6/1/2021 16:58:58'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'ijgt 6/1/2021 16:58:58'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'ijgt 6/1/2021 16:58:58'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'ijgt 6/1/2021 16:58:58'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'ijgt 6/1/2021 16:58:58'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'ijgt 6/1/2021 16:58:58'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'ijgt 6/1/2021 16:58:58'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'ijgt 6/1/2021 16:58:58'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'ijgt 6/1/2021 16:58:58'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'ijgt 6/1/2021 16:58:58'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'ijgt 6/1/2021 16:58:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 6/1/2021 16:58:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 6/1/2021 16:58:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 6/1/2021 16:58:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 6/1/2021 16:58:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 6/1/2021 16:58:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 6/1/2021 16:58:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 6/1/2021 16:58:59'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/1/2021 16:59:01'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/1/2021 16:59:01'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/1/2021 16:59:01'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/1/2021 16:59:01'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 16:59:01'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/1/2021 16:59:01'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 16:59:01'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 16:59:01'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'ijgt 6/1/2021 16:59:04'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'ijgt 6/1/2021 16:59:04'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'ijgt 6/1/2021 16:59:04'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'ijgt 6/1/2021 16:59:04'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'ijgt 6/1/2021 16:59:04'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'ijgt 6/1/2021 16:59:04'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'ijgt 6/1/2021 16:59:04'!
PASSED!

AccountTransaction subclass: #TransferLegs
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #TransferLegs category: 'Portfolio-18' stamp: 'ijgt 6/1/2021 16:59:32'!
AccountTransaction subclass: #TransferLegs
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

TransferLegs class
	instanceVariableNames: ''!

!classDefinition: 'TransferLegs class' category: 'Portfolio-18' stamp: 'ijgt 6/1/2021 17:03:33'!
TransferLegs class
	instanceVariableNames: ''!

!testRun: #TransferTest #test01 stamp: 'ijgt 6/1/2021 17:03:44'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'ijgt 6/1/2021 17:03:44'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'ijgt 6/1/2021 17:03:44'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'ijgt 6/1/2021 17:03:44'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'ijgt 6/1/2021 17:03:44'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'ijgt 6/1/2021 17:03:44'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'ijgt 6/1/2021 17:03:44'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/1/2021 17:03:46'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/1/2021 17:03:46'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/1/2021 17:03:46'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/1/2021 17:03:46'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 17:03:46'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/1/2021 17:03:46'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 17:03:46'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 17:03:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 6/1/2021 17:03:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 6/1/2021 17:03:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 6/1/2021 17:03:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 6/1/2021 17:03:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 6/1/2021 17:03:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 6/1/2021 17:03:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 6/1/2021 17:03:50'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'ijgt 6/1/2021 17:03:51'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'ijgt 6/1/2021 17:03:51'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'ijgt 6/1/2021 17:03:51'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'ijgt 6/1/2021 17:03:51'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'ijgt 6/1/2021 17:03:51'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'ijgt 6/1/2021 17:03:51'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'ijgt 6/1/2021 17:03:51'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'ijgt 6/1/2021 17:03:51'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'ijgt 6/1/2021 17:03:51'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'ijgt 6/1/2021 17:03:51'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'ijgt 6/1/2021 17:03:51'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'ijgt 6/1/2021 17:03:51'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'ijgt 6/1/2021 17:03:51'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'ijgt 6/1/2021 17:03:51'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'ijgt 6/1/2021 17:03:51'!
PASSED!
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 6/1/2021 17:07:41' prior: 50873880 overrides: 50874109!
summary

	|aReport|
	aReport := OrderedCollection new.
	transactions do: [:transaction|
		(transaction isKindOf: Deposit) ifTrue: [aReport add: 'Depósito por ', transaction value asString, '.'].
		(transaction isKindOf: Withdraw) ifTrue: [aReport add: 'Extracción por ', transaction value asString,'.'].
		(transaction isKindOf: TransferWithdrawLeg) ifTrue: [aReport add: 'Salida por transferencia de ', transaction value asString, '.'].
		(transaction isKindOf: TransferDepositLeg) ifTrue: [aReport add: 'Entrada por transferencia de ', transaction value asString, '.'].
		].
	aReport add: 'Balance = ', self balance asString.
	
	^ aReport! !

!testRun: #ReportTest #test02 stamp: 'ijgt 6/1/2021 17:07:55'!
FAILURE!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/1/2021 17:07:55'!
FAILURE!
!ReportTest methodsFor: 'tests' stamp: 'ijgt 6/1/2021 17:08:00' prior: 50873456!
test02

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Depósito por 100.').
	self assert: (accountReport at: 2) equals: ('Balance = 100').
	self assert: (accountReport size) equals: 2.! !

!testRun: #ReportTest #test02 stamp: 'ijgt 6/1/2021 17:08:01'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/1/2021 17:08:01'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/1/2021 17:08:01'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/1/2021 17:08:01'!
FAILURE!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/1/2021 17:08:01'!
FAILURE!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 17:08:01'!
FAILURE!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/1/2021 17:08:01'!
FAILURE!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 17:08:01'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 17:08:01'!
FAILURE!
!ReportTest methodsFor: 'tests' stamp: 'ijgt 6/1/2021 17:08:15' prior: 50873474!
test03

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Deposit register: 50 on: anAccount.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Depósito por 100.').
	self assert: (accountReport at: 2) equals: ('Depósito por 50.').
	self assert: (accountReport at: 3) equals: ('Balance = 150.').
	self assert: (accountReport size) equals: 3.! !
!ReportTest methodsFor: 'tests' stamp: 'ijgt 6/1/2021 17:08:23' prior: 50873493!
test04

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Depósito por 100.').
	self assert: (accountReport at: 2) equals: ('Extracción por 50.').
	self assert: (accountReport at: 3) equals: ('Balance = 50.').
	self assert: (accountReport size) equals: 3.! !
!ReportTest methodsFor: 'tests' stamp: 'ijgt 6/1/2021 17:08:29' prior: 50873422!
test05

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 100.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Salida por transferencia de 100.').
	self assert: (accountReport at: 2) equals: ('Balance = -100').
	self assert: (accountReport size) equals: 2.! !
!ReportTest methodsFor: 'tests' stamp: 'ijgt 6/1/2021 17:08:34' prior: 50873861!
test06

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 100.
	accountReport := Report for: (anotherAccount).
	self assert: (accountReport at: 1) equals: ('Entrada por transferencia de 100.').
	self assert: (accountReport at: 2) equals: ('Balance = 100').
	self assert: (accountReport size) equals: 2.! !
!ReportTest methodsFor: 'tests' stamp: 'ijgt 6/1/2021 17:08:47' prior: 50874069!
test08

	| anAccount aPortfolio portfolioReport|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	aPortfolio := Portfolio with: anAccount.
	portfolioReport := Report for: (aPortfolio).
	self assert: (portfolioReport at: 1) equals: ('Depósito por 100.').
	self assert: (portfolioReport at: 2) equals: ('Extracción por 50.').
	self assert: (portfolioReport at: 3) equals: ('Balance = 50.').
	self assert: (portfolioReport at: 4) equals: ('Balance = 50.').
	self assert: (portfolioReport size) equals: 4.! !

!testRun: #ReportTest #test01 stamp: 'ijgt 6/1/2021 17:08:50'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/1/2021 17:08:50'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/1/2021 17:08:50'!
FAILURE!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/1/2021 17:08:50'!
FAILURE!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 17:08:50'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/1/2021 17:08:50'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 17:08:50'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 17:08:50'!
FAILURE!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/1/2021 17:09:09'!
FAILURE!
!ReportTest methodsFor: 'tests' stamp: 'ijgt 6/1/2021 17:09:24' prior: 50874431!
test03

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Deposit register: 50 on: anAccount.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Depósito por 100.').
	self assert: (accountReport at: 2) equals: ('Depósito por 50.').
	self assert: (accountReport at: 3) equals: ('Balance = 150').
	self assert: (accountReport size) equals: 3.! !

!testRun: #ReportTest #test03 stamp: 'ijgt 6/1/2021 17:09:25'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/1/2021 17:09:27'!
FAILURE!
!ReportTest methodsFor: 'tests' stamp: 'ijgt 6/1/2021 17:09:34' prior: 50874448!
test04

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	accountReport := Report for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Depósito por 100.').
	self assert: (accountReport at: 2) equals: ('Extracción por 50.').
	self assert: (accountReport at: 3) equals: ('Balance = 50').
	self assert: (accountReport size) equals: 3.! !

!testRun: #ReportTest #test04 stamp: 'ijgt 6/1/2021 17:09:36'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 17:09:38'!
FAILURE!
!ReportTest methodsFor: 'tests' stamp: 'ijgt 6/1/2021 17:09:46' prior: 50874498!
test08

	| anAccount aPortfolio portfolioReport|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	aPortfolio := Portfolio with: anAccount.
	portfolioReport := Report for: (aPortfolio).
	self assert: (portfolioReport at: 1) equals: ('Depósito por 100.').
	self assert: (portfolioReport at: 2) equals: ('Extracción por 50.').
	self assert: (portfolioReport at: 3) equals: ('Balance = 50').
	self assert: (portfolioReport at: 4) equals: ('Balance = 50').
	self assert: (portfolioReport size) equals: 4.! !

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 17:09:51'!
PASSED!
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 6/1/2021 17:13:49' prior: 50874369 overrides: 50874109!
summary

	|aReport|
	aReport := OrderedCollection new.
	transactions do: [:transaction|
		aReport add: transaction asStringForSummary.
		].
	aReport add: 'Balance = ', self balance asString.
	
	^ aReport! !
!AccountTransaction methodsFor: 'summary' stamp: 'ijgt 6/1/2021 17:14:10'!
asStringForSummary

	self subclassResponsibility! !
!Deposit methodsFor: 'balance' stamp: 'ijgt 6/1/2021 17:15:30' overrides: 50874614!
asStringForSummary

	^ 'Depósito por ', value asString, '.'! !
!TransferLegs methodsFor: 'nil' stamp: 'ijgt 6/1/2021 17:16:22' overrides: 50874614!
asStringForSummary

	self subclassResponsibility! !
!Withdraw methodsFor: 'nil' stamp: 'ijgt 6/1/2021 17:17:44' overrides: 50874614!
asStringForSummary

	^ 'Extracción por ', value asString,'.'! !
!TransferDepositLeg methodsFor: 'nil' stamp: 'ijgt 6/1/2021 17:18:37' overrides: 50874624!
asStringForSummary

	^ 'Entrada por transferencia de ', transfer value asString, '.'! !
!TransferWithdrawLeg methodsFor: 'nil' stamp: 'ijgt 6/1/2021 17:19:21' overrides: 50874624!
asStringForSummary

	^ 'Salida por transferencia de ', transfer value asString, '.'! !

!testRun: #ReportTest #test01 stamp: 'ijgt 6/1/2021 17:19:33'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/1/2021 17:19:33'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/1/2021 17:19:33'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/1/2021 17:19:33'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 17:19:33'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/1/2021 17:19:33'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 17:19:33'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 17:19:33'!
PASSED!
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 6/1/2021 17:19:59' prior: 50874605 overrides: 50874109!
summary

	|aReport|
	aReport := OrderedCollection new.
	transactions do: [:transaction| aReport add: transaction asStringForSummary].
	aReport add: 'Balance = ', self balance asString.
	
	^ aReport! !
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/1/2021 17:28:11' prior: 50873038!
test01

	! !
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 5/31/2021 16:41:40' prior: 50874675!
test01

	| accountReport |
	accountReport := Report for: ReceptiveAccount new.
	self assert: (accountReport at: 1) equals: ('Balance = 0').
	self assert: (accountReport size) equals: 1.! !
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/1/2021 17:30:27'!
test09

	! !

!classRenamed: #Report as: #Summary stamp: 'ijgt 6/1/2021 17:32:52'!
Smalltalk renameClassNamed: #Report as: #Summary!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'ijgt 6/1/2021 17:32:52' prior: 50874539!
test03

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Deposit register: 50 on: anAccount.
	accountReport := Summary for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Depósito por 100.').
	self assert: (accountReport at: 2) equals: ('Depósito por 50.').
	self assert: (accountReport at: 3) equals: ('Balance = 150').
	self assert: (accountReport size) equals: 3.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'ijgt 6/1/2021 17:32:52' prior: 50874465!
test05

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 100.
	accountReport := Summary for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Salida por transferencia de 100.').
	self assert: (accountReport at: 2) equals: ('Balance = -100').
	self assert: (accountReport size) equals: 2.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'ijgt 6/1/2021 17:32:52' prior: 50874397!
test02

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	accountReport := Summary for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Depósito por 100.').
	self assert: (accountReport at: 2) equals: ('Balance = 100').
	self assert: (accountReport size) equals: 2.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'ijgt 6/1/2021 17:32:52' prior: 50874481!
test06

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 100.
	accountReport := Summary for: (anotherAccount).
	self assert: (accountReport at: 1) equals: ('Entrada por transferencia de 100.').
	self assert: (accountReport at: 2) equals: ('Balance = 100').
	self assert: (accountReport size) equals: 2.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'ijgt 6/1/2021 17:32:52' prior: 50874560!
test04

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	accountReport := Summary for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Depósito por 100.').
	self assert: (accountReport at: 2) equals: ('Extracción por 50.').
	self assert: (accountReport at: 3) equals: ('Balance = 50').
	self assert: (accountReport size) equals: 3.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'ijgt 6/1/2021 17:32:52' prior: 50874581!
test08

	| anAccount aPortfolio portfolioReport|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	aPortfolio := Portfolio with: anAccount.
	portfolioReport := Summary for: (aPortfolio).
	self assert: (portfolioReport at: 1) equals: ('Depósito por 100.').
	self assert: (portfolioReport at: 2) equals: ('Extracción por 50.').
	self assert: (portfolioReport at: 3) equals: ('Balance = 50').
	self assert: (portfolioReport at: 4) equals: ('Balance = 50').
	self assert: (portfolioReport size) equals: 4.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'ijgt 6/1/2021 17:32:52' prior: 50874679!
test01

	| accountReport |
	accountReport := Summary for: ReceptiveAccount new.
	self assert: (accountReport at: 1) equals: ('Balance = 0').
	self assert: (accountReport size) equals: 1.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'ijgt 6/1/2021 17:32:52' prior: 50873918!
test07

	| accountReport |
	accountReport := Summary for: Portfolio new.
	self assert: (accountReport at: 1) equals: ('Balance = 0').
	self assert: (accountReport size) equals: 1.! !

!testRun: #ReportTest #test01 stamp: 'ijgt 6/1/2021 17:33:02'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/1/2021 17:33:02'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/1/2021 17:33:02'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/1/2021 17:33:02'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 17:33:02'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/1/2021 17:33:02'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 17:33:02'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 17:33:02'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'ijgt 6/1/2021 17:33:06'!
PASSED!

Object subclass: #Report
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #Report category: 'Portfolio-18' stamp: 'ijgt 6/1/2021 17:33:28'!
Object subclass: #Report
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #Report category: 'Portfolio-18' stamp: 'ijgt 6/1/2021 17:33:48'!
Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

Report subclass: #Summary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #Summary category: 'Portfolio-18' stamp: 'ijgt 6/1/2021 17:34:04'!
Report subclass: #Summary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!
!Report methodsFor: 'no messages' stamp: 'ijgt 6/1/2021 17:35:06'!
report

	self subclassResponsibility! !

!classDefinition: #NetTransfer category: 'Portfolio-18' stamp: 'ijgt 6/1/2021 17:39:19'!
Report subclass: #NetTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/1/2021 17:38:57' prior: 50874688!
test09

	| accountReport |
	accountReport := NetTransfer for: ReceptiveAccount new.
	self assert: accountReport equals: ('El neto de transferencias es: 0')! !
!Report class methodsFor: 'no messages' stamp: 'ijgt 6/1/2021 17:40:43'!
for: anAccount
	
	^self new initializeFor: anAccount ; report! !

Object subclass: #Report
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

Report subclass: #Summary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #Summary category: 'Portfolio-18' stamp: 'ijgt 6/1/2021 17:41:13'!
Report subclass: #Summary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

Object subclass: #Report
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #Report category: 'Portfolio-18' stamp: 'ijgt 6/1/2021 17:41:20'!
Object subclass: #Report
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!methodRemoval: Summary class #for: stamp: 'ijgt 6/1/2021 17:41:47'!
for: anAccount
	
	^self new initializeFor: anAccount ; report!
!Report methodsFor: 'nil' stamp: 'ijgt 6/1/2021 17:42:40'!
initializeFor: anAccount 
	
	account := anAccount.! !

!methodRemoval: Summary #initializeFor: stamp: 'ijgt 6/1/2021 17:42:59'!
initializeFor: anAccount 
	
	account := anAccount.!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/1/2021 17:43:14'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/1/2021 17:43:14'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/1/2021 17:43:14'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/1/2021 17:43:14'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 17:43:14'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/1/2021 17:43:14'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 17:43:14'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 17:43:14'!
PASSED!
!NetTransfer methodsFor: 'no messages' stamp: 'ijgt 6/1/2021 17:43:43' overrides: 50874869!
report

	! !
!NetTransfer methodsFor: 'as yet unclassified' stamp: 'ijgt 6/1/2021 17:43:59' prior: 50874950 overrides: 50874869!
report

	^ 'El neto de transferencias es: 0'! !

!testRun: #ReportTest #test09 stamp: 'ijgt 6/1/2021 17:44:10'!
PASSED!
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/1/2021 17:45:38'!
test10

	| accountReport |
	accountReport := NetTransfer for: ReceptiveAccount new.
	self assert: accountReport equals: ('El neto de transferencias es: 50')! !
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/1/2021 17:46:02' prior: 50874962!
test10

	| accountReport |
	accountReport := NetTransfer for: ReceptiveAccount new.
	
	self assert: accountReport equals: ('El neto de transferencias es: 50')! !
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/1/2021 17:47:13' prior: 50874970!
test10

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 50.
	accountReport := NetTransfer for: anotherAccount.
	self assert: accountReport equals: ('El neto de transferencias es: 50')! !

!testRun: #ReportTest #test10 stamp: 'ijgt 6/1/2021 17:47:27'!
FAILURE!
!NetTransfer methodsFor: 'report' stamp: 'ijgt 6/1/2021 17:50:28' prior: 50874955 overrides: 50874869!
report

	^ account netTransfer! !
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 6/1/2021 17:54:58'!
netTransfer

	|balanceTransfer|
	balanceTransfer := transactions sum: [:transaction | transaction valueAsTransfer] ifEmpty: [0].
	^ 'El neto de transferencias es: ', balanceTransfer asString.! !
!AccountTransaction methodsFor: 'nil' stamp: 'ijgt 6/1/2021 17:55:27'!
valueAsTransfer

	self subclassResponsibility! !
!Deposit methodsFor: 'report' stamp: 'ijgt 6/1/2021 17:57:35' overrides: 50875007!
valueAsTransfer

	! !
!Deposit methodsFor: 'report' stamp: 'ijgt 6/1/2021 17:57:48' prior: 50875012 overrides: 50875007!
valueAsTransfer

	^ 0! !
!Withdraw methodsFor: 'report' stamp: 'ijgt 6/1/2021 17:58:15' overrides: 50875007!
valueAsTransfer

	^ 0! !
!TransferLegs methodsFor: 'report' stamp: 'ijgt 6/1/2021 17:59:21' overrides: 50875007!
valueAsTransfer

	self subclassResponsibility ! !
!TransferDepositLeg methodsFor: 'report' stamp: 'ijgt 6/1/2021 17:59:54' overrides: 50875024!
valueAsTransfer

	^ transfer value! !
!TransferWithdrawLeg methodsFor: 'report' stamp: 'ijgt 6/1/2021 18:00:28' overrides: 50875024!
valueAsTransfer

	^ -1*(transfer value)! !

!testRun: #ReportTest #test09 stamp: 'ijgt 6/1/2021 18:00:50'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/1/2021 18:00:52'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/1/2021 18:01:01'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/1/2021 18:01:01'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/1/2021 18:01:01'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/1/2021 18:01:01'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 18:01:01'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/1/2021 18:01:01'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 18:01:01'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 18:01:01'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/1/2021 18:01:05'!
PASSED!
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/1/2021 18:01:54'!
test11

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 50.
	accountReport := NetTransfer for: anAccount.
	self assert: accountReport equals: ('El neto de transferencias es: -50')! !

!testRun: #ReportTest #test11 stamp: 'ijgt 6/1/2021 18:01:55'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/1/2021 18:01:55'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/1/2021 18:01:55'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/1/2021 18:01:55'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/1/2021 18:01:55'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 18:01:55'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/1/2021 18:01:55'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 18:01:55'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 18:01:55'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'ijgt 6/1/2021 18:01:55'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/1/2021 18:01:55'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'ijgt 6/1/2021 18:01:55'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'ijgt 6/1/2021 18:05:15'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'ijgt 6/1/2021 18:05:15'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'ijgt 6/1/2021 18:05:15'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'ijgt 6/1/2021 18:05:15'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'ijgt 6/1/2021 18:05:15'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'ijgt 6/1/2021 18:05:15'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'ijgt 6/1/2021 18:05:15'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'ijgt 6/1/2021 18:05:15'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'ijgt 6/1/2021 18:05:15'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'ijgt 6/1/2021 18:05:15'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'ijgt 6/1/2021 18:05:15'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'ijgt 6/1/2021 18:05:15'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'ijgt 6/1/2021 18:05:15'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'ijgt 6/1/2021 18:05:15'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'ijgt 6/1/2021 18:05:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 6/1/2021 18:05:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 6/1/2021 18:05:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 6/1/2021 18:05:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 6/1/2021 18:05:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 6/1/2021 18:05:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 6/1/2021 18:05:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 6/1/2021 18:05:17'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/1/2021 18:05:20'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/1/2021 18:05:20'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/1/2021 18:05:20'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/1/2021 18:05:20'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/1/2021 18:05:20'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/1/2021 18:05:20'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/1/2021 18:05:20'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/1/2021 18:05:20'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'ijgt 6/1/2021 18:05:20'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/1/2021 18:05:20'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'ijgt 6/1/2021 18:05:20'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'ijgt 6/1/2021 18:05:22'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'ijgt 6/1/2021 18:05:22'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'ijgt 6/1/2021 18:05:22'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'ijgt 6/1/2021 18:05:22'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'ijgt 6/1/2021 18:05:22'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'ijgt 6/1/2021 18:05:22'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'ijgt 6/1/2021 18:05:22'!
PASSED!

----QUIT----(1 June 2021 18:07:10) CuisUniversity-4532.image priorSource: 17340206!

----STARTUP---- (2 June 2021 18:02:09) as /home/igna/Desktop/CuisNuevo/CuisUniversity-4532.image!

!TransferLegs methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:19:50'!
asStringForSummary: aSummary

	self subclassResponsibility! !
!TransferDepositLeg methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:19:51' overrides: 50875233!
asStringForSummary: aSummary

	^ 'Entrada por transferencia de ', transfer value asString, '.'! !
!Deposit methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:19:51'!
asStringForSummary: aSummary

	^ 'Depósito por ', value asString, '.'! !
!TransferWithdrawLeg methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:19:51' overrides: 50875233!
asStringForSummary: aSummary

	^ 'Salida por transferencia de ', transfer value asString, '.'! !
!Withdraw methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:19:51'!
asStringForSummary: aSummary

	^ 'Extracción por ', value asString,'.'! !
!AccountTransaction methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:19:51'!
asStringForSummary: aSummary

	self subclassResponsibility! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'ijgt 6/2/2021 18:19:51' prior: 50874665 overrides: 50874109!
summary

	|aReport|
	aReport := OrderedCollection new.
	transactions do: [:transaction| aReport add: transaction asStringForSummary: aSummary].
	aReport add: 'Balance = ', self balance asString.
	
	^ aReport! !

!methodRemoval: TransferLegs #asStringForSummary stamp: 'ijgt 6/2/2021 18:19:51'!
asStringForSummary

	self subclassResponsibility!

!methodRemoval: TransferDepositLeg #asStringForSummary stamp: 'ijgt 6/2/2021 18:19:51'!
asStringForSummary

	^ 'Entrada por transferencia de ', transfer value asString, '.'!

!methodRemoval: Deposit #asStringForSummary stamp: 'ijgt 6/2/2021 18:19:51'!
asStringForSummary

	^ 'Depósito por ', value asString, '.'!

!methodRemoval: TransferWithdrawLeg #asStringForSummary stamp: 'ijgt 6/2/2021 18:19:51'!
asStringForSummary

	^ 'Salida por transferencia de ', transfer value asString, '.'!

!methodRemoval: Withdraw #asStringForSummary stamp: 'ijgt 6/2/2021 18:19:51'!
asStringForSummary

	^ 'Extracción por ', value asString,'.'!

!methodRemoval: AccountTransaction #asStringForSummary stamp: 'ijgt 6/2/2021 18:19:51'!
asStringForSummary

	self subclassResponsibility!
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:20:58' prior: 50875267 overrides: 50874109!
summary

	|aSummary|
	aSummary := OrderedCollection new.
	transactions do: [:transaction| aSummary add: (transaction asStringForSummary: aSummary)].
	aSummary add: 'Balance = ', self balance asString.
	
	^ aSummary! !
!Deposit methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:21:48' prior: 50875244 overrides: 50875261!
asStringForSummary: aSummary

	^ aSummary reportDeposit: self! !
!Summary methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:22:33'!
reportDeposit: aDeposit

	^ 'Depósito por ', aDeposit value asString, '.'! !
!Summary methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:23:09'!
reportWithdraw: aWithdraw

	^ 'Extracción por ', aWithdraw value asString, '.'! !
!Summary methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:24:30'!
reportTransferDeposit: aTransfer

	^ 'Entrada por transferencia de ', aTransfer value asString, '.'! !
!Summary methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:24:49'!
reportTransferWithdraw: aTransfer

	^ 'Salida por transferencia de ', aTransfer value asString, '.'! !
!Withdraw methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:25:28' prior: 50875256 overrides: 50875261!
asStringForSummary: aSummary

	^ aSummary reportWithdraw: self! !
!TransferDepositLeg methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:26:04' prior: 50875238 overrides: 50875233!
asStringForSummary: aSummary

	^ aSummary reportTransferDeposit: self! !
!TransferWithdrawLeg methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:26:32' prior: 50875250 overrides: 50875233!
asStringForSummary: aSummary

	^ aSummary reportTransferWithdraw: self! !

!testRun: #ReportTest #test01 stamp: 'ijgt 6/2/2021 18:26:50'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 18:26:50'!
ERROR!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/2/2021 18:26:50'!
ERROR!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/2/2021 18:26:50'!
ERROR!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/2/2021 18:26:50'!
ERROR!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/2/2021 18:26:50'!
ERROR!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/2/2021 18:26:50'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/2/2021 18:26:50'!
ERROR!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 18:26:54'!
ERROR!
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:32:11' prior: 50874056 overrides: 50874109!
summary

	|aReport|
	aReport := OrderedCollection new.
	accounts do: [:account | aReport addAll: account summary].
	aReport add: 'Balance = ', self balance asString.
	
	^ aReport! !
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:32:29' prior: 50875381 overrides: 50874109!
summary

	|aSummary|
	aSummary := OrderedCollection new.
	accounts do: [:account | aSummary addAll: account summary].
	aSummary add: 'Balance = ', self balance asString.
	
	^ aSummary! !
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:33:04'!
summary: aReport

	|aSummary|
	aSummary := OrderedCollection new.
	transactions do: [:transaction| aSummary add: (transaction asStringForSummary: aSummary)].
	aSummary add: 'Balance = ', self balance asString.
	
	^ aSummary! !
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:33:04'!
summary: aReport

	|aSummary|
	aSummary := OrderedCollection new.
	accounts do: [:account | aSummary addAll: account summary].
	aSummary add: 'Balance = ', self balance asString.
	
	^ aSummary! !
!Account methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:33:04'!
summary: aReport
	
	self subclassResponsibility! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ijgt 6/2/2021 18:33:04' prior: 50875390 overrides: 50874109!
summary

	|aSummary|
	aSummary := OrderedCollection new.
	accounts do: [:account | aSummary addAll: account summary: nil].
	aSummary add: 'Balance = ', self balance asString.
	
	^ aSummary! !
!Summary methodsFor: 'as yet unclassified' stamp: 'ijgt 6/2/2021 18:33:04' prior: 50873158 overrides: 50874869!
report

	^ account summary: nil! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ijgt 6/2/2021 18:33:04' prior: 50875409 overrides: 50875418!
summary: aReport

	|aSummary|
	aSummary := OrderedCollection new.
	accounts do: [:account | aSummary addAll: account summary: nil].
	aSummary add: 'Balance = ', self balance asString.
	
	^ aSummary! !

!methodRemoval: ReceptiveAccount #summary stamp: 'ijgt 6/2/2021 18:33:04'!
summary

	|aSummary|
	aSummary := OrderedCollection new.
	transactions do: [:transaction| aSummary add: (transaction asStringForSummary: aSummary)].
	aSummary add: 'Balance = ', self balance asString.
	
	^ aSummary!

!methodRemoval: Portfolio #summary stamp: 'ijgt 6/2/2021 18:33:04'!
summary

	|aSummary|
	aSummary := OrderedCollection new.
	accounts do: [:account | aSummary addAll: account summary: nil].
	aSummary add: 'Balance = ', self balance asString.
	
	^ aSummary!

!methodRemoval: Account #summary stamp: 'ijgt 6/2/2021 18:33:04'!
summary
	
	self subclassResponsibility!
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:33:42' prior: 50875399 overrides: 50875418!
summary: aSummary

	transactions do: [:transaction| aSummary add: (transaction asStringForSummary: aSummary)].
	aSummary add: 'Balance = ', self balance asString.
	
	^ aSummary! !
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:35:07' prior: 50875470 overrides: 50875418!
summary: aSummary

	|aReport|
	aReport := OrderedCollection new.
	transactions do: [:transaction| aReport add: (transaction asStringForSummary: aSummary)].
	aReport add: 'Balance = ', self balance asString.
	
	^ aReport! !

!testRun: #ReportTest #test01 stamp: 'ijgt 6/2/2021 18:35:54'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 18:35:54'!
ERROR!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/2/2021 18:35:54'!
ERROR!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/2/2021 18:35:54'!
ERROR!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/2/2021 18:35:54'!
ERROR!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/2/2021 18:35:55'!
ERROR!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/2/2021 18:35:55'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/2/2021 18:35:55'!
ERROR!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 18:35:58'!
ERROR!
!Summary methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:36:25' prior: 50875434 overrides: 50874869!
report

	^ account summary: self! !

!testRun: #ReportTest #test01 stamp: 'ijgt 6/2/2021 18:36:40'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 18:36:40'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/2/2021 18:36:40'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/2/2021 18:36:40'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/2/2021 18:36:40'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/2/2021 18:36:40'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/2/2021 18:36:40'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/2/2021 18:36:40'!
ERROR!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/2/2021 18:36:40'!
ERROR!
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:38:14' prior: 50875439 overrides: 50875418!
summary: aSummary

	|aReport|
	aReport := OrderedCollection new.
	accounts do: [:account | aReport addAll: (account summary: aSummary)].
	aReport add: 'Balance = ', self balance asString.
	
	^ aReport! !

!testRun: #ReportTest #test01 stamp: 'ijgt 6/2/2021 18:38:21'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 18:38:21'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/2/2021 18:38:21'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/2/2021 18:38:21'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/2/2021 18:38:21'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/2/2021 18:38:21'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/2/2021 18:38:21'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/2/2021 18:38:21'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'ijgt 6/2/2021 18:38:21'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/2/2021 18:38:21'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'ijgt 6/2/2021 18:38:21'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/2/2021 18:38:29'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 18:38:29'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/2/2021 18:38:29'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/2/2021 18:38:29'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/2/2021 18:38:29'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/2/2021 18:38:29'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/2/2021 18:38:29'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/2/2021 18:38:29'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'ijgt 6/2/2021 18:38:33'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'ijgt 6/2/2021 18:38:33'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'ijgt 6/2/2021 18:38:33'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'ijgt 6/2/2021 18:38:33'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'ijgt 6/2/2021 18:38:33'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'ijgt 6/2/2021 18:38:33'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'ijgt 6/2/2021 18:38:33'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'ijgt 6/2/2021 18:38:38'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'ijgt 6/2/2021 18:38:38'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'ijgt 6/2/2021 18:38:38'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'ijgt 6/2/2021 18:38:38'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'ijgt 6/2/2021 18:38:38'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'ijgt 6/2/2021 18:38:38'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'ijgt 6/2/2021 18:38:38'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'ijgt 6/2/2021 18:38:38'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'ijgt 6/2/2021 18:38:38'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'ijgt 6/2/2021 18:38:38'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'ijgt 6/2/2021 18:38:38'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'ijgt 6/2/2021 18:38:38'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'ijgt 6/2/2021 18:38:38'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'ijgt 6/2/2021 18:38:38'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'ijgt 6/2/2021 18:38:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 6/2/2021 18:38:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 6/2/2021 18:38:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 6/2/2021 18:38:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 6/2/2021 18:38:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 6/2/2021 18:38:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 6/2/2021 18:38:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 6/2/2021 18:38:39'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/2/2021 18:38:42'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 18:38:42'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/2/2021 18:38:42'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/2/2021 18:38:42'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/2/2021 18:38:42'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/2/2021 18:38:42'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/2/2021 18:38:42'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/2/2021 18:38:42'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'ijgt 6/2/2021 18:38:42'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/2/2021 18:38:42'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'ijgt 6/2/2021 18:38:42'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/2/2021 18:39:06'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 18:39:06'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/2/2021 18:39:06'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/2/2021 18:39:06'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/2/2021 18:39:06'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/2/2021 18:39:06'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/2/2021 18:39:06'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/2/2021 18:39:06'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'ijgt 6/2/2021 18:39:06'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/2/2021 18:39:06'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'ijgt 6/2/2021 18:39:06'!
PASSED!
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:56:25'!
netTransfer: aNetTransfer

	|balanceTransfer|
	balanceTransfer := transactions sum: [:transaction | transaction valueAsTransfer] ifEmpty: [0].
	^ 'El neto de transferencias es: ', balanceTransfer asString.! !
!NetTransfer methodsFor: 'as yet unclassified' stamp: 'ijgt 6/2/2021 18:56:25' prior: 50874994 overrides: 50874869!
report

	^ account netTransfer: nil! !

!methodRemoval: ReceptiveAccount #netTransfer stamp: 'ijgt 6/2/2021 18:56:25'!
netTransfer

	|balanceTransfer|
	balanceTransfer := transactions sum: [:transaction | transaction valueAsTransfer] ifEmpty: [0].
	^ 'El neto de transferencias es: ', balanceTransfer asString.!
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:56:54' prior: 50875737!
netTransfer: aNetTransfer

	|balanceTransfer|
	balanceTransfer := transactions sum: [:transaction | transaction valueAsTransfer: aNetTransfer] ifEmpty: [0].
	^ 'El neto de transferencias es: ', balanceTransfer asString.! !
!Withdraw methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:57:28'!
valueAsTransfer: aNetTransfer

	^ 0! !
!TransferLegs methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:57:28'!
valueAsTransfer: aNetTransfer

	self subclassResponsibility ! !
!TransferWithdrawLeg methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:57:28' overrides: 50875774!
valueAsTransfer: aNetTransfer

	^ -1*(transfer value)! !
!AccountTransaction methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:57:28'!
valueAsTransfer: aNetTransfer

	self subclassResponsibility! !
!Deposit methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:57:28' overrides: 50875784!
valueAsTransfer: aNetTransfer

	^ 0! !
!TransferDepositLeg methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:57:28' overrides: 50875774!
valueAsTransfer: aNetTransfer

	^ transfer value! !

!methodRemoval: Withdraw #valueAsTransfer stamp: 'ijgt 6/2/2021 18:57:28'!
valueAsTransfer

	^ 0!

!methodRemoval: TransferLegs #valueAsTransfer stamp: 'ijgt 6/2/2021 18:57:28'!
valueAsTransfer

	self subclassResponsibility !

!methodRemoval: TransferWithdrawLeg #valueAsTransfer stamp: 'ijgt 6/2/2021 18:57:28'!
valueAsTransfer

	^ -1*(transfer value)!

!methodRemoval: AccountTransaction #valueAsTransfer stamp: 'ijgt 6/2/2021 18:57:28'!
valueAsTransfer

	self subclassResponsibility!

!methodRemoval: Deposit #valueAsTransfer stamp: 'ijgt 6/2/2021 18:57:28'!
valueAsTransfer

	^ 0!

!methodRemoval: TransferDepositLeg #valueAsTransfer stamp: 'ijgt 6/2/2021 18:57:28'!
valueAsTransfer

	^ transfer value!
!Deposit methodsFor: 'report' stamp: 'ijgt 6/2/2021 18:59:38' prior: 50875789 overrides: 50875784!
valueAsTransfer: aNetTransfer

	^ aNetTransfer netTransferValueForDeposit! !
!Withdraw methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:00:02' prior: 50875770 overrides: 50875784!
valueAsTransfer: aNetTransfer

	^ aNetTransfer netTransferValueForWithdraw! !
!NetTransfer methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:00:22' prior: 50875748 overrides: 50874869!
report

	^ account netTransfer: self! !
!NetTransfer methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:00:36'!
netTransferValueForDeposit

	^ 0! !
!NetTransfer methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:00:43'!
netTransferValueForWithdraw

	^ 0! !
!NetTransfer methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:01:46'!
netTransferValueForTransferDeposit: aTransferDepositLeg

	^ 0! !
!NetTransfer methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:01:57'!
netTransferValueForTransferWithdraw: aTransferWithdrawLeg

	^ 0! !
!TransferDepositLeg methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:03:10' prior: 50875794 overrides: 50875774!
valueAsTransfer: aNetTransfer

	^ aNetTransfer netTransferValueForTransferDeposit: transfer! !
!TransferWithdrawLeg methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:03:44' prior: 50875779 overrides: 50875774!
valueAsTransfer: aNetTransfer

	^ aNetTransfer netTransferValueForTransferWithdraw: transfer! !
!NetTransfer methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:04:24' prior: 50875850!
netTransferValueForTransferWithdraw: aTransferWithdrawLeg

	^ (-1)*aTransferWithdrawLeg value! !
!NetTransfer methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:05:37' prior: 50875869!
netTransferValueForTransferWithdraw: aTransfer

	^ (-1)*aTransfer value! !
!NetTransfer methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:05:44' prior: 50875845!
netTransferValueForTransferDeposit: aTransfer

	^ 0! !
!NetTransfer methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:05:51' prior: 50875880!
netTransferValueForTransferDeposit: aTransfer

	^ aTransfer value! !

!testRun: #ReportTest #test01 stamp: 'ijgt 6/2/2021 19:05:59'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 19:05:59'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/2/2021 19:05:59'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/2/2021 19:05:59'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/2/2021 19:05:59'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/2/2021 19:05:59'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/2/2021 19:05:59'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/2/2021 19:05:59'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'ijgt 6/2/2021 19:06:00'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/2/2021 19:06:00'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'ijgt 6/2/2021 19:06:00'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'ijgt 6/2/2021 19:06:02'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/2/2021 19:06:02'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'ijgt 6/2/2021 19:06:02'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'ijgt 6/2/2021 19:06:38'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'ijgt 6/2/2021 19:06:38'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'ijgt 6/2/2021 19:06:38'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'ijgt 6/2/2021 19:06:38'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'ijgt 6/2/2021 19:06:38'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'ijgt 6/2/2021 19:06:38'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'ijgt 6/2/2021 19:06:38'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/2/2021 19:06:39'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 19:06:39'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/2/2021 19:06:39'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/2/2021 19:06:39'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/2/2021 19:06:39'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/2/2021 19:06:39'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/2/2021 19:06:39'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/2/2021 19:06:39'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'ijgt 6/2/2021 19:06:39'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/2/2021 19:06:39'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'ijgt 6/2/2021 19:06:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 6/2/2021 19:06:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 6/2/2021 19:06:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 6/2/2021 19:06:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 6/2/2021 19:06:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 6/2/2021 19:06:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 6/2/2021 19:06:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 6/2/2021 19:06:42'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'ijgt 6/2/2021 19:06:43'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'ijgt 6/2/2021 19:06:43'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'ijgt 6/2/2021 19:06:43'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'ijgt 6/2/2021 19:06:43'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'ijgt 6/2/2021 19:06:43'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'ijgt 6/2/2021 19:06:43'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'ijgt 6/2/2021 19:06:43'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'ijgt 6/2/2021 19:06:43'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'ijgt 6/2/2021 19:06:43'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'ijgt 6/2/2021 19:06:43'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'ijgt 6/2/2021 19:06:43'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'ijgt 6/2/2021 19:06:43'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'ijgt 6/2/2021 19:06:43'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'ijgt 6/2/2021 19:06:43'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'ijgt 6/2/2021 19:06:43'!
PASSED!
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/2/2021 19:08:59'!
test12

	| portfolioReport aPortfolio anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	aPortfolio := Portfolio with: anAccount.
	Transfer from: anAccount to: anotherAccount withValue: 50.
	portfolioReport := NetTransfer for: aPortfolio.
	self assert: portfolioReport equals: ('El neto de transferencias es: -50')! !

!testRun: #ReportTest #test12 stamp: 'ijgt 6/2/2021 19:09:05'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ijgt 6/2/2021 19:09:29'!
netTransfer: aNetTransfer 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:09:57' prior: 50876064!
netTransfer: aNetTransfer

	^ ''! !
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:10:29' prior: 50876069!
netTransfer: aNetTransfer

	^ 'El neto de transferencias es: -50'! !

!testRun: #ReportTest #test09 stamp: 'ijgt 6/2/2021 19:10:41'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/2/2021 19:10:41'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'ijgt 6/2/2021 19:10:41'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'ijgt 6/2/2021 19:10:41'!
PASSED!
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/2/2021 19:10:53'!
test13

	| portfolioReport aPortfolio anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	aPortfolio := Portfolio with: anAccount.
	Transfer from: anAccount to: anotherAccount withValue: 50.
	portfolioReport := NetTransfer for: aPortfolio.
	self assert: portfolioReport equals: ('El neto de transferencias es: -50')! !
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/2/2021 19:11:08' prior: 50876087!
test13

	| portfolioReport aPortfolio anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	aPortfolio := Portfolio with: anAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	portfolioReport := NetTransfer for: aPortfolio.
	self assert: portfolioReport equals: ('El neto de transferencias es: 50')! !
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/2/2021 19:11:18' prior: 50876102!
test13

	| portfolioReport aPortfolio anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	aPortfolio := Portfolio with: anAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	portfolioReport := NetTransfer for: aPortfolio.
	self assert: portfolioReport equals: ('El neto de transferencias es: 50')! !

!testRun: #ReportTest #test13 stamp: 'ijgt 6/2/2021 19:12:39'!
FAILURE!
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:14:40' prior: 50876073!
netTransfer: aNetTransfer

	! !
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:10:29' prior: 50876134!
netTransfer: aNetTransfer

	^ 'El neto de transferencias es: -50'! !
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:21:15' prior: 50876138!
netTransfer: aNetTransfer

	|balanceTransfer|
	balanceTransfer := accounts sum: [:account | account netTransferValue: aNetTransfer] ifEmpty: [0].
	^ 'El neto de transferencias es: ', balanceTransfer asString.! !
!Account methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:21:51'!
netTransfer: aNetTransfer

	self subclassResponsibility ! !
!Account methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:22:03'!
netTransferValue: aNetTransfer

	self subclassResponsibility ! !
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:23:07' overrides: 50876156!
netTransferValue: aNetTransfer

	^ accounts sum: [:account | account netTransferValue: aNetTransfer] ifEmpty: [0].
! !
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:23:38' overrides: 50876156!
netTransferValue: aNetTransfer

	^ transactions sum: [:transaction | transaction valueAsTransfer: aNetTransfer] ifEmpty: [0].! !

!testRun: #ReportTest #test09 stamp: 'ijgt 6/2/2021 19:24:05'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/2/2021 19:24:05'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'ijgt 6/2/2021 19:24:05'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'ijgt 6/2/2021 19:24:05'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'ijgt 6/2/2021 19:24:05'!
PASSED!
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/2/2021 19:24:56'!
test14

	| portfolioReport aPortfolio anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	aPortfolio := Portfolio with: anAccount with: anotherAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	portfolioReport := NetTransfer for: aPortfolio.
	self assert: portfolioReport equals: ('El neto de transferencias es: 0')! !

!testRun: #ReportTest #test14 stamp: 'ijgt 6/2/2021 19:24:57'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/2/2021 19:24:57'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 19:24:57'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/2/2021 19:24:57'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/2/2021 19:24:57'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/2/2021 19:24:57'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/2/2021 19:24:57'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/2/2021 19:24:57'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/2/2021 19:24:57'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'ijgt 6/2/2021 19:24:57'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/2/2021 19:24:57'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'ijgt 6/2/2021 19:24:57'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'ijgt 6/2/2021 19:24:57'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'ijgt 6/2/2021 19:24:57'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'ijgt 6/2/2021 19:24:57'!
PASSED!
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:26:06' prior: 50875761 overrides: 50876152!
netTransfer: aNetTransfer

	^ 'El neto de transferencias es: ', (self netTransferValue: aNetTransfer) asString.! !
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:26:33' prior: 50876143 overrides: 50876152!
netTransfer: aNetTransfer

	^ 'El neto de transferencias es: ', self netTransferValue: aNetTransfer asString.! !
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:26:43' prior: 50876243 overrides: 50876152!
netTransfer: aNetTransfer

	^ 'El neto de transferencias es: ', (self netTransferValue: aNetTransfer) asString.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'ijgt 6/2/2021 19:27:24'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'ijgt 6/2/2021 19:27:24'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'ijgt 6/2/2021 19:27:24'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'ijgt 6/2/2021 19:27:24'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'ijgt 6/2/2021 19:27:24'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'ijgt 6/2/2021 19:27:24'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'ijgt 6/2/2021 19:27:24'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'ijgt 6/2/2021 19:27:24'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'ijgt 6/2/2021 19:27:24'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'ijgt 6/2/2021 19:27:24'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'ijgt 6/2/2021 19:27:24'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'ijgt 6/2/2021 19:27:24'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'ijgt 6/2/2021 19:27:24'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'ijgt 6/2/2021 19:27:24'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'ijgt 6/2/2021 19:27:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 6/2/2021 19:27:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 6/2/2021 19:27:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 6/2/2021 19:27:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 6/2/2021 19:27:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 6/2/2021 19:27:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 6/2/2021 19:27:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 6/2/2021 19:27:26'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/2/2021 19:27:30'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 19:27:30'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/2/2021 19:27:30'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/2/2021 19:27:30'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/2/2021 19:27:30'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/2/2021 19:27:30'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/2/2021 19:27:30'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/2/2021 19:27:30'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'ijgt 6/2/2021 19:27:30'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/2/2021 19:27:30'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'ijgt 6/2/2021 19:27:30'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'ijgt 6/2/2021 19:27:30'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'ijgt 6/2/2021 19:27:30'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'ijgt 6/2/2021 19:27:30'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'ijgt 6/2/2021 19:27:32'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'ijgt 6/2/2021 19:27:32'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'ijgt 6/2/2021 19:27:32'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'ijgt 6/2/2021 19:27:32'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'ijgt 6/2/2021 19:27:32'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'ijgt 6/2/2021 19:27:32'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'ijgt 6/2/2021 19:27:32'!
PASSED!
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/2/2021 19:32:04'!
test015

	| accountReport |
	accountReport := NetTransfer for: ReceptiveAccount new.
	self assert: accountReport equals: ('El neto de transferencias es: 0')! !
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/2/2021 19:32:18'!
test15

	| accountReport |
	accountReport := NetTransfer for: ReceptiveAccount new.
	self assert: accountReport equals: ('El neto de transferencias es: 0')! !

!methodRemoval: ReportTest #test015 stamp: 'ijgt 6/2/2021 19:32:18'!
test015

	| accountReport |
	accountReport := NetTransfer for: ReceptiveAccount new.
	self assert: accountReport equals: ('El neto de transferencias es: 0')!

!classDefinition: #PortfolioStructure category: 'Portfolio-18' stamp: 'ijgt 6/2/2021 19:39:39'!
Report subclass: #PortfolioStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!
!ReportTest methodsFor: 'tests bonus' stamp: 'ijgt 6/2/2021 19:39:21' prior: 50876396!
test15

	| anAccount aPortfolio|
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	self assert: (PortfolioStructure for: aPortfolio) equals: ('El neto de transferencias es: 0')! !
!ReportTest methodsFor: 'tests bonus' stamp: 'ijgt 6/2/2021 19:42:29' prior: 50876419!
test15

	| anAccount aPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Un portfolio', String newLineString;
  		nextPutAll: String tab,'Una cuenta'
  	].
	self assert: (PortfolioStructure for: aPortfolio) equals: portfolioStructureString! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ijgt 6/2/2021 19:47:46'!
named: aName with: anAccount

	^self new initializeWithName: aName;
		add: anAccount ;
		yourself
	! !

!classDefinition: #Portfolio category: 'Portfolio-18' stamp: 'ijgt 6/2/2021 19:48:43'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!
!Portfolio methodsFor: 'initialization' stamp: 'ijgt 6/2/2021 19:48:37'!
initializeWithName: aName

	accounts := OrderedCollection new.
	parents := OrderedCollection new.
	name := aName.! !
!Portfolio methodsFor: 'initialization' stamp: 'ijgt 6/2/2021 19:49:37' prior: 50871253 overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.
	name := ''.! !
!ReceptiveAccount class methodsFor: 'no messages' stamp: 'ijgt 6/2/2021 19:51:12'!
named: aName

	^ self new initializeWithName: aName! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-18' stamp: 'ijgt 6/2/2021 19:52:56'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'ijgt 6/2/2021 19:52:54'!
initializeWithName: aName

	super initialize.
	transactions := OrderedCollection new.
	name := aName.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'ijgt 6/2/2021 19:53:16' prior: 50871368 overrides: 16896425!
initialize

	super initialize.
	transactions := OrderedCollection new.
	name := ''.! !
!PortfolioStructure methodsFor: 'no messages' stamp: 'ijgt 6/2/2021 19:54:13' overrides: 50874869!
report

	! !
!PortfolioStructure methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:54:31' prior: 50876499 overrides: 50874869!
report

	! !
!PortfolioStructure methodsFor: 'report' stamp: 'ijgt 6/2/2021 19:54:53' prior: 50876503 overrides: 50874869!
report

	^ String streamContents: [:str | str            
  		nextPutAll: 'Un portfolio', String newLineString;
  		nextPutAll: String tab,'Una cuenta'
  	].! !

!testRun: #ReportTest #test15 stamp: 'ijgt 6/2/2021 19:54:57'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/2/2021 19:55:01'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 19:55:01'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/2/2021 19:55:01'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/2/2021 19:55:01'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/2/2021 19:55:01'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/2/2021 19:55:01'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/2/2021 19:55:01'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/2/2021 19:55:01'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'ijgt 6/2/2021 19:55:01'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/2/2021 19:55:01'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'ijgt 6/2/2021 19:55:01'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'ijgt 6/2/2021 19:55:01'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'ijgt 6/2/2021 19:55:01'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'ijgt 6/2/2021 19:55:01'!
PASSED!

!testRun: #ReportTest #test15 stamp: 'ijgt 6/2/2021 19:55:01'!
PASSED!
!ReportTest methodsFor: 'tests bonus' stamp: 'ijgt 6/2/2021 19:59:52'!
test16

	| anAccount anotherAccount aPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	aPortfolio add: anotherAccount.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Un portfolio', String newLineString;
  		nextPutAll: String tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab,'Otra cuenta'
  	].
	self assert: (PortfolioStructure for: aPortfolio) equals: portfolioStructureString! !

!testRun: #ReportTest #test16 stamp: 'ijgt 6/2/2021 19:59:56'!
FAILURE!
!PortfolioStructure methodsFor: 'report' stamp: 'ijgt 6/2/2021 20:05:06'!
reportReceptiveAccount: aReceptiveAccount

	|portfolioStructureString|
 	portfolioStructureString := String streamContents: [:str | str 
		nextPutAll: aReceptiveAccount name, String newLineString. 
  		(Summary for: aReceptiveAccount) do: [:aLine | str 
			nextPutAll: String tab,aLine,String newLineString.
		]. 
	].
 	^ portfolioStructureString allButLast.! !

!testRun: #ReportTest #test01 stamp: 'ijgt 6/2/2021 20:05:50'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 20:05:50'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/2/2021 20:05:50'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/2/2021 20:05:50'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/2/2021 20:05:50'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/2/2021 20:05:50'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/2/2021 20:05:50'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/2/2021 20:05:50'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'ijgt 6/2/2021 20:05:51'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/2/2021 20:05:51'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'ijgt 6/2/2021 20:05:51'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'ijgt 6/2/2021 20:05:51'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'ijgt 6/2/2021 20:05:51'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'ijgt 6/2/2021 20:05:51'!
PASSED!

!testRun: #ReportTest #test15 stamp: 'ijgt 6/2/2021 20:05:53'!
PASSED!

!testRun: #ReportTest #test16 stamp: 'ijgt 6/2/2021 20:05:53'!
FAILURE!

!testRun: #ReportTest #test16 stamp: 'ijgt 6/2/2021 20:05:53'!
FAILURE!
!PortfolioStructure methodsFor: 'report' stamp: 'ijgt 6/2/2021 20:17:38'!
reportPortfolio: aPortfolio withAccounts: portfolioAccounts

 	|portfolioStructureString|
 	portfolioStructureString := String streamContents: [:str | str
		nextPutAll: aPortfolio name, String newLineString.
  		portfolioAccounts do:[:anAccount |
   			(anAccount portfolioStructureReport: self) linesDo: [:aLine | str nextPutAll: String tab, aLine, String newLineString.]
   		].
  	].
 	^portfolioStructureString allButLast .! !
!Account methodsFor: 'report' stamp: 'ijgt 6/2/2021 20:18:37'!
portfolioStructureReport: aPortfolioStructureReport! !
!Account methodsFor: 'report' stamp: 'ijgt 6/2/2021 20:18:46' prior: 50876643!
portfolioStructureReport: aPortfolioStructureReport

	self subclassResponsibility! !
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/2/2021 20:19:45' overrides: 50876648!
portfolioStructureReport: aPortfolioStrutureReport

	^ aPortfolioStrutureReport reportPortfolio: self withAccounts: accounts! !
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 6/2/2021 20:20:17' overrides: 50876648!
portfolioStructureReport: aPortfolioStrutureReport

	^ aPortfolioStrutureReport reportReceptiveAccount: self! !
!PortfolioStructure methodsFor: 'report' stamp: 'ijgt 6/2/2021 20:21:45' prior: 50876507 overrides: 50874869!
report

	^ account portfolioStructureReport: self! !

!testRun: #ReportTest #test15 stamp: 'ijgt 6/2/2021 20:23:54'!
FAILURE!

!testRun: #ReportTest #test15 stamp: 'ijgt 6/2/2021 20:23:54'!
FAILURE!

!testRun: #ReportTest #test16 stamp: 'ijgt 6/2/2021 20:24:01'!
FAILURE!

!testRun: #ReportTest #test16 stamp: 'ijgt 6/2/2021 20:24:01'!
FAILURE!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/2/2021 20:24:05'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 20:24:05'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/2/2021 20:24:05'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/2/2021 20:24:05'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/2/2021 20:24:05'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/2/2021 20:24:05'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/2/2021 20:24:05'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/2/2021 20:24:05'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'ijgt 6/2/2021 20:24:07'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/2/2021 20:24:07'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'ijgt 6/2/2021 20:24:07'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'ijgt 6/2/2021 20:24:07'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'ijgt 6/2/2021 20:24:07'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'ijgt 6/2/2021 20:24:07'!
PASSED!

!testRun: #ReportTest #test15 stamp: 'ijgt 6/2/2021 20:24:15'!
FAILURE!

!testRun: #ReportTest #test15 stamp: 'ijgt 6/2/2021 20:24:15'!
FAILURE!

!testRun: #ReportTest #test15 stamp: 'ijgt 6/2/2021 20:26:05'!
FAILURE!

(PortfolioStructure for: aPortfolio)!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/2/2021 20:27:19'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 20:27:19'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/2/2021 20:27:19'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/2/2021 20:27:19'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/2/2021 20:27:19'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/2/2021 20:27:19'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/2/2021 20:27:19'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/2/2021 20:27:19'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'ijgt 6/2/2021 20:27:22'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/2/2021 20:27:22'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'ijgt 6/2/2021 20:27:22'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'ijgt 6/2/2021 20:27:22'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'ijgt 6/2/2021 20:27:22'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'ijgt 6/2/2021 20:27:22'!
PASSED!

Object subclass: #Account
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-18' stamp: 'ijgt 6/2/2021 20:28:42'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #Portfolio category: 'Portfolio-18' stamp: 'ijgt 6/2/2021 20:28:47'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

Object subclass: #Account
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #Account category: 'Portfolio-18' stamp: 'ijgt 6/2/2021 20:28:53'!
Object subclass: #Account
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!
!Account methodsFor: 'testing' stamp: 'ijgt 6/2/2021 20:29:05' overrides: 16882612!
name

	^ name! !

!testRun: #ReportTest #test15 stamp: 'ijgt 6/2/2021 20:29:15'!
FAILURE!

!testRun: #ReportTest #test15 stamp: 'ijgt 6/2/2021 20:29:15'!
FAILURE!

(PortfolioStructure for: aPortfolio)!

(PortfolioStructure for: aPortfolio)!
!PortfolioStructure methodsFor: 'report' stamp: 'ijgt 6/2/2021 20:34:57' prior: 50876575!
reportReceptiveAccount: aReceptiveAccount

	|portfolioStructureString|
 	portfolioStructureString := String streamContents: [:str | str 
		nextPutAll: aReceptiveAccount name, String newLineString.
	].
 	^ portfolioStructureString allButLast.! !

!testRun: #ReportTest #test15 stamp: 'ijgt 6/2/2021 20:35:05'!
PASSED!

!testRun: #ReportTest #test16 stamp: 'ijgt 6/2/2021 20:35:07'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/2/2021 20:35:19'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 20:35:19'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/2/2021 20:35:19'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/2/2021 20:35:19'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/2/2021 20:35:19'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/2/2021 20:35:19'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/2/2021 20:35:19'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/2/2021 20:35:19'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'ijgt 6/2/2021 20:35:19'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/2/2021 20:35:19'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'ijgt 6/2/2021 20:35:19'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'ijgt 6/2/2021 20:35:19'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'ijgt 6/2/2021 20:35:19'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'ijgt 6/2/2021 20:35:19'!
PASSED!

!testRun: #ReportTest #test15 stamp: 'ijgt 6/2/2021 20:35:19'!
PASSED!

!testRun: #ReportTest #test16 stamp: 'ijgt 6/2/2021 20:35:19'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'ijgt 6/2/2021 20:35:21'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'ijgt 6/2/2021 20:35:21'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'ijgt 6/2/2021 20:35:21'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'ijgt 6/2/2021 20:35:21'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'ijgt 6/2/2021 20:35:21'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'ijgt 6/2/2021 20:35:21'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'ijgt 6/2/2021 20:35:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 6/2/2021 20:35:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 6/2/2021 20:35:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 6/2/2021 20:35:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 6/2/2021 20:35:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 6/2/2021 20:35:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 6/2/2021 20:35:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 6/2/2021 20:35:24'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'ijgt 6/2/2021 20:35:27'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'ijgt 6/2/2021 20:35:27'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'ijgt 6/2/2021 20:35:27'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'ijgt 6/2/2021 20:35:27'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'ijgt 6/2/2021 20:35:27'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'ijgt 6/2/2021 20:35:27'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'ijgt 6/2/2021 20:35:27'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'ijgt 6/2/2021 20:35:27'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'ijgt 6/2/2021 20:35:27'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'ijgt 6/2/2021 20:35:27'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'ijgt 6/2/2021 20:35:27'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'ijgt 6/2/2021 20:35:27'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'ijgt 6/2/2021 20:35:27'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'ijgt 6/2/2021 20:35:27'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'ijgt 6/2/2021 20:35:27'!
PASSED!
!ReportTest methodsFor: 'tests bonus' stamp: 'ijgt 6/2/2021 20:40:49'!
test17

	| anAccount anotherAccount aPortfolio aSecondPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	aPortfolio add: anotherAccount.
	aSecondPortfolio := Portfolio named: 'Gran portfolio' with: aPortfolio.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Gran portfolio', String newLineString;
		nextPutAll: String tab, 'Un portfolio', String newLineString;
  		nextPutAll: String tab tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab tab,'Otra cuenta'
  	].
	self assert: (PortfolioStructure for: aPortfolio) equals: portfolioStructureString! !
!ReportTest methodsFor: 'tests bonus' stamp: 'ijgt 6/2/2021 20:41:18' prior: 50876954!
test17

	| anAccount anotherAccount aPortfolio aSecondPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	aPortfolio add: anotherAccount.
	aSecondPortfolio := Portfolio named: 'Gran portfolio' with: aPortfolio.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Gran portfolio', String newLineString;
		nextPutAll: String tab, 'Un portfolio', String newLineString;
  		nextPutAll: String tab, String tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab, String tab,'Otra cuenta'
  	].
	self assert: (PortfolioStructure for: aSecondPortfolio) equals: portfolioStructureString! !

!testRun: #ReportTest #test17 stamp: 'ijgt 6/2/2021 20:41:20'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'ijgt 6/2/2021 20:41:20'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 20:41:20'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'ijgt 6/2/2021 20:41:20'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'ijgt 6/2/2021 20:41:20'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'ijgt 6/2/2021 20:41:20'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'ijgt 6/2/2021 20:41:20'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'ijgt 6/2/2021 20:41:20'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'ijgt 6/2/2021 20:41:20'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'ijgt 6/2/2021 20:41:20'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'ijgt 6/2/2021 20:41:20'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'ijgt 6/2/2021 20:41:20'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'ijgt 6/2/2021 20:41:20'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'ijgt 6/2/2021 20:41:20'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'ijgt 6/2/2021 20:41:20'!
PASSED!

!testRun: #ReportTest #test15 stamp: 'ijgt 6/2/2021 20:41:20'!
PASSED!

!testRun: #ReportTest #test16 stamp: 'ijgt 6/2/2021 20:41:20'!
PASSED!

!testRun: #ReportTest #test17 stamp: 'ijgt 6/2/2021 20:41:20'!
PASSED!
!ReportTest methodsFor: 'tests summary' stamp: 'ijgt 6/2/2021 20:46:24'!
test01summaryEmptyAccount

	| accountReport |
	accountReport := Summary for: ReceptiveAccount new.
	self assert: (accountReport at: 1) equals: ('Balance = 0').
	self assert: (accountReport size) equals: 1.! !

!methodRemoval: ReportTest #test01 stamp: 'ijgt 6/2/2021 20:46:24'!
test01

	| accountReport |
	accountReport := Summary for: ReceptiveAccount new.
	self assert: (accountReport at: 1) equals: ('Balance = 0').
	self assert: (accountReport size) equals: 1.!

!testRun: #ReportTest #test02 stamp: 'ijgt 6/2/2021 20:46:43'!
PASSED!
!ReportTest methodsFor: 'tests summary' stamp: 'ijgt 6/2/2021 20:47:24'!
test02summaryAccountWithDeposit

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	accountReport := Summary for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Depósito por 100.').
	self assert: (accountReport at: 2) equals: ('Balance = 100').
	self assert: (accountReport size) equals: 2.! !

!methodRemoval: ReportTest #test02 stamp: 'ijgt 6/2/2021 20:47:24'!
test02

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	accountReport := Summary for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Depósito por 100.').
	self assert: (accountReport at: 2) equals: ('Balance = 100').
	self assert: (accountReport size) equals: 2.!
!ReportTest methodsFor: 'tests summary' stamp: 'ijgt 6/2/2021 20:50:03'!
test03summaryTwoDeposits

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Deposit register: 50 on: anAccount.
	accountReport := Summary for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Depósito por 100.').
	self assert: (accountReport at: 2) equals: ('Depósito por 50.').
	self assert: (accountReport at: 3) equals: ('Balance = 150').
	self assert: (accountReport size) equals: 3.! !

!methodRemoval: ReportTest #test03 stamp: 'ijgt 6/2/2021 20:50:03'!
test03

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Deposit register: 50 on: anAccount.
	accountReport := Summary for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Depósito por 100.').
	self assert: (accountReport at: 2) equals: ('Depósito por 50.').
	self assert: (accountReport at: 3) equals: ('Balance = 150').
	self assert: (accountReport size) equals: 3.!
!ReportTest methodsFor: 'tests summary' stamp: 'ijgt 6/2/2021 20:50:25'!
test04summaryDepositAndWithdraw

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	accountReport := Summary for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Depósito por 100.').
	self assert: (accountReport at: 2) equals: ('Extracción por 50.').
	self assert: (accountReport at: 3) equals: ('Balance = 50').
	self assert: (accountReport size) equals: 3.! !

!methodRemoval: ReportTest #test04 stamp: 'ijgt 6/2/2021 20:50:25'!
test04

	| accountReport anAccount|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	accountReport := Summary for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Depósito por 100.').
	self assert: (accountReport at: 2) equals: ('Extracción por 50.').
	self assert: (accountReport at: 3) equals: ('Balance = 50').
	self assert: (accountReport size) equals: 3.!
!ReportTest methodsFor: 'tests summary' stamp: 'ijgt 6/2/2021 20:50:49'!
test05summaryTransferWithdraw

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 100.
	accountReport := Summary for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Salida por transferencia de 100.').
	self assert: (accountReport at: 2) equals: ('Balance = -100').
	self assert: (accountReport size) equals: 2.! !

!methodRemoval: ReportTest #test05 stamp: 'ijgt 6/2/2021 20:50:49'!
test05

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 100.
	accountReport := Summary for: (anAccount).
	self assert: (accountReport at: 1) equals: ('Salida por transferencia de 100.').
	self assert: (accountReport at: 2) equals: ('Balance = -100').
	self assert: (accountReport size) equals: 2.!
!ReportTest methodsFor: 'tests summary' stamp: 'ijgt 6/2/2021 20:51:08'!
test06summaryTransferDeposit

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 100.
	accountReport := Summary for: (anotherAccount).
	self assert: (accountReport at: 1) equals: ('Entrada por transferencia de 100.').
	self assert: (accountReport at: 2) equals: ('Balance = 100').
	self assert: (accountReport size) equals: 2.! !

!methodRemoval: ReportTest #test06 stamp: 'ijgt 6/2/2021 20:51:08'!
test06

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 100.
	accountReport := Summary for: (anotherAccount).
	self assert: (accountReport at: 1) equals: ('Entrada por transferencia de 100.').
	self assert: (accountReport at: 2) equals: ('Balance = 100').
	self assert: (accountReport size) equals: 2.!
!ReportTest methodsFor: 'tests summary' stamp: 'ijgt 6/2/2021 20:53:14'!
test07summaryPortfolioEmpty

	| accountReport |
	accountReport := Summary for: Portfolio new.
	self assert: (accountReport at: 1) equals: ('Balance = 0').
	self assert: (accountReport size) equals: 1.! !

!methodRemoval: ReportTest #test07 stamp: 'ijgt 6/2/2021 20:53:14'!
test07

	| accountReport |
	accountReport := Summary for: Portfolio new.
	self assert: (accountReport at: 1) equals: ('Balance = 0').
	self assert: (accountReport size) equals: 1.!
!ReportTest methodsFor: 'tests summary' stamp: 'ijgt 6/2/2021 20:53:40'!
test08summaryPortfolioFull

	| anAccount aPortfolio portfolioReport|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	aPortfolio := Portfolio with: anAccount.
	portfolioReport := Summary for: (aPortfolio).
	self assert: (portfolioReport at: 1) equals: ('Depósito por 100.').
	self assert: (portfolioReport at: 2) equals: ('Extracción por 50.').
	self assert: (portfolioReport at: 3) equals: ('Balance = 50').
	self assert: (portfolioReport at: 4) equals: ('Balance = 50').
	self assert: (portfolioReport size) equals: 4.! !

!methodRemoval: ReportTest #test08 stamp: 'ijgt 6/2/2021 20:53:40'!
test08

	| anAccount aPortfolio portfolioReport|
	anAccount :=	ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	aPortfolio := Portfolio with: anAccount.
	portfolioReport := Summary for: (aPortfolio).
	self assert: (portfolioReport at: 1) equals: ('Depósito por 100.').
	self assert: (portfolioReport at: 2) equals: ('Extracción por 50.').
	self assert: (portfolioReport at: 3) equals: ('Balance = 50').
	self assert: (portfolioReport at: 4) equals: ('Balance = 50').
	self assert: (portfolioReport size) equals: 4.!
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/2/2021 20:54:08'!
test09netTransferAccountEmpty

	| accountReport |
	accountReport := NetTransfer for: ReceptiveAccount new.
	self assert: accountReport equals: ('El neto de transferencias es: 0')! !

!methodRemoval: ReportTest #test09 stamp: 'ijgt 6/2/2021 20:54:08'!
test09

	| accountReport |
	accountReport := NetTransfer for: ReceptiveAccount new.
	self assert: accountReport equals: ('El neto de transferencias es: 0')!
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/2/2021 20:55:03'!
test10netTransferAccountWithTransfers

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 50.
	accountReport := NetTransfer for: anotherAccount.
	self assert: accountReport equals: ('El neto de transferencias es: 50')! !

!methodRemoval: ReportTest #test10 stamp: 'ijgt 6/2/2021 20:55:03'!
test10

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 50.
	accountReport := NetTransfer for: anotherAccount.
	self assert: accountReport equals: ('El neto de transferencias es: 50')!
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/2/2021 20:55:45'!
test10netTransferAccountWithTransferDeposit

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 50.
	accountReport := NetTransfer for: anotherAccount.
	self assert: accountReport equals: ('El neto de transferencias es: 50')! !

!methodRemoval: ReportTest #test10netTransferAccountWithTransfers stamp: 'ijgt 6/2/2021 20:55:45'!
test10netTransferAccountWithTransfers

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 50.
	accountReport := NetTransfer for: anotherAccount.
	self assert: accountReport equals: ('El neto de transferencias es: 50')!
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/2/2021 20:55:58'!
test11netTransferAccountWithTransferWithdraw

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 50.
	accountReport := NetTransfer for: anAccount.
	self assert: accountReport equals: ('El neto de transferencias es: -50')! !

!methodRemoval: ReportTest #test11 stamp: 'ijgt 6/2/2021 20:55:58'!
test11

	| accountReport anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount withValue: 50.
	accountReport := NetTransfer for: anAccount.
	self assert: accountReport equals: ('El neto de transferencias es: -50')!
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/2/2021 20:59:02'!
test12netTransfer

	| portfolioReport aPortfolio anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	aPortfolio := Portfolio with: anAccount.
	Transfer from: anAccount to: anotherAccount withValue: 50.
	portfolioReport := NetTransfer for: aPortfolio.
	self assert: portfolioReport equals: ('El neto de transferencias es: -50')! !

!methodRemoval: ReportTest #test12 stamp: 'ijgt 6/2/2021 20:59:02'!
test12

	| portfolioReport aPortfolio anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	aPortfolio := Portfolio with: anAccount.
	Transfer from: anAccount to: anotherAccount withValue: 50.
	portfolioReport := NetTransfer for: aPortfolio.
	self assert: portfolioReport equals: ('El neto de transferencias es: -50')!
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/2/2021 20:59:40'!
test12netTransferPortfolioOneTransferAccount

	| portfolioReport aPortfolio anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	aPortfolio := Portfolio with: anAccount.
	Transfer from: anAccount to: anotherAccount withValue: 50.
	portfolioReport := NetTransfer for: aPortfolio.
	self assert: portfolioReport equals: ('El neto de transferencias es: -50')! !

!methodRemoval: ReportTest #test12netTransfer stamp: 'ijgt 6/2/2021 20:59:40'!
test12netTransfer

	| portfolioReport aPortfolio anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	aPortfolio := Portfolio with: anAccount.
	Transfer from: anAccount to: anotherAccount withValue: 50.
	portfolioReport := NetTransfer for: aPortfolio.
	self assert: portfolioReport equals: ('El neto de transferencias es: -50')!
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/2/2021 21:00:08'!
test12netTransferPortfolioWithTransferWithdraw

	| portfolioReport aPortfolio anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	aPortfolio := Portfolio with: anAccount.
	Transfer from: anAccount to: anotherAccount withValue: 50.
	portfolioReport := NetTransfer for: aPortfolio.
	self assert: portfolioReport equals: ('El neto de transferencias es: -50')! !

!methodRemoval: ReportTest #test12netTransferPortfolioOneTransferAccount stamp: 'ijgt 6/2/2021 21:00:08'!
test12netTransferPortfolioOneTransferAccount

	| portfolioReport aPortfolio anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	aPortfolio := Portfolio with: anAccount.
	Transfer from: anAccount to: anotherAccount withValue: 50.
	portfolioReport := NetTransfer for: aPortfolio.
	self assert: portfolioReport equals: ('El neto de transferencias es: -50')!
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/2/2021 21:00:34'!
test13netTransferPortfolioWithTransferWithdraw

	| portfolioReport aPortfolio anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	aPortfolio := Portfolio with: anAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	portfolioReport := NetTransfer for: aPortfolio.
	self assert: portfolioReport equals: ('El neto de transferencias es: 50')! !

!methodRemoval: ReportTest #test13 stamp: 'ijgt 6/2/2021 21:00:34'!
test13

	| portfolioReport aPortfolio anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	aPortfolio := Portfolio with: anAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	portfolioReport := NetTransfer for: aPortfolio.
	self assert: portfolioReport equals: ('El neto de transferencias es: 50')!
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/2/2021 21:01:59'!
test14netTransferPortfolioTransferBetweenAccounts

	| portfolioReport aPortfolio anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	aPortfolio := Portfolio with: anAccount with: anotherAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	portfolioReport := NetTransfer for: aPortfolio.
	self assert: portfolioReport equals: ('El neto de transferencias es: 0')! !

!methodRemoval: ReportTest #test14 stamp: 'ijgt 6/2/2021 21:01:59'!
test14

	| portfolioReport aPortfolio anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	aPortfolio := Portfolio with: anAccount with: anotherAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	portfolioReport := NetTransfer for: aPortfolio.
	self assert: portfolioReport equals: ('El neto de transferencias es: 0')!
!ReportTest methodsFor: 'tests netTransfer' stamp: 'ijgt 6/2/2021 21:02:15'!
test14netTransferPortfolioTransferBetweenChildren

	| portfolioReport aPortfolio anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	aPortfolio := Portfolio with: anAccount with: anotherAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	portfolioReport := NetTransfer for: aPortfolio.
	self assert: portfolioReport equals: ('El neto de transferencias es: 0')! !

!methodRemoval: ReportTest #test14netTransferPortfolioTransferBetweenAccounts stamp: 'ijgt 6/2/2021 21:02:15'!
test14netTransferPortfolioTransferBetweenAccounts

	| portfolioReport aPortfolio anAccount anotherAccount|
	anAccount :=	ReceptiveAccount new.
	anotherAccount :=	ReceptiveAccount new.
	aPortfolio := Portfolio with: anAccount with: anotherAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	portfolioReport := NetTransfer for: aPortfolio.
	self assert: portfolioReport equals: ('El neto de transferencias es: 0')!
!ReportTest methodsFor: 'tests portfolioStructure' stamp: 'ijgt 6/2/2021 21:03:26'!
test15portfolioStructureOneAccount

	| anAccount aPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Un portfolio', String newLineString;
  		nextPutAll: String tab,'Una cuenta'
  	].
	self assert: (PortfolioStructure for: aPortfolio) equals: portfolioStructureString! !

!methodRemoval: ReportTest #test15 stamp: 'ijgt 6/2/2021 21:03:26'!
test15

	| anAccount aPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Un portfolio', String newLineString;
  		nextPutAll: String tab,'Una cuenta'
  	].
	self assert: (PortfolioStructure for: aPortfolio) equals: portfolioStructureString!
!ReportTest methodsFor: 'tests portfolioStructure' stamp: 'ijgt 6/2/2021 21:03:45'!
test16portfolioStructureTwoAccounts

	| anAccount anotherAccount aPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	aPortfolio add: anotherAccount.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Un portfolio', String newLineString;
  		nextPutAll: String tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab,'Otra cuenta'
  	].
	self assert: (PortfolioStructure for: aPortfolio) equals: portfolioStructureString! !

!methodRemoval: ReportTest #test16 stamp: 'ijgt 6/2/2021 21:03:46'!
test16

	| anAccount anotherAccount aPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	aPortfolio add: anotherAccount.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Un portfolio', String newLineString;
  		nextPutAll: String tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab,'Otra cuenta'
  	].
	self assert: (PortfolioStructure for: aPortfolio) equals: portfolioStructureString!
!ReportTest methodsFor: 'tests portfolioStructure' stamp: 'ijgt 6/2/2021 21:04:17'!
test17portfolioStructureStackedPortfolio

	| anAccount anotherAccount aPortfolio aSecondPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	aPortfolio add: anotherAccount.
	aSecondPortfolio := Portfolio named: 'Gran portfolio' with: aPortfolio.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Gran portfolio', String newLineString;
		nextPutAll: String tab, 'Un portfolio', String newLineString;
  		nextPutAll: String tab, String tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab, String tab,'Otra cuenta'
  	].
	self assert: (PortfolioStructure for: aSecondPortfolio) equals: portfolioStructureString! !

!methodRemoval: ReportTest #test17 stamp: 'ijgt 6/2/2021 21:04:17'!
test17

	| anAccount anotherAccount aPortfolio aSecondPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	aPortfolio add: anotherAccount.
	aSecondPortfolio := Portfolio named: 'Gran portfolio' with: aPortfolio.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Gran portfolio', String newLineString;
		nextPutAll: String tab, 'Un portfolio', String newLineString;
  		nextPutAll: String tab, String tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab, String tab,'Otra cuenta'
  	].
	self assert: (PortfolioStructure for: aSecondPortfolio) equals: portfolioStructureString!

!testRun: #TransferTest #test01 stamp: 'ijgt 6/2/2021 21:04:35'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'ijgt 6/2/2021 21:04:35'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'ijgt 6/2/2021 21:04:35'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'ijgt 6/2/2021 21:04:35'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'ijgt 6/2/2021 21:04:35'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'ijgt 6/2/2021 21:04:35'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'ijgt 6/2/2021 21:04:35'!
PASSED!

!testRun: #ReportTest #test01summaryEmptyAccount stamp: 'ijgt 6/2/2021 21:04:36'!
PASSED!

!testRun: #ReportTest #test02summaryAccountWithDeposit stamp: 'ijgt 6/2/2021 21:04:36'!
PASSED!

!testRun: #ReportTest #test03summaryTwoDeposits stamp: 'ijgt 6/2/2021 21:04:36'!
PASSED!

!testRun: #ReportTest #test04summaryDepositAndWithdraw stamp: 'ijgt 6/2/2021 21:04:36'!
PASSED!

!testRun: #ReportTest #test05summaryTransferWithdraw stamp: 'ijgt 6/2/2021 21:04:36'!
PASSED!

!testRun: #ReportTest #test06summaryTransferDeposit stamp: 'ijgt 6/2/2021 21:04:36'!
PASSED!

!testRun: #ReportTest #test07summaryPortfolioEmpty stamp: 'ijgt 6/2/2021 21:04:36'!
PASSED!

!testRun: #ReportTest #test08summaryPortfolioFull stamp: 'ijgt 6/2/2021 21:04:36'!
PASSED!

!testRun: #ReportTest #test09netTransferAccountEmpty stamp: 'ijgt 6/2/2021 21:04:36'!
PASSED!

!testRun: #ReportTest #test10netTransferAccountWithTransferDeposit stamp: 'ijgt 6/2/2021 21:04:36'!
PASSED!

!testRun: #ReportTest #test11netTransferAccountWithTransferWithdraw stamp: 'ijgt 6/2/2021 21:04:36'!
PASSED!

!testRun: #ReportTest #test12netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/2/2021 21:04:36'!
PASSED!

!testRun: #ReportTest #test13netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/2/2021 21:04:36'!
PASSED!

!testRun: #ReportTest #test14netTransferPortfolioTransferBetweenChildren stamp: 'ijgt 6/2/2021 21:04:36'!
PASSED!

!testRun: #ReportTest #test15portfolioStructureOneAccount stamp: 'ijgt 6/2/2021 21:04:36'!
PASSED!

!testRun: #ReportTest #test16portfolioStructureTwoAccounts stamp: 'ijgt 6/2/2021 21:04:36'!
PASSED!

!testRun: #ReportTest #test17portfolioStructureStackedPortfolio stamp: 'ijgt 6/2/2021 21:04:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 6/2/2021 21:04:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 6/2/2021 21:04:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 6/2/2021 21:04:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 6/2/2021 21:04:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 6/2/2021 21:04:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 6/2/2021 21:04:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 6/2/2021 21:04:40'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'ijgt 6/2/2021 21:04:41'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'ijgt 6/2/2021 21:04:41'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'ijgt 6/2/2021 21:04:41'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'ijgt 6/2/2021 21:04:41'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'ijgt 6/2/2021 21:04:41'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'ijgt 6/2/2021 21:04:41'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'ijgt 6/2/2021 21:04:41'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'ijgt 6/2/2021 21:04:41'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'ijgt 6/2/2021 21:04:41'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'ijgt 6/2/2021 21:04:41'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'ijgt 6/2/2021 21:04:41'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'ijgt 6/2/2021 21:04:41'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'ijgt 6/2/2021 21:04:41'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'ijgt 6/2/2021 21:04:41'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'ijgt 6/2/2021 21:04:41'!
PASSED!

----QUIT----(2 June 2021 21:07:19) CuisUniversity-4532.image priorSource: 17394458!

----STARTUP---- (3 June 2021 15:36:12) as /home/igna/Desktop/CuisNuevo/CuisUniversity-4532.image!


Report subclass: #TransactionsStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #TransactionsStructure category: 'Portfolio-18' stamp: 'ijgt 6/3/2021 15:46:16'!
Report subclass: #TransactionsStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!
!ReportTest methodsFor: 'tests portfolioStructure' stamp: 'ijgt 6/3/2021 15:47:14'!
test18

	| anAccount aPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Un portfolio', String newLineString;
  		nextPutAll: String tab,'Una cuenta'
  	].
	self assert: (PortfolioStructure for: aPortfolio) equals: portfolioStructureString! !
!ReportTest methodsFor: 'tests transactionsStructure' stamp: 'ijgt 6/3/2021 15:49:23' prior: 50877869!
test18

	| anAccount aPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Un portfolio', String newLineString;
  		nextPutAll: String tab,'Una cuenta', String newLineString;
		nextPutAll: String tab, String tab, 'Balance = 0'.
  	].
	self assert: (TransactionsStructure for: aPortfolio) equals: portfolioStructureString! !

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 15:49:26'!
ERROR!
!TransactionsStructure methodsFor: 'no messages' stamp: 'ijgt 6/3/2021 15:50:42'!
reportWithReceptiveAccount: aReceptiveAccount

	|portfolioStructureString|
 	portfolioStructureString := String streamContents: [:str | str 
		nextPutAll: aReceptiveAccount name, String newLineString.
	].
 	^ portfolioStructureString allButLast.! !
!TransactionsStructure methodsFor: 'as yet unclassified' stamp: 'ijgt 6/3/2021 15:51:20'!
reportReceptiveAccount: aReceptiveAccount

	|portfolioStructureString|
 	portfolioStructureString := String streamContents: [:str | str 
		nextPutAll: aReceptiveAccount name, String newLineString.
	].
 	^ portfolioStructureString allButLast.! !

!methodRemoval: TransactionsStructure #reportWithReceptiveAccount: stamp: 'ijgt 6/3/2021 15:51:20'!
reportWithReceptiveAccount: aReceptiveAccount

	|portfolioStructureString|
 	portfolioStructureString := String streamContents: [:str | str 
		nextPutAll: aReceptiveAccount name, String newLineString.
	].
 	^ portfolioStructureString allButLast.!
!TransactionsStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 15:52:07' overrides: 50874869!
report

	^ self reportReceptiveAccount: account! !
!TransactionsStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 15:53:22' prior: 50877940 overrides: 50874869!
report

	^ self reportPortfolio: account! !
!TransactionsStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 15:54:10' prior: 50877946 overrides: 50874869!
report

	^ account! !
!TransactionsStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 15:54:35' prior: 50877951 overrides: 50874869!
report

	^ account transactionsStructureReport: self! !
!Account methodsFor: 'report' stamp: 'ijgt 6/3/2021 15:55:10'!
transactionsStructureReport: aTransactionsStructureReport

	self subclassResponsibility! !
!Portfolio methodsFor: 'report' stamp: 'ijgt 6/3/2021 15:56:08' overrides: 50877960!
transactionsStructureReport: aTransactionsStrutureReport

	^ aTransactionsStrutureReport reportPortfolio: self withAccounts: accounts! !
!ReceptiveAccount methodsFor: 'report' stamp: 'ijgt 6/3/2021 15:56:29' overrides: 50877960!
transactionsStructureReport: aTransactionsStrutureReport

	^ aTransactionsStrutureReport reportReceptiveAccount: self! !
!TransactionsStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 15:57:25'!
reportPortfolio: aPortfolio withAccounts: accounts

	|portfolioStructureString|
 	portfolioStructureString := String streamContents: [:str | | aReceptiveAccount | str 
		nextPutAll: aReceptiveAccount name, String newLineString.
	].
 	^ portfolioStructureString allButLast.! !
!TransactionsStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 15:58:05' prior: 50877981!
reportPortfolio: aPortfolio withAccounts: portfolioAccounts

	|portfolioStructureString|
 	portfolioStructureString := String streamContents: [:str | str
		nextPutAll: aPortfolio name, String newLineString.
  		portfolioAccounts do:[:anAccount |
   			(anAccount portfolioStructureReport: self) linesDo: [:aLine | str nextPutAll: String tab, aLine, String newLineString.]
   		].
  	].
 	^portfolioStructureString allButLast .! !

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 15:58:14'!
FAILURE!

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 15:58:14'!
FAILURE!
!TransactionsStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 15:59:47' prior: 50877918!
reportReceptiveAccount: aReceptiveAccount

	|portfolioStructureString|
 	portfolioStructureString := String streamContents: [:str | str 
		nextPutAll: aReceptiveAccount name, String newLineString.
		(Summary with: aReceptiveAccount) do: [:aLine | str nextPutAll: String tab,aLine,String newLineString.]. 
	].
 	^ portfolioStructureString allButLast.! !

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 15:59:58'!
ERROR!

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 15:59:58'!
ERROR!
!TransactionsStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 16:00:37' prior: 50878014!
reportReceptiveAccount: aReceptiveAccount

	|portfolioStructureString|
 	portfolioStructureString := String streamContents: [:str | str 
		nextPutAll: aReceptiveAccount name, String newLineString.
		(Summary for: aReceptiveAccount) do: [:aLine | str 
			nextPutAll: String tab,aLine,String newLineString.
		]. 
	].
 	^ portfolioStructureString allButLast.! !

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 16:00:45'!
PASSED!

!testRun: #ReportTest #test15portfolioStructureOneAccount stamp: 'ijgt 6/3/2021 16:00:53'!
PASSED!

!testRun: #ReportTest #test16portfolioStructureTwoAccounts stamp: 'ijgt 6/3/2021 16:00:53'!
PASSED!

!testRun: #ReportTest #test17portfolioStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:00:53'!
PASSED!

!testRun: #ReportTest #test01summaryEmptyAccount stamp: 'ijgt 6/3/2021 16:00:54'!
PASSED!

!testRun: #ReportTest #test02summaryAccountWithDeposit stamp: 'ijgt 6/3/2021 16:00:54'!
PASSED!

!testRun: #ReportTest #test03summaryTwoDeposits stamp: 'ijgt 6/3/2021 16:00:54'!
PASSED!

!testRun: #ReportTest #test04summaryDepositAndWithdraw stamp: 'ijgt 6/3/2021 16:00:54'!
PASSED!

!testRun: #ReportTest #test05summaryTransferWithdraw stamp: 'ijgt 6/3/2021 16:00:54'!
PASSED!

!testRun: #ReportTest #test06summaryTransferDeposit stamp: 'ijgt 6/3/2021 16:00:54'!
PASSED!

!testRun: #ReportTest #test07summaryPortfolioEmpty stamp: 'ijgt 6/3/2021 16:00:54'!
PASSED!

!testRun: #ReportTest #test08summaryPortfolioFull stamp: 'ijgt 6/3/2021 16:00:54'!
PASSED!

!testRun: #ReportTest #test09netTransferAccountEmpty stamp: 'ijgt 6/3/2021 16:00:55'!
PASSED!

!testRun: #ReportTest #test10netTransferAccountWithTransferDeposit stamp: 'ijgt 6/3/2021 16:00:55'!
PASSED!

!testRun: #ReportTest #test11netTransferAccountWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:00:55'!
PASSED!

!testRun: #ReportTest #test12netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:00:55'!
PASSED!

!testRun: #ReportTest #test13netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:00:55'!
PASSED!

!testRun: #ReportTest #test14netTransferPortfolioTransferBetweenChildren stamp: 'ijgt 6/3/2021 16:00:55'!
PASSED!
!ReportTest methodsFor: 'tests transactionsStructure' stamp: 'ijgt 6/3/2021 16:01:27'!
test19

	| anAccount aPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Un portfolio', String newLineString;
  		nextPutAll: String tab,'Una cuenta', String newLineString;
		nextPutAll: String tab, String tab, 'Balance = 0'.
  	].
	self assert: (TransactionsStructure for: aPortfolio) equals: portfolioStructureString! !
!ReportTest methodsFor: 'tests transactionsStructure' stamp: 'ijgt 6/3/2021 16:02:06' prior: 50878103!
test19

	! !
!ReportTest methodsFor: 'tests transactionsStructure' stamp: 'ijgt 6/3/2021 16:04:58' prior: 50878123!
test19

	| anAccount anotherAccount aPortfolio aSecondPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	Deposit register: 100 on: anAccount.
	aPortfolio add: anotherAccount.
	aSecondPortfolio := Portfolio named: 'Gran portfolio' with: aPortfolio.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Gran portfolio', String newLineString;
		nextPutAll: String tab, 'Un portfolio', String newLineString;
  		nextPutAll: String tab, String tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = 0', String newLineString ;
		nextPutAll: String tab, String tab,'Otra cuenta';
		nextPutAll: String tab, String tab,String tab,'Balance = 0', String newLineString ;
		nextPutAll: String tab, String tab,'Balance = 0', String newLineString ;
		nextPutAll: String tab, 'Balance = 0', String newLineString.
  	].
	self assert: (PortfolioStructure for: aSecondPortfolio) equals: portfolioStructureString! !
!ReportTest methodsFor: 'tests transactionsStructure' stamp: 'ijgt 6/3/2021 16:06:02' prior: 50878127!
test19

	| anAccount anotherAccount aPortfolio aSecondPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	Deposit register: 100 on: anAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	aPortfolio add: anotherAccount.
	aSecondPortfolio := Portfolio named: 'Gran portfolio' with: aPortfolio.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Gran portfolio', String newLineString;
		nextPutAll: String tab, 'Un portfolio', String newLineString;
  		nextPutAll: String tab, String tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = 150', String newLineString ;
		nextPutAll: String tab, String tab,'Otra cuenta';
		nextPutAll: String tab, String tab,String tab,'Balance = -50', String newLineString ;
		nextPutAll: String tab, String tab,'Balance = 100', String newLineString ;
		nextPutAll: String tab, 'Balance = 100', String newLineString.
  	].
	self assert: (PortfolioStructure for: aSecondPortfolio) equals: portfolioStructureString! !
!ReportTest methodsFor: 'tests transactionsStructure' stamp: 'ijgt 6/3/2021 16:06:22' prior: 50877886!
test18

	| anAccount aPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Un portfolio', String newLineString;
  		nextPutAll: String tab,'Una cuenta', String newLineString;
		nextPutAll: String tab, String tab, 'Balance = 0';
		nextPutAll: String tab, 'Balance = 0'.
  	].
	self assert: (TransactionsStructure for: aPortfolio) equals: portfolioStructureString! !
!TransactionsStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 16:08:43' prior: 50877993!
reportPortfolio: aPortfolio withAccounts: portfolioAccounts

	|portfolioStructureString|
 	portfolioStructureString := String streamContents: [:str | str
		nextPutAll: aPortfolio name, String newLineString.
  		portfolioAccounts do:[:anAccount |
   			(anAccount portfolioStructureReport: self) linesDo: [:aLine | str nextPutAll: String tab, aLine, String newLineString.]
   		].
		str nextPutAll: aPortfolio balance asString
  	].
 	^portfolioStructureString allButLast .! !
!TransactionsStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 16:10:40' prior: 50878229!
reportPortfolio: aPortfolio withAccounts: portfolioAccounts

	|portfolioStructureString|
 	portfolioStructureString := String streamContents: [:str | str
		nextPutAll: aPortfolio name, String newLineString.
  		portfolioAccounts do:[:anAccount |
   			(anAccount portfolioStructureReport: self) linesDo: [:aLine | str nextPutAll: String tab, aLine, String newLineString.]
   		].
		str nextPutAll: 'Balance = ', aPortfolio balance asString
  	].
 	^portfolioStructureString allButLast .! !

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 16:10:50'!
FAILURE!

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 16:10:50'!
FAILURE!
!TransactionsStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 16:11:58' prior: 50878247!
reportPortfolio: aPortfolio withAccounts: portfolioAccounts

	|portfolioStructureString|
 	portfolioStructureString := String streamContents: [:str | str
		nextPutAll: aPortfolio name, String newLineString.
  		portfolioAccounts do:[:anAccount |
   			(anAccount portfolioStructureReport: self) linesDo: [:aLine | str nextPutAll: String tab, aLine, String newLineString.]
   		].
		str allButLast.
		str nextPutAll: 'Balance = ', aPortfolio balance asString
  	].
 	^portfolioStructureString! !

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 16:12:03'!
ERROR!

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 16:12:03'!
ERROR!
!TransactionsStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 16:13:50' prior: 50878270!
reportPortfolio: aPortfolio withAccounts: portfolioAccounts

	|portfolioStructureString|
 	portfolioStructureString := String streamContents: [:str | str
		nextPutAll: aPortfolio name, String newLineString.
  		portfolioAccounts do:[:anAccount |
   			(anAccount portfolioStructureReport: self) linesDo: [:aLine | str nextPutAll: String tab, aLine, String newLineString.]
   		].

  	].
	portfolioStructureString allButLast.
	portfolioStructureString add: 'Balance = ', aPortfolio balance asString.
 	^portfolioStructureString! !

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 16:13:56'!
ERROR!

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 16:13:56'!
ERROR!
!TransactionsStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 16:14:26' prior: 50878293!
reportPortfolio: aPortfolio withAccounts: portfolioAccounts

	|portfolioStructureString|
 	portfolioStructureString := String streamContents: [:str | str
		nextPutAll: aPortfolio name, String newLineString.
  		portfolioAccounts do:[:anAccount |
   			(anAccount portfolioStructureReport: self) linesDo: [:aLine | str nextPutAll: String tab, aLine, String newLineString.]
   		].

  	].
	portfolioStructureString allButLast.
	portfolioStructureString nextPutAll: 'Balance = ', aPortfolio balance asString.
 	^portfolioStructureString! !

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 16:14:32'!
ERROR!

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 16:14:32'!
ERROR!
!TransactionsStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 16:16:32' prior: 50878317!
reportPortfolio: aPortfolio withAccounts: portfolioAccounts

	|portfolioStructureString|
 	portfolioStructureString := String streamContents: [:str | str
		nextPutAll: aPortfolio name, String newLineString.
  		portfolioAccounts do:[:anAccount |
   			(anAccount portfolioStructureReport: self) linesDo: [:aLine | str nextPutAll: String tab, aLine, String newLineString.]
   		].

  	].
	portfolioStructureString allButLast.
	portfolioStructureString := portfolioStructureString, 'Balance = ', aPortfolio balance asString.
 	^portfolioStructureString! !

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 16:16:40'!
FAILURE!

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 16:16:40'!
FAILURE!

TransactionsStructure for: aPortfolio!
!TransactionsStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 16:17:35' prior: 50878342!
reportPortfolio: aPortfolio withAccounts: portfolioAccounts

	|portfolioStructureString|
 	portfolioStructureString := String streamContents: [:str | str
		nextPutAll: aPortfolio name, String newLineString.
  		portfolioAccounts do:[:anAccount |
   			(anAccount portfolioStructureReport: self) linesDo: [:aLine | str nextPutAll: String tab, aLine, String newLineString.]
   		].

  	].
	portfolioStructureString allButLast.
	portfolioStructureString := portfolioStructureString, String tab, 'Balance = ', aPortfolio balance asString.
 	^portfolioStructureString! !

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 16:17:42'!
FAILURE!

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 16:17:42'!
FAILURE!

TransactionsStructure for: aPortfolio!

portfolioStructureString!
!ReportTest methodsFor: 'tests transactionsStructure' stamp: 'ijgt 6/3/2021 16:18:56' prior: 50878208!
test18

	| anAccount aPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Un portfolio', String newLineString;
  		nextPutAll: String tab,'Una cuenta', String newLineString;
		nextPutAll: String tab, String tab, 'Balance = 0', String newLineString;
		nextPutAll: String tab, 'Balance = 0'.
  	].
	self assert: (TransactionsStructure for: aPortfolio) equals: portfolioStructureString! !

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 16:18:58'!
PASSED!

!testRun: #ReportTest #test19 stamp: 'ijgt 6/3/2021 16:19:02'!
FAILURE!

!testRun: #ReportTest #test19 stamp: 'ijgt 6/3/2021 16:19:02'!
FAILURE!

PortfolioStructure for: aSecondPortfolio!

portfolioStructureString!
!ReportTest methodsFor: 'tests transactionsStructure' stamp: 'ijgt 6/3/2021 16:20:03' prior: 50878166!
test19

	| anAccount anotherAccount aPortfolio aSecondPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	Deposit register: 100 on: anAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	aPortfolio add: anotherAccount.
	aSecondPortfolio := Portfolio named: 'Gran portfolio' with: aPortfolio.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Gran portfolio', String newLineString;
		nextPutAll: String tab, 'Un portfolio', String newLineString;
  		nextPutAll: String tab, String tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = 150', String newLineString ;
		nextPutAll: String tab, String tab,'Otra cuenta', String newLineString;
		nextPutAll: String tab, String tab,String tab,'Balance = -50', String newLineString ;
		nextPutAll: String tab, String tab,'Balance = 100', String newLineString ;
		nextPutAll: String tab, 'Balance = 100', String newLineString.
  	].
	self assert: (PortfolioStructure for: aSecondPortfolio) equals: portfolioStructureString! !
!ReportTest methodsFor: 'tests transactionsStructure' stamp: 'ijgt 6/3/2021 16:20:11' prior: 50878428!
test19

	| anAccount anotherAccount aPortfolio aSecondPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	Deposit register: 100 on: anAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	aPortfolio add: anotherAccount.
	aSecondPortfolio := Portfolio named: 'Gran portfolio' with: aPortfolio.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Gran portfolio', String newLineString;
		nextPutAll: String tab, 'Un portfolio', String newLineString;
  		nextPutAll: String tab, String tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = 150', String newLineString ;
		nextPutAll: String tab, String tab,'Otra cuenta', String newLineString;
		nextPutAll: String tab, String tab,String tab,'Balance = -50', String newLineString ;
		nextPutAll: String tab, String tab,'Balance = 100', String newLineString ;
		nextPutAll: String tab, 'Balance = 100', String newLineString.
  	].
	self assert: (TransactionsStructure for: aSecondPortfolio) equals: portfolioStructureString! !

!testRun: #ReportTest #test19 stamp: 'ijgt 6/3/2021 16:20:13'!
FAILURE!

TransactionsStructure for: aSecondPortfolio!

portfolioStructureString!

TransactionsStructure for: aSecondPortfolio!
!ReportTest methodsFor: 'tests transactionsStructure' stamp: 'ijgt 6/3/2021 16:21:55' prior: 50878470!
test19

	| anAccount anotherAccount aPortfolio aSecondPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	Deposit register: 100 on: anAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	aPortfolio add: anotherAccount.
	aSecondPortfolio := Portfolio named: 'Gran portfolio' with: aPortfolio.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Gran portfolio', String newLineString;
		nextPutAll: String tab, 'Un portfolio', String newLineString;
  		nextPutAll: String tab, String tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Deposito por 100', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = 150', String newLineString ;
		nextPutAll: String tab, String tab,'Otra cuenta', String newLineString;
		nextPutAll: String tab, String tab,String tab,'Balance = -50', String newLineString ;
		nextPutAll: String tab, String tab,'Balance = 100', String newLineString ;
		nextPutAll: String tab, 'Balance = 100', String newLineString.
  	].
	self assert: (TransactionsStructure for: aSecondPortfolio) equals: portfolioStructureString! !
!ReportTest methodsFor: 'tests transactionsStructure' stamp: 'ijgt 6/3/2021 16:22:34' prior: 50878518!
test19

	| anAccount anotherAccount aPortfolio aSecondPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	Deposit register: 100 on: anAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	aPortfolio add: anotherAccount.
	aSecondPortfolio := Portfolio named: 'Gran portfolio' with: aPortfolio.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Gran portfolio', String newLineString;
		nextPutAll: String tab, 'Un portfolio', String newLineString;
  		nextPutAll: String tab, String tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Deposito por 100', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Entrada de transferencia por 100', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = 150', String newLineString ;
		nextPutAll: String tab, String tab,'Otra cuenta', String newLineString;
		nextPutAll: String tab, String tab,String tab,'Balance = -50', String newLineString ;
		nextPutAll: String tab, String tab,'Balance = 100', String newLineString ;
		nextPutAll: String tab, 'Balance = 100', String newLineString.
  	].
	self assert: (TransactionsStructure for: aSecondPortfolio) equals: portfolioStructureString! !
!ReportTest methodsFor: 'tests transactionsStructure' stamp: 'ijgt 6/3/2021 16:22:59' prior: 50878563!
test19

	| anAccount anotherAccount aPortfolio aSecondPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	Deposit register: 100 on: anAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	aPortfolio add: anotherAccount.
	aSecondPortfolio := Portfolio named: 'Gran portfolio' with: aPortfolio.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Gran portfolio', String newLineString;
		nextPutAll: String tab, 'Un portfolio', String newLineString;
  		nextPutAll: String tab, String tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Deposito por 100', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Entrada de transferencia por 100', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = 150', String newLineString ;
		nextPutAll: String tab, String tab,'Otra cuenta', String newLineString;
		nextPutAll: String tab, String tab,String tab,'Salida por transferencia de 50', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = -50', String newLineString ;
		nextPutAll: String tab, String tab,'Balance = 100', String newLineString ;
		nextPutAll: String tab, 'Balance = 100', String newLineString.
  	].
	self assert: (TransactionsStructure for: aSecondPortfolio) equals: portfolioStructureString! !

!testRun: #ReportTest #test19 stamp: 'ijgt 6/3/2021 16:23:05'!
FAILURE!

!testRun: #ReportTest #test19 stamp: 'ijgt 6/3/2021 16:23:05'!
FAILURE!

portfolioStructureString!

TransactionsStructure for: aSecondPortfolio!
!ReportTest methodsFor: 'tests transactionsStructure' stamp: 'ijgt 6/3/2021 16:24:28' prior: 50878611!
test19

	| anAccount anotherAccount aPortfolio aSecondPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	Deposit register: 100 on: anAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	aPortfolio add: anotherAccount.
	aSecondPortfolio := Portfolio named: 'Gran portfolio' with: aPortfolio.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Gran portfolio', String newLineString;
		nextPutAll: String tab, 'Un portfolio', String newLineString;
  		nextPutAll: String tab, String tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Depósito por 100', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Entrada por transferencia de 50', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = 150', String newLineString ;
		nextPutAll: String tab, String tab,'Otra cuenta', String newLineString;
		nextPutAll: String tab, String tab,String tab,'Salida por transferencia de 50', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = -50', String newLineString ;
		nextPutAll: String tab, String tab,'Balance = 100', String newLineString ;
		nextPutAll: String tab, 'Balance = 100', String newLineString.
  	].
	self assert: (TransactionsStructure for: aSecondPortfolio) equals: portfolioStructureString! !

!testRun: #ReportTest #test19 stamp: 'ijgt 6/3/2021 16:24:29'!
FAILURE!

portfolioStructureString!

TransactionsStructure for: aSecondPortfolio!
!ReportTest methodsFor: 'tests transactionsStructure' stamp: 'ijgt 6/3/2021 16:25:30' prior: 50878670!
test19

	| anAccount anotherAccount aPortfolio aSecondPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	Deposit register: 100 on: anAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	aPortfolio add: anotherAccount.
	aSecondPortfolio := Portfolio named: 'Gran portfolio' with: aPortfolio.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Gran portfolio', String newLineString;
		nextPutAll: String tab, 'Un portfolio', String newLineString;
  		nextPutAll: String tab, String tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Depósito por 100.', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Entrada por transferencia de 50.', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = 150', String newLineString ;
		nextPutAll: String tab, String tab,'Otra cuenta', String newLineString;
		nextPutAll: String tab, String tab,String tab,'Salida por transferencia de 50.', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = -50', String newLineString ;
		nextPutAll: String tab, String tab,'Balance = 100', String newLineString ;
		nextPutAll: String tab, 'Balance = 100', String newLineString.
  	].
	self assert: (TransactionsStructure for: aSecondPortfolio) equals: portfolioStructureString! !

!testRun: #ReportTest #test19 stamp: 'ijgt 6/3/2021 16:25:31'!
FAILURE!

portfolioStructureString!
!ReportTest methodsFor: 'tests transactionsStructure' stamp: 'ijgt 6/3/2021 16:26:09' prior: 50878726!
test19

	| anAccount anotherAccount aPortfolio aSecondPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	Deposit register: 100 on: anAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	aPortfolio add: anotherAccount.
	aSecondPortfolio := Portfolio named: 'Gran portfolio' with: aPortfolio.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Gran portfolio', String newLineString;
		nextPutAll: String tab, 'Un portfolio', String newLineString;
  		nextPutAll: String tab, String tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Depósito por 100.', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Entrada por transferencia de 50.', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = 150', String newLineString ;
		nextPutAll: String tab, String tab,'Otra cuenta', String newLineString;
		nextPutAll: String tab, String tab,String tab,'Salida por transferencia de 50.', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = -50', String newLineString ;
		nextPutAll: String tab, String tab,'Balance = 100', String newLineString ;
		nextPutAll: String tab, 'Balance = 100'.
  	].
	self assert: (TransactionsStructure for: aSecondPortfolio) equals: portfolioStructureString! !

!testRun: #ReportTest #test19 stamp: 'ijgt 6/3/2021 16:26:10'!
PASSED!

!testRun: #ReportTest #test19 stamp: 'ijgt 6/3/2021 16:26:12'!
PASSED!
!ReportTest methodsFor: 'tests transactionsStructure' stamp: 'ijgt 6/3/2021 16:26:53' prior: 50878781!
test19

	| anAccount anotherAccount aPortfolio aSecondPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	Deposit register: 100 on: anAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	aPortfolio add: anotherAccount.
	aSecondPortfolio := Portfolio named: 'Gran portfolio' with: aPortfolio.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Gran portfolio', String newLineString;
		nextPutAll: String tab, 'Un portfolio', String newLineString;
  		nextPutAll: String tab tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Depósito por 100.', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Entrada por transferencia de 50.', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = 150', String newLineString ;
		nextPutAll: String tab, String tab,'Otra cuenta', String newLineString;
		nextPutAll: String tab, String tab,String tab,'Salida por transferencia de 50.', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = -50', String newLineString ;
		nextPutAll: String tab, String tab,'Balance = 100', String newLineString ;
		nextPutAll: String tab, 'Balance = 100'.
  	].
	self assert: (TransactionsStructure for: aSecondPortfolio) equals: portfolioStructureString! !

!testRun: #ReportTest #test19 stamp: 'ijgt 6/3/2021 16:26:54'!
ERROR!
!ReportTest methodsFor: 'tests transactionsStructure' stamp: 'ijgt 6/3/2021 16:27:10' prior: 50878837!
test19

	| anAccount anotherAccount aPortfolio aSecondPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	Deposit register: 100 on: anAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	aPortfolio add: anotherAccount.
	aSecondPortfolio := Portfolio named: 'Gran portfolio' with: aPortfolio.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Gran portfolio', String newLineString;
		nextPutAll: String tab, 'Un portfolio', String newLineString;
  		nextPutAll: String tab, String tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Depósito por 100.', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Entrada por transferencia de 50.', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = 150', String newLineString ;
		nextPutAll: String tab, String tab,'Otra cuenta', String newLineString;
		nextPutAll: String tab, String tab,String tab,'Salida por transferencia de 50.', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = -50', String newLineString ;
		nextPutAll: String tab, String tab,'Balance = 100', String newLineString ;
		nextPutAll: String tab, 'Balance = 100'.
  	].
	self assert: (TransactionsStructure for: aSecondPortfolio) equals: portfolioStructureString! !

!testRun: #ReportTest #test19 stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test01summaryEmptyAccount stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test02summaryAccountWithDeposit stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test03summaryTwoDeposits stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test04summaryDepositAndWithdraw stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test05summaryTransferWithdraw stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test06summaryTransferDeposit stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test07summaryPortfolioEmpty stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test08summaryPortfolioFull stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test09netTransferAccountEmpty stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test10netTransferAccountWithTransferDeposit stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test11netTransferAccountWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test12netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test13netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test14netTransferPortfolioTransferBetweenChildren stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test15portfolioStructureOneAccount stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test16portfolioStructureTwoAccounts stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test17portfolioStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test19 stamp: 'ijgt 6/3/2021 16:27:11'!
PASSED!

!testRun: #ReportTest #test18 stamp: 'ijgt 6/3/2021 16:27:14'!
PASSED!
!ReportTest methodsFor: 'tests transactionsStructure' stamp: 'ijgt 6/3/2021 16:27:58'!
test18transactionsStructureEmptyPortfolio

	| anAccount aPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Un portfolio', String newLineString;
  		nextPutAll: String tab,'Una cuenta', String newLineString;
		nextPutAll: String tab, String tab, 'Balance = 0', String newLineString;
		nextPutAll: String tab, 'Balance = 0'.
  	].
	self assert: (TransactionsStructure for: aPortfolio) equals: portfolioStructureString! !

!methodRemoval: ReportTest #test18 stamp: 'ijgt 6/3/2021 16:27:58'!
test18

	| anAccount aPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Un portfolio', String newLineString;
  		nextPutAll: String tab,'Una cuenta', String newLineString;
		nextPutAll: String tab, String tab, 'Balance = 0', String newLineString;
		nextPutAll: String tab, 'Balance = 0'.
  	].
	self assert: (TransactionsStructure for: aPortfolio) equals: portfolioStructureString!
!ReportTest methodsFor: 'tests transactionsStructure' stamp: 'ijgt 6/3/2021 16:28:20'!
test19transactionsStructureStackedPortfolio

	| anAccount anotherAccount aPortfolio aSecondPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	Deposit register: 100 on: anAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	aPortfolio add: anotherAccount.
	aSecondPortfolio := Portfolio named: 'Gran portfolio' with: aPortfolio.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Gran portfolio', String newLineString;
		nextPutAll: String tab, 'Un portfolio', String newLineString;
  		nextPutAll: String tab, String tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Depósito por 100.', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Entrada por transferencia de 50.', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = 150', String newLineString ;
		nextPutAll: String tab, String tab,'Otra cuenta', String newLineString;
		nextPutAll: String tab, String tab,String tab,'Salida por transferencia de 50.', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = -50', String newLineString ;
		nextPutAll: String tab, String tab,'Balance = 100', String newLineString ;
		nextPutAll: String tab, 'Balance = 100'.
  	].
	self assert: (TransactionsStructure for: aSecondPortfolio) equals: portfolioStructureString! !

!methodRemoval: ReportTest #test19 stamp: 'ijgt 6/3/2021 16:28:20'!
test19

	| anAccount anotherAccount aPortfolio aSecondPortfolio portfolioStructureString |
	anAccount := ReceptiveAccount named: 'Una cuenta'.
	anotherAccount := ReceptiveAccount named: 'Otra cuenta'.
	aPortfolio := Portfolio named: 'Un portfolio' with: anAccount.
	Deposit register: 100 on: anAccount.
	Transfer from: anotherAccount to: anAccount withValue: 50.
	aPortfolio add: anotherAccount.
	aSecondPortfolio := Portfolio named: 'Gran portfolio' with: aPortfolio.
	portfolioStructureString := String streamContents: [:str | str            
  		nextPutAll: 'Gran portfolio', String newLineString;
		nextPutAll: String tab, 'Un portfolio', String newLineString;
  		nextPutAll: String tab, String tab,'Una cuenta', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Depósito por 100.', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Entrada por transferencia de 50.', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = 150', String newLineString ;
		nextPutAll: String tab, String tab,'Otra cuenta', String newLineString;
		nextPutAll: String tab, String tab,String tab,'Salida por transferencia de 50.', String newLineString ;
		nextPutAll: String tab, String tab,String tab,'Balance = -50', String newLineString ;
		nextPutAll: String tab, String tab,'Balance = 100', String newLineString ;
		nextPutAll: String tab, 'Balance = 100'.
  	].
	self assert: (TransactionsStructure for: aSecondPortfolio) equals: portfolioStructureString!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'ijgt 6/3/2021 16:28:28'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'ijgt 6/3/2021 16:28:28'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'ijgt 6/3/2021 16:28:28'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'ijgt 6/3/2021 16:28:28'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'ijgt 6/3/2021 16:28:28'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'ijgt 6/3/2021 16:28:28'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'ijgt 6/3/2021 16:28:28'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'ijgt 6/3/2021 16:28:28'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'ijgt 6/3/2021 16:28:28'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'ijgt 6/3/2021 16:28:28'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'ijgt 6/3/2021 16:28:28'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'ijgt 6/3/2021 16:28:28'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'ijgt 6/3/2021 16:28:28'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'ijgt 6/3/2021 16:28:28'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'ijgt 6/3/2021 16:28:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 6/3/2021 16:28:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 6/3/2021 16:28:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 6/3/2021 16:28:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 6/3/2021 16:28:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 6/3/2021 16:28:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 6/3/2021 16:28:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 6/3/2021 16:28:30'!
PASSED!

!testRun: #ReportTest #test01summaryEmptyAccount stamp: 'ijgt 6/3/2021 16:28:33'!
PASSED!

!testRun: #ReportTest #test02summaryAccountWithDeposit stamp: 'ijgt 6/3/2021 16:28:33'!
PASSED!

!testRun: #ReportTest #test03summaryTwoDeposits stamp: 'ijgt 6/3/2021 16:28:33'!
PASSED!

!testRun: #ReportTest #test04summaryDepositAndWithdraw stamp: 'ijgt 6/3/2021 16:28:33'!
PASSED!

!testRun: #ReportTest #test05summaryTransferWithdraw stamp: 'ijgt 6/3/2021 16:28:33'!
PASSED!

!testRun: #ReportTest #test06summaryTransferDeposit stamp: 'ijgt 6/3/2021 16:28:33'!
PASSED!

!testRun: #ReportTest #test07summaryPortfolioEmpty stamp: 'ijgt 6/3/2021 16:28:33'!
PASSED!

!testRun: #ReportTest #test08summaryPortfolioFull stamp: 'ijgt 6/3/2021 16:28:33'!
PASSED!

!testRun: #ReportTest #test09netTransferAccountEmpty stamp: 'ijgt 6/3/2021 16:28:33'!
PASSED!

!testRun: #ReportTest #test10netTransferAccountWithTransferDeposit stamp: 'ijgt 6/3/2021 16:28:33'!
PASSED!

!testRun: #ReportTest #test11netTransferAccountWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:28:33'!
PASSED!

!testRun: #ReportTest #test12netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:28:33'!
PASSED!

!testRun: #ReportTest #test13netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:28:33'!
PASSED!

!testRun: #ReportTest #test14netTransferPortfolioTransferBetweenChildren stamp: 'ijgt 6/3/2021 16:28:33'!
PASSED!

!testRun: #ReportTest #test15portfolioStructureOneAccount stamp: 'ijgt 6/3/2021 16:28:33'!
PASSED!

!testRun: #ReportTest #test16portfolioStructureTwoAccounts stamp: 'ijgt 6/3/2021 16:28:33'!
PASSED!

!testRun: #ReportTest #test17portfolioStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:28:33'!
PASSED!

!testRun: #ReportTest #test18transactionsStructureEmptyPortfolio stamp: 'ijgt 6/3/2021 16:28:33'!
PASSED!

!testRun: #ReportTest #test19transactionsStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:28:33'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'ijgt 6/3/2021 16:28:35'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'ijgt 6/3/2021 16:28:35'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'ijgt 6/3/2021 16:28:35'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'ijgt 6/3/2021 16:28:35'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'ijgt 6/3/2021 16:28:35'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'ijgt 6/3/2021 16:28:35'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'ijgt 6/3/2021 16:28:35'!
PASSED!

!testRun: #ReportTest #test01summaryEmptyAccount stamp: 'ijgt 6/3/2021 16:28:37'!
PASSED!

!testRun: #ReportTest #test02summaryAccountWithDeposit stamp: 'ijgt 6/3/2021 16:28:37'!
PASSED!

!testRun: #ReportTest #test03summaryTwoDeposits stamp: 'ijgt 6/3/2021 16:28:37'!
PASSED!

!testRun: #ReportTest #test04summaryDepositAndWithdraw stamp: 'ijgt 6/3/2021 16:28:37'!
PASSED!

!testRun: #ReportTest #test05summaryTransferWithdraw stamp: 'ijgt 6/3/2021 16:28:37'!
PASSED!

!testRun: #ReportTest #test06summaryTransferDeposit stamp: 'ijgt 6/3/2021 16:28:37'!
PASSED!

!testRun: #ReportTest #test07summaryPortfolioEmpty stamp: 'ijgt 6/3/2021 16:28:37'!
PASSED!

!testRun: #ReportTest #test08summaryPortfolioFull stamp: 'ijgt 6/3/2021 16:28:37'!
PASSED!

!testRun: #ReportTest #test09netTransferAccountEmpty stamp: 'ijgt 6/3/2021 16:28:37'!
PASSED!

!testRun: #ReportTest #test10netTransferAccountWithTransferDeposit stamp: 'ijgt 6/3/2021 16:28:37'!
PASSED!

!testRun: #ReportTest #test11netTransferAccountWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:28:37'!
PASSED!

!testRun: #ReportTest #test12netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:28:37'!
PASSED!

!testRun: #ReportTest #test13netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:28:37'!
PASSED!

!testRun: #ReportTest #test14netTransferPortfolioTransferBetweenChildren stamp: 'ijgt 6/3/2021 16:28:37'!
PASSED!

!testRun: #ReportTest #test15portfolioStructureOneAccount stamp: 'ijgt 6/3/2021 16:28:37'!
PASSED!

!testRun: #ReportTest #test16portfolioStructureTwoAccounts stamp: 'ijgt 6/3/2021 16:28:37'!
PASSED!

!testRun: #ReportTest #test17portfolioStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:28:37'!
PASSED!

!testRun: #ReportTest #test18transactionsStructureEmptyPortfolio stamp: 'ijgt 6/3/2021 16:28:37'!
PASSED!

!testRun: #ReportTest #test19transactionsStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:28:37'!
PASSED!

Report subclass: #Structure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #Structure category: 'Portfolio-18' stamp: 'ijgt 6/3/2021 16:29:50'!
Report subclass: #Structure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

Structure subclass: #PortfolioStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #PortfolioStructure category: 'Portfolio-18' stamp: 'ijgt 6/3/2021 16:30:00'!
Structure subclass: #PortfolioStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classRenamed: #Structure as: #StructureReport stamp: 'ijgt 6/3/2021 16:30:26'!
Smalltalk renameClassNamed: #Structure as: #StructureReport!

StructureReport subclass: #TransactionsStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!

!classDefinition: #TransactionsStructure category: 'Portfolio-18' stamp: 'ijgt 6/3/2021 16:30:33'!
StructureReport subclass: #TransactionsStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-18'!
!StructureReport methodsFor: 'no messages' stamp: 'ijgt 6/3/2021 16:30:53' overrides: 50874869!
report

	^ account portfolioStructureReport: self! !

!methodRemoval: PortfolioStructure #report stamp: 'ijgt 6/3/2021 16:31:08'!
report

	^ account portfolioStructureReport: self!

!methodRemoval: TransactionsStructure #report stamp: 'ijgt 6/3/2021 16:31:15'!
report

	^ account transactionsStructureReport: self!

!testRun: #ReportTest #test01summaryEmptyAccount stamp: 'ijgt 6/3/2021 16:31:18'!
PASSED!

!testRun: #ReportTest #test02summaryAccountWithDeposit stamp: 'ijgt 6/3/2021 16:31:18'!
PASSED!

!testRun: #ReportTest #test03summaryTwoDeposits stamp: 'ijgt 6/3/2021 16:31:18'!
PASSED!

!testRun: #ReportTest #test04summaryDepositAndWithdraw stamp: 'ijgt 6/3/2021 16:31:18'!
PASSED!

!testRun: #ReportTest #test05summaryTransferWithdraw stamp: 'ijgt 6/3/2021 16:31:18'!
PASSED!

!testRun: #ReportTest #test06summaryTransferDeposit stamp: 'ijgt 6/3/2021 16:31:18'!
PASSED!

!testRun: #ReportTest #test07summaryPortfolioEmpty stamp: 'ijgt 6/3/2021 16:31:18'!
PASSED!

!testRun: #ReportTest #test08summaryPortfolioFull stamp: 'ijgt 6/3/2021 16:31:18'!
PASSED!

!testRun: #ReportTest #test09netTransferAccountEmpty stamp: 'ijgt 6/3/2021 16:31:18'!
PASSED!

!testRun: #ReportTest #test10netTransferAccountWithTransferDeposit stamp: 'ijgt 6/3/2021 16:31:18'!
PASSED!

!testRun: #ReportTest #test11netTransferAccountWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:31:18'!
PASSED!

!testRun: #ReportTest #test12netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:31:18'!
PASSED!

!testRun: #ReportTest #test13netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:31:18'!
PASSED!

!testRun: #ReportTest #test14netTransferPortfolioTransferBetweenChildren stamp: 'ijgt 6/3/2021 16:31:18'!
PASSED!

!testRun: #ReportTest #test15portfolioStructureOneAccount stamp: 'ijgt 6/3/2021 16:31:18'!
PASSED!

!testRun: #ReportTest #test16portfolioStructureTwoAccounts stamp: 'ijgt 6/3/2021 16:31:18'!
PASSED!

!testRun: #ReportTest #test17portfolioStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:31:18'!
PASSED!

!testRun: #ReportTest #test18transactionsStructureEmptyPortfolio stamp: 'ijgt 6/3/2021 16:31:18'!
PASSED!

!testRun: #ReportTest #test19transactionsStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:31:18'!
PASSED!
!PortfolioStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 16:33:37'!
m1: aPortfolio m2: portfolioAccounts

	^ String streamContents: [:str | str
		nextPutAll: aPortfolio name, String newLineString.
  		portfolioAccounts do:[:anAccount |
   			(anAccount portfolioStructureReport: self) linesDo: [:aLine | str nextPutAll: String tab, aLine, String newLineString.]
   		].
  	]! !
!PortfolioStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 16:33:37' prior: 50876627!
reportPortfolio: aPortfolio withAccounts: portfolioAccounts

 	|portfolioStructureString|
 	portfolioStructureString := self m1: aPortfolio m2: portfolioAccounts.
 	^portfolioStructureString allButLast .! !
!StructureReport methodsFor: 'report' stamp: 'ijgt 6/3/2021 16:34:06'!
m1: aPortfolio m2: portfolioAccounts

	^ String streamContents: [:str | str
		nextPutAll: aPortfolio name, String newLineString.
  		portfolioAccounts do:[:anAccount |
   			(anAccount portfolioStructureReport: self) linesDo: [:aLine | str nextPutAll: String tab, aLine, String newLineString.]
   		].
  	]! !
!TransactionsStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 16:34:30' prior: 50878369!
reportPortfolio: aPortfolio withAccounts: portfolioAccounts

	|portfolioStructureString|
 	portfolioStructureString := self m1: aPortfolio m2: portfolioAccounts.
	portfolioStructureString allButLast.
	portfolioStructureString := portfolioStructureString, String tab, 'Balance = ', aPortfolio balance asString.
 	^portfolioStructureString! !

!testRun: #ReportTest #test01summaryEmptyAccount stamp: 'ijgt 6/3/2021 16:34:32'!
PASSED!

!testRun: #ReportTest #test02summaryAccountWithDeposit stamp: 'ijgt 6/3/2021 16:34:32'!
PASSED!

!testRun: #ReportTest #test03summaryTwoDeposits stamp: 'ijgt 6/3/2021 16:34:32'!
PASSED!

!testRun: #ReportTest #test04summaryDepositAndWithdraw stamp: 'ijgt 6/3/2021 16:34:32'!
PASSED!

!testRun: #ReportTest #test05summaryTransferWithdraw stamp: 'ijgt 6/3/2021 16:34:32'!
PASSED!

!testRun: #ReportTest #test06summaryTransferDeposit stamp: 'ijgt 6/3/2021 16:34:32'!
PASSED!

!testRun: #ReportTest #test07summaryPortfolioEmpty stamp: 'ijgt 6/3/2021 16:34:32'!
PASSED!

!testRun: #ReportTest #test08summaryPortfolioFull stamp: 'ijgt 6/3/2021 16:34:32'!
PASSED!

!testRun: #ReportTest #test09netTransferAccountEmpty stamp: 'ijgt 6/3/2021 16:34:32'!
PASSED!

!testRun: #ReportTest #test10netTransferAccountWithTransferDeposit stamp: 'ijgt 6/3/2021 16:34:32'!
PASSED!

!testRun: #ReportTest #test11netTransferAccountWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:34:32'!
PASSED!

!testRun: #ReportTest #test12netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:34:32'!
PASSED!

!testRun: #ReportTest #test13netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:34:32'!
PASSED!

!testRun: #ReportTest #test14netTransferPortfolioTransferBetweenChildren stamp: 'ijgt 6/3/2021 16:34:32'!
PASSED!

!testRun: #ReportTest #test15portfolioStructureOneAccount stamp: 'ijgt 6/3/2021 16:34:32'!
PASSED!

!testRun: #ReportTest #test16portfolioStructureTwoAccounts stamp: 'ijgt 6/3/2021 16:34:32'!
PASSED!

!testRun: #ReportTest #test17portfolioStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:34:32'!
PASSED!

!testRun: #ReportTest #test18transactionsStructureEmptyPortfolio stamp: 'ijgt 6/3/2021 16:34:32'!
PASSED!

!testRun: #ReportTest #test19transactionsStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:34:32'!
PASSED!

!methodRemoval: PortfolioStructure #m1:m2: stamp: 'ijgt 6/3/2021 16:34:47'!
m1: aPortfolio m2: portfolioAccounts

	^ String streamContents: [:str | str
		nextPutAll: aPortfolio name, String newLineString.
  		portfolioAccounts do:[:anAccount |
   			(anAccount portfolioStructureReport: self) linesDo: [:aLine | str nextPutAll: String tab, aLine, String newLineString.]
   		].
  	]!

!testRun: #ReportTest #test01summaryEmptyAccount stamp: 'ijgt 6/3/2021 16:34:50'!
PASSED!

!testRun: #ReportTest #test02summaryAccountWithDeposit stamp: 'ijgt 6/3/2021 16:34:50'!
PASSED!

!testRun: #ReportTest #test03summaryTwoDeposits stamp: 'ijgt 6/3/2021 16:34:50'!
PASSED!

!testRun: #ReportTest #test04summaryDepositAndWithdraw stamp: 'ijgt 6/3/2021 16:34:50'!
PASSED!

!testRun: #ReportTest #test05summaryTransferWithdraw stamp: 'ijgt 6/3/2021 16:34:50'!
PASSED!

!testRun: #ReportTest #test06summaryTransferDeposit stamp: 'ijgt 6/3/2021 16:34:50'!
PASSED!

!testRun: #ReportTest #test07summaryPortfolioEmpty stamp: 'ijgt 6/3/2021 16:34:50'!
PASSED!

!testRun: #ReportTest #test08summaryPortfolioFull stamp: 'ijgt 6/3/2021 16:34:50'!
PASSED!

!testRun: #ReportTest #test09netTransferAccountEmpty stamp: 'ijgt 6/3/2021 16:34:50'!
PASSED!

!testRun: #ReportTest #test10netTransferAccountWithTransferDeposit stamp: 'ijgt 6/3/2021 16:34:50'!
PASSED!

!testRun: #ReportTest #test11netTransferAccountWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:34:50'!
PASSED!

!testRun: #ReportTest #test12netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:34:50'!
PASSED!

!testRun: #ReportTest #test13netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:34:50'!
PASSED!

!testRun: #ReportTest #test14netTransferPortfolioTransferBetweenChildren stamp: 'ijgt 6/3/2021 16:34:50'!
PASSED!

!testRun: #ReportTest #test15portfolioStructureOneAccount stamp: 'ijgt 6/3/2021 16:34:50'!
PASSED!

!testRun: #ReportTest #test16portfolioStructureTwoAccounts stamp: 'ijgt 6/3/2021 16:34:50'!
PASSED!

!testRun: #ReportTest #test17portfolioStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:34:50'!
PASSED!

!testRun: #ReportTest #test18transactionsStructureEmptyPortfolio stamp: 'ijgt 6/3/2021 16:34:50'!
PASSED!

!testRun: #ReportTest #test19transactionsStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:34:50'!
PASSED!
!StructureReport methodsFor: 'report' stamp: 'ijgt 6/3/2021 16:37:05'!
portfolioStructureAsString: aPortfolio withAccounts: portfolioAccounts

	^ String streamContents: [:str | str
		nextPutAll: aPortfolio name, String newLineString.
  		portfolioAccounts do:[:anAccount |
   			(anAccount portfolioStructureReport: self) linesDo: [:aLine | str nextPutAll: String tab, aLine, String newLineString.]
   		].
  	]! !

!methodRemoval: StructureReport #m1:m2: stamp: 'ijgt 6/3/2021 16:37:05'!
m1: aPortfolio m2: portfolioAccounts

	^ String streamContents: [:str | str
		nextPutAll: aPortfolio name, String newLineString.
  		portfolioAccounts do:[:anAccount |
   			(anAccount portfolioStructureReport: self) linesDo: [:aLine | str nextPutAll: String tab, aLine, String newLineString.]
   		].
  	]!

!testRun: #ReportTest #test01summaryEmptyAccount stamp: 'ijgt 6/3/2021 16:37:10'!
PASSED!

!testRun: #ReportTest #test02summaryAccountWithDeposit stamp: 'ijgt 6/3/2021 16:37:10'!
PASSED!

!testRun: #ReportTest #test03summaryTwoDeposits stamp: 'ijgt 6/3/2021 16:37:10'!
PASSED!

!testRun: #ReportTest #test04summaryDepositAndWithdraw stamp: 'ijgt 6/3/2021 16:37:10'!
PASSED!

!testRun: #ReportTest #test05summaryTransferWithdraw stamp: 'ijgt 6/3/2021 16:37:10'!
PASSED!

!testRun: #ReportTest #test06summaryTransferDeposit stamp: 'ijgt 6/3/2021 16:37:10'!
PASSED!

!testRun: #ReportTest #test07summaryPortfolioEmpty stamp: 'ijgt 6/3/2021 16:37:10'!
PASSED!

!testRun: #ReportTest #test08summaryPortfolioFull stamp: 'ijgt 6/3/2021 16:37:10'!
PASSED!

!testRun: #ReportTest #test09netTransferAccountEmpty stamp: 'ijgt 6/3/2021 16:37:10'!
PASSED!

!testRun: #ReportTest #test10netTransferAccountWithTransferDeposit stamp: 'ijgt 6/3/2021 16:37:10'!
PASSED!

!testRun: #ReportTest #test11netTransferAccountWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:37:10'!
PASSED!

!testRun: #ReportTest #test12netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:37:10'!
PASSED!

!testRun: #ReportTest #test13netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:37:10'!
PASSED!

!testRun: #ReportTest #test14netTransferPortfolioTransferBetweenChildren stamp: 'ijgt 6/3/2021 16:37:10'!
PASSED!

!testRun: #ReportTest #test15portfolioStructureOneAccount stamp: 'ijgt 6/3/2021 16:37:10'!
ERROR!

!testRun: #ReportTest #test16portfolioStructureTwoAccounts stamp: 'ijgt 6/3/2021 16:37:10'!
ERROR!

!testRun: #ReportTest #test17portfolioStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:37:10'!
ERROR!

!testRun: #ReportTest #test18transactionsStructureEmptyPortfolio stamp: 'ijgt 6/3/2021 16:37:10'!
ERROR!

!testRun: #ReportTest #test19transactionsStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:37:10'!
ERROR!

!testRun: #ReportTest #test01summaryEmptyAccount stamp: 'ijgt 6/3/2021 16:37:29'!
PASSED!

!testRun: #ReportTest #test02summaryAccountWithDeposit stamp: 'ijgt 6/3/2021 16:37:29'!
PASSED!

!testRun: #ReportTest #test03summaryTwoDeposits stamp: 'ijgt 6/3/2021 16:37:29'!
PASSED!

!testRun: #ReportTest #test04summaryDepositAndWithdraw stamp: 'ijgt 6/3/2021 16:37:29'!
PASSED!

!testRun: #ReportTest #test05summaryTransferWithdraw stamp: 'ijgt 6/3/2021 16:37:29'!
PASSED!

!testRun: #ReportTest #test06summaryTransferDeposit stamp: 'ijgt 6/3/2021 16:37:29'!
PASSED!

!testRun: #ReportTest #test07summaryPortfolioEmpty stamp: 'ijgt 6/3/2021 16:37:29'!
PASSED!

!testRun: #ReportTest #test08summaryPortfolioFull stamp: 'ijgt 6/3/2021 16:37:29'!
PASSED!

!testRun: #ReportTest #test09netTransferAccountEmpty stamp: 'ijgt 6/3/2021 16:37:29'!
PASSED!

!testRun: #ReportTest #test10netTransferAccountWithTransferDeposit stamp: 'ijgt 6/3/2021 16:37:29'!
PASSED!

!testRun: #ReportTest #test11netTransferAccountWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:37:29'!
PASSED!

!testRun: #ReportTest #test12netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:37:29'!
PASSED!

!testRun: #ReportTest #test13netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:37:29'!
PASSED!

!testRun: #ReportTest #test14netTransferPortfolioTransferBetweenChildren stamp: 'ijgt 6/3/2021 16:37:29'!
PASSED!

!testRun: #ReportTest #test15portfolioStructureOneAccount stamp: 'ijgt 6/3/2021 16:37:29'!
ERROR!

!testRun: #ReportTest #test16portfolioStructureTwoAccounts stamp: 'ijgt 6/3/2021 16:37:29'!
ERROR!

!testRun: #ReportTest #test17portfolioStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:37:29'!
ERROR!

!testRun: #ReportTest #test18transactionsStructureEmptyPortfolio stamp: 'ijgt 6/3/2021 16:37:29'!
ERROR!

!testRun: #ReportTest #test19transactionsStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:37:29'!
ERROR!
!PortfolioStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 16:38:18' prior: 50879494!
reportPortfolio: aPortfolio withAccounts: portfolioAccounts

 	|portfolioStructureString|
 	portfolioStructureString := self portfolioStructureAsString: aPortfolio withAccounts: portfolioAccounts.
 	^portfolioStructureString allButLast .! !
!TransactionsStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 16:38:46' prior: 50879516!
reportPortfolio: aPortfolio withAccounts: portfolioAccounts

	|portfolioStructureString|
 	portfolioStructureString := self portfolioStructureAsString: aPortfolio withAccounts: portfolioAccounts.
	portfolioStructureString allButLast.
	portfolioStructureString := portfolioStructureString, String tab, 'Balance = ', aPortfolio balance asString.
 	^portfolioStructureString! !

!testRun: #ReportTest #test01summaryEmptyAccount stamp: 'ijgt 6/3/2021 16:38:48'!
PASSED!

!testRun: #ReportTest #test02summaryAccountWithDeposit stamp: 'ijgt 6/3/2021 16:38:48'!
PASSED!

!testRun: #ReportTest #test03summaryTwoDeposits stamp: 'ijgt 6/3/2021 16:38:48'!
PASSED!

!testRun: #ReportTest #test04summaryDepositAndWithdraw stamp: 'ijgt 6/3/2021 16:38:48'!
PASSED!

!testRun: #ReportTest #test05summaryTransferWithdraw stamp: 'ijgt 6/3/2021 16:38:48'!
PASSED!

!testRun: #ReportTest #test06summaryTransferDeposit stamp: 'ijgt 6/3/2021 16:38:48'!
PASSED!

!testRun: #ReportTest #test07summaryPortfolioEmpty stamp: 'ijgt 6/3/2021 16:38:48'!
PASSED!

!testRun: #ReportTest #test08summaryPortfolioFull stamp: 'ijgt 6/3/2021 16:38:48'!
PASSED!

!testRun: #ReportTest #test09netTransferAccountEmpty stamp: 'ijgt 6/3/2021 16:38:48'!
PASSED!

!testRun: #ReportTest #test10netTransferAccountWithTransferDeposit stamp: 'ijgt 6/3/2021 16:38:48'!
PASSED!

!testRun: #ReportTest #test11netTransferAccountWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:38:48'!
PASSED!

!testRun: #ReportTest #test12netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:38:48'!
PASSED!

!testRun: #ReportTest #test13netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:38:48'!
PASSED!

!testRun: #ReportTest #test14netTransferPortfolioTransferBetweenChildren stamp: 'ijgt 6/3/2021 16:38:48'!
PASSED!

!testRun: #ReportTest #test15portfolioStructureOneAccount stamp: 'ijgt 6/3/2021 16:38:48'!
PASSED!

!testRun: #ReportTest #test16portfolioStructureTwoAccounts stamp: 'ijgt 6/3/2021 16:38:48'!
PASSED!

!testRun: #ReportTest #test17portfolioStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:38:48'!
PASSED!

!testRun: #ReportTest #test18transactionsStructureEmptyPortfolio stamp: 'ijgt 6/3/2021 16:38:48'!
PASSED!

!testRun: #ReportTest #test19transactionsStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:38:48'!
PASSED!
!TransactionsStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 16:39:45' prior: 50879819!
reportPortfolio: aPortfolio withAccounts: portfolioAccounts

	|portfolioStructureString|
 	portfolioStructureString := (self portfolioStructureAsString: aPortfolio withAccounts: portfolioAccounts) allButLast.
	portfolioStructureString := portfolioStructureString, String tab, 'Balance = ', aPortfolio balance asString.
 	^portfolioStructureString! !

!testRun: #ReportTest #test01summaryEmptyAccount stamp: 'ijgt 6/3/2021 16:39:46'!
PASSED!

!testRun: #ReportTest #test02summaryAccountWithDeposit stamp: 'ijgt 6/3/2021 16:39:46'!
PASSED!

!testRun: #ReportTest #test03summaryTwoDeposits stamp: 'ijgt 6/3/2021 16:39:46'!
PASSED!

!testRun: #ReportTest #test04summaryDepositAndWithdraw stamp: 'ijgt 6/3/2021 16:39:46'!
PASSED!

!testRun: #ReportTest #test05summaryTransferWithdraw stamp: 'ijgt 6/3/2021 16:39:46'!
PASSED!

!testRun: #ReportTest #test06summaryTransferDeposit stamp: 'ijgt 6/3/2021 16:39:46'!
PASSED!

!testRun: #ReportTest #test07summaryPortfolioEmpty stamp: 'ijgt 6/3/2021 16:39:46'!
PASSED!

!testRun: #ReportTest #test08summaryPortfolioFull stamp: 'ijgt 6/3/2021 16:39:46'!
PASSED!

!testRun: #ReportTest #test09netTransferAccountEmpty stamp: 'ijgt 6/3/2021 16:39:46'!
PASSED!

!testRun: #ReportTest #test10netTransferAccountWithTransferDeposit stamp: 'ijgt 6/3/2021 16:39:46'!
PASSED!

!testRun: #ReportTest #test11netTransferAccountWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:39:46'!
PASSED!

!testRun: #ReportTest #test12netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:39:46'!
PASSED!

!testRun: #ReportTest #test13netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:39:46'!
PASSED!

!testRun: #ReportTest #test14netTransferPortfolioTransferBetweenChildren stamp: 'ijgt 6/3/2021 16:39:46'!
PASSED!

!testRun: #ReportTest #test15portfolioStructureOneAccount stamp: 'ijgt 6/3/2021 16:39:46'!
PASSED!

!testRun: #ReportTest #test16portfolioStructureTwoAccounts stamp: 'ijgt 6/3/2021 16:39:46'!
PASSED!

!testRun: #ReportTest #test17portfolioStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:39:46'!
PASSED!

!testRun: #ReportTest #test18transactionsStructureEmptyPortfolio stamp: 'ijgt 6/3/2021 16:39:46'!
FAILURE!

!testRun: #ReportTest #test19transactionsStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:39:46'!
FAILURE!

!testRun: #ReportTest #test01summaryEmptyAccount stamp: 'ijgt 6/3/2021 16:39:53'!
PASSED!

!testRun: #ReportTest #test02summaryAccountWithDeposit stamp: 'ijgt 6/3/2021 16:39:53'!
PASSED!

!testRun: #ReportTest #test03summaryTwoDeposits stamp: 'ijgt 6/3/2021 16:39:53'!
PASSED!

!testRun: #ReportTest #test04summaryDepositAndWithdraw stamp: 'ijgt 6/3/2021 16:39:53'!
PASSED!

!testRun: #ReportTest #test05summaryTransferWithdraw stamp: 'ijgt 6/3/2021 16:39:53'!
PASSED!

!testRun: #ReportTest #test06summaryTransferDeposit stamp: 'ijgt 6/3/2021 16:39:53'!
PASSED!

!testRun: #ReportTest #test07summaryPortfolioEmpty stamp: 'ijgt 6/3/2021 16:39:53'!
PASSED!

!testRun: #ReportTest #test08summaryPortfolioFull stamp: 'ijgt 6/3/2021 16:39:53'!
PASSED!

!testRun: #ReportTest #test09netTransferAccountEmpty stamp: 'ijgt 6/3/2021 16:39:53'!
PASSED!

!testRun: #ReportTest #test10netTransferAccountWithTransferDeposit stamp: 'ijgt 6/3/2021 16:39:53'!
PASSED!

!testRun: #ReportTest #test11netTransferAccountWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:39:53'!
PASSED!

!testRun: #ReportTest #test12netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:39:53'!
PASSED!

!testRun: #ReportTest #test13netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:39:53'!
PASSED!

!testRun: #ReportTest #test14netTransferPortfolioTransferBetweenChildren stamp: 'ijgt 6/3/2021 16:39:53'!
PASSED!

!testRun: #ReportTest #test15portfolioStructureOneAccount stamp: 'ijgt 6/3/2021 16:39:53'!
PASSED!

!testRun: #ReportTest #test16portfolioStructureTwoAccounts stamp: 'ijgt 6/3/2021 16:39:53'!
PASSED!

!testRun: #ReportTest #test17portfolioStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:39:53'!
PASSED!

!testRun: #ReportTest #test18transactionsStructureEmptyPortfolio stamp: 'ijgt 6/3/2021 16:39:53'!
FAILURE!

!testRun: #ReportTest #test19transactionsStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:39:53'!
FAILURE!
!TransactionsStructure methodsFor: 'report' stamp: 'ijgt 6/3/2021 16:38:46' prior: 50879894!
reportPortfolio: aPortfolio withAccounts: portfolioAccounts

	|portfolioStructureString|
 	portfolioStructureString := self portfolioStructureAsString: aPortfolio withAccounts: portfolioAccounts.
	portfolioStructureString allButLast.
	portfolioStructureString := portfolioStructureString, String tab, 'Balance = ', aPortfolio balance asString.
 	^portfolioStructureString! !

!testRun: #ReportTest #test01summaryEmptyAccount stamp: 'ijgt 6/3/2021 16:40:44'!
PASSED!

!testRun: #ReportTest #test02summaryAccountWithDeposit stamp: 'ijgt 6/3/2021 16:40:44'!
PASSED!

!testRun: #ReportTest #test03summaryTwoDeposits stamp: 'ijgt 6/3/2021 16:40:44'!
PASSED!

!testRun: #ReportTest #test04summaryDepositAndWithdraw stamp: 'ijgt 6/3/2021 16:40:44'!
PASSED!

!testRun: #ReportTest #test05summaryTransferWithdraw stamp: 'ijgt 6/3/2021 16:40:44'!
PASSED!

!testRun: #ReportTest #test06summaryTransferDeposit stamp: 'ijgt 6/3/2021 16:40:44'!
PASSED!

!testRun: #ReportTest #test07summaryPortfolioEmpty stamp: 'ijgt 6/3/2021 16:40:44'!
PASSED!

!testRun: #ReportTest #test08summaryPortfolioFull stamp: 'ijgt 6/3/2021 16:40:44'!
PASSED!

!testRun: #ReportTest #test09netTransferAccountEmpty stamp: 'ijgt 6/3/2021 16:40:44'!
PASSED!

!testRun: #ReportTest #test10netTransferAccountWithTransferDeposit stamp: 'ijgt 6/3/2021 16:40:44'!
PASSED!

!testRun: #ReportTest #test11netTransferAccountWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:40:44'!
PASSED!

!testRun: #ReportTest #test12netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:40:44'!
PASSED!

!testRun: #ReportTest #test13netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:40:44'!
PASSED!

!testRun: #ReportTest #test14netTransferPortfolioTransferBetweenChildren stamp: 'ijgt 6/3/2021 16:40:44'!
PASSED!

!testRun: #ReportTest #test15portfolioStructureOneAccount stamp: 'ijgt 6/3/2021 16:40:44'!
PASSED!

!testRun: #ReportTest #test16portfolioStructureTwoAccounts stamp: 'ijgt 6/3/2021 16:40:44'!
PASSED!

!testRun: #ReportTest #test17portfolioStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:40:44'!
PASSED!

!testRun: #ReportTest #test18transactionsStructureEmptyPortfolio stamp: 'ijgt 6/3/2021 16:40:44'!
PASSED!

!testRun: #ReportTest #test19transactionsStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:40:44'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'ijgt 6/3/2021 16:40:47'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'ijgt 6/3/2021 16:40:47'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'ijgt 6/3/2021 16:40:47'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'ijgt 6/3/2021 16:40:47'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'ijgt 6/3/2021 16:40:47'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'ijgt 6/3/2021 16:40:47'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'ijgt 6/3/2021 16:40:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 6/3/2021 16:40:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 6/3/2021 16:40:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 6/3/2021 16:40:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 6/3/2021 16:40:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 6/3/2021 16:40:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 6/3/2021 16:40:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 6/3/2021 16:40:52'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'ijgt 6/3/2021 16:40:53'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'ijgt 6/3/2021 16:40:53'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'ijgt 6/3/2021 16:40:53'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'ijgt 6/3/2021 16:40:53'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'ijgt 6/3/2021 16:40:53'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'ijgt 6/3/2021 16:40:53'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'ijgt 6/3/2021 16:40:53'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'ijgt 6/3/2021 16:40:53'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'ijgt 6/3/2021 16:40:53'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'ijgt 6/3/2021 16:40:53'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'ijgt 6/3/2021 16:40:53'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'ijgt 6/3/2021 16:40:53'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'ijgt 6/3/2021 16:40:53'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'ijgt 6/3/2021 16:40:53'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'ijgt 6/3/2021 16:40:53'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'ijgt 6/3/2021 16:40:55'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'ijgt 6/3/2021 16:40:55'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'ijgt 6/3/2021 16:40:55'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'ijgt 6/3/2021 16:40:55'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'ijgt 6/3/2021 16:40:55'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'ijgt 6/3/2021 16:40:55'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'ijgt 6/3/2021 16:40:55'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'ijgt 6/3/2021 16:40:55'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'ijgt 6/3/2021 16:40:55'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'ijgt 6/3/2021 16:40:55'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'ijgt 6/3/2021 16:40:55'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'ijgt 6/3/2021 16:40:55'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'ijgt 6/3/2021 16:40:55'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'ijgt 6/3/2021 16:40:55'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'ijgt 6/3/2021 16:40:55'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'ijgt 6/3/2021 16:42:58'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'ijgt 6/3/2021 16:42:58'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'ijgt 6/3/2021 16:42:58'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'ijgt 6/3/2021 16:42:58'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'ijgt 6/3/2021 16:42:58'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'ijgt 6/3/2021 16:42:58'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'ijgt 6/3/2021 16:42:58'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'ijgt 6/3/2021 16:42:58'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'ijgt 6/3/2021 16:42:58'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'ijgt 6/3/2021 16:42:58'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'ijgt 6/3/2021 16:42:58'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'ijgt 6/3/2021 16:42:58'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'ijgt 6/3/2021 16:42:58'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'ijgt 6/3/2021 16:42:58'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'ijgt 6/3/2021 16:42:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ijgt 6/3/2021 16:43:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ijgt 6/3/2021 16:43:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ijgt 6/3/2021 16:43:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ijgt 6/3/2021 16:43:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ijgt 6/3/2021 16:43:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ijgt 6/3/2021 16:43:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ijgt 6/3/2021 16:43:00'!
PASSED!

!testRun: #ReportTest #test01summaryEmptyAccount stamp: 'ijgt 6/3/2021 16:43:03'!
PASSED!

!testRun: #ReportTest #test02summaryAccountWithDeposit stamp: 'ijgt 6/3/2021 16:43:03'!
PASSED!

!testRun: #ReportTest #test03summaryTwoDeposits stamp: 'ijgt 6/3/2021 16:43:03'!
PASSED!

!testRun: #ReportTest #test04summaryDepositAndWithdraw stamp: 'ijgt 6/3/2021 16:43:03'!
PASSED!

!testRun: #ReportTest #test05summaryTransferWithdraw stamp: 'ijgt 6/3/2021 16:43:03'!
PASSED!

!testRun: #ReportTest #test06summaryTransferDeposit stamp: 'ijgt 6/3/2021 16:43:03'!
PASSED!

!testRun: #ReportTest #test07summaryPortfolioEmpty stamp: 'ijgt 6/3/2021 16:43:03'!
PASSED!

!testRun: #ReportTest #test08summaryPortfolioFull stamp: 'ijgt 6/3/2021 16:43:03'!
PASSED!

!testRun: #ReportTest #test09netTransferAccountEmpty stamp: 'ijgt 6/3/2021 16:43:03'!
PASSED!

!testRun: #ReportTest #test10netTransferAccountWithTransferDeposit stamp: 'ijgt 6/3/2021 16:43:03'!
PASSED!

!testRun: #ReportTest #test11netTransferAccountWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:43:03'!
PASSED!

!testRun: #ReportTest #test12netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:43:03'!
PASSED!

!testRun: #ReportTest #test13netTransferPortfolioWithTransferWithdraw stamp: 'ijgt 6/3/2021 16:43:03'!
PASSED!

!testRun: #ReportTest #test14netTransferPortfolioTransferBetweenChildren stamp: 'ijgt 6/3/2021 16:43:03'!
PASSED!

!testRun: #ReportTest #test15portfolioStructureOneAccount stamp: 'ijgt 6/3/2021 16:43:03'!
PASSED!

!testRun: #ReportTest #test16portfolioStructureTwoAccounts stamp: 'ijgt 6/3/2021 16:43:03'!
PASSED!

!testRun: #ReportTest #test17portfolioStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:43:03'!
PASSED!

!testRun: #ReportTest #test18transactionsStructureEmptyPortfolio stamp: 'ijgt 6/3/2021 16:43:03'!
PASSED!

!testRun: #ReportTest #test19transactionsStructureStackedPortfolio stamp: 'ijgt 6/3/2021 16:43:03'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'ijgt 6/3/2021 16:43:05'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'ijgt 6/3/2021 16:43:05'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'ijgt 6/3/2021 16:43:05'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'ijgt 6/3/2021 16:43:05'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'ijgt 6/3/2021 16:43:05'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'ijgt 6/3/2021 16:43:05'!
PASSED!

!testRun: #TransferTest #test07 stamp: 'ijgt 6/3/2021 16:43:05'!
PASSED!