----End fileIn of C:\Users\Lukee\Desktop\Facultad\Ingenier√≠a 1\Git Ejercicios\2021-1c\17-Portfolio 1\Portfolio 1-Solucion\Portfolio-Solucion.st----!

TestCase subclass: #TransferenceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferenceTest category: 'Portfolio-Solucion' stamp: 'lmalvarez 5/27/2021 20:48:59'!
TestCase subclass: #TransferenceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'lmalvarez 5/27/2021 20:55:10'!
Object subclass: #Transference
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferenceTest methodsFor: 'no messages' stamp: 'lmalvarez 5/27/2021 20:54:48'!
test01
	
	| transference accountA accountB |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	
	transference := Transference from: accountA to: accountB anAmountOf: 100.
	
	self assert: transference amount equals: 100.! !

!testRun: #TransferenceTest #test01 stamp: 'lmalvarez 5/27/2021 20:55:16'!
ERROR!

!testRun: #TransferenceTest #test01 stamp: 'lmalvarez 5/27/2021 20:55:16'!
ERROR!
!Transference class methodsFor: 'initialize' stamp: 'lmalvarez 5/27/2021 20:56:02'!
from: aReceptiveAccount to: aReceptiveAccount2 anAmountOf: aSmallInteger 
	self shouldBeImplemented.! !
!Transference class methodsFor: 'initialize' stamp: 'lmalvarez 5/27/2021 20:57:26' prior: 50893772!
from: aSenderAccount to: aReceptiveAccount anAmountOf: anAmount

	^ self new initializeFrom: aSenderAccount to: aReceptiveAccount anAmountOf: anAmount.
	! !
!Transference methodsFor: 'no messages' stamp: 'lmalvarez 5/27/2021 20:58:29'!
initializeFrom: aSenderAccount to: aReceptiveAccount anAmountOf: anAmount! !
!Transference methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/27/2021 20:59:14' overrides: 16881508!
value

	^ 100! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/27/2021 20:59:22' prior: 50893756!
test01
	
	| transference accountA accountB |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	
	transference := Transference from: accountA to: accountB anAmountOf: 100.
	
	self assert: transference value equals: 100.! !

!testRun: #TransferenceTest #test01 stamp: 'lmalvarez 5/27/2021 20:59:24'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/27/2021 21:00:24'!
test02
	
	| transference accountA accountB |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	
	transference := Transference from: accountA to: accountB anAmountOf: 500.
	
	self assert: transference value equals: 500.! !

!testRun: #TransferenceTest #test02 stamp: 'lmalvarez 5/27/2021 21:00:26'!
FAILURE!

Object subclass: #Transference
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'lmalvarez 5/27/2021 21:01:21'!
Object subclass: #Transference
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transference methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/27/2021 21:01:25' prior: 50893793 overrides: 16881508!
value

	^ value! !
!Transference methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/27/2021 21:01:34' prior: 50893787!
initializeFrom: aSenderAccount to: aReceptiveAccount anAmountOf: anAmount

	value := anAmount.! !

!testRun: #TransferenceTest #test02 stamp: 'lmalvarez 5/27/2021 21:01:37'!
PASSED!

!testRun: #TransferenceTest #test01 stamp: 'lmalvarez 5/27/2021 21:01:38'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'lmalvarez 5/27/2021 21:01:38'!
PASSED!

Object subclass: #Transference
	instanceVariableNames: 'value deposit withdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'lmalvarez 5/27/2021 21:06:40'!
Object subclass: #Transference
	instanceVariableNames: 'value deposit withdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/27/2021 21:12:36'!
test03
	
	| transference accountA accountB |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	
	transference := Transference from: accountA to: accountB anAmountOf: 100.
	
	self assert: accountA transactions includes: transference withdraw.
	self assert: accountB transactions includes: transference deposit.! !

!testRun: #TransferenceTest #test03 stamp: 'lmalvarez 5/27/2021 21:12:41'!
ERROR!

!testRun: #TransferenceTest #test03 stamp: 'lmalvarez 5/27/2021 21:12:41'!
ERROR!
!Transference methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/27/2021 21:14:18' prior: 50893842!
initializeFrom: aSenderAccount to: aReceptiveAccount anAmountOf: anAmount

	withdraw := Withdraw register: anAmount on: aSenderAccount.
	deposit := Deposit register: anAmount on: aReceptiveAccount.
	value := anAmount.! !
!Transference methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/27/2021 21:14:35' prior: 50893888!
initializeFrom: aSenderAccount to: aReceiverAccount anAmountOf: anAmount

	withdraw := Withdraw register: anAmount on: aSenderAccount.
	deposit := Deposit register: anAmount on: aReceiverAccount.
	value := anAmount.! !
!Transference class methodsFor: 'initialize' stamp: 'lmalvarez 5/27/2021 21:14:40' prior: 50893779!
from: aSenderAccount to: aReceiverAccount anAmountOf: anAmount

	^ self new initializeFrom: aSenderAccount to: aReceiverAccount anAmountOf: anAmount.
	! !
!Transference methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/27/2021 21:15:09'!
deposit

	^deposit! !
!Transference methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/27/2021 21:15:19'!
withdraw

	^withdraw ! !

!testRun: #TransferenceTest #test03 stamp: 'lmalvarez 5/27/2021 21:15:23'!
PASSED!

!testRun: #TransferenceTest #test01 stamp: 'lmalvarez 5/27/2021 21:15:24'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'lmalvarez 5/27/2021 21:15:24'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'lmalvarez 5/27/2021 21:15:24'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/27/2021 21:16:46'!
test04
	
	| transference accountA accountB |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	
	transference := Transference from: accountA to: accountB anAmountOf: 100.
	
	self assert: accountA transactions includes: transference withdraw.
	self assert: accountB transactions includes: transference deposit.! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/27/2021 21:17:12'!
emptyReceptiveAccount

	^ ReceptiveAccount new.! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/27/2021 21:17:39' prior: 50893797!
test01
	
	| transference |
	
	transference := Transference from: self emptyReceptiveAccount to: self emptyReceptiveAccount  anAmountOf: 100.
	
	self assert: transference value equals: 100.! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/27/2021 21:17:51' prior: 50893955!
test01
	
	| transference |
	
	transference := Transference from: self emptyReceptiveAccount
							 to: self emptyReceptiveAccount
							 anAmountOf: 100.
	
	self assert: transference value equals: 100.! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/27/2021 21:18:09' prior: 50893811!
test02
	
	| transference |
	
	transference := Transference from: self emptyReceptiveAccount
							 to: self emptyReceptiveAccount
							 anAmountOf: 500.
	
	self assert: transference value equals: 500.! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/27/2021 21:18:28' prior: 50893869!
test03
	
	| transference accountA accountB |
	
	accountA := self emptyReceptiveAccount.
	accountB := self emptyReceptiveAccount.
	
	transference := Transference from: accountA to: accountB anAmountOf: 100.
	
	self assert: accountA transactions includes: transference withdraw.
	self assert: accountB transactions includes: transference deposit.! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/27/2021 21:21:33' prior: 50893936!
test04
	
	| transference |
	
	transference := Transference from: self emptyReceptiveAccount
							 to: self emptyReceptiveAccount
							 anAmountOf: 100.
	
	self assert: transference deposit equals: (transference withdraw sibling).
	self assert: transference withdraw equals: (transference deposit sibling).! !

!testRun: #TransferenceTest #test04 stamp: 'lmalvarez 5/27/2021 21:21:36'!
ERROR!

!testRun: #TransferenceTest #test04 stamp: 'lmalvarez 5/27/2021 21:21:36'!
ERROR!

AccountTransaction subclass: #TransferenceDeposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferenceDeposit category: 'Portfolio-Solucion' stamp: 'lmalvarez 5/27/2021 21:22:39'!
AccountTransaction subclass: #TransferenceDeposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferenceDeposit class
	instanceVariableNames: ''!

!classDefinition: 'TransferenceDeposit class' category: 'Portfolio-Solucion' stamp: 'lmalvarez 5/27/2021 21:22:39'!
TransferenceDeposit class
	instanceVariableNames: ''!
!TransferenceDeposit methodsFor: 'initialization' stamp: 'lmalvarez 5/27/2021 21:22:39'!
initializeFor: aValue

	value := aValue ! !
!TransferenceDeposit methodsFor: 'value' stamp: 'lmalvarez 5/27/2021 21:22:39' overrides: 50893628!
value

	^ value! !
!TransferenceDeposit methodsFor: 'balance' stamp: 'lmalvarez 5/27/2021 21:22:39' overrides: 50893632!
affectBalance: aBalance

	^aBalance + value ! !
!TransferenceDeposit class methodsFor: 'instance creation' stamp: 'lmalvarez 5/27/2021 21:22:39'!
for: aValue

	^ self new initializeFor: aValue ! !

AccountTransaction subclass: #TransferenceWithdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferenceWithdraw category: 'Portfolio-Solucion' stamp: 'lmalvarez 5/27/2021 21:22:53'!
AccountTransaction subclass: #TransferenceWithdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferenceWithdraw class
	instanceVariableNames: ''!

!classDefinition: 'TransferenceWithdraw class' category: 'Portfolio-Solucion' stamp: 'lmalvarez 5/27/2021 21:22:53'!
TransferenceWithdraw class
	instanceVariableNames: ''!
!TransferenceWithdraw methodsFor: 'initialization' stamp: 'lmalvarez 5/27/2021 21:22:53'!
initializeFor: aValue

	value := aValue ! !
!TransferenceWithdraw methodsFor: 'value' stamp: 'lmalvarez 5/27/2021 21:22:53' overrides: 50893628!
value

	^ value! !
!TransferenceWithdraw methodsFor: 'balance' stamp: 'lmalvarez 5/27/2021 21:22:53' overrides: 50893632!
affectBalance: aBalance

	^aBalance - value! !
!TransferenceWithdraw class methodsFor: 'instance creation' stamp: 'lmalvarez 5/27/2021 21:22:53'!
for: aValue

	^ self new initializeFor: aValue ! !

!methodRemoval: TransferenceDeposit #value stamp: 'lmalvarez 5/27/2021 21:23:01'!
value

	^ value!

!methodRemoval: TransferenceWithdraw #value stamp: 'lmalvarez 5/27/2021 21:23:03'!
value

	^ value!

!methodRemoval: TransferenceWithdraw #affectBalance: stamp: 'lmalvarez 5/27/2021 21:23:08'!
affectBalance: aBalance

	^aBalance - value!

!methodRemoval: TransferenceDeposit #affectBalance: stamp: 'lmalvarez 5/27/2021 21:23:10'!
affectBalance: aBalance

	^aBalance + value !

!classDefinition: #TransferenceDeposit category: 'Portfolio-Solucion' stamp: 'lmalvarez 5/27/2021 21:24:07'!
AccountTransaction subclass: #TransferenceDeposit
	instanceVariableNames: 'value transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferenceDeposit methodsFor: 'initialization' stamp: 'lmalvarez 5/27/2021 21:24:03' prior: 50894039!
initializeFor: aTransference

	transference := aTransference.! !

!classDefinition: #TransferenceWithdraw category: 'Portfolio-Solucion' stamp: 'lmalvarez 5/27/2021 21:24:41'!
AccountTransaction subclass: #TransferenceWithdraw
	instanceVariableNames: 'value transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferenceWithdraw methodsFor: 'initialization' stamp: 'lmalvarez 5/27/2021 21:24:39' prior: 50894079!
initializeFor: aTransference

	transference := aTransference.! !
!TransferenceDeposit methodsFor: 'nil' stamp: 'lmalvarez 5/27/2021 21:25:09'!
sibling

	^ transference withdraw! !
!TransferenceWithdraw methodsFor: 'nil' stamp: 'lmalvarez 5/27/2021 21:25:19'!
sibling

	^ transference deposit! !

!testRun: #TransferenceTest #test04 stamp: 'lmalvarez 5/27/2021 21:25:23'!
ERROR!

!testRun: #TransferenceTest #test04 stamp: 'lmalvarez 5/27/2021 21:25:23'!
ERROR!

!testRun: #TransferenceTest #test04 stamp: 'lmalvarez 5/27/2021 21:25:29'!
ERROR!

!testRun: #TransferenceTest #test04 stamp: 'lmalvarez 5/27/2021 21:25:29'!
ERROR!
!Transference methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/27/2021 21:25:54' prior: 50893899!
initializeFrom: aSenderAccount to: aReceiverAccount anAmountOf: anAmount

	withdraw := TransferenceWithdraw register: anAmount on: aSenderAccount.
	deposit := TransferenceDeposit register: anAmount on: aReceiverAccount.
	value := anAmount.! !

!testRun: #TransferenceTest #test04 stamp: 'lmalvarez 5/27/2021 21:25:56'!
ERROR!

!testRun: #TransferenceTest #test04 stamp: 'lmalvarez 5/27/2021 21:25:56'!
ERROR!
!Transference methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/27/2021 21:29:56' prior: 50894161!
initializeFrom: aSenderAccount to: aReceiverAccount anAmountOf: anAmount

	withdraw := TransferenceWithdraw register: self on: aSenderAccount.
	deposit := TransferenceDeposit register: self on: aReceiverAccount.
	value := anAmount.! !
!TransferenceDeposit class methodsFor: 'instance creation' stamp: 'lmalvarez 5/27/2021 21:30:26' prior: 50894053!
for: aTransference

	^ self new initializeFor: aTransference ! !
!TransferenceWithdraw class methodsFor: 'instance creation' stamp: 'lmalvarez 5/27/2021 21:30:30' prior: 50894093!
for: aTransference

	^ self new initializeFor: aTransference ! !

!testRun: #TransferenceTest #test04 stamp: 'lmalvarez 5/27/2021 21:31:46'!
PASSED!

!testRun: #TransferenceTest #test01 stamp: 'lmalvarez 5/27/2021 21:31:48'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'lmalvarez 5/27/2021 21:31:48'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'lmalvarez 5/27/2021 21:31:48'!
PASSED!

!testRun: #TransferenceTest #test04 stamp: 'lmalvarez 5/27/2021 21:31:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lmalvarez 5/27/2021 21:32:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lmalvarez 5/27/2021 21:32:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lmalvarez 5/27/2021 21:32:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lmalvarez 5/27/2021 21:32:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lmalvarez 5/27/2021 21:32:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lmalvarez 5/27/2021 21:32:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lmalvarez 5/27/2021 21:32:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lmalvarez 5/27/2021 21:32:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lmalvarez 5/27/2021 21:32:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lmalvarez 5/27/2021 21:32:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lmalvarez 5/27/2021 21:32:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lmalvarez 5/27/2021 21:32:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lmalvarez 5/27/2021 21:32:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lmalvarez 5/27/2021 21:32:08'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'lmalvarez 5/27/2021 21:32:10'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'lmalvarez 5/27/2021 21:32:10'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'lmalvarez 5/27/2021 21:32:10'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'lmalvarez 5/27/2021 21:32:10'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'lmalvarez 5/27/2021 21:32:10'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'lmalvarez 5/27/2021 21:32:10'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'lmalvarez 5/27/2021 21:32:10'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'lmalvarez 5/27/2021 21:32:10'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'lmalvarez 5/27/2021 21:32:10'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'lmalvarez 5/27/2021 21:32:10'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'lmalvarez 5/27/2021 21:32:10'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'lmalvarez 5/27/2021 21:32:10'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'lmalvarez 5/27/2021 21:32:10'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'lmalvarez 5/27/2021 21:32:10'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'lmalvarez 5/27/2021 21:32:10'!
PASSED!

----SNAPSHOT----(27 May 2021 21:33:02) CuisUniversity-4532.image priorSource: 17961518!

----SNAPSHOT----(27 May 2021 21:33:46) CuisUniversity-4532.image priorSource: 18005672!

----SNAPSHOT----(27 May 2021 22:09:40) CuisUniversity-4532.image priorSource: 18005761!

----STARTUP---- (29 May 2021 20:10:35) as C:\Users\Lukee\Desktop\Facultad\Ingenier√≠a 1\CuisUniversity\CuisToTrain\CuisUniversity-4532.image!


!testRun: #TransferenceTest #test04 stamp: 'lmalvarez 5/29/2021 20:11:57'!
PASSED!

!testRun: #TransferenceTest #test01 stamp: 'lmalvarez 5/29/2021 20:11:59'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'lmalvarez 5/29/2021 20:11:59'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'lmalvarez 5/29/2021 20:11:59'!
PASSED!

!testRun: #TransferenceTest #test04 stamp: 'lmalvarez 5/29/2021 20:11:59'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/29/2021 20:13:32' prior: 50893985!
test03
	
	| transference accountA accountB |
	
	accountA := self emptyReceptiveAccount.
	accountB := self emptyReceptiveAccount.
	
	transference := Transference from: accountA to: accountB anAmountOf: 100.
	
	self assert: accountA transactions includes: transference withdraw.
	self assert: accountB transactions includes: transference deposit.
	
	self assert: accountA balance equals: -100.
	self assert: accountB balance equals: 100.! !

!testRun: #TransferenceTest #test03 stamp: 'lmalvarez 5/29/2021 20:13:34'!
ERROR!

!testRun: #TransferenceTest #test03 stamp: 'lmalvarez 5/29/2021 20:13:34'!
ERROR!
!TransferenceDeposit methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/29/2021 20:14:28' overrides: 50893632!
affectBalance: aBalance

	^aBalance + transference value! !
!TransferenceWithdraw methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/29/2021 20:14:42' overrides: 50893632!
affectBalance: aBalance

	^aBalance - transference value! !

!testRun: #TransferenceTest #test03 stamp: 'lmalvarez 5/29/2021 20:14:46'!
PASSED!

!testRun: #TransferenceTest #test01 stamp: 'lmalvarez 5/29/2021 20:14:47'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'lmalvarez 5/29/2021 20:14:47'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'lmalvarez 5/29/2021 20:14:47'!
PASSED!

!testRun: #TransferenceTest #test04 stamp: 'lmalvarez 5/29/2021 20:14:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lmalvarez 5/29/2021 20:15:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lmalvarez 5/29/2021 20:15:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lmalvarez 5/29/2021 20:15:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lmalvarez 5/29/2021 20:15:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lmalvarez 5/29/2021 20:15:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lmalvarez 5/29/2021 20:15:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lmalvarez 5/29/2021 20:15:06'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/29/2021 20:20:07'!
test01TransferenceBetweenTwoAccountsRetailsTheAmountSpecified
	
	| transference |
	
	transference := Transference from: self emptyReceptiveAccount
							 to: self emptyReceptiveAccount
							 anAmountOf: 100.
	
	self assert: transference value equals: 100.! !

!methodRemoval: TransferenceTest #test01 stamp: 'lmalvarez 5/29/2021 20:20:10'!
test01
	
	| transference |
	
	transference := Transference from: self emptyReceptiveAccount
							 to: self emptyReceptiveAccount
							 anAmountOf: 100.
	
	self assert: transference value equals: 100.!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/29/2021 20:22:34'!
test02TransferenceBetweenTwoAccountsRetailsAnyAmount
	
	| transference |
	
	transference := Transference from: self emptyReceptiveAccount
							 to: self emptyReceptiveAccount
							 anAmountOf: 500.
	
	self assert: transference value equals: 500.! !

!methodRemoval: TransferenceTest #test02 stamp: 'lmalvarez 5/29/2021 20:22:36'!
test02
	
	| transference |
	
	transference := Transference from: self emptyReceptiveAccount
							 to: self emptyReceptiveAccount
							 anAmountOf: 500.
	
	self assert: transference value equals: 500.!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/29/2021 20:24:57'!
test03TransferenceAppearsInBothAccountsTransactionsAndAffectsTheirBalanceAsItShould
	
	| transference accountA accountB |
	
	accountA := self emptyReceptiveAccount.
	accountB := self emptyReceptiveAccount.
	
	transference := Transference from: accountA to: accountB anAmountOf: 100.
	
	self assert: accountA transactions includes: transference withdraw.
	self assert: accountB transactions includes: transference deposit.
	
	self assert: accountA balance equals: -100.
	self assert: accountB balance equals: 100.! !

!methodRemoval: TransferenceTest #test03 stamp: 'lmalvarez 5/29/2021 20:24:59'!
test03
	
	| transference accountA accountB |
	
	accountA := self emptyReceptiveAccount.
	accountB := self emptyReceptiveAccount.
	
	transference := Transference from: accountA to: accountB anAmountOf: 100.
	
	self assert: accountA transactions includes: transference withdraw.
	self assert: accountB transactions includes: transference deposit.
	
	self assert: accountA balance equals: -100.
	self assert: accountB balance equals: 100.!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/29/2021 20:26:13'!
test04TransferenceTransactionsCanBeAccessedBetweenEachOther
	
	| transference |
	
	transference := Transference from: self emptyReceptiveAccount
							 to: self emptyReceptiveAccount
							 anAmountOf: 100.
	
	self assert: transference deposit equals: (transference withdraw sibling).
	self assert: transference withdraw equals: (transference deposit sibling).! !

!methodRemoval: TransferenceTest #test04 stamp: 'lmalvarez 5/29/2021 20:26:26'!
test04
	
	| transference |
	
	transference := Transference from: self emptyReceptiveAccount
							 to: self emptyReceptiveAccount
							 anAmountOf: 100.
	
	self assert: transference deposit equals: (transference withdraw sibling).
	self assert: transference withdraw equals: (transference deposit sibling).!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lmalvarez 5/29/2021 20:28:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lmalvarez 5/29/2021 20:28:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lmalvarez 5/29/2021 20:28:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lmalvarez 5/29/2021 20:28:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lmalvarez 5/29/2021 20:28:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lmalvarez 5/29/2021 20:28:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lmalvarez 5/29/2021 20:28:04'!
PASSED!

!testRun: #TransferenceTest #test01TransferenceBetweenTwoAccountsRetailsTheAmountSpecified stamp: 'lmalvarez 5/29/2021 20:28:06'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceBetweenTwoAccountsRetailsAnyAmount stamp: 'lmalvarez 5/29/2021 20:28:06'!
PASSED!

!testRun: #TransferenceTest #test03TransferenceAppearsInBothAccountsTransactionsAndAffectsTheirBalanceAsItShould stamp: 'lmalvarez 5/29/2021 20:28:06'!
PASSED!

!testRun: #TransferenceTest #test04TransferenceTransactionsCanBeAccessedBetweenEachOther stamp: 'lmalvarez 5/29/2021 20:28:06'!
PASSED!

----SNAPSHOT----(29 May 2021 20:28:14) CuisUniversity-4532.image priorSource: 18005850!

TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryTest category: 'Portfolio-Solucion' stamp: 'lmalvarez 5/29/2021 20:33:37'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryTest methodsFor: 'no messages' stamp: 'lmalvarez 5/29/2021 20:38:49'!
test01

	| account accountSummary|
	
	account := ReceptiveAccount new.
	
	accountSummary := OrderedCollection new .
	
	self assert: account accountSummary = accountSummary.! !

!testRun: #AccountSummaryTest #test01 stamp: 'lmalvarez 5/29/2021 20:38:59'!
ERROR!

!testRun: #AccountSummaryTest #test01 stamp: 'lmalvarez 5/29/2021 20:38:59'!
ERROR!

!testRun: #AccountSummaryTest #test01 stamp: 'lmalvarez 5/29/2021 20:39:05'!
ERROR!

!testRun: #AccountSummaryTest #test01 stamp: 'lmalvarez 5/29/2021 20:39:05'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/29/2021 20:39:24'!
accountSummary
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/29/2021 20:39:37' prior: 50894613!
accountSummary
	^ OrderedCollection new.! !

!testRun: #AccountSummaryTest #test01 stamp: 'lmalvarez 5/29/2021 20:39:38'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'lmalvarez 5/29/2021 20:39:44'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/29/2021 20:41:33'!
test02

	| account accountSummary deposit|
	
	account := ReceptiveAccount new.
	
	accountSummary := OrderedCollection new.
	deposit := Deposit register: 100 on: account. 
	
	accountSummary add: deposit.
	
	self assert: account accountSummary = accountSummary.! !

!testRun: #AccountSummaryTest #test02 stamp: 'lmalvarez 5/29/2021 20:41:34'!
FAILURE!

!testRun: #AccountSummaryTest #test02 stamp: 'lmalvarez 5/29/2021 20:41:34'!
FAILURE!

!testRun: #AccountSummaryTest #test02 stamp: 'lmalvarez 5/29/2021 20:43:17'!
FAILURE!

!testRun: #AccountSummaryTest #test02 stamp: 'lmalvarez 5/29/2021 20:43:17'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/29/2021 20:50:05' prior: 50894618!
accountSummary
	
	| accountSummary |
	
	accountSummary := OrderedCollection new.

	(self transactions select: [:aTransaction | aTransaction isKindOf: Deposit ] ) do: [:aDeposit | accountSummary add: ('DepÔøΩsito por ' , aDeposit value asString) ].
	
	^ accountSummary! !

!testRun: #AccountSummaryTest #test02 stamp: 'lmalvarez 5/29/2021 20:50:08'!
FAILURE!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/29/2021 20:50:57' prior: 50894628!
test02

	| account accountSummary deposit|
	
	account := ReceptiveAccount new.
	
	accountSummary := OrderedCollection new.
	deposit := Deposit register: 100 on: account. 
	
	accountSummary add: ('DepÔøΩsito por ', deposit value asString).
	
	self assert: account accountSummary = accountSummary.! !

!testRun: #AccountSummaryTest #test02 stamp: 'lmalvarez 5/29/2021 20:50:58'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'lmalvarez 5/29/2021 20:51:04'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'lmalvarez 5/29/2021 20:51:06'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'lmalvarez 5/29/2021 20:51:06'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/29/2021 20:52:34'!
test03

	| account accountSummary |
	
	account := ReceptiveAccount new.
	
	accountSummary := OrderedCollection new.
	Deposit register: 100 on: account. 
	Deposit register: 500 on: account. 
	Deposit register: 1000 on: account. 
	
	accountSummary add: ('DepÔøΩsito por ', 100 asString).
	accountSummary add: ('DepÔøΩsito por ', 500 asString).
	accountSummary add: ('DepÔøΩsito por ', 1000 asString).
	
	self assert: account accountSummary = accountSummary.! !

!testRun: #AccountSummaryTest #test03 stamp: 'lmalvarez 5/29/2021 20:52:36'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/29/2021 20:54:43'!
test04

	| account accountSummary |
	
	account := ReceptiveAccount new.
	
	accountSummary := OrderedCollection new.
	Withdraw register: 100 on: account. 
	
	accountSummary add: ('ExtracciÔøΩn por ', 100 asString).
	
	self assert: account accountSummary = accountSummary.! !

!testRun: #AccountSummaryTest #test04 stamp: 'lmalvarez 5/29/2021 20:54:45'!
FAILURE!

!testRun: #AccountSummaryTest #test04 stamp: 'lmalvarez 5/29/2021 20:54:45'!
FAILURE!

!testRun: #AccountSummaryTest #test04 stamp: 'lmalvarez 5/29/2021 20:57:42'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/29/2021 20:58:20' prior: 50894651!
accountSummary
	
	| accountSummary |
	
	accountSummary := OrderedCollection new.

	(self transactions select: [:aTransaction | aTransaction isKindOf: Deposit ] ) do: [:aDeposit | accountSummary add: ('DepÔøΩsito por ' , aDeposit value asString) ].
	(self transactions select: [:aTransaction | aTransaction isKindOf: Withdraw ] ) do: [:aWithdraw | accountSummary add: ('ExtracciÔøΩn por ' , aWithdraw value asString) ].
	
	^ accountSummary! !

!testRun: #AccountSummaryTest #test04 stamp: 'lmalvarez 5/29/2021 20:58:25'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'lmalvarez 5/29/2021 20:58:26'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'lmalvarez 5/29/2021 20:58:26'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'lmalvarez 5/29/2021 20:58:26'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'lmalvarez 5/29/2021 20:58:26'!
PASSED!

----SNAPSHOT----(29 May 2021 20:58:36) CuisUniversity-4532.image priorSource: 18013670!

----SNAPSHOT----(29 May 2021 21:00:03) CuisUniversity-4532.image priorSource: 18019459!

----STARTUP---- (31 May 2021 14:48:39) as C:\Users\Lukee\Desktop\Facultad\Ingenier√≠a 1\CuisUniversity\CuisToTrain\CuisUniversity-4532.image!

!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 15:05:24' prior: 50894729!
accountSummary
	
	| accountSummary firstWithdraw|
	
	accountSummary := OrderedCollection new.

	(self transactions select: [:aTransaction | aTransaction isKindOf: Deposit ] ) do: [:aDeposit | accountSummary add: ('DepÔøΩsito por ' , aDeposit value asString) ].
	
	
	"(self transactions select: [:aTransaction | aTransaction isKindOf: Withdraw ] ) do: [:aWithdraw | accountSummary add: ('ExtracciÔøΩn por ' , aWithdraw value asString) ]."
	
	^ accountSummary! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 15:06:10' prior: 50894770!
accountSummary
	
	| accountSummary firstWithdraw|
	
	accountSummary := OrderedCollection new.

	(self transactions select: [:aTransaction | aTransaction isKindOf: Deposit ] ) do: [:aDeposit | accountSummary add: ('DepÔøΩsito por ' , aDeposit value asString) ].
	firstWithdraw := (self transactions select: [:aTransaction | aTransaction isKindOf: Withdraw ] ) first.
	accountSummary add: ('ExtracciÔøΩn por ' , firstWithdraw value asString).
	
	"(self transactions select: [:aTransaction | aTransaction isKindOf: Withdraw ] ) do: [:aWithdraw | accountSummary add: ('ExtracciÔøΩn por ' , aWithdraw value asString) ]."
	
	^ accountSummary! !

!testRun: #AccountSummaryTest #test04 stamp: 'lmalvarez 5/31/2021 15:06:33'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'lmalvarez 5/31/2021 15:06:35'!
ERROR!

!testRun: #AccountSummaryTest #test02 stamp: 'lmalvarez 5/31/2021 15:06:35'!
ERROR!

!testRun: #AccountSummaryTest #test03 stamp: 'lmalvarez 5/31/2021 15:06:35'!
ERROR!

!testRun: #AccountSummaryTest #test04 stamp: 'lmalvarez 5/31/2021 15:06:35'!
PASSED!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 15:09:24' prior: 50894788!
accountSummary
	
	| accountSummary |
	
	accountSummary := OrderedCollection new.

	(self transactions select: [:aTransaction | aTransaction isKindOf: Deposit ] ) do: [:aDeposit | accountSummary add: ('DepÔøΩsito por ' , aDeposit value asString) ].
	self transactions detect: [:aTransaction | aTransaction isKindOf: Withdraw ]  ifFound: [:aWithdraw | accountSummary add: ('ExtracciÔøΩn por ' , aWithdraw value asString) ] ifNone: [].
	"(self transactions select: [:aTransaction | aTransaction isKindOf: Withdraw ] ) do: [:aWithdraw | accountSummary add: ('ExtracciÔøΩn por ' , aWithdraw value asString) ]."
	
	^ accountSummary! !

!testRun: #AccountSummaryTest #test04 stamp: 'lmalvarez 5/31/2021 15:09:27'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'lmalvarez 5/31/2021 15:09:28'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'lmalvarez 5/31/2021 15:09:28'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'lmalvarez 5/31/2021 15:09:28'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'lmalvarez 5/31/2021 15:09:28'!
PASSED!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 15:10:15' prior: 50894825!
accountSummary
	
	| accountSummary |
	
	accountSummary := OrderedCollection new.

	(self transactions select: [:aTransaction | aTransaction isKindOf: Deposit ] ) do: [:aDeposit | accountSummary add: ('DepÔøΩsito por ' , aDeposit value asString) ].
	(self transactions select: [:aTransaction | aTransaction isKindOf: Withdraw ] ) do: [:aWithdraw | accountSummary add: ('ExtracciÔøΩn por ' , aWithdraw value asString) ].
	
	^ accountSummary! !

!testRun: #AccountSummaryTest #test01 stamp: 'lmalvarez 5/31/2021 15:10:19'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'lmalvarez 5/31/2021 15:10:19'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'lmalvarez 5/31/2021 15:10:19'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'lmalvarez 5/31/2021 15:10:19'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 15:25:00'!
test05

	| accountA accountB accountSummaryA accountSummaryB |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	
	accountSummaryA := OrderedCollection new.
	accountSummaryB := OrderedCollection new.
	Transference from: accountA to: accountB  anAmountOf: 100.
	
	accountSummaryA add: ('Salida por transferencia de ', 100 asString).
	accountSummaryB add: ('Entrada por transferencia de ', 100 asString).
	
	self assert: accountA accountSummary = accountSummaryA.
	self assert: accountB accountSummary = accountSummaryB.! !

!testRun: #AccountSummaryTest #test05 stamp: 'lmalvarez 5/31/2021 15:25:14'!
FAILURE!

!testRun: #AccountSummaryTest #test05 stamp: 'lmalvarez 5/31/2021 15:25:14'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 15:26:50' prior: 50894862!
accountSummary
	
	| accountSummary |
	
	accountSummary := OrderedCollection new.

	(self transactions select: [:aTransaction | aTransaction isKindOf: Deposit ] ) do: [:aDeposit | accountSummary add: ('DepÔøΩsito por ' , aDeposit value asString) ].
	(self transactions select: [:aTransaction | aTransaction isKindOf: Withdraw ] ) do: [:aWithdraw | accountSummary add: ('ExtracciÔøΩn por ' , aWithdraw value asString) ].
	(self transactions select: [:aTransaction | aTransaction isKindOf: TransferenceDeposit ] ) do: [:aWithdraw | accountSummary add: ('Entrada por transferencia de ' , aWithdraw value asString) ].
	(self transactions select: [:aTransaction | aTransaction isKindOf: TransferenceWithdraw ] ) do: [:aWithdraw | accountSummary add: ('Salida por transferencia de ' , aWithdraw value asString) ].
	
	^ accountSummary! !

!testRun: #AccountSummaryTest #test05 stamp: 'lmalvarez 5/31/2021 15:26:51'!
ERROR!

!testRun: #AccountSummaryTest #test05 stamp: 'lmalvarez 5/31/2021 15:26:58'!
ERROR!

!testRun: #AccountSummaryTest #test05 stamp: 'lmalvarez 5/31/2021 15:26:58'!
ERROR!
!TransferenceDeposit methodsFor: 'sibling' stamp: 'lmalvarez 5/31/2021 15:27:47' overrides: 50893628!
value
	
	^ transference value! !
!TransferenceWithdraw methodsFor: 'balance' stamp: 'lmalvarez 5/31/2021 15:28:09' overrides: 50893628!
value

	^ transference value! !

!testRun: #AccountSummaryTest #test05 stamp: 'lmalvarez 5/31/2021 15:28:11'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'lmalvarez 5/31/2021 15:28:13'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'lmalvarez 5/31/2021 15:28:13'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'lmalvarez 5/31/2021 15:28:13'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'lmalvarez 5/31/2021 15:28:13'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'lmalvarez 5/31/2021 15:28:13'!
PASSED!

TestCase subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetTest category: 'Portfolio-Solucion' stamp: 'lmalvarez 5/31/2021 15:29:47'!
TestCase subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----SNAPSHOT----(31 May 2021 15:31:41) CuisUniversity-4532.image priorSource: 18019548!
!FormSection methodsFor: 'initialization' stamp: 'lmalvarez 5/31/2021 15:39:23' prior: 50814657!
initializeWithTitle: aTitle withExplanation: anExplanation withColor: aColor

	| titleLayoutSpec |

	title := aTitle.
	explanation := anExplanation.

	self separation: 3.
	self color: aColor.

	titleMorph := LabelMorph
		contents: title
		font: Preferences windowTitleFont
		emphasis: 1.
	titleLayoutSpec := LayoutSpec
		fixedWidth: titleMorph morphWidth
		fixedHeight: titleMorph morphHeight.
	titleLayoutSpec offAxisEdgeWeight: 0.03.

	self addMorph: titleMorph layoutSpec: titleLayoutSpec.

	explanation isEmpty ifFalse: [
		explanationMorph := ImmutableTextModelMorph
			withText: anExplanation
			withColor: aColor
			withWidth: self fixedWidthForTexts.
		self addMorph: explanationMorph.
	].! !
!LabeledInput methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 15:39:43' prior: 50814774!
withLabel: aLabel withWidth: aWidth withModel: aTextModel usingAs: focusMover

	| labelLayoutSpec inputMorphLayoutSpec |

	self separation: 5.
	self layoutSpec: (LayoutSpec proportionalWidth: 0.95 fixedHeight: LabeledInput recommendedHeight).

	labelMorph := LabelMorph contents: aLabel.
	labelLayoutSpec := LayoutSpec
		fixedWidth: aWidth
		fixedHeight: labelMorph morphHeight
		offAxisEdgeWeight: #center.
	self addMorph: labelMorph layoutSpec: labelLayoutSpec.

	inputMorph := TabPassingTextModelMorph withModel: aTextModel.
	inputMorph textMorph focusMover: focusMover.
	focusMover addFocusReceiver: inputMorph textMorph.
	inputMorph hideScrollBarsIndefinitely.
	inputMorphLayoutSpec :=
		LayoutSpec
			fixedWidth: LabeledInput inputWidth * 0.7
			fixedHeight: labelMorph morphHeight + 2.
	self addMorph: inputMorph layoutSpec: inputMorphLayoutSpec.



	! !
!MessageKeywordsAndParametersTable methodsFor: 'GUI building' stamp: 'lmalvarez 5/31/2021 15:40:16' prior: 50815089!
buildColumnTitlesRowFor: inputColumnsTitles

	| columnsTitles row |

	row := LayoutMorph newRow.
	row color: self backgroundColor.
	row separation: self columnSeparation.

	columnsTitles := OrderedCollection newFrom: inputColumnsTitles.
	columnsTitles addFirst: ''.
	self needsToReorderRows ifTrue: [columnsTitles addLast: 'Change order'].
	columnsTitles withIndexDo: [:aColumnTitle :columnIndex | | columnTitleLayoutSpec titleLayout |
		titleLayout := LayoutMorph newRow.
		titleLayout color: self backgroundColor .
		titleLayout axisEdgeWeight: #center.
		titleLayout addMorph: (LabelMorph contents: aColumnTitle).
		columnTitleLayoutSpec := LayoutSpec fixedWidth: (columnWidths at: columnIndex).
		row
			addMorph: titleLayout
			layoutSpec: columnTitleLayoutSpec].

	^row

	! !
!MessageKeywordsAndParametersTable methodsFor: 'initialization' stamp: 'lmalvarez 5/31/2021 15:40:25' prior: 50814979!
withRows: rowsTitles withColor: aColor withPreviewModel: aPreviewModel withRefactoringModel: aRefactoringModel

	| rowsSeparation recommendedHeight numberOfRows columnsTitlesRow changeOrderButtons tableWidth inputColumnsTitles |

	backgroundColor := aColor.
	rowModels := OrderedCollection new.
	previewModel := aPreviewModel.
	refactoringModel := aRefactoringModel.
	variablesToParametrize := rowsTitles.

	rowsSeparation := 4.
	self separation: rowsSeparation.

	"Calculate table height"
	numberOfRows := (rowsTitles size + 1).
	recommendedHeight :=  self rowHeight * numberOfRows + (rowsSeparation * (numberOfRows + 1)) * 1.1.

	"Calculate column widths"
	inputColumnsTitles := #('Keyword' 'Parameter name').
	columnWidths := self columnWidthsRequiredForRowTitles: rowsTitles forInputColumns: inputColumnsTitles size.

	"Calculate table width"
	tableWidth := columnWidths sum + (self columnSeparation * (columnWidths size + 1)) * 1.1.

	self layoutSpec: (LayoutSpec fixedWidth: tableWidth fixedHeight: recommendedHeight).

	"Buid the columns titles row"
	columnsTitlesRow := self buildColumnTitlesRowFor: inputColumnsTitles.
	self addMorph: columnsTitlesRow layoutSpec: self rowsLayoutSpec.

	"Build the input rows"
	rowsTitles withIndexDo: [:aRowTitle :index | | aRow changeOrderModel keywordInputMorph inputMorphLayoutSpec parameternameInputMorph |
		aRow := LayoutMorph newRow.
		aRow color: self backgroundColor; separation: self columnSeparation.

		aRow
			addMorph: (LabelMorph contents: aRowTitle)
			layoutSpec: (LayoutSpec fixedWidth: (columnWidths at: 1)).

		inputMorphLayoutSpec := LayoutSpec fixedWidth: (columnWidths at: 2) fixedHeight: self rowHeight.

		keywordInputMorph := self buildInputMorphWith: (aRefactoringModel keywordModelOf: aRowTitle).
		aRow addMorph: keywordInputMorph layoutSpec: inputMorphLayoutSpec.

		parameternameInputMorph := self buildInputMorphWith: (aRefactoringModel parameterModelOf: aRowTitle).
		aRow addMorph: parameternameInputMorph layoutSpec: inputMorphLayoutSpec.

		self needsToReorderRows ifTrue: [
			changeOrderModel := ChangeRowOrderButtonModel for: (rowsTitles size - (index - 1)) notifying: self.
			rowModels addFirst: changeOrderModel.
			changeOrderButtons := self buildChangeOrderButtonsWith: changeOrderModel.
			aRow addMorph: changeOrderButtons layoutSpec: (LayoutSpec fixedWidth: (columnWidths last))].

		self addMorph: aRow layoutSpec: self rowsLayoutSpec.
	].! !

Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'lmalvarez 5/31/2021 15:46:51'!
Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary class methodsFor: 'no messages' stamp: 'lmalvarez 5/31/2021 15:48:10'!
for: anAccount

	^ self new initializeFor: anAccount.! !

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'lmalvarez 5/31/2021 15:48:27'!
Object subclass: #AccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'no messages' stamp: 'lmalvarez 5/31/2021 15:48:26'!
initializeFor: anAccount

	account := anAccount.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 15:48:50'!
summary

	! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 15:49:41' prior: 50895189!
summary

	| transactions |
	
	transactions := account transactions.
	
	! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 15:50:48' prior: 50895193!
summary

	| accountSummary |
	
	accountSummary := OrderedCollection new.

	(account transactions select: [:aTransaction | aTransaction isKindOf: Deposit ] ) do: [:aDeposit | accountSummary add: ('DepÔøΩsito por ' , aDeposit value asString) ].
	(account transactions select: [:aTransaction | aTransaction isKindOf: Withdraw ] ) do: [:aWithdraw | accountSummary add: ('ExtracciÔøΩn por ' , aWithdraw value asString) ].
	(account transactions select: [:aTransaction | aTransaction isKindOf: TransferenceDeposit ] ) do: [:aWithdraw | accountSummary add: ('Entrada por transferencia de ' , aWithdraw value asString) ].
	(account transactions select: [:aTransaction | aTransaction isKindOf: TransferenceWithdraw ] ) do: [:aWithdraw | accountSummary add: ('Salida por transferencia de ' , aWithdraw value asString) ].
	
	^ accountSummary! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 15:52:19' prior: 50894594!
test01

	| report accountSummary|
	
	report := AccountSummary for: ReceptiveAccount new.
	
	accountSummary := OrderedCollection new .
	
	self assert: report summary = accountSummary.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 15:52:24' prior: 50895229!
test01

	| report accountSummary |
	
	report := AccountSummary for: ReceptiveAccount new.
	
	accountSummary := OrderedCollection new .
	
	self assert: report summary = accountSummary.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 15:52:53' prior: 50895239!
test01

	| accountSummary |
	
	accountSummary := AccountSummary for: ReceptiveAccount new.
	
	self assert: accountSummary summary = OrderedCollection new.! !

!testRun: #AccountSummaryTest #test01 stamp: 'lmalvarez 5/31/2021 15:52:57'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 15:54:33' prior: 50894666!
test02

	| account expectedSummary deposit |
	
	account := ReceptiveAccount new.
	
	expectedSummary := OrderedCollection new.
	deposit := Deposit register: 100 on: account. 
	
	expectedSummary add: ('DepÔøΩsito por ', deposit value asString).
	
	self assert: (AccountSummary for: account) summary = expectedSummary.! !

!testRun: #AccountSummaryTest #test02 stamp: 'lmalvarez 5/31/2021 15:54:38'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 15:55:06' prior: 50894689!
test03

	| account expectedSummary |
	
	account := ReceptiveAccount new.
	
	expectedSummary := OrderedCollection new.
	Deposit register: 100 on: account. 
	Deposit register: 500 on: account. 
	Deposit register: 1000 on: account. 
	
	expectedSummary add: ('DepÔøΩsito por ', 100 asString).
	expectedSummary add: ('DepÔøΩsito por ', 500 asString).
	expectedSummary add: ('DepÔøΩsito por ', 1000 asString).
	
	self assert: (AccountSummary for: account) summary = expectedSummary.! !

!testRun: #AccountSummaryTest #test03 stamp: 'lmalvarez 5/31/2021 15:55:08'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 15:55:31' prior: 50894709!
test04

	| account expectedSummary |
	
	account := ReceptiveAccount new.
	
	expectedSummary := OrderedCollection new.
	Withdraw register: 100 on: account. 
	
	expectedSummary add: ('ExtracciÔøΩn por ', 100 asString).
	
	self assert: (AccountSummary for: account) summary = expectedSummary.! !

!testRun: #AccountSummaryTest #test04 stamp: 'lmalvarez 5/31/2021 15:55:34'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 15:56:27' prior: 50894890!
test05

	| accountA accountB expectedSummaryA expectedSummaryB |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	
	expectedSummaryA := OrderedCollection new.
	expectedSummaryB := OrderedCollection new.
	Transference from: accountA to: accountB  anAmountOf: 100.
	
	expectedSummaryA add: ('Salida por transferencia de ', 100 asString).
	expectedSummaryB add: ('Entrada por transferencia de ', 100 asString).
	
	self assert: (AccountSummary for: accountA ) summary = expectedSummaryA.
	self assert: (AccountSummary for: accountB ) summary = expectedSummaryB.! !

!testRun: #AccountSummaryTest #test05 stamp: 'lmalvarez 5/31/2021 15:56:29'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 15:58:30' prior: 50895261!
test02

	| account expectedSummary deposit |
	
	account := ReceptiveAccount new.
	
	expectedSummary := OrderedCollection new.
	deposit := Deposit register: 100 on: account. 
	
	expectedSummary add: ('DepÔøΩsito por ', deposit value asString).
	expectedSummary add: ('Balance = ', 100 asString).
	
	self assert: (AccountSummary for: account) summary = expectedSummary.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 15:59:26' prior: 50895249!
test01

	| accountSummary |
	
	accountSummary := AccountSummary for: ReceptiveAccount new.
	
	self assert: accountSummary summary = (OrderedCollection with: ('Balance =', 0 asString)).! !

!testRun: #AccountSummaryTest #test01 stamp: 'lmalvarez 5/31/2021 15:59:27'!
FAILURE!

!testRun: #AccountSummaryTest #test01 stamp: 'lmalvarez 5/31/2021 15:59:27'!
FAILURE!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 16:00:21' prior: 50895199!
summary

	| accountSummary |
	
	accountSummary := OrderedCollection new.

	(account transactions select: [:aTransaction | aTransaction isKindOf: Deposit ] ) do: [:aDeposit | accountSummary add: ('DepÔøΩsito por ' , aDeposit value asString) ].
	(account transactions select: [:aTransaction | aTransaction isKindOf: Withdraw ] ) do: [:aWithdraw | accountSummary add: ('ExtracciÔøΩn por ' , aWithdraw value asString) ].
	(account transactions select: [:aTransaction | aTransaction isKindOf: TransferenceDeposit ] ) do: [:aWithdraw | accountSummary add: ('Entrada por transferencia de ' , aWithdraw value asString) ].
	(account transactions select: [:aTransaction | aTransaction isKindOf: TransferenceWithdraw ] ) do: [:aWithdraw | accountSummary add: ('Salida por transferencia de ' , aWithdraw value asString) ].
	
	accountSummary add: ('Balance = ', account transactions balance).
	
	^ accountSummary! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 16:01:25' prior: 50895369!
summary

	| accountSummary |
	
	accountSummary := OrderedCollection new.

	(account transactions select: [:aTransaction | aTransaction isKindOf: Deposit ] ) do: [:aDeposit | accountSummary add: ('DepÔøΩsito por ' , aDeposit value asString) ].
	(account transactions select: [:aTransaction | aTransaction isKindOf: Withdraw ] ) do: [:aWithdraw | accountSummary add: ('ExtracciÔøΩn por ' , aWithdraw value asString) ].
	(account transactions select: [:aTransaction | aTransaction isKindOf: TransferenceDeposit ] ) do: [:aWithdraw | accountSummary add: ('Entrada por transferencia de ' , aWithdraw value asString) ].
	(account transactions select: [:aTransaction | aTransaction isKindOf: TransferenceWithdraw ] ) do: [:aWithdraw | accountSummary add: ('Salida por transferencia de ' , aWithdraw value asString) ].
	
	accountSummary add: ('Balance = ', account balance).
	
	^ accountSummary! !

!testRun: #AccountSummaryTest #test01 stamp: 'lmalvarez 5/31/2021 16:01:37'!
ERROR!

!testRun: #AccountSummaryTest #test01 stamp: 'lmalvarez 5/31/2021 16:01:37'!
ERROR!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 16:01:51' prior: 50895354!
test01

	| accountSummary |
	
	accountSummary := AccountSummary for: ReceptiveAccount new.
	
	self assert: accountSummary summary = (OrderedCollection with: ('Balance = ', 0 asString)).! !

!testRun: #AccountSummaryTest #test01 stamp: 'lmalvarez 5/31/2021 16:01:52'!
ERROR!

!testRun: #AccountSummaryTest #test01 stamp: 'lmalvarez 5/31/2021 16:01:52'!
ERROR!

!testRun: #AccountSummaryTest #test01 stamp: 'lmalvarez 5/31/2021 16:01:58'!
ERROR!

!testRun: #AccountSummaryTest #test01 stamp: 'lmalvarez 5/31/2021 16:01:58'!
ERROR!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 16:02:07' prior: 50895438!
test01

	| accountSummary |
	
	accountSummary := AccountSummary for: ReceptiveAccount new.
	
	self assert: accountSummary summary = (OrderedCollection with: ('Balance = 0')).! !

!testRun: #AccountSummaryTest #test01 stamp: 'lmalvarez 5/31/2021 16:02:08'!
ERROR!

!testRun: #AccountSummaryTest #test01 stamp: 'lmalvarez 5/31/2021 16:02:08'!
ERROR!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 16:02:19' prior: 50895401!
summary

	| accountSummary |
	
	accountSummary := OrderedCollection new.

	(account transactions select: [:aTransaction | aTransaction isKindOf: Deposit ] ) do: [:aDeposit | accountSummary add: ('DepÔøΩsito por ' , aDeposit value asString) ].
	(account transactions select: [:aTransaction | aTransaction isKindOf: Withdraw ] ) do: [:aWithdraw | accountSummary add: ('ExtracciÔøΩn por ' , aWithdraw value asString) ].
	(account transactions select: [:aTransaction | aTransaction isKindOf: TransferenceDeposit ] ) do: [:aWithdraw | accountSummary add: ('Entrada por transferencia de ' , aWithdraw value asString) ].
	(account transactions select: [:aTransaction | aTransaction isKindOf: TransferenceWithdraw ] ) do: [:aWithdraw | accountSummary add: ('Salida por transferencia de ' , aWithdraw value asString) ].
	
	accountSummary add: ('Balance = ', account balance asString).
	
	^ accountSummary! !

!testRun: #AccountSummaryTest #test01 stamp: 'lmalvarez 5/31/2021 16:02:22'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'lmalvarez 5/31/2021 16:02:26'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 16:02:33' prior: 50895339!
test02

	| account expectedSummary deposit |
	
	account := ReceptiveAccount new.
	
	expectedSummary := OrderedCollection new.
	deposit := Deposit register: 100 on: account. 
	
	expectedSummary add: ('DepÔøΩsito por ', deposit value asString).
	expectedSummary add: ('Balance = 100').
	
	self assert: (AccountSummary for: account) summary = expectedSummary.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 16:02:52' prior: 50895277!
test03

	| account expectedSummary |
	
	account := ReceptiveAccount new.
	
	expectedSummary := OrderedCollection new.
	Deposit register: 100 on: account. 
	Deposit register: 500 on: account. 
	Deposit register: 1000 on: account. 
	
	expectedSummary add: ('DepÔøΩsito por ', 100 asString).
	expectedSummary add: ('DepÔøΩsito por ', 500 asString).
	expectedSummary add: ('DepÔøΩsito por ', 1000 asString).
	expectedSummary add: ('Balance = 1600').
	
	self assert: (AccountSummary for: account) summary = expectedSummary.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 16:03:22' prior: 50895525!
test03

	| account expectedSummary |
	
	account := ReceptiveAccount new.
	
	expectedSummary := OrderedCollection new.
	Deposit register: 100 on: account. 
	Deposit register: 500 on: account. 
	Deposit register: 1000 on: account. 
	
	expectedSummary add: ('DepÔøΩsito por 100').
	expectedSummary add: ('DepÔøΩsito por 500').
	expectedSummary add: ('DepÔøΩsito por 1000').
	expectedSummary add: ('Balance = 1600').
	
	self assert: (AccountSummary for: account) summary = expectedSummary.! !

!testRun: #AccountSummaryTest #test03 stamp: 'lmalvarez 5/31/2021 16:03:29'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 16:03:37' prior: 50895298!
test04

	| account expectedSummary |
	
	account := ReceptiveAccount new.
	
	expectedSummary := OrderedCollection new.
	Withdraw register: 100 on: account. 
	
	expectedSummary add: ('ExtracciÔøΩn por 100').
	
	self assert: (AccountSummary for: account) summary = expectedSummary.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 16:03:53' prior: 50895567!
test04

	| account expectedSummary |
	
	account := ReceptiveAccount new.
	
	expectedSummary := OrderedCollection new.
	Withdraw register: 100 on: account. 
	
	expectedSummary add: ('ExtracciÔøΩn por 100').
	expectedSummary add: ('Balance = -100').
	
	self assert: (AccountSummary for: account) summary = expectedSummary.! !

!testRun: #AccountSummaryTest #test04 stamp: 'lmalvarez 5/31/2021 16:03:54'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 16:04:30' prior: 50895314!
test05

	| accountA accountB expectedSummaryA expectedSummaryB |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	
	expectedSummaryA := OrderedCollection new.
	expectedSummaryB := OrderedCollection new.
	Transference from: accountA to: accountB  anAmountOf: 100.
	
	expectedSummaryA add: ('Salida por transferencia de 100').
	expectedSummaryA add: ('Balance = -100').
	expectedSummaryB add: ('Entrada por transferencia de 100').
	expectedSummaryA add: ('Balance = 100').
	
	self assert: (AccountSummary for: accountA ) summary = expectedSummaryA.
	self assert: (AccountSummary for: accountB ) summary = expectedSummaryB.! !

!testRun: #AccountSummaryTest #test05 stamp: 'lmalvarez 5/31/2021 16:04:34'!
FAILURE!

!testRun: #AccountSummaryTest #test05 stamp: 'lmalvarez 5/31/2021 16:04:34'!
FAILURE!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 16:04:45' prior: 50895597!
test05

	| accountA accountB expectedSummaryA expectedSummaryB |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	
	expectedSummaryA := OrderedCollection new.
	expectedSummaryB := OrderedCollection new.
	Transference from: accountA to: accountB  anAmountOf: 100.
	
	expectedSummaryA add: ('Salida por transferencia de 100').
	expectedSummaryA add: ('Balance = -100').
	expectedSummaryB add: ('Entrada por transferencia de 100').
	expectedSummaryB add: ('Balance = 100').
	
	self assert: (AccountSummary for: accountA ) summary = expectedSummaryA.
	self assert: (AccountSummary for: accountB ) summary = expectedSummaryB.! !

!testRun: #AccountSummaryTest #test05 stamp: 'lmalvarez 5/31/2021 16:04:47'!
PASSED!

!methodRemoval: ReceptiveAccount #accountSummary stamp: 'lmalvarez 5/31/2021 16:05:00'!
accountSummary
	
	| accountSummary |
	
	accountSummary := OrderedCollection new.

	(self transactions select: [:aTransaction | aTransaction isKindOf: Deposit ] ) do: [:aDeposit | accountSummary add: ('DepÔøΩsito por ' , aDeposit value asString) ].
	(self transactions select: [:aTransaction | aTransaction isKindOf: Withdraw ] ) do: [:aWithdraw | accountSummary add: ('ExtracciÔøΩn por ' , aWithdraw value asString) ].
	(self transactions select: [:aTransaction | aTransaction isKindOf: TransferenceDeposit ] ) do: [:aWithdraw | accountSummary add: ('Entrada por transferencia de ' , aWithdraw value asString) ].
	(self transactions select: [:aTransaction | aTransaction isKindOf: TransferenceWithdraw ] ) do: [:aWithdraw | accountSummary add: ('Salida por transferencia de ' , aWithdraw value asString) ].
	
	^ accountSummary!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'lmalvarez 5/31/2021 16:09:42'!
Object subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetTest methodsFor: 'no messages' stamp: 'lmalvarez 5/31/2021 16:09:28'!
test01

	| transferNet |
	
	transferNet := TransferNet for: ReceptiveAccount new.
	
	self assert: transferNet summary = 0.! !

!testRun: #TransferNetTest #test01 stamp: 'lmalvarez 5/31/2021 16:09:46'!
ERROR!

!testRun: #TransferNetTest #test01 stamp: 'lmalvarez 5/31/2021 16:09:46'!
ERROR!

!testRun: #TransferNetTest #test01 stamp: 'lmalvarez 5/31/2021 16:09:51'!
ERROR!
!TransferNet class methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 16:10:08'!
for: aReceptiveAccount 
	self shouldBeImplemented.! !
!TransferNet class methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 16:10:28' prior: 50895704!
for: anAccount
	^ self new initializeFor: anAccount! !

!testRun: #TransferNetTest #test01 stamp: 'lmalvarez 5/31/2021 16:10:30'!
ERROR!

!testRun: #TransferNetTest #test01 stamp: 'lmalvarez 5/31/2021 16:10:50'!
ERROR!

!testRun: #TransferNetTest #test01 stamp: 'lmalvarez 5/31/2021 16:10:50'!
ERROR!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'lmalvarez 5/31/2021 16:10:56'!
Object subclass: #TransferNet
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'initialization' stamp: 'lmalvarez 5/31/2021 16:10:56'!
initializeFor: anAccount 
	self shouldBeImplemented.
	account := anAccount.! !
!TransferNet methodsFor: 'initialization' stamp: 'lmalvarez 5/31/2021 16:11:05' prior: 50895730!
initializeFor: anAccount 

	account := anAccount.! !

!testRun: #TransferNetTest #test01 stamp: 'lmalvarez 5/31/2021 16:11:07'!
ERROR!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 16:11:15'!
summary
	self shouldBeImplemented.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 16:11:23' prior: 50895743!
summary
	^ 0! !

!testRun: #TransferNetTest #test01 stamp: 'lmalvarez 5/31/2021 16:11:24'!
PASSED!

!testRun: #TransferNetTest #test01 stamp: 'lmalvarez 5/31/2021 16:11:25'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 16:13:24'!
test02

	| transferNetA transferNetB accountA accountB |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	
	transferNetA := TransferNet for: accountA.
	transferNetB := TransferNet for: accountB.
	
	Transference from: accountA to: accountB anAmountOf: 100.
	
	self assert: transferNetA summary = -100.
	self assert: transferNetB summary = 100.! !

!testRun: #TransferNetTest #test02 stamp: 'lmalvarez 5/31/2021 16:13:27'!
FAILURE!

!testRun: #TransferNetTest #test02 stamp: 'lmalvarez 5/31/2021 16:13:27'!
FAILURE!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 16:15:53' prior: 50895748!
summary
	
	^ account balance! !

!testRun: #TransferNetTest #test02 stamp: 'lmalvarez 5/31/2021 16:15:55'!
PASSED!

!testRun: #TransferNetTest #test01 stamp: 'lmalvarez 5/31/2021 16:15:57'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'lmalvarez 5/31/2021 16:15:57'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 16:16:38'!
test03

	| transferNetA transferNetB accountA accountB |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	
	transferNetA := TransferNet for: accountA.
	transferNetB := TransferNet for: accountB.
	
	Transference from: accountA to: accountB anAmountOf: 100.
	Transference from: accountB to: accountA anAmountOf: 500.
	
	self assert: transferNetA summary = 400.
	self assert: transferNetB summary = -400.! !

!testRun: #TransferNetTest #test03 stamp: 'lmalvarez 5/31/2021 16:16:39'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 16:18:01' prior: 50895789!
test03

	| transferNetA transferNetB accountA accountB |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	
	transferNetA := TransferNet for: accountA.
	transferNetB := TransferNet for: accountB.
	
	Deposit register: 500 on: accountA.
	Withdraw register: 600 on: accountB.
	
	Transference from: accountA to: accountB anAmountOf: 100.
	
	self assert: transferNetA summary = 400.
	self assert: transferNetB summary = -500.! !

!testRun: #TransferNetTest #test03 stamp: 'lmalvarez 5/31/2021 16:18:03'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 16:18:53' prior: 50895809!
test03

	| transferNetA transferNetB accountA accountB |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	
	transferNetA := TransferNet for: accountA.
	transferNetB := TransferNet for: accountB.
	
	Deposit register: 500 on: accountA.
	Withdraw register: 600 on: accountB.
	
	Transference from: accountA to: accountB anAmountOf: 100.
	
	self assert: transferNetA summary = -100.
	self assert: transferNetB summary = 100.! !

!testRun: #TransferNetTest #test03 stamp: 'lmalvarez 5/31/2021 16:18:54'!
FAILURE!

!testRun: #TransferNetTest #test03 stamp: 'lmalvarez 5/31/2021 16:18:54'!
FAILURE!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 16:20:32' prior: 50895777!
summary
	
	^ account transactions select: [:aTransaction | aTransaction isKindOf: TransferenceDeposit]! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 16:21:07' prior: 50895852!
summary
	
	^ account transactions select: [:aTransaction | aTransaction isKindOf: TransferenceDeposit]! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 16:22:31' prior: 50895859!
summary
	
	^ (account transactions select: [:aTransaction | (aTransaction isKindOf: TransferenceDeposit) or: [aTransaction isKindOf: TransferenceWithdraw ]] ) sum: [:aTransaction | aTransaction value].! !

!testRun: #TransferNetTest #test03 stamp: 'lmalvarez 5/31/2021 16:22:51'!
FAILURE!

!testRun: #TransferNetTest #test03 stamp: 'lmalvarez 5/31/2021 16:22:51'!
FAILURE!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 16:25:12' prior: 50895866!
summary
	
	| summaryValue |
	
	summaryValue := (account transactions select: [:aTransaction | (aTransaction isKindOf: TransferenceDeposit)]) sum: [:aTransaction | aTransaction value].
	summaryValue := summaryValue - (account transactions select: [:aTransaction | (aTransaction isKindOf: TransferenceWithdraw)] ) sum: [:aTransaction | aTransaction value].
		
	^ summaryValue! !

!testRun: #TransferNetTest #test03 stamp: 'lmalvarez 5/31/2021 16:25:15'!
ERROR!

!testRun: #TransferNetTest #test03 stamp: 'lmalvarez 5/31/2021 16:25:15'!
ERROR!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 16:25:49' prior: 50895881!
summary
	
	| summaryValue |
	
	summaryValue := 0.
	summaryValue := (account transactions select: [:aTransaction | (aTransaction isKindOf: TransferenceDeposit)]) sum: [:aTransaction | aTransaction value].
	summaryValue := summaryValue - (account transactions select: [:aTransaction | (aTransaction isKindOf: TransferenceWithdraw)] ) sum: [:aTransaction | aTransaction value].
		
	^ summaryValue! !

!testRun: #TransferNetTest #test03 stamp: 'lmalvarez 5/31/2021 16:25:54'!
ERROR!

!testRun: #TransferNetTest #test03 stamp: 'lmalvarez 5/31/2021 16:25:54'!
ERROR!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 16:26:32' prior: 50895902!
summary
	
	| summaryValue |
	
	summaryValue := 0.
	summaryValue := (account transactions select: [:aTransaction | (aTransaction isKindOf: TransferenceDeposit)]) sum: [:aTransaction | aTransaction value] ifEmpty: [0].
	summaryValue := summaryValue - (account transactions select: [:aTransaction | (aTransaction isKindOf: TransferenceWithdraw)] ) sum: [:aTransaction | aTransaction value] ifEmpty: [0].
		
	^ summaryValue! !

!testRun: #TransferNetTest #test03 stamp: 'lmalvarez 5/31/2021 16:26:35'!
ERROR!

!testRun: #TransferNetTest #test03 stamp: 'lmalvarez 5/31/2021 16:26:35'!
ERROR!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 16:27:34' prior: 50895923!
summary
	
	^ ((account transactions select: [:aTransaction | (aTransaction isKindOf: TransferenceDeposit)]) sum: [:aTransaction | aTransaction value] ifEmpty: [0]) 
		- (account transactions select: [:aTransaction | (aTransaction isKindOf: TransferenceWithdraw)] ) sum: [:aTransaction | aTransaction value] ifEmpty: [0].! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 16:27:43' prior: 50895945!
summary
	
	^ ((account transactions select: [:aTransaction | (aTransaction isKindOf: TransferenceDeposit)]) sum: [:aTransaction | aTransaction value] ifEmpty: [0]) 
		- ((account transactions select: [:aTransaction | (aTransaction isKindOf: TransferenceWithdraw)] ) sum: [:aTransaction | aTransaction value] ifEmpty: [0]).! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 16:27:44' prior: 50895959!
summary
	
	^ ((account transactions select: [:aTransaction | (aTransaction isKindOf: TransferenceDeposit)]) sum: [:aTransaction | aTransaction value] ifEmpty: [0]) 
		- ((account transactions select: [:aTransaction | (aTransaction isKindOf: TransferenceWithdraw)] ) sum: [:aTransaction | aTransaction value] ifEmpty: [0]).! !

!testRun: #TransferNetTest #test01 stamp: 'lmalvarez 5/31/2021 16:27:49'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'lmalvarez 5/31/2021 16:27:50'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'lmalvarez 5/31/2021 16:27:51'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'lmalvarez 5/31/2021 16:27:54'!
PASSED!

!testRun: #TransferNetTest #test01 stamp: 'lmalvarez 5/31/2021 16:27:56'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'lmalvarez 5/31/2021 16:27:56'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'lmalvarez 5/31/2021 16:27:56'!
PASSED!

----SNAPSHOT----(31 May 2021 16:28:22) CuisUniversity-4532.image priorSource: 18026858!

----STARTUP---- (31 May 2021 20:05:11) as C:\Users\Lukee\Desktop\Facultad\Ingenier√≠a 1\CuisUniversity\CuisToTrain\CuisUniversity-4532.image!

!AccountSummary methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 21:40:22' prior: 50895473!
summary

	| accountSummary |
	
	accountSummary := OrderedCollection new.

	"account transactions do: [:aTransaction | accountSummary add: aTransaction report: self]"
	
	(account transactions select: [:aTransaction | aTransaction isKindOf: Deposit ] ) do: [:aDeposit | accountSummary add: ('DepÔøΩsito por ' , aDeposit value asString) ].
	(account transactions select: [:aTransaction | aTransaction isKindOf: Withdraw ] ) do: [:aWithdraw | accountSummary add: ('ExtracciÔøΩn por ' , aWithdraw value asString) ].
	(account transactions select: [:aTransaction | aTransaction isKindOf: TransferenceDeposit ] ) do: [:aWithdraw | accountSummary add: ('Entrada por transferencia de ' , aWithdraw value asString) ].
	(account transactions select: [:aTransaction | aTransaction isKindOf: TransferenceWithdraw ] ) do: [:aWithdraw | accountSummary add: ('Salida por transferencia de ' , aWithdraw value asString) ].
	
	accountSummary add: ('Balance = ', account balance asString).
	
	^ accountSummary! !
!AccountTransaction methodsFor: 'value' stamp: 'lmalvarez 5/31/2021 21:41:06'!
answerReport: aReport 

	self subclassResponsibility ! !
!Deposit methodsFor: 'value' stamp: 'lmalvarez 5/31/2021 21:42:06' overrides: 50896046!
answerReport: aReport

	^ aReport reportADeposit: self.! !
!TransferenceDeposit methodsFor: 'balance' stamp: 'lmalvarez 5/31/2021 21:43:29' overrides: 50896046!
answerReport: aReport

	^ aReport reportATransferenceDeposit: self.! !
!TransferenceWithdraw methodsFor: 'balance' stamp: 'lmalvarez 5/31/2021 21:45:00' overrides: 50896046!
answerReport: aReport

	^ aReport reportATransferenceWithdraw: self.! !
!Withdraw methodsFor: 'value' stamp: 'lmalvarez 5/31/2021 21:46:21' overrides: 50896046!
answerReport: aReport

	^ aReport reportAWithdraw: self.! !
!Deposit methodsFor: 'reports' stamp: 'lmalvarez 5/31/2021 21:48:14' prior: 50896051 overrides: 50896046!
answerReport: aReport

	^ aReport reportADeposit: self value.! !
!TransferenceDeposit methodsFor: 'reports' stamp: 'lmalvarez 5/31/2021 21:48:19' prior: 50896057 overrides: 50896046!
answerReport: aReport

	^ aReport reportATransferenceDeposit: self value.! !
!TransferenceWithdraw methodsFor: 'reports' stamp: 'lmalvarez 5/31/2021 21:48:24' prior: 50896063 overrides: 50896046!
answerReport: aReport

	^ aReport reportATransferenceWithdraw: self value.! !
!Withdraw methodsFor: 'reports' stamp: 'lmalvarez 5/31/2021 21:48:28' prior: 50896069 overrides: 50896046!
answerReport: aReport

	^ aReport reportAWithdraw: self value.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 21:49:33'!
reportADeposit: aDepositValue

	^ ('DepÔøΩsito por ' , aDepositValue asString)! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 21:49:56' prior: 50896099!
reportADeposit: aDepositValue

	^ 'DepÔøΩsito por ' , aDepositValue asString.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 21:50:23'!
reportAWithdraw: aWithdrawValue

	^ 'ExtracciÔøΩn por ' , aWithdrawValue asString.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 21:51:03'!
reportATransferenceDeposit: aTransferenceDepositValue

	^ 'Entrada por transferencia de ' , aTransferenceDepositValue asString.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 21:51:39'!
reportATransferenceWithdraw: aTransferenceWithdrawValue

	^ 'Salida por transferencia de ' , aTransferenceWithdrawValue value asString! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 21:51:43' prior: 50896124!
reportATransferenceWithdraw: aTransferenceWithdrawValue

	^ 'Salida por transferencia de ' , aTransferenceWithdrawValue  asString! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 21:51:44' prior: 50896132!
reportATransferenceWithdraw: aTransferenceWithdrawValue

	^ 'Salida por transferencia de ' , aTransferenceWithdrawValue asString! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 21:51:51' prior: 50896140!
reportATransferenceWithdraw: aTransferenceWithdrawValue

	^ 'Salida por transferencia de ' , aTransferenceWithdrawValue asString.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 21:52:26' prior: 50896012!
summary

	| accountSummary |
	
	accountSummary := OrderedCollection new.

	account transactions do: [:aTransaction | accountSummary add: (aTransaction report: self)].
	
	accountSummary add: ('Balance = ', account balance asString).
	
	^ accountSummary! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 21:52:36' prior: 50896156!
summary

	| accountSummary |
	
	accountSummary := OrderedCollection new.

	account transactions do: [:aTransaction | accountSummary add: (aTransaction answerReport: self)].
	
	accountSummary add: ('Balance = ', account balance asString).
	
	^ accountSummary! !

!testRun: #AccountSummaryTest #test01 stamp: 'lmalvarez 5/31/2021 21:52:42'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'lmalvarez 5/31/2021 21:52:42'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'lmalvarez 5/31/2021 21:52:42'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'lmalvarez 5/31/2021 21:52:42'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'lmalvarez 5/31/2021 21:52:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lmalvarez 5/31/2021 21:52:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lmalvarez 5/31/2021 21:52:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lmalvarez 5/31/2021 21:52:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lmalvarez 5/31/2021 21:52:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lmalvarez 5/31/2021 21:52:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lmalvarez 5/31/2021 21:52:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lmalvarez 5/31/2021 21:52:47'!
PASSED!

!testRun: #TransferNetTest #test01 stamp: 'lmalvarez 5/31/2021 21:52:48'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'lmalvarez 5/31/2021 21:52:48'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'lmalvarez 5/31/2021 21:52:48'!
PASSED!

Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'lmalvarez 5/31/2021 21:55:23'!
Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #TransferNet
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'lmalvarez 5/31/2021 21:55:42'!
Report subclass: #TransferNet
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #AccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'lmalvarez 5/31/2021 21:55:48'!
Report subclass: #AccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'lmalvarez 5/31/2021 21:55:59'!
Report subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'lmalvarez 5/31/2021 21:56:01'!
Report subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #Report
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'lmalvarez 5/31/2021 21:56:05'!
Object subclass: #Report
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Report methodsFor: 'no messages' stamp: 'lmalvarez 5/31/2021 21:56:34'!
reportADeposit: aDepositValue! !
!Report methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 21:56:59' prior: 50896299!
reportADeposit: aDepositValue

	self subclassResponsibility ! !
!Report methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 21:57:12'!
reportATransferenceDeposit: aTransferenceDepositValue

	self subclassResponsibility ! !
!Report methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 21:57:20'!
reportATransferenceWithdraw: aTransferenceWithdrawValue

	self subclassResponsibility ! !
!Report methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 21:57:30'!
reportAWithdraw: aWithdrawValue

	self subclassResponsibility ! !
!Report methodsFor: 'as yet unclassified' stamp: 'lmalvarez 5/31/2021 21:58:44'!
initializeFor: anAccount

	account := anAccount.! !

!methodRemoval: AccountSummary #initializeFor: stamp: 'lmalvarez 5/31/2021 21:58:49'!
initializeFor: anAccount

	account := anAccount.!

!methodRemoval: TransferNet #initializeFor: stamp: 'lmalvarez 5/31/2021 21:58:52'!
initializeFor: anAccount 

	account := anAccount.!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lmalvarez 5/31/2021 21:59:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lmalvarez 5/31/2021 21:59:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lmalvarez 5/31/2021 21:59:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lmalvarez 5/31/2021 21:59:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lmalvarez 5/31/2021 21:59:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lmalvarez 5/31/2021 21:59:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lmalvarez 5/31/2021 21:59:41'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'lmalvarez 5/31/2021 21:59:43'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'lmalvarez 5/31/2021 21:59:43'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'lmalvarez 5/31/2021 21:59:43'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'lmalvarez 5/31/2021 21:59:43'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'lmalvarez 5/31/2021 21:59:43'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'lmalvarez 5/31/2021 21:59:43'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'lmalvarez 5/31/2021 21:59:43'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'lmalvarez 5/31/2021 21:59:43'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'lmalvarez 5/31/2021 21:59:43'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'lmalvarez 5/31/2021 21:59:43'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'lmalvarez 5/31/2021 21:59:43'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'lmalvarez 5/31/2021 21:59:43'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'lmalvarez 5/31/2021 21:59:43'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'lmalvarez 5/31/2021 21:59:43'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'lmalvarez 5/31/2021 21:59:43'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'lmalvarez 5/31/2021 21:59:46'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'lmalvarez 5/31/2021 21:59:46'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'lmalvarez 5/31/2021 21:59:46'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'lmalvarez 5/31/2021 21:59:46'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'lmalvarez 5/31/2021 21:59:46'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'lmalvarez 5/31/2021 21:59:48'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'lmalvarez 5/31/2021 21:59:48'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'lmalvarez 5/31/2021 21:59:48'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'lmalvarez 5/31/2021 21:59:48'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'lmalvarez 5/31/2021 21:59:48'!
PASSED!

!testRun: #TransferNetTest #test01 stamp: 'lmalvarez 5/31/2021 21:59:50'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'lmalvarez 5/31/2021 21:59:50'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'lmalvarez 5/31/2021 21:59:50'!
PASSED!

!testRun: #TransferenceTest #test01TransferenceBetweenTwoAccountsRetailsTheAmountSpecified stamp: 'lmalvarez 5/31/2021 21:59:51'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceBetweenTwoAccountsRetailsAnyAmount stamp: 'lmalvarez 5/31/2021 21:59:51'!
PASSED!

!testRun: #TransferenceTest #test03TransferenceAppearsInBothAccountsTransactionsAndAffectsTheirBalanceAsItShould stamp: 'lmalvarez 5/31/2021 21:59:51'!
PASSED!

!testRun: #TransferenceTest #test04TransferenceTransactionsCanBeAccessedBetweenEachOther stamp: 'lmalvarez 5/31/2021 21:59:51'!
PASSED!
!TransferNet methodsFor: 'reports' stamp: 'lmalvarez 5/31/2021 22:00:04' overrides: 50896304!
reportADeposit: aDepositValue! !
!TransferNet methodsFor: 'reports' stamp: 'lmalvarez 5/31/2021 22:00:12' overrides: 50896309!
reportATransferenceDeposit: aTransferenceDepositValue! !
!TransferNet methodsFor: 'reports' stamp: 'lmalvarez 5/31/2021 22:00:19' overrides: 50896315!
reportATransferenceWithdraw: aTransferenceWithdrawValue! !
!TransferNet methodsFor: 'reports' stamp: 'lmalvarez 5/31/2021 22:00:27' overrides: 50896321!
reportAWithdraw: aWithdrawValue
! !

----SNAPSHOT----(31 May 2021 22:01:10) CuisUniversity-4532.image priorSource: 18059306!

----SNAPSHOT----(31 May 2021 22:01:43) CuisUniversity-4532.image priorSource: 18075107!

----SNAPSHOT----(31 May 2021 22:01:49) CuisUniversity-4532.image priorSource: 18075196!

----STARTUP---- (1 June 2021 15:34:53) as C:\Users\Lukee\Desktop\Facultad\Ingenier√≠a 1\CuisUniversity\CuisToTrain\CuisUniversity-4532.image!


!testRun: #AccountSummaryTest #test01 stamp: 'lmalvarez 6/1/2021 15:35:18'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'lmalvarez 6/1/2021 15:35:18'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'lmalvarez 6/1/2021 15:35:18'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'lmalvarez 6/1/2021 15:35:18'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'lmalvarez 6/1/2021 15:35:18'!
PASSED!
!TransferNet methodsFor: 'reports' stamp: 'lmalvarez 6/1/2021 15:41:07' prior: 50895973!
summary
	
	| netValue |
	
	netValue := account transactions sum: [:aTransaction | aTransaction answerReport: self ] ifEmpty: [0].
	
	^netValue
	
	"^ ((account transactions select: [:aTransaction | (aTransaction isKindOf: TransferenceDeposit)]) sum: [:aTransaction | aTransaction value] ifEmpty: [0]) 
		- ((account transactions select: [:aTransaction | (aTransaction isKindOf: TransferenceWithdraw)] ) sum: [:aTransaction | aTransaction value] ifEmpty: [0])."! !
!TransferNet methodsFor: 'reports' stamp: 'lmalvarez 6/1/2021 15:41:40' prior: 50896484 overrides: 50896309!
reportATransferenceDeposit: aTransferenceDepositValue

	^ aTransferenceDepositValue ! !
!TransferNet methodsFor: 'reports' stamp: 'lmalvarez 6/1/2021 15:41:59' prior: 50896489 overrides: 50896315!
reportATransferenceWithdraw: aTransferenceWithdrawValue

	^ aTransferenceWithdrawValue negated! !

!testRun: #AccountSummaryTest #test01 stamp: 'lmalvarez 6/1/2021 15:42:05'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'lmalvarez 6/1/2021 15:42:05'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'lmalvarez 6/1/2021 15:42:05'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'lmalvarez 6/1/2021 15:42:05'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'lmalvarez 6/1/2021 15:42:05'!
PASSED!

!testRun: #TransferNetTest #test01 stamp: 'lmalvarez 6/1/2021 15:42:08'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'lmalvarez 6/1/2021 15:42:08'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'lmalvarez 6/1/2021 15:42:08'!
ERROR!

!testRun: #TransferNetTest #test03 stamp: 'lmalvarez 6/1/2021 15:42:08'!
ERROR!

!testRun: #TransferNetTest #test01 stamp: 'lmalvarez 6/1/2021 15:42:14'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'lmalvarez 6/1/2021 15:42:16'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'lmalvarez 6/1/2021 15:42:19'!
ERROR!

!testRun: #TransferNetTest #test03 stamp: 'lmalvarez 6/1/2021 15:42:19'!
ERROR!
!TransferNet methodsFor: 'reports' stamp: 'lmalvarez 6/1/2021 15:42:49' prior: 50896480 overrides: 50896304!
reportADeposit: aDepositValue

	^ 0! !
!TransferNet methodsFor: 'reports' stamp: 'lmalvarez 6/1/2021 15:42:58' prior: 50896494 overrides: 50896321!
reportAWithdraw: aWithdrawValue

	^0
! !

!testRun: #TransferNetTest #test01 stamp: 'lmalvarez 6/1/2021 15:43:00'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'lmalvarez 6/1/2021 15:43:00'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'lmalvarez 6/1/2021 15:43:00'!
PASSED!

!testRun: #TransferNetTest #test01 stamp: 'lmalvarez 6/1/2021 15:43:04'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'lmalvarez 6/1/2021 15:43:04'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'lmalvarez 6/1/2021 15:43:04'!
PASSED!

----SNAPSHOT----(1 June 2021 15:43:24) CuisUniversity-4532.image priorSource: 18075285!

----STARTUP---- (2 June 2021 20:30:30) as C:\Users\Lukee\Desktop\Facultad\Ingenier√≠a 1\CuisUniversity\CuisToTrain\CuisUniversity-4532.image!


!testRun: #TransferNetTest #test01 stamp: 'lmalvarez 6/2/2021 20:32:01'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 'lmalvarez 6/2/2021 20:32:01'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 'lmalvarez 6/2/2021 20:32:01'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/2/2021 20:35:18'!
test06

	| account expectedSummary |
	
	account := ReceptiveAccount new.
	
	expectedSummary := OrderedCollection new.
	Withdraw register: 100 on: account. 
	
	expectedSummary add: ('ExtracciÔøΩn por 100').
	expectedSummary add: ('Balance = -100').
	
	self assert: (AccountSummary for: account) summary = expectedSummary.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/2/2021 20:35:21' prior: 50896631!
test06

	| accountA expectedSummary |
	
	accountA := ReceptiveAccount new.
	
	expectedSummary := OrderedCollection new.
	Withdraw register: 100 on: accountA. 
	
	expectedSummary add: ('ExtracciÔøΩn por 100').
	expectedSummary add: ('Balance = -100').
	
	self assert: (AccountSummary for: accountA) summary = expectedSummary.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/2/2021 20:36:34' prior: 50896645!
test06

	| accountA accountB portfolio expectedSummary |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	
	expectedSummary := OrderedCollection new.
	Withdraw register: 100 on: accountA. 
	Withdraw register: 100 on: accountB. 
	Withdraw register: 100 on: accountA. 
	Withdraw register: 100 on: accountB. 
	Deposit register: 1000 on: accountA. 
	Deposit register: 1000 on: accountB. 
	
	expectedSummary add: ('ExtracciÔøΩn por 100').
	expectedSummary add: ('Balance = -100').
	
	self assert: (AccountSummary for: accountA) summary = expectedSummary.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/2/2021 20:37:31' prior: 50896659!
test06

	| accountA accountB portfolio expectedSummary |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	portfolio := Portfolio new.
	
	portfolio register: accountA.
	portfolio register: accountB.
	
	expectedSummary := OrderedCollection new.
	Withdraw register: 100 on: accountA. 
	Withdraw register: 100 on: accountB. 
	Withdraw register: 100 on: accountA. 
	Withdraw register: 100 on: accountB. 
	Deposit register: 1000 on: accountA. 
	Deposit register: 1000 on: accountB. 
	
	expectedSummary add: ('ExtracciÔøΩn por 100').
	expectedSummary add: ('Balance = -100').
	
	self assert: (AccountSummary for: accountA) summary = expectedSummary.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/2/2021 20:37:49' prior: 50896681!
test06

	| accountA accountB portfolio expectedSummaryA |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	portfolio := Portfolio new.
	
	portfolio register: accountA.
	portfolio register: accountB.
	
	expectedSummaryA := OrderedCollection new.
	Withdraw register: 100 on: accountA. 
	Withdraw register: 100 on: accountB. 
	Withdraw register: 100 on: accountA. 
	Withdraw register: 100 on: accountB. 
	Deposit register: 1000 on: accountA. 
	Deposit register: 1000 on: accountB. 
	
	expectedSummaryA add: ('ExtracciÔøΩn por 100').
	expectedSummaryA add: ('Balance = -100').
	
	self assert: (AccountSummary for: accountA) summary = expectedSummaryA.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/2/2021 20:38:09' prior: 50896706!
test06

	| accountA accountB portfolio expectedSummaryA |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	portfolio := Portfolio new.
	
	portfolio register: accountA.
	portfolio register: accountB.
	
	expectedSummaryA := OrderedCollection new.
	Withdraw register: 100 on: accountA. 
	Withdraw register: 100 on: accountB. 
	Withdraw register: 100 on: accountA. 
	Withdraw register: 100 on: accountB. 
	Deposit register: 1000 on: accountA. 
	Deposit register: 1000 on: accountB. 
	
	expectedSummaryA add: ('ExtracciÔøΩn por 100').
	expectedSummaryA add: ('Balance = -100').
	
	self assert: (AccountSummary for: accountA) summary = expectedSummaryA.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/2/2021 20:38:13' prior: 50896731!
test06

	| accountA accountB portfolio expectedSummary |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	portfolio := Portfolio new.
	
	portfolio register: accountA.
	portfolio register: accountB.
	
	expectedSummary := OrderedCollection new.
	Withdraw register: 100 on: accountA. 
	Withdraw register: 100 on: accountB. 
	Withdraw register: 100 on: accountA. 
	Withdraw register: 100 on: accountB. 
	Deposit register: 1000 on: accountA. 
	Deposit register: 1000 on: accountB. 
	
	expectedSummary add: ('ExtracciÔøΩn por 100').
	expectedSummary add: ('Balance = -100').
	
	self assert: (AccountSummary for: accountA) summary = expectedSummary.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/2/2021 20:38:59' prior: 50896756!
test06

	| accountA accountB portfolio expectedSummary |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	portfolio := Portfolio new.
	
	portfolio register: accountA.
	portfolio register: accountB.
	
	expectedSummary := OrderedCollection new.
	Withdraw register: 100 on: accountA. 
	Withdraw register: 100 on: accountB. 
	Withdraw register: 100 on: accountA. 
	Withdraw register: 100 on: accountB. 
	Deposit register: 1000 on: accountA. 
	Deposit register: 1000 on: accountB. 
	
	expectedSummary add: ('DepÔøΩsito por 2000').
	expectedSummary add: ('ExtracciÔøΩn por 400').
	expectedSummary add: ('Balance = 1600').
	
	self assert: (AccountSummary for: portfolio) summary = expectedSummary.! !

!testRun: #AccountSummaryTest #test06 stamp: 'lmalvarez 6/2/2021 20:39:01'!
ERROR!

!testRun: #AccountSummaryTest #test06 stamp: 'lmalvarez 6/2/2021 20:39:01'!
ERROR!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/2/2021 20:39:27' prior: 50896781!
test06

	| accountA accountB portfolio expectedSummary |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	portfolio := Portfolio new.
	
	portfolio with: accountA.
	portfolio with: accountB.
	
	expectedSummary := OrderedCollection new.
	Withdraw register: 100 on: accountA. 
	Withdraw register: 100 on: accountB. 
	Withdraw register: 100 on: accountA. 
	Withdraw register: 100 on: accountB. 
	Deposit register: 1000 on: accountA. 
	Deposit register: 1000 on: accountB. 
	
	expectedSummary add: ('DepÔøΩsito por 2000').
	expectedSummary add: ('ExtracciÔøΩn por 400').
	expectedSummary add: ('Balance = 1600').
	
	self assert: (AccountSummary for: portfolio) summary = expectedSummary.! !

!testRun: #AccountSummaryTest #test06 stamp: 'lmalvarez 6/2/2021 20:39:29'!
ERROR!

!testRun: #AccountSummaryTest #test06 stamp: 'lmalvarez 6/2/2021 20:39:29'!
ERROR!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/2/2021 20:39:36' prior: 50896812!
test06

	| accountA accountB portfolio expectedSummary |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	portfolio := Portfolio new.
	
	portfolio register: accountA.
	portfolio register: accountB.
	
	expectedSummary := OrderedCollection new.
	Withdraw register: 100 on: accountA. 
	Withdraw register: 100 on: accountB. 
	Withdraw register: 100 on: accountA. 
	Withdraw register: 100 on: accountB. 
	Deposit register: 1000 on: accountA. 
	Deposit register: 1000 on: accountB. 
	
	expectedSummary add: ('DepÔøΩsito por 2000').
	expectedSummary add: ('ExtracciÔøΩn por 400').
	expectedSummary add: ('Balance = 1600').
	
	self assert: (AccountSummary for: portfolio) summary = expectedSummary.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/2/2021 20:39:52' prior: 50896843!
test06

	| accountA accountB portfolio expectedSummary |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	portfolio := Portfolio new.
	
	portfolio add: accountA.
	portfolio add: accountB.
	
	expectedSummary := OrderedCollection new.
	Withdraw register: 100 on: accountA. 
	Withdraw register: 100 on: accountB. 
	Withdraw register: 100 on: accountA. 
	Withdraw register: 100 on: accountB. 
	Deposit register: 1000 on: accountA. 
	Deposit register: 1000 on: accountB. 
	
	expectedSummary add: ('DepÔøΩsito por 2000').
	expectedSummary add: ('ExtracciÔøΩn por 400').
	expectedSummary add: ('Balance = 1600').
	
	self assert: (AccountSummary for: portfolio) summary = expectedSummary.! !

!testRun: #AccountSummaryTest #test06 stamp: 'lmalvarez 6/2/2021 20:39:54'!
FAILURE!

!testRun: #AccountSummaryTest #test06 stamp: 'lmalvarez 6/2/2021 20:39:54'!
FAILURE!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/2/2021 20:41:13' prior: 50896869!
test06

	| accountA accountB portfolio expectedSummary accountSumm |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	portfolio := Portfolio new.
	
	portfolio add: accountA.
	portfolio add: accountB.
	
	expectedSummary := OrderedCollection new.
	Withdraw register: 100 on: accountA. 
	Withdraw register: 100 on: accountB. 
	Withdraw register: 100 on: accountA. 
	Withdraw register: 100 on: accountB. 
	Deposit register: 1000 on: accountA. 
	Deposit register: 1000 on: accountB. 
	
	expectedSummary add: ('DepÔøΩsito por 2000').
	expectedSummary add: ('ExtracciÔøΩn por 400').
	expectedSummary add: ('Balance = 1600').
	
	accountSumm := AccountSummary for: portfolio.
	
	self assert: (AccountSummary for: portfolio) summary = expectedSummary.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/2/2021 20:41:29' prior: 50896900!
test06

	| accountA accountB portfolio expectedSummary accountSumm |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	portfolio := Portfolio new.
	
	portfolio add: accountA.
	portfolio add: accountB.
	
	expectedSummary := OrderedCollection new.
	Withdraw register: 100 on: accountA. 
	Withdraw register: 100 on: accountB. 
	Withdraw register: 100 on: accountA. 
	Withdraw register: 100 on: accountB. 
	Deposit register: 1000 on: accountA. 
	Deposit register: 1000 on: accountB. 
	
	expectedSummary add: ('DepÔøΩsito por 2000').
	expectedSummary add: ('ExtracciÔøΩn por 400').
	expectedSummary add: ('Balance = 1600').
	
	accountSumm := AccountSummary for: portfolio.
	
	self assert: accountSumm summary = expectedSummary.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/2/2021 20:41:49' prior: 50896928!
test06

	| accountA accountB portfolio expectedSummary accountSumm |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	portfolio := Portfolio new.
	
	expectedSummary := OrderedCollection new.
	Withdraw register: 100 on: accountA. 
	Withdraw register: 100 on: accountB. 
	Withdraw register: 100 on: accountA. 
	Withdraw register: 100 on: accountB. 
	Deposit register: 1000 on: accountA. 
	Deposit register: 1000 on: accountB. 
	
	portfolio add: accountA.
	portfolio add: accountB.
	
	expectedSummary add: ('DepÔøΩsito por 2000').
	expectedSummary add: ('ExtracciÔøΩn por 400').
	expectedSummary add: ('Balance = 1600').
	
	accountSumm := AccountSummary for: portfolio.
	
	self assert: accountSumm summary = expectedSummary.! !

!testRun: #AccountSummaryTest #test06 stamp: 'lmalvarez 6/2/2021 20:41:51'!
FAILURE!

!testRun: #AccountSummaryTest #test06 stamp: 'lmalvarez 6/2/2021 20:41:51'!
FAILURE!

!testRun: #AccountSummaryTest #test06 stamp: 'lmalvarez 6/2/2021 20:44:11'!
FAILURE!

!testRun: #AccountSummaryTest #test06 stamp: 'lmalvarez 6/2/2021 20:44:11'!
FAILURE!

self summary!

self summary!

self summary!

self summary!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/2/2021 20:46:13' prior: 50896955!
test06

	| accountA accountB portfolio expectedSummary accountSumm |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	portfolio := Portfolio new.
	
	expectedSummary := OrderedCollection new.
	Withdraw register: 100 on: accountA. 
	Withdraw register: 100 on: accountB. 
	Withdraw register: 100 on: accountA. 
	Withdraw register: 100 on: accountB. 
	Deposit register: 1000 on: accountA. 
	Deposit register: 1000 on: accountB. 
	
	portfolio add: accountA.
	portfolio add: accountB.
	
	expectedSummary add: ('ExtracciÔøΩn por 100').
	expectedSummary add: ('ExtracciÔøΩn por 100').
	expectedSummary add: ('DepÔøΩsito por 1000').
	expectedSummary add: ('ExtracciÔøΩn por 100').
	expectedSummary add: ('ExtracciÔøΩn por 100').
	expectedSummary add: ('DepÔøΩsito por 1000').
	expectedSummary add: ('Balance = 1600').
	
	accountSumm := AccountSummary for: portfolio.
	
	self assert: accountSumm summary = expectedSummary.! !

!testRun: #AccountSummaryTest #test06 stamp: 'lmalvarez 6/2/2021 20:46:15'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'lmalvarez 6/2/2021 20:46:17'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'lmalvarez 6/2/2021 20:46:17'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'lmalvarez 6/2/2021 20:46:17'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'lmalvarez 6/2/2021 20:46:17'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'lmalvarez 6/2/2021 20:46:17'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'lmalvarez 6/2/2021 20:46:17'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/2/2021 20:57:08'!
test01NewAccountShouldHaveASummaryWithNoTransactionsAndABalanceOfCero

	| accountSummary |
	
	accountSummary := AccountSummary for: ReceptiveAccount new.
	
	self assert: accountSummary summary = (OrderedCollection with: ('Balance = 0')).! !

!methodRemoval: AccountSummaryTest #test01 stamp: 'lmalvarez 6/2/2021 20:57:08'!
test01

	| accountSummary |
	
	accountSummary := AccountSummary for: ReceptiveAccount new.
	
	self assert: accountSummary summary = (OrderedCollection with: ('Balance = 0')).!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/2/2021 20:59:38'!
test02SummaryOfAnAccountWithOneDepositShouldIncludeThatDeposit

	| account expectedSummary deposit |
	
	account := ReceptiveAccount new.
	
	expectedSummary := OrderedCollection new.
	deposit := Deposit register: 100 on: account. 
	
	expectedSummary add: ('DepÔøΩsito por ', deposit value asString).
	expectedSummary add: ('Balance = 100').
	
	self assert: (AccountSummary for: account) summary = expectedSummary.! !

!methodRemoval: AccountSummaryTest #test02 stamp: 'lmalvarez 6/2/2021 20:59:38'!
test02

	| account expectedSummary deposit |
	
	account := ReceptiveAccount new.
	
	expectedSummary := OrderedCollection new.
	deposit := Deposit register: 100 on: account. 
	
	expectedSummary add: ('DepÔøΩsito por ', deposit value asString).
	expectedSummary add: ('Balance = 100').
	
	self assert: (AccountSummary for: account) summary = expectedSummary.!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/2/2021 21:00:10'!
test03SummaryOfAnAccountWithMultipleDepositsShouldIncludeEachDeposit

	| account expectedSummary |
	
	account := ReceptiveAccount new.
	
	expectedSummary := OrderedCollection new.
	Deposit register: 100 on: account. 
	Deposit register: 500 on: account. 
	Deposit register: 1000 on: account. 
	
	expectedSummary add: ('DepÔøΩsito por 100').
	expectedSummary add: ('DepÔøΩsito por 500').
	expectedSummary add: ('DepÔøΩsito por 1000').
	expectedSummary add: ('Balance = 1600').
	
	self assert: (AccountSummary for: account) summary = expectedSummary.! !

!methodRemoval: AccountSummaryTest #test03 stamp: 'lmalvarez 6/2/2021 21:00:10'!
test03

	| account expectedSummary |
	
	account := ReceptiveAccount new.
	
	expectedSummary := OrderedCollection new.
	Deposit register: 100 on: account. 
	Deposit register: 500 on: account. 
	Deposit register: 1000 on: account. 
	
	expectedSummary add: ('DepÔøΩsito por 100').
	expectedSummary add: ('DepÔøΩsito por 500').
	expectedSummary add: ('DepÔøΩsito por 1000').
	expectedSummary add: ('Balance = 1600').
	
	self assert: (AccountSummary for: account) summary = expectedSummary.!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/2/2021 21:00:41'!
test04SummaryOfAnAccountWithOneWithdrawShouldIncludeThatWithdraw

	| account expectedSummary |
	
	account := ReceptiveAccount new.
	
	expectedSummary := OrderedCollection new.
	Withdraw register: 100 on: account. 
	
	expectedSummary add: ('ExtracciÔøΩn por 100').
	expectedSummary add: ('Balance = -100').
	
	self assert: (AccountSummary for: account) summary = expectedSummary.! !

!methodRemoval: AccountSummaryTest #test04 stamp: 'lmalvarez 6/2/2021 21:00:41'!
test04

	| account expectedSummary |
	
	account := ReceptiveAccount new.
	
	expectedSummary := OrderedCollection new.
	Withdraw register: 100 on: account. 
	
	expectedSummary add: ('ExtracciÔøΩn por 100').
	expectedSummary add: ('Balance = -100').
	
	self assert: (AccountSummary for: account) summary = expectedSummary.!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/2/2021 21:01:36'!
test05SummaryOfTwoAccountsThatMadeATransferenceShouldEachIncludeThatTransference

	| accountA accountB expectedSummaryA expectedSummaryB |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	
	expectedSummaryA := OrderedCollection new.
	expectedSummaryB := OrderedCollection new.
	Transference from: accountA to: accountB  anAmountOf: 100.
	
	expectedSummaryA add: ('Salida por transferencia de 100').
	expectedSummaryA add: ('Balance = -100').
	expectedSummaryB add: ('Entrada por transferencia de 100').
	expectedSummaryB add: ('Balance = 100').
	
	self assert: (AccountSummary for: accountA ) summary = expectedSummaryA.
	self assert: (AccountSummary for: accountB ) summary = expectedSummaryB.! !

!methodRemoval: AccountSummaryTest #test05 stamp: 'lmalvarez 6/2/2021 21:01:36'!
test05

	| accountA accountB expectedSummaryA expectedSummaryB |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	
	expectedSummaryA := OrderedCollection new.
	expectedSummaryB := OrderedCollection new.
	Transference from: accountA to: accountB  anAmountOf: 100.
	
	expectedSummaryA add: ('Salida por transferencia de 100').
	expectedSummaryA add: ('Balance = -100').
	expectedSummaryB add: ('Entrada por transferencia de 100').
	expectedSummaryB add: ('Balance = 100').
	
	self assert: (AccountSummary for: accountA ) summary = expectedSummaryA.
	self assert: (AccountSummary for: accountB ) summary = expectedSummaryB.!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/2/2021 21:03:27'!
test01NetReportOfANewAccountShouldReturnCero

	| transferNet |
	
	transferNet := TransferNet for: ReceptiveAccount new.
	
	self assert: transferNet summary = 0.! !

!methodRemoval: TransferNetTest #test01 stamp: 'lmalvarez 6/2/2021 21:03:27'!
test01

	| transferNet |
	
	transferNet := TransferNet for: ReceptiveAccount new.
	
	self assert: transferNet summary = 0.!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/2/2021 21:04:28'!
test02NetReportOfEachAccountInATransferenceShouldReturnTheSameValueNegated

	| transferNetA transferNetB accountA accountB |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	
	transferNetA := TransferNet for: accountA.
	transferNetB := TransferNet for: accountB.
	
	Transference from: accountA to: accountB anAmountOf: 100.
	
	self assert: transferNetA summary = -100.
	self assert: transferNetB summary = 100.! !

!methodRemoval: TransferNetTest #test02 stamp: 'lmalvarez 6/2/2021 21:04:28'!
test02

	| transferNetA transferNetB accountA accountB |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	
	transferNetA := TransferNet for: accountA.
	transferNetB := TransferNet for: accountB.
	
	Transference from: accountA to: accountB anAmountOf: 100.
	
	self assert: transferNetA summary = -100.
	self assert: transferNetB summary = 100.!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 'lmalvarez 6/2/2021 21:05:46'!
test03NetReportOfEachAccountInATransferenceShouldNotCountNormalTransactions

	| transferNetA transferNetB accountA accountB |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	
	transferNetA := TransferNet for: accountA.
	transferNetB := TransferNet for: accountB.
	
	Deposit register: 500 on: accountA.
	Withdraw register: 600 on: accountB.
	
	Transference from: accountA to: accountB anAmountOf: 100.
	
	self assert: transferNetA summary = -100.
	self assert: transferNetB summary = 100.! !

!methodRemoval: TransferNetTest #test03 stamp: 'lmalvarez 6/2/2021 21:05:46'!
test03

	| transferNetA transferNetB accountA accountB |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	
	transferNetA := TransferNet for: accountA.
	transferNetB := TransferNet for: accountB.
	
	Deposit register: 500 on: accountA.
	Withdraw register: 600 on: accountB.
	
	Transference from: accountA to: accountB anAmountOf: 100.
	
	self assert: transferNetA summary = -100.
	self assert: transferNetB summary = 100.!

!testRun: #TransferNetTest #test01NetReportOfANewAccountShouldReturnCero stamp: 'lmalvarez 6/2/2021 21:06:08'!
PASSED!

!testRun: #TransferNetTest #test02NetReportOfEachAccountInATransferenceShouldReturnTheSameValueNegated stamp: 'lmalvarez 6/2/2021 21:06:08'!
PASSED!

!testRun: #TransferNetTest #test03NetReportOfEachAccountInATransferenceShouldNotCountNormalTransactions stamp: 'lmalvarez 6/2/2021 21:06:08'!
PASSED!

!testRun: #AccountSummaryTest #test01NewAccountShouldHaveASummaryWithNoTransactionsAndABalanceOfCero stamp: 'lmalvarez 6/2/2021 21:08:35'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAnAccountWithOneDepositShouldIncludeThatDeposit stamp: 'lmalvarez 6/2/2021 21:08:35'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAnAccountWithMultipleDepositsShouldIncludeEachDeposit stamp: 'lmalvarez 6/2/2021 21:08:35'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAnAccountWithOneWithdrawShouldIncludeThatWithdraw stamp: 'lmalvarez 6/2/2021 21:08:35'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfTwoAccountsThatMadeATransferenceShouldEachIncludeThatTransference stamp: 'lmalvarez 6/2/2021 21:08:35'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'lmalvarez 6/2/2021 21:08:35'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'lmalvarez 6/2/2021 21:08:39'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'lmalvarez 6/2/2021 21:08:39'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'lmalvarez 6/2/2021 21:08:39'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'lmalvarez 6/2/2021 21:08:39'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'lmalvarez 6/2/2021 21:08:39'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'lmalvarez 6/2/2021 21:08:39'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'lmalvarez 6/2/2021 21:08:39'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'lmalvarez 6/2/2021 21:08:39'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'lmalvarez 6/2/2021 21:08:39'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'lmalvarez 6/2/2021 21:08:39'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'lmalvarez 6/2/2021 21:08:39'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'lmalvarez 6/2/2021 21:08:39'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'lmalvarez 6/2/2021 21:08:39'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'lmalvarez 6/2/2021 21:08:39'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'lmalvarez 6/2/2021 21:08:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lmalvarez 6/2/2021 21:08:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lmalvarez 6/2/2021 21:08:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lmalvarez 6/2/2021 21:08:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lmalvarez 6/2/2021 21:08:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lmalvarez 6/2/2021 21:08:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lmalvarez 6/2/2021 21:08:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lmalvarez 6/2/2021 21:08:41'!
PASSED!

!testRun: #TransferNetTest #test01NetReportOfANewAccountShouldReturnCero stamp: 'lmalvarez 6/2/2021 21:08:43'!
PASSED!

!testRun: #TransferNetTest #test02NetReportOfEachAccountInATransferenceShouldReturnTheSameValueNegated stamp: 'lmalvarez 6/2/2021 21:08:43'!
PASSED!

!testRun: #TransferNetTest #test03NetReportOfEachAccountInATransferenceShouldNotCountNormalTransactions stamp: 'lmalvarez 6/2/2021 21:08:43'!
PASSED!

!testRun: #TransferenceTest #test01TransferenceBetweenTwoAccountsRetailsTheAmountSpecified stamp: 'lmalvarez 6/2/2021 21:08:45'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceBetweenTwoAccountsRetailsAnyAmount stamp: 'lmalvarez 6/2/2021 21:08:45'!
PASSED!

!testRun: #TransferenceTest #test03TransferenceAppearsInBothAccountsTransactionsAndAffectsTheirBalanceAsItShould stamp: 'lmalvarez 6/2/2021 21:08:45'!
PASSED!

!testRun: #TransferenceTest #test04TransferenceTransactionsCanBeAccessedBetweenEachOther stamp: 'lmalvarez 6/2/2021 21:08:45'!
PASSED!

!testRun: #AccountSummaryTest #test01NewAccountShouldHaveASummaryWithNoTransactionsAndABalanceOfCero stamp: 'lmalvarez 6/2/2021 21:08:48'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAnAccountWithOneDepositShouldIncludeThatDeposit stamp: 'lmalvarez 6/2/2021 21:08:48'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAnAccountWithMultipleDepositsShouldIncludeEachDeposit stamp: 'lmalvarez 6/2/2021 21:08:48'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAnAccountWithOneWithdrawShouldIncludeThatWithdraw stamp: 'lmalvarez 6/2/2021 21:08:48'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfTwoAccountsThatMadeATransferenceShouldEachIncludeThatTransference stamp: 'lmalvarez 6/2/2021 21:08:48'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'lmalvarez 6/2/2021 21:08:48'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'lmalvarez 6/2/2021 21:08:48'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'lmalvarez 6/2/2021 21:08:48'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'lmalvarez 6/2/2021 21:08:48'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'lmalvarez 6/2/2021 21:08:48'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'lmalvarez 6/2/2021 21:08:48'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'lmalvarez 6/2/2021 21:08:48'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'lmalvarez 6/2/2021 21:08:48'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'lmalvarez 6/2/2021 21:08:48'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'lmalvarez 6/2/2021 21:08:48'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'lmalvarez 6/2/2021 21:08:48'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'lmalvarez 6/2/2021 21:08:48'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'lmalvarez 6/2/2021 21:08:48'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'lmalvarez 6/2/2021 21:08:48'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'lmalvarez 6/2/2021 21:08:48'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'lmalvarez 6/2/2021 21:08:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lmalvarez 6/2/2021 21:08:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lmalvarez 6/2/2021 21:08:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lmalvarez 6/2/2021 21:08:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lmalvarez 6/2/2021 21:08:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lmalvarez 6/2/2021 21:08:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lmalvarez 6/2/2021 21:08:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lmalvarez 6/2/2021 21:08:48'!
PASSED!

!testRun: #TransferNetTest #test01NetReportOfANewAccountShouldReturnCero stamp: 'lmalvarez 6/2/2021 21:08:48'!
PASSED!

!testRun: #TransferNetTest #test02NetReportOfEachAccountInATransferenceShouldReturnTheSameValueNegated stamp: 'lmalvarez 6/2/2021 21:08:48'!
PASSED!

!testRun: #TransferNetTest #test03NetReportOfEachAccountInATransferenceShouldNotCountNormalTransactions stamp: 'lmalvarez 6/2/2021 21:08:48'!
PASSED!

!testRun: #TransferenceTest #test01TransferenceBetweenTwoAccountsRetailsTheAmountSpecified stamp: 'lmalvarez 6/2/2021 21:08:48'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceBetweenTwoAccountsRetailsAnyAmount stamp: 'lmalvarez 6/2/2021 21:08:48'!
PASSED!

!testRun: #TransferenceTest #test03TransferenceAppearsInBothAccountsTransactionsAndAffectsTheirBalanceAsItShould stamp: 'lmalvarez 6/2/2021 21:08:48'!
PASSED!

!testRun: #TransferenceTest #test04TransferenceTransactionsCanBeAccessedBetweenEachOther stamp: 'lmalvarez 6/2/2021 21:08:48'!
PASSED!

----SNAPSHOT----(2 June 2021 21:09:50) CuisUniversity-4532.image priorSource: 18078868!

----STARTUP---- (2 June 2021 21:15:36) as C:\Users\Lukee\Desktop\CuisToTrain\CuisUniversity-4532.image!


!testRun: #AccountSummaryTest #test01NewAccountShouldHaveASummaryWithNoTransactionsAndABalanceOfCero stamp: 'lmalvarez 6/2/2021 21:15:55'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAnAccountWithOneDepositShouldIncludeThatDeposit stamp: 'lmalvarez 6/2/2021 21:15:55'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAnAccountWithMultipleDepositsShouldIncludeEachDeposit stamp: 'lmalvarez 6/2/2021 21:15:55'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAnAccountWithOneWithdrawShouldIncludeThatWithdraw stamp: 'lmalvarez 6/2/2021 21:15:55'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfTwoAccountsThatMadeATransferenceShouldEachIncludeThatTransference stamp: 'lmalvarez 6/2/2021 21:15:55'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'lmalvarez 6/2/2021 21:15:55'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'lmalvarez 6/2/2021 21:15:55'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'lmalvarez 6/2/2021 21:15:55'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'lmalvarez 6/2/2021 21:15:55'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'lmalvarez 6/2/2021 21:15:55'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'lmalvarez 6/2/2021 21:15:55'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'lmalvarez 6/2/2021 21:15:55'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'lmalvarez 6/2/2021 21:15:55'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'lmalvarez 6/2/2021 21:15:55'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'lmalvarez 6/2/2021 21:15:55'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'lmalvarez 6/2/2021 21:15:55'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'lmalvarez 6/2/2021 21:15:55'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'lmalvarez 6/2/2021 21:15:55'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'lmalvarez 6/2/2021 21:15:55'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'lmalvarez 6/2/2021 21:15:55'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'lmalvarez 6/2/2021 21:15:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lmalvarez 6/2/2021 21:15:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lmalvarez 6/2/2021 21:15:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lmalvarez 6/2/2021 21:15:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lmalvarez 6/2/2021 21:15:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lmalvarez 6/2/2021 21:15:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lmalvarez 6/2/2021 21:15:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lmalvarez 6/2/2021 21:15:56'!
PASSED!

!testRun: #TransferNetTest #test01NetReportOfANewAccountShouldReturnCero stamp: 'lmalvarez 6/2/2021 21:15:56'!
PASSED!

!testRun: #TransferNetTest #test02NetReportOfEachAccountInATransferenceShouldReturnTheSameValueNegated stamp: 'lmalvarez 6/2/2021 21:15:56'!
PASSED!

!testRun: #TransferNetTest #test03NetReportOfEachAccountInATransferenceShouldNotCountNormalTransactions stamp: 'lmalvarez 6/2/2021 21:15:56'!
PASSED!

!testRun: #TransferenceTest #test01TransferenceBetweenTwoAccountsRetailsTheAmountSpecified stamp: 'lmalvarez 6/2/2021 21:15:56'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceBetweenTwoAccountsRetailsAnyAmount stamp: 'lmalvarez 6/2/2021 21:15:56'!
PASSED!

!testRun: #TransferenceTest #test03TransferenceAppearsInBothAccountsTransactionsAndAffectsTheirBalanceAsItShould stamp: 'lmalvarez 6/2/2021 21:15:56'!
PASSED!

!testRun: #TransferenceTest #test04TransferenceTransactionsCanBeAccessedBetweenEachOther stamp: 'lmalvarez 6/2/2021 21:15:56'!
PASSED!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'lmalvarez 6/2/2021 22:22:12'!
answerReport: aReport

	| reportsCollection |
	
	reportsCollection := OrderedCollection new.
	
	self transactions do: [:aTransaction | reportsCollection add: (aTransaction answerReport: aReport) ].
	
	^reportsCollection! !
!AccountSummary methodsFor: 'reports' stamp: 'lmalvarez 6/2/2021 22:22:56' prior: 50896168!
summary

	| accountSummary |
	
	"accountSummary := OrderedCollection new.

	account transactions do: [:aTransaction | accountSummary add: (aTransaction answerReport: self)]."
	
	accountSummary := account answerReport: self.
	
	accountSummary add: ('Balance = ', account balance asString).
	
	^ accountSummary! !
!TransferNet methodsFor: 'reports' stamp: 'lmalvarez 6/2/2021 22:25:47' prior: 50896525!
summary
	
	| netValue |
	
	"netValue := account transactions sum: [:aTransaction | aTransaction answerReport: self ] ifEmpty: [0]."
	netValue := (account answerReport: self) inject: 0 into: [:anAdder :anAmount | anAdder + anAmount].
	
	^netValue
	
	"^ ((account transactions select: [:aTransaction | (aTransaction isKindOf: TransferenceDeposit)]) sum: [:aTransaction | aTransaction value] ifEmpty: [0]) 
		- ((account transactions select: [:aTransaction | (aTransaction isKindOf: TransferenceWithdraw)] ) sum: [:aTransaction | aTransaction value] ifEmpty: [0])."! !

!testRun: #TransferNetTest #test01NetReportOfANewAccountShouldReturnCero stamp: 'lmalvarez 6/2/2021 22:25:50'!
PASSED!

!testRun: #TransferNetTest #test02NetReportOfEachAccountInATransferenceShouldReturnTheSameValueNegated stamp: 'lmalvarez 6/2/2021 22:25:50'!
PASSED!

!testRun: #TransferNetTest #test03NetReportOfEachAccountInATransferenceShouldNotCountNormalTransactions stamp: 'lmalvarez 6/2/2021 22:25:50'!
PASSED!

!testRun: #AccountSummaryTest #test01NewAccountShouldHaveASummaryWithNoTransactionsAndABalanceOfCero stamp: 'lmalvarez 6/2/2021 22:25:53'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAnAccountWithOneDepositShouldIncludeThatDeposit stamp: 'lmalvarez 6/2/2021 22:25:53'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAnAccountWithMultipleDepositsShouldIncludeEachDeposit stamp: 'lmalvarez 6/2/2021 22:25:53'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAnAccountWithOneWithdrawShouldIncludeThatWithdraw stamp: 'lmalvarez 6/2/2021 22:25:53'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfTwoAccountsThatMadeATransferenceShouldEachIncludeThatTransference stamp: 'lmalvarez 6/2/2021 22:25:53'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'lmalvarez 6/2/2021 22:25:53'!
ERROR!

!testRun: #AccountSummaryTest #test06 stamp: 'lmalvarez 6/2/2021 22:25:53'!
ERROR!

!testRun: #AccountSummaryTest #test06 stamp: 'lmalvarez 6/2/2021 22:26:01'!
ERROR!

!testRun: #AccountSummaryTest #test06 stamp: 'lmalvarez 6/2/2021 22:26:01'!
ERROR!

!methodRemoval: AccountSummaryTest #test06 stamp: 'lmalvarez 6/2/2021 22:26:05'!
test06

	| accountA accountB portfolio expectedSummary accountSumm |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	portfolio := Portfolio new.
	
	expectedSummary := OrderedCollection new.
	Withdraw register: 100 on: accountA. 
	Withdraw register: 100 on: accountB. 
	Withdraw register: 100 on: accountA. 
	Withdraw register: 100 on: accountB. 
	Deposit register: 1000 on: accountA. 
	Deposit register: 1000 on: accountB. 
	
	portfolio add: accountA.
	portfolio add: accountB.
	
	expectedSummary add: ('ExtracciÔøΩn por 100').
	expectedSummary add: ('ExtracciÔøΩn por 100').
	expectedSummary add: ('DepÔøΩsito por 1000').
	expectedSummary add: ('ExtracciÔøΩn por 100').
	expectedSummary add: ('ExtracciÔøΩn por 100').
	expectedSummary add: ('DepÔøΩsito por 1000').
	expectedSummary add: ('Balance = 1600').
	
	accountSumm := AccountSummary for: portfolio.
	
	self assert: accountSumm summary = expectedSummary.!

!testRun: #AccountSummaryTest #test01NewAccountShouldHaveASummaryWithNoTransactionsAndABalanceOfCero stamp: 'lmalvarez 6/2/2021 22:26:07'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAnAccountWithOneDepositShouldIncludeThatDeposit stamp: 'lmalvarez 6/2/2021 22:26:07'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAnAccountWithMultipleDepositsShouldIncludeEachDeposit stamp: 'lmalvarez 6/2/2021 22:26:07'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAnAccountWithOneWithdrawShouldIncludeThatWithdraw stamp: 'lmalvarez 6/2/2021 22:26:07'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfTwoAccountsThatMadeATransferenceShouldEachIncludeThatTransference stamp: 'lmalvarez 6/2/2021 22:26:07'!
PASSED!
!AccountSummary methodsFor: 'reports' stamp: 'lmalvarez 6/2/2021 22:35:33' prior: 50897753!
summary

	| accountSummary |
	
	accountSummary := account answerReport: self.
	
	accountSummary add: ('Balance = ', account balance asString).
	
	^ accountSummary! !
!TransferNet methodsFor: 'reports' stamp: 'lmalvarez 6/2/2021 22:35:42' prior: 50897766!
summary
	
	| netValue |
	
	netValue := (account answerReport: self) inject: 0 into: [:anAdder :anAmount | anAdder + anAmount].
	
	^netValue
	! !
!Account methodsFor: 'transactions' stamp: 'lmalvarez 6/2/2021 22:40:58'!
answerReport: aReport

	| reportsCollection |
	
	reportsCollection := OrderedCollection new.
	
	self transactions do: [:aTransaction | reportsCollection add: (aTransaction answerReport: aReport) ].
	
	^reportsCollection! !

!methodRemoval: ReceptiveAccount #answerReport: stamp: 'lmalvarez 6/2/2021 22:41:11'!
answerReport: aReport

	| reportsCollection |
	
	reportsCollection := OrderedCollection new.
	
	self transactions do: [:aTransaction | reportsCollection add: (aTransaction answerReport: aReport) ].
	
	^reportsCollection!

!testRun: #AccountSummaryTest #test01NewAccountShouldHaveASummaryWithNoTransactionsAndABalanceOfCero stamp: 'lmalvarez 6/2/2021 22:41:17'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAnAccountWithOneDepositShouldIncludeThatDeposit stamp: 'lmalvarez 6/2/2021 22:41:17'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAnAccountWithMultipleDepositsShouldIncludeEachDeposit stamp: 'lmalvarez 6/2/2021 22:41:17'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAnAccountWithOneWithdrawShouldIncludeThatWithdraw stamp: 'lmalvarez 6/2/2021 22:41:17'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfTwoAccountsThatMadeATransferenceShouldEachIncludeThatTransference stamp: 'lmalvarez 6/2/2021 22:41:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lmalvarez 6/2/2021 22:41:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lmalvarez 6/2/2021 22:41:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lmalvarez 6/2/2021 22:41:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lmalvarez 6/2/2021 22:41:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lmalvarez 6/2/2021 22:41:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lmalvarez 6/2/2021 22:41:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lmalvarez 6/2/2021 22:41:21'!
PASSED!

!testRun: #TransferNetTest #test01NetReportOfANewAccountShouldReturnCero stamp: 'lmalvarez 6/2/2021 22:41:23'!
PASSED!

!testRun: #TransferNetTest #test02NetReportOfEachAccountInATransferenceShouldReturnTheSameValueNegated stamp: 'lmalvarez 6/2/2021 22:41:23'!
PASSED!

!testRun: #TransferNetTest #test03NetReportOfEachAccountInATransferenceShouldNotCountNormalTransactions stamp: 'lmalvarez 6/2/2021 22:41:23'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 'lmalvarez 6/2/2021 22:41:52'!
test06

	| accountA accountB expectedSummaryA expectedSummaryB |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	
	expectedSummaryA := OrderedCollection new.
	expectedSummaryB := OrderedCollection new.
	Transference from: accountA to: accountB  anAmountOf: 100.
	
	expectedSummaryA add: ('Salida por transferencia de 100').
	expectedSummaryA add: ('Balance = -100').
	expectedSummaryB add: ('Entrada por transferencia de 100').
	expectedSummaryB add: ('Balance = 100').
	
	self assert: (AccountSummary for: accountA ) summary = expectedSummaryA.
	self assert: (AccountSummary for: accountB ) summary = expectedSummaryB.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'lmalvarez 6/2/2021 22:42:37' prior: 50897986!
test06

	| accountA accountB portfolio expectedSummaryA |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	portfolio := Portfolio new.
	portfolio add: accountA.
	portfolio add: accountB.
	
	expectedSummaryA := OrderedCollection new.
	Transference from: accountA to: accountB  anAmountOf: 100.
	
	expectedSummaryA add: ('Salida por transferencia de 100').
	expectedSummaryA add: ('Balance = -100').
	
	self assert: (AccountSummary for: accountA ) summary = expectedSummaryA.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'lmalvarez 6/2/2021 22:43:40' prior: 50898010!
test06

	| accountA accountB portfolio expectedSummaryA |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	portfolio := Portfolio new.
	portfolio add: accountA.
	portfolio add: accountB.
	
	expectedSummaryA := OrderedCollection new.
	Deposit register: 1000 on: accountA.
	Deposit register: 100 on: accountA.
	Deposit register: 1000 on: accountB.
	Deposit register: 100 on: accountB.
	
	expectedSummaryA add: ('Salida por transferencia de 100').
	expectedSummaryA add: ('Balance = -100').
	
	self assert: (AccountSummary for: accountA ) summary = expectedSummaryA.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'lmalvarez 6/2/2021 22:43:58' prior: 50898029!
test06

	| accountA accountB portfolio expectedSummaryA |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	portfolio := Portfolio new.
	portfolio add: accountA.
	portfolio add: accountB.
	
	expectedSummaryA := OrderedCollection new.
	Deposit register: 1000 on: accountA.
	Deposit register: 100 on: accountA.
	Deposit register: 1000 on: accountB.
	Deposit register: 100 on: accountB.
	
	Withdraw register: 500 on: accountA.
	Withdraw register: 500 on: accountB.
	
	expectedSummaryA add: ('Salida por transferencia de 100').
	expectedSummaryA add: ('Balance = -100').
	
	self assert: (AccountSummary for: accountA ) summary = expectedSummaryA.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 'lmalvarez 6/2/2021 22:45:12' prior: 50898051!
test06

	| accountA accountB portfolio expectedSummaryA |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	portfolio := Portfolio new.
	portfolio add: accountA.
	portfolio add: accountB.
	
	expectedSummaryA := OrderedCollection new.
	Deposit register: 1000 on: accountA.
	Deposit register: 100 on: accountA.
	Deposit register: 1000 on: accountB.
	Deposit register: 100 on: accountB.
	
	Withdraw register: 500 on: accountA.
	Withdraw register: 500 on: accountB.
	
	expectedSummaryA add: ('DepÔøΩsito por 1000').
	expectedSummaryA add: ('DepÔøΩsito por 100').
	expectedSummaryA add: ('ExtracciÔøΩn por 500').
	expectedSummaryA add: ('DepÔøΩsito por 1000').
	expectedSummaryA add: ('DepÔøΩsito por 100').
	expectedSummaryA add: ('ExtracciÔøΩn por 500').
	expectedSummaryA add: ('Balance = 1200').
	
	self assert: (AccountSummary for: portfolio ) summary = expectedSummaryA.! !

!testRun: #AccountSummaryTest #test06 stamp: 'lmalvarez 6/2/2021 22:45:14'!
PASSED!
!TransferNetTest methodsFor: 'tests' stamp: 'lmalvarez 6/2/2021 22:48:17'!
test04

	| transferNetA portfolio accountA accountB |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	portfolio := Portfolio new.
	portfolio add: accountA.
	portfolio add: accountB.
	
	transferNetA := TransferNet for: accountA.
	
	Deposit register: 500 on: accountA.
	Withdraw register: 600 on: accountB.
	
	Transference from: accountA to: accountB anAmountOf: 100.
	
	self assert: transferNetA summary = -100.! !
!TransferNetTest methodsFor: 'tests' stamp: 'lmalvarez 6/2/2021 22:49:36' prior: 50898108!
test04

	| transferNetA portfolio accountA accountB |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	portfolio := Portfolio new.
	portfolio add: accountA.
	portfolio add: accountB.
	
	transferNetA := TransferNet for: portfolio.
	
	Deposit register: 500 on: accountA.
	Withdraw register: 600 on: accountB.
	
	Transference from: accountA to: accountB anAmountOf: 100.
	
	self assert: transferNetA summary = -100.! !
!TransferNetTest methodsFor: 'tests' stamp: 'lmalvarez 6/2/2021 22:49:46' prior: 50898125!
test04

	| transferNet portfolio accountA accountB |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	portfolio := Portfolio new.
	portfolio add: accountA.
	portfolio add: accountB.
	
	transferNet := TransferNet for: portfolio.
	
	Deposit register: 500 on: accountA.
	Withdraw register: 600 on: accountB.
	
	Transference from: accountA to: accountB anAmountOf: 100.
	
	self assert: transferNet summary = -100.! !

----SNAPSHOT----(2 June 2021 22:53:25) CuisUniversity-4532.image priorSource: 18110138!
!TransferNetTest methodsFor: 'tests' stamp: 'lmalvarez 6/3/2021 00:06:56' prior: 50898142!
test04

	| transferNet portfolio accountA accountB |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	portfolio := Portfolio new.
	portfolio add: accountA.
	portfolio add: accountB.
	
	transferNet := TransferNet for: portfolio.
	
	Deposit register: 500 on: accountA.
	Withdraw register: 600 on: accountB.
	
	Transference from: accountA to: accountB anAmountOf: 100.
	
	self assert: transferNet summary = 0.! !

!testRun: #TransferNetTest #test04 stamp: 'lmalvarez 6/3/2021 00:06:57'!
PASSED!
!TransferNetTest methodsFor: 'tests' stamp: 'lmalvarez 6/3/2021 00:08:07' prior: 50898162!
test04

	| transferNet portfolio accountA accountB accountC |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	accountC := ReceptiveAccount new.
	portfolio := Portfolio new.
	portfolio add: accountA.
	portfolio add: accountB.
	
	transferNet := TransferNet for: portfolio.
	
	Transference from: accountC to: accountA anAmountOf: 100.
	Transference from: accountC to: accountB anAmountOf: 500.
	
	self assert: transferNet summary = 600.! !

!testRun: #TransferNetTest #test04 stamp: 'lmalvarez 6/3/2021 00:08:09'!
PASSED!
!TransferNetTest methodsFor: 'tests' stamp: 'lmalvarez 6/3/2021 00:08:26' prior: 50898181!
test04

	| transferNet portfolio accountA accountB accountC |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	accountC := ReceptiveAccount new.
	portfolio := Portfolio new.
	portfolio add: accountA.
	portfolio add: accountB.
	
	transferNet := TransferNet for: portfolio.
	
	Transference from: accountC to: accountA anAmountOf: 100.
	Transference from: accountB to: accountC anAmountOf: 500.
	
	self assert: transferNet summary = 600.! !
!TransferNetTest methodsFor: 'tests' stamp: 'lmalvarez 6/3/2021 00:08:31' prior: 50898201!
test04

	| transferNet portfolio accountA accountB accountC |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	accountC := ReceptiveAccount new.
	portfolio := Portfolio new.
	portfolio add: accountA.
	portfolio add: accountB.
	
	transferNet := TransferNet for: portfolio.
	
	Transference from: accountC to: accountA anAmountOf: 100.
	Transference from: accountB to: accountC anAmountOf: 500.
	
	self assert: transferNet summary = -400.! !

!testRun: #TransferNetTest #test04 stamp: 'lmalvarez 6/3/2021 00:08:33'!
PASSED!
!TransferNetTest methodsFor: 'tests' stamp: 'lmalvarez 6/3/2021 00:08:47' prior: 50898219!
test04

	| transferNet portfolio accountA accountB accountC |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	accountC := ReceptiveAccount new.
	portfolio := Portfolio new.
	portfolio add: accountA.
	portfolio add: accountB.
	
	transferNet := TransferNet for: portfolio.
	
	Transference from: accountC to: accountA anAmountOf: 900.
	Transference from: accountB to: accountC anAmountOf: 500.
	
	self assert: transferNet summary = 400.! !

!testRun: #TransferNetTest #test04 stamp: 'lmalvarez 6/3/2021 00:08:49'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 'lmalvarez 6/3/2021 00:09:36' prior: 50898075!
test06

	| accountA accountB portfolio expectedSummary |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	portfolio := Portfolio new.
	portfolio add: accountA.
	portfolio add: accountB.
	
	expectedSummary := OrderedCollection new.
	Deposit register: 1000 on: accountA.
	Deposit register: 100 on: accountA.
	Deposit register: 1000 on: accountB.
	Deposit register: 100 on: accountB.
	
	Withdraw register: 500 on: accountA.
	Withdraw register: 500 on: accountB.
	
	expectedSummary add: ('DepÔøΩsito por 1000').
	expectedSummary add: ('DepÔøΩsito por 100').
	expectedSummary add: ('ExtracciÔøΩn por 500').
	expectedSummary add: ('DepÔøΩsito por 1000').
	expectedSummary add: ('DepÔøΩsito por 100').
	expectedSummary add: ('ExtracciÔøΩn por 500').
	expectedSummary add: ('Balance = 1200').
	
	self assert: (AccountSummary for: portfolio ) summary = expectedSummary.! !

!testRun: #AccountSummaryTest #test06 stamp: 'lmalvarez 6/3/2021 00:09:43'!
PASSED!

!testRun: #AccountSummaryTest #test01NewAccountShouldHaveASummaryWithNoTransactionsAndABalanceOfCero stamp: 'lmalvarez 6/3/2021 00:09:44'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAnAccountWithOneDepositShouldIncludeThatDeposit stamp: 'lmalvarez 6/3/2021 00:09:44'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAnAccountWithMultipleDepositsShouldIncludeEachDeposit stamp: 'lmalvarez 6/3/2021 00:09:44'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAnAccountWithOneWithdrawShouldIncludeThatWithdraw stamp: 'lmalvarez 6/3/2021 00:09:44'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfTwoAccountsThatMadeATransferenceShouldEachIncludeThatTransference stamp: 'lmalvarez 6/3/2021 00:09:44'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'lmalvarez 6/3/2021 00:09:44'!
PASSED!

!testRun: #AccountSummaryTest #test01NewAccountShouldHaveASummaryWithNoTransactionsAndABalanceOfCero stamp: 'lmalvarez 6/3/2021 00:09:48'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAnAccountWithOneDepositShouldIncludeThatDeposit stamp: 'lmalvarez 6/3/2021 00:09:48'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAnAccountWithMultipleDepositsShouldIncludeEachDeposit stamp: 'lmalvarez 6/3/2021 00:09:48'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAnAccountWithOneWithdrawShouldIncludeThatWithdraw stamp: 'lmalvarez 6/3/2021 00:09:48'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfTwoAccountsThatMadeATransferenceShouldEachIncludeThatTransference stamp: 'lmalvarez 6/3/2021 00:09:48'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'lmalvarez 6/3/2021 00:09:48'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'lmalvarez 6/3/2021 00:09:48'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'lmalvarez 6/3/2021 00:09:48'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'lmalvarez 6/3/2021 00:09:48'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'lmalvarez 6/3/2021 00:09:48'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'lmalvarez 6/3/2021 00:09:48'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'lmalvarez 6/3/2021 00:09:48'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'lmalvarez 6/3/2021 00:09:48'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'lmalvarez 6/3/2021 00:09:48'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'lmalvarez 6/3/2021 00:09:48'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'lmalvarez 6/3/2021 00:09:48'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'lmalvarez 6/3/2021 00:09:48'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'lmalvarez 6/3/2021 00:09:48'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'lmalvarez 6/3/2021 00:09:48'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'lmalvarez 6/3/2021 00:09:48'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'lmalvarez 6/3/2021 00:09:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lmalvarez 6/3/2021 00:09:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lmalvarez 6/3/2021 00:09:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lmalvarez 6/3/2021 00:09:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lmalvarez 6/3/2021 00:09:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lmalvarez 6/3/2021 00:09:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lmalvarez 6/3/2021 00:09:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lmalvarez 6/3/2021 00:09:48'!
PASSED!

!testRun: #TransferNetTest #test01NetReportOfANewAccountShouldReturnCero stamp: 'lmalvarez 6/3/2021 00:09:48'!
PASSED!

!testRun: #TransferNetTest #test02NetReportOfEachAccountInATransferenceShouldReturnTheSameValueNegated stamp: 'lmalvarez 6/3/2021 00:09:48'!
PASSED!

!testRun: #TransferNetTest #test03NetReportOfEachAccountInATransferenceShouldNotCountNormalTransactions stamp: 'lmalvarez 6/3/2021 00:09:48'!
PASSED!

!testRun: #TransferNetTest #test04 stamp: 'lmalvarez 6/3/2021 00:09:48'!
PASSED!

!testRun: #TransferenceTest #test01TransferenceBetweenTwoAccountsRetailsTheAmountSpecified stamp: 'lmalvarez 6/3/2021 00:09:48'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceBetweenTwoAccountsRetailsAnyAmount stamp: 'lmalvarez 6/3/2021 00:09:48'!
PASSED!

!testRun: #TransferenceTest #test03TransferenceAppearsInBothAccountsTransactionsAndAffectsTheirBalanceAsItShould stamp: 'lmalvarez 6/3/2021 00:09:48'!
PASSED!

!testRun: #TransferenceTest #test04TransferenceTransactionsCanBeAccessedBetweenEachOther stamp: 'lmalvarez 6/3/2021 00:09:48'!
PASSED!

!testRun: #TransferNetTest #test01NetReportOfANewAccountShouldReturnCero stamp: 'lmalvarez 6/3/2021 00:09:56'!
PASSED!

!testRun: #TransferNetTest #test02NetReportOfEachAccountInATransferenceShouldReturnTheSameValueNegated stamp: 'lmalvarez 6/3/2021 00:09:56'!
PASSED!

!testRun: #TransferNetTest #test03NetReportOfEachAccountInATransferenceShouldNotCountNormalTransactions stamp: 'lmalvarez 6/3/2021 00:09:56'!
PASSED!

!testRun: #TransferNetTest #test04 stamp: 'lmalvarez 6/3/2021 00:09:56'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 'lmalvarez 6/3/2021 00:11:37'!
test06SummaryOfAPortfolioShouldIncludeEachPortfoliosAccountTransaction

	| accountA accountB portfolio expectedSummary |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	portfolio := Portfolio new.
	portfolio add: accountA.
	portfolio add: accountB.
	
	expectedSummary := OrderedCollection new.
	Deposit register: 1000 on: accountA.
	Deposit register: 100 on: accountA.
	Deposit register: 1000 on: accountB.
	Deposit register: 100 on: accountB.
	
	Withdraw register: 500 on: accountA.
	Withdraw register: 500 on: accountB.
	
	expectedSummary add: ('DepÔøΩsito por 1000').
	expectedSummary add: ('DepÔøΩsito por 100').
	expectedSummary add: ('ExtracciÔøΩn por 500').
	expectedSummary add: ('DepÔøΩsito por 1000').
	expectedSummary add: ('DepÔøΩsito por 100').
	expectedSummary add: ('ExtracciÔøΩn por 500').
	expectedSummary add: ('Balance = 1200').
	
	self assert: (AccountSummary for: portfolio ) summary = expectedSummary.! !

!methodRemoval: AccountSummaryTest #test06 stamp: 'lmalvarez 6/3/2021 00:11:37'!
test06

	| accountA accountB portfolio expectedSummary |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	portfolio := Portfolio new.
	portfolio add: accountA.
	portfolio add: accountB.
	
	expectedSummary := OrderedCollection new.
	Deposit register: 1000 on: accountA.
	Deposit register: 100 on: accountA.
	Deposit register: 1000 on: accountB.
	Deposit register: 100 on: accountB.
	
	Withdraw register: 500 on: accountA.
	Withdraw register: 500 on: accountB.
	
	expectedSummary add: ('DepÔøΩsito por 1000').
	expectedSummary add: ('DepÔøΩsito por 100').
	expectedSummary add: ('ExtracciÔøΩn por 500').
	expectedSummary add: ('DepÔøΩsito por 1000').
	expectedSummary add: ('DepÔøΩsito por 100').
	expectedSummary add: ('ExtracciÔøΩn por 500').
	expectedSummary add: ('Balance = 1200').
	
	self assert: (AccountSummary for: portfolio ) summary = expectedSummary.!
!AccountSummaryTest methodsFor: 'tests' stamp: 'lmalvarez 6/3/2021 00:12:06'!
test06SummaryOfAPortfolioShouldIncludeEachOfItsAccountsTransaction

	| accountA accountB portfolio expectedSummary |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	portfolio := Portfolio new.
	portfolio add: accountA.
	portfolio add: accountB.
	
	expectedSummary := OrderedCollection new.
	Deposit register: 1000 on: accountA.
	Deposit register: 100 on: accountA.
	Deposit register: 1000 on: accountB.
	Deposit register: 100 on: accountB.
	
	Withdraw register: 500 on: accountA.
	Withdraw register: 500 on: accountB.
	
	expectedSummary add: ('DepÔøΩsito por 1000').
	expectedSummary add: ('DepÔøΩsito por 100').
	expectedSummary add: ('ExtracciÔøΩn por 500').
	expectedSummary add: ('DepÔøΩsito por 1000').
	expectedSummary add: ('DepÔøΩsito por 100').
	expectedSummary add: ('ExtracciÔøΩn por 500').
	expectedSummary add: ('Balance = 1200').
	
	self assert: (AccountSummary for: portfolio ) summary = expectedSummary.! !

!methodRemoval: AccountSummaryTest #test06SummaryOfAPortfolioShouldIncludeEachPortfoliosAccountTransaction stamp: 'lmalvarez 6/3/2021 00:12:06'!
test06SummaryOfAPortfolioShouldIncludeEachPortfoliosAccountTransaction

	| accountA accountB portfolio expectedSummary |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	portfolio := Portfolio new.
	portfolio add: accountA.
	portfolio add: accountB.
	
	expectedSummary := OrderedCollection new.
	Deposit register: 1000 on: accountA.
	Deposit register: 100 on: accountA.
	Deposit register: 1000 on: accountB.
	Deposit register: 100 on: accountB.
	
	Withdraw register: 500 on: accountA.
	Withdraw register: 500 on: accountB.
	
	expectedSummary add: ('DepÔøΩsito por 1000').
	expectedSummary add: ('DepÔøΩsito por 100').
	expectedSummary add: ('ExtracciÔøΩn por 500').
	expectedSummary add: ('DepÔøΩsito por 1000').
	expectedSummary add: ('DepÔøΩsito por 100').
	expectedSummary add: ('ExtracciÔøΩn por 500').
	expectedSummary add: ('Balance = 1200').
	
	self assert: (AccountSummary for: portfolio ) summary = expectedSummary.!
!TransferNetTest methodsFor: 'tests' stamp: 'lmalvarez 6/3/2021 00:13:18'!
test04NetReportOfAPortfolioShouldReturnTheNetValueOfEachAccount

	| transferNet portfolio accountA accountB accountC |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	accountC := ReceptiveAccount new.
	portfolio := Portfolio new.
	portfolio add: accountA.
	portfolio add: accountB.
	
	transferNet := TransferNet for: portfolio.
	
	Transference from: accountC to: accountA anAmountOf: 900.
	Transference from: accountB to: accountC anAmountOf: 500.
	
	self assert: transferNet summary = 400.! !

!methodRemoval: TransferNetTest #test04 stamp: 'lmalvarez 6/3/2021 00:13:18'!
test04

	| transferNet portfolio accountA accountB accountC |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	accountC := ReceptiveAccount new.
	portfolio := Portfolio new.
	portfolio add: accountA.
	portfolio add: accountB.
	
	transferNet := TransferNet for: portfolio.
	
	Transference from: accountC to: accountA anAmountOf: 900.
	Transference from: accountB to: accountC anAmountOf: 500.
	
	self assert: transferNet summary = 400.!
!TransferNetTest methodsFor: 'tests' stamp: 'lmalvarez 6/3/2021 00:13:52'!
test04NetReportOfAPortfolioShouldReturnTheTotalSumOfEachAccountNetValue

	| transferNet portfolio accountA accountB accountC |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	accountC := ReceptiveAccount new.
	portfolio := Portfolio new.
	portfolio add: accountA.
	portfolio add: accountB.
	
	transferNet := TransferNet for: portfolio.
	
	Transference from: accountC to: accountA anAmountOf: 900.
	Transference from: accountB to: accountC anAmountOf: 500.
	
	self assert: transferNet summary = 400.! !

!methodRemoval: TransferNetTest #test04NetReportOfAPortfolioShouldReturnTheNetValueOfEachAccount stamp: 'lmalvarez 6/3/2021 00:13:52'!
test04NetReportOfAPortfolioShouldReturnTheNetValueOfEachAccount

	| transferNet portfolio accountA accountB accountC |
	
	accountA := ReceptiveAccount new.
	accountB := ReceptiveAccount new.
	accountC := ReceptiveAccount new.
	portfolio := Portfolio new.
	portfolio add: accountA.
	portfolio add: accountB.
	
	transferNet := TransferNet for: portfolio.
	
	Transference from: accountC to: accountA anAmountOf: 900.
	Transference from: accountB to: accountC anAmountOf: 500.
	
	self assert: transferNet summary = 400.!

!testRun: #AccountSummaryTest #test01NewAccountShouldHaveASummaryWithNoTransactionsAndABalanceOfCero stamp: 'lmalvarez 6/3/2021 00:14:00'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAnAccountWithOneDepositShouldIncludeThatDeposit stamp: 'lmalvarez 6/3/2021 00:14:00'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAnAccountWithMultipleDepositsShouldIncludeEachDeposit stamp: 'lmalvarez 6/3/2021 00:14:00'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAnAccountWithOneWithdrawShouldIncludeThatWithdraw stamp: 'lmalvarez 6/3/2021 00:14:00'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfTwoAccountsThatMadeATransferenceShouldEachIncludeThatTransference stamp: 'lmalvarez 6/3/2021 00:14:00'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfAPortfolioShouldIncludeEachOfItsAccountsTransaction stamp: 'lmalvarez 6/3/2021 00:14:00'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'lmalvarez 6/3/2021 00:14:00'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'lmalvarez 6/3/2021 00:14:00'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'lmalvarez 6/3/2021 00:14:00'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'lmalvarez 6/3/2021 00:14:00'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'lmalvarez 6/3/2021 00:14:00'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'lmalvarez 6/3/2021 00:14:00'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'lmalvarez 6/3/2021 00:14:00'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'lmalvarez 6/3/2021 00:14:00'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'lmalvarez 6/3/2021 00:14:00'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'lmalvarez 6/3/2021 00:14:00'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'lmalvarez 6/3/2021 00:14:00'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'lmalvarez 6/3/2021 00:14:00'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'lmalvarez 6/3/2021 00:14:00'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'lmalvarez 6/3/2021 00:14:00'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'lmalvarez 6/3/2021 00:14:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lmalvarez 6/3/2021 00:14:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lmalvarez 6/3/2021 00:14:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lmalvarez 6/3/2021 00:14:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lmalvarez 6/3/2021 00:14:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lmalvarez 6/3/2021 00:14:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lmalvarez 6/3/2021 00:14:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lmalvarez 6/3/2021 00:14:00'!
PASSED!

!testRun: #TransferNetTest #test01NetReportOfANewAccountShouldReturnCero stamp: 'lmalvarez 6/3/2021 00:14:00'!
PASSED!

!testRun: #TransferNetTest #test02NetReportOfEachAccountInATransferenceShouldReturnTheSameValueNegated stamp: 'lmalvarez 6/3/2021 00:14:00'!
PASSED!

!testRun: #TransferNetTest #test03NetReportOfEachAccountInATransferenceShouldNotCountNormalTransactions stamp: 'lmalvarez 6/3/2021 00:14:00'!
PASSED!

!testRun: #TransferNetTest #test04NetReportOfAPortfolioShouldReturnTheTotalSumOfEachAccountNetValue stamp: 'lmalvarez 6/3/2021 00:14:00'!
PASSED!

!testRun: #TransferenceTest #test01TransferenceBetweenTwoAccountsRetailsTheAmountSpecified stamp: 'lmalvarez 6/3/2021 00:14:00'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceBetweenTwoAccountsRetailsAnyAmount stamp: 'lmalvarez 6/3/2021 00:14:00'!
PASSED!

!testRun: #TransferenceTest #test03TransferenceAppearsInBothAccountsTransactionsAndAffectsTheirBalanceAsItShould stamp: 'lmalvarez 6/3/2021 00:14:00'!
PASSED!

!testRun: #TransferenceTest #test04TransferenceTransactionsCanBeAccessedBetweenEachOther stamp: 'lmalvarez 6/3/2021 00:14:00'!
PASSED!

----SNAPSHOT----(3 June 2021 00:15:09) CuisUniversity-4532.image priorSource: 18128244!

!testRun: #AccountSummaryTest #test01NewAccountShouldHaveASummaryWithNoTransactionsAndABalanceOfCero stamp: 'lmalvarez 6/3/2021 00:15:42'!
PASSED!

!testRun: #AccountSummaryTest #test02SummaryOfAnAccountWithOneDepositShouldIncludeThatDeposit stamp: 'lmalvarez 6/3/2021 00:15:42'!
PASSED!

!testRun: #AccountSummaryTest #test03SummaryOfAnAccountWithMultipleDepositsShouldIncludeEachDeposit stamp: 'lmalvarez 6/3/2021 00:15:42'!
PASSED!

!testRun: #AccountSummaryTest #test04SummaryOfAnAccountWithOneWithdrawShouldIncludeThatWithdraw stamp: 'lmalvarez 6/3/2021 00:15:42'!
PASSED!

!testRun: #AccountSummaryTest #test05SummaryOfTwoAccountsThatMadeATransferenceShouldEachIncludeThatTransference stamp: 'lmalvarez 6/3/2021 00:15:42'!
PASSED!

!testRun: #AccountSummaryTest #test06SummaryOfAPortfolioShouldIncludeEachOfItsAccountsTransaction stamp: 'lmalvarez 6/3/2021 00:15:42'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'lmalvarez 6/3/2021 00:15:42'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'lmalvarez 6/3/2021 00:15:42'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'lmalvarez 6/3/2021 00:15:42'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'lmalvarez 6/3/2021 00:15:42'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'lmalvarez 6/3/2021 00:15:42'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'lmalvarez 6/3/2021 00:15:42'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'lmalvarez 6/3/2021 00:15:42'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'lmalvarez 6/3/2021 00:15:42'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'lmalvarez 6/3/2021 00:15:42'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'lmalvarez 6/3/2021 00:15:42'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'lmalvarez 6/3/2021 00:15:42'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'lmalvarez 6/3/2021 00:15:42'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'lmalvarez 6/3/2021 00:15:42'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'lmalvarez 6/3/2021 00:15:42'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'lmalvarez 6/3/2021 00:15:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lmalvarez 6/3/2021 00:15:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lmalvarez 6/3/2021 00:15:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lmalvarez 6/3/2021 00:15:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lmalvarez 6/3/2021 00:15:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lmalvarez 6/3/2021 00:15:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lmalvarez 6/3/2021 00:15:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lmalvarez 6/3/2021 00:15:42'!
PASSED!

!testRun: #TransferNetTest #test01NetReportOfANewAccountShouldReturnCero stamp: 'lmalvarez 6/3/2021 00:15:42'!
PASSED!

!testRun: #TransferNetTest #test02NetReportOfEachAccountInATransferenceShouldReturnTheSameValueNegated stamp: 'lmalvarez 6/3/2021 00:15:42'!
PASSED!

!testRun: #TransferNetTest #test03NetReportOfEachAccountInATransferenceShouldNotCountNormalTransactions stamp: 'lmalvarez 6/3/2021 00:15:42'!
PASSED!

!testRun: #TransferNetTest #test04NetReportOfAPortfolioShouldReturnTheTotalSumOfEachAccountNetValue stamp: 'lmalvarez 6/3/2021 00:15:42'!
PASSED!

!testRun: #TransferenceTest #test01TransferenceBetweenTwoAccountsRetailsTheAmountSpecified stamp: 'lmalvarez 6/3/2021 00:15:42'!
PASSED!

!testRun: #TransferenceTest #test02TransferenceBetweenTwoAccountsRetailsAnyAmount stamp: 'lmalvarez 6/3/2021 00:15:42'!
PASSED!

!testRun: #TransferenceTest #test03TransferenceAppearsInBothAccountsTransactionsAndAffectsTheirBalanceAsItShould stamp: 'lmalvarez 6/3/2021 00:15:42'!
PASSED!

!testRun: #TransferenceTest #test04TransferenceTransactionsCanBeAccessedBetweenEachOther stamp: 'lmalvarez 6/3/2021 00:15:42'!
PASSED!

----SNAPSHOT----(3 June 2021 00:20:02) CuisUniversity-4532.image priorSource: 18149869!