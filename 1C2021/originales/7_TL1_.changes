

----QUIT----(9 March 2021 14:58:42) CuisUniversity-4532.image priorSource: 13044060!

----STARTUP---- (9 March 2021 14:58:43) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4532.image!


----QUIT----(9 March 2021 14:58:43) CuisUniversity-4532.image priorSource: 16885479!

----STARTUP---- (27 May 2021 20:40:48) as /home/alejandro/Documents/Cs.Computacion/Inge 1/linux64/CuisUniversity-4532.image!


----End fileIn of /home/alejandro/Documents/Cs.Computacion/Inge 1/linux64/Portfolio-Solucion.st----!

TestCase subclass: #Portfolio2Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio2Test category: 'Portfolio-Solucion' stamp: 'Am 5/27/2021 20:43:03'!
TestCase subclass: #Portfolio2Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio2Test methodsFor: 'no messages' stamp: 'Am 5/27/2021 20:44:26'!
test01transfer100
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 20:46:38' prior: 50860066!
test01transfer100
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 20:47:42' prior: 50860073!
test01transfer100
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	account1 transferAmount: 100 to: account2.
	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 20:48:29' prior: 50860080!
test01transfer100
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	account1 transferAmount: 100 to: account2.
	
	self assert: (account2 balance = 100).
	
	
	

	
	! !

!testRun: #Portfolio2Test #test01transfer100 stamp: 'Am 5/27/2021 20:48:36'!
ERROR!

!testRun: #Portfolio2Test #test01transfer100 stamp: 'Am 5/27/2021 20:48:36'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 20:49:01'!
transferAmount: aSmallInteger to: aReceptiveAccount 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 20:54:33' prior: 50860104!
transferAmount: anAmount to: anAccount 
! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Am 5/27/2021 20:56:25'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 20:55:59' prior: 50860110!
transferAmount: anAmount to: anAccount 
	Transfer from: self to:anAccount withAmount: anAmount.
! !

!testRun: #Portfolio2Test #test01transfer100 stamp: 'Am 5/27/2021 20:56:43'!
ERROR!

!testRun: #Portfolio2Test #test01transfer100 stamp: 'Am 5/27/2021 20:56:43'!
ERROR!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 20:56:54'!
from: aReceptiveAccount to: aReceptiveAccount2 withAmount: aSmallInteger 
	self shouldBeImplemented.! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:00:33' prior: 50860133!
from: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount 
	|aTransfer|
	aTransfer:=Transfer new.
	aTransfer madeFrom: aReceptiveAccount to: aReceptiveAccount2  withAmount: anAmount.
	! !

!testRun: #Portfolio2Test #test01transfer100 stamp: 'Am 5/27/2021 21:00:40'!
ERROR!
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:00:47'!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: aSmallInteger 
	self shouldBeImplemented.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:02:15' prior: 50860152!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: aSmallInteger 
	aReceptiveAccount2 registerTransfer: self.! !

!testRun: #Portfolio2Test #test01transfer100 stamp: 'Am 5/27/2021 21:02:19'!
ERROR!
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:03:16' prior: 50860159!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount 
	aReceptiveAccount2 registerTransfer: self withAmount: anAmount.! !

!testRun: #Portfolio2Test #test01transfer100 stamp: 'Am 5/27/2021 21:06:12'!
ERROR!

!testRun: #Portfolio2Test #test01transfer100 stamp: 'Am 5/27/2021 21:06:12'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:06:21'!
registerTransfer: aTransfer withAmount: aSmallInteger 
	self shouldBeImplemented.! !

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions transfers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'Am 5/27/2021 21:07:12'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions transfers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #Portfolio2Test #test01transfer100 stamp: 'Am 5/27/2021 21:07:26'!
ERROR!

!testRun: #Portfolio2Test #test01transfer100 stamp: 'Am 5/27/2021 21:07:26'!
ERROR!

!testRun: #Portfolio2Test #test01transfer100 stamp: 'Am 5/27/2021 21:07:40'!
ERROR!

!testRun: #Portfolio2Test #test01transfer100 stamp: 'Am 5/27/2021 21:07:40'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:08:18' prior: 50860182!
registerTransfer: aTransfer withAmount: anAmount 
	transfers add: anAmount.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'Am 5/27/2021 21:08:46' prior: 50859893 overrides: 16896425!
initialize

	super initialize.
	transactions := OrderedCollection new.
	transfers := OrderedCollection new.! !

!testRun: #Portfolio2Test #test01transfer100 stamp: 'Am 5/27/2021 21:08:54'!
FAILURE!

!testRun: #Portfolio2Test #test01transfer100 stamp: 'Am 5/27/2021 21:08:54'!
FAILURE!

----End fileIn of /home/alejandro/Documents/Cs.Computacion/Inge 1/linux64/Packages/TerseGuide.pck.st----!
!ReceptiveAccount methodsFor: 'balance' stamp: 'Am 5/27/2021 21:12:40' prior: 50859916 overrides: 50859721!
balance
	
	^(transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]) +(transfers sum: [:element|element] ifEmpty: [0] )! !

!testRun: #Portfolio2Test #test01transfer100 stamp: 'Am 5/27/2021 21:13:02'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Am 5/27/2021 21:13:17'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Am 5/27/2021 21:13:17'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Am 5/27/2021 21:13:17'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Am 5/27/2021 21:13:17'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Am 5/27/2021 21:13:17'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Am 5/27/2021 21:13:17'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Am 5/27/2021 21:13:17'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Am 5/27/2021 21:13:17'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Am 5/27/2021 21:13:17'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Am 5/27/2021 21:13:17'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Am 5/27/2021 21:13:17'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Am 5/27/2021 21:13:17'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Am 5/27/2021 21:13:17'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Am 5/27/2021 21:13:17'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Am 5/27/2021 21:13:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Am 5/27/2021 21:13:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Am 5/27/2021 21:13:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Am 5/27/2021 21:13:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Am 5/27/2021 21:13:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Am 5/27/2021 21:13:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Am 5/27/2021 21:13:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Am 5/27/2021 21:13:22'!
PASSED!
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:14:02'!
test01transfer100ModifiesRecieverBalance
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	account1 transferAmount: 100 to: account2.
	
	self assert: (account2 balance = 100).
	
	
	

	
	! !

!methodRemoval: Portfolio2Test #test01transfer100 stamp: 'Am 5/27/2021 21:14:02'!
test01transfer100
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	account1 transferAmount: 100 to: account2.
	
	self assert: (account2 balance = 100).
	
	
	

	
	!
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:14:15'!
test01transfer100ModifiesSenderBalance
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	account1 transferAmount: 100 to: account2.
	
	self assert: (account2 balance = 100).
	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:14:21' prior: 50863271!
test01transfer100ModifiesSenderBalance
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	account1 transferAmount: 100 to: account2.
	
	self assert: (account1 balance = -100).
	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:14:30'!
test02transfer100ModifiesSenderBalance
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	account1 transferAmount: 100 to: account2.
	
	self assert: (account1 balance = -100).
	
	
	

	
	! !

!methodRemoval: Portfolio2Test #test01transfer100ModifiesSenderBalance stamp: 'Am 5/27/2021 21:14:30'!
test01transfer100ModifiesSenderBalance
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	account1 transferAmount: 100 to: account2.
	
	self assert: (account1 balance = -100).
	
	
	

	
	!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/27/2021 21:14:33'!
FAILURE!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/27/2021 21:14:33'!
FAILURE!
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:15:28' prior: 50860169!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount 
	aReceptiveAccount2 registerTransfer: self withAmount: anAmount.
	aReceptiveAccount registerOutboundTransfer: self withAmount: anAmount.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:16:19'!
registerInboundTransfer: aTransfer withAmount: anAmount 
	transfers add: anAmount.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:16:19' prior: 50863320!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount 
	aReceptiveAccount2 registerInboundTransfer: self withAmount: anAmount.
	aReceptiveAccount registerOutboundTransfer: self withAmount: anAmount.! !

!methodRemoval: ReceptiveAccount #registerTransfer:withAmount: stamp: 'Am 5/27/2021 21:16:19'!
registerTransfer: aTransfer withAmount: anAmount 
	transfers add: anAmount.!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/27/2021 21:16:34'!
ERROR!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/27/2021 21:16:34'!
ERROR!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/27/2021 21:16:48'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:17:06'!
registerOutboundTransfer: aTransfer withAmount: aSmallInteger 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:17:25' prior: 50863361!
registerOutboundTransfer: aTransfer withAmount: anAmount 
	transfers add: anAmount negated.! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/27/2021 21:17:28'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/27/2021 21:17:33'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/27/2021 21:17:33'!
PASSED!

AccountTransaction subclass: #Transfer
	instanceVariableNames: 'inbound outbound amount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Am 5/27/2021 21:19:03'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: 'inbound outbound amount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:19:45' prior: 50863336!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount 
	outbound:=aReceptiveAccount .
	inbound:= aReceptiveAccount2 .
	amount:= anAmount.
	aReceptiveAccount2 registerInboundTransfer: self withAmount: anAmount.
	aReceptiveAccount registerOutboundTransfer: self withAmount: anAmount.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:21:51' prior: 50863398!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount 
	outbound:=aReceptiveAccount .
	inbound:= aReceptiveAccount2 .
	amount:= anAmount.
	aReceptiveAccount2 registerTransfer: self.
	aReceptiveAccount registerTransfer: self.! !

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/27/2021 21:22:03'!
ERROR!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/27/2021 21:22:03'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:22:11'!
registerTransfer: aTransfer 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:22:22' prior: 50863428!
registerTransfer: aTransfer 
	transfers add: aTransfer.! !

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/27/2021 21:22:24'!
ERROR!

!methodRemoval: ReceptiveAccount #registerOutboundTransfer:withAmount: stamp: 'Am 5/27/2021 21:22:38'!
registerOutboundTransfer: aTransfer withAmount: anAmount 
	transfers add: anAmount negated.!

!methodRemoval: ReceptiveAccount #registerInboundTransfer:withAmount: stamp: 'Am 5/27/2021 21:22:42'!
registerInboundTransfer: aTransfer withAmount: anAmount 
	transfers add: anAmount.!
!ReceptiveAccount methodsFor: 'balance' stamp: 'Am 5/27/2021 21:24:41' prior: 50863157 overrides: 50859721!
balance
	
	^(transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]) +(transactions 
		inject: 0
		into: [ :currentBalance :transfer | transfer affectBalance: currentBalance fromAccount:self ] )! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/27/2021 21:24:52'!
FAILURE!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/27/2021 21:24:52'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'Am 5/27/2021 21:25:16' prior: 50863454 overrides: 50859721!
balance
	
	^(transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]) +(transfers 
		inject: 0
		into: [ :currentBalance :transfer | transfer affectBalance: currentBalance fromAccount:self ] )! !

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/27/2021 21:25:26'!
ERROR!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/27/2021 21:25:26'!
ERROR!
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:25:40'!
affectBalance: aSmallInteger fromAccount: aReceptiveAccount 
	self shouldBeImplemented.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:28:01' prior: 50863490!
affectBalance: aBalance fromAccount: anAccount 
	(anAccount = outbound) ifTrue: [aBalance - amount]  ifFalse: [ aBalance + amount].
	
	"PONER ERROR DESPUES"! !

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/27/2021 21:28:03'!
ERROR!
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:28:33' prior: 50863496!
affectBalance: aBalance fromAccount: anAccount 
	^(anAccount = outbound) ifTrue: [aBalance - amount]  ifFalse: [ aBalance + amount].
	
	"PONER ERROR DESPUES"! !

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/27/2021 21:28:44'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/27/2021 21:28:50'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'Am 5/27/2021 21:29:08' prior: 50863473 overrides: 50859721!
balance
	
	^(transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]) + (transfers 
		inject: 0
		into: [ :currentBalance :transfer | transfer affectBalance: currentBalance fromAccount:self ] )! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:32:02' prior: 50863252!
test01transfer100ModifiesRecieverBalance
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	Transfer from: account1 to:account2 withAmount: 100.
	
	self assert: (account2 balance = 100).
	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/27/2021 21:32:17' prior: 50863292!
test02transfer100ModifiesSenderBalance
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	Transfer from: account1 to:account2 withAmount: 100.
	
	self assert: (account1 balance = -100).
	
	
	

	
	! !

!methodRemoval: ReceptiveAccount #transferAmount:to: stamp: 'Am 5/27/2021 21:32:29'!
transferAmount: anAmount to: anAccount 
	Transfer from: self to:anAccount withAmount: anAmount.
!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/27/2021 21:32:38'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/27/2021 21:32:38'!
PASSED!

----SNAPSHOT----(27 May 2021 21:33:01) CuisUniversity-4532.image priorSource: 16885703!

----STARTUP---- (30 May 2021 18:08:21) as /home/alejandro/Documents/Cs.Computacion/Inge 1/linux64/CuisUniversity-4532.image!


Object subclass: #Transfer
	instanceVariableNames: 'inbound outbound amount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Am 5/30/2021 18:09:25'!
Object subclass: #Transfer
	instanceVariableNames: 'inbound outbound amount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 18:09:32'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 18:09:32'!
PASSED!
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:23:22'!
test03transferDoesntAddTransactions
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	Transfer from: account1 to:account2 withAmount: 100.
	
	self assert: (account1 transactions = OrderedCollection new).
	
	
	

	
	! !

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 18:23:26'!
PASSED!
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:23:37' prior: 50863595!
test03transferDoesntAddTransactions
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	Transfer from: account1 to:account2 withAmount: 100.
	
	self assert: (account1 transactions = OrderedCollection new).
	self assert: (account2 transactions = OrderedCollection new).

	
	
	

	
	! !

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 18:23:44'!
PASSED!
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:26:47'!
test04transferRegitersExtractionLeg
	|account1 account2 transfer|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.
	
	self assert: (account1 transactions = OrderedCollection new).

	
	
	

	
	! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:27:14' prior: 50860140!
from: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount 
	|aTransfer|
	aTransfer:=Transfer new.
	aTransfer madeFrom: aReceptiveAccount to: aReceptiveAccount2  withAmount: anAmount.
	^aTransfer
	! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:27:15' prior: 50863638!
from: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount 
	|aTransfer|
	aTransfer:=Transfer new.
	aTransfer madeFrom: aReceptiveAccount to: aReceptiveAccount2  withAmount: anAmount.
	^aTransfer.
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:27:46' prior: 50863626!
test04transferRegitersExtractionLeg
	|account1 account2 transfer|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.
	
	self assert: (transfer extractionLeg = account1).

	
	
	

	
	! !

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 18:27:53'!
ERROR!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 18:27:53'!
ERROR!
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:28:01'!
extractionLeg
	self shouldBeImplemented.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:28:13' prior: 50863676!
extractionLeg
	^inbound! !

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 18:28:16'!
FAILURE!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Am 5/30/2021 18:29:19'!
Object subclass: #Transfer
	instanceVariableNames: 'inbound sender amount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:29:19' prior: 50863411!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount 
	sender:=aReceptiveAccount .
	inbound:= aReceptiveAccount2 .
	amount:= anAmount.
	aReceptiveAccount2 registerTransfer: self.
	aReceptiveAccount registerTransfer: self.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:29:19' prior: 50863508!
affectBalance: aBalance fromAccount: anAccount 
	^(anAccount = sender) ifTrue: [aBalance - amount]  ifFalse: [ aBalance + amount].
	
	"PONER ERROR DESPUES"! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Am 5/30/2021 18:29:27'!
Object subclass: #Transfer
	instanceVariableNames: 'reciever sender amount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:29:27' prior: 50863696!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount 
	sender:=aReceptiveAccount .
	reciever:= aReceptiveAccount2 .
	amount:= anAmount.
	aReceptiveAccount2 registerTransfer: self.
	aReceptiveAccount registerTransfer: self.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:29:27' prior: 50863681!
extractionLeg
	^reciever! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:29:34' prior: 50863734!
extractionLeg
	^sender! !

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 18:29:46'!
PASSED!
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:30:02'!
test04transferRegitersDepositLeg
	|account1 account2 transfer|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.
	
	self assert: (transfer depositLeg = account2).

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:30:19'!
test05transferRegitersDepositLeg
	|account1 account2 transfer|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.
	
	self assert: (transfer depositLeg = account2).

	
	
	

	
	! !

!methodRemoval: Portfolio2Test #test04transferRegitersDepositLeg stamp: 'Am 5/30/2021 18:30:19'!
test04transferRegitersDepositLeg
	|account1 account2 transfer|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.
	
	self assert: (transfer depositLeg = account2).

	
	
	

	
	!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 18:30:21'!
ERROR!
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:30:27'!
depositLeg
	self shouldBeImplemented.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:30:39' prior: 50863781!
depositLeg
	^reciever.! !

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 18:30:40'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 18:30:40'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 18:30:40'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 18:30:40'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 18:30:40'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 18:30:40'!
PASSED!
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:31:01'!
test06transferRegitersValue
	|account1 account2 transfer|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.
	
	self assert: (transfer value = 100).

	
	
	

	
	! !

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 18:31:05'!
FAILURE!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 18:31:05'!
FAILURE!
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:31:45' overrides: 16881508!
value
	^amount.! !

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 18:31:51'!
PASSED!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:34:18'!
negativeValueTransfer
	"Cannot do a negative value transfer"! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:34:37' prior: 50863809!
test06transferRegitersValue
	|account1 account2 transfer|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.
	
	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:35:02'!
test07transferCantTakeNegativeValues
	|account1 account2 transfer|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.
	
	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:36:45' prior: 50863849!
test07transferCantTakeNegativeValues
	|account1 account2 transfer|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	self 
		should: [ transfer:=Transfer from: account1 to:account2 withAmount: 100. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Transfer  equals: anError messageText.
			]
	
	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:37:22' prior: 50863859!
test07transferCantTakeNegativeValues
	|account1 account2 transfer|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	self 
		should: [ transfer:=Transfer from: account1 to:account2 withAmount: 100. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Transfer negativeValueTransfer equals: anError messageText.
			]
	
	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:37:38' prior: 50863874!
test07transferCantTakeNegativeValues
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	self 
		should: [ Transfer from: account1 to:account2 withAmount: 100. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Transfer negativeValueTransfer equals: anError messageText.
			]
	
	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:37:42' prior: 50863890!
test07transferCantTakeNegativeValues
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	self 
		should: [ Transfer from: account1 to:account2 withAmount: -100. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Transfer negativeValueTransfer equals: anError messageText.
			]
	
	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 18:37:46'!
FAILURE!
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:40:03' prior: 50863723!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount 

	(anAmount <=0) ifTrue:[self error: self class negativeValueTransfer ].

	sender:=aReceptiveAccount .
	reciever:= aReceptiveAccount2 .
	amount:= anAmount.
	aReceptiveAccount2 registerTransfer: self.
	aReceptiveAccount registerTransfer: self.! !

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 18:40:09'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 18:40:09'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 18:40:09'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 18:40:09'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 18:40:09'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 18:40:09'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 18:40:09'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 18:40:09'!
PASSED!

----SNAPSHOT----(30 May 2021 18:42:06) CuisUniversity-4532.image priorSource: 17021376!
!Portfolio2Test methodsFor: 'transferTests' stamp: 'Am 5/30/2021 18:47:30'!
test08accountSummaryDepositAmount0
	|account1 |
	account1:= ReceptiveAccount new.
	
	self assert: (account1 accountSummary at: 0)  equals: 0.
	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test08accountSummaryDepositAmount0 stamp: 'Am 5/30/2021 18:48:28'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:48:41'!
accountSummary
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:48:58' prior: 50863976!
accountSummary
	^OrderedCollection new add:0.! !

!testRun: #Portfolio2Test #test08accountSummaryDepositAmount0 stamp: 'Am 5/30/2021 18:49:00'!
ERROR!

!testRun: #Portfolio2Test #test08accountSummaryDepositAmount0 stamp: 'Am 5/30/2021 18:49:04'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:50:01' prior: 50863981!
accountSummary
	|reporte|
	reporte:=OrderedCollection new.
	^ reporte add:0.! !

!testRun: #Portfolio2Test #test08accountSummaryDepositAmount0 stamp: 'Am 5/30/2021 18:50:07'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:50:40' prior: 50863993!
accountSummary
	|reporte|
	reporte:=OrderedCollection new.
	reporte add: 0.
	^ reporte.! !

!testRun: #Portfolio2Test #test08accountSummaryDepositAmount0 stamp: 'Am 5/30/2021 18:50:47'!
ERROR!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 18:50:56' prior: 50863965!
test08accountSummaryDepositAmount0
	|account1 |
	account1:= ReceptiveAccount new.
	
	self assert: (account1 accountSummary at: 1)  equals: 0.
	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test08accountSummaryDepositAmount0 stamp: 'Am 5/30/2021 18:50:58'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 18:50:58'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 18:50:58'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 18:50:58'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 18:50:58'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 18:50:58'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 18:50:58'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 18:50:58'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryDepositAmount0 stamp: 'Am 5/30/2021 18:50:58'!
PASSED!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 18:51:59'!
test09accountSummaryDepositAmount100
	|account1 |
	account1:= ReceptiveAccount new.
	
	self assert: (account1 accountSummary at: 1)  equals: 0.
	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 18:52:31' prior: 50864048!
test09accountSummaryDepositAmount100
	|account1 |
	account1:= ReceptiveAccount new.
	
	
	
	self assert: (account1 accountSummary at: 1)  equals: 0.
	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 18:53:27' prior: 50864056!
test09accountSummaryDepositAmount100
	|account1 |
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	
	self assert: (account1 accountSummary at: 1)  equals: 100.
	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 18:53:34'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 18:56:13' prior: 50864002!
accountSummary
	|reporte |
	reporte:=OrderedCollection new.
	
	reporte add:( transactions inject: 0 into: [:aTransaction| aTransaction value]).
	
	^ reporte.! !

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 18:56:41'!
ERROR!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 18:58:21'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:00:03' prior: 50864078!
accountSummary
	|reporte |
	reporte:=OrderedCollection new.
	
	reporte add:( transactions sum: [:aTransaction| aTransaction value]).
	
	^ reporte.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:00:24' prior: 50864093!
accountSummary
	|reporte |
	reporte:=OrderedCollection new.
	
	reporte add:( transactions sum: [:aTransaction| aTransaction value] ifEmpty:[0]).
	
	^ reporte.! !

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:00:33'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 19:00:33'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 19:00:33'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 19:00:33'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 19:00:33'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 19:00:33'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 19:00:33'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 19:00:33'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryDepositAmount0 stamp: 'Am 5/30/2021 19:00:33'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:00:33'!
PASSED!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:01:46'!
test09accountSummaryTwoDepositAmount200
	|account1 |
	account1:= ReceptiveAccount new.
	
	Deposit register: 200 on: account1.
	
	self assert: (account1 accountSummary at: 1)  equals: 200.
	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test09accountSummaryTwoDepositAmount200 stamp: 'Am 5/30/2021 19:01:48'!
PASSED!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:02:02' prior: 50864141!
test09accountSummaryTwoDepositAmount200
	|account1 |
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	Deposit register: 100 on: account1.

	
	self assert: (account1 accountSummary at: 1)  equals: 200.
	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test09accountSummaryTwoDepositAmount200 stamp: 'Am 5/30/2021 19:02:04'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 19:02:04'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 19:02:04'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 19:02:04'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 19:02:04'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 19:02:04'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 19:02:04'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 19:02:04'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryDepositAmount0 stamp: 'Am 5/30/2021 19:02:04'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:02:04'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryTwoDepositAmount200 stamp: 'Am 5/30/2021 19:02:04'!
PASSED!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:07:51'!
test08accountSummaryBalanceAmount0
	|account1 |
	account1:= ReceptiveAccount new.
	
	self assert: (account1 accountSummary at: 1)  equals: 0.
	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:09:23' prior: 50864200!
test08accountSummaryBalanceAmount0
	|account1 |
	account1:= ReceptiveAccount new.
	
	self assert: (account1 accountSummary at: 1)  equals: ('Balance: 0').
	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:09:28'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:10:37' prior: 50864101!
accountSummary
	|reporte balance |
	reporte:=OrderedCollection new.
	
	balance:=( transactions sum: [:aTransaction| aTransaction value] ifEmpty:[0]).
	reporte add: ('Balance: ', balance asString).
	
	^ reporte.! !

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:10:43'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 19:10:43'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 19:10:43'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 19:10:43'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 19:10:43'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 19:10:43'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 19:10:43'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 19:10:43'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:10:43'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryDepositAmount0 stamp: 'Am 5/30/2021 19:10:43'!
FAILURE!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:10:43'!
FAILURE!

!testRun: #Portfolio2Test #test09accountSummaryTwoDepositAmount200 stamp: 'Am 5/30/2021 19:10:43'!
FAILURE!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:10:51'!
PASSED!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:12:03' prior: 50864220!
accountSummary
	|reporte |
	reporte:=OrderedCollection new.
	reporte add: ('Balance: ', self balance asString).
	
	^ reporte.! !

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:12:11'!
PASSED!

!methodRemoval: Portfolio2Test #test08accountSummaryDepositAmount0 stamp: 'Am 5/30/2021 19:12:20'!
test08accountSummaryDepositAmount0
	|account1 |
	account1:= ReceptiveAccount new.
	
	self assert: (account1 accountSummary at: 1)  equals: 0.
	

	
	
	

	
	!

!methodRemoval: Portfolio2Test #test09accountSummaryTwoDepositAmount200 stamp: 'Am 5/30/2021 19:12:24'!
test09accountSummaryTwoDepositAmount200
	|account1 |
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	Deposit register: 100 on: account1.

	
	self assert: (account1 accountSummary at: 1)  equals: 200.
	

	
	
	

	
	!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:13:48' prior: 50864208!
test08accountSummaryBalanceAmount0
	|account1 |
	account1:= ReceptiveAccount new.
	
	self assert: (account1 accountSummary at: 1)  equals: ('Balance = 0').
	

	
	
	

	
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:13:58' prior: 50864273!
accountSummary
	|reporte |
	reporte:=OrderedCollection new.
	reporte add: ('Balance = ', self balance asString).
	
	^ reporte.! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:14:43' prior: 50864065!
test09accountSummaryDepositAmount100
	|account1 |
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	
	self assert: (account1 accountSummary at: 1)  equals: ('Deposito por 100').
	self assert: (account1 accountSummary at: 2)  equals: ('Balance = 100').

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:14:48'!
FAILURE!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:14:57'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:16:02' prior: 50864311!
accountSummary
	|reporte |
	reporte:=OrderedCollection new.
	reporte add: ('Deposito por 100').
	
	reporte add: ('Balance = ', self balance asString).
	
	^ reporte.! !

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:16:11'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 19:16:11'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 19:16:11'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 19:16:11'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 19:16:11'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 19:16:11'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 19:16:11'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 19:16:11'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:16:11'!
FAILURE!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:16:11'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:16:11'!
FAILURE!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:16:27'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 19:16:27'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 19:16:27'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 19:16:27'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 19:16:27'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 19:16:27'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 19:16:27'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 19:16:27'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:16:27'!
FAILURE!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:16:27'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:16:27'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:18:16' prior: 50864337!
accountSummary
	|reporte |
	reporte:=OrderedCollection new.
	reporte addLast: ('Deposito por 100').
	
	reporte addLast: ('Balance = ', self balance asString).
	
	^ reporte.! !

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:18:30'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 19:18:30'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 19:18:30'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 19:18:30'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 19:18:30'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 19:18:30'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 19:18:30'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 19:18:30'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:18:30'!
FAILURE!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:18:30'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:18:30'!
FAILURE!

|account1 |
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	account1 accountSummary .!

|account1 |
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	account1 accountSummary at: 1!

	account1 accountSummary at: 2!

|account1 |
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	account1 accountSummary at: 2!

|account1 |
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	account1 accountSummary at: 1.
	account1 accountSummary at: 2.!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:23:09' prior: 50864318!
test09accountSummaryDepositAmount100
	|account1 |
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	
	self assert: ((account1 accountSummary) at: 1)  equals: ('Deposito por 100').
	self assert: ((account1 accountSummary) at: 2)  equals: ('Balance = 100').

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:23:12'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 19:23:12'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 19:23:12'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 19:23:12'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 19:23:12'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 19:23:12'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 19:23:12'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 19:23:12'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:23:12'!
FAILURE!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:23:12'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:23:12'!
FAILURE!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:23:41'!
FAILURE!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:23:41'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:25:13' prior: 50864417!
accountSummary
	|reporte |
	reporte:=OrderedCollection new.
	
	transactions do: [:aTransaction| reporte add: ('Deposito por ', aTransaction value asString)].
	
	reporte addLast: ('Balance = ', self balance asString).
	
	^ reporte.! !

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:25:22'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 19:25:22'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 19:25:22'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 19:25:22'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 19:25:22'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 19:25:22'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 19:25:22'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 19:25:22'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:25:22'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:25:22'!
PASSED!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:26:07'!
test09accountSummaryTwoDepositAmount250
	|account1 |
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	Deposit register: 150 on: account1.

	
	self assert: ((account1 accountSummary) at: 1)  equals: ('Deposito por 100').
	self assert: ((account1 accountSummary) at: 2)  equals: ('Deposito por 100').
	self assert: ((account1 accountSummary) at: 3)  equals: ('Balance = 100').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:26:19'!
test10accountSummaryTwoDepositAmount250
	|account1 |
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	Deposit register: 150 on: account1.

	
	self assert: ((account1 accountSummary) at: 1)  equals: ('Deposito por 100').
	self assert: ((account1 accountSummary) at: 2)  equals: ('Deposito por 100').
	self assert: ((account1 accountSummary) at: 3)  equals: ('Balance = 100').

	

	
	
	

	
	! !

!methodRemoval: Portfolio2Test #test09accountSummaryTwoDepositAmount250 stamp: 'Am 5/30/2021 19:26:19'!
test09accountSummaryTwoDepositAmount250
	|account1 |
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	Deposit register: 150 on: account1.

	
	self assert: ((account1 accountSummary) at: 1)  equals: ('Deposito por 100').
	self assert: ((account1 accountSummary) at: 2)  equals: ('Deposito por 100').
	self assert: ((account1 accountSummary) at: 3)  equals: ('Balance = 100').

	

	
	
	

	
	!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 5/30/2021 19:26:24'!
FAILURE!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:26:34' prior: 50864592!
test10accountSummaryTwoDepositAmount250
	|account1 |
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	Deposit register: 150 on: account1.

	
	self assert: ((account1 accountSummary) at: 1)  equals: ('Deposito por 100').
	self assert: ((account1 accountSummary) at: 2)  equals: ('Deposito por 150').
	self assert: ((account1 accountSummary) at: 3)  equals: ('Balance = 100').

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 5/30/2021 19:26:34'!
FAILURE!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:26:41' prior: 50864628!
test10accountSummaryTwoDepositAmount250
	|account1 |
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	Deposit register: 150 on: account1.

	
	self assert: ((account1 accountSummary) at: 1)  equals: ('Deposito por 100').
	self assert: ((account1 accountSummary) at: 2)  equals: ('Deposito por 150').
	self assert: ((account1 accountSummary) at: 3)  equals: ('Balance = 200').

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 5/30/2021 19:26:41'!
FAILURE!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:26:52' prior: 50864648!
test10accountSummaryTwoDepositAmount250
	|account1 |
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	Deposit register: 150 on: account1.

	
	self assert: ((account1 accountSummary) at: 1)  equals: ('Deposito por 100').
	self assert: ((account1 accountSummary) at: 2)  equals: ('Deposito por 150').
	self assert: ((account1 accountSummary) at: 3)  equals: ('Balance = 250').

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 5/30/2021 19:26:52'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 19:26:52'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 19:26:52'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 19:26:52'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 19:26:52'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 19:26:52'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 19:26:52'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 19:26:52'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:26:52'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:26:52'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 5/30/2021 19:26:52'!
PASSED!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:28:00'!
test10accountSummaryWithdrawAmount100
	|account1 |
	account1:= ReceptiveAccount new.
	
	Withdraw register: 100 on: account1.

	
	self assert: ((account1 accountSummary) at: 1)  equals: ('Extraccion por 100').
	self assert: ((account1 accountSummary) at: 3)  equals: ('Balance = -100').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:28:09'!
test11accountSummaryWithdrawAmount100
	|account1 |
	account1:= ReceptiveAccount new.
	
	Withdraw register: 100 on: account1.

	
	self assert: ((account1 accountSummary) at: 1)  equals: ('Extraccion por 100').
	self assert: ((account1 accountSummary) at: 3)  equals: ('Balance = -100').

	

	
	
	

	
	! !

!methodRemoval: Portfolio2Test #test10accountSummaryWithdrawAmount100 stamp: 'Am 5/30/2021 19:28:09'!
test10accountSummaryWithdrawAmount100
	|account1 |
	account1:= ReceptiveAccount new.
	
	Withdraw register: 100 on: account1.

	
	self assert: ((account1 accountSummary) at: 1)  equals: ('Extraccion por 100').
	self assert: ((account1 accountSummary) at: 3)  equals: ('Balance = -100').

	

	
	
	

	
	!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 5/30/2021 19:28:10'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:29:12' prior: 50864533!
accountSummary
	|reporte |
	reporte:=OrderedCollection new.
	
	transactions do: [:aTransaction| (aTransaction isKindOf: Deposit ) ifTrue:[reporte add: ('Deposito por ', aTransaction value asString)]].
	
	reporte addLast: ('Balance = ', self balance asString).
	
	^ reporte.! !

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:29:24'!
PASSED!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:30:19' prior: 50864761!
accountSummary
	|reporte |
	reporte:=OrderedCollection new.
	
	transactions do: [:aTransaction| (aTransaction isKindOf: Deposit ) ifTrue:[reporte add: ('Deposito por ', aTransaction value asString)]
													ifFalse:[reporte add: ('Extraccion por ', aTransaction value negated asString)]].
	
	reporte addLast: ('Balance = ', self balance asString).
	
	^ reporte.! !

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 5/30/2021 19:30:29'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:30:54' prior: 50864777!
accountSummary
	|reporte |
	reporte:=OrderedCollection new.
	
	transactions do: [:aTransaction| (aTransaction isKindOf: Deposit ) ifTrue:[reporte add: ('Deposito por ', aTransaction value asString)]
													ifFalse:[reporte add: ('Extraccion por ', aTransaction value asString)]].
	
	reporte addLast: ('Balance = ', self balance asString).
	
	^ reporte.! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:31:05' prior: 50864732!
test11accountSummaryWithdrawAmount100
	|account1 |
	account1:= ReceptiveAccount new.
	
	Withdraw register: 100 on: account1.

	
	self assert: ((account1 accountSummary) at: 1)  equals: ('Extraccion por 100').
	self assert: ((account1 accountSummary) at: 2)  equals: ('Balance = -100').

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 5/30/2021 19:31:05'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 19:31:05'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 19:31:05'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 19:31:05'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 19:31:05'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 19:31:05'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 19:31:05'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 19:31:05'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:31:05'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:31:05'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 5/30/2021 19:31:05'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 5/30/2021 19:31:05'!
PASSED!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:32:43'!
test11accountSummaryTwoWithdrawAmount100
	|account1 |
	account1:= ReceptiveAccount new.
	
	Withdraw register: 100 on: account1.
	Withdraw register: 150 on: account1.


	
	self assert: ((account1 accountSummary) at: 1)  equals: ('Extraccion por 100').
	self assert: ((account1 accountSummary) at: 2)  equals: ('Extraccion por 150').
	self assert: ((account1 accountSummary) at: 3)  equals: ('Balance = -250').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:32:57'!
test12accountSummaryTwoWithdrawAmount100
	|account1 |
	account1:= ReceptiveAccount new.
	
	Withdraw register: 100 on: account1.
	Withdraw register: 150 on: account1.


	
	self assert: ((account1 accountSummary) at: 1)  equals: ('Extraccion por 100').
	self assert: ((account1 accountSummary) at: 2)  equals: ('Extraccion por 150').
	self assert: ((account1 accountSummary) at: 3)  equals: ('Balance = -250').

	

	
	
	

	
	! !

!methodRemoval: Portfolio2Test #test11accountSummaryTwoWithdrawAmount100 stamp: 'Am 5/30/2021 19:32:57'!
test11accountSummaryTwoWithdrawAmount100
	|account1 |
	account1:= ReceptiveAccount new.
	
	Withdraw register: 100 on: account1.
	Withdraw register: 150 on: account1.


	
	self assert: ((account1 accountSummary) at: 1)  equals: ('Extraccion por 100').
	self assert: ((account1 accountSummary) at: 2)  equals: ('Extraccion por 150').
	self assert: ((account1 accountSummary) at: 3)  equals: ('Balance = -250').

	

	
	
	

	
	!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 5/30/2021 19:33:00'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 19:33:00'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 19:33:00'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 19:33:00'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 19:33:00'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 19:33:00'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 19:33:00'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 19:33:00'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:33:00'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:33:00'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 5/30/2021 19:33:00'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 5/30/2021 19:33:00'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 5/30/2021 19:33:00'!
PASSED!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:33:29'!
test13accountSummaryOutboundTransfer
	|account1 |
	account1:= ReceptiveAccount new.
	
	Withdraw register: 100 on: account1.
	Withdraw register: 150 on: account1.


	
	self assert: ((account1 accountSummary) at: 1)  equals: ('Extraccion por 100').
	self assert: ((account1 accountSummary) at: 2)  equals: ('Extraccion por 150').
	self assert: ((account1 accountSummary) at: 3)  equals: ('Balance = -250').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:35:04' prior: 50864955!
test13accountSummaryOutboundTransfer
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Transfer from: account1 to: account2  withAmount: 200.	
	self assert: ((account1 accountSummary) at: 1)  equals: ('Salida por transferencia de 200').
	self assert: ((account1 accountSummary) at: 2)  equals: ('Balance = -200').

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 5/30/2021 19:35:13'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:36:22' prior: 50864796!
accountSummary
	|reporte |
	reporte:=OrderedCollection new.
	
	transactions do: [:aTransaction| (aTransaction isKindOf: Deposit ) ifTrue:[reporte add: ('Deposito por ', aTransaction value asString)]
													ifFalse:[reporte add: ('Extraccion por ', aTransaction value asString)]].
												
												
	transfers do: [:aTransfer| (aTransfer)].
		
	reporte addLast: ('Balance = ', self balance asString).
	
	^ reporte.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:38:19' prior: 50864991!
accountSummary
	|reporte |
	reporte:=OrderedCollection new.
	
	transactions do: [:aTransaction| (aTransaction isKindOf: Deposit ) ifTrue:[reporte add: ('Deposito por ', aTransaction value asString)]
													ifFalse:[reporte add: ('Extraccion por ', aTransaction value asString)]].
												
												
	transfers do: [:aTransfer| (aTransfer extractionLeg = self) ifTrue:[reporte add: ('Salida por transferencia de', aTransfer value asString)].
						(aTransfer depositLeg = self) ifTrue: [reporte add: ('Entrada por transferencia de', aTransfer value asString)]
		
		].
		
	reporte addLast: ('Balance = ', self balance asString).
	
	^ reporte.! !

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 5/30/2021 19:38:39'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:39:07' prior: 50865008!
accountSummary
	|reporte |
	reporte:=OrderedCollection new.
	
	transactions do: [:aTransaction| (aTransaction isKindOf: Deposit ) ifTrue:[reporte add: ('Deposito por ', aTransaction value asString)]
													ifFalse:[reporte add: ('Extraccion por ', aTransaction value asString)]].
												
												
	transfers do: [:aTransfer| (aTransfer extractionLeg = self) ifTrue:[reporte add: ('Salida por transferencia de ', aTransfer value asString)].
						(aTransfer depositLeg = self) ifTrue: [reporte add: ('Entrada por transferencia de ', aTransfer value asString)]
		
		].
		
	reporte addLast: ('Balance = ', self balance asString).
	
	^ reporte.! !

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 5/30/2021 19:39:14'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 19:39:14'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 19:39:14'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 19:39:14'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 19:39:14'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 19:39:14'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 19:39:14'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 19:39:14'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:39:14'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:39:14'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 5/30/2021 19:39:14'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 5/30/2021 19:39:14'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 5/30/2021 19:39:14'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 5/30/2021 19:39:14'!
PASSED!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:39:40'!
test14accountSummaryInboundTransfer
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Transfer from: account1 to: account2  withAmount: 200.	
	self assert: ((account2 accountSummary) at: 1)  equals: ('Entrada por transferencia de 200').
	self assert: ((account2 accountSummary) at: 2)  equals: ('Balance = 200').

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 5/30/2021 19:39:41'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 19:39:41'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 19:39:41'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 19:39:41'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 19:39:41'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 19:39:41'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 19:39:41'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 19:39:41'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:39:41'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:39:41'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 5/30/2021 19:39:41'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 5/30/2021 19:39:41'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 5/30/2021 19:39:41'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 5/30/2021 19:39:41'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 5/30/2021 19:39:41'!
PASSED!

----SNAPSHOT----(30 May 2021 19:40:01) CuisUniversity-4532.image priorSource: 17033949!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 5/30/2021 19:44:23'!
test15transferNetNoTransaction
	|account1|
	account1:= ReceptiveAccount new.
	
	self assert: (account1 transferNet)  equals: (0).

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferNet' stamp: 'Am 5/30/2021 19:44:44' prior: 50865170!
test15transferNetNoTransaction
	|account1|
	account1:= ReceptiveAccount new.
	
	self assert: (account1 transferNet)  equals: (0).
	
	

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 5/30/2021 19:44:44'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:44:53'!
transferNet
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:45:02' prior: 50865189!
transferNet
^0! !

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 5/30/2021 19:45:04'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 19:45:04'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 19:45:04'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 19:45:04'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 19:45:04'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 19:45:04'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 19:45:04'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 19:45:04'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:45:04'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:45:04'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 5/30/2021 19:45:04'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 5/30/2021 19:45:04'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 5/30/2021 19:45:04'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 5/30/2021 19:45:04'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 5/30/2021 19:45:04'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 5/30/2021 19:45:04'!
PASSED!
!Portfolio2Test methodsFor: 'transferNet' stamp: 'Am 5/30/2021 19:46:21'!
test15transferNetOutboundTransaction100
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Transfer from: account1 to:account2  	withAmount:100.
	self assert: (account1 transferNet)  equals: (100).
	
	

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferNet' stamp: 'Am 5/30/2021 19:46:30' prior: 50865249!
test15transferNetOutboundTransaction100
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Transfer from: account1 to:account2  	withAmount:100.
	self assert: (account1 transferNet)  equals: (-100).
	
	

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test15transferNetOutboundTransaction100 stamp: 'Am 5/30/2021 19:46:31'!
FAILURE!
!Portfolio2Test methodsFor: 'transferNet' stamp: 'Am 5/30/2021 19:46:52'!
test16transferNetInboundTransaction100
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Transfer from: account1 to:account2  	withAmount:100.
	self assert: (account2 transferNet)  equals: (100).
	
	

	

	
	
	

	
	! !

!methodRemoval: Portfolio2Test #test15transferNetOutboundTransaction100 stamp: 'Am 5/30/2021 19:46:59'!
test15transferNetOutboundTransaction100
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Transfer from: account1 to:account2  	withAmount:100.
	self assert: (account1 transferNet)  equals: (-100).
	
	

	

	
	
	

	
	!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 5/30/2021 19:47:05'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:48:07' prior: 50865194!
transferNet
	^transfers do: [:aTransfer| (aTransfer extractionLeg = self) ifTrue:[aTransfer value negated].
						(aTransfer depositLeg = self) ifTrue: [aTransfer value]
		
		].! !

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 5/30/2021 19:48:15'!
FAILURE!
!Portfolio2Test methodsFor: 'transferNet' stamp: 'Am 5/30/2021 19:48:31' prior: 50865274!
test16transferNetInboundTransaction100
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Transfer from: account1 to:account2  	withAmount:100.
	self assert: (account2 transferNet)  equals: 100.
	
	

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 5/30/2021 19:48:31'!
FAILURE!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 5/30/2021 19:48:41'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:49:12' prior: 50865300!
transferNet
	^ transfers sum: [:aTransfer| (aTransfer extractionLeg = self) ifTrue:[aTransfer value negated].
						(aTransfer depositLeg = self) ifTrue: [aTransfer value]
		
		] ifEmpty:[0].! !

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 5/30/2021 19:49:29'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 19:49:29'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 19:49:29'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 19:49:29'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 19:49:29'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 19:49:29'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 19:49:29'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 19:49:29'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 19:49:29'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 19:49:29'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 5/30/2021 19:49:29'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 5/30/2021 19:49:29'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 5/30/2021 19:49:29'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 5/30/2021 19:49:29'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 5/30/2021 19:49:29'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 5/30/2021 19:49:29'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 5/30/2021 19:49:29'!
PASSED!
!Portfolio2Test methodsFor: 'transferNet' stamp: 'Am 5/30/2021 19:49:52'!
test17transferNetOutboundTransaction100
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Transfer from: account1 to:account2  	withAmount:100.
	self assert: (account1 transferNet)  equals: -100.
	
	

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 5/30/2021 19:49:53'!
FAILURE!
!Portfolio2Test methodsFor: 'transferNet' stamp: 'Am 5/30/2021 19:50:11' prior: 50865394!
test17transferNetOutboundTransaction100
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Transfer from: account1 to:account2  	withAmount:100.
	self assert: (account1 transferNet)  equals: 100 negated.
	
	

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 5/30/2021 19:50:12'!
FAILURE!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 5/30/2021 19:50:28'!
FAILURE!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 5/30/2021 19:50:28'!
FAILURE!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 5/30/2021 19:50:33'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:52:12' prior: 50865330!
transferNet
	^ transfers sum: [:aTransfer| (aTransfer extractionLeg = self) ifTrue:[(aTransfer value) negated].
						(aTransfer depositLeg = self) ifTrue: [aTransfer value]
		
		] ifEmpty:[0].! !

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 5/30/2021 19:52:21'!
FAILURE!

|hola|
hola:= OrderedCollection new.
hola add: 1 negated.

hola sum: [:elem| elem] ifEmpty:[0].!

|hola|
hola:= OrderedCollection new.
hola add: 1.

hola sum: [:elem| elem negated] ifEmpty:[0].!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 19:55:11' prior: 50865435!
transferNet
|local|
	 local:=transfers sum: [:aTransfer| (aTransfer extractionLeg = self) ifTrue:[(aTransfer value) negated].
						(aTransfer depositLeg = self) ifTrue: [aTransfer value]
		
		] ifEmpty:[0].
	
	^local
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 20:00:23' prior: 50865454!
transferNet
|local2|
	 local2:=transfers sum: [:aTransfer| (aTransfer extractionLeg = self) ifTrue:[(aTransfer value) negated].
						(aTransfer depositLeg = self) ifTrue: [aTransfer value].
		
		] ifEmpty:[0].
	
	^local2
	! !

aTransfer!

self value negated!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 20:02:44' prior: 50865465!
transferNet
|local2|
	 local2:=transfers sum: [:aTransfer| (aTransfer extractionLeg = self) ifTrue:[(aTransfer value) negated].
						(aTransfer depositLeg = self) ifTrue: [aTransfer value]] ifEmpty:[0].
	
	^local2
	! !

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 5/30/2021 20:02:49'!
FAILURE!
!Portfolio2Test methodsFor: 'transferNet' stamp: 'Am 5/30/2021 20:03:04' prior: 50865409!
test17transferNetOutboundTransaction100
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Transfer from: account1 to:account2  	withAmount:100.
	self assert: (account1 transferNet)  equals: (100 negated).
	
	

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 5/30/2021 20:03:09'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 20:05:07' prior: 50865477!
transferNet
|local2|
	 local2:=transfers sum: [:aTransfer| 
						(aTransfer extractionLeg = self) ifTrue:[^(aTransfer value) negated].
						(aTransfer depositLeg = self) ifTrue: [^aTransfer value]] 
					ifEmpty:[0].
	
	^local2
	! !

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 5/30/2021 20:05:13'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 20:05:13'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 20:05:13'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 20:05:13'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 20:05:13'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 20:05:13'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 20:05:13'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 20:05:13'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 20:05:13'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 20:05:13'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 5/30/2021 20:05:13'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 5/30/2021 20:05:14'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 5/30/2021 20:05:14'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 5/30/2021 20:05:14'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 5/30/2021 20:05:14'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 5/30/2021 20:05:14'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 5/30/2021 20:05:14'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 5/30/2021 20:05:14'!
PASSED!
!Portfolio2Test methodsFor: 'transferNet' stamp: 'Am 5/30/2021 20:05:34' prior: 50865491!
test17transferNetOutboundTransaction100
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Transfer from: account1 to:account2  	withAmount:100.
	Transfer from: account1 to:account2  	withAmount:100.

	self assert: (account1 transferNet)  equals: (200 negated).
	
	

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 5/30/2021 20:05:42'!
FAILURE!
!Portfolio2Test methodsFor: 'transferNet' stamp: 'Am 5/30/2021 20:05:57' prior: 50865576!
test17transferNetOutboundTransaction100
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Transfer from: account1 to:account2  	withAmount:100.

	self assert: (account1 transferNet)  equals: (100 negated).
	
	

	

	
	
	

	
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 20:06:26' prior: 50865506!
transferNet
|local2|
	 local2:=transfers sum: [:aTransfer| 
						(aTransfer extractionLeg = self) ifTrue:[((aTransfer value) negated)].
						(aTransfer depositLeg = self) ifTrue: [aTransfer value]] 
					ifEmpty:[0].
	
	^local2
	! !

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 5/30/2021 20:06:39'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 20:10:23' prior: 50865605!
transferNet
|local2|
	 local2:=transfers inject: 0 into: [:sum :aTransfer| 
						(aTransfer extractionLeg = self) ifTrue:[sum +aTransfer value negated].
						(aTransfer depositLeg = self) ifTrue: [sum +aTransfer value]].
	
	^local2
	! !

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 5/30/2021 20:10:36'!
FAILURE!

----SNAPSHOT----(30 May 2021 20:13:01) CuisUniversity-4532.image priorSource: 17072533!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 5/30/2021 20:14:54' prior: 50865619!
transferNet
|local2|
	 local2:=transfers inject: 0 into: [:sum :aTransfer| 
						(aTransfer extractionLeg = self) ifTrue:[sum +aTransfer value negated] ifFalse: [sum +aTransfer value]].
	
	^local2
	! !

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 5/30/2021 20:15:04'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 5/30/2021 20:15:04'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 5/30/2021 20:15:04'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 5/30/2021 20:15:04'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 5/30/2021 20:15:04'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 5/30/2021 20:15:04'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 5/30/2021 20:15:04'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 5/30/2021 20:15:04'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 5/30/2021 20:15:04'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 5/30/2021 20:15:04'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 5/30/2021 20:15:04'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 5/30/2021 20:15:04'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 5/30/2021 20:15:04'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 5/30/2021 20:15:04'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 5/30/2021 20:15:04'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 5/30/2021 20:15:04'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 5/30/2021 20:15:04'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 5/30/2021 20:15:04'!
PASSED!

----QUIT----(30 May 2021 20:18:50) CuisUniversity-4532.image priorSource: 17087419!

----STARTUP---- (2 June 2021 15:21:18) as /home/alejandro/Documents/Cs.Computacion/Inge 1/linux64/CuisUniversity-4532.image!

!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 15:21:35' prior: 50863433!
registerTransfer: aTransfer 
	transactions add: aTransfer.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 15:25:42' prior: 50865035!
accountSummary
	|reporte |
	reporte:=OrderedCollection new.
	
	transactions do: [:aTransaction| 
	(aTransaction isKindOf: Deposit ) ifTrue:[reporte add: ('Deposito por ', aTransaction value asString)].
	(aTransaction isKindOf: Withdraw ) ifTrue:[reporte add: ('Extraccion por ', aTransaction value asString).].
	(aTransaction isKindOf: Transfer ) ifTrue:[
		(aTransaction extractionLeg = self)ifTrue: [reporte add: ('Salida por transferencia de ', aTransaction value asString)].
		(aTransaction  = self)ifTrue: [reporte add: ('Entrada por transferencia de ', aTransaction value asString)]				     		
										
										].].
												
		
	reporte addLast: ('Balance = ', self balance asString).
	
	^ reporte.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 15:26:12' prior: 50865718!
accountSummary
	|reporte |
	reporte:=OrderedCollection new.
	
	transactions do: [:aTransaction| 
	(aTransaction isKindOf: Deposit ) ifTrue:[reporte add: ('Deposito por ', aTransaction value asString)].
	(aTransaction isKindOf: Withdraw ) ifTrue:[reporte add: ('Extraccion por ', aTransaction value asString).].
	(aTransaction isKindOf: Transfer ) ifTrue:[
		(aTransaction extractionLeg = self)ifTrue: [reporte add: ('Salida por transferencia de ', aTransaction value asString)].
		(aTransaction  depositLeg  = self )ifTrue: [reporte add: ('Entrada por transferencia de ', aTransaction value asString)]				     		
										
										].].
												
		
	reporte addLast: ('Balance = ', self balance asString).
	
	^ reporte.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 15:29:14' prior: 50865636!
transferNet
|local2|
	"local2:=transactions inject: 0 into: [:sum :aTransfer| 
						(aTransfer extractionLeg = self) ifTrue:[sum +aTransfer value negated] ifFalse: [sum +aTransfer value]]."
					
	local2:= transactions sum: [:total :aTransaction|
		(aTransaction isKindOf: Transfer) ifTrue: [
				(aTransaction depositLeg = self) ifTrue:[aTransaction value] ifFalse:[aTransaction value negated]		].] ifEmpty:[0].
	
	^local2
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 15:29:19' prior: 50865770!
transferNet
|local2|
	"local2:=transactions inject: 0 into: [:sum :aTransfer| 
						(aTransfer extractionLeg = self) ifTrue:[sum +aTransfer value negated] ifFalse: [sum +aTransfer value]]."
					
	local2:= transactions sum: [:aTransaction|
		(aTransaction isKindOf: Transfer) ifTrue: [
				(aTransaction depositLeg = self) ifTrue:[aTransaction value] ifFalse:[aTransaction value negated]		].] ifEmpty:[0].
	
	^local2
	! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'Am 6/2/2021 15:32:24' prior: 50863524 overrides: 50859721!
balance
	
	^(transactions 
		inject: 0
		into: [ :currentBalance :transaction | 
			(transaction isKindOf: Transfer) ifFalse:[transaction affectBalance: currentBalance] ifTrue:[ transaction affectBalance: currentBalance  self.]]).! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'Am 6/2/2021 15:34:48' prior: 50865804 overrides: 50859721!
balance
	
	^(transactions 
		inject: 0
		into: [ :currentBalance :transaction | 
			(transaction isKindOf: Transfer) ifFalse:[transaction affectBalance: currentBalance] ifTrue:[ transaction affectBalance: currentBalance fromAccount: self.]]).! !
!Portfolio2Test methodsFor: 'transferTests' stamp: 'Am 6/2/2021 15:35:16' prior: 50863610!
test03transferDoesntAddTransactions
"	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	Transfer from: account1 to:account2 withAmount: 100.
	
	self assert: (account1 transactions = OrderedCollection new).
	self assert: (account2 transactions = OrderedCollection new).

	
	"! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 15:35:20'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 15:35:20'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 15:35:20'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 6/2/2021 15:35:20'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 6/2/2021 15:35:20'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 15:35:20'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 15:35:20'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 15:35:25'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 15:35:25'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 15:35:25'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 15:35:25'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 15:35:25'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 15:35:25'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 15:35:25'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 15:35:29'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 15:35:29'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 15:35:29'!
PASSED!

----SNAPSHOT----(2 June 2021 15:35:34) CuisUniversity-4532.image priorSource: 17089706!
!Behavior method!
initialize
	[ super initialize ] valueCoveringAll:
		{20 to: 29}.
	(transactions _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (33 to: 44)
		declaredAt: (33 to: 44).
	(transfers _ [
	(OrderedCollection
		cover: (86 to: 102)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (73 to: 81)
		declaredAt: (73 to: 81).! !
!Behavior method!
from: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount
	| aTransfer |
	(aTransfer _ [
	(Transfer
		cover: (95 to: 102)
		declaredAt: (95 to: 102)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (84 to: 92)
		declaredAt: (72 to: 80).
	[
	(aTransfer
		cover: (110 to: 118)
		declaredAt: (72 to: 80))
		madeFrom:
			(aReceptiveAccount
				cover: (130 to: 146)
				declaredAt: (7 to: 23))
		to:
			(aReceptiveAccount2
				cover: (152 to: 169)
				declaredAt: (29 to: 46))
		withAmount:
			(anAmount
				cover: (184 to: 191)
				declaredAt: (60 to: 67)) ] valueCoveringAll:
		{120 to: 128. 148 to: 150. 172 to: 182}.
	^ aTransfer
		cover: (196 to: 204)
		declaredAt: (72 to: 80).! !
!Behavior method!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount
	[
	([
	(anAmount
		cover: (77 to: 84)
		declaredAt: (64 to: 71)) <=
		(0 coverAll:
			{88 to: 88}) ] valueCoveringAll:
		{86 to: 87}) ifTrue: [
		[
		(self coverAll:
			{99 to: 102}) error:
			([
			([
			(self coverAll:
				{111 to: 114}) class ] valueCoveringAll:
				{116 to: 120}) negativeValueTransfer ] valueCoveringAll:
				{122 to: 142}) ] valueCoveringAll:
			{104 to: 109} ]] valueCoveringAll:
		{91 to: 97}.
	(sender _ aReceptiveAccount
		cover: (157 to: 173)
		declaredAt: (11 to: 27))
		cover: (149 to: 154)
		declaredAt: (149 to: 154).
	(reciever _ aReceptiveAccount2
		cover: (189 to: 206)
		declaredAt: (33 to: 50))
		cover: (178 to: 185)
		declaredAt: (178 to: 185).
	(amount _ anAmount
		cover: (220 to: 227)
		declaredAt: (64 to: 71))
		cover: (211 to: 216)
		declaredAt: (211 to: 216).
	[
	(aReceptiveAccount2
		cover: (231 to: 248)
		declaredAt: (33 to: 50)) registerTransfer:
		(self coverAll:
			{268 to: 271}) ] valueCoveringAll:
		{250 to: 266}.
	[
	(aReceptiveAccount
		cover: (275 to: 291)
		declaredAt: (11 to: 27)) registerTransfer:
		(self coverAll:
			{311 to: 314}) ] valueCoveringAll:
		{293 to: 309}.! !
!Behavior method!
registerTransfer: aTransfer
	[
	(transactions
		cover: (31 to: 42)
		declaredAt: (31 to: 42)) add:
		(aTransfer
			cover: (49 to: 57)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{44 to: 47}.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (14 to: 25)
		declaredAt: (14 to: 25))
		inject:
			(0 coverAll:
				{38 to: 38})
		into: [ :currentBalance :transaction |
			[
			([
			(transaction
				cover: (86 to: 96)
				declaredAt: (67 to: 77)) isKindOf:
				(Transfer
					cover: (108 to: 115)
					declaredAt: (108 to: 115)) ] valueCoveringAll:
				{98 to: 106})
				ifFalse: [
					[
					(transaction
						cover: (127 to: 137)
						declaredAt: (67 to: 77)) affectBalance:
						(currentBalance
							cover: (154 to: 167)
							declaredAt: (51 to: 64)) ] valueCoveringAll:
						{139 to: 152} ]
				ifTrue: [
					[
					(transaction
						cover: (179 to: 189)
						declaredAt: (67 to: 77))
						affectBalance:
							(currentBalance
								cover: (206 to: 219)
								declaredAt: (51 to: 64))
						fromAccount:
							(self coverAll:
								{234 to: 237}) ] valueCoveringAll:
						{191 to: 204. 221 to: 232} ]] valueCoveringAll:
				{118 to: 125. 170 to: 176} ]] valueCoveringAll:
		{30 to: 36. 42 to: 46}.! !
!Behavior method!
affectBalance: aBalance fromAccount: anAccount
	^ [
	([
	(anAccount
		cover: (52 to: 60)
		declaredAt: (38 to: 46)) =
		(sender
			cover: (64 to: 69)
			declaredAt: (64 to: 69)) ] valueCoveringAll:
		{62 to: 62})
		ifTrue: [
			[
			(aBalance
				cover: (81 to: 88)
				declaredAt: (16 to: 23)) -
				(amount
					cover: (92 to: 97)
					declaredAt: (92 to: 97)) ] valueCoveringAll:
				{90 to: 90} ]
		ifFalse: [
			[
			(aBalance
				cover: (112 to: 119)
				declaredAt: (16 to: 23)) +
				(amount
					cover: (123 to: 128)
					declaredAt: (92 to: 97)) ] valueCoveringAll:
				{121 to: 121} ]
	"PONER ERROR DESPUES" ] valueCoveringAll:
		{72 to: 78. 101 to: 108}.! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 15:37:57'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 15:37:57'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 15:37:57'!
PASSED!
!Behavior method!
extractionLeg
	^ sender
		cover: (17 to: 22)
		declaredAt: (17 to: 22).! !

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 6/2/2021 15:37:57'!
PASSED!
!Behavior method!
depositLeg
	^ reciever
		cover: (14 to: 21)
		declaredAt: (14 to: 21).! !

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 6/2/2021 15:37:57'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 15:37:57'!
PASSED!
!Behavior method!
negativeValueTransfer
	"Cannot do a negative value transfer"
	^ self.! !

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 15:37:57'!
PASSED!
!Behavior method!
accountSummary
	| reporte |
	(reporte _ [
	(OrderedCollection
		cover: (38 to: 54)
		declaredAt: (38 to: 54)) new ] valueCoveringAll:
		{56 to: 58})
		cover: (29 to: 35)
		declaredAt: (18 to: 24).
	[
	(transactions
		cover: (64 to: 75)
		declaredAt: (64 to: 75)) do: [ :aTransaction |
		[
		([
		(aTransaction
			cover: (100 to: 111)
			declaredAt: (83 to: 94)) isKindOf:
			(Deposit
				cover: (123 to: 129)
				declaredAt: (123 to: 129)) ] valueCoveringAll:
			{113 to: 121}) ifTrue: [
			[
			(reporte
				cover: (141 to: 147)
				declaredAt: (18 to: 24)) add:
				([
				('Deposito por ' coverAll:
					{155 to: 169}) ,
					([
					([
					(aTransaction
						cover: (172 to: 183)
						declaredAt: (83 to: 94)) value ] valueCoveringAll:
						{185 to: 189}) asString ] valueCoveringAll:
						{191 to: 198}) ] valueCoveringAll:
					{170 to: 170}) ] valueCoveringAll:
				{149 to: 152} ]] valueCoveringAll:
			{133 to: 139}.
		[
		([
		(aTransaction
			cover: (205 to: 216)
			declaredAt: (83 to: 94)) isKindOf:
			(Withdraw
				cover: (228 to: 235)
				declaredAt: (228 to: 235)) ] valueCoveringAll:
			{218 to: 226}) ifTrue: [
			[
			(reporte
				cover: (247 to: 253)
				declaredAt: (18 to: 24)) add:
				([
				('Extraccion por ' coverAll:
					{261 to: 277}) ,
					([
					([
					(aTransaction
						cover: (280 to: 291)
						declaredAt: (83 to: 94)) value ] valueCoveringAll:
						{293 to: 297}) asString ] valueCoveringAll:
						{299 to: 306}) ] valueCoveringAll:
					{278 to: 278}) ] valueCoveringAll:
				{255 to: 258} ]] valueCoveringAll:
			{239 to: 245}.
		[
		([
		(aTransaction
			cover: (314 to: 325)
			declaredAt: (83 to: 94)) isKindOf:
			(Transfer
				cover: (337 to: 344)
				declaredAt: (337 to: 344)) ] valueCoveringAll:
			{327 to: 335}) ifTrue: [
			[
			([
			([
			(aTransaction
				cover: (360 to: 371)
				declaredAt: (83 to: 94)) extractionLeg ] valueCoveringAll:
				{373 to: 385}) =
				(self coverAll:
					{389 to: 392}) ] valueCoveringAll:
				{387 to: 387}) ifTrue: [
				[
				(reporte
					cover: (403 to: 409)
					declaredAt: (18 to: 24)) add:
					([
					('Salida por transferencia de ' coverAll:
						{417 to: 446}) ,
						([
						([
						(aTransaction
							cover: (449 to: 460)
							declaredAt: (83 to: 94)) value ] valueCoveringAll:
							{462 to: 466}) asString ] valueCoveringAll:
							{468 to: 475}) ] valueCoveringAll:
						{447 to: 447}) ] valueCoveringAll:
					{411 to: 414} ]] valueCoveringAll:
				{394 to: 400}.
			[
			([
			([
			(aTransaction
				cover: (483 to: 494)
				declaredAt: (83 to: 94)) depositLeg ] valueCoveringAll:
				{497 to: 506}) =
				(self coverAll:
					{511 to: 514}) ] valueCoveringAll:
				{509 to: 509}) ifTrue: [
				[
				(reporte
					cover: (526 to: 532)
					declaredAt: (18 to: 24)) add:
					([
					('Entrada por transferencia de ' coverAll:
						{540 to: 570}) ,
						([
						([
						(aTransaction
							cover: (573 to: 584)
							declaredAt: (83 to: 94)) value ] valueCoveringAll:
							{586 to: 590}) asString ] valueCoveringAll:
							{592 to: 599}) ] valueCoveringAll:
						{571 to: 571}) ] valueCoveringAll:
					{534 to: 537} ]] valueCoveringAll:
				{517 to: 523} ]] valueCoveringAll:
			{348 to: 354} ]] valueCoveringAll:
		{77 to: 79}.
	[
	(reporte
		cover: (657 to: 663)
		declaredAt: (18 to: 24)) addLast:
		([
		('Balance = ' coverAll:
			{675 to: 686}) ,
			([
			([
			(self coverAll:
				{689 to: 692}) balance ] valueCoveringAll:
				{694 to: 700}) asString ] valueCoveringAll:
				{702 to: 709}) ] valueCoveringAll:
			{687 to: 687}) ] valueCoveringAll:
		{665 to: 672}.
	^ reporte
		cover: (718 to: 724)
		declaredAt: (18 to: 24).! !

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 15:37:57'!
PASSED!
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 15:37:57'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 15:37:57'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 15:37:57'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 15:37:57'!
PASSED!
!Behavior method!
value
	^ amount
		cover: (9 to: 14)
		declaredAt: (9 to: 14).! !

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 15:37:57'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 15:37:57'!
PASSED!
!Behavior method!
transferNet
	"local2:=transactions inject: 0 into: [:sum :aTransfer| 
						(aTransfer extractionLeg = self) ifTrue:[sum +aTransfer value negated] ifFalse: [sum +aTransfer value]]."
	| local2 |
	(local2 _ [
	(transactions
		cover: (208 to: 219)
		declaredAt: (208 to: 219))
		sum: [ :aTransaction |
			[
			([
			(aTransaction
				cover: (245 to: 256)
				declaredAt: (228 to: 239)) isKindOf:
				(Transfer
					cover: (268 to: 275)
					declaredAt: (268 to: 275)) ] valueCoveringAll:
				{258 to: 266}) ifTrue: [
				[
				([
				([
				(aTransaction
					cover: (293 to: 304)
					declaredAt: (228 to: 239)) depositLeg ] valueCoveringAll:
					{306 to: 315}) =
					(self coverAll:
						{319 to: 322}) ] valueCoveringAll:
					{317 to: 317})
					ifTrue: [
						[
						(aTransaction
							cover: (333 to: 344)
							declaredAt: (228 to: 239)) value ] valueCoveringAll:
							{346 to: 350} ]
					ifFalse: [
						[
						([
						(aTransaction
							cover: (362 to: 373)
							declaredAt: (228 to: 239)) value ] valueCoveringAll:
							{375 to: 379}) negated ] valueCoveringAll:
							{381 to: 387} ]] valueCoveringAll:
					{325 to: 331. 353 to: 360} ]] valueCoveringAll:
				{278 to: 284} ]
		ifEmpty: [
			0 coverAll:
				{404 to: 404} ]] valueCoveringAll:
		{221 to: 224. 395 to: 402})
		cover: (199 to: 204)
		declaredAt: (14 to: 19).
	^ local2
		cover: (412 to: 417)
		declaredAt: (14 to: 19).! !

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 15:37:57'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 15:37:57'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 15:37:57'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 16:59:37'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 16:59:37'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 16:59:37'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 6/2/2021 16:59:37'!
PASSED!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 6/2/2021 16:59:37'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 16:59:37'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 16:59:37'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 16:59:37'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 16:59:37'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 16:59:37'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 16:59:37'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 16:59:37'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 16:59:37'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 16:59:37'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 16:59:37'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 16:59:37'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 16:59:37'!
PASSED!
!Behavior method!
initialize
	[ super initialize ] valueCoveringAll:
		{20 to: 29}.
	(transactions _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (33 to: 44)
		declaredAt: (33 to: 44).
	(transfers _ [
	(OrderedCollection
		cover: (86 to: 102)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (73 to: 81)
		declaredAt: (73 to: 81).! !
!Behavior method!
from: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount
	| aTransfer |
	(aTransfer _ [
	(Transfer
		cover: (95 to: 102)
		declaredAt: (95 to: 102)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (84 to: 92)
		declaredAt: (72 to: 80).
	[
	(aTransfer
		cover: (110 to: 118)
		declaredAt: (72 to: 80))
		madeFrom:
			(aReceptiveAccount
				cover: (130 to: 146)
				declaredAt: (7 to: 23))
		to:
			(aReceptiveAccount2
				cover: (152 to: 169)
				declaredAt: (29 to: 46))
		withAmount:
			(anAmount
				cover: (184 to: 191)
				declaredAt: (60 to: 67)) ] valueCoveringAll:
		{120 to: 128. 148 to: 150. 172 to: 182}.
	^ aTransfer
		cover: (196 to: 204)
		declaredAt: (72 to: 80).! !
!Behavior method!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount
	[
	([
	(anAmount
		cover: (77 to: 84)
		declaredAt: (64 to: 71)) <=
		(0 coverAll:
			{88 to: 88}) ] valueCoveringAll:
		{86 to: 87}) ifTrue: [
		[
		(self coverAll:
			{99 to: 102}) error:
			([
			([
			(self coverAll:
				{111 to: 114}) class ] valueCoveringAll:
				{116 to: 120}) negativeValueTransfer ] valueCoveringAll:
				{122 to: 142}) ] valueCoveringAll:
			{104 to: 109} ]] valueCoveringAll:
		{91 to: 97}.
	(sender _ aReceptiveAccount
		cover: (157 to: 173)
		declaredAt: (11 to: 27))
		cover: (149 to: 154)
		declaredAt: (149 to: 154).
	(reciever _ aReceptiveAccount2
		cover: (189 to: 206)
		declaredAt: (33 to: 50))
		cover: (178 to: 185)
		declaredAt: (178 to: 185).
	(amount _ anAmount
		cover: (220 to: 227)
		declaredAt: (64 to: 71))
		cover: (211 to: 216)
		declaredAt: (211 to: 216).
	[
	(aReceptiveAccount2
		cover: (231 to: 248)
		declaredAt: (33 to: 50)) registerTransfer:
		(self coverAll:
			{268 to: 271}) ] valueCoveringAll:
		{250 to: 266}.
	[
	(aReceptiveAccount
		cover: (275 to: 291)
		declaredAt: (11 to: 27)) registerTransfer:
		(self coverAll:
			{311 to: 314}) ] valueCoveringAll:
		{293 to: 309}.! !
!Behavior method!
registerTransfer: aTransfer
	[
	(transactions
		cover: (31 to: 42)
		declaredAt: (31 to: 42)) add:
		(aTransfer
			cover: (49 to: 57)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{44 to: 47}.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (14 to: 25)
		declaredAt: (14 to: 25))
		inject:
			(0 coverAll:
				{38 to: 38})
		into: [ :currentBalance :transaction |
			[
			([
			(transaction
				cover: (86 to: 96)
				declaredAt: (67 to: 77)) isKindOf:
				(Transfer
					cover: (108 to: 115)
					declaredAt: (108 to: 115)) ] valueCoveringAll:
				{98 to: 106})
				ifFalse: [
					[
					(transaction
						cover: (127 to: 137)
						declaredAt: (67 to: 77)) affectBalance:
						(currentBalance
							cover: (154 to: 167)
							declaredAt: (51 to: 64)) ] valueCoveringAll:
						{139 to: 152} ]
				ifTrue: [
					[
					(transaction
						cover: (179 to: 189)
						declaredAt: (67 to: 77))
						affectBalance:
							(currentBalance
								cover: (206 to: 219)
								declaredAt: (51 to: 64))
						fromAccount:
							(self coverAll:
								{234 to: 237}) ] valueCoveringAll:
						{191 to: 204. 221 to: 232} ]] valueCoveringAll:
				{118 to: 125. 170 to: 176} ]] valueCoveringAll:
		{30 to: 36. 42 to: 46}.! !
!Behavior method!
affectBalance: aBalance fromAccount: anAccount
	^ [
	([
	(anAccount
		cover: (52 to: 60)
		declaredAt: (38 to: 46)) =
		(sender
			cover: (64 to: 69)
			declaredAt: (64 to: 69)) ] valueCoveringAll:
		{62 to: 62})
		ifTrue: [
			[
			(aBalance
				cover: (81 to: 88)
				declaredAt: (16 to: 23)) -
				(amount
					cover: (92 to: 97)
					declaredAt: (92 to: 97)) ] valueCoveringAll:
				{90 to: 90} ]
		ifFalse: [
			[
			(aBalance
				cover: (112 to: 119)
				declaredAt: (16 to: 23)) +
				(amount
					cover: (123 to: 128)
					declaredAt: (92 to: 97)) ] valueCoveringAll:
				{121 to: 121} ]
	"PONER ERROR DESPUES" ] valueCoveringAll:
		{72 to: 78. 101 to: 108}.! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 16:59:58'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 16:59:58'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 16:59:58'!
PASSED!
!Behavior method!
extractionLeg
	^ sender
		cover: (17 to: 22)
		declaredAt: (17 to: 22).! !

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 6/2/2021 16:59:58'!
PASSED!
!Behavior method!
depositLeg
	^ reciever
		cover: (14 to: 21)
		declaredAt: (14 to: 21).! !

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 6/2/2021 16:59:58'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 16:59:58'!
PASSED!
!Behavior method!
negativeValueTransfer
	"Cannot do a negative value transfer"
	^ self.! !

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 16:59:58'!
PASSED!
!Behavior method!
accountSummary
	| reporte |
	(reporte _ [
	(OrderedCollection
		cover: (38 to: 54)
		declaredAt: (38 to: 54)) new ] valueCoveringAll:
		{56 to: 58})
		cover: (29 to: 35)
		declaredAt: (18 to: 24).
	[
	(transactions
		cover: (64 to: 75)
		declaredAt: (64 to: 75)) do: [ :aTransaction |
		[
		([
		(aTransaction
			cover: (100 to: 111)
			declaredAt: (83 to: 94)) isKindOf:
			(Deposit
				cover: (123 to: 129)
				declaredAt: (123 to: 129)) ] valueCoveringAll:
			{113 to: 121}) ifTrue: [
			[
			(reporte
				cover: (141 to: 147)
				declaredAt: (18 to: 24)) add:
				([
				('Deposito por ' coverAll:
					{155 to: 169}) ,
					([
					([
					(aTransaction
						cover: (172 to: 183)
						declaredAt: (83 to: 94)) value ] valueCoveringAll:
						{185 to: 189}) asString ] valueCoveringAll:
						{191 to: 198}) ] valueCoveringAll:
					{170 to: 170}) ] valueCoveringAll:
				{149 to: 152} ]] valueCoveringAll:
			{133 to: 139}.
		[
		([
		(aTransaction
			cover: (205 to: 216)
			declaredAt: (83 to: 94)) isKindOf:
			(Withdraw
				cover: (228 to: 235)
				declaredAt: (228 to: 235)) ] valueCoveringAll:
			{218 to: 226}) ifTrue: [
			[
			(reporte
				cover: (247 to: 253)
				declaredAt: (18 to: 24)) add:
				([
				('Extraccion por ' coverAll:
					{261 to: 277}) ,
					([
					([
					(aTransaction
						cover: (280 to: 291)
						declaredAt: (83 to: 94)) value ] valueCoveringAll:
						{293 to: 297}) asString ] valueCoveringAll:
						{299 to: 306}) ] valueCoveringAll:
					{278 to: 278}) ] valueCoveringAll:
				{255 to: 258} ]] valueCoveringAll:
			{239 to: 245}.
		[
		([
		(aTransaction
			cover: (314 to: 325)
			declaredAt: (83 to: 94)) isKindOf:
			(Transfer
				cover: (337 to: 344)
				declaredAt: (337 to: 344)) ] valueCoveringAll:
			{327 to: 335}) ifTrue: [
			[
			([
			([
			(aTransaction
				cover: (360 to: 371)
				declaredAt: (83 to: 94)) extractionLeg ] valueCoveringAll:
				{373 to: 385}) =
				(self coverAll:
					{389 to: 392}) ] valueCoveringAll:
				{387 to: 387}) ifTrue: [
				[
				(reporte
					cover: (403 to: 409)
					declaredAt: (18 to: 24)) add:
					([
					('Salida por transferencia de ' coverAll:
						{417 to: 446}) ,
						([
						([
						(aTransaction
							cover: (449 to: 460)
							declaredAt: (83 to: 94)) value ] valueCoveringAll:
							{462 to: 466}) asString ] valueCoveringAll:
							{468 to: 475}) ] valueCoveringAll:
						{447 to: 447}) ] valueCoveringAll:
					{411 to: 414} ]] valueCoveringAll:
				{394 to: 400}.
			[
			([
			([
			(aTransaction
				cover: (483 to: 494)
				declaredAt: (83 to: 94)) depositLeg ] valueCoveringAll:
				{497 to: 506}) =
				(self coverAll:
					{511 to: 514}) ] valueCoveringAll:
				{509 to: 509}) ifTrue: [
				[
				(reporte
					cover: (526 to: 532)
					declaredAt: (18 to: 24)) add:
					([
					('Entrada por transferencia de ' coverAll:
						{540 to: 570}) ,
						([
						([
						(aTransaction
							cover: (573 to: 584)
							declaredAt: (83 to: 94)) value ] valueCoveringAll:
							{586 to: 590}) asString ] valueCoveringAll:
							{592 to: 599}) ] valueCoveringAll:
						{571 to: 571}) ] valueCoveringAll:
					{534 to: 537} ]] valueCoveringAll:
				{517 to: 523} ]] valueCoveringAll:
			{348 to: 354} ]] valueCoveringAll:
		{77 to: 79}.
	[
	(reporte
		cover: (657 to: 663)
		declaredAt: (18 to: 24)) addLast:
		([
		('Balance = ' coverAll:
			{675 to: 686}) ,
			([
			([
			(self coverAll:
				{689 to: 692}) balance ] valueCoveringAll:
				{694 to: 700}) asString ] valueCoveringAll:
				{702 to: 709}) ] valueCoveringAll:
			{687 to: 687}) ] valueCoveringAll:
		{665 to: 672}.
	^ reporte
		cover: (718 to: 724)
		declaredAt: (18 to: 24).! !

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 16:59:59'!
PASSED!
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 16:59:59'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 16:59:59'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 16:59:59'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 16:59:59'!
PASSED!
!Behavior method!
value
	^ amount
		cover: (9 to: 14)
		declaredAt: (9 to: 14).! !

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 16:59:59'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 16:59:59'!
PASSED!
!Behavior method!
transferNet
	"local2:=transactions inject: 0 into: [:sum :aTransfer| 
						(aTransfer extractionLeg = self) ifTrue:[sum +aTransfer value negated] ifFalse: [sum +aTransfer value]]."
	| local2 |
	(local2 _ [
	(transactions
		cover: (208 to: 219)
		declaredAt: (208 to: 219))
		sum: [ :aTransaction |
			[
			([
			(aTransaction
				cover: (245 to: 256)
				declaredAt: (228 to: 239)) isKindOf:
				(Transfer
					cover: (268 to: 275)
					declaredAt: (268 to: 275)) ] valueCoveringAll:
				{258 to: 266}) ifTrue: [
				[
				([
				([
				(aTransaction
					cover: (293 to: 304)
					declaredAt: (228 to: 239)) depositLeg ] valueCoveringAll:
					{306 to: 315}) =
					(self coverAll:
						{319 to: 322}) ] valueCoveringAll:
					{317 to: 317})
					ifTrue: [
						[
						(aTransaction
							cover: (333 to: 344)
							declaredAt: (228 to: 239)) value ] valueCoveringAll:
							{346 to: 350} ]
					ifFalse: [
						[
						([
						(aTransaction
							cover: (362 to: 373)
							declaredAt: (228 to: 239)) value ] valueCoveringAll:
							{375 to: 379}) negated ] valueCoveringAll:
							{381 to: 387} ]] valueCoveringAll:
					{325 to: 331. 353 to: 360} ]] valueCoveringAll:
				{278 to: 284} ]
		ifEmpty: [
			0 coverAll:
				{404 to: 404} ]] valueCoveringAll:
		{221 to: 224. 395 to: 402})
		cover: (199 to: 204)
		declaredAt: (14 to: 19).
	^ local2
		cover: (412 to: 417)
		declaredAt: (14 to: 19).! !

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 16:59:59'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 16:59:59'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 16:59:59'!
PASSED!
!Behavior method!
initialize
	[ super initialize ] valueCoveringAll:
		{20 to: 29}.
	(transactions _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (33 to: 44)
		declaredAt: (33 to: 44).
	(transfers _ [
	(OrderedCollection
		cover: (86 to: 102)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (73 to: 81)
		declaredAt: (73 to: 81).! !
!Behavior method!
from: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount
	| aTransfer |
	(aTransfer _ [
	(Transfer
		cover: (95 to: 102)
		declaredAt: (95 to: 102)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (84 to: 92)
		declaredAt: (72 to: 80).
	[
	(aTransfer
		cover: (110 to: 118)
		declaredAt: (72 to: 80))
		madeFrom:
			(aReceptiveAccount
				cover: (130 to: 146)
				declaredAt: (7 to: 23))
		to:
			(aReceptiveAccount2
				cover: (152 to: 169)
				declaredAt: (29 to: 46))
		withAmount:
			(anAmount
				cover: (184 to: 191)
				declaredAt: (60 to: 67)) ] valueCoveringAll:
		{120 to: 128. 148 to: 150. 172 to: 182}.
	^ aTransfer
		cover: (196 to: 204)
		declaredAt: (72 to: 80).! !
!Behavior method!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount
	[
	([
	(anAmount
		cover: (77 to: 84)
		declaredAt: (64 to: 71)) <=
		(0 coverAll:
			{88 to: 88}) ] valueCoveringAll:
		{86 to: 87}) ifTrue: [
		[
		(self coverAll:
			{99 to: 102}) error:
			([
			([
			(self coverAll:
				{111 to: 114}) class ] valueCoveringAll:
				{116 to: 120}) negativeValueTransfer ] valueCoveringAll:
				{122 to: 142}) ] valueCoveringAll:
			{104 to: 109} ]] valueCoveringAll:
		{91 to: 97}.
	(sender _ aReceptiveAccount
		cover: (157 to: 173)
		declaredAt: (11 to: 27))
		cover: (149 to: 154)
		declaredAt: (149 to: 154).
	(reciever _ aReceptiveAccount2
		cover: (189 to: 206)
		declaredAt: (33 to: 50))
		cover: (178 to: 185)
		declaredAt: (178 to: 185).
	(amount _ anAmount
		cover: (220 to: 227)
		declaredAt: (64 to: 71))
		cover: (211 to: 216)
		declaredAt: (211 to: 216).
	[
	(aReceptiveAccount2
		cover: (231 to: 248)
		declaredAt: (33 to: 50)) registerTransfer:
		(self coverAll:
			{268 to: 271}) ] valueCoveringAll:
		{250 to: 266}.
	[
	(aReceptiveAccount
		cover: (275 to: 291)
		declaredAt: (11 to: 27)) registerTransfer:
		(self coverAll:
			{311 to: 314}) ] valueCoveringAll:
		{293 to: 309}.! !
!Behavior method!
registerTransfer: aTransfer
	[
	(transactions
		cover: (31 to: 42)
		declaredAt: (31 to: 42)) add:
		(aTransfer
			cover: (49 to: 57)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{44 to: 47}.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (14 to: 25)
		declaredAt: (14 to: 25))
		inject:
			(0 coverAll:
				{38 to: 38})
		into: [ :currentBalance :transaction |
			[
			([
			(transaction
				cover: (86 to: 96)
				declaredAt: (67 to: 77)) isKindOf:
				(Transfer
					cover: (108 to: 115)
					declaredAt: (108 to: 115)) ] valueCoveringAll:
				{98 to: 106})
				ifFalse: [
					[
					(transaction
						cover: (127 to: 137)
						declaredAt: (67 to: 77)) affectBalance:
						(currentBalance
							cover: (154 to: 167)
							declaredAt: (51 to: 64)) ] valueCoveringAll:
						{139 to: 152} ]
				ifTrue: [
					[
					(transaction
						cover: (179 to: 189)
						declaredAt: (67 to: 77))
						affectBalance:
							(currentBalance
								cover: (206 to: 219)
								declaredAt: (51 to: 64))
						fromAccount:
							(self coverAll:
								{234 to: 237}) ] valueCoveringAll:
						{191 to: 204. 221 to: 232} ]] valueCoveringAll:
				{118 to: 125. 170 to: 176} ]] valueCoveringAll:
		{30 to: 36. 42 to: 46}.! !
!Behavior method!
affectBalance: aBalance fromAccount: anAccount
	^ [
	([
	(anAccount
		cover: (52 to: 60)
		declaredAt: (38 to: 46)) =
		(sender
			cover: (64 to: 69)
			declaredAt: (64 to: 69)) ] valueCoveringAll:
		{62 to: 62})
		ifTrue: [
			[
			(aBalance
				cover: (81 to: 88)
				declaredAt: (16 to: 23)) -
				(amount
					cover: (92 to: 97)
					declaredAt: (92 to: 97)) ] valueCoveringAll:
				{90 to: 90} ]
		ifFalse: [
			[
			(aBalance
				cover: (112 to: 119)
				declaredAt: (16 to: 23)) +
				(amount
					cover: (123 to: 128)
					declaredAt: (92 to: 97)) ] valueCoveringAll:
				{121 to: 121} ]
	"PONER ERROR DESPUES" ] valueCoveringAll:
		{72 to: 78. 101 to: 108}.! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:00:41'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 17:00:41'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 17:00:41'!
PASSED!
!Behavior method!
extractionLeg
	^ sender
		cover: (17 to: 22)
		declaredAt: (17 to: 22).! !

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 6/2/2021 17:00:41'!
PASSED!
!Behavior method!
depositLeg
	^ reciever
		cover: (14 to: 21)
		declaredAt: (14 to: 21).! !

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 6/2/2021 17:00:41'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 17:00:41'!
PASSED!
!Behavior method!
negativeValueTransfer
	"Cannot do a negative value transfer"
	^ self.! !

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 17:00:41'!
PASSED!
!Behavior method!
accountSummary
	| reporte |
	(reporte _ [
	(OrderedCollection
		cover: (38 to: 54)
		declaredAt: (38 to: 54)) new ] valueCoveringAll:
		{56 to: 58})
		cover: (29 to: 35)
		declaredAt: (18 to: 24).
	[
	(transactions
		cover: (64 to: 75)
		declaredAt: (64 to: 75)) do: [ :aTransaction |
		[
		([
		(aTransaction
			cover: (100 to: 111)
			declaredAt: (83 to: 94)) isKindOf:
			(Deposit
				cover: (123 to: 129)
				declaredAt: (123 to: 129)) ] valueCoveringAll:
			{113 to: 121}) ifTrue: [
			[
			(reporte
				cover: (141 to: 147)
				declaredAt: (18 to: 24)) add:
				([
				('Deposito por ' coverAll:
					{155 to: 169}) ,
					([
					([
					(aTransaction
						cover: (172 to: 183)
						declaredAt: (83 to: 94)) value ] valueCoveringAll:
						{185 to: 189}) asString ] valueCoveringAll:
						{191 to: 198}) ] valueCoveringAll:
					{170 to: 170}) ] valueCoveringAll:
				{149 to: 152} ]] valueCoveringAll:
			{133 to: 139}.
		[
		([
		(aTransaction
			cover: (205 to: 216)
			declaredAt: (83 to: 94)) isKindOf:
			(Withdraw
				cover: (228 to: 235)
				declaredAt: (228 to: 235)) ] valueCoveringAll:
			{218 to: 226}) ifTrue: [
			[
			(reporte
				cover: (247 to: 253)
				declaredAt: (18 to: 24)) add:
				([
				('Extraccion por ' coverAll:
					{261 to: 277}) ,
					([
					([
					(aTransaction
						cover: (280 to: 291)
						declaredAt: (83 to: 94)) value ] valueCoveringAll:
						{293 to: 297}) asString ] valueCoveringAll:
						{299 to: 306}) ] valueCoveringAll:
					{278 to: 278}) ] valueCoveringAll:
				{255 to: 258} ]] valueCoveringAll:
			{239 to: 245}.
		[
		([
		(aTransaction
			cover: (314 to: 325)
			declaredAt: (83 to: 94)) isKindOf:
			(Transfer
				cover: (337 to: 344)
				declaredAt: (337 to: 344)) ] valueCoveringAll:
			{327 to: 335}) ifTrue: [
			[
			([
			([
			(aTransaction
				cover: (360 to: 371)
				declaredAt: (83 to: 94)) extractionLeg ] valueCoveringAll:
				{373 to: 385}) =
				(self coverAll:
					{389 to: 392}) ] valueCoveringAll:
				{387 to: 387}) ifTrue: [
				[
				(reporte
					cover: (403 to: 409)
					declaredAt: (18 to: 24)) add:
					([
					('Salida por transferencia de ' coverAll:
						{417 to: 446}) ,
						([
						([
						(aTransaction
							cover: (449 to: 460)
							declaredAt: (83 to: 94)) value ] valueCoveringAll:
							{462 to: 466}) asString ] valueCoveringAll:
							{468 to: 475}) ] valueCoveringAll:
						{447 to: 447}) ] valueCoveringAll:
					{411 to: 414} ]] valueCoveringAll:
				{394 to: 400}.
			[
			([
			([
			(aTransaction
				cover: (483 to: 494)
				declaredAt: (83 to: 94)) depositLeg ] valueCoveringAll:
				{497 to: 506}) =
				(self coverAll:
					{511 to: 514}) ] valueCoveringAll:
				{509 to: 509}) ifTrue: [
				[
				(reporte
					cover: (526 to: 532)
					declaredAt: (18 to: 24)) add:
					([
					('Entrada por transferencia de ' coverAll:
						{540 to: 570}) ,
						([
						([
						(aTransaction
							cover: (573 to: 584)
							declaredAt: (83 to: 94)) value ] valueCoveringAll:
							{586 to: 590}) asString ] valueCoveringAll:
							{592 to: 599}) ] valueCoveringAll:
						{571 to: 571}) ] valueCoveringAll:
					{534 to: 537} ]] valueCoveringAll:
				{517 to: 523} ]] valueCoveringAll:
			{348 to: 354} ]] valueCoveringAll:
		{77 to: 79}.
	[
	(reporte
		cover: (657 to: 663)
		declaredAt: (18 to: 24)) addLast:
		([
		('Balance = ' coverAll:
			{675 to: 686}) ,
			([
			([
			(self coverAll:
				{689 to: 692}) balance ] valueCoveringAll:
				{694 to: 700}) asString ] valueCoveringAll:
				{702 to: 709}) ] valueCoveringAll:
			{687 to: 687}) ] valueCoveringAll:
		{665 to: 672}.
	^ reporte
		cover: (718 to: 724)
		declaredAt: (18 to: 24).! !

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 17:00:41'!
PASSED!
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 17:00:41'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 17:00:41'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 17:00:41'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 17:00:41'!
PASSED!
!Behavior method!
value
	^ amount
		cover: (9 to: 14)
		declaredAt: (9 to: 14).! !

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 17:00:41'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 17:00:41'!
PASSED!
!Behavior method!
transferNet
	"local2:=transactions inject: 0 into: [:sum :aTransfer| 
						(aTransfer extractionLeg = self) ifTrue:[sum +aTransfer value negated] ifFalse: [sum +aTransfer value]]."
	| local2 |
	(local2 _ [
	(transactions
		cover: (208 to: 219)
		declaredAt: (208 to: 219))
		sum: [ :aTransaction |
			[
			([
			(aTransaction
				cover: (245 to: 256)
				declaredAt: (228 to: 239)) isKindOf:
				(Transfer
					cover: (268 to: 275)
					declaredAt: (268 to: 275)) ] valueCoveringAll:
				{258 to: 266}) ifTrue: [
				[
				([
				([
				(aTransaction
					cover: (293 to: 304)
					declaredAt: (228 to: 239)) depositLeg ] valueCoveringAll:
					{306 to: 315}) =
					(self coverAll:
						{319 to: 322}) ] valueCoveringAll:
					{317 to: 317})
					ifTrue: [
						[
						(aTransaction
							cover: (333 to: 344)
							declaredAt: (228 to: 239)) value ] valueCoveringAll:
							{346 to: 350} ]
					ifFalse: [
						[
						([
						(aTransaction
							cover: (362 to: 373)
							declaredAt: (228 to: 239)) value ] valueCoveringAll:
							{375 to: 379}) negated ] valueCoveringAll:
							{381 to: 387} ]] valueCoveringAll:
					{325 to: 331. 353 to: 360} ]] valueCoveringAll:
				{278 to: 284} ]
		ifEmpty: [
			0 coverAll:
				{404 to: 404} ]] valueCoveringAll:
		{221 to: 224. 395 to: 402})
		cover: (199 to: 204)
		declaredAt: (14 to: 19).
	^ local2
		cover: (412 to: 417)
		declaredAt: (14 to: 19).! !

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 17:00:41'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 17:00:41'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 17:00:41'!
PASSED!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (26 to: 42)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (61 to: 77)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{79 to: 81})
		cover: (50 to: 56)
		declaredAt: (50 to: 56).! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (13 to: 20)
		declaredAt: (13 to: 20))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (42 to: 50)
				declaredAt: (30 to: 38)) balance ] valueCoveringAll:
				{52 to: 58} ]
		ifEmpty: [
			0 coverAll:
				{73 to: 73} ]] valueCoveringAll:
		{22 to: 25. 62 to: 69}.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Am 6/2/2021 17:00:41'!
PASSED!
!Behavior method!
with: anAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}.
	[ cascadeReceiver add: anAccount ] valueCoveringAll:
		{32 to: 45}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{50 to: 57} ] value.! !
!Behavior method!
add: accountToAdd
	[
	(self coverAll:
		{21 to: 24}) assertCanAdd:
		(accountToAdd
			cover: (40 to: 51)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{26 to: 38}.
	[
	(accounts
		cover: (58 to: 65)
		declaredAt: (58 to: 65)) add:
		(accountToAdd
			cover: (72 to: 83)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{67 to: 70}.
	[
	(accountToAdd
		cover: (87 to: 98)
		declaredAt: (6 to: 17)) addedTo:
		(self coverAll:
			{109 to: 112}) ] valueCoveringAll:
		{100 to: 107}.! !
!Behavior method!
assertCanAdd: accountToAdd
	[
	([
	(self coverAll:
		{31 to: 34}) anyRootParentIsComposedBy:
		(accountToAdd
			cover: (63 to: 74)
			declaredAt: (15 to: 26)) ] valueCoveringAll:
		{36 to: 61}) ifTrue: [
		[
		(self coverAll:
			{87 to: 90}) signalCanNotAddAccount ] valueCoveringAll:
			{92 to: 113} ]] valueCoveringAll:
		{77 to: 83}.! !
!Behavior method!
anyRootParentIsComposedBy: accountToAdd
	^ [
	([
	(self coverAll:
		{44 to: 47}) rootParents ] valueCoveringAll:
		{49 to: 59}) anySatisfy: [ :aParent |
		[
		(aParent
			cover: (86 to: 92)
			declaredAt: (76 to: 82)) isComposedBy:
			(accountToAdd
				cover: (108 to: 119)
				declaredAt: (28 to: 39)) ] valueCoveringAll:
			{94 to: 106} ]] valueCoveringAll:
		{61 to: 71}.! !
!Behavior method!
rootParents
	| rootParents |
	(rootParents _ [
	(Set
		cover: (50 to: 52)
		declaredAt: (50 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(self coverAll:
		{60 to: 63}) addRootParentsTo:
		(rootParents
			cover: (83 to: 93)
			declaredAt: (18 to: 28)) ] valueCoveringAll:
		{65 to: 81}.
	^ rootParents
		cover: (101 to: 111)
		declaredAt: (18 to: 28).! !
!Behavior method!
addRootParentsTo: rootParents
	[
	(parents
		cover: (33 to: 39)
		declaredAt: (33 to: 39))
		ifEmpty: [
			[
			(rootParents
				cover: (55 to: 65)
				declaredAt: (19 to: 29)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (96 to: 102)
				declaredAt: (33 to: 39)) do: [ :aParent |
				[
				(aParent
					cover: (121 to: 127)
					declaredAt: (111 to: 117)) addRootParentsTo:
					(rootParents
						cover: (147 to: 157)
						declaredAt: (19 to: 29)) ] valueCoveringAll:
					{129 to: 145} ]] valueCoveringAll:
				{104 to: 106} ]] valueCoveringAll:
		{44 to: 51. 82 to: 92}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	([
	(self coverAll:
		{29 to: 32}) =
		(anAccount
			cover: (36 to: 44)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 34}) or: [
		[
		(accounts
			cover: (52 to: 59)
			declaredAt: (52 to: 59)) anySatisfy: [ :composedAccount |
			[
			([
			(composedAccount
				cover: (95 to: 109)
				declaredAt: (76 to: 90)) isComposedBy:
				(anAccount
					cover: (125 to: 133)
					declaredAt: (15 to: 23)) ] valueCoveringAll:
				{111 to: 123}) or: [
				[
				(anAccount
					cover: (142 to: 150)
					declaredAt: (15 to: 23)) isComposedBy:
					(composedAccount
						cover: (166 to: 180)
						declaredAt: (76 to: 90)) ] valueCoveringAll:
					{152 to: 164} ]] valueCoveringAll:
				{136 to: 138} ]] valueCoveringAll:
			{61 to: 71} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
addedTo: aPortfolio
	^ self.! !

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Am 6/2/2021 17:00:41'!
PASSED!
!Behavior method!
with: anAccount with: anotherAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{41 to: 44}) new ] valueCoveringAll:
		{46 to: 48}.
	[ cascadeReceiver add: anAccount ] valueCoveringAll:
		{53 to: 66}.
	[ cascadeReceiver add: anotherAccount ] valueCoveringAll:
		{71 to: 89}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{94 to: 101} ] value.! !
!Behavior method!
addedTo: aPortfolio
	[
	(parents
		cover: (25 to: 31)
		declaredAt: (25 to: 31)) add:
		(aPortfolio
			cover: (38 to: 47)
			declaredAt: (10 to: 19)) ] valueCoveringAll:
		{33 to: 36}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	(self coverAll:
		{28 to: 31}) =
		(anAccount
			cover: (35 to: 43)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{33 to: 33}.! !

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Am 6/2/2021 17:00:41'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) anySatisfy: [ :anAccount |
		[
		(anAccount
			cover: (68 to: 76)
			declaredAt: (56 to: 64)) hasRegistered:
			(aTransaction
				cover: (93 to: 104)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{78 to: 91} ]] valueCoveringAll:
		{41 to: 51}.! !

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Am 6/2/2021 17:00:41'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Am 6/2/2021 17:00:41'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Am 6/2/2021 17:00:41'!
PASSED!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (53 to: 69)
		declaredAt: (53 to: 69)) new ] valueCoveringAll:
		{71 to: 73})
		cover: (37 to: 48)
		declaredAt: (19 to: 30).
	[
	(accounts
		cover: (77 to: 84)
		declaredAt: (77 to: 84)) do: [ :anAccount |
		[
		(anAccount
			cover: (105 to: 113)
			declaredAt: (93 to: 101)) addTransactionsTo:
			(transactions
				cover: (134 to: 145)
				declaredAt: (19 to: 30)) ] valueCoveringAll:
			{115 to: 132} ]] valueCoveringAll:
		{86 to: 88}.
	^ transactions
		cover: (154 to: 165)
		declaredAt: (19 to: 30).! !

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Am 6/2/2021 17:00:41'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(aCollectionOfTransactions
		cover: (48 to: 72)
		declaredAt: (20 to: 44)) addAll:
		(transactions
			cover: (82 to: 93)
			declaredAt: (82 to: 93)) ] valueCoveringAll:
		{74 to: 80}.! !

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Am 6/2/2021 17:00:41'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(accounts
		cover: (48 to: 55)
		declaredAt: (48 to: 55)) do: [ :anAccount |
		[
		(anAccount
			cover: (76 to: 84)
			declaredAt: (64 to: 72)) addTransactionsTo:
			(aCollectionOfTransactions
				cover: (105 to: 129)
				declaredAt: (20 to: 44)) ] valueCoveringAll:
			{86 to: 103} ]] valueCoveringAll:
		{57 to: 59}.! !

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Am 6/2/2021 17:00:41'!
PASSED!
!Behavior method!
signalCanNotAddAccount
	[
	(self coverAll:
		{27 to: 30}) error:
		([
		([
		(self coverAll:
			{39 to: 42}) class ] valueCoveringAll:
			{44 to: 48}) canNotAddAccountErrorMessage ] valueCoveringAll:
			{50 to: 77}) ] valueCoveringAll:
		{32 to: 37}.! !
!Behavior method!
canNotAddAccountErrorMessage
	^ 'Can not add repeated account to a portfolio' coverAll:
		{34 to: 78}.! !
!Behavior method!
accountsSize
	^ [
	(accounts
		cover: (18 to: 25)
		declaredAt: (18 to: 25)) size ] valueCoveringAll:
		{27 to: 30}.! !
!Behavior method!
accountsIncludes: anAccount
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) includes:
		(anAccount
			cover: (51 to: 59)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{41 to: 49}.! !

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Am 6/2/2021 17:00:41'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Am 6/2/2021 17:00:41'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Am 6/2/2021 17:00:41'!
PASSED!
!Behavior method!
accountsIsEmpty
	^ [
	(accounts
		cover: (21 to: 28)
		declaredAt: (21 to: 28)) isEmpty ] valueCoveringAll:
		{30 to: 36}.! !

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Am 6/2/2021 17:00:41'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Am 6/2/2021 17:00:42'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Am 6/2/2021 17:00:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Am 6/2/2021 17:00:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Am 6/2/2021 17:00:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Am 6/2/2021 17:00:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Am 6/2/2021 17:00:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Am 6/2/2021 17:00:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Am 6/2/2021 17:00:42'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Am 6/2/2021 17:00:42'!
PASSED!

!methodRemoval: ReceptiveAccount #addedTo: stamp: 'Am 6/2/2021 17:01:35'!
addedTo: aPortfolio 
	
	!
!Behavior method!
initialize
	[ super initialize ] valueCoveringAll:
		{20 to: 29}.
	(transactions _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (33 to: 44)
		declaredAt: (33 to: 44).
	(transfers _ [
	(OrderedCollection
		cover: (86 to: 102)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (73 to: 81)
		declaredAt: (73 to: 81).! !
!Behavior method!
from: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount
	| aTransfer |
	(aTransfer _ [
	(Transfer
		cover: (95 to: 102)
		declaredAt: (95 to: 102)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (84 to: 92)
		declaredAt: (72 to: 80).
	[
	(aTransfer
		cover: (110 to: 118)
		declaredAt: (72 to: 80))
		madeFrom:
			(aReceptiveAccount
				cover: (130 to: 146)
				declaredAt: (7 to: 23))
		to:
			(aReceptiveAccount2
				cover: (152 to: 169)
				declaredAt: (29 to: 46))
		withAmount:
			(anAmount
				cover: (184 to: 191)
				declaredAt: (60 to: 67)) ] valueCoveringAll:
		{120 to: 128. 148 to: 150. 172 to: 182}.
	^ aTransfer
		cover: (196 to: 204)
		declaredAt: (72 to: 80).! !
!Behavior method!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount
	[
	([
	(anAmount
		cover: (77 to: 84)
		declaredAt: (64 to: 71)) <=
		(0 coverAll:
			{88 to: 88}) ] valueCoveringAll:
		{86 to: 87}) ifTrue: [
		[
		(self coverAll:
			{99 to: 102}) error:
			([
			([
			(self coverAll:
				{111 to: 114}) class ] valueCoveringAll:
				{116 to: 120}) negativeValueTransfer ] valueCoveringAll:
				{122 to: 142}) ] valueCoveringAll:
			{104 to: 109} ]] valueCoveringAll:
		{91 to: 97}.
	(sender _ aReceptiveAccount
		cover: (157 to: 173)
		declaredAt: (11 to: 27))
		cover: (149 to: 154)
		declaredAt: (149 to: 154).
	(reciever _ aReceptiveAccount2
		cover: (189 to: 206)
		declaredAt: (33 to: 50))
		cover: (178 to: 185)
		declaredAt: (178 to: 185).
	(amount _ anAmount
		cover: (220 to: 227)
		declaredAt: (64 to: 71))
		cover: (211 to: 216)
		declaredAt: (211 to: 216).
	[
	(aReceptiveAccount2
		cover: (231 to: 248)
		declaredAt: (33 to: 50)) registerTransfer:
		(self coverAll:
			{268 to: 271}) ] valueCoveringAll:
		{250 to: 266}.
	[
	(aReceptiveAccount
		cover: (275 to: 291)
		declaredAt: (11 to: 27)) registerTransfer:
		(self coverAll:
			{311 to: 314}) ] valueCoveringAll:
		{293 to: 309}.! !
!Behavior method!
registerTransfer: aTransfer
	[
	(transactions
		cover: (31 to: 42)
		declaredAt: (31 to: 42)) add:
		(aTransfer
			cover: (49 to: 57)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{44 to: 47}.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (14 to: 25)
		declaredAt: (14 to: 25))
		inject:
			(0 coverAll:
				{38 to: 38})
		into: [ :currentBalance :transaction |
			[
			([
			(transaction
				cover: (86 to: 96)
				declaredAt: (67 to: 77)) isKindOf:
				(Transfer
					cover: (108 to: 115)
					declaredAt: (108 to: 115)) ] valueCoveringAll:
				{98 to: 106})
				ifFalse: [
					[
					(transaction
						cover: (127 to: 137)
						declaredAt: (67 to: 77)) affectBalance:
						(currentBalance
							cover: (154 to: 167)
							declaredAt: (51 to: 64)) ] valueCoveringAll:
						{139 to: 152} ]
				ifTrue: [
					[
					(transaction
						cover: (179 to: 189)
						declaredAt: (67 to: 77))
						affectBalance:
							(currentBalance
								cover: (206 to: 219)
								declaredAt: (51 to: 64))
						fromAccount:
							(self coverAll:
								{234 to: 237}) ] valueCoveringAll:
						{191 to: 204. 221 to: 232} ]] valueCoveringAll:
				{118 to: 125. 170 to: 176} ]] valueCoveringAll:
		{30 to: 36. 42 to: 46}.! !
!Behavior method!
affectBalance: aBalance fromAccount: anAccount
	^ [
	([
	(anAccount
		cover: (52 to: 60)
		declaredAt: (38 to: 46)) =
		(sender
			cover: (64 to: 69)
			declaredAt: (64 to: 69)) ] valueCoveringAll:
		{62 to: 62})
		ifTrue: [
			[
			(aBalance
				cover: (81 to: 88)
				declaredAt: (16 to: 23)) -
				(amount
					cover: (92 to: 97)
					declaredAt: (92 to: 97)) ] valueCoveringAll:
				{90 to: 90} ]
		ifFalse: [
			[
			(aBalance
				cover: (112 to: 119)
				declaredAt: (16 to: 23)) +
				(amount
					cover: (123 to: 128)
					declaredAt: (92 to: 97)) ] valueCoveringAll:
				{121 to: 121} ]
	"PONER ERROR DESPUES" ] valueCoveringAll:
		{72 to: 78. 101 to: 108}.! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:01:41'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 17:01:41'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 17:01:41'!
PASSED!
!Behavior method!
extractionLeg
	^ sender
		cover: (17 to: 22)
		declaredAt: (17 to: 22).! !

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 6/2/2021 17:01:41'!
PASSED!
!Behavior method!
depositLeg
	^ reciever
		cover: (14 to: 21)
		declaredAt: (14 to: 21).! !

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 6/2/2021 17:01:41'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 17:01:41'!
PASSED!
!Behavior method!
negativeValueTransfer
	"Cannot do a negative value transfer"
	^ self.! !

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 17:01:41'!
PASSED!
!Behavior method!
accountSummary
	| reporte |
	(reporte _ [
	(OrderedCollection
		cover: (38 to: 54)
		declaredAt: (38 to: 54)) new ] valueCoveringAll:
		{56 to: 58})
		cover: (29 to: 35)
		declaredAt: (18 to: 24).
	[
	(transactions
		cover: (64 to: 75)
		declaredAt: (64 to: 75)) do: [ :aTransaction |
		[
		([
		(aTransaction
			cover: (100 to: 111)
			declaredAt: (83 to: 94)) isKindOf:
			(Deposit
				cover: (123 to: 129)
				declaredAt: (123 to: 129)) ] valueCoveringAll:
			{113 to: 121}) ifTrue: [
			[
			(reporte
				cover: (141 to: 147)
				declaredAt: (18 to: 24)) add:
				([
				('Deposito por ' coverAll:
					{155 to: 169}) ,
					([
					([
					(aTransaction
						cover: (172 to: 183)
						declaredAt: (83 to: 94)) value ] valueCoveringAll:
						{185 to: 189}) asString ] valueCoveringAll:
						{191 to: 198}) ] valueCoveringAll:
					{170 to: 170}) ] valueCoveringAll:
				{149 to: 152} ]] valueCoveringAll:
			{133 to: 139}.
		[
		([
		(aTransaction
			cover: (205 to: 216)
			declaredAt: (83 to: 94)) isKindOf:
			(Withdraw
				cover: (228 to: 235)
				declaredAt: (228 to: 235)) ] valueCoveringAll:
			{218 to: 226}) ifTrue: [
			[
			(reporte
				cover: (247 to: 253)
				declaredAt: (18 to: 24)) add:
				([
				('Extraccion por ' coverAll:
					{261 to: 277}) ,
					([
					([
					(aTransaction
						cover: (280 to: 291)
						declaredAt: (83 to: 94)) value ] valueCoveringAll:
						{293 to: 297}) asString ] valueCoveringAll:
						{299 to: 306}) ] valueCoveringAll:
					{278 to: 278}) ] valueCoveringAll:
				{255 to: 258} ]] valueCoveringAll:
			{239 to: 245}.
		[
		([
		(aTransaction
			cover: (314 to: 325)
			declaredAt: (83 to: 94)) isKindOf:
			(Transfer
				cover: (337 to: 344)
				declaredAt: (337 to: 344)) ] valueCoveringAll:
			{327 to: 335}) ifTrue: [
			[
			([
			([
			(aTransaction
				cover: (360 to: 371)
				declaredAt: (83 to: 94)) extractionLeg ] valueCoveringAll:
				{373 to: 385}) =
				(self coverAll:
					{389 to: 392}) ] valueCoveringAll:
				{387 to: 387}) ifTrue: [
				[
				(reporte
					cover: (403 to: 409)
					declaredAt: (18 to: 24)) add:
					([
					('Salida por transferencia de ' coverAll:
						{417 to: 446}) ,
						([
						([
						(aTransaction
							cover: (449 to: 460)
							declaredAt: (83 to: 94)) value ] valueCoveringAll:
							{462 to: 466}) asString ] valueCoveringAll:
							{468 to: 475}) ] valueCoveringAll:
						{447 to: 447}) ] valueCoveringAll:
					{411 to: 414} ]] valueCoveringAll:
				{394 to: 400}.
			[
			([
			([
			(aTransaction
				cover: (483 to: 494)
				declaredAt: (83 to: 94)) depositLeg ] valueCoveringAll:
				{497 to: 506}) =
				(self coverAll:
					{511 to: 514}) ] valueCoveringAll:
				{509 to: 509}) ifTrue: [
				[
				(reporte
					cover: (526 to: 532)
					declaredAt: (18 to: 24)) add:
					([
					('Entrada por transferencia de ' coverAll:
						{540 to: 570}) ,
						([
						([
						(aTransaction
							cover: (573 to: 584)
							declaredAt: (83 to: 94)) value ] valueCoveringAll:
							{586 to: 590}) asString ] valueCoveringAll:
							{592 to: 599}) ] valueCoveringAll:
						{571 to: 571}) ] valueCoveringAll:
					{534 to: 537} ]] valueCoveringAll:
				{517 to: 523} ]] valueCoveringAll:
			{348 to: 354} ]] valueCoveringAll:
		{77 to: 79}.
	[
	(reporte
		cover: (657 to: 663)
		declaredAt: (18 to: 24)) addLast:
		([
		('Balance = ' coverAll:
			{675 to: 686}) ,
			([
			([
			(self coverAll:
				{689 to: 692}) balance ] valueCoveringAll:
				{694 to: 700}) asString ] valueCoveringAll:
				{702 to: 709}) ] valueCoveringAll:
			{687 to: 687}) ] valueCoveringAll:
		{665 to: 672}.
	^ reporte
		cover: (718 to: 724)
		declaredAt: (18 to: 24).! !

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 17:01:41'!
PASSED!
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 17:01:41'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 17:01:41'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 17:01:41'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 17:01:41'!
PASSED!
!Behavior method!
value
	^ amount
		cover: (9 to: 14)
		declaredAt: (9 to: 14).! !

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 17:01:41'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 17:01:41'!
PASSED!
!Behavior method!
transferNet
	"local2:=transactions inject: 0 into: [:sum :aTransfer| 
						(aTransfer extractionLeg = self) ifTrue:[sum +aTransfer value negated] ifFalse: [sum +aTransfer value]]."
	| local2 |
	(local2 _ [
	(transactions
		cover: (208 to: 219)
		declaredAt: (208 to: 219))
		sum: [ :aTransaction |
			[
			([
			(aTransaction
				cover: (245 to: 256)
				declaredAt: (228 to: 239)) isKindOf:
				(Transfer
					cover: (268 to: 275)
					declaredAt: (268 to: 275)) ] valueCoveringAll:
				{258 to: 266}) ifTrue: [
				[
				([
				([
				(aTransaction
					cover: (293 to: 304)
					declaredAt: (228 to: 239)) depositLeg ] valueCoveringAll:
					{306 to: 315}) =
					(self coverAll:
						{319 to: 322}) ] valueCoveringAll:
					{317 to: 317})
					ifTrue: [
						[
						(aTransaction
							cover: (333 to: 344)
							declaredAt: (228 to: 239)) value ] valueCoveringAll:
							{346 to: 350} ]
					ifFalse: [
						[
						([
						(aTransaction
							cover: (362 to: 373)
							declaredAt: (228 to: 239)) value ] valueCoveringAll:
							{375 to: 379}) negated ] valueCoveringAll:
							{381 to: 387} ]] valueCoveringAll:
					{325 to: 331. 353 to: 360} ]] valueCoveringAll:
				{278 to: 284} ]
		ifEmpty: [
			0 coverAll:
				{404 to: 404} ]] valueCoveringAll:
		{221 to: 224. 395 to: 402})
		cover: (199 to: 204)
		declaredAt: (14 to: 19).
	^ local2
		cover: (412 to: 417)
		declaredAt: (14 to: 19).! !

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 17:01:41'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 17:01:41'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 17:01:41'!
PASSED!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (26 to: 42)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (61 to: 77)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{79 to: 81})
		cover: (50 to: 56)
		declaredAt: (50 to: 56).! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (13 to: 20)
		declaredAt: (13 to: 20))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (42 to: 50)
				declaredAt: (30 to: 38)) balance ] valueCoveringAll:
				{52 to: 58} ]
		ifEmpty: [
			0 coverAll:
				{73 to: 73} ]] valueCoveringAll:
		{22 to: 25. 62 to: 69}.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Am 6/2/2021 17:01:41'!
PASSED!
!Behavior method!
with: anAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}.
	[ cascadeReceiver add: anAccount ] valueCoveringAll:
		{32 to: 45}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{50 to: 57} ] value.! !
!Behavior method!
add: accountToAdd
	[
	(self coverAll:
		{21 to: 24}) assertCanAdd:
		(accountToAdd
			cover: (40 to: 51)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{26 to: 38}.
	[
	(accounts
		cover: (58 to: 65)
		declaredAt: (58 to: 65)) add:
		(accountToAdd
			cover: (72 to: 83)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{67 to: 70}.
	[
	(accountToAdd
		cover: (87 to: 98)
		declaredAt: (6 to: 17)) addedTo:
		(self coverAll:
			{109 to: 112}) ] valueCoveringAll:
		{100 to: 107}.! !
!Behavior method!
assertCanAdd: accountToAdd
	[
	([
	(self coverAll:
		{31 to: 34}) anyRootParentIsComposedBy:
		(accountToAdd
			cover: (63 to: 74)
			declaredAt: (15 to: 26)) ] valueCoveringAll:
		{36 to: 61}) ifTrue: [
		[
		(self coverAll:
			{87 to: 90}) signalCanNotAddAccount ] valueCoveringAll:
			{92 to: 113} ]] valueCoveringAll:
		{77 to: 83}.! !
!Behavior method!
anyRootParentIsComposedBy: accountToAdd
	^ [
	([
	(self coverAll:
		{44 to: 47}) rootParents ] valueCoveringAll:
		{49 to: 59}) anySatisfy: [ :aParent |
		[
		(aParent
			cover: (86 to: 92)
			declaredAt: (76 to: 82)) isComposedBy:
			(accountToAdd
				cover: (108 to: 119)
				declaredAt: (28 to: 39)) ] valueCoveringAll:
			{94 to: 106} ]] valueCoveringAll:
		{61 to: 71}.! !
!Behavior method!
rootParents
	| rootParents |
	(rootParents _ [
	(Set
		cover: (50 to: 52)
		declaredAt: (50 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(self coverAll:
		{60 to: 63}) addRootParentsTo:
		(rootParents
			cover: (83 to: 93)
			declaredAt: (18 to: 28)) ] valueCoveringAll:
		{65 to: 81}.
	^ rootParents
		cover: (101 to: 111)
		declaredAt: (18 to: 28).! !
!Behavior method!
addRootParentsTo: rootParents
	[
	(parents
		cover: (33 to: 39)
		declaredAt: (33 to: 39))
		ifEmpty: [
			[
			(rootParents
				cover: (55 to: 65)
				declaredAt: (19 to: 29)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (96 to: 102)
				declaredAt: (33 to: 39)) do: [ :aParent |
				[
				(aParent
					cover: (121 to: 127)
					declaredAt: (111 to: 117)) addRootParentsTo:
					(rootParents
						cover: (147 to: 157)
						declaredAt: (19 to: 29)) ] valueCoveringAll:
					{129 to: 145} ]] valueCoveringAll:
				{104 to: 106} ]] valueCoveringAll:
		{44 to: 51. 82 to: 92}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	([
	(self coverAll:
		{29 to: 32}) =
		(anAccount
			cover: (36 to: 44)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 34}) or: [
		[
		(accounts
			cover: (52 to: 59)
			declaredAt: (52 to: 59)) anySatisfy: [ :composedAccount |
			[
			([
			(composedAccount
				cover: (95 to: 109)
				declaredAt: (76 to: 90)) isComposedBy:
				(anAccount
					cover: (125 to: 133)
					declaredAt: (15 to: 23)) ] valueCoveringAll:
				{111 to: 123}) or: [
				[
				(anAccount
					cover: (142 to: 150)
					declaredAt: (15 to: 23)) isComposedBy:
					(composedAccount
						cover: (166 to: 180)
						declaredAt: (76 to: 90)) ] valueCoveringAll:
					{152 to: 164} ]] valueCoveringAll:
				{136 to: 138} ]] valueCoveringAll:
			{61 to: 71} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
addedTo: aPortfolio
	[
	(self coverAll:
		{23 to: 26}) subclassResponsibility ] valueCoveringAll:
		{28 to: 49}.! !

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Am 6/2/2021 17:01:41'!
ERROR!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Am 6/2/2021 17:01:41'!
ERROR!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) anySatisfy: [ :anAccount |
		[
		(anAccount
			cover: (68 to: 76)
			declaredAt: (56 to: 64)) hasRegistered:
			(aTransaction
				cover: (93 to: 104)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{78 to: 91} ]] valueCoveringAll:
		{41 to: 51}.! !

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Am 6/2/2021 17:01:41'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Am 6/2/2021 17:01:41'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Am 6/2/2021 17:01:41'!
ERROR!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (53 to: 69)
		declaredAt: (53 to: 69)) new ] valueCoveringAll:
		{71 to: 73})
		cover: (37 to: 48)
		declaredAt: (19 to: 30).
	[
	(accounts
		cover: (77 to: 84)
		declaredAt: (77 to: 84)) do: [ :anAccount |
		[
		(anAccount
			cover: (105 to: 113)
			declaredAt: (93 to: 101)) addTransactionsTo:
			(transactions
				cover: (134 to: 145)
				declaredAt: (19 to: 30)) ] valueCoveringAll:
			{115 to: 132} ]] valueCoveringAll:
		{86 to: 88}.
	^ transactions
		cover: (154 to: 165)
		declaredAt: (19 to: 30).! !

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Am 6/2/2021 17:01:41'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Am 6/2/2021 17:01:41'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Am 6/2/2021 17:01:41'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Am 6/2/2021 17:01:41'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Am 6/2/2021 17:01:41'!
ERROR!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Am 6/2/2021 17:01:41'!
ERROR!
!Behavior method!
addedTo: aPortfolio
	[
	(parents
		cover: (25 to: 31)
		declaredAt: (25 to: 31)) add:
		(aPortfolio
			cover: (38 to: 47)
			declaredAt: (10 to: 19)) ] valueCoveringAll:
		{33 to: 36}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	(self coverAll:
		{28 to: 31}) =
		(anAccount
			cover: (35 to: 43)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{33 to: 33}.! !

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Am 6/2/2021 17:01:41'!
ERROR!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Am 6/2/2021 17:01:41'!
ERROR!
!Behavior method!
with: anAccount with: anotherAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{41 to: 44}) new ] valueCoveringAll:
		{46 to: 48}.
	[ cascadeReceiver add: anAccount ] valueCoveringAll:
		{53 to: 66}.
	[ cascadeReceiver add: anotherAccount ] valueCoveringAll:
		{71 to: 89}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{94 to: 101} ] value.! !

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Am 6/2/2021 17:01:41'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Am 6/2/2021 17:01:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Am 6/2/2021 17:01:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Am 6/2/2021 17:01:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Am 6/2/2021 17:01:41'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Am 6/2/2021 17:01:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Am 6/2/2021 17:01:41'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Am 6/2/2021 17:01:41'!
PASSED!

----STARTUP---- (2 June 2021 17:02:55) as /home/alejandro/Documents/Cs.Computacion/Inge 1/linux64/CuisUniversity-4532.image!

!Behavior method!
initialize
	[ super initialize ] valueCoveringAll:
		{20 to: 29}.
	(transactions _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (33 to: 44)
		declaredAt: (33 to: 44).
	(transfers _ [
	(OrderedCollection
		cover: (86 to: 102)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (73 to: 81)
		declaredAt: (73 to: 81).! !
!Behavior method!
from: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount
	| aTransfer |
	(aTransfer _ [
	(Transfer
		cover: (95 to: 102)
		declaredAt: (95 to: 102)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (84 to: 92)
		declaredAt: (72 to: 80).
	[
	(aTransfer
		cover: (110 to: 118)
		declaredAt: (72 to: 80))
		madeFrom:
			(aReceptiveAccount
				cover: (130 to: 146)
				declaredAt: (7 to: 23))
		to:
			(aReceptiveAccount2
				cover: (152 to: 169)
				declaredAt: (29 to: 46))
		withAmount:
			(anAmount
				cover: (184 to: 191)
				declaredAt: (60 to: 67)) ] valueCoveringAll:
		{120 to: 128. 148 to: 150. 172 to: 182}.
	^ aTransfer
		cover: (196 to: 204)
		declaredAt: (72 to: 80).! !
!Behavior method!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount
	[
	([
	(anAmount
		cover: (77 to: 84)
		declaredAt: (64 to: 71)) <=
		(0 coverAll:
			{88 to: 88}) ] valueCoveringAll:
		{86 to: 87}) ifTrue: [
		[
		(self coverAll:
			{99 to: 102}) error:
			([
			([
			(self coverAll:
				{111 to: 114}) class ] valueCoveringAll:
				{116 to: 120}) negativeValueTransfer ] valueCoveringAll:
				{122 to: 142}) ] valueCoveringAll:
			{104 to: 109} ]] valueCoveringAll:
		{91 to: 97}.
	(sender _ aReceptiveAccount
		cover: (157 to: 173)
		declaredAt: (11 to: 27))
		cover: (149 to: 154)
		declaredAt: (149 to: 154).
	(reciever _ aReceptiveAccount2
		cover: (189 to: 206)
		declaredAt: (33 to: 50))
		cover: (178 to: 185)
		declaredAt: (178 to: 185).
	(amount _ anAmount
		cover: (220 to: 227)
		declaredAt: (64 to: 71))
		cover: (211 to: 216)
		declaredAt: (211 to: 216).
	[
	(aReceptiveAccount2
		cover: (231 to: 248)
		declaredAt: (33 to: 50)) registerTransfer:
		(self coverAll:
			{268 to: 271}) ] valueCoveringAll:
		{250 to: 266}.
	[
	(aReceptiveAccount
		cover: (275 to: 291)
		declaredAt: (11 to: 27)) registerTransfer:
		(self coverAll:
			{311 to: 314}) ] valueCoveringAll:
		{293 to: 309}.! !
!Behavior method!
registerTransfer: aTransfer
	[
	(transactions
		cover: (31 to: 42)
		declaredAt: (31 to: 42)) add:
		(aTransfer
			cover: (49 to: 57)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{44 to: 47}.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (14 to: 25)
		declaredAt: (14 to: 25))
		inject:
			(0 coverAll:
				{38 to: 38})
		into: [ :currentBalance :transaction |
			[
			([
			(transaction
				cover: (86 to: 96)
				declaredAt: (67 to: 77)) isKindOf:
				(Transfer
					cover: (108 to: 115)
					declaredAt: (108 to: 115)) ] valueCoveringAll:
				{98 to: 106})
				ifFalse: [
					[
					(transaction
						cover: (127 to: 137)
						declaredAt: (67 to: 77)) affectBalance:
						(currentBalance
							cover: (154 to: 167)
							declaredAt: (51 to: 64)) ] valueCoveringAll:
						{139 to: 152} ]
				ifTrue: [
					[
					(transaction
						cover: (179 to: 189)
						declaredAt: (67 to: 77))
						affectBalance:
							(currentBalance
								cover: (206 to: 219)
								declaredAt: (51 to: 64))
						fromAccount:
							(self coverAll:
								{234 to: 237}) ] valueCoveringAll:
						{191 to: 204. 221 to: 232} ]] valueCoveringAll:
				{118 to: 125. 170 to: 176} ]] valueCoveringAll:
		{30 to: 36. 42 to: 46}.! !
!Behavior method!
affectBalance: aBalance fromAccount: anAccount
	^ [
	([
	(anAccount
		cover: (52 to: 60)
		declaredAt: (38 to: 46)) =
		(sender
			cover: (64 to: 69)
			declaredAt: (64 to: 69)) ] valueCoveringAll:
		{62 to: 62})
		ifTrue: [
			[
			(aBalance
				cover: (81 to: 88)
				declaredAt: (16 to: 23)) -
				(amount
					cover: (92 to: 97)
					declaredAt: (92 to: 97)) ] valueCoveringAll:
				{90 to: 90} ]
		ifFalse: [
			[
			(aBalance
				cover: (112 to: 119)
				declaredAt: (16 to: 23)) +
				(amount
					cover: (123 to: 128)
					declaredAt: (92 to: 97)) ] valueCoveringAll:
				{121 to: 121} ]
	"PONER ERROR DESPUES" ] valueCoveringAll:
		{72 to: 78. 101 to: 108}.! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:03:13'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 17:03:13'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 17:03:13'!
PASSED!
!Behavior method!
extractionLeg
	^ sender
		cover: (17 to: 22)
		declaredAt: (17 to: 22).! !

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 6/2/2021 17:03:13'!
PASSED!
!Behavior method!
depositLeg
	^ reciever
		cover: (14 to: 21)
		declaredAt: (14 to: 21).! !

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 6/2/2021 17:03:13'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 17:03:13'!
PASSED!
!Behavior method!
negativeValueTransfer
	"Cannot do a negative value transfer"
	^ self.! !

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 17:03:13'!
PASSED!
!Behavior method!
accountSummary
	| reporte |
	(reporte _ [
	(OrderedCollection
		cover: (38 to: 54)
		declaredAt: (38 to: 54)) new ] valueCoveringAll:
		{56 to: 58})
		cover: (29 to: 35)
		declaredAt: (18 to: 24).
	[
	(transactions
		cover: (64 to: 75)
		declaredAt: (64 to: 75)) do: [ :aTransaction |
		[
		([
		(aTransaction
			cover: (100 to: 111)
			declaredAt: (83 to: 94)) isKindOf:
			(Deposit
				cover: (123 to: 129)
				declaredAt: (123 to: 129)) ] valueCoveringAll:
			{113 to: 121}) ifTrue: [
			[
			(reporte
				cover: (141 to: 147)
				declaredAt: (18 to: 24)) add:
				([
				('Deposito por ' coverAll:
					{155 to: 169}) ,
					([
					([
					(aTransaction
						cover: (172 to: 183)
						declaredAt: (83 to: 94)) value ] valueCoveringAll:
						{185 to: 189}) asString ] valueCoveringAll:
						{191 to: 198}) ] valueCoveringAll:
					{170 to: 170}) ] valueCoveringAll:
				{149 to: 152} ]] valueCoveringAll:
			{133 to: 139}.
		[
		([
		(aTransaction
			cover: (205 to: 216)
			declaredAt: (83 to: 94)) isKindOf:
			(Withdraw
				cover: (228 to: 235)
				declaredAt: (228 to: 235)) ] valueCoveringAll:
			{218 to: 226}) ifTrue: [
			[
			(reporte
				cover: (247 to: 253)
				declaredAt: (18 to: 24)) add:
				([
				('Extraccion por ' coverAll:
					{261 to: 277}) ,
					([
					([
					(aTransaction
						cover: (280 to: 291)
						declaredAt: (83 to: 94)) value ] valueCoveringAll:
						{293 to: 297}) asString ] valueCoveringAll:
						{299 to: 306}) ] valueCoveringAll:
					{278 to: 278}) ] valueCoveringAll:
				{255 to: 258} ]] valueCoveringAll:
			{239 to: 245}.
		[
		([
		(aTransaction
			cover: (314 to: 325)
			declaredAt: (83 to: 94)) isKindOf:
			(Transfer
				cover: (337 to: 344)
				declaredAt: (337 to: 344)) ] valueCoveringAll:
			{327 to: 335}) ifTrue: [
			[
			([
			([
			(aTransaction
				cover: (360 to: 371)
				declaredAt: (83 to: 94)) extractionLeg ] valueCoveringAll:
				{373 to: 385}) =
				(self coverAll:
					{389 to: 392}) ] valueCoveringAll:
				{387 to: 387}) ifTrue: [
				[
				(reporte
					cover: (403 to: 409)
					declaredAt: (18 to: 24)) add:
					([
					('Salida por transferencia de ' coverAll:
						{417 to: 446}) ,
						([
						([
						(aTransaction
							cover: (449 to: 460)
							declaredAt: (83 to: 94)) value ] valueCoveringAll:
							{462 to: 466}) asString ] valueCoveringAll:
							{468 to: 475}) ] valueCoveringAll:
						{447 to: 447}) ] valueCoveringAll:
					{411 to: 414} ]] valueCoveringAll:
				{394 to: 400}.
			[
			([
			([
			(aTransaction
				cover: (483 to: 494)
				declaredAt: (83 to: 94)) depositLeg ] valueCoveringAll:
				{497 to: 506}) =
				(self coverAll:
					{511 to: 514}) ] valueCoveringAll:
				{509 to: 509}) ifTrue: [
				[
				(reporte
					cover: (526 to: 532)
					declaredAt: (18 to: 24)) add:
					([
					('Entrada por transferencia de ' coverAll:
						{540 to: 570}) ,
						([
						([
						(aTransaction
							cover: (573 to: 584)
							declaredAt: (83 to: 94)) value ] valueCoveringAll:
							{586 to: 590}) asString ] valueCoveringAll:
							{592 to: 599}) ] valueCoveringAll:
						{571 to: 571}) ] valueCoveringAll:
					{534 to: 537} ]] valueCoveringAll:
				{517 to: 523} ]] valueCoveringAll:
			{348 to: 354} ]] valueCoveringAll:
		{77 to: 79}.
	[
	(reporte
		cover: (657 to: 663)
		declaredAt: (18 to: 24)) addLast:
		([
		('Balance = ' coverAll:
			{675 to: 686}) ,
			([
			([
			(self coverAll:
				{689 to: 692}) balance ] valueCoveringAll:
				{694 to: 700}) asString ] valueCoveringAll:
				{702 to: 709}) ] valueCoveringAll:
			{687 to: 687}) ] valueCoveringAll:
		{665 to: 672}.
	^ reporte
		cover: (718 to: 724)
		declaredAt: (18 to: 24).! !

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 17:03:13'!
PASSED!
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 17:03:13'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 17:03:13'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 17:03:13'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 17:03:13'!
PASSED!
!Behavior method!
value
	^ amount
		cover: (9 to: 14)
		declaredAt: (9 to: 14).! !

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 17:03:13'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 17:03:13'!
PASSED!
!Behavior method!
transferNet
	"local2:=transactions inject: 0 into: [:sum :aTransfer| 
						(aTransfer extractionLeg = self) ifTrue:[sum +aTransfer value negated] ifFalse: [sum +aTransfer value]]."
	| local2 |
	(local2 _ [
	(transactions
		cover: (208 to: 219)
		declaredAt: (208 to: 219))
		sum: [ :aTransaction |
			[
			([
			(aTransaction
				cover: (245 to: 256)
				declaredAt: (228 to: 239)) isKindOf:
				(Transfer
					cover: (268 to: 275)
					declaredAt: (268 to: 275)) ] valueCoveringAll:
				{258 to: 266}) ifTrue: [
				[
				([
				([
				(aTransaction
					cover: (293 to: 304)
					declaredAt: (228 to: 239)) depositLeg ] valueCoveringAll:
					{306 to: 315}) =
					(self coverAll:
						{319 to: 322}) ] valueCoveringAll:
					{317 to: 317})
					ifTrue: [
						[
						(aTransaction
							cover: (333 to: 344)
							declaredAt: (228 to: 239)) value ] valueCoveringAll:
							{346 to: 350} ]
					ifFalse: [
						[
						([
						(aTransaction
							cover: (362 to: 373)
							declaredAt: (228 to: 239)) value ] valueCoveringAll:
							{375 to: 379}) negated ] valueCoveringAll:
							{381 to: 387} ]] valueCoveringAll:
					{325 to: 331. 353 to: 360} ]] valueCoveringAll:
				{278 to: 284} ]
		ifEmpty: [
			0 coverAll:
				{404 to: 404} ]] valueCoveringAll:
		{221 to: 224. 395 to: 402})
		cover: (199 to: 204)
		declaredAt: (14 to: 19).
	^ local2
		cover: (412 to: 417)
		declaredAt: (14 to: 19).! !

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 17:03:13'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 17:03:13'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 17:03:13'!
PASSED!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (26 to: 42)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (61 to: 77)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{79 to: 81})
		cover: (50 to: 56)
		declaredAt: (50 to: 56).! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (13 to: 20)
		declaredAt: (13 to: 20))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (42 to: 50)
				declaredAt: (30 to: 38)) balance ] valueCoveringAll:
				{52 to: 58} ]
		ifEmpty: [
			0 coverAll:
				{73 to: 73} ]] valueCoveringAll:
		{22 to: 25. 62 to: 69}.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Am 6/2/2021 17:03:14'!
PASSED!
!Behavior method!
with: anAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}.
	[ cascadeReceiver add: anAccount ] valueCoveringAll:
		{32 to: 45}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{50 to: 57} ] value.! !
!Behavior method!
add: accountToAdd
	[
	(self coverAll:
		{21 to: 24}) assertCanAdd:
		(accountToAdd
			cover: (40 to: 51)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{26 to: 38}.
	[
	(accounts
		cover: (58 to: 65)
		declaredAt: (58 to: 65)) add:
		(accountToAdd
			cover: (72 to: 83)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{67 to: 70}.
	[
	(accountToAdd
		cover: (87 to: 98)
		declaredAt: (6 to: 17)) addedTo:
		(self coverAll:
			{109 to: 112}) ] valueCoveringAll:
		{100 to: 107}.! !
!Behavior method!
assertCanAdd: accountToAdd
	[
	([
	(self coverAll:
		{31 to: 34}) anyRootParentIsComposedBy:
		(accountToAdd
			cover: (63 to: 74)
			declaredAt: (15 to: 26)) ] valueCoveringAll:
		{36 to: 61}) ifTrue: [
		[
		(self coverAll:
			{87 to: 90}) signalCanNotAddAccount ] valueCoveringAll:
			{92 to: 113} ]] valueCoveringAll:
		{77 to: 83}.! !
!Behavior method!
anyRootParentIsComposedBy: accountToAdd
	^ [
	([
	(self coverAll:
		{44 to: 47}) rootParents ] valueCoveringAll:
		{49 to: 59}) anySatisfy: [ :aParent |
		[
		(aParent
			cover: (86 to: 92)
			declaredAt: (76 to: 82)) isComposedBy:
			(accountToAdd
				cover: (108 to: 119)
				declaredAt: (28 to: 39)) ] valueCoveringAll:
			{94 to: 106} ]] valueCoveringAll:
		{61 to: 71}.! !
!Behavior method!
rootParents
	| rootParents |
	(rootParents _ [
	(Set
		cover: (50 to: 52)
		declaredAt: (50 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(self coverAll:
		{60 to: 63}) addRootParentsTo:
		(rootParents
			cover: (83 to: 93)
			declaredAt: (18 to: 28)) ] valueCoveringAll:
		{65 to: 81}.
	^ rootParents
		cover: (101 to: 111)
		declaredAt: (18 to: 28).! !
!Behavior method!
addRootParentsTo: rootParents
	[
	(parents
		cover: (33 to: 39)
		declaredAt: (33 to: 39))
		ifEmpty: [
			[
			(rootParents
				cover: (55 to: 65)
				declaredAt: (19 to: 29)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (96 to: 102)
				declaredAt: (33 to: 39)) do: [ :aParent |
				[
				(aParent
					cover: (121 to: 127)
					declaredAt: (111 to: 117)) addRootParentsTo:
					(rootParents
						cover: (147 to: 157)
						declaredAt: (19 to: 29)) ] valueCoveringAll:
					{129 to: 145} ]] valueCoveringAll:
				{104 to: 106} ]] valueCoveringAll:
		{44 to: 51. 82 to: 92}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	([
	(self coverAll:
		{29 to: 32}) =
		(anAccount
			cover: (36 to: 44)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 34}) or: [
		[
		(accounts
			cover: (52 to: 59)
			declaredAt: (52 to: 59)) anySatisfy: [ :composedAccount |
			[
			([
			(composedAccount
				cover: (95 to: 109)
				declaredAt: (76 to: 90)) isComposedBy:
				(anAccount
					cover: (125 to: 133)
					declaredAt: (15 to: 23)) ] valueCoveringAll:
				{111 to: 123}) or: [
				[
				(anAccount
					cover: (142 to: 150)
					declaredAt: (15 to: 23)) isComposedBy:
					(composedAccount
						cover: (166 to: 180)
						declaredAt: (76 to: 90)) ] valueCoveringAll:
					{152 to: 164} ]] valueCoveringAll:
				{136 to: 138} ]] valueCoveringAll:
			{61 to: 71} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
addedTo: aPortfolio
	^ self.! !

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Am 6/2/2021 17:03:14'!
PASSED!
!Behavior method!
with: anAccount with: anotherAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{41 to: 44}) new ] valueCoveringAll:
		{46 to: 48}.
	[ cascadeReceiver add: anAccount ] valueCoveringAll:
		{53 to: 66}.
	[ cascadeReceiver add: anotherAccount ] valueCoveringAll:
		{71 to: 89}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{94 to: 101} ] value.! !
!Behavior method!
addedTo: aPortfolio
	[
	(parents
		cover: (25 to: 31)
		declaredAt: (25 to: 31)) add:
		(aPortfolio
			cover: (38 to: 47)
			declaredAt: (10 to: 19)) ] valueCoveringAll:
		{33 to: 36}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	(self coverAll:
		{28 to: 31}) =
		(anAccount
			cover: (35 to: 43)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{33 to: 33}.! !

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Am 6/2/2021 17:03:14'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) anySatisfy: [ :anAccount |
		[
		(anAccount
			cover: (68 to: 76)
			declaredAt: (56 to: 64)) hasRegistered:
			(aTransaction
				cover: (93 to: 104)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{78 to: 91} ]] valueCoveringAll:
		{41 to: 51}.! !

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Am 6/2/2021 17:03:14'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Am 6/2/2021 17:03:14'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Am 6/2/2021 17:03:14'!
PASSED!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (53 to: 69)
		declaredAt: (53 to: 69)) new ] valueCoveringAll:
		{71 to: 73})
		cover: (37 to: 48)
		declaredAt: (19 to: 30).
	[
	(accounts
		cover: (77 to: 84)
		declaredAt: (77 to: 84)) do: [ :anAccount |
		[
		(anAccount
			cover: (105 to: 113)
			declaredAt: (93 to: 101)) addTransactionsTo:
			(transactions
				cover: (134 to: 145)
				declaredAt: (19 to: 30)) ] valueCoveringAll:
			{115 to: 132} ]] valueCoveringAll:
		{86 to: 88}.
	^ transactions
		cover: (154 to: 165)
		declaredAt: (19 to: 30).! !

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Am 6/2/2021 17:03:14'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(aCollectionOfTransactions
		cover: (48 to: 72)
		declaredAt: (20 to: 44)) addAll:
		(transactions
			cover: (82 to: 93)
			declaredAt: (82 to: 93)) ] valueCoveringAll:
		{74 to: 80}.! !

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Am 6/2/2021 17:03:14'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(accounts
		cover: (48 to: 55)
		declaredAt: (48 to: 55)) do: [ :anAccount |
		[
		(anAccount
			cover: (76 to: 84)
			declaredAt: (64 to: 72)) addTransactionsTo:
			(aCollectionOfTransactions
				cover: (105 to: 129)
				declaredAt: (20 to: 44)) ] valueCoveringAll:
			{86 to: 103} ]] valueCoveringAll:
		{57 to: 59}.! !

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Am 6/2/2021 17:03:14'!
PASSED!
!Behavior method!
signalCanNotAddAccount
	[
	(self coverAll:
		{27 to: 30}) error:
		([
		([
		(self coverAll:
			{39 to: 42}) class ] valueCoveringAll:
			{44 to: 48}) canNotAddAccountErrorMessage ] valueCoveringAll:
			{50 to: 77}) ] valueCoveringAll:
		{32 to: 37}.! !
!Behavior method!
canNotAddAccountErrorMessage
	^ 'Can not add repeated account to a portfolio' coverAll:
		{34 to: 78}.! !
!Behavior method!
accountsSize
	^ [
	(accounts
		cover: (18 to: 25)
		declaredAt: (18 to: 25)) size ] valueCoveringAll:
		{27 to: 30}.! !
!Behavior method!
accountsIncludes: anAccount
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) includes:
		(anAccount
			cover: (51 to: 59)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{41 to: 49}.! !

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Am 6/2/2021 17:03:14'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Am 6/2/2021 17:03:14'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Am 6/2/2021 17:03:14'!
PASSED!
!Behavior method!
accountsIsEmpty
	^ [
	(accounts
		cover: (21 to: 28)
		declaredAt: (21 to: 28)) isEmpty ] valueCoveringAll:
		{30 to: 36}.! !

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Am 6/2/2021 17:03:14'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Am 6/2/2021 17:03:14'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Am 6/2/2021 17:03:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Am 6/2/2021 17:03:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Am 6/2/2021 17:03:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Am 6/2/2021 17:03:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Am 6/2/2021 17:03:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Am 6/2/2021 17:03:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Am 6/2/2021 17:03:14'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Am 6/2/2021 17:03:14'!
PASSED!

AccountTransaction subclass: #TransferLegs
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferLegs category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 17:09:22'!
AccountTransaction subclass: #TransferLegs
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferLegs subclass: #recieverLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferLegs subclass: #RecieverLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #RecieverLeg category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 17:09:40'!
TransferLegs subclass: #RecieverLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferLegs subclass: #SenderLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #SenderLeg category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 17:09:47'!
TransferLegs subclass: #SenderLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!RecieverLeg class methodsFor: 'nil' stamp: 'Am 6/2/2021 17:11:46'!
forTransfer: aTransfer
	^ self new initializeFor: aTransfer! !
!TransferLegs class methodsFor: 'no messages' stamp: 'Am 6/2/2021 17:12:19'!
forTransfer: aTransfer
	^ self new initializeFor: aTransfer! !

!methodRemoval: RecieverLeg class #forTransfer: stamp: 'Am 6/2/2021 17:12:26'!
forTransfer: aTransfer
	^ self new initializeFor: aTransfer!
!TransferLegs methodsFor: 'no messages' stamp: 'Am 6/2/2021 17:12:52'!
initializeFor: aTransfer
	self subclassResponsibility ! !
!TransferLegs methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:13:10' prior: 50866732!
initializeFor: aTransfer
	transfer= aTransfer! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:15:43' prior: 50863923!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount 

	(anAmount <=0) ifTrue:[self error: self class negativeValueTransfer ].

	sender:=SenderLeg forTransfer: self.
	reciever:= SenderLeg forTransfer: self.
	amount:= anAmount.
	aReceptiveAccount2 registerTransfer: self.
	aReceptiveAccount registerTransfer: self.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:16:00' prior: 50866742!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount 

	(anAmount <=0) ifTrue:[self error: self class negativeValueTransfer ].

	sender:=SenderLeg forTransfer: self.
	reciever:= RecieverLeg forTransfer: self.
	amount:= anAmount.
	aReceptiveAccount2 registerTransfer: self.
	aReceptiveAccount registerTransfer: self.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:16:33' prior: 50866756!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount 

	(anAmount <=0) ifTrue:[self error: self class negativeValueTransfer ].

	sender:=SenderLeg forTransfer: self.
	reciever:= RecieverLeg forTransfer: self.
	amount:= anAmount.
	aReceptiveAccount2 registerTransfer: sender.
	aReceptiveAccount registerTransfer: reciever.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:17:14' prior: 50865787!
transferNet
|local2|
	"local2:=transactions inject: 0 into: [:sum :aTransfer| 
						(aTransfer extractionLeg = self) ifTrue:[sum +aTransfer value negated] ifFalse: [sum +aTransfer value]]."
					
	local2:= transactions sum: [:aTransaction|
		(aTransaction isKindOf: TransferLegs) ifTrue: [
				(aTransaction depositLeg = self) ifTrue:[aTransaction value] ifFalse:[aTransaction value negated]		].] ifEmpty:[0].
	
	^local2
	! !

!classRenamed: #TransferLegs as: #TransferLeg stamp: 'Am 6/2/2021 17:17:26'!
Smalltalk renameClassNamed: #TransferLegs as: #TransferLeg!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:17:27' prior: 50866784!
transferNet
|local2|
	"local2:=transactions inject: 0 into: [:sum :aTransfer| 
						(aTransfer extractionLeg = self) ifTrue:[sum +aTransfer value negated] ifFalse: [sum +aTransfer value]]."
					
	local2:= transactions sum: [:aTransaction|
		(aTransaction isKindOf: TransferLeg) ifTrue: [
				(aTransaction depositLeg = self) ifTrue:[aTransaction value] ifFalse:[aTransaction value negated]		].] ifEmpty:[0].
	
	^local2
	! !

RecieverLeg new isKindOf: TransferLeg.!

RecieverLeg new isKindOf: Deposit!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:22:14' prior: 50865744!
accountSummary
	|reporte |
	reporte:=OrderedCollection new.
	
	transactions do: [:aTransaction| 
	(aTransaction isKindOf: Deposit ) ifTrue:[reporte add: ('Deposito por ', aTransaction value asString)].
	(aTransaction isKindOf: Withdraw ) ifTrue:[reporte add: ('Extraccion por ', aTransaction value asString).].
	(aTransaction isKindOf: TransferLeg ) ifTrue:[
		(aTransaction isKindOf: SenderLeg)ifTrue: [reporte add: ('Salida por transferencia de ', aTransaction value asString)].
		(aTransaction  isKindOf: RecieverLeg )ifTrue: [reporte add: ('Entrada por transferencia de ', aTransaction value asString)]				     		
										
										].].
												
		
		
	reporte addLast: ('Balance = ', self balance asString).
	
	^ reporte.! !
!TransferLeg methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:23:11' overrides: 50859951!
value
	self subclassResponsibility ! !
!RecieverLeg methodsFor: 'nil' stamp: 'Am 6/2/2021 17:23:26' overrides: 50866851!
value
	^transfer value.! !
!SenderLeg methodsFor: 'no messages' stamp: 'Am 6/2/2021 17:23:44' overrides: 50866851!
value
	^transfer value! !
!TransferLeg methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:25:20' overrides: 50859955!
affectBalance: aBalance

	^aBalance + transfer value! !
!TransferLeg methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:25:34' prior: 50866863 overrides: 50859955!
affectBalance: aBalance

	self subclassResponsibility ! !
!RecieverLeg methodsFor: 'nil' stamp: 'Am 6/2/2021 17:25:45' overrides: 50866869!
affectBalance: aBalance

	^aBalance + transfer value ! !
!SenderLeg methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:25:57' overrides: 50866869!
affectBalance: aBalance

	^aBalance - transfer value ! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'Am 6/2/2021 17:26:32' prior: 50865815 overrides: 50859721!
balance
	
	^(transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance]).! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:29:50' prior: 50866805!
transferNet
			
	^((transactions select: [:aTransaction| aTransaction isKindOf: TransferLeg ])
		inject: 0
		into: [ :currentBalance :aTransfer | aTransfer affectBalance: currentBalance]).
	
	! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:30:03'!
ERROR!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 17:30:03'!
ERROR!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 17:30:03'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 6/2/2021 17:30:03'!
FAILURE!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 6/2/2021 17:30:03'!
FAILURE!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 17:30:03'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 17:30:03'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 17:30:03'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 17:30:03'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 17:30:03'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 17:30:03'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 17:30:03'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 17:30:03'!
ERROR!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 17:30:03'!
ERROR!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 17:30:03'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 17:30:03'!
ERROR!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 17:30:03'!
ERROR!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:30:22'!
ERROR!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 17:30:22'!
ERROR!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 17:30:22'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 6/2/2021 17:30:22'!
FAILURE!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 6/2/2021 17:30:22'!
FAILURE!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 17:30:22'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 17:30:22'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 17:30:22'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 17:30:22'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 17:30:22'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 17:30:22'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 17:30:22'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 17:30:22'!
ERROR!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 17:30:22'!
ERROR!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 17:30:22'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 17:30:22'!
ERROR!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 17:30:22'!
ERROR!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:30:25'!
ERROR!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:31:28'!
ERROR!

!methodRemoval: Transfer #affectBalance:fromAccount: stamp: 'Am 6/2/2021 17:32:09'!
affectBalance: aBalance fromAccount: anAccount 
	^(anAccount = sender) ifTrue: [aBalance - amount]  ifFalse: [ aBalance + amount].
	
	"PONER ERROR DESPUES"!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:32:45'!
ERROR!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 17:32:45'!
ERROR!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 17:32:45'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 6/2/2021 17:32:45'!
FAILURE!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 6/2/2021 17:32:45'!
FAILURE!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 17:32:45'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 17:32:45'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 17:32:45'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 17:32:45'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 17:32:45'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 17:32:45'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 17:32:45'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 17:32:45'!
ERROR!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 17:32:45'!
ERROR!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 17:32:45'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 17:32:45'!
ERROR!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 17:32:45'!
ERROR!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:32:48'!
ERROR!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:34:08'!
ERROR!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:34:23'!
ERROR!

transfer value !

transfer!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:36:19'!
ERROR!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 17:36:19'!
ERROR!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 17:36:19'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 6/2/2021 17:36:19'!
FAILURE!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 6/2/2021 17:36:19'!
FAILURE!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 17:36:19'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 17:36:19'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 17:36:19'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 17:36:19'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 17:36:19'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 17:36:19'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 17:36:19'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 17:36:19'!
ERROR!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 17:36:19'!
ERROR!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 17:36:19'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 17:36:19'!
ERROR!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 17:36:19'!
ERROR!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:36:21'!
ERROR!

self!
!TransferLeg methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:39:39' prior: 50866737!
initializeFor: aTransfer
	transfer := aTransfer! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:39:45'!
FAILURE!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 17:39:45'!
FAILURE!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 17:39:45'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 6/2/2021 17:39:45'!
FAILURE!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 6/2/2021 17:39:45'!
FAILURE!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 17:39:45'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 17:39:45'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 17:39:45'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 17:39:45'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 17:39:45'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 17:39:45'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 17:39:45'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 17:39:45'!
FAILURE!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 17:39:45'!
FAILURE!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 17:39:45'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 17:39:45'!
FAILURE!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 17:39:45'!
FAILURE!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:39:50'!
FAILURE!

self!

transfer!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:42:58'!
FAILURE!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:42:58'!
FAILURE!
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:43:49' prior: 50866770!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount 

	(anAmount <=0) ifTrue:[self error: self class negativeValueTransfer ].

	sender:=SenderLeg forTransfer: self.
	reciever:= RecieverLeg forTransfer: self.
	amount:= anAmount.
	aReceptiveAccount registerTransfer: sender.
	aReceptiveAccount2 registerTransfer: reciever.! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:43:55'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 17:43:55'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 17:43:55'!
PASSED!

!testRun: #Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 6/2/2021 17:43:55'!
FAILURE!

!testRun: #Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 6/2/2021 17:43:55'!
FAILURE!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 17:43:55'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 17:43:55'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 17:43:55'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 17:43:55'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 17:43:55'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 17:43:55'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 17:43:55'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 17:43:55'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 17:43:55'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 17:43:55'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 17:43:55'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 17:43:55'!
PASSED!
!RecieverLeg methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:46:22'!
otherLeg
	transfer  senderLeg.! !
!SenderLeg methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:46:53'!
otherLeg	

transfer recieverLeg.! !
!TransferLeg methodsFor: 'nil' stamp: 'Am 6/2/2021 17:47:08'!
otherLeg
	self subclassResponsibility ! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:47:33'!
senderLeg
	^sender! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:47:33' prior: 50863658!
test04transferRegitersExtractionLeg
	|account1 account2 transfer|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.
	
	self assert: (transfer senderLeg = account1).

	
	
	

	
	! !

!methodRemoval: Transfer #extractionLeg stamp: 'Am 6/2/2021 17:47:33'!
extractionLeg
	^sender!
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:48:00'!
recieverLeg
	^reciever.! !
!Portfolio2Test methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:48:00' prior: 50863756!
test05transferRegitersDepositLeg
	|account1 account2 transfer|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.
	
	self assert: (transfer recieverLeg = account2).

	
	
	

	
	! !

!methodRemoval: Transfer #depositLeg stamp: 'Am 6/2/2021 17:48:00'!
depositLeg
	^reciever.!
!Portfolio2Test methodsFor: 'transferTests' stamp: 'Am 6/2/2021 17:50:59' prior: 50867307!
test04transferRegitersExtractionLeg
	|account1 account2 transfer senderLeg|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.
	senderLeg:= transfer senderLeg.
	
	self assert: (senderLeg otherLeg = transfer recieverLeg).

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferTests' stamp: 'Am 6/2/2021 17:51:31'!
test04SenderLegKnowsRecieverLeg
	|account1 account2 transfer senderLeg|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.
	senderLeg:= transfer senderLeg.
	
	self assert: (senderLeg otherLeg = transfer recieverLeg).

	
	
	

	
	! !

!methodRemoval: Portfolio2Test #test04transferRegitersExtractionLeg stamp: 'Am 6/2/2021 17:51:31'!
test04transferRegitersExtractionLeg
	|account1 account2 transfer senderLeg|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.
	senderLeg:= transfer senderLeg.
	
	self assert: (senderLeg otherLeg = transfer recieverLeg).

	
	
	

	
	!
!Portfolio2Test methodsFor: 'transferTests' stamp: 'Am 6/2/2021 17:51:46'!
test05tRecieverLegKnowsSenderLeg
	|account1 account2 transfer|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.
	
	self assert: (transfer recieverLeg = account2).

	
	
	

	
	! !

!methodRemoval: Portfolio2Test #test05transferRegitersDepositLeg stamp: 'Am 6/2/2021 17:51:46'!
test05transferRegitersDepositLeg
	|account1 account2 transfer|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.
	
	self assert: (transfer recieverLeg = account2).

	
	
	

	
	!
!Portfolio2Test methodsFor: 'transferTests' stamp: 'Am 6/2/2021 17:52:27' prior: 50867378!
test05tRecieverLegKnowsSenderLeg
	|account1 account2 transfer recieverLeg|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.
	recieverLeg:= transfer senderLeg.
	
	self assert: (recieverLeg otherLeg = transfer senderLeg).

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferTests' stamp: 'Am 6/2/2021 17:52:48' prior: 50867401!
test05tRecieverLegKnowsSenderLeg
	|account1 account2 transfer recieverLeg|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	
	transfer:=Transfer from: account1 to:account2 withAmount: 100.
	recieverLeg:= transfer recieverLeg.
	
	self assert: (recieverLeg otherLeg = transfer senderLeg).

	
	
	

	
	! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:52:52'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 17:52:52'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 17:52:52'!
PASSED!

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'Am 6/2/2021 17:52:52'!
FAILURE!

!testRun: #Portfolio2Test #test05tRecieverLegKnowsSenderLeg stamp: 'Am 6/2/2021 17:52:52'!
FAILURE!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 17:52:52'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 17:52:52'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 17:52:52'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 17:52:52'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 17:52:52'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 17:52:52'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 17:52:52'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 17:52:52'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 17:52:52'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 17:52:52'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 17:52:52'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 17:52:52'!
PASSED!

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'Am 6/2/2021 17:53:06'!
FAILURE!

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'Am 6/2/2021 17:53:06'!
FAILURE!
!SenderLeg methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:53:49' prior: 50867295 overrides: 50867299!
otherLeg	

^transfer recieverLeg.! !

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'Am 6/2/2021 17:53:56'!
PASSED!
!RecieverLeg methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 17:54:12' prior: 50867291 overrides: 50867299!
otherLeg
	^transfer  senderLeg.! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:54:15'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 17:54:15'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 17:54:15'!
PASSED!

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'Am 6/2/2021 17:54:15'!
PASSED!

!testRun: #Portfolio2Test #test05tRecieverLegKnowsSenderLeg stamp: 'Am 6/2/2021 17:54:15'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 17:54:15'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 17:54:15'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 17:54:15'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 17:54:15'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 17:54:15'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 17:54:15'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 17:54:15'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 17:54:15'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 17:54:15'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 17:54:15'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 17:54:15'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 17:54:15'!
PASSED!
!Behavior method!
initialize
	[ super initialize ] valueCoveringAll:
		{20 to: 29}.
	(transactions _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (33 to: 44)
		declaredAt: (33 to: 44).
	(transfers _ [
	(OrderedCollection
		cover: (86 to: 102)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (73 to: 81)
		declaredAt: (73 to: 81).! !
!Behavior method!
from: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount
	| aTransfer |
	(aTransfer _ [
	(Transfer
		cover: (95 to: 102)
		declaredAt: (95 to: 102)) new ] valueCoveringAll:
		{104 to: 106})
		cover: (84 to: 92)
		declaredAt: (72 to: 80).
	[
	(aTransfer
		cover: (110 to: 118)
		declaredAt: (72 to: 80))
		madeFrom:
			(aReceptiveAccount
				cover: (130 to: 146)
				declaredAt: (7 to: 23))
		to:
			(aReceptiveAccount2
				cover: (152 to: 169)
				declaredAt: (29 to: 46))
		withAmount:
			(anAmount
				cover: (184 to: 191)
				declaredAt: (60 to: 67)) ] valueCoveringAll:
		{120 to: 128. 148 to: 150. 172 to: 182}.
	^ aTransfer
		cover: (196 to: 204)
		declaredAt: (72 to: 80).! !
!Behavior method!
madeFrom: aReceptiveAccount to: aReceptiveAccount2 withAmount: anAmount
	[
	([
	(anAmount
		cover: (77 to: 84)
		declaredAt: (64 to: 71)) <=
		(0 coverAll:
			{88 to: 88}) ] valueCoveringAll:
		{86 to: 87}) ifTrue: [
		[
		(self coverAll:
			{99 to: 102}) error:
			([
			([
			(self coverAll:
				{111 to: 114}) class ] valueCoveringAll:
				{116 to: 120}) negativeValueTransfer ] valueCoveringAll:
				{122 to: 142}) ] valueCoveringAll:
			{104 to: 109} ]] valueCoveringAll:
		{91 to: 97}.
	(sender _ [
	(SenderLeg
		cover: (157 to: 165)
		declaredAt: (157 to: 165)) forTransfer:
		(self coverAll:
			{180 to: 183}) ] valueCoveringAll:
		{167 to: 178})
		cover: (149 to: 154)
		declaredAt: (149 to: 154).
	(reciever _ [
	(RecieverLeg
		cover: (198 to: 208)
		declaredAt: (198 to: 208)) forTransfer:
		(self coverAll:
			{223 to: 226}) ] valueCoveringAll:
		{210 to: 221})
		cover: (187 to: 194)
		declaredAt: (187 to: 194).
	(amount _ anAmount
		cover: (239 to: 246)
		declaredAt: (64 to: 71))
		cover: (230 to: 235)
		declaredAt: (230 to: 235).
	[
	(aReceptiveAccount
		cover: (250 to: 266)
		declaredAt: (11 to: 27)) registerTransfer:
		(sender
			cover: (286 to: 291)
			declaredAt: (149 to: 154)) ] valueCoveringAll:
		{268 to: 284}.
	[
	(aReceptiveAccount2
		cover: (295 to: 312)
		declaredAt: (33 to: 50)) registerTransfer:
		(reciever
			cover: (332 to: 339)
			declaredAt: (187 to: 194)) ] valueCoveringAll:
		{314 to: 330}.! !
!Behavior method!
forTransfer: aTransfer
	^ [
	([
	(self coverAll:
		{27 to: 30}) new ] valueCoveringAll:
		{32 to: 34}) initializeFor:
		(aTransfer
			cover: (51 to: 59)
			declaredAt: (14 to: 22)) ] valueCoveringAll:
		{36 to: 49}.! !
!Behavior method!
initializeFor: aTransfer
	(transfer _ aTransfer
		cover: (39 to: 47)
		declaredAt: (16 to: 24))
		cover: (27 to: 34)
		declaredAt: (27 to: 34).! !
!Behavior method!
registerTransfer: aTransfer
	[
	(transactions
		cover: (31 to: 42)
		declaredAt: (31 to: 42)) add:
		(aTransfer
			cover: (49 to: 57)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{44 to: 47}.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (14 to: 25)
		declaredAt: (14 to: 25))
		inject:
			(0 coverAll:
				{38 to: 38})
		into: [ :currentBalance :transaction |
			[
			(transaction
				cover: (81 to: 91)
				declaredAt: (67 to: 77)) affectBalance:
				(currentBalance
					cover: (108 to: 121)
					declaredAt: (51 to: 64)) ] valueCoveringAll:
				{93 to: 106} ]] valueCoveringAll:
		{30 to: 36. 42 to: 46}.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		([
		(transfer
			cover: (39 to: 46)
			declaredAt: (39 to: 46)) value ] valueCoveringAll:
			{48 to: 52}) ] valueCoveringAll:
		{37 to: 37}.! !
!Behavior method!
value
	^ amount
		cover: (9 to: 14)
		declaredAt: (9 to: 14).! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 17:54:33'!
PASSED!
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		([
		(transfer
			cover: (39 to: 46)
			declaredAt: (39 to: 46)) value ] valueCoveringAll:
			{48 to: 52}) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 17:54:33'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 17:54:33'!
PASSED!
!Behavior method!
senderLeg
	^ sender
		cover: (13 to: 18)
		declaredAt: (13 to: 18).! !
!Behavior method!
otherLeg
	^ [
	(transfer
		cover: (13 to: 20)
		declaredAt: (13 to: 20)) recieverLeg ] valueCoveringAll:
		{22 to: 32}.! !
!Behavior method!
recieverLeg
	^ reciever
		cover: (15 to: 22)
		declaredAt: (15 to: 22).! !

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'Am 6/2/2021 17:54:33'!
PASSED!
!Behavior method!
otherLeg
	^ [
	(transfer
		cover: (12 to: 19)
		declaredAt: (12 to: 19)) senderLeg ] valueCoveringAll:
		{22 to: 30}.! !

!testRun: #Portfolio2Test #test05tRecieverLegKnowsSenderLeg stamp: 'Am 6/2/2021 17:54:33'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 17:54:33'!
PASSED!
!Behavior method!
negativeValueTransfer
	"Cannot do a negative value transfer"
	^ self.! !

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 17:54:33'!
PASSED!
!Behavior method!
accountSummary
	| reporte |
	(reporte _ [
	(OrderedCollection
		cover: (38 to: 54)
		declaredAt: (38 to: 54)) new ] valueCoveringAll:
		{56 to: 58})
		cover: (29 to: 35)
		declaredAt: (18 to: 24).
	[
	(transactions
		cover: (64 to: 75)
		declaredAt: (64 to: 75)) do: [ :aTransaction |
		[
		([
		(aTransaction
			cover: (100 to: 111)
			declaredAt: (83 to: 94)) isKindOf:
			(Deposit
				cover: (123 to: 129)
				declaredAt: (123 to: 129)) ] valueCoveringAll:
			{113 to: 121}) ifTrue: [
			[
			(reporte
				cover: (141 to: 147)
				declaredAt: (18 to: 24)) add:
				([
				('Deposito por ' coverAll:
					{155 to: 169}) ,
					([
					([
					(aTransaction
						cover: (172 to: 183)
						declaredAt: (83 to: 94)) value ] valueCoveringAll:
						{185 to: 189}) asString ] valueCoveringAll:
						{191 to: 198}) ] valueCoveringAll:
					{170 to: 170}) ] valueCoveringAll:
				{149 to: 152} ]] valueCoveringAll:
			{133 to: 139}.
		[
		([
		(aTransaction
			cover: (205 to: 216)
			declaredAt: (83 to: 94)) isKindOf:
			(Withdraw
				cover: (228 to: 235)
				declaredAt: (228 to: 235)) ] valueCoveringAll:
			{218 to: 226}) ifTrue: [
			[
			(reporte
				cover: (247 to: 253)
				declaredAt: (18 to: 24)) add:
				([
				('Extraccion por ' coverAll:
					{261 to: 277}) ,
					([
					([
					(aTransaction
						cover: (280 to: 291)
						declaredAt: (83 to: 94)) value ] valueCoveringAll:
						{293 to: 297}) asString ] valueCoveringAll:
						{299 to: 306}) ] valueCoveringAll:
					{278 to: 278}) ] valueCoveringAll:
				{255 to: 258} ]] valueCoveringAll:
			{239 to: 245}.
		[
		([
		(aTransaction
			cover: (314 to: 325)
			declaredAt: (83 to: 94)) isKindOf:
			(TransferLeg
				cover: (337 to: 347)
				declaredAt: (337 to: 347)) ] valueCoveringAll:
			{327 to: 335}) ifTrue: [
			[
			([
			(aTransaction
				cover: (363 to: 374)
				declaredAt: (83 to: 94)) isKindOf:
				(SenderLeg
					cover: (386 to: 394)
					declaredAt: (386 to: 394)) ] valueCoveringAll:
				{376 to: 384}) ifTrue: [
				[
				(reporte
					cover: (405 to: 411)
					declaredAt: (18 to: 24)) add:
					([
					('Salida por transferencia de ' coverAll:
						{419 to: 448}) ,
						([
						([
						(aTransaction
							cover: (451 to: 462)
							declaredAt: (83 to: 94)) value ] valueCoveringAll:
							{464 to: 468}) asString ] valueCoveringAll:
							{470 to: 477}) ] valueCoveringAll:
						{449 to: 449}) ] valueCoveringAll:
					{413 to: 416} ]] valueCoveringAll:
				{396 to: 402}.
			[
			([
			(aTransaction
				cover: (485 to: 496)
				declaredAt: (83 to: 94)) isKindOf:
				(RecieverLeg
					cover: (509 to: 519)
					declaredAt: (509 to: 519)) ] valueCoveringAll:
				{499 to: 507}) ifTrue: [
				[
				(reporte
					cover: (531 to: 537)
					declaredAt: (18 to: 24)) add:
					([
					('Entrada por transferencia de ' coverAll:
						{545 to: 575}) ,
						([
						([
						(aTransaction
							cover: (578 to: 589)
							declaredAt: (83 to: 94)) value ] valueCoveringAll:
							{591 to: 595}) asString ] valueCoveringAll:
							{597 to: 604}) ] valueCoveringAll:
						{576 to: 576}) ] valueCoveringAll:
					{539 to: 542} ]] valueCoveringAll:
				{522 to: 528} ]] valueCoveringAll:
			{351 to: 357} ]] valueCoveringAll:
		{77 to: 79}.
	[
	(reporte
		cover: (665 to: 671)
		declaredAt: (18 to: 24)) addLast:
		([
		('Balance = ' coverAll:
			{683 to: 694}) ,
			([
			([
			(self coverAll:
				{697 to: 700}) balance ] valueCoveringAll:
				{702 to: 708}) asString ] valueCoveringAll:
				{710 to: 717}) ] valueCoveringAll:
			{695 to: 695}) ] valueCoveringAll:
		{673 to: 680}.
	^ reporte
		cover: (726 to: 732)
		declaredAt: (18 to: 24).! !

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 17:54:34'!
PASSED!
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 17:54:34'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 17:54:34'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		(value
			cover: (39 to: 43)
			declaredAt: (39 to: 43)) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 17:54:34'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 17:54:34'!
PASSED!
!Behavior method!
value
	^ [
	(transfer
		cover: (9 to: 16)
		declaredAt: (9 to: 16)) value ] valueCoveringAll:
		{18 to: 22}.! !

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 17:54:34'!
PASSED!
!Behavior method!
value
	^ [
	(transfer
		cover: (9 to: 16)
		declaredAt: (9 to: 16)) value ] valueCoveringAll:
		{18 to: 22}.! !

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 17:54:34'!
PASSED!
!Behavior method!
transferNet
	^ [
	([
	(transactions
		cover: (21 to: 32)
		declaredAt: (21 to: 32)) select: [ :aTransaction |
		[
		(aTransaction
			cover: (58 to: 69)
			declaredAt: (44 to: 55)) isKindOf:
			(TransferLeg
				cover: (81 to: 91)
				declaredAt: (81 to: 91)) ] valueCoveringAll:
			{71 to: 79} ]] valueCoveringAll:
		{34 to: 40})
		inject:
			(0 coverAll:
				{106 to: 106})
		into: [ :currentBalance :aTransfer |
			[
			(aTransfer
				cover: (147 to: 155)
				declaredAt: (135 to: 143)) affectBalance:
				(currentBalance
					cover: (172 to: 185)
					declaredAt: (119 to: 132)) ] valueCoveringAll:
				{157 to: 170} ]] valueCoveringAll:
		{98 to: 104. 110 to: 114}.! !

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 17:54:34'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 17:54:34'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 17:54:34'!
PASSED!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (26 to: 42)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (61 to: 77)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{79 to: 81})
		cover: (50 to: 56)
		declaredAt: (50 to: 56).! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (13 to: 20)
		declaredAt: (13 to: 20))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (42 to: 50)
				declaredAt: (30 to: 38)) balance ] valueCoveringAll:
				{52 to: 58} ]
		ifEmpty: [
			0 coverAll:
				{73 to: 73} ]] valueCoveringAll:
		{22 to: 25. 62 to: 69}.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Am 6/2/2021 17:54:34'!
PASSED!
!Behavior method!
with: anAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}.
	[ cascadeReceiver add: anAccount ] valueCoveringAll:
		{32 to: 45}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{50 to: 57} ] value.! !
!Behavior method!
add: accountToAdd
	[
	(self coverAll:
		{21 to: 24}) assertCanAdd:
		(accountToAdd
			cover: (40 to: 51)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{26 to: 38}.
	[
	(accounts
		cover: (58 to: 65)
		declaredAt: (58 to: 65)) add:
		(accountToAdd
			cover: (72 to: 83)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{67 to: 70}.
	[
	(accountToAdd
		cover: (87 to: 98)
		declaredAt: (6 to: 17)) addedTo:
		(self coverAll:
			{109 to: 112}) ] valueCoveringAll:
		{100 to: 107}.! !
!Behavior method!
assertCanAdd: accountToAdd
	[
	([
	(self coverAll:
		{31 to: 34}) anyRootParentIsComposedBy:
		(accountToAdd
			cover: (63 to: 74)
			declaredAt: (15 to: 26)) ] valueCoveringAll:
		{36 to: 61}) ifTrue: [
		[
		(self coverAll:
			{87 to: 90}) signalCanNotAddAccount ] valueCoveringAll:
			{92 to: 113} ]] valueCoveringAll:
		{77 to: 83}.! !
!Behavior method!
anyRootParentIsComposedBy: accountToAdd
	^ [
	([
	(self coverAll:
		{44 to: 47}) rootParents ] valueCoveringAll:
		{49 to: 59}) anySatisfy: [ :aParent |
		[
		(aParent
			cover: (86 to: 92)
			declaredAt: (76 to: 82)) isComposedBy:
			(accountToAdd
				cover: (108 to: 119)
				declaredAt: (28 to: 39)) ] valueCoveringAll:
			{94 to: 106} ]] valueCoveringAll:
		{61 to: 71}.! !
!Behavior method!
rootParents
	| rootParents |
	(rootParents _ [
	(Set
		cover: (50 to: 52)
		declaredAt: (50 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(self coverAll:
		{60 to: 63}) addRootParentsTo:
		(rootParents
			cover: (83 to: 93)
			declaredAt: (18 to: 28)) ] valueCoveringAll:
		{65 to: 81}.
	^ rootParents
		cover: (101 to: 111)
		declaredAt: (18 to: 28).! !
!Behavior method!
addRootParentsTo: rootParents
	[
	(parents
		cover: (33 to: 39)
		declaredAt: (33 to: 39))
		ifEmpty: [
			[
			(rootParents
				cover: (55 to: 65)
				declaredAt: (19 to: 29)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (96 to: 102)
				declaredAt: (33 to: 39)) do: [ :aParent |
				[
				(aParent
					cover: (121 to: 127)
					declaredAt: (111 to: 117)) addRootParentsTo:
					(rootParents
						cover: (147 to: 157)
						declaredAt: (19 to: 29)) ] valueCoveringAll:
					{129 to: 145} ]] valueCoveringAll:
				{104 to: 106} ]] valueCoveringAll:
		{44 to: 51. 82 to: 92}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	([
	(self coverAll:
		{29 to: 32}) =
		(anAccount
			cover: (36 to: 44)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 34}) or: [
		[
		(accounts
			cover: (52 to: 59)
			declaredAt: (52 to: 59)) anySatisfy: [ :composedAccount |
			[
			([
			(composedAccount
				cover: (95 to: 109)
				declaredAt: (76 to: 90)) isComposedBy:
				(anAccount
					cover: (125 to: 133)
					declaredAt: (15 to: 23)) ] valueCoveringAll:
				{111 to: 123}) or: [
				[
				(anAccount
					cover: (142 to: 150)
					declaredAt: (15 to: 23)) isComposedBy:
					(composedAccount
						cover: (166 to: 180)
						declaredAt: (76 to: 90)) ] valueCoveringAll:
					{152 to: 164} ]] valueCoveringAll:
				{136 to: 138} ]] valueCoveringAll:
			{61 to: 71} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
addedTo: aPortfolio
	^ self.! !

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Am 6/2/2021 17:54:34'!
PASSED!
!Behavior method!
with: anAccount with: anotherAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{41 to: 44}) new ] valueCoveringAll:
		{46 to: 48}.
	[ cascadeReceiver add: anAccount ] valueCoveringAll:
		{53 to: 66}.
	[ cascadeReceiver add: anotherAccount ] valueCoveringAll:
		{71 to: 89}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{94 to: 101} ] value.! !
!Behavior method!
addedTo: aPortfolio
	[
	(parents
		cover: (25 to: 31)
		declaredAt: (25 to: 31)) add:
		(aPortfolio
			cover: (38 to: 47)
			declaredAt: (10 to: 19)) ] valueCoveringAll:
		{33 to: 36}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	(self coverAll:
		{28 to: 31}) =
		(anAccount
			cover: (35 to: 43)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{33 to: 33}.! !

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Am 6/2/2021 17:54:34'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) anySatisfy: [ :anAccount |
		[
		(anAccount
			cover: (68 to: 76)
			declaredAt: (56 to: 64)) hasRegistered:
			(aTransaction
				cover: (93 to: 104)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{78 to: 91} ]] valueCoveringAll:
		{41 to: 51}.! !

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Am 6/2/2021 17:54:34'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Am 6/2/2021 17:54:34'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Am 6/2/2021 17:54:34'!
PASSED!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (53 to: 69)
		declaredAt: (53 to: 69)) new ] valueCoveringAll:
		{71 to: 73})
		cover: (37 to: 48)
		declaredAt: (19 to: 30).
	[
	(accounts
		cover: (77 to: 84)
		declaredAt: (77 to: 84)) do: [ :anAccount |
		[
		(anAccount
			cover: (105 to: 113)
			declaredAt: (93 to: 101)) addTransactionsTo:
			(transactions
				cover: (134 to: 145)
				declaredAt: (19 to: 30)) ] valueCoveringAll:
			{115 to: 132} ]] valueCoveringAll:
		{86 to: 88}.
	^ transactions
		cover: (154 to: 165)
		declaredAt: (19 to: 30).! !

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Am 6/2/2021 17:54:34'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(aCollectionOfTransactions
		cover: (48 to: 72)
		declaredAt: (20 to: 44)) addAll:
		(transactions
			cover: (82 to: 93)
			declaredAt: (82 to: 93)) ] valueCoveringAll:
		{74 to: 80}.! !

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Am 6/2/2021 17:54:34'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(accounts
		cover: (48 to: 55)
		declaredAt: (48 to: 55)) do: [ :anAccount |
		[
		(anAccount
			cover: (76 to: 84)
			declaredAt: (64 to: 72)) addTransactionsTo:
			(aCollectionOfTransactions
				cover: (105 to: 129)
				declaredAt: (20 to: 44)) ] valueCoveringAll:
			{86 to: 103} ]] valueCoveringAll:
		{57 to: 59}.! !

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Am 6/2/2021 17:54:34'!
PASSED!
!Behavior method!
signalCanNotAddAccount
	[
	(self coverAll:
		{27 to: 30}) error:
		([
		([
		(self coverAll:
			{39 to: 42}) class ] valueCoveringAll:
			{44 to: 48}) canNotAddAccountErrorMessage ] valueCoveringAll:
			{50 to: 77}) ] valueCoveringAll:
		{32 to: 37}.! !
!Behavior method!
canNotAddAccountErrorMessage
	^ 'Can not add repeated account to a portfolio' coverAll:
		{34 to: 78}.! !
!Behavior method!
accountsSize
	^ [
	(accounts
		cover: (18 to: 25)
		declaredAt: (18 to: 25)) size ] valueCoveringAll:
		{27 to: 30}.! !
!Behavior method!
accountsIncludes: anAccount
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) includes:
		(anAccount
			cover: (51 to: 59)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{41 to: 49}.! !

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Am 6/2/2021 17:54:34'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Am 6/2/2021 17:54:34'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Am 6/2/2021 17:54:34'!
PASSED!
!Behavior method!
accountsIsEmpty
	^ [
	(accounts
		cover: (21 to: 28)
		declaredAt: (21 to: 28)) isEmpty ] valueCoveringAll:
		{30 to: 36}.! !

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Am 6/2/2021 17:54:34'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Am 6/2/2021 17:54:34'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Am 6/2/2021 17:54:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Am 6/2/2021 17:54:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Am 6/2/2021 17:54:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Am 6/2/2021 17:54:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Am 6/2/2021 17:54:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Am 6/2/2021 17:54:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Am 6/2/2021 17:54:34'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Am 6/2/2021 17:54:34'!
PASSED!

----SNAPSHOT----(2 June 2021 18:16:16) CuisUniversity-4532.image priorSource: 17095777!
!Transfer methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 18:16:23' prior: 50867222!
madeFrom: senderAccount to: recieverAccount withAmount: anAmount 

	(anAmount <=0) ifTrue:[self error: self class negativeValueTransfer ].

	sender:=SenderLeg forTransfer: self.
	reciever:= RecieverLeg forTransfer: self.
	amount:= anAmount.
	senderAccount registerTransfer: sender.
	recieverAccount registerTransfer: reciever.! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 18:16:33'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 18:16:33'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 18:16:33'!
PASSED!

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'Am 6/2/2021 18:16:33'!
PASSED!

!testRun: #Portfolio2Test #test05tRecieverLegKnowsSenderLeg stamp: 'Am 6/2/2021 18:16:33'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 18:16:33'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 18:16:33'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 18:16:33'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 18:16:33'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 18:16:33'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 18:16:33'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 18:16:33'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 18:16:33'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 18:16:33'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 18:16:33'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 18:16:33'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 18:16:33'!
PASSED!
!AccountTransaction methodsFor: 'nil' stamp: 'Am 6/2/2021 18:18:43'!
report
self subclassResponsibility 
	! !
!TransferLeg methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 18:18:57' overrides: 50868393!
report
	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 18:20:03'!
reportTo: aReportSet
self subclassResponsibility 
	! !

!methodRemoval: AccountTransaction #report stamp: 'Am 6/2/2021 18:20:10'!
report
self subclassResponsibility 
	!
!TransferLeg methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 18:20:24' overrides: 50868402!
reportTo: aReportSet
	self subclassResponsibility ! !

!methodRemoval: TransferLeg #report stamp: 'Am 6/2/2021 18:20:31'!
report
	self subclassResponsibility !
!Deposit methodsFor: 'nil' stamp: 'Am 6/2/2021 18:21:56' overrides: 50868402!
reportTo: aReportSet
	aReportSet add: ('Deposito por ', self value asString)! !
!Withdraw methodsFor: 'nil' stamp: 'Am 6/2/2021 18:23:56' overrides: 50868402!
reportTo: aReportSet
	aReportSet add: ('Extraccion por ', self value asString).! !
!RecieverLeg methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 18:24:33' overrides: 50868411!
reportTo: aReportSet
	aReportSet add:('Entrada por transferencia de ', self value asString)! !
!SenderLeg methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 18:25:06' overrides: 50868411!
reportTo: aReportSet	
 aReportSet add: ('Salida por transferencia de ', self value asString)! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 18:25:41' prior: 50866824!
accountSummary
	|reporte |
	reporte:=OrderedCollection new.
	
	transactions do: [:aTransaction| aTransaction reportTo: reporte.].
												
		
		
	reporte addLast: ('Balance = ', self balance asString).
	
	^ reporte.! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 18:25:50'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 18:25:50'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 18:25:50'!
PASSED!

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'Am 6/2/2021 18:25:50'!
PASSED!

!testRun: #Portfolio2Test #test05tRecieverLegKnowsSenderLeg stamp: 'Am 6/2/2021 18:25:50'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 18:25:50'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 18:25:50'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 18:25:50'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 18:25:50'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 18:25:50'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 18:25:50'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 18:25:50'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 18:25:50'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 18:25:50'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 18:25:50'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 18:25:50'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 18:25:50'!
PASSED!

----SNAPSHOT----(2 June 2021 19:01:20) CuisUniversity-4532.image priorSource: 17173478!

----End fileIn of /home/alejandro/Downloads/replaceStringMorphWithLabelMorph.st----!

Object subclass: #MethodAccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #MethodAccountSummary category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 19:39:20'!
Object subclass: #MethodAccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!MethodAccountSummary class methodsFor: 'nil' stamp: 'Am 6/2/2021 19:39:57'!
for: anAccount
	^self new initializeFor:anAccount ! !

Object subclass: #MethodAccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #MethodAccountSummary category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 19:40:05'!
Object subclass: #MethodAccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!MethodAccountSummary methodsFor: 'no messages' stamp: 'Am 6/2/2021 19:40:32'!
initializeFor: anAccount
	account:= anAccount! !

----SNAPSHOT----(2 June 2021 19:52:47) CuisUniversity-4532.image priorSource: 17179421!

----SNAPSHOT----(2 June 2021 19:57:02) CuisUniversity-4532.image priorSource: 17186832!

----SNAPSHOT----(2 June 2021 19:57:06) CuisUniversity-4532.image priorSource: 17186921!

!classRemoval: #MethodAccountSummary stamp: 'Am 6/2/2021 19:57:25'!
Object subclass: #MethodAccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #MethodAccountSummary category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 19:59:10'!
Object subclass: #MethodAccountSummary
	instanceVariableNames: 'transactions account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!MethodAccountSummary class methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 19:59:10'!
transactions: aTransactions account: aSelf
	^self new initializeTransactions: aTransactions account: aSelf! !
!MethodAccountSummary methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 19:59:10'!
initializeTransactions: aTransactions account: aSelf
	transactions := aTransactions.
	account := aSelf.! !
!MethodAccountSummary methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 19:59:10'!
generate
	|reporte |
	reporte:=OrderedCollection new.
	
	transactions do: [:aTransaction| aTransaction reportTo: reporte.].
												
		
		
	reporte addLast: ('Balance = ', account balance asString).
	
	^ reporte.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 19:59:10' prior: 50868443!
accountSummary
	^(MethodAccountSummary transactions: transactions account: self) generate! !
!MethodAccountSummary methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:02:20' prior: 50868778!
generate
	 
	reporte :=OrderedCollection new.
	
	transactions do: [:aTransaction| aTransaction reportTo: reporte.].
												
		
		
	reporte addLast: ('Balance = ', account balance asString).
	
	^ reporte.! !

!classDefinition: #MethodAccountSummary category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 20:02:20'!
Object subclass: #MethodAccountSummary
	instanceVariableNames: 'transactions account reporte'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!MethodAccountSummary methodsFor: 'evaluating' stamp: 'Am 6/2/2021 20:02:39' prior: 50868795!
generate
	transactions do: [:aTransaction| aTransaction reportTo: reporte.].
												
		
		
	reporte addLast: ('Balance = ', account balance asString).
	
	^ reporte.! !
!MethodAccountSummary methodsFor: 'initialization' stamp: 'Am 6/2/2021 20:02:49' prior: 50868771!
initializeTransactions: aTransactions account: aSelf
	transactions := aTransactions.
	account := aSelf.
	reporte :=OrderedCollection new.! !

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 20:03:19'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 20:03:19'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 20:03:19'!
PASSED!

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'Am 6/2/2021 20:03:19'!
PASSED!

!testRun: #Portfolio2Test #test05tRecieverLegKnowsSenderLeg stamp: 'Am 6/2/2021 20:03:19'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 20:03:19'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 20:03:19'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 20:03:19'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 20:03:19'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 20:03:19'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 20:03:19'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 20:03:19'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 20:03:19'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 20:03:19'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 20:03:19'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 20:03:19'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 20:03:19'!
PASSED!
!MethodAccountSummary methodsFor: 'evaluating' stamp: 'Am 6/2/2021 20:04:27' prior: 50868814!
generate
	transactions do: [:aTransaction| aTransaction reportTo: self].
												
		
		
	reporte addLast: ('Balance = ', account balance asString).
	
	^ reporte.! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:07:27' prior: 50868419 overrides: 50868402!
reportTo: aMethodAccountSummary
	aMethodAccountSummary reportDeposit: self.! !
!RecieverLeg methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:08:19' prior: 50868430 overrides: 50868411!
reportTo: aMethodAccountSummary
	"aReportSet add:('Entrada por transferencia de ', self value asString)"
	aMethodAccountSummary reportRecieverLeg: self.! !
!SenderLeg methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:08:56' prior: 50868436 overrides: 50868411!
reportTo: aMethodAccountSummary
	
	aMethodAccountSummary reportSenderLeg: self.! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:09:53' prior: 50868424 overrides: 50868402!
reportTo: aMethodAccountSummary
	aMethodAccountSummary reportWithdraw: self.! !

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 20:10:05'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 20:10:05'!
ERROR!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 20:10:05'!
ERROR!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 20:10:05'!
ERROR!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 20:10:05'!
ERROR!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 20:10:05'!
ERROR!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 20:10:05'!
ERROR!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 20:10:24'!
ERROR!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 20:10:35'!
ERROR!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 20:10:39'!
ERROR!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 20:10:40'!
ERROR!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 20:10:57'!
ERROR!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 20:10:57'!
ERROR!
!MethodAccountSummary methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:11:09'!
reportDeposit: aDeposit 
	self shouldBeImplemented.! !
!MethodAccountSummary methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:11:32' prior: 50868966!
reportDeposit: aDeposit 
	reporte add: ('Deposito por ', aDeposit value asString)! !

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 20:11:39'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 20:11:49'!
ERROR!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 20:11:49'!
ERROR!
!MethodAccountSummary methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:12:06'!
reportWithdraw: aWithdraw 
	self shouldBeImplemented.! !
!MethodAccountSummary methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:12:34' prior: 50868987!
reportWithdraw: aWithdraw 
	reporte add: ('Extraccion por ', aWithdraw value asString)! !

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 20:12:37'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 20:12:45'!
ERROR!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 20:12:45'!
ERROR!
!MethodAccountSummary methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:12:55'!
reportSenderLeg: aSenderLeg 
	self shouldBeImplemented.! !
!MethodAccountSummary methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:13:27' prior: 50869008!
reportSenderLeg: aSenderLeg 
	reporte add: ('Salida por transferencia de ', aSenderLeg value asString)! !

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 20:13:29'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 20:13:35'!
ERROR!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 20:13:36'!
ERROR!
!MethodAccountSummary methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:13:42'!
reportRecieverLeg: aRecieverLeg 
	self shouldBeImplemented.! !
!MethodAccountSummary methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:14:07' prior: 50869030!
reportRecieverLeg: aRecieverLeg 
	reporte add: ('Entrada por transferencia de ', aRecieverLeg value asString).! !

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 20:14:09'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 20:14:11'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 20:14:11'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 20:14:11'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 20:14:11'!
PASSED!

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'Am 6/2/2021 20:14:11'!
PASSED!

!testRun: #Portfolio2Test #test05tRecieverLegKnowsSenderLeg stamp: 'Am 6/2/2021 20:14:11'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 20:14:11'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 20:14:11'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 20:14:11'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 20:14:11'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 20:14:11'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 20:14:11'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 20:14:11'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 20:14:11'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 20:14:11'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 20:14:11'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 20:14:11'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 20:14:11'!
PASSED!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:27:12'!
generateReport: aReportGenerator
	transactions do: [:aTransaction| aTransaction reportTo: aReportGenerator]
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:30:14' prior: 50869104!
generateReport: aReportGenerator
	transactions do: [:aTransaction| aTransaction reportTo: aReportGenerator].
	^aReportGenerator finishReport.
	! !

!methodRemoval: MethodAccountSummary class #transactions:account: stamp: 'Am 6/2/2021 20:32:56'!
transactions: aTransactions account: aSelf
	^self new initializeTransactions: aTransactions account: aSelf!
!MethodAccountSummary methodsFor: 'evaluating' stamp: 'Am 6/2/2021 20:33:30'!
finishReport										
	reporte addLast: ('Balance = ', account balance asString).
	^ reporte.! !

!methodRemoval: MethodAccountSummary #generate stamp: 'Am 6/2/2021 20:33:41'!
generate
	transactions do: [:aTransaction| aTransaction reportTo: self].
												
		
		
	reporte addLast: ('Balance = ', account balance asString).
	
	^ reporte.!
!MethodAccountSummary methodsFor: 'initialization' stamp: 'Am 6/2/2021 20:34:04' overrides: 16896425!
initialize
	reporte :=OrderedCollection new.! !

!methodRemoval: MethodAccountSummary #initializeTransactions:account: stamp: 'Am 6/2/2021 20:34:09'!
initializeTransactions: aTransactions account: aSelf
	transactions := aTransactions.
	account := aSelf.
	reporte :=OrderedCollection new.!

|method|
method:= MethodAccountSummary new!

Object subclass: #MethodAccountSummary
	instanceVariableNames: 'reporte'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #MethodAccountSummary category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 20:35:22'!
Object subclass: #MethodAccountSummary
	instanceVariableNames: 'reporte'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 20:37:11' prior: 50864302!
test08accountSummaryBalanceAmount0
	|account1 |
	account1:= ReceptiveAccount new.
	
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Balance = 0').
	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 20:37:18'!
ERROR!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 20:37:18'!
ERROR!

Object subclass: #MethodAccountSummary
	instanceVariableNames: 'reporte balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #MethodAccountSummary category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 20:39:51'!
Object subclass: #MethodAccountSummary
	instanceVariableNames: 'reporte balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!MethodAccountSummary methodsFor: 'initialization' stamp: 'Am 6/2/2021 20:40:03' prior: 50869139 overrides: 16896425!
initialize
	reporte :=OrderedCollection new.
	balance:=0.! !
!MethodAccountSummary methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:40:35' prior: 50868971!
reportDeposit: aDeposit 
	reporte add: ('Deposito por ', aDeposit value asString).
	balance:= balance+aDeposit.
	! !
!MethodAccountSummary methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:40:49' prior: 50869036!
reportRecieverLeg: aRecieverLeg 
	reporte add: ('Entrada por transferencia de ', aRecieverLeg value asString).
	balance:= balance+ aRecieverLeg ! !
!MethodAccountSummary methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:40:50' prior: 50869209!
reportRecieverLeg: aRecieverLeg 
	reporte add: ('Entrada por transferencia de ', aRecieverLeg value asString).
	balance:= balance+ aRecieverLeg.! !
!MethodAccountSummary methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:40:56' prior: 50869217!
reportRecieverLeg: aRecieverLeg 
	reporte add: ('Entrada por transferencia de ', aRecieverLeg value asString).
	balance:= balance+ aRecieverLeg value.! !
!MethodAccountSummary methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:41:05' prior: 50869202!
reportDeposit: aDeposit 
	reporte add: ('Deposito por ', aDeposit value asString).
	balance:= balance+aDeposit value.
	! !
!MethodAccountSummary methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:41:25' prior: 50869014!
reportSenderLeg: aSenderLeg 
	reporte add: ('Salida por transferencia de ', aSenderLeg value asString).
	balance:= balance -aSenderLeg value.! !
!MethodAccountSummary methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:41:50' prior: 50868992!
reportWithdraw: aWithdraw 
	reporte add: ('Extraccion por ', aWithdraw value asString).
	balance:= balance - aWithdraw value.! !
!MethodAccountSummary methodsFor: 'evaluating' stamp: 'Am 6/2/2021 20:42:07' prior: 50869125!
finishReport										
	reporte addLast: ('Balance = ', balance asString).
	^ reporte.! !

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 20:42:19'!
PASSED!

----SNAPSHOT----(2 June 2021 20:43:17) CuisUniversity-4532.image priorSource: 17187010!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 20:44:37' prior: 50864478!
test09accountSummaryDepositAmount100
	|account1 |
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Deposito por 100').
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 2)  equals: ('Balance = 100').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 20:45:18' prior: 50864668!
test10accountSummaryTwoDepositAmount250
	|account1 |
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	Deposit register: 150 on: account1.

	
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Deposito por 100').
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 2)  equals: ('Deposito por 150').
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 3)  equals: ('Balance = 250').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 20:45:25' prior: 50864811!
test11accountSummaryWithdrawAmount100
	|account1 |
	account1:= ReceptiveAccount new.
	
	Withdraw register: 100 on: account1.

	
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Extraccion por 100').
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 2)  equals: ('Balance = -100').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 20:45:34' prior: 50864879!
test12accountSummaryTwoWithdrawAmount100
	|account1 |
	account1:= ReceptiveAccount new.
	
	Withdraw register: 100 on: account1.
	Withdraw register: 150 on: account1.


	
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Extraccion por 100').
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 2)  equals: ('Extraccion por 150').
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 3)  equals: ('Balance = -250').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 20:45:41' prior: 50864972!
test13accountSummaryOutboundTransfer
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Transfer from: account1 to: account2  withAmount: 200.	
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Salida por transferencia de 200').
	self assert: ((account1 generateReport: 		MethodAccountSummary  new) at: 2)  equals: ('Balance = -200').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 20:45:49' prior: 50865104!
test14accountSummaryInboundTransfer
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Transfer from: account1 to: account2  withAmount: 200.	
	self assert: ((account2 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Entrada por transferencia de 200').
	self assert: ((account2 generateReport: 		MethodAccountSummary  new) at: 2)  equals: ('Balance = 200').

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 20:45:55'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 20:45:55'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 20:45:55'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 20:45:55'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 20:45:55'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 20:45:55'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 20:45:55'!
PASSED!

Object subclass: #MethodTransferNet
	instanceVariableNames: 'reporte balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #MethodTransferNet category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 20:46:58'!
Object subclass: #MethodTransferNet
	instanceVariableNames: 'reporte balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #MethodTransferNet stamp: 'Am 6/2/2021 20:47:31'!
Object subclass: #MethodTransferNet
	instanceVariableNames: 'reporte balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----SNAPSHOT----(2 June 2021 20:47:40) CuisUniversity-4532.image priorSource: 17203679!

Object subclass: #MethodTransferNet
	instanceVariableNames: 'reporte balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #MethodTransferNet category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 20:47:55'!
Object subclass: #MethodTransferNet
	instanceVariableNames: 'reporte balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

MethodTransferNet class
	instanceVariableNames: ''!

!classDefinition: 'MethodTransferNet class' category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 20:47:55'!
MethodTransferNet class
	instanceVariableNames: ''!
!MethodTransferNet methodsFor: 'initialization' stamp: 'Am 6/2/2021 20:47:55' overrides: 16896425!
initialize
	reporte :=OrderedCollection new.
	balance:=0.! !
!MethodTransferNet methodsFor: 'evaluating' stamp: 'Am 6/2/2021 20:47:55'!
finishReport										
	reporte addLast: ('Balance = ', balance asString).
	^ reporte.! !
!MethodTransferNet methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:47:55'!
reportDeposit: aDeposit 
	reporte add: ('Deposito por ', aDeposit value asString).
	balance:= balance+aDeposit value.
	! !
!MethodTransferNet methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:47:55'!
reportRecieverLeg: aRecieverLeg 
	reporte add: ('Entrada por transferencia de ', aRecieverLeg value asString).
	balance:= balance+ aRecieverLeg value.! !
!MethodTransferNet methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:47:55'!
reportSenderLeg: aSenderLeg 
	reporte add: ('Salida por transferencia de ', aSenderLeg value asString).
	balance:= balance -aSenderLeg value.! !
!MethodTransferNet methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:47:55'!
reportWithdraw: aWithdraw 
	reporte add: ('Extraccion por ', aWithdraw value asString).
	balance:= balance - aWithdraw value.! !

Object subclass: #MethodTransferNet
	instanceVariableNames: 'balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #MethodTransferNet category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 20:48:19'!
Object subclass: #MethodTransferNet
	instanceVariableNames: 'balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!MethodTransferNet methodsFor: 'evaluating' stamp: 'Am 6/2/2021 20:48:39' prior: 50869440!
finishReport										
	^ balance.! !
!MethodTransferNet methodsFor: 'initialization' stamp: 'Am 6/2/2021 20:48:56' prior: 50869435 overrides: 16896425!
initialize
	
	balance:=0.! !
!MethodTransferNet methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:49:07' prior: 50869446!
reportDeposit: aDeposit 
	
	! !
!MethodTransferNet methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:49:15' prior: 50869469!
reportWithdraw: aWithdraw 
	! !
!MethodTransferNet methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:49:28' prior: 50869453!
reportRecieverLeg: aRecieverLeg 
	
	balance:= balance+ aRecieverLeg value.! !
!MethodTransferNet methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:49:35' prior: 50869461!
reportSenderLeg: aSenderLeg 
	
	balance:= balance -aSenderLeg value.! !
!Portfolio2Test methodsFor: 'transferNet' stamp: 'Am 6/2/2021 20:50:21' prior: 50865178!
test15transferNetNoTransaction
	|account1|
	account1:= ReceptiveAccount new.
	
	self assert: (account1 generateReport: MethodTransferNet new)  equals: (0).
	
	

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferNet' stamp: 'Am 6/2/2021 20:50:40' prior: 50865312!
test16transferNetInboundTransaction100
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Transfer from: account1 to:account2  	withAmount:100.
	self assert: (account2 generateReport: MethodTransferNet new)  equals: 100.
	
	

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'transferNet' stamp: 'Am 6/2/2021 20:50:50' prior: 50865593!
test17transferNetOutboundTransaction100
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Transfer from: account1 to:account2  	withAmount:100.

	self assert: (account1 generateReport: MethodTransferNet new)  equals: (100 negated).
	
	

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 20:50:55'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 20:50:55'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 20:50:56'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 20:50:56'!
PASSED!

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'Am 6/2/2021 20:50:56'!
PASSED!

!testRun: #Portfolio2Test #test05tRecieverLegKnowsSenderLeg stamp: 'Am 6/2/2021 20:50:56'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 20:50:56'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 20:50:56'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 20:50:56'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 20:50:56'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 20:50:56'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 20:50:56'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 20:50:56'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 20:50:56'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 20:50:56'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 20:50:56'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 20:50:56'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 20:50:56'!
PASSED!

Object subclass: #ReportMethods
	instanceVariableNames: 'balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportMethods category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 20:52:08'!
Object subclass: #ReportMethods
	instanceVariableNames: 'balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

ReportMethods class
	instanceVariableNames: ''!

!classDefinition: 'ReportMethods class' category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 20:52:08'!
ReportMethods class
	instanceVariableNames: ''!
!ReportMethods methodsFor: 'initialization' stamp: 'Am 6/2/2021 20:52:08' overrides: 16896425!
initialize
	
	balance:=0.! !
!ReportMethods methodsFor: 'evaluating' stamp: 'Am 6/2/2021 20:52:08'!
finishReport										
	^ balance.! !
!ReportMethods methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:52:08'!
reportDeposit: aDeposit 
	
	! !
!ReportMethods methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:52:08'!
reportRecieverLeg: aRecieverLeg 
	
	balance:= balance+ aRecieverLeg value.! !
!ReportMethods methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:52:08'!
reportSenderLeg: aSenderLeg 
	
	balance:= balance -aSenderLeg value.! !
!ReportMethods methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:52:08'!
reportWithdraw: aWithdraw 
	! !

!classRenamed: #ReportMethods as: #ReportMethod stamp: 'Am 6/2/2021 20:52:22'!
Smalltalk renameClassNamed: #ReportMethods as: #ReportMethod!

!classRemoval: #ReportMethod stamp: 'Am 6/2/2021 20:53:02'!
Object subclass: #ReportMethod
	instanceVariableNames: 'balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----SNAPSHOT----(2 June 2021 20:53:09) CuisUniversity-4532.image priorSource: 17208360!

!classDefinition: #ReportMethod category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 20:53:29'!
Object subclass: #ReportMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #MethodTransferNet category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 20:53:29'!
ReportMethod subclass: #MethodTransferNet
	instanceVariableNames: 'balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #MethodTransferNet
	instanceVariableNames: 'balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #MethodTransferNet category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 20:54:19'!
Object subclass: #MethodTransferNet
	instanceVariableNames: 'balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReportMethod stamp: 'Am 6/2/2021 20:54:29'!
Object subclass: #ReportMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #ReportMethod
	instanceVariableNames: 'balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportMethod category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 20:54:47'!
Object subclass: #ReportMethod
	instanceVariableNames: 'balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

ReportMethod class
	instanceVariableNames: ''!

!classDefinition: 'ReportMethod class' category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 20:54:47'!
ReportMethod class
	instanceVariableNames: ''!
!ReportMethod methodsFor: 'initialization' stamp: 'Am 6/2/2021 20:54:47' overrides: 16896425!
initialize
	
	balance:=0.! !
!ReportMethod methodsFor: 'evaluating' stamp: 'Am 6/2/2021 20:54:47'!
finishReport										
	^ balance.! !
!ReportMethod methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:54:47'!
reportDeposit: aDeposit 
	
	! !
!ReportMethod methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:54:47'!
reportRecieverLeg: aRecieverLeg 
	
	balance:= balance+ aRecieverLeg value.! !
!ReportMethod methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:54:48'!
reportSenderLeg: aSenderLeg 
	
	balance:= balance -aSenderLeg value.! !
!ReportMethod methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:54:48'!
reportWithdraw: aWithdraw 
	! !
!ReportMethod methodsFor: 'evaluating' stamp: 'Am 6/2/2021 20:55:09' prior: 50869727!
finishReport										
	self subclassResponsibility .! !
!ReportMethod methodsFor: 'initialization' stamp: 'Am 6/2/2021 20:55:20' prior: 50869723 overrides: 16896425!
initialize
	
	self subclassResponsibility .! !
!ReportMethod methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:55:34' prior: 50869731!
reportDeposit: aDeposit 
	self subclassResponsibility .
	
	! !
!ReportMethod methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:55:38' prior: 50869735!
reportRecieverLeg: aRecieverLeg 
	
	self subclassResponsibility .! !
!ReportMethod methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:55:41' prior: 50869740!
reportSenderLeg: aSenderLeg 
	
	self subclassResponsibility .! !
!ReportMethod methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 20:55:50' prior: 50869745!
reportWithdraw: aWithdraw 
 		self subclassResponsibility .
	! !

Object subclass: #ReportMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportMethod category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 20:55:58'!
Object subclass: #ReportMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

ReportMethod subclass: #MethodTransferNet
	instanceVariableNames: 'balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #MethodTransferNet category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 20:56:08'!
ReportMethod subclass: #MethodTransferNet
	instanceVariableNames: 'balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

ReportMethod subclass: #MethodAccountSummary
	instanceVariableNames: 'reporte balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #MethodAccountSummary category: 'Portfolio-Solucion' stamp: 'Am 6/2/2021 20:56:17'!
ReportMethod subclass: #MethodAccountSummary
	instanceVariableNames: 'reporte balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----SNAPSHOT----(2 June 2021 20:58:00) CuisUniversity-4532.image priorSource: 17216538!

!methodRemoval: ReceptiveAccount #accountSummary stamp: 'Am 6/2/2021 21:00:48'!
accountSummary
	^(MethodAccountSummary transactions: transactions account: self) generate!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 21:09:01'!
test18accountSummaryEmptyPortfolio
	|account1 account2|
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Transfer from: account1 to: account2  withAmount: 200.	
	self assert: ((account2 generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Entrada por transferencia de 200').
	self assert: ((account2 generateReport: 		MethodAccountSummary  new) at: 2)  equals: ('Balance = 200').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 21:09:56' prior: 50869827!
test18accountSummaryEmptyPortfolio
	|portfolio|
	portfolio:= ReceptiveAccount new.

	self assert: ((portfolio generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Balance = 0').

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test18accountSummaryEmptyPortfolio stamp: 'Am 6/2/2021 21:10:06'!
PASSED!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 21:10:55' prior: 50869844!
test18accountSummaryEmptyPortfolio
	|portfolio|
	portfolio:= Portfolio new.

	self assert: ((portfolio generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Balance = 0').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 21:11:04' prior: 50869857!
test18accountSummaryEmptyPortfolio
	|portfolio|
	portfolio:= Portfolio new.

	self assert: ((portfolio generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Balance = 0').

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test18accountSummaryEmptyPortfolio stamp: 'Am 6/2/2021 21:11:09'!
ERROR!

!testRun: #Portfolio2Test #test18accountSummaryEmptyPortfolio stamp: 'Am 6/2/2021 21:11:09'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 21:11:28'!
generateReport: aMethodAccountSummary 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 21:12:07' prior: 50869882!
generateReport: aReportMethod 
	aReportMethod finish.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 21:12:27' prior: 50869888!
generateReport: aReportMethod 
	^aReportMethod finish.! !

!testRun: #Portfolio2Test #test18accountSummaryEmptyPortfolio stamp: 'Am 6/2/2021 21:12:28'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 21:13:02' prior: 50869893!
generateReport: aReportMethod 
	^aReportMethod finishReport.! !

!testRun: #Portfolio2Test #test18accountSummaryEmptyPortfolio stamp: 'Am 6/2/2021 21:13:20'!
PASSED!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 21:13:44'!
test18accountSummaryPortfolioWithOneAccount
	|portfolio|
	portfolio:= Portfolio new.

	self assert: ((portfolio generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Balance = 0').

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 21:14:37'!
test19accountSummaryPortfolioWithOneAccount
	|portfolio|
	portfolio:= Portfolio new.

	self assert: ((portfolio generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Balance = 0').

	

	
	
	

	
	! !

!methodRemoval: Portfolio2Test #test18accountSummaryPortfolioWithOneAccount stamp: 'Am 6/2/2021 21:14:37'!
test18accountSummaryPortfolioWithOneAccount
	|portfolio|
	portfolio:= Portfolio new.

	self assert: ((portfolio generateReport: 		MethodAccountSummary  new) at: 1)  equals: ('Balance = 0').

	

	
	
	

	
	!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 21:15:30' prior: 50869918!
test19accountSummaryPortfolioWithOneAccount
	|portfolio account1|
	portfolio:= Portfolio new.
	
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	Deposit register: 150 on: account1.

	self assert: ((portfolio generateReport: 		MethodAccountSummary  new) = (account1 generateReport: 		MethodAccountSummary  new)) .

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithOneAccount stamp: 'Am 6/2/2021 21:15:38'!
FAILURE!

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithOneAccount stamp: 'Am 6/2/2021 21:15:38'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 21:16:10' prior: 50869901!
generateReport: aReportMethod 

	
	^aReportMethod finishReport.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 21:17:11' prior: 50869959!
generateReport: aReportMethod 

	accounts do:[:anAccount| anAccount reportTo: aReportMethod].
	^aReportMethod finishReport.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 21:18:20' prior: 50869964!
generateReport: aReportMethod 

	accounts do:[:anAccount| ^ anAccount generateReport: aReportMethod].
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 21:18:40' prior: 50869971!
generateReport: aReportMethod 

	accounts do:[:anAccount| anAccount generateReport: aReportMethod].
	^aReportMethod finishReport.! !

!methodRemoval: ReceptiveAccount #transferNet stamp: 'Am 6/2/2021 21:19:29'!
transferNet
			
	^((transactions select: [:aTransaction| aTransaction isKindOf: TransferLeg ])
		inject: 0
		into: [ :currentBalance :aTransfer | aTransfer affectBalance: currentBalance]).
	
	!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'Am 6/2/2021 21:19:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'Am 6/2/2021 21:19:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'Am 6/2/2021 21:19:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'Am 6/2/2021 21:19:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'Am 6/2/2021 21:19:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'Am 6/2/2021 21:19:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'Am 6/2/2021 21:19:38'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 21:19:50'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 21:19:50'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 21:19:50'!
PASSED!

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'Am 6/2/2021 21:19:50'!
PASSED!

!testRun: #Portfolio2Test #test05tRecieverLegKnowsSenderLeg stamp: 'Am 6/2/2021 21:19:50'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 21:19:50'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 21:19:50'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 21:19:50'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 21:19:50'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 21:19:50'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 21:19:50'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 21:19:50'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 21:19:50'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 21:19:50'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 21:19:50'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 21:19:50'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 21:19:50'!
PASSED!

!testRun: #Portfolio2Test #test18accountSummaryEmptyPortfolio stamp: 'Am 6/2/2021 21:19:50'!
PASSED!

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithOneAccount stamp: 'Am 6/2/2021 21:19:50'!
FAILURE!

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithOneAccount stamp: 'Am 6/2/2021 21:19:50'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 21:21:17'!
generatePartialReport: aReportGenerator
	transactions do: [:aTransaction| aTransaction reportTo: aReportGenerator].
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'Am 6/2/2021 21:21:44' prior: 50869978!
generateReport: aReportMethod 

	accounts do:[:anAccount| anAccount generatePartialReport: aReportMethod].
	^aReportMethod finishReport.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'Am 6/2/2021 21:21:46'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'Am 6/2/2021 21:21:46'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'Am 6/2/2021 21:21:46'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'Am 6/2/2021 21:21:46'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'Am 6/2/2021 21:21:46'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'Am 6/2/2021 21:21:46'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'Am 6/2/2021 21:21:46'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'Am 6/2/2021 21:21:46'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'Am 6/2/2021 21:21:46'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'Am 6/2/2021 21:21:46'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'Am 6/2/2021 21:21:46'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'Am 6/2/2021 21:21:46'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'Am 6/2/2021 21:21:46'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'Am 6/2/2021 21:21:46'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'Am 6/2/2021 21:21:46'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 21:21:59'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 21:21:59'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 21:21:59'!
PASSED!

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'Am 6/2/2021 21:21:59'!
PASSED!

!testRun: #Portfolio2Test #test05tRecieverLegKnowsSenderLeg stamp: 'Am 6/2/2021 21:21:59'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 21:21:59'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 21:21:59'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 21:21:59'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 21:21:59'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 21:21:59'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 21:21:59'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 21:21:59'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 21:21:59'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 21:21:59'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 21:21:59'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 21:21:59'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 21:21:59'!
PASSED!

!testRun: #Portfolio2Test #test18accountSummaryEmptyPortfolio stamp: 'Am 6/2/2021 21:21:59'!
PASSED!

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithOneAccount stamp: 'Am 6/2/2021 21:21:59'!
FAILURE!

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithOneAccount stamp: 'Am 6/2/2021 21:21:59'!
FAILURE!

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithOneAccount stamp: 'Am 6/2/2021 21:22:27'!
FAILURE!

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithOneAccount stamp: 'Am 6/2/2021 21:22:27'!
FAILURE!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 21:23:18' prior: 50869938!
test19accountSummaryPortfolioWithOneAccount
	|portfolio account1|
	portfolio:= Portfolio new.
	
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	Deposit register: 150 on: account1.
	
	

	self assert: ((portfolio generateReport: 		MethodAccountSummary  new) = (account1 generateReport: 		MethodAccountSummary  new)) .

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 21:24:25' prior: 50870229!
test19accountSummaryPortfolioWithOneAccount
	|portfolio account1|
	portfolio:= Portfolio new.
	
	account1:= ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	Deposit register: 150 on: account1.
	
	portfolio add: account1.

	self assert: ((portfolio generateReport: 		MethodAccountSummary  new) = (account1 generateReport: 		MethodAccountSummary  new)) .

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithOneAccount stamp: 'Am 6/2/2021 21:24:30'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 21:24:30'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 21:24:30'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 21:24:30'!
PASSED!

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'Am 6/2/2021 21:24:30'!
PASSED!

!testRun: #Portfolio2Test #test05tRecieverLegKnowsSenderLeg stamp: 'Am 6/2/2021 21:24:30'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 21:24:30'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 21:24:30'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 21:24:30'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 21:24:30'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 21:24:30'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 21:24:30'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 21:24:30'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 21:24:30'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 21:24:30'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 21:24:30'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 21:24:30'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 21:24:30'!
PASSED!

!testRun: #Portfolio2Test #test18accountSummaryEmptyPortfolio stamp: 'Am 6/2/2021 21:24:30'!
PASSED!

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithOneAccount stamp: 'Am 6/2/2021 21:24:30'!
PASSED!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 21:26:13'!
test19accountSummaryPortfolioWithTwoAccount
	|portfolio account1|
	portfolio:= Portfolio new.
	
	account1:= ReceptiveAccount new.
	Deposit register: 150 on: account1.
	
	portfolio add: account1.
	
	account1:= ReceptiveAccount new.
	Withdraw register: 100 on: account1.
	portfolio add: account1.


	self assert: ((portfolio generateReport: 		MethodAccountSummary  new) = (account1 generateReport: 		MethodAccountSummary  new)) .

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 21:28:15' prior: 50870324!
test19accountSummaryPortfolioWithTwoAccount
	|portfolio account1 mensajeEsperado|
	portfolio:= Portfolio new.
	
	account1:= ReceptiveAccount new.
	Deposit register: 150 on: account1.
	
	portfolio add: account1.
	
	account1:= ReceptiveAccount new.
	Withdraw register: 100 on: account1.
	portfolio add: account1.

	mensajeEsperado:= OrderedCollection new.
	mensajeEsperado addLast: 'Deposito por 150'.

	self assert: ((portfolio generateReport: 		MethodAccountSummary  new) = (account1 generateReport: 		MethodAccountSummary  new)) .

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 21:30:07' prior: 50870244!
test19accountSummaryPortfolioWithOneAccount
	|portfolio account1 account2|
	portfolio:= Portfolio new.
	
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.

	Deposit register: 100 on: account1.
	Withdraw register: 150 on: account1.
	Transfer from: account1 to: account2 withAmount: 150.
	Transfer from: account2 to: account1 withAmount: 350.
	
	portfolio add: account1.

	self assert: ((portfolio generateReport: 		MethodAccountSummary  new) = (account1 generateReport: 		MethodAccountSummary  new)) .

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithOneAccount stamp: 'Am 6/2/2021 21:30:12'!
PASSED!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 21:33:37' prior: 50870341!
test19accountSummaryPortfolioWithTwoAccount
	|portfolio account1 account2 mensajeEsperado|
	portfolio:= Portfolio new.
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	Deposit register: 150 on: account1.
	Withdraw register: 100 on: account2.
	Transfer from: account1 to: account2 withAmount: 300.
	

	mensajeEsperado:= OrderedCollection new.
	mensajeEsperado addLast: 'Deposito por 150'.
	mensajeEsperado addLast: 'Extraccion por 100'.
	mensajeEsperado addLast: 'Salida por transferencia de 300'.
	mensajeEsperado addLast: 'Entrada por transferencia de 300'.

	



	self assert: ((portfolio generateReport: 		MethodAccountSummary  new) = (account1 generateReport: 		MethodAccountSummary  new)) .

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 21:34:15' prior: 50870386!
test19accountSummaryPortfolioWithTwoAccount
	|portfolio account1 account2 mensajeEsperado|
	portfolio:= Portfolio new.
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	Deposit register: 150 on: account1.
	Withdraw register: 100 on: account2.
	Transfer from: account1 to: account2 withAmount: 300.
	

	mensajeEsperado:= OrderedCollection new.
	mensajeEsperado addLast: 'Deposito por 150'.
	mensajeEsperado addLast: 'Extraccion por 100'.
	mensajeEsperado addLast: 'Salida por transferencia de 300'.
	mensajeEsperado addLast: 'Entrada por transferencia de 300'.
	mensajeEsperado addLast: 'Balance = 50 '.




	self assert: ((portfolio generateReport: 		MethodAccountSummary  new) = (account1 generateReport: 		MethodAccountSummary  new)) .

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 21:34:17' prior: 50870414!
test19accountSummaryPortfolioWithTwoAccount
	|portfolio account1 account2 mensajeEsperado|
	portfolio:= Portfolio new.
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	Deposit register: 150 on: account1.
	Withdraw register: 100 on: account2.
	Transfer from: account1 to: account2 withAmount: 300.
	

	mensajeEsperado:= OrderedCollection new.
	mensajeEsperado addLast: 'Deposito por 150'.
	mensajeEsperado addLast: 'Extraccion por 100'.
	mensajeEsperado addLast: 'Salida por transferencia de 300'.
	mensajeEsperado addLast: 'Entrada por transferencia de 300'.
	mensajeEsperado addLast: 'Balance = 50'.




	self assert: ((portfolio generateReport: 		MethodAccountSummary  new) = (account1 generateReport: 		MethodAccountSummary  new)) .

	

	
	
	

	
	! !
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 21:34:30' prior: 50870443!
test19accountSummaryPortfolioWithTwoAccount
	|portfolio account1 account2 mensajeEsperado|
	portfolio:= Portfolio new.
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	Deposit register: 150 on: account1.
	Withdraw register: 100 on: account2.
	Transfer from: account1 to: account2 withAmount: 300.
	

	mensajeEsperado:= OrderedCollection new.
	mensajeEsperado addLast: 'Deposito por 150'.
	mensajeEsperado addLast: 'Extraccion por 100'.
	mensajeEsperado addLast: 'Salida por transferencia de 300'.
	mensajeEsperado addLast: 'Entrada por transferencia de 300'.
	mensajeEsperado addLast: 'Balance = 50'.




	self assert: ((portfolio generateReport: 		MethodAccountSummary  new) = mensajeEsperado) .

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithTwoAccount stamp: 'Am 6/2/2021 21:34:36'!
FAILURE!

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithTwoAccount stamp: 'Am 6/2/2021 21:34:36'!
FAILURE!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 21:35:00'!
test20accountSummaryPortfolioWithTwoAccount
	|portfolio account1 account2 mensajeEsperado|
	portfolio:= Portfolio new.
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	Deposit register: 150 on: account1.
	Withdraw register: 100 on: account2.
	Transfer from: account1 to: account2 withAmount: 300.
	

	mensajeEsperado:= OrderedCollection new.
	mensajeEsperado addLast: 'Deposito por 150'.
	mensajeEsperado addLast: 'Extraccion por 100'.
	mensajeEsperado addLast: 'Salida por transferencia de 300'.
	mensajeEsperado addLast: 'Entrada por transferencia de 300'.
	mensajeEsperado addLast: 'Balance = 50'.




	self assert: ((portfolio generateReport: 		MethodAccountSummary  new) = mensajeEsperado) .

	

	
	
	

	
	! !

!methodRemoval: Portfolio2Test #test19accountSummaryPortfolioWithTwoAccount stamp: 'Am 6/2/2021 21:35:00'!
test19accountSummaryPortfolioWithTwoAccount
	|portfolio account1 account2 mensajeEsperado|
	portfolio:= Portfolio new.
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	Deposit register: 150 on: account1.
	Withdraw register: 100 on: account2.
	Transfer from: account1 to: account2 withAmount: 300.
	

	mensajeEsperado:= OrderedCollection new.
	mensajeEsperado addLast: 'Deposito por 150'.
	mensajeEsperado addLast: 'Extraccion por 100'.
	mensajeEsperado addLast: 'Salida por transferencia de 300'.
	mensajeEsperado addLast: 'Entrada por transferencia de 300'.
	mensajeEsperado addLast: 'Balance = 50'.




	self assert: ((portfolio generateReport: 		MethodAccountSummary  new) = mensajeEsperado) .

	

	
	
	

	
	!

portfolio generateReport: 		MethodAccountSummary  new!
!Portfolio2Test methodsFor: 'accountSummary' stamp: 'Am 6/2/2021 21:36:31' prior: 50870506!
test20accountSummaryPortfolioWithTwoAccount
	|portfolio account1 account2 mensajeEsperado|
	portfolio:= Portfolio new.
	account1:= ReceptiveAccount new.
	account2:= ReceptiveAccount new.
	portfolio add: account1.
	portfolio add: account2.
	Deposit register: 150 on: account1.
	Withdraw register: 100 on: account2.
	Transfer from: account1 to: account2 withAmount: 300.
	

	mensajeEsperado:= OrderedCollection new.
	mensajeEsperado addLast: 'Deposito por 150'.
	mensajeEsperado addLast: 'Salida por transferencia de 300'.
	mensajeEsperado addLast: 'Extraccion por 100'.
	mensajeEsperado addLast: 'Entrada por transferencia de 300'.
	mensajeEsperado addLast: 'Balance = 50'.




	self assert: ((portfolio generateReport: 		MethodAccountSummary  new) = mensajeEsperado) .

	

	
	
	

	
	! !

!testRun: #Portfolio2Test #test20accountSummaryPortfolioWithTwoAccount stamp: 'Am 6/2/2021 21:36:36'!
PASSED!

!testRun: #Portfolio2Test #test20accountSummaryPortfolioWithTwoAccount stamp: 'Am 6/2/2021 21:36:38'!
PASSED!

!testRun: #Portfolio2Test #test01transfer100ModifiesRecieverBalance stamp: 'Am 6/2/2021 21:36:38'!
PASSED!

!testRun: #Portfolio2Test #test02transfer100ModifiesSenderBalance stamp: 'Am 6/2/2021 21:36:38'!
PASSED!

!testRun: #Portfolio2Test #test03transferDoesntAddTransactions stamp: 'Am 6/2/2021 21:36:38'!
PASSED!

!testRun: #Portfolio2Test #test04SenderLegKnowsRecieverLeg stamp: 'Am 6/2/2021 21:36:38'!
PASSED!

!testRun: #Portfolio2Test #test05tRecieverLegKnowsSenderLeg stamp: 'Am 6/2/2021 21:36:38'!
PASSED!

!testRun: #Portfolio2Test #test06transferRegitersValue stamp: 'Am 6/2/2021 21:36:38'!
PASSED!

!testRun: #Portfolio2Test #test07transferCantTakeNegativeValues stamp: 'Am 6/2/2021 21:36:38'!
PASSED!

!testRun: #Portfolio2Test #test08accountSummaryBalanceAmount0 stamp: 'Am 6/2/2021 21:36:38'!
PASSED!

!testRun: #Portfolio2Test #test09accountSummaryDepositAmount100 stamp: 'Am 6/2/2021 21:36:38'!
PASSED!

!testRun: #Portfolio2Test #test10accountSummaryTwoDepositAmount250 stamp: 'Am 6/2/2021 21:36:38'!
PASSED!

!testRun: #Portfolio2Test #test11accountSummaryWithdrawAmount100 stamp: 'Am 6/2/2021 21:36:38'!
PASSED!

!testRun: #Portfolio2Test #test12accountSummaryTwoWithdrawAmount100 stamp: 'Am 6/2/2021 21:36:39'!
PASSED!

!testRun: #Portfolio2Test #test13accountSummaryOutboundTransfer stamp: 'Am 6/2/2021 21:36:39'!
PASSED!

!testRun: #Portfolio2Test #test14accountSummaryInboundTransfer stamp: 'Am 6/2/2021 21:36:39'!
PASSED!

!testRun: #Portfolio2Test #test15transferNetNoTransaction stamp: 'Am 6/2/2021 21:36:39'!
PASSED!

!testRun: #Portfolio2Test #test16transferNetInboundTransaction100 stamp: 'Am 6/2/2021 21:36:39'!
PASSED!

!testRun: #Portfolio2Test #test17transferNetOutboundTransaction100 stamp: 'Am 6/2/2021 21:36:39'!
PASSED!

!testRun: #Portfolio2Test #test18accountSummaryEmptyPortfolio stamp: 'Am 6/2/2021 21:36:39'!
PASSED!

!testRun: #Portfolio2Test #test19accountSummaryPortfolioWithOneAccount stamp: 'Am 6/2/2021 21:36:39'!
PASSED!

!testRun: #Portfolio2Test #test20accountSummaryPortfolioWithTwoAccount stamp: 'Am 6/2/2021 21:36:39'!
PASSED!

----SNAPSHOT----(2 June 2021 21:36:50) CuisUniversity-4532.image priorSource: 17221377!

----QUIT----(2 June 2021 21:38:07) CuisUniversity-4532.image priorSource: 17248403!

----STARTUP---- (3 June 2021 20:22:31) as /home/alejandro/Documents/Cs.Computacion/Inge 1/linux64/CuisUniversity-4532.image!


----End fileIn of /home/alejandro/Documents/Cs.Computacion/Inge 1/Repo de la materia/2021-1c/19-MarsRover-El regreso/MarsRover-WithHeading.st----!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/3/2021 20:29:58'!
test17Log

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: #West.
	
	marsRover process: 'ffbr'.
	
	self assert: (marsRover isAt: 0@2 heading: #North)! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/3/2021 20:35:15' prior: 50871209!
test17Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'f'.
	
	self assert: log equals: (OrderedCollection new with: '0@2').! !

!testRun: #MarsRoverTest #test17Log stamp: 'Am 6/3/2021 20:35:24'!
ERROR!

!testRun: #MarsRoverTest #test17Log stamp: 'Am 6/3/2021 20:35:24'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Am 6/3/2021 20:35:31'!
addLogToPosition: anOrderedCollection 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Am 6/3/2021 20:36:14' prior: 50871232!
addLogToPosition: aLog 
	^ OrderedCollection  new with: '0@2'! !

!testRun: #MarsRoverTest #test17Log stamp: 'Am 6/3/2021 20:36:16'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Am 6/3/2021 20:36:38' prior: 50871238!
addLogToPosition: aLog 
	^ OrderedCollection with: '0@2'! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/3/2021 20:36:46' prior: 50871217!
test17Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'f'.
	
	self assert: log equals: (OrderedCollection with: '0@2').! !

!testRun: #MarsRoverTest #test17Log stamp: 'Am 6/3/2021 20:36:49'!
FAILURE!

!testRun: #MarsRoverTest #test17Log stamp: 'Am 6/3/2021 20:36:49'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Am 6/3/2021 20:37:15' prior: 50871246!
addLogToPosition: aLog 
	^ (OrderedCollection with: '0@2')! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Am 6/3/2021 20:37:33' prior: 50871267!
addLogToPosition: aLog 
	^ OrderedCollection with: '0@2'! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Am 6/3/2021 20:38:03' prior: 50871272!
addLogToPosition: aLog 
	aLog add: '0@2'! !

!testRun: #MarsRoverTest #test01 stamp: 'Am 6/3/2021 20:38:07'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'Am 6/3/2021 20:38:07'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'Am 6/3/2021 20:38:07'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'Am 6/3/2021 20:38:07'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'Am 6/3/2021 20:38:07'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'Am 6/3/2021 20:38:07'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'Am 6/3/2021 20:38:07'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'Am 6/3/2021 20:38:07'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'Am 6/3/2021 20:38:07'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'Am 6/3/2021 20:38:07'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'Am 6/3/2021 20:38:07'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'Am 6/3/2021 20:38:07'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'Am 6/3/2021 20:38:07'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'Am 6/3/2021 20:38:07'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'Am 6/3/2021 20:38:07'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'Am 6/3/2021 20:38:07'!
PASSED!

!testRun: #MarsRoverTest #test17Log stamp: 'Am 6/3/2021 20:38:07'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/3/2021 20:38:54'!
test18Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'ff'.
	
	self assert: log equals: (OrderedCollection with: '0@2' with: '-1@2').! !

!testRun: #MarsRoverTest #test18Log stamp: 'Am 6/3/2021 20:38:56'!
FAILURE!

Object subclass: #MarsRover
	instanceVariableNames: ' positionLog position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'Am 6/3/2021 20:42:23'!
Object subclass: #MarsRover
	instanceVariableNames: 'positionLog position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Am 6/3/2021 20:42:39' prior: 50871277!
addLogToPosition: aLog 
	positionLog := aLog! !
!MarsRover methodsFor: 'moving' stamp: 'Am 6/3/2021 20:43:39' prior: 50870890!
moveForward
	
	head moveForward: self.
	positionLog add: self position asString.! !
!MarsRover methodsFor: 'moving' stamp: 'Am 6/3/2021 20:43:53' prior: 50871351!
moveForward
	
	head moveForward: self.
	positionLog add: position asString.! !

!testRun: #MarsRoverTest #test18Log stamp: 'Am 6/3/2021 20:44:08'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'Am 6/3/2021 20:44:11'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'Am 6/3/2021 20:44:11'!
ERROR!

!testRun: #MarsRoverTest #test03 stamp: 'Am 6/3/2021 20:44:11'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'Am 6/3/2021 20:44:11'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'Am 6/3/2021 20:44:11'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'Am 6/3/2021 20:44:11'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'Am 6/3/2021 20:44:11'!
ERROR!

!testRun: #MarsRoverTest #test08 stamp: 'Am 6/3/2021 20:44:11'!
ERROR!

!testRun: #MarsRoverTest #test09 stamp: 'Am 6/3/2021 20:44:11'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'Am 6/3/2021 20:44:11'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'Am 6/3/2021 20:44:11'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'Am 6/3/2021 20:44:11'!
ERROR!

!testRun: #MarsRoverTest #test13 stamp: 'Am 6/3/2021 20:44:11'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'Am 6/3/2021 20:44:11'!
ERROR!

!testRun: #MarsRoverTest #test15 stamp: 'Am 6/3/2021 20:44:11'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'Am 6/3/2021 20:44:11'!
PASSED!

!testRun: #MarsRoverTest #test17Log stamp: 'Am 6/3/2021 20:44:11'!
PASSED!

!testRun: #MarsRoverTest #test18Log stamp: 'Am 6/3/2021 20:44:11'!
PASSED!
!MarsRover methodsFor: 'moving' stamp: 'Am 6/3/2021 20:44:59' prior: 50871357!
moveForward
	
	head moveForward: self.
	(positionLog isNil) ifFalse:[positionLog add: position asString.].! !

!testRun: #MarsRoverTest #test01 stamp: 'Am 6/3/2021 20:45:01'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'Am 6/3/2021 20:45:01'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'Am 6/3/2021 20:45:01'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'Am 6/3/2021 20:45:01'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'Am 6/3/2021 20:45:01'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'Am 6/3/2021 20:45:01'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'Am 6/3/2021 20:45:01'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'Am 6/3/2021 20:45:01'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'Am 6/3/2021 20:45:01'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'Am 6/3/2021 20:45:01'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'Am 6/3/2021 20:45:01'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'Am 6/3/2021 20:45:01'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'Am 6/3/2021 20:45:01'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'Am 6/3/2021 20:45:01'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'Am 6/3/2021 20:45:01'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'Am 6/3/2021 20:45:01'!
PASSED!

!testRun: #MarsRoverTest #test17Log stamp: 'Am 6/3/2021 20:45:01'!
PASSED!

!testRun: #MarsRoverTest #test18Log stamp: 'Am 6/3/2021 20:45:01'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/3/2021 20:45:35'!
test19Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'b'.
	
	self assert: log equals: (OrderedCollection with: '2@2').! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/3/2021 20:48:19' prior: 50871453!
test19Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'frfrfrf'.
	
	self assert: log equals: (OrderedCollection with: '0@2' with: '0@3' with: '1@2' with: '1@1'    ).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/3/2021 20:48:25' prior: 50871463!
test19Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'frfrfrf'.
	
	self assert: log equals: (OrderedCollection with: '0@2' with: '0@3' with: '1@2' with: '1@1' ).! !

!testRun: #MarsRoverTest #test19Log stamp: 'Am 6/3/2021 20:48:25'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/3/2021 20:49:32' prior: 50871475!
test19Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'frfrfrf'.
	
	self assert: log equals: (OrderedCollection with: '0@2' with: '0@3' with: '1@3' with: '1@2' ).! !

!testRun: #MarsRoverTest #test19Log stamp: 'Am 6/3/2021 20:49:33'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'Am 6/3/2021 20:49:33'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'Am 6/3/2021 20:49:33'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'Am 6/3/2021 20:49:33'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'Am 6/3/2021 20:49:33'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'Am 6/3/2021 20:49:33'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'Am 6/3/2021 20:49:33'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'Am 6/3/2021 20:49:33'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'Am 6/3/2021 20:49:33'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'Am 6/3/2021 20:49:33'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'Am 6/3/2021 20:49:33'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'Am 6/3/2021 20:49:33'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'Am 6/3/2021 20:49:33'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'Am 6/3/2021 20:49:34'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'Am 6/3/2021 20:49:34'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'Am 6/3/2021 20:49:34'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'Am 6/3/2021 20:49:34'!
PASSED!

!testRun: #MarsRoverTest #test17Log stamp: 'Am 6/3/2021 20:49:34'!
PASSED!

!testRun: #MarsRoverTest #test18Log stamp: 'Am 6/3/2021 20:49:34'!
PASSED!

!testRun: #MarsRoverTest #test19Log stamp: 'Am 6/3/2021 20:49:34'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/3/2021 20:50:07'!
test20Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'brbrbrb'.
	
	self assert: log equals: (OrderedCollection with: '0@2' with: '0@3' with: '1@3' with: '1@2' ).! !

!testRun: #MarsRoverTest #test20Log stamp: 'Am 6/3/2021 20:50:07'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'Am 6/3/2021 20:50:29' prior: 50870882!
moveBackward
	
	head moveBackward: self.
	(positionLog isNil) ifFalse:[positionLog add: position asString.].! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/3/2021 20:51:19'!
test21Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToHeading: log.
	
	marsRover process: 'r'.
	
	self assert: log equals: (OrderedCollection with: 'Facing West' ).! !

!testRun: #MarsRoverTest #test21Log stamp: 'Am 6/3/2021 20:51:24'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Am 6/3/2021 20:51:32'!
addLogToHeading: anOrderedCollection 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Am 6/3/2021 20:51:52' prior: 50871579!
addLogToHeading: aLog 
	aLog add: 'Facing West'.! !

!testRun: #MarsRoverTest #test21Log stamp: 'Am 6/3/2021 20:51:54'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'Am 6/3/2021 20:51:54'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'Am 6/3/2021 20:51:54'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'Am 6/3/2021 20:51:54'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'Am 6/3/2021 20:51:54'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'Am 6/3/2021 20:51:54'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'Am 6/3/2021 20:51:54'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'Am 6/3/2021 20:51:54'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'Am 6/3/2021 20:51:54'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'Am 6/3/2021 20:51:54'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'Am 6/3/2021 20:51:54'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'Am 6/3/2021 20:51:54'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'Am 6/3/2021 20:51:54'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'Am 6/3/2021 20:51:54'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'Am 6/3/2021 20:51:54'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'Am 6/3/2021 20:51:54'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'Am 6/3/2021 20:51:54'!
PASSED!

!testRun: #MarsRoverTest #test17Log stamp: 'Am 6/3/2021 20:51:54'!
PASSED!

!testRun: #MarsRoverTest #test18Log stamp: 'Am 6/3/2021 20:51:54'!
PASSED!

!testRun: #MarsRoverTest #test19Log stamp: 'Am 6/3/2021 20:51:54'!
PASSED!

!testRun: #MarsRoverTest #test20Log stamp: 'Am 6/3/2021 20:51:54'!
FAILURE!

!testRun: #MarsRoverTest #test21Log stamp: 'Am 6/3/2021 20:51:54'!
PASSED!

!testRun: #MarsRoverTest #test20Log stamp: 'Am 6/3/2021 20:51:54'!
FAILURE!

!testRun: #MarsRoverTest #test21Log stamp: 'Am 6/3/2021 20:52:08'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'Am 6/3/2021 20:52:11'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'Am 6/3/2021 20:52:11'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'Am 6/3/2021 20:52:11'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'Am 6/3/2021 20:52:11'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'Am 6/3/2021 20:52:11'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'Am 6/3/2021 20:52:11'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'Am 6/3/2021 20:52:11'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'Am 6/3/2021 20:52:11'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'Am 6/3/2021 20:52:11'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'Am 6/3/2021 20:52:11'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'Am 6/3/2021 20:52:11'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'Am 6/3/2021 20:52:11'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'Am 6/3/2021 20:52:11'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'Am 6/3/2021 20:52:11'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'Am 6/3/2021 20:52:11'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'Am 6/3/2021 20:52:11'!
PASSED!

!testRun: #MarsRoverTest #test17Log stamp: 'Am 6/3/2021 20:52:11'!
PASSED!

!testRun: #MarsRoverTest #test18Log stamp: 'Am 6/3/2021 20:52:11'!
PASSED!

!testRun: #MarsRoverTest #test19Log stamp: 'Am 6/3/2021 20:52:11'!
PASSED!

!testRun: #MarsRoverTest #test20Log stamp: 'Am 6/3/2021 20:52:11'!
FAILURE!

!testRun: #MarsRoverTest #test21Log stamp: 'Am 6/3/2021 20:52:11'!
PASSED!

!testRun: #MarsRoverTest #test20Log stamp: 'Am 6/3/2021 20:52:11'!
FAILURE!

!testRun: #MarsRoverTest #test20Log stamp: 'Am 6/3/2021 20:52:33'!
FAILURE!

!testRun: #MarsRoverTest #test20Log stamp: 'Am 6/3/2021 20:52:33'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/3/2021 20:53:29' prior: 50871546!
test20Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'brbrbrb'.
	
	self assert: log equals: (OrderedCollection with: '2@2' with: '2@1' with: '1@1' with: '1@2' ).! !

!testRun: #MarsRoverTest #test20Log stamp: 'Am 6/3/2021 20:53:31'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'Am 6/3/2021 20:53:31'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'Am 6/3/2021 20:53:31'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'Am 6/3/2021 20:53:31'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'Am 6/3/2021 20:53:31'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'Am 6/3/2021 20:53:31'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'Am 6/3/2021 20:53:31'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'Am 6/3/2021 20:53:31'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'Am 6/3/2021 20:53:31'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'Am 6/3/2021 20:53:31'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'Am 6/3/2021 20:53:31'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'Am 6/3/2021 20:53:31'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'Am 6/3/2021 20:53:31'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'Am 6/3/2021 20:53:31'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'Am 6/3/2021 20:53:31'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'Am 6/3/2021 20:53:31'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'Am 6/3/2021 20:53:31'!
PASSED!

!testRun: #MarsRoverTest #test17Log stamp: 'Am 6/3/2021 20:53:31'!
PASSED!

!testRun: #MarsRoverTest #test18Log stamp: 'Am 6/3/2021 20:53:31'!
PASSED!

!testRun: #MarsRoverTest #test19Log stamp: 'Am 6/3/2021 20:53:31'!
PASSED!

!testRun: #MarsRoverTest #test20Log stamp: 'Am 6/3/2021 20:53:31'!
PASSED!

!testRun: #MarsRoverTest #test21Log stamp: 'Am 6/3/2021 20:53:31'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/3/2021 20:54:09'!
test22Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToHeading: log.
	
	marsRover process: 'rr'.
	
	self assert: log equals: (OrderedCollection with: 'Facing North' with: 'Facing East').! !

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/3/2021 20:54:11'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/3/2021 20:54:19' prior: 50871566!
test21Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToHeading: log.
	
	marsRover process: 'r'.
	
	self assert: log equals: (OrderedCollection with: 'Facing North' ).! !

Object subclass: #MarsRover
	instanceVariableNames: 'positionLog headingLog position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'Am 6/3/2021 20:54:39'!
Object subclass: #MarsRover
	instanceVariableNames: 'positionLog headingLog position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Am 6/3/2021 20:54:56' prior: 50871584!
addLogToHeading: aLog 
	headingLog := aLog! !
!MarsRover methodsFor: 'heading' stamp: 'Am 6/3/2021 21:00:16' prior: 50870852!
rotateLeft
	
	head rotateLeft: self.
	
	headingLog isNil ifFalse:[
		(head = MarsRoverHeadingEast) ifTrue:[headingLog add: 'Facing East'].
		(head = MarsRoverHeadingWest) ifTrue:[headingLog add: 'Facing West'].
		(head = MarsRoverHeadingSouth) ifTrue:[headingLog add: 'Facing South'].
		(head = MarsRoverHeadingNorth) ifTrue:[headingLog add: 'Facing North'].
		
		
		]! !

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/3/2021 21:00:36'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'Am 6/3/2021 21:01:05' prior: 50870856!
rotateRight
	
	head rotateRight: self.
	
	headingLog isNil ifFalse:[
		(head = MarsRoverHeadingEast) ifTrue:[headingLog add: 'Facing East'].
		(head = MarsRoverHeadingWest) ifTrue:[headingLog add: 'Facing West'].
		(head = MarsRoverHeadingSouth) ifTrue:[headingLog add: 'Facing South'].
		(head = MarsRoverHeadingNorth) ifTrue:[headingLog add: 'Facing North'].
		
		
		]! !

!testRun: #MarsRoverTest #test01 stamp: 'Am 6/3/2021 21:01:07'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'Am 6/3/2021 21:01:07'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'Am 6/3/2021 21:01:07'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'Am 6/3/2021 21:01:07'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'Am 6/3/2021 21:01:07'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'Am 6/3/2021 21:01:07'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'Am 6/3/2021 21:01:07'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'Am 6/3/2021 21:01:07'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'Am 6/3/2021 21:01:07'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'Am 6/3/2021 21:01:07'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'Am 6/3/2021 21:01:07'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'Am 6/3/2021 21:01:07'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'Am 6/3/2021 21:01:07'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'Am 6/3/2021 21:01:07'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'Am 6/3/2021 21:01:07'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'Am 6/3/2021 21:01:07'!
PASSED!

!testRun: #MarsRoverTest #test17Log stamp: 'Am 6/3/2021 21:01:07'!
PASSED!

!testRun: #MarsRoverTest #test18Log stamp: 'Am 6/3/2021 21:01:07'!
PASSED!

!testRun: #MarsRoverTest #test19Log stamp: 'Am 6/3/2021 21:01:07'!
PASSED!

!testRun: #MarsRoverTest #test20Log stamp: 'Am 6/3/2021 21:01:07'!
PASSED!

!testRun: #MarsRoverTest #test21Log stamp: 'Am 6/3/2021 21:01:07'!
FAILURE!

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/3/2021 21:01:07'!
FAILURE!

!testRun: #MarsRoverTest #test21Log stamp: 'Am 6/3/2021 21:01:23'!
FAILURE!

!testRun: #MarsRoverTest #test21Log stamp: 'Am 6/3/2021 21:01:23'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/3/2021 21:04:10'!
test17addLogMoveForward

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'f'.
	
	self assert: log equals: (OrderedCollection with: '0@2').! !

!methodRemoval: MarsRoverTest #test17Log stamp: 'Am 6/3/2021 21:04:10'!
test17Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'f'.
	
	self assert: log equals: (OrderedCollection with: '0@2').!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/3/2021 21:04:20'!
test17addLogMoveForwardOnce

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'f'.
	
	self assert: log equals: (OrderedCollection with: '0@2').! !

!methodRemoval: MarsRoverTest #test17addLogMoveForward stamp: 'Am 6/3/2021 21:04:20'!
test17addLogMoveForward

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'f'.
	
	self assert: log equals: (OrderedCollection with: '0@2').!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/3/2021 21:04:32'!
test18addLogMoveForwardTwice

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'ff'.
	
	self assert: log equals: (OrderedCollection with: '0@2' with: '-1@2').! !

!methodRemoval: MarsRoverTest #test18Log stamp: 'Am 6/3/2021 21:04:32'!
test18Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'ff'.
	
	self assert: log equals: (OrderedCollection with: '0@2' with: '-1@2').!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Am 6/3/2021 21:08:17' prior: 50871347!
addLogToPosition: aLog 
	positionLog := aLog! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/3/2021 21:30:08'!
test17addLogRegistersOneMove

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'f'.
	
	self assert: log equals: (OrderedCollection with: '0@2').! !

!methodRemoval: MarsRoverTest #test17addLogMoveForwardOnce stamp: 'Am 6/3/2021 21:30:08'!
test17addLogMoveForwardOnce

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'f'.
	
	self assert: log equals: (OrderedCollection with: '0@2').!

!testRun: #MarsRoverTest #test21Log stamp: 'Am 6/3/2021 21:30:52'!
FAILURE!

!testRun: #MarsRoverTest #test21Log stamp: 'Am 6/3/2021 21:30:52'!
FAILURE!

!testRun: #MarsRoverTest #test01 stamp: 'Am 6/3/2021 21:30:55'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'Am 6/3/2021 21:30:55'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'Am 6/3/2021 21:30:55'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'Am 6/3/2021 21:30:55'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'Am 6/3/2021 21:30:55'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'Am 6/3/2021 21:30:55'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'Am 6/3/2021 21:30:55'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'Am 6/3/2021 21:30:55'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'Am 6/3/2021 21:30:55'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'Am 6/3/2021 21:30:55'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'Am 6/3/2021 21:30:55'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'Am 6/3/2021 21:30:55'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'Am 6/3/2021 21:30:55'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'Am 6/3/2021 21:30:55'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'Am 6/3/2021 21:30:55'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'Am 6/3/2021 21:30:55'!
PASSED!

!testRun: #MarsRoverTest #test17addLogRegistersOneMove stamp: 'Am 6/3/2021 21:30:55'!
PASSED!

!testRun: #MarsRoverTest #test18addLogMoveForwardTwice stamp: 'Am 6/3/2021 21:30:55'!
PASSED!

!testRun: #MarsRoverTest #test19Log stamp: 'Am 6/3/2021 21:30:55'!
PASSED!

!testRun: #MarsRoverTest #test20Log stamp: 'Am 6/3/2021 21:30:55'!
PASSED!

!testRun: #MarsRoverTest #test21Log stamp: 'Am 6/3/2021 21:30:55'!
FAILURE!

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/3/2021 21:30:55'!
FAILURE!

!testRun: #MarsRoverTest #test01 stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test17addLogRegistersOneMove stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test18addLogMoveForwardTwice stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test19Log stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test20Log stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test21Log stamp: 'Am 6/3/2021 21:30:57'!
FAILURE!

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/3/2021 21:30:57'!
FAILURE!

!testRun: #MarsRoverTest #test01 stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test17addLogRegistersOneMove stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test18addLogMoveForwardTwice stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test19Log stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test20Log stamp: 'Am 6/3/2021 21:30:57'!
PASSED!

!testRun: #MarsRoverTest #test21Log stamp: 'Am 6/3/2021 21:30:57'!
FAILURE!

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/3/2021 21:30:57'!
FAILURE!

!testRun: #MarsRoverTest #test01 stamp: 'Am 6/3/2021 21:31:06'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'Am 6/3/2021 21:31:07'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'Am 6/3/2021 21:31:07'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'Am 6/3/2021 21:31:07'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'Am 6/3/2021 21:31:07'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'Am 6/3/2021 21:31:07'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'Am 6/3/2021 21:31:07'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'Am 6/3/2021 21:31:07'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'Am 6/3/2021 21:31:07'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'Am 6/3/2021 21:31:07'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'Am 6/3/2021 21:31:07'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'Am 6/3/2021 21:31:07'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'Am 6/3/2021 21:31:07'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'Am 6/3/2021 21:31:07'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'Am 6/3/2021 21:31:07'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'Am 6/3/2021 21:31:07'!
PASSED!

!testRun: #MarsRoverTest #test17addLogRegistersOneMove stamp: 'Am 6/3/2021 21:31:07'!
PASSED!

!testRun: #MarsRoverTest #test18addLogMoveForwardTwice stamp: 'Am 6/3/2021 21:31:07'!
PASSED!

!testRun: #MarsRoverTest #test19Log stamp: 'Am 6/3/2021 21:31:07'!
PASSED!

!testRun: #MarsRoverTest #test20Log stamp: 'Am 6/3/2021 21:31:07'!
PASSED!

!testRun: #MarsRoverTest #test21Log stamp: 'Am 6/3/2021 21:31:07'!
FAILURE!

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/3/2021 21:31:07'!
FAILURE!

!testRun: #MarsRoverTest #test01 stamp: 'Am 6/3/2021 21:31:14'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'Am 6/3/2021 21:31:14'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'Am 6/3/2021 21:31:14'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'Am 6/3/2021 21:31:14'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'Am 6/3/2021 21:31:14'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'Am 6/3/2021 21:31:14'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'Am 6/3/2021 21:31:14'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'Am 6/3/2021 21:31:14'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'Am 6/3/2021 21:31:14'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'Am 6/3/2021 21:31:14'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'Am 6/3/2021 21:31:14'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'Am 6/3/2021 21:31:14'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'Am 6/3/2021 21:31:14'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'Am 6/3/2021 21:31:14'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'Am 6/3/2021 21:31:14'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'Am 6/3/2021 21:31:14'!
PASSED!

!testRun: #MarsRoverTest #test17addLogRegistersOneMove stamp: 'Am 6/3/2021 21:31:14'!
PASSED!

!testRun: #MarsRoverTest #test18addLogMoveForwardTwice stamp: 'Am 6/3/2021 21:31:14'!
PASSED!

!testRun: #MarsRoverTest #test19Log stamp: 'Am 6/3/2021 21:31:14'!
PASSED!

!testRun: #MarsRoverTest #test20Log stamp: 'Am 6/3/2021 21:31:14'!
PASSED!

!testRun: #MarsRoverTest #test21Log stamp: 'Am 6/3/2021 21:31:14'!
FAILURE!

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/3/2021 21:31:14'!
FAILURE!

!testRun: #MarsRoverTest #test01 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test17addLogRegistersOneMove stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test18addLogMoveForwardTwice stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test19Log stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test20Log stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test21Log stamp: 'Am 6/3/2021 21:31:18'!
FAILURE!

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/3/2021 21:31:18'!
FAILURE!

!testRun: #MarsRoverTest #test01 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test17addLogRegistersOneMove stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test18addLogMoveForwardTwice stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test19Log stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test20Log stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test21Log stamp: 'Am 6/3/2021 21:31:18'!
FAILURE!

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/3/2021 21:31:18'!
FAILURE!

!testRun: #MarsRoverTest #test01 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test17addLogRegistersOneMove stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test18addLogMoveForwardTwice stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test19Log stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test20Log stamp: 'Am 6/3/2021 21:31:18'!
PASSED!

!testRun: #MarsRoverTest #test21Log stamp: 'Am 6/3/2021 21:31:18'!
FAILURE!

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/3/2021 21:31:18'!
FAILURE!

!testRun: #MarsRoverTest #test01 stamp: 'Am 6/3/2021 21:31:19'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'Am 6/3/2021 21:31:19'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'Am 6/3/2021 21:31:19'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'Am 6/3/2021 21:31:19'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'Am 6/3/2021 21:31:19'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'Am 6/3/2021 21:31:19'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'Am 6/3/2021 21:31:19'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'Am 6/3/2021 21:31:19'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'Am 6/3/2021 21:31:19'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'Am 6/3/2021 21:31:19'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'Am 6/3/2021 21:31:19'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'Am 6/3/2021 21:31:19'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'Am 6/3/2021 21:31:19'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'Am 6/3/2021 21:31:19'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'Am 6/3/2021 21:31:19'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'Am 6/3/2021 21:31:19'!
PASSED!

!testRun: #MarsRoverTest #test17addLogRegistersOneMove stamp: 'Am 6/3/2021 21:31:19'!
PASSED!

!testRun: #MarsRoverTest #test18addLogMoveForwardTwice stamp: 'Am 6/3/2021 21:31:19'!
PASSED!

!testRun: #MarsRoverTest #test19Log stamp: 'Am 6/3/2021 21:31:19'!
PASSED!

!testRun: #MarsRoverTest #test20Log stamp: 'Am 6/3/2021 21:31:19'!
PASSED!

!testRun: #MarsRoverTest #test21Log stamp: 'Am 6/3/2021 21:31:19'!
FAILURE!

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/3/2021 21:31:19'!
FAILURE!

----STARTUP---- (6 June 2021 17:24:26) as /home/alejandro/Documents/Cs.Computacion/Inge 1/linux64/CuisUniversity-4532.image!


!classDefinition: #MarsRoverTest category: 'MarsRover-WithHeading' stamp: 'Am 6/6/2021 17:24:36'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverTest category: 'MarsRover-WithHeading' stamp: 'Am 6/6/2021 17:24:37'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 7/1/2018 14:23:26'!
test01

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: #North.
	
	marsRover process: ''.
	
	self assert: (marsRover isAt: 1@2 heading: #North)! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 7/1/2018 14:23:31'!
test02

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 1@3 heading: #North)! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 7/1/2018 14:23:34'!
test03

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'b'.
	
	self assert: (marsRover isAt: 1@1 heading: #North)! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 7/1/2018 14:23:38'!
test04

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'r'.
	
	self assert: (marsRover isAt: 1@2 heading: #East)! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 7/1/2018 14:23:45'!
test05

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #West)! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 7/1/2018 14:23:50'!
test06

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: #North.
	
	self 
		should: [ marsRover process: 'x' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: marsRover invalidCommandErrorDescription.
			self assert: (marsRover isAt: 1@2 heading: #North) ]! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 7/1/2018 14:23:54'!
test07

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'ff'.
	
	self assert: (marsRover isAt: 1@4 heading: #North)! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 7/1/2018 14:23:59'!
test08

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: #East.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 2@2 heading: #East)! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 7/1/2018 14:24:06'!
test09

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: #East.
	
	marsRover process: 'b'.
	
	self assert: (marsRover isAt: 0@2 heading: #East)! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 7/1/2018 14:24:12'!
test10

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: #East.
	
	marsRover process: 'r'.
	
	self assert: (marsRover isAt: 1@2 heading: #South)! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 7/1/2018 14:24:20'!
test11

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: #East.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #North)! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 7/1/2018 14:24:25'!
test12

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: #South.
	
	marsRover process: 'ffbr'.
	
	self assert: (marsRover isAt: 1@1 heading: #West)! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 7/1/2018 14:24:29'!
test13

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: #South.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #East)! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 7/1/2018 14:24:33'!
test14

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: #West.
	
	marsRover process: 'ffbr'.
	
	self assert: (marsRover isAt: 0@2 heading: #North)! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 7/1/2018 14:24:37'!
test15

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: #West.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #South)! !
!MarsRoverTest methodsFor: 'tests' stamp: 'HAW 7/2/2018 16:27:43'!
test16

	self 
		should: [MarsRover at: 1@2 heading: #X ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: MarsRover invalidCardinalPointErrorDescription equals: anError messageText ]! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'Am 6/6/2021 17:24:37'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'Am 6/6/2021 17:24:37'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'exceptions' stamp: 'HAW 6/30/2018 19:48:45'!
invalidCommandErrorDescription
	
	^'Invalid command'! !
!MarsRover methodsFor: 'exceptions' stamp: 'HAW 6/30/2018 19:50:26'!
signalInvalidCommand
	
	self error: self invalidCommandErrorDescription ! !
!MarsRover methodsFor: 'initialization' stamp: 'HAW 8/22/2019 12:02:37'!
initializeAt: aPosition heading: aHeading

	position := aPosition.
	head := aHeading ! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 8/22/2019 12:14:20'!
headEast
	
	head := MarsRoverHeadingEast new! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 8/22/2019 12:16:30'!
headNorth
	
	head := MarsRoverHeadingNorth new! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 8/22/2019 12:16:05'!
headSouth
	
	head := MarsRoverHeadingSouth new! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 8/22/2019 12:14:38'!
headWest
	
	head := MarsRoverHeadingWest new! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 8/22/2019 12:07:11'!
rotateLeft
	
	head rotateLeft: self! !
!MarsRover methodsFor: 'heading' stamp: 'HAW 8/22/2019 12:14:00'!
rotateRight
	
	head rotateRight: self! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 8/22/2019 12:00:30'!
isAt: aPosition heading: aCardinalPoint

	^position = aPosition and: [ head isHeading: aCardinalPoint ]! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:16:51'!
isBackwardCommand: aCommand

	^aCommand = $b! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:16:19'!
isForwardCommand: aCommand

	^aCommand = $f ! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:17:51'!
isRotateLeftCommand: aCommand

	^aCommand = $l! !
!MarsRover methodsFor: 'testing' stamp: 'HAW 7/6/2018 18:17:21'!
isRotateRightCommand: aCommand

	^aCommand = $r! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:05:20'!
moveBackward
	
	head moveBackward: self! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:15:01'!
moveEast
	
	position := position + (1@0)! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:05:55'!
moveForward
	
	head moveForward: self! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:13:12'!
moveNorth
	
	position := position + (0@1)! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:13:34'!
moveSouth
	
	position := position + (0@-1)! !
!MarsRover methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:15:32'!
moveWest
	
	position := position + (-1@0)! !
!MarsRover methodsFor: 'command processing' stamp: 'HAW 6/30/2018 19:48:26'!
process: aSequenceOfCommands

	aSequenceOfCommands do: [:aCommand | self processCommand: aCommand ]
! !
!MarsRover methodsFor: 'command processing' stamp: 'HAW 8/22/2019 12:08:50'!
processCommand: aCommand

	(self isForwardCommand: aCommand) ifTrue: [ ^ self moveForward ].
	(self isBackwardCommand: aCommand) ifTrue: [ ^ self moveBackward ].
	(self isRotateRightCommand: aCommand) ifTrue: [ ^ self rotateRight ].
	(self isRotateLeftCommand: aCommand) ifTrue: [ ^ self rotateLeft ].

	self signalInvalidCommand.! !

!classDefinition: 'MarsRover class' category: 'MarsRover-WithHeading' stamp: 'Am 6/6/2021 17:24:37'!
MarsRover class
	instanceVariableNames: 'headings'!

!classDefinition: 'MarsRover class' category: 'MarsRover-WithHeading' stamp: 'Am 6/6/2021 17:24:37'!
MarsRover class
	instanceVariableNames: 'headings'!
!MarsRover class methodsFor: 'instance creation' stamp: 'HAW 8/22/2019 12:01:48'!
at: aPosition heading: aCardinalPoint
	
	^self new initializeAt: aPosition heading: (MarsRoverHeading heading: aCardinalPoint)! !
!MarsRover class methodsFor: 'instance creation' stamp: 'HAW 7/2/2018 16:26:14'!
invalidCardinalPointErrorDescription
	
	^'Invalid cardinal point'! !

!classDefinition: #MarsRoverHeading category: 'MarsRover-WithHeading' stamp: 'Am 6/6/2021 17:24:37'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeading category: 'MarsRover-WithHeading' stamp: 'Am 6/6/2021 17:24:37'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeading methodsFor: 'heading' stamp: 'HAW 8/22/2019 12:06:17'!
rotateLeft: aMarsRover

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'heading' stamp: 'HAW 8/22/2019 12:08:23'!
rotateRight: aMarsRover

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'testing' stamp: 'HAW 7/2/2018 19:07:42'!
isHeading: aCardinalPoint

	^self class isFor: aCardinalPoint! !
!MarsRoverHeading methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:05:20'!
moveBackward: aMarsRover

	self subclassResponsibility ! !
!MarsRoverHeading methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:05:54'!
moveForward: aMarsRover

	self subclassResponsibility ! !

!classDefinition: 'MarsRoverHeading class' category: 'MarsRover-WithHeading' stamp: 'Am 6/6/2021 17:24:38'!
MarsRoverHeading class
	instanceVariableNames: ''!

!classDefinition: 'MarsRoverHeading class' category: 'MarsRover-WithHeading' stamp: 'Am 6/6/2021 17:24:38'!
MarsRoverHeading class
	instanceVariableNames: ''!
!MarsRoverHeading class methodsFor: 'cardinal point' stamp: 'HAW 7/2/2018 19:07:01'!
cardinalPoint

	self subclassResponsibility ! !
!MarsRoverHeading class methodsFor: 'instance creation' stamp: 'HAW 8/22/2019 12:02:00'!
heading: aCardinalPoint

	^self subclasses 
		detect: [ :aMarsRoverPositionClass | aMarsRoverPositionClass isFor: aCardinalPoint ]
		ifFound: [ :aMarsRoverPositionClass | aMarsRoverPositionClass new ]
		ifNone: [ self error: MarsRover invalidCardinalPointErrorDescription ]! !
!MarsRoverHeading class methodsFor: 'testing' stamp: 'HAW 7/2/2018 17:01:33'!
isFor: aCardinalPoint

	^self cardinalPoint = aCardinalPoint ! !

!classDefinition: #MarsRoverHeadingEast category: 'MarsRover-WithHeading' stamp: 'Am 6/6/2021 17:24:38'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingEast category: 'MarsRover-WithHeading' stamp: 'Am 6/6/2021 17:24:38'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingEast methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:09:19' overrides: 50872767!
moveBackward: aMarsRover
	
	^aMarsRover moveWest! !
!MarsRoverHeadingEast methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:09:28' overrides: 50872772!
moveForward: aMarsRover
	
	^aMarsRover moveEast! !
!MarsRoverHeadingEast methodsFor: 'heading' stamp: 'HAW 8/22/2019 12:09:42' overrides: 50872752!
rotateLeft: aMarsRover
	
	^aMarsRover headNorth! !
!MarsRoverHeadingEast methodsFor: 'heading' stamp: 'HAW 8/22/2019 12:09:54' overrides: 50872757!
rotateRight: aMarsRover
	
	^aMarsRover headSouth! !

!classDefinition: 'MarsRoverHeadingEast class' category: 'MarsRover-WithHeading' stamp: 'Am 6/6/2021 17:24:38'!
MarsRoverHeadingEast class
	instanceVariableNames: ''!

!classDefinition: 'MarsRoverHeadingEast class' category: 'MarsRover-WithHeading' stamp: 'Am 6/6/2021 17:24:38'!
MarsRoverHeadingEast class
	instanceVariableNames: ''!
!MarsRoverHeadingEast class methodsFor: 'as yet unclassified' stamp: 'HAW 7/2/2018 17:01:53' overrides: 50872787!
cardinalPoint

	^#East! !

!classDefinition: #MarsRoverHeadingNorth category: 'MarsRover-WithHeading' stamp: 'Am 6/6/2021 17:24:38'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingNorth category: 'MarsRover-WithHeading' stamp: 'Am 6/6/2021 17:24:38'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingNorth methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:10:12' overrides: 50872767!
moveBackward: aMarsRover
	
	^aMarsRover moveSouth! !
!MarsRoverHeadingNorth methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:10:23' overrides: 50872772!
moveForward: aMarsRover
	
	^aMarsRover moveNorth! !
!MarsRoverHeadingNorth methodsFor: 'heading' stamp: 'HAW 8/22/2019 12:10:40' overrides: 50872752!
rotateLeft: aMarsRover
	
	^aMarsRover headWest! !
!MarsRoverHeadingNorth methodsFor: 'heading' stamp: 'HAW 8/22/2019 12:10:51' overrides: 50872757!
rotateRight: aMarsRover
	
	^aMarsRover headEast! !

!classDefinition: 'MarsRoverHeadingNorth class' category: 'MarsRover-WithHeading' stamp: 'Am 6/6/2021 17:24:38'!
MarsRoverHeadingNorth class
	instanceVariableNames: ''!

!classDefinition: 'MarsRoverHeadingNorth class' category: 'MarsRover-WithHeading' stamp: 'Am 6/6/2021 17:24:38'!
MarsRoverHeadingNorth class
	instanceVariableNames: ''!
!MarsRoverHeadingNorth class methodsFor: 'as yet unclassified' stamp: 'HAW 7/2/2018 17:03:11' overrides: 50872787!
cardinalPoint

	^#North! !

!classDefinition: #MarsRoverHeadingSouth category: 'MarsRover-WithHeading' stamp: 'Am 6/6/2021 17:24:38'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingSouth category: 'MarsRover-WithHeading' stamp: 'Am 6/6/2021 17:24:38'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingSouth methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:11:15' overrides: 50872767!
moveBackward: aMarsRover
	
	^aMarsRover moveNorth! !
!MarsRoverHeadingSouth methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:11:25' overrides: 50872772!
moveForward: aMarsRover
	
	^aMarsRover moveSouth! !
!MarsRoverHeadingSouth methodsFor: 'heading' stamp: 'HAW 8/22/2019 12:11:55' overrides: 50872752!
rotateLeft: aMarsRover
	
	^aMarsRover headEast! !
!MarsRoverHeadingSouth methodsFor: 'heading' stamp: 'HAW 8/22/2019 12:11:50' overrides: 50872757!
rotateRight: aMarsRover
	
	^aMarsRover headWest! !

!classDefinition: 'MarsRoverHeadingSouth class' category: 'MarsRover-WithHeading' stamp: 'Am 6/6/2021 17:24:38'!
MarsRoverHeadingSouth class
	instanceVariableNames: ''!

!classDefinition: 'MarsRoverHeadingSouth class' category: 'MarsRover-WithHeading' stamp: 'Am 6/6/2021 17:24:38'!
MarsRoverHeadingSouth class
	instanceVariableNames: ''!
!MarsRoverHeadingSouth class methodsFor: 'as yet unclassified' stamp: 'HAW 7/2/2018 17:03:17' overrides: 50872787!
cardinalPoint

	^#South! !

!classDefinition: #MarsRoverHeadingWest category: 'MarsRover-WithHeading' stamp: 'Am 6/6/2021 17:24:38'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingWest category: 'MarsRover-WithHeading' stamp: 'Am 6/6/2021 17:24:38'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingWest methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:12:07' overrides: 50872767!
moveBackward: aMarsRover

	^aMarsRover moveEast! !
!MarsRoverHeadingWest methodsFor: 'moving' stamp: 'HAW 8/22/2019 12:12:15' overrides: 50872772!
moveForward: aMarsRover
	
	^aMarsRover moveWest! !
!MarsRoverHeadingWest methodsFor: 'heading' stamp: 'HAW 8/22/2019 12:12:26' overrides: 50872752!
rotateLeft: aMarsRover
	
	^aMarsRover headSouth! !
!MarsRoverHeadingWest methodsFor: 'heading' stamp: 'HAW 8/22/2019 12:12:41' overrides: 50872757!
rotateRight: aMarsRover
	
	^aMarsRover headNorth! !

!classDefinition: 'MarsRoverHeadingWest class' category: 'MarsRover-WithHeading' stamp: 'Am 6/6/2021 17:24:38'!
MarsRoverHeadingWest class
	instanceVariableNames: ''!

!classDefinition: 'MarsRoverHeadingWest class' category: 'MarsRover-WithHeading' stamp: 'Am 6/6/2021 17:24:38'!
MarsRoverHeadingWest class
	instanceVariableNames: ''!
!MarsRoverHeadingWest class methodsFor: 'as yet unclassified' stamp: 'HAW 7/2/2018 17:03:23' overrides: 50872787!
cardinalPoint

	^#West! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/3/2021 20:29:58'!
test17Log

	| marsRover |
	
	marsRover := MarsRover at: 1@2 heading: #West.
	
	marsRover process: 'ffbr'.
	
	self assert: (marsRover isAt: 0@2 heading: #North)! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/3/2021 20:35:15' prior: 50873016!
test17Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'f'.
	
	self assert: log equals: (OrderedCollection new with: '0@2').! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Am 6/3/2021 20:35:31'!
addLogToPosition: anOrderedCollection 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Am 6/3/2021 20:36:14' prior: 50873034!
addLogToPosition: aLog 
	^ OrderedCollection  new with: '0@2'! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Am 6/3/2021 20:36:38' prior: 50873040!
addLogToPosition: aLog 
	^ OrderedCollection with: '0@2'! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/3/2021 20:36:46' prior: 50873024!
test17Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'f'.
	
	self assert: log equals: (OrderedCollection with: '0@2').! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Am 6/3/2021 20:37:15' prior: 50873045!
addLogToPosition: aLog 
	^ (OrderedCollection with: '0@2')! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Am 6/3/2021 20:37:33' prior: 50873061!
addLogToPosition: aLog 
	^ OrderedCollection with: '0@2'! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Am 6/3/2021 20:38:03' prior: 50873066!
addLogToPosition: aLog 
	aLog add: '0@2'! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/3/2021 20:38:54'!
test18Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'ff'.
	
	self assert: log equals: (OrderedCollection with: '0@2' with: '-1@2').! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'Am 6/6/2021 17:24:38'!
Object subclass: #MarsRover
	instanceVariableNames: 'positionLog position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'Am 6/6/2021 17:24:38'!
Object subclass: #MarsRover
	instanceVariableNames: 'positionLog position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Am 6/3/2021 20:42:39' prior: 50873071!
addLogToPosition: aLog 
	positionLog := aLog! !
!MarsRover methodsFor: 'moving' stamp: 'Am 6/3/2021 20:43:39' prior: 50872680!
moveForward
	
	head moveForward: self.
	positionLog add: self position asString.! !
!MarsRover methodsFor: 'moving' stamp: 'Am 6/3/2021 20:43:53' prior: 50873106!
moveForward
	
	head moveForward: self.
	positionLog add: position asString.! !
!MarsRover methodsFor: 'moving' stamp: 'Am 6/3/2021 20:44:59' prior: 50873112!
moveForward
	
	head moveForward: self.
	(positionLog isNil) ifFalse:[positionLog add: position asString.].! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/3/2021 20:45:35'!
test19Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'b'.
	
	self assert: log equals: (OrderedCollection with: '2@2').! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/3/2021 20:48:19' prior: 50873123!
test19Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'frfrfrf'.
	
	self assert: log equals: (OrderedCollection with: '0@2' with: '0@3' with: '1@2' with: '1@1'    ).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/3/2021 20:48:25' prior: 50873133!
test19Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'frfrfrf'.
	
	self assert: log equals: (OrderedCollection with: '0@2' with: '0@3' with: '1@2' with: '1@1' ).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/3/2021 20:49:32' prior: 50873145!
test19Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'frfrfrf'.
	
	self assert: log equals: (OrderedCollection with: '0@2' with: '0@3' with: '1@3' with: '1@2' ).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/3/2021 20:50:07'!
test20Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'brbrbrb'.
	
	self assert: log equals: (OrderedCollection with: '0@2' with: '0@3' with: '1@3' with: '1@2' ).! !
!MarsRover methodsFor: 'moving' stamp: 'Am 6/3/2021 20:50:29' prior: 50872672!
moveBackward
	
	head moveBackward: self.
	(positionLog isNil) ifFalse:[positionLog add: position asString.].! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/3/2021 20:51:19'!
test21Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToHeading: log.
	
	marsRover process: 'r'.
	
	self assert: log equals: (OrderedCollection with: 'Facing West' ).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Am 6/3/2021 20:51:32'!
addLogToHeading: anOrderedCollection 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Am 6/3/2021 20:51:52' prior: 50873196!
addLogToHeading: aLog 
	aLog add: 'Facing West'.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/3/2021 20:53:29' prior: 50873168!
test20Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'brbrbrb'.
	
	self assert: log equals: (OrderedCollection with: '2@2' with: '2@1' with: '1@1' with: '1@2' ).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/3/2021 20:54:09'!
test22Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToHeading: log.
	
	marsRover process: 'rr'.
	
	self assert: log equals: (OrderedCollection with: 'Facing North' with: 'Facing East').! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/3/2021 20:54:19' prior: 50873186!
test21Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToHeading: log.
	
	marsRover process: 'r'.
	
	self assert: log equals: (OrderedCollection with: 'Facing North' ).! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'Am 6/6/2021 17:24:38'!
Object subclass: #MarsRover
	instanceVariableNames: 'positionLog headingLog position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'Am 6/6/2021 17:24:38'!
Object subclass: #MarsRover
	instanceVariableNames: 'positionLog headingLog position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Am 6/3/2021 20:54:56' prior: 50873201!
addLogToHeading: aLog 
	headingLog := aLog! !
!MarsRover methodsFor: 'heading' stamp: 'Am 6/3/2021 21:00:16' prior: 50872642!
rotateLeft
	
	head rotateLeft: self.
	
	headingLog isNil ifFalse:[
		(head = MarsRoverHeadingEast) ifTrue:[headingLog add: 'Facing East'].
		(head = MarsRoverHeadingWest) ifTrue:[headingLog add: 'Facing West'].
		(head = MarsRoverHeadingSouth) ifTrue:[headingLog add: 'Facing South'].
		(head = MarsRoverHeadingNorth) ifTrue:[headingLog add: 'Facing North'].
		
		
		]! !
!MarsRover methodsFor: 'heading' stamp: 'Am 6/3/2021 21:01:05' prior: 50872646!
rotateRight
	
	head rotateRight: self.
	
	headingLog isNil ifFalse:[
		(head = MarsRoverHeadingEast) ifTrue:[headingLog add: 'Facing East'].
		(head = MarsRoverHeadingWest) ifTrue:[headingLog add: 'Facing West'].
		(head = MarsRoverHeadingSouth) ifTrue:[headingLog add: 'Facing South'].
		(head = MarsRoverHeadingNorth) ifTrue:[headingLog add: 'Facing North'].
		
		
		]! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/3/2021 21:04:10'!
test17addLogMoveForward

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'f'.
	
	self assert: log equals: (OrderedCollection with: '0@2').! !

!methodRemoval: MarsRoverTest #test17Log stamp: 'Am 6/6/2021 17:24:38'!
test17Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'f'.
	
	self assert: log equals: (OrderedCollection with: '0@2').!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/3/2021 21:04:20'!
test17addLogMoveForwardOnce

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'f'.
	
	self assert: log equals: (OrderedCollection with: '0@2').! !

!methodRemoval: MarsRoverTest #test17addLogMoveForward stamp: 'Am 6/6/2021 17:24:38'!
test17addLogMoveForward

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'f'.
	
	self assert: log equals: (OrderedCollection with: '0@2').!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/3/2021 21:04:32'!
test18addLogMoveForwardTwice

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'ff'.
	
	self assert: log equals: (OrderedCollection with: '0@2' with: '-1@2').! !

!methodRemoval: MarsRoverTest #test18Log stamp: 'Am 6/6/2021 17:24:38'!
test18Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'ff'.
	
	self assert: log equals: (OrderedCollection with: '0@2' with: '-1@2').!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Am 6/3/2021 21:08:17' prior: 50873102!
addLogToPosition: aLog 
	positionLog := aLog! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/3/2021 21:30:08'!
test17addLogRegistersOneMove

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'f'.
	
	self assert: log equals: (OrderedCollection with: '0@2').! !

!methodRemoval: MarsRoverTest #test17addLogMoveForwardOnce stamp: 'Am 6/6/2021 17:24:38'!
test17addLogMoveForwardOnce

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'f'.
	
	self assert: log equals: (OrderedCollection with: '0@2').!

----SNAPSHOT----(6 June 2021 17:24:52) CuisUniversity-4532.image priorSource: 17248492!

Object subclass: #Log
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Log category: 'MarsRover-WithHeading' stamp: 'Am 6/6/2021 17:26:16'!
Object subclass: #Log
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Object subclass: #StateWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #StateWindow category: 'MarsRover-WithHeading' stamp: 'Am 6/6/2021 17:26:21'!
Object subclass: #StateWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Object subclass: #Log
	instanceVariableNames: 'logger'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Log category: 'MarsRover-WithHeading' stamp: 'Am 6/6/2021 17:26:32'!
Object subclass: #Log
	instanceVariableNames: 'logger'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Log methodsFor: 'nil' stamp: 'Am 6/6/2021 17:26:46' overrides: 16896425!
initialize
	logger:= OrderedCollection  new.! !

Object subclass: #StateWindow
	instanceVariableNames: 'positionWindow headingWindow'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #StateWindow category: 'MarsRover-WithHeading' stamp: 'Am 6/6/2021 17:27:12'!
Object subclass: #StateWindow
	instanceVariableNames: 'positionWindow headingWindow'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Object subclass: #MarsRover
	instanceVariableNames: 'positionObservers headingLog position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'Am 6/6/2021 17:28:01'!
Object subclass: #MarsRover
	instanceVariableNames: 'positionObservers headingLog position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 17:28:17' prior: 50873352!
addLogToPosition: aLog 
	 positionObservers add: aLog.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'Am 6/6/2021 17:29:20'!
Object subclass: #MarsRover
	instanceVariableNames: 'positionObservers headingLog position head headingObservers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'initialization' stamp: 'Am 6/6/2021 17:29:17' prior: 50872621!
initializeAt: aPosition heading: aHeading

	position := aPosition.
	head := aHeading.
	positionObservers:= OrderedCollection new.
	headingObservers:= OrderedCollection new.! !

Object subclass: #MarsRover
	instanceVariableNames: 'positionObservers  position head headingObservers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'Am 6/6/2021 17:29:39'!
Object subclass: #MarsRover
	instanceVariableNames: 'positionObservers position head headingObservers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 17:29:54' prior: 50873256!
addLogToHeading: aLog 
	headingObservers add: aLog! !
!MarsRover methodsFor: 'moving' stamp: 'Am 6/6/2021 17:30:32' prior: 50873117!
moveForward
	
	head moveForward: self.! !
!MarsRover methodsFor: 'moving' stamp: 'Am 6/6/2021 17:30:58' prior: 50872676!
moveEast
	self positionSetTo: position + (1@0).
	! !
!MarsRover methodsFor: 'moving' stamp: 'Am 6/6/2021 17:31:27' prior: 50873493!
moveEast
	self positionSetTo: position + (1@0)! !
!MarsRover methodsFor: 'moving' stamp: 'Am 6/6/2021 17:31:56'!
positionSetTo: aPosition
	position := aPosition! !
!MarsRover methodsFor: 'moving' stamp: 'Am 6/6/2021 17:32:20' prior: 50873180!
moveBackward
	
	head moveBackward: self.! !
!MarsRover methodsFor: 'moving' stamp: 'Am 6/6/2021 17:32:42' prior: 50872684!
moveNorth
	
	self positionSetTo: position + (0@1)! !
!MarsRover methodsFor: 'moving' stamp: 'Am 6/6/2021 17:33:09' prior: 50872688!
moveSouth
	
	self positionSetTo: position + (0@-1)! !
!MarsRover methodsFor: 'moving' stamp: 'Am 6/6/2021 17:33:19' prior: 50872692!
moveWest
	
	self positionSetTo: position + (-1@0)! !
!MarsRover methodsFor: 'moving' stamp: 'Am 6/6/2021 17:34:54' prior: 50873502!
positionSetTo: aPosition
	position := aPosition.
	positionObservers do:[:anObserver| anObserver positionChangedTo: position].! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 17:38:48' prior: 50873356!
test17addLogRegistersOneMove

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'f'.
	
	self assert: (log console at: 1) equals: ( '0@2').! !
!Log methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 17:39:01'!
console
	^logger! !

!testRun: #MarsRoverTest #test17addLogRegistersOneMove stamp: 'Am 6/6/2021 17:39:10'!
ERROR!

!testRun: #MarsRoverTest #test17addLogRegistersOneMove stamp: 'Am 6/6/2021 17:39:10'!
ERROR!
!Log methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 17:39:21'!
positionChangedTo: aPoint 
	self shouldBeImplemented.! !
!Log methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 17:39:42' prior: 50873552!
positionChangedTo: aPoint 
	logger add: aPoint asString .! !

!testRun: #MarsRoverTest #test17addLogRegistersOneMove stamp: 'Am 6/6/2021 17:39:43'!
PASSED!

!testRun: #MarsRoverTest #test17addLogRegistersOneMove stamp: 'Am 6/6/2021 17:39:48'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 17:40:11' prior: 50873330!
test18addLogMoveForwardTwice

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= OrderedCollection new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'ff'.
	
	self assert: (log console) equals: (OrderedCollection with: '0@2' with: '-1@2').! !

!testRun: #MarsRoverTest #test18addLogMoveForwardTwice stamp: 'Am 6/6/2021 17:40:20'!
ERROR!

!testRun: #MarsRoverTest #test18addLogMoveForwardTwice stamp: 'Am 6/6/2021 17:40:20'!
ERROR!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 17:40:28' prior: 50873568!
test18addLogMoveForwardTwice

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'ff'.
	
	self assert: (log console) equals: (OrderedCollection with: '0@2' with: '-1@2').! !

!testRun: #MarsRoverTest #test18addLogMoveForwardTwice stamp: 'Am 6/6/2021 17:40:29'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'Am 6/6/2021 17:40:29'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'Am 6/6/2021 17:40:29'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'Am 6/6/2021 17:40:29'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'Am 6/6/2021 17:40:29'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'Am 6/6/2021 17:40:29'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'Am 6/6/2021 17:40:29'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'Am 6/6/2021 17:40:29'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'Am 6/6/2021 17:40:29'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'Am 6/6/2021 17:40:29'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'Am 6/6/2021 17:40:29'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'Am 6/6/2021 17:40:29'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'Am 6/6/2021 17:40:29'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'Am 6/6/2021 17:40:29'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'Am 6/6/2021 17:40:29'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'Am 6/6/2021 17:40:29'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'Am 6/6/2021 17:40:29'!
PASSED!

!testRun: #MarsRoverTest #test17addLogRegistersOneMove stamp: 'Am 6/6/2021 17:40:29'!
PASSED!

!testRun: #MarsRoverTest #test18addLogMoveForwardTwice stamp: 'Am 6/6/2021 17:40:29'!
PASSED!

!testRun: #MarsRoverTest #test19Log stamp: 'Am 6/6/2021 17:40:29'!
ERROR!

!testRun: #MarsRoverTest #test20Log stamp: 'Am 6/6/2021 17:40:29'!
ERROR!

!testRun: #MarsRoverTest #test21Log stamp: 'Am 6/6/2021 17:40:29'!
FAILURE!

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/6/2021 17:40:29'!
FAILURE!

!testRun: #MarsRoverTest #test18addLogMoveForwardTwice stamp: 'Am 6/6/2021 17:40:35'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 17:40:41' prior: 50873157!
test19Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'frfrfrf'.
	
	self assert: log equals: (OrderedCollection with: '0@2' with: '0@3' with: '1@3' with: '1@2' ).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 17:40:47' prior: 50873655!
test19Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'frfrfrf'.
	
	self assert: log console equals: (OrderedCollection with: '0@2' with: '0@3' with: '1@3' with: '1@2' ).! !

!testRun: #MarsRoverTest #test19Log stamp: 'Am 6/6/2021 17:40:51'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 17:41:03' prior: 50873206!
test20Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'brbrbrb'.
	
	self assert: log console equals: (OrderedCollection with: '2@2' with: '2@1' with: '1@1' with: '1@2' ).! !

!testRun: #MarsRoverTest #test20Log stamp: 'Am 6/6/2021 17:41:07'!
PASSED!

!testRun: #MarsRoverTest #test21Log stamp: 'Am 6/6/2021 17:43:37'!
FAILURE!

!testRun: #MarsRoverTest #test21Log stamp: 'Am 6/6/2021 17:43:37'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 17:43:45' prior: 50873228!
test21Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addLogToHeading: log.
	
	marsRover process: 'r'.
	
	self assert: log equals: (OrderedCollection with: 'Facing North' ).! !

!testRun: #MarsRoverTest #test21Log stamp: 'Am 6/6/2021 17:43:49'!
FAILURE!

!testRun: #MarsRoverTest #test21Log stamp: 'Am 6/6/2021 17:43:49'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 17:43:57' prior: 50873699!
test21Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addLogToHeading: log.
	
	marsRover process: 'r'.
	
	self assert: log console equals: (OrderedCollection with: 'Facing North' ).! !

!testRun: #MarsRoverTest #test21Log stamp: 'Am 6/6/2021 17:44:03'!
FAILURE!

!testRun: #MarsRoverTest #test21Log stamp: 'Am 6/6/2021 17:44:03'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'Am 6/6/2021 17:46:23' prior: 50873260!
rotateLeft
	
	head rotateLeft: self.
	
	headingObservers do: [:aHeadingLog| aHeadingLog headingChangeTo: head].
		
! !
!MarsRover methodsFor: 'heading' stamp: 'Am 6/6/2021 17:46:34' prior: 50873275!
rotateRight
	
	head rotateRight: self.
	
	headingObservers do: [:aHeadingLog| aHeadingLog headingChangeTo: head].! !
!MarsRover methodsFor: 'heading' stamp: 'Am 6/6/2021 17:47:50'!
changeHeadTo: aHeading
	
	head := aHeading! !
!MarsRover methodsFor: 'heading' stamp: 'Am 6/6/2021 17:48:07' prior: 50872626!
headEast
	
	self changeHeadTo: MarsRoverHeadingEast new! !
!MarsRover methodsFor: 'heading' stamp: 'Am 6/6/2021 17:48:14' prior: 50872630!
headNorth
	
	self changeHeadTo: MarsRoverHeadingNorth new! !
!MarsRover methodsFor: 'heading' stamp: 'Am 6/6/2021 17:48:19' prior: 50872634!
headSouth
	
	self changeHeadTo: MarsRoverHeadingSouth new! !
!MarsRover methodsFor: 'heading' stamp: 'Am 6/6/2021 17:48:25' prior: 50872638!
headWest
	
	self changeHeadTo: MarsRoverHeadingWest new! !
!MarsRover methodsFor: 'heading' stamp: 'Am 6/6/2021 17:48:35' prior: 50873729!
rotateLeft
	
	head rotateLeft: self.
	

		
! !
!MarsRover methodsFor: 'heading' stamp: 'Am 6/6/2021 17:48:48' prior: 50873736!
rotateRight
	
	head rotateRight: self.
	
! !
!MarsRover methodsFor: 'heading' stamp: 'Am 6/6/2021 17:48:59' prior: 50873742!
changeHeadTo: aHeading
	
	head := aHeading.
	headingObservers do: [:aHeadingLog| aHeadingLog headingChangeTo: head].! !

!testRun: #MarsRoverTest #test21Log stamp: 'Am 6/6/2021 17:49:28'!
ERROR!

!testRun: #MarsRoverTest #test21Log stamp: 'Am 6/6/2021 17:49:28'!
ERROR!
!Log methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 17:49:40'!
headingChangeTo: aMarsRoverHeadingNorth 
	self shouldBeImplemented.! !
!Log methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 17:50:01' prior: 50873785!
headingChangeTo: aMarsRoverHeadingNorth 
	logger add: 'Facing North'.! !

!testRun: #MarsRoverTest #test21Log stamp: 'Am 6/6/2021 17:50:04'!
PASSED!

!testRun: #MarsRoverTest #test21Log stamp: 'Am 6/6/2021 17:50:07'!
PASSED!

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/6/2021 17:50:16'!
ERROR!

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/6/2021 17:50:16'!
ERROR!

!testRun: #MarsRoverTest #test21Log stamp: 'Am 6/6/2021 17:50:27'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 17:50:35' prior: 50873217!
test22Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addLogToHeading: log.
	
	marsRover process: 'rr'.
	
	self assert: log equals: (OrderedCollection with: 'Facing North' with: 'Facing East').! !

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/6/2021 17:50:40'!
FAILURE!

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/6/2021 17:50:40'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 17:50:51' prior: 50873807!
test22Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addLogToHeading: log.
	
	marsRover process: 'rr'.
	
	self assert: log console equals: (OrderedCollection with: 'Facing North' with: 'Facing East').! !

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/6/2021 17:50:55'!
FAILURE!

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/6/2021 17:50:55'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 17:51:21' prior: 50873823!
test22Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addLogToHeading: log.
	
	marsRover process: 'rr'.
	
	self assert: log console equals: (OrderedCollection with: 'Facing North' with: 'Facing East').! !

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/6/2021 17:51:28'!
FAILURE!

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/6/2021 17:51:28'!
FAILURE!

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/6/2021 17:51:59'!
FAILURE!

OrderedCollection with: 'Facing North' with: 'Facing East'!

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/6/2021 17:53:18'!
FAILURE!

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/6/2021 17:53:27'!
FAILURE!

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/6/2021 17:53:27'!
FAILURE!
!Log methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 17:57:37' prior: 50873790!
headingChangeTo: aMarsRoverHeading
	logger add: aMarsRoverHeading facing.! !

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/6/2021 17:58:02'!
ERROR!

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/6/2021 17:58:02'!
ERROR!
!MarsRoverHeadingNorth methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 17:58:13'!
facing
	self shouldBeImplemented.! !
!MarsRoverHeadingNorth methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 17:58:26' prior: 50873877!
facing
	^'Facing North'! !

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/6/2021 17:58:28'!
ERROR!
!MarsRoverHeadingEast methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 17:58:35'!
facing
	self shouldBeImplemented.! !
!MarsRoverHeadingEast methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 17:58:49' prior: 50873888!
facing
	^'Facing East'.! !

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/6/2021 17:58:50'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 17:59:18' prior: 50873839!
test22Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addLogToHeading: log.
	
	marsRover process: 'rrrr'.
	
	self assert: log console equals: (OrderedCollection with: 'Facing North' with: 'Facing East' with: 'Facing South' with: 'Facing West').! !

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/6/2021 17:59:24'!
ERROR!

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/6/2021 17:59:24'!
ERROR!
!MarsRoverHeadingSouth methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 17:59:32'!
facing
	self shouldBeImplemented.! !
!MarsRoverHeadingSouth methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 17:59:47' prior: 50873916!
facing
	^'Facing Sout'! !

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/6/2021 17:59:48'!
ERROR!
!MarsRoverHeadingWest methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 18:00:19'!
facing
	self shouldBeImplemented.! !
!MarsRoverHeadingWest methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 18:00:26' prior: 50873927!
facing
	^'Facing West'! !

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/6/2021 18:00:28'!
FAILURE!
!MarsRoverHeadingSouth methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 18:00:36' prior: 50873921!
facing
	^'Facing South'! !

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/6/2021 18:00:47'!
PASSED!
!Behavior method!
at: aPosition heading: aCardinalPoint
	^ [
	([
	(self coverAll:
		{43 to: 46}) new ] valueCoveringAll:
		{48 to: 50})
		initializeAt:
			(aPosition
				cover: (66 to: 74)
				declaredAt: (5 to: 13))
		heading:
			([
			(MarsRoverHeading
				cover: (86 to: 101)
				declaredAt: (86 to: 101)) heading:
				(aCardinalPoint
					cover: (112 to: 125)
					declaredAt: (24 to: 37)) ] valueCoveringAll:
				{103 to: 110}) ] valueCoveringAll:
		{52 to: 64. 76 to: 83}.! !
!Behavior method!
heading: aCardinalPoint
	^ [
	([
	(self coverAll:
		{28 to: 31}) subclasses ] valueCoveringAll:
		{33 to: 42})
		detect: [ :aMarsRoverPositionClass |
			[
			(aMarsRoverPositionClass
				cover: (84 to: 106)
				declaredAt: (58 to: 80)) isFor:
				(aCardinalPoint
					cover: (115 to: 128)
					declaredAt: (10 to: 23)) ] valueCoveringAll:
				{108 to: 113} ]
		ifFound: [ :aMarsRoverPositionClass |
			[
			(aMarsRoverPositionClass
				cover: (172 to: 194)
				declaredAt: (146 to: 168)) new ] valueCoveringAll:
				{196 to: 198} ]
		ifNone: [
			[
			(self coverAll:
				{214 to: 217}) error:
				([
				(MarsRover
					cover: (226 to: 234)
					declaredAt: (226 to: 234)) invalidCardinalPointErrorDescription ] valueCoveringAll:
					{236 to: 271}) ] valueCoveringAll:
				{219 to: 224} ]] valueCoveringAll:
		{47 to: 53. 134 to: 141. 204 to: 210}.! !
!Behavior method!
isFor: aCardinalPoint
	^ [
	([
	(self coverAll:
		{26 to: 29}) cardinalPoint ] valueCoveringAll:
		{31 to: 43}) =
		(aCardinalPoint
			cover: (47 to: 60)
			declaredAt: (8 to: 21)) ] valueCoveringAll:
		{45 to: 45}.! !
!Behavior method!
cardinalPoint
	^ #East coverAll:
		{18 to: 22}.! !
!Behavior method!
cardinalPoint
	^ #North coverAll:
		{18 to: 23}.! !
!Behavior method!
initializeAt: aPosition heading: aHeading
	(position _ aPosition
		cover: (57 to: 65)
		declaredAt: (15 to: 23))
		cover: (45 to: 52)
		declaredAt: (45 to: 52).
	(head _ aHeading
		cover: (77 to: 84)
		declaredAt: (34 to: 41))
		cover: (69 to: 72)
		declaredAt: (69 to: 72).
	(positionObservers _ [
	(OrderedCollection
		cover: (108 to: 124)
		declaredAt: (108 to: 124)) new ] valueCoveringAll:
		{126 to: 128})
		cover: (88 to: 104)
		declaredAt: (88 to: 104).
	(headingObservers _ [
	(OrderedCollection
		cover: (151 to: 167)
		declaredAt: (108 to: 124)) new ] valueCoveringAll:
		{169 to: 171})
		cover: (132 to: 147)
		declaredAt: (132 to: 147).! !
!Behavior method!
process: aSequenceOfCommands
	[
	(aSequenceOfCommands
		cover: (32 to: 50)
		declaredAt: (10 to: 28)) do: [ :aCommand |
		[
		(self coverAll:
			{69 to: 72}) processCommand:
			(aCommand
				cover: (90 to: 97)
				declaredAt: (58 to: 65)) ] valueCoveringAll:
			{74 to: 88} ]] valueCoveringAll:
		{52 to: 54}.! !
!Behavior method!
isAt: aPosition heading: aCardinalPoint
	^ [
	([
	(position
		cover: (44 to: 51)
		declaredAt: (44 to: 51)) =
		(aPosition
			cover: (55 to: 63)
			declaredAt: (7 to: 15)) ] valueCoveringAll:
		{53 to: 53}) and: [
		[
		(head
			cover: (72 to: 75)
			declaredAt: (72 to: 75)) isHeading:
			(aCardinalPoint
				cover: (88 to: 101)
				declaredAt: (26 to: 39)) ] valueCoveringAll:
			{77 to: 86} ]] valueCoveringAll:
		{65 to: 68}.! !
!Behavior method!
isHeading: aCardinalPoint
	^ [
	([
	(self coverAll:
		{30 to: 33}) class ] valueCoveringAll:
		{35 to: 39}) isFor:
		(aCardinalPoint
			cover: (48 to: 61)
			declaredAt: (12 to: 25)) ] valueCoveringAll:
		{41 to: 46}.! !

!testRun: #MarsRoverTest #test01 stamp: 'Am 6/6/2021 18:01:35'!
PASSED!
!Behavior method!
processCommand: aCommand
	[
	([
	(self coverAll:
		{29 to: 32}) isForwardCommand:
		(aCommand
			cover: (52 to: 59)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{34 to: 50}) ifTrue: [ ^ [
		(self coverAll:
			{74 to: 77}) moveForward ] valueCoveringAll:
			{79 to: 89} ]] valueCoveringAll:
		{62 to: 68}.
	[
	([
	(self coverAll:
		{96 to: 99}) isBackwardCommand:
		(aCommand
			cover: (120 to: 127)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{101 to: 118}) ifTrue: [ ^ [
		(self coverAll:
			{142 to: 145}) moveBackward ] valueCoveringAll:
			{147 to: 158} ]] valueCoveringAll:
		{130 to: 136}.
	[
	([
	(self coverAll:
		{165 to: 168}) isRotateRightCommand:
		(aCommand
			cover: (192 to: 199)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{170 to: 190}) ifTrue: [ ^ [
		(self coverAll:
			{214 to: 217}) rotateRight ] valueCoveringAll:
			{219 to: 229} ]] valueCoveringAll:
		{202 to: 208}.
	[
	([
	(self coverAll:
		{236 to: 239}) isRotateLeftCommand:
		(aCommand
			cover: (262 to: 269)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{241 to: 260}) ifTrue: [ ^ [
		(self coverAll:
			{284 to: 287}) rotateLeft ] valueCoveringAll:
			{289 to: 298} ]] valueCoveringAll:
		{272 to: 278}.
	[
	(self coverAll:
		{305 to: 308}) signalInvalidCommand ] valueCoveringAll:
		{310 to: 329}.! !
!Behavior method!
isForwardCommand: aCommand
	^ [
	(aCommand
		cover: (31 to: 38)
		declaredAt: (19 to: 26)) =
		($f coverAll:
			{42 to: 43}) ] valueCoveringAll:
		{40 to: 40}.! !
!Behavior method!
moveForward
	[
	(head
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) moveForward:
		(self coverAll:
			{34 to: 37}) ] valueCoveringAll:
		{21 to: 32}.! !
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveNorth ] valueCoveringAll:
		{40 to: 48}.! !
!Behavior method!
moveNorth
	[
	(self coverAll:
		{14 to: 17}) positionSetTo:
		([
		(position
			cover: (34 to: 41)
			declaredAt: (34 to: 41)) +
			([
			(0 coverAll:
				{46 to: 46}) @
				(1 coverAll:
					{48 to: 48}) ] valueCoveringAll:
				{47 to: 47}) ] valueCoveringAll:
			{43 to: 43}) ] valueCoveringAll:
		{19 to: 32}.! !
!Behavior method!
positionSetTo: aPosition
	(position _ aPosition
		cover: (39 to: 47)
		declaredAt: (16 to: 24))
		cover: (27 to: 34)
		declaredAt: (27 to: 34).
	[
	(positionObservers
		cover: (51 to: 67)
		declaredAt: (51 to: 67)) do: [ :anObserver |
		[
		(anObserver
			cover: (86 to: 95)
			declaredAt: (74 to: 83)) positionChangedTo:
			(position
				cover: (116 to: 123)
				declaredAt: (27 to: 34)) ] valueCoveringAll:
			{97 to: 114} ]] valueCoveringAll:
		{69 to: 71}.! !

!testRun: #MarsRoverTest #test02 stamp: 'Am 6/6/2021 18:01:35'!
PASSED!
!Behavior method!
isBackwardCommand: aCommand
	^ [
	(aCommand
		cover: (32 to: 39)
		declaredAt: (20 to: 27)) =
		($b coverAll:
			{43 to: 44}) ] valueCoveringAll:
		{41 to: 41}.! !
!Behavior method!
moveBackward
	[
	(head
		cover: (17 to: 20)
		declaredAt: (17 to: 20)) moveBackward:
		(self coverAll:
			{36 to: 39}) ] valueCoveringAll:
		{22 to: 34}.! !
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (30 to: 39)
		declaredAt: (15 to: 24)) moveSouth ] valueCoveringAll:
		{41 to: 49}.! !
!Behavior method!
moveSouth
	[
	(self coverAll:
		{14 to: 17}) positionSetTo:
		([
		(position
			cover: (34 to: 41)
			declaredAt: (34 to: 41)) +
			([
			(0 coverAll:
				{46 to: 46}) @
				(-1 coverAll:
					{48 to: 49}) ] valueCoveringAll:
				{47 to: 47}) ] valueCoveringAll:
			{43 to: 43}) ] valueCoveringAll:
		{19 to: 32}.! !

!testRun: #MarsRoverTest #test03 stamp: 'Am 6/6/2021 18:01:35'!
PASSED!
!Behavior method!
isRotateRightCommand: aCommand
	^ [
	(aCommand
		cover: (35 to: 42)
		declaredAt: (23 to: 30)) =
		($r coverAll:
			{46 to: 47}) ] valueCoveringAll:
		{44 to: 44}.! !
!Behavior method!
rotateRight
	[
	(head
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) rotateRight:
		(self coverAll:
			{34 to: 37}) ] valueCoveringAll:
		{21 to: 32}.! !
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headEast ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
headEast
	[
	(self coverAll:
		{13 to: 16}) changeHeadTo:
		([
		(MarsRoverHeadingEast
			cover: (32 to: 51)
			declaredAt: (32 to: 51)) new ] valueCoveringAll:
			{53 to: 55}) ] valueCoveringAll:
		{18 to: 30}.! !
!Behavior method!
changeHeadTo: aHeading
	(head _ aHeading
		cover: (35 to: 42)
		declaredAt: (15 to: 22))
		cover: (27 to: 30)
		declaredAt: (27 to: 30).
	[
	(headingObservers
		cover: (46 to: 61)
		declaredAt: (46 to: 61)) do: [ :aHeadingLog |
		[
		(aHeadingLog
			cover: (82 to: 92)
			declaredAt: (69 to: 79)) headingChangeTo:
			(head
				cover: (111 to: 114)
				declaredAt: (27 to: 30)) ] valueCoveringAll:
			{94 to: 109} ]] valueCoveringAll:
		{63 to: 65}.! !

!testRun: #MarsRoverTest #test04 stamp: 'Am 6/6/2021 18:01:35'!
PASSED!
!Behavior method!
isRotateLeftCommand: aCommand
	^ [
	(aCommand
		cover: (34 to: 41)
		declaredAt: (22 to: 29)) =
		($l coverAll:
			{45 to: 46}) ] valueCoveringAll:
		{43 to: 43}.! !
!Behavior method!
rotateLeft
	[
	(head
		cover: (15 to: 18)
		declaredAt: (15 to: 18)) rotateLeft:
		(self coverAll:
			{32 to: 35}) ] valueCoveringAll:
		{20 to: 30}.! !
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headWest ] valueCoveringAll:
		{39 to: 46}.! !
!Behavior method!
headWest
	[
	(self coverAll:
		{13 to: 16}) changeHeadTo:
		([
		(MarsRoverHeadingWest
			cover: (32 to: 51)
			declaredAt: (32 to: 51)) new ] valueCoveringAll:
			{53 to: 55}) ] valueCoveringAll:
		{18 to: 30}.! !
!Behavior method!
cardinalPoint
	^ #West coverAll:
		{18 to: 22}.! !

!testRun: #MarsRoverTest #test05 stamp: 'Am 6/6/2021 18:01:35'!
PASSED!
!Behavior method!
signalInvalidCommand
	[
	(self coverAll:
		{25 to: 28}) error:
		([
		(self coverAll:
			{37 to: 40}) invalidCommandErrorDescription ] valueCoveringAll:
			{42 to: 71}) ] valueCoveringAll:
		{30 to: 35}.! !
!Behavior method!
invalidCommandErrorDescription
	^ 'Invalid command' coverAll:
		{36 to: 52}.! !

!testRun: #MarsRoverTest #test06 stamp: 'Am 6/6/2021 18:01:35'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'Am 6/6/2021 18:01:35'!
PASSED!
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveEast ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
moveEast
	[
	(self coverAll:
		{11 to: 14}) positionSetTo:
		([
		(position
			cover: (31 to: 38)
			declaredAt: (31 to: 38)) +
			([
			(1 coverAll:
				{43 to: 43}) @
				(0 coverAll:
					{45 to: 45}) ] valueCoveringAll:
				{44 to: 44}) ] valueCoveringAll:
			{40 to: 40}) ] valueCoveringAll:
		{16 to: 29}.! !

!testRun: #MarsRoverTest #test08 stamp: 'Am 6/6/2021 18:01:35'!
PASSED!
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (30 to: 39)
		declaredAt: (15 to: 24)) moveWest ] valueCoveringAll:
		{41 to: 48}.! !
!Behavior method!
moveWest
	[
	(self coverAll:
		{13 to: 16}) positionSetTo:
		([
		(position
			cover: (33 to: 40)
			declaredAt: (33 to: 40)) +
			([
			(-1 coverAll:
				{45 to: 46}) @
				(0 coverAll:
					{48 to: 48}) ] valueCoveringAll:
				{47 to: 47}) ] valueCoveringAll:
			{42 to: 42}) ] valueCoveringAll:
		{18 to: 31}.! !

!testRun: #MarsRoverTest #test09 stamp: 'Am 6/6/2021 18:01:35'!
PASSED!
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headSouth ] valueCoveringAll:
		{40 to: 48}.! !
!Behavior method!
headSouth
	[
	(self coverAll:
		{14 to: 17}) changeHeadTo:
		([
		(MarsRoverHeadingSouth
			cover: (33 to: 53)
			declaredAt: (33 to: 53)) new ] valueCoveringAll:
			{55 to: 57}) ] valueCoveringAll:
		{19 to: 31}.! !
!Behavior method!
cardinalPoint
	^ #South coverAll:
		{18 to: 23}.! !

!testRun: #MarsRoverTest #test10 stamp: 'Am 6/6/2021 18:01:35'!
PASSED!
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headNorth ] valueCoveringAll:
		{39 to: 47}.! !
!Behavior method!
headNorth
	[
	(self coverAll:
		{14 to: 17}) changeHeadTo:
		([
		(MarsRoverHeadingNorth
			cover: (33 to: 53)
			declaredAt: (33 to: 53)) new ] valueCoveringAll:
			{55 to: 57}) ] valueCoveringAll:
		{19 to: 31}.! !

!testRun: #MarsRoverTest #test11 stamp: 'Am 6/6/2021 18:01:35'!
PASSED!
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveSouth ] valueCoveringAll:
		{40 to: 48}.! !
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (30 to: 39)
		declaredAt: (15 to: 24)) moveNorth ] valueCoveringAll:
		{41 to: 49}.! !
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headWest ] valueCoveringAll:
		{40 to: 47}.! !

!testRun: #MarsRoverTest #test12 stamp: 'Am 6/6/2021 18:01:35'!
PASSED!
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headEast ] valueCoveringAll:
		{39 to: 46}.! !

!testRun: #MarsRoverTest #test13 stamp: 'Am 6/6/2021 18:01:35'!
PASSED!
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveWest ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (15 to: 24)) moveEast ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headNorth ] valueCoveringAll:
		{40 to: 48}.! !

!testRun: #MarsRoverTest #test14 stamp: 'Am 6/6/2021 18:01:35'!
PASSED!
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headSouth ] valueCoveringAll:
		{39 to: 47}.! !

!testRun: #MarsRoverTest #test15 stamp: 'Am 6/6/2021 18:01:35'!
PASSED!
!Behavior method!
invalidCardinalPointErrorDescription
	^ 'Invalid cardinal point' coverAll:
		{42 to: 65}.! !

!testRun: #MarsRoverTest #test16 stamp: 'Am 6/6/2021 18:01:35'!
PASSED!
!Behavior method!
initialize
	(logger _ [
	(OrderedCollection
		cover: (22 to: 38)
		declaredAt: (22 to: 38)) new ] valueCoveringAll:
		{41 to: 43})
		cover: (13 to: 18)
		declaredAt: (13 to: 18).! !
!Behavior method!
addLogToPosition: aLog
	[
	(positionObservers
		cover: (27 to: 43)
		declaredAt: (27 to: 43)) add:
		(aLog
			cover: (50 to: 53)
			declaredAt: (19 to: 22)) ] valueCoveringAll:
		{45 to: 48}.! !
!Behavior method!
positionChangedTo: aPoint
	[
	(logger
		cover: (29 to: 34)
		declaredAt: (29 to: 34)) add:
		([
		(aPoint
			cover: (41 to: 46)
			declaredAt: (20 to: 25)) asString ] valueCoveringAll:
			{48 to: 55}) ] valueCoveringAll:
		{36 to: 39}.! !
!Behavior method!
console
	^ logger
		cover: (11 to: 16)
		declaredAt: (11 to: 16).! !

!testRun: #MarsRoverTest #test17addLogRegistersOneMove stamp: 'Am 6/6/2021 18:01:35'!
PASSED!

!testRun: #MarsRoverTest #test18addLogMoveForwardTwice stamp: 'Am 6/6/2021 18:01:35'!
PASSED!

!testRun: #MarsRoverTest #test19Log stamp: 'Am 6/6/2021 18:01:35'!
PASSED!

!testRun: #MarsRoverTest #test20Log stamp: 'Am 6/6/2021 18:01:35'!
PASSED!
!Behavior method!
addLogToHeading: aLog
	[
	(headingObservers
		cover: (25 to: 40)
		declaredAt: (25 to: 40)) add:
		(aLog
			cover: (47 to: 50)
			declaredAt: (18 to: 21)) ] valueCoveringAll:
		{42 to: 45}.! !
!Behavior method!
headingChangeTo: aMarsRoverHeading
	[
	(logger
		cover: (37 to: 42)
		declaredAt: (37 to: 42)) add:
		([
		(aMarsRoverHeading
			cover: (49 to: 65)
			declaredAt: (18 to: 34)) facing ] valueCoveringAll:
			{67 to: 72}) ] valueCoveringAll:
		{44 to: 47}.! !
!Behavior method!
facing
	^ 'Facing North' coverAll:
		{10 to: 23}.! !

!testRun: #MarsRoverTest #test21Log stamp: 'Am 6/6/2021 18:01:35'!
PASSED!
!Behavior method!
facing
	^ 'Facing East' coverAll:
		{10 to: 22}.! !
!Behavior method!
facing
	^ 'Facing South' coverAll:
		{10 to: 23}.! !
!Behavior method!
facing
	^ 'Facing West' coverAll:
		{10 to: 22}.! !

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/6/2021 18:01:35'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 18:03:27' prior: 50873899!
test22Log

	| marsRover stateWindow|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	stateWindow:= StateWindow new.
	
	marsRover addLogToHeading: stateWindow.
	
	marsRover process: 'f'.
	
	self assert: stateWindow position equals: ('0@2').! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 17:59:18' prior: 50874462!
test22Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addLogToHeading: log.
	
	marsRover process: 'rrrr'.
	
	self assert: log console equals: (OrderedCollection with: 'Facing North' with: 'Facing East' with: 'Facing South' with: 'Facing West').! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 18:04:12'!
test23Window

	| marsRover stateWindow|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	stateWindow:= StateWindow new.
	
	marsRover addLogToHeading: stateWindow.
	
	marsRover process: 'f'.
	
	self assert: stateWindow position equals: ('0@2').! !

!testRun: #MarsRoverTest #test23Window stamp: 'Am 6/6/2021 18:04:27'!
ERROR!

!testRun: #MarsRoverTest #test23Window stamp: 'Am 6/6/2021 18:04:27'!
ERROR!
!StateWindow methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 18:04:42'!
position
	self shouldBeImplemented.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 18:04:49' prior: 50874485!
test23Window

	| marsRover stateWindow|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	stateWindow:= StateWindow new.
	
	marsRover addLogToHeading: stateWindow.
	
	marsRover process: 'f'.
	
	self assert: stateWindow positionWindow equals: ('0@2').! !

Object subclass: #StateWindow
	instanceVariableNames: 'position heading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #StateWindow category: 'MarsRover-WithHeading' stamp: 'Am 6/6/2021 18:05:11'!
Object subclass: #StateWindow
	instanceVariableNames: 'position heading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!testRun: #MarsRoverTest #test23Window stamp: 'Am 6/6/2021 18:05:24'!
ERROR!

!testRun: #MarsRoverTest #test23Window stamp: 'Am 6/6/2021 18:05:24'!
ERROR!
!StateWindow methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 18:05:31'!
positionWindow
	self shouldBeImplemented.! !
!StateWindow methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 18:05:42' prior: 50874534!
positionWindow
	^position asString.! !

!testRun: #MarsRoverTest #test23Window stamp: 'Am 6/6/2021 18:05:47'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 18:07:02' prior: 50874505!
test23Window

	| marsRover stateWindow|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	stateWindow:= StateWindow new.
	
	marsRover addWindowToHeading: stateWindow.
	
	marsRover process: 'f'.
	
	self assert: stateWindow positionWindow equals: ('0@2').! !

!testRun: #MarsRoverTest #test23Window stamp: 'Am 6/6/2021 18:07:09'!
ERROR!

!testRun: #MarsRoverTest #test23Window stamp: 'Am 6/6/2021 18:07:09'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 18:07:17'!
addWindowToHeading: aStateWindow 
	self shouldBeImplemented.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 18:07:36' prior: 50874546!
test23Window

	| marsRover stateWindow|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	stateWindow:= StateWindow new.
	
	marsRover addWindowToPosition: stateWindow.
	
	marsRover process: 'f'.
	
	self assert: stateWindow positionWindow equals: ('0@2').! !

!testRun: #MarsRoverTest #test23Window stamp: 'Am 6/6/2021 18:07:41'!
ERROR!

!testRun: #MarsRoverTest #test23Window stamp: 'Am 6/6/2021 18:07:41'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 18:07:48'!
addWindowToPosition: aStateWindow 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 18:08:05' prior: 50874583!
addWindowToPosition: aStateWindow 
 positionObservers add: aStateWindow! !

!testRun: #MarsRoverTest #test23Window stamp: 'Am 6/6/2021 18:08:09'!
ERROR!
!StateWindow methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 18:08:20'!
positionChangedTo: aPoint 
	self shouldBeImplemented.! !
!StateWindow methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 18:08:50' prior: 50874596!
positionChangedTo: aMarsRoverPosition 
	position := aMarsRoverPosition asString.! !

!testRun: #MarsRoverTest #test23Window stamp: 'Am 6/6/2021 18:08:52'!
PASSED!

!testRun: #MarsRoverTest #test23Window stamp: 'Am 6/6/2021 18:08:57'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 18:09:13' prior: 50874567!
test23Window

	| marsRover stateWindow|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	stateWindow:= StateWindow new.
	
	marsRover addWindowToPosition: stateWindow.
	
	marsRover process: 'b'.
	
	self assert: stateWindow positionWindow equals: ('2@2').! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 18:09:18'!
test24Window

	| marsRover stateWindow|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	stateWindow:= StateWindow new.
	
	marsRover addWindowToPosition: stateWindow.
	
	marsRover process: 'b'.
	
	self assert: stateWindow positionWindow equals: ('2@2').! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 18:09:23' prior: 50874612!
test23Window

	| marsRover stateWindow|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	stateWindow:= StateWindow new.
	
	marsRover addWindowToPosition: stateWindow.
	
	marsRover process: 'b'.
	
	self assert: stateWindow positionWindow equals: ('1@2').! !

!testRun: #MarsRoverTest #test23Window stamp: 'Am 6/6/2021 18:09:30'!
FAILURE!

!testRun: #MarsRoverTest #test23Window stamp: 'Am 6/6/2021 18:09:30'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 18:09:39' prior: 50874634!
test23Window

	| marsRover stateWindow|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	stateWindow:= StateWindow new.
	
	marsRover addWindowToPosition: stateWindow.
	
	marsRover process: 'f'.
	
	self assert: stateWindow positionWindow equals: ('1@2').! !

!testRun: #MarsRoverTest #test23Window stamp: 'Am 6/6/2021 18:09:42'!
FAILURE!

!testRun: #MarsRoverTest #test23Window stamp: 'Am 6/6/2021 18:09:42'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 18:09:51' prior: 50874650!
test23Window

	| marsRover stateWindow|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	stateWindow:= StateWindow new.
	
	marsRover addWindowToPosition: stateWindow.
	
	marsRover process: 'f'.
	
	self assert: stateWindow positionWindow equals: ('0@2').! !

!testRun: #MarsRoverTest #test23Window stamp: 'Am 6/6/2021 18:10:00'!
PASSED!

!testRun: #MarsRoverTest #test24Window stamp: 'Am 6/6/2021 18:10:06'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 18:10:24' prior: 50874623!
test24Window

	| marsRover stateWindow|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	stateWindow:= StateWindow new.
	
	marsRover addWindowToHeading: stateWindow.
	
	marsRover process: 'r'.
	
	self assert: stateWindow positionWindow equals: ('Facing North').! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 18:09:18' prior: 50874682!
test24Window

	| marsRover stateWindow|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	stateWindow:= StateWindow new.
	
	marsRover addWindowToPosition: stateWindow.
	
	marsRover process: 'b'.
	
	self assert: stateWindow positionWindow equals: ('2@2').! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 18:10:55'!
test25Window

	| marsRover stateWindow|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	stateWindow:= StateWindow new.
	
	marsRover addWindowToHeading: stateWindow.
	
	marsRover process: 'r'.
	
	self assert: stateWindow positionWindow equals: ('Facing North').! !

!testRun: #MarsRoverTest #test25Window stamp: 'Am 6/6/2021 18:11:06'!
ERROR!

!testRun: #MarsRoverTest #test25Window stamp: 'Am 6/6/2021 18:11:06'!
ERROR!

!testRun: #MarsRoverTest #test25Window stamp: 'Am 6/6/2021 18:11:17'!
ERROR!

!testRun: #MarsRoverTest #test25Window stamp: 'Am 6/6/2021 18:11:17'!
ERROR!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 18:11:56' prior: 50874704!
test25Window

	| marsRover stateWindow|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	stateWindow:= StateWindow new.
	
	marsRover addWindowToHeading: stateWindow.
	
	marsRover process: 'r'.
	
	self assert: stateWindow headingWindow equals: ('Facing North').! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 18:12:18' prior: 50874562!
addWindowToHeading: aStateWindow 
	headingObservers add: aStateWindow.! !

!testRun: #MarsRoverTest #test25Window stamp: 'Am 6/6/2021 18:12:31'!
ERROR!

!testRun: #MarsRoverTest #test25Window stamp: 'Am 6/6/2021 18:12:31'!
ERROR!
!StateWindow methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 18:12:39'!
headingChangeTo: aMarsRoverHeadingNorth 
	self shouldBeImplemented.! !
!StateWindow methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 18:13:08' prior: 50874747!
headingChangeTo: aMarsRoverHeading
	heading := aMarsRoverHeading facing.! !

!testRun: #MarsRoverTest #test25Window stamp: 'Am 6/6/2021 18:13:08'!
ERROR!
!StateWindow methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 18:13:19'!
headingWindow
	self shouldBeImplemented.! !
!StateWindow methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 18:13:31' prior: 50874761!
headingWindow
	^heading! !

!testRun: #MarsRoverTest #test25Window stamp: 'Am 6/6/2021 18:13:34'!
PASSED!

!testRun: #MarsRoverTest #test25Window stamp: 'Am 6/6/2021 18:13:38'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'Am 6/6/2021 18:13:38'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'Am 6/6/2021 18:13:38'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'Am 6/6/2021 18:13:38'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'Am 6/6/2021 18:13:38'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'Am 6/6/2021 18:13:38'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'Am 6/6/2021 18:13:38'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'Am 6/6/2021 18:13:38'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'Am 6/6/2021 18:13:38'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'Am 6/6/2021 18:13:38'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'Am 6/6/2021 18:13:38'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'Am 6/6/2021 18:13:38'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'Am 6/6/2021 18:13:38'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'Am 6/6/2021 18:13:38'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'Am 6/6/2021 18:13:38'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'Am 6/6/2021 18:13:38'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'Am 6/6/2021 18:13:38'!
PASSED!

!testRun: #MarsRoverTest #test17addLogRegistersOneMove stamp: 'Am 6/6/2021 18:13:38'!
PASSED!

!testRun: #MarsRoverTest #test18addLogMoveForwardTwice stamp: 'Am 6/6/2021 18:13:38'!
PASSED!

!testRun: #MarsRoverTest #test19Log stamp: 'Am 6/6/2021 18:13:38'!
PASSED!

!testRun: #MarsRoverTest #test20Log stamp: 'Am 6/6/2021 18:13:38'!
PASSED!

!testRun: #MarsRoverTest #test21Log stamp: 'Am 6/6/2021 18:13:38'!
PASSED!

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/6/2021 18:13:38'!
PASSED!

!testRun: #MarsRoverTest #test23Window stamp: 'Am 6/6/2021 18:13:38'!
PASSED!

!testRun: #MarsRoverTest #test24Window stamp: 'Am 6/6/2021 18:13:38'!
PASSED!

!testRun: #MarsRoverTest #test25Window stamp: 'Am 6/6/2021 18:13:38'!
PASSED!
!Log methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 18:29:23' prior: 50873867!
headingChangeTo: aMarsRoverHeading
	"logger add: aMarsRoverHeading facing."
	"aMarsRoverHeading notifyHeading: self"! !
!MarsRover methodsFor: 'heading' stamp: 'Am 6/6/2021 18:30:50' prior: 50873774!
changeHeadTo: aHeading
	
	head := aHeading.
	headingObservers do: [:aHeadingLog|  head notifyChangeTo: aHeadingLog].! !
!MarsRoverHeading methodsFor: 'nil' stamp: 'Am 6/6/2021 18:32:37'!
notifyChangeTo: aHeadingObserver
	self subclassResponsibility .! !
!MarsRoverHeadingEast methodsFor: 'nil' stamp: 'Am 6/6/2021 18:33:12' overrides: 50874847!
notifyChangeTo: aHeadingObserver
	aHeadingObserver headingChangedToEast.! !
!MarsRoverHeadingNorth methodsFor: 'nil' stamp: 'Am 6/6/2021 18:34:06' overrides: 50874847!
notifyChangeTo: aHeadingObserver
	aHeadingObserver headingChangedToNorth.! !
!MarsRoverHeadingSouth methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 18:34:38' overrides: 50874847!
notifyChangeTo: aHeadingObserver
	aHeadingObserver headingChangedToSouth.! !
!MarsRoverHeadingWest methodsFor: 'nil' stamp: 'Am 6/6/2021 18:34:59' overrides: 50874847!
notifyChangeTo: aHeadingObserver
	aHeadingObserver headingChangedToWest.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 18:36:22'!
test26Window

	| marsRover stateWindow|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	stateWindow:= StateWindow new.
	
	marsRover addWindowToHeading: stateWindow.
	
	marsRover process: 'rrrr'.
	
	self assert: stateWindow headingWindow equals: ('Facing West').! !

!testRun: #MarsRoverTest #test26Window stamp: 'Am 6/6/2021 18:36:28'!
ERROR!

!testRun: #MarsRoverTest #test26Window stamp: 'Am 6/6/2021 18:36:28'!
ERROR!
!StateWindow methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 18:36:38'!
headingChangedToNorth
	self shouldBeImplemented.! !
!StateWindow methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 18:37:03' prior: 50874891!
headingChangedToNorth
	heading:= 'Facing North'! !

!testRun: #MarsRoverTest #test26Window stamp: 'Am 6/6/2021 18:37:06'!
ERROR!
!StateWindow methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 18:37:12'!
headingChangedToEast
	self shouldBeImplemented.! !
!StateWindow methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 18:37:18' prior: 50874903!
headingChangedToEast
heading:= 'Facing North'! !
!StateWindow methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 18:37:21' prior: 50874908!
headingChangedToEast
heading:= 'Facing East'! !

!testRun: #MarsRoverTest #test26Window stamp: 'Am 6/6/2021 18:37:26'!
ERROR!
!StateWindow methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 18:37:31'!
headingChangedToSouth
	self shouldBeImplemented.! !
!StateWindow methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 18:37:38' prior: 50874920!
headingChangedToSouth
heading:= 'Facing South'! !

!testRun: #MarsRoverTest #test26Window stamp: 'Am 6/6/2021 18:37:40'!
ERROR!
!StateWindow methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 18:37:47'!
headingChangedToWest
	self shouldBeImplemented.! !
!StateWindow methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 18:37:55' prior: 50874932!
headingChangedToWest
heading:= 'Facing West'! !

!testRun: #MarsRoverTest #test26Window stamp: 'Am 6/6/2021 18:37:56'!
PASSED!

!testRun: #MarsRoverTest #test26Window stamp: 'Am 6/6/2021 18:38:06'!
PASSED!

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/6/2021 18:38:21'!
ERROR!

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/6/2021 18:38:21'!
ERROR!
!Log methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 18:38:28'!
headingChangedToNorth
	self shouldBeImplemented.! !
!Log methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 18:38:46' prior: 50874951!
headingChangedToNorth
logger add: 'Facing North'! !

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/6/2021 18:38:47'!
ERROR!
!Log methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 18:38:52'!
headingChangedToEast
	self shouldBeImplemented.! !
!Log methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 18:39:00' prior: 50874963!
headingChangedToEast
logger add: 'Facing East'! !

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/6/2021 18:39:01'!
ERROR!
!Log methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 18:39:08'!
headingChangedToSouth
	self shouldBeImplemented.! !
!Log methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 18:39:17' prior: 50874975!
headingChangedToSouth
logger add: 'Facing South'! !

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/6/2021 18:39:19'!
ERROR!
!Log methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 18:39:26'!
headingChangedToWest
	self shouldBeImplemented.! !
!Log methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 18:39:31' prior: 50874987!
headingChangedToWest
logger add: 'Facing West'! !

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/6/2021 18:39:33'!
PASSED!

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/6/2021 18:39:39'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'Am 6/6/2021 18:39:39'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'Am 6/6/2021 18:39:39'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'Am 6/6/2021 18:39:39'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'Am 6/6/2021 18:39:39'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'Am 6/6/2021 18:39:39'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'Am 6/6/2021 18:39:39'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'Am 6/6/2021 18:39:39'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'Am 6/6/2021 18:39:39'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'Am 6/6/2021 18:39:39'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'Am 6/6/2021 18:39:39'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'Am 6/6/2021 18:39:39'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'Am 6/6/2021 18:39:39'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'Am 6/6/2021 18:39:39'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'Am 6/6/2021 18:39:39'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'Am 6/6/2021 18:39:39'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'Am 6/6/2021 18:39:39'!
PASSED!

!testRun: #MarsRoverTest #test17addLogRegistersOneMove stamp: 'Am 6/6/2021 18:39:39'!
PASSED!

!testRun: #MarsRoverTest #test18addLogMoveForwardTwice stamp: 'Am 6/6/2021 18:39:39'!
PASSED!

!testRun: #MarsRoverTest #test19Log stamp: 'Am 6/6/2021 18:39:39'!
PASSED!

!testRun: #MarsRoverTest #test20Log stamp: 'Am 6/6/2021 18:39:39'!
PASSED!

!testRun: #MarsRoverTest #test21Log stamp: 'Am 6/6/2021 18:39:39'!
PASSED!

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/6/2021 18:39:39'!
PASSED!

!testRun: #MarsRoverTest #test23Window stamp: 'Am 6/6/2021 18:39:39'!
PASSED!

!testRun: #MarsRoverTest #test24Window stamp: 'Am 6/6/2021 18:39:39'!
PASSED!

!testRun: #MarsRoverTest #test25Window stamp: 'Am 6/6/2021 18:39:39'!
PASSED!

!testRun: #MarsRoverTest #test26Window stamp: 'Am 6/6/2021 18:39:39'!
PASSED!

!methodRemoval: Log #headingChangeTo: stamp: 'Am 6/6/2021 18:40:02'!
headingChangeTo: aMarsRoverHeading
	"logger add: aMarsRoverHeading facing."
	"aMarsRoverHeading notifyHeading: self"!

!methodRemoval: StateWindow #headingChangeTo: stamp: 'Am 6/6/2021 18:40:17'!
headingChangeTo: aMarsRoverHeading
	heading := aMarsRoverHeading facing.!

!testRun: #MarsRoverTest #test01 stamp: 'Am 6/6/2021 18:40:20'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'Am 6/6/2021 18:40:20'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'Am 6/6/2021 18:40:20'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'Am 6/6/2021 18:40:20'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'Am 6/6/2021 18:40:20'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'Am 6/6/2021 18:40:20'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'Am 6/6/2021 18:40:20'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'Am 6/6/2021 18:40:20'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'Am 6/6/2021 18:40:20'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'Am 6/6/2021 18:40:20'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'Am 6/6/2021 18:40:20'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'Am 6/6/2021 18:40:20'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'Am 6/6/2021 18:40:20'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'Am 6/6/2021 18:40:20'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'Am 6/6/2021 18:40:20'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'Am 6/6/2021 18:40:20'!
PASSED!

!testRun: #MarsRoverTest #test17addLogRegistersOneMove stamp: 'Am 6/6/2021 18:40:20'!
PASSED!

!testRun: #MarsRoverTest #test18addLogMoveForwardTwice stamp: 'Am 6/6/2021 18:40:20'!
PASSED!

!testRun: #MarsRoverTest #test19Log stamp: 'Am 6/6/2021 18:40:20'!
PASSED!

!testRun: #MarsRoverTest #test20Log stamp: 'Am 6/6/2021 18:40:20'!
PASSED!

!testRun: #MarsRoverTest #test21Log stamp: 'Am 6/6/2021 18:40:20'!
PASSED!

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/6/2021 18:40:20'!
PASSED!

!testRun: #MarsRoverTest #test23Window stamp: 'Am 6/6/2021 18:40:20'!
PASSED!

!testRun: #MarsRoverTest #test24Window stamp: 'Am 6/6/2021 18:40:20'!
PASSED!

!testRun: #MarsRoverTest #test25Window stamp: 'Am 6/6/2021 18:40:20'!
PASSED!

!testRun: #MarsRoverTest #test26Window stamp: 'Am 6/6/2021 18:40:20'!
PASSED!

!methodRemoval: MarsRoverHeadingEast #facing stamp: 'Am 6/6/2021 18:40:30'!
facing
	^'Facing East'.!

!methodRemoval: MarsRoverHeadingNorth #facing stamp: 'Am 6/6/2021 18:40:37'!
facing
	^'Facing North'!

!methodRemoval: MarsRoverHeadingSouth #facing stamp: 'Am 6/6/2021 18:40:43'!
facing
	^'Facing South'!

!methodRemoval: MarsRoverHeadingWest #facing stamp: 'Am 6/6/2021 18:40:49'!
facing
	^'Facing West'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 18:44:07'!
addObserverToHeading:anObserver 
	headingObservers add: anObserver! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'Am 6/6/2021 18:44:23'!
addObserverToPosition:anObserver 
	positionObservers add: anObserver! !

!methodRemoval: MarsRover #addLogToPosition: stamp: 'Am 6/6/2021 18:44:33'!
addLogToPosition: aLog 
	 positionObservers add: aLog.!

!methodRemoval: MarsRover #addLogToHeading: stamp: 'Am 6/6/2021 18:44:41'!
addLogToHeading: aLog 
	headingObservers add: aLog!

!methodRemoval: MarsRover #addWindowToHeading: stamp: 'Am 6/6/2021 18:44:47'!
addWindowToHeading: aStateWindow 
	headingObservers add: aStateWindow.!

!methodRemoval: MarsRover #addWindowToPosition: stamp: 'Am 6/6/2021 18:44:53'!
addWindowToPosition: aStateWindow 
 positionObservers add: aStateWindow!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 18:45:19' prior: 50873533!
test17addLogRegistersOneMove

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addObserverToPosition: log.
	
	marsRover process: 'f'.
	
	self assert: (log console at: 1) equals: ( '0@2').! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 18:45:25' prior: 50873586!
test18addLogMoveForwardTwice

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addObserverToPosition: log.
	
	marsRover process: 'ff'.
	
	self assert: (log console) equals: (OrderedCollection with: '0@2' with: '-1@2').! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 18:45:29' prior: 50873666!
test19Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addObserverToPosition: log.
	
	marsRover process: 'frfrfrf'.
	
	self assert: log console equals: (OrderedCollection with: '0@2' with: '0@3' with: '1@3' with: '1@2' ).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 18:45:35' prior: 50873680!
test20Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addObserverToPosition: log.
	
	marsRover process: 'brbrbrb'.
	
	self assert: log console equals: (OrderedCollection with: '2@2' with: '2@1' with: '1@1' with: '1@2' ).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 18:45:48' prior: 50874666!
test23Window

	| marsRover stateWindow|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	stateWindow:= StateWindow new.
	
	marsRover addObserverToPosition: stateWindow.
	
	marsRover process: 'f'.
	
	self assert: stateWindow positionWindow equals: ('0@2').! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 18:45:55' prior: 50874693!
test24Window

	| marsRover stateWindow|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	stateWindow:= StateWindow new.
	
	marsRover addObserverToPosition: stateWindow.
	
	marsRover process: 'b'.
	
	self assert: stateWindow positionWindow equals: ('2@2').! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 18:46:12' prior: 50873714!
test21Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addObserverToHeading: log.
	
	marsRover process: 'r'.
	
	self assert: log console equals: (OrderedCollection with: 'Facing North' ).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 18:46:26' prior: 50874473!
test22Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addObserverToHeading: log.
	
	marsRover process: 'rrrr'.
	
	self assert: log console equals: (OrderedCollection with: 'Facing North' with: 'Facing East' with: 'Facing South' with: 'Facing West').! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 18:46:35' prior: 50874725!
test25Window

	| marsRover stateWindow|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	stateWindow:= StateWindow new.
	
	marsRover addObserverToHeading: stateWindow.
	
	marsRover process: 'r'.
	
	self assert: stateWindow headingWindow equals: ('Facing North').! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 18:46:39' prior: 50874875!
test26Window

	| marsRover stateWindow|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	stateWindow:= StateWindow new.
	
	marsRover addObserverToHeading: stateWindow.
	
	marsRover process: 'rrrr'.
	
	self assert: stateWindow headingWindow equals: ('Facing West').! !

!testRun: #MarsRoverTest #test26Window stamp: 'Am 6/6/2021 18:46:42'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'Am 6/6/2021 18:46:42'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'Am 6/6/2021 18:46:42'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'Am 6/6/2021 18:46:42'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'Am 6/6/2021 18:46:42'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'Am 6/6/2021 18:46:42'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'Am 6/6/2021 18:46:42'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'Am 6/6/2021 18:46:42'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'Am 6/6/2021 18:46:42'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'Am 6/6/2021 18:46:42'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'Am 6/6/2021 18:46:42'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'Am 6/6/2021 18:46:42'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'Am 6/6/2021 18:46:42'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'Am 6/6/2021 18:46:43'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'Am 6/6/2021 18:46:43'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'Am 6/6/2021 18:46:43'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'Am 6/6/2021 18:46:43'!
PASSED!

!testRun: #MarsRoverTest #test17addLogRegistersOneMove stamp: 'Am 6/6/2021 18:46:43'!
PASSED!

!testRun: #MarsRoverTest #test18addLogMoveForwardTwice stamp: 'Am 6/6/2021 18:46:43'!
PASSED!

!testRun: #MarsRoverTest #test19Log stamp: 'Am 6/6/2021 18:46:43'!
PASSED!

!testRun: #MarsRoverTest #test20Log stamp: 'Am 6/6/2021 18:46:43'!
PASSED!

!testRun: #MarsRoverTest #test21Log stamp: 'Am 6/6/2021 18:46:43'!
PASSED!

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/6/2021 18:46:43'!
PASSED!

!testRun: #MarsRoverTest #test23Window stamp: 'Am 6/6/2021 18:46:43'!
PASSED!

!testRun: #MarsRoverTest #test24Window stamp: 'Am 6/6/2021 18:46:43'!
PASSED!

!testRun: #MarsRoverTest #test25Window stamp: 'Am 6/6/2021 18:46:43'!
PASSED!

!testRun: #MarsRoverTest #test26Window stamp: 'Am 6/6/2021 18:46:43'!
PASSED!

!methodRemoval: StateWindow #position stamp: 'Am 6/6/2021 18:56:09'!
position
	self shouldBeImplemented.!

!testRun: #MarsRoverTest #test01 stamp: 'Am 6/6/2021 18:56:52'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'Am 6/6/2021 18:56:52'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'Am 6/6/2021 18:56:52'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'Am 6/6/2021 18:56:52'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'Am 6/6/2021 18:56:52'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'Am 6/6/2021 18:56:52'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'Am 6/6/2021 18:56:52'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'Am 6/6/2021 18:56:52'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'Am 6/6/2021 18:56:52'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'Am 6/6/2021 18:56:52'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'Am 6/6/2021 18:56:52'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'Am 6/6/2021 18:56:52'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'Am 6/6/2021 18:56:52'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'Am 6/6/2021 18:56:52'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'Am 6/6/2021 18:56:52'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'Am 6/6/2021 18:56:52'!
PASSED!

!testRun: #MarsRoverTest #test17addLogRegistersOneMove stamp: 'Am 6/6/2021 18:56:52'!
PASSED!

!testRun: #MarsRoverTest #test18addLogMoveForwardTwice stamp: 'Am 6/6/2021 18:56:52'!
PASSED!

!testRun: #MarsRoverTest #test19Log stamp: 'Am 6/6/2021 18:56:52'!
PASSED!

!testRun: #MarsRoverTest #test20Log stamp: 'Am 6/6/2021 18:56:52'!
PASSED!

!testRun: #MarsRoverTest #test21Log stamp: 'Am 6/6/2021 18:56:52'!
PASSED!

!testRun: #MarsRoverTest #test22Log stamp: 'Am 6/6/2021 18:56:52'!
PASSED!

!testRun: #MarsRoverTest #test23Window stamp: 'Am 6/6/2021 18:56:52'!
PASSED!

!testRun: #MarsRoverTest #test24Window stamp: 'Am 6/6/2021 18:56:52'!
PASSED!

!testRun: #MarsRoverTest #test25Window stamp: 'Am 6/6/2021 18:56:52'!
PASSED!

!testRun: #MarsRoverTest #test26Window stamp: 'Am 6/6/2021 18:56:52'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 18:58:19'!
test17LogRegistersOneMove

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addObserverToPosition: log.
	
	marsRover process: 'f'.
	
	self assert: (log console at: 1) equals: ( '0@2').! !

!methodRemoval: MarsRoverTest #test17addLogRegistersOneMove stamp: 'Am 6/6/2021 18:58:19'!
test17addLogRegistersOneMove

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addObserverToPosition: log.
	
	marsRover process: 'f'.
	
	self assert: (log console at: 1) equals: ( '0@2').!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 18:58:31'!
test18LogMoveForwardTwice

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addObserverToPosition: log.
	
	marsRover process: 'ff'.
	
	self assert: (log console) equals: (OrderedCollection with: '0@2' with: '-1@2').! !

!methodRemoval: MarsRoverTest #test18addLogMoveForwardTwice stamp: 'Am 6/6/2021 18:58:31'!
test18addLogMoveForwardTwice

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addObserverToPosition: log.
	
	marsRover process: 'ff'.
	
	self assert: (log console) equals: (OrderedCollection with: '0@2' with: '-1@2').!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 18:59:08'!
test18LogRegistersManyMovesSameDirection

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addObserverToPosition: log.
	
	marsRover process: 'ff'.
	
	self assert: (log console) equals: (OrderedCollection with: '0@2' with: '-1@2').! !

!methodRemoval: MarsRoverTest #test18LogMoveForwardTwice stamp: 'Am 6/6/2021 18:59:08'!
test18LogMoveForwardTwice

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addObserverToPosition: log.
	
	marsRover process: 'ff'.
	
	self assert: (log console) equals: (OrderedCollection with: '0@2' with: '-1@2').!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 18:59:26'!
test19LogWorksForEveryDirection

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addObserverToPosition: log.
	
	marsRover process: 'frfrfrf'.
	
	self assert: log console equals: (OrderedCollection with: '0@2' with: '0@3' with: '1@3' with: '1@2' ).! !

!methodRemoval: MarsRoverTest #test19Log stamp: 'Am 6/6/2021 18:59:26'!
test19Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addObserverToPosition: log.
	
	marsRover process: 'frfrfrf'.
	
	self assert: log console equals: (OrderedCollection with: '0@2' with: '0@3' with: '1@3' with: '1@2' ).!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 18:59:37'!
test17LogRegistersOneMoveForward

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addObserverToPosition: log.
	
	marsRover process: 'f'.
	
	self assert: (log console at: 1) equals: ( '0@2').! !

!methodRemoval: MarsRoverTest #test17LogRegistersOneMove stamp: 'Am 6/6/2021 18:59:37'!
test17LogRegistersOneMove

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addObserverToPosition: log.
	
	marsRover process: 'f'.
	
	self assert: (log console at: 1) equals: ( '0@2').!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 18:59:47'!
test18LogRegistersManyMovesForwardSameDirection

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addObserverToPosition: log.
	
	marsRover process: 'ff'.
	
	self assert: (log console) equals: (OrderedCollection with: '0@2' with: '-1@2').! !

!methodRemoval: MarsRoverTest #test18LogRegistersManyMovesSameDirection stamp: 'Am 6/6/2021 18:59:47'!
test18LogRegistersManyMovesSameDirection

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addObserverToPosition: log.
	
	marsRover process: 'ff'.
	
	self assert: (log console) equals: (OrderedCollection with: '0@2' with: '-1@2').!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 19:00:08'!
test19LogWorksForEveryDirectionForward

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addObserverToPosition: log.
	
	marsRover process: 'frfrfrf'.
	
	self assert: log console equals: (OrderedCollection with: '0@2' with: '0@3' with: '1@3' with: '1@2' ).! !

!methodRemoval: MarsRoverTest #test19LogWorksForEveryDirection stamp: 'Am 6/6/2021 19:00:08'!
test19LogWorksForEveryDirection

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addObserverToPosition: log.
	
	marsRover process: 'frfrfrf'.
	
	self assert: log console equals: (OrderedCollection with: '0@2' with: '0@3' with: '1@3' with: '1@2' ).!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 19:00:25'!
test20LogWorksForEveryDirectionBackwards

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addObserverToPosition: log.
	
	marsRover process: 'brbrbrb'.
	
	self assert: log console equals: (OrderedCollection with: '2@2' with: '2@1' with: '1@1' with: '1@2' ).! !

!methodRemoval: MarsRoverTest #test20Log stamp: 'Am 6/6/2021 19:00:25'!
test20Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addObserverToPosition: log.
	
	marsRover process: 'brbrbrb'.
	
	self assert: log console equals: (OrderedCollection with: '2@2' with: '2@1' with: '1@1' with: '1@2' ).!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 19:00:38'!
test20LogWorksForEveryDirectionBackward

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addObserverToPosition: log.
	
	marsRover process: 'brbrbrb'.
	
	self assert: log console equals: (OrderedCollection with: '2@2' with: '2@1' with: '1@1' with: '1@2' ).! !

!methodRemoval: MarsRoverTest #test20LogWorksForEveryDirectionBackwards stamp: 'Am 6/6/2021 19:00:38'!
test20LogWorksForEveryDirectionBackwards

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addObserverToPosition: log.
	
	marsRover process: 'brbrbrb'.
	
	self assert: log console equals: (OrderedCollection with: '2@2' with: '2@1' with: '1@1' with: '1@2' ).!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 19:00:56'!
test20LogWorksForEveryDirectionBackwards

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addObserverToPosition: log.
	
	marsRover process: 'brbrbrb'.
	
	self assert: log console equals: (OrderedCollection with: '2@2' with: '2@1' with: '1@1' with: '1@2' ).! !

!methodRemoval: MarsRoverTest #test20LogWorksForEveryDirectionBackward stamp: 'Am 6/6/2021 19:00:56'!
test20LogWorksForEveryDirectionBackward

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addObserverToPosition: log.
	
	marsRover process: 'brbrbrb'.
	
	self assert: log console equals: (OrderedCollection with: '2@2' with: '2@1' with: '1@1' with: '1@2' ).!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 19:01:17'!
test21LogRegistersHeadingOneTurn

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addObserverToHeading: log.
	
	marsRover process: 'r'.
	
	self assert: log console equals: (OrderedCollection with: 'Facing North' ).! !

!methodRemoval: MarsRoverTest #test21Log stamp: 'Am 6/6/2021 19:01:17'!
test21Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addObserverToHeading: log.
	
	marsRover process: 'r'.
	
	self assert: log console equals: (OrderedCollection with: 'Facing North' ).!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 19:01:42'!
test22LogRegitersEveryHeadingChange

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addObserverToHeading: log.
	
	marsRover process: 'rrrr'.
	
	self assert: log console equals: (OrderedCollection with: 'Facing North' with: 'Facing East' with: 'Facing South' with: 'Facing West').! !

!methodRemoval: MarsRoverTest #test22Log stamp: 'Am 6/6/2021 19:01:42'!
test22Log

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addObserverToHeading: log.
	
	marsRover process: 'rrrr'.
	
	self assert: log console equals: (OrderedCollection with: 'Facing North' with: 'Facing East' with: 'Facing South' with: 'Facing West').!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 19:02:04'!
test21LogRegistersOneHeadingChange

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addObserverToHeading: log.
	
	marsRover process: 'r'.
	
	self assert: log console equals: (OrderedCollection with: 'Facing North' ).! !

!methodRemoval: MarsRoverTest #test21LogRegistersHeadingOneTurn stamp: 'Am 6/6/2021 19:02:04'!
test21LogRegistersHeadingOneTurn

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addObserverToHeading: log.
	
	marsRover process: 'r'.
	
	self assert: log console equals: (OrderedCollection with: 'Facing North' ).!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 19:02:30'!
test23WindowRegistersOnePositionChange

	| marsRover stateWindow|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	stateWindow:= StateWindow new.
	
	marsRover addObserverToPosition: stateWindow.
	
	marsRover process: 'f'.
	
	self assert: stateWindow positionWindow equals: ('0@2').! !

!methodRemoval: MarsRoverTest #test23Window stamp: 'Am 6/6/2021 19:02:30'!
test23Window

	| marsRover stateWindow|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	stateWindow:= StateWindow new.
	
	marsRover addObserverToPosition: stateWindow.
	
	marsRover process: 'f'.
	
	self assert: stateWindow positionWindow equals: ('0@2').!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 19:02:43'!
test23WindowRegistersOnePositionChangeForward

	| marsRover stateWindow|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	stateWindow:= StateWindow new.
	
	marsRover addObserverToPosition: stateWindow.
	
	marsRover process: 'f'.
	
	self assert: stateWindow positionWindow equals: ('0@2').! !

!methodRemoval: MarsRoverTest #test23WindowRegistersOnePositionChange stamp: 'Am 6/6/2021 19:02:43'!
test23WindowRegistersOnePositionChange

	| marsRover stateWindow|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	stateWindow:= StateWindow new.
	
	marsRover addObserverToPosition: stateWindow.
	
	marsRover process: 'f'.
	
	self assert: stateWindow positionWindow equals: ('0@2').!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 19:02:58'!
test24WindowRegistersOnePositionChangeBackwards

	| marsRover stateWindow|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	stateWindow:= StateWindow new.
	
	marsRover addObserverToPosition: stateWindow.
	
	marsRover process: 'b'.
	
	self assert: stateWindow positionWindow equals: ('2@2').! !

!methodRemoval: MarsRoverTest #test24Window stamp: 'Am 6/6/2021 19:02:58'!
test24Window

	| marsRover stateWindow|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	stateWindow:= StateWindow new.
	
	marsRover addObserverToPosition: stateWindow.
	
	marsRover process: 'b'.
	
	self assert: stateWindow positionWindow equals: ('2@2').!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 19:04:35'!
test25WindowRegistersEveryPositionChange

	| marsRover stateWindow|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	stateWindow:= StateWindow new.
	
	marsRover addObserverToPosition: stateWindow.
	
	marsRover process: 'frfbrflf'.
	
	self assert: stateWindow positionWindow equals: ('2@2').! !

!testRun: #MarsRoverTest #test25WindowRegistersEveryPositionChange stamp: 'Am 6/6/2021 19:04:42'!
FAILURE!

!testRun: #MarsRoverTest #test25WindowRegistersEveryPositionChange stamp: 'Am 6/6/2021 19:04:42'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 19:04:57' prior: 50875783!
test25WindowRegistersEveryPositionChange

	| marsRover stateWindow|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	stateWindow:= StateWindow new.
	
	marsRover addObserverToPosition: stateWindow.
	
	marsRover process: 'frfbrflf'.
	
	self assert: stateWindow positionWindow equals: ('1@3').! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 19:05:22'!
test256WindowRegisterOneChangeHeading

	| marsRover stateWindow|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	stateWindow:= StateWindow new.
	
	marsRover addObserverToHeading: stateWindow.
	
	marsRover process: 'r'.
	
	self assert: stateWindow headingWindow equals: ('Facing North').! !

!methodRemoval: MarsRoverTest #test25Window stamp: 'Am 6/6/2021 19:05:22'!
test25Window

	| marsRover stateWindow|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	stateWindow:= StateWindow new.
	
	marsRover addObserverToHeading: stateWindow.
	
	marsRover process: 'r'.
	
	self assert: stateWindow headingWindow equals: ('Facing North').!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 19:05:36'!
test25WindowRegisterOneChangeHeading

	| marsRover stateWindow|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	stateWindow:= StateWindow new.
	
	marsRover addObserverToHeading: stateWindow.
	
	marsRover process: 'r'.
	
	self assert: stateWindow headingWindow equals: ('Facing North').! !

!methodRemoval: MarsRoverTest #test256WindowRegisterOneChangeHeading stamp: 'Am 6/6/2021 19:05:36'!
test256WindowRegisterOneChangeHeading

	| marsRover stateWindow|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	stateWindow:= StateWindow new.
	
	marsRover addObserverToHeading: stateWindow.
	
	marsRover process: 'r'.
	
	self assert: stateWindow headingWindow equals: ('Facing North').!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 19:05:47'!
test26WindowRegisterOneChangeHeading

	| marsRover stateWindow|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	stateWindow:= StateWindow new.
	
	marsRover addObserverToHeading: stateWindow.
	
	marsRover process: 'r'.
	
	self assert: stateWindow headingWindow equals: ('Facing North').! !

!methodRemoval: MarsRoverTest #test25WindowRegisterOneChangeHeading stamp: 'Am 6/6/2021 19:05:47'!
test25WindowRegisterOneChangeHeading

	| marsRover stateWindow|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	stateWindow:= StateWindow new.
	
	marsRover addObserverToHeading: stateWindow.
	
	marsRover process: 'r'.
	
	self assert: stateWindow headingWindow equals: ('Facing North').!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 19:06:47' prior: 50875279!
test26Window

	| marsRover stateWindow|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	stateWindow:= StateWindow new.
	
	marsRover addObserverToHeading: stateWindow.
	
	marsRover process: 'rrrrllllr'.
	
	self assert: stateWindow headingWindow equals: ('Facing North').! !
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 19:07:06'!
test27WindowRegistersEveryHeadingChange

	| marsRover stateWindow|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	stateWindow:= StateWindow new.
	
	marsRover addObserverToHeading: stateWindow.
	
	marsRover process: 'rrrrllllr'.
	
	self assert: stateWindow headingWindow equals: ('Facing North').! !

!methodRemoval: MarsRoverTest #test26Window stamp: 'Am 6/6/2021 19:07:06'!
test26Window

	| marsRover stateWindow|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	stateWindow:= StateWindow new.
	
	marsRover addObserverToHeading: stateWindow.
	
	marsRover process: 'rrrrllllr'.
	
	self assert: stateWindow headingWindow equals: ('Facing North').!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 19:10:05'!
test28LogRegistersPositionAndHeadingChanges

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addObserverToHeading: log.
	
	marsRover process: 'rflb'.
	
	self assert: log console equals: (OrderedCollection with: 'Facing North' with: '1@3' with: 'Facing West' with: '2@3').! !

!testRun: #MarsRoverTest #test28LogRegistersPositionAndHeadingChanges stamp: 'Am 6/6/2021 19:10:08'!
FAILURE!

!testRun: #MarsRoverTest #test28LogRegistersPositionAndHeadingChanges stamp: 'Am 6/6/2021 19:10:35'!
FAILURE!

log console!
!MarsRoverTest methodsFor: 'tests' stamp: 'Am 6/6/2021 19:11:28' prior: 50875918!
test28LogRegistersPositionAndHeadingChanges

	| marsRover log|
	
	marsRover := MarsRover at: 1@2 heading: #West.
	log:= Log new.
	
	marsRover addObserverToHeading: log.
	marsRover addObserverToPosition: log.

	
	marsRover process: 'rflb'.
	
	self assert: log console equals: (OrderedCollection with: 'Facing North' with: '1@3' with: 'Facing West' with: '2@3').! !

!testRun: #MarsRoverTest #test28LogRegistersPositionAndHeadingChanges stamp: 'Am 6/6/2021 19:11:29'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'Am 6/6/2021 19:11:29'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'Am 6/6/2021 19:11:29'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'Am 6/6/2021 19:11:29'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'Am 6/6/2021 19:11:29'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'Am 6/6/2021 19:11:29'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'Am 6/6/2021 19:11:29'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'Am 6/6/2021 19:11:29'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'Am 6/6/2021 19:11:29'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'Am 6/6/2021 19:11:29'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'Am 6/6/2021 19:11:29'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'Am 6/6/2021 19:11:29'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'Am 6/6/2021 19:11:29'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'Am 6/6/2021 19:11:29'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'Am 6/6/2021 19:11:29'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'Am 6/6/2021 19:11:29'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'Am 6/6/2021 19:11:29'!
PASSED!

!testRun: #MarsRoverTest #test17LogRegistersOneMoveForward stamp: 'Am 6/6/2021 19:11:29'!
PASSED!

!testRun: #MarsRoverTest #test18LogRegistersManyMovesForwardSameDirection stamp: 'Am 6/6/2021 19:11:29'!
PASSED!

!testRun: #MarsRoverTest #test19LogWorksForEveryDirectionForward stamp: 'Am 6/6/2021 19:11:29'!
PASSED!

!testRun: #MarsRoverTest #test20LogWorksForEveryDirectionBackwards stamp: 'Am 6/6/2021 19:11:29'!
PASSED!

!testRun: #MarsRoverTest #test21LogRegistersOneHeadingChange stamp: 'Am 6/6/2021 19:11:29'!
PASSED!

!testRun: #MarsRoverTest #test22LogRegitersEveryHeadingChange stamp: 'Am 6/6/2021 19:11:29'!
PASSED!

!testRun: #MarsRoverTest #test23WindowRegistersOnePositionChangeForward stamp: 'Am 6/6/2021 19:11:29'!
PASSED!

!testRun: #MarsRoverTest #test24WindowRegistersOnePositionChangeBackwards stamp: 'Am 6/6/2021 19:11:29'!
PASSED!

!testRun: #MarsRoverTest #test25WindowRegistersEveryPositionChange stamp: 'Am 6/6/2021 19:11:29'!
PASSED!

!testRun: #MarsRoverTest #test26WindowRegisterOneChangeHeading stamp: 'Am 6/6/2021 19:11:29'!
PASSED!

!testRun: #MarsRoverTest #test27WindowRegistersEveryHeadingChange stamp: 'Am 6/6/2021 19:11:29'!
PASSED!

!testRun: #MarsRoverTest #test28LogRegistersPositionAndHeadingChanges stamp: 'Am 6/6/2021 19:11:29'!
PASSED!

----SNAPSHOT----(6 June 2021 19:11:38) CuisUniversity-4532.image priorSource: 17335253!

----SNAPSHOT----(6 June 2021 19:13:07) CuisUniversity-4532.image priorSource: 17420233!

----QUIT----(6 June 2021 19:13:11) CuisUniversity-4532.image priorSource: 17420322!

----STARTUP---- (10 June 2021 10:46:59) as /home/alejandro/Documents/Cs.Computacion/Inge 1/linux64/CuisUniversity-4532.image!


TestCase subclass: #TestsTusLibros
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TestsTusLibros category: 'TusLibros' stamp: 'Am 6/10/2021 11:00:05'!
TestCase subclass: #TestsTusLibros
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'Am 6/10/2021 11:03:10'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TestsTusLibros methodsFor: 'testsCart' stamp: 'Am 6/10/2021 11:03:02'!
test01createdCartIsInitializedEmpty
	|aCart|
	
	aCart:= Cart new.
	self assert: aCart isEmpty equals: true.! !

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'Am 6/10/2021 11:03:22'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'Am 6/10/2021 11:03:34'!
isEmpty
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'Am 6/10/2021 11:03:41' prior: 50876072!
isEmpty
	^true.! !

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'Am 6/10/2021 11:03:43'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'Am 6/10/2021 11:03:43'!
PASSED!
!TestsTusLibros methodsFor: 'testsCart' stamp: 'Am 6/10/2021 11:13:17' prior: 50876063!
test01createdCartIsInitializedEmpty
	|aCart aCatalog|
	
	aCatalog:= OrderedCollection new.
	aCart:= Cart withCatalog: aCatalog.
	self assert: aCart isEmpty equals: true.! !

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'Am 6/10/2021 11:13:21'!
ERROR!
!Cart class methodsFor: 'as yet unclassified' stamp: 'Am 6/10/2021 11:13:31'!
withCatalog: anOrderedCollection 
	self shouldBeImplemented.! !
!Cart class methodsFor: 'as yet unclassified' stamp: 'Am 6/10/2021 11:14:04' prior: 50876098!
withCatalog: aCatalog 
	self new initializeWithCatalog: aCatalog.! !

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'Am 6/10/2021 11:14:09'!
ERROR!

!classDefinition: #Cart category: 'TusLibros' stamp: 'Am 6/10/2021 11:14:17'!
Object subclass: #Cart
	instanceVariableNames: 'catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'initialization' stamp: 'Am 6/10/2021 11:14:17'!
initializeWithCatalog: aCatalog 
	self shouldBeImplemented.
	catalog := aCatalog.! !
!Cart methodsFor: 'initialization' stamp: 'Am 6/10/2021 11:14:32' prior: 50876117!
initializeWithCatalog: aCatalog 
	catalog := aCatalog.! !

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'Am 6/10/2021 11:14:38'!
ERROR!
!Cart class methodsFor: 'as yet unclassified' stamp: 'Am 6/10/2021 11:15:00' prior: 50876103!
withCatalog: aCatalog 
	^self new initializeWithCatalog: aCatalog.! !

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'Am 6/10/2021 11:15:19'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'Am 6/10/2021 11:15:19'!
PASSED!
!TestsTusLibros methodsFor: 'testsCart' stamp: 'Am 6/10/2021 11:17:08'!
test02addingBookFromCatalogIsRegistered
	|aCart aCatalog|
	
	aCatalog:= OrderedCollection new with: '9780262033848'.
	aCart:= Cart withCatalog: aCatalog.
	
	
	self assert: aCart isEmpty equals: true.! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'Am 6/10/2021 11:21:45' prior: 50876142!
test02addingBookFromCatalogIsRegistered
	|aCart aCatalog ISBNCormen|
	
	ISBNCormen:='9780262033848'.
	aCatalog:= OrderedCollection new with: ISBNCormen.
	aCart:= Cart withCatalog: aCatalog.
	aCart addToCart: ISBNCormen withQuantity: 1.
	
	self assert: aCart size equals: 1.
	self assert:( aCart contains: ISBNCormen withQuantity: 1) equals: true.! !

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'Am 6/10/2021 11:21:58'!
ERROR!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'Am 6/10/2021 11:21:59'!
ERROR!
!TestsTusLibros methodsFor: 'testsCart' stamp: 'Am 6/10/2021 11:22:13' prior: 50876152!
test02addingBookFromCatalogIsRegistered
	|aCart aCatalog ISBNCormen|
	
	ISBNCormen:='9780262033848'.
	aCatalog:= OrderedCollection with: ISBNCormen.
	aCart:= Cart withCatalog: aCatalog.
	aCart addToCart: ISBNCormen withQuantity: 1.
	
	self assert: aCart size equals: 1.
	self assert:( aCart contains: ISBNCormen withQuantity: 1) equals: true.! !

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'Am 6/10/2021 11:22:14'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'Am 6/10/2021 11:22:31'!
addToCart: aString withQuantity: aSmallInteger 
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'Am 6/10/2021 11:25:13' prior: 50876190!
addToCart: anISBN withQuantity: aNumber 
	self assert:  (catalog includes: anISBN)
	 ! !

Object subclass: #Cart
	instanceVariableNames: 'catalog cartContent'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'Am 6/10/2021 11:25:27'!
Object subclass: #Cart
	instanceVariableNames: 'catalog cartContent'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'initialization' stamp: 'Am 6/10/2021 11:26:42' prior: 50876123!
initializeWithCatalog: aCatalog 
	catalog := aCatalog.
	cartContent:= Dictionary new.! !
!Cart methodsFor: 'initialization' stamp: 'Am 6/10/2021 11:28:21' prior: 50876213!
initializeWithCatalog: aCatalog 
	catalog := aCatalog.
	cartContent:= OrderedCollection  new.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'Am 6/10/2021 11:29:27' prior: 50876196!
addToCart: anISBN withQuantity: aNumber 
	self assert:  (catalog includes: anISBN).
	aNumber timesRepeat: [ cartContent add: anISBN]
	 ! !
!Cart methodsFor: 'as yet unclassified' stamp: 'Am 6/10/2021 11:29:32' prior: 50876225!
addToCart: anISBN withQuantity: aNumber 
	self assert:  (catalog includes: anISBN).
	aNumber timesRepeat: [ cartContent add: anISBN].
	 ! !

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'Am 6/10/2021 11:30:03'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'Am 6/10/2021 11:30:35' prior: 50876076!
isEmpty
	^self size = 0.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'Am 6/10/2021 11:30:41' prior: 50876244!
isEmpty
	^(self size = 0).! !
!Cart methodsFor: 'as yet unclassified' stamp: 'Am 6/10/2021 11:31:01' overrides: 16880927!
size
	^cartContent size.! !

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'Am 6/10/2021 11:31:14'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'Am 6/10/2021 11:31:21'!
contains: aString withQuantity: aSmallInteger 
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'Am 6/10/2021 11:33:33' prior: 50876259!
contains: anISBN withQuantity: aNumber 
	
	^aNumber= cartContent select:[:aBook| aBook=anISBN ]size.
	! !

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'Am 6/10/2021 11:33:43'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'Am 6/10/2021 11:34:08' prior: 50876265!
contains: anISBN withQuantity: aNumber 
	
	^aNumber= (cartContent select:[:aBook| aBook=anISBN ]size).
	! !

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'Am 6/10/2021 11:34:10'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'Am 6/10/2021 11:34:10'!
ERROR!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'Am 6/10/2021 11:34:10'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'Am 6/10/2021 11:34:40' prior: 50876275!
contains: anISBN withQuantity: aNumber 
	
	^aNumber= (cartContent select:[:aBook| aBook = anISBN ]) size.
	! !

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'Am 6/10/2021 11:34:44'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'Am 6/10/2021 11:34:44'!
PASSED!
!TestsTusLibros methodsFor: 'testsCart' stamp: 'Am 6/10/2021 11:37:40'!
test03addingBookNotFromCatalogThrowsError
	|aCart aCatalog ISBNCormen ISBNBible|
	
	ISBNCormen:='9780262033848'.
	ISBNBible:= '9780840700551'.
	aCatalog:= OrderedCollection with: ISBNCormen.
	aCart:= Cart withCatalog: aCatalog.
	aCart addToCart: ISBNBible withQuantity: 1.
	
	
	self assert: aCart size equals: 0.! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'Am 6/10/2021 11:39:08' prior: 50876305!
test03addingBookNotFromCatalogThrowsError
	|aCart aCatalog ISBNCormen ISBNBible|
	
	ISBNCormen:='9780262033848'.
	ISBNBible:= '9780840700551'.
	aCatalog:= OrderedCollection with: ISBNCormen.
	aCart:= Cart withCatalog: aCatalog.
	self 
		should: [	aCart addToCart: ISBNBible withQuantity: 1. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cart invalidISBNError equals: anError messageText.
			]! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'Am 6/10/2021 11:39:21' prior: 50876318!
test03addingBookNotFromCatalogThrowsError
	|aCart aCatalog ISBNCormen ISBNBible|
	
	ISBNCormen:='9780262033848'.
	ISBNBible:= '9780840700551'.
	aCatalog:= OrderedCollection with: ISBNCormen.
	aCart:= Cart withCatalog: aCatalog.
	self 
		should: [	aCart addToCart: ISBNBible withQuantity: 1. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cart invalidISBNError equals: anError messageText.
				self assert: Cart size = 0.
			]! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'Am 6/10/2021 11:40:21'!
test03cantAddBookNotFromCatalog
	|aCart aCatalog ISBNCormen ISBNBible|
	
	ISBNCormen:='9780262033848'.
	ISBNBible:= '9780840700551'.
	aCatalog:= OrderedCollection with: ISBNCormen.
	aCart:= Cart withCatalog: aCatalog.
	self 
		should: [	aCart addToCart: ISBNBible withQuantity: 1. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cart invalidISBNError equals: anError messageText.
				self assert: Cart size = 0.
			]! !

!methodRemoval: TestsTusLibros #test03addingBookNotFromCatalogThrowsError stamp: 'Am 6/10/2021 11:40:21'!
test03addingBookNotFromCatalogThrowsError
	|aCart aCatalog ISBNCormen ISBNBible|
	
	ISBNCormen:='9780262033848'.
	ISBNBible:= '9780840700551'.
	aCatalog:= OrderedCollection with: ISBNCormen.
	aCart:= Cart withCatalog: aCatalog.
	self 
		should: [	aCart addToCart: ISBNBible withQuantity: 1. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cart invalidISBNError equals: anError messageText.
				self assert: Cart size = 0.
			]!
!Cart class methodsFor: 'nil' stamp: 'Am 6/10/2021 11:41:16'!
invalidISBNError
	^'Book not in Catalog'! !
!Cart methodsFor: 'as yet unclassified' stamp: 'Am 6/10/2021 11:42:33' prior: 50876233!
addToCart: anISBN withQuantity: aNumber 
	(catalog includes: anISBN) ifFalse:[self error: 	Cart ].
	aNumber timesRepeat: [ cartContent add: anISBN].
	 ! !
!Cart methodsFor: 'as yet unclassified' stamp: 'Am 6/10/2021 11:42:48' prior: 50876392!
addToCart: anISBN withQuantity: aNumber 
	(catalog includes: anISBN) ifFalse:[self error: 	Cart invalidISBNError ].
	aNumber timesRepeat: [ cartContent add: anISBN].
	 ! !

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'Am 6/10/2021 11:42:57'!
ERROR!
!TestsTusLibros methodsFor: 'testsCart' stamp: 'Am 6/10/2021 11:43:07' prior: 50876352!
test03cantAddBookNotFromCatalog
	|aCart aCatalog ISBNCormen ISBNBible|
	
	ISBNCormen:='9780262033848'.
	ISBNBible:= '9780840700551'.
	aCatalog:= OrderedCollection with: ISBNCormen.
	aCart:= Cart withCatalog: aCatalog.
	self 
		should: [	aCart addToCart: ISBNBible withQuantity: 1. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cart invalidISBNError equals: anError messageText.
				self assert: aCart size = 0.
			]! !

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'Am 6/10/2021 11:43:08'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'Am 6/10/2021 11:43:08'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'Am 6/10/2021 11:43:08'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'Am 6/10/2021 11:43:08'!
PASSED!
!TestsTusLibros methodsFor: 'testsCart' stamp: 'Am 6/10/2021 11:44:18'!
test04cantAdd0Books
	|aCart aCatalog ISBNCormen|
	
	ISBNCormen:='9780262033848'.
	aCatalog:= OrderedCollection with: ISBNCormen.
	aCart:= Cart withCatalog: aCatalog.
	self 
		should: [	aCart addToCart: ISBNCormen withQuantity: 0. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cart zeroBooksAddedError equals: anError messageText.
				self assert: aCart size = 0.
			]! !
!Cart class methodsFor: 'as yet unclassified' stamp: 'Am 6/10/2021 11:45:15'!
zeroBookAddedError
	^'Must add at least one book'! !
!Cart methodsFor: 'as yet unclassified' stamp: 'Am 6/10/2021 11:45:45' prior: 50876400!
addToCart: anISBN withQuantity: aNumber 
	(catalog includes: anISBN) ifFalse:[self error: 	Cart invalidISBNError ].
	(aNumber<1) ifTrue: [self error: 	Cart zeroBookAddedError ].

	aNumber timesRepeat: [ cartContent add: anISBN].
	 ! !

!testRun: #TestsTusLibros #test04cantAdd0Books stamp: 'Am 6/10/2021 11:45:53'!
ERROR!
!Cart class methodsFor: 'as yet unclassified' stamp: 'Am 6/10/2021 11:46:25'!
zeroBooksAddedError
	^'Must add at least one book'! !
!Cart methodsFor: 'as yet unclassified' stamp: 'Am 6/10/2021 11:46:25' prior: 50876463!
addToCart: anISBN withQuantity: aNumber 
	(catalog includes: anISBN) ifFalse:[self error: 	Cart invalidISBNError ].
	(aNumber<1) ifTrue: [self error: 	Cart zeroBooksAddedError ].

	aNumber timesRepeat: [ cartContent add: anISBN].
	 ! !

!methodRemoval: Cart class #zeroBookAddedError stamp: 'Am 6/10/2021 11:46:26'!
zeroBookAddedError
	^'Must add at least one book'!

!testRun: #TestsTusLibros #test04cantAdd0Books stamp: 'Am 6/10/2021 11:46:36'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'Am 6/10/2021 11:46:36'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'Am 6/10/2021 11:46:36'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'Am 6/10/2021 11:46:36'!
PASSED!

!testRun: #TestsTusLibros #test04cantAdd0Books stamp: 'Am 6/10/2021 11:46:36'!
PASSED!
!Cart methodsFor: 'initialization' stamp: 'Am 6/10/2021 11:49:15' prior: 50876219!
initializeWithCatalog: aCatalog 
	catalog := aCatalog.
	cartContent:= Dictionary  new.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'Am 6/10/2021 11:59:25' prior: 50876481!
addToCart: anISBN withQuantity: aNumber 

	|appearances|
	
	(catalog includes: anISBN) ifFalse:[self error: 	Cart invalidISBNError ].
	(aNumber<1) ifTrue: [self error: 	Cart zeroBooksAddedError ].

	appearances:= cartContent at: anISBN ifAbsent: [0].
	cartContent put: anISBN-> (appearances+aNumber).
	
	 ! !
!Cart methodsFor: 'as yet unclassified' stamp: 'Am 6/10/2021 12:01:00' prior: 50876252 overrides: 16880927!
size
	^cartContent sum:[:anISBNQuantity| anISBNQuantity].! !
!Cart methodsFor: 'as yet unclassified' stamp: 'Am 6/10/2021 12:01:15' prior: 50876531 overrides: 16880927!
size
	^cartContent sum:[:anISBNQuantity| anISBNQuantity] ifEmpty:[0].! !
!Cart methodsFor: 'as yet unclassified' stamp: 'Am 6/10/2021 12:02:37' prior: 50876292!
contains: anISBN withQuantity: aNumber 
	
	^aNumber=(cartContent at: anISBN ifAbsent: [0] ).
	! !

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'Am 6/10/2021 12:02:45'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'Am 6/10/2021 12:02:52'!
ERROR!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'Am 6/10/2021 12:02:52'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'Am 6/10/2021 12:03:41' prior: 50876517!
addToCart: anISBN withQuantity: aNumber 

	|appearances|
	
	(catalog includes: anISBN) ifFalse:[self error: 	Cart invalidISBNError ].
	(aNumber<1) ifTrue: [self error: 	Cart zeroBooksAddedError ].

	appearances:= cartContent at: anISBN ifAbsent: [0].
	cartContent add: anISBN-> (appearances+aNumber).
	
	 ! !

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'Am 6/10/2021 12:03:56'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'Am 6/10/2021 12:04:03'!
PASSED!

!testRun: #TestsTusLibros #test04cantAdd0Books stamp: 'Am 6/10/2021 12:04:24'!
PASSED!
!TestsTusLibros methodsFor: 'testsCart' stamp: 'Am 6/10/2021 12:05:18'!
test05addingBookTwiceFromCatalogRegistersCorrectAmount
	|aCart aCatalog ISBNCormen|
	
	ISBNCormen:='9780262033848'.
	aCatalog:= OrderedCollection with: ISBNCormen.
	aCart:= Cart withCatalog: aCatalog.
	aCart addToCart: ISBNCormen withQuantity: 1.
	
	self assert: aCart size equals: 1.
	self assert:( aCart contains: ISBNCormen withQuantity: 1) equals: true.! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'Am 6/10/2021 12:05:35' prior: 50876581!
test05addingBookTwiceFromCatalogRegistersCorrectAmount
	|aCart aCatalog ISBNCormen|
	
	ISBNCormen:='9780262033848'.
	aCatalog:= OrderedCollection with: ISBNCormen.
	aCart:= Cart withCatalog: aCatalog.
	aCart addToCart: ISBNCormen withQuantity: 15.
	aCart addToCart: ISBNCormen withQuantity: 13.
	
	self assert: aCart size equals: 28.
	self assert:( aCart contains: ISBNCormen withQuantity: 28) equals: true.! !

!testRun: #TestsTusLibros #test05addingBookTwiceFromCatalogRegistersCorrectAmount stamp: 'Am 6/10/2021 12:05:39'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'Am 6/10/2021 12:05:39'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'Am 6/10/2021 12:05:39'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'Am 6/10/2021 12:05:39'!
PASSED!

!testRun: #TestsTusLibros #test04cantAdd0Books stamp: 'Am 6/10/2021 12:05:39'!
PASSED!

!testRun: #TestsTusLibros #test05addingBookTwiceFromCatalogRegistersCorrectAmount stamp: 'Am 6/10/2021 12:05:39'!
PASSED!

!methodRemoval: TestsTusLibros #test05addingBookTwiceFromCatalogRegistersCorrectAmount stamp: 'Am 6/10/2021 12:06:12'!
test05addingBookTwiceFromCatalogRegistersCorrectAmount
	|aCart aCatalog ISBNCormen|
	
	ISBNCormen:='9780262033848'.
	aCatalog:= OrderedCollection with: ISBNCormen.
	aCart:= Cart withCatalog: aCatalog.
	aCart addToCart: ISBNCormen withQuantity: 15.
	aCart addToCart: ISBNCormen withQuantity: 13.
	
	self assert: aCart size equals: 28.
	self assert:( aCart contains: ISBNCormen withQuantity: 28) equals: true.!
!TestsTusLibros methodsFor: 'testsCart' stamp: 'Am 6/10/2021 12:06:57'!
test04cantAddZeroBooksToCart
	|aCart aCatalog ISBNCormen|
	
	ISBNCormen:='9780262033848'.
	aCatalog:= OrderedCollection with: ISBNCormen.
	aCart:= Cart withCatalog: aCatalog.
	self 
		should: [	aCart addToCart: ISBNCormen withQuantity: 0. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cart zeroBooksAddedError equals: anError messageText.
				self assert: aCart size = 0.
			]! !

!methodRemoval: TestsTusLibros #test04cantAdd0Books stamp: 'Am 6/10/2021 12:06:57'!
test04cantAdd0Books
	|aCart aCatalog ISBNCormen|
	
	ISBNCormen:='9780262033848'.
	aCatalog:= OrderedCollection with: ISBNCormen.
	aCart:= Cart withCatalog: aCatalog.
	self 
		should: [	aCart addToCart: ISBNCormen withQuantity: 0. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cart zeroBooksAddedError equals: anError messageText.
				self assert: aCart size = 0.
			]!
!TestsTusLibros methodsFor: 'testsCart' stamp: 'Am 6/10/2021 12:07:28'!
test05CartCanListAllBooksCorrectly
	|aCart aCatalog ISBNCormen|
	
	ISBNCormen:='9780262033848'.
	aCatalog:= OrderedCollection with: ISBNCormen.
	aCart:= Cart withCatalog: aCatalog.
	self 
		should: [	aCart addToCart: ISBNCormen withQuantity: 0. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: Cart zeroBooksAddedError equals: anError messageText.
				self assert: aCart size = 0.
			]! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'Am 6/10/2021 12:09:03' prior: 50876680!
test05CartCanListAllBooksCorrectly
	|aCart aCatalog ISBNCormen ISBNWatkins|
	
	ISBNCormen:='9780262033848'.
	ISBNWatkins:= '9780470528334'.
	
	
	aCatalog:= OrderedCollection with: ISBNCormen.
	aCart:= Cart withCatalog: aCatalog.
	
	aCart ! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'Am 6/10/2021 12:09:13' prior: 50876697!
test05CartCanListAllBooksCorrectly
	|aCart aCatalog ISBNCormen ISBNWatkins|
	
	ISBNCormen:='9780262033848'.
	ISBNWatkins:= '9780470528334'.
	
	
	aCatalog:= OrderedCollection with: ISBNCormen.
	aCart:= Cart withCatalog: aCatalog.
	
	! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'Am 6/10/2021 12:11:34' prior: 50876708!
test05CartCanListAllBooksCorrectly
	|aCart aCatalog ISBNCormen ISBNWatkins|
	
	ISBNCormen:='9780262033848'.
	ISBNWatkins:= '9780470528334'.
	
	
	aCatalog:= OrderedCollection with: ISBNCormen with: ISBNWatkins .
	aCart:= Cart withCatalog: aCatalog.
	
	aCart addToCart: ISBNCormen withQuantity: 3.
	aCart addToCart: ISBNWatkins withQuantity: 2.
	
	self assert: aCart listCart equals:( OrderedCollection with: (ISBNCormen @ 3) with: (ISBNWatkins @2)).! !

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'Am 6/10/2021 12:11:42'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'Am 6/10/2021 12:11:50'!
listCart
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'Am 6/10/2021 12:13:40' prior: 50876739!
listCart
	|list|
	list:= OrderedCollection new.
	cartContent keysAndValuesDo: [:anISBN :anISBNQuantity | list addLast: (anISBN @anISBNQuantity )].! !
!Cart methodsFor: 'as yet unclassified' stamp: 'Am 6/10/2021 12:13:44' prior: 50876743!
listCart
	|list|
	list:= OrderedCollection new.
	cartContent keysAndValuesDo: [:anISBN :anISBNQuantity | list addLast: (anISBN @anISBNQuantity )].
	^list.! !

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'Am 6/10/2021 12:13:47'!
ERROR!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'Am 6/10/2021 12:14:08'!
ERROR!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'Am 6/10/2021 12:14:08'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'Am 6/10/2021 12:14:45' prior: 50876751!
listCart
	|list|
	list:= OrderedCollection new.
	cartContent keysAndValuesDo: [:anISBN :anISBNQuantity | list addLast: (anISBN@anISBNQuantity )].
	^list.! !

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'Am 6/10/2021 12:14:56'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'Am 6/10/2021 12:15:43' prior: 50876769!
listCart
	|list|
	list:= OrderedCollection new.
	cartContent keysAndValuesDo: [:anISBN :anISBNQuantity | list addLast: anISBN@anISBNQuantity].
	^list.! !

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'Am 6/10/2021 12:15:50'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'Am 6/10/2021 12:15:50'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'Am 6/10/2021 12:15:50'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'Am 6/10/2021 12:15:50'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'Am 6/10/2021 12:15:50'!
ERROR!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'Am 6/10/2021 12:15:50'!
ERROR!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'Am 6/10/2021 12:16:41'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'Am 6/10/2021 12:18:00' prior: 50876780!
listCart
	|list|
	list:= OrderedCollection new.
	cartContent keysAndValuesDo: [:anISBN :anISBNQuantity | list addLast: '(',anISBN,',',anISBNQuantity asString,')'].
	^list.! !
!TestsTusLibros methodsFor: 'testsCart' stamp: 'Am 6/10/2021 12:19:10' prior: 50876719!
test05CartCanListAllBooksCorrectly
	|aCart aCatalog ISBNCormen ISBNWatkins|
	
	ISBNCormen:='9780262033848'.
	ISBNWatkins:= '9780470528334'.
	
	
	aCatalog:= OrderedCollection with: ISBNCormen with: ISBNWatkins .
	aCart:= Cart withCatalog: aCatalog.
	
	aCart addToCart: ISBNCormen withQuantity: 3.
	aCart addToCart: ISBNWatkins withQuantity: 2.
	
	self assert: aCart listCart equals:( OrderedCollection with: '(',ISBNCormen,',3)' with: '(',ISBNWatkins,',2)').! !

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'Am 6/10/2021 12:19:12'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'Am 6/10/2021 12:19:12'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'Am 6/10/2021 12:19:12'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'Am 6/10/2021 12:19:12'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'Am 6/10/2021 12:19:12'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'Am 6/10/2021 12:19:12'!
PASSED!
!TestsTusLibros methodsFor: 'testsCart' stamp: 'Am 6/10/2021 12:30:37' prior: 50876819!
test05CartCanListAllBooksCorrectly
	|aCart aCatalog ISBNCormen ISBNWatkins|
	
	ISBNCormen:='9780262033848'.
	ISBNWatkins:= '9780470528334'.
	
	
	aCatalog:= OrderedCollection with: ISBNCormen with: ISBNWatkins .
	aCart:= Cart withCatalog: aCatalog.
	
	aCart addToCart: ISBNCormen withQuantity: 3.
	aCart addToCart: ISBNWatkins withQuantity: 2.
	
	self assert: aCart listCart equals:( OrderedCollection with: {ISBNCormen,3} with: {ISBNWatkins,2}).! !
!Cart methodsFor: 'as yet unclassified' stamp: 'Am 6/10/2021 12:30:57' prior: 50876810!
listCart
	|list|
	list:= OrderedCollection new.
	cartContent keysAndValuesDo: [:anISBN :anISBNQuantity | list addLast: {anISBN,anISBNQuantity}].
	^list.! !

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'Am 6/10/2021 12:31:03'!
ERROR!
!TestsTusLibros methodsFor: 'testsCart' stamp: 'Am 6/10/2021 12:31:42' prior: 50876856!
test05CartCanListAllBooksCorrectly
	|aCart aCatalog ISBNCormen ISBNWatkins|
	
	ISBNCormen:='9780262033848'.
	ISBNWatkins:= '9780470528334'.
	
	
	aCatalog:= OrderedCollection with: ISBNCormen with: ISBNWatkins .
	aCart:= Cart withCatalog: aCatalog.
	
	aCart addToCart: ISBNCormen withQuantity: 3.
	aCart addToCart: ISBNWatkins withQuantity: 2.
	
	self assert: aCart listCart equals:( OrderedCollection with: {ISBNCormen . 3} with: {ISBNWatkins . 2}).! !
!Cart methodsFor: 'as yet unclassified' stamp: 'Am 6/10/2021 12:31:54' prior: 50876873!
listCart
	|list|
	list:= OrderedCollection new.
	cartContent keysAndValuesDo: [:anISBN :anISBNQuantity | list addLast: {anISBN . anISBNQuantity}].
	^list.! !

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'Am 6/10/2021 12:31:59'!
PASSED!

!testRun: #TestsTusLibros #test01createdCartIsInitializedEmpty stamp: 'Am 6/10/2021 12:32:04'!
PASSED!

!testRun: #TestsTusLibros #test02addingBookFromCatalogIsRegistered stamp: 'Am 6/10/2021 12:32:04'!
PASSED!

!testRun: #TestsTusLibros #test03cantAddBookNotFromCatalog stamp: 'Am 6/10/2021 12:32:04'!
PASSED!

!testRun: #TestsTusLibros #test04cantAddZeroBooksToCart stamp: 'Am 6/10/2021 12:32:04'!
PASSED!

!testRun: #TestsTusLibros #test05CartCanListAllBooksCorrectly stamp: 'Am 6/10/2021 12:32:04'!
PASSED!

----SNAPSHOT----(10 June 2021 12:42:06) CuisUniversity-4532.image priorSource: 17420411!

----QUIT----(10 June 2021 12:42:21) CuisUniversity-4532.image priorSource: 17448868!