

----QUIT----(9 March 2021 14:58:42) CuisUniversity-4532.image priorSource: 13044060!

----STARTUP---- (9 March 2021 14:58:43) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4532.image!


----QUIT----(9 March 2021 14:58:43) CuisUniversity-4532.image priorSource: 16885479!

----STARTUP---- (17 June 2021 20:37:18) as D:\Facultad\2021-1C-IS1\CuisUniversity_win64\TusLibrosIt3\windows64\CuisUniversity-4532.image!


----End fileIn of D:\Facultad\2021-1C-IS1\CuisUniversity_win64\Iteracion2\Iteracion2\TusLibros-33.st----!

TestCase subclass: #RESTInterfaceTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RESTInterfaceTest category: 'TusLibros' stamp: 'GR 6/17/2021 20:43:16'!
TestCase subclass: #RESTInterfaceTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterfaceTest methodsFor: 'no messages' stamp: 'GR 6/17/2021 20:44:53' overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.! !
!RESTInterfaceTest methodsFor: 'nil' stamp: 'GR 6/17/2021 20:45:35'!
test01

	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 6/17/2021 20:46:54' prior: 50859909!
test01

	

	! !

TestCase subclass: #RESTInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RESTInterfaceTest category: 'TusLibros' stamp: 'GR 6/17/2021 20:47:00'!
TestCase subclass: #RESTInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!methodRemoval: RESTInterfaceTest #setUp stamp: 'GR 6/17/2021 20:47:04'!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.!

!classDefinition: #RESTInterface category: 'TusLibros' stamp: 'GR 6/17/2021 20:52:53'!
Object subclass: #RESTInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 6/17/2021 20:52:49' prior: 50859913!
test01

	|interface cartID|
	
	interface := RESTInterface new.
	
	cartID := interface createCartForClientID: 1234 withPassword: 4321.
	
	self assert: (interface listCart: cartID) isEmpty. 

	! !

!testRun: #RESTInterfaceTest #test01 stamp: 'GR 6/17/2021 20:52:58'!
ERROR!
!RESTInterface methodsFor: 'as yet unclassified' stamp: 'GR 6/17/2021 20:53:49'!
createCartForClientID: aSmallInteger withPassword: aSmallInteger2 
	self shouldBeImplemented.! !
!RESTInterface methodsFor: 'as yet unclassified' stamp: 'GR 6/17/2021 20:55:01' prior: 50859951!
createCartForClientID: aClientID withPassword: aPassword
	
	^1.! !

!testRun: #RESTInterfaceTest #test01 stamp: 'GR 6/17/2021 20:55:06'!
ERROR!
!RESTInterface methodsFor: 'as yet unclassified' stamp: 'GR 6/17/2021 20:55:14'!
listCart: aSmallInteger 
	self shouldBeImplemented.! !
!RESTInterface methodsFor: 'as yet unclassified' stamp: 'GR 6/17/2021 20:55:25' prior: 50859966!
listCart: aSmallInteger 
	^OrderedCollection new.! !

!testRun: #RESTInterfaceTest #test01 stamp: 'GR 6/17/2021 20:55:38'!
PASSED!

!testRun: #RESTInterfaceTest #test01 stamp: 'GR 6/17/2021 20:55:38'!
PASSED!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 6/17/2021 20:58:56'!
test02

	|interface cartID|
	
	interface := RESTInterface new.
	
	cartID := interface createCartForClientID: 1234 withPassword: 4321.
	
	self assert: (interface listCart: cartID) isEmpty. 

	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 6/17/2021 21:00:25' prior: 50859981!
test02

	|interface cartID|
	
	interface := RESTInterface new.
	
	cartID := interface createCartForClientID: 1234 withPassword: 4321.
	
	interface addToCart: cartID bookISBN: 123.
	
	self assert: (interface listCart: cartID) isEmpty. 

	! !

!classDefinition: #RESTInterfaceTest category: 'TusLibros' stamp: 'GR 6/17/2021 21:01:28'!
TestCase subclass: #RESTInterfaceTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 6/17/2021 21:01:26' overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 6/17/2021 21:02:04' prior: 50859991!
test02

	|interface cartID|
	
	interface := RESTInterface new.
	
	cartID := interface createCartForClientID: 1234 withPassword: 4321.
	
	interface addToCart: cartID bookISBN: testObjectsFactory .
	
	self assert: (interface listCart: cartID) isEmpty. 

	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 6/17/2021 21:02:52' prior: 50860016!
test02

	|interface cartID|
	
	interface := RESTInterface new.
	
	cartID := interface createCartForClientID: 1234 withPassword: 4321.
	
	interface addToCart: cartID bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.
	
	self assert: (interface listCart: cartID) isEmpty. 

	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 6/17/2021 21:04:59' prior: 50860028!
test02

	|interface cartID cartList|

	interface := RESTInterface new.
	cartID := interface createCartForClientID: 1234 withPassword: 4321.
	
	interface addToCart: cartID bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.	
	cartList := interface listCart: cartID.
	
	self assert: 1 equals: cartList size.
	self assert: 1 equals: (cartList at: testObjectsFactory itemSellByTheStore).

	! !

!testRun: #RESTInterfaceTest #test02 stamp: 'GR 6/17/2021 21:05:00'!
ERROR!
!RESTInterface methodsFor: 'as yet unclassified' stamp: 'GR 6/17/2021 21:05:11'!
addToCart: aSmallInteger bookISBN: aString bookQuantity: aSmallInteger3 
	self shouldBeImplemented.! !

!classDefinition: #RESTInterface category: 'TusLibros' stamp: 'GR 6/17/2021 21:07:30'!
Object subclass: #RESTInterface
	instanceVariableNames: 'cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterface methodsFor: 'as yet unclassified' stamp: 'GR 6/17/2021 21:07:27' prior: 50860059!
addToCart: aCartID bookISBN: anISBN bookQuantity: aQuantity
	
	cart add: aQuantity of: anISBN.! !

!testRun: #RESTInterfaceTest #test02 stamp: 'GR 6/17/2021 21:08:17'!
ERROR!
!RESTInterface methodsFor: 'as yet unclassified' stamp: 'GR 6/17/2021 21:08:52' prior: 50859958!
createCartForClientID: aClientID withPassword: aPassword

	cart := Cart new.	
	^1.! !

!testRun: #RESTInterfaceTest #test02 stamp: 'GR 6/17/2021 21:08:59'!
ERROR!
!RESTInterface class methodsFor: 'no messages' stamp: 'GR 6/17/2021 21:09:33'!
for: aCatalog.! !
!RESTInterface class methodsFor: 'as yet unclassified' stamp: 'GR 6/17/2021 21:09:54' prior: 50860090!
for: aCatalog

	^self new initializeFor: aCatalog .! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 6/17/2021 21:10:24' prior: 50859939!
test01

	|interface cartID|
	
	interface := RESTInterface for: testObjectsFactory defaultCatalog .
	
	cartID := interface createCartForClientID: 1234 withPassword: 4321.
	
	self assert: (interface listCart: cartID) isEmpty. 

	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 6/17/2021 21:10:29' prior: 50860099!
test01

	|interface cartID|
	
	interface := RESTInterface with: testObjectsFactory defaultCatalog .
	
	cartID := interface createCartForClientID: 1234 withPassword: 4321.
	
	self assert: (interface listCart: cartID) isEmpty. 

	! !
!RESTInterface class methodsFor: 'as yet unclassified' stamp: 'GR 6/17/2021 21:10:47'!
with: aCatalog

	^self new initializeWith: aCatalog .! !

!methodRemoval: RESTInterface class #for: stamp: 'GR 6/17/2021 21:10:51'!
for: aCatalog

	^self new initializeFor: aCatalog .!

!classDefinition: #RESTInterface category: 'TusLibros' stamp: 'GR 6/17/2021 21:11:11'!
Object subclass: #RESTInterface
	instanceVariableNames: 'cart catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterface methodsFor: 'as yet unclassified' stamp: 'GR 6/17/2021 21:11:09'!
initializeWith: aCatalog

	catalog := aCatalog ! !
!RESTInterface methodsFor: 'as yet unclassified' stamp: 'GR 6/17/2021 21:11:49' prior: 50860082!
createCartForClientID: aClientID withPassword: aPassword

	cart := Cart initializeAcceptingItemsOf: catalog
	^1.! !
!RESTInterface methodsFor: 'as yet unclassified' stamp: 'GR 6/17/2021 21:13:27' prior: 50860141!
createCartForClientID: aClientID withPassword: aPassword

	cart := Cart initializeAcceptingItemsOf: catalog.
	^1.! !

!testRun: #RESTInterfaceTest #test01 stamp: 'GR 6/17/2021 21:13:45'!
ERROR!

!testRun: #RESTInterfaceTest #test02 stamp: 'GR 6/17/2021 21:13:45'!
ERROR!

!testRun: #RESTInterfaceTest #test01 stamp: 'GR 6/17/2021 21:13:47'!
ERROR!
!RESTInterface methodsFor: 'as yet unclassified' stamp: 'GR 6/17/2021 21:14:21' prior: 50860148!
createCartForClientID: aClientID withPassword: aPassword

	cart := Cart acceptingItemsOf: catalog.
	^1.! !

!testRun: #RESTInterfaceTest #test01 stamp: 'GR 6/17/2021 21:14:24'!
PASSED!

!testRun: #RESTInterfaceTest #test02 stamp: 'GR 6/17/2021 21:14:24'!
ERROR!

!testRun: #RESTInterfaceTest #test02 stamp: 'GR 6/17/2021 21:14:25'!
ERROR!

!testRun: #RESTInterfaceTest #test02 stamp: 'GR 6/17/2021 21:15:04'!
ERROR!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 6/17/2021 21:16:27' prior: 50860041!
test02

	|interface cartID cartList|

	interface := RESTInterface with: testObjectsFactory defaultCatalog .
	cartID := interface createCartForClientID: 1234 withPassword: 4321.
	
	interface addToCart: cartID bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.	
	cartList := interface listCart: cartID.
	
	self assert: 1 equals: cartList size.
	self assert: 1 equals: (cartList at: testObjectsFactory itemSellByTheStore).

	! !

!testRun: #RESTInterfaceTest #test02 stamp: 'GR 6/17/2021 21:16:29'!
FAILURE!
!RESTInterface methodsFor: 'as yet unclassified' stamp: 'GR 6/17/2021 21:19:35' prior: 50859971!
listCart: aSmallInteger 
	^cart listItems.! !

!testRun: #RESTInterfaceTest #test01 stamp: 'GR 6/17/2021 21:19:46'!
ERROR!

!testRun: #RESTInterfaceTest #test02 stamp: 'GR 6/17/2021 21:19:46'!
ERROR!

!testRun: #RESTInterfaceTest #test01 stamp: 'GR 6/17/2021 21:19:55'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'GR 6/17/2021 21:20:02'!
listItems
	self shouldBeImplemented.! !

----End fileIn of D:\Facultad\2021-1C-IS1\CuisUniversity_win64\TusLibrosIt3\windows64\Packages\TerseGuide.pck.st----!
!Cart methodsFor: 'as yet unclassified' stamp: 'GR 6/17/2021 21:26:46' prior: 50860210!
listItems
	|list|
	list := Dictionary new.
	
	items do: [:anItem | list at: anItem ifAbsentPut: [self occurrencesOf: anItem] ].
	
	^list.! !

!testRun: #RESTInterfaceTest #test01 stamp: 'GR 6/17/2021 21:26:55'!
PASSED!

!testRun: #RESTInterfaceTest #test02 stamp: 'GR 6/17/2021 21:27:02'!
PASSED!

!testRun: #RESTInterfaceTest #test01 stamp: 'GR 6/17/2021 21:27:22'!
PASSED!

!testRun: #RESTInterfaceTest #test02 stamp: 'GR 6/17/2021 21:27:22'!
PASSED!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 6/17/2021 21:29:44'!
test03

	|interface cartID cartList|

	interface := RESTInterface with: testObjectsFactory defaultCatalog .
	cartID := interface createCartForClientID: 1234 withPassword: 4321.
	
	interface addToCart: cartID bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.	
	cartList := interface listCart: cartID.
	
	self assert: 1 equals: cartList size.
	self assert: 1 equals: (cartList at: testObjectsFactory itemSellByTheStore).

	! !
!Cart methodsFor: 'queries' stamp: 'GR 6/17/2021 21:39:49' prior: 50863141!
listItems
	|list|
	list := Dictionary new.
	
	items asBag do: [:anItem | list at: anItem put: [self occurrencesOf: anItem] ].
	
	^list.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'GR 6/17/2021 21:39:52'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GR 6/17/2021 21:39:52'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'GR 6/17/2021 21:39:52'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'GR 6/17/2021 21:39:52'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'GR 6/17/2021 21:39:52'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'GR 6/17/2021 21:39:52'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'GR 6/17/2021 21:39:52'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'GR 6/17/2021 21:39:52'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'GR 6/17/2021 21:39:55'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GR 6/17/2021 21:39:55'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'GR 6/17/2021 21:39:55'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'GR 6/17/2021 21:39:55'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'GR 6/17/2021 21:39:55'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'GR 6/17/2021 21:39:55'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'GR 6/17/2021 21:39:55'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'GR 6/17/2021 21:39:55'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'GR 6/17/2021 21:39:55'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'GR 6/17/2021 21:39:55'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'GR 6/17/2021 21:39:56'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'GR 6/17/2021 21:39:56'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'GR 6/17/2021 21:39:56'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'GR 6/17/2021 21:39:56'!
PASSED!

!testRun: #RESTInterfaceTest #test01 stamp: 'GR 6/17/2021 21:39:56'!
PASSED!

!testRun: #RESTInterfaceTest #test02 stamp: 'GR 6/17/2021 21:39:56'!
FAILURE!

!testRun: #RESTInterfaceTest #test03 stamp: 'GR 6/17/2021 21:39:56'!
FAILURE!

!testRun: #RESTInterfaceTest #test02 stamp: 'GR 6/17/2021 21:39:59'!
FAILURE!
!Cart methodsFor: 'queries' stamp: 'GR 6/17/2021 21:40:21' prior: 50863175!
listItems
	|list|
	list := Dictionary new.
	
	items asBag do: [:anItem | list at: anItem put: (self occurrencesOf: anItem) ].
	
	^list.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'GR 6/17/2021 21:40:22'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GR 6/17/2021 21:40:22'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'GR 6/17/2021 21:40:22'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'GR 6/17/2021 21:40:22'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'GR 6/17/2021 21:40:22'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'GR 6/17/2021 21:40:22'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'GR 6/17/2021 21:40:22'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'GR 6/17/2021 21:40:23'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'GR 6/17/2021 21:40:26'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GR 6/17/2021 21:40:26'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'GR 6/17/2021 21:40:26'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'GR 6/17/2021 21:40:27'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'GR 6/17/2021 21:40:27'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'GR 6/17/2021 21:40:27'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'GR 6/17/2021 21:40:27'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'GR 6/17/2021 21:40:27'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'GR 6/17/2021 21:40:27'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'GR 6/17/2021 21:40:27'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'GR 6/17/2021 21:40:27'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'GR 6/17/2021 21:40:27'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'GR 6/17/2021 21:40:27'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'GR 6/17/2021 21:40:27'!
PASSED!

!testRun: #RESTInterfaceTest #test01 stamp: 'GR 6/17/2021 21:40:27'!
PASSED!

!testRun: #RESTInterfaceTest #test02 stamp: 'GR 6/17/2021 21:40:27'!
PASSED!

!testRun: #RESTInterfaceTest #test03 stamp: 'GR 6/17/2021 21:40:27'!
PASSED!

!classRenamed: #RESTInterface as: #Store stamp: 'GR 6/17/2021 21:51:12'!
Smalltalk renameClassNamed: #RESTInterface as: #Store!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 6/17/2021 21:51:12' prior: 50863158!
test03

	|interface cartID cartList|

	interface := Store with: testObjectsFactory defaultCatalog .
	cartID := interface createCartForClientID: 1234 withPassword: 4321.
	
	interface addToCart: cartID bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.	
	cartList := interface listCart: cartID.
	
	self assert: 1 equals: cartList size.
	self assert: 1 equals: (cartList at: testObjectsFactory itemSellByTheStore).

	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 6/17/2021 21:51:12' prior: 50860179!
test02

	|interface cartID cartList|

	interface := Store with: testObjectsFactory defaultCatalog .
	cartID := interface createCartForClientID: 1234 withPassword: 4321.
	
	interface addToCart: cartID bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.	
	cartList := interface listCart: cartID.
	
	self assert: 1 equals: cartList size.
	self assert: 1 equals: (cartList at: testObjectsFactory itemSellByTheStore).

	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'GR 6/17/2021 21:51:12' prior: 50860110!
test01

	|interface cartID|
	
	interface := Store with: testObjectsFactory defaultCatalog .
	
	cartID := interface createCartForClientID: 1234 withPassword: 4321.
	
	self assert: (interface listCart: cartID) isEmpty. 

	! !

!classRenamed: #RESTInterfaceTest as: #StoreTest stamp: 'GR 6/17/2021 21:51:33'!
Smalltalk renameClassNamed: #RESTInterfaceTest as: #StoreTest!

----SNAPSHOT----(17 June 2021 22:01:46) CuisUniversity-4532.image priorSource: 16885703!

----SNAPSHOT----(18 June 2021 05:46:47) CuisUniversity-4532.image priorSource: 17015984!

----STARTUP---- (23 June 2021 15:58:59) as D:\Facultad\2021-1C-IS1\CuisUniversity_win64\TusLibrosIt3\windows64\CuisUniversity-4532.image!


!testRun: #StoreTest #test03 stamp: 'GR 6/23/2021 16:02:10'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/23/2021 16:02:23'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'GR 6/23/2021 16:02:23'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GR 6/23/2021 16:02:23'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'GR 6/23/2021 16:02:23'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'GR 6/23/2021 16:02:23'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'GR 6/23/2021 16:02:23'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'GR 6/23/2021 16:02:23'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'GR 6/23/2021 16:02:23'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'GR 6/23/2021 16:02:23'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'GR 6/23/2021 16:02:23'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'GR 6/23/2021 16:02:23'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'GR 6/23/2021 16:02:23'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'GR 6/23/2021 16:02:24'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'GR 6/23/2021 16:02:24'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'GR 6/23/2021 16:02:24'!
PASSED!

!testRun: #StoreTest #test01 stamp: 'GR 6/23/2021 16:02:24'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/23/2021 16:02:24'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/23/2021 16:02:24'!
PASSED!
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 16:35:42' prior: 50860010 overrides: 16927572!
setUp 
	|interface|
	testObjectsFactory := StoreTestObjectsFactory new.
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 16:35:52' prior: 50863468 overrides: 16927572!
setUp 
	|interface|
	testObjectsFactory := StoreTestObjectsFactory new.
	
	interface := Store with: testObjectsFactory defaultCatalog .
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 16:36:26' prior: 50863474 overrides: 16927572!
setUp 
	testObjectsFactory := StoreTestObjectsFactory new.
	
	
	! !
!Cart methodsFor: 'queries' stamp: 'GR 6/23/2021 17:22:02' prior: 50863262!
listItems
	^items! !
!Store methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 17:22:30' prior: 50860199!
listCart: aCartID
	|list|
	
	list := Dictionary new.

	^cart listItems.! !
!Store methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 17:23:38' prior: 50863491!
listCart: aCartID
	|items dictionary|
	
	dictionary := Dictionary new.
	
	items := cart listItems.! !
!Store methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 17:23:46' prior: 50863497!
listCart: aCartID
	|items list|
	
	list := Dictionary new.
	
	items := cart listItems.! !
!Store methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 17:24:40' prior: 50863503!
listCart: aCartID
	|items list|
	
	list := Dictionary new.
	
	items := cart listItems.
	
	items asBag do: [:anItem | list at: anItem put: (items occurrencesOf: anItem)].! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'GR 6/23/2021 17:26:26'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GR 6/23/2021 17:26:26'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'GR 6/23/2021 17:26:26'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'GR 6/23/2021 17:26:26'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'GR 6/23/2021 17:26:26'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'GR 6/23/2021 17:26:26'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'GR 6/23/2021 17:26:26'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'GR 6/23/2021 17:26:27'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'GR 6/23/2021 17:26:27'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'GR 6/23/2021 17:26:27'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'GR 6/23/2021 17:26:27'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'GR 6/23/2021 17:26:27'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'GR 6/23/2021 17:26:27'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'GR 6/23/2021 17:26:27'!
PASSED!

!testRun: #StoreTest #test01 stamp: 'GR 6/23/2021 17:26:27'!
ERROR!

!testRun: #StoreTest #test02 stamp: 'GR 6/23/2021 17:26:27'!
ERROR!

!testRun: #StoreTest #test03 stamp: 'GR 6/23/2021 17:26:27'!
ERROR!
!Store methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 17:26:47' prior: 50863509!
listCart: aCartID
	|items list|
	
	list := Dictionary new.
	
	items := cart listItems.
	
	items asBag do: [:anItem | list at: anItem put: (items occurrencesOf: anItem)].
	
	^list.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'GR 6/23/2021 17:26:49'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GR 6/23/2021 17:26:49'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'GR 6/23/2021 17:26:49'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'GR 6/23/2021 17:26:49'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'GR 6/23/2021 17:26:49'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'GR 6/23/2021 17:26:49'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'GR 6/23/2021 17:26:49'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'GR 6/23/2021 17:26:49'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'GR 6/23/2021 17:26:49'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'GR 6/23/2021 17:26:49'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'GR 6/23/2021 17:26:49'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'GR 6/23/2021 17:26:49'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'GR 6/23/2021 17:26:49'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'GR 6/23/2021 17:26:49'!
PASSED!

!testRun: #StoreTest #test01 stamp: 'GR 6/23/2021 17:26:49'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/23/2021 17:26:50'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/23/2021 17:26:50'!
PASSED!
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 17:32:58'!
test04

	|interface cartID cartList|

	interface := Store with: testObjectsFactory defaultCatalog .
	cartID := interface createCartForClientID: 1234 withPassword: 4321.
	
	interface addToCart: cartID bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.	
	cartList := interface listCart: cartID.
	
	self assert: 1 equals: cartList size.
	self assert: 1 equals: (cartList at: testObjectsFactory itemSellByTheStore).

	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 17:55:54' prior: 50863629!
test04

	|interface cartIDA cartIDB|

	interface := Store with: testObjectsFactory defaultCatalog .
	cartIDA := interface createCartForClientID: 1234 withPassword: 4321.
	cartIDB := interface createCartForClientID: 1234 withPassword: 4321.
	
	self deny: (cartIDA = cartIDB).
	! !

!testRun: #StoreTest #test04 stamp: 'GR 6/23/2021 17:55:58'!
FAILURE!

!testRun: #StoreTest #test04 stamp: 'GR 6/23/2021 17:56:21'!
FAILURE!

!classDefinition: #Store category: 'TusLibros' stamp: 'GR 6/23/2021 17:57:23'!
Object subclass: #Store
	instanceVariableNames: 'cart catalog lastCart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 17:57:20' prior: 50860162!
createCartForClientID: aClientID withPassword: aPassword

	cart := Cart acceptingItemsOf: catalog.
	lastCart := lastCart + 1.
	^lastCart.! !
!Store methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 17:57:46' prior: 50860136!
initializeWith: aCatalog
	
	lastCart := 1.
	catalog := aCatalog ! !
!Store methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 17:57:50' prior: 50863677!
initializeWith: aCatalog
	
	lastCart := 0.
	catalog := aCatalog ! !

!testRun: #StoreTest #test04 stamp: 'GR 6/23/2021 17:57:51'!
PASSED!

!testRun: #StoreTest #test01 stamp: 'GR 6/23/2021 17:57:51'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/23/2021 17:57:51'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/23/2021 17:57:51'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/23/2021 17:57:51'!
PASSED!
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:03:12'!
test05

	|interface cartIDA cartIDB|

	interface := Store with: testObjectsFactory defaultCatalog .
	cartIDA := interface createCartForClientID: 1234 withPassword: 4321.
	cartIDB := interface createCartForClientID: 1234 withPassword: 4321.
	
	self deny: (cartIDA = cartIDB).
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:08:42' prior: 50863698!
test05

	|interface cartIDA cartIDB listCartA listCartB book|
	
	book := testObjectsFactory itemSellByTheStore .
	interface := Store with: testObjectsFactory defaultCatalog .
	cartIDA := interface createCartForClientID: 1234 withPassword: 4321.
	cartIDB := interface createCartForClientID: 1234 withPassword: 4321.
	
	interface addToCart: cartIDA bookISBN: book bookQuantity: 1.
	interface addToCart: cartIDB bookISBN: book bookQuantity: 2.	
	
	listCartA := interface listCart: cartIDA.
	listCartB := interface listCart: cartIDB.

	self assert: 1 equals: (listCartA at: book).
	self assert: 2 equals: (listCartB at: book).	! !

!testRun: #StoreTest #test05 stamp: 'GR 6/23/2021 18:08:45'!
FAILURE!

!classDefinition: #Store category: 'TusLibros' stamp: 'GR 6/23/2021 18:15:12'!
Object subclass: #Store
	instanceVariableNames: 'cart catalog lastCart carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:15:10' prior: 50863682!
initializeWith: aCatalog
	
	lastCart := 0.
	carts := Dictionary new.
	catalog := aCatalog ! !

!testRun: #StoreTest #test05 stamp: 'GR 6/23/2021 18:15:17'!
FAILURE!
!Store methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:16:07' prior: 50863669!
createCartForClientID: aClientID withPassword: aPassword

	lastCart := lastCart + 1.
	carts at: lastCart put: (Cart acceptingItemsOf: catalog).
	
	^lastCart.! !
!Store methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:21:59' prior: 50860073!
addToCart: aCartID bookISBN: anISBN bookQuantity: aQuantity
	|carta|
	carta := carts at: aCartID .
	
	carta add: aQuantity of: anISBN.! !

!testRun: #StoreTest #test05 stamp: 'GR 6/23/2021 18:22:06'!
ERROR!
!Store methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:22:40' prior: 50863569!
listCart: aCartID
	|items list|
	
	list := Dictionary new.
	
	items := carts at: aCartID listItems.
	
	items asBag do: [:anItem | list at: anItem put: (items occurrencesOf: anItem)].
	
	^list.! !

!testRun: #StoreTest #test05 stamp: 'GR 6/23/2021 18:22:41'!
ERROR!
!Store methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:23:11' prior: 50863768!
listCart: aCartID
	|items list|
	
	list := Dictionary new.
	
	items := (carts at: aCartID) listItems.
	
	items asBag do: [:anItem | list at: anItem put: (items occurrencesOf: anItem)].
	
	^list.! !

!testRun: #StoreTest #test05 stamp: 'GR 6/23/2021 18:23:14'!
PASSED!

!testRun: #StoreTest #test01 stamp: 'GR 6/23/2021 18:23:14'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/23/2021 18:23:14'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/23/2021 18:23:14'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/23/2021 18:23:14'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/23/2021 18:23:14'!
PASSED!

Object subclass: #Store
	instanceVariableNames: 'cart catalog lastCart carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Store category: 'TusLibros' stamp: 'GR 6/23/2021 18:23:25'!
Object subclass: #Store
	instanceVariableNames: 'cart catalog lastCart carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #Store
	instanceVariableNames: 'cart catalog lastCart carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Store category: 'TusLibros' stamp: 'GR 6/23/2021 18:23:29'!
Object subclass: #Store
	instanceVariableNames: 'cart catalog lastCart carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #Store
	instanceVariableNames: 'catalog lastCart carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Store category: 'TusLibros' stamp: 'GR 6/23/2021 18:24:49'!
Object subclass: #Store
	instanceVariableNames: 'catalog lastCart carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #StoreTest #test01 stamp: 'GR 6/23/2021 18:25:03'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/23/2021 18:25:03'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/23/2021 18:25:03'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/23/2021 18:25:03'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/23/2021 18:25:03'!
PASSED!
!Store methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:25:24' prior: 50863758!
addToCart: aCartID bookISBN: anISBN bookQuantity: aQuantity
	|cart|
	cart := carts at: aCartID .
	
	cart add: aQuantity of: anISBN.! !

!testRun: #StoreTest #test03 stamp: 'GR 6/23/2021 18:27:39'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/23/2021 18:27:39'!
PASSED!

!testRun: #StoreTest #test01 stamp: 'GR 6/23/2021 18:27:39'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/23/2021 18:27:39'!
PASSED!

!testRun: #StoreTest #test01 stamp: 'GR 6/23/2021 18:27:57'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/23/2021 18:27:57'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/23/2021 18:27:57'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/23/2021 18:27:57'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/23/2021 18:27:57'!
PASSED!
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:28:07'!
test06

	|interface cartIDA cartIDB listCartA listCartB book|
	
	book := testObjectsFactory itemSellByTheStore .
	interface := Store with: testObjectsFactory defaultCatalog .
	cartIDA := interface createCartForClientID: 1234 withPassword: 4321.
	cartIDB := interface createCartForClientID: 1234 withPassword: 4321.
	
	interface addToCart: cartIDA bookISBN: book bookQuantity: 1.
	interface addToCart: cartIDB bookISBN: book bookQuantity: 2.	
	
	listCartA := interface listCart: cartIDA.
	listCartB := interface listCart: cartIDB.

	self assert: 1 equals: (listCartA at: book).
	self assert: 2 equals: (listCartB at: book).	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:41:38' prior: 50863876!
test06

	|interface cartIDA cartIDB listCartA listCartB book|
	
	book := testObjectsFactory itemSellByTheStore .
	interface := Store with: testObjectsFactory defaultCatalog .
	cartIDA := interface createCartForClientID: 1234 withPassword: 4321.
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:42:20' prior: 50863386!
test01

	|interface cartID|
	
	interface := Store with: testObjectsFactory defaultCatalog .
	
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	
	self assert: (interface listCart: cartID) isEmpty. 

	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:42:25' prior: 50863369!
test02

	|interface cartID cartList|

	interface := Store with: testObjectsFactory defaultCatalog .
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	
	interface addToCart: cartID bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.	
	cartList := interface listCart: cartID.
	
	self assert: 1 equals: cartList size.
	self assert: 1 equals: (cartList at: testObjectsFactory itemSellByTheStore).

	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:42:30' prior: 50863352!
test03

	|interface cartID cartList|

	interface := Store with: testObjectsFactory defaultCatalog .
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	
	interface addToCart: cartID bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.	
	cartList := interface listCart: cartID.
	
	self assert: 1 equals: cartList size.
	self assert: 1 equals: (cartList at: testObjectsFactory itemSellByTheStore).

	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:42:38' prior: 50863646!
test04

	|interface cartIDA cartIDB|

	interface := Store with: testObjectsFactory defaultCatalog .
	cartIDA := interface createCartForClientID: '1234' withPassword: '1234'.
	cartIDB := interface createCartForClientID: '1234' withPassword: '1234'.
	
	self deny: (cartIDA = cartIDB).
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:42:44' prior: 50863710!
test05

	|interface cartIDA cartIDB listCartA listCartB book|
	
	book := testObjectsFactory itemSellByTheStore .
	interface := Store with: testObjectsFactory defaultCatalog .
	cartIDA := interface createCartForClientID: '1234' withPassword: '1234'.
	cartIDB := interface createCartForClientID: 1234 withPassword: 4321.
	
	interface addToCart: cartIDA bookISBN: book bookQuantity: 1.
	interface addToCart: cartIDB bookISBN: book bookQuantity: 2.	
	
	listCartA := interface listCart: cartIDA.
	listCartB := interface listCart: cartIDB.

	self assert: 1 equals: (listCartA at: book).
	self assert: 2 equals: (listCartB at: book).	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:42:48' prior: 50863967!
test05

	|interface cartIDA cartIDB listCartA listCartB book|
	
	book := testObjectsFactory itemSellByTheStore .
	interface := Store with: testObjectsFactory defaultCatalog .
	cartIDA := interface createCartForClientID: '1234' withPassword: '1234'.
	cartIDB := interface createCartForClientID: '1234' withPassword: '1234'.
	
	interface addToCart: cartIDA bookISBN: book bookQuantity: 1.
	interface addToCart: cartIDB bookISBN: book bookQuantity: 2.	
	
	listCartA := interface listCart: cartIDA.
	listCartB := interface listCart: cartIDB.

	self assert: 1 equals: (listCartA at: book).
	self assert: 2 equals: (listCartB at: book).	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:43:03' prior: 50863899!
test06

	|interface cartIDA book|
	
	book := testObjectsFactory itemSellByTheStore .
	interface := Store with: testObjectsFactory defaultCatalog .
	cartIDA := interface createCartForClientID: '4321' withPassword: '1234'.
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:03' prior: 50864013!
test06

	|interface cartIDA book|
	
	book := testObjectsFactory itemSellByTheStore .
	interface := Store with: testObjectsFactory defaultCatalog  .
	cartIDA := interface createCartForClientID: '4321' withPassword: '1234'.
	
	! !
!Store class methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:51'!
withCatalog: aCatalog

	^self new initializeWith: aCatalog .! !
!MeasureConverterTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:51' prior: 50746140!
testDirectSearching

	self assert: (moneyConverter convert: self onePeso to: self dollar) = (self dollar withCatalog: 1/3).
	self assert: (moneyConverter convert: self oneEuro to: self dollar) = (self dollar withCatalog: 13/10)! !
!MinusInfinityTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:51' prior: 50746614!
testSameDomainAs

	self assert: (minusInfinity sameDomainAs: 1).
	self deny: (minusInfinity sameDomainAs: ((BaseUnit named: 'peso') withCatalog: 1))! !
!BaseUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:51' prior: 50743396!
testFloatMultipliedByUnit

	| kelvin |
	
	kelvin := BaseUnit named: 'kelvin'.
	
	self assert: 5.5 * kelvin = (kelvin withCatalog: 5.5).
	self assert: (5.5 * kelvin) numerator = (kelvin withCatalog: 5.5) numerator.
	self assert: (5.5 * kelvin) denominator = (kelvin withCatalog: 5.5) denominator! !
!SimpleMeasure methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:51' prior: 50753704 overrides: 50752447!
quoFrom: aNumber

	^NullUnit new / unit withCatalog: (aNumber quo: amount)! !
!SimpleMeasureTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:52' prior: 50749985!
testMultiplyFloatByMeasure

	self assert: (1.01 * self tenPesos) = ((NullUnit new * self peso) withCatalog: 1.01*10)

! !
!SimpleMeasureTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:52' prior: 50749997!
testMultiplyIntegerByMeasure

	self assert: (3 * self tenPesos) = ((NullUnit new * self peso) withCatalog: 3*10)

! !
!BaseUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:52' prior: 50743334!
testDivideByNumber

	| kelvin |
	
	kelvin := BaseUnit named: 'kelvin'.
	
	self assert: kelvin / 5 = (kelvin withCatalog: 1/5).
	self assert: (kelvin / 5) numerator = (kelvin withCatalog: 1).
	self assert: (kelvin / 5) denominator = 5.
	
	self assert: kelvin / 5.5 = (kelvin withCatalog: 1/5.5).
	self assert: (kelvin / 5.5) numerator = (kelvin withCatalog: 1/5.5) numerator.
	self assert: (kelvin / 5.5) denominator = (kelvin withCatalog: 1/5.5) denominator! !
!MultipliedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:52' prior: 50746839!
testFloatDividedByUnit

	self assert: (5.5 / meterBySecond) = (5.5 / (meterBySecond withCatalog: 1)).
	self assert: (5.5 / meterBySecond) numerator = 5.5 numerator.
	self assert: (5.5 / meterBySecond) denominator = (meterBySecond withCatalog: 5.5 denominator)! !
!SimpleMeasureTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:52' prior: 50750187!
testTruncated

	self assert: (self meter withCatalog: 1.05) truncated = (self meter withCatalog: 1).
	self assert: (self centimeter withCatalog: 1.05) truncated = (self centimeter withCatalog: 1).
	self assert: ((self peso * self meter ) withCatalog: 1.05) truncated = ((self peso * self meter) withCatalog: 1).
	self assert: ((self peso / self meter ) withCatalog: 1.05) truncated = ((self peso / self meter) withCatalog: 1)	! !
!Unit methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:52' prior: 50751187!
divideSimpleMeasure: aMeasure

	^((NullUnit new / self) * aMeasure unit) withCatalog: aMeasure amount! !
!SimpleMeasureTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:52' prior: 50748698!
testAbs

	self assert: self onePeso abs = self onePeso.
	self assert: (self onePeso unit withCatalog: 0)  abs = (self onePeso unit withCatalog: 0).
	self assert: (self onePeso unit withCatalog: -1)  abs = (self onePeso unit withCatalog: 1)! !
!Unit methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:52' prior: 50751167!
divideInfinity: anInfinity

	^((NullUnit new / self) * anInfinity unit) withCatalog: anInfinity amount! !
!MultipliedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:52' prior: 50746865!
testFloatMultipliedByUnit

	self assert: (5.5 * meterBySecond) = (meterBySecond withCatalog: 5.5).
	self assert: (5.5 * meterBySecond) numerator = (meterBySecond withCatalog: 5.5 numerator).
	self assert: (5.5 * meterBySecond) denominator = 5.5 denominator! !
!Unit methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:52' prior: 50751200!
multiplyInfinity: anInfinity

	^(anInfinity unit * self) withCatalog: anInfinity amount! !
!DividedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:52' prior: 50745503!
testDivideByInteger

	self assert: (meterOverSecond / 5) = (meterOverSecond withCatalog: 1/5).
	self assert: (meterOverSecond / 5) numerator = (meter withCatalog: 1).
	self assert: (meterOverSecond / 5) denominator = (second withCatalog: 5).
! !
!BaseUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:52' prior: 50743608!
testMeasureCreation

	| meter |
	
	meter := BaseUnit named: 'meter'.
	self assert: (meter withCatalog: 10) = (SimpleMeasure amount: 10 unit: meter)! !
!CompoundMeasureTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:52' prior: 50744730!
testIsCompoundMeasurement

	self assert: ((self peso withCatalog: 10.01) + (self dollar withCatalog: 20.5)) isCompoundMeasure! !
!DividedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:52' prior: 50745598!
testFloatMultipliedByUnit

	self assert: (5.5 * meterOverSecond) = (meterOverSecond withCatalog: 5.5).
	self assert: (5.5 * meterOverSecond) numerator = (meter withCatalog: 5.5 numerator).
	self assert: (5.5 * meterOverSecond) denominator = (second withCatalog: 5.5 denominator)! !
!ConversionTableTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:52' prior: 50745182!
testDerivedUnitIsEquivalentTo

	| table quarter fortyQuarters |
	
	quarter := units quarter.
	fortyQuarters := quarter withCatalog: 40.
	
	table := ConversionTable new.
	table measure: self oneHundredCents isEquivalentTo: self tenDollars.
	
	self assert: table unitConversionRules size = 2.
	self shouldnt: [ table unitConversionRuleFrom: self peso to: self dollar ] raise: NoUnitConversionRuleException.
	self shouldnt: [ table unitConversionRuleFrom: self dollar to: self peso ] raise: NoUnitConversionRuleException.
	self shouldnt: [ table unitConversionRuleFrom: self cents to: self dollar ] raise: NoUnitConversionRuleException.
	self shouldnt: [ table unitConversionRuleFrom: self dollar to: self cents ] raise: NoUnitConversionRuleException.
	self shouldnt: [ table unitConversionRuleFrom: self cents to: quarter ] raise: NoUnitConversionRuleException.
	self shouldnt: [ table unitConversionRuleFrom: quarter to: self cents ] raise: NoUnitConversionRuleException.
	
	self assert: ((table unitConversionRuleFrom: self peso to: self dollar) value: self onePeso) = self tenDollars.
	self assert: ((table unitConversionRuleFrom: self peso to: self dollar) value: self oneHundredCents) = self tenDollars.

	self assert: ((table unitConversionRuleFrom: self cents to: self dollar) value: self onePeso) = self tenDollars.
	self assert: ((table unitConversionRuleFrom: self cents to: self dollar) value: self oneHundredCents) = self tenDollars.

	self assert: ((table unitConversionRuleFrom: self dollar to: self peso) value: self tenDollars) = self onePeso.
	self assert: ((table unitConversionRuleFrom: self dollar to: self cents) value: self tenDollars) = self oneHundredCents.

	self assert: ((table unitConversionRuleFrom: quarter to: self peso) value: fortyQuarters) = self onePeso.
	self assert: ((table unitConversionRuleFrom: quarter to: self cents ) value: fortyQuarters) = self oneHundredCents! !
!MultipliedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:52' prior: 50746890!
testIntegerDividedByUnit

	self assert: (5 / meterBySecond) = (5 / (meterBySecond withCatalog: 1)).
	self assert: (5 / meterBySecond) numerator = 5.
	self assert: (5 / meterBySecond) denominator = (meterBySecond withCatalog: 1).
	
! !
!MeasureConverterTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:52' prior: 50746149!
testIndirectSearching

	self assert: (moneyConverter convert: self onePeso to: self euro) = (self euro withCatalog: 10/39).
	self assert: (moneyConverter convert: self oneEuro to: self peso) = (self peso withCatalog: 39/10)! !
!MultipliedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:53' prior: 50746900!
testIntegerDividedByUnitTwice

	| kelvin |
	kelvin := BaseUnit named: 'kelvin'.
	
	self assert: (5 / kelvin / meterBySecond) = (5 / (kelvin * meterBySecond withCatalog: 1)).
	self assert: (5 / kelvin / meterBySecond) numerator = 5.
	self assert: (5 / kelvin / meterBySecond) denominator = (kelvin * meterBySecond withCatalog: 1).
	
! !
!SimpleMeasureTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:53' prior: 50749763!
testDivisionFractionByMeasure

	self assert: ((1/3) / self tenPesos) = ((NullUnit new / self peso) withCatalog: (1/3)/10)

! !
!BaseUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:53' prior: 50743370!
testFloatDividedByUnit

	| kelvin |
	
	kelvin := BaseUnit named: 'kelvin'.
	
	self assert: (5.5 / kelvin) = (5.5 / (kelvin withCatalog: 1)).
	self assert: (5.5 / kelvin) numerator = 5.5 numerator.
	self assert: (5.5 / kelvin) denominator = (kelvin withCatalog: 5.5 denominator)! !
!DividedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:53' prior: 50745484!
testDivideByInfinity

	self assert: meterOverSecond / infinity = (meterOverSecond withCatalog: 0).
	self assert: (meterOverSecond / infinity) numerator = (meter withCatalog: 0).
	self assert: (meterOverSecond / infinity) denominator = (second withCatalog: 1).
	self
		should: [infinity / meterOverSecond]
		raise: IndeterminateOperationException
		withExceptionDo: [:anException |
			self assert:
				anException description =
					'The Division operation is indeterminate between Infinity and meter/second']! !
!DividedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:53' prior: 50745698!
testMultiplyByFloat

	self assert: (meterOverSecond * 5) = (meterOverSecond withCatalog: 5).
	self assert: (meterOverSecond * 5) numerator = (meter withCatalog: 5).
	self assert: (meterOverSecond * 5) denominator = (second withCatalog: 1).
! !
!PlusInfinity methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:53' prior: 50754449!
multiplyByUnit: aUnit

	^aUnit withCatalog: self! !
!SimpleMeasure methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:53' prior: 50753667 overrides: 50752422!
moduloSimpleMeasure: aMeasure

	| numerator denominator |
	
	numerator := aMeasure convertToBaseUnit.
	denominator := self convertToBaseUnit.
	
	^numerator unit / denominator unit 
		withCatalog: numerator amount // denominator amount! !
!SimpleMeasure methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:53' prior: 50753738 overrides: 50752481!
remainderSimpleMeasure: aMeasure

	| numerator denominator |
	
	numerator := aMeasure convertToBaseUnit.
	denominator := self convertToBaseUnit.
	
	^numerator baseUnit withCatalog: numerator amount \\ denominator amount! !
!ConversionTableTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:53' prior: 50745074!
oneHundredCents

	^self cents withCatalog: 100! !
!DividedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:53' prior: 50745610!
testFloatMultipliedByUnitTwice

	| kelvin |
	kelvin := BaseUnit named: 'kelvin'.
	
	self assert: (5.5 * kelvin * meterOverSecond) = (kelvin * meterOverSecond withCatalog: 5.5).
	self assert: (5.5 * kelvin * meterOverSecond) numerator = (kelvin * meter withCatalog: 5.5 numerator).
	self assert: (5.5 * kelvin * meterOverSecond) denominator = (second withCatalog: 5.5 denominator)! !
!CompoundMeasureTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:53' prior: 50744441!
testIsFraction

	self deny: ((self peso withCatalog: 10.01) + (self dollar withCatalog: 20.5)) isFraction! !
!MultipliedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:53' prior: 50747059!
testMeasureCreation

	self assert: (meterBySecond withCatalog: 10) = (SimpleMeasure amount: 10 unit: meterBySecond)! !
!MultipliedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:53' prior: 50746964!
testMultiplyByInfinity

	self assert: meterBySecond * infinity = (meterBySecond withCatalog: infinity).
	self assert: infinity * meterBySecond = (meterBySecond withCatalog: infinity).
	self assert: (meterBySecond * infinity) numerator = (meterBySecond withCatalog: infinity).
	self assert: (meterBySecond * infinity) denominator = 1! !
!BaseUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:53' prior: 50743509!
testMultiplyByMinusInfinity

	| kelvin |

	kelvin := BaseUnit named: 'kelvin'.
	self assert: kelvin * minusInfinity = (kelvin withCatalog: minusInfinity).
	self assert: minusInfinity * kelvin = (kelvin withCatalog: minusInfinity).
	self assert: (kelvin * minusInfinity) numerator = (kelvin withCatalog: minusInfinity).
	self assert: (kelvin * minusInfinity) denominator = 1! !
!MultipliedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:53' prior: 50746977!
testMultiplyByInteger

	self assert: (meterBySecond * 5) = (meterBySecond withCatalog: 5).
	self assert: (meterBySecond * 5) numerator = (meterBySecond withCatalog: 5).
	self assert: (meterBySecond * 5) denominator = 1.
! !
!MultipliedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:53' prior: 50746780!
testDivideByInteger

	self assert: (meterBySecond / 5) = (meterBySecond withCatalog: 1/5).
	self assert: (meterBySecond / 5) numerator = (meterBySecond withCatalog: 1).
	self assert: (meterBySecond / 5) denominator = 5.
	
! !
!EvaluationTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:53' prior: 50746037!
testTruncated

	| formula |
	
	formula := DummyEvaluation of: (peso withCatalog: 1.3).
	self assert: formula truncated = (peso withCatalog: 1)! !
!PlusInfinity methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:54' prior: 50754409!
divideByUnit: aUnit

	^aUnit withCatalog: 1 / self! !
!BaseUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:54' prior: 50743408!
testFloatMultipliedByUnitTwice

	| kelvin meter |
	
	kelvin := BaseUnit named: 'kelvin'.
	meter := BaseUnit named: 'meter'.
	
	self assert: 5.5 * kelvin * meter = (kelvin * meter withCatalog: 5.5).
	self assert: (5.5 * kelvin * meter) numerator = (kelvin * meter withCatalog: 5.5) numerator.
	self assert: (5.5 * kelvin * meter) denominator = (kelvin * meter withCatalog: 5.5) denominator! !
!EvaluationTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:54' prior: 50745889!
tenPesos

	^peso withCatalog: 10! !
!BaseUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:54' prior: 50743471!
testIntegerMultipliedByUnitTwice

	| kelvin meter |
	
	kelvin := BaseUnit named: 'kelvin'.
	meter := BaseUnit named: 'meter'.
	
	self assert: 5 * kelvin * meter = (kelvin * meter withCatalog: 5).
	self assert: (5 * kelvin * meter) numerator = (kelvin * meter withCatalog: 5).
	self assert: (5 * kelvin * meter) denominator = 1.
! !
!ConversionTableTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:54' prior: 50745070!
oneDollar
	
	^self dollar withCatalog: 1! !
!MinusInfinityTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:54' prior: 50746574!
testEqualsCompoundMeasure

	| measureBag |

	measureBag := ((BaseUnit named: 'peso') withCatalog: 5) + ((BaseUnit named: 'dollar') withCatalog: 5).
	self assert: (minusInfinity equalsCompoundMeasure: minusInfinity).
	self deny: (minusInfinity equalsCompoundMeasure: measureBag)! !
!MinusInfinityTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:54' prior: 50746585!
testEqualsMeasure

	| measure |

	measure := (BaseUnit named: 'peso') withCatalog: 5.
	self assert: (minusInfinity equalsSimpleMeasure: minusInfinity).
	self deny: (minusInfinity equalsSimpleMeasure: measure)! !
!Number methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:54' prior: 50755376!
multiplyByUnit: aUnit

	^aUnit withCatalog: self! !
!ProportionalUnitConversionFunctionTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:54' prior: 50748369!
testInvalidValues

	| cent |
	
	self 
		should: [ ProportionalUnitConversionFunction measure: (peso withCatalog:0) isProportionalTo: tenDollars ] 
		raise: InvalidProportionalUnitConversionFunctionException
		withExceptionDo: [ :anException |
			self assert: anException sourceMeasure = (peso withCatalog: 0).
			self assert: anException equivalentMeasure = tenDollars.
			self assert: anException description notNil ].
		
	cent := ProportionalDerivedUnit baseUnit: peso conversionFactor: 1/100 named: 'cent'.
	self 
		should: [ ProportionalUnitConversionFunction measure: onePeso isProportionalTo: (cent withCatalog: 100) ] 
		raise: InvalidProportionalUnitConversionFunctionException
		withExceptionDo: [ :anException |
			self assert: anException sourceMeasure = onePeso.
			self assert: anException equivalentMeasure = (cent withCatalog: 100).
			self assert: anException description notNil ]! !
!PlusInfinityTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:54' prior: 50747933!
testSameUnitAs

	self assert: (infinity sameUnitAs: 1).
	self deny: (infinity sameUnitAs: ((BaseUnit named: 'peso') withCatalog: 1))! !
!SimpleMeasureTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:54' prior: 50749757!
testDivisionFloatByMeasure

	self assert: (1.01 / self tenPesos) = ((NullUnit new / self peso) withCatalog: 1.01/10)

! !
!Unit methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:54' prior: 50751215!
multiplySimpleMeasure: aMeasure

	^(aMeasure unit * self) withCatalog: aMeasure amount! !
!CircularReadStream methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:54' prior: 50750753!
distanceFrom: anObject toObjectPosition: aToObjectPosition

	| fromObjectPosition steps |

	fromObjectPosition := collection indexOf: anObject.
	steps := aToObjectPosition >= fromObjectPosition 
		ifTrue: [aToObjectPosition - fromObjectPosition]
		ifFalse: [collection size - fromObjectPosition + aToObjectPosition].
	^unit withCatalog: steps! !
!ConversionTableTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:54' prior: 50745078!
onePeso

	^self peso withCatalog: 1! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:54' prior: 50768192!
testInvalidNextANumberOfYears

	| anyUnit |
	
	anyUnit := BaseUnit named: 'Any Unit'.
	
	self should: [ (GregorianYear number: 2004) next: 1] raise: CanNotConvertMeasureException.
	self should: [ (GregorianYear number: 2004) next: (anyUnit withCatalog: 1) ] raise: CanNotConvertMeasureException.
	! !
!MultipliedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:54' prior: 50746924!
testIntegerMultipliedByUnitTwice

	| kelvin |
	kelvin := BaseUnit named: 'kelvin'.

	self assert: (5 * kelvin * meterBySecond) = (kelvin * meterBySecond withCatalog: 5).
	self assert: (5 * kelvin * meterBySecond) numerator = (kelvin * meterBySecond withCatalog: 5).
	self assert: (5 * kelvin * meterBySecond) denominator = 1.
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:54' prior: 50863921!
test02

	|interface cartID cartList|

	interface := Store withCatalog: testObjectsFactory defaultCatalog .
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	
	interface addToCart: cartID bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.	
	cartList := interface listCart: cartID.
	
	self assert: 1 equals: cartList size.
	self assert: 1 equals: (cartList at: testObjectsFactory itemSellByTheStore).

	! !
!CompoundMeasureTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:55' prior: 50744723!
testTruncated

	self assert: ((self peso withCatalog: 10.01) + (self dollar withCatalog: 20.5)) truncated = (self tenPesos + self twentyDollars)! !
!PlusInfinityTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:55' prior: 50747889!
testEqualsCompoundMeasure

	| measureBag |

	measureBag := ((BaseUnit named: 'peso') withCatalog: 5) + ((BaseUnit named: 'dollar') withCatalog: 5).
	self assert: (infinity equalsCompoundMeasure: infinity).
	self deny: (infinity equalsCompoundMeasure: measureBag)! !
!SimpleMeasureTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:55' prior: 50749769!
testDivisionIntegerByMeasure

	self assert: (1 / self tenPesos) = ((NullUnit new / self peso) withCatalog: 1/10)

! !
!BaseUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:55' prior: 50743423!
testIntegerDividedByUnit

	| kelvin |
	
	kelvin := BaseUnit named: 'kelvin'.
	
	self assert: (5 / kelvin) = (SimpleMeasure amount: 5 unit: NullUnit new / kelvin).
	self assert: (5 / (kelvin withCatalog: 1)) = (SimpleMeasure amount: 5 unit: NullUnit new / kelvin).
	self assert: (5 / kelvin) numerator = 5.
	self assert: (5 / kelvin) denominator = (kelvin withCatalog: 1).
	self assert: (5 / (kelvin withCatalog: 1)) numerator = 5.
	self assert: (5 / (kelvin withCatalog: 1)) denominator = (kelvin withCatalog: 1).
	
! !
!MultipliedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:55' prior: 50746790!
testDivideByMinusInfinity

	self assert: meterBySecond / minusInfinity = (meterBySecond withCatalog: 0).
	self
		should: [minusInfinity / meterBySecond]
		raise: IndeterminateOperationException
		withExceptionDo: [:anException |
			self assert:
				anException description =
					'The Division operation is indeterminate between Minus Infinity and meter.second'].
	self assert: (meterBySecond / minusInfinity) numerator = (meterBySecond withCatalog: 0).
	self assert: (meterBySecond / minusInfinity) denominator = 1! !
!Unit methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:55' prior: 50751088!
denominatorOf: aNumber

	^self denominator withCatalog: aNumber denominator
	
! !
!DividedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:55' prior: 50745708!
testMultiplyByInfinity

	self assert: meterOverSecond * infinity = (meterOverSecond withCatalog: infinity).
	self assert: infinity * meterOverSecond = (meterOverSecond withCatalog: infinity).
	self assert: (meterOverSecond * infinity) numerator = (meter withCatalog: infinity).
	self assert: (meterOverSecond * infinity) denominator = (second withCatalog: 1)! !
!PlusInfinityTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:55' prior: 50747926!
testSameDomainAs

	self assert: (infinity sameDomainAs: 1).
	self deny: (infinity sameDomainAs: ((BaseUnit named: 'peso') withCatalog: 1))! !
!SimpleMeasureTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:55' prior: 50748648!
testRemainderByMeasure

	self assert: (self tenMeters \\ self tenMeters) = (self meter withCatalog: 10\\10).
	self assert: (self oneMeter \\ self tenMeters) = (self meter withCatalog: 1\\10).
	self assert: (self tenMeters \\ self oneSecond) = (self meter withCatalog: 10\\1).
	self assert: (self tenMeters \\ self threeSeconds) = (self meter withCatalog: 10\\3).

	
! !
!Unit methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:55' prior: 50751172!
divideMinusInfinity: aMinusInfinity

	^((NullUnit new / self) * aMinusInfinity unit) withCatalog: aMinusInfinity amount! !
!MultipliedUnit methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:55' prior: 50751480!
divFrom: aNumber

	^(DividedUnit nullUnit: aNumber unit multipliedUnit: self) withCatalog: aNumber! !
!Unit methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:55' prior: 50751205!
multiplyMinusInfinity: aMinusInfinity

	^(aMinusInfinity unit * self) withCatalog: aMinusInfinity amount! !
!CircularReadStream methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:55' prior: 50750815!
next

	^self next: (unit withCatalog: 1)! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:55' prior: 50863955!
test04

	|interface cartIDA cartIDB|

	interface := Store withCatalog: testObjectsFactory defaultCatalog .
	cartIDA := interface createCartForClientID: '1234' withPassword: '1234'.
	cartIDB := interface createCartForClientID: '1234' withPassword: '1234'.
	
	self deny: (cartIDA = cartIDB).
	! !
!MultipliedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:55' prior: 50746987!
testMultiplyByMinusInfinity

	self assert: meterBySecond * minusInfinity = (meterBySecond withCatalog: minusInfinity).
	self assert: minusInfinity * meterBySecond = (meterBySecond withCatalog: minusInfinity).
	self assert: (meterBySecond * minusInfinity) numerator = (meterBySecond withCatalog: minusInfinity).
	self assert: (meterBySecond * minusInfinity) denominator = 1! !
!DividedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:55' prior: 50745722!
testMultiplyByInteger

	self assert: (meterOverSecond * 5) = (meterOverSecond withCatalog: 5).
	self assert: (meterOverSecond * 5) numerator = (meter withCatalog: 5).
	self assert: (meterOverSecond * 5) denominator = (second withCatalog: 1).
! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:55' prior: 50863938!
test03

	|interface cartID cartList|

	interface := Store withCatalog: testObjectsFactory defaultCatalog .
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	
	interface addToCart: cartID bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.	
	cartList := interface listCart: cartID.
	
	self assert: 1 equals: cartList size.
	self assert: 1 equals: (cartList at: testObjectsFactory itemSellByTheStore).

	! !
!SimpleMeasureTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:56' prior: 50749991!
testMultiplyFractionByMeasure

	self assert: ((1/3) * self tenPesos) = ((NullUnit new * self peso) withCatalog: (1/3)*10)

! !
!DividedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:56' prior: 50745513!
testDivideByMinusInfinity

	self assert: meterOverSecond / minusInfinity = (meterOverSecond withCatalog: 0).
	self assert: (meterOverSecond / minusInfinity) numerator = (meter withCatalog: 0).
	self assert: (meterOverSecond / minusInfinity) denominator = (second withCatalog: 1).
	self
		should: [minusInfinity / meterOverSecond]
		raise: IndeterminateOperationException
		withExceptionDo: [:anException |
			self assert:
				anException description =
					'The Division operation is indeterminate between Minus Infinity and meter/second']! !
!PlusInfinityTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:56' prior: 50747900!
testEqualsMeasure

	| measure |

	measure := (BaseUnit named: 'peso') withCatalog: 5.
	self assert: (infinity equalsSimpleMeasure: infinity).
	self deny: (infinity equalsSimpleMeasure: measure)! !
!BaseUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:56' prior: 50743496!
testMultiplyByInfinity

	| kelvin |

	kelvin := BaseUnit named: 'kelvin'.
	self assert: kelvin * infinity = (kelvin withCatalog: infinity).
	self assert: infinity * kelvin = (kelvin withCatalog: infinity).
	self assert: (kelvin * infinity) numerator = (kelvin withCatalog: infinity).
	self assert: (kelvin * infinity) denominator = 1! !
!ConversionTableTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:56' prior: 50745082!
tenDollars
	
	^self dollar withCatalog: 10! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:56' prior: 50768203!
testInvalidPreviousANumberOfYears

	| anyUnit |
	
	anyUnit := BaseUnit named: 'Any Unit'.
	
	self should: [ (GregorianYear number: 2004) previous: 1] raise: CanNotConvertMeasureException.
	self should: [ (GregorianYear number: 2004) previous: (anyUnit withCatalog: 1) ] raise: CanNotConvertMeasureException.
	

	
	
	
	! !
!MinusInfinity methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:56' prior: 50754041!
divideByUnit: aUnit

	^aUnit withCatalog: 1 / self! !
!SimpleMeasure methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:56' prior: 50753694 overrides: 50752442!
multiplySimpleMeasure: aMeasure

	| leftFactor rightFactor |
	
	leftFactor := aMeasure convertToBaseUnit.
	rightFactor := self convertToBaseUnit.
	
	^leftFactor unit * rightFactor unit 
		withCatalog: leftFactor amount * rightFactor amount! !
!SimpleMeasureTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:56' prior: 50748742!
testIsFraction

	self deny: (self meter withCatalog: 1) isFraction.
	self deny: (self centimeter withCatalog: 12) isFraction.
	self deny: ((self peso * self meter) withCatalog: 44) isFraction.
	self deny: ((self peso / self meter) withCatalog: 1234) isFraction.
	self deny: (self meter withCatalog: 1.05) isFraction.
	self deny: (self centimeter withCatalog: 1.05) isFraction.
	self deny: ((self peso * self meter) withCatalog: 1.05) isFraction.
	self deny: ((self peso / self meter) withCatalog: 1.05) isFraction

! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:56' prior: 50863990!
test05

	|interface cartIDA cartIDB listCartA listCartB book|
	
	book := testObjectsFactory itemSellByTheStore .
	interface := Store withCatalog: testObjectsFactory defaultCatalog .
	cartIDA := interface createCartForClientID: '1234' withPassword: '1234'.
	cartIDB := interface createCartForClientID: '1234' withPassword: '1234'.
	
	interface addToCart: cartIDA bookISBN: book bookQuantity: 1.
	interface addToCart: cartIDB bookISBN: book bookQuantity: 2.	
	
	listCartA := interface listCart: cartIDA.
	listCartB := interface listCart: cartIDB.

	self assert: 1 equals: (listCartA at: book).
	self assert: 2 equals: (listCartB at: book).	! !
!MinusInfinity methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:56' prior: 50754082!
multiplyByUnit: aUnit

	^aUnit withCatalog: self! !
!BaseUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:56' prior: 50743544!
testMultiplyByNumber

	| kelvin |
	
	kelvin := BaseUnit named: 'kelvin'.
	
	self assert: kelvin * 5 = (kelvin withCatalog: 5).
	
	self assert: (kelvin * 5) numerator = (kelvin withCatalog: 5).
	self assert: (kelvin * 1) denominator = 1.
	
	self assert: kelvin * 5.5 = (kelvin withCatalog: 5.5).
	self assert: (kelvin * 5.5) numerator = (kelvin withCatalog: 5.5) numerator.
	self assert: (kelvin * 5.5) denominator = (kelvin withCatalog: 5.5) denominator! !
!CircularReadStream methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:56' prior: 50750824!
previous

	^self previous: (unit withCatalog: 1)! !
!DividedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:56' prior: 50745732!
testMultiplyByMinusInfinity

	self assert: meterOverSecond * minusInfinity = (meterOverSecond withCatalog: minusInfinity).
	self assert: minusInfinity * meterOverSecond = (meterOverSecond withCatalog: minusInfinity).
	self assert: (meterOverSecond * minusInfinity) numerator = (meter withCatalog: minusInfinity).
	self assert: (meterOverSecond * minusInfinity) denominator = (second withCatalog: 1)! !
!EvaluationTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:56' prior: 50746001!
testIsCompoundMeasure

	self deny: formulaOfTenPesos isCompoundMeasure.
	self assert: (DummyEvaluation of: (peso withCatalog: 1) + (dollar withCatalog: 1)) isCompoundMeasure! !
!SimpleMeasureTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:56' prior: 50748782!
testRoundTo

	self assert: ((SimpleMeasure amount: 1 unit: self celsius) roundTo: 1) = (self celsius withCatalog: 1).
	self assert: ((SimpleMeasure amount: 1 unit: self celsius) roundTo: 0.1) = (self celsius withCatalog: 1).
	self assert: ((SimpleMeasure amount: 1.4 unit: self celsius) roundTo: 1) = (self celsius withCatalog: 1).
	self assert: ((SimpleMeasure amount: 1.5 unit: self celsius) roundTo: 1) = (self celsius withCatalog: 2).
	self assert: ((SimpleMeasure amount: 1.09 unit: self celsius) roundTo: 1) = (self celsius withCatalog: 1).
	self assert: ((SimpleMeasure amount: -1 unit: self celsius) roundTo: 1) = (self celsius withCatalog: -1).
	self assert: ((SimpleMeasure amount: -1.1 unit: self celsius) roundTo: 1) = (self celsius withCatalog: -1)! !
!MultipliedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:56' prior: 50746850!
testFloatDividedByUnitTwice

	| kelvin |
	kelvin := BaseUnit named: 'kelvin'.
	
	self assert: (5.5 / kelvin / meterBySecond) = (5.5 / (kelvin * meterBySecond withCatalog: 1)).
	self assert: (5.5 / kelvin / meterBySecond) numerator = 5.5 numerator.
	self assert: (5.5 / kelvin / meterBySecond) denominator = (kelvin * meterBySecond withCatalog: 5.5 denominator)! !
!ProportionalUnitConversionFunctionTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:56' prior: 50748399!
testValidValues

	| function |
	
	function := ProportionalUnitConversionFunction measure: onePeso isProportionalTo: tenDollars.
	self assert: (function value: (peso withCatalog: 3)) = (dollar withCatalog: 30).
	self assert: (function value: onePeso) = tenDollars.

	function := ProportionalUnitConversionFunction measure: tenDollars isProportionalTo: onePeso.
	self assert: (function value:tenDollars) = onePeso.
	self assert: (function value:(dollar withCatalog: 1)) = (onePeso/10)
	! !
!DividedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:57' prior: 50745581!
testFloatDividedByUnitTwice

	| secondOverMeter kelvin |
	secondOverMeter := meterOverSecond reciprocal.
	kelvin := BaseUnit named: 'kelvin'.
	
	self assert: (5.5 / kelvin / meterOverSecond) = (secondOverMeter * (NullUnit new / kelvin) withCatalog: 5.5).
	self assert: (5.5 / kelvin / meterOverSecond) numerator = (second withCatalog: 5.5 numerator).
	self assert: (5.5 / kelvin / meterOverSecond) denominator = (kelvin * meter withCatalog: 5.5 denominator)! !
!DividedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:57' prior: 50745654!
testIntegerMultipliedByUnit

	self assert: (5 * meterOverSecond) = (meterOverSecond withCatalog: 5).
	self assert: (5 * meterOverSecond) numerator = (meter withCatalog: 5).
	self assert: (5 * meterOverSecond) denominator = (second withCatalog: 1).
! !
!DividedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:57' prior: 50745567!
testFloatDividedByUnit

	| secondOverMeter |
	secondOverMeter := meterOverSecond reciprocal.
	
	self assert: (5.5 / meterOverSecond) = (secondOverMeter withCatalog: 5.5).
	self assert: (5.5 / meterOverSecond) numerator = (second withCatalog: 5.5 numerator).
	self assert: (5.5 / meterOverSecond) denominator = (meter withCatalog: 5.5 denominator)! !
!EvaluationTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:57' prior: 50745886!
tenDollars
	
	^dollar withCatalog: 10! !
!BaseUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:57' prior: 50743382!
testFloatDividedByUnitTwice

	| kelvin meter |
	
	kelvin := BaseUnit named: 'kelvin'.
	meter := BaseUnit named: 'meter'.
	
	self assert: (5.5 / kelvin / meter) = (5.5 / (kelvin * meter withCatalog: 1)).
	self assert: (5.5 / kelvin / meter ) numerator = 5.5 numerator.
	self assert: (5.5 / kelvin / meter) denominator = (kelvin * meter withCatalog: 5.5 denominator)! !
!MeasureConverterTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:57' prior: 50746172!
testSameDomainConversion

	| cents |
	
	cents := ProportionalDerivedUnit baseUnit: self peso conversionFactor: 1/100 named: 'cent'.
	
	self assert: (moneyConverter convert: self onePeso to: self peso) = self onePeso.
	self assert: (moneyConverter convert: self onePeso to: cents) = (cents withCatalog: 100)! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:57' prior: 50863910!
test01

	|interface cartID|
	
	interface := Store withCatalog: testObjectsFactory defaultCatalog .
	
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	
	self assert: (interface listCart: cartID) isEmpty. 

	! !
!MinusInfinity methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:57' prior: 50754260 overrides: 50752596!
to: stop

	^self to: stop by: (self unit withCatalog: 1)! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:57' prior: 50864024!
test06

	|interface cartIDA book|
	
	book := testObjectsFactory itemSellByTheStore .
	interface := Store withCatalog: testObjectsFactory defaultCatalog  .
	cartIDA := interface createCartForClientID: '4321' withPassword: '1234'.
	
	! !
!BaseUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:57' prior: 50743275!
testDivideByInfinity

	| kelvin |

	kelvin := BaseUnit named: 'kelvin'.
	self assert: kelvin / infinity = (kelvin withCatalog: 1 / infinity).
	self assert: (kelvin / infinity) numerator = 0.
	self assert: (kelvin / infinity) denominator = 1.
	self
		should: [infinity / kelvin]
		raise: IndeterminateOperationException
		withExceptionDo: [:anException |
			self assert:
				anException description =
					'The Division operation is indeterminate between Infinity and kelvin']! !
!BaseUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:57' prior: 50743441!
testIntegerDividedByUnitTwice

	| kelvin meter |
	
	kelvin := BaseUnit named: 'kelvin'.
	meter := BaseUnit named: 'meter'.
	
	self assert: (5 / kelvin / meter) = (SimpleMeasure amount: 5 unit: NullUnit new / (kelvin * meter)).
	self assert: (5 / kelvin / meter) numerator = 5.
	self assert: (5 / kelvin / meter) denominator = (kelvin * meter withCatalog: 1).
	
! !
!DividedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:57' prior: 50745625!
testIntegerDividedByUnit

	| secondOverMeter |
	secondOverMeter := meterOverSecond reciprocal.
	
	self assert: (5 / meterOverSecond) = (secondOverMeter withCatalog: 5).
	self assert: (5 / meterOverSecond) numerator = (second withCatalog: 5).
	self assert: (5 / meterOverSecond) denominator = (meter withCatalog: 1).
	! !
!DividedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:57' prior: 50745638!
testIntegerDividedByUnitTwice

	| secondOverMeter kelvin |
	secondOverMeter := meterOverSecond reciprocal.
	kelvin := BaseUnit named: 'kelvin'.
	
	self assert: (5 / kelvin / meterOverSecond) = (secondOverMeter * (NullUnit new / kelvin) withCatalog: 5).
	self assert: (5 / kelvin / meterOverSecond) numerator = (second withCatalog: 5).
	self assert: (5 / kelvin / meterOverSecond) denominator = (kelvin * meter withCatalog: 1).
	
! !
!DividedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:57' prior: 50745806!
testMeasureCreation

	self assert: (meterOverSecond withCatalog: 10) = (SimpleMeasure amount: 10 unit: meterOverSecond)! !
!BaseUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:57' prior: 50743456!
testIntegerMultipliedByUnit

	| kelvin |
	
	kelvin := BaseUnit named: 'kelvin'.
	
	self assert: (5 * kelvin) = (kelvin withCatalog: 5).
	self assert: (5 * kelvin) numerator = (kelvin withCatalog: 5).
	self assert: (5 * kelvin) denominator = 1.
	self assert: (5 * (kelvin withCatalog: 1)) numerator = (kelvin withCatalog: 5).
	self assert: (5 * (kelvin withCatalog: 1)) denominator = 1.
	
! !
!DividedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:57' prior: 50745472!
testDivideByFloat

	self assert: (meterOverSecond / 5.5) = (meterOverSecond withCatalog: 1/5.5).
	self assert: (meterOverSecond / 5.5) numerator = (meter withCatalog: (1/5.5) numerator).
	self assert: (meterOverSecond / 5.5) denominator = (second withCatalog: (1/5.5) denominator)! !
!GregorianTimespan methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:57' prior: 50769184!
asInterval

	^ArithmeticObjectInterval
		from: from
		to: self to
		by: (duration unit withCatalog: 1)
		intervalStrategy: DefaultPointInTimeIntervalStrategy new.! !
!MultipliedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:58' prior: 50746751!
testDivideByFloat

	self assert: (meterBySecond / 5.5) = (meterBySecond withCatalog: 1/5.5).
	self assert: (meterBySecond / 5.5) numerator = (meterBySecond withCatalog: (1/5.5) numerator).
	self assert: (meterBySecond / 5.5) denominator = (1/5.5) denominator! !
!BaseUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:58' prior: 50743293!
testDivideByMinusInfinity

	| kelvin |

	kelvin := BaseUnit named: 'kelvin'.
	self assert: kelvin / minusInfinity = (kelvin withCatalog: 1 / minusInfinity).
	self assert: (kelvin / minusInfinity) numerator = 0.
	self assert: (kelvin / minusInfinity) denominator = 1.
	self
		should: [minusInfinity / kelvin]
		raise: IndeterminateOperationException
		withExceptionDo: [:anException |
			self assert:
				anException description =
					'The Division operation is indeterminate between Minus Infinity and kelvin']! !
!MultipliedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:58' prior: 50746762!
testDivideByInfinity
 
	self assert: meterBySecond / infinity = (meterBySecond withCatalog: 0).
	self
		should: [infinity / meterBySecond]
		raise: IndeterminateOperationException
		withExceptionDo: [:anException |
			self assert:
				anException description =
					'The Division operation is indeterminate between Infinity and meter.second'].
	self assert: (meterBySecond / infinity) numerator = (meterBySecond withCatalog: 0).
	self assert: (meterBySecond / infinity) denominator = 1! !
!EvaluationTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:58' prior: 50745892!
twentyPesos

	^peso withCatalog: 20! !
!MultipliedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:58' prior: 50746953!
testMultiplyByFloat

	self assert: (meterBySecond * 5.5) = (meterBySecond withCatalog: 5.5).
	self assert: (meterBySecond * 5.5) numerator = (meterBySecond withCatalog: 5.5 numerator).
	self assert: (meterBySecond * 5.5) denominator = 5.5 denominator! !
!NullUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:58' prior: 50747444!
testMeasureCreation

	self assert: (nullUnit withCatalog: 10) = 10! !
!Number methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:58' prior: 50755286!
divideByUnit: aUnit

	^aUnit withCatalog: 1 / self! !
!PlusInfinity methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:58' prior: 50754627 overrides: 50752596!
to: stop

	^self to: stop by: (self unit withCatalog: 1)! !
!ProportionalUnitConversionFunctionTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:58' prior: 50748326 overrides: 16927572!
setUp

	peso := BaseUnit named: 'peso'.
	dollar := BaseUnit named: 'dollar'.	
	onePeso := peso withCatalog: 1.
	tenDollars := dollar withCatalog: 10! !
!MultipliedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:58' prior: 50746876!
testFloatMultipliedByUnitTwice

	| kelvin |
	kelvin := BaseUnit named: 'kelvin'.

	self assert: (5.5 * kelvin * meterBySecond) = (kelvin * meterBySecond withCatalog: 5.5).
	self assert: (5.5 * kelvin * meterBySecond) numerator = (kelvin * meterBySecond withCatalog: 5.5 numerator).
	self assert: (5.5 * kelvin * meterBySecond) denominator = 5.5 denominator! !
!ProportionalDerivedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:58' prior: 50748264!
testMeasureCreation

	self assert: (centavo withCatalog: 10) = (SimpleMeasure amount: 10 unit: centavo)! !
!MinusInfinityTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:58' prior: 50746621!
testSameUnitAs

	self assert: (minusInfinity sameUnitAs: 1).
	self deny: (minusInfinity sameUnitAs: ((BaseUnit named: 'peso') withCatalog: 1))! !
!MultipliedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:58' prior: 50746914!
testIntegerMultipliedByUnit

	self assert: (5 * meterBySecond) = (meterBySecond withCatalog: 5).
	self assert: (5 * meterBySecond) numerator = (meterBySecond withCatalog: 5).
	self assert: (5 * meterBySecond) denominator = 1.
! !
!DividedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:58' prior: 50745665!
testIntegerMultipliedByUnitTwice

	| kelvin |
	kelvin := BaseUnit named: 'kelvin'.
	
	self assert: (5 * kelvin * meterOverSecond) = (kelvin * meterOverSecond withCatalog: 5).
	self assert: (5 * kelvin * meterOverSecond) numerator = (kelvin * meter withCatalog: 5).
	self assert: (5 * kelvin * meterOverSecond) denominator = (second withCatalog: 1).
	
! !
!SimpleMeasure methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:46:58' prior: 50753642 overrides: 50752399!
divideSimpleMeasure: aMeasure

	| numerator denominator |
	
	numerator := aMeasure convertToBaseUnit.
	denominator := self convertToBaseUnit.
	
	^numerator unit / denominator unit 
		withCatalog: numerator amount / denominator amount! !

!methodRemoval: Store class #with: stamp: 'GR 6/23/2021 18:46:58'!
with: aCatalog

	^self new initializeWith: aCatalog .!
!Store class methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:37'!
with: aCatalog

	^self new initializeWith: aCatalog .! !
!BaseUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:37' prior: 50865172!
testFloatDividedByUnitTwice

	| kelvin meter |
	
	kelvin := BaseUnit named: 'kelvin'.
	meter := BaseUnit named: 'meter'.
	
	self assert: (5.5 / kelvin / meter) = (5.5 / (kelvin * meter with: 1)).
	self assert: (5.5 / kelvin / meter ) numerator = 5.5 numerator.
	self assert: (5.5 / kelvin / meter) denominator = (kelvin * meter with: 5.5 denominator)! !
!CircularReadStream methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:37' prior: 50864619!
distanceFrom: anObject toObjectPosition: aToObjectPosition

	| fromObjectPosition steps |

	fromObjectPosition := collection indexOf: anObject.
	steps := aToObjectPosition >= fromObjectPosition 
		ifTrue: [aToObjectPosition - fromObjectPosition]
		ifFalse: [collection size - fromObjectPosition + aToObjectPosition].
	^unit with: steps! !
!MultipliedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:37' prior: 50864652!
testIntegerMultipliedByUnitTwice

	| kelvin |
	kelvin := BaseUnit named: 'kelvin'.

	self assert: (5 * kelvin * meterBySecond) = (kelvin * meterBySecond with: 5).
	self assert: (5 * kelvin * meterBySecond) numerator = (kelvin * meterBySecond with: 5).
	self assert: (5 * kelvin * meterBySecond) denominator = 1.
	
	! !
!PlusInfinityTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:37' prior: 50864771!
testSameDomainAs

	self assert: (infinity sameDomainAs: 1).
	self deny: (infinity sameDomainAs: ((BaseUnit named: 'peso') with: 1))! !
!DividedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:37' prior: 50865274!
testIntegerDividedByUnitTwice

	| secondOverMeter kelvin |
	secondOverMeter := meterOverSecond reciprocal.
	kelvin := BaseUnit named: 'kelvin'.
	
	self assert: (5 / kelvin / meterOverSecond) = (secondOverMeter * (NullUnit new / kelvin) with: 5).
	self assert: (5 / kelvin / meterOverSecond) numerator = (second with: 5).
	self assert: (5 / kelvin / meterOverSecond) denominator = (kelvin * meter with: 1).
	
! !
!SimpleMeasure methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:37' prior: 50864953 overrides: 50752442!
multiplySimpleMeasure: aMeasure

	| leftFactor rightFactor |
	
	leftFactor := aMeasure convertToBaseUnit.
	rightFactor := self convertToBaseUnit.
	
	^leftFactor unit * rightFactor unit 
		with: leftFactor amount * rightFactor amount! !
!EvaluationTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:37' prior: 50865387!
twentyPesos

	^peso with: 20! !
!EvaluationTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:37' prior: 50865052!
testIsCompoundMeasure

	self deny: formulaOfTenPesos isCompoundMeasure.
	self assert: (DummyEvaluation of: (peso with: 1) + (dollar with: 1)) isCompoundMeasure! !
!PlusInfinityTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:37' prior: 50864598!
testSameUnitAs

	self assert: (infinity sameUnitAs: 1).
	self deny: (infinity sameUnitAs: ((BaseUnit named: 'peso') with: 1))! !
!BaseUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:37' prior: 50864059!
testFloatMultipliedByUnit

	| kelvin |
	
	kelvin := BaseUnit named: 'kelvin'.
	
	self assert: 5.5 * kelvin = (kelvin with: 5.5).
	self assert: (5.5 * kelvin) numerator = (kelvin with: 5.5) numerator.
	self assert: (5.5 * kelvin) denominator = (kelvin with: 5.5) denominator! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:37' prior: 50864639!
testInvalidNextANumberOfYears

	| anyUnit |
	
	anyUnit := BaseUnit named: 'Any Unit'.
	
	self should: [ (GregorianYear number: 2004) next: 1] raise: CanNotConvertMeasureException.
	self should: [ (GregorianYear number: 2004) next: (anyUnit with: 1) ] raise: CanNotConvertMeasureException.
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:37' prior: 50865216!
test06

	|interface cartIDA book|
	
	book := testObjectsFactory itemSellByTheStore .
	interface := Store with: testObjectsFactory defaultCatalog  .
	cartIDA := interface createCartForClientID: '4321' withPassword: '1234'.
	
	! !
!SimpleMeasureTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:38' prior: 50864146!
testAbs

	self assert: self onePeso abs = self onePeso.
	self assert: (self onePeso unit with: 0)  abs = (self onePeso unit with: 0).
	self assert: (self onePeso unit with: -1)  abs = (self onePeso unit with: 1)! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:38' prior: 50864984!
test05

	|interface cartIDA cartIDB listCartA listCartB book|
	
	book := testObjectsFactory itemSellByTheStore .
	interface := Store with: testObjectsFactory defaultCatalog .
	cartIDA := interface createCartForClientID: '1234' withPassword: '1234'.
	cartIDB := interface createCartForClientID: '1234' withPassword: '1234'.
	
	interface addToCart: cartIDA bookISBN: book bookQuantity: 1.
	interface addToCart: cartIDB bookISBN: book bookQuantity: 2.	
	
	listCartA := interface listCart: cartIDA.
	listCartB := interface listCart: cartIDB.

	self assert: 1 equals: (listCartA at: book).
	self assert: 2 equals: (listCartB at: book).	! !
!ConversionTableTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:38' prior: 50864221!
testDerivedUnitIsEquivalentTo

	| table quarter fortyQuarters |
	
	quarter := units quarter.
	fortyQuarters := quarter with: 40.
	
	table := ConversionTable new.
	table measure: self oneHundredCents isEquivalentTo: self tenDollars.
	
	self assert: table unitConversionRules size = 2.
	self shouldnt: [ table unitConversionRuleFrom: self peso to: self dollar ] raise: NoUnitConversionRuleException.
	self shouldnt: [ table unitConversionRuleFrom: self dollar to: self peso ] raise: NoUnitConversionRuleException.
	self shouldnt: [ table unitConversionRuleFrom: self cents to: self dollar ] raise: NoUnitConversionRuleException.
	self shouldnt: [ table unitConversionRuleFrom: self dollar to: self cents ] raise: NoUnitConversionRuleException.
	self shouldnt: [ table unitConversionRuleFrom: self cents to: quarter ] raise: NoUnitConversionRuleException.
	self shouldnt: [ table unitConversionRuleFrom: quarter to: self cents ] raise: NoUnitConversionRuleException.
	
	self assert: ((table unitConversionRuleFrom: self peso to: self dollar) value: self onePeso) = self tenDollars.
	self assert: ((table unitConversionRuleFrom: self peso to: self dollar) value: self oneHundredCents) = self tenDollars.

	self assert: ((table unitConversionRuleFrom: self cents to: self dollar) value: self onePeso) = self tenDollars.
	self assert: ((table unitConversionRuleFrom: self cents to: self dollar) value: self oneHundredCents) = self tenDollars.

	self assert: ((table unitConversionRuleFrom: self dollar to: self peso) value: self tenDollars) = self onePeso.
	self assert: ((table unitConversionRuleFrom: self dollar to: self cents) value: self tenDollars) = self oneHundredCents.

	self assert: ((table unitConversionRuleFrom: quarter to: self peso) value: fortyQuarters) = self onePeso.
	self assert: ((table unitConversionRuleFrom: quarter to: self cents ) value: fortyQuarters) = self oneHundredCents! !
!DividedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:38' prior: 50865291!
testMeasureCreation

	self assert: (meterOverSecond with: 10) = (SimpleMeasure amount: 10 unit: meterOverSecond)! !
!MultipliedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:38' prior: 50864731!
testDivideByMinusInfinity

	self assert: meterBySecond / minusInfinity = (meterBySecond with: 0).
	self
		should: [minusInfinity / meterBySecond]
		raise: IndeterminateOperationException
		withExceptionDo: [:anException |
			self assert:
				anException description =
					'The Division operation is indeterminate between Minus Infinity and meter.second'].
	self assert: (meterBySecond / minusInfinity) numerator = (meterBySecond with: 0).
	self assert: (meterBySecond / minusInfinity) denominator = 1! !
!MultipliedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:38' prior: 50864434!
testMultiplyByInfinity

	self assert: meterBySecond * infinity = (meterBySecond with: infinity).
	self assert: infinity * meterBySecond = (meterBySecond with: infinity).
	self assert: (meterBySecond * infinity) numerator = (meterBySecond with: infinity).
	self assert: (meterBySecond * infinity) denominator = 1! !
!SimpleMeasure methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:38' prior: 50864376 overrides: 50752422!
moduloSimpleMeasure: aMeasure

	| numerator denominator |
	
	numerator := aMeasure convertToBaseUnit.
	denominator := self convertToBaseUnit.
	
	^numerator unit / denominator unit 
		with: numerator amount // denominator amount! !
!SimpleMeasure methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:38' prior: 50864388 overrides: 50752481!
remainderSimpleMeasure: aMeasure

	| numerator denominator |
	
	numerator := aMeasure convertToBaseUnit.
	denominator := self convertToBaseUnit.
	
	^numerator baseUnit with: numerator amount \\ denominator amount! !
!DividedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:38' prior: 50864208!
testFloatMultipliedByUnit

	self assert: (5.5 * meterOverSecond) = (meterOverSecond with: 5.5).
	self assert: (5.5 * meterOverSecond) numerator = (meter with: 5.5 numerator).
	self assert: (5.5 * meterOverSecond) denominator = (second with: 5.5 denominator)! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:38' prior: 50865200!
test01

	|interface cartID|
	
	interface := Store with: testObjectsFactory defaultCatalog .
	
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	
	self assert: (interface listCart: cartID) isEmpty. 

	! !
!Unit methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:38' prior: 50864157!
divideInfinity: anInfinity

	^((NullUnit new / self) * anInfinity unit) with: anInfinity amount! !
!CircularReadStream methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:38' prior: 50864814!
next

	^self next: (unit with: 1)! !
!ConversionTableTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:38' prior: 50864928!
tenDollars
	
	^self dollar with: 10! !
!MinusInfinityTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:38' prior: 50864051!
testSameDomainAs

	self assert: (minusInfinity sameDomainAs: 1).
	self deny: (minusInfinity sameDomainAs: ((BaseUnit named: 'peso') with: 1))! !
!DividedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:38' prior: 50865124!
testFloatDividedByUnitTwice

	| secondOverMeter kelvin |
	secondOverMeter := meterOverSecond reciprocal.
	kelvin := BaseUnit named: 'kelvin'.
	
	self assert: (5.5 / kelvin / meterOverSecond) = (secondOverMeter * (NullUnit new / kelvin) with: 5.5).
	self assert: (5.5 / kelvin / meterOverSecond) numerator = (second with: 5.5 numerator).
	self assert: (5.5 / kelvin / meterOverSecond) denominator = (kelvin * meter with: 5.5 denominator)! !
!PlusInfinity methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:38' prior: 50864370!
multiplyByUnit: aUnit

	^aUnit with: self! !
!BaseUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:38' prior: 50865298!
testIntegerMultipliedByUnit

	| kelvin |
	
	kelvin := BaseUnit named: 'kelvin'.
	
	self assert: (5 * kelvin) = (kelvin with: 5).
	self assert: (5 * kelvin) numerator = (kelvin with: 5).
	self assert: (5 * kelvin) denominator = 1.
	self assert: (5 * (kelvin with: 1)) numerator = (kelvin with: 5).
	self assert: (5 * (kelvin with: 1)) denominator = 1.
	
! !
!CompoundMeasureTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:38' prior: 50864200!
testIsCompoundMeasurement

	self assert: ((self peso with: 10.01) + (self dollar with: 20.5)) isCompoundMeasure! !
!PlusInfinity methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:39' prior: 50864493!
divideByUnit: aUnit

	^aUnit with: 1 / self! !
!DividedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:39' prior: 50865314!
testDivideByFloat

	self assert: (meterOverSecond / 5.5) = (meterOverSecond with: 1/5.5).
	self assert: (meterOverSecond / 5.5) numerator = (meter with: (1/5.5) numerator).
	self assert: (meterOverSecond / 5.5) denominator = (second with: (1/5.5) denominator)! !
!MultipliedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:39' prior: 50864284!
testIntegerDividedByUnit

	self assert: (5 / meterBySecond) = (5 / (meterBySecond with: 1)).
	self assert: (5 / meterBySecond) numerator = 5.
	self assert: (5 / meterBySecond) denominator = (meterBySecond with: 1).
	
! !
!MultipliedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:39' prior: 50864427!
testMeasureCreation

	self assert: (meterBySecond with: 10) = (SimpleMeasure amount: 10 unit: meterBySecond)! !
!BaseUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:39' prior: 50865348!
testDivideByMinusInfinity

	| kelvin |

	kelvin := BaseUnit named: 'kelvin'.
	self assert: kelvin / minusInfinity = (kelvin with: 1 / minusInfinity).
	self assert: (kelvin / minusInfinity) numerator = 0.
	self assert: (kelvin / minusInfinity) denominator = 1.
	self
		should: [minusInfinity / kelvin]
		raise: IndeterminateOperationException
		withExceptionDo: [:anException |
			self assert:
				anException description =
					'The Division operation is indeterminate between Minus Infinity and kelvin']! !
!MinusInfinity methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:39' prior: 50864947!
divideByUnit: aUnit

	^aUnit with: 1 / self! !
!NullUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:39' prior: 50865403!
testMeasureCreation

	self assert: (nullUnit with: 10) = 10! !
!SimpleMeasureTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:39' prior: 50864779!
testRemainderByMeasure

	self assert: (self tenMeters \\ self tenMeters) = (self meter with: 10\\10).
	self assert: (self oneMeter \\ self tenMeters) = (self meter with: 1\\10).
	self assert: (self tenMeters \\ self oneSecond) = (self meter with: 10\\1).
	self assert: (self tenMeters \\ self threeSeconds) = (self meter with: 10\\3).

	
! !
!BaseUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:39' prior: 50865013!
testMultiplyByNumber

	| kelvin |
	
	kelvin := BaseUnit named: 'kelvin'.
	
	self assert: kelvin * 5 = (kelvin with: 5).
	
	self assert: (kelvin * 5) numerator = (kelvin with: 5).
	self assert: (kelvin * 1) denominator = 1.
	
	self assert: kelvin * 5.5 = (kelvin with: 5.5).
	self assert: (kelvin * 5.5) numerator = (kelvin with: 5.5) numerator.
	self assert: (kelvin * 5.5) denominator = (kelvin with: 5.5) denominator! !
!DividedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:39' prior: 50864404!
testFloatMultipliedByUnitTwice

	| kelvin |
	kelvin := BaseUnit named: 'kelvin'.
	
	self assert: (5.5 * kelvin * meterOverSecond) = (kelvin * meterOverSecond with: 5.5).
	self assert: (5.5 * kelvin * meterOverSecond) numerator = (kelvin * meter with: 5.5 numerator).
	self assert: (5.5 * kelvin * meterOverSecond) denominator = (second with: 5.5 denominator)! !
!EvaluationTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:39' prior: 50864514!
tenPesos

	^peso with: 10! !
!SimpleMeasureTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:39' prior: 50864122!
testTruncated

	self assert: (self meter with: 1.05) truncated = (self meter with: 1).
	self assert: (self centimeter with: 1.05) truncated = (self centimeter with: 1).
	self assert: ((self peso * self meter ) with: 1.05) truncated = ((self peso * self meter) with: 1).
	self assert: ((self peso / self meter ) with: 1.05) truncated = ((self peso / self meter) with: 1)	! !
!ConversionTableTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:39' prior: 50864399!
oneHundredCents

	^self cents with: 100! !
!Unit methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:39' prior: 50864794!
divideMinusInfinity: aMinusInfinity

	^((NullUnit new / self) * aMinusInfinity unit) with: aMinusInfinity amount! !
!MultipliedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:39' prior: 50865368!
testDivideByInfinity
 
	self assert: meterBySecond / infinity = (meterBySecond with: 0).
	self
		should: [infinity / meterBySecond]
		raise: IndeterminateOperationException
		withExceptionDo: [:anException |
			self assert:
				anException description =
					'The Division operation is indeterminate between Infinity and meter.second'].
	self assert: (meterBySecond / infinity) numerator = (meterBySecond with: 0).
	self assert: (meterBySecond / infinity) denominator = 1! !
!Unit methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:39' prior: 50864175!
multiplyInfinity: anInfinity

	^(anInfinity unit * self) with: anInfinity amount! !
!BaseUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:39' prior: 50864448!
testMultiplyByMinusInfinity

	| kelvin |

	kelvin := BaseUnit named: 'kelvin'.
	self assert: kelvin * minusInfinity = (kelvin with: minusInfinity).
	self assert: minusInfinity * kelvin = (kelvin with: minusInfinity).
	self assert: (kelvin * minusInfinity) numerator = (kelvin with: minusInfinity).
	self assert: (kelvin * minusInfinity) denominator = 1! !
!DividedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:40' prior: 50864883!
testDivideByMinusInfinity

	self assert: meterOverSecond / minusInfinity = (meterOverSecond with: 0).
	self assert: (meterOverSecond / minusInfinity) numerator = (meter with: 0).
	self assert: (meterOverSecond / minusInfinity) denominator = (second with: 1).
	self
		should: [minusInfinity / meterOverSecond]
		raise: IndeterminateOperationException
		withExceptionDo: [:anException |
			self assert:
				anException description =
					'The Division operation is indeterminate between Minus Infinity and meter/second']! !
!BaseUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:40' prior: 50864327!
testFloatDividedByUnit

	| kelvin |
	
	kelvin := BaseUnit named: 'kelvin'.
	
	self assert: (5.5 / kelvin) = (5.5 / (kelvin with: 1)).
	self assert: (5.5 / kelvin) numerator = 5.5 numerator.
	self assert: (5.5 / kelvin) denominator = (kelvin with: 5.5 denominator)! !
!DividedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:40' prior: 50864339!
testDivideByInfinity

	self assert: meterOverSecond / infinity = (meterOverSecond with: 0).
	self assert: (meterOverSecond / infinity) numerator = (meter with: 0).
	self assert: (meterOverSecond / infinity) denominator = (second with: 1).
	self
		should: [infinity / meterOverSecond]
		raise: IndeterminateOperationException
		withExceptionDo: [:anException |
			self assert:
				anException description =
					'The Division operation is indeterminate between Infinity and meter/second']! !
!BaseUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:40' prior: 50864092!
testDivideByNumber

	| kelvin |
	
	kelvin := BaseUnit named: 'kelvin'.
	
	self assert: kelvin / 5 = (kelvin with: 1/5).
	self assert: (kelvin / 5) numerator = (kelvin with: 1).
	self assert: (kelvin / 5) denominator = 5.
	
	self assert: kelvin / 5.5 = (kelvin with: 1/5.5).
	self assert: (kelvin / 5.5) numerator = (kelvin with: 1/5.5) numerator.
	self assert: (kelvin / 5.5) denominator = (kelvin with: 1/5.5) denominator! !
!GregorianYearTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:40' prior: 50864933!
testInvalidPreviousANumberOfYears

	| anyUnit |
	
	anyUnit := BaseUnit named: 'Any Unit'.
	
	self should: [ (GregorianYear number: 2004) previous: 1] raise: CanNotConvertMeasureException.
	self should: [ (GregorianYear number: 2004) previous: (anyUnit with: 1) ] raise: CanNotConvertMeasureException.
	

	
	
	
	! !
!BaseUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:40' prior: 50864914!
testMultiplyByInfinity

	| kelvin |

	kelvin := BaseUnit named: 'kelvin'.
	self assert: kelvin * infinity = (kelvin with: infinity).
	self assert: infinity * kelvin = (kelvin with: infinity).
	self assert: (kelvin * infinity) numerator = (kelvin with: infinity).
	self assert: (kelvin * infinity) denominator = 1! !
!MinusInfinityTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:40' prior: 50865451!
testSameUnitAs

	self assert: (minusInfinity sameUnitAs: 1).
	self deny: (minusInfinity sameUnitAs: ((BaseUnit named: 'peso') with: 1))! !
!ConversionTableTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:40' prior: 50864533!
oneDollar
	
	^self dollar with: 1! !
!DividedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:40' prior: 50865260!
testIntegerDividedByUnit

	| secondOverMeter |
	secondOverMeter := meterOverSecond reciprocal.
	
	self assert: (5 / meterOverSecond) = (secondOverMeter with: 5).
	self assert: (5 / meterOverSecond) numerator = (second with: 5).
	self assert: (5 / meterOverSecond) denominator = (meter with: 1).
	! !
!MultipliedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:40' prior: 50865392!
testMultiplyByFloat

	self assert: (meterBySecond * 5.5) = (meterBySecond with: 5.5).
	self assert: (meterBySecond * 5.5) numerator = (meterBySecond with: 5.5 numerator).
	self assert: (meterBySecond * 5.5) denominator = 5.5 denominator! !
!ProportionalUnitConversionFunctionTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:40' prior: 50865421 overrides: 16927572!
setUp

	peso := BaseUnit named: 'peso'.
	dollar := BaseUnit named: 'dollar'.	
	onePeso := peso with: 1.
	tenDollars := dollar with: 10! !
!Number methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:40' prior: 50864560!
multiplyByUnit: aUnit

	^aUnit with: self! !
!SimpleMeasureTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:40' prior: 50864704!
testDivisionIntegerByMeasure

	self assert: (1 / self tenPesos) = ((NullUnit new / self peso) with: 1/10)

! !
!BaseUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:40' prior: 50865227!
testDivideByInfinity

	| kelvin |

	kelvin := BaseUnit named: 'kelvin'.
	self assert: kelvin / infinity = (kelvin with: 1 / infinity).
	self assert: (kelvin / infinity) numerator = 0.
	self assert: (kelvin / infinity) denominator = 1.
	self
		should: [infinity / kelvin]
		raise: IndeterminateOperationException
		withExceptionDo: [:anException |
			self assert:
				anException description =
					'The Division operation is indeterminate between Infinity and kelvin']! !
!MultipliedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:40' prior: 50864164!
testFloatMultipliedByUnit

	self assert: (5.5 * meterBySecond) = (meterBySecond with: 5.5).
	self assert: (5.5 * meterBySecond) numerator = (meterBySecond with: 5.5 numerator).
	self assert: (5.5 * meterBySecond) denominator = 5.5 denominator! !
!BaseUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:40' prior: 50864498!
testFloatMultipliedByUnitTwice

	| kelvin meter |
	
	kelvin := BaseUnit named: 'kelvin'.
	meter := BaseUnit named: 'meter'.
	
	self assert: 5.5 * kelvin * meter = (kelvin * meter with: 5.5).
	self assert: (5.5 * kelvin * meter) numerator = (kelvin * meter with: 5.5) numerator.
	self assert: (5.5 * kelvin * meter) denominator = (kelvin * meter with: 5.5) denominator! !
!MultipliedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:40' prior: 50865459!
testIntegerMultipliedByUnit

	self assert: (5 * meterBySecond) = (meterBySecond with: 5).
	self assert: (5 * meterBySecond) numerator = (meterBySecond with: 5).
	self assert: (5 * meterBySecond) denominator = 1.
! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:40' prior: 50864666!
test02

	|interface cartID cartList|

	interface := Store with: testObjectsFactory defaultCatalog .
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	
	interface addToCart: cartID bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.	
	cartList := interface listCart: cartID.
	
	self assert: 1 equals: cartList size.
	self assert: 1 equals: (cartList at: testObjectsFactory itemSellByTheStore).

	! !
!ConversionTableTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:41' prior: 50864634!
onePeso

	^self peso with: 1! !
!DividedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:41' prior: 50864181!
testDivideByInteger

	self assert: (meterOverSecond / 5) = (meterOverSecond with: 1/5).
	self assert: (meterOverSecond / 5) numerator = (meter with: 1).
	self assert: (meterOverSecond / 5) denominator = (second with: 5).
! !
!MinusInfinityTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:41' prior: 50864550!
testEqualsMeasure

	| measure |

	measure := (BaseUnit named: 'peso') with: 5.
	self assert: (minusInfinity equalsSimpleMeasure: minusInfinity).
	self deny: (minusInfinity equalsSimpleMeasure: measure)! !
!MultipliedUnit methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:41' prior: 50864801!
divFrom: aNumber

	^(DividedUnit nullUnit: aNumber unit multipliedUnit: self) with: aNumber! !
!MultipliedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:41' prior: 50864474!
testDivideByInteger

	self assert: (meterBySecond / 5) = (meterBySecond with: 1/5).
	self assert: (meterBySecond / 5) numerator = (meterBySecond with: 1).
	self assert: (meterBySecond / 5) denominator = 5.
	
! !
!MultipliedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:41' prior: 50864110!
testFloatDividedByUnit

	self assert: (5.5 / meterBySecond) = (5.5 / (meterBySecond with: 1)).
	self assert: (5.5 / meterBySecond) numerator = 5.5 numerator.
	self assert: (5.5 / meterBySecond) denominator = (meterBySecond with: 5.5 denominator)! !
!MultipliedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:41' prior: 50865429!
testFloatMultipliedByUnitTwice

	| kelvin |
	kelvin := BaseUnit named: 'kelvin'.

	self assert: (5.5 * kelvin * meterBySecond) = (kelvin * meterBySecond with: 5.5).
	self assert: (5.5 * kelvin * meterBySecond) numerator = (kelvin * meterBySecond with: 5.5 numerator).
	self assert: (5.5 * kelvin * meterBySecond) denominator = 5.5 denominator! !
!PlusInfinityTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:41' prior: 50864904!
testEqualsMeasure

	| measure |

	measure := (BaseUnit named: 'peso') with: 5.
	self assert: (infinity equalsSimpleMeasure: infinity).
	self deny: (infinity equalsSimpleMeasure: measure)! !
!ProportionalUnitConversionFunctionTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:41' prior: 50864566!
testInvalidValues

	| cent |
	
	self 
		should: [ ProportionalUnitConversionFunction measure: (peso with:0) isProportionalTo: tenDollars ] 
		raise: InvalidProportionalUnitConversionFunctionException
		withExceptionDo: [ :anException |
			self assert: anException sourceMeasure = (peso with: 0).
			self assert: anException equivalentMeasure = tenDollars.
			self assert: anException description notNil ].
		
	cent := ProportionalDerivedUnit baseUnit: peso conversionFactor: 1/100 named: 'cent'.
	self 
		should: [ ProportionalUnitConversionFunction measure: onePeso isProportionalTo: (cent with: 100) ] 
		raise: InvalidProportionalUnitConversionFunctionException
		withExceptionDo: [ :anException |
			self assert: anException sourceMeasure = onePeso.
			self assert: anException equivalentMeasure = (cent with: 100).
			self assert: anException description notNil ]! !
!MeasureConverterTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:41' prior: 50865187!
testSameDomainConversion

	| cents |
	
	cents := ProportionalDerivedUnit baseUnit: self peso conversionFactor: 1/100 named: 'cent'.
	
	self assert: (moneyConverter convert: self onePeso to: self peso) = self onePeso.
	self assert: (moneyConverter convert: self onePeso to: cents) = (cents with: 100)! !
!SimpleMeasureTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:41' prior: 50864964!
testIsFraction

	self deny: (self meter with: 1) isFraction.
	self deny: (self centimeter with: 12) isFraction.
	self deny: ((self peso * self meter) with: 44) isFraction.
	self deny: ((self peso / self meter) with: 1234) isFraction.
	self deny: (self meter with: 1.05) isFraction.
	self deny: (self centimeter with: 1.05) isFraction.
	self deny: ((self peso * self meter) with: 1.05) isFraction.
	self deny: ((self peso / self meter) with: 1.05) isFraction

! !
!CompoundMeasureTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:41' prior: 50864684!
testTruncated

	self assert: ((self peso with: 10.01) + (self dollar with: 20.5)) truncated = (self tenPesos + self twentyDollars)! !
!MinusInfinity methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:41' prior: 50865008!
multiplyByUnit: aUnit

	^aUnit with: self! !
!MinusInfinity methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:41' prior: 50865211 overrides: 50752596!
to: stop

	^self to: stop by: (self unit with: 1)! !
!MultipliedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:41' prior: 50864832!
testMultiplyByMinusInfinity

	self assert: meterBySecond * minusInfinity = (meterBySecond with: minusInfinity).
	self assert: minusInfinity * meterBySecond = (meterBySecond with: minusInfinity).
	self assert: (meterBySecond * minusInfinity) numerator = (meterBySecond with: minusInfinity).
	self assert: (meterBySecond * minusInfinity) denominator = 1! !
!SimpleMeasureTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:41' prior: 50865061!
testRoundTo

	self assert: ((SimpleMeasure amount: 1 unit: self celsius) roundTo: 1) = (self celsius with: 1).
	self assert: ((SimpleMeasure amount: 1 unit: self celsius) roundTo: 0.1) = (self celsius with: 1).
	self assert: ((SimpleMeasure amount: 1.4 unit: self celsius) roundTo: 1) = (self celsius with: 1).
	self assert: ((SimpleMeasure amount: 1.5 unit: self celsius) roundTo: 1) = (self celsius with: 2).
	self assert: ((SimpleMeasure amount: 1.09 unit: self celsius) roundTo: 1) = (self celsius with: 1).
	self assert: ((SimpleMeasure amount: -1 unit: self celsius) roundTo: 1) = (self celsius with: -1).
	self assert: ((SimpleMeasure amount: -1.1 unit: self celsius) roundTo: 1) = (self celsius with: -1)! !
!Unit methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:41' prior: 50864139!
divideSimpleMeasure: aMeasure

	^((NullUnit new / self) * aMeasure unit) with: aMeasure amount! !
!Unit methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:41' prior: 50864807!
multiplyMinusInfinity: aMinusInfinity

	^(aMinusInfinity unit * self) with: aMinusInfinity amount! !
!Unit methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:42' prior: 50864613!
multiplySimpleMeasure: aMeasure

	^(aMeasure unit * self) with: aMeasure amount! !
!BaseUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:42' prior: 50864192!
testMeasureCreation

	| meter |
	
	meter := BaseUnit named: 'meter'.
	self assert: (meter with: 10) = (SimpleMeasure amount: 10 unit: meter)! !
!MultipliedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:42' prior: 50865089!
testFloatDividedByUnitTwice

	| kelvin |
	kelvin := BaseUnit named: 'kelvin'.
	
	self assert: (5.5 / kelvin / meterBySecond) = (5.5 / (kelvin * meterBySecond with: 1)).
	self assert: (5.5 / kelvin / meterBySecond) numerator = 5.5 numerator.
	self assert: (5.5 / kelvin / meterBySecond) denominator = (kelvin * meterBySecond with: 5.5 denominator)! !
!DividedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:42' prior: 50865036!
testMultiplyByMinusInfinity

	self assert: meterOverSecond * minusInfinity = (meterOverSecond with: minusInfinity).
	self assert: minusInfinity * meterOverSecond = (meterOverSecond with: minusInfinity).
	self assert: (meterOverSecond * minusInfinity) numerator = (meter with: minusInfinity).
	self assert: (meterOverSecond * minusInfinity) denominator = (second with: 1)! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:42' prior: 50864858!
test03

	|interface cartID cartList|

	interface := Store with: testObjectsFactory defaultCatalog .
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	
	interface addToCart: cartID bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.	
	cartList := interface listCart: cartID.
	
	self assert: 1 equals: cartList size.
	self assert: 1 equals: (cartList at: testObjectsFactory itemSellByTheStore).

	! !
!BaseUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:42' prior: 50864711!
testIntegerDividedByUnit

	| kelvin |
	
	kelvin := BaseUnit named: 'kelvin'.
	
	self assert: (5 / kelvin) = (SimpleMeasure amount: 5 unit: NullUnit new / kelvin).
	self assert: (5 / (kelvin with: 1)) = (SimpleMeasure amount: 5 unit: NullUnit new / kelvin).
	self assert: (5 / kelvin) numerator = 5.
	self assert: (5 / kelvin) denominator = (kelvin with: 1).
	self assert: (5 / (kelvin with: 1)) numerator = 5.
	self assert: (5 / (kelvin with: 1)) denominator = (kelvin with: 1).
	
! !
!DividedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:42' prior: 50864847!
testMultiplyByInteger

	self assert: (meterOverSecond * 5) = (meterOverSecond with: 5).
	self assert: (meterOverSecond * 5) numerator = (meter with: 5).
	self assert: (meterOverSecond * 5) denominator = (second with: 1).
! !
!SimpleMeasureTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:42' prior: 50864085!
testMultiplyIntegerByMeasure

	self assert: (3 * self tenPesos) = ((NullUnit new * self peso) with: 3*10)

! !
!Number methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:42' prior: 50865408!
divideByUnit: aUnit

	^aUnit with: 1 / self! !
!DividedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:42' prior: 50865153!
testFloatDividedByUnit

	| secondOverMeter |
	secondOverMeter := meterOverSecond reciprocal.
	
	self assert: (5.5 / meterOverSecond) = (secondOverMeter with: 5.5).
	self assert: (5.5 / meterOverSecond) numerator = (second with: 5.5 numerator).
	self assert: (5.5 / meterOverSecond) denominator = (meter with: 5.5 denominator)! !
!MultipliedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:42' prior: 50864463!
testMultiplyByInteger

	self assert: (meterBySecond * 5) = (meterBySecond with: 5).
	self assert: (meterBySecond * 5) numerator = (meterBySecond with: 5).
	self assert: (meterBySecond * 5) denominator = 1.
! !
!DividedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:42' prior: 50865142!
testIntegerMultipliedByUnit

	self assert: (5 * meterOverSecond) = (meterOverSecond with: 5).
	self assert: (5 * meterOverSecond) numerator = (meter with: 5).
	self assert: (5 * meterOverSecond) denominator = (second with: 1).
! !
!SimpleMeasureTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:42' prior: 50864320!
testDivisionFractionByMeasure

	self assert: ((1/3) / self tenPesos) = ((NullUnit new / self peso) with: (1/3)/10)

! !
!CircularReadStream methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:42' prior: 50865031!
previous

	^self previous: (unit with: 1)! !
!SimpleMeasureTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:42' prior: 50864078!
testMultiplyFloatByMeasure

	self assert: (1.01 * self tenPesos) = ((NullUnit new * self peso) with: 1.01*10)

! !
!DividedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:42' prior: 50864359!
testMultiplyByFloat

	self assert: (meterOverSecond * 5) = (meterOverSecond with: 5).
	self assert: (meterOverSecond * 5) numerator = (meter with: 5).
	self assert: (meterOverSecond * 5) denominator = (second with: 1).
! !
!EvaluationTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:42' prior: 50864485!
testTruncated

	| formula |
	
	formula := DummyEvaluation of: (peso with: 1.3).
	self assert: formula truncated = (peso with: 1)! !
!PlusInfinityTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:42' prior: 50864692!
testEqualsCompoundMeasure

	| measureBag |

	measureBag := ((BaseUnit named: 'peso') with: 5) + ((BaseUnit named: 'dollar') with: 5).
	self assert: (infinity equalsCompoundMeasure: infinity).
	self deny: (infinity equalsCompoundMeasure: measureBag)! !
!SimpleMeasure methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:42' prior: 50865485 overrides: 50752399!
divideSimpleMeasure: aMeasure

	| numerator denominator |
	
	numerator := aMeasure convertToBaseUnit.
	denominator := self convertToBaseUnit.
	
	^numerator unit / denominator unit 
		with: numerator amount / denominator amount! !
!GregorianTimespan methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:43' prior: 50865327!
asInterval

	^ArithmeticObjectInterval
		from: from
		to: self to
		by: (duration unit with: 1)
		intervalStrategy: DefaultPointInTimeIntervalStrategy new.! !
!SimpleMeasureTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:43' prior: 50864606!
testDivisionFloatByMeasure

	self assert: (1.01 / self tenPesos) = ((NullUnit new / self peso) with: 1.01/10)

! !
!Unit methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:43' prior: 50864750!
denominatorOf: aNumber

	^self denominator with: aNumber denominator
	
! !
!CompoundMeasureTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:43' prior: 50864420!
testIsFraction

	self deny: ((self peso with: 10.01) + (self dollar with: 20.5)) isFraction! !
!MeasureConverterTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:43' prior: 50864295!
testIndirectSearching

	self assert: (moneyConverter convert: self onePeso to: self euro) = (self euro with: 10/39).
	self assert: (moneyConverter convert: self oneEuro to: self peso) = (self peso with: 39/10)! !
!SimpleMeasure methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:43' prior: 50864072 overrides: 50752447!
quoFrom: aNumber

	^NullUnit new / unit with: (aNumber quo: amount)! !
!DividedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:43' prior: 50865470!
testIntegerMultipliedByUnitTwice

	| kelvin |
	kelvin := BaseUnit named: 'kelvin'.
	
	self assert: (5 * kelvin * meterOverSecond) = (kelvin * meterOverSecond with: 5).
	self assert: (5 * kelvin * meterOverSecond) numerator = (kelvin * meter with: 5).
	self assert: (5 * kelvin * meterOverSecond) denominator = (second with: 1).
	
! !
!ProportionalDerivedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:43' prior: 50865444!
testMeasureCreation

	self assert: (centavo with: 10) = (SimpleMeasure amount: 10 unit: centavo)! !
!BaseUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:43' prior: 50865245!
testIntegerDividedByUnitTwice

	| kelvin meter |
	
	kelvin := BaseUnit named: 'kelvin'.
	meter := BaseUnit named: 'meter'.
	
	self assert: (5 / kelvin / meter) = (SimpleMeasure amount: 5 unit: NullUnit new / (kelvin * meter)).
	self assert: (5 / kelvin / meter) numerator = 5.
	self assert: (5 / kelvin / meter) denominator = (kelvin * meter with: 1).
	
! !
!EvaluationTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:43' prior: 50865167!
tenDollars
	
	^dollar with: 10! !
!MeasureConverterTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:43' prior: 50864040!
testDirectSearching

	self assert: (moneyConverter convert: self onePeso to: self dollar) = (self dollar with: 1/3).
	self assert: (moneyConverter convert: self oneEuro to: self dollar) = (self dollar with: 13/10)! !
!MultipliedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:43' prior: 50865336!
testDivideByFloat

	self assert: (meterBySecond / 5.5) = (meterBySecond with: 1/5.5).
	self assert: (meterBySecond / 5.5) numerator = (meterBySecond with: (1/5.5) numerator).
	self assert: (meterBySecond / 5.5) denominator = (1/5.5) denominator! !
!MultipliedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:43' prior: 50864306!
testIntegerDividedByUnitTwice

	| kelvin |
	kelvin := BaseUnit named: 'kelvin'.
	
	self assert: (5 / kelvin / meterBySecond) = (5 / (kelvin * meterBySecond with: 1)).
	self assert: (5 / kelvin / meterBySecond) numerator = 5.
	self assert: (5 / kelvin / meterBySecond) denominator = (kelvin * meterBySecond with: 1).
	
! !
!SimpleMeasureTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:43' prior: 50864875!
testMultiplyFractionByMeasure

	self assert: ((1/3) * self tenPesos) = ((NullUnit new * self peso) with: (1/3)*10)

! !
!BaseUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:43' prior: 50864519!
testIntegerMultipliedByUnitTwice

	| kelvin meter |
	
	kelvin := BaseUnit named: 'kelvin'.
	meter := BaseUnit named: 'meter'.
	
	self assert: 5 * kelvin * meter = (kelvin * meter with: 5).
	self assert: (5 * kelvin * meter) numerator = (kelvin * meter with: 5).
	self assert: (5 * kelvin * meter) denominator = 1.
! !
!MinusInfinityTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:43' prior: 50864538!
testEqualsCompoundMeasure

	| measureBag |

	measureBag := ((BaseUnit named: 'peso') with: 5) + ((BaseUnit named: 'dollar') with: 5).
	self assert: (minusInfinity equalsCompoundMeasure: minusInfinity).
	self deny: (minusInfinity equalsCompoundMeasure: measureBag)! !
!DividedUnitTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:43' prior: 50864756!
testMultiplyByInfinity

	self assert: meterOverSecond * infinity = (meterOverSecond with: infinity).
	self assert: infinity * meterOverSecond = (meterOverSecond with: infinity).
	self assert: (meterOverSecond * infinity) numerator = (meter with: infinity).
	self assert: (meterOverSecond * infinity) denominator = (second with: 1)! !
!PlusInfinity methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:43' prior: 50865414 overrides: 50752596!
to: stop

	^self to: stop by: (self unit with: 1)! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:44' prior: 50864819!
test04

	|interface cartIDA cartIDB|

	interface := Store with: testObjectsFactory defaultCatalog .
	cartIDA := interface createCartForClientID: '1234' withPassword: '1234'.
	cartIDB := interface createCartForClientID: '1234' withPassword: '1234'.
	
	self deny: (cartIDA = cartIDB).
	! !
!ProportionalUnitConversionFunctionTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:47:44' prior: 50865105!
testValidValues

	| function |
	
	function := ProportionalUnitConversionFunction measure: onePeso isProportionalTo: tenDollars.
	self assert: (function value: (peso with: 3)) = (dollar with: 30).
	self assert: (function value: onePeso) = tenDollars.

	function := ProportionalUnitConversionFunction measure: tenDollars isProportionalTo: onePeso.
	self assert: (function value:tenDollars) = onePeso.
	self assert: (function value:(dollar with: 1)) = (onePeso/10)
	! !

!methodRemoval: Store class #withCatalog: stamp: 'GR 6/23/2021 18:47:44'!
withCatalog: aCatalog

	^self new initializeWith: aCatalog .!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'GR 6/23/2021 18:47:59'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GR 6/23/2021 18:47:59'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'GR 6/23/2021 18:48:00'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'GR 6/23/2021 18:48:00'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'GR 6/23/2021 18:48:00'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'GR 6/23/2021 18:48:00'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'GR 6/23/2021 18:48:00'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'GR 6/23/2021 18:48:00'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'GR 6/23/2021 18:48:00'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'GR 6/23/2021 18:48:00'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'GR 6/23/2021 18:48:00'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'GR 6/23/2021 18:48:00'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'GR 6/23/2021 18:48:00'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'GR 6/23/2021 18:48:00'!
PASSED!

!testRun: #StoreTest #test01 stamp: 'GR 6/23/2021 18:48:00'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/23/2021 18:48:00'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/23/2021 18:48:00'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/23/2021 18:48:00'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/23/2021 18:48:01'!
PASSED!

!testRun: #StoreTest #test06 stamp: 'GR 6/23/2021 18:48:01'!
PASSED!
!Store class methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:48:34'!
withCatalog: aCatalog

	^self new initializeWith: aCatalog .! !

!methodRemoval: Store class #with: stamp: 'GR 6/23/2021 18:48:34'!
with: aCatalog

	^self new initializeWith: aCatalog .!
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:48:43' prior: 50865811!
test01

	|interface cartID|
	
	interface := Store withCatalog: testObjectsFactory defaultCatalog .
	
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	
	self assert: (interface listCart: cartID) isEmpty. 

	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:48:48' prior: 50866279!
test02

	|interface cartID cartList|

	interface := Store withCatalog: testObjectsFactory defaultCatalog .
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	
	interface addToCart: cartID bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.	
	cartList := interface listCart: cartID.
	
	self assert: 1 equals: cartList size.
	self assert: 1 equals: (cartList at: testObjectsFactory itemSellByTheStore).

	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:48:52' prior: 50866552!
test03

	|interface cartID cartList|

	interface := Store withCatalog: testObjectsFactory defaultCatalog .
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	
	interface addToCart: cartID bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.	
	cartList := interface listCart: cartID.
	
	self assert: 1 equals: cartList size.
	self assert: 1 equals: (cartList at: testObjectsFactory itemSellByTheStore).

	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:48:55' prior: 50866882!
test04

	|interface cartIDA cartIDB|

	interface := Store withCatalog: testObjectsFactory defaultCatalog .
	cartIDA := interface createCartForClientID: '1234' withPassword: '1234'.
	cartIDB := interface createCartForClientID: '1234' withPassword: '1234'.
	
	self deny: (cartIDA = cartIDB).
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:48:59' prior: 50865651!
test05

	|interface cartIDA cartIDB listCartA listCartB book|
	
	book := testObjectsFactory itemSellByTheStore .
	interface := Store withCatalog: testObjectsFactory defaultCatalog .
	cartIDA := interface createCartForClientID: '1234' withPassword: '1234'.
	cartIDB := interface createCartForClientID: '1234' withPassword: '1234'.
	
	interface addToCart: cartIDA bookISBN: book bookQuantity: 1.
	interface addToCart: cartIDB bookISBN: book bookQuantity: 2.	
	
	listCartA := interface listCart: cartIDA.
	listCartB := interface listCart: cartIDB.

	self assert: 1 equals: (listCartA at: book).
	self assert: 2 equals: (listCartB at: book).	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:49:02' prior: 50865630!
test06

	|interface cartIDA book|
	
	book := testObjectsFactory itemSellByTheStore .
	interface := Store withCatalog: testObjectsFactory defaultCatalog  .
	cartIDA := interface createCartForClientID: '4321' withPassword: '1234'.
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:49:13' prior: 50867065!
test06

	|interface cartID book|
	
	book := testObjectsFactory itemSellByTheStore .
	interface := Store withCatalog: testObjectsFactory defaultCatalog  .
	cartID := interface createCartForClientID: '4321' withPassword: '1234'.
	
	! !
!Store class methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:50:26'!
withCatalog: aCatalog anAuthenticator: Authenticator 

	^self new initializeWith: aCatalog .! !

!methodRemoval: Store class #withCatalog: stamp: 'GR 6/23/2021 18:50:26'!
withCatalog: aCatalog

	^self new initializeWith: aCatalog .!
!Store class methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:50:37' prior: 50867086!
withCatalog: aCatalog anAuthenticator: anAuthenticator 

	^self new initializeWith: aCatalog .! !
!Store class methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:50:43'!
withCatalog: aCatalog andAuthenticator: anAuthenticator 

	^self new initializeWith: aCatalog .! !

!methodRemoval: Store class #withCatalog:anAuthenticator: stamp: 'GR 6/23/2021 18:50:43'!
withCatalog: aCatalog anAuthenticator: anAuthenticator 

	^self new initializeWith: aCatalog .!
!Store class methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:51:28' prior: 50867103!
withCatalog: aCatalog andAuthenticator: anAuthenticator 

	^self new initializeWithCatalog: aCatalog andAuthenticator: anAuthenticator.! !
!Store methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:51:40'!
initializeWithCatalog: aCatalog andAuthenticator: anAuthenticator.
	
	lastCart := 0.
	carts := Dictionary new.
	catalog := aCatalog ! !

!classDefinition: #Store category: 'TusLibros' stamp: 'GR 6/23/2021 18:51:56'!
Object subclass: #Store
	instanceVariableNames: 'catalog lastCart carts authenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:51:53' prior: 50867122!
initializeWithCatalog: aCatalog andAuthenticator: anAuthenticator.
	
	lastCart := 0.
	carts := Dictionary new.
	catalog := aCatalog.
	authenticator := anAuthenticator.! !

!methodRemoval: Store #initializeWith: stamp: 'GR 6/23/2021 18:51:59'!
initializeWith: aCatalog
	
	lastCart := 0.
	carts := Dictionary new.
	catalog := aCatalog !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:52:31' prior: 50866984!
test01

	|interface cartID|
	
	interface := Store withCatalog: testObjectsFactory defaultCatalog andAuthenticator: self.
	
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	
	self assert: (interface listCart: cartID) isEmpty. 

	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:52:35' prior: 50866995!
test02

	|interface cartID cartList|

	interface := Store withCatalog: testObjectsFactory defaultCatalog  andAuthenticator: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	
	interface addToCart: cartID bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.	
	cartList := interface listCart: cartID.
	
	self assert: 1 equals: cartList size.
	self assert: 1 equals: (cartList at: testObjectsFactory itemSellByTheStore).

	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:52:38' prior: 50867012!
test03

	|interface cartID cartList|

	interface := Store withCatalog: testObjectsFactory defaultCatalog  andAuthenticator: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	
	interface addToCart: cartID bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.	
	cartList := interface listCart: cartID.
	
	self assert: 1 equals: cartList size.
	self assert: 1 equals: (cartList at: testObjectsFactory itemSellByTheStore).

	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:52:42' prior: 50867029!
test04

	|interface cartIDA cartIDB|

	interface := Store withCatalog: testObjectsFactory defaultCatalog andAuthenticator: self .
	cartIDA := interface createCartForClientID: '1234' withPassword: '1234'.
	cartIDB := interface createCartForClientID: '1234' withPassword: '1234'.
	
	self deny: (cartIDA = cartIDB).
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:52:46' prior: 50867042!
test05

	|interface cartIDA cartIDB listCartA listCartB book|
	
	book := testObjectsFactory itemSellByTheStore .
	interface := Store withCatalog: testObjectsFactory defaultCatalog andAuthenticator: self .
	cartIDA := interface createCartForClientID: '1234' withPassword: '1234'.
	cartIDB := interface createCartForClientID: '1234' withPassword: '1234'.
	
	interface addToCart: cartIDA bookISBN: book bookQuantity: 1.
	interface addToCart: cartIDB bookISBN: book bookQuantity: 2.	
	
	listCartA := interface listCart: cartIDA.
	listCartB := interface listCart: cartIDB.

	self assert: 1 equals: (listCartA at: book).
	self assert: 2 equals: (listCartB at: book).	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:52:49' prior: 50867076!
test06

	|interface cartID book|
	
	book := testObjectsFactory itemSellByTheStore .
	interface := Store withCatalog: testObjectsFactory defaultCatalog  andAuthenticator: self .
	cartID := interface createCartForClientID: '4321' withPassword: '1234'.
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:53:57' prior: 50867235!
test06

	|interface cartID book|
	
	book := testObjectsFactory itemSellByTheStore .
	interface := Store withCatalog: testObjectsFactory defaultCatalog  andAuthenticator: self .
	
	self should: [cartID := interface createCartForClientID: '4321' withPassword: '1234'.]
		raise: Error - MessageNotUnderstood withMessageText: Store invalidLoginErrorDescription.
	
	! !
!Store class methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:54:25'!
invalidLoginErrorDescription

	^'Invalid user or password'! !

!testRun: #StoreTest #test01 stamp: 'GR 6/23/2021 18:54:29'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/23/2021 18:54:29'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/23/2021 18:54:29'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/23/2021 18:54:29'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/23/2021 18:54:29'!
PASSED!

!testRun: #StoreTest #test06 stamp: 'GR 6/23/2021 18:54:29'!
FAILURE!

!testRun: #StoreTest #test06 stamp: 'GR 6/23/2021 18:54:29'!
FAILURE!
!Store methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:55:12' prior: 50863750!
createCartForClientID: aClientID withPassword: aPassword

	authenticator check: aClientID with: aPassword.

	lastCart := lastCart + 1.
	carts at: lastCart put: (Cart acceptingItemsOf: catalog).
	
	^lastCart.! !

!testRun: #StoreTest #test06 stamp: 'GR 6/23/2021 18:55:22'!
ERROR!
!StoreTest methodsFor: 'mocking' stamp: 'GR 6/23/2021 18:55:35'!
check: aString with: aString2 
	self shouldBeImplemented.! !
!StoreTest methodsFor: 'mocking' stamp: 'GR 6/23/2021 18:57:25' prior: 50867292!
check: aUserID with: aPassword

	^(aUserID = '4321') not.
	
	! !

!testRun: #StoreTest #test06 stamp: 'GR 6/23/2021 18:57:29'!
FAILURE!
!Store methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:58:04' prior: 50867281!
createCartForClientID: aClientID withPassword: aPassword

	(authenticator check: aClientID with: aPassword) ifFalse: [self error: self class invalidLoginErrorDescription ].

	lastCart := lastCart + 1.
	carts at: lastCart put: (Cart acceptingItemsOf: catalog).
	
	^lastCart.! !

!testRun: #StoreTest #test01 stamp: 'GR 6/23/2021 18:58:05'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/23/2021 18:58:05'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/23/2021 18:58:05'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/23/2021 18:58:06'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/23/2021 18:58:06'!
PASSED!

!testRun: #StoreTest #test06 stamp: 'GR 6/23/2021 18:58:06'!
PASSED!
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:59:02'!
test07

	|interface cartID book|
	
	book := testObjectsFactory itemSellByTheStore .
	interface := Store withCatalog: testObjectsFactory defaultCatalog  andAuthenticator: self .
	
	self should: [cartID := interface createCartForClientID: '4321' withPassword: '1234'.]
		raise: Error - MessageNotUnderstood withMessageText: Store invalidLoginErrorDescription.
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:59:12' prior: 50867330!
test07

	|interface cartID book|
	
	interface := Store withCatalog: testObjectsFactory defaultCatalog  andAuthenticator: self .
	
	self should: [cartID := interface createCartForClientID: '4321' withPassword: '1234'.]
		raise: Error - MessageNotUnderstood withMessageText: Store invalidLoginErrorDescription.
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 18:59:49' prior: 50867345!
test07

	|interface |
	
	interface := Store withCatalog: testObjectsFactory defaultCatalog  andAuthenticator: self .
	
	self should: [interface listCart: 1]
		raise: Error - MessageNotUnderstood withMessageText: Store invalidCartIDErrorDescription.
	
	! !
!Store class methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 19:00:20'!
invalidCartIDErrorDescription

	^'Cart ID not existent'! !

!testRun: #StoreTest #test07 stamp: 'GR 6/23/2021 19:00:34'!
FAILURE!

!testRun: #StoreTest #test07 stamp: 'GR 6/23/2021 19:01:12'!
FAILURE!
!Store methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 19:02:47' prior: 50863780!
listCart: aCartID
	| cart items list|
	
	list := Dictionary new.
	
	cart := carts at: aCartID ifAbsent: [self error: self class invalidCartIDErrorDescription ].
	
	items := cart listItems. 
		
	items asBag do: [:anItem | list at: anItem put: (items occurrencesOf: anItem)].
	
	^list.! !

!testRun: #StoreTest #test07 stamp: 'GR 6/23/2021 19:02:49'!
PASSED!

!testRun: #StoreTest #test01 stamp: 'GR 6/23/2021 19:02:49'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/23/2021 19:02:49'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/23/2021 19:02:49'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/23/2021 19:02:49'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/23/2021 19:02:49'!
PASSED!

!testRun: #StoreTest #test06 stamp: 'GR 6/23/2021 19:02:49'!
PASSED!

!testRun: #StoreTest #test07 stamp: 'GR 6/23/2021 19:02:49'!
PASSED!
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 19:02:59'!
test08

	|interface |
	
	interface := Store withCatalog: testObjectsFactory defaultCatalog  andAuthenticator: self .
	
	self should: [interface listCart: 1]
		raise: Error - MessageNotUnderstood withMessageText: Store invalidCartIDErrorDescription.
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 19:03:24' prior: 50867408!
test08

	|interface |
	
	interface := Store withCatalog: testObjectsFactory defaultCatalog  andAuthenticator: self .
	
	self should: [interface addToCart: 1 bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.	]
		raise: Error - MessageNotUnderstood withMessageText: Store invalidCartIDErrorDescription.
	
	! !

!testRun: #StoreTest #test08 stamp: 'GR 6/23/2021 19:03:41'!
FAILURE!
!Store methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 19:04:35' prior: 50863849!
addToCart: aCartID bookISBN: anISBN bookQuantity: aQuantity
	|cart|
	cart := carts at: aCartID ifAbsent: [self error: self class invalidCartIDErrorDescription ].
	
	cart add: aQuantity of: anISBN.! !

!testRun: #StoreTest #test08 stamp: 'GR 6/23/2021 19:04:37'!
PASSED!

!testRun: #StoreTest #test01 stamp: 'GR 6/23/2021 19:04:37'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/23/2021 19:04:37'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/23/2021 19:04:37'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/23/2021 19:04:37'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/23/2021 19:04:37'!
PASSED!

!testRun: #StoreTest #test06 stamp: 'GR 6/23/2021 19:04:37'!
PASSED!

!testRun: #StoreTest #test07 stamp: 'GR 6/23/2021 19:04:37'!
PASSED!

!testRun: #StoreTest #test08 stamp: 'GR 6/23/2021 19:04:37'!
PASSED!
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 19:04:52'!
test09

	|interface |
	
	interface := Store withCatalog: testObjectsFactory defaultCatalog  andAuthenticator: self .
	
	self should: [interface addToCart: 1 bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.	]
		raise: Error - MessageNotUnderstood withMessageText: Store invalidCartIDErrorDescription.
	
	! !
!Store class methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 19:05:50'!
withCatalog: aCatalog ! !
!Store class methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 19:06:09'!
with: aCatalog ! !

!methodRemoval: Store class #withCatalog: stamp: 'GR 6/23/2021 19:06:09'!
withCatalog: aCatalog !
!Store class methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 19:06:40'!
withCatalog: aCatalog ! !

!methodRemoval: Store class #with: stamp: 'GR 6/23/2021 19:06:41'!
with: aCatalog !
!Store class methodsFor: 'as yet unclassified' stamp: 'GR 6/23/2021 19:06:48'!
with: aCatalog ! !

!methodRemoval: Store class #withCatalog: stamp: 'GR 6/23/2021 19:06:48'!
withCatalog: aCatalog !

!methodRemoval: Store class #with: stamp: 'GR 6/23/2021 19:06:54'!
with: aCatalog !

----SNAPSHOT----(23 June 2021 19:34:22) CuisUniversity-4532.image priorSource: 17016074!

----STARTUP---- (24 June 2021 01:31:37) as D:\Facultad\2021-1C-IS1\CuisUniversity_win64\TusLibrosIt3\windows64\CuisUniversity-4532.image!

!CreditCard class methodsFor: 'instance creation' stamp: 'GR 6/24/2021 02:08:42'!
expiringOn: aMonth numbered: aCardNumber  
	
	^self new initializeExpiringOn: aMonth! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 02:08:43' prior: 50859873!
expiredCreditCard
	
	^CreditCard expiringOn: (Month month: today monthIndex year: today yearNumber - 1) numbered: 1234567812345678! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 02:08:43' prior: 50859866!
notExpiredCreditCard
	
	^CreditCard expiringOn: (Month month: today monthIndex year: today yearNumber + 1) numbered: 1234567812345678! !

!methodRemoval: CreditCard class #expiringOn: stamp: 'GR 6/24/2021 02:08:44'!
expiringOn: aMonth 
	
	^self new initializeExpiringOn: aMonth!
!CreditCard class methodsFor: 'instance creation' stamp: 'GR 6/24/2021 02:14:09'!
expiringOn: aMonth numbered: aCardNumber ownedBy: aName   
	
	^self new initializeExpiringOn: aMonth! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 02:14:09' prior: 50867526!
notExpiredCreditCard
	
	^CreditCard expiringOn: (Month month: today monthIndex year: today yearNumber + 1) numbered: 1234567812345678 ownedBy: 'Jose Hernandez'! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 02:14:09' prior: 50867518!
expiredCreditCard
	
	^CreditCard expiringOn: (Month month: today monthIndex year: today yearNumber - 1) numbered: 1234567812345678 ownedBy: 'Jose Hernandez'! !

!methodRemoval: CreditCard class #expiringOn:numbered: stamp: 'GR 6/24/2021 02:14:09'!
expiringOn: aMonth numbered: aCardNumber  
	
	^self new initializeExpiringOn: aMonth!
!CreditCard methodsFor: 'initialization' stamp: 'GR 6/24/2021 02:19:15'!
initializeExpiringOn: aMonth numbered: aCardNumber  
	
	expiration := aMonth ! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 02:19:15' prior: 50867538!
expiringOn: aMonth numbered: aCardNumber ownedBy: aName   
	
	^self new initializeExpiringOn: aMonth numbered: aCardNumber! !

!methodRemoval: CreditCard #initializeExpiringOn: stamp: 'GR 6/24/2021 02:19:15'!
initializeExpiringOn: aMonth 
	
	expiration := aMonth !
!CreditCard methodsFor: 'initialization' stamp: 'GR 6/24/2021 02:19:59'!
initializeExpiringOn: aMonth numbered: aCardNumber ownedBy: aName   
	
	expiration := aMonth ! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 02:19:59' prior: 50867573!
expiringOn: aMonth numbered: aCardNumber ownedBy: aName   
	
	^self new initializeExpiringOn: aMonth numbered: aCardNumber ownedBy: aName! !

!methodRemoval: CreditCard #initializeExpiringOn:numbered: stamp: 'GR 6/24/2021 02:19:59'!
initializeExpiringOn: aMonth numbered: aCardNumber  
	
	expiration := aMonth !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'GR 6/24/2021 02:20:27'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'GR 6/24/2021 02:20:28'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration number owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'GR 6/24/2021 02:20:25' prior: 50867584!
initializeExpiringOn: aMonth numbered: aCardNumber ownedBy: aName   
	
	expiration := aMonth.
	number := aCardNumber.
	owner := aName.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'GR 6/24/2021 02:27:25'!
assertNameNotEmpty: aName

	! !
!CreditCard class methodsFor: 'instance creation' stamp: 'GR 6/24/2021 02:30:09'!
assertNameIsValid: aName

	(aName withBlanksTrimmed) isEmpty ifTrue: [self error: self nameIsEmptyErrorDescription].
	(aName length > 30) ifTrue: [self error: self nameTooLongErrorDescription].! !
!CreditCard class methodsFor: 'instance creation' stamp: 'GR 6/24/2021 02:30:34'!
nameIsEmptyErrorDescription

	^'Name cannot be empty'! !

!methodRemoval: CreditCard class #assertNameNotEmpty: stamp: 'GR 6/24/2021 02:30:39'!
assertNameNotEmpty: aName

	!
!CreditCard class methodsFor: 'instance creation' stamp: 'GR 6/24/2021 02:31:16'!
nameTooLongErrorDescription

	^'Name cannot be more than thirty characters long'! !
!CreditCard class methodsFor: 'instance creation' stamp: 'GR 6/24/2021 02:31:37' prior: 50867591!
expiringOn: aMonth numbered: aCardNumber ownedBy: aName   

	self assertNameIsValid: aName.
	
	^self new initializeExpiringOn: aMonth numbered: aCardNumber ownedBy: aName! !
!CreditCard class methodsFor: 'instance creation' stamp: 'GR 6/24/2021 02:31:59' prior: 50867652!
expiringOn: aMonth numbered: aCardNumber ownedBy: aName   

	self assertNameIsValid: aName.
	self assertCardIsValid: aCardNumber.
	
	^self new initializeExpiringOn: aMonth numbered: aCardNumber ownedBy: aName! !
!CreditCard class methodsFor: 'instance creation' stamp: 'GR 6/24/2021 02:34:01'!
assertCardIsValid: aCardNumber

	((aCardNumber numberOfDigitsInBase: 10) = 16) ifFalse: [self error: self innvalidCardNumberErrorDescription].! !
!CreditCard class methodsFor: 'instance creation' stamp: 'GR 6/24/2021 02:34:58'!
invalidCardNumberErrorDescription

	^'Card number must be 16 digits long'! !
!CreditCard class methodsFor: 'instance creation' stamp: 'GR 6/24/2021 02:35:05' prior: 50867671!
assertCardIsValid: aCardNumber

	((aCardNumber numberOfDigitsInBase: 10) = 16) ifFalse: [self error: self invalidCardNumberErrorDescription].! !

TestCase subclass: #CreditCardTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'GR 6/24/2021 02:35:56'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'no messages' stamp: 'GR 6/24/2021 02:37:59'!
test01invalidCardNumberShouldFail

	! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'GR 6/24/2021 02:39:10'!
invalidNameCreditCard
	
	^CreditCard expiringOn: (Month month: today monthIndex year: today yearNumber + 1) numbered: 1234567812345678 ownedBy: '   '! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'GR 6/24/2021 02:39:25'!
invalidNumberCreditCard
	
	^CreditCard expiringOn: (Month month: today monthIndex year: today yearNumber + 1) numbered: 12342345678 ownedBy: 'Jose Hernandez'! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 02:39:50' prior: 50867705!
test01invalidCardNumberShouldFail

	self should: []

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 02:40:04' overrides: 16927572!
setUp! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 02:40:21' prior: 50867731 overrides: 16927572!
setUp

	testObjectsFactory := StoreTestObjectsFactory new.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 02:43:16' prior: 50867726!
test01invalidCardNumberShouldFail

	self should: [testObjectsFactory invalidNumberCreditCard ]

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 02:44:02' prior: 50867740!
test01invalidCardNumberShouldFail

	self should: [testObjectsFactory invalidNumberCreditCard ]
		raise: Error - MessageNotUnderstood withMessageText: CreditCard invalidCardNumberErrorDescription.

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 02:44:34'!
test02invalidOwnerNameShouldFail

	self should: [testObjectsFactory invalidNumberCreditCard ]
		raise: Error - MessageNotUnderstood withMessageText: CreditCard invalidCardNumberErrorDescription.

	! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'GR 6/24/2021 02:44:53'!
emptyNameCreditCard
	
	^CreditCard expiringOn: (Month month: today monthIndex year: today yearNumber + 1) numbered: 1234567812345678 ownedBy: '   '! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'GR 6/24/2021 02:45:02'!
nameTooLongCreditCard
	
	^CreditCard expiringOn: (Month month: today monthIndex year: today yearNumber + 1) numbered: 1234567812345678 ownedBy: '   '! !

!methodRemoval: StoreTestObjectsFactory #invalidNameCreditCard stamp: 'GR 6/24/2021 02:45:04'!
invalidNameCreditCard
	
	^CreditCard expiringOn: (Month month: today monthIndex year: today yearNumber + 1) numbered: 1234567812345678 ownedBy: '   '!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'GR 6/24/2021 02:45:43' prior: 50867773!
nameTooLongCreditCard
	
	^CreditCard expiringOn: (Month month: today monthIndex year: today yearNumber + 1) numbered: 1234567812345678 ownedBy: '1234567890123456789012345678901'! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 02:46:05'!
test02emptyOwnerNameShouldFail

	self should: [testObjectsFactory invalidNumberCreditCard ]
		raise: Error - MessageNotUnderstood withMessageText: CreditCard invalidCardNumberErrorDescription.

	! !

!methodRemoval: CreditCardTest #test02invalidOwnerNameShouldFail stamp: 'GR 6/24/2021 02:46:06'!
test02invalidOwnerNameShouldFail

	self should: [testObjectsFactory invalidNumberCreditCard ]
		raise: Error - MessageNotUnderstood withMessageText: CreditCard invalidCardNumberErrorDescription.

	!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 02:46:19' prior: 50867798!
test02emptyOwnerNameShouldFail

	self should: [testObjectsFactory emptyNameCreditCard ]
		raise: Error - MessageNotUnderstood withMessageText: CreditCard invalidCardNumberErrorDescription.

	! !

!testRun: #CreditCardTest #test01invalidCardNumberShouldFail stamp: 'GR 6/24/2021 02:46:22'!
ERROR!

!testRun: #CreditCardTest #test02emptyOwnerNameShouldFail stamp: 'GR 6/24/2021 02:46:22'!
FAILURE!

!testRun: #CreditCardTest #test01invalidCardNumberShouldFail stamp: 'GR 6/24/2021 02:46:25'!
ERROR!

!testRun: #CreditCardTest #test02emptyOwnerNameShouldFail stamp: 'GR 6/24/2021 02:46:25'!
FAILURE!

!testRun: #CreditCardTest #test01invalidCardNumberShouldFail stamp: 'GR 6/24/2021 02:46:27'!
ERROR!

!testRun: #CreditCardTest #test02emptyOwnerNameShouldFail stamp: 'GR 6/24/2021 02:46:27'!
FAILURE!

!testRun: #CreditCardTest #test01invalidCardNumberShouldFail stamp: 'GR 6/24/2021 02:46:28'!
ERROR!

!testRun: #CreditCardTest #test02emptyOwnerNameShouldFail stamp: 'GR 6/24/2021 02:46:28'!
FAILURE!

!testRun: #CreditCardTest #test01invalidCardNumberShouldFail stamp: 'GR 6/24/2021 02:46:30'!
ERROR!

!testRun: #CreditCardTest #test02emptyOwnerNameShouldFail stamp: 'GR 6/24/2021 02:46:30'!
FAILURE!

!testRun: #CreditCardTest #test01invalidCardNumberShouldFail stamp: 'GR 6/24/2021 02:46:32'!
ERROR!

!testRun: #CreditCardTest #test01invalidCardNumberShouldFail stamp: 'GR 6/24/2021 02:46:32'!
ERROR!

!testRun: #CreditCardTest #test01invalidCardNumberShouldFail stamp: 'GR 6/24/2021 02:46:34'!
ERROR!

!testRun: #CreditCardTest #test01invalidCardNumberShouldFail stamp: 'GR 6/24/2021 02:46:34'!
ERROR!

!testRun: #CreditCardTest #test01invalidCardNumberShouldFail stamp: 'GR 6/24/2021 02:46:37'!
ERROR!

!testRun: #CreditCardTest #test01invalidCardNumberShouldFail stamp: 'GR 6/24/2021 02:46:38'!
ERROR!

!testRun: #CreditCardTest #test02emptyOwnerNameShouldFail stamp: 'GR 6/24/2021 02:46:42'!
FAILURE!

!testRun: #CreditCardTest #test02emptyOwnerNameShouldFail stamp: 'GR 6/24/2021 02:46:42'!
FAILURE!

!testRun: #CreditCardTest #test01invalidCardNumberShouldFail stamp: 'GR 6/24/2021 02:46:46'!
ERROR!

!testRun: #CreditCardTest #test02emptyOwnerNameShouldFail stamp: 'GR 6/24/2021 02:46:46'!
FAILURE!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 02:47:36'!
test03OwnerNameTooLongShouldFail

	self should: [testObjectsFactory emptyNameCreditCard ]
		raise: Error - MessageNotUnderstood withMessageText: CreditCard nameTooLongErrorDescription .

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 02:47:49' prior: 50867817!
test02emptyOwnerNameShouldFail

	self should: [testObjectsFactory emptyNameCreditCard ]
		raise: Error - MessageNotUnderstood withMessageText: CreditCard nameIsEmptyErrorDescription .

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 02:48:05' prior: 50867889!
test03OwnerNameTooLongShouldFail

	self should: [testObjectsFactory nameTooLongCreditCard ]
		raise: Error - MessageNotUnderstood withMessageText: CreditCard nameTooLongErrorDescription .

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 02:48:18'!
test03ownerNameTooLongShouldFail

	self should: [testObjectsFactory nameTooLongCreditCard ]
		raise: Error - MessageNotUnderstood withMessageText: CreditCard nameTooLongErrorDescription .

	! !

!methodRemoval: CreditCardTest #test03OwnerNameTooLongShouldFail stamp: 'GR 6/24/2021 02:48:18'!
test03OwnerNameTooLongShouldFail

	self should: [testObjectsFactory nameTooLongCreditCard ]
		raise: Error - MessageNotUnderstood withMessageText: CreditCard nameTooLongErrorDescription .

	!

----SNAPSHOT----(24 June 2021 02:48:22) CuisUniversity-4532.image priorSource: 17147274!

!testRun: #CreditCardTest #test01invalidCardNumberShouldFail stamp: 'GR 6/24/2021 02:49:40'!
ERROR!

!testRun: #CreditCardTest #test02emptyOwnerNameShouldFail stamp: 'GR 6/24/2021 02:49:40'!
PASSED!

!testRun: #CreditCardTest #test03ownerNameTooLongShouldFail stamp: 'GR 6/24/2021 02:49:40'!
ERROR!

!testRun: #CreditCardTest #test01invalidCardNumberShouldFail stamp: 'GR 6/24/2021 02:49:47'!
ERROR!

!testRun: #CreditCardTest #test01invalidCardNumberShouldFail stamp: 'GR 6/24/2021 02:50:00'!
ERROR!

!testRun: #CreditCardTest #test02emptyOwnerNameShouldFail stamp: 'GR 6/24/2021 02:50:00'!
PASSED!

!testRun: #CreditCardTest #test03ownerNameTooLongShouldFail stamp: 'GR 6/24/2021 02:50:00'!
ERROR!

!testRun: #CreditCardTest #test01invalidCardNumberShouldFail stamp: 'GR 6/24/2021 02:50:02'!
ERROR!
!CreditCard class methodsFor: 'assertions' stamp: 'GR 6/24/2021 02:50:13' prior: 50867629!
assertNameIsValid: aName

	(aName withBlanksTrimmed) isEmpty ifTrue: [self error: self nameIsEmptyErrorDescription].
	(aName size > 30) ifTrue: [self error: self nameTooLongErrorDescription].! !

!testRun: #CreditCardTest #test01invalidCardNumberShouldFail stamp: 'GR 6/24/2021 02:50:14'!
PASSED!

!testRun: #CreditCardTest #test03ownerNameTooLongShouldFail stamp: 'GR 6/24/2021 02:50:16'!
PASSED!

!testRun: #CreditCardTest #test01invalidCardNumberShouldFail stamp: 'GR 6/24/2021 02:50:21'!
PASSED!

!testRun: #CreditCardTest #test02emptyOwnerNameShouldFail stamp: 'GR 6/24/2021 02:50:21'!
PASSED!

!testRun: #CreditCardTest #test03ownerNameTooLongShouldFail stamp: 'GR 6/24/2021 02:50:21'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'GR 6/24/2021 02:50:29'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GR 6/24/2021 02:50:29'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'GR 6/24/2021 02:50:29'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'GR 6/24/2021 02:50:29'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'GR 6/24/2021 02:50:29'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'GR 6/24/2021 02:50:29'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'GR 6/24/2021 02:50:29'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'GR 6/24/2021 02:50:29'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'GR 6/24/2021 02:50:29'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'GR 6/24/2021 02:50:29'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'GR 6/24/2021 02:50:29'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'GR 6/24/2021 02:50:29'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'GR 6/24/2021 02:50:29'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'GR 6/24/2021 02:50:29'!
PASSED!

!testRun: #CreditCardTest #test01invalidCardNumberShouldFail stamp: 'GR 6/24/2021 02:50:29'!
PASSED!

!testRun: #CreditCardTest #test02emptyOwnerNameShouldFail stamp: 'GR 6/24/2021 02:50:29'!
PASSED!

!testRun: #CreditCardTest #test03ownerNameTooLongShouldFail stamp: 'GR 6/24/2021 02:50:29'!
PASSED!

!testRun: #StoreTest #test01 stamp: 'GR 6/24/2021 02:50:30'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/24/2021 02:50:30'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/24/2021 02:50:30'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/24/2021 02:50:30'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/24/2021 02:50:30'!
PASSED!

!testRun: #StoreTest #test06 stamp: 'GR 6/24/2021 02:50:30'!
PASSED!

!testRun: #StoreTest #test07 stamp: 'GR 6/24/2021 02:50:30'!
PASSED!

!testRun: #StoreTest #test08 stamp: 'GR 6/24/2021 02:50:30'!
PASSED!

!testRun: #StoreTest #test09 stamp: 'GR 6/24/2021 02:50:30'!
PASSED!
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 02:56:52'!
test10

	|interface |
	
	interface := Store withCatalog: testObjectsFactory defaultCatalog  andAuthenticator: self .
	
	self should: [interface addToCart: 1 bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.	]
		raise: Error - MessageNotUnderstood withMessageText: Store invalidCartIDErrorDescription.
	
	! !
!StoreTestObjectsFactory methodsFor: 'store' stamp: 'GR 6/24/2021 02:57:42'!
defaultStore

	^Store withCatalog: self defaultCatalog  andAuthenticator: self.! !
!StoreTestObjectsFactory methodsFor: 'store' stamp: 'GR 6/24/2021 02:58:23'!
defaultStoreForTest: aTest

	^Store withCatalog: self defaultCatalog  andAuthenticator: aTest.! !

!methodRemoval: StoreTestObjectsFactory #defaultStore stamp: 'GR 6/24/2021 02:58:26'!
defaultStore

	^Store withCatalog: self defaultCatalog  andAuthenticator: self.!
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 02:58:54' prior: 50867151!
test01

	|interface cartID|
	
	interface := testObjectsFactory defaultStoreForTest: self.
	
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	
	self assert: (interface listCart: cartID) isEmpty. 

	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 02:59:05' prior: 50867162!
test02

	|interface cartID cartList|

	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	
	interface addToCart: cartID bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.	
	cartList := interface listCart: cartID.
	
	self assert: 1 equals: cartList size.
	self assert: 1 equals: (cartList at: testObjectsFactory itemSellByTheStore).

	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 02:59:16' prior: 50867180!
test03

	|interface cartID cartList|
	
	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	
	interface addToCart: cartID bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.	
	cartList := interface listCart: cartID.
	
	self assert: 1 equals: cartList size.
	self assert: 1 equals: (cartList at: testObjectsFactory itemSellByTheStore).

	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 02:59:21' prior: 50867198!
test04

	|interface cartIDA cartIDB|

	interface := testObjectsFactory defaultStoreForTest: self.
	cartIDA := interface createCartForClientID: '1234' withPassword: '1234'.
	cartIDB := interface createCartForClientID: '1234' withPassword: '1234'.
	
	self deny: (cartIDA = cartIDB).
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 02:59:25' prior: 50867211!
test05

	|interface cartIDA cartIDB listCartA listCartB book|
	
	book := testObjectsFactory itemSellByTheStore .
	interface := testObjectsFactory defaultStoreForTest: self.
	cartIDA := interface createCartForClientID: '1234' withPassword: '1234'.
	cartIDB := interface createCartForClientID: '1234' withPassword: '1234'.
	
	interface addToCart: cartIDA bookISBN: book bookQuantity: 1.
	interface addToCart: cartIDB bookISBN: book bookQuantity: 2.	
	
	listCartA := interface listCart: cartIDA.
	listCartB := interface listCart: cartIDB.

	self assert: 1 equals: (listCartA at: book).
	self assert: 2 equals: (listCartB at: book).	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 02:59:31' prior: 50867246!
test06

	|interface cartID book|
	
	book := testObjectsFactory itemSellByTheStore .
	interface := testObjectsFactory defaultStoreForTest: self.
	
	self should: [cartID := interface createCartForClientID: '4321' withPassword: '1234'.]
		raise: Error - MessageNotUnderstood withMessageText: Store invalidLoginErrorDescription.
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 02:59:54' prior: 50868171!
test06

	|interface|
	
	interface := testObjectsFactory defaultStoreForTest: self.
	
	self should: [interface createCartForClientID: '4321' withPassword: '1234'.]
		raise: Error - MessageNotUnderstood withMessageText: Store invalidLoginErrorDescription.
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 03:00:11' prior: 50867358!
test07

	|interface |
	
	interface := testObjectsFactory defaultStoreForTest: self.
	
	self should: [interface listCart: 1]
		raise: Error - MessageNotUnderstood withMessageText: Store invalidCartIDErrorDescription.
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 03:00:17' prior: 50867419!
test08

	|interface |
	
	interface := testObjectsFactory defaultStoreForTest: self.
	
	self should: [interface addToCart: 1 bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.	]
		raise: Error - MessageNotUnderstood withMessageText: Store invalidCartIDErrorDescription.
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 03:00:24' prior: 50867464!
test09

	|interface |
	
	interface := testObjectsFactory defaultStoreForTest: self.
	
	self should: [interface addToCart: 1 bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.	]
		raise: Error - MessageNotUnderstood withMessageText: Store invalidCartIDErrorDescription.
	
	! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 03:00:28' prior: 50868062!
test10

	|interface |
	
	interface := testObjectsFactory defaultStoreForTest: self.
	
	self should: [interface addToCart: 1 bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.	]
		raise: Error - MessageNotUnderstood withMessageText: Store invalidCartIDErrorDescription.
	
	! !

!testRun: #StoreTest #test01 stamp: 'GR 6/24/2021 03:00:31'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/24/2021 03:00:31'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/24/2021 03:00:32'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/24/2021 03:00:32'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/24/2021 03:00:32'!
PASSED!

!testRun: #StoreTest #test06 stamp: 'GR 6/24/2021 03:00:32'!
PASSED!

!testRun: #StoreTest #test07 stamp: 'GR 6/24/2021 03:00:32'!
PASSED!

!testRun: #StoreTest #test08 stamp: 'GR 6/24/2021 03:00:32'!
PASSED!

!testRun: #StoreTest #test09 stamp: 'GR 6/24/2021 03:00:32'!
PASSED!

!testRun: #StoreTest #test10 stamp: 'GR 6/24/2021 03:00:32'!
PASSED!
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 03:02:06' prior: 50868231!
test10

	|interface cartID cartList|

	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	
	interface addToCart: cartID bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.	
	cartList := interface listCart: cartID.
	
	self assert: 1 equals: cartList size.
	self assert: 1 equals: (cartList at: testObjectsFactory itemSellByTheStore).

	! !
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 03:06:52' prior: 50868265!
test10

	|interface cartID|

	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	self advanceTimeBy: 30 minutes.
	
	self should: [interface addToCart: cartID bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.]
		raise: Error - MessageNotUnderstood 
		withErrorDo: [].
	
	
	
	! !
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 03:08:41' prior: 50868282!
test10

	|interface cartID|

	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	self advanceTimeBy: 30 minutes.
	
	self should: [interface addToCart: cartID bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anEroor | 
			
			].
	
	
	
	! !
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 03:10:13' prior: 50868297!
test10

	|interface cartID|

	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	self advanceTimeBy: 30 minutes.
	
	self should: [interface addToCart: cartID bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
				self assert: Store cartLifespanExceededErrorMessage equals: anError messageText .
				self assert: (interface listCart: cartID) isEmpty.
			].
	
	
	
	! !
!Store class methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 03:10:42'!
cartLifespanExceededErrorMessage

	^'Cart was created more than 30 minutes ago'! !

!classDefinition: #StoreTestObjectsFactory category: 'TusLibros' stamp: 'GR 6/24/2021 03:26:59'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today time'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectsFactory methodsFor: 'initialization' stamp: 'GR 6/24/2021 03:26:56' prior: 50859880 overrides: 16896425!
initialize

	today := DateAndTime now.
	time := DateAndTime now.! !
!StoreTestObjectsFactory methodsFor: 'initialization' stamp: 'GR 6/24/2021 03:27:20' prior: 50868347 overrides: 16896425!
initialize

	today := DateAndTime now.! !

Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreTestObjectsFactory category: 'TusLibros' stamp: 'GR 6/24/2021 03:27:28'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreTest category: 'TusLibros' stamp: 'GR 6/24/2021 03:28:29'!
TestCase subclass: #StoreTest
	instanceVariableNames: 'testObjectsFactory time'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTest methodsFor: 'setup' stamp: 'GR 6/24/2021 03:28:25' prior: 50863482 overrides: 16927572!
setUp 
	testObjectsFactory := StoreTestObjectsFactory new.
	time := testObjectsFactory today.
	
	
	! !
!StoreTest methodsFor: 'mocking' stamp: 'GR 6/24/2021 03:30:31'!
advanceTimeBy: anAmountOfTime

	! !
!StoreTest methodsFor: 'mocking' stamp: 'GR 6/24/2021 03:30:39' prior: 50868383!
advanceTimeBy: anAmountOfTime

	time := time + anAmountOfTime .! !
!StoreTest methodsFor: 'mocking' stamp: 'GR 6/24/2021 03:30:53'!
time
	^time.! !
!Store class methodsFor: 'instance creation' stamp: 'GR 6/24/2021 03:32:09'!
withCatalog: aCatalog authenticator: anAuthenticator 

	^self new initializeWithCatalog: aCatalog andAuthenticator: anAuthenticator.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 03:32:09' prior: 50868080!
defaultStoreForTest: aTest

	^Store withCatalog: self defaultCatalog  authenticator: aTest.! !

!methodRemoval: Store class #withCatalog:andAuthenticator: stamp: 'GR 6/24/2021 03:32:09'!
withCatalog: aCatalog andAuthenticator: anAuthenticator 

	^self new initializeWithCatalog: aCatalog andAuthenticator: anAuthenticator.!
!Store class methodsFor: 'instance creation' stamp: 'GR 6/24/2021 03:33:03'!
withCatalog: aCatalog authenticator: anAuthenticator andClock: aClock  

	^self new initializeWithCatalog: aCatalog andAuthenticator: anAuthenticator.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 03:33:03' prior: 50868403!
defaultStoreForTest: aTest

	^Store withCatalog: self defaultCatalog  authenticator: aTest andClock: aTest.! !

!methodRemoval: Store class #withCatalog:authenticator: stamp: 'GR 6/24/2021 03:33:03'!
withCatalog: aCatalog authenticator: anAuthenticator 

	^self new initializeWithCatalog: aCatalog andAuthenticator: anAuthenticator.!
!Store methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 03:33:38'!
initializeWithCatalog: aCatalog authenticator: anAuthenticator.
	
	lastCart := 0.
	carts := Dictionary new.
	catalog := aCatalog.
	authenticator := anAuthenticator.! !
!Store class methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 03:33:38' prior: 50868416!
withCatalog: aCatalog authenticator: anAuthenticator andClock: aClock  

	^self new initializeWithCatalog: aCatalog authenticator: anAuthenticator.! !

!methodRemoval: Store #initializeWithCatalog:andAuthenticator: stamp: 'GR 6/24/2021 03:33:38'!
initializeWithCatalog: aCatalog andAuthenticator: anAuthenticator.
	
	lastCart := 0.
	carts := Dictionary new.
	catalog := aCatalog.
	authenticator := anAuthenticator.!
!Store methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 03:34:34'!
initializeWithCatalog: aCatalog authenticator: anAuthenticator andClock: aClock .
	
	lastCart := 0.
	carts := Dictionary new.
	catalog := aCatalog.
	authenticator := anAuthenticator.! !
!Store class methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 03:34:34' prior: 50868447!
withCatalog: aCatalog authenticator: anAuthenticator andClock: aClock  

	^self new initializeWithCatalog: aCatalog authenticator: anAuthenticator andClock: aClock.! !

!methodRemoval: Store #initializeWithCatalog:authenticator: stamp: 'GR 6/24/2021 03:34:34'!
initializeWithCatalog: aCatalog authenticator: anAuthenticator.
	
	lastCart := 0.
	carts := Dictionary new.
	catalog := aCatalog.
	authenticator := anAuthenticator.!

!classDefinition: #Store category: 'TusLibros' stamp: 'GR 6/24/2021 03:34:57'!
Object subclass: #Store
	instanceVariableNames: 'catalog lastCart carts authenticator clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 03:34:55' prior: 50868463!
initializeWithCatalog: aCatalog authenticator: anAuthenticator andClock: aClock .
	
	lastCart := 0.
	carts := Dictionary new.
	catalog := aCatalog.
	authenticator := anAuthenticator.
	clock := aClock .! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 03:38:49'!
getCartFromID: aCartID

	! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 03:39:02' prior: 50868505!
getCartFromID: aCartID

	carts at: aCartID ifAbsent: [self error: self class invalidCartIDErrorDescription ].! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 03:39:27' prior: 50868509!
getCartFromID: aCartID

	^carts at: aCartID ifAbsent: [self error: self class invalidCartIDErrorDescription ].! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 03:42:47' prior: 50867435!
addToCart: aCartID bookISBN: anISBN bookQuantity: aQuantity
	|cart|
	cart := self getCartFromID: aCartID .
	
	cart add: aQuantity of: anISBN.! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 03:42:58' prior: 50867379!
listCart: aCartID
	| cart items list|
	
	list := Dictionary new.
	
	cart := self getCartFromID: aCartID .
	
	items := cart listItems. 
		
	items asBag do: [:anItem | list at: anItem put: (items occurrencesOf: anItem)].
	
	^list.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'GR 6/24/2021 03:43:01'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GR 6/24/2021 03:43:01'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'GR 6/24/2021 03:43:01'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'GR 6/24/2021 03:43:02'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'GR 6/24/2021 03:43:02'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'GR 6/24/2021 03:43:02'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'GR 6/24/2021 03:43:02'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'GR 6/24/2021 03:43:02'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'GR 6/24/2021 03:43:02'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'GR 6/24/2021 03:43:02'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'GR 6/24/2021 03:43:02'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'GR 6/24/2021 03:43:02'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'GR 6/24/2021 03:43:02'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'GR 6/24/2021 03:43:02'!
PASSED!

!testRun: #CreditCardTest #test01invalidCardNumberShouldFail stamp: 'GR 6/24/2021 03:43:02'!
PASSED!

!testRun: #CreditCardTest #test02emptyOwnerNameShouldFail stamp: 'GR 6/24/2021 03:43:02'!
PASSED!

!testRun: #CreditCardTest #test03ownerNameTooLongShouldFail stamp: 'GR 6/24/2021 03:43:02'!
PASSED!

!testRun: #StoreTest #test01 stamp: 'GR 6/24/2021 03:43:02'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/24/2021 03:43:02'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/24/2021 03:43:02'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/24/2021 03:43:02'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/24/2021 03:43:03'!
PASSED!

!testRun: #StoreTest #test06 stamp: 'GR 6/24/2021 03:43:03'!
PASSED!

!testRun: #StoreTest #test07 stamp: 'GR 6/24/2021 03:43:03'!
PASSED!

!testRun: #StoreTest #test08 stamp: 'GR 6/24/2021 03:43:03'!
PASSED!

!testRun: #StoreTest #test09 stamp: 'GR 6/24/2021 03:43:03'!
PASSED!

!testRun: #StoreTest #test10 stamp: 'GR 6/24/2021 03:43:03'!
FAILURE!

!testRun: #StoreTest #test10 stamp: 'GR 6/24/2021 03:43:03'!
FAILURE!

!classDefinition: #Store category: 'TusLibros' stamp: 'GR 6/24/2021 03:43:28'!
Object subclass: #Store
	instanceVariableNames: 'catalog lastCart carts authenticator clock timeCreated'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 03:43:26' prior: 50867305!
createCartForClientID: aClientID withPassword: aPassword

	timeCreated := clock time.

	(authenticator check: aClientID with: aPassword) ifFalse: [self error: self class invalidLoginErrorDescription ].

	lastCart := lastCart + 1.
	carts at: lastCart put: (Cart acceptingItemsOf: catalog).
	
	^lastCart.! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 03:44:36' prior: 50868516!
getCartFromID: aCartID

	(clock time - timeCreated > 30 minutes) ifTrue: [self error: self class cartLifespanExceededErrorMessage ].

	^carts at: aCartID ifAbsent: [self error: self class invalidCartIDErrorDescription ].! !

!testRun: #StoreTest #test01 stamp: 'GR 6/24/2021 03:44:39'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/24/2021 03:44:39'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/24/2021 03:44:39'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/24/2021 03:44:40'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/24/2021 03:44:40'!
PASSED!

!testRun: #StoreTest #test06 stamp: 'GR 6/24/2021 03:44:40'!
PASSED!

!testRun: #StoreTest #test07 stamp: 'GR 6/24/2021 03:44:40'!
ERROR!

!testRun: #StoreTest #test08 stamp: 'GR 6/24/2021 03:44:40'!
ERROR!

!testRun: #StoreTest #test09 stamp: 'GR 6/24/2021 03:44:40'!
ERROR!

!testRun: #StoreTest #test10 stamp: 'GR 6/24/2021 03:44:40'!
FAILURE!
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 03:46:39' prior: 50868641!
getCartFromID: aCartID

	(clock time - timeCreated < 30 minutes) ifFalse: [self error: self class cartLifespanExceededErrorMessage ].

	^carts at: aCartID ifAbsent: [self error: self class invalidCartIDErrorDescription ].! !

!testRun: #StoreTest #test01 stamp: 'GR 6/24/2021 03:46:41'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/24/2021 03:46:41'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/24/2021 03:46:41'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/24/2021 03:46:41'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/24/2021 03:46:41'!
PASSED!

!testRun: #StoreTest #test06 stamp: 'GR 6/24/2021 03:46:41'!
PASSED!

!testRun: #StoreTest #test07 stamp: 'GR 6/24/2021 03:46:41'!
ERROR!

!testRun: #StoreTest #test08 stamp: 'GR 6/24/2021 03:46:41'!
ERROR!

!testRun: #StoreTest #test09 stamp: 'GR 6/24/2021 03:46:41'!
ERROR!

!testRun: #StoreTest #test10 stamp: 'GR 6/24/2021 03:46:41'!
ERROR!

!testRun: #StoreTest #test07 stamp: 'GR 6/24/2021 03:46:45'!
ERROR!

!testRun: #StoreTest #test04 stamp: 'GR 6/24/2021 03:46:58'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/24/2021 03:46:59'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/24/2021 03:46:59'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/24/2021 03:46:59'!
PASSED!

!testRun: #StoreTest #test10 stamp: 'GR 6/24/2021 03:46:59'!
ERROR!

!testRun: #StoreTest #test01 stamp: 'GR 6/24/2021 03:46:59'!
PASSED!

!testRun: #StoreTest #test06 stamp: 'GR 6/24/2021 03:46:59'!
PASSED!

!testRun: #StoreTest #test10 stamp: 'GR 6/24/2021 03:46:59'!
ERROR!
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 03:48:04' prior: 50868312!
test10

	|interface cartID|

	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	self advanceTimeBy: 30 minutes.
	
	self should: [interface addToCart: cartID bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.]
		raise: Error - MessageNotUnderstood withMessageText: Store cartLifespanExceededErrorMessage.
		
	
	
	
	! !

!testRun: #StoreTest #test10 stamp: 'GR 6/24/2021 03:48:05'!
PASSED!

!testRun: #StoreTest #test01 stamp: 'GR 6/24/2021 03:48:05'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/24/2021 03:48:05'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/24/2021 03:48:05'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/24/2021 03:48:06'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/24/2021 03:48:06'!
PASSED!

!testRun: #StoreTest #test06 stamp: 'GR 6/24/2021 03:48:06'!
PASSED!

!testRun: #StoreTest #test07 stamp: 'GR 6/24/2021 03:48:06'!
ERROR!

!testRun: #StoreTest #test08 stamp: 'GR 6/24/2021 03:48:06'!
ERROR!

!testRun: #StoreTest #test09 stamp: 'GR 6/24/2021 03:48:06'!
ERROR!

!testRun: #StoreTest #test10 stamp: 'GR 6/24/2021 03:48:06'!
PASSED!

!testRun: #StoreTest #test07 stamp: 'GR 6/24/2021 03:48:08'!
ERROR!
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 03:49:23' prior: 50868673!
getCartFromID: aCartID

	((clock time) - timeCreated < 30 minutes) ifFalse: [self error: self class cartLifespanExceededErrorMessage ].

	^carts at: aCartID ifAbsent: [self error: self class invalidCartIDErrorDescription ].! !

!testRun: #StoreTest #test01 stamp: 'GR 6/24/2021 03:49:25'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/24/2021 03:49:25'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/24/2021 03:49:25'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/24/2021 03:49:25'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/24/2021 03:49:25'!
PASSED!

!testRun: #StoreTest #test06 stamp: 'GR 6/24/2021 03:49:25'!
PASSED!

!testRun: #StoreTest #test07 stamp: 'GR 6/24/2021 03:49:25'!
ERROR!

!testRun: #StoreTest #test08 stamp: 'GR 6/24/2021 03:49:25'!
ERROR!

!testRun: #StoreTest #test09 stamp: 'GR 6/24/2021 03:49:25'!
ERROR!

!testRun: #StoreTest #test10 stamp: 'GR 6/24/2021 03:49:25'!
PASSED!

!testRun: #StoreTest #test07 stamp: 'GR 6/24/2021 03:49:27'!
ERROR!
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 03:52:58' prior: 50868523!
addToCart: aCartID bookISBN: anISBN bookQuantity: aQuantity
	|cart|
	cart := carts at: aCartID ifAbsent: [self error: self class invalidCartIDErrorDescription ].
	
	cart add: aQuantity of: anISBN.! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 03:53:25' prior: 50868531!
listCart: aCartID
	| cart items list|
	
	list := Dictionary new.
	
	cart := carts at: aCartID ifAbsent: [self error: self class invalidCartIDErrorDescription ].
	
	items := cart listItems. 
		
	items asBag do: [:anItem | list at: anItem put: (items occurrencesOf: anItem)].
	
	^list.! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 03:53:55' prior: 50868809!
listCart: aCartID
	| cart items list|
	
	list := Dictionary new.
	
	cart := carts at: aCartID ifAbsent: [self error: self class invalidCartIDErrorDescription ].
	
	((clock time) - timeCreated < 30 minutes) ifFalse: [self error: self class cartLifespanExceededErrorMessage ].
	
	items := cart listItems. 
		
	items asBag do: [:anItem | list at: anItem put: (items occurrencesOf: anItem)].
	
	^list.! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 03:53:58' prior: 50868800!
addToCart: aCartID bookISBN: anISBN bookQuantity: aQuantity
	|cart|
	cart := carts at: aCartID ifAbsent: [self error: self class invalidCartIDErrorDescription ].
	
	((clock time) - timeCreated < 30 minutes) ifFalse: [self error: self class cartLifespanExceededErrorMessage ].
	
	cart add: aQuantity of: anISBN.! !

!testRun: #StoreTest #test01 stamp: 'GR 6/24/2021 03:53:59'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/24/2021 03:54:00'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/24/2021 03:54:00'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/24/2021 03:54:00'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/24/2021 03:54:00'!
PASSED!

!testRun: #StoreTest #test06 stamp: 'GR 6/24/2021 03:54:00'!
PASSED!

!testRun: #StoreTest #test07 stamp: 'GR 6/24/2021 03:54:00'!
PASSED!

!testRun: #StoreTest #test08 stamp: 'GR 6/24/2021 03:54:00'!
PASSED!

!testRun: #StoreTest #test09 stamp: 'GR 6/24/2021 03:54:00'!
PASSED!

!testRun: #StoreTest #test10 stamp: 'GR 6/24/2021 03:54:00'!
PASSED!
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 03:54:11' prior: 50868837!
addToCart: aCartID bookISBN: anISBN bookQuantity: aQuantity
	|cart|
	cart := carts at: aCartID ifAbsent: [self error: self class invalidCartIDErrorDescription ].
	
	(clock time - timeCreated < 30 minutes) ifFalse: [self error: self class cartLifespanExceededErrorMessage ].
	
	cart add: aQuantity of: anISBN.! !

!testRun: #StoreTest #test01 stamp: 'GR 6/24/2021 03:54:12'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/24/2021 03:54:12'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/24/2021 03:54:12'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/24/2021 03:54:12'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/24/2021 03:54:12'!
PASSED!

!testRun: #StoreTest #test06 stamp: 'GR 6/24/2021 03:54:12'!
PASSED!

!testRun: #StoreTest #test07 stamp: 'GR 6/24/2021 03:54:12'!
PASSED!

!testRun: #StoreTest #test08 stamp: 'GR 6/24/2021 03:54:13'!
PASSED!

!testRun: #StoreTest #test09 stamp: 'GR 6/24/2021 03:54:13'!
PASSED!

!testRun: #StoreTest #test10 stamp: 'GR 6/24/2021 03:54:13'!
PASSED!
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 03:54:25' prior: 50868821!
listCart: aCartID
	| cart items list|
	
	list := Dictionary new.
	
	cart := carts at: aCartID ifAbsent: [self error: self class invalidCartIDErrorDescription ].
	
	(clock time - timeCreated < 30 minutes) ifFalse: [self error: self class cartLifespanExceededErrorMessage ].
	
	items := cart listItems. 
		
	items asBag do: [:anItem | list at: anItem put: (items occurrencesOf: anItem)].
	
	^list.! !

!testRun: #StoreTest #test01 stamp: 'GR 6/24/2021 03:54:26'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/24/2021 03:54:26'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/24/2021 03:54:26'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/24/2021 03:54:26'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/24/2021 03:54:26'!
PASSED!

!testRun: #StoreTest #test06 stamp: 'GR 6/24/2021 03:54:26'!
PASSED!

!testRun: #StoreTest #test07 stamp: 'GR 6/24/2021 03:54:26'!
PASSED!

!testRun: #StoreTest #test08 stamp: 'GR 6/24/2021 03:54:26'!
PASSED!

!testRun: #StoreTest #test09 stamp: 'GR 6/24/2021 03:54:27'!
PASSED!

!testRun: #StoreTest #test10 stamp: 'GR 6/24/2021 03:54:27'!
PASSED!
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 03:55:42'!
test11

	|interface cartID|

	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	self advanceTimeBy: 30 minutes.
	
	self should: [interface addToCart: cartID bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.]
		raise: Error - MessageNotUnderstood withMessageText: Store cartLifespanExceededErrorMessage.
		
	
	
	
	! !
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 03:56:52' prior: 50868944!
test11

	|interface cartID|

	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	self advanceTimeBy: 30 minutes.
	
	self should: [interface listCart: cartID]
		raise: Error - MessageNotUnderstood withMessageText: Store cartLifespanExceededErrorMessage.
		
	
	
	
	! !

!testRun: #StoreTest #test11 stamp: 'GR 6/24/2021 03:56:55'!
PASSED!

!testRun: #StoreTest #test01 stamp: 'GR 6/24/2021 03:56:55'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/24/2021 03:56:55'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/24/2021 03:56:55'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/24/2021 03:56:55'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/24/2021 03:56:55'!
PASSED!

!testRun: #StoreTest #test06 stamp: 'GR 6/24/2021 03:56:55'!
PASSED!

!testRun: #StoreTest #test07 stamp: 'GR 6/24/2021 03:56:55'!
PASSED!

!testRun: #StoreTest #test08 stamp: 'GR 6/24/2021 03:56:55'!
PASSED!

!testRun: #StoreTest #test09 stamp: 'GR 6/24/2021 03:56:55'!
PASSED!

!testRun: #StoreTest #test10 stamp: 'GR 6/24/2021 03:56:55'!
PASSED!

!testRun: #StoreTest #test11 stamp: 'GR 6/24/2021 03:56:56'!
PASSED!
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 03:57:21' prior: 50868960!
test11

	|interface cartID|

	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	self advanceTimeBy: 30 minutes.
	
	self should: [interface addToCart: cartID bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.]
		raise: Error - MessageNotUnderstood withMessageText: Store cartLifespanExceededErrorMessage.
		
	
	
	
	! !
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 03:59:06' prior: 50869000!
test11

	|interface cartID|

	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	self advanceTimeBy: 30 minutes.
	
	self should: [interface addToCart: cartID bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.]
		raise: Error - MessageNotUnderstood withMessageText: Store cartLifespanExceededErrorMessage.
		
	
	
	
	! !
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 03:59:11' prior: 50869016!
test11

	|interface cartIDA|

	interface := testObjectsFactory defaultStoreForTest: self.
	cartIDA := interface createCartForClientID: '1234' withPassword: '1234'.
	self advanceTimeBy: 30 minutes.
	
	self should: [interface addToCart: cartIDA bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.]
		raise: Error - MessageNotUnderstood withMessageText: Store cartLifespanExceededErrorMessage.
		
	
	
	
	! !
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 03:59:20' prior: 50869032!
test11

	|interface cartIDA cartIDB|

	interface := testObjectsFactory defaultStoreForTest: self.
	cartIDA := interface createCartForClientID: '1234' withPassword: '1234'.
	self advanceTimeBy: 30 minutes.
	
	self should: [interface addToCart: cartIDA bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.]
		raise: Error - MessageNotUnderstood withMessageText: Store cartLifespanExceededErrorMessage.
		
	
	
	
	! !
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 03:59:36' prior: 50869048!
test11

	|interface cartIDA cartIDB|

	interface := testObjectsFactory defaultStoreForTest: self.
	cartIDA := interface createCartForClientID: '1234' withPassword: '1234'.
	self advanceTimeBy: 30 minutes.
	
	cartIDB := interface createCartForClientID: '1234' withPassword: '1234'.
	
	self should: [interface addToCart: cartIDA bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.]
		raise: Error - MessageNotUnderstood withMessageText: Store cartLifespanExceededErrorMessage.
		
	
	
	
	! !
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 03:59:49' prior: 50869064!
test11

	|interface cartIDA cartIDB|

	interface := testObjectsFactory defaultStoreForTest: self.
	cartIDA := interface createCartForClientID: '1234' withPassword: '1234'.
	self advanceTimeBy: 30 minutes.
	
	cartIDB := interface createCartForClientID: '1234' withPassword: '1234'.
	
	self should: [interface addToCart: cartIDB bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.]
		raise: Error - MessageNotUnderstood withMessageText: Store cartLifespanExceededErrorMessage.
		
	
	
	
	! !
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 04:07:54' prior: 50869083!
test11

	|interface cartIDA cartIDB|

	interface := testObjectsFactory defaultStoreForTest: self.
	cartIDA := interface createCartForClientID: '1234' withPassword: '1234'.
	self advanceTimeBy: 24 minutes.
	cartIDB := interface createCartForClientID: '1234' withPassword: '1234'.
	
	interface addToCart: cartIDB bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.
	
		
	
	
	
	! !
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 04:08:08' prior: 50869102!
test11

	|interface cartIDA cartIDB|

	interface := testObjectsFactory defaultStoreForTest: self.
	cartIDA := interface createCartForClientID: '1234' withPassword: '1234'.
	self advanceTimeBy: 5 minutes.
	cartIDB := interface createCartForClientID: '1234' withPassword: '1234'.
	
	interface addToCart: cartIDB bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.
	
		
	
	
	
	! !
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 04:08:49' prior: 50869117!
test11

	|interface cartIDA cartIDB|

	interface := testObjectsFactory defaultStoreForTest: self.
	cartIDA := interface createCartForClientID: '1234' withPassword: '1234'.
	self advanceTimeBy: 5 minutes.
	cartIDB := interface createCartForClientID: '1234' withPassword: '1234'.
	self advanceTimeBy: 26 minutes.
	
	interface addToCart: cartIDA bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.
	
		
	
	
	
	! !
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 04:09:05' prior: 50869132!
test11

	|interface cartIDA cartIDB|

	interface := testObjectsFactory defaultStoreForTest: self.
	cartIDA := interface createCartForClientID: '1234' withPassword: '1234'.
	self advanceTimeBy: 5 minutes.
	cartIDB := interface createCartForClientID: '1234' withPassword: '1234'.
	self advanceTimeBy: 26 minutes.
	
	self should: [interface addToCart: cartIDA bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.]
		raise: Error - MessageNotUnderstood withMessageText: Store cartLifespanExceededErrorMessage.
	
		
	
	
	
	! !

!testRun: #StoreTest #test11 stamp: 'GR 6/24/2021 04:09:15'!
FAILURE!

!classDefinition: #Store category: 'TusLibros' stamp: 'GR 6/24/2021 04:10:07'!
Object subclass: #Store
	instanceVariableNames: 'catalog lastCart carts authenticator clock timeCreated cartCreation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'initialization' stamp: 'GR 6/24/2021 04:10:05' prior: 50868496!
initializeWithCatalog: aCatalog authenticator: anAuthenticator andClock: aClock .
	
	lastCart := 0.
	carts := Dictionary new.
	cartCreation := Dictionary new.
	catalog := aCatalog.
	authenticator := anAuthenticator.
	clock := aClock .! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 04:14:01' prior: 50868628!
createCartForClientID: aClientID withPassword: aPassword

	timeCreated := clock time.

	(authenticator check: aClientID with: aPassword) ifFalse: [self error: self class invalidLoginErrorDescription ].

	lastCart := lastCart + 1.
	carts at: lastCart put: (Cart acceptingItemsOf: catalog).
	cartCreation at: lastCart put: clock time.
	
	^lastCart.! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 04:14:05' prior: 50869188!
createCartForClientID: aClientID withPassword: aPassword

	(authenticator check: aClientID with: aPassword) ifFalse: [self error: self class invalidLoginErrorDescription ].

	lastCart := lastCart + 1.
	carts at: lastCart put: (Cart acceptingItemsOf: catalog).
	cartCreation at: lastCart put: clock time.
	
	^lastCart.! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 04:17:42' prior: 50868766!
getCartFromID: aCartID

	|creationTime|
	
	creationTime := cartCreation at: aCartID ifAbsent: [self error: self class invalidCartIDErrorDescription ].
	((clock time) - creationTime < 30 minutes) ifFalse: [self error: self class cartLifespanExceededErrorMessage ].

	^carts at: aCartID ifAbsent: [self error: self class invalidCartIDErrorDescription ].! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 04:18:07' prior: 50868907!
listCart: aCartID
	| cart items list|
	
	list := Dictionary new.
	
	cart := self getCartFromID: aCartID .
	
	(clock time - timeCreated < 30 minutes) ifFalse: [self error: self class cartLifespanExceededErrorMessage ].
	
	items := cart listItems. 
		
	items asBag do: [:anItem | list at: anItem put: (items occurrencesOf: anItem)].
	
	^list.! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 04:18:13' prior: 50869229!
listCart: aCartID
	| cart items list|
	
	list := Dictionary new.
	
	cart := self getCartFromID: aCartID .

	items := cart listItems. 
		
	items asBag do: [:anItem | list at: anItem put: (items occurrencesOf: anItem)].
	
	^list.! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 04:18:28' prior: 50868872!
addToCart: aCartID bookISBN: anISBN bookQuantity: aQuantity
	|cart|
	
	cart := self getCartFromID: aCartID .
	
	(clock time - timeCreated < 30 minutes) ifFalse: [self error: self class cartLifespanExceededErrorMessage ].
	
	cart add: aQuantity of: anISBN.! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 04:18:31' prior: 50869253!
addToCart: aCartID bookISBN: anISBN bookQuantity: aQuantity
	|cart|
	
	cart := self getCartFromID: aCartID .
	
	cart add: aQuantity of: anISBN.! !

!testRun: #StoreTest #test01 stamp: 'GR 6/24/2021 04:18:35'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/24/2021 04:18:35'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/24/2021 04:18:35'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/24/2021 04:18:35'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/24/2021 04:18:35'!
PASSED!

!testRun: #StoreTest #test06 stamp: 'GR 6/24/2021 04:18:35'!
PASSED!

!testRun: #StoreTest #test07 stamp: 'GR 6/24/2021 04:18:35'!
PASSED!

!testRun: #StoreTest #test08 stamp: 'GR 6/24/2021 04:18:35'!
PASSED!

!testRun: #StoreTest #test09 stamp: 'GR 6/24/2021 04:18:35'!
PASSED!

!testRun: #StoreTest #test10 stamp: 'GR 6/24/2021 04:18:35'!
PASSED!

!testRun: #StoreTest #test11 stamp: 'GR 6/24/2021 04:18:35'!
PASSED!
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 04:26:38'!
test12

	|interface cartIDA cartIDB|

	interface := testObjectsFactory defaultStoreForTest: self.
	cartIDA := interface createCartForClientID: '1234' withPassword: '1234'.
	self advanceTimeBy: 5 minutes.
	cartIDB := interface createCartForClientID: '1234' withPassword: '1234'.
	self advanceTimeBy: 26 minutes.
	
	self should: [interface addToCart: cartIDA bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.]
		raise: Error - MessageNotUnderstood withMessageText: Store cartLifespanExceededErrorMessage.
	
		
	
	
	
	! !
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 04:26:58' prior: 50869148!
test11

	|interface cartID|

	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	self advanceTimeBy: 30 minutes.
	
	self should: [interface listCart: cartID]
		raise: Error - MessageNotUnderstood withMessageText: Store cartLifespanExceededErrorMessage.
		
	
	
	
	! !

!testRun: #StoreTest #test11 stamp: 'GR 6/24/2021 04:27:00'!
PASSED!

!testRun: #StoreTest #test01 stamp: 'GR 6/24/2021 04:27:00'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/24/2021 04:27:00'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/24/2021 04:27:00'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/24/2021 04:27:00'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/24/2021 04:27:00'!
PASSED!

!testRun: #StoreTest #test06 stamp: 'GR 6/24/2021 04:27:00'!
PASSED!

!testRun: #StoreTest #test07 stamp: 'GR 6/24/2021 04:27:00'!
PASSED!

!testRun: #StoreTest #test08 stamp: 'GR 6/24/2021 04:27:00'!
PASSED!

!testRun: #StoreTest #test09 stamp: 'GR 6/24/2021 04:27:00'!
PASSED!

!testRun: #StoreTest #test10 stamp: 'GR 6/24/2021 04:27:01'!
PASSED!

!testRun: #StoreTest #test11 stamp: 'GR 6/24/2021 04:27:01'!
PASSED!

!testRun: #StoreTest #test12 stamp: 'GR 6/24/2021 04:27:01'!
PASSED!
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 04:27:55'!
test13

	|interface cartID|

	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	
		
	
	
	
	! !
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 04:28:02' prior: 50869357!
test13

	|interface cartID|

	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	
	
		
	
	
	
	! !
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 04:31:33' prior: 50869366!
test13

	|interface cartID|

	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	
	
	
	
		
	
	
	
	! !
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 04:32:38' prior: 50869375!
test13

	|interface cartID book|
	book := testObjectsFactory itemSellByTheStore .
	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	interface addToCart: cartID bookISBN: book bookQuantity: 1.
	
	
	
	
		
	
	
	
	! !
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 04:36:19' prior: 50869384!
test13

	|interface cartID book|
	book := testObjectsFactory itemSellByTheStore .
	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	interface addToCart: cartID bookISBN: book bookQuantity: 1.
	
	
	
	
	
	
		
	
	
	
	! !
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 04:38:47' prior: 50869396!
test13

	|interface cartID book|
	book := testObjectsFactory itemSellByTheStore .
	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	interface addToCart: cartID bookISBN: book bookQuantity: 1.
	
	interface checkOutCart: cartID usingCardNumbered: 1234567812345678 expiringOn: 123 ownedBy: 'Jose Hernandez'.
	
	
	
	
		
	
	
	
	! !
!StoreTestObjectsFactory methodsFor: 'date' stamp: 'GR 6/24/2021 04:41:46'!
nextMonthOfYear

	! !
!StoreTestObjectsFactory methodsFor: 'date' stamp: 'GR 6/24/2021 04:46:14' prior: 50869424!
nextMonthOfYear

	(Month month: today monthIndex + 1 year: today)

	! !
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 04:47:45' prior: 50869408!
test13

	|interface cartID book|
	book := testObjectsFactory itemSellByTheStore .
	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	interface addToCart: cartID bookISBN: book bookQuantity: 1.
	
	interface checkOutCart: cartID usingCardNumbered: 1234567812345678 expiringOn: testObjectsFactory nextMonthOfYear ownedBy:'Jose Hernandez'.
	
	
	
	
		
	
	
	
	! !
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 04:47:48' prior: 50869433!
test13

	|interface cartID book|
	book := testObjectsFactory itemSellByTheStore .
	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	interface addToCart: cartID bookISBN: book bookQuantity: 1.
	
	interface checkOutCart: cartID usingCardNumbered: 1234567812345678 expiringOn: testObjectsFactory nextMonthOfYear ownedBy: 'Jose Hernandez'.
	
	
	
	
		
	
	
	
	! !
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 04:47:57' prior: 50869450!
test13

	|interface cartID book|
	book := testObjectsFactory itemSellByTheStore .
	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	interface addToCart: cartID bookISBN: book bookQuantity: 1.
	
	interface checkOutCart: cartID 
			usingCardNumbered: 1234567812345678 
			expiringOn: testObjectsFactory nextMonthOfYear 
			ownedBy: 'Jose Hernandez'.
	
	
	
	
		
	
	
	
	! !
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 04:50:05' prior: 50869467!
test13

	|interface cartID book|
	book := testObjectsFactory itemSellByTheStore .
	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	interface addToCart: cartID bookISBN: book bookQuantity: 1.
	
	interface checkOutCart: cartID 
			usingCardNumbered: 1234567812345678 
			expiringOn: testObjectsFactory nextMonthOfYear 
			ownedBy: 'Jose Hernandez'.
	
	
	
	
		
	
	
	
	! !
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 05:19:29' prior: 50869484!
test13

	|interface cartID book|
	book := testObjectsFactory itemSellByTheStore .
	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	interface addToCart: cartID bookISBN: book bookQuantity: 1.
	
	interface checkOutCart: cartID 
			usingCardNumbered: 1234567812345678 
			expiringOn: testObjectsFactory nextMonthOfYear 
			ownedBy: 'Jose Hernandez'.
			
	self assert: true.
	
	
	
	
		
	
	
	
	! !
!StoreTestObjectsFactory methodsFor: 'date' stamp: 'GR 6/24/2021 05:20:03' prior: 50869428!
nextMonthOfYear

	(Month month: (today monthIndex + 1) year: today)

	! !
!StoreTestObjectsFactory methodsFor: 'date' stamp: 'GR 6/24/2021 05:21:19' prior: 50869519!
nextMonthOfYear

	(Month month: (today monthIndex) + 1 year: today)

	! !
!StoreTestObjectsFactory methodsFor: 'date' stamp: 'GR 6/24/2021 05:21:26' prior: 50869525!
nextMonthOfYear

	^Month month: (today monthIndex) + 1 year: today

	! !
!StoreTestObjectsFactory methodsFor: 'date' stamp: 'GR 6/24/2021 05:22:19'!
futureMonthOfYear

	^Month month: (today monthIndex) + 1 year: today

	! !

!methodRemoval: StoreTestObjectsFactory #nextMonthOfYear stamp: 'GR 6/24/2021 05:22:35'!
nextMonthOfYear

	^Month month: (today monthIndex) + 1 year: today

	!
!StoreTestObjectsFactory methodsFor: 'date' stamp: 'GR 6/24/2021 05:22:39' prior: 50869536!
futureMonthOfYear

	^Month month: today monthIndex year: today yearNumber + 1

	! !
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 05:22:53' prior: 50869501!
test13

	|interface cartID book|
	book := testObjectsFactory itemSellByTheStore .
	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	interface addToCart: cartID bookISBN: book bookQuantity: 1.
	
	interface checkOutCart: cartID 
			usingCardNumbered: 1234567812345678 
			expiringOn: testObjectsFactory futureMonthOfYear 
			ownedBy: 'Jose Hernandez'.
			
	self assert: true.
	
	
	
	
		
	
	
	
	! !

!testRun: #StoreTest #test13 stamp: 'GR 6/24/2021 05:22:54'!
ERROR!
!Store methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 05:23:07'!
checkOutCart: aSmallInteger usingCardNumbered: aSmallInteger2 expiringOn: aMonth ownedBy: aString 
	self shouldBeImplemented.! !
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 05:25:39' prior: 50869553!
test13

	|interface cartID book purchasesList|
	book := testObjectsFactory itemSellByTheStore .
	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	interface addToCart: cartID bookISBN: book bookQuantity: 1.
	
	interface checkOutCart: cartID 
			usingCardNumbered: 1234567812345678 
			expiringOn: testObjectsFactory futureMonthOfYear 
			ownedBy: 'Jose Hernandez'.
			
	self assert: true.
	
	
	
	
		
	
	
	
	! !
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 05:37:14' prior: 50869580!
test13

	|interface cartID book purchasesList clientID password|
	clientID := '1234'.
	password := '1234'.
	
	book := testObjectsFactory itemSellByTheStore .
	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	interface addToCart: cartID bookISBN: book bookQuantity: 1.
	
	interface checkOutCart: cartID 
			usingCardNumbered: 1234567812345678 
			expiringOn: testObjectsFactory futureMonthOfYear 
			ownedBy: 'Jose Hernandez'.
			
	purchasesList := 			interface listPurchasesFrom: clientID using: password .
	self assert: 1 equals: (purchasesList at: book) .
	self assert: 1 equals: purchasesList size.
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchasesList total.
	
	
	
	
		
	
	
	
	! !
!Sale class methodsFor: 'instance creation' stamp: 'GR 6/24/2021 05:47:19' prior: 50859823!
of: aTotal

	"should assert total is not negative or 0!!"
	self assertTotalIsPositive: aTotal.
	^self new initializeTotal: aTotal ! !
!Sale class methodsFor: 'instance creation' stamp: 'GR 6/24/2021 05:48:39'!
assertTotalIsPositive: aTotal

	(aTotal > 0) ifFalse: [self error: self totalIsNotPositiveErrorDescription]! !
!Sale class methodsFor: 'instance creation' stamp: 'GR 6/24/2021 05:49:02'!
totalIsNotPositiveErrorDescription

	^'Sale total must be greater than zero'.! !
!Sale class methodsFor: 'instance creation' stamp: 'GR 6/24/2021 05:51:51'!
of: aListOfItems of: aTotal

	"should assert total is not negative or 0!!"
	self assertTotalIsPositive: aTotal.
	^self new initializeTotal: aTotal ! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 05:51:51' prior: 50859534!
createSale

	^ Sale of: cart listItems of: total
! !

!methodRemoval: Sale class #of: stamp: 'GR 6/24/2021 05:51:51'!
of: aTotal

	"should assert total is not negative or 0!!"
	self assertTotalIsPositive: aTotal.
	^self new initializeTotal: aTotal !
!Sale class methodsFor: 'instance creation' stamp: 'GR 6/24/2021 05:52:14'!
of: aListOfItems totaling: aTotal

	"should assert total is not negative or 0!!"
	self assertTotalIsPositive: aTotal.
	^self new initializeTotal: aTotal ! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 05:52:14' prior: 50869652!
createSale

	^ Sale of: cart listItems totaling: total
! !

!methodRemoval: Sale class #of:of: stamp: 'GR 6/24/2021 05:52:14'!
of: aListOfItems of: aTotal

	"should assert total is not negative or 0!!"
	self assertTotalIsPositive: aTotal.
	^self new initializeTotal: aTotal !
!Sale methodsFor: 'initialization' stamp: 'GR 6/24/2021 05:52:58'!
initializeTotaling: aTotal

	total := aTotal ! !
!Sale class methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 05:52:58' prior: 50869663!
of: aListOfItems totaling: aTotal

	"should assert total is not negative or 0!!"
	self assertTotalIsPositive: aTotal.
	^self new initializeTotaling: aTotal ! !

!methodRemoval: Sale #initializeTotal: stamp: 'GR 6/24/2021 05:52:58'!
initializeTotal: aTotal

	total := aTotal !
!Sale methodsFor: 'initialization' stamp: 'GR 6/24/2021 05:54:01'!
initializeOf: aListOfItems initializeTotaling: aTotal

	total := aTotal ! !
!Sale class methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 05:54:01' prior: 50869687!
of: aListOfItems totaling: aTotal

	"should assert total is not negative or 0!!"
	self assertTotalIsPositive: aTotal.
	^self new initializeOf: aListOfItems initializeTotaling: aTotal ! !

!methodRemoval: Sale #initializeTotaling: stamp: 'GR 6/24/2021 05:54:01'!
initializeTotaling: aTotal

	total := aTotal !
!Sale methodsFor: 'initialization' stamp: 'GR 6/24/2021 05:54:19'!
initializeOf: aListOfItems totaling: aTotal

	total := aTotal ! !
!Sale class methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 05:54:19' prior: 50869704!
of: aListOfItems totaling: aTotal

	"should assert total is not negative or 0!!"
	self assertTotalIsPositive: aTotal.
	^self new initializeOf: aListOfItems totaling: aTotal ! !

!methodRemoval: Sale #initializeOf:initializeTotaling: stamp: 'GR 6/24/2021 05:54:19'!
initializeOf: aListOfItems initializeTotaling: aTotal

	total := aTotal !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'GR 6/24/2021 05:54:29'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GR 6/24/2021 05:54:29'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'GR 6/24/2021 05:54:30'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'GR 6/24/2021 05:54:30'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'GR 6/24/2021 05:54:30'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'GR 6/24/2021 05:54:30'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'GR 6/24/2021 05:54:30'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'GR 6/24/2021 05:54:30'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'GR 6/24/2021 05:54:30'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'GR 6/24/2021 05:54:30'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'GR 6/24/2021 05:54:30'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'GR 6/24/2021 05:54:30'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'GR 6/24/2021 05:54:30'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'GR 6/24/2021 05:54:30'!
PASSED!

!testRun: #CreditCardTest #test01invalidCardNumberShouldFail stamp: 'GR 6/24/2021 05:54:30'!
PASSED!

!testRun: #CreditCardTest #test02emptyOwnerNameShouldFail stamp: 'GR 6/24/2021 05:54:30'!
PASSED!

!testRun: #CreditCardTest #test03ownerNameTooLongShouldFail stamp: 'GR 6/24/2021 05:54:30'!
PASSED!

!testRun: #StoreTest #test01 stamp: 'GR 6/24/2021 05:54:30'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/24/2021 05:54:30'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/24/2021 05:54:31'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/24/2021 05:54:31'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/24/2021 05:54:31'!
PASSED!

!testRun: #StoreTest #test06 stamp: 'GR 6/24/2021 05:54:31'!
PASSED!

!testRun: #StoreTest #test07 stamp: 'GR 6/24/2021 05:54:31'!
PASSED!

!testRun: #StoreTest #test08 stamp: 'GR 6/24/2021 05:54:31'!
PASSED!

!testRun: #StoreTest #test09 stamp: 'GR 6/24/2021 05:54:31'!
PASSED!

!testRun: #StoreTest #test10 stamp: 'GR 6/24/2021 05:54:31'!
PASSED!

!testRun: #StoreTest #test11 stamp: 'GR 6/24/2021 05:54:31'!
PASSED!

!testRun: #StoreTest #test12 stamp: 'GR 6/24/2021 05:54:31'!
PASSED!

!testRun: #StoreTest #test13 stamp: 'GR 6/24/2021 05:54:31'!
ERROR!

!testRun: #StoreTest #test13 stamp: 'GR 6/24/2021 05:54:31'!
ERROR!

!classDefinition: #Sale category: 'TusLibros' stamp: 'GR 6/24/2021 05:55:08'!
Object subclass: #Sale
	instanceVariableNames: 'total items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'GR 6/24/2021 05:55:06' prior: 50869716!
initializeOf: aListOfItems totaling: aTotal

	total := aTotal .
	items := aListOfItems .! !
!Sale methodsFor: 'initialization' stamp: 'GR 6/24/2021 05:55:20'!
items

	^items.! !

!classDefinition: #Store category: 'TusLibros' stamp: 'GR 6/24/2021 05:56:14'!
Object subclass: #Store
	instanceVariableNames: 'catalog lastCart carts authenticator clock timeCreated cartCreation salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'initialization' stamp: 'GR 6/24/2021 05:56:12' prior: 50869178!
initializeWithCatalog: aCatalog authenticator: anAuthenticator andClock: aClock .
	
	lastCart := 0.
	carts := Dictionary new.
	cartCreation := Dictionary new.
	catalog := aCatalog.
	authenticator := anAuthenticator.
	clock := aClock .
	salesBook := OrderedCollection new.! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 05:59:30' prior: 50869573!
checkOutCart: aCartID usingCardNumbered: aCardNumber expiringOn: aMonthOfYear ownedBy: aName
	|cashier creditCard|
	
	creditCard := 1.
	cashier:= Cashier 
		toCheckout: aCartID 
		charging: 1
		throught: self
		on: 1
		registeringOn: salesBook.! !
!Store class methodsFor: 'instance creation' stamp: 'GR 6/24/2021 06:00:41'!
withCatalog: aCatalog authenticator: anAuthenticator merchantProcessor: anMP andClock: aClock  

	^self new initializeWithCatalog: aCatalog authenticator: anAuthenticator andClock: aClock.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 06:00:41' prior: 50868425!
defaultStoreForTest: aTest

	^Store withCatalog: self defaultCatalog  authenticator: aTest merchantProcessor: aTest andClock: aTest.! !

!methodRemoval: Store class #withCatalog:authenticator:andClock: stamp: 'GR 6/24/2021 06:00:41'!
withCatalog: aCatalog authenticator: anAuthenticator andClock: aClock  

	^self new initializeWithCatalog: aCatalog authenticator: anAuthenticator andClock: aClock.!
!Store methodsFor: 'initialization' stamp: 'GR 6/24/2021 06:01:38'!
initializeWithCatalog: aCatalog authenticator: anAuthenticator merchantProcessor: anMP andClock: aClock .
	
	lastCart := 0.
	carts := Dictionary new.
	cartCreation := Dictionary new.
	catalog := aCatalog.
	authenticator := anAuthenticator.
	clock := aClock .
	salesBook := OrderedCollection new.! !
!Store class methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 06:01:38' prior: 50869866!
withCatalog: aCatalog authenticator: anAuthenticator merchantProcessor: anMP andClock: aClock  

	^self new initializeWithCatalog: aCatalog authenticator: anAuthenticator merchantProcessor: anMP andClock: aClock.! !

!methodRemoval: Store #initializeWithCatalog:authenticator:andClock: stamp: 'GR 6/24/2021 06:01:38'!
initializeWithCatalog: aCatalog authenticator: anAuthenticator andClock: aClock .
	
	lastCart := 0.
	carts := Dictionary new.
	cartCreation := Dictionary new.
	catalog := aCatalog.
	authenticator := anAuthenticator.
	clock := aClock .
	salesBook := OrderedCollection new.!

!classDefinition: #Store category: 'TusLibros' stamp: 'GR 6/24/2021 06:02:14'!
Object subclass: #Store
	instanceVariableNames: 'catalog lastCart carts authenticator clock timeCreated cartCreation salesBook merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'initialization' stamp: 'GR 6/24/2021 06:02:13' prior: 50869891!
initializeWithCatalog: aCatalog authenticator: anAuthenticator merchantProcessor: anMP andClock: aClock .
	
	lastCart := 0.
	carts := Dictionary new.
	cartCreation := Dictionary new.
	
	salesBook := OrderedCollection new.
	
	catalog := aCatalog.
	authenticator := anAuthenticator.
	merchantProcessor := anMP.
	clock := aClock .! !

!testRun: #StoreTest #test01 stamp: 'GR 6/24/2021 06:02:21'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/24/2021 06:02:21'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/24/2021 06:02:21'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/24/2021 06:02:21'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/24/2021 06:02:21'!
PASSED!

!testRun: #StoreTest #test06 stamp: 'GR 6/24/2021 06:02:21'!
PASSED!

!testRun: #StoreTest #test07 stamp: 'GR 6/24/2021 06:02:22'!
PASSED!

!testRun: #StoreTest #test08 stamp: 'GR 6/24/2021 06:02:22'!
PASSED!

!testRun: #StoreTest #test09 stamp: 'GR 6/24/2021 06:02:22'!
PASSED!

!testRun: #StoreTest #test10 stamp: 'GR 6/24/2021 06:02:22'!
PASSED!

!testRun: #StoreTest #test11 stamp: 'GR 6/24/2021 06:02:22'!
PASSED!

!testRun: #StoreTest #test12 stamp: 'GR 6/24/2021 06:02:22'!
PASSED!

!testRun: #StoreTest #test13 stamp: 'GR 6/24/2021 06:02:22'!
ERROR!

!testRun: #StoreTest #test13 stamp: 'GR 6/24/2021 06:02:22'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'GR 6/24/2021 06:02:27'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GR 6/24/2021 06:02:27'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'GR 6/24/2021 06:02:27'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'GR 6/24/2021 06:02:27'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'GR 6/24/2021 06:02:27'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'GR 6/24/2021 06:02:27'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'GR 6/24/2021 06:02:27'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'GR 6/24/2021 06:02:27'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'GR 6/24/2021 06:02:28'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'GR 6/24/2021 06:02:28'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'GR 6/24/2021 06:02:28'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'GR 6/24/2021 06:02:28'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'GR 6/24/2021 06:02:28'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'GR 6/24/2021 06:02:28'!
PASSED!

!testRun: #CreditCardTest #test01invalidCardNumberShouldFail stamp: 'GR 6/24/2021 06:02:28'!
PASSED!

!testRun: #CreditCardTest #test02emptyOwnerNameShouldFail stamp: 'GR 6/24/2021 06:02:28'!
PASSED!

!testRun: #CreditCardTest #test03ownerNameTooLongShouldFail stamp: 'GR 6/24/2021 06:02:28'!
PASSED!

!testRun: #StoreTest #test01 stamp: 'GR 6/24/2021 06:02:28'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/24/2021 06:02:28'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/24/2021 06:02:28'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/24/2021 06:02:28'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/24/2021 06:02:28'!
PASSED!

!testRun: #StoreTest #test06 stamp: 'GR 6/24/2021 06:02:28'!
PASSED!

!testRun: #StoreTest #test07 stamp: 'GR 6/24/2021 06:02:28'!
PASSED!

!testRun: #StoreTest #test08 stamp: 'GR 6/24/2021 06:02:28'!
PASSED!

!testRun: #StoreTest #test09 stamp: 'GR 6/24/2021 06:02:28'!
PASSED!

!testRun: #StoreTest #test10 stamp: 'GR 6/24/2021 06:02:29'!
PASSED!

!testRun: #StoreTest #test11 stamp: 'GR 6/24/2021 06:02:29'!
PASSED!

!testRun: #StoreTest #test12 stamp: 'GR 6/24/2021 06:02:29'!
PASSED!

!testRun: #StoreTest #test13 stamp: 'GR 6/24/2021 06:02:29'!
ERROR!

!testRun: #StoreTest #test13 stamp: 'GR 6/24/2021 06:02:29'!
ERROR!
!StoreTest methodsFor: 'mocking' stamp: 'GR 6/24/2021 06:03:51'!
debit: anAmount from: aCreditCard ! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 06:06:07' prior: 50869855!
checkOutCart: aCartID usingCardNumbered: aCardNumber expiringOn: aMonthOfYear ownedBy: aName
	|cashier creditCard|
	
	creditCard := CreditCard expiringOn: aMonthOfYear numbered: aCardNumber ownedBy: aName.
	cashier:= Cashier 
		toCheckout: aCartID 
		charging: creditCard 
		throught: merchantProcessor 
		on: clock today
		registeringOn: salesBook.! !
!StoreTest methodsFor: 'mocking' stamp: 'GR 6/24/2021 06:07:12'!
today
	^time.! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 06:07:54' prior: 50870068!
checkOutCart: aCartID usingCardNumbered: aCardNumber expiringOn: aMonthOfYear ownedBy: aName
	|cashier creditCard|
	
	creditCard := CreditCard expiringOn: aMonthOfYear numbered: aCardNumber ownedBy: aName.
	
	cashier:= Cashier 
		toCheckout: aCartID 
		charging: creditCard 
		throught: merchantProcessor 
		on: clock today
		registeringOn: salesBook.! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 06:08:57' prior: 50870086!
checkOutCart: aCartID usingCardNumbered: aCardNumber expiringOn: aMonthOfYear ownedBy: aName
	|cashier creditCard|
	
	creditCard := CreditCard expiringOn: aMonthOfYear numbered: aCardNumber ownedBy: aName.
	
	cashier:= Cashier 
		toCheckout: aCartID 
		charging: creditCard 
		throught: merchantProcessor 
		on: clock today
		registeringOn: salesBook.
		
	cashier! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 06:09:15' prior: 50870100!
checkOutCart: aCartID usingCardNumbered: aCardNumber expiringOn: aMonthOfYear ownedBy: aName
	|cashier creditCard|
	
	creditCard := CreditCard expiringOn: aMonthOfYear numbered: aCardNumber ownedBy: aName.
	
	cashier:= Cashier 
		toCheckout: aCartID 
		charging: creditCard 
		throught: merchantProcessor 
		on: clock today
		registeringOn: salesBook.
		
	cashier checkOut.! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 06:09:19' prior: 50870114!
checkOutCart: aCartID usingCardNumbered: aCardNumber expiringOn: aMonthOfYear ownedBy: aName
	|cashier creditCard|
	
	creditCard := CreditCard expiringOn: aMonthOfYear numbered: aCardNumber ownedBy: aName.
	
	cashier := Cashier 
		toCheckout: aCartID 
		charging: creditCard 
		throught: merchantProcessor 
		on: clock today
		registeringOn: salesBook.
		
	cashier checkOut.! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 06:10:20' prior: 50870129!
checkOutCart: aCartID usingCardNumbered: aCardNumber expiringOn: aMonthOfYear ownedBy: aName
	|cashier creditCard|
	
	creditCard := CreditCard expiringOn: aMonthOfYear numbered: aCardNumber ownedBy: aName.
	
	cashier := Cashier 
		toCheckout: aCartID 
		charging: creditCard 
		throught: merchantProcessor 
		on: clock today
		registeringOn: salesBook.
		
	cashier checkOut.
	
	^aCartID.! !

!testRun: #StoreTest #test01 stamp: 'GR 6/24/2021 06:10:31'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/24/2021 06:10:31'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/24/2021 06:10:31'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/24/2021 06:10:31'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/24/2021 06:10:31'!
PASSED!

!testRun: #StoreTest #test06 stamp: 'GR 6/24/2021 06:10:31'!
PASSED!

!testRun: #StoreTest #test07 stamp: 'GR 6/24/2021 06:10:31'!
PASSED!

!testRun: #StoreTest #test08 stamp: 'GR 6/24/2021 06:10:31'!
PASSED!

!testRun: #StoreTest #test09 stamp: 'GR 6/24/2021 06:10:32'!
PASSED!

!testRun: #StoreTest #test10 stamp: 'GR 6/24/2021 06:10:32'!
PASSED!

!testRun: #StoreTest #test11 stamp: 'GR 6/24/2021 06:10:32'!
PASSED!

!testRun: #StoreTest #test12 stamp: 'GR 6/24/2021 06:10:32'!
PASSED!

!testRun: #StoreTest #test13 stamp: 'GR 6/24/2021 06:10:32'!
ERROR!

!testRun: #StoreTest #test13 stamp: 'GR 6/24/2021 06:10:32'!
ERROR!

!testRun: #StoreTest #test13 stamp: 'GR 6/24/2021 06:10:57'!
ERROR!
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 06:11:36' prior: 50870144!
checkOutCart: aCartID usingCardNumbered: aCardNumber expiringOn: aMonthOfYear ownedBy: aName
	|cashier creditCard cart|
	
	cart := self getCartFromID: aCartID .
		
	creditCard := CreditCard expiringOn: aMonthOfYear numbered: aCardNumber ownedBy: aName.
	
	cashier := Cashier 
		toCheckout: cart
		charging: creditCard 
		throught: merchantProcessor 
		on: clock today
		registeringOn: salesBook.
		
	cashier checkOut.
	
	^aCartID.! !

!testRun: #StoreTest #test01 stamp: 'GR 6/24/2021 06:11:40'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/24/2021 06:11:40'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/24/2021 06:11:40'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/24/2021 06:11:40'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/24/2021 06:11:40'!
PASSED!

!testRun: #StoreTest #test06 stamp: 'GR 6/24/2021 06:11:40'!
PASSED!

!testRun: #StoreTest #test07 stamp: 'GR 6/24/2021 06:11:40'!
PASSED!

!testRun: #StoreTest #test08 stamp: 'GR 6/24/2021 06:11:40'!
PASSED!

!testRun: #StoreTest #test09 stamp: 'GR 6/24/2021 06:11:40'!
PASSED!

!testRun: #StoreTest #test10 stamp: 'GR 6/24/2021 06:11:41'!
PASSED!

!testRun: #StoreTest #test11 stamp: 'GR 6/24/2021 06:11:41'!
PASSED!

!testRun: #StoreTest #test12 stamp: 'GR 6/24/2021 06:11:41'!
PASSED!

!testRun: #StoreTest #test13 stamp: 'GR 6/24/2021 06:11:41'!
ERROR!

!testRun: #StoreTest #test13 stamp: 'GR 6/24/2021 06:11:41'!
ERROR!
!Store methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 06:11:52'!
listPurchasesFrom: aString using: aString2 
	self shouldBeImplemented.! !
!Store methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 06:12:10' prior: 50870239!
listPurchasesFrom: aUserID using: aPassword
	! !
!Store methodsFor: 'assertions' stamp: 'GR 6/24/2021 06:13:10'!
assertValidLoginFor: aUserID using: aPassword! !
!Store methodsFor: 'assertions' stamp: 'GR 6/24/2021 06:13:34' prior: 50870249!
assertValidLoginFor: aUserID using: aPassword

	(authenticator check: aUserID with: aPassword) ifFalse: [self error: self class invalidLoginErrorDescription ].! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 06:13:50' prior: 50869202!
createCartForClientID: aUserID withPassword: aPassword

	(authenticator check: aUserID with: aPassword) ifFalse: [self error: self class invalidLoginErrorDescription ].

	lastCart := lastCart + 1.
	carts at: lastCart put: (Cart acceptingItemsOf: catalog).
	cartCreation at: lastCart put: clock time.
	
	^lastCart.! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 06:14:08' prior: 50870262!
createCartForClientID: aUserID withPassword: aPassword

	self assertValidLoginFor: aUserID using: aPassword .

	lastCart := lastCart + 1.
	carts at: lastCart put: (Cart acceptingItemsOf: catalog).
	cartCreation at: lastCart put: clock time.
	
	^lastCart.! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 06:14:15' prior: 50870245!
listPurchasesFrom: aUserID using: aPassword

	self assertValidLoginFor: aUserID using: aPassword .
	! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 06:14:18' prior: 50870286!
listPurchasesFrom: aUserID using: aPassword

	self assertValidLoginFor: aUserID using: aPassword .
	
	
	! !

Object subclass: #purchaseList
	instanceVariableNames: 'items total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #PurchaseList
	instanceVariableNames: 'items total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #PurchaseList category: 'TusLibros' stamp: 'GR 6/24/2021 06:16:22'!
Object subclass: #PurchaseList
	instanceVariableNames: 'items total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!PurchaseList methodsFor: 'no messages' stamp: 'GR 6/24/2021 06:16:49' overrides: 16896425!
initialize

	items := Dictionary new.! !
!PurchaseList methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 06:17:03' prior: 50870315 overrides: 16896425!
initialize

	items := Dictionary new.
	total := 0.! !

!classRenamed: #PurchaseList as: #SaleList stamp: 'GR 6/24/2021 06:17:57'!
Smalltalk renameClassNamed: #PurchaseList as: #SaleList!
!SaleList methodsFor: 'initialization' stamp: 'GR 6/24/2021 06:18:23'!
addSale: aSale.! !
!SaleList methodsFor: 'initialization' stamp: 'GR 6/24/2021 06:18:25' prior: 50870329!
addSale: aSale! !
!SaleList methodsFor: 'initialization' stamp: 'GR 6/24/2021 06:18:41' prior: 50870333!
addSale: aSale

	! !
!SaleList methodsFor: 'initialization' stamp: 'GR 6/24/2021 06:22:16' prior: 50870337!
addSale: aSale

	items addAll: aSale items.
	total := total + aSale total.! !
!SaleList methodsFor: 'initialization' stamp: 'GR 6/24/2021 06:22:30' prior: 50870320 overrides: 16896425!
initialize

	items := Bag new.
	total := 0.! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 06:23:15' prior: 50869243!
listCart: aCartID
	| cart items list|
	
	list := Dictionary new.
	
	cart := self getCartFromID: aCartID .

	^cart listItems asBag.
	! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 06:23:27' prior: 50870351!
listCart: aCartID
	| cart |
	
	cart := self getCartFromID: aCartID .

	^cart listItems asBag.
	! !

!testRun: #StoreTest #test01 stamp: 'GR 6/24/2021 06:23:28'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/24/2021 06:23:28'!
ERROR!

!testRun: #StoreTest #test03 stamp: 'GR 6/24/2021 06:23:28'!
ERROR!

!testRun: #StoreTest #test04 stamp: 'GR 6/24/2021 06:23:28'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/24/2021 06:23:28'!
ERROR!

!testRun: #StoreTest #test06 stamp: 'GR 6/24/2021 06:23:28'!
PASSED!

!testRun: #StoreTest #test07 stamp: 'GR 6/24/2021 06:23:28'!
PASSED!

!testRun: #StoreTest #test08 stamp: 'GR 6/24/2021 06:23:28'!
PASSED!

!testRun: #StoreTest #test09 stamp: 'GR 6/24/2021 06:23:28'!
PASSED!

!testRun: #StoreTest #test10 stamp: 'GR 6/24/2021 06:23:28'!
PASSED!

!testRun: #StoreTest #test11 stamp: 'GR 6/24/2021 06:23:29'!
PASSED!

!testRun: #StoreTest #test12 stamp: 'GR 6/24/2021 06:23:29'!
PASSED!

!testRun: #StoreTest #test13 stamp: 'GR 6/24/2021 06:23:29'!
ERROR!
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 06:23:49' prior: 50868102!
test02

	|interface cartID cartList|

	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	
	interface addToCart: cartID bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.	
	cartList := interface listCart: cartID.
	
	self assert: 1 equals: cartList size.
	self assert: 1 equals: (cartList occurrencesOf: testObjectsFactory itemSellByTheStore).

	! !

!testRun: #StoreTest #test01 stamp: 'GR 6/24/2021 06:23:52'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/24/2021 06:23:52'!
PASSED!

!testRun: #StoreTest #test06 stamp: 'GR 6/24/2021 06:23:52'!
PASSED!

!testRun: #StoreTest #test07 stamp: 'GR 6/24/2021 06:23:52'!
PASSED!

!testRun: #StoreTest #test08 stamp: 'GR 6/24/2021 06:23:52'!
PASSED!

!testRun: #StoreTest #test09 stamp: 'GR 6/24/2021 06:23:52'!
PASSED!

!testRun: #StoreTest #test10 stamp: 'GR 6/24/2021 06:23:52'!
PASSED!

!testRun: #StoreTest #test11 stamp: 'GR 6/24/2021 06:23:52'!
PASSED!

!testRun: #StoreTest #test12 stamp: 'GR 6/24/2021 06:23:52'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/24/2021 06:23:52'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/24/2021 06:23:52'!
ERROR!

!testRun: #StoreTest #test05 stamp: 'GR 6/24/2021 06:23:53'!
ERROR!

!testRun: #StoreTest #test13 stamp: 'GR 6/24/2021 06:23:53'!
ERROR!

!testRun: #StoreTest #test01 stamp: 'GR 6/24/2021 06:24:16'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/24/2021 06:24:17'!
PASSED!

!testRun: #StoreTest #test06 stamp: 'GR 6/24/2021 06:24:17'!
PASSED!

!testRun: #StoreTest #test07 stamp: 'GR 6/24/2021 06:24:17'!
PASSED!

!testRun: #StoreTest #test08 stamp: 'GR 6/24/2021 06:24:17'!
PASSED!

!testRun: #StoreTest #test09 stamp: 'GR 6/24/2021 06:24:17'!
PASSED!

!testRun: #StoreTest #test10 stamp: 'GR 6/24/2021 06:24:17'!
PASSED!

!testRun: #StoreTest #test11 stamp: 'GR 6/24/2021 06:24:17'!
PASSED!

!testRun: #StoreTest #test12 stamp: 'GR 6/24/2021 06:24:17'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/24/2021 06:24:17'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/24/2021 06:24:17'!
ERROR!

!testRun: #StoreTest #test05 stamp: 'GR 6/24/2021 06:24:17'!
ERROR!

!testRun: #StoreTest #test13 stamp: 'GR 6/24/2021 06:24:17'!
ERROR!
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 06:24:24' prior: 50868119!
test03

	|interface cartID cartList|
	
	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	
	interface addToCart: cartID bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.	
	cartList := interface listCart: cartID.
	
	self assert: 1 equals: cartList size.
	self assert: 1 equals: (cartList ocurrencesOf: testObjectsFactory itemSellByTheStore).

	! !

!testRun: #StoreTest #test01 stamp: 'GR 6/24/2021 06:24:29'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/24/2021 06:24:29'!
PASSED!

!testRun: #StoreTest #test06 stamp: 'GR 6/24/2021 06:24:29'!
PASSED!

!testRun: #StoreTest #test07 stamp: 'GR 6/24/2021 06:24:29'!
PASSED!

!testRun: #StoreTest #test08 stamp: 'GR 6/24/2021 06:24:29'!
PASSED!

!testRun: #StoreTest #test09 stamp: 'GR 6/24/2021 06:24:29'!
PASSED!

!testRun: #StoreTest #test10 stamp: 'GR 6/24/2021 06:24:30'!
PASSED!

!testRun: #StoreTest #test11 stamp: 'GR 6/24/2021 06:24:30'!
PASSED!

!testRun: #StoreTest #test12 stamp: 'GR 6/24/2021 06:24:30'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/24/2021 06:24:30'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/24/2021 06:24:30'!
ERROR!

!testRun: #StoreTest #test05 stamp: 'GR 6/24/2021 06:24:30'!
ERROR!

!testRun: #StoreTest #test13 stamp: 'GR 6/24/2021 06:24:30'!
ERROR!
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 06:24:55' prior: 50870466!
test03

	|interface cartID cartList|
	
	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	
	interface addToCart: cartID bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.	
	cartList := interface listCart: cartID.
	
	self assert: 1 equals: cartList size.
	self assert: 1 equals: (cartList occurrencesOf: testObjectsFactory itemSellByTheStore).

	! !

!testRun: #StoreTest #test01 stamp: 'GR 6/24/2021 06:25:01'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/24/2021 06:25:01'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/24/2021 06:25:01'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/24/2021 06:25:01'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/24/2021 06:25:01'!
ERROR!

!testRun: #StoreTest #test06 stamp: 'GR 6/24/2021 06:25:02'!
PASSED!

!testRun: #StoreTest #test07 stamp: 'GR 6/24/2021 06:25:02'!
PASSED!

!testRun: #StoreTest #test08 stamp: 'GR 6/24/2021 06:25:02'!
PASSED!

!testRun: #StoreTest #test09 stamp: 'GR 6/24/2021 06:25:02'!
PASSED!

!testRun: #StoreTest #test10 stamp: 'GR 6/24/2021 06:25:02'!
PASSED!

!testRun: #StoreTest #test11 stamp: 'GR 6/24/2021 06:25:02'!
PASSED!

!testRun: #StoreTest #test12 stamp: 'GR 6/24/2021 06:25:02'!
PASSED!

!testRun: #StoreTest #test13 stamp: 'GR 6/24/2021 06:25:02'!
ERROR!
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 06:25:17' prior: 50868148!
test05

	|interface cartIDA cartIDB listCartA listCartB book|
	
	book := testObjectsFactory itemSellByTheStore .
	interface := testObjectsFactory defaultStoreForTest: self.
	cartIDA := interface createCartForClientID: '1234' withPassword: '1234'.
	cartIDB := interface createCartForClientID: '1234' withPassword: '1234'.
	
	interface addToCart: cartIDA bookISBN: book bookQuantity: 1.
	interface addToCart: cartIDB bookISBN: book bookQuantity: 2.	
	
	listCartA := interface listCart: cartIDA.
	listCartB := interface listCart: cartIDB.

	self assert: 1 equals: (listCartA occurrencesOf: book).
	self assert: 2 equals: (listCartB occurrencesOf: book).	! !

!testRun: #StoreTest #test01 stamp: 'GR 6/24/2021 06:25:22'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/24/2021 06:25:22'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/24/2021 06:25:22'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/24/2021 06:25:22'!
PASSED!

!testRun: #StoreTest #test06 stamp: 'GR 6/24/2021 06:25:22'!
PASSED!

!testRun: #StoreTest #test07 stamp: 'GR 6/24/2021 06:25:22'!
PASSED!

!testRun: #StoreTest #test08 stamp: 'GR 6/24/2021 06:25:23'!
PASSED!

!testRun: #StoreTest #test09 stamp: 'GR 6/24/2021 06:25:23'!
PASSED!

!testRun: #StoreTest #test10 stamp: 'GR 6/24/2021 06:25:23'!
PASSED!

!testRun: #StoreTest #test11 stamp: 'GR 6/24/2021 06:25:23'!
PASSED!

!testRun: #StoreTest #test12 stamp: 'GR 6/24/2021 06:25:23'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/24/2021 06:25:23'!
PASSED!

!testRun: #StoreTest #test13 stamp: 'GR 6/24/2021 06:25:23'!
ERROR!

!testRun: #StoreTest #test13 stamp: 'GR 6/24/2021 06:25:23'!
ERROR!
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 06:25:59' prior: 50869598!
test13

	|interface cartID book purchasesList clientID password|
	clientID := '1234'.
	password := '1234'.
	
	book := testObjectsFactory itemSellByTheStore .
	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	interface addToCart: cartID bookISBN: book bookQuantity: 1.
	
	interface checkOutCart: cartID 
			usingCardNumbered: 1234567812345678 
			expiringOn: testObjectsFactory futureMonthOfYear 
			ownedBy: 'Jose Hernandez'.
			
	purchasesList := 			interface listPurchasesFrom: clientID using: password .
	self assert: 1 equals: (purchasesList items occurrencesOf: book) .
	self assert: 1 equals: purchasesList size.
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchasesList total.
	
	
	
	
		
	
	
	
	! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 06:26:33' prior: 50870292!
listPurchasesFrom: aUserID using: aPassword

	self assertValidLoginFor: aUserID using: aPassword .
	
	
	
	
	! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 06:27:50' prior: 50870638!
listPurchasesFrom: aUserID using: aPassword

	|saleList|

	self assertValidLoginFor: aUserID using: aPassword .
	
	saleList := SaleList new.
	
	salesBook do: [:aSale | saleList add: aSale]
	
	
	! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 06:27:57' prior: 50870644!
listPurchasesFrom: aUserID using: aPassword

	|saleList|

	self assertValidLoginFor: aUserID using: aPassword .
	
	saleList := SaleList new.
	
	salesBook do: [:aSale | saleList add: aSale].
	
	^saleList
	
	
	! !
!SaleList methodsFor: 'accessing' stamp: 'GR 6/24/2021 06:28:40'!
total

	^total! !
!SaleList methodsFor: 'accessing' stamp: 'GR 6/24/2021 06:28:48'!
items

	^items .! !

!testRun: #StoreTest #test01 stamp: 'GR 6/24/2021 06:28:58'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/24/2021 06:28:58'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/24/2021 06:28:59'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/24/2021 06:28:59'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/24/2021 06:28:59'!
PASSED!

!testRun: #StoreTest #test06 stamp: 'GR 6/24/2021 06:28:59'!
PASSED!

!testRun: #StoreTest #test07 stamp: 'GR 6/24/2021 06:28:59'!
PASSED!

!testRun: #StoreTest #test08 stamp: 'GR 6/24/2021 06:28:59'!
PASSED!

!testRun: #StoreTest #test09 stamp: 'GR 6/24/2021 06:28:59'!
PASSED!

!testRun: #StoreTest #test10 stamp: 'GR 6/24/2021 06:28:59'!
PASSED!

!testRun: #StoreTest #test11 stamp: 'GR 6/24/2021 06:28:59'!
PASSED!

!testRun: #StoreTest #test12 stamp: 'GR 6/24/2021 06:28:59'!
PASSED!

!testRun: #StoreTest #test13 stamp: 'GR 6/24/2021 06:28:59'!
ERROR!

!testRun: #StoreTest #test13 stamp: 'GR 6/24/2021 06:28:59'!
ERROR!
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 06:29:49' prior: 50870653!
listPurchasesFrom: aUserID using: aPassword

	|saleList|

	self assertValidLoginFor: aUserID using: aPassword .
	
	saleList := SaleList new.
	
	salesBook do: [:aSale | saleList addSale: aSale].
	
	^saleList
	
	
	! !

!testRun: #StoreTest #test01 stamp: 'GR 6/24/2021 06:29:50'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/24/2021 06:29:50'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/24/2021 06:29:50'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/24/2021 06:29:50'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/24/2021 06:29:51'!
PASSED!

!testRun: #StoreTest #test06 stamp: 'GR 6/24/2021 06:29:51'!
PASSED!

!testRun: #StoreTest #test07 stamp: 'GR 6/24/2021 06:29:51'!
PASSED!

!testRun: #StoreTest #test08 stamp: 'GR 6/24/2021 06:29:51'!
PASSED!

!testRun: #StoreTest #test09 stamp: 'GR 6/24/2021 06:29:51'!
PASSED!

!testRun: #StoreTest #test10 stamp: 'GR 6/24/2021 06:29:51'!
PASSED!

!testRun: #StoreTest #test11 stamp: 'GR 6/24/2021 06:29:51'!
PASSED!

!testRun: #StoreTest #test12 stamp: 'GR 6/24/2021 06:29:51'!
PASSED!

!testRun: #StoreTest #test13 stamp: 'GR 6/24/2021 06:29:51'!
ERROR!

!testRun: #StoreTest #test13 stamp: 'GR 6/24/2021 06:29:51'!
ERROR!
!SaleList methodsFor: 'accessing' stamp: 'GR 6/24/2021 06:30:15' overrides: 16880927!
size

	^items size! !

!testRun: #StoreTest #test01 stamp: 'GR 6/24/2021 06:30:18'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/24/2021 06:30:18'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/24/2021 06:30:18'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/24/2021 06:30:18'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/24/2021 06:30:18'!
PASSED!

!testRun: #StoreTest #test06 stamp: 'GR 6/24/2021 06:30:18'!
PASSED!

!testRun: #StoreTest #test07 stamp: 'GR 6/24/2021 06:30:19'!
PASSED!

!testRun: #StoreTest #test08 stamp: 'GR 6/24/2021 06:30:19'!
PASSED!

!testRun: #StoreTest #test09 stamp: 'GR 6/24/2021 06:30:19'!
PASSED!

!testRun: #StoreTest #test10 stamp: 'GR 6/24/2021 06:30:19'!
PASSED!

!testRun: #StoreTest #test11 stamp: 'GR 6/24/2021 06:30:19'!
PASSED!

!testRun: #StoreTest #test12 stamp: 'GR 6/24/2021 06:30:19'!
PASSED!

!testRun: #StoreTest #test13 stamp: 'GR 6/24/2021 06:30:19'!
PASSED!

----SNAPSHOT----(24 June 2021 06:30:26) CuisUniversity-4532.image priorSource: 17161091!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'GR 6/24/2021 12:52:58'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GR 6/24/2021 12:52:58'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'GR 6/24/2021 12:52:58'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'GR 6/24/2021 12:52:58'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'GR 6/24/2021 12:52:58'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'GR 6/24/2021 12:52:58'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'GR 6/24/2021 12:52:58'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'GR 6/24/2021 12:52:58'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'GR 6/24/2021 12:52:58'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'GR 6/24/2021 12:52:59'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'GR 6/24/2021 12:52:59'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'GR 6/24/2021 12:52:59'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'GR 6/24/2021 12:52:59'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'GR 6/24/2021 12:52:59'!
PASSED!

!testRun: #CreditCardTest #test01invalidCardNumberShouldFail stamp: 'GR 6/24/2021 12:52:59'!
PASSED!

!testRun: #CreditCardTest #test02emptyOwnerNameShouldFail stamp: 'GR 6/24/2021 12:52:59'!
PASSED!

!testRun: #CreditCardTest #test03ownerNameTooLongShouldFail stamp: 'GR 6/24/2021 12:52:59'!
PASSED!

!testRun: #StoreTest #test01 stamp: 'GR 6/24/2021 12:52:59'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/24/2021 12:52:59'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/24/2021 12:52:59'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/24/2021 12:52:59'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/24/2021 12:52:59'!
PASSED!

!testRun: #StoreTest #test06 stamp: 'GR 6/24/2021 12:52:59'!
PASSED!

!testRun: #StoreTest #test07 stamp: 'GR 6/24/2021 12:52:59'!
PASSED!

!testRun: #StoreTest #test08 stamp: 'GR 6/24/2021 12:52:59'!
PASSED!

!testRun: #StoreTest #test09 stamp: 'GR 6/24/2021 12:52:59'!
PASSED!

!testRun: #StoreTest #test10 stamp: 'GR 6/24/2021 12:52:59'!
PASSED!

!testRun: #StoreTest #test11 stamp: 'GR 6/24/2021 12:52:59'!
PASSED!

!testRun: #StoreTest #test12 stamp: 'GR 6/24/2021 12:53:00'!
PASSED!

!testRun: #StoreTest #test13 stamp: 'GR 6/24/2021 12:53:00'!
PASSED!
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 13:51:24'!
test14

	|interface cartID book purchasesList clientID password|
	clientID := '1234'.
	password := '1234'.
	
	book := testObjectsFactory itemSellByTheStore .
	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	interface addToCart: cartID bookISBN: book bookQuantity: 1.
	
	interface checkOutCart: cartID 
			usingCardNumbered: 1234567812345678 
			expiringOn: testObjectsFactory futureMonthOfYear 
			ownedBy: 'Jose Hernandez'.
			
	purchasesList := 			interface listPurchasesFrom: clientID using: password .
	self assert: 1 equals: (purchasesList items occurrencesOf: book) .
	self assert: 1 equals: purchasesList size.
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchasesList total.
	
	
	
	
		
	
	
	
	! !

----STARTUP---- (24 June 2021 13:52:30) as D:\Facultad\2021-1C-IS1\CuisUniversity_win64\TusLibrosIt3\windows64\CuisUniversity-4532.image!

!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 14:01:20'!
test14

	|interface cartID book purchasesList clientID password|
	clientID := '1234'.
	password := '1234'.
	
	book := testObjectsFactory itemSellByTheStore .
	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	interface addToCart: cartID bookISBN: book bookQuantity: 1.
	
	interface checkOutCart: cartID 
			usingCardNumbered: 1234567812345678 
			expiringOn: testObjectsFactory futureMonthOfYear 
			ownedBy: 'Jose Hernandez'.
			
	purchasesList := 			interface listPurchasesFrom: clientID using: password .
	self assert: 1 equals: (purchasesList items occurrencesOf: book) .
	self assert: 1 equals: purchasesList size.
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchasesList total.
	
	
	
	
		
	
	
	
	! !
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 14:02:10' prior: 50870861!
test14

	|interface cartID book purchasesList clientIDA password|
	clientIDA := '1234'.
	password := '1234'.
	
	book := testObjectsFactory itemSellByTheStore .
	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	interface addToCart: cartID bookISBN: book bookQuantity: 1.
	
	interface checkOutCart: cartID 
			usingCardNumbered: 1234567812345678 
			expiringOn: testObjectsFactory futureMonthOfYear 
			ownedBy: 'Jose Hernandez'.
			
	purchasesList := 			interface listPurchasesFrom: clientIDA using: password .
	self assert: 1 equals: (purchasesList items occurrencesOf: book) .
	self assert: 1 equals: purchasesList size.
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchasesList total.
	
	
	
	
		
	
	
	
	! !
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 14:02:15' prior: 50870889!
test14

	|interface cartID book purchasesList clientIDA passwordA|
	clientIDA := '1234'.
	passwordA := '1234'.
	
	book := testObjectsFactory itemSellByTheStore .
	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	interface addToCart: cartID bookISBN: book bookQuantity: 1.
	
	interface checkOutCart: cartID 
			usingCardNumbered: 1234567812345678 
			expiringOn: testObjectsFactory futureMonthOfYear 
			ownedBy: 'Jose Hernandez'.
			
	purchasesList := 			interface listPurchasesFrom: clientIDA using: passwordA .
	self assert: 1 equals: (purchasesList items occurrencesOf: book) .
	self assert: 1 equals: purchasesList size.
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchasesList total.
	
	
	
	
		
	
	
	
	! !
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 14:02:19' prior: 50870917!
test14

	|interface cartID book purchasesListA clientIDA passwordA|
	clientIDA := '1234'.
	passwordA := '1234'.
	
	book := testObjectsFactory itemSellByTheStore .
	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	interface addToCart: cartID bookISBN: book bookQuantity: 1.
	
	interface checkOutCart: cartID 
			usingCardNumbered: 1234567812345678 
			expiringOn: testObjectsFactory futureMonthOfYear 
			ownedBy: 'Jose Hernandez'.
			
	purchasesListA := 			interface listPurchasesFrom: clientIDA using: passwordA .
	self assert: 1 equals: (purchasesListA items occurrencesOf: book) .
	self assert: 1 equals: purchasesListA size.
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchasesListA total.
	
	
	
	
		
	
	
	
	! !
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 14:02:25' prior: 50870945!
test14

	|interface cartIDA book purchasesListA clientIDA passwordA|
	clientIDA := '1234'.
	passwordA := '1234'.
	
	book := testObjectsFactory itemSellByTheStore .
	interface := testObjectsFactory defaultStoreForTest: self.
	cartIDA := interface createCartForClientID: '1234' withPassword: '1234'.
	interface addToCart: cartIDA bookISBN: book bookQuantity: 1.
	
	interface checkOutCart: cartIDA 
			usingCardNumbered: 1234567812345678 
			expiringOn: testObjectsFactory futureMonthOfYear 
			ownedBy: 'Jose Hernandez'.
			
	purchasesListA := 			interface listPurchasesFrom: clientIDA using: passwordA .
	self assert: 1 equals: (purchasesListA items occurrencesOf: book) .
	self assert: 1 equals: purchasesListA size.
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchasesListA total.
	
	
	
	
		
	
	
	
	! !
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 14:03:07' prior: 50870974!
test14

	|interface cartIDA book purchasesListA clientIDA passwordA|
	clientIDA := '1234'.
	passwordA := '1234'.
	
	clientIDA := '2345'.
	passwordA := '2345'.
	
	book := testObjectsFactory itemSellByTheStore .
	interface := testObjectsFactory defaultStoreForTest: self.
	cartIDA := interface createCartForClientID: clientIDA withPassword: passwordA .
	interface addToCart: cartIDA bookISBN: book bookQuantity: 1.
	
	interface checkOutCart: cartIDA 
			usingCardNumbered: 1234567812345678 
			expiringOn: testObjectsFactory futureMonthOfYear 
			ownedBy: 'Jose Hernandez'.
			
	purchasesListA := 			interface listPurchasesFrom: clientIDA using: passwordA .
	self assert: 1 equals: (purchasesListA items occurrencesOf: book) .
	self assert: 1 equals: purchasesListA size.
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchasesListA total.
	
	
	
	
		
	
	
	
	! !
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 14:03:21' prior: 50870610!
test13

	|interface cartID book purchasesList clientID password|
	clientID := '1234'.
	password := '1234'.
	
	book := testObjectsFactory itemSellByTheStore .
	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: clientID withPassword: password .
	interface addToCart: cartID bookISBN: book bookQuantity: 1.
	
	interface checkOutCart: cartID 
			usingCardNumbered: 1234567812345678 
			expiringOn: testObjectsFactory futureMonthOfYear 
			ownedBy: 'Jose Hernandez'.
			
	purchasesList := 			interface listPurchasesFrom: clientID using: password .
	self assert: 1 equals: (purchasesList items occurrencesOf: book) .
	self assert: 1 equals: purchasesList size.
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchasesList total.
	
	
	
	
		
	
	
	
	! !
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 14:04:09' prior: 50871003!
test14

	|interface book cartIDA  purchasesListA clientIDA passwordA cartIDB  purchasesListB clientIDB passwordB|
	clientIDA := '1234'.
	passwordA := '1234'.
	
	clientIDB := '2345'.
	passwordB := '2345'.
	
	book := testObjectsFactory itemSellByTheStore .
	interface := testObjectsFactory defaultStoreForTest: self.
	cartIDA := interface createCartForClientID: clientIDA withPassword: passwordA .
	interface addToCart: cartIDA bookISBN: book bookQuantity: 1.
	
	interface checkOutCart: cartIDA 
			usingCardNumbered: 1234567812345678 
			expiringOn: testObjectsFactory futureMonthOfYear 
			ownedBy: 'Jose Hernandez'.
			
	purchasesListA := 			interface listPurchasesFrom: clientIDA using: passwordA .
	self assert: 1 equals: (purchasesListA items occurrencesOf: book) .
	self assert: 1 equals: purchasesListA size.
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchasesListA total.
	
	
	
	
		
	
	
	
	! !
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 14:04:36' prior: 50871061!
test14

	|interface book cartIDA  purchasesListA clientIDA passwordA cartIDB  purchasesListB clientIDB passwordB|
	clientIDA := '1234'.
	passwordA := '1234'.
	
	clientIDB := '2345'.
	passwordB := '2345'.
	
	book := testObjectsFactory itemSellByTheStore .
	interface := testObjectsFactory defaultStoreForTest: self.
	
	cartIDA := interface createCartForClientID: clientIDA withPassword: passwordA .
	interface addToCart: cartIDA bookISBN: book bookQuantity: 1.
	
	cartIDB := interface createCartForClientID: clientIDB withPassword: passwordB .
	interface addToCart: cartIDB bookISBN: book bookQuantity: 2.
	
	interface checkOutCart: cartIDA 
			usingCardNumbered: 1234567812345678 
			expiringOn: testObjectsFactory futureMonthOfYear 
			ownedBy: 'Jose Hernandez'.
			
	purchasesListA := 			interface listPurchasesFrom: clientIDA using: passwordA .
	self assert: 1 equals: (purchasesListA items occurrencesOf: book) .
	self assert: 1 equals: purchasesListA size.
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchasesListA total.
	
	
	
	
		
	
	
	
	! !
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 14:05:42' prior: 50871093!
test14

	|interface book cartIDA  purchasesListA clientIDA passwordA cartIDB  purchasesListB clientIDB passwordB|
	clientIDA := '1234'.
	passwordA := '1234'.
	
	clientIDB := '2345'.
	passwordB := '2345'.
	
	book := testObjectsFactory itemSellByTheStore .
	interface := testObjectsFactory defaultStoreForTest: self.
	
	cartIDA := interface createCartForClientID: clientIDA withPassword: passwordA .
	interface addToCart: cartIDA bookISBN: book bookQuantity: 1.
	
	cartIDB := interface createCartForClientID: clientIDB withPassword: passwordB .
	interface addToCart: cartIDB bookISBN: book bookQuantity: 2.
	
	interface checkOutCart: cartIDA 
			usingCardNumbered: 1234567812345678 
			expiringOn: testObjectsFactory futureMonthOfYear 
			ownedBy: 'Jose Hernandez'.
			
	interface checkOutCart: cartIDB 
			usingCardNumbered: 1234567812345679 
			expiringOn: testObjectsFactory futureMonthOfYear 
			ownedBy: 'Juan Hernandez'.
			
	purchasesListA := 			interface listPurchasesFrom: clientIDA using: passwordA .
	self assert: 1 equals: (purchasesListA items occurrencesOf: book) .
	self assert: 1 equals: purchasesListA size.
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchasesListA total.
	
	purchasesListA := 			interface listPurchasesFrom: clientIDA using: passwordA .
	self assert: 1 equals: (purchasesListA items occurrencesOf: book) .
	self assert: 1 equals: purchasesListA size.
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchasesListA total.
	
	
	
	
		
	
	
	
	! !
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 14:06:17' prior: 50871129!
test14

	|interface book cartIDA  purchasesListA clientIDA passwordA cartIDB  purchasesListB clientIDB passwordB|
	clientIDA := '1234'.
	passwordA := '1234'.
	
	clientIDB := '2345'.
	passwordB := '2345'.
	
	book := testObjectsFactory itemSellByTheStore .
	interface := testObjectsFactory defaultStoreForTest: self.
	
	cartIDA := interface createCartForClientID: clientIDA withPassword: passwordA .
	interface addToCart: cartIDA bookISBN: book bookQuantity: 1.
	
	cartIDB := interface createCartForClientID: clientIDB withPassword: passwordB .
	interface addToCart: cartIDB bookISBN: book bookQuantity: 2.
	
	interface checkOutCart: cartIDA 
			usingCardNumbered: 1234567812345678 
			expiringOn: testObjectsFactory futureMonthOfYear 
			ownedBy: 'Jose Hernandez'.
			
	interface checkOutCart: cartIDB 
			usingCardNumbered: 1234567812345679 
			expiringOn: testObjectsFactory futureMonthOfYear 
			ownedBy: 'Juan Hernandez'.
			
	purchasesListA := 			interface listPurchasesFrom: clientIDA using: passwordA .
	self assert: 1 equals: (purchasesListA items occurrencesOf: book) .
	self assert: 1 equals: purchasesListA size.
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchasesListA total.
	
	purchasesListB := 			interface listPurchasesFrom: clientIDB using: passwordB .
	self assert: 2 equals: (purchasesListB items occurrencesOf: book) .
	self assert: 2 equals: purchasesListB size.
	self assert: (2 * testObjectsFactory itemSellByTheStorePrice) equals: purchasesListB total.
	
	
	
	
		
	
	
	
	! !

!testRun: #StoreTest #test14 stamp: 'GR 6/24/2021 14:06:19'!
FAILURE!
!Store methodsFor: 'initialization' stamp: 'GR 6/24/2021 14:06:52' prior: 50869935!
initializeWithCatalog: aCatalog authenticator: anAuthenticator merchantProcessor: anMP andClock: aClock .
	
	lastCart := 0.
	carts := Dictionary new.
	cartCreation := Dictionary new.
	
	salesBook := Dictionary new.
	
	catalog := aCatalog.
	authenticator := anAuthenticator.
	merchantProcessor := anMP.
	clock := aClock .! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 14:07:22' prior: 50870192!
checkOutCart: aCartID usingCardNumbered: aCardNumber expiringOn: aMonthOfYear ownedBy: aName
	|cashier creditCard cart clientSalesBook|
	
	cart := self getCartFromID: aCartID .
		
	creditCard := CreditCard expiringOn: aMonthOfYear numbered: aCardNumber ownedBy: aName.
	
	cashier := Cashier 
		toCheckout: cart
		charging: creditCard 
		throught: merchantProcessor 
		on: clock today
		registeringOn: salesBook.
		
	cashier checkOut.
	
	^aCartID.! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 14:08:27' prior: 50871245!
checkOutCart: aCartID usingCardNumbered: aCardNumber expiringOn: aMonthOfYear ownedBy: aName
	|cashier creditCard cart clientSalesBook|
	
	cart := self getCartFromID: aCartID .
		
	creditCard := CreditCard expiringOn: aMonthOfYear numbered: aCardNumber ownedBy: aName.
	
	clientSalesBook := salesBook at: 1.
	
	cashier := Cashier 
		toCheckout: cart
		charging: creditCard 
		throught: merchantProcessor 
		on: clock today
		registeringOn: salesBook.
		
	cashier checkOut.
	
	^aCartID.! !

!classDefinition: #Store category: 'TusLibros' stamp: 'GR 6/24/2021 15:32:34'!
Object subclass: #Store
	instanceVariableNames: 'catalog lastCart carts authenticator clock timeCreated cartCreation salesBook merchantProcessor cartOwners'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'initialization' stamp: 'GR 6/24/2021 15:32:32' prior: 50871232!
initializeWithCatalog: aCatalog authenticator: anAuthenticator merchantProcessor: anMP andClock: aClock .
	
	lastCart := 0.
	carts := Dictionary new.
	cartCreation := Dictionary new.
	
	salesBook := Dictionary new.
	
	cartOwners := Dictionary new.
	
	catalog := aCatalog.
	authenticator := anAuthenticator.
	merchantProcessor := anMP.
	clock := aClock .! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 15:34:17' prior: 50870275!
createCartForClientID: aUserID withPassword: aPassword

	self assertValidLoginFor: aUserID using: aPassword .

	lastCart := lastCart + 1.
	carts at: lastCart put: (Cart acceptingItemsOf: catalog).
	cartOwners at: aUserID put: lastCart.
	cartCreation at: lastCart put: clock time.
	
	^lastCart.! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 15:35:43' prior: 50871262!
checkOutCart: aCartID usingCardNumbered: aCardNumber expiringOn: aMonthOfYear ownedBy: aName
	|cashier creditCard cart clientSalesBook user|
	
	cart := self getCartFromID: aCartID .
	user := cartOwners at: aCartID.
		
	creditCard := CreditCard expiringOn: aMonthOfYear numbered: aCardNumber ownedBy: aName.
	
	clientSalesBook := salesBook at: 1.
	
	cashier := Cashier 
		toCheckout: cart
		charging: creditCard 
		throught: merchantProcessor 
		on: clock today
		registeringOn: salesBook.
		
	cashier checkOut.
	
	^aCartID.! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 15:36:01' prior: 50871304!
createCartForClientID: aUserID withPassword: aPassword

	self assertValidLoginFor: aUserID using: aPassword .

	lastCart := lastCart + 1.
	carts at: lastCart put: (Cart acceptingItemsOf: catalog).
	cartOwners at: lastCart put: aUserID.
	cartCreation at: lastCart put: clock time.
	
	^lastCart.! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 15:37:39' prior: 50871316!
checkOutCart: aCartID usingCardNumbered: aCardNumber expiringOn: aMonthOfYear ownedBy: aName
	|cashier creditCard cart clientSalesBook user|
	
	cart := self getCartFromID: aCartID .
	user := cartOwners at: aCartID.
		
	creditCard := CreditCard expiringOn: aMonthOfYear numbered: aCardNumber ownedBy: aName.
	
	clientSalesBook := salesBook at: user.
	
	cashier := Cashier 
		toCheckout: cart
		charging: creditCard 
		throught: merchantProcessor 
		on: clock today
		registeringOn: salesBook.
		
	cashier checkOut.
	
	^aCartID.! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 15:37:54' prior: 50871347!
checkOutCart: aCartID usingCardNumbered: aCardNumber expiringOn: aMonthOfYear ownedBy: aName
	|cashier creditCard cart clientSalesBook user|
	
	cart := self getCartFromID: aCartID .
	user := cartOwners at: aCartID.
		
	creditCard := CreditCard expiringOn: aMonthOfYear numbered: aCardNumber ownedBy: aName.
	
	clientSalesBook := salesBook at: user.
	
	cashier := Cashier 
		toCheckout: cart
		charging: creditCard 
		throught: merchantProcessor 
		on: clock today
		registeringOn: clientSalesBook .
		
	cashier checkOut.
	
	^aCartID.! !

!testRun: #StoreTest #test01 stamp: 'GR 6/24/2021 15:38:10'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/24/2021 15:38:10'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/24/2021 15:38:10'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/24/2021 15:38:10'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/24/2021 15:38:10'!
PASSED!

!testRun: #StoreTest #test06 stamp: 'GR 6/24/2021 15:38:10'!
PASSED!

!testRun: #StoreTest #test07 stamp: 'GR 6/24/2021 15:38:10'!
PASSED!

!testRun: #StoreTest #test08 stamp: 'GR 6/24/2021 15:38:10'!
PASSED!

!testRun: #StoreTest #test09 stamp: 'GR 6/24/2021 15:38:11'!
PASSED!

!testRun: #StoreTest #test10 stamp: 'GR 6/24/2021 15:38:11'!
PASSED!

!testRun: #StoreTest #test11 stamp: 'GR 6/24/2021 15:38:11'!
PASSED!

!testRun: #StoreTest #test12 stamp: 'GR 6/24/2021 15:38:11'!
PASSED!

!testRun: #StoreTest #test13 stamp: 'GR 6/24/2021 15:38:11'!
ERROR!

!testRun: #StoreTest #test14 stamp: 'GR 6/24/2021 15:38:11'!
ERROR!

!testRun: #StoreTest #test01 stamp: 'GR 6/24/2021 15:38:16'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/24/2021 15:38:16'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/24/2021 15:38:16'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/24/2021 15:38:16'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/24/2021 15:38:16'!
PASSED!

!testRun: #StoreTest #test06 stamp: 'GR 6/24/2021 15:38:16'!
PASSED!

!testRun: #StoreTest #test07 stamp: 'GR 6/24/2021 15:38:16'!
PASSED!

!testRun: #StoreTest #test08 stamp: 'GR 6/24/2021 15:38:16'!
PASSED!

!testRun: #StoreTest #test09 stamp: 'GR 6/24/2021 15:38:17'!
PASSED!

!testRun: #StoreTest #test10 stamp: 'GR 6/24/2021 15:38:17'!
PASSED!

!testRun: #StoreTest #test11 stamp: 'GR 6/24/2021 15:38:17'!
PASSED!

!testRun: #StoreTest #test12 stamp: 'GR 6/24/2021 15:38:17'!
PASSED!

!testRun: #StoreTest #test13 stamp: 'GR 6/24/2021 15:38:17'!
ERROR!

!testRun: #StoreTest #test14 stamp: 'GR 6/24/2021 15:38:17'!
ERROR!

!testRun: #StoreTest #test13 stamp: 'GR 6/24/2021 15:38:18'!
ERROR!
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 15:40:36' prior: 50871367!
checkOutCart: aCartID usingCardNumbered: aCardNumber expiringOn: aMonthOfYear ownedBy: aName
	|cashier creditCard cart clientSalesBook user|
	
	cart := self getCartFromID: aCartID .
	user := cartOwners at: aCartID.
		
	creditCard := CreditCard expiringOn: aMonthOfYear numbered: aCardNumber ownedBy: aName.
	
	clientSalesBook := salesBook at: user ifAbsentPut: [OrderedCollection new].
	
	cashier := Cashier 
		toCheckout: cart
		charging: creditCard 
		throught: merchantProcessor 
		on: clock today
		registeringOn: clientSalesBook .
		
	cashier checkOut.
	
	^aCartID.! !

!testRun: #StoreTest #test01 stamp: 'GR 6/24/2021 15:40:39'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/24/2021 15:40:39'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/24/2021 15:40:39'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/24/2021 15:40:39'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/24/2021 15:40:39'!
PASSED!

!testRun: #StoreTest #test06 stamp: 'GR 6/24/2021 15:40:39'!
PASSED!

!testRun: #StoreTest #test07 stamp: 'GR 6/24/2021 15:40:39'!
PASSED!

!testRun: #StoreTest #test08 stamp: 'GR 6/24/2021 15:40:39'!
PASSED!

!testRun: #StoreTest #test09 stamp: 'GR 6/24/2021 15:40:39'!
PASSED!

!testRun: #StoreTest #test10 stamp: 'GR 6/24/2021 15:40:40'!
PASSED!

!testRun: #StoreTest #test11 stamp: 'GR 6/24/2021 15:40:40'!
PASSED!

!testRun: #StoreTest #test12 stamp: 'GR 6/24/2021 15:40:40'!
PASSED!

!testRun: #StoreTest #test13 stamp: 'GR 6/24/2021 15:40:40'!
ERROR!

!testRun: #StoreTest #test14 stamp: 'GR 6/24/2021 15:40:40'!
ERROR!

!testRun: #StoreTest #test13 stamp: 'GR 6/24/2021 15:40:42'!
ERROR!
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 15:40:57' prior: 50871450!
checkOutCart: aCartID usingCardNumbered: aCardNumber expiringOn: aMonthOfYear ownedBy: aName
	|cashier creditCard cart clientSalesBook user|
	
	cart := self getCartFromID: aCartID .
	user := cartOwners at: aCartID.
		
	creditCard := CreditCard expiringOn: aMonthOfYear numbered: aCardNumber ownedBy: aName.
	
	clientSalesBook := salesBook at: user ifAbsentPut: [SaleList new].
	
	cashier := Cashier 
		toCheckout: cart
		charging: creditCard 
		throught: merchantProcessor 
		on: clock today
		registeringOn: clientSalesBook .
		
	cashier checkOut.
	
	^aCartID.! !

!testRun: #StoreTest #test01 stamp: 'GR 6/24/2021 15:40:58'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/24/2021 15:40:59'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/24/2021 15:40:59'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/24/2021 15:40:59'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/24/2021 15:40:59'!
PASSED!

!testRun: #StoreTest #test06 stamp: 'GR 6/24/2021 15:40:59'!
PASSED!

!testRun: #StoreTest #test07 stamp: 'GR 6/24/2021 15:40:59'!
PASSED!

!testRun: #StoreTest #test08 stamp: 'GR 6/24/2021 15:40:59'!
PASSED!

!testRun: #StoreTest #test09 stamp: 'GR 6/24/2021 15:40:59'!
PASSED!

!testRun: #StoreTest #test10 stamp: 'GR 6/24/2021 15:40:59'!
PASSED!

!testRun: #StoreTest #test11 stamp: 'GR 6/24/2021 15:40:59'!
PASSED!

!testRun: #StoreTest #test12 stamp: 'GR 6/24/2021 15:40:59'!
PASSED!

!testRun: #StoreTest #test13 stamp: 'GR 6/24/2021 15:40:59'!
ERROR!

!testRun: #StoreTest #test14 stamp: 'GR 6/24/2021 15:40:59'!
ERROR!

!testRun: #StoreTest #test13 stamp: 'GR 6/24/2021 15:41:01'!
ERROR!
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 15:41:33' prior: 50871504!
checkOutCart: aCartID usingCardNumbered: aCardNumber expiringOn: aMonthOfYear ownedBy: aName
	|cashier creditCard cart clientSalesBook user|
	
	cart := self getCartFromID: aCartID .
	user := cartOwners at: aCartID.
		
	creditCard := CreditCard expiringOn: aMonthOfYear numbered: aCardNumber ownedBy: aName.
	
	clientSalesBook := salesBook at: user ifAbsentPut: [OrderedCollection new].
	
	cashier := Cashier 
		toCheckout: cart
		charging: creditCard 
		throught: merchantProcessor 
		on: clock today
		registeringOn: clientSalesBook .
		
	cashier checkOut.
	
	^aCartID.! !

!testRun: #StoreTest #test01 stamp: 'GR 6/24/2021 15:41:34'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/24/2021 15:41:35'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/24/2021 15:41:35'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/24/2021 15:41:35'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/24/2021 15:41:35'!
PASSED!

!testRun: #StoreTest #test06 stamp: 'GR 6/24/2021 15:41:35'!
PASSED!

!testRun: #StoreTest #test07 stamp: 'GR 6/24/2021 15:41:35'!
PASSED!

!testRun: #StoreTest #test08 stamp: 'GR 6/24/2021 15:41:35'!
PASSED!

!testRun: #StoreTest #test09 stamp: 'GR 6/24/2021 15:41:35'!
PASSED!

!testRun: #StoreTest #test10 stamp: 'GR 6/24/2021 15:41:35'!
PASSED!

!testRun: #StoreTest #test11 stamp: 'GR 6/24/2021 15:41:35'!
PASSED!

!testRun: #StoreTest #test12 stamp: 'GR 6/24/2021 15:41:35'!
PASSED!

!testRun: #StoreTest #test13 stamp: 'GR 6/24/2021 15:41:35'!
ERROR!

!testRun: #StoreTest #test14 stamp: 'GR 6/24/2021 15:41:35'!
ERROR!

!testRun: #StoreTest #test13 stamp: 'GR 6/24/2021 15:41:37'!
ERROR!

!testRun: #StoreTest #test01 stamp: 'GR 6/24/2021 15:42:45'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/24/2021 15:42:45'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/24/2021 15:42:45'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/24/2021 15:42:45'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/24/2021 15:42:46'!
PASSED!

!testRun: #StoreTest #test06 stamp: 'GR 6/24/2021 15:42:46'!
PASSED!

!testRun: #StoreTest #test07 stamp: 'GR 6/24/2021 15:42:46'!
PASSED!

!testRun: #StoreTest #test08 stamp: 'GR 6/24/2021 15:42:46'!
PASSED!

!testRun: #StoreTest #test09 stamp: 'GR 6/24/2021 15:42:46'!
PASSED!

!testRun: #StoreTest #test10 stamp: 'GR 6/24/2021 15:42:46'!
PASSED!

!testRun: #StoreTest #test11 stamp: 'GR 6/24/2021 15:42:46'!
PASSED!

!testRun: #StoreTest #test12 stamp: 'GR 6/24/2021 15:42:46'!
PASSED!

!testRun: #StoreTest #test13 stamp: 'GR 6/24/2021 15:42:46'!
ERROR!

!testRun: #StoreTest #test14 stamp: 'GR 6/24/2021 15:42:46'!
ERROR!

!testRun: #StoreTest #test13 stamp: 'GR 6/24/2021 15:42:48'!
ERROR!
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 15:43:34' prior: 50870699!
listPurchasesFrom: aUserID using: aPassword

	|saleList|

	self assertValidLoginFor: aUserID using: aPassword .
	
	saleList := SaleList new.
	
	(salesBook at: aUserID) do: [:aSale | saleList addSale: aSale].
	
	^saleList
	
	
	! !

!testRun: #StoreTest #test01 stamp: 'GR 6/24/2021 15:43:36'!
PASSED!

!testRun: #StoreTest #test02 stamp: 'GR 6/24/2021 15:43:36'!
PASSED!

!testRun: #StoreTest #test03 stamp: 'GR 6/24/2021 15:43:36'!
PASSED!

!testRun: #StoreTest #test04 stamp: 'GR 6/24/2021 15:43:36'!
PASSED!

!testRun: #StoreTest #test05 stamp: 'GR 6/24/2021 15:43:36'!
PASSED!

!testRun: #StoreTest #test06 stamp: 'GR 6/24/2021 15:43:36'!
PASSED!

!testRun: #StoreTest #test07 stamp: 'GR 6/24/2021 15:43:36'!
PASSED!

!testRun: #StoreTest #test08 stamp: 'GR 6/24/2021 15:43:36'!
PASSED!

!testRun: #StoreTest #test09 stamp: 'GR 6/24/2021 15:43:36'!
PASSED!

!testRun: #StoreTest #test10 stamp: 'GR 6/24/2021 15:43:36'!
PASSED!

!testRun: #StoreTest #test11 stamp: 'GR 6/24/2021 15:43:36'!
PASSED!

!testRun: #StoreTest #test12 stamp: 'GR 6/24/2021 15:43:36'!
PASSED!

!testRun: #StoreTest #test13 stamp: 'GR 6/24/2021 15:43:36'!
PASSED!

!testRun: #StoreTest #test14 stamp: 'GR 6/24/2021 15:43:36'!
PASSED!
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 15:49:20'!
test01CreateCartCreatesAnEmptyCartWhenLoginIsValid

	|interface cartID|
	
	interface := testObjectsFactory defaultStoreForTest: self.
	
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	
	self assert: (interface listCart: cartID) isEmpty. 

	! !

!methodRemoval: StoreTest #test01 stamp: 'GR 6/24/2021 15:49:26'!
test01

	|interface cartID|
	
	interface := testObjectsFactory defaultStoreForTest: self.
	
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	
	self assert: (interface listCart: cartID) isEmpty. 

	!
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 15:50:15'!
test02CartKnowsBooksAdded

	|interface cartID cartList|

	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	
	interface addToCart: cartID bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.	
	cartList := interface listCart: cartID.
	
	self assert: 1 equals: cartList size.
	self assert: 1 equals: (cartList occurrencesOf: testObjectsFactory itemSellByTheStore).

	! !

!methodRemoval: StoreTest #test02 stamp: 'GR 6/24/2021 15:50:15'!
test02

	|interface cartID cartList|

	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	
	interface addToCart: cartID bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.	
	cartList := interface listCart: cartID.
	
	self assert: 1 equals: cartList size.
	self assert: 1 equals: (cartList occurrencesOf: testObjectsFactory itemSellByTheStore).

	!

!methodRemoval: StoreTest #test03 stamp: 'GR 6/24/2021 15:53:00'!
test03

	|interface cartID cartList|
	
	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	
	interface addToCart: cartID bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.	
	cartList := interface listCart: cartID.
	
	self assert: 1 equals: cartList size.
	self assert: 1 equals: (cartList occurrencesOf: testObjectsFactory itemSellByTheStore).

	!
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 15:53:16'!
test03CartIDIsNotUsedTwice

	|interface cartIDA cartIDB|

	interface := testObjectsFactory defaultStoreForTest: self.
	cartIDA := interface createCartForClientID: '1234' withPassword: '1234'.
	cartIDB := interface createCartForClientID: '1234' withPassword: '1234'.
	
	self deny: (cartIDA = cartIDB).
	! !

!methodRemoval: StoreTest #test04 stamp: 'GR 6/24/2021 15:53:16'!
test04

	|interface cartIDA cartIDB|

	interface := testObjectsFactory defaultStoreForTest: self.
	cartIDA := interface createCartForClientID: '1234' withPassword: '1234'.
	cartIDB := interface createCartForClientID: '1234' withPassword: '1234'.
	
	self deny: (cartIDA = cartIDB).
	!
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 15:53:45'!
test04CartsHaveDifferentLists

	|interface cartIDA cartIDB listCartA listCartB book|
	
	book := testObjectsFactory itemSellByTheStore .
	interface := testObjectsFactory defaultStoreForTest: self.
	cartIDA := interface createCartForClientID: '1234' withPassword: '1234'.
	cartIDB := interface createCartForClientID: '1234' withPassword: '1234'.
	
	interface addToCart: cartIDA bookISBN: book bookQuantity: 1.
	interface addToCart: cartIDB bookISBN: book bookQuantity: 2.	
	
	listCartA := interface listCart: cartIDA.
	listCartB := interface listCart: cartIDB.

	self assert: 1 equals: (listCartA occurrencesOf: book).
	self assert: 2 equals: (listCartB occurrencesOf: book).	! !

!methodRemoval: StoreTest #test05 stamp: 'GR 6/24/2021 15:53:45'!
test05

	|interface cartIDA cartIDB listCartA listCartB book|
	
	book := testObjectsFactory itemSellByTheStore .
	interface := testObjectsFactory defaultStoreForTest: self.
	cartIDA := interface createCartForClientID: '1234' withPassword: '1234'.
	cartIDB := interface createCartForClientID: '1234' withPassword: '1234'.
	
	interface addToCart: cartIDA bookISBN: book bookQuantity: 1.
	interface addToCart: cartIDB bookISBN: book bookQuantity: 2.	
	
	listCartA := interface listCart: cartIDA.
	listCartB := interface listCart: cartIDB.

	self assert: 1 equals: (listCartA occurrencesOf: book).
	self assert: 2 equals: (listCartB occurrencesOf: book).	!
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 15:54:12'!
test05InvalidLoginGetsError

	|interface|
	
	interface := testObjectsFactory defaultStoreForTest: self.
	
	self should: [interface createCartForClientID: '4321' withPassword: '1234'.]
		raise: Error - MessageNotUnderstood withMessageText: Store invalidLoginErrorDescription.
	
	! !

!methodRemoval: StoreTest #test06 stamp: 'GR 6/24/2021 15:54:12'!
test06

	|interface|
	
	interface := testObjectsFactory defaultStoreForTest: self.
	
	self should: [interface createCartForClientID: '4321' withPassword: '1234'.]
		raise: Error - MessageNotUnderstood withMessageText: Store invalidLoginErrorDescription.
	
	!
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 15:54:25'!
test05InvalidLoginGetsInvalidLoginError

	|interface|
	
	interface := testObjectsFactory defaultStoreForTest: self.
	
	self should: [interface createCartForClientID: '4321' withPassword: '1234'.]
		raise: Error - MessageNotUnderstood withMessageText: Store invalidLoginErrorDescription.
	
	! !

!methodRemoval: StoreTest #test05InvalidLoginGetsError stamp: 'GR 6/24/2021 15:54:25'!
test05InvalidLoginGetsError

	|interface|
	
	interface := testObjectsFactory defaultStoreForTest: self.
	
	self should: [interface createCartForClientID: '4321' withPassword: '1234'.]
		raise: Error - MessageNotUnderstood withMessageText: Store invalidLoginErrorDescription.
	
	!
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 15:54:53'!
test06CannotListNonExistingCart

	|interface |
	
	interface := testObjectsFactory defaultStoreForTest: self.
	
	self should: [interface listCart: 1]
		raise: Error - MessageNotUnderstood withMessageText: Store invalidCartIDErrorDescription.
	
	! !

!methodRemoval: StoreTest #test07 stamp: 'GR 6/24/2021 15:54:53'!
test07

	|interface |
	
	interface := testObjectsFactory defaultStoreForTest: self.
	
	self should: [interface listCart: 1]
		raise: Error - MessageNotUnderstood withMessageText: Store invalidCartIDErrorDescription.
	
	!
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 15:55:06'!
test07CannotAddToNonExistingCart

	|interface |
	
	interface := testObjectsFactory defaultStoreForTest: self.
	
	self should: [interface addToCart: 1 bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.	]
		raise: Error - MessageNotUnderstood withMessageText: Store invalidCartIDErrorDescription.
	
	! !

!methodRemoval: StoreTest #test08 stamp: 'GR 6/24/2021 15:55:06'!
test08

	|interface |
	
	interface := testObjectsFactory defaultStoreForTest: self.
	
	self should: [interface addToCart: 1 bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.	]
		raise: Error - MessageNotUnderstood withMessageText: Store invalidCartIDErrorDescription.
	
	!

!methodRemoval: StoreTest #test09 stamp: 'GR 6/24/2021 15:55:29'!
test09

	|interface |
	
	interface := testObjectsFactory defaultStoreForTest: self.
	
	self should: [interface addToCart: 1 bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.	]
		raise: Error - MessageNotUnderstood withMessageText: Store invalidCartIDErrorDescription.
	
	!
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 15:55:59'!
test08CartExpiresAfterThirtyMinutes

	|interface cartID|

	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	self advanceTimeBy: 30 minutes.
	
	self should: [interface addToCart: cartID bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.]
		raise: Error - MessageNotUnderstood withMessageText: Store cartLifespanExceededErrorMessage.
		
	
	
	
	! !

!methodRemoval: StoreTest #test10 stamp: 'GR 6/24/2021 15:55:59'!
test10

	|interface cartID|

	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	self advanceTimeBy: 30 minutes.
	
	self should: [interface addToCart: cartID bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.]
		raise: Error - MessageNotUnderstood withMessageText: Store cartLifespanExceededErrorMessage.
		
	
	
	
	!

!methodRemoval: StoreTest #test11 stamp: 'GR 6/24/2021 15:56:54'!
test11

	|interface cartID|

	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	self advanceTimeBy: 30 minutes.
	
	self should: [interface listCart: cartID]
		raise: Error - MessageNotUnderstood withMessageText: Store cartLifespanExceededErrorMessage.
		
	
	
	
	!
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 15:57:15' prior: 50869295!
test12

	|interface cartIDA cartIDB|

	interface := testObjectsFactory defaultStoreForTest: self.
	cartIDA := interface createCartForClientID: '1234' withPassword: '1234'.
	self advanceTimeBy: 5 minutes.
	cartIDB := interface createCartForClientID: '1234' withPassword: '1234'.
	self advanceTimeBy: 26 minutes.
	
	self should: [interface addToCart: cartIDA bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.]
		raise: Error - MessageNotUnderstood withMessageText: Store cartLifespanExceededErrorMessage.
		
	
	
		
	
	
	
	! !
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 15:59:15' prior: 50871964!
test12

	|interface cartIDA cartIDB book listCartB|
	
	book := testObjectsFactory itemSellByTheStore.
	interface := testObjectsFactory defaultStoreForTest: self.
	cartIDA := interface createCartForClientID: '1234' withPassword: '1234'.
	self advanceTimeBy: 5 minutes.
	cartIDB := interface createCartForClientID: '1234' withPassword: '1234'.
	self advanceTimeBy: 26 minutes.
	
	self should: [interface addToCart: cartIDA bookISBN: book bookQuantity: 1.]
		raise: Error - MessageNotUnderstood withMessageText: Store cartLifespanExceededErrorMessage.
		
	interface addToCart: cartIDB bookISBN: book bookQuantity: 1.
	listCartB := interface listCart: cartIDB .
	self assert: 1 equals: (listCartB occurrencesOf: book).
	
		
	
	
	
	! !

!testRun: #StoreTest #test12 stamp: 'GR 6/24/2021 15:59:17'!
PASSED!

!testRun: #StoreTest #test01CreateCartCreatesAnEmptyCartWhenLoginIsValid stamp: 'GR 6/24/2021 15:59:17'!
PASSED!

!testRun: #StoreTest #test02CartKnowsBooksAdded stamp: 'GR 6/24/2021 15:59:17'!
PASSED!

!testRun: #StoreTest #test03CartIDIsNotUsedTwice stamp: 'GR 6/24/2021 15:59:17'!
PASSED!

!testRun: #StoreTest #test04CartsHaveDifferentLists stamp: 'GR 6/24/2021 15:59:17'!
PASSED!

!testRun: #StoreTest #test05InvalidLoginGetsInvalidLoginError stamp: 'GR 6/24/2021 15:59:17'!
PASSED!

!testRun: #StoreTest #test06CannotListNonExistingCart stamp: 'GR 6/24/2021 15:59:17'!
PASSED!

!testRun: #StoreTest #test07CannotAddToNonExistingCart stamp: 'GR 6/24/2021 15:59:17'!
PASSED!

!testRun: #StoreTest #test08CartExpiresAfterThirtyMinutes stamp: 'GR 6/24/2021 15:59:17'!
PASSED!

!testRun: #StoreTest #test12 stamp: 'GR 6/24/2021 15:59:17'!
PASSED!

!testRun: #StoreTest #test13 stamp: 'GR 6/24/2021 15:59:17'!
PASSED!

!testRun: #StoreTest #test14 stamp: 'GR 6/24/2021 15:59:17'!
PASSED!
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 15:59:48'!
test09DifferentCartsHaveDifferentExpiration

	|interface cartIDA cartIDB book listCartB|
	
	book := testObjectsFactory itemSellByTheStore.
	interface := testObjectsFactory defaultStoreForTest: self.
	cartIDA := interface createCartForClientID: '1234' withPassword: '1234'.
	self advanceTimeBy: 5 minutes.
	cartIDB := interface createCartForClientID: '1234' withPassword: '1234'.
	self advanceTimeBy: 26 minutes.
	
	self should: [interface addToCart: cartIDA bookISBN: book bookQuantity: 1.]
		raise: Error - MessageNotUnderstood withMessageText: Store cartLifespanExceededErrorMessage.
		
	interface addToCart: cartIDB bookISBN: book bookQuantity: 1.
	listCartB := interface listCart: cartIDB .
	self assert: 1 equals: (listCartB occurrencesOf: book).
	
		
	
	
	
	! !

!methodRemoval: StoreTest #test12 stamp: 'GR 6/24/2021 15:59:48'!
test12

	|interface cartIDA cartIDB book listCartB|
	
	book := testObjectsFactory itemSellByTheStore.
	interface := testObjectsFactory defaultStoreForTest: self.
	cartIDA := interface createCartForClientID: '1234' withPassword: '1234'.
	self advanceTimeBy: 5 minutes.
	cartIDB := interface createCartForClientID: '1234' withPassword: '1234'.
	self advanceTimeBy: 26 minutes.
	
	self should: [interface addToCart: cartIDA bookISBN: book bookQuantity: 1.]
		raise: Error - MessageNotUnderstood withMessageText: Store cartLifespanExceededErrorMessage.
		
	interface addToCart: cartIDB bookISBN: book bookQuantity: 1.
	listCartB := interface listCart: cartIDB .
	self assert: 1 equals: (listCartB occurrencesOf: book).
	
		
	
	
	
	!
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 16:00:25'!
test10SalesGetRegistered

	|interface cartID book purchasesList clientID password|
	clientID := '1234'.
	password := '1234'.
	
	book := testObjectsFactory itemSellByTheStore .
	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: clientID withPassword: password .
	interface addToCart: cartID bookISBN: book bookQuantity: 1.
	
	interface checkOutCart: cartID 
			usingCardNumbered: 1234567812345678 
			expiringOn: testObjectsFactory futureMonthOfYear 
			ownedBy: 'Jose Hernandez'.
			
	purchasesList := 			interface listPurchasesFrom: clientID using: password .
	self assert: 1 equals: (purchasesList items occurrencesOf: book) .
	self assert: 1 equals: purchasesList size.
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchasesList total.
	
	
	
	
		
	
	
	
	! !

!methodRemoval: StoreTest #test13 stamp: 'GR 6/24/2021 16:00:25'!
test13

	|interface cartID book purchasesList clientID password|
	clientID := '1234'.
	password := '1234'.
	
	book := testObjectsFactory itemSellByTheStore .
	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: clientID withPassword: password .
	interface addToCart: cartID bookISBN: book bookQuantity: 1.
	
	interface checkOutCart: cartID 
			usingCardNumbered: 1234567812345678 
			expiringOn: testObjectsFactory futureMonthOfYear 
			ownedBy: 'Jose Hernandez'.
			
	purchasesList := 			interface listPurchasesFrom: clientID using: password .
	self assert: 1 equals: (purchasesList items occurrencesOf: book) .
	self assert: 1 equals: purchasesList size.
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchasesList total.
	
	
	
	
		
	
	
	
	!

!methodRemoval: StoreTest #test07CannotAddToNonExistingCart stamp: 'GR 6/24/2021 16:00:34'!
test07CannotAddToNonExistingCart

	|interface |
	
	interface := testObjectsFactory defaultStoreForTest: self.
	
	self should: [interface addToCart: 1 bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.	]
		raise: Error - MessageNotUnderstood withMessageText: Store invalidCartIDErrorDescription.
	
	!
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 16:00:59'!
test10DifferentUsersGetDifferentPurchaseRegister

	|interface book cartIDA  purchasesListA clientIDA passwordA cartIDB  purchasesListB clientIDB passwordB|
	clientIDA := '1234'.
	passwordA := '1234'.
	
	clientIDB := '2345'.
	passwordB := '2345'.
	
	book := testObjectsFactory itemSellByTheStore .
	interface := testObjectsFactory defaultStoreForTest: self.
	
	cartIDA := interface createCartForClientID: clientIDA withPassword: passwordA .
	interface addToCart: cartIDA bookISBN: book bookQuantity: 1.
	
	cartIDB := interface createCartForClientID: clientIDB withPassword: passwordB .
	interface addToCart: cartIDB bookISBN: book bookQuantity: 2.
	
	interface checkOutCart: cartIDA 
			usingCardNumbered: 1234567812345678 
			expiringOn: testObjectsFactory futureMonthOfYear 
			ownedBy: 'Jose Hernandez'.
			
	interface checkOutCart: cartIDB 
			usingCardNumbered: 1234567812345679 
			expiringOn: testObjectsFactory futureMonthOfYear 
			ownedBy: 'Juan Hernandez'.
			
	purchasesListA := 			interface listPurchasesFrom: clientIDA using: passwordA .
	self assert: 1 equals: (purchasesListA items occurrencesOf: book) .
	self assert: 1 equals: purchasesListA size.
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchasesListA total.
	
	purchasesListB := 			interface listPurchasesFrom: clientIDB using: passwordB .
	self assert: 2 equals: (purchasesListB items occurrencesOf: book) .
	self assert: 2 equals: purchasesListB size.
	self assert: (2 * testObjectsFactory itemSellByTheStorePrice) equals: purchasesListB total.
	
	
	
	
		
	
	
	
	! !

!methodRemoval: StoreTest #test14 stamp: 'GR 6/24/2021 16:00:59'!
test14

	|interface book cartIDA  purchasesListA clientIDA passwordA cartIDB  purchasesListB clientIDB passwordB|
	clientIDA := '1234'.
	passwordA := '1234'.
	
	clientIDB := '2345'.
	passwordB := '2345'.
	
	book := testObjectsFactory itemSellByTheStore .
	interface := testObjectsFactory defaultStoreForTest: self.
	
	cartIDA := interface createCartForClientID: clientIDA withPassword: passwordA .
	interface addToCart: cartIDA bookISBN: book bookQuantity: 1.
	
	cartIDB := interface createCartForClientID: clientIDB withPassword: passwordB .
	interface addToCart: cartIDB bookISBN: book bookQuantity: 2.
	
	interface checkOutCart: cartIDA 
			usingCardNumbered: 1234567812345678 
			expiringOn: testObjectsFactory futureMonthOfYear 
			ownedBy: 'Jose Hernandez'.
			
	interface checkOutCart: cartIDB 
			usingCardNumbered: 1234567812345679 
			expiringOn: testObjectsFactory futureMonthOfYear 
			ownedBy: 'Juan Hernandez'.
			
	purchasesListA := 			interface listPurchasesFrom: clientIDA using: passwordA .
	self assert: 1 equals: (purchasesListA items occurrencesOf: book) .
	self assert: 1 equals: purchasesListA size.
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchasesListA total.
	
	purchasesListB := 			interface listPurchasesFrom: clientIDB using: passwordB .
	self assert: 2 equals: (purchasesListB items occurrencesOf: book) .
	self assert: 2 equals: purchasesListB size.
	self assert: (2 * testObjectsFactory itemSellByTheStorePrice) equals: purchasesListB total.
	
	
	
	
		
	
	
	
	!
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 16:01:09'!
test07CartExpiresAfterThirtyMinutes

	|interface cartID|

	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	self advanceTimeBy: 30 minutes.
	
	self should: [interface addToCart: cartID bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.]
		raise: Error - MessageNotUnderstood withMessageText: Store cartLifespanExceededErrorMessage.
		
	
	
	
	! !

!methodRemoval: StoreTest #test08CartExpiresAfterThirtyMinutes stamp: 'GR 6/24/2021 16:01:10'!
test08CartExpiresAfterThirtyMinutes

	|interface cartID|

	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: '1234' withPassword: '1234'.
	self advanceTimeBy: 30 minutes.
	
	self should: [interface addToCart: cartID bookISBN: testObjectsFactory itemSellByTheStore bookQuantity: 1.]
		raise: Error - MessageNotUnderstood withMessageText: Store cartLifespanExceededErrorMessage.
		
	
	
	
	!
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 16:01:15'!
test08DifferentCartsHaveDifferentExpiration

	|interface cartIDA cartIDB book listCartB|
	
	book := testObjectsFactory itemSellByTheStore.
	interface := testObjectsFactory defaultStoreForTest: self.
	cartIDA := interface createCartForClientID: '1234' withPassword: '1234'.
	self advanceTimeBy: 5 minutes.
	cartIDB := interface createCartForClientID: '1234' withPassword: '1234'.
	self advanceTimeBy: 26 minutes.
	
	self should: [interface addToCart: cartIDA bookISBN: book bookQuantity: 1.]
		raise: Error - MessageNotUnderstood withMessageText: Store cartLifespanExceededErrorMessage.
		
	interface addToCart: cartIDB bookISBN: book bookQuantity: 1.
	listCartB := interface listCart: cartIDB .
	self assert: 1 equals: (listCartB occurrencesOf: book).
	
		
	
	
	
	! !

!methodRemoval: StoreTest #test09DifferentCartsHaveDifferentExpiration stamp: 'GR 6/24/2021 16:01:15'!
test09DifferentCartsHaveDifferentExpiration

	|interface cartIDA cartIDB book listCartB|
	
	book := testObjectsFactory itemSellByTheStore.
	interface := testObjectsFactory defaultStoreForTest: self.
	cartIDA := interface createCartForClientID: '1234' withPassword: '1234'.
	self advanceTimeBy: 5 minutes.
	cartIDB := interface createCartForClientID: '1234' withPassword: '1234'.
	self advanceTimeBy: 26 minutes.
	
	self should: [interface addToCart: cartIDA bookISBN: book bookQuantity: 1.]
		raise: Error - MessageNotUnderstood withMessageText: Store cartLifespanExceededErrorMessage.
		
	interface addToCart: cartIDB bookISBN: book bookQuantity: 1.
	listCartB := interface listCart: cartIDB .
	self assert: 1 equals: (listCartB occurrencesOf: book).
	
		
	
	
	
	!
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 16:01:21'!
test9SalesGetRegistered

	|interface cartID book purchasesList clientID password|
	clientID := '1234'.
	password := '1234'.
	
	book := testObjectsFactory itemSellByTheStore .
	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: clientID withPassword: password .
	interface addToCart: cartID bookISBN: book bookQuantity: 1.
	
	interface checkOutCart: cartID 
			usingCardNumbered: 1234567812345678 
			expiringOn: testObjectsFactory futureMonthOfYear 
			ownedBy: 'Jose Hernandez'.
			
	purchasesList := 			interface listPurchasesFrom: clientID using: password .
	self assert: 1 equals: (purchasesList items occurrencesOf: book) .
	self assert: 1 equals: purchasesList size.
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchasesList total.
	
	
	
	
		
	
	
	
	! !

!methodRemoval: StoreTest #test10SalesGetRegistered stamp: 'GR 6/24/2021 16:01:21'!
test10SalesGetRegistered

	|interface cartID book purchasesList clientID password|
	clientID := '1234'.
	password := '1234'.
	
	book := testObjectsFactory itemSellByTheStore .
	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: clientID withPassword: password .
	interface addToCart: cartID bookISBN: book bookQuantity: 1.
	
	interface checkOutCart: cartID 
			usingCardNumbered: 1234567812345678 
			expiringOn: testObjectsFactory futureMonthOfYear 
			ownedBy: 'Jose Hernandez'.
			
	purchasesList := 			interface listPurchasesFrom: clientID using: password .
	self assert: 1 equals: (purchasesList items occurrencesOf: book) .
	self assert: 1 equals: purchasesList size.
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchasesList total.
	
	
	
	
		
	
	
	
	!
!StoreTest methodsFor: 'tests' stamp: 'GR 6/24/2021 16:01:27'!
test09SalesGetRegistered

	|interface cartID book purchasesList clientID password|
	clientID := '1234'.
	password := '1234'.
	
	book := testObjectsFactory itemSellByTheStore .
	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: clientID withPassword: password .
	interface addToCart: cartID bookISBN: book bookQuantity: 1.
	
	interface checkOutCart: cartID 
			usingCardNumbered: 1234567812345678 
			expiringOn: testObjectsFactory futureMonthOfYear 
			ownedBy: 'Jose Hernandez'.
			
	purchasesList := 			interface listPurchasesFrom: clientID using: password .
	self assert: 1 equals: (purchasesList items occurrencesOf: book) .
	self assert: 1 equals: purchasesList size.
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchasesList total.
	
	
	
	
		
	
	
	
	! !

!methodRemoval: StoreTest #test9SalesGetRegistered stamp: 'GR 6/24/2021 16:01:28'!
test9SalesGetRegistered

	|interface cartID book purchasesList clientID password|
	clientID := '1234'.
	password := '1234'.
	
	book := testObjectsFactory itemSellByTheStore .
	interface := testObjectsFactory defaultStoreForTest: self.
	cartID := interface createCartForClientID: clientID withPassword: password .
	interface addToCart: cartID bookISBN: book bookQuantity: 1.
	
	interface checkOutCart: cartID 
			usingCardNumbered: 1234567812345678 
			expiringOn: testObjectsFactory futureMonthOfYear 
			ownedBy: 'Jose Hernandez'.
			
	purchasesList := 			interface listPurchasesFrom: clientID using: password .
	self assert: 1 equals: (purchasesList items occurrencesOf: book) .
	self assert: 1 equals: purchasesList size.
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchasesList total.
	
	
	
	
		
	
	
	
	!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'GR 6/24/2021 16:01:31'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GR 6/24/2021 16:01:31'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'GR 6/24/2021 16:01:31'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'GR 6/24/2021 16:01:32'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'GR 6/24/2021 16:01:32'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'GR 6/24/2021 16:01:32'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'GR 6/24/2021 16:01:32'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'GR 6/24/2021 16:01:32'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'GR 6/24/2021 16:01:32'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'GR 6/24/2021 16:01:32'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'GR 6/24/2021 16:01:32'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'GR 6/24/2021 16:01:32'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'GR 6/24/2021 16:01:32'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'GR 6/24/2021 16:01:32'!
PASSED!

!testRun: #CreditCardTest #test01invalidCardNumberShouldFail stamp: 'GR 6/24/2021 16:01:32'!
PASSED!

!testRun: #CreditCardTest #test02emptyOwnerNameShouldFail stamp: 'GR 6/24/2021 16:01:32'!
PASSED!

!testRun: #CreditCardTest #test03ownerNameTooLongShouldFail stamp: 'GR 6/24/2021 16:01:32'!
PASSED!

!testRun: #StoreTest #test01CreateCartCreatesAnEmptyCartWhenLoginIsValid stamp: 'GR 6/24/2021 16:01:32'!
PASSED!

!testRun: #StoreTest #test02CartKnowsBooksAdded stamp: 'GR 6/24/2021 16:01:32'!
PASSED!

!testRun: #StoreTest #test03CartIDIsNotUsedTwice stamp: 'GR 6/24/2021 16:01:32'!
PASSED!

!testRun: #StoreTest #test04CartsHaveDifferentLists stamp: 'GR 6/24/2021 16:01:32'!
PASSED!

!testRun: #StoreTest #test05InvalidLoginGetsInvalidLoginError stamp: 'GR 6/24/2021 16:01:32'!
PASSED!

!testRun: #StoreTest #test06CannotListNonExistingCart stamp: 'GR 6/24/2021 16:01:33'!
PASSED!

!testRun: #StoreTest #test07CartExpiresAfterThirtyMinutes stamp: 'GR 6/24/2021 16:01:33'!
PASSED!

!testRun: #StoreTest #test08DifferentCartsHaveDifferentExpiration stamp: 'GR 6/24/2021 16:01:33'!
PASSED!

!testRun: #StoreTest #test09SalesGetRegistered stamp: 'GR 6/24/2021 16:01:33'!
PASSED!

!testRun: #StoreTest #test10DifferentUsersGetDifferentPurchaseRegister stamp: 'GR 6/24/2021 16:01:33'!
PASSED!

Object subclass: #Customer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Customer category: 'TusLibros' stamp: 'GR 6/24/2021 16:11:42'!
Object subclass: #Customer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Customer category: 'TusLibros' stamp: 'GR 6/24/2021 16:12:22'!
Object subclass: #Customer
	instanceVariableNames: 'carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Customer category: 'TusLibros' stamp: 'GR 6/24/2021 16:12:23'!
Object subclass: #Customer
	instanceVariableNames: 'carts purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Customer methodsFor: 'no messages' stamp: 'GR 6/24/2021 16:12:21'!
initialization

	carts := Bag new.
	purchases := SaleList new.! !
!SaleList methodsFor: 'operations' stamp: 'GR 6/24/2021 16:13:35'!
add: aSale

	items addAll: aSale items.
	total := total + aSale total.! !
!Store methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 16:13:35' prior: 50871643!
listPurchasesFrom: aUserID using: aPassword

	|saleList|

	self assertValidLoginFor: aUserID using: aPassword .
	
	saleList := SaleList new.
	
	(salesBook at: aUserID) do: [:aSale | saleList add: aSale].
	
	^saleList
	
	
	! !

!methodRemoval: SaleList #addSale: stamp: 'GR 6/24/2021 16:13:35'!
addSale: aSale

	items addAll: aSale items.
	total := total + aSale total.!
!StoreTestObjectsFactory methodsFor: 'customer' stamp: 'GR 6/24/2021 16:29:52'!
createCustomer

	^Customer new.! !
!Cart class methodsFor: 'instance creation' stamp: 'GR 6/24/2021 16:31:09'!
acceptingItemsOf: aCatalog for: aCustomer 

	^self new initializeAcceptingItemsOf: aCatalog ! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 16:31:09' prior: 50859854!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog for: self createCustomer! !
!Store methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 16:31:09' prior: 50871335!
createCartForClientID: aUserID withPassword: aPassword

	self assertValidLoginFor: aUserID using: aPassword .

	lastCart := lastCart + 1.
	carts at: lastCart put: (Cart acceptingItemsOf: catalog for: self createCustomer).
	cartOwners at: lastCart put: aUserID.
	cartCreation at: lastCart put: clock time.
	
	^lastCart.! !

!methodRemoval: Cart class #acceptingItemsOf: stamp: 'GR 6/24/2021 16:31:09'!
acceptingItemsOf: aCatalog

	^self new initializeAcceptingItemsOf: aCatalog !
!Cart methodsFor: 'initialization' stamp: 'GR 6/24/2021 16:32:28'!
initializeAcceptingItemsOf: aCatalog for: aCustomer 

	catalog := aCatalog.
	items := OrderedCollection new.! !
!Cart class methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 16:32:28' prior: 50872604!
acceptingItemsOf: aCatalog for: aCustomer 

	^self new initializeAcceptingItemsOf: aCatalog for: aCustomer ! !

!methodRemoval: Cart #initializeAcceptingItemsOf: stamp: 'GR 6/24/2021 16:32:28'!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'GR 6/24/2021 16:32:34'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GR 6/24/2021 16:32:34'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'GR 6/24/2021 16:32:34'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'GR 6/24/2021 16:32:34'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'GR 6/24/2021 16:32:34'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'GR 6/24/2021 16:32:34'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'GR 6/24/2021 16:32:34'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'GR 6/24/2021 16:32:34'!
PASSED!
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 16:34:02' prior: 50872617!
createCartForClientID: aUserID withPassword: aPassword
	
	|customer|
	self assertValidLoginFor: aUserID using: aPassword .
	customer := Customer new.

	lastCart := lastCart + 1.
	carts at: lastCart put: (Cart acceptingItemsOf: catalog for: customer).
	cartOwners at: lastCart put: aUserID.
	cartCreation at: lastCart put: clock time.
	
	^lastCart.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'GR 6/24/2021 16:34:09'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GR 6/24/2021 16:34:09'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'GR 6/24/2021 16:34:09'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'GR 6/24/2021 16:34:09'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'GR 6/24/2021 16:34:09'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'GR 6/24/2021 16:34:09'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'GR 6/24/2021 16:34:09'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'GR 6/24/2021 16:34:10'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'GR 6/24/2021 16:34:10'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'GR 6/24/2021 16:34:10'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'GR 6/24/2021 16:34:10'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'GR 6/24/2021 16:34:10'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'GR 6/24/2021 16:34:10'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'GR 6/24/2021 16:34:10'!
PASSED!

!testRun: #CreditCardTest #test01invalidCardNumberShouldFail stamp: 'GR 6/24/2021 16:34:10'!
PASSED!

!testRun: #CreditCardTest #test02emptyOwnerNameShouldFail stamp: 'GR 6/24/2021 16:34:10'!
PASSED!

!testRun: #CreditCardTest #test03ownerNameTooLongShouldFail stamp: 'GR 6/24/2021 16:34:10'!
PASSED!

!testRun: #StoreTest #test01CreateCartCreatesAnEmptyCartWhenLoginIsValid stamp: 'GR 6/24/2021 16:34:10'!
PASSED!

!testRun: #StoreTest #test02CartKnowsBooksAdded stamp: 'GR 6/24/2021 16:34:10'!
PASSED!

!testRun: #StoreTest #test03CartIDIsNotUsedTwice stamp: 'GR 6/24/2021 16:34:10'!
PASSED!

!testRun: #StoreTest #test04CartsHaveDifferentLists stamp: 'GR 6/24/2021 16:34:10'!
PASSED!

!testRun: #StoreTest #test05InvalidLoginGetsInvalidLoginError stamp: 'GR 6/24/2021 16:34:10'!
PASSED!

!testRun: #StoreTest #test06CannotListNonExistingCart stamp: 'GR 6/24/2021 16:34:10'!
PASSED!

!testRun: #StoreTest #test07CartExpiresAfterThirtyMinutes stamp: 'GR 6/24/2021 16:34:10'!
PASSED!

!testRun: #StoreTest #test08DifferentCartsHaveDifferentExpiration stamp: 'GR 6/24/2021 16:34:10'!
PASSED!

!testRun: #StoreTest #test09SalesGetRegistered stamp: 'GR 6/24/2021 16:34:11'!
PASSED!

!testRun: #StoreTest #test10DifferentUsersGetDifferentPurchaseRegister stamp: 'GR 6/24/2021 16:34:11'!
PASSED!

!classDefinition: #Customer category: 'TusLibros' stamp: 'GR 6/24/2021 16:44:16'!
Object subclass: #Customer
	instanceVariableNames: 'carts purchases id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Customer methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 16:44:14'!
initializeWith: anID

	id := anID.
	purchases := SaleList new.! !

!methodRemoval: Customer #initializeWith: stamp: 'GR 6/24/2021 16:44:30'!
initializeWith: anID

	id := anID.
	purchases := SaleList new.!
!Customer methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 16:45:00'!
initialization: anID

	carts := Bag new.
	purchases := SaleList new.! !

!methodRemoval: Customer #initialization stamp: 'GR 6/24/2021 16:45:00'!
initialization

	carts := Bag new.
	purchases := SaleList new.!
!Customer methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 16:45:12'!
initializeWith: anID

	carts := Bag new.
	purchases := SaleList new.! !

!methodRemoval: Customer #initialization: stamp: 'GR 6/24/2021 16:45:12'!
initialization: anID

	carts := Bag new.
	purchases := SaleList new.!
!Customer class methodsFor: 'no messages' stamp: 'GR 6/24/2021 16:45:33'!
with: anID

	^self new initializeWith: anID.! !
!StoreTestObjectsFactory methodsFor: 'customer' stamp: 'GR 6/24/2021 16:46:02'!
defaultCustomer

	^Customer with: '1234'.! !

!methodRemoval: StoreTestObjectsFactory #createCustomer stamp: 'GR 6/24/2021 16:46:06'!
createCustomer

	^Customer new.!
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'GR 6/24/2021 16:46:18' prior: 50872611!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog for: self defaultCustomer .! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'GR 6/24/2021 16:46:26'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GR 6/24/2021 16:46:26'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'GR 6/24/2021 16:46:26'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'GR 6/24/2021 16:46:26'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'GR 6/24/2021 16:46:26'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'GR 6/24/2021 16:46:26'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'GR 6/24/2021 16:46:26'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'GR 6/24/2021 16:46:26'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'GR 6/24/2021 16:46:26'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'GR 6/24/2021 16:46:26'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'GR 6/24/2021 16:46:26'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'GR 6/24/2021 16:46:26'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'GR 6/24/2021 16:46:27'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'GR 6/24/2021 16:46:27'!
PASSED!

!testRun: #CreditCardTest #test01invalidCardNumberShouldFail stamp: 'GR 6/24/2021 16:46:27'!
PASSED!

!testRun: #CreditCardTest #test02emptyOwnerNameShouldFail stamp: 'GR 6/24/2021 16:46:27'!
PASSED!

!testRun: #CreditCardTest #test03ownerNameTooLongShouldFail stamp: 'GR 6/24/2021 16:46:27'!
PASSED!

!testRun: #StoreTest #test01CreateCartCreatesAnEmptyCartWhenLoginIsValid stamp: 'GR 6/24/2021 16:46:27'!
PASSED!

!testRun: #StoreTest #test02CartKnowsBooksAdded stamp: 'GR 6/24/2021 16:46:27'!
PASSED!

!testRun: #StoreTest #test03CartIDIsNotUsedTwice stamp: 'GR 6/24/2021 16:46:27'!
PASSED!

!testRun: #StoreTest #test04CartsHaveDifferentLists stamp: 'GR 6/24/2021 16:46:27'!
PASSED!

!testRun: #StoreTest #test05InvalidLoginGetsInvalidLoginError stamp: 'GR 6/24/2021 16:46:27'!
PASSED!

!testRun: #StoreTest #test06CannotListNonExistingCart stamp: 'GR 6/24/2021 16:46:27'!
PASSED!

!testRun: #StoreTest #test07CartExpiresAfterThirtyMinutes stamp: 'GR 6/24/2021 16:46:27'!
PASSED!

!testRun: #StoreTest #test08DifferentCartsHaveDifferentExpiration stamp: 'GR 6/24/2021 16:46:27'!
PASSED!

!testRun: #StoreTest #test09SalesGetRegistered stamp: 'GR 6/24/2021 16:46:27'!
PASSED!

!testRun: #StoreTest #test10DifferentUsersGetDifferentPurchaseRegister stamp: 'GR 6/24/2021 16:46:27'!
PASSED!
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 16:46:52' prior: 50872679!
createCartForClientID: aUserID withPassword: aPassword
	
	|customer|
	self assertValidLoginFor: aUserID using: aPassword .
	customer := Customer with: aUserID.

	lastCart := lastCart + 1.
	carts at: lastCart put: (Cart acceptingItemsOf: catalog for: customer).
	cartOwners at: lastCart put: aUserID.
	cartCreation at: lastCart put: clock time.
	
	^lastCart.! !

!classDefinition: #Store category: 'TusLibros' stamp: 'GR 6/24/2021 16:47:42'!
Object subclass: #Store
	instanceVariableNames: 'catalog lastCart carts authenticator clock timeCreated cartCreation salesBook merchantProcessor cartOwners customers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Store methodsFor: 'initialization' stamp: 'GR 6/24/2021 16:47:40' prior: 50871290!
initializeWithCatalog: aCatalog authenticator: anAuthenticator merchantProcessor: anMP andClock: aClock .
	
	lastCart := 0.
	carts := Dictionary new.
	cartCreation := Dictionary new.
	
	salesBook := Dictionary new.
	
	cartOwners := Dictionary new.
	customers := Dictionary new.
	
	catalog := aCatalog.
	authenticator := anAuthenticator.
	merchantProcessor := anMP.
	clock := aClock .! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 16:48:25' prior: 50872917!
createCartForClientID: aUserID withPassword: aPassword
	
	|customer|
	self assertValidLoginFor: aUserID using: aPassword .
	customer := customers at: aUserID ifAbsentPut: [Customer with: aUserID.].

	lastCart := lastCart + 1.
	carts at: lastCart put: (Cart acceptingItemsOf: catalog for: customer).
	cartOwners at: lastCart put: aUserID.
	cartCreation at: lastCart put: clock time.
	
	^lastCart.! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 16:48:43' prior: 50872956!
createCartForClientID: aUserID withPassword: aPassword
	
	|customer|
	self assertValidLoginFor: aUserID using: aPassword .
	customer := customers at: aUserID ifAbsentPut: [Customer with: aUserID.].

	lastCart := lastCart + 1.
	carts at: lastCart put: (Cart acceptingItemsOf: catalog for: customer).
	cartCreation at: lastCart put: clock time.
	
	^lastCart.! !
!Store methodsFor: 'initialization' stamp: 'GR 6/24/2021 16:48:55' prior: 50872941!
initializeWithCatalog: aCatalog authenticator: anAuthenticator merchantProcessor: anMP andClock: aClock .
	
	lastCart := 0.
	carts := Dictionary new.
	cartCreation := Dictionary new.
	
	salesBook := Dictionary new.
	
	customers := Dictionary new.
	
	catalog := aCatalog.
	authenticator := anAuthenticator.
	merchantProcessor := anMP.
	clock := aClock .! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 16:49:25' prior: 50871557!
checkOutCart: aCartID usingCardNumbered: aCardNumber expiringOn: aMonthOfYear ownedBy: aName
	|cashier creditCard cart clientSalesBook user|
	
	cart := self getCartFromID: aCartID .
	user := cartOwners at: aCartID.
		
	creditCard := CreditCard expiringOn: aMonthOfYear numbered: aCardNumber ownedBy: aName.
	
	clientSalesBook := salesBook at: user ifAbsentPut: [OrderedCollection new].
	
	cashier := Cashier 
		toCheckout: cart
		charging: creditCard 
		throught: merchantProcessor 
		on: clock today
		registeringOn: clientSalesBook .
		
	cashier checkOut.
	
	^aCartID.! !

Object subclass: #Cart
	instanceVariableNames: 'catalog items owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'GR 6/24/2021 16:49:58'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'initialization' stamp: 'GR 6/24/2021 16:50:17' prior: 50872635!
initializeAcceptingItemsOf: aCatalog for: aCustomer 

	catalog := aCatalog.
	items := OrderedCollection new.
	owner := aCustomer .! !
!Cart methodsFor: 'queries' stamp: 'GR 6/24/2021 16:50:28'!
owner

	^owner ! !
!Customer methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 16:50:51'!
id

	^id.! !
!Customer methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 16:51:15'!
purchases 

	^purchases ! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 16:52:45' prior: 50872999!
checkOutCart: aCartID usingCardNumbered: aCardNumber expiringOn: aMonthOfYear ownedBy: aName
	|cashier creditCard cart clientSalesBook user|
	
	cart := self getCartFromID: aCartID .
	user := cart owner .
		
	creditCard := CreditCard expiringOn: aMonthOfYear numbered: aCardNumber ownedBy: aName.
	
	clientSalesBook := cart owner purchases .
	
	cashier := Cashier 
		toCheckout: cart
		charging: creditCard 
		throught: merchantProcessor 
		on: clock today
		registeringOn: clientSalesBook .
		
	cashier checkOut.
	
	^aCartID.! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 16:52:52' prior: 50873048!
checkOutCart: aCartID usingCardNumbered: aCardNumber expiringOn: aMonthOfYear ownedBy: aName
	|cashier creditCard cart clientSalesBook |
	
	cart := self getCartFromID: aCartID .
		
	creditCard := CreditCard expiringOn: aMonthOfYear numbered: aCardNumber ownedBy: aName.
	
	clientSalesBook := cart owner purchases .
	
	cashier := Cashier 
		toCheckout: cart
		charging: creditCard 
		throught: merchantProcessor 
		on: clock today
		registeringOn: clientSalesBook .
		
	cashier checkOut.
	
	^aCartID.! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 16:54:49' prior: 50872585!
listPurchasesFrom: aUserID using: aPassword

	|customer|

	self assertValidLoginFor: aUserID using: aPassword .
	
	customer := customers at: aUserID .
	
	^customer purchases
	
	
	! !

!testRun: #StoreTest #test01CreateCartCreatesAnEmptyCartWhenLoginIsValid stamp: 'GR 6/24/2021 16:54:56'!
PASSED!

!testRun: #StoreTest #test02CartKnowsBooksAdded stamp: 'GR 6/24/2021 16:54:56'!
PASSED!

!testRun: #StoreTest #test03CartIDIsNotUsedTwice stamp: 'GR 6/24/2021 16:54:57'!
PASSED!

!testRun: #StoreTest #test04CartsHaveDifferentLists stamp: 'GR 6/24/2021 16:54:57'!
PASSED!

!testRun: #StoreTest #test05InvalidLoginGetsInvalidLoginError stamp: 'GR 6/24/2021 16:54:57'!
PASSED!

!testRun: #StoreTest #test06CannotListNonExistingCart stamp: 'GR 6/24/2021 16:54:57'!
PASSED!

!testRun: #StoreTest #test07CartExpiresAfterThirtyMinutes stamp: 'GR 6/24/2021 16:54:57'!
PASSED!

!testRun: #StoreTest #test08DifferentCartsHaveDifferentExpiration stamp: 'GR 6/24/2021 16:54:57'!
PASSED!

!testRun: #StoreTest #test09SalesGetRegistered stamp: 'GR 6/24/2021 16:54:57'!
PASSED!

!testRun: #StoreTest #test10DifferentUsersGetDifferentPurchaseRegister stamp: 'GR 6/24/2021 16:54:57'!
PASSED!
!Store methodsFor: 'initialization' stamp: 'GR 6/24/2021 16:55:12' prior: 50872985!
initializeWithCatalog: aCatalog authenticator: anAuthenticator merchantProcessor: anMP andClock: aClock .
	
	lastCart := 0.
	carts := Dictionary new.
	cartCreation := Dictionary new.
	
	customers := Dictionary new.
	
	catalog := aCatalog.
	authenticator := anAuthenticator.
	merchantProcessor := anMP.
	clock := aClock .! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'GR 6/24/2021 16:55:15'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GR 6/24/2021 16:55:15'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'GR 6/24/2021 16:55:15'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'GR 6/24/2021 16:55:15'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'GR 6/24/2021 16:55:15'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'GR 6/24/2021 16:55:15'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'GR 6/24/2021 16:55:15'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'GR 6/24/2021 16:55:15'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'GR 6/24/2021 16:55:16'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'GR 6/24/2021 16:55:16'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'GR 6/24/2021 16:55:16'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'GR 6/24/2021 16:55:16'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'GR 6/24/2021 16:55:16'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'GR 6/24/2021 16:55:16'!
PASSED!

!testRun: #CreditCardTest #test01invalidCardNumberShouldFail stamp: 'GR 6/24/2021 16:55:16'!
PASSED!

!testRun: #CreditCardTest #test02emptyOwnerNameShouldFail stamp: 'GR 6/24/2021 16:55:16'!
PASSED!

!testRun: #CreditCardTest #test03ownerNameTooLongShouldFail stamp: 'GR 6/24/2021 16:55:16'!
PASSED!

!testRun: #StoreTest #test01CreateCartCreatesAnEmptyCartWhenLoginIsValid stamp: 'GR 6/24/2021 16:55:16'!
PASSED!

!testRun: #StoreTest #test02CartKnowsBooksAdded stamp: 'GR 6/24/2021 16:55:16'!
PASSED!

!testRun: #StoreTest #test03CartIDIsNotUsedTwice stamp: 'GR 6/24/2021 16:55:16'!
PASSED!

!testRun: #StoreTest #test04CartsHaveDifferentLists stamp: 'GR 6/24/2021 16:55:16'!
PASSED!

!testRun: #StoreTest #test05InvalidLoginGetsInvalidLoginError stamp: 'GR 6/24/2021 16:55:16'!
PASSED!

!testRun: #StoreTest #test06CannotListNonExistingCart stamp: 'GR 6/24/2021 16:55:16'!
PASSED!

!testRun: #StoreTest #test07CartExpiresAfterThirtyMinutes stamp: 'GR 6/24/2021 16:55:16'!
PASSED!

!testRun: #StoreTest #test08DifferentCartsHaveDifferentExpiration stamp: 'GR 6/24/2021 16:55:16'!
PASSED!

!testRun: #StoreTest #test09SalesGetRegistered stamp: 'GR 6/24/2021 16:55:16'!
PASSED!

!testRun: #StoreTest #test10DifferentUsersGetDifferentPurchaseRegister stamp: 'GR 6/24/2021 16:55:16'!
PASSED!
!Customer methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 16:55:41' overrides: 16896425!
initialize

	carts := Bag new.
	purchases := SaleList new.! !
!Customer methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 16:55:47' prior: 50873226 overrides: 16896425!
initialize

	purchases := SaleList new.! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 16:56:43' prior: 50872971!
createCartForClientID: aUserID withPassword: aPassword
	
	|customer|
	self assertValidLoginFor: aUserID using: aPassword .
	customer := customers at: aUserID ifAbsentPut: [Customer new].

	lastCart := lastCart + 1.
	carts at: lastCart put: (Cart acceptingItemsOf: catalog for: customer).
	cartCreation at: lastCart put: clock time.
	
	^lastCart.! !

!methodRemoval: Customer #id stamp: 'GR 6/24/2021 16:57:57'!
id

	^id.!

!methodRemoval: Customer #initializeWith: stamp: 'GR 6/24/2021 16:58:03'!
initializeWith: anID

	carts := Bag new.
	purchases := SaleList new.!

!methodRemoval: Customer class #with: stamp: 'GR 6/24/2021 16:58:07'!
with: anID

	^self new initializeWith: anID.!
!StoreTestObjectsFactory methodsFor: 'customer' stamp: 'GR 6/24/2021 16:58:26'!
createCustomer

	^Customer with: '1234'.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'GR 6/24/2021 16:58:26' prior: 50872826!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog for: self createCustomer .! !

!methodRemoval: StoreTestObjectsFactory #defaultCustomer stamp: 'GR 6/24/2021 16:58:26'!
defaultCustomer

	^Customer with: '1234'.!
!StoreTestObjectsFactory methodsFor: 'customer' stamp: 'GR 6/24/2021 16:58:38' prior: 50873260!
createCustomer

	^Customer new.! !
!Store methodsFor: 'operations' stamp: 'GR 6/24/2021 16:59:56' prior: 50873087!
listPurchasesFrom: aUserID using: aPassword

	|customer|

	self assertValidLoginFor: aUserID using: aPassword .
	
	customer := customers at: aUserID ifAbsent:[^SaleList new.].
	
	^customer purchases
	
	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'GR 6/24/2021 17:00:05'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'GR 6/24/2021 17:00:05'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'GR 6/24/2021 17:00:05'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'GR 6/24/2021 17:00:05'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'GR 6/24/2021 17:00:05'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'GR 6/24/2021 17:00:05'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'GR 6/24/2021 17:00:05'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'GR 6/24/2021 17:00:05'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'GR 6/24/2021 17:00:05'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'GR 6/24/2021 17:00:05'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'GR 6/24/2021 17:00:05'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'GR 6/24/2021 17:00:05'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'GR 6/24/2021 17:00:06'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'GR 6/24/2021 17:00:06'!
PASSED!

!testRun: #CreditCardTest #test01invalidCardNumberShouldFail stamp: 'GR 6/24/2021 17:00:06'!
PASSED!

!testRun: #CreditCardTest #test02emptyOwnerNameShouldFail stamp: 'GR 6/24/2021 17:00:06'!
PASSED!

!testRun: #CreditCardTest #test03ownerNameTooLongShouldFail stamp: 'GR 6/24/2021 17:00:06'!
PASSED!

!testRun: #StoreTest #test01CreateCartCreatesAnEmptyCartWhenLoginIsValid stamp: 'GR 6/24/2021 17:00:06'!
PASSED!

!testRun: #StoreTest #test02CartKnowsBooksAdded stamp: 'GR 6/24/2021 17:00:06'!
PASSED!

!testRun: #StoreTest #test03CartIDIsNotUsedTwice stamp: 'GR 6/24/2021 17:00:06'!
PASSED!

!testRun: #StoreTest #test04CartsHaveDifferentLists stamp: 'GR 6/24/2021 17:00:06'!
PASSED!

!testRun: #StoreTest #test05InvalidLoginGetsInvalidLoginError stamp: 'GR 6/24/2021 17:00:06'!
PASSED!

!testRun: #StoreTest #test06CannotListNonExistingCart stamp: 'GR 6/24/2021 17:00:06'!
PASSED!

!testRun: #StoreTest #test07CartExpiresAfterThirtyMinutes stamp: 'GR 6/24/2021 17:00:06'!
PASSED!

!testRun: #StoreTest #test08DifferentCartsHaveDifferentExpiration stamp: 'GR 6/24/2021 17:00:06'!
PASSED!

!testRun: #StoreTest #test09SalesGetRegistered stamp: 'GR 6/24/2021 17:00:06'!
PASSED!

!testRun: #StoreTest #test10DifferentUsersGetDifferentPurchaseRegister stamp: 'GR 6/24/2021 17:00:06'!
PASSED!