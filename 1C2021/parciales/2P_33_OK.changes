
----End fileIn of /media/Datos/Cuis/PARA PARCIAL 2/linux64/ISW1-2021-1C-2doParcial.st----!

----End fileIn of /media/Datos/Cuis/PARA PARCIAL 2/linux64/Packages/TerseGuide.pck.st----!

TestCase subclass: #RondaTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'G.L.S 7/5/2021 17:58:27'!
TestCase subclass: #RondaTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'G.L.S 7/5/2021 18:06:44'!
Object subclass: #Ronda
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'G.L.S 7/5/2021 18:07:20'!
TestCase subclass: #RondaTest
	instanceVariableNames: 'jugador1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'G.L.S 7/5/2021 18:07:25'!
TestCase subclass: #RondaTest
	instanceVariableNames: 'jugador1 jugador2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaTest methodsFor: 'nil' stamp: 'G.L.S 7/5/2021 18:06:27'!
test01SoloLaManoPuedeEmpezarLaPrimeraJugada

	| ronda |
	ronda := Ronda mano: jugador1 pie: jugador2.
	
	self should: [] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText  = Ronda errorOrdenDeJugadaIncorrecto.
			].! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'G.L.S 7/5/2021 18:08:17' prior: 50862812!
test01SoloLaManoPuedeEmpezarLaPrimeraJugada

	| ronda |
	ronda := Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador2 jugarCarta: CartaDeTruco sieteDeOro.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText  = Ronda errorOrdenDeJugadaIncorrecto.
			].! !

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 18:08:43'!
ERROR!
!Ronda class methodsFor: 'instance creation' stamp: 'G.L.S 7/5/2021 18:08:54'!
mano: anUndefinedObject pie: anUndefinedObject2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeMano: anUndefinedObject pie: anUndefinedObject2 ! !
!Ronda class methodsFor: 'instance creation' stamp: 'G.L.S 7/5/2021 18:09:07' prior: 50862841!
mano: anUndefinedObject pie: anUndefinedObject2

	^self new initializeWithMano: anUndefinedObject pie: anUndefinedObject2 ! !
!Ronda class methodsFor: 'instance creation' stamp: 'G.L.S 7/5/2021 18:09:25' prior: 50862851!
mano: unJugador pie: anUndefinedObject2

	^self new initializeWithMano: unJugador pie: anUndefinedObject2 ! !
!Ronda class methodsFor: 'instance creation' stamp: 'G.L.S 7/5/2021 18:09:34' prior: 50862858!
mano: unJugador pie: otroJugador

	^self new initializeWithMano: unJugador pie: otroJugador ! !
!Ronda class methodsFor: 'instance creation' stamp: 'G.L.S 7/5/2021 18:09:37' prior: 50862865!
mano: unJugador pie: otroJugador

	^self new initializeWithMano: unJugador pie: otroJugador.! !

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 18:09:40'!
ERROR!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'G.L.S 7/5/2021 18:09:57'!
Object subclass: #Ronda
	instanceVariableNames: 'unJugador_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'G.L.S 7/5/2021 18:09:57'!
Object subclass: #Ronda
	instanceVariableNames: 'unJugador_CHANGE_ME otroJugador_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'initialization' stamp: 'G.L.S 7/5/2021 18:09:57'!
initializeWithMano: unJugador pie: otroJugador 
	self shouldBeImplemented.
	unJugador_CHANGE_ME := unJugador.
	otroJugador_CHANGE_ME := otroJugador.! !
!Ronda methodsFor: 'initialization' stamp: 'G.L.S 7/5/2021 18:10:08' prior: 50862896!
initializeWithMano: unJugador pie: otroJugador

	unJugador_CHANGE_ME := unJugador.
	otroJugador_CHANGE_ME := otroJugador.! !

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'G.L.S 7/5/2021 18:10:11'!
Object subclass: #Ronda
	instanceVariableNames: 'mano otroJugador_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'G.L.S 7/5/2021 18:10:11' prior: 50862904!
initializeWithMano: unJugador pie: otroJugador

	mano := unJugador.
	otroJugador_CHANGE_ME := otroJugador.! !

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'G.L.S 7/5/2021 18:10:19'!
Object subclass: #Ronda
	instanceVariableNames: 'mano pie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'G.L.S 7/5/2021 18:10:19' prior: 50862919!
initializeWithMano: unJugador pie: otroJugador

	mano := unJugador.
	pie := otroJugador.! !
!Ronda methodsFor: 'initialization' stamp: 'G.L.S 7/5/2021 18:10:42' prior: 50862933!
initializeWithMano: unJugador pie: otroJugador

	mano := unJugador.
	pie := otroJugador.
	
	! !
!Ronda methodsFor: 'initialization' stamp: 'G.L.S 7/5/2021 18:11:28' prior: 50862939!
initializeWithMano: unJugador pie: otroJugador

	mano := unJugador.
	pie := otroJugador.
	
	mano rondaActual: self.
	pie rondaActual: self.! !

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 18:11:50'!
ERROR!

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'G.L.S 7/5/2021 18:13:07'!
Object subclass: #Jugador
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaTest methodsFor: 'setUp/tearDown' stamp: 'G.L.S 7/5/2021 18:13:02' overrides: 16927572!
setUp

	jugador1  := Jugador conMano: {}.
	jugador2 := Jugador conMano: {}.! !
!Jugador class methodsFor: 'instance creation' stamp: 'G.L.S 7/5/2021 18:13:23'!
conMano: anArray 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeConMano: anArray ! !
!Jugador class methodsFor: 'instance creation' stamp: 'G.L.S 7/5/2021 18:13:30' prior: 50862969!
conMano: anArray
	^self new initializeConMano: anArray ! !
!Jugador class methodsFor: 'instance creation' stamp: 'G.L.S 7/5/2021 18:13:45' prior: 50862977!
conMano: unaManoDeCartas
	^self new initializeConMano: unaManoDeCartas ! !
!Jugador class methodsFor: 'instance creation' stamp: 'G.L.S 7/5/2021 18:13:48' prior: 50862982!
conMano: unaManoDeCartas
	^self new initializeConMano: unaManoDeCartas.! !

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'G.L.S 7/5/2021 18:14:28'!
Object subclass: #Jugador
	instanceVariableNames: 'unaManoDeCartas_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Jugador methodsFor: 'initialization' stamp: 'G.L.S 7/5/2021 18:14:28'!
initializeConMano: unaManoDeCartas 
	self shouldBeImplemented.
	unaManoDeCartas_CHANGE_ME := unaManoDeCartas.! !
!Jugador methodsFor: 'initialization' stamp: 'G.L.S 7/5/2021 18:14:37' prior: 50863001!
initializeConMano: unaManoDeCartas 
	unaManoDeCartas_CHANGE_ME := unaManoDeCartas.! !

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'G.L.S 7/5/2021 18:14:43'!
Object subclass: #Jugador
	instanceVariableNames: 'manoActual'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Jugador methodsFor: 'as yet unclassified' stamp: 'G.L.S 7/5/2021 18:14:43' prior: 50863008!
initializeConMano: unaManoDeCartas 
	manoActual := unaManoDeCartas.! !

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 18:14:50'!
ERROR!
!Jugador methodsFor: 'ronda' stamp: 'G.L.S 7/5/2021 18:15:09'!
rondaActual: aRonda 
	self shouldBeImplemented.! !

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'G.L.S 7/5/2021 18:15:22'!
Object subclass: #Jugador
	instanceVariableNames: 'manoActual ronda'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Jugador methodsFor: 'ronda' stamp: 'G.L.S 7/5/2021 18:15:20' prior: 50863030!
rondaActual: aRonda 
	ronda := aRonda.! !
!Jugador methodsFor: 'ronda' stamp: 'G.L.S 7/5/2021 18:15:28' prior: 50863042!
rondaActual: unaRonda 
	ronda := unaRonda.! !

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 18:15:30'!
ERROR!
!Jugador methodsFor: 'acciones' stamp: 'G.L.S 7/5/2021 18:15:43'!
jugarCarta: aCartaDeTruco 
	self shouldBeImplemented.! !
!Jugador methodsFor: 'acciones' stamp: 'G.L.S 7/5/2021 18:16:02' prior: 50863053!
jugarCarta: aCartaDeTruco 
	
	ronda ! !
!Jugador methodsFor: 'acciones' stamp: 'G.L.S 7/5/2021 18:17:09' prior: 50863058!
jugarCarta: aCartaDeTruco 
	
	ronda registrarJugador: self jugada: aCartaDeTruco.! !

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 18:17:20'!
ERROR!
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 18:17:34'!
registrarJugador: aJugador jugada: aCartaDeTruco 
	self shouldBeImplemented.! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 18:18:59' prior: 50863071!
registrarJugador: aJugador jugada: aCartaDeTruco 
	
	self verificarSiEsElSiguienteJugador: aJugador.! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 18:20:15' prior: 50863077!
registrarJugador: aJugador jugada: aCartaDeTruco 
	
	self asegurarQueSeaElJugadorCorrecto: aJugador.! !

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 18:20:21'!
ERROR!
!Ronda methodsFor: 'private' stamp: 'G.L.S 7/5/2021 18:20:35'!
asegurarQueSeaElJugadorCorrecto: aJugador 
	self shouldBeImplemented.! !

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'G.L.S 7/5/2021 18:22:13'!
Object subclass: #Ronda
	instanceVariableNames: 'mano pie jugadorSiguiente'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'private' stamp: 'G.L.S 7/5/2021 18:22:11' prior: 50863092!
asegurarQueSeaElJugadorCorrecto: aJugador 
	
	(jugadorSiguiente = aJugador) ifFalse: [self error: self class errorOrdenDeJugadaIncorrecto]! !
!Ronda methodsFor: 'initialization' stamp: 'G.L.S 7/5/2021 18:22:35' prior: 50862945!
initializeWithMano: unJugador pie: otroJugador

	mano := unJugador.
	pie := otroJugador.
	
	mano rondaActual: self.
	pie rondaActual: self.
	
	jugadorSiguiente  := mano.! !

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 18:22:57'!
ERROR!
!Ronda class methodsFor: 'errors' stamp: 'G.L.S 7/5/2021 18:23:06'!
errorOrdenDeJugadaIncorrecto
	self shouldBeImplemented.! !
!Ronda class methodsFor: 'errors' stamp: 'G.L.S 7/5/2021 18:23:26' prior: 50863124!
errorOrdenDeJugadaIncorrecto
	^'Error - Se realiz� una jugada en el orden incorrecto'.! !

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 18:23:27'!
PASSED!

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 18:23:27'!
PASSED!

TestCase subclass: #JugadorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #JugadorTest category: 'ISW1-2021-1C-2doParcial' stamp: 'G.L.S 7/5/2021 18:23:52'!
TestCase subclass: #JugadorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 18:24:52' prior: 50862824!
test01SoloLaManoPuedeEmpezarLaPrimeraJugada

	| ronda |
	ronda := Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador2 jugarCarta: CartaDeTruco sieteDeOro.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 18:25:04' prior: 50863154!
test01SoloLaManoPuedeEmpezarLaPrimeraJugada

	Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador2 jugarCarta: CartaDeTruco sieteDeOro.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 18:25:06'!
PASSED!

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 18:25:06'!
PASSED!
!Jugador methodsFor: 'initialization' stamp: 'G.L.S 7/5/2021 18:27:56' prior: 50863022!
initializeConMano: unaManoDeCartas
	manoActual := unaManoDeCartas.! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 18:37:13'!
test02UnJugadorSoloPuedeJugarUnaVezEnUnEnfrentamiento

	Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador2 jugarCarta: CartaDeTruco sieteDeOro.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 18:37:30' prior: 50863192!
test02UnJugadorSoloPuedeJugarUnaVezEnUnEnfrentamiento

	Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: CartaDeTruco sieteDeEspada.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 18:37:47' prior: 50863205!
test02UnJugadorSoloPuedeJugarUnaVezEnUnEnfrentamiento

	Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: CartaDeTruco sieteDeEspada.
		jugador1 jugarCarta: CartaDeTruco anchoDeEspada.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !

!testRun: #RondaTest #test02UnJugadorSoloPuedeJugarUnaVezEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 18:37:54'!
FAILURE!

!testRun: #RondaTest #test02UnJugadorSoloPuedeJugarUnaVezEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 18:38:48'!
FAILURE!
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 18:40:12' prior: 50863083!
registrarJugador: aJugador jugada: aCartaDeTruco 
	
	self asegurarQueSeaElJugadorCorrecto: aJugador.
	
	""
	
	self esperarAJugadorQueSigueA: aJugador.! !

!testRun: #RondaTest #test02UnJugadorSoloPuedeJugarUnaVezEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 18:40:18'!
ERROR!
!Ronda methodsFor: 'private' stamp: 'G.L.S 7/5/2021 18:40:30'!
esperarAJugadorQueSigueA: aJugador 
	self shouldBeImplemented.! !
!Ronda methodsFor: 'private' stamp: 'G.L.S 7/5/2021 18:41:09' prior: 50863251!
esperarAJugadorQueSigueA: aJugador 
	
	(mano = aJugador) ifTrue: [jugadorSiguiente := pie].! !
!Ronda methodsFor: 'private' stamp: 'G.L.S 7/5/2021 18:41:26' prior: 50863256!
esperarAJugadorQueSigueA: aJugador 
	
	(mano = aJugador) ifTrue: [jugadorSiguiente := pie. ^self].
	jugadorSiguiente := mano.! !

!testRun: #RondaTest #test02UnJugadorSoloPuedeJugarUnaVezEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 18:41:31'!
FAILURE!

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 18:42:05'!
PASSED!

!testRun: #RondaTest #test02UnJugadorSoloPuedeJugarUnaVezEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 18:42:05'!
PASSED!

jugadorSiguiente = aJugador!

!testRun: #RondaTest #test02UnJugadorSoloPuedeJugarUnaVezEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 18:42:20'!
PASSED!

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 18:42:23'!
PASSED!

!testRun: #RondaTest #test02UnJugadorSoloPuedeJugarUnaVezEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 18:42:23'!
PASSED!
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 18:46:42'!
test02UnJugadorNoPuedeRealizarDosJugadasSeguidas

	Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: CartaDeTruco sieteDeEspada.
		jugador1 jugarCarta: CartaDeTruco anchoDeEspada.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !

!methodRemoval: RondaTest #test02UnJugadorSoloPuedeJugarUnaVezEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 18:46:42'!
test02UnJugadorSoloPuedeJugarUnaVezEnUnEnfrentamiento

	Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: CartaDeTruco sieteDeEspada.
		jugador1 jugarCarta: CartaDeTruco anchoDeEspada.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidas stamp: 'G.L.S 7/5/2021 18:46:47'!
PASSED!

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 18:46:47'!
PASSED!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidas stamp: 'G.L.S 7/5/2021 18:46:47'!
PASSED!
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 18:49:21'!
test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento

	Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: CartaDeTruco sieteDeEspada.
		jugador1 jugarCarta: CartaDeTruco anchoDeEspada.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !

!methodRemoval: RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidas stamp: 'G.L.S 7/5/2021 18:49:21'!
test02UnJugadorNoPuedeRealizarDosJugadasSeguidas

	Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: CartaDeTruco sieteDeEspada.
		jugador1 jugarCarta: CartaDeTruco anchoDeEspada.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].!
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 18:50:15'!
test03EljugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente

	Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: CartaDeTruco sieteDeEspada.
		jugador1 jugarCarta: CartaDeTruco anchoDeEspada.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 18:50:27'!
test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente

	Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: CartaDeTruco sieteDeEspada.
		jugador1 jugarCarta: CartaDeTruco anchoDeEspada.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !

!methodRemoval: RondaTest #test03EljugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 18:50:27'!
test03EljugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente

	Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: CartaDeTruco sieteDeEspada.
		jugador1 jugarCarta: CartaDeTruco anchoDeEspada.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].!
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 18:52:40' prior: 50863375!
test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente

	Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: CartaDeTruco sieteDeEspada.
		jugador2 jugarCarta: CartaDeTruco anchoDeBasto.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 18:53:05' prior: 50863408!
test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente

	Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: CartaDeTruco sieteDeEspada.
		jugador2 jugarCarta: CartaDeTruco anchoDeBasto.
		jugador1 jugarCarta: CartaDeTruco 
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 18:54:01' prior: 50863424!
test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente

	Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: CartaDeTruco sieteDeEspada.
		jugador2 jugarCarta: CartaDeTruco anchoDeBasto.
		jugador1 jugarCarta: (CartaDeTruco bastoCon: 7).
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 18:55:49'!
FAILURE!

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 18:56:40'!
PASSED!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 18:56:40'!
PASSED!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 18:56:40'!
FAILURE!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 18:56:40'!
FAILURE!

jugadorSiguiente = aJugador!

p _ OrderedCollection new.!

p removeAll.!

p add: 30.!

p add: 30.!

p add: 30.!

p add: 30.!

p add: 30.!

p add: 30.!

p add: 30.!

p add: 30.!

p add: 30.!

p add: 30.!

p add: 30.!

p.!

p!

p removeAll.!

p.!

p size!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'G.L.S 7/5/2021 19:01:30'!
Object subclass: #Ronda
	instanceVariableNames: 'mano pie jugadorSiguiente jugadas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'initialization' stamp: 'G.L.S 7/5/2021 19:01:26' prior: 50863113!
initializeWithMano: unJugador pie: otroJugador

	mano := unJugador.
	pie := otroJugador.
	
	mano rondaActual: self.
	pie rondaActual: self.
	
	jugadorSiguiente  := mano.
	jugadas := OrderedCollection new.! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 19:02:11' prior: 50863240!
registrarJugador: aJugador jugada: aCartaDeTruco 
	
	self asegurarQueSeaElJugadorCorrecto: aJugador.
	
	jugadas add: aCartaDeTruco.
	
	self esperarAJugadorQueSigueA: aJugador.! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 19:02:30' prior: 50863507!
registrarJugador: aJugador jugada: aCartaDeTruco 
	
	self asegurarQueSeaElJugadorCorrecto: aJugador.
	
	jugadas add: aCartaDeTruco.
	
	self esperarAJugadorQueSigueA: aJugador.! !

p _ Dictionary new.!

p add: 30 -> 0.!

p add: 31 -> 5.!

p size.!

p!

p removeAll.!

p.!
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 19:03:50' prior: 50863516!
registrarJugador: aJugador jugada: aCartaDeTruco 
	
	self asegurarQueSeaElJugadorCorrecto: aJugador.
	
	jugadas add: aJugador -> aCartaDeTruco.
	
	self esperarAJugadorQueSigueA: aJugador.! !
!Ronda methodsFor: 'initialization' stamp: 'G.L.S 7/5/2021 19:04:02' prior: 50863497!
initializeWithMano: unJugador pie: otroJugador

	mano := unJugador.
	pie := otroJugador.
	
	mano rondaActual: self.
	pie rondaActual: self.
	
	jugadorSiguiente  := mano.
	jugadas := Dictionary new..! !
!Ronda methodsFor: 'initialization' stamp: 'G.L.S 7/5/2021 19:04:04' prior: 50863537!
initializeWithMano: unJugador pie: otroJugador

	mano := unJugador.
	pie := otroJugador.
	
	mano rondaActual: self.
	pie rondaActual: self.
	
	jugadorSiguiente  := mano.
	jugadas := Dictionary new.! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 19:04:29' prior: 50863528!
registrarJugador: aJugador jugada: aCartaDeTruco 
	
	self asegurarQueSeaElJugadorCorrecto: aJugador.
	
	jugadas add: aJugador -> aCartaDeTruco.
	
	self calcularGanadorDeJugada.
	
	self esperarAJugadorQueSigueA: aJugador.! !
!Ronda methodsFor: 'initialization' stamp: 'G.L.S 7/5/2021 19:05:14' prior: 50863546!
initializeWithMano: unJugador pie: otroJugador

	mano := unJugador.
	pie := otroJugador.
	
	mano rondaActual: self.
	pie rondaActual: self.
	
	jugadorSiguiente  := mano.
	jugadas := Dictionary new.! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 19:06:13'!
calcularGanadorDeJugada

	(jugadas size = 2) ifTrue:[].
	! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 19:08:00' prior: 50863575!
calcularGanadorDeJugada

	self jugaronTodos ifTrue:[].
	! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 19:08:12'!
jugaronTodos
	
	^(jugadas size = 2).	! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 19:09:21' prior: 50863580!
calcularGanadorDeJugada

	self jugaronTodos ifTrue:[
			jugadas at: mano.
			jugadas at: pie. 
		].
	! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 19:09:23' prior: 50863590!
calcularGanadorDeJugada

	self jugaronTodos ifTrue:[
			jugadas at: mano.
			jugadas at: pie.
		].
	! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 19:11:32' prior: 50863597!
calcularGanadorDeJugada

	self jugaronTodos ifTrue:[ | carta1 carta2 |
			carta1 := (jugadas at: mano).
			carta2 := (jugadas at: pie).
			
		].
	! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 19:12:53' prior: 50863603!
calcularGanadorDeJugada

	self jugaronTodos ifTrue:[ | carta1 carta2 |
			carta1 := (jugadas at: mano).
			carta2 := (jugadas at: pie).
			
			(carta1 mataA: carta2) ifTrue: [jugadorSiguiente := mano].
		].
	! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 19:13:27' prior: 50863611!
calcularGanadorDeJugada

	self jugaronTodos ifTrue:[ | carta1 carta2 |
			carta1 := (jugadas at: mano).
			carta2 := (jugadas at: pie).
			
			(carta1 mataA: carta2) ifTrue: [jugadorSiguiente := mano. ^self].
			(carta2 mataA: carta1) ifTrue: [jugadorSiguiente := pie. ^self].
		].
	! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 19:13:48' prior: 50863621!
calcularGanadorDeJugada

	self jugaronTodos ifTrue:[ | carta1 carta2 |
			carta1 := (jugadas at: mano).
			carta2 := (jugadas at: pie).
			
			(carta1 mataA: carta2) ifTrue: [jugadorSiguiente := mano. ^self].
			(carta2 mataA: carta1) ifTrue: [jugadorSiguiente := pie. ^self].
			"".
		].
	! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 19:13:59' prior: 50863633!
calcularGanadorDeJugada

	self jugaronTodos ifTrue:[ | carta1 carta2 |
			carta1 := (jugadas at: mano).
			carta2 := (jugadas at: pie).
			
			(carta1 mataA: carta2) ifTrue: [jugadorSiguiente := mano. ^self].
			(carta2 mataA: carta1) ifTrue: [jugadorSiguiente := pie. ^self].
			"empate si lleg�s ac�".
		].
	! !
!Ronda methodsFor: 'private' stamp: 'G.L.S 7/5/2021 19:14:48' prior: 50863262!
esperarAJugadorQueSigueA: aJugador 
	
	self jugaronTodos ifFalse: [
		(mano = aJugador) ifTrue: [jugadorSiguiente := pie. ^self].
		jugadorSiguiente := mano.
		].! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 19:15:19' prior: 50863645!
calcularGanadorDeJugada

	self jugaronTodos ifTrue:[ | carta1 carta2 |
			carta1 := (jugadas at: mano).
			carta2 := (jugadas at: pie).
			
			(carta1 mataA: carta2) ifTrue: [jugadorSiguiente := mano. ^self].
			(carta2 mataA: carta1) ifTrue: [jugadorSiguiente := pie. ^self].
			"empate si lleg�s ac�".
		].
	
	jugadas removeAll.
	! !

a _ 0.!

a _ 0.!

2 odd.!

[
	2 odd ifTrue: [^1000].
] ensure: [].!

[
	(2 odd) ifTrue: [^1000].
]!

[
	(2 odd) ifTrue: [^1000].
] value.!

[100] value!

[100 even ifTrue:[50]] value.!

[100 even ifTrue:[^50]] value.!

[100 even ifTrue:[^50]] ensure:[a _ a +1].!

a!

a _ 0.!

a _ 0.!

a _ 0.!

a!

[	
	100 even ifTrue:[^50].
	a _ 100
] ensure:[a _ a +1].!

a!
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 19:19:01' prior: 50863666!
calcularGanadorDeJugada

	self jugaronTodos ifTrue:[ | carta1 carta2 |
			carta1 := (jugadas at: mano).
			carta2 := (jugadas at: pie).
			
			(carta1 mataA: carta2) ifTrue: [jugadorSiguiente := mano. ^self].
			(carta2 mataA: carta1) ifTrue: [jugadorSiguiente := pie. ^self].
			"empate si lleg�s ac�".
		]
	! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 19:19:08' prior: 50863691!
calcularGanadorDeJugada

	self jugaronTodos ifTrue: [ | carta1 carta2 |
			carta1 := (jugadas at: mano).
			carta2 := (jugadas at: pie).
			
			(carta1 mataA: carta2) ifTrue: [jugadorSiguiente := mano. ^self].
			(carta2 mataA: carta1) ifTrue: [jugadorSiguiente := pie. ^self].
			"empate si lleg�s ac�".
		]
	! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 19:19:21' prior: 50863704!
calcularGanadorDeJugada

	self jugaronTodos ifTrue: [ | carta1 carta2 |
			carta1 := (jugadas at: mano).
			carta2 := (jugadas at: pie).
			
			(carta1 mataA: carta2) ifTrue: [jugadorSiguiente := mano. ^self].
			(carta2 mataA: carta1) ifTrue: [jugadorSiguiente := pie. ^self].
			"empate si lleg�s ac�".
		]
	! !

b _ 0.!

a _ 0.!

b _ 0.!

[	
	100 even ifTrue:([^50] ensure:[b _ 10]).
	a _ 100
] ensure:[a _ a +1].
!

a.!

a.!

b.!
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 19:20:43' prior: 50863717!
calcularGanadorDeJugada

	self jugaronTodos ifTrue: ([ | carta1 carta2 |
			carta1 := (jugadas at: mano).
			carta2 := (jugadas at: pie).
			
			(carta1 mataA: carta2) ifTrue: [jugadorSiguiente := mano. ^self].
			(carta2 mataA: carta1) ifTrue: [jugadorSiguiente := pie. ^self].
			"empate si lleg�s ac�".
		] ensure: [jugadas removeAll])
	! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 19:20:45' prior: 50863734!
calcularGanadorDeJugada

	self jugaronTodos ifTrue: ([ | carta1 carta2 |
			carta1 := (jugadas at: mano).
			carta2 := (jugadas at: pie).
			
			(carta1 mataA: carta2) ifTrue: [jugadorSiguiente := mano. ^self].
			(carta2 mataA: carta1) ifTrue: [jugadorSiguiente := pie. ^self].
			"empate si lleg�s ac�".
		] ensure: [jugadas removeAll]).
	! !

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 19:21:44'!
FAILURE!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 19:21:54'!
FAILURE!

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 19:22:03'!
PASSED!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 19:22:05'!
FAILURE!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 19:22:05'!
FAILURE!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 19:22:10'!
FAILURE!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 19:22:10'!
FAILURE!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 19:22:16'!
FAILURE!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 19:22:34'!
FAILURE!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 19:22:34'!
FAILURE!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 19:22:43'!
FAILURE!

self jugaronTodos!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 19:23:31'!
FAILURE!

a _ 0.!

b _ 0.!

[	
	100 odd ifTrue:([^50] ensure:[b _ 10]).
	a _ 100
] ensure:[a _ a +1].!

a. !

b. !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 19:24:40' prior: 50863748!
calcularGanadorDeJugada

	self jugaronTodos ifTrue: ([ | carta1 carta2 |
			carta1 := (jugadas at: mano).
			carta2 := (jugadas at: pie).
			
			(carta1 mataA: carta2) ifTrue: [jugadorSiguiente := mano. jugadas removeAll. ^self].
			(carta2 mataA: carta1) ifTrue: [jugadorSiguiente := pie. jugadas removeAll. ^self].
			"empate si lleg�s ac�".
		] ensure: []).
	! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 19:24:46' prior: 50863816!
calcularGanadorDeJugada

	self jugaronTodos ifTrue: [ | carta1 carta2 |
			carta1 := (jugadas at: mano).
			carta2 := (jugadas at: pie).
			
			(carta1 mataA: carta2) ifTrue: [jugadorSiguiente := mano. jugadas removeAll. ^self].
			(carta2 mataA: carta1) ifTrue: [jugadorSiguiente := pie. jugadas removeAll. ^self].
			"empate si lleg�s ac�".
		].
	! !

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 19:24:51'!
PASSED!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 19:24:53'!
ERROR!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 19:24:53'!
FAILURE!

self jugaronTodos!

carta1 mataA: carta2!

carta2 mataA: carta1!

self jugaronTodos!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 19:28:15'!
FAILURE!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 19:28:17'!
PASSED!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'G.L.S 7/5/2021 19:28:49'!
Object subclass: #Ronda
	instanceVariableNames: 'mano pie jugadorSiguiente jugadas ganador'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'private' stamp: 'G.L.S 7/5/2021 19:28:47' prior: 50863658!
esperarAJugadorQueSigueA: aJugador 
	
	ganador isNil ifFalse: [
		(mano = aJugador) ifTrue: [jugadorSiguiente := pie. ^self].
		jugadorSiguiente := mano.
		].! !
!Ronda methodsFor: 'private' stamp: 'G.L.S 7/5/2021 19:29:57' prior: 50863879!
esperarAJugadorQueSigueA: aJugador 
	
	self jugaronTodos ifFalse: [
		(mano = aJugador) ifTrue: [jugadorSiguiente := pie. ^self].
		jugadorSiguiente := mano.
		].! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 19:30:10' prior: 50863556!
registrarJugador: aJugador jugada: aCartaDeTruco 
	
	self asegurarQueSeaElJugadorCorrecto: aJugador.
	
	jugadas add: aJugador -> aCartaDeTruco.
	
	self esperarAJugadorQueSigueA: aJugador.
	
	self calcularGanadorDeJugada.
	! !

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 19:30:14'!
PASSED!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 19:30:16'!
PASSED!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 19:30:17'!
PASSED!
!Ronda methodsFor: 'private' stamp: 'G.L.S 7/5/2021 19:33:33' prior: 50863887!
esperarAJugadorQueSigueA: aJugador 
	(mano = aJugador) ifTrue: [jugadorSiguiente := pie. ^self].
	jugadorSiguiente := mano.! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 19:33:56' prior: 50863831!
calcularGanadorDeJugada

	| carta1 carta2 |
	carta1 := (jugadas at: mano).
	carta2 := (jugadas at: pie).
			
	(carta1 mataA: carta2) ifTrue: [jugadorSiguiente := mano. jugadas removeAll. ^self].
	(carta2 mataA: carta1) ifTrue: [jugadorSiguiente := pie. jugadas removeAll. ^self].
	"empate si lleg�s ac�".
	! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 19:34:35' prior: 50863895!
registrarJugador: aJugador jugada: aCartaDeTruco 
	
	self asegurarQueSeaElJugadorCorrecto: aJugador.
	
	jugadas add: aJugador -> aCartaDeTruco.
	
	self jugaronTodos 
		ifTrue: [self calcularGanadorDeJugada.] 
		ifFalse:[self esperarAJugadorQueSigueA: aJugador.].
	
	
	! !

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 19:34:39'!
PASSED!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 19:34:41'!
PASSED!

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 19:34:42'!
PASSED!
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 19:36:30'!
test04SiEmpataronElJugadorQueGanoLaManoAnteriorEsElQueSigue

	Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: CartaDeTruco sieteDeEspada.
		jugador2 jugarCarta: CartaDeTruco anchoDeBasto.
		jugador1 jugarCarta: (CartaDeTruco bastoCon: 7).
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 19:36:45' prior: 50863960!
test04SiEmpataronElJugadorQueGanoLaManoAnteriorEsElQueSigue

	Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: CartaDeTruco sieteDeEspada.
		jugador2 jugarCarta: CartaDeTruco anchoDeBasto.
		
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 19:38:31' prior: 50863976!
test04SiEmpataronElJugadorQueGanoLaManoAnteriorEsElQueSigue

	Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: CartaDeTruco sieteDeEspada.
		jugador2 jugarCarta: CartaDeTruco anchoDeBasto.
		jugador2 jugarCarta: CartaDeTruco sieteDeOro.
		jugador1 jugarCarta: (CartaDeTruco bastoCon: 7).
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 19:38:58' prior: 50863991!
test04SiEmpataronElJugadorQueGanoLaManoAnteriorEsElQueSigue

	Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: CartaDeTruco sieteDeEspada.
		jugador2 jugarCarta: CartaDeTruco anchoDeBasto.
		jugador2 jugarCarta: CartaDeTruco sieteDeOro.
		jugador1 jugarCarta: (CartaDeTruco bastoCon: 7).
		jugador1 jugarCarta: CartaDeTruco anchoDeEspada.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !

!testRun: #RondaTest #test04SiEmpataronElJugadorQueGanoLaManoAnteriorEsElQueSigue stamp: 'G.L.S 7/5/2021 19:41:25'!
PASSED!

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 19:41:25'!
PASSED!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 19:41:25'!
PASSED!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 19:41:25'!
PASSED!

!testRun: #RondaTest #test04SiEmpataronElJugadorQueGanoLaManoAnteriorEsElQueSigue stamp: 'G.L.S 7/5/2021 19:41:25'!
PASSED!

!testRun: #RondaTest #test04SiEmpataronElJugadorQueGanoLaManoAnteriorEsElQueSigue stamp: 'G.L.S 7/5/2021 19:41:34'!
PASSED!

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 19:41:34'!
PASSED!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 19:41:34'!
PASSED!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 19:41:34'!
PASSED!

!testRun: #RondaTest #test04SiEmpataronElJugadorQueGanoLaManoAnteriorEsElQueSigue stamp: 'G.L.S 7/5/2021 19:41:34'!
PASSED!
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 19:43:30' prior: 50864009!
test04SiEmpataronElJugadorQueGanoLaManoAnteriorEsElQueSigue

	Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: CartaDeTruco sieteDeEspada.
		jugador2 jugarCarta: CartaDeTruco anchoDeBasto.
		jugador2 jugarCarta: CartaDeTruco sieteDeOro.
		jugador1 jugarCarta: (CartaDeTruco bastoCon: 7).
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !

!testRun: #RondaTest #test04SiEmpataronElJugadorQueGanoLaManoAnteriorEsElQueSigue stamp: 'G.L.S 7/5/2021 19:43:30'!
FAILURE!
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 19:43:41' prior: 50864069!
test04SiEmpataronElJugadorQueGanoLaManoAnteriorEsElQueSigue

	Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: CartaDeTruco sieteDeEspada.
		jugador2 jugarCarta: CartaDeTruco anchoDeBasto.
		jugador2 jugarCarta: CartaDeTruco sieteDeOro.
		jugador1 jugarCarta: (CartaDeTruco bastoCon: 7).
		jugador1 jugarCarta: CartaDeTruco anchoDeEspada.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !

!testRun: #RondaTest #test04SiEmpataronElJugadorQueGanoLaManoAnteriorEsElQueSigue stamp: 'G.L.S 7/5/2021 19:43:42'!
PASSED!

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 19:43:42'!
PASSED!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 19:43:42'!
PASSED!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 19:43:42'!
PASSED!

!testRun: #RondaTest #test04SiEmpataronElJugadorQueGanoLaManoAnteriorEsElQueSigue stamp: 'G.L.S 7/5/2021 19:43:42'!
PASSED!

carta1 mataA: carta2!

carta2 mataA: carta1!

!testRun: #RondaTest #test04SiEmpataronElJugadorQueGanoLaManoAnteriorEsElQueSigue stamp: 'G.L.S 7/5/2021 19:54:03'!
PASSED!
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 19:55:58' prior: 50863924!
calcularGanadorDeJugada

	| carta1 carta2 |
	carta1 := (jugadas at: mano).
	carta2 := (jugadas at: pie).
			
	(carta1 mataA: carta2) ifTrue: [jugadorSiguiente := mano. jugadas removeAll. ^self].
	(carta1 empardaCon: carta2) ifFalse: [jugadorSiguiente := pie. jugadas removeAll. ^self].
	"empate si lleg�s ac�".
	! !

CartaDeTruco!

CartaDeTruco anchoDeBasto empardaCon: CartaDeTruco anchoDeBasto!

CartaDeTruco anchoDeBasto empardaCon: CartaDeTruco anchoDeBasto.!

CartaDeTruco anchoDeBasto mataA: CartaDeTruco anchoDeBasto.!

CartaDeTruco anchoDeBasto mataA: CartaDeTruco anchoDeEspada.!

CartaDeTruco anchoDeBasto empardaCon: CartaDeTruco anchoDeEspada.!
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 19:57:37' prior: 50863167!
test01SoloLaManoPuedeEmpezarLaPrimeraJugada

	Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador2 jugarCarta: (CartaDeTruco oroCon: 3).
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 19:57:38'!
PASSED!

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 19:57:38'!
PASSED!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 19:57:38'!
PASSED!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 19:57:38'!
PASSED!

!testRun: #RondaTest #test04SiEmpataronElJugadorQueGanoLaManoAnteriorEsElQueSigue stamp: 'G.L.S 7/5/2021 19:57:38'!
PASSED!
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 19:57:52' prior: 50863331!
test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento

	Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: (CartaDeTruco espadaCon: 3).
		jugador1 jugarCarta: CartaDeTruco anchoDeEspada.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 19:58:40' prior: 50864091!
test04SiEmpataronElJugadorQueGanoLaManoAnteriorEsElQueSigue

	Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: CartaDeTruco sieteDeEspada.
		jugador2 jugarCarta: CartaDeTruco anchoDeBasto.
		jugador2 jugarCarta: (CartaDeTruco oroCon: 3).
		jugador1 jugarCarta: (CartaDeTruco bastoCon: 7).
		jugador1 jugarCarta: CartaDeTruco anchoDeEspada.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 19:59:06' prior: 50864207!
test04SiEmpataronElJugadorQueGanoLaManoAnteriorEsElQueSigue

	Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: (CartaDeTruco bastoCon: 7).
		jugador2 jugarCarta: CartaDeTruco anchoDeBasto.
		jugador2 jugarCarta: (CartaDeTruco oroCon: 3).
		jugador1 jugarCarta: (CartaDeTruco espadaCon: 3).
		jugador1 jugarCarta: CartaDeTruco anchoDeEspada.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !

!testRun: #RondaTest #test04SiEmpataronElJugadorQueGanoLaManoAnteriorEsElQueSigue stamp: 'G.L.S 7/5/2021 19:59:09'!
FAILURE!

!testRun: #RondaTest #test04SiEmpataronElJugadorQueGanoLaManoAnteriorEsElQueSigue stamp: 'G.L.S 7/5/2021 19:59:56'!
FAILURE!

jugador1 = jugador2!

!testRun: #RondaTest #test04SiEmpataronElJugadorQueGanoLaManoAnteriorEsElQueSigue stamp: 'G.L.S 7/5/2021 20:00:50'!
FAILURE!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'G.L.S 7/5/2021 20:01:55'!
Object subclass: #Ronda
	instanceVariableNames: 'mano pie jugadorSiguiente jugadas ganador ganadorAnterior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 20:01:53' prior: 50864136!
calcularGanadorDeJugada

	| carta1 carta2 |
	carta1 := (jugadas at: mano).
	carta2 := (jugadas at: pie).
			
	(carta1 mataA: carta2) ifTrue: [jugadorSiguiente := mano. jugadas removeAll. ^self].
	(carta1 empardaCon: carta2) ifFalse: [jugadorSiguiente := pie. jugadas removeAll. ^self].
	
	jugadorSiguiente := ganadorAnterior. 
	jugadas removeAll. 
	! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 20:01:57' prior: 50864268!
calcularGanadorDeJugada

	| carta1 carta2 |
	carta1 := (jugadas at: mano).
	carta2 := (jugadas at: pie).
			
	(carta1 mataA: carta2) ifTrue: [jugadorSiguiente := mano. jugadas removeAll. ^self].
	(carta1 empardaCon: carta2) ifFalse: [jugadorSiguiente := pie. jugadas removeAll. ^self].
	
	jugadorSiguiente := ganadorAnterior.
	jugadas removeAll. 
	! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 20:02:35' prior: 50864282!
calcularGanadorDeJugada

	| carta1 carta2 |
	carta1 := (jugadas at: mano).
	carta2 := (jugadas at: pie).
			
	(carta1 mataA: carta2) ifTrue: [jugadorSiguiente := mano. jugadas removeAll. ^self].
	(carta1 empardaCon: carta2) ifFalse: [jugadorSiguiente := pie. jugadas removeAll. ^self].
	
	jugadorSiguiente := ganadorAnterior ifNil: [mano] ifNotNil: ganadorAnterior.
	jugadas removeAll. 
	! !

3 ifNil:[2] ifNotNil:[5]!

c _ 3 ifNil:[2] ifNotNil:[5].!

c!

Object subclass: #Ronda
	instanceVariableNames: 'mano pie jugadorSiguiente jugadas ganadorAnterior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'G.L.S 7/5/2021 20:03:28'!
Object subclass: #Ronda
	instanceVariableNames: 'mano pie jugadorSiguiente jugadas ganadorAnterior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'initialization' stamp: 'G.L.S 7/5/2021 20:03:40' prior: 50863566!
initializeWithMano: unJugador pie: otroJugador

	mano := unJugador.
	pie := otroJugador.
	
	mano rondaActual: self.
	pie rondaActual: self.
	
	jugadorSiguiente  := mano.
	jugadas := Dictionary new.
	
	ganadorAnterior := nil.! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 20:04:12' prior: 50864296!
calcularGanadorDeJugada

	| carta1 carta2 |
	carta1 := (jugadas at: mano).
	carta2 := (jugadas at: pie).
			
	(carta1 mataA: carta2) ifTrue: [self ganoLaMano. ^self].
	(carta1 empardaCon: carta2) ifFalse: [jugadorSiguiente := pie. jugadas removeAll. ^self].
	
	jugadorSiguiente := ganadorAnterior ifNil: [mano] ifNotNil: ganadorAnterior.
	jugadas removeAll. 
	! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 20:04:30' prior: 50864338!
calcularGanadorDeJugada

	| carta1 carta2 |
	carta1 := (jugadas at: mano).
	carta2 := (jugadas at: pie).
			
	(carta1 mataA: carta2) ifTrue: [^self ganoLaMano].
	(carta1 empardaCon: carta2) ifFalse: [jugadorSiguiente := pie. jugadas removeAll. ^self].
	
	jugadorSiguiente := ganadorAnterior ifNil: [mano] ifNotNil: ganadorAnterior.
	jugadas removeAll. 
	! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 20:04:40'!
ganoLaMano

	jugadorSiguiente := mano. jugadas removeAll! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 20:04:43' prior: 50864367!
ganoLaMano

	jugadorSiguiente := mano. 
	jugadas removeAll! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 20:04:47' prior: 50864372!
ganoLaMano

	jugadorSiguiente := mano. 
	jugadas removeAll.! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 20:05:09' prior: 50864353!
calcularGanadorDeJugada

	| carta1 carta2 |
	carta1 := (jugadas at: mano).
	carta2 := (jugadas at: pie).
			
	(carta1 mataA: carta2) ifTrue: [^self ganoLaMano].
	(carta1 empardaCon: carta2) ifFalse: [^self ganoElPie].
	
	jugadorSiguiente := ganadorAnterior ifNil: [mano] ifNotNil: ganadorAnterior.
	jugadas removeAll. 
	! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 20:05:19'!
ganoElPie

	jugadorSiguiente := pie. 
	jugadas removeAll.
	! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 20:05:46' prior: 50864382!
calcularGanadorDeJugada

	| carta1 carta2 |
	carta1 := (jugadas at: mano).
	carta2 := (jugadas at: pie).
			
	(carta1 mataA: carta2) ifTrue: [^self ganoLaMano].
	(carta1 empardaCon: carta2) ifFalse: [^self ganoElPie].
	
	self empataronElEnfrentamiento.
	! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 20:05:53'!
empataronElEnfrentamiento
	
	jugadorSiguiente := ganadorAnterior ifNil: [mano] ifNotNil: ganadorAnterior.
	jugadas removeAll. 
	! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 20:05:56' prior: 50864411!
empataronElEnfrentamiento
	
	jugadorSiguiente := ganadorAnterior ifNil: [mano] ifNotNil: ganadorAnterior.
	jugadas removeAll.
	! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 20:06:07' prior: 50864418!
empataronElEnfrentamiento
	
	jugadorSiguiente := self ganadorAnterior.
	jugadas removeAll.
	! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 20:06:17'!
ganadorAnterior

	^ganadorAnterior ifNil: [mano] ifNotNil: ganadorAnterior
	! !

!testRun: #RondaTest #test04SiEmpataronElJugadorQueGanoLaManoAnteriorEsElQueSigue stamp: 'G.L.S 7/5/2021 20:07:02'!
FAILURE!

!testRun: #RondaTest #test04SiEmpataronElJugadorQueGanoLaManoAnteriorEsElQueSigue stamp: 'G.L.S 7/5/2021 20:07:02'!
FAILURE!

carta1 mataA: carta2!

carta1 empardaCon: carta2!

!testRun: #RondaTest #test04SiEmpataronElJugadorQueGanoLaManoAnteriorEsElQueSigue stamp: 'G.L.S 7/5/2021 20:08:13'!
FAILURE!

!testRun: #RondaTest #test04SiEmpataronElJugadorQueGanoLaManoAnteriorEsElQueSigue stamp: 'G.L.S 7/5/2021 20:08:15'!
PASSED!
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 20:08:24' prior: 50864395!
ganoElPie

	jugadorSiguiente := pie. 
	ganadorAnterior := pie.
	jugadas removeAll.
	! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 20:08:30' prior: 50864454!
ganoElPie

	jugadorSiguiente := pie. 
	ganadorAnterior := pie.
	
	jugadas removeAll.
	! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 20:08:39' prior: 50864377!
ganoLaMano

	jugadorSiguiente := mano.
	ganadorAnterior := mano.
	
	jugadas removeAll.! !

!testRun: #RondaTest #test04SiEmpataronElJugadorQueGanoLaManoAnteriorEsElQueSigue stamp: 'G.L.S 7/5/2021 20:08:43'!
PASSED!

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 20:08:46'!
PASSED!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 20:08:46'!
PASSED!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 20:08:46'!
PASSED!

!testRun: #RondaTest #test04SiEmpataronElJugadorQueGanoLaManoAnteriorEsElQueSigue stamp: 'G.L.S 7/5/2021 20:08:46'!
PASSED!
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 20:09:50'!
test05

	Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: (CartaDeTruco bastoCon: 7).
		jugador2 jugarCarta: CartaDeTruco anchoDeBasto.
		jugador2 jugarCarta: (CartaDeTruco oroCon: 3).
		jugador1 jugarCarta: (CartaDeTruco espadaCon: 3).
		jugador1 jugarCarta: CartaDeTruco anchoDeEspada.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 20:10:05' prior: 50864492!
test05

	Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: (CartaDeTruco espadaCon: 3).
		jugador2 jugarCarta: (CartaDeTruco oroCon: 3).
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 20:10:14' prior: 50864510!
test05

	Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: (CartaDeTruco espadaCon: 3).
		jugador2 jugarCarta: (CartaDeTruco oroCon: 3).
		jugador2 jugarCarta: CartaDeTruco anchoDeBasto.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !

!testRun: #RondaTest #test05 stamp: 'G.L.S 7/5/2021 20:10:14'!
PASSED!

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 20:10:14'!
PASSED!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 20:10:14'!
PASSED!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 20:10:14'!
PASSED!

!testRun: #RondaTest #test04SiEmpataronElJugadorQueGanoLaManoAnteriorEsElQueSigue stamp: 'G.L.S 7/5/2021 20:10:14'!
PASSED!

!testRun: #RondaTest #test05 stamp: 'G.L.S 7/5/2021 20:10:14'!
PASSED!
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 20:11:55' prior: 50864523!
test05

	Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: (CartaDeTruco bastoCon: 7).
		jugador2 jugarCarta: CartaDeTruco anchoDeBasto.
		jugador2 jugarCarta: (CartaDeTruco oroCon: 3).
		jugador1 jugarCarta: (CartaDeTruco espadaCon: 3).
		jugador2 jugarCarta: (CartaDeTruco espadaCon: 3).
		jugador1 jugarCarta: CartaDeTruco anchoDeEspada.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 20:14:48'!
test05ElGanadorDeLaRondaEsElCorrecto

	| ronda |
	ronda := Ronda mano: jugador1 pie: jugador2.
	
	jugador1 jugarCarta: (CartaDeTruco bastoCon: 7).
	jugador2 jugarCarta: CartaDeTruco anchoDeBasto.
	jugador2 jugarCarta: (CartaDeTruco oroCon: 3).
	jugador1 jugarCarta: (CartaDeTruco espadaCon: 3).
	jugador2 jugarCarta: (CartaDeTruco espadaCon: 3).
	jugador1 jugarCarta: CartaDeTruco anchoDeEspada.
	
	self assert: jugador1 equals: ronda ganador.! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 20:14:55' prior: 50864577!
test05ElGanadorDeLaRondaEsElCorrecto

	| ronda |
	
	ronda := Ronda mano: jugador1 pie: jugador2.
	
	jugador1 jugarCarta: (CartaDeTruco bastoCon: 7).
	jugador2 jugarCarta: CartaDeTruco anchoDeBasto.
	jugador2 jugarCarta: (CartaDeTruco oroCon: 3).
	jugador1 jugarCarta: (CartaDeTruco espadaCon: 3).
	jugador2 jugarCarta: (CartaDeTruco espadaCon: 3).
	jugador1 jugarCarta: CartaDeTruco anchoDeEspada.
	
	self assert: jugador1 equals: ronda ganador.! !

!methodRemoval: RondaTest #test05 stamp: 'G.L.S 7/5/2021 20:15:10'!
test05

	Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: (CartaDeTruco bastoCon: 7).
		jugador2 jugarCarta: CartaDeTruco anchoDeBasto.
		jugador2 jugarCarta: (CartaDeTruco oroCon: 3).
		jugador1 jugarCarta: (CartaDeTruco espadaCon: 3).
		jugador2 jugarCarta: (CartaDeTruco espadaCon: 3).
		jugador1 jugarCarta: CartaDeTruco anchoDeEspada.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].!

!testRun: #RondaTest #test05ElGanadorDeLaRondaEsElCorrecto stamp: 'G.L.S 7/5/2021 20:15:15'!
ERROR!
!Ronda methodsFor: 'ganador' stamp: 'G.L.S 7/5/2021 20:15:26'!
ganador
	self shouldBeImplemented.! !

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'G.L.S 7/5/2021 20:15:49'!
Object subclass: #Ronda
	instanceVariableNames: 'mano pie jugadorSiguiente jugadas ganadorAnterior ganador'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'ganador' stamp: 'G.L.S 7/5/2021 20:15:46' prior: 50864632!
ganador
	^ ganador.! !

!testRun: #RondaTest #test05ElGanadorDeLaRondaEsElCorrecto stamp: 'G.L.S 7/5/2021 20:15:54'!
FAILURE!
!Ronda methodsFor: 'initialization' stamp: 'G.L.S 7/5/2021 20:17:21' prior: 50864328!
initializeWithMano: unJugador pie: otroJugador

	mano := unJugador.
	pie := otroJugador.
	
	mano rondaActual: self.
	pie rondaActual: self.
	
	jugadorSiguiente  := mano.
	jugadas := Dictionary new.
	
	ganadorAnterior := nil.! !
!Ronda methodsFor: 'ganador' stamp: 'G.L.S 7/5/2021 20:20:26' prior: 50864645!
ganador
	""! !

Object subclass: #Ronda
	instanceVariableNames: 'mano pie jugadorSiguiente jugadas ganadorAnterior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'G.L.S 7/5/2021 20:20:32'!
Object subclass: #Ronda
	instanceVariableNames: 'mano pie jugadorSiguiente jugadas ganadorAnterior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'G.L.S 7/5/2021 20:21:07'!
Object subclass: #Ronda
	instanceVariableNames: 'mano pie jugadorSiguiente jugadas ganadorAnterior victoriasMano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'G.L.S 7/5/2021 20:21:08'!
Object subclass: #Ronda
	instanceVariableNames: 'mano pie jugadorSiguiente jugadas ganadorAnterior victoriasMano victoriasPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'initialization' stamp: 'G.L.S 7/5/2021 20:20:57' prior: 50864652!
initializeWithMano: unJugador pie: otroJugador

	mano := unJugador.
	pie := otroJugador.
	
	mano rondaActual: self.
	pie rondaActual: self.
	
	victoriasMano := 0.
	victoriasPie := 0.
	
	jugadorSiguiente  := mano.
	jugadas := Dictionary new.
	
	ganadorAnterior := nil.! !
!Ronda methodsFor: 'ganador' stamp: 'G.L.S 7/5/2021 20:23:26' prior: 50864662!
ganador
	victoriasMano = 2 ifTrue:[^mano].
	victoriasPie = 2 ifTrue:[^pie].! !
!Ronda methodsFor: 'ganador' stamp: 'G.L.S 7/5/2021 20:23:35' prior: 50864710!
ganador
	victoriasMano = 2 ifTrue:[^mano].
	victoriasPie = 2 ifTrue:[^pie].
	
	"Posible error ac�".! !
!Ronda methodsFor: 'ganador' stamp: 'G.L.S 7/5/2021 20:23:38' prior: 50864715!
ganador

	victoriasMano = 2 ifTrue:[^mano].
	victoriasPie = 2 ifTrue:[^pie].
	
	"Posible error ac�".! !
!Ronda methodsFor: 'ganador' stamp: 'G.L.S 7/5/2021 20:23:49' prior: 50864721!
ganador

	(victoriasMano = 2) ifTrue:[^mano].
	(victoriasPie = 2) ifTrue:[^pie].
	
	"Posible error ac�".! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 20:24:15' prior: 50864460!
ganoElPie

	jugadorSiguiente := pie. 
	ganadorAnterior := pie.
	victoriasPie := victoriasPie + 1.
	
	jugadas removeAll.
	! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 20:24:26' prior: 50864466!
ganoLaMano

	jugadorSiguiente := mano.
	ganadorAnterior := mano.
	victoriasMano := victoriasMano + 1.
	
	jugadas removeAll.! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 20:30:10' prior: 50864227!
test04SiEmpataronElJugadorQueGanoLaManoAnteriorEsElQueSigue

	Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: (CartaDeTruco espadaCon: 3).
		jugador2 jugarCarta: (CartaDeTruco oroCon: 3).
		jugador2 jugarCarta: CartaDeTruco anchoDeBasto.
		jugador1 jugarCarta: (CartaDeTruco bastoCon: 7).
		jugador1 jugarCarta: CartaDeTruco anchoDeEspada.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 20:30:15' prior: 50864748!
test04SiEmpataronElJugadorQueGanoLaManoAnteriorEsElQueSigue

	Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: (CartaDeTruco espadaCon: 3).
		jugador2 jugarCarta: (CartaDeTruco oroCon: 3).
		jugador2 jugarCarta: CartaDeTruco anchoDeBasto.
		jugador1 jugarCarta: (CartaDeTruco bastoCon: 7).
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 20:30:18' prior: 50864768!
test04SiEmpataronElJugadorQueGanoLaManoAnteriorEsElQueSigue

	Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: (CartaDeTruco espadaCon: 3).
		jugador2 jugarCarta: (CartaDeTruco oroCon: 3).
		jugador2 jugarCarta: CartaDeTruco anchoDeBasto.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 20:30:42'!
test04SiEmpataronLaPrimerRondaLaManoEsLaQueSigue

	Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: (CartaDeTruco espadaCon: 3).
		jugador2 jugarCarta: (CartaDeTruco oroCon: 3).
		jugador2 jugarCarta: CartaDeTruco anchoDeBasto.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !

!methodRemoval: RondaTest #test04SiEmpataronElJugadorQueGanoLaManoAnteriorEsElQueSigue stamp: 'G.L.S 7/5/2021 20:30:43'!
test04SiEmpataronElJugadorQueGanoLaManoAnteriorEsElQueSigue

	Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: (CartaDeTruco espadaCon: 3).
		jugador2 jugarCarta: (CartaDeTruco oroCon: 3).
		jugador2 jugarCarta: CartaDeTruco anchoDeBasto.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].!

!testRun: #RondaTest #test04SiEmpataronLaPrimerRondaLaManoEsLaQueSigue stamp: 'G.L.S 7/5/2021 20:30:47'!
PASSED!

!methodRemoval: RondaTest #test05ElGanadorDeLaRondaEsElCorrecto stamp: 'G.L.S 7/5/2021 20:31:28'!
test05ElGanadorDeLaRondaEsElCorrecto

	| ronda |
	
	ronda := Ronda mano: jugador1 pie: jugador2.
	
	jugador1 jugarCarta: (CartaDeTruco bastoCon: 7).
	jugador2 jugarCarta: CartaDeTruco anchoDeBasto.
	jugador2 jugarCarta: (CartaDeTruco oroCon: 3).
	jugador1 jugarCarta: (CartaDeTruco espadaCon: 3).
	jugador2 jugarCarta: (CartaDeTruco espadaCon: 3).
	jugador1 jugarCarta: CartaDeTruco anchoDeEspada.
	
	self assert: jugador1 equals: ronda ganador.!

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 20:31:33'!
PASSED!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 20:31:33'!
PASSED!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 20:31:33'!
PASSED!

!testRun: #RondaTest #test04SiEmpataronLaPrimerRondaLaManoEsLaQueSigue stamp: 'G.L.S 7/5/2021 20:31:33'!
PASSED!
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 20:31:51' prior: 50864425!
empataronElEnfrentamiento
	
	jugadorSiguiente := mano.
	jugadas removeAll.
	! !

!methodRemoval: Ronda #ganadorAnterior stamp: 'G.L.S 7/5/2021 20:32:09'!
ganadorAnterior

	^ganadorAnterior ifNil: [mano] ifNotNil: ganadorAnterior
	!

Object subclass: #Ronda
	instanceVariableNames: 'mano pie jugadorSiguiente jugadas victoriasMano victoriasPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'G.L.S 7/5/2021 20:32:17'!
Object subclass: #Ronda
	instanceVariableNames: 'mano pie jugadorSiguiente jugadas victoriasMano victoriasPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'initialization' stamp: 'G.L.S 7/5/2021 20:32:26' prior: 50864699!
initializeWithMano: unJugador pie: otroJugador

	mano := unJugador.
	pie := otroJugador.
	
	mano rondaActual: self.
	pie rondaActual: self.
	
	victoriasMano := 0.
	victoriasPie := 0.
	
	jugadorSiguiente  := mano.
	jugadas := Dictionary new.! !

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 20:32:29'!
PASSED!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 20:32:29'!
PASSED!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 20:32:29'!
PASSED!

!testRun: #RondaTest #test04SiEmpataronLaPrimerRondaLaManoEsLaQueSigue stamp: 'G.L.S 7/5/2021 20:32:29'!
PASSED!
!RondaTest methodsFor: 'setUp/tearDown' stamp: 'G.L.S 7/5/2021 20:33:34' prior: 50862964 overrides: 16927572!
setUp

	jugador1  := Jugador conMano: {CartaDeTruco anchoDeEspada. CartaDeTruco espadaCon: 3. CartaDeTruco bastoCon: 7.}.
	jugador2 := Jugador conMano: {}.! !
!RondaTest methodsFor: 'setUp/tearDown' stamp: 'G.L.S 7/5/2021 20:34:05' prior: 50864925 overrides: 16927572!
setUp

	jugador1  := Jugador conMano: {CartaDeTruco anchoDeEspada. CartaDeTruco espadaCon: 3. CartaDeTruco bastoCon: 7.}.
	jugador2 := Jugador conMano: {CartaDeTruco anchoDeBasto. CartaDeTruco espadaCon: 5. CartaDeTruco oroCon: 3.}.! !

!classDefinition: #RondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'G.L.S 7/5/2021 20:36:05'!
TestCase subclass: #RondaTest
	instanceVariableNames: 'jugador1 jugador2 jugadorQueVaAPerder'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaTest methodsFor: 'setUp/tearDown' stamp: 'G.L.S 7/5/2021 20:36:03' prior: 50864934 overrides: 16927572!
setUp

	jugador1  := Jugador conMano: {CartaDeTruco anchoDeEspada. CartaDeTruco espadaCon: 3. CartaDeTruco bastoCon: 7.}.
	jugador2 := Jugador conMano: {CartaDeTruco anchoDeBasto. CartaDeTruco espadaCon: 5. CartaDeTruco oroCon: 3.}.
	
	jugadorQueVaAPerder := Jugador conMano: {}.! !

!classDefinition: #RondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'G.L.S 7/5/2021 20:36:21'!
TestCase subclass: #RondaTest
	instanceVariableNames: 'jugador1 jugador2 jugadorQueVaAPerder jugadorQueVaAGanar'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaTest methodsFor: 'setUp/tearDown' stamp: 'G.L.S 7/5/2021 20:36:20' prior: 50864954 overrides: 16927572!
setUp

	jugador1  := Jugador conMano: {CartaDeTruco anchoDeEspada. CartaDeTruco espadaCon: 3. CartaDeTruco bastoCon: 7.}.
	jugador2 := Jugador conMano: {CartaDeTruco anchoDeBasto. CartaDeTruco espadaCon: 5. CartaDeTruco oroCon: 3.}.
	
	jugadorQueVaAPerder := Jugador conMano: {}.
	jugadorQueVaAGanar := Jugador conMano: {}.! !
!RondaTest methodsFor: 'setUp/tearDown' stamp: 'G.L.S 7/5/2021 20:36:49' prior: 50864976 overrides: 16927572!
setUp

	jugador1  := Jugador conMano: {CartaDeTruco anchoDeEspada. CartaDeTruco espadaCon: 3. CartaDeTruco bastoCon: 7.}.
	jugador2 := Jugador conMano: {CartaDeTruco anchoDeBasto. CartaDeTruco espadaCon: 5. CartaDeTruco oroCon: 3.}.
	
	jugadorQueVaAPerder := Jugador conMano: {}.
	jugadorQueVaAGanar := Jugador conMano: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. }.! !
!RondaTest methodsFor: 'setUp/tearDown' stamp: 'G.L.S 7/5/2021 20:37:22' prior: 50864990 overrides: 16927572!
setUp

	jugador1  := Jugador conMano: {CartaDeTruco anchoDeEspada. CartaDeTruco espadaCon: 3. CartaDeTruco bastoCon: 7.}.
	jugador2 := Jugador conMano: {CartaDeTruco anchoDeBasto. CartaDeTruco espadaCon: 5. CartaDeTruco oroCon: 3.}.
	
	jugadorQueVaAPerder := Jugador conMano: {}.
	jugadorQueVaAGanar := Jugador conMano: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada}.! !
!RondaTest methodsFor: 'setUp/tearDown' stamp: 'G.L.S 7/5/2021 20:38:19' prior: 50865006 overrides: 16927572!
setUp

	jugador1  := Jugador conMano: {CartaDeTruco anchoDeEspada. CartaDeTruco espadaCon: 3. CartaDeTruco bastoCon: 7.}.
	jugador2 := Jugador conMano: {CartaDeTruco anchoDeBasto. CartaDeTruco espadaCon: 5. CartaDeTruco oroCon: 3.}.
	
	jugadorQueVaAPerder := Jugador conMano: {CartaDeTruco espadaCon: 2. CartaDeTruco oroCon: 2. CartaDeTruco bastoCon: 2.}.
	jugadorQueVaAGanar := Jugador conMano: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada}.! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 20:39:10'!
test05ElGanadorDeLaRondaEsElCorrecto

	Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: (CartaDeTruco espadaCon: 3).
		jugador2 jugarCarta: (CartaDeTruco oroCon: 3).
		jugador2 jugarCarta: CartaDeTruco anchoDeBasto.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !

!classDefinition: #RondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'G.L.S 7/5/2021 20:40:38'!
TestCase subclass: #RondaTest
	instanceVariableNames: 'jugador1 jugador2 jugadorQueVaAPerder jugadorQueVaAGanar ronda'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 20:40:35' prior: 50865041!
test05ElGanadorDeLaRondaEsElCorrecto

	ronda := Ronda mano: jugadorQueVaAPerder pie: jugadorQueVaAGanar.
	
	jugadorQueVaAPerder jugarCarta:  
	jugadorQueVaAGanar jugarCarta: 
	jugadorQueVaAGanar jugarCarta: 
	jugadorQueVaAPerder jugarCarta:  
	
	self assert: jugadorQueVaAGanar equals: ronda ganador.! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 20:40:47' prior: 50865066!
test05ElGanadorDeLaRondaEsElCorrecto

	ronda := Ronda mano: jugadorQueVaAPerder pie: jugadorQueVaAGanar.
	
	jugadorQueVaAPerder jugarCarta:   
	jugadorQueVaAGanar jugarCarta: 
	jugadorQueVaAGanar jugarCarta: 
	jugadorQueVaAPerder jugarCarta:  
	
	self assert: jugadorQueVaAGanar equals: ronda ganador.! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 20:41:01' prior: 50865079!
test05ElGanadorDeLaRondaEsElCorrecto

	"jugadorQueVaAPerder := Jugador conMano: {CartaDeTruco espadaCon: 2. CartaDeTruco oroCon: 2. CartaDeTruco bastoCon: 2.}.
	jugadorQueVaAGanar := Jugador conMano: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada}."

	ronda := Ronda mano: jugadorQueVaAPerder pie: jugadorQueVaAGanar.
	
	jugadorQueVaAPerder jugarCarta:   
	jugadorQueVaAGanar jugarCarta: 
	jugadorQueVaAGanar jugarCarta: 
	jugadorQueVaAPerder jugarCarta:  
	
	self assert: jugadorQueVaAGanar equals: ronda ganador.! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 20:41:49' prior: 50865092!
test05ElGanadorDeLaRondaEsElCorrecto

	"jugadorQueVaAPerder := Jugador conMano: {CartaDeTruco espadaCon: 2. CartaDeTruco oroCon: 2. CartaDeTruco bastoCon: 2.}.
	jugadorQueVaAGanar := Jugador conMano: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada}."

	ronda := Ronda mano: jugadorQueVaAPerder pie: jugadorQueVaAGanar.
	
	jugadorQueVaAPerder jugarCarta: (CartaDeTruco espadaCon: 2).
	jugadorQueVaAGanar jugarCarta: CartaDeTruco anchoDeBasto.
	jugadorQueVaAGanar jugarCarta: CartaDeTruco anchoDeEspada.
	jugadorQueVaAPerder jugarCarta: (CartaDeTruco oroCon: 2).
	
	self assert: jugadorQueVaAGanar equals: ronda ganador.! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 20:41:55' prior: 50865112!
test05ElGanadorDeLaRondaEsElCorrecto

	ronda := Ronda mano: jugadorQueVaAPerder pie: jugadorQueVaAGanar.
	
	jugadorQueVaAPerder jugarCarta: (CartaDeTruco espadaCon: 2).
	jugadorQueVaAGanar jugarCarta: CartaDeTruco anchoDeBasto.
	jugadorQueVaAGanar jugarCarta: CartaDeTruco anchoDeEspada.
	jugadorQueVaAPerder jugarCarta: (CartaDeTruco oroCon: 2).
	
	self assert: jugadorQueVaAGanar equals: ronda ganador.! !

!testRun: #RondaTest #test05ElGanadorDeLaRondaEsElCorrecto stamp: 'G.L.S 7/5/2021 20:42:19'!
PASSED!

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 20:42:19'!
PASSED!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 20:42:19'!
PASSED!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 20:42:19'!
PASSED!

!testRun: #RondaTest #test04SiEmpataronLaPrimerRondaLaManoEsLaQueSigue stamp: 'G.L.S 7/5/2021 20:42:19'!
PASSED!

!testRun: #RondaTest #test05ElGanadorDeLaRondaEsElCorrecto stamp: 'G.L.S 7/5/2021 20:42:19'!
PASSED!
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 20:43:19' prior: 50864741!
ganoLaMano

	jugadorSiguiente := mano.
	victoriasMano := victoriasMano + 1.
	
	jugadas removeAll.! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 20:43:24' prior: 50864734!
ganoElPie

	jugadorSiguiente := pie.
	victoriasPie := victoriasPie + 1.
	
	jugadas removeAll.
	! !

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 20:43:29'!
PASSED!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 20:43:29'!
PASSED!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 20:43:29'!
PASSED!

!testRun: #RondaTest #test04SiEmpataronLaPrimerRondaLaManoEsLaQueSigue stamp: 'G.L.S 7/5/2021 20:43:29'!
PASSED!

!testRun: #RondaTest #test05ElGanadorDeLaRondaEsElCorrecto stamp: 'G.L.S 7/5/2021 20:43:29'!
PASSED!
!RondaTest methodsFor: 'setUp/tearDown' stamp: 'G.L.S 7/5/2021 20:44:12' prior: 50865023 overrides: 16927572!
setUp

	jugador1  := Jugador conMano: {CartaDeTruco anchoDeEspada. CartaDeTruco espadaCon: 3. CartaDeTruco bastoCon: 7.}.
	jugador2 := Jugador conMano: {CartaDeTruco anchoDeBasto. CartaDeTruco espadaCon: 5. CartaDeTruco oroCon: 3.}.
	
	jugadorQueVaAPerder := Jugador conMano: {CartaDeTruco espadaCon: 2. CartaDeTruco oroCon: 2. CartaDeTruco sieteDeEspada}.
	jugadorQueVaAGanar := Jugador conMano: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco bastoCon: 2}.! !

!testRun: #RondaTest #test05ElGanadorDeLaRondaEsElCorrecto stamp: 'G.L.S 7/5/2021 20:44:21'!
PASSED!

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 20:44:21'!
PASSED!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 20:44:21'!
PASSED!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 20:44:21'!
PASSED!

!testRun: #RondaTest #test04SiEmpataronLaPrimerRondaLaManoEsLaQueSigue stamp: 'G.L.S 7/5/2021 20:44:21'!
PASSED!

!testRun: #RondaTest #test05ElGanadorDeLaRondaEsElCorrecto stamp: 'G.L.S 7/5/2021 20:44:21'!
PASSED!
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 20:45:32' prior: 50865136!
test05ElGanadorDeLaRondaEsElCorrecto

	ronda := Ronda mano: jugadorQueVaAPerder pie: jugadorQueVaAGanar.
	
	jugadorQueVaAPerder jugarCarta: (CartaDeTruco sieteDeEspada).
	jugadorQueVaAGanar jugarCarta: (CartaDeTruco bastoCon: 2).
	jugadorQueVaAPerder jugarCarta: (CartaDeTruco espadaCon: 2).
	jugadorQueVaAGanar jugarCarta: CartaDeTruco anchoDeBasto.
	jugadorQueVaAGanar jugarCarta: CartaDeTruco anchoDeEspada.
	jugadorQueVaAPerder jugarCarta: (CartaDeTruco oroCon: 2).
	
	self assert: jugadorQueVaAGanar equals: ronda ganador.! !

!testRun: #RondaTest #test05ElGanadorDeLaRondaEsElCorrecto stamp: 'G.L.S 7/5/2021 20:45:33'!
PASSED!

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 20:45:33'!
PASSED!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 20:45:33'!
PASSED!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 20:45:33'!
PASSED!

!testRun: #RondaTest #test04SiEmpataronLaPrimerRondaLaManoEsLaQueSigue stamp: 'G.L.S 7/5/2021 20:45:33'!
PASSED!

!testRun: #RondaTest #test05ElGanadorDeLaRondaEsElCorrecto stamp: 'G.L.S 7/5/2021 20:45:33'!
PASSED!
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 20:46:06'!
test06NoSePuedeSeguirJugandoUnaVezQueSeDecidioElGanador

	ronda := Ronda mano: jugadorQueVaAPerder pie: jugadorQueVaAGanar.
	
	jugadorQueVaAPerder jugarCarta: (CartaDeTruco sieteDeEspada).
	jugadorQueVaAGanar jugarCarta: (CartaDeTruco bastoCon: 2).
	jugadorQueVaAPerder jugarCarta: (CartaDeTruco espadaCon: 2).
	jugadorQueVaAGanar jugarCarta: CartaDeTruco anchoDeBasto.
	jugadorQueVaAGanar jugarCarta: CartaDeTruco anchoDeEspada.
	jugadorQueVaAPerder jugarCarta: (CartaDeTruco oroCon: 2).
	
	self assert: jugadorQueVaAGanar equals: ronda ganador.! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 20:46:40' prior: 50865287!
test06NoSePuedeSeguirJugandoUnaVezQueSeDecidioElGanador

	ronda := Ronda mano: jugadorQueVaAPerder pie: jugadorQueVaAGanar.
	
	jugadorQueVaAPerder jugarCarta: (CartaDeTruco espadaCon: 2).
	jugadorQueVaAGanar jugarCarta: CartaDeTruco anchoDeBasto.
	jugadorQueVaAGanar jugarCarta: CartaDeTruco anchoDeEspada.
	jugadorQueVaAPerder jugarCarta: (CartaDeTruco oroCon: 2).
	
	jugadorQueVaAGanar jugarCarta: (CartaDeTruco bastoCon: 2).
	
	self assert: jugadorQueVaAGanar equals: ronda ganador.! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 20:47:07' prior: 50865307!
test06NoSePuedeSeguirJugandoUnaVezQueSeDecidioElGanador

	ronda := Ronda mano: jugadorQueVaAPerder pie: jugadorQueVaAGanar.
	
	jugadorQueVaAPerder jugarCarta: (CartaDeTruco espadaCon: 2).
	jugadorQueVaAGanar jugarCarta: CartaDeTruco anchoDeBasto.
	jugadorQueVaAGanar jugarCarta: CartaDeTruco anchoDeEspada.
	jugadorQueVaAPerder jugarCarta: (CartaDeTruco oroCon: 2).
	
	self should: [
		jugadorQueVaAGanar jugarCarta: (CartaDeTruco bastoCon: 2).
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLaRondaYaTermino.
			].! !

!testRun: #RondaTest #test06NoSePuedeSeguirJugandoUnaVezQueSeDecidioElGanador stamp: 'G.L.S 7/5/2021 20:47:10'!
FAILURE!
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 20:47:43' prior: 50863937!
registrarJugador: aJugador jugada: aCartaDeTruco 
	
	self asegurarQueLaRondaNoHayaTerminado.
	self asegurarQueSeaElJugadorCorrecto: aJugador.
	
	jugadas add: aJugador -> aCartaDeTruco.
	
	self jugaronTodos 
		ifTrue: [self calcularGanadorDeJugada.] 
		ifFalse:[self esperarAJugadorQueSigueA: aJugador.].
	
	
	! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 20:47:50'!
asegurarQueLaRondaNoHayaTerminado

	! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 20:48:56' prior: 50865364!
asegurarQueLaRondaNoHayaTerminado

	((victoriasMano = 2) or: [(victoriasPie = 2)]) ifTrue: [].

	! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 20:49:26' prior: 50865368!
asegurarQueLaRondaNoHayaTerminado

	((victoriasMano = 2) or: [(victoriasPie = 2)]) ifTrue: [self error: self class ].

	! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 20:49:39' prior: 50865374!
asegurarQueLaRondaNoHayaTerminado

	((victoriasMano = 2) or: [(victoriasPie = 2)]) ifTrue: [self error: self class errorLaRondaYaTermino].

	! !

!testRun: #RondaTest #test06NoSePuedeSeguirJugandoUnaVezQueSeDecidioElGanador stamp: 'G.L.S 7/5/2021 20:49:42'!
ERROR!

!testRun: #RondaTest #test06NoSePuedeSeguirJugandoUnaVezQueSeDecidioElGanador stamp: 'G.L.S 7/5/2021 20:49:42'!
ERROR!
!Ronda class methodsFor: 'errors' stamp: 'G.L.S 7/5/2021 20:49:53'!
errorLaRondaYaTermino
	self shouldBeImplemented.! !
!Ronda class methodsFor: 'errors' stamp: 'G.L.S 7/5/2021 20:50:15' prior: 50865396!
errorLaRondaYaTermino
	^'Error - La ronda ya termin�, no se pueden realizar m�s jugadas'.! !

!testRun: #RondaTest #test06NoSePuedeSeguirJugandoUnaVezQueSeDecidioElGanador stamp: 'G.L.S 7/5/2021 20:50:17'!
PASSED!

!testRun: #RondaTest #test06NoSePuedeSeguirJugandoUnaVezQueSeDecidioElGanador stamp: 'G.L.S 7/5/2021 20:50:20'!
PASSED!

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 20:50:22'!
PASSED!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 20:50:22'!
PASSED!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 20:50:22'!
PASSED!

!testRun: #RondaTest #test04SiEmpataronLaPrimerRondaLaManoEsLaQueSigue stamp: 'G.L.S 7/5/2021 20:50:22'!
PASSED!

!testRun: #RondaTest #test05ElGanadorDeLaRondaEsElCorrecto stamp: 'G.L.S 7/5/2021 20:50:22'!
PASSED!

!testRun: #RondaTest #test06NoSePuedeSeguirJugandoUnaVezQueSeDecidioElGanador stamp: 'G.L.S 7/5/2021 20:50:22'!
PASSED!
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 20:50:49' prior: 50865325!
test06NoSePuedeSeguirJugandoUnaVezQueSeDecidioElGanador

	ronda := Ronda mano: jugadorQueVaAPerder pie: jugadorQueVaAGanar.
	
	jugadorQueVaAPerder jugarCarta: (CartaDeTruco espadaCon: 2).
	jugadorQueVaAGanar jugarCarta: CartaDeTruco anchoDeBasto.
	jugadorQueVaAGanar jugarCarta: CartaDeTruco anchoDeEspada.
	jugadorQueVaAPerder jugarCarta: (CartaDeTruco oroCon: 2).
	
	self assert: jugadorQueVaAGanar equals: ronda ganador.
	
	self should: [
		jugadorQueVaAGanar jugarCarta: (CartaDeTruco bastoCon: 2).
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLaRondaYaTermino.
			].! !

!testRun: #RondaTest #test06NoSePuedeSeguirJugandoUnaVezQueSeDecidioElGanador stamp: 'G.L.S 7/5/2021 20:50:54'!
PASSED!

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 20:50:54'!
PASSED!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 20:50:54'!
PASSED!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 20:50:54'!
PASSED!

!testRun: #RondaTest #test04SiEmpataronLaPrimerRondaLaManoEsLaQueSigue stamp: 'G.L.S 7/5/2021 20:50:54'!
PASSED!

!testRun: #RondaTest #test05ElGanadorDeLaRondaEsElCorrecto stamp: 'G.L.S 7/5/2021 20:50:54'!
PASSED!

!testRun: #RondaTest #test06NoSePuedeSeguirJugandoUnaVezQueSeDecidioElGanador stamp: 'G.L.S 7/5/2021 20:50:54'!
PASSED!
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 20:51:39'!
test07LuegoDeUnEmpateElGanadorDelSiguienteEnfrentamientoGanaLaRonda

	ronda := Ronda mano: jugadorQueVaAPerder pie: jugadorQueVaAGanar.
	
	jugadorQueVaAPerder jugarCarta: (CartaDeTruco espadaCon: 2).
	jugadorQueVaAGanar jugarCarta: CartaDeTruco anchoDeBasto.
	jugadorQueVaAGanar jugarCarta: CartaDeTruco anchoDeEspada.
	jugadorQueVaAPerder jugarCarta: (CartaDeTruco oroCon: 2).
	
	self assert: jugadorQueVaAGanar equals: ronda ganador.
	
	self should: [
		jugadorQueVaAGanar jugarCarta: (CartaDeTruco bastoCon: 2).
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLaRondaYaTermino.
			].! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 20:51:58' prior: 50865487!
test07LuegoDeUnEmpateElGanadorDelSiguienteEnfrentamientoGanaLaRonda

	ronda := Ronda mano: jugador1 pie: jugador2.
	
	jugadorQueVaAPerder jugarCarta: (CartaDeTruco espadaCon: 2).
	jugadorQueVaAGanar jugarCarta: CartaDeTruco anchoDeBasto.
	jugadorQueVaAGanar jugarCarta: CartaDeTruco anchoDeEspada.
	jugadorQueVaAPerder jugarCarta: (CartaDeTruco oroCon: 2).
	
	self assert: jugadorQueVaAGanar equals: ronda ganador.
	
	self should: [
		jugadorQueVaAGanar jugarCarta: (CartaDeTruco bastoCon: 2).
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLaRondaYaTermino.
			].! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 20:52:33' prior: 50865511!
test07LuegoDeUnEmpateElGanadorDelSiguienteEnfrentamientoGanaLaRonda

	ronda := Ronda mano: jugador1 pie: jugador2.
	
	jugador1 jugarCarta: (CartaDeTruco espadaCon: 3).
	jugador2 jugarCarta: (CartaDeTruco oroCon: 3).
	jugador1 jugarCarta: CartaDeTruco anchoDeEspada.
	jugador2 jugarCarta: CartaDeTruco anchoDeBasto.
	
	self assert: jugadorQueVaAGanar equals: ronda ganador.
	
	self should: [
		jugadorQueVaAGanar jugarCarta: (CartaDeTruco bastoCon: 2).
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLaRondaYaTermino.
			].! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 20:52:38' prior: 50865534!
test07LuegoDeUnEmpateElGanadorDelSiguienteEnfrentamientoGanaLaRonda

	ronda := Ronda mano: jugador1 pie: jugador2.
	
	jugador1 jugarCarta: (CartaDeTruco espadaCon: 3).
	jugador2 jugarCarta: (CartaDeTruco oroCon: 3).
	jugador1 jugarCarta: CartaDeTruco anchoDeEspada.
	jugador2 jugarCarta: CartaDeTruco anchoDeBasto.
	
	self assert: jugadorQueVaAGanar equals: ronda ganador.! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 20:52:48' prior: 50865556!
test07LuegoDeUnEmpateElGanadorDelSiguienteEnfrentamientoGanaLaRonda

	ronda := Ronda mano: jugador1 pie: jugador2.
	
	jugador1 jugarCarta: (CartaDeTruco espadaCon: 3).
	jugador2 jugarCarta: (CartaDeTruco oroCon: 3).
	jugador1 jugarCarta: CartaDeTruco anchoDeEspada.
	jugador2 jugarCarta: CartaDeTruco anchoDeBasto.
	
	self assert: jugador1 equals: ronda ganador.! !

!testRun: #RondaTest #test07LuegoDeUnEmpateElGanadorDelSiguienteEnfrentamientoGanaLaRonda stamp: 'G.L.S 7/5/2021 20:52:52'!
FAILURE!
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 20:53:16' prior: 50864872!
empataronElEnfrentamiento
	
	jugadorSiguiente := mano.
	victoriasPie := victoriasPie + 1.
	
	
	jugadas removeAll.
	! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 20:53:23' prior: 50865590!
empataronElEnfrentamiento
	
	jugadorSiguiente := mano.
	victoriasPie := victoriasPie + 1.
	victoriasMano := victoriasMano + 1.
	
	jugadas removeAll.
	! !

!testRun: #RondaTest #test07LuegoDeUnEmpateElGanadorDelSiguienteEnfrentamientoGanaLaRonda stamp: 'G.L.S 7/5/2021 20:53:26'!
PASSED!

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 20:53:28'!
PASSED!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 20:53:29'!
PASSED!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 20:53:29'!
PASSED!

!testRun: #RondaTest #test04SiEmpataronLaPrimerRondaLaManoEsLaQueSigue stamp: 'G.L.S 7/5/2021 20:53:29'!
PASSED!

!testRun: #RondaTest #test05ElGanadorDeLaRondaEsElCorrecto stamp: 'G.L.S 7/5/2021 20:53:29'!
PASSED!

!testRun: #RondaTest #test06NoSePuedeSeguirJugandoUnaVezQueSeDecidioElGanador stamp: 'G.L.S 7/5/2021 20:53:29'!
PASSED!

!testRun: #RondaTest #test07LuegoDeUnEmpateElGanadorDelSiguienteEnfrentamientoGanaLaRonda stamp: 'G.L.S 7/5/2021 20:53:29'!
PASSED!
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 20:54:32'!
test08LosJugadoresDebenTenerLaMismaCantidadDeCartasAlIniciarLaRonda

	
	ronda := Ronda mano: jugador1 pie: jugador2.! !

!classDefinition: #RondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'G.L.S 7/5/2021 20:55:05'!
TestCase subclass: #RondaTest
	instanceVariableNames: 'jugador1 jugador2 jugadorQueVaAPerder jugadorQueVaAGanar ronda jugadorSinCartas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaTest methodsFor: 'setUp/tearDown' stamp: 'G.L.S 7/5/2021 20:55:03' prior: 50865206 overrides: 16927572!
setUp

	jugador1  := Jugador conMano: {CartaDeTruco anchoDeEspada. CartaDeTruco espadaCon: 3. CartaDeTruco bastoCon: 7.}.
	jugador2 := Jugador conMano: {CartaDeTruco anchoDeBasto. CartaDeTruco espadaCon: 5. CartaDeTruco oroCon: 3.}.
	
	jugadorQueVaAPerder := Jugador conMano: {CartaDeTruco espadaCon: 2. CartaDeTruco oroCon: 2. CartaDeTruco sieteDeEspada}.
	jugadorQueVaAGanar := Jugador conMano: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco bastoCon: 2}.
	
	jugadorSinCartas  := Jugador conMano: {}.! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 20:55:23' prior: 50865636!
test08LosJugadoresDebenTenerLaMismaCantidadDeCartasAlIniciarLaRonda

	
	Ronda mano: jugadorSinCartas pie: jugador2.! !

TestCase subclass: #RondaTest
	instanceVariableNames: 'jugador1 jugador2 jugadorQueVaAPerder jugadorQueVaAGanar jugadorSinCartas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'G.L.S 7/5/2021 20:55:36'!
TestCase subclass: #RondaTest
	instanceVariableNames: 'jugador1 jugador2 jugadorQueVaAPerder jugadorQueVaAGanar jugadorSinCartas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 20:55:56' prior: 50865246!
test05ElGanadorDeLaRondaEsElCorrecto
	
	| ronda |
	
	ronda := Ronda mano: jugadorQueVaAPerder pie: jugadorQueVaAGanar.
	
	jugadorQueVaAPerder jugarCarta: (CartaDeTruco sieteDeEspada).
	jugadorQueVaAGanar jugarCarta: (CartaDeTruco bastoCon: 2).
	jugadorQueVaAPerder jugarCarta: (CartaDeTruco espadaCon: 2).
	jugadorQueVaAGanar jugarCarta: CartaDeTruco anchoDeBasto.
	jugadorQueVaAGanar jugarCarta: CartaDeTruco anchoDeEspada.
	jugadorQueVaAPerder jugarCarta: (CartaDeTruco oroCon: 2).
	
	self assert: jugadorQueVaAGanar equals: ronda ganador.! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 20:56:00' prior: 50865437!
test06NoSePuedeSeguirJugandoUnaVezQueSeDecidioElGanador
	| ronda |
	
	ronda := Ronda mano: jugadorQueVaAPerder pie: jugadorQueVaAGanar.
	
	jugadorQueVaAPerder jugarCarta: (CartaDeTruco espadaCon: 2).
	jugadorQueVaAGanar jugarCarta: CartaDeTruco anchoDeBasto.
	jugadorQueVaAGanar jugarCarta: CartaDeTruco anchoDeEspada.
	jugadorQueVaAPerder jugarCarta: (CartaDeTruco oroCon: 2).
	
	self assert: jugadorQueVaAGanar equals: ronda ganador.
	
	self should: [
		jugadorQueVaAGanar jugarCarta: (CartaDeTruco bastoCon: 2).
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLaRondaYaTermino.
			].! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 20:56:07' prior: 50865571!
test07LuegoDeUnEmpateElGanadorDelSiguienteEnfrentamientoGanaLaRonda
	
	| ronda |
	
	ronda := Ronda mano: jugador1 pie: jugador2.
	
	jugador1 jugarCarta: (CartaDeTruco espadaCon: 3).
	jugador2 jugarCarta: (CartaDeTruco oroCon: 3).
	jugador1 jugarCarta: CartaDeTruco anchoDeEspada.
	jugador2 jugarCarta: CartaDeTruco anchoDeBasto.
	
	self assert: jugador1 equals: ronda ganador.! !

!testRun: #RondaTest #test08LosJugadoresDebenTenerLaMismaCantidadDeCartasAlIniciarLaRonda stamp: 'G.L.S 7/5/2021 20:56:11'!
PASSED!

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 20:56:11'!
PASSED!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 20:56:11'!
PASSED!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 20:56:11'!
PASSED!

!testRun: #RondaTest #test04SiEmpataronLaPrimerRondaLaManoEsLaQueSigue stamp: 'G.L.S 7/5/2021 20:56:11'!
PASSED!

!testRun: #RondaTest #test05ElGanadorDeLaRondaEsElCorrecto stamp: 'G.L.S 7/5/2021 20:56:11'!
PASSED!

!testRun: #RondaTest #test06NoSePuedeSeguirJugandoUnaVezQueSeDecidioElGanador stamp: 'G.L.S 7/5/2021 20:56:11'!
PASSED!

!testRun: #RondaTest #test07LuegoDeUnEmpateElGanadorDelSiguienteEnfrentamientoGanaLaRonda stamp: 'G.L.S 7/5/2021 20:56:11'!
PASSED!

!testRun: #RondaTest #test08LosJugadoresDebenTenerLaMismaCantidadDeCartasAlIniciarLaRonda stamp: 'G.L.S 7/5/2021 20:56:11'!
PASSED!
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 20:57:28' prior: 50865674!
test08LosJugadoresDebenTenerLaMismaCantidadDeCartasAlIniciarLaRonda

	self should: [
		Ronda mano: jugadorSinCartas pie: jugador2.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLosJugadoresNoEmpezaronConTresCartas.
			]! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 20:58:11' prior: 50865791!
test08LosJugadoresDebenTenerLaMismaCantidadDeCartasAlIniciarLaRonda

	self should: [
		Ronda mano: jugadorSinCartas pie: jugador2.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLosJugadoresNoEmpezaronConTresCartas.
			].
		
	self should: [
		Ronda mano: jugador1 pie: jugadorSinCartas.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLosJugadoresNoEmpezaronConTresCartas.
			].! !

!classDefinition: #RondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'G.L.S 7/5/2021 20:59:33'!
TestCase subclass: #RondaTest
	instanceVariableNames: 'jugador1 jugador2 jugadorQueVaAPerder jugadorQueVaAGanar jugadorSinCartas jugadorQueHaceTrampa'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaTest methodsFor: 'setUp/tearDown' stamp: 'G.L.S 7/5/2021 20:59:31' prior: 50865654 overrides: 16927572!
setUp

	jugador1  := Jugador conMano: {CartaDeTruco anchoDeEspada. CartaDeTruco espadaCon: 3. CartaDeTruco bastoCon: 7.}.
	jugador2 := Jugador conMano: {CartaDeTruco anchoDeBasto. CartaDeTruco espadaCon: 5. CartaDeTruco oroCon: 3.}.
	
	jugadorQueVaAPerder := Jugador conMano: {CartaDeTruco espadaCon: 2. CartaDeTruco oroCon: 2. CartaDeTruco sieteDeEspada}.
	jugadorQueVaAGanar := Jugador conMano: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco bastoCon: 2}.
	
	jugadorSinCartas  := Jugador conMano: {}.
	jugadorQueHaceTrampa := Jugador conMano: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco bastoCon: 2. 
											CartaDeTruco anchoDeEspada. CartaDeTruco espadaCon: 3. CartaDeTruco bastoCon: 7.}! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 21:00:14' prior: 50865803!
test08LosJugadoresDebenTenerLaMismaCantidadDeCartasAlIniciarLaRonda

	self should: [
		Ronda mano: jugadorSinCartas pie: jugador2.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLosJugadoresNoEmpezaronConTresCartas.
			].
		
	self should: [
		Ronda mano: jugador1 pie: jugadorSinCartas.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLosJugadoresNoEmpezaronConTresCartas.
			].
	
	self should: [
		Ronda mano: jugadorQueHaceTrampa pie: jugador2.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLosJugadoresNoEmpezaronConTresCartas.
			].
	
	self should: [
		Ronda mano: jugador1 pie: jugadorQueHaceTrampa.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLosJugadoresNoEmpezaronConTresCartas.
			].! !

!testRun: #RondaTest #test08LosJugadoresDebenTenerLaMismaCantidadDeCartasAlIniciarLaRonda stamp: 'G.L.S 7/5/2021 21:00:23'!
FAILURE!

----QUIT----(5 July 2021 21:01:24) CuisUniversity-4532.image priorSource: 16885703!

----STARTUP---- (5 July 2021 21:01:27) as /media/Datos/Cuis/PARA PARCIAL 2/linux64/CuisUniversity-4532.image!


!testRun: #RondaTest #test08LosJugadoresDebenTenerLaMismaCantidadDeCartasAlIniciarLaRonda stamp: 'G.L.S 7/5/2021 21:01:40'!
FAILURE!
!Ronda methodsFor: 'initialization' stamp: 'G.L.S 7/5/2021 21:02:36' prior: 50864898!
initializeWithMano: unJugador pie: otroJugador

	self assertJugadorTieneLaCantidadCorrectaDeCartas: unJugador.
	self assertJugadorTieneLaCantidadCorrectaDeCartas: otroJugador.

	mano := unJugador.
	pie := otroJugador.
	
	mano rondaActual: self.
	pie rondaActual: self.
	
	victoriasMano := 0.
	victoriasPie := 0.
	
	jugadorSiguiente  := mano.
	jugadas := Dictionary new.! !
!Ronda methodsFor: 'initialization' stamp: 'G.L.S 7/5/2021 21:04:18'!
assertJugadorTieneLaCantidadCorrectaDeCartas: unJugador

	(unJugador tieneActualmente: 3) ifFalse: [self error: self class].
! !
!Ronda methodsFor: 'private' stamp: 'G.L.S 7/5/2021 21:04:43' prior: 50865923!
assertJugadorTieneLaCantidadCorrectaDeCartas: unJugador

	(unJugador tieneActualmente: 3) ifFalse: [self error: self class errorLosJugadoresNoEmpezaronConTresCartas].
! !

!testRun: #RondaTest #test08LosJugadoresDebenTenerLaMismaCantidadDeCartasAlIniciarLaRonda stamp: 'G.L.S 7/5/2021 21:04:46'!
ERROR!

!testRun: #RondaTest #test08LosJugadoresDebenTenerLaMismaCantidadDeCartasAlIniciarLaRonda stamp: 'G.L.S 7/5/2021 21:04:46'!
ERROR!
!Jugador methodsFor: 'mano' stamp: 'G.L.S 7/5/2021 21:04:59'!
tieneActualmente: aSmallInteger 
	self shouldBeImplemented.! !
!Jugador methodsFor: 'mano' stamp: 'G.L.S 7/5/2021 21:05:16' prior: 50865946!
tieneActualmente: unaCantidad
	^manoActual size = unaCantidad.! !

!testRun: #RondaTest #test08LosJugadoresDebenTenerLaMismaCantidadDeCartasAlIniciarLaRonda stamp: 'G.L.S 7/5/2021 21:05:21'!
ERROR!
!Ronda class methodsFor: 'errors' stamp: 'G.L.S 7/5/2021 21:05:34'!
errorLosJugadoresNoEmpezaronConTresCartas
	self shouldBeImplemented.! !
!Ronda class methodsFor: 'errors' stamp: 'G.L.S 7/5/2021 21:06:02' prior: 50865960!
errorLosJugadoresNoEmpezaronConTresCartas
	^'Error - Alg�n jugador no tiene exactamente 3 cartas en mano'.! !

!testRun: #RondaTest #test08LosJugadoresDebenTenerLaMismaCantidadDeCartasAlIniciarLaRonda stamp: 'G.L.S 7/5/2021 21:06:04'!
PASSED!

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 21:06:06'!
PASSED!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 21:06:06'!
PASSED!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 21:06:06'!
PASSED!

!testRun: #RondaTest #test04SiEmpataronLaPrimerRondaLaManoEsLaQueSigue stamp: 'G.L.S 7/5/2021 21:06:06'!
PASSED!

!testRun: #RondaTest #test05ElGanadorDeLaRondaEsElCorrecto stamp: 'G.L.S 7/5/2021 21:06:06'!
PASSED!

!testRun: #RondaTest #test06NoSePuedeSeguirJugandoUnaVezQueSeDecidioElGanador stamp: 'G.L.S 7/5/2021 21:06:06'!
PASSED!

!testRun: #RondaTest #test07LuegoDeUnEmpateElGanadorDelSiguienteEnfrentamientoGanaLaRonda stamp: 'G.L.S 7/5/2021 21:06:06'!
PASSED!

!testRun: #RondaTest #test08LosJugadoresDebenTenerLaMismaCantidadDeCartasAlIniciarLaRonda stamp: 'G.L.S 7/5/2021 21:06:06'!
PASSED!
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 21:07:22'!
test09LosJugadoresNoCompartenCartasEntreSi

	self should: [
		Ronda mano: jugadorSinCartas pie: jugador2.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLosJugadoresNoEmpezaronConTresCartas.
			].
		
	self should: [
		Ronda mano: jugador1 pie: jugadorSinCartas.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLosJugadoresNoEmpezaronConTresCartas.
			].
	
	self should: [
		Ronda mano: jugadorQueHaceTrampa pie: jugador2.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLosJugadoresNoEmpezaronConTresCartas.
			].
	
	self should: [
		Ronda mano: jugador1 pie: jugadorQueHaceTrampa.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLosJugadoresNoEmpezaronConTresCartas.
			].! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 21:07:33' prior: 50866006!
test09LosJugadoresNoCompartenCartasEntreSi

	self should: [
		Ronda mano: jugadorSinCartas pie: jugador2.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLosJugadoresNoEmpezaronConTresCartas.
			].! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 21:07:45'!
test09LosJugadoresNoPuedenCompartirCartasEntreSi

	self should: [
		Ronda mano: jugadorSinCartas pie: jugador2.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLosJugadoresNoEmpezaronConTresCartas.
			].! !

!methodRemoval: RondaTest #test09LosJugadoresNoCompartenCartasEntreSi stamp: 'G.L.S 7/5/2021 21:07:45'!
test09LosJugadoresNoCompartenCartasEntreSi

	self should: [
		Ronda mano: jugadorSinCartas pie: jugador2.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLosJugadoresNoEmpezaronConTresCartas.
			].!
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 21:07:59' prior: 50866051!
test09LosJugadoresNoPuedenCompartirCartasEntreSi

	self should: [
		Ronda mano: jugadorSinCartas pie: jugador2.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLosJugadoresTienenCartasIguales.
			].! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 21:08:23' prior: 50866075!
test09LosJugadoresNoPuedenCompartirCartasEntreSi

	self should: [
		Ronda mano: jugadorQueHaceTrampa pie: jugador2.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLosJugadoresTienenCartasIguales.
			].
		
	self should: [
		Ronda mano: jugador2 pie: jugadorQueHaceTrampa.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLosJugadoresTienenCartasIguales.
			].! !

!testRun: #RondaTest #test09LosJugadoresNoPuedenCompartirCartasEntreSi stamp: 'G.L.S 7/5/2021 21:08:41'!
ERROR!
!Ronda class methodsFor: 'errors' stamp: 'G.L.S 7/5/2021 21:08:51'!
errorLosJugadoresTienenCartasIguales
	self shouldBeImplemented.! !
!Ronda class methodsFor: 'errors' stamp: 'G.L.S 7/5/2021 21:09:09' prior: 50866109!
errorLosJugadoresTienenCartasIguales
	^'Error - Los jugadores tienen la misma carta'.! !

!testRun: #RondaTest #test09LosJugadoresNoPuedenCompartirCartasEntreSi stamp: 'G.L.S 7/5/2021 21:09:11'!
FAILURE!
!Ronda methodsFor: 'initialization' stamp: 'G.L.S 7/5/2021 21:09:49' prior: 50865909!
initializeWithMano: unJugador pie: otroJugador

	self assertJugadorTieneLaCantidadCorrectaDeCartas: unJugador.
	self assertJugadorTieneLaCantidadCorrectaDeCartas: otroJugador.
	
	self assertJugador: unJugador noComparteCartasCon: otroJugador.

	mano := unJugador.
	pie := otroJugador.
	
	mano rondaActual: self.
	pie rondaActual: self.
	
	victoriasMano := 0.
	victoriasPie := 0.
	
	jugadorSiguiente  := mano.
	jugadas := Dictionary new.! !
!Ronda methodsFor: 'initialization' stamp: 'G.L.S 7/5/2021 21:10:03'!
assertJugador: unJugador noComparteCartasCon: otroJugador! !
!Ronda methodsFor: 'initialization' stamp: 'G.L.S 7/5/2021 21:10:05' prior: 50866140!
assertJugador: unJugador noComparteCartasCon: otroJugador

	! !
!Ronda methodsFor: 'initialization' stamp: 'G.L.S 7/5/2021 21:11:28' prior: 50866145!
assertJugador: unJugador noComparteCartasCon: otroJugador

	(unJugador comparteCartasCon: otroJugador) ifTrue: [self error: self class errorLosJugadoresTienenCartasIguales].! !

!testRun: #RondaTest #test09LosJugadoresNoPuedenCompartirCartasEntreSi stamp: 'G.L.S 7/5/2021 21:11:34'!
FAILURE!

!testRun: #RondaTest #test09LosJugadoresNoPuedenCompartirCartasEntreSi stamp: 'G.L.S 7/5/2021 21:11:34'!
FAILURE!
!Jugador methodsFor: 'nil' stamp: 'G.L.S 7/5/2021 21:11:59'!
comparteCartasCon: unJugador

	! !
!Jugador methodsFor: 'as yet unclassified' stamp: 'G.L.S 7/5/2021 21:12:56' prior: 50866165!
comparteCartasCon: unJugador
	
	| comparte |
	comparte := false.
	
	manoActual do: [:carta |
		(unJugador tiene: carta) ifTrue:[comparte := true].
		].
	
	^comparte! !
!Jugador methodsFor: 'as yet unclassified' stamp: 'G.L.S 7/5/2021 21:13:11'!
tiene: unaCarta

	! !
!Jugador methodsFor: 'as yet unclassified' stamp: 'G.L.S 7/5/2021 21:13:19' prior: 50866177!
tiene: unaCarta

	manoActual includes: unaCarta.! !
!Jugador methodsFor: 'as yet unclassified' stamp: 'G.L.S 7/5/2021 21:13:22' prior: 50866181!
tiene: unaCarta

	^manoActual includes: unaCarta.! !

!testRun: #RondaTest #test09LosJugadoresNoPuedenCompartirCartasEntreSi stamp: 'G.L.S 7/5/2021 21:13:42'!
FAILURE!

!testRun: #RondaTest #test09LosJugadoresNoPuedenCompartirCartasEntreSi stamp: 'G.L.S 7/5/2021 21:13:42'!
FAILURE!

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 21:13:47'!
PASSED!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 21:13:47'!
PASSED!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 21:13:47'!
PASSED!

!testRun: #RondaTest #test04SiEmpataronLaPrimerRondaLaManoEsLaQueSigue stamp: 'G.L.S 7/5/2021 21:13:47'!
PASSED!

!testRun: #RondaTest #test05ElGanadorDeLaRondaEsElCorrecto stamp: 'G.L.S 7/5/2021 21:13:47'!
PASSED!

!testRun: #RondaTest #test06NoSePuedeSeguirJugandoUnaVezQueSeDecidioElGanador stamp: 'G.L.S 7/5/2021 21:13:47'!
PASSED!

!testRun: #RondaTest #test07LuegoDeUnEmpateElGanadorDelSiguienteEnfrentamientoGanaLaRonda stamp: 'G.L.S 7/5/2021 21:13:47'!
PASSED!

!testRun: #RondaTest #test08LosJugadoresDebenTenerLaMismaCantidadDeCartasAlIniciarLaRonda stamp: 'G.L.S 7/5/2021 21:13:47'!
PASSED!

!testRun: #RondaTest #test09LosJugadoresNoPuedenCompartirCartasEntreSi stamp: 'G.L.S 7/5/2021 21:13:47'!
FAILURE!

!testRun: #RondaTest #test09LosJugadoresNoPuedenCompartirCartasEntreSi stamp: 'G.L.S 7/5/2021 21:13:47'!
FAILURE!

!classDefinition: #RondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'G.L.S 7/5/2021 21:15:29'!
TestCase subclass: #RondaTest
	instanceVariableNames: 'jugador1 jugador2 jugadorQueVaAPerder jugadorQueVaAGanar jugadorSinCartas jugadorQueHaceTrampa otroJugadorQueHaceTrampa'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaTest methodsFor: 'setUp/tearDown' stamp: 'G.L.S 7/5/2021 21:15:26' prior: 50865834 overrides: 16927572!
setUp

	jugador1  := Jugador conMano: {CartaDeTruco anchoDeEspada. CartaDeTruco espadaCon: 3. CartaDeTruco bastoCon: 7.}.
	jugador2 := Jugador conMano: {CartaDeTruco anchoDeBasto. CartaDeTruco espadaCon: 5. CartaDeTruco oroCon: 3.}.
	
	jugadorQueVaAPerder := Jugador conMano: {CartaDeTruco espadaCon: 2. CartaDeTruco oroCon: 2. CartaDeTruco sieteDeEspada}.
	jugadorQueVaAGanar := Jugador conMano: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco bastoCon: 2}.
	
	jugadorSinCartas  := Jugador conMano: {}.
	jugadorQueHaceTrampa := Jugador conMano: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco bastoCon: 2. 
											CartaDeTruco anchoDeEspada. CartaDeTruco espadaCon: 3. CartaDeTruco bastoCon: 7.}.
											
	otroJugadorQueHaceTrampa := Jugador conMano: {CartaDeTruco anchoDeEspada. CartaDeTruco anchoDeBasto. CartaDeTruco bastoCon: 7.}! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 21:15:47' prior: 50866087!
test09LosJugadoresNoPuedenCompartirCartasEntreSi

	self should: [
		Ronda mano: otroJugadorQueHaceTrampa pie: jugador2.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLosJugadoresTienenCartasIguales.
			].
		
	self should: [
		Ronda mano: jugador2 pie: otroJugadorQueHaceTrampa.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLosJugadoresTienenCartasIguales.
			].! !

!testRun: #RondaTest #test09LosJugadoresNoPuedenCompartirCartasEntreSi stamp: 'G.L.S 7/5/2021 21:15:48'!
PASSED!

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 21:15:48'!
PASSED!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 21:15:48'!
PASSED!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 21:15:48'!
PASSED!

!testRun: #RondaTest #test04SiEmpataronLaPrimerRondaLaManoEsLaQueSigue stamp: 'G.L.S 7/5/2021 21:15:48'!
PASSED!

!testRun: #RondaTest #test05ElGanadorDeLaRondaEsElCorrecto stamp: 'G.L.S 7/5/2021 21:15:48'!
PASSED!

!testRun: #RondaTest #test06NoSePuedeSeguirJugandoUnaVezQueSeDecidioElGanador stamp: 'G.L.S 7/5/2021 21:15:48'!
PASSED!

!testRun: #RondaTest #test07LuegoDeUnEmpateElGanadorDelSiguienteEnfrentamientoGanaLaRonda stamp: 'G.L.S 7/5/2021 21:15:48'!
PASSED!

!testRun: #RondaTest #test08LosJugadoresDebenTenerLaMismaCantidadDeCartasAlIniciarLaRonda stamp: 'G.L.S 7/5/2021 21:15:48'!
PASSED!

!testRun: #RondaTest #test09LosJugadoresNoPuedenCompartirCartasEntreSi stamp: 'G.L.S 7/5/2021 21:15:48'!
PASSED!
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 21:18:44'!
test08LosJugadoresDebenTenerTresCartasAlIniciarLaRonda

	self should: [
		Ronda mano: jugadorSinCartas pie: jugador2.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLosJugadoresNoEmpezaronConTresCartas.
			].
		
	self should: [
		Ronda mano: jugador1 pie: jugadorSinCartas.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLosJugadoresNoEmpezaronConTresCartas.
			].
	
	self should: [
		Ronda mano: jugadorQueHaceTrampa pie: jugador2.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLosJugadoresNoEmpezaronConTresCartas.
			].
	
	self should: [
		Ronda mano: jugador1 pie: jugadorQueHaceTrampa.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLosJugadoresNoEmpezaronConTresCartas.
			].! !

!methodRemoval: RondaTest #test08LosJugadoresDebenTenerLaMismaCantidadDeCartasAlIniciarLaRonda stamp: 'G.L.S 7/5/2021 21:18:44'!
test08LosJugadoresDebenTenerLaMismaCantidadDeCartasAlIniciarLaRonda

	self should: [
		Ronda mano: jugadorSinCartas pie: jugador2.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLosJugadoresNoEmpezaronConTresCartas.
			].
		
	self should: [
		Ronda mano: jugador1 pie: jugadorSinCartas.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLosJugadoresNoEmpezaronConTresCartas.
			].
	
	self should: [
		Ronda mano: jugadorQueHaceTrampa pie: jugador2.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLosJugadoresNoEmpezaronConTresCartas.
			].
	
	self should: [
		Ronda mano: jugador1 pie: jugadorQueHaceTrampa.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLosJugadoresNoEmpezaronConTresCartas.
			].!
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 21:19:02'!
test09LosJugadoresNoPuedenTenerCartasIguales

	self should: [
		Ronda mano: otroJugadorQueHaceTrampa pie: jugador2.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLosJugadoresTienenCartasIguales.
			].
		
	self should: [
		Ronda mano: jugador2 pie: otroJugadorQueHaceTrampa.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLosJugadoresTienenCartasIguales.
			].! !

!methodRemoval: RondaTest #test09LosJugadoresNoPuedenCompartirCartasEntreSi stamp: 'G.L.S 7/5/2021 21:19:02'!
test09LosJugadoresNoPuedenCompartirCartasEntreSi

	self should: [
		Ronda mano: otroJugadorQueHaceTrampa pie: jugador2.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLosJugadoresTienenCartasIguales.
			].
		
	self should: [
		Ronda mano: jugador2 pie: otroJugadorQueHaceTrampa.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLosJugadoresTienenCartasIguales.
			].!
!Ronda methodsFor: 'private' stamp: 'G.L.S 7/5/2021 21:19:59'!
asegurarQueJugador: unJugador noComparteCartasCon: otroJugador

	(unJugador comparteCartasCon: otroJugador) ifTrue: [self error: self class errorLosJugadoresTienenCartasIguales].! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'G.L.S 7/5/2021 21:19:59' prior: 50866124!
initializeWithMano: unJugador pie: otroJugador

	self assertJugadorTieneLaCantidadCorrectaDeCartas: unJugador.
	self assertJugadorTieneLaCantidadCorrectaDeCartas: otroJugador.
	
	self asegurarQueJugador: unJugador noComparteCartasCon: otroJugador.

	mano := unJugador.
	pie := otroJugador.
	
	mano rondaActual: self.
	pie rondaActual: self.
	
	victoriasMano := 0.
	victoriasPie := 0.
	
	jugadorSiguiente  := mano.
	jugadas := Dictionary new.! !

!methodRemoval: Ronda #assertJugador:noComparteCartasCon: stamp: 'G.L.S 7/5/2021 21:19:59'!
assertJugador: unJugador noComparteCartasCon: otroJugador

	(unJugador comparteCartasCon: otroJugador) ifTrue: [self error: self class errorLosJugadoresTienenCartasIguales].!
!Ronda methodsFor: 'private' stamp: 'G.L.S 7/5/2021 21:20:15'!
asegurarQueJugadorTieneLaCantidadCorrectaDeCartas: unJugador

	(unJugador tieneActualmente: 3) ifFalse: [self error: self class errorLosJugadoresNoEmpezaronConTresCartas].
! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'G.L.S 7/5/2021 21:20:15' prior: 50866452!
initializeWithMano: unJugador pie: otroJugador

	self asegurarQueJugadorTieneLaCantidadCorrectaDeCartas: unJugador.
	self asegurarQueJugadorTieneLaCantidadCorrectaDeCartas: otroJugador.
	
	self asegurarQueJugador: unJugador noComparteCartasCon: otroJugador.

	mano := unJugador.
	pie := otroJugador.
	
	mano rondaActual: self.
	pie rondaActual: self.
	
	victoriasMano := 0.
	victoriasPie := 0.
	
	jugadorSiguiente  := mano.
	jugadas := Dictionary new.! !

!methodRemoval: Ronda #assertJugadorTieneLaCantidadCorrectaDeCartas: stamp: 'G.L.S 7/5/2021 21:20:15'!
assertJugadorTieneLaCantidadCorrectaDeCartas: unJugador

	(unJugador tieneActualmente: 3) ifFalse: [self error: self class errorLosJugadoresNoEmpezaronConTresCartas].
!
!JugadorTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 21:22:12'!
test01JugadorNoPuedeJugarCartaQueNoTenga

	! !

!methodRemoval: JugadorTest #test01JugadorNoPuedeJugarCartaQueNoTenga stamp: 'G.L.S 7/5/2021 21:22:53'!
test01JugadorNoPuedeJugarCartaQueNoTenga

	!
!Jugador methodsFor: 'acciones' stamp: 'G.L.S 7/5/2021 21:26:12' prior: 50863062!
jugarCarta: aCartaDeTruco 
	
	ronda ifNotNil: [ronda registrarJugador: self jugada: aCartaDeTruco.]! !

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 21:26:16'!
PASSED!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 21:26:16'!
PASSED!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 21:26:16'!
PASSED!

!testRun: #RondaTest #test04SiEmpataronLaPrimerRondaLaManoEsLaQueSigue stamp: 'G.L.S 7/5/2021 21:26:16'!
PASSED!

!testRun: #RondaTest #test05ElGanadorDeLaRondaEsElCorrecto stamp: 'G.L.S 7/5/2021 21:26:16'!
PASSED!

!testRun: #RondaTest #test06NoSePuedeSeguirJugandoUnaVezQueSeDecidioElGanador stamp: 'G.L.S 7/5/2021 21:26:16'!
PASSED!

!testRun: #RondaTest #test07LuegoDeUnEmpateElGanadorDelSiguienteEnfrentamientoGanaLaRonda stamp: 'G.L.S 7/5/2021 21:26:16'!
PASSED!

!testRun: #RondaTest #test08LosJugadoresDebenTenerTresCartasAlIniciarLaRonda stamp: 'G.L.S 7/5/2021 21:26:16'!
PASSED!

!testRun: #RondaTest #test09LosJugadoresNoPuedenTenerCartasIguales stamp: 'G.L.S 7/5/2021 21:26:16'!
PASSED!
!JugadorTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 21:27:36'!
test01JugadorNoPuedeJugarCartasQueNoTieneEnMano! !

!methodRemoval: JugadorTest #test01JugadorNoPuedeJugarCartasQueNoTieneEnMano stamp: 'G.L.S 7/5/2021 21:29:08'!
test01JugadorNoPuedeJugarCartasQueNoTieneEnMano!
!Jugador methodsFor: 'acciones' stamp: 'G.L.S 7/5/2021 21:30:29'!
jugarCarta: aCartaDeTruco enRonda: unaRonda  
	
	ronda ifNotNil: [ronda registrarJugador: self jugada: aCartaDeTruco.]! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'G.L.S 7/5/2021 21:30:29' prior: 50865741!
test07LuegoDeUnEmpateElGanadorDelSiguienteEnfrentamientoGanaLaRonda
	
	| ronda |
	
	ronda := Ronda mano: jugador1 pie: jugador2.
	
	jugador1 jugarCarta: (CartaDeTruco espadaCon: 3) enRonda: ronda.
	jugador2 jugarCarta: (CartaDeTruco oroCon: 3) enRonda: ronda.
	jugador1 jugarCarta: CartaDeTruco anchoDeEspada enRonda: ronda.
	jugador2 jugarCarta: CartaDeTruco anchoDeBasto enRonda: ronda.
	
	self assert: jugador1 equals: ronda ganador.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'G.L.S 7/5/2021 21:30:29' prior: 50864192!
test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento

	Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: (CartaDeTruco espadaCon: 3) enRonda: ronda.
		jugador1 jugarCarta: CartaDeTruco anchoDeEspada enRonda: ronda.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'G.L.S 7/5/2021 21:30:29' prior: 50863441!
test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente

	Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: CartaDeTruco sieteDeEspada enRonda: ronda.
		jugador2 jugarCarta: CartaDeTruco anchoDeBasto enRonda: ronda.
		jugador1 jugarCarta: (CartaDeTruco bastoCon: 7) enRonda: ronda.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'G.L.S 7/5/2021 21:30:29' prior: 50865697!
test05ElGanadorDeLaRondaEsElCorrecto
	
	| ronda |
	
	ronda := Ronda mano: jugadorQueVaAPerder pie: jugadorQueVaAGanar.
	
	jugadorQueVaAPerder jugarCarta: (CartaDeTruco sieteDeEspada) enRonda: ronda.
	jugadorQueVaAGanar jugarCarta: (CartaDeTruco bastoCon: 2) enRonda: ronda.
	jugadorQueVaAPerder jugarCarta: (CartaDeTruco espadaCon: 2) enRonda: ronda.
	jugadorQueVaAGanar jugarCarta: CartaDeTruco anchoDeBasto enRonda: ronda.
	jugadorQueVaAGanar jugarCarta: CartaDeTruco anchoDeEspada enRonda: ronda.
	jugadorQueVaAPerder jugarCarta: (CartaDeTruco oroCon: 2) enRonda: ronda.
	
	self assert: jugadorQueVaAGanar equals: ronda ganador.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'G.L.S 7/5/2021 21:30:29' prior: 50864160!
test01SoloLaManoPuedeEmpezarLaPrimeraJugada

	Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador2 jugarCarta: (CartaDeTruco oroCon: 3) enRonda: ronda.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'G.L.S 7/5/2021 21:30:29' prior: 50864802!
test04SiEmpataronLaPrimerRondaLaManoEsLaQueSigue

	Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: (CartaDeTruco espadaCon: 3) enRonda: ronda.
		jugador2 jugarCarta: (CartaDeTruco oroCon: 3) enRonda: ronda.
		jugador2 jugarCarta: CartaDeTruco anchoDeBasto enRonda: ronda.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'G.L.S 7/5/2021 21:30:29' prior: 50865717!
test06NoSePuedeSeguirJugandoUnaVezQueSeDecidioElGanador
	| ronda |
	
	ronda := Ronda mano: jugadorQueVaAPerder pie: jugadorQueVaAGanar.
	
	jugadorQueVaAPerder jugarCarta: (CartaDeTruco espadaCon: 2) enRonda: ronda.
	jugadorQueVaAGanar jugarCarta: CartaDeTruco anchoDeBasto enRonda: ronda.
	jugadorQueVaAGanar jugarCarta: CartaDeTruco anchoDeEspada enRonda: ronda.
	jugadorQueVaAPerder jugarCarta: (CartaDeTruco oroCon: 2) enRonda: ronda.
	
	self assert: jugadorQueVaAGanar equals: ronda ganador.
	
	self should: [
		jugadorQueVaAGanar jugarCarta: (CartaDeTruco bastoCon: 2) enRonda: ronda.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLaRondaYaTermino.
			].! !

!methodRemoval: Jugador #jugarCarta: stamp: 'G.L.S 7/5/2021 21:30:29'!
jugarCarta: aCartaDeTruco 
	
	ronda ifNotNil: [ronda registrarJugador: self jugada: aCartaDeTruco.]!

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 21:30:37'!
PASSED!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 21:30:37'!
PASSED!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 21:30:37'!
PASSED!

!testRun: #RondaTest #test04SiEmpataronLaPrimerRondaLaManoEsLaQueSigue stamp: 'G.L.S 7/5/2021 21:30:37'!
PASSED!

!testRun: #RondaTest #test05ElGanadorDeLaRondaEsElCorrecto stamp: 'G.L.S 7/5/2021 21:30:37'!
PASSED!

!testRun: #RondaTest #test06NoSePuedeSeguirJugandoUnaVezQueSeDecidioElGanador stamp: 'G.L.S 7/5/2021 21:30:37'!
PASSED!

!testRun: #RondaTest #test07LuegoDeUnEmpateElGanadorDelSiguienteEnfrentamientoGanaLaRonda stamp: 'G.L.S 7/5/2021 21:30:37'!
PASSED!

!testRun: #RondaTest #test08LosJugadoresDebenTenerTresCartasAlIniciarLaRonda stamp: 'G.L.S 7/5/2021 21:30:37'!
PASSED!

!testRun: #RondaTest #test09LosJugadoresNoPuedenTenerCartasIguales stamp: 'G.L.S 7/5/2021 21:30:37'!
PASSED!
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 21:30:54' prior: 50866665!
test04SiEmpataronLaPrimerRondaLaManoEsLaQueSigue
	| ronda |
	ronda := Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: (CartaDeTruco espadaCon: 3) enRonda: ronda.
		jugador2 jugarCarta: (CartaDeTruco oroCon: 3) enRonda: ronda.
		jugador2 jugarCarta: CartaDeTruco anchoDeBasto enRonda: ronda.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !

!testRun: #RondaTest #test04SiEmpataronLaPrimerRondaLaManoEsLaQueSigue stamp: 'G.L.S 7/5/2021 21:30:55'!
PASSED!

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 21:30:55'!
PASSED!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 21:30:55'!
PASSED!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 21:30:55'!
PASSED!

!testRun: #RondaTest #test04SiEmpataronLaPrimerRondaLaManoEsLaQueSigue stamp: 'G.L.S 7/5/2021 21:30:55'!
PASSED!

!testRun: #RondaTest #test05ElGanadorDeLaRondaEsElCorrecto stamp: 'G.L.S 7/5/2021 21:30:55'!
PASSED!

!testRun: #RondaTest #test06NoSePuedeSeguirJugandoUnaVezQueSeDecidioElGanador stamp: 'G.L.S 7/5/2021 21:30:55'!
PASSED!

!testRun: #RondaTest #test07LuegoDeUnEmpateElGanadorDelSiguienteEnfrentamientoGanaLaRonda stamp: 'G.L.S 7/5/2021 21:30:55'!
PASSED!

!testRun: #RondaTest #test08LosJugadoresDebenTenerTresCartasAlIniciarLaRonda stamp: 'G.L.S 7/5/2021 21:30:55'!
PASSED!

!testRun: #RondaTest #test09LosJugadoresNoPuedenTenerCartasIguales stamp: 'G.L.S 7/5/2021 21:30:55'!
PASSED!
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 21:31:08' prior: 50866749!
test04SiEmpataronLaPrimerRondaLaManoEsLaQueSigue
	
	| ronda |
	
	ronda := Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: (CartaDeTruco espadaCon: 3) enRonda: ronda.
		jugador2 jugarCarta: (CartaDeTruco oroCon: 3) enRonda: ronda.
		jugador2 jugarCarta: CartaDeTruco anchoDeBasto enRonda: ronda.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 21:31:15' prior: 50866609!
test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente
	| ronda |
	
	ronda = Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: CartaDeTruco sieteDeEspada enRonda: ronda.
		jugador2 jugarCarta: CartaDeTruco anchoDeBasto enRonda: ronda.
		jugador1 jugarCarta: (CartaDeTruco bastoCon: 7) enRonda: ronda.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 21:31:24'!
ERROR!
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 21:31:33' prior: 50866823!
test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente
	| ronda |
	
	ronda := Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: CartaDeTruco sieteDeEspada enRonda: ronda.
		jugador2 jugarCarta: CartaDeTruco anchoDeBasto enRonda: ronda.
		jugador1 jugarCarta: (CartaDeTruco bastoCon: 7) enRonda: ronda.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 21:31:44' prior: 50866651!
test01SoloLaManoPuedeEmpezarLaPrimeraJugada
	| ronda |
	
	ronda := Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador2 jugarCarta: (CartaDeTruco oroCon: 3) enRonda: ronda.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 21:31:53' prior: 50866593!
test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento
	| ronda |
	
	ronda := Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: (CartaDeTruco espadaCon: 3) enRonda: ronda.
		jugador1 jugarCarta: CartaDeTruco anchoDeEspada enRonda: ronda.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 21:31:57' prior: 50866880!
test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento
	
	| ronda |
	
	ronda := Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: (CartaDeTruco espadaCon: 3) enRonda: ronda.
		jugador1 jugarCarta: CartaDeTruco anchoDeEspada enRonda: ronda.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 21:32:02' prior: 50866866!
test01SoloLaManoPuedeEmpezarLaPrimeraJugada
	
	| ronda |
	
	ronda := Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador2 jugarCarta: (CartaDeTruco oroCon: 3) enRonda: ronda.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 21:32:07' prior: 50866847!
test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente
	
	| ronda |
	
	ronda := Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: CartaDeTruco sieteDeEspada enRonda: ronda.
		jugador2 jugarCarta: CartaDeTruco anchoDeBasto enRonda: ronda.
		jugador1 jugarCarta: (CartaDeTruco bastoCon: 7) enRonda: ronda.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 21:32:13'!
PASSED!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 21:32:13'!
PASSED!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 21:32:13'!
PASSED!

!testRun: #RondaTest #test04SiEmpataronLaPrimerRondaLaManoEsLaQueSigue stamp: 'G.L.S 7/5/2021 21:32:13'!
PASSED!

!testRun: #RondaTest #test05ElGanadorDeLaRondaEsElCorrecto stamp: 'G.L.S 7/5/2021 21:32:13'!
PASSED!

!testRun: #RondaTest #test06NoSePuedeSeguirJugandoUnaVezQueSeDecidioElGanador stamp: 'G.L.S 7/5/2021 21:32:13'!
PASSED!

!testRun: #RondaTest #test07LuegoDeUnEmpateElGanadorDelSiguienteEnfrentamientoGanaLaRonda stamp: 'G.L.S 7/5/2021 21:32:13'!
PASSED!

!testRun: #RondaTest #test08LosJugadoresDebenTenerTresCartasAlIniciarLaRonda stamp: 'G.L.S 7/5/2021 21:32:13'!
PASSED!

!testRun: #RondaTest #test09LosJugadoresNoPuedenTenerCartasIguales stamp: 'G.L.S 7/5/2021 21:32:13'!
PASSED!
!Jugador methodsFor: 'acciones' stamp: 'G.L.S 7/5/2021 21:32:25' prior: 50866569!
jugarCarta: aCartaDeTruco enRonda: unaRonda  
	
	unaRonda registrarJugador: self jugada: aCartaDeTruco! !
!Jugador methodsFor: 'acciones' stamp: 'G.L.S 7/5/2021 21:32:26' prior: 50866982!
jugarCarta: aCartaDeTruco enRonda: unaRonda  
	
	unaRonda registrarJugador: self jugada: aCartaDeTruco.! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 21:33:01'!
test10LosJugadoresNoPuedenJugarCartasYaUtilizadas

	self should: [
		Ronda mano: otroJugadorQueHaceTrampa pie: jugador2.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLosJugadoresTienenCartasIguales.
			].
		
	self should: [
		Ronda mano: jugador2 pie: otroJugadorQueHaceTrampa.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorLosJugadoresTienenCartasIguales.
			].! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 21:33:24' prior: 50866994!
test10LosJugadoresNoPuedenJugarCartasYaUtilizadas

	| ronda |
	
	ronda := Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: (CartaDeTruco espadaCon: 3) enRonda: ronda.
		jugador2 jugarCarta: (CartaDeTruco oroCon: 3) enRonda: ronda.
		jugador2 jugarCarta: CartaDeTruco anchoDeBasto enRonda: ronda.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !
!Ronda methodsFor: 'initialization' stamp: 'G.L.S 7/5/2021 21:33:32' prior: 50866486!
initializeWithMano: unJugador pie: otroJugador

	self asegurarQueJugadorTieneLaCantidadCorrectaDeCartas: unJugador.
	self asegurarQueJugadorTieneLaCantidadCorrectaDeCartas: otroJugador.
	
	self asegurarQueJugador: unJugador noComparteCartasCon: otroJugador.

	mano := unJugador.
	pie := otroJugador.
	
	victoriasMano := 0.
	victoriasPie := 0.
	
	jugadorSiguiente  := mano.
	jugadas := Dictionary new.! !

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 21:33:37'!
PASSED!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 21:33:37'!
PASSED!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 21:33:37'!
PASSED!

!testRun: #RondaTest #test04SiEmpataronLaPrimerRondaLaManoEsLaQueSigue stamp: 'G.L.S 7/5/2021 21:33:37'!
PASSED!

!testRun: #RondaTest #test05ElGanadorDeLaRondaEsElCorrecto stamp: 'G.L.S 7/5/2021 21:33:37'!
PASSED!

!testRun: #RondaTest #test06NoSePuedeSeguirJugandoUnaVezQueSeDecidioElGanador stamp: 'G.L.S 7/5/2021 21:33:37'!
PASSED!

!testRun: #RondaTest #test07LuegoDeUnEmpateElGanadorDelSiguienteEnfrentamientoGanaLaRonda stamp: 'G.L.S 7/5/2021 21:33:37'!
PASSED!

!testRun: #RondaTest #test08LosJugadoresDebenTenerTresCartasAlIniciarLaRonda stamp: 'G.L.S 7/5/2021 21:33:37'!
PASSED!

!testRun: #RondaTest #test09LosJugadoresNoPuedenTenerCartasIguales stamp: 'G.L.S 7/5/2021 21:33:37'!
PASSED!

!testRun: #RondaTest #test10LosJugadoresNoPuedenJugarCartasYaUtilizadas stamp: 'G.L.S 7/5/2021 21:33:37'!
PASSED!

!methodRemoval: Jugador #rondaActual: stamp: 'G.L.S 7/5/2021 21:33:50'!
rondaActual: unaRonda 
	ronda := unaRonda.!

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 21:33:53'!
PASSED!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 21:33:53'!
PASSED!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 21:33:53'!
PASSED!

!testRun: #RondaTest #test04SiEmpataronLaPrimerRondaLaManoEsLaQueSigue stamp: 'G.L.S 7/5/2021 21:33:53'!
PASSED!

!testRun: #RondaTest #test05ElGanadorDeLaRondaEsElCorrecto stamp: 'G.L.S 7/5/2021 21:33:53'!
PASSED!

!testRun: #RondaTest #test06NoSePuedeSeguirJugandoUnaVezQueSeDecidioElGanador stamp: 'G.L.S 7/5/2021 21:33:53'!
PASSED!

!testRun: #RondaTest #test07LuegoDeUnEmpateElGanadorDelSiguienteEnfrentamientoGanaLaRonda stamp: 'G.L.S 7/5/2021 21:33:53'!
PASSED!

!testRun: #RondaTest #test08LosJugadoresDebenTenerTresCartasAlIniciarLaRonda stamp: 'G.L.S 7/5/2021 21:33:53'!
PASSED!

!testRun: #RondaTest #test09LosJugadoresNoPuedenTenerCartasIguales stamp: 'G.L.S 7/5/2021 21:33:53'!
PASSED!

!testRun: #RondaTest #test10LosJugadoresNoPuedenJugarCartasYaUtilizadas stamp: 'G.L.S 7/5/2021 21:33:53'!
PASSED!
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 21:34:18' prior: 50867013!
test10LosJugadoresNoPuedenJugarCartasYaUtilizadas

	| ronda |
	
	ronda := Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: (CartaDeTruco espadaCon: 3) enRonda: ronda.
		jugador2 jugarCarta: (CartaDeTruco oroCon: 3) enRonda: ronda.
		jugador1 jugarCarta: (CartaDeTruco espadaCon: 3) enRonda: ronda.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorYaSeJugoEsaCarta.
			].! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 21:34:27' prior: 50867126!
test10LosJugadoresNoPuedenJugarCartasYaUtilizadas

	| ronda |
	
	ronda := Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: (CartaDeTruco espadaCon: 3) enRonda: ronda.
		jugador2 jugarCarta: (CartaDeTruco oroCon: 3) enRonda: ronda.
		jugador1 jugarCarta: (CartaDeTruco espadaCon: 3) enRonda: ronda.
		]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorYaSeJugoEsaCarta.
			].! !

!testRun: #RondaTest #test10LosJugadoresNoPuedenJugarCartasYaUtilizadas stamp: 'G.L.S 7/5/2021 21:34:37'!
FAILURE!
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 21:35:10' prior: 50865351!
registrarJugador: aJugador jugada: aCartaDeTruco 
	
	self asegurarQueLaRondaNoHayaTerminado.
	self asegurarQueSeaElJugadorCorrecto: aJugador.
	
	jugadas add: aJugador -> aCartaDeTruco.
	
	self jugaronTodos 
		ifTrue: [self calcularGanadorDeJugada.] 
		ifFalse: [self esperarAJugadorQueSigueA: aJugador.].
	
	
	! !

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'G.L.S 7/5/2021 21:38:59'!
Object subclass: #Jugador
	instanceVariableNames: 'manoActual'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 21:39:30' prior: 50867144!
test10LosJugadoresNoPuedenJugarCartasYaUtilizadas

	| ronda |
	
	ronda := Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: (CartaDeTruco espadaCon: 3) enRonda: ronda.
		jugador2 jugarCarta: (CartaDeTruco oroCon: 3) enRonda: ronda.
		jugador1 jugarCarta: (CartaDeTruco espadaCon: 3) enRonda: ronda.
		]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorYaSeJugoEsaCarta.
			].! !
!Ronda methodsFor: 'registro jugadas' stamp: 'G.L.S 7/5/2021 21:40:09' prior: 50867166!
registrarJugador: aJugador jugada: aCartaDeTruco 
	
	self asegurarQueLaRondaNoHayaTerminado.
	self asegurarQueSeaElJugadorCorrecto: aJugador.
	
	jugadas add: aJugador -> aCartaDeTruco.
	
	self jugaronTodos 
		ifTrue: [self calcularGanadorDeJugada.] 
		ifFalse: [self esperarAJugadorQueSigueA: aJugador.].
	
	
	! !

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 21:40:15'!
PASSED!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 21:40:15'!
PASSED!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 21:40:15'!
PASSED!

!testRun: #RondaTest #test04SiEmpataronLaPrimerRondaLaManoEsLaQueSigue stamp: 'G.L.S 7/5/2021 21:40:15'!
PASSED!

!testRun: #RondaTest #test05ElGanadorDeLaRondaEsElCorrecto stamp: 'G.L.S 7/5/2021 21:40:15'!
PASSED!

!testRun: #RondaTest #test06NoSePuedeSeguirJugandoUnaVezQueSeDecidioElGanador stamp: 'G.L.S 7/5/2021 21:40:15'!
PASSED!

!testRun: #RondaTest #test07LuegoDeUnEmpateElGanadorDelSiguienteEnfrentamientoGanaLaRonda stamp: 'G.L.S 7/5/2021 21:40:15'!
PASSED!

!testRun: #RondaTest #test08LosJugadoresDebenTenerTresCartasAlIniciarLaRonda stamp: 'G.L.S 7/5/2021 21:40:15'!
PASSED!

!testRun: #RondaTest #test09LosJugadoresNoPuedenTenerCartasIguales stamp: 'G.L.S 7/5/2021 21:40:15'!
PASSED!

!testRun: #RondaTest #test10LosJugadoresNoPuedenJugarCartasYaUtilizadas stamp: 'G.L.S 7/5/2021 21:40:15'!
FAILURE!

!testRun: #RondaTest #test10LosJugadoresNoPuedenJugarCartasYaUtilizadas stamp: 'G.L.S 7/5/2021 21:40:15'!
FAILURE!
!JugadorTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 21:40:56'!
test01LosJugadoresNoPuedenJugarCartasYaUtilizadas

"
	
	ronda := Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: (CartaDeTruco espadaCon: 3) enRonda: ronda.
		jugador2 jugarCarta: (CartaDeTruco oroCon: 3) enRonda: ronda.
		jugador1 jugarCarta: (CartaDeTruco espadaCon: 3) enRonda: ronda.
		]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorYaSeJugoEsaCarta.
			]."! !
!JugadorTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 21:41:17' prior: 50867259!
test01LosJugadoresNoPuedenJugarCartasYaUtilizadas
	
	| jugador1 jugador2 ronda |
	jugador1  := Jugador conMano: {CartaDeTruco anchoDeEspada. CartaDeTruco espadaCon: 3. CartaDeTruco bastoCon: 7.}.
	jugador2 := Jugador conMano: {CartaDeTruco anchoDeBasto. CartaDeTruco espadaCon: 5. CartaDeTruco oroCon: 3.}.
	
	ronda := Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: (CartaDeTruco espadaCon: 3) enRonda: ronda.
		jugador2 jugarCarta: (CartaDeTruco oroCon: 3) enRonda: ronda.
		jugador1 jugarCarta: (CartaDeTruco espadaCon: 3) enRonda: ronda.
		]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorYaSeJugoEsaCarta.
			].! !
!JugadorTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 21:41:23' prior: 50867277!
test01LosJugadoresNoPuedenJugarCartasYaUtilizadas
	
	| jugador1 jugador2 ronda |
	
	jugador1  := Jugador conMano: {CartaDeTruco anchoDeEspada. CartaDeTruco espadaCon: 3. CartaDeTruco bastoCon: 7.}.
	jugador2 := Jugador conMano: {CartaDeTruco anchoDeBasto. CartaDeTruco espadaCon: 5. CartaDeTruco oroCon: 3.}.
	
	ronda := Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: (CartaDeTruco espadaCon: 3) enRonda: ronda.
		jugador2 jugarCarta: (CartaDeTruco oroCon: 3) enRonda: ronda.
		jugador1 jugarCarta: (CartaDeTruco espadaCon: 3) enRonda: ronda.
		]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorYaSeJugoEsaCarta.
			].! !
!JugadorTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 21:41:42' prior: 50867303!
test01LosJugadoresNoPuedenJugarCartasYaUtilizadas
	
	| jugador1 jugador2 ronda |
	
	jugador1  := Jugador conMano: {CartaDeTruco anchoDeEspada. CartaDeTruco espadaCon: 3. CartaDeTruco bastoCon: 7.}.
	jugador2 := Jugador conMano: {CartaDeTruco anchoDeBasto. CartaDeTruco espadaCon: 5. CartaDeTruco oroCon: 3.}.
	
	ronda := Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: (CartaDeTruco espadaCon: 3) enRonda: ronda.
		jugador2 jugarCarta: (CartaDeTruco oroCon: 3) enRonda: ronda.
		jugador1 jugarCarta: (CartaDeTruco espadaCon: 3) enRonda: ronda.
		]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Jugador errorNoPoseeEsaCarta.
			].! !

!methodRemoval: RondaTest #test10LosJugadoresNoPuedenJugarCartasYaUtilizadas stamp: 'G.L.S 7/5/2021 21:41:50'!
test10LosJugadoresNoPuedenJugarCartasYaUtilizadas

	| ronda |
	
	ronda := Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: (CartaDeTruco espadaCon: 3) enRonda: ronda.
		jugador2 jugarCarta: (CartaDeTruco oroCon: 3) enRonda: ronda.
		jugador1 jugarCarta: (CartaDeTruco espadaCon: 3) enRonda: ronda.
		]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorYaSeJugoEsaCarta.
			].!

!testRun: #JugadorTest #test01LosJugadoresNoPuedenJugarCartasYaUtilizadas stamp: 'G.L.S 7/5/2021 21:41:54'!
FAILURE!

!testRun: #JugadorTest #test01LosJugadoresNoPuedenJugarCartasYaUtilizadas stamp: 'G.L.S 7/5/2021 21:41:54'!
FAILURE!
!Jugador methodsFor: 'acciones' stamp: 'G.L.S 7/5/2021 21:42:02' prior: 50866988!
jugarCarta: aCartaDeTruco enRonda: unaRonda
	
	unaRonda registrarJugador: self jugada: aCartaDeTruco.! !
!Jugador methodsFor: 'acciones' stamp: 'G.L.S 7/5/2021 21:42:34' prior: 50867380!
jugarCarta: aCartaDeTruco enRonda: unaRonda
	self asegurarQueSeTieneLaCarta: aCartaDeTruco.
	unaRonda registrarJugador: self jugada: aCartaDeTruco.! !
!Jugador methodsFor: 'acciones' stamp: 'G.L.S 7/5/2021 21:42:38' prior: 50867386!
jugarCarta: aCartaDeTruco enRonda: unaRonda
	
	self asegurarQueSeTieneLaCarta: aCartaDeTruco.
	
	unaRonda registrarJugador: self jugada: aCartaDeTruco.! !
!Jugador methodsFor: 'acciones' stamp: 'G.L.S 7/5/2021 21:42:44' prior: 50867394!
jugarCarta: unaCartaDeTruco enRonda: unaRonda
	
	self asegurarQueSeTieneLaCarta: unaCartaDeTruco.
	
	unaRonda registrarJugador: self jugada: unaCartaDeTruco.! !
!Jugador methodsFor: 'acciones' stamp: 'G.L.S 7/5/2021 21:43:16'!
asegurarQueSeTieneLaCarta: unaCartaDeTruco
	
	(manoActual includes: unaCartaDeTruco) ifFalse: [self error: self class ].
! !
!Jugador methodsFor: 'acciones' stamp: 'G.L.S 7/5/2021 21:43:30' prior: 50867410!
asegurarQueSeTieneLaCarta: unaCartaDeTruco
	
	(manoActual includes: unaCartaDeTruco) ifFalse: [self error: self class errorNoPoseeEsaCarta].
! !
!Jugador methodsFor: 'acciones' stamp: 'G.L.S 7/5/2021 21:43:37' prior: 50867417!
asegurarQueSeTieneLaCarta: unaCartaDeTruco
	
	(self tiene: unaCartaDeTruco) ifFalse: [self error: self class errorNoPoseeEsaCarta].
! !

!testRun: #JugadorTest #test01LosJugadoresNoPuedenJugarCartasYaUtilizadas stamp: 'G.L.S 7/5/2021 21:43:41'!
FAILURE!

!testRun: #JugadorTest #test01LosJugadoresNoPuedenJugarCartasYaUtilizadas stamp: 'G.L.S 7/5/2021 21:43:41'!
FAILURE!
!Jugador class methodsFor: 'errors' stamp: 'G.L.S 7/5/2021 21:44:25'!
errorNoPoseeEsaCarta
	^'Error - El Jugador no posee esta carta'.! !

!testRun: #JugadorTest #test01LosJugadoresNoPuedenJugarCartasYaUtilizadas stamp: 'G.L.S 7/5/2021 21:44:32'!
FAILURE!

!testRun: #JugadorTest #test01LosJugadoresNoPuedenJugarCartasYaUtilizadas stamp: 'G.L.S 7/5/2021 21:44:32'!
FAILURE!

self tiene: unaCartaDeTruco!

!testRun: #JugadorTest #test01LosJugadoresNoPuedenJugarCartasYaUtilizadas stamp: 'G.L.S 7/5/2021 21:45:08'!
FAILURE!
!Jugador methodsFor: 'acciones' stamp: 'G.L.S 7/5/2021 21:45:27' prior: 50867402!
jugarCarta: unaCartaDeTruco enRonda: unaRonda
	
	self asegurarQueSeTieneLaCarta: unaCartaDeTruco.
	
	unaRonda registrarJugador: self jugada: unaCartaDeTruco.
	
	self removerCarta: unaCartaDeTruco.! !
!Jugador methodsFor: 'acciones' stamp: 'G.L.S 7/5/2021 21:45:44'!
removerCarta: unaCartaDeTruco

	manoActual remove: unaCartaDeTruco.! !

!testRun: #JugadorTest #test01LosJugadoresNoPuedenJugarCartasYaUtilizadas stamp: 'G.L.S 7/5/2021 21:46:10'!
FAILURE!

!testRun: #JugadorTest #test01LosJugadoresNoPuedenJugarCartasYaUtilizadas stamp: 'G.L.S 7/5/2021 21:46:10'!
FAILURE!

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 21:46:17'!
PASSED!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 21:46:17'!
FAILURE!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 21:46:17'!
FAILURE!

!testRun: #RondaTest #test04SiEmpataronLaPrimerRondaLaManoEsLaQueSigue stamp: 'G.L.S 7/5/2021 21:46:17'!
FAILURE!

!testRun: #RondaTest #test05ElGanadorDeLaRondaEsElCorrecto stamp: 'G.L.S 7/5/2021 21:46:17'!
ERROR!

!testRun: #RondaTest #test06NoSePuedeSeguirJugandoUnaVezQueSeDecidioElGanador stamp: 'G.L.S 7/5/2021 21:46:17'!
ERROR!

!testRun: #RondaTest #test07LuegoDeUnEmpateElGanadorDelSiguienteEnfrentamientoGanaLaRonda stamp: 'G.L.S 7/5/2021 21:46:17'!
ERROR!

!testRun: #RondaTest #test08LosJugadoresDebenTenerTresCartasAlIniciarLaRonda stamp: 'G.L.S 7/5/2021 21:46:17'!
PASSED!

!testRun: #RondaTest #test09LosJugadoresNoPuedenTenerCartasIguales stamp: 'G.L.S 7/5/2021 21:46:17'!
PASSED!

!testRun: #JugadorTest #test01LosJugadoresNoPuedenJugarCartasYaUtilizadas stamp: 'G.L.S 7/5/2021 21:46:26'!
FAILURE!

!testRun: #JugadorTest #test01LosJugadoresNoPuedenJugarCartasYaUtilizadas stamp: 'G.L.S 7/5/2021 21:46:26'!
FAILURE!

!testRun: #JugadorTest #test01LosJugadoresNoPuedenJugarCartasYaUtilizadas stamp: 'G.L.S 7/5/2021 21:47:18'!
FAILURE!

self tiene: unaCartaDeTruco!

!testRun: #JugadorTest #test01LosJugadoresNoPuedenJugarCartasYaUtilizadas stamp: 'G.L.S 7/5/2021 21:48:37'!
FAILURE!

!testRun: #JugadorTest #test01LosJugadoresNoPuedenJugarCartasYaUtilizadas stamp: 'G.L.S 7/5/2021 21:48:51'!
PASSED!

p _ OrderedCollection new.!

p add: 5.!

p remove: 5!

p!

p remove: 5!

!testRun: #JugadorTest #test01LosJugadoresNoPuedenJugarCartasYaUtilizadas stamp: 'G.L.S 7/5/2021 21:50:09'!
FAILURE!

!testRun: #JugadorTest #test01LosJugadoresNoPuedenJugarCartasYaUtilizadas stamp: 'G.L.S 7/5/2021 21:50:09'!
FAILURE!

manoActual!

self includes: (CartaDeTruco espadaCon: 3).!

self includes: (CartaDeTruco espadaCon: 1).!

self remove: (CartaDeTruco espadaCon: 1)!

!testRun: #JugadorTest #test01LosJugadoresNoPuedenJugarCartasYaUtilizadas stamp: 'G.L.S 7/5/2021 21:52:08'!
FAILURE!

!testRun: #JugadorTest #test01LosJugadoresNoPuedenJugarCartasYaUtilizadas stamp: 'G.L.S 7/5/2021 21:52:10'!
PASSED!
!Jugador methodsFor: 'initialization' stamp: 'G.L.S 7/5/2021 21:54:03' prior: 50863187!
initializeConMano: unaManoDeCartas
	manoActual := Bag new.
	
	manoActual addAll: unaManoDeCartas.! !
!Jugador methodsFor: 'initialization' stamp: 'G.L.S 7/5/2021 21:54:09' prior: 50867553!
initializeConMano: unaManoDeCartas

	manoActual := Bag new.
	manoActual addAll: unaManoDeCartas.! !

!testRun: #JugadorTest #test01LosJugadoresNoPuedenJugarCartasYaUtilizadas stamp: 'G.L.S 7/5/2021 21:54:11'!
PASSED!

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 21:54:15'!
PASSED!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 21:54:15'!
PASSED!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 21:54:15'!
FAILURE!

!testRun: #RondaTest #test04SiEmpataronLaPrimerRondaLaManoEsLaQueSigue stamp: 'G.L.S 7/5/2021 21:54:15'!
PASSED!

!testRun: #RondaTest #test05ElGanadorDeLaRondaEsElCorrecto stamp: 'G.L.S 7/5/2021 21:54:15'!
PASSED!

!testRun: #RondaTest #test06NoSePuedeSeguirJugandoUnaVezQueSeDecidioElGanador stamp: 'G.L.S 7/5/2021 21:54:15'!
PASSED!

!testRun: #RondaTest #test07LuegoDeUnEmpateElGanadorDelSiguienteEnfrentamientoGanaLaRonda stamp: 'G.L.S 7/5/2021 21:54:15'!
PASSED!

!testRun: #RondaTest #test08LosJugadoresDebenTenerTresCartasAlIniciarLaRonda stamp: 'G.L.S 7/5/2021 21:54:15'!
PASSED!

!testRun: #RondaTest #test09LosJugadoresNoPuedenTenerCartasIguales stamp: 'G.L.S 7/5/2021 21:54:15'!
PASSED!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 21:54:15'!
FAILURE!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 21:54:27'!
FAILURE!

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 21:54:33'!
PASSED!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 21:54:35'!
PASSED!

!testRun: #RondaTest #test04SiEmpataronLaPrimerRondaLaManoEsLaQueSigue stamp: 'G.L.S 7/5/2021 21:54:36'!
PASSED!

!testRun: #RondaTest #test05ElGanadorDeLaRondaEsElCorrecto stamp: 'G.L.S 7/5/2021 21:54:37'!
PASSED!

!testRun: #RondaTest #test06NoSePuedeSeguirJugandoUnaVezQueSeDecidioElGanador stamp: 'G.L.S 7/5/2021 21:54:38'!
PASSED!

!testRun: #RondaTest #test06NoSePuedeSeguirJugandoUnaVezQueSeDecidioElGanador stamp: 'G.L.S 7/5/2021 21:54:40'!
PASSED!

!testRun: #RondaTest #test07LuegoDeUnEmpateElGanadorDelSiguienteEnfrentamientoGanaLaRonda stamp: 'G.L.S 7/5/2021 21:54:41'!
PASSED!

!testRun: #RondaTest #test08LosJugadoresDebenTenerTresCartasAlIniciarLaRonda stamp: 'G.L.S 7/5/2021 21:54:43'!
PASSED!

!testRun: #RondaTest #test09LosJugadoresNoPuedenTenerCartasIguales stamp: 'G.L.S 7/5/2021 21:54:44'!
PASSED!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 21:54:46'!
FAILURE!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 21:54:46'!
FAILURE!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 21:55:02'!
FAILURE!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 21:55:10'!
PASSED!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 21:55:14'!
FAILURE!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 21:55:14'!
FAILURE!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 21:55:18'!
PASSED!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 21:55:31'!
FAILURE!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 21:55:37'!
PASSED!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 21:56:09'!
FAILURE!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 21:56:09'!
FAILURE!
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 21:56:40' prior: 50866928!
test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente
	
	| ronda |
	
	ronda := Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: (CartaDeTruco bastoCon: 7) enRonda: ronda.
		jugador2 jugarCarta: CartaDeTruco anchoDeBasto enRonda: ronda.
		jugador1 jugarCarta: (CartaDeTruco anchoDeEspada ) enRonda: ronda.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !
!RondaTest methodsFor: 'testing' stamp: 'G.L.S 7/5/2021 21:56:41' prior: 50867699!
test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente
	
	| ronda |
	
	ronda := Ronda mano: jugador1 pie: jugador2.
	
	self should: [
		jugador1 jugarCarta: (CartaDeTruco bastoCon: 7) enRonda: ronda.
		jugador2 jugarCarta: CartaDeTruco anchoDeBasto enRonda: ronda.
		jugador1 jugarCarta: (CartaDeTruco anchoDeEspada) enRonda: ronda.
		] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Ronda errorOrdenDeJugadaIncorrecto.
			].! !

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 21:56:42'!
PASSED!

!testRun: #RondaTest #test01SoloLaManoPuedeEmpezarLaPrimeraJugada stamp: 'G.L.S 7/5/2021 21:56:42'!
PASSED!

!testRun: #RondaTest #test02UnJugadorNoPuedeRealizarDosJugadasSeguidasEnUnEnfrentamiento stamp: 'G.L.S 7/5/2021 21:56:42'!
PASSED!

!testRun: #RondaTest #test03ElJugadorQueGanoElEnfrentamientoAnteriorEsElQueEmpiezaEnElEnfrentamientoSiguiente stamp: 'G.L.S 7/5/2021 21:56:42'!
PASSED!

!testRun: #RondaTest #test04SiEmpataronLaPrimerRondaLaManoEsLaQueSigue stamp: 'G.L.S 7/5/2021 21:56:42'!
PASSED!

!testRun: #RondaTest #test05ElGanadorDeLaRondaEsElCorrecto stamp: 'G.L.S 7/5/2021 21:56:42'!
PASSED!

!testRun: #RondaTest #test06NoSePuedeSeguirJugandoUnaVezQueSeDecidioElGanador stamp: 'G.L.S 7/5/2021 21:56:42'!
PASSED!

!testRun: #RondaTest #test07LuegoDeUnEmpateElGanadorDelSiguienteEnfrentamientoGanaLaRonda stamp: 'G.L.S 7/5/2021 21:56:42'!
PASSED!

!testRun: #RondaTest #test08LosJugadoresDebenTenerTresCartasAlIniciarLaRonda stamp: 'G.L.S 7/5/2021 21:56:42'!
PASSED!

!testRun: #RondaTest #test09LosJugadoresNoPuedenTenerCartasIguales stamp: 'G.L.S 7/5/2021 21:56:42'!
PASSED!