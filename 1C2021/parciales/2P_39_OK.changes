

----QUIT----(9 March 2021 14:58:42) CuisUniversity-4532.image priorSource: 13044060!

----STARTUP---- (9 March 2021 14:58:43) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4532.image!


----QUIT----(9 March 2021 14:58:43) CuisUniversity-4532.image priorSource: 16885479!

----STARTUP---- (5 July 2021 16:24:27) as /home/bruno/Downloads/segundo parcial/parcial/CuisUniversity-4532.image!


----End fileIn of /home/bruno/Downloads/segundo parcial/parcial/ISW1-2021-1C-2doParcial.st----!

Object subclass: #RondaDeTrucoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'BAG 7/5/2021 17:43:17'!
Object subclass: #RondaDeTrucoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'BAG 7/5/2021 17:57:14'!
Object subclass: #RondaDeTruco
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'nil' stamp: 'BAG 7/5/2021 17:56:53'!
test01ElJugadorManoSoloDebeTener3Cartas 
	
	| jugadorMano jugadorPie |
	jugadorMano := {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada. CartaDeTruco sieteDeEspada.}.
	jugadorPie := {CartaDeTruco sieteDeOro . CartaDeTruco bastoCon: 4. CartaDeTruco oroCon: 3. CartaDeTruco sieteDeEspada.}.
	
	self should: [RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: RondaDeTruco elJugadorManoNoTiene3CartasDescripcionDeError.
		].! !

TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'BAG 7/5/2021 17:57:32'!
TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 17:57:35'!
ERROR!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 17:57:35'!
ERROR!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'BAG 7/5/2021 17:57:42'!
comienzaConMano: anArray yPie: anArray2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeComienzaConMano: anArray yPie: anArray2 ! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'BAG 7/5/2021 17:58:09' prior: 50859914!
comienzaConMano: unJugadorMano yPie: unJugadorPie 
	^self new initializeComienzaConMano: unJugadorMano yPie: unJugadorPie ! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 17:58:10'!
ERROR!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'BAG 7/5/2021 17:58:20'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'unJugadorMano_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'BAG 7/5/2021 17:58:20'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'unJugadorMano_CHANGE_ME unJugadorPie_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'initialization' stamp: 'BAG 7/5/2021 17:58:20'!
initializeComienzaConMano: unJugadorMano yPie: unJugadorPie 
	self shouldBeImplemented.
	unJugadorMano_CHANGE_ME := unJugadorMano.
	unJugadorPie_CHANGE_ME := unJugadorPie.! !
!RondaDeTruco methodsFor: 'initialization' stamp: 'BAG 7/5/2021 17:59:06' prior: 50859952!
initializeComienzaConMano: unJugadorMano yPie: unJugadorPie 
	unJugadorMano_CHANGE_ME := unJugadorMano.
	unJugadorPie_CHANGE_ME := unJugadorPie.! !

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'BAG 7/5/2021 17:59:14'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'mano unJugadorPie_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 17:59:14' prior: 50859961!
initializeComienzaConMano: unJugadorMano yPie: unJugadorPie 
	mano := unJugadorMano.
	unJugadorPie_CHANGE_ME := unJugadorPie.! !

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'BAG 7/5/2021 17:59:22'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'mano pie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 17:59:22' prior: 50859978!
initializeComienzaConMano: unJugadorMano yPie: unJugadorPie 
	mano := unJugadorMano.
	pie := unJugadorPie.! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 17:59:26'!
FAILURE!
!RondaDeTruco methodsFor: 'initialization' stamp: 'BAG 7/5/2021 18:00:34' prior: 50859993!
initializeComienzaConMano: unJugadorMano yPie: unJugadorPie 
	unJugadorMano size = 3 ifFalse:[self error: self class elJugadorManoNoTiene3CartasDescripcionDeError].
	mano := unJugadorMano.
	pie := unJugadorPie.! !
!RondaDeTruco class methodsFor: 'descripcion de errores' stamp: 'BAG 7/5/2021 18:01:26'!
elJugadorManoNoTiene3CartasDescripcionDeError
	^'No se puede comenzar la ronda si alg�n jugador no tiene exactamente 3 cartas'! !
!RondaDeTruco class methodsFor: 'descripcion de errores' stamp: 'BAG 7/5/2021 18:01:56'!
algunJugadorNoTiene3CartasDescripcionDeError
	^'No se puede comenzar la ronda si alg�n jugador no tiene exactamente 3 cartas'! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 18:01:56' prior: 50860003!
initializeComienzaConMano: unJugadorMano yPie: unJugadorPie 
	unJugadorMano size = 3 ifFalse:[self error: self class algunJugadorNoTiene3CartasDescripcionDeError].
	mano := unJugadorMano.
	pie := unJugadorPie.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 18:01:56' prior: 50859873!
test01ElJugadorManoSoloDebeTener3Cartas 
	
	| jugadorMano jugadorPie |
	jugadorMano := {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada. CartaDeTruco sieteDeEspada.}.
	jugadorPie := {CartaDeTruco sieteDeOro . CartaDeTruco bastoCon: 4. CartaDeTruco oroCon: 3. CartaDeTruco sieteDeEspada.}.
	
	self should: [RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: RondaDeTruco algunJugadorNoTiene3CartasDescripcionDeError.
		].! !

!methodRemoval: RondaDeTruco class #elJugadorManoNoTiene3CartasDescripcionDeError stamp: 'BAG 7/5/2021 18:01:56'!
elJugadorManoNoTiene3CartasDescripcionDeError
	^'No se puede comenzar la ronda si alg�n jugador no tiene exactamente 3 cartas'!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 18:02:19'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 18:03:16'!
test02ElJugadorPieSoloDebeTener3Cartas 
	
	| jugadorMano jugadorPie |
	jugadorMano := {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.}.
	jugadorPie := {CartaDeTruco sieteDeOro . CartaDeTruco bastoCon: 4. CartaDeTruco oroCon: 3. CartaDeTruco sieteDeEspada.}.
	
	self should: [RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: RondaDeTruco algunJugadorNoTiene3CartasDescripcionDeError.
		].! !

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 18:03:28'!
FAILURE!
!RondaDeTruco methodsFor: 'initialization' stamp: 'BAG 7/5/2021 18:03:56' prior: 50860028!
initializeComienzaConMano: unJugadorMano yPie: unJugadorPie 
	unJugadorMano size = 3 ifFalse:[self error: self class algunJugadorNoTiene3CartasDescripcionDeError].
	unJugadorPie size = 3 ifFalse:[self error: self class algunJugadorNoTiene3CartasDescripcionDeError].
	
	mano := unJugadorMano.
	pie := unJugadorPie.! !

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 18:03:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 18:03:59'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 18:03:59'!
PASSED!
!RondaDeTruco methodsFor: 'initialization' stamp: 'BAG 7/5/2021 18:06:14' prior: 50860094!
initializeComienzaConMano: unJugadorMano yPie: unJugadorPie 
	self tienen3CartasElJugadorMano: unJugadorMano yElJugadorPie: unJugadorPie.
		
	mano := unJugadorMano.
	pie := unJugadorPie.! !
!RondaDeTruco methodsFor: 'initialization' stamp: 'BAG 7/5/2021 18:06:47'!
tienen3CartasElJugadorMano: unJugadorMano yElJugadorPie: unJugadorPie
	(unJugadorMano size = 3 and: unJugadorPie size = 3) ifFalse:[self error: self class algunJugadorNoTiene3CartasDescripcionDeError]
	 ! !
!RondaDeTruco methodsFor: 'initialization' stamp: 'BAG 7/5/2021 18:07:11'!
tienen3CartasElJugadorMano: unJugadorMano elJugadorPie: unJugadorPie
	(unJugadorMano size = 3 and: unJugadorPie size = 3) ifFalse:[self error: self class algunJugadorNoTiene3CartasDescripcionDeError]
	 ! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 18:07:11' prior: 50860117!
initializeComienzaConMano: unJugadorMano yPie: unJugadorPie 
	self tienen3CartasElJugadorMano: unJugadorMano elJugadorPie: unJugadorPie.
		
	mano := unJugadorMano.
	pie := unJugadorPie.! !

!methodRemoval: RondaDeTruco #tienen3CartasElJugadorMano:yElJugadorPie: stamp: 'BAG 7/5/2021 18:07:11'!
tienen3CartasElJugadorMano: unJugadorMano yElJugadorPie: unJugadorPie
	(unJugadorMano size = 3 and: unJugadorPie size = 3) ifFalse:[self error: self class algunJugadorNoTiene3CartasDescripcionDeError]
	 !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 18:09:36'!
test03ElJugadorManoNoDebeTenerCartasRepetidas
	
	| jugadorMano jugadorPie |
	jugadorMano := {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco anchoDeEspada.}.
	jugadorPie := {CartaDeTruco sieteDeOro . CartaDeTruco bastoCon: 4. CartaDeTruco oroCon: 3.}.
	
	self should: [RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: RondaDeTruco noSePuedeJugarConMasDeUnMazoDescripcionDeError.
		].! !

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 18:09:43'!
FAILURE!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 18:09:43'!
FAILURE!

----End fileIn of /home/bruno/Downloads/segundo parcial/parcial/Packages/TerseGuide.pck.st----!

----SNAPSHOT----(5 July 2021 18:11:17) CuisUniversity-4532.image priorSource: 16885703!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 18:16:06'!
FAILURE!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 18:16:06'!
FAILURE!
!RondaDeTruco methodsFor: 'initialization' stamp: 'BAG 7/5/2021 18:19:09' prior: 50860145!
initializeComienzaConMano: unJugadorMano yPie: unJugadorPie 
	unJugadorMano detect:[:carta | unJugadorMano occurrencesOf: carta ~=1 ]	 ifFound:[ self error: self class noSePuedeJugarConMasDeUnMazoDescripcionDeError] ifNone:[].
	self tienen3CartasElJugadorMano: unJugadorMano elJugadorPie: unJugadorPie.
		
	mano := unJugadorMano.
	pie := unJugadorPie.! !

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 18:19:12'!
ERROR!
!RondaDeTruco class methodsFor: 'descripcion de errores' stamp: 'BAG 7/5/2021 18:19:23'!
noSePuedeJugarConMasDeUnMazoDescripcionDeError
	self shouldBeImplemented.! !
!RondaDeTruco class methodsFor: 'descripcion de errores' stamp: 'BAG 7/5/2021 18:19:50' prior: 50863145!
noSePuedeJugarConMasDeUnMazoDescripcionDeError
	^'No se puede jugar con m�s de un mazo, en otras palabras, no puede haber cartas repetidas'! !

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 18:19:53'!
FAILURE!
!RondaDeTruco methodsFor: 'initialization' stamp: 'BAG 7/5/2021 18:20:33' prior: 50863127!
initializeComienzaConMano: unJugadorMano yPie: unJugadorPie 
	unJugadorMano detect:[:carta | unJugadorMano occurrencesOf: carta ~=1 ]	 ifFound:[ ^self error: self class noSePuedeJugarConMasDeUnMazoDescripcionDeError] ifNone:[].
	self tienen3CartasElJugadorMano: unJugadorMano elJugadorPie: unJugadorPie.
		
	mano := unJugadorMano.
	pie := unJugadorPie.! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 18:20:36'!
FAILURE!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 18:20:36'!
FAILURE!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 18:20:36'!
FAILURE!
!RondaDeTruco methodsFor: 'initialization' stamp: 'BAG 7/5/2021 18:22:59' prior: 50863162!
initializeComienzaConMano: unJugadorMano yPie: unJugadorPie 
	(unJugadorMano allSatisfy: [:carta | unJugadorMano occurrencesOf: carta =1 ]	) ifTrue:[ ^self error: self class noSePuedeJugarConMasDeUnMazoDescripcionDeError].
	self tienen3CartasElJugadorMano: unJugadorMano elJugadorPie: unJugadorPie.
		
	mano := unJugadorMano.
	pie := unJugadorPie.! !

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 18:23:02'!
FAILURE!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 18:23:02'!
FAILURE!
!RondaDeTruco methodsFor: 'initialization' stamp: 'BAG 7/5/2021 18:23:10' prior: 50863187!
initializeComienzaConMano: unJugadorMano yPie: unJugadorPie 
	(unJugadorMano allSatisfy: [:carta | unJugadorMano occurrencesOf: carta =1 ]	) ifTrue:[ self error: self class noSePuedeJugarConMasDeUnMazoDescripcionDeError].
	self tienen3CartasElJugadorMano: unJugadorMano elJugadorPie: unJugadorPie.
		
	mano := unJugadorMano.
	pie := unJugadorPie.! !

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 18:23:17'!
FAILURE!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 18:23:17'!
FAILURE!

(unJugadorMano allSatisfy: [:carta | unJugadorMano occurrencesOf: carta =1 ]	)!
!RondaDeTruco methodsFor: 'initialization' stamp: 'BAG 7/5/2021 18:25:15' prior: 50863209!
initializeComienzaConMano: unJugadorMano yPie: unJugadorPie 
	(unJugadorMano allSatisfy: [:carta | (unJugadorMano occurrencesOf: carta) =1 ]	) ifTrue:[ self error: self class noSePuedeJugarConMasDeUnMazoDescripcionDeError].
	self tienen3CartasElJugadorMano: unJugadorMano elJugadorPie: unJugadorPie.
		
	mano := unJugadorMano.
	pie := unJugadorPie.! !

(unJugadorMano allSatisfy: [:carta | (unJugadorMano occurrencesOf: carta) =1 ]	)!

(unJugadorMano allSatisfy: [:carta | (unJugadorMano includes: carta) not ]	)!
!RondaDeTruco methodsFor: 'initialization' stamp: 'BAG 7/5/2021 18:28:02' prior: 50863233!
initializeComienzaConMano: unJugadorMano yPie: unJugadorPie 
	(unJugadorMano first = unJugadorMano second or: (unJugadorMano first = unJugadorMano at:3) or: (unJugadorMano at:3 = unJugadorMano second))  ifTrue:[ self error: self class noSePuedeJugarConMasDeUnMazoDescripcionDeError].
	self tienen3CartasElJugadorMano: unJugadorMano elJugadorPie: unJugadorPie.
		
	mano := unJugadorMano.
	pie := unJugadorPie.! !

(unJugadorMano first = unJugadorMano second or: (unJugadorMano first = unJugadorMano at:3) or: (unJugadorMano at:3 = unJugadorMano second))!

((unJugadorMano first = unJugadorMano second) or: (unJugadorMano first = unJugadorMano at:3) or: (unJugadorMano at:3 = unJugadorMano second))!

((unJugadorMano first = unJugadorMano second) or: (unJugadorMano first = unJugadorMano at:3) or: (unJugadorMano at:3 = unJugadorMano second))!

(unJugadorMano at:3 = unJugadorMano second)!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 18:29:24'!
FAILURE!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 18:29:24'!
FAILURE!
!RondaDeTruco methodsFor: 'initialization' stamp: 'BAG 7/5/2021 18:30:19' prior: 50863252!
initializeComienzaConMano: unJugadorMano yPie: unJugadorPie 
	((unJugadorMano first = unJugadorMano second) or: (unJugadorMano first = unJugadorMano at:3) or: (unJugadorMano at:3 = unJugadorMano second))  ifTrue:[ self error: self class noSePuedeJugarConMasDeUnMazoDescripcionDeError].
	self tienen3CartasElJugadorMano: unJugadorMano elJugadorPie: unJugadorPie.
		
	mano := unJugadorMano.
	pie := unJugadorPie.! !

((unJugadorMano first = unJugadorMano second) or: (unJugadorMano first = unJugadorMano at:3) or: (unJugadorMano at:3 = unJugadorMano second))!
!RondaDeTruco methodsFor: 'initialization' stamp: 'BAG 7/5/2021 18:30:51' prior: 50863290!
initializeComienzaConMano: unJugadorMano yPie: unJugadorPie 
	((unJugadorMano first = unJugadorMano second) or: (unJugadorMano first = (unJugadorMano at:3)) or: ((unJugadorMano at:3) = unJugadorMano second))  ifTrue:[ self error: self class noSePuedeJugarConMasDeUnMazoDescripcionDeError].
	self tienen3CartasElJugadorMano: unJugadorMano elJugadorPie: unJugadorPie.
		
	mano := unJugadorMano.
	pie := unJugadorPie.! !

((unJugadorMano first = unJugadorMano second) or: (unJugadorMano first = (unJugadorMano at:3)) or: ((unJugadorMano at:3) = unJugadorMano second))!
!RondaDeTruco methodsFor: 'initialization' stamp: 'BAG 7/5/2021 18:31:09' prior: 50863311!
initializeComienzaConMano: unJugadorMano yPie: unJugadorPie 
	(unJugadorMano first = unJugadorMano second or: (unJugadorMano first = (unJugadorMano at:3)) or: ((unJugadorMano at:3) = unJugadorMano second)) ifTrue:[ self error: self class noSePuedeJugarConMasDeUnMazoDescripcionDeError].
	self tienen3CartasElJugadorMano: unJugadorMano elJugadorPie: unJugadorPie.
		
	mano := unJugadorMano.
	pie := unJugadorPie.! !

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 18:31:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 18:31:15'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 18:31:39'!
test03ElJugadorPieNoDebeTenerCartasRepetidas
	
	| jugadorMano jugadorPie |
	jugadorMano := {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco anchoDeBasto.}.
	jugadorPie := {CartaDeTruco sieteDeOro . CartaDeTruco oroCon: 3. CartaDeTruco oroCon: 3.}.
	
	self should: [RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: RondaDeTruco noSePuedeJugarConMasDeUnMazoDescripcionDeError.
		].! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 18:31:44'!
test04ElJugadorPieNoDebeTenerCartasRepetidas
	
	| jugadorMano jugadorPie |
	jugadorMano := {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco anchoDeBasto.}.
	jugadorPie := {CartaDeTruco sieteDeOro . CartaDeTruco oroCon: 3. CartaDeTruco oroCon: 3.}.
	
	self should: [RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: RondaDeTruco noSePuedeJugarConMasDeUnMazoDescripcionDeError.
		].! !

!methodRemoval: RondaDeTrucoTest #test03ElJugadorPieNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 18:31:44'!
test03ElJugadorPieNoDebeTenerCartasRepetidas
	
	| jugadorMano jugadorPie |
	jugadorMano := {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco anchoDeBasto.}.
	jugadorPie := {CartaDeTruco sieteDeOro . CartaDeTruco oroCon: 3. CartaDeTruco oroCon: 3.}.
	
	self should: [RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: RondaDeTruco noSePuedeJugarConMasDeUnMazoDescripcionDeError.
		].!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 18:31:46'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 18:32:04' prior: 50863375!
test04ElJugadorPieNoDebeTenerCartasRepetidas
	
	| jugadorMano jugadorPie |
	jugadorMano := {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.}.
	jugadorPie := {CartaDeTruco sieteDeOro . CartaDeTruco oroCon: 3. CartaDeTruco oroCon: 3.}.
	
	self should: [RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: RondaDeTruco noSePuedeJugarConMasDeUnMazoDescripcionDeError.
		].! !

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 18:32:06'!
FAILURE!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 18:32:06'!
FAILURE!
!RondaDeTruco methodsFor: 'initialization' stamp: 'BAG 7/5/2021 18:33:02' prior: 50863332!
initializeComienzaConMano: unJugadorMano yPie: unJugadorPie 
	(unJugadorMano first = unJugadorMano second or: (unJugadorMano first = (unJugadorMano at:3)) or: ((unJugadorMano at:3) = unJugadorMano second)) ifTrue:[ self error: self class noSePuedeJugarConMasDeUnMazoDescripcionDeError].
	(unJugadorPie first = unJugadorPie second or: (unJugadorPie first = (unJugadorPie at:3)) or: ((unJugadorPie at:3) = unJugadorPie second)) ifTrue:[ self error: self class noSePuedeJugarConMasDeUnMazoDescripcionDeError].
	self tienen3CartasElJugadorMano: unJugadorMano elJugadorPie: unJugadorPie.
		
	mano := unJugadorMano.
	pie := unJugadorPie.! !

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 18:33:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 18:33:06'!
PASSED!
!RondaDeTruco methodsFor: 'initialization' stamp: 'BAG 7/5/2021 18:33:41' prior: 50863446!
initializeComienzaConMano: unJugadorMano yPie: unJugadorPie 
	(unJugadorMano first = unJugadorMano second or: (unJugadorMano first = (unJugadorMano at:3)) or: ((unJugadorMano at:3) = unJugadorMano second)) ifTrue:[ self error: self class noSePuedeJugarConMasDeUnMazoDescripcionDeError].
	(unJugadorPie first = unJugadorPie second or: (unJugadorPie first = (unJugadorPie at:3)) or: ((unJugadorPie at:3) = unJugadorPie second)) ifTrue:[ self error: self class noSePuedeJugarConMasDeUnMazoDescripcionDeError].
	self esUnJugadorValido: unJugadorMano.
	self esUnJugadorValido: unJugadorPie.
	self tienen3CartasElJugadorMano: unJugadorMano elJugadorPie: unJugadorPie.
		
	mano := unJugadorMano.
	pie := unJugadorPie.! !
!RondaDeTruco methodsFor: 'initialization' stamp: 'BAG 7/5/2021 18:34:20'!
esUnJugadorValido: unJugadorMano
	(unJugadorMano first = unJugadorMano second or: (unJugadorMano first = (unJugadorMano at:3)) or: ((unJugadorMano at:3) = unJugadorMano second)) ifTrue:[ self error: self class noSePuedeJugarConMasDeUnMazoDescripcionDeError].
	
	! !
!RondaDeTruco methodsFor: 'initialization' stamp: 'BAG 7/5/2021 18:34:38' prior: 50863501!
esUnJugadorValido: unJugadorMano
	(unJugadorMano first = unJugadorMano second or: (unJugadorMano first = (unJugadorMano at:3)) or: ((unJugadorMano at:3) = unJugadorMano second)) ifTrue:[ self error: self class noSePuedeJugarConMasDeUnMazoDescripcionDeError].
	
	(unJugadorMano size = 3) ifFalse:[self error: self class algunJugadorNoTiene3CartasDescripcionDeError]
	
	! !
!RondaDeTruco methodsFor: 'initialization' stamp: 'BAG 7/5/2021 18:34:41' prior: 50863513!
esUnJugadorValido: unJugador
	(unJugador first = unJugador second or: (unJugador first = (unJugador at:3)) or: ((unJugador at:3) = unJugador second)) ifTrue:[ self error: self class noSePuedeJugarConMasDeUnMazoDescripcionDeError].
	
	(unJugador size = 3) ifFalse:[self error: self class algunJugadorNoTiene3CartasDescripcionDeError]
	
	! !
!RondaDeTruco methodsFor: 'initialization' stamp: 'BAG 7/5/2021 18:35:01' prior: 50863528!
esUnJugadorValido: unJugador
	(unJugador first = unJugador second 
	or: (unJugador first = (unJugador at:3)) 
	or: ((unJugador at:3) = unJugador second)) ifTrue:[ self error: self class noSePuedeJugarConMasDeUnMazoDescripcionDeError].
	
	(unJugador size = 3) ifFalse:[self error: self class algunJugadorNoTiene3CartasDescripcionDeError]
	
	! !
!RondaDeTruco methodsFor: 'initialization' stamp: 'BAG 7/5/2021 18:35:13' prior: 50863476!
initializeComienzaConMano: unJugadorMano yPie: unJugadorPie 
	self esUnJugadorValido: unJugadorMano.
	self esUnJugadorValido: unJugadorPie.
		
	mano := unJugadorMano.
	pie := unJugadorPie.! !

!methodRemoval: RondaDeTruco #tienen3CartasElJugadorMano:elJugadorPie: stamp: 'BAG 7/5/2021 18:35:16'!
tienen3CartasElJugadorMano: unJugadorMano elJugadorPie: unJugadorPie
	(unJugadorMano size = 3 and: unJugadorPie size = 3) ifFalse:[self error: self class algunJugadorNoTiene3CartasDescripcionDeError]
	 !

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'BAG 7/5/2021 18:35:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'BAG 7/5/2021 18:35:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'BAG 7/5/2021 18:35:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'BAG 7/5/2021 18:35:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'BAG 7/5/2021 18:35:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'BAG 7/5/2021 18:35:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'BAG 7/5/2021 18:35:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'BAG 7/5/2021 18:35:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'BAG 7/5/2021 18:35:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'BAG 7/5/2021 18:35:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'BAG 7/5/2021 18:35:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'BAG 7/5/2021 18:35:29'!
ERROR!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'BAG 7/5/2021 18:35:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'BAG 7/5/2021 18:35:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'BAG 7/5/2021 18:35:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'BAG 7/5/2021 18:35:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'BAG 7/5/2021 18:35:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'BAG 7/5/2021 18:35:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'BAG 7/5/2021 18:35:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 18:35:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 18:35:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 18:35:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 18:35:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'BAG 7/5/2021 18:35:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 18:35:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 18:35:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'BAG 7/5/2021 18:35:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'BAG 7/5/2021 18:35:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'BAG 7/5/2021 18:35:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'BAG 7/5/2021 18:35:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'BAG 7/5/2021 18:35:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'BAG 7/5/2021 18:35:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'BAG 7/5/2021 18:35:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'BAG 7/5/2021 18:35:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'BAG 7/5/2021 18:35:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'BAG 7/5/2021 18:35:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'BAG 7/5/2021 18:35:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'BAG 7/5/2021 18:35:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'BAG 7/5/2021 18:35:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'BAG 7/5/2021 18:35:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'BAG 7/5/2021 18:35:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'BAG 7/5/2021 18:35:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'BAG 7/5/2021 18:35:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'BAG 7/5/2021 18:35:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'BAG 7/5/2021 18:35:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 18:35:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 18:35:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 18:35:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 18:35:36'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 18:38:16'!
test05ElJugadorManoJuegaPrimero
	
	| jugadorMano jugadorPie ronda |
	jugadorMano := {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.}.
	jugadorPie := {CartaDeTruco sieteDeOro . CartaDeTruco oroCon: 3. CartaDeTruco oroCon: 3.}.
	
	ronda := RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	self assert: jugadorMano equals: ronda juegaPrimero.! !

!testRun: #RondaDeTrucoTest #test05ElJugadorManoJuegaPrimero stamp: 'BAG 7/5/2021 18:38:25'!
ERROR!

!testRun: #RondaDeTrucoTest #test05ElJugadorManoJuegaPrimero stamp: 'BAG 7/5/2021 18:38:25'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 18:40:18'!
test05NoDebeHaberCartasRepetidasEntreJugadores
	
	| jugadorMano jugadorPie ronda |
	jugadorMano := {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.}.
	jugadorPie := {CartaDeTruco sieteDeOro . CartaDeTruco sieteDeEspada. CartaDeTruco anchoDeEspada.}.
	
	ronda := RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	self assert: jugadorMano equals: ronda juegaPrimero.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 18:40:50' prior: 50863766!
test05NoDebeHaberCartasRepetidasEntreJugadores
	
	| jugadorMano jugadorPie |
	jugadorMano := {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.}.
	jugadorPie := {CartaDeTruco sieteDeOro . CartaDeTruco sieteDeEspada. CartaDeTruco anchoDeEspada.}.
	
	self should: [RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: RondaDeTruco noSePuedeJugarConMasDeUnMazoDescripcionDeError.
		].! !

!methodRemoval: RondaDeTrucoTest #test05ElJugadorManoJuegaPrimero stamp: 'BAG 7/5/2021 18:40:58'!
test05ElJugadorManoJuegaPrimero
	
	| jugadorMano jugadorPie ronda |
	jugadorMano := {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.}.
	jugadorPie := {CartaDeTruco sieteDeOro . CartaDeTruco oroCon: 3. CartaDeTruco oroCon: 3.}.
	
	ronda := RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	self assert: jugadorMano equals: ronda juegaPrimero.!

!testRun: #RondaDeTrucoTest #test05NoDebeHaberCartasRepetidasEntreJugadores stamp: 'BAG 7/5/2021 18:41:05'!
FAILURE!

!testRun: #RondaDeTrucoTest #test05NoDebeHaberCartasRepetidasEntreJugadores stamp: 'BAG 7/5/2021 18:41:05'!
FAILURE!
!RondaDeTruco methodsFor: 'initialization' stamp: 'BAG 7/5/2021 18:43:12' prior: 50863556!
initializeComienzaConMano: unJugadorMano yPie: unJugadorPie 
	(unJugadorMano noneSatisfy: [:carta | unJugadorPie includes: carta]) ifTrue:[self error: self class noSePuedeJugarConMasDeUnMazoDescripcionDeError ].
	self esUnJugadorValido: unJugadorMano.
	self esUnJugadorValido: unJugadorPie.
		
	mano := unJugadorMano.
	pie := unJugadorPie.! !

!testRun: #RondaDeTrucoTest #test05NoDebeHaberCartasRepetidasEntreJugadores stamp: 'BAG 7/5/2021 18:43:14'!
FAILURE!

(unJugadorMano noneSatisfy: [:carta | unJugadorPie includes: carta])!

(unJugadorMano noneSatisfy: [:carta | unJugadorPie includes: carta]) ifTrue:[self error: self class noSePuedeJugarConMasDeUnMazoDescripcionDeError ].!

(unJugadorMano includes: unJugadorPie second)!
!RondaDeTruco methodsFor: 'initialization' stamp: 'BAG 7/5/2021 18:46:54' prior: 50863826!
initializeComienzaConMano: unJugadorMano yPie: unJugadorPie 
	((unJugadorMano includes: unJugadorPie first) or: (unJugadorMano includes: unJugadorPie second) or: ((unJugadorMano includes: (unJugadorPie at:3)))) ifTrue:[self error: self class noSePuedeJugarConMasDeUnMazoDescripcionDeError ].
	
	self esUnJugadorValido: unJugadorMano.
	self esUnJugadorValido: unJugadorPie.
		
	mano := unJugadorMano.
	pie := unJugadorPie.! !

!testRun: #RondaDeTrucoTest #test05NoDebeHaberCartasRepetidasEntreJugadores stamp: 'BAG 7/5/2021 18:46:56'!
PASSED!

!testRun: #RondaDeTrucoTest #test05NoDebeHaberCartasRepetidasEntreJugadores stamp: 'BAG 7/5/2021 18:46:59'!
PASSED!
!RondaDeTruco methodsFor: 'initialization' stamp: 'BAG 7/5/2021 18:47:48'!
sonValidosJugadorMano: unJugadorMano jugadorPie: unJugadorPie

	((unJugadorMano includes: unJugadorPie first) or: (unJugadorMano includes: unJugadorPie second) or: ((unJugadorMano includes: (unJugadorPie at:3)))) ifTrue:[self error: self class noSePuedeJugarConMasDeUnMazoDescripcionDeError ].
	
	self esUnJugadorValido: unJugadorMano.
	self esUnJugadorValido: unJugadorPie! !
!RondaDeTruco methodsFor: 'initialization' stamp: 'BAG 7/5/2021 18:47:48' prior: 50863852!
initializeComienzaConMano: unJugadorMano yPie: unJugadorPie 
	self sonValidosJugadorMano: unJugadorMano jugadorPie: unJugadorPie.
		
	mano := unJugadorMano.
	pie := unJugadorPie.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 18:49:29'!
test06ElJugadorManoDebeComenzarPrimero
	| jugadorMano jugadorPie ronda |
	
	jugadorMano := {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.}.
	jugadorPie := {CartaDeTruco sieteDeOro . CartaDeTruco sieteDeEspada. CartaDeTruco anchoDeEspada.}.
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	self assert: jugadorMano equals: ronda juegaPrimero.! !

!testRun: #RondaDeTrucoTest #test06ElJugadorManoDebeComenzarPrimero stamp: 'BAG 7/5/2021 18:49:38'!
ERROR!

!testRun: #RondaDeTrucoTest #test06ElJugadorManoDebeComenzarPrimero stamp: 'BAG 7/5/2021 18:49:38'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 18:50:01' prior: 50863899!
test06ElJugadorManoDebeComenzarPrimero
	| jugadorMano jugadorPie ronda |
	
	jugadorMano := {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.}.
	jugadorPie := {CartaDeTruco sieteDeOro . CartaDeTruco oroCon: 3. CartaDeTruco bastoCon: 4.}.
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	self assert: jugadorMano equals: ronda juegaPrimero.! !

!testRun: #RondaDeTrucoTest #test06ElJugadorManoDebeComenzarPrimero stamp: 'BAG 7/5/2021 18:50:05'!
ERROR!

!testRun: #RondaDeTrucoTest #test06ElJugadorManoDebeComenzarPrimero stamp: 'BAG 7/5/2021 18:50:05'!
ERROR!
!RondaDeTruco methodsFor: 'accessing' stamp: 'BAG 7/5/2021 18:50:16'!
juegaPrimero
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'accessing' stamp: 'BAG 7/5/2021 18:50:25' prior: 50863944!
juegaPrimero
	^mano copy.! !
!RondaDeTruco methodsFor: 'accessing' stamp: 'BAG 7/5/2021 18:50:30' prior: 50863949!
juegaPrimero
	^mano.! !

!testRun: #RondaDeTrucoTest #test06ElJugadorManoDebeComenzarPrimero stamp: 'BAG 7/5/2021 18:50:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test06ElJugadorManoDebeComenzarPrimero stamp: 'BAG 7/5/2021 18:50:36'!
PASSED!

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'BAG 7/5/2021 18:52:18'!
Object subclass: #Jugador
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 18:52:13' prior: 50863922!
test06ElJugadorManoDebeComenzarPrimero
	| jugadorMano jugadorPie ronda |
	
	jugadorMano := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.}.
	jugadorPie := Jugador con: {CartaDeTruco sieteDeOro . CartaDeTruco oroCon: 3. CartaDeTruco bastoCon: 4.}.
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	self assert: jugadorMano equals: ronda juegaPrimero.! !
!Jugador class methodsFor: 'no messages' stamp: 'BAG 7/5/2021 18:53:06'!
con: coleccionDeCartas
	^self new initializeCon: coleccionDeCartas. ! !

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'BAG 7/5/2021 18:57:51'!
Object subclass: #Jugador
	instanceVariableNames: 'cartas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Jugador methodsFor: 'nil' stamp: 'BAG 7/5/2021 18:57:48'!
initializeCon: coleccionDeCartas
	cartas := coleccionDeCartas ! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 18:59:43' prior: 50863971!
test06ElJugadorManoDebeComenzarPrimero
	| jugadorMano jugadorPie ronda |
	
	jugadorMano := {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.}.
	jugadorPie := {CartaDeTruco sieteDeOro . CartaDeTruco oroCon: 3. CartaDeTruco bastoCon: 4.}.
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	self assert: jugadorMano equals: ronda juegaPrimero.! !

!classRemoval: #Jugador stamp: 'BAG 7/5/2021 18:59:49'!
Object subclass: #Jugador
	instanceVariableNames: 'cartas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 19:03:33'!
test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero
	| jugadorMano jugadorPie ronda primerEnfrentamiento |
	
	jugadorMano := {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.}.
	jugadorPie := {CartaDeTruco sieteDeOro . CartaDeTruco oroCon: 3. CartaDeTruco bastoCon: 4.}.
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	primerEnfrentamiento := ronda jugar.
	
	self assert: jugadorMano equals: primerEnfrentamiento ganador.
	self assert: jugadorMano equals: ronda juegaPrimero.! !

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 19:03:43'!
ERROR!

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 19:03:43'!
ERROR!
!RondaDeTruco methodsFor: 'enfrentamientos' stamp: 'BAG 7/5/2021 19:03:58'!
jugar
	self shouldBeImplemented.! !

!classDefinition: #Enfrentamiento category: 'ISW1-2021-1C-2doParcial' stamp: 'BAG 7/5/2021 19:08:28'!
Object subclass: #Enfrentamiento
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'enfrentamientos' stamp: 'BAG 7/5/2021 19:08:20' prior: 50864056!
jugar
	| enfrentamientoActual |
	
	enfrentamientoActual := Enfrentamiento entre: mano y: pie.
	
	^enfrentamientoActual. 
	
	! !

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 19:08:51'!
ERROR!
!Enfrentamiento class methodsFor: 'instance creation' stamp: 'BAG 7/5/2021 19:08:58'!
entre: anArray y: anArray2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeEntre: anArray y: anArray2 ! !
!Enfrentamiento class methodsFor: 'instance creation' stamp: 'BAG 7/5/2021 19:09:24' prior: 50864079!
entre: unJugadorMano y: unJugadorPie 
	^self new initializeEntre: unJugadorMano y: unJugadorPie ! !

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 19:09:28'!
ERROR!

!classDefinition: #Enfrentamiento category: 'ISW1-2021-1C-2doParcial' stamp: 'BAG 7/5/2021 19:09:39'!
Object subclass: #Enfrentamiento
	instanceVariableNames: 'unJugadorMano_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Enfrentamiento category: 'ISW1-2021-1C-2doParcial' stamp: 'BAG 7/5/2021 19:09:39'!
Object subclass: #Enfrentamiento
	instanceVariableNames: 'unJugadorMano_CHANGE_ME unJugadorPie_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Enfrentamiento methodsFor: 'initialization' stamp: 'BAG 7/5/2021 19:09:39'!
initializeEntre: unJugadorMano y: unJugadorPie 
	self shouldBeImplemented.
	unJugadorMano_CHANGE_ME := unJugadorMano.
	unJugadorPie_CHANGE_ME := unJugadorPie.! !
!Enfrentamiento methodsFor: 'initialization' stamp: 'BAG 7/5/2021 19:09:42' prior: 50864116!
initializeEntre: unJugadorMano y: unJugadorPie 
	unJugadorMano_CHANGE_ME := unJugadorMano.
	unJugadorPie_CHANGE_ME := unJugadorPie.! !

!classDefinition: #Enfrentamiento category: 'ISW1-2021-1C-2doParcial' stamp: 'BAG 7/5/2021 19:09:53'!
Object subclass: #Enfrentamiento
	instanceVariableNames: 'juegaPrimero unJugadorPie_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 19:09:53' prior: 50864124!
initializeEntre: unJugadorMano y: unJugadorPie 
	juegaPrimero := unJugadorMano.
	unJugadorPie_CHANGE_ME := unJugadorPie.! !

!classDefinition: #Enfrentamiento category: 'ISW1-2021-1C-2doParcial' stamp: 'BAG 7/5/2021 19:10:12'!
Object subclass: #Enfrentamiento
	instanceVariableNames: 'juegaPrimero unJugadorPie_CHANGE_ME juegaSegundo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Enfrentamiento methodsFor: 'initialization' stamp: 'BAG 7/5/2021 19:10:11' prior: 50864141!
initializeEntre: unJugadorMano y: unJugadorPie 
	juegaPrimero := unJugadorMano.
	juegaSegundo := unJugadorPie.! !

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 19:10:22'!
ERROR!
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 19:10:57'!
ganador
	self shouldBeImplemented.! !

!classDefinition: #Enfrentamiento category: 'ISW1-2021-1C-2doParcial' stamp: 'BAG 7/5/2021 19:17:21'!
Object subclass: #Enfrentamiento
	instanceVariableNames: 'juegaPrimero unJugadorPie_CHANGE_ME juegaSegundo ganador'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 19:17:39' prior: 50864168!
ganador
	| primerCarta segundaCarta |
	primerCarta := juegaPrimero juegaUnaCarta.
	segundaCarta := juegaSegundo juegaUnaCarta.
	
	(primerCarta mataA: segundaCarta) ifTrue: [ ganador := juegaPrimero].
	(segundaCarta  mataA:  primerCarta) ifTrue: [ ganador := juegaSegundo].
	
	^ganador
	! !

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 19:17:53'!
ERROR!
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 19:18:44' prior: 50864182!
ganador
	| primerCarta segundaCarta |
	primerCarta := juegaPrimero first.
	juegaPrimero removeFirst. 
	segundaCarta := juegaSegundo first.
	juegaSegundo removeFirst.
	
	(primerCarta mataA: segundaCarta) ifTrue: [ ganador := juegaPrimero].
	(segundaCarta  mataA:  primerCarta) ifTrue: [ ganador := juegaSegundo].
	
	^ganador
	! !

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 19:18:46'!
ERROR!
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 19:19:19' prior: 50864199!
ganador
	| primerCarta segundaCarta |
	primerCarta := juegaPrimero last.
	juegaPrimero removeLast. 
	segundaCarta := juegaSegundo last.
	juegaSegundo removeLast.
	
	(primerCarta mataA: segundaCarta) ifTrue: [ ganador := juegaPrimero].
	(segundaCarta  mataA:  primerCarta) ifTrue: [ ganador := juegaSegundo].
	
	^ganador
	! !

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 19:19:20'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 19:20:41' prior: 50864027!
test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero
	| jugadorMano jugadorPie ronda primerEnfrentamiento |
	
	jugadorMano := {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.} asOrderedCollection .
	jugadorPie := {CartaDeTruco sieteDeOro . CartaDeTruco oroCon: 3. CartaDeTruco bastoCon: 4.} asOrderedCollection.
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	primerEnfrentamiento := ronda jugar.
	
	self assert: jugadorMano equals: primerEnfrentamiento ganador.
	self assert: jugadorMano equals: ronda juegaPrimero.! !

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 19:20:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 19:20:47'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 19:20:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'BAG 7/5/2021 19:20:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'BAG 7/5/2021 19:20:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'BAG 7/5/2021 19:20:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'BAG 7/5/2021 19:20:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'BAG 7/5/2021 19:20:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'BAG 7/5/2021 19:20:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'BAG 7/5/2021 19:20:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'BAG 7/5/2021 19:20:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'BAG 7/5/2021 19:20:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'BAG 7/5/2021 19:20:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'BAG 7/5/2021 19:20:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'BAG 7/5/2021 19:20:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'BAG 7/5/2021 19:20:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'BAG 7/5/2021 19:20:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'BAG 7/5/2021 19:20:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'BAG 7/5/2021 19:20:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'BAG 7/5/2021 19:20:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'BAG 7/5/2021 19:20:50'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'BAG 7/5/2021 19:20:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 19:20:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 19:20:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 19:20:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 19:20:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test05NoDebeHaberCartasRepetidasEntreJugadores stamp: 'BAG 7/5/2021 19:20:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test06ElJugadorManoDebeComenzarPrimero stamp: 'BAG 7/5/2021 19:20:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 19:20:50'!
PASSED!

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'BAG 7/5/2021 19:21:12'!
Object subclass: #Jugador
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 19:21:08' prior: 50864235!
test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero
	| jugadorMano jugadorPie ronda primerEnfrentamiento |
	
	jugadorMano := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.} .
	jugadorPie := Jugador con: {CartaDeTruco sieteDeOro . CartaDeTruco oroCon: 3. CartaDeTruco bastoCon: 4.}.
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	primerEnfrentamiento := ronda jugar.
	
	self assert: jugadorMano equals: primerEnfrentamiento ganador.
	self assert: jugadorMano equals: ronda juegaPrimero.! !
!Jugador class methodsFor: 'nil' stamp: 'BAG 7/5/2021 19:21:57'!
con: unaColeccionDeCartas
	^self new initializeCon: unaColeccionDeCartas .! !

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'BAG 7/5/2021 19:22:15'!
Object subclass: #Jugador
	instanceVariableNames: 'cartas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Jugador methodsFor: 'no messages' stamp: 'BAG 7/5/2021 19:22:13'!
initializeCon: unaColeccionDeCartas
	cartas := unaColeccionDeCartas ! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 19:22:47' prior: 50860038!
test01ElJugadorManoSoloDebeTener3Cartas 
	
	| jugadorMano jugadorPie |
	jugadorMano := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada. CartaDeTruco sieteDeEspada.}.
	jugadorPie := Jugador con: {CartaDeTruco sieteDeOro . CartaDeTruco bastoCon: 4. CartaDeTruco oroCon: 3. CartaDeTruco sieteDeEspada.}.
	
	self should: [RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: RondaDeTruco algunJugadorNoTiene3CartasDescripcionDeError.
		].! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 19:22:50'!
ERROR!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 19:22:50'!
ERROR!
!RondaDeTruco methodsFor: 'initialization' stamp: 'BAG 7/5/2021 19:25:15' prior: 50863875!
sonValidosJugadorMano: unJugadorMano jugadorPie: unJugadorPie
	(unJugadorMano noTieneCartasDe:unJugadorPie cartas) ifTrue:[self error: self class noSePuedeJugarConMasDeUnMazoDescripcionDeError ].
	
	self esUnJugadorValido: unJugadorMano.
	self esUnJugadorValido: unJugadorPie! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 19:25:45'!
ERROR!
!Jugador methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 19:25:52'!
cartas
	self shouldBeImplemented.
	^cartas! !
!Jugador methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 19:25:56' prior: 50864451!
cartas
	
	^cartas! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 19:25:59'!
ERROR!
!Jugador methodsFor: 'testing' stamp: 'BAG 7/5/2021 19:26:12'!
noTieneCartasDe: anArray 
	self shouldBeImplemented.! !
!Jugador methodsFor: 'testing' stamp: 'BAG 7/5/2021 19:26:51' prior: 50864463!
noTieneCartasDe: unaColeccionDeCartas
	 
	! !
!Jugador methodsFor: 'testing' stamp: 'BAG 7/5/2021 19:27:49' prior: 50864468!
noTieneCartasDe: unaColeccionDeCartas
	^unaColeccionDeCartas noneSatisfy: [:carta | cartas includes: carta].
	! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 19:27:51'!
ERROR!
!RondaDeTruco methodsFor: 'initialization' stamp: 'BAG 7/5/2021 19:29:33' prior: 50863542!
esUnJugadorValido: unJugador
	unJugador noTieneCartasRepetidasEnLaRonda: self.
	
	(unJugador size = 3) ifFalse:[self error: self class algunJugadorNoTiene3CartasDescripcionDeError]
	
	! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 19:29:38'!
ERROR!
!Jugador methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 19:29:52'!
noTieneCartasRepetidasEnLaRonda: aRondaDeTruco 
	self shouldBeImplemented.! !
!Jugador methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 19:33:51' prior: 50864494!
noTieneCartasRepetidasEnLaRonda: aRondaDeTruco 
	^cartas allSatisfy: [:carta | (cartas occurrencesOf: carta) = 1] ! !
!RondaDeTruco methodsFor: 'initialization' stamp: 'BAG 7/5/2021 19:34:11' prior: 50864482!
esUnJugadorValido: unJugador
	(unJugador noTieneCartasRepetidasEnLaRonda: self) ifTrue:[self error: self class noSePuedeJugarConMasDeUnMazoDescripcionDeError.].
	
	(unJugador size = 3) ifFalse:[self error: self class algunJugadorNoTiene3CartasDescripcionDeError]
	
	! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 19:34:15'!
FAILURE!
!RondaDeTruco methodsFor: 'initialization' stamp: 'BAG 7/5/2021 19:36:08' prior: 50864507!
esUnJugadorValido: unJugador
	(unJugador noTieneCartasRepetidasEnLaRonda: self) ifTrue:[self error: self class noSePuedeJugarConMasDeUnMazoDescripcionDeError.].
	
	(unJugador juegaCon: 3) ifFalse:[self error: self class algunJugadorNoTiene3CartasDescripcionDeError]
	
	! !
!Jugador methodsFor: 'testing' stamp: 'BAG 7/5/2021 19:36:31'!
juegaCon: cantidadDeCartas
	^cantidadDeCartas = cartas size! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 19:36:34'!
PASSED!
!Jugador methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 19:36:56'!
noTieneCartasRepetidasEnLaRonda 
	^cartas allSatisfy: [:carta | (cartas occurrencesOf: carta) = 1] ! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 19:36:56' prior: 50864522!
esUnJugadorValido: unJugador
	(unJugador noTieneCartasRepetidasEnLaRonda) ifTrue:[self error: self class noSePuedeJugarConMasDeUnMazoDescripcionDeError.].
	
	(unJugador juegaCon: 3) ifFalse:[self error: self class algunJugadorNoTiene3CartasDescripcionDeError]
	
	! !

!methodRemoval: Jugador #noTieneCartasRepetidasEnLaRonda: stamp: 'BAG 7/5/2021 19:36:56'!
noTieneCartasRepetidasEnLaRonda: aRondaDeTruco 
	^cartas allSatisfy: [:carta | (cartas occurrencesOf: carta) = 1] !
!Jugador methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 19:37:08'!
noTieneCartasRepetidas 
	^cartas allSatisfy: [:carta | (cartas occurrencesOf: carta) = 1] ! !

!methodRemoval: Jugador #noTieneCartasRepetidasEnLaRonda stamp: 'BAG 7/5/2021 19:37:08'!
noTieneCartasRepetidasEnLaRonda 
	^cartas allSatisfy: [:carta | (cartas occurrencesOf: carta) = 1] !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 19:38:24' prior: 50860070!
test02ElJugadorPieSoloDebeTener3Cartas 
	
	| jugadorMano jugadorPie |
	jugadorMano := Jugador con:{CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.}.
	jugadorPie := Jugador con:{CartaDeTruco sieteDeOro . CartaDeTruco bastoCon: 4. CartaDeTruco oroCon: 3. CartaDeTruco sieteDeEspada.}.
	
	self should: [RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: RondaDeTruco algunJugadorNoTiene3CartasDescripcionDeError.
		].! !

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 19:38:27'!
ERROR!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 19:38:27'!
ERROR!
!RondaDeTruco methodsFor: 'validaciones' stamp: 'BAG 7/5/2021 19:38:40' prior: 50864548!
esUnJugadorValido: unJugador
	(unJugador noTieneCartasRepetidas) ifTrue:[self error: self class noSePuedeJugarConMasDeUnMazoDescripcionDeError.].
	
	(unJugador juegaCon: 3) ifFalse:[self error: self class algunJugadorNoTiene3CartasDescripcionDeError]
	
	! !

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 19:38:41'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 19:39:13' prior: 50864579!
test02ElJugadorPieSoloDebeTener3Cartas 
	
	| jugadorMano jugadorPie |
	jugadorMano := Jugador con:{CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.}.
	jugadorPie := Jugador con:{CartaDeTruco sieteDeOro . CartaDeTruco bastoCon: 4. CartaDeTruco oroCon: 3. CartaDeTruco copaCon: 4.}.
	
	self should: [RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: RondaDeTruco algunJugadorNoTiene3CartasDescripcionDeError.
		].! !

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 19:39:16'!
FAILURE!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 19:39:16'!
FAILURE!

(unJugadorMano noTieneCartasDe:unJugadorPie cartas)!
!RondaDeTruco methodsFor: 'validaciones' stamp: 'BAG 7/5/2021 19:40:56' prior: 50864436!
sonValidosJugadorMano: unJugadorMano jugadorPie: unJugadorPie
	(unJugadorMano noTieneCartasDe:unJugadorPie cartas) ifFalse:[self error: self class noSePuedeJugarConMasDeUnMazoDescripcionDeError ].
	
	self esUnJugadorValido: unJugadorMano.
	self esUnJugadorValido: unJugadorPie! !

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 19:40:57'!
FAILURE!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 19:41:04'!
FAILURE!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 19:41:04'!
FAILURE!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 19:41:17'!
FAILURE!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 19:41:17'!
FAILURE!
!RondaDeTruco methodsFor: 'validaciones' stamp: 'BAG 7/5/2021 19:43:08' prior: 50864652!
sonValidosJugadorMano: unJugadorMano jugadorPie: unJugadorPie
	self esUnJugadorValido: unJugadorMano.
	self esUnJugadorValido: unJugadorPie.
	
	(unJugadorMano noTieneCartasDe:unJugadorPie cartas) ifFalse:[self error: self class noSePuedeJugarConMasDeUnMazoDescripcionDeError ].! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 19:43:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 19:43:15'!
FAILURE!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 19:43:15'!
FAILURE!
!RondaDeTruco methodsFor: 'validaciones' stamp: 'BAG 7/5/2021 19:44:01' prior: 50864607!
esUnJugadorValido: unJugador
	(unJugador juegaCon: 3) ifFalse:[self error: self class algunJugadorNoTiene3CartasDescripcionDeError].
	(unJugador noTieneCartasRepetidas) ifTrue:[self error: self class noSePuedeJugarConMasDeUnMazoDescripcionDeError.]

	
	! !

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 19:44:02'!
FAILURE!
!RondaDeTruco methodsFor: 'validaciones' stamp: 'BAG 7/5/2021 19:44:36' prior: 50864703!
esUnJugadorValido: unJugador
	(unJugador juegaCon: 3) ifFalse:[self error: self class algunJugadorNoTiene3CartasDescripcionDeError].
	(unJugador noTieneCartasRepetidas) ifFalse:[self error: self class noSePuedeJugarConMasDeUnMazoDescripcionDeError.]

	
	! !

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 19:44:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 19:44:41'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 19:44:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 19:44:44'!
ERROR!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 19:44:44'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 19:45:01' prior: 50860164!
test03ElJugadorManoNoDebeTenerCartasRepetidas
	
	| jugadorMano jugadorPie |
	jugadorMano := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco anchoDeEspada.}.
	jugadorPie := Jugador con: {CartaDeTruco sieteDeOro . CartaDeTruco bastoCon: 4. CartaDeTruco oroCon: 3.}.
	
	self should: [RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: RondaDeTruco noSePuedeJugarConMasDeUnMazoDescripcionDeError.
		].! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 19:45:08' prior: 50863419!
test04ElJugadorPieNoDebeTenerCartasRepetidas
	
	| jugadorMano jugadorPie |
	jugadorMano := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.}.
	jugadorPie := {CartaDeTruco sieteDeOro . CartaDeTruco oroCon: 3. CartaDeTruco oroCon: 3.}.
	
	self should: [RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: RondaDeTruco noSePuedeJugarConMasDeUnMazoDescripcionDeError.
		].! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 19:45:11' prior: 50864768!
test04ElJugadorPieNoDebeTenerCartasRepetidas
	
	| jugadorMano jugadorPie |
	jugadorMano := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.}.
	jugadorPie :=  {CartaDeTruco sieteDeOro . CartaDeTruco oroCon: 3. CartaDeTruco oroCon: 3.}.
	
	self should: [RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: RondaDeTruco noSePuedeJugarConMasDeUnMazoDescripcionDeError.
		].! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 19:45:14' prior: 50864788!
test04ElJugadorPieNoDebeTenerCartasRepetidas
	
	| jugadorMano jugadorPie |
	jugadorMano := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.}.
	jugadorPie := Jugador con: {CartaDeTruco sieteDeOro . CartaDeTruco oroCon: 3. CartaDeTruco oroCon: 3.}.
	
	self should: [RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: RondaDeTruco noSePuedeJugarConMasDeUnMazoDescripcionDeError.
		].! !

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 19:45:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 19:45:18'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 19:45:26' prior: 50863783!
test05NoDebeHaberCartasRepetidasEntreJugadores
	
	| jugadorMano jugadorPie |
	jugadorMano := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.}.
	jugadorPie := Jugador con: {CartaDeTruco sieteDeOro . CartaDeTruco sieteDeEspada. CartaDeTruco anchoDeEspada.}.
	
	self should: [RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: RondaDeTruco noSePuedeJugarConMasDeUnMazoDescripcionDeError.
		].! !

!testRun: #RondaDeTrucoTest #test05NoDebeHaberCartasRepetidasEntreJugadores stamp: 'BAG 7/5/2021 19:45:29'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 19:45:36' prior: 50864005!
test06ElJugadorManoDebeComenzarPrimero
	| jugadorMano jugadorPie ronda |
	
	jugadorMano := Jugador con:{CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.}.
	jugadorPie := Jugador con:{CartaDeTruco sieteDeOro . CartaDeTruco oroCon: 3. CartaDeTruco bastoCon: 4.}.
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	self assert: jugadorMano equals: ronda juegaPrimero.! !

!testRun: #RondaDeTrucoTest #test06ElJugadorManoDebeComenzarPrimero stamp: 'BAG 7/5/2021 19:45:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 19:45:49'!
ERROR!

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 19:45:49'!
ERROR!
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 19:46:18' prior: 50864217!
ganador
	| primerCarta segundaCarta |
	primerCarta := juegaPrimero juegaUnaCarta.
	segundaCarta := juegaSegundo juegaUnaCarta.
	
	(primerCarta mataA: segundaCarta) ifTrue: [ ganador := juegaPrimero].
	(segundaCarta  mataA:  primerCarta) ifTrue: [ ganador := juegaSegundo].
	
	^ganador
	! !

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 19:46:21'!
ERROR!
!Jugador methodsFor: 'jugar' stamp: 'BAG 7/5/2021 19:46:33'!
juegaUnaCarta
	self shouldBeImplemented.! !
!Jugador methodsFor: 'jugar' stamp: 'BAG 7/5/2021 19:48:42' prior: 50864907!
juegaUnaCarta
	| cartaAJugar |
	cartaAJugar := cartas anyOne.
	cartas remove: cartaAJugar.
	
	^cartaAJugar ! !

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 19:48:49'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 19:49:26' prior: 50864368!
test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero
	| jugadorMano jugadorPie ronda primerEnfrentamiento |
	
	jugadorMano := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.} asOrderedCollection.
	jugadorPie := Jugador con: {CartaDeTruco sieteDeOro . CartaDeTruco oroCon: 3. CartaDeTruco bastoCon: 4.} asOrderedCollection .
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	primerEnfrentamiento := ronda jugar.
	
	self assert: jugadorMano equals: primerEnfrentamiento ganador.
	self assert: jugadorMano equals: ronda juegaPrimero.! !

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 19:49:29'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 19:49:41' prior: 50864862!
test06ElJugadorManoDebeComenzarPrimero
	| jugadorMano jugadorPie ronda |
	
	jugadorMano := Jugador con:{CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.} asOrderedCollection.
	jugadorPie := Jugador con:{CartaDeTruco sieteDeOro . CartaDeTruco oroCon: 3. CartaDeTruco bastoCon: 4.} asOrderedCollection.
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	self assert: jugadorMano equals: ronda juegaPrimero.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 19:49:46' prior: 50864837!
test05NoDebeHaberCartasRepetidasEntreJugadores
	
	| jugadorMano jugadorPie |
	jugadorMano := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.} asOrderedCollection.
	jugadorPie := Jugador con: {CartaDeTruco sieteDeOro . CartaDeTruco sieteDeEspada. CartaDeTruco anchoDeEspada.}.
	
	self should: [RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: RondaDeTruco noSePuedeJugarConMasDeUnMazoDescripcionDeError.
		].! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 19:49:47' prior: 50864967!
test05NoDebeHaberCartasRepetidasEntreJugadores
	
	| jugadorMano jugadorPie |
	jugadorMano := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.} asOrderedCollection.
	jugadorPie := Jugador con: {CartaDeTruco sieteDeOro . CartaDeTruco sieteDeEspada. CartaDeTruco anchoDeEspada.} asOrderedCollection.
	
	self should: [RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: RondaDeTruco noSePuedeJugarConMasDeUnMazoDescripcionDeError.
		].! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 19:49:53' prior: 50864809!
test04ElJugadorPieNoDebeTenerCartasRepetidas
	
	| jugadorMano jugadorPie |
	jugadorMano := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.} asOrderedCollection.
	jugadorPie := Jugador con: {CartaDeTruco sieteDeOro . CartaDeTruco oroCon: 3. CartaDeTruco oroCon: 3.} asOrderedCollection.
	
	self should: [RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: RondaDeTruco noSePuedeJugarConMasDeUnMazoDescripcionDeError.
		].! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 19:49:59' prior: 50864747!
test03ElJugadorManoNoDebeTenerCartasRepetidas
	
	| jugadorMano jugadorPie |
	jugadorMano := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco anchoDeEspada.} asOrderedCollection.
	jugadorPie := Jugador con: {CartaDeTruco sieteDeOro . CartaDeTruco bastoCon: 4. CartaDeTruco oroCon: 3.} asOrderedCollection.
	
	self should: [RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: RondaDeTruco noSePuedeJugarConMasDeUnMazoDescripcionDeError.
		].! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 19:50:03' prior: 50864622!
test02ElJugadorPieSoloDebeTener3Cartas 
	
	| jugadorMano jugadorPie |
	jugadorMano := Jugador con:{CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.} asOrderedCollection.
	jugadorPie := Jugador con:{CartaDeTruco sieteDeOro . CartaDeTruco bastoCon: 4. CartaDeTruco oroCon: 3. CartaDeTruco copaCon: 4.}.
	
	self should: [RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: RondaDeTruco algunJugadorNoTiene3CartasDescripcionDeError.
		].! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 19:50:05' prior: 50865055!
test02ElJugadorPieSoloDebeTener3Cartas 
	
	| jugadorMano jugadorPie |
	jugadorMano := Jugador con:{CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.} asOrderedCollection.
	jugadorPie := Jugador con:{CartaDeTruco sieteDeOro . CartaDeTruco bastoCon: 4. CartaDeTruco oroCon: 3. CartaDeTruco copaCon: 4.} asOrderedCollection.
	
	self should: [RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: RondaDeTruco algunJugadorNoTiene3CartasDescripcionDeError.
		].! !

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 19:50:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 19:50:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 19:50:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 19:50:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 19:50:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test05NoDebeHaberCartasRepetidasEntreJugadores stamp: 'BAG 7/5/2021 19:50:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test06ElJugadorManoDebeComenzarPrimero stamp: 'BAG 7/5/2021 19:50:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 19:50:06'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 19:50:15' prior: 50864407!
test01ElJugadorManoSoloDebeTener3Cartas 
	
	| jugadorMano jugadorPie |
	jugadorMano := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada. CartaDeTruco sieteDeEspada.} asOrderedCollection.
	jugadorPie := Jugador con: {CartaDeTruco sieteDeOro . CartaDeTruco bastoCon: 4. CartaDeTruco oroCon: 3. CartaDeTruco sieteDeEspada.} asOrderedCollection.
	
	self should: [RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: RondaDeTruco algunJugadorNoTiene3CartasDescripcionDeError.
		].! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 19:50:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 19:50:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 19:50:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 19:50:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 19:50:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test05NoDebeHaberCartasRepetidasEntreJugadores stamp: 'BAG 7/5/2021 19:50:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test06ElJugadorManoDebeComenzarPrimero stamp: 'BAG 7/5/2021 19:50:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 19:50:17'!
PASSED!
!Jugador methodsFor: 'jugar' stamp: 'BAG 7/5/2021 19:51:31' prior: 50864911!
juegaUnaCarta
	| cartaAJugar |
	cartaAJugar := cartas first.
	cartas remove: cartaAJugar.
	
	^cartaAJugar ! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 19:51:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 19:51:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 19:51:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 19:51:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test05NoDebeHaberCartasRepetidasEntreJugadores stamp: 'BAG 7/5/2021 19:51:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test06ElJugadorManoDebeComenzarPrimero stamp: 'BAG 7/5/2021 19:51:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 19:51:34'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 19:52:43' prior: 50864922!
test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero
	| jugadorMano jugadorPie ronda primerEnfrentamiento |
	
	jugadorPie := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.} asOrderedCollection.
	jugadorMano := Jugador con: {CartaDeTruco sieteDeOro . CartaDeTruco oroCon: 3. CartaDeTruco bastoCon: 4.} asOrderedCollection .
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	primerEnfrentamiento := ronda jugar.
	
	self assert: jugadorPie equals: primerEnfrentamiento ganador.
	self assert: jugadorPie equals: ronda juegaPrimero.
	self assert: jugadorPie cantidadDeCartas equals: 2.
	self assert: jugadorMano cantidadDeCartas equals: 2.! !
!Jugador methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 19:53:00'!
cantidadDeCartas
	
	^cartas size! !

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 19:53:08'!
FAILURE!
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 19:59:26' prior: 50864891!
ganador
	| primerCarta segundaCarta  |
	primerCarta := juegaPrimero juegaUnaCarta.
	segundaCarta := juegaSegundo juegaUnaCarta.
	
	(segundaCarta  mataA:  primerCarta) ifTrue: [ 
		ganador := juegaSegundo. 
		juegaSegundo := juegaPrimero
		].
	juegaPrimero := ganador.
	
	
	^ganador
	! !

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 19:59:41'!
FAILURE!

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 19:59:41'!
FAILURE!

ronda juegaPrimero!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 20:00:32'!
test08SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero
	| jugadorMano jugadorPie ronda primerEnfrentamiento |
	
	jugadorPie := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.} asOrderedCollection.
	jugadorMano := Jugador con: {CartaDeTruco sieteDeOro . CartaDeTruco oroCon: 3. CartaDeTruco bastoCon: 4.} asOrderedCollection .
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	primerEnfrentamiento := ronda jugar.
	
	self assert: jugadorPie equals: primerEnfrentamiento ganador.
	self assert: jugadorPie equals: ronda juegaPrimero.
	self assert: jugadorPie cantidadDeCartas equals: 2.
	self assert: jugadorMano cantidadDeCartas equals: 2.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 19:49:26' prior: 50865213!
test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero
	| jugadorMano jugadorPie ronda primerEnfrentamiento |
	
	jugadorMano := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.} asOrderedCollection.
	jugadorPie := Jugador con: {CartaDeTruco sieteDeOro . CartaDeTruco oroCon: 3. CartaDeTruco bastoCon: 4.} asOrderedCollection .
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	primerEnfrentamiento := ronda jugar.
	
	self assert: jugadorMano equals: primerEnfrentamiento ganador.
	self assert: jugadorMano equals: ronda juegaPrimero.! !

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 20:00:46'!
FAILURE!

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 20:00:46'!
FAILURE!
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 20:02:44' prior: 50865248!
ganador
	| primerCarta segundaCarta  |
	primerCarta := juegaPrimero juegaUnaCarta.
	segundaCarta := juegaSegundo juegaUnaCarta.
	
	(segundaCarta  mataA:  primerCarta) ifTrue: [ 
		ganador := juegaSegundo. 
		juegaSegundo := juegaPrimero.
		juegaPrimero := ganador.
		].
	(primerCarta mataA: segundaCarta ) ifTrue: [ganador := juegaPrimero].
	
	
	^ganador
	! !

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 20:02:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 20:02:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 20:02:50'!
FAILURE!

!testRun: #RondaDeTrucoTest #test08SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 20:02:50'!
FAILURE!

!testRun: #RondaDeTrucoTest #test08SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 20:03:37'!
FAILURE!

Object subclass: #RondaDeTruco
	instanceVariableNames: 'mano pie enfrentamientos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'BAG 7/5/2021 20:09:05'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'mano pie enfrentamientos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'enfrentamientos' stamp: 'BAG 7/5/2021 20:09:43' prior: 50864068!
jugar
	| enfrentamientoActual |
	
	enfrentamientos add: (Enfrentamiento entre: mano y: pie).
	
	^enfrentamientoActual. 
	
	! !
!RondaDeTruco methodsFor: 'enfrentamientos' stamp: 'BAG 7/5/2021 20:10:11' prior: 50865377!
jugar
	| enfrentamientoActual |
	
	enfrentamientoActual := (Enfrentamiento entre: mano y: pie).
	enfrentamientos add: enfrentamientoActual. 
	
	^enfrentamientoActual. 
	
	! !
!RondaDeTruco methodsFor: 'accessing' stamp: 'BAG 7/5/2021 20:11:05' prior: 50863953!
juegaPrimero
	^enfrentamientos size = 0 ifTrue:[ mano ] ifFalse: [enfrentamientos last].! !
!RondaDeTruco methodsFor: 'accessing' stamp: 'BAG 7/5/2021 20:11:26' prior: 50865393!
juegaPrimero
	^enfrentamientos size = 0 ifTrue:[ mano ] ifFalse: [enfrentamientos last juegaPrimero].! !

!testRun: #RondaDeTrucoTest #test08SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 20:11:35'!
ERROR!

!testRun: #RondaDeTrucoTest #test08SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 20:11:35'!
ERROR!
!RondaDeTruco methodsFor: 'initialization' stamp: 'BAG 7/5/2021 20:11:54' prior: 50863890!
initializeComienzaConMano: unJugadorMano yPie: unJugadorPie 
	self sonValidosJugadorMano: unJugadorMano jugadorPie: unJugadorPie.
		
	mano := unJugadorMano.
	pie := unJugadorPie.
	enfrentamientos:= OrderedCollection new.! !

!testRun: #RondaDeTrucoTest #test08SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 20:11:58'!
ERROR!

!testRun: #RondaDeTrucoTest #test08SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 20:11:58'!
ERROR!
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 20:12:24'!
juegaPrimero
	^juegaPrimero ! !

!testRun: #RondaDeTrucoTest #test08SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 20:12:29'!
PASSED!

Object subclass: #Truco
	instanceVariableNames: 'mano pie enfrentamientos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Truco category: 'ISW1-2021-1C-2doParcial' stamp: 'BAG 7/5/2021 20:12:46'!
Object subclass: #Truco
	instanceVariableNames: 'mano pie enfrentamientos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

Truco subclass: #RondaDeTruco
	instanceVariableNames: 'mano pie enfrentamientos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

Truco subclass: #RondaDeTruco
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'BAG 7/5/2021 20:13:08'!
Truco subclass: #RondaDeTruco
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

Object subclass: #Enfrentamiento
	instanceVariableNames: 'juegaPrimero juegaSegundo ganador'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Enfrentamiento category: 'ISW1-2021-1C-2doParcial' stamp: 'BAG 7/5/2021 20:13:48'!
Object subclass: #Enfrentamiento
	instanceVariableNames: 'juegaPrimero juegaSegundo ganador'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

Truco subclass: #Enfrentamiento
	instanceVariableNames: 'juegaPrimero juegaSegundo ganador'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Enfrentamiento category: 'ISW1-2021-1C-2doParcial' stamp: 'BAG 7/5/2021 20:14:00'!
Truco subclass: #Enfrentamiento
	instanceVariableNames: 'juegaPrimero juegaSegundo ganador'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

Truco subclass: #Enfrentamiento
	instanceVariableNames: 'ganador'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Enfrentamiento category: 'ISW1-2021-1C-2doParcial' stamp: 'BAG 7/5/2021 20:14:16'!
Truco subclass: #Enfrentamiento
	instanceVariableNames: 'ganador'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Truco category: 'ISW1-2021-1C-2doParcial' stamp: 'BAG 7/5/2021 20:14:25'!
Object subclass: #Truco
	instanceVariableNames: 'mano juegaSegundo enfrentamientos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 20:14:25' prior: 50865384!
jugar
	| enfrentamientoActual |
	
	enfrentamientoActual := (Enfrentamiento entre: mano y: juegaSegundo).
	enfrentamientos add: enfrentamientoActual. 
	
	^enfrentamientoActual. 
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 20:14:25' prior: 50865414!
initializeComienzaConMano: unJugadorMano yPie: unJugadorPie 
	self sonValidosJugadorMano: unJugadorMano jugadorPie: unJugadorPie.
		
	mano := unJugadorMano.
	juegaSegundo := unJugadorPie.
	enfrentamientos:= OrderedCollection new.! !

!classDefinition: #Truco category: 'ISW1-2021-1C-2doParcial' stamp: 'BAG 7/5/2021 20:14:41'!
Object subclass: #Truco
	instanceVariableNames: 'juegaPrimero juegaSegundo enfrentamientos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 20:14:41' prior: 50865530!
initializeComienzaConMano: unJugadorMano yPie: unJugadorPie 
	self sonValidosJugadorMano: unJugadorMano jugadorPie: unJugadorPie.
		
	juegaPrimero := unJugadorMano.
	juegaSegundo := unJugadorPie.
	enfrentamientos:= OrderedCollection new.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 20:14:41' prior: 50865521!
jugar
	| enfrentamientoActual |
	
	enfrentamientoActual := (Enfrentamiento entre: juegaPrimero y: juegaSegundo).
	enfrentamientos add: enfrentamientoActual. 
	
	^enfrentamientoActual. 
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 20:14:41' prior: 50865399!
juegaPrimero
	^enfrentamientos size = 0 ifTrue:[ juegaPrimero ] ifFalse: [enfrentamientos last juegaPrimero].! !
!Truco methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 20:14:53'!
juegaPrimero
	^juegaPrimero ! !

!methodRemoval: Enfrentamiento #juegaPrimero stamp: 'BAG 7/5/2021 20:14:53'!
juegaPrimero
	^juegaPrimero !

Object subclass: #Truco
	instanceVariableNames: 'juegaPrimero juegaSegundo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Truco category: 'ISW1-2021-1C-2doParcial' stamp: 'BAG 7/5/2021 20:15:31'!
Object subclass: #Truco
	instanceVariableNames: 'juegaPrimero juegaSegundo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

Truco subclass: #RondaDeTruco
	instanceVariableNames: 'enfrentamientos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'BAG 7/5/2021 20:15:39'!
Truco subclass: #RondaDeTruco
	instanceVariableNames: 'enfrentamientos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Truco methodsFor: 'nil' stamp: 'BAG 7/5/2021 20:16:24'!
jugar
	self subclassResponsibility ! !
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 20:16:36' overrides: 50865608!
jugar
	| primerCarta segundaCarta  |
	primerCarta := juegaPrimero juegaUnaCarta.
	segundaCarta := juegaSegundo juegaUnaCarta.
	
	(segundaCarta  mataA:  primerCarta) ifTrue: [ 
		ganador := juegaSegundo. 
		juegaSegundo := juegaPrimero.
		juegaPrimero := ganador.
		].
	(primerCarta mataA: segundaCarta ) ifTrue: [ganador := juegaPrimero].
	
	
	^ganador
	! !

!methodRemoval: Enfrentamiento #jugar stamp: 'BAG 7/5/2021 20:16:50'!
jugar
	| primerCarta segundaCarta  |
	primerCarta := juegaPrimero juegaUnaCarta.
	segundaCarta := juegaSegundo juegaUnaCarta.
	
	(segundaCarta  mataA:  primerCarta) ifTrue: [ 
		ganador := juegaSegundo. 
		juegaSegundo := juegaPrimero.
		juegaPrimero := ganador.
		].
	(primerCarta mataA: segundaCarta ) ifTrue: [ganador := juegaPrimero].
	
	
	^ganador
	!
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 20:17:10' overrides: 50865608!
jugar
	| primerCarta segundaCarta  |
	primerCarta := juegaPrimero juegaUnaCarta.
	segundaCarta := juegaSegundo juegaUnaCarta.
	
	(segundaCarta  mataA:  primerCarta) ifTrue: [ 
		ganador := juegaSegundo. 
		juegaSegundo := juegaPrimero.
		juegaPrimero := ganador.
		].
	(primerCarta mataA: segundaCarta ) ifTrue: [ganador := juegaPrimero].
	
	
	^ganador
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 20:17:10' prior: 50865295!
test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero
	| jugadorMano jugadorPie ronda primerEnfrentamiento |
	
	jugadorMano := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.} asOrderedCollection.
	jugadorPie := Jugador con: {CartaDeTruco sieteDeOro . CartaDeTruco oroCon: 3. CartaDeTruco bastoCon: 4.} asOrderedCollection .
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	primerEnfrentamiento := ronda jugar.
	
	self assert: jugadorMano equals: primerEnfrentamiento jugar.
	self assert: jugadorMano equals: ronda juegaPrimero.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 20:17:10' prior: 50865269!
test08SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero
	| jugadorMano jugadorPie ronda primerEnfrentamiento |
	
	jugadorPie := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.} asOrderedCollection.
	jugadorMano := Jugador con: {CartaDeTruco sieteDeOro . CartaDeTruco oroCon: 3. CartaDeTruco bastoCon: 4.} asOrderedCollection .
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	primerEnfrentamiento := ronda jugar.
	
	self assert: jugadorPie equals: primerEnfrentamiento jugar.
	self assert: jugadorPie equals: ronda juegaPrimero.
	self assert: jugadorPie cantidadDeCartas equals: 2.
	self assert: jugadorMano cantidadDeCartas equals: 2.! !

!methodRemoval: Enfrentamiento #ganador stamp: 'BAG 7/5/2021 20:17:10'!
ganador
	| primerCarta segundaCarta  |
	primerCarta := juegaPrimero juegaUnaCarta.
	segundaCarta := juegaSegundo juegaUnaCarta.
	
	(segundaCarta  mataA:  primerCarta) ifTrue: [ 
		ganador := juegaSegundo. 
		juegaSegundo := juegaPrimero.
		juegaPrimero := ganador.
		].
	(primerCarta mataA: segundaCarta ) ifTrue: [ganador := juegaPrimero].
	
	
	^ganador
	!

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 20:17:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'BAG 7/5/2021 20:17:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'BAG 7/5/2021 20:17:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'BAG 7/5/2021 20:17:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'BAG 7/5/2021 20:17:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'BAG 7/5/2021 20:17:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'BAG 7/5/2021 20:17:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'BAG 7/5/2021 20:17:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'BAG 7/5/2021 20:17:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'BAG 7/5/2021 20:17:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'BAG 7/5/2021 20:17:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'BAG 7/5/2021 20:17:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'BAG 7/5/2021 20:17:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'BAG 7/5/2021 20:17:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'BAG 7/5/2021 20:17:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'BAG 7/5/2021 20:17:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'BAG 7/5/2021 20:17:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'BAG 7/5/2021 20:17:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'BAG 7/5/2021 20:17:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'BAG 7/5/2021 20:17:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 20:17:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 20:17:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 20:17:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 20:17:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test05NoDebeHaberCartasRepetidasEntreJugadores stamp: 'BAG 7/5/2021 20:17:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test06ElJugadorManoDebeComenzarPrimero stamp: 'BAG 7/5/2021 20:17:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 20:17:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 20:17:51'!
PASSED!
!RondaDeTruco methodsFor: 'initialization' stamp: 'BAG 7/5/2021 20:18:50'!
initializeComienza: unJugadorMano ySigue: unJugadorPie 
	self sonValidosJugadorMano: unJugadorMano jugadorPie: unJugadorPie.
		
	juegaPrimero := unJugadorMano.
	juegaSegundo := unJugadorPie.
	enfrentamientos:= OrderedCollection new.! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 20:18:50' prior: 50859924!
comienzaConMano: unJugadorMano yPie: unJugadorPie 
	^self new initializeComienza: unJugadorMano ySigue: unJugadorPie ! !

!methodRemoval: RondaDeTruco #initializeComienzaConMano:yPie: stamp: 'BAG 7/5/2021 20:18:50'!
initializeComienzaConMano: unJugadorMano yPie: unJugadorPie 
	self sonValidosJugadorMano: unJugadorMano jugadorPie: unJugadorPie.
		
	juegaPrimero := unJugadorMano.
	juegaSegundo := unJugadorPie.
	enfrentamientos:= OrderedCollection new.!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 20:18:53'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 20:18:53'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 20:18:53'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 20:18:53'!
PASSED!

!testRun: #RondaDeTrucoTest #test05NoDebeHaberCartasRepetidasEntreJugadores stamp: 'BAG 7/5/2021 20:18:53'!
PASSED!

!testRun: #RondaDeTrucoTest #test06ElJugadorManoDebeComenzarPrimero stamp: 'BAG 7/5/2021 20:18:53'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 20:18:53'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 20:18:53'!
PASSED!
!RondaDeTruco methodsFor: 'initialization' stamp: 'BAG 7/5/2021 20:19:20'!
comienza: unJugadorMano ySigue: unJugadorPie 
	self sonValidosJugadorMano: unJugadorMano jugadorPie: unJugadorPie.
		
	juegaPrimero := unJugadorMano.
	juegaSegundo := unJugadorPie.
	enfrentamientos:= OrderedCollection new.! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 20:19:20' prior: 50865828!
comienzaConMano: unJugadorMano yPie: unJugadorPie 
	^self new comienza: unJugadorMano ySigue: unJugadorPie ! !

!methodRemoval: RondaDeTruco #initializeComienza:ySigue: stamp: 'BAG 7/5/2021 20:19:20'!
initializeComienza: unJugadorMano ySigue: unJugadorPie 
	self sonValidosJugadorMano: unJugadorMano jugadorPie: unJugadorPie.
		
	juegaPrimero := unJugadorMano.
	juegaSegundo := unJugadorPie.
	enfrentamientos:= OrderedCollection new.!
!Enfrentamiento methodsFor: 'initialization' stamp: 'BAG 7/5/2021 20:19:39'!
comienza: unJugadorMano ySigue: unJugadorPie 
	juegaPrimero := unJugadorMano.
	juegaSegundo := unJugadorPie.! !
!Enfrentamiento class methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 20:19:39' prior: 50864088!
entre: unJugadorMano y: unJugadorPie 
	^self new comienza: unJugadorMano ySigue: unJugadorPie ! !

!methodRemoval: Enfrentamiento #initializeEntre:y: stamp: 'BAG 7/5/2021 20:19:39'!
initializeEntre: unJugadorMano y: unJugadorPie 
	juegaPrimero := unJugadorMano.
	juegaSegundo := unJugadorPie.!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 20:19:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 20:19:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 20:19:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 20:19:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test05NoDebeHaberCartasRepetidasEntreJugadores stamp: 'BAG 7/5/2021 20:19:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test06ElJugadorManoDebeComenzarPrimero stamp: 'BAG 7/5/2021 20:19:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 20:19:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 20:19:42'!
PASSED!
!Truco methodsFor: 'initialization' stamp: 'BAG 7/5/2021 20:20:26'!
comienza: unJugadorMano ySigue: unJugadorPie 
	juegaPrimero := unJugadorMano.
	juegaSegundo := unJugadorPie.! !

!methodRemoval: Enfrentamiento #comienza:ySigue: stamp: 'BAG 7/5/2021 20:20:26'!
comienza: unJugadorMano ySigue: unJugadorPie 
	juegaPrimero := unJugadorMano.
	juegaSegundo := unJugadorPie.!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 20:20:31'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 20:20:31'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 20:20:31'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 20:20:31'!
PASSED!

!testRun: #RondaDeTrucoTest #test05NoDebeHaberCartasRepetidasEntreJugadores stamp: 'BAG 7/5/2021 20:20:31'!
PASSED!

!testRun: #RondaDeTrucoTest #test06ElJugadorManoDebeComenzarPrimero stamp: 'BAG 7/5/2021 20:20:31'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 20:20:31'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 20:20:31'!
PASSED!

Truco subclass: #Enfrentamiento
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Enfrentamiento category: 'ISW1-2021-1C-2doParcial' stamp: 'BAG 7/5/2021 20:22:13'!
Truco subclass: #Enfrentamiento
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

Object subclass: #Truco
	instanceVariableNames: 'juegaPrimero juegaSegundo ganador'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Truco category: 'ISW1-2021-1C-2doParcial' stamp: 'BAG 7/5/2021 20:22:19'!
Object subclass: #Truco
	instanceVariableNames: 'juegaPrimero juegaSegundo ganador'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Truco methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 20:22:31'!
ganador
	ganador! !
!Truco methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 20:22:38' prior: 50866019!
ganador
	^ganador! !
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 20:22:49' prior: 50865641 overrides: 50865608!
jugar
	| primerCarta segundaCarta  |
	primerCarta := juegaPrimero juegaUnaCarta.
	segundaCarta := juegaSegundo juegaUnaCarta.
	
	(segundaCarta  mataA:  primerCarta) ifTrue: [ 
		ganador := juegaSegundo. 
		juegaSegundo := juegaPrimero.
		juegaPrimero := ganador.
		].
	(primerCarta mataA: segundaCarta ) ifTrue: [ganador := juegaPrimero].
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 20:22:57' prior: 50865679!
test08SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero
	| jugadorMano jugadorPie ronda primerEnfrentamiento |
	
	jugadorPie := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.} asOrderedCollection.
	jugadorMano := Jugador con: {CartaDeTruco sieteDeOro . CartaDeTruco oroCon: 3. CartaDeTruco bastoCon: 4.} asOrderedCollection .
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	primerEnfrentamiento := ronda jugar.
	
	self assert: jugadorPie equals: primerEnfrentamiento ganador.
	self assert: jugadorPie equals: ronda juegaPrimero.
	self assert: jugadorPie cantidadDeCartas equals: 2.
	self assert: jugadorMano cantidadDeCartas equals: 2.! !
!RondaDeTruco methodsFor: 'enfrentamientos' stamp: 'BAG 7/5/2021 20:23:16' prior: 50865560 overrides: 50865608!
jugar
	| enfrentamientoActual |
	
	enfrentamientoActual := (Enfrentamiento entre: juegaPrimero y: juegaSegundo).
	enfrentamientoActual jugar.
	enfrentamientos add: enfrentamientoActual. 
	
	^enfrentamientoActual. 
	
	! !

!testRun: #RondaDeTrucoTest #test08SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 20:23:24'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 20:23:28'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'BAG 7/5/2021 20:23:28'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'BAG 7/5/2021 20:23:28'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'BAG 7/5/2021 20:23:28'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'BAG 7/5/2021 20:23:28'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'BAG 7/5/2021 20:23:28'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'BAG 7/5/2021 20:23:28'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'BAG 7/5/2021 20:23:28'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'BAG 7/5/2021 20:23:28'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'BAG 7/5/2021 20:23:28'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'BAG 7/5/2021 20:23:28'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'BAG 7/5/2021 20:23:28'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'BAG 7/5/2021 20:23:28'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'BAG 7/5/2021 20:23:28'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'BAG 7/5/2021 20:23:28'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'BAG 7/5/2021 20:23:28'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'BAG 7/5/2021 20:23:28'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'BAG 7/5/2021 20:23:28'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'BAG 7/5/2021 20:23:28'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'BAG 7/5/2021 20:23:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 20:23:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 20:23:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 20:23:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 20:23:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test05NoDebeHaberCartasRepetidasEntreJugadores stamp: 'BAG 7/5/2021 20:23:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test06ElJugadorManoDebeComenzarPrimero stamp: 'BAG 7/5/2021 20:23:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 20:23:28'!
FAILURE!

!testRun: #RondaDeTrucoTest #test08SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 20:23:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 20:23:28'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 20:23:42' prior: 50865656!
test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero
	| jugadorMano jugadorPie ronda primerEnfrentamiento |
	
	jugadorMano := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.} asOrderedCollection.
	jugadorPie := Jugador con: {CartaDeTruco sieteDeOro . CartaDeTruco oroCon: 3. CartaDeTruco bastoCon: 4.} asOrderedCollection .
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	primerEnfrentamiento := ronda jugar.
	
	self assert: jugadorMano equals: primerEnfrentamiento ganador.
	self assert: jugadorMano equals: ronda juegaPrimero.! !

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 20:23:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 20:23:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'BAG 7/5/2021 20:23:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'BAG 7/5/2021 20:23:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'BAG 7/5/2021 20:23:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'BAG 7/5/2021 20:23:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'BAG 7/5/2021 20:23:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'BAG 7/5/2021 20:23:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'BAG 7/5/2021 20:23:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'BAG 7/5/2021 20:23:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'BAG 7/5/2021 20:23:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'BAG 7/5/2021 20:23:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'BAG 7/5/2021 20:23:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'BAG 7/5/2021 20:23:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'BAG 7/5/2021 20:23:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'BAG 7/5/2021 20:23:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'BAG 7/5/2021 20:23:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'BAG 7/5/2021 20:23:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'BAG 7/5/2021 20:23:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'BAG 7/5/2021 20:23:54'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'BAG 7/5/2021 20:23:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 20:23:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 20:23:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 20:23:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 20:23:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test05NoDebeHaberCartasRepetidasEntreJugadores stamp: 'BAG 7/5/2021 20:23:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test06ElJugadorManoDebeComenzarPrimero stamp: 'BAG 7/5/2021 20:23:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 20:23:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 20:23:54'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 20:26:34'!
test09SiElPrimerEnfrentamientoEsPardoSigueLaMano
	| jugadorMano jugadorPie ronda primerEnfrentamiento |
	
	jugadorPie := Jugador con: {CartaDeTruco copaCon: 3.CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada.} asOrderedCollection.
	jugadorMano := Jugador con: {CartaDeTruco oroCon: 3.CartaDeTruco sieteDeOro . CartaDeTruco bastoCon: 4.} asOrderedCollection .
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	primerEnfrentamiento := ronda jugar.
	
	self assert: jugadorPie equals: primerEnfrentamiento ganador.
	self assert: jugadorPie equals: ronda juegaPrimero.
	self assert: jugadorPie cantidadDeCartas equals: 2.
	self assert: jugadorMano cantidadDeCartas equals: 2.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 20:27:08' prior: 50866314!
test09SiElPrimerEnfrentamientoEsPardoSigueLaMano
	| jugadorMano jugadorPie ronda primerEnfrentamiento |
	
	jugadorPie := Jugador con: {CartaDeTruco copaCon: 3.CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada.} asOrderedCollection.
	jugadorMano := Jugador con: {CartaDeTruco oroCon: 3.CartaDeTruco sieteDeOro . CartaDeTruco bastoCon: 4.} asOrderedCollection .
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	primerEnfrentamiento := ronda jugar.
	
	self assert: primerEnfrentamiento esPardo.
	self assert: jugadorMano equals: ronda juegaPrimero.
	self assert: jugadorPie cantidadDeCartas equals: 2.
	self assert: jugadorMano cantidadDeCartas equals: 2.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 20:27:21' prior: 50866188!
test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero
	| jugadorMano jugadorPie ronda primerEnfrentamiento |
	
	jugadorMano := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.} asOrderedCollection.
	jugadorPie := Jugador con: {CartaDeTruco sieteDeOro . CartaDeTruco oroCon: 3. CartaDeTruco bastoCon: 4.} asOrderedCollection .
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	primerEnfrentamiento := ronda jugar.
	
	self assert: jugadorMano equals: primerEnfrentamiento ganador.
	self assert: jugadorMano equals: ronda juegaPrimero.
	self assert: jugadorPie cantidadDeCartas equals: 2.
	self assert: jugadorMano cantidadDeCartas equals: 2.! !

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 20:27:23'!
PASSED!

----SNAPSHOT----(5 July 2021 20:27:34) CuisUniversity-4532.image priorSource: 17006884!

!classDefinition: #Enfrentamiento category: 'ISW1-2021-1C-2doParcial' stamp: 'BAG 7/5/2021 20:30:47'!
Truco subclass: #Enfrentamiento
	instanceVariableNames: 'esPardo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Enfrentamiento methodsFor: 'resultado' stamp: 'BAG 7/5/2021 20:30:45'!
esPardo
	^esPardo! !
!Enfrentamiento methodsFor: 'jugar' stamp: 'BAG 7/5/2021 20:32:00' prior: 50866028 overrides: 50865608!
jugar
	| primerCarta segundaCarta  |
	primerCarta := juegaPrimero juegaUnaCarta.
	segundaCarta := juegaSegundo juegaUnaCarta.
	
	(segundaCarta  mataA:  primerCarta) ifTrue: [ 
		ganador := juegaSegundo. 
		juegaSegundo := juegaPrimero.
		juegaPrimero := ganador.
		].
	(primerCarta mataA: segundaCarta ) ifTrue: [ganador := juegaPrimero].
	
	(primerCarta espadaCon: segundaCarta) ifTrue: [ esPardo := true.] 
	
	! !
!Enfrentamiento methodsFor: 'jugar' stamp: 'BAG 7/5/2021 20:32:40' prior: 50866409 overrides: 50865608!
jugar
	| primerCarta segundaCarta  |
	esPardo := false.
	primerCarta := juegaPrimero juegaUnaCarta.
	segundaCarta := juegaSegundo juegaUnaCarta.
	
	(segundaCarta  mataA:  primerCarta) ifTrue: [ 
		ganador := juegaSegundo. 
		juegaSegundo := juegaPrimero.
		juegaPrimero := ganador.
		].
	(primerCarta mataA: segundaCarta ) ifTrue: [ganador := juegaPrimero].
	
	(primerCarta espadaCon: segundaCarta) ifTrue: [ esPardo := true.] 
	
	! !
!Enfrentamiento methodsFor: 'jugar' stamp: 'BAG 7/5/2021 20:32:43' prior: 50866426 overrides: 50865608!
jugar
	| primerCarta segundaCarta  |
	esPardo := false.
	
	primerCarta := juegaPrimero juegaUnaCarta.
	segundaCarta := juegaSegundo juegaUnaCarta.
	
	(segundaCarta  mataA:  primerCarta) ifTrue: [ 
		ganador := juegaSegundo. 
		juegaSegundo := juegaPrimero.
		juegaPrimero := ganador.
		].
	(primerCarta mataA: segundaCarta ) ifTrue: [ganador := juegaPrimero].
	
	(primerCarta espadaCon: segundaCarta) ifTrue: [ esPardo := true.] 
	
	! !

!testRun: #RondaDeTrucoTest #test09SiElPrimerEnfrentamientoEsPardoSigueLaMano stamp: 'BAG 7/5/2021 20:32:52'!
ERROR!

!testRun: #RondaDeTrucoTest #test09SiElPrimerEnfrentamientoEsPardoSigueLaMano stamp: 'BAG 7/5/2021 20:32:52'!
ERROR!
!Enfrentamiento methodsFor: 'jugar' stamp: 'BAG 7/5/2021 20:33:35' prior: 50866443 overrides: 50865608!
jugar
	| primerCarta segundaCarta  |
	esPardo := false.
	
	primerCarta := juegaPrimero juegaUnaCarta.
	segundaCarta := juegaSegundo juegaUnaCarta.
	
	(segundaCarta  mataA:  primerCarta) ifTrue: [ 
		ganador := juegaSegundo. 
		juegaSegundo := juegaPrimero.
		juegaPrimero := ganador.
		].
	(primerCarta mataA: segundaCarta ) ifTrue: [ganador := juegaPrimero].
	
	(primerCarta empardaCon: segundaCarta) ifTrue: [ esPardo := true.] 
	
	! !
!Enfrentamiento methodsFor: 'jugar' stamp: 'BAG 7/5/2021 20:34:21' prior: 50866468 overrides: 50865608!
jugar
	| primerCarta segundaCarta  |
	
	primerCarta := juegaPrimero juegaUnaCarta.
	segundaCarta := juegaSegundo juegaUnaCarta.
	
	(segundaCarta  mataA:  primerCarta) ifTrue: [ 
		ganador := juegaSegundo. 
		juegaSegundo := juegaPrimero.
		juegaPrimero := ganador.
		].
	(primerCarta mataA: segundaCarta ) ifTrue: [ganador := juegaPrimero].
	
	esPardo := (primerCarta empardaCon: segundaCarta).
	
	! !

!testRun: #RondaDeTrucoTest #test09SiElPrimerEnfrentamientoEsPardoSigueLaMano stamp: 'BAG 7/5/2021 20:34:28'!
PASSED!
!RondaDeTrucoTest methodsFor: 'orden de juego' stamp: 'BAG 7/5/2021 20:41:49'!
test10SiGanaLosDosPrimerosEnfrentamientosGanaLaRonda
	| jugadorMano jugadorPie ronda primerEnfrentamiento segundoEnfrentamiento |
	
	jugadorPie := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco copaCon: 3.} asOrderedCollection.
	jugadorMano := Jugador con: {CartaDeTruco oroCon: 3.CartaDeTruco sieteDeOro . CartaDeTruco bastoCon: 4.} asOrderedCollection .
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	primerEnfrentamiento := ronda jugar.
	segundoEnfrentamiento := ronda jugar.
	
	self deny: primerEnfrentamiento esPardo.
	self assert: jugadorPie equals: primerEnfrentamiento ganador.
	self assert: jugadorPie equals: segundoEnfrentamiento ganador.
	self assert: jugadorPie equals: ronda ganador.
	self assert: jugadorPie cantidadDeCartas equals: 1.
	self assert: jugadorMano cantidadDeCartas equals: 1.! !
!Enfrentamiento methodsFor: 'resultado' stamp: 'BAG 7/5/2021 20:42:24' prior: 50866405!
esPardo
	esPardo ifNil: [esPardo := false].
	^esPardo ! !
!RondaDeTruco methodsFor: 'jugar' stamp: 'BAG 7/5/2021 20:49:38' prior: 50866069 overrides: 50865608!
jugar
	| enfrentamientoActual |
	
	enfrentamientoActual := (Enfrentamiento entre: juegaPrimero y: juegaSegundo).
	enfrentamientoActual jugar.
	enfrentamientoActual esPardo ifFalse:[self incrementarVictorias: (enfrentamientoActual ganador)].
	enfrentamientos add: enfrentamientoActual. 
	
	^enfrentamientoActual. 
	
	! !
!RondaDeTruco methodsFor: 'jugar' stamp: 'BAG 7/5/2021 20:50:47' prior: 50866539 overrides: 50865608!
jugar
	| enfrentamientoActual |
	
	enfrentamientoActual := (Enfrentamiento entre: juegaPrimero y: juegaSegundo).
	enfrentamientoActual jugar.
	enfrentamientoActual esPardo ifFalse:[ enfrentamientoActual ganador incrementarVictorias].
	enfrentamientos add: enfrentamientoActual. 
	
	^enfrentamientoActual. 
	
	! !

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'BAG 7/5/2021 20:51:12'!
Object subclass: #Jugador
	instanceVariableNames: 'cartas victorias'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Jugador methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 20:51:10' prior: 50864401!
initializeCon: unaColeccionDeCartas
	cartas := unaColeccionDeCartas.
	victorias:=0. ! !
!Jugador methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 20:51:25'!
victorias
	
	^victorias! !
!Jugador methodsFor: 'as yet unclassified' stamp: 'BAG 7/5/2021 20:51:39'!
incrementarVictorias
	
	victorias := victorias +1.! !
!RondaDeTruco methodsFor: 'jugar' stamp: 'BAG 7/5/2021 20:52:08' prior: 50866553 overrides: 50865608!
jugar
	| enfrentamientoActual |
	
	enfrentamientoActual := (Enfrentamiento entre: juegaPrimero y: juegaSegundo).
	enfrentamientoActual jugar.
	enfrentamientos add: enfrentamientoActual. 
	
	^enfrentamientoActual. 
	
	! !
!Enfrentamiento methodsFor: 'jugar' stamp: 'BAG 7/5/2021 20:52:22' prior: 50866485 overrides: 50865608!
jugar
	| primerCarta segundaCarta  |
	
	primerCarta := juegaPrimero juegaUnaCarta.
	segundaCarta := juegaSegundo juegaUnaCarta.
	
	(segundaCarta  mataA:  primerCarta) ifTrue: [ 
		ganador := juegaSegundo. 
		juegaSegundo := juegaPrimero.
		juegaPrimero := ganador.
		].
	(primerCarta mataA: segundaCarta ) ifTrue: [ganador := juegaPrimero].
	
	ganador incrementarVictorias. 
	
	esPardo := (primerCarta empardaCon: segundaCarta).
	
	! !
!RondaDeTruco methodsFor: 'accessing' stamp: 'BAG 7/5/2021 20:53:36' overrides: 50866023!
ganador
	
	juegaPrimero victorias = 2 ifTrue:[^juegaPrimero].
	^juegaSegundo.! !
!RondaDeTruco methodsFor: 'accessing' stamp: 'BAG 7/5/2021 20:53:40' prior: 50866617 overrides: 50866023!
ganador
	
	juegaPrimero victorias = 2 ifTrue:[^juegaPrimero].
	^juegaSegundo.! !

!testRun: #RondaDeTrucoTest #test10SiGanaLosDosPrimerosEnfrentamientosGanaLaRonda stamp: 'BAG 7/5/2021 20:53:45'!
PASSED!
!RondaDeTrucoTest methodsFor: 'orden de juego' stamp: 'BAG 7/5/2021 20:55:58'!
test10SiSeJugoUnEnfrentamientoNoHayGanador
	| jugadorMano jugadorPie ronda primerEnfrentamiento |
	
	jugadorPie := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco copaCon: 3.} asOrderedCollection.
	jugadorMano := Jugador con: {CartaDeTruco oroCon: 3.CartaDeTruco sieteDeOro . CartaDeTruco bastoCon: 4.} asOrderedCollection .
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	primerEnfrentamiento := ronda jugar.
	
	self deny: primerEnfrentamiento esPardo.
	self assert: jugadorPie equals: primerEnfrentamiento ganador.
	self should: [ ronda ganador]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: anError messageText equals: RondaDeTruco noHayUnGanadorAunDescripcionDeError.
		self assert: jugadorPie cantidadDeCartas equals: 2.
		self assert: jugadorMano cantidadDeCartas equals: 2.
		]! !
!RondaDeTrucoTest methodsFor: 'orden de juego' stamp: 'BAG 7/5/2021 20:56:11'!
test11SiSeJugoUnEnfrentamientoNoHayGanador
	| jugadorMano jugadorPie ronda primerEnfrentamiento |
	
	jugadorPie := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco copaCon: 3.} asOrderedCollection.
	jugadorMano := Jugador con: {CartaDeTruco oroCon: 3.CartaDeTruco sieteDeOro . CartaDeTruco bastoCon: 4.} asOrderedCollection .
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	primerEnfrentamiento := ronda jugar.
	
	self deny: primerEnfrentamiento esPardo.
	self assert: jugadorPie equals: primerEnfrentamiento ganador.
	self should: [ ronda ganador]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: anError messageText equals: RondaDeTruco noHayUnGanadorAunDescripcionDeError.
		self assert: jugadorPie cantidadDeCartas equals: 2.
		self assert: jugadorMano cantidadDeCartas equals: 2.
		]! !

!methodRemoval: RondaDeTrucoTest #test10SiSeJugoUnEnfrentamientoNoHayGanador stamp: 'BAG 7/5/2021 20:56:11'!
test10SiSeJugoUnEnfrentamientoNoHayGanador
	| jugadorMano jugadorPie ronda primerEnfrentamiento |
	
	jugadorPie := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco copaCon: 3.} asOrderedCollection.
	jugadorMano := Jugador con: {CartaDeTruco oroCon: 3.CartaDeTruco sieteDeOro . CartaDeTruco bastoCon: 4.} asOrderedCollection .
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	primerEnfrentamiento := ronda jugar.
	
	self deny: primerEnfrentamiento esPardo.
	self assert: jugadorPie equals: primerEnfrentamiento ganador.
	self should: [ ronda ganador]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: anError messageText equals: RondaDeTruco noHayUnGanadorAunDescripcionDeError.
		self assert: jugadorPie cantidadDeCartas equals: 2.
		self assert: jugadorMano cantidadDeCartas equals: 2.
		]!
!RondaDeTruco class methodsFor: 'descripcion de errores' stamp: 'BAG 7/5/2021 20:56:32'!
noHayUnGanadorAunDescripcionDeError
	^'Todav�a no hay un ganador en la ronda'! !
!RondaDeTruco methodsFor: 'accessing' stamp: 'BAG 7/5/2021 20:57:13' prior: 50866623 overrides: 50866023!
ganador
	self assertHayGanador.
	juegaPrimero victorias = 2 ifTrue:[^juegaPrimero].
	^juegaSegundo.! !

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'BAG 7/5/2021 20:57:42'!
Truco subclass: #RondaDeTruco
	instanceVariableNames: 'enfrentamientos hayGanador'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'accessing' stamp: 'BAG 7/5/2021 20:57:40'!
assertHayGanador
	hayGanador ifFalse:[self error: self class noHayUnGanadorAunDescripcionDeError ].! !
!RondaDeTruco methodsFor: 'accessing' stamp: 'BAG 7/5/2021 20:57:56' prior: 50866745!
assertHayGanador
	(self hayGanador) ifFalse:[self error: self class noHayUnGanadorAunDescripcionDeError ].! !
!RondaDeTruco methodsFor: 'initialization' stamp: 'BAG 7/5/2021 20:58:23' prior: 50865875 overrides: 50865951!
comienza: unJugadorMano ySigue: unJugadorPie 
	self sonValidosJugadorMano: unJugadorMano jugadorPie: unJugadorPie.
		
	juegaPrimero := unJugadorMano.
	juegaSegundo := unJugadorPie.
	enfrentamientos:= OrderedCollection new.
	hayGanador := false.! !
!RondaDeTruco methodsFor: 'validaciones' stamp: 'BAG 7/5/2021 21:00:26' prior: 50866751!
assertHayGanador
	(juegaPrimero victorias = 2 or: juegaSegundo victorias = 2) ifFalse:[self error: self class noHayUnGanadorAunDescripcionDeError ].! !
!RondaDeTruco methodsFor: 'initialization' stamp: 'BAG 7/5/2021 21:00:36' prior: 50866758 overrides: 50865951!
comienza: unJugadorMano ySigue: unJugadorPie 
	self sonValidosJugadorMano: unJugadorMano jugadorPie: unJugadorPie.
		
	juegaPrimero := unJugadorMano.
	juegaSegundo := unJugadorPie.
	enfrentamientos:= OrderedCollection new.
	! !

Truco subclass: #RondaDeTruco
	instanceVariableNames: 'enfrentamientos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'BAG 7/5/2021 21:00:44'!
Truco subclass: #RondaDeTruco
	instanceVariableNames: 'enfrentamientos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!testRun: #RondaDeTrucoTest #test11SiSeJugoUnEnfrentamientoNoHayGanador stamp: 'BAG 7/5/2021 21:01:09'!
PASSED!
!RondaDeTrucoTest methodsFor: 'orden de juego' stamp: 'BAG 7/5/2021 21:02:54'!
test12SiGanaLosUltimosDosEnfrentamientosGanaLaRonda
	| jugadorMano jugadorPie ronda primerEnfrentamiento segundoEnfrentamiento tercerEnfrentamiento |
	
	jugadorPie := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco copaCon: 3.} asOrderedCollection.
	jugadorMano := Jugador con: {CartaDeTruco oroCon: 3.CartaDeTruco sieteDeOro . CartaDeTruco bastoCon: 4.} asOrderedCollection .
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	primerEnfrentamiento := ronda jugar.
	segundoEnfrentamiento := ronda jugar.
	tercerEnfrentamiento := ronda jugar.
	
	self deny: primerEnfrentamiento esPardo.
	self assert: jugadorPie equals: primerEnfrentamiento ganador.
	self assert: jugadorPie equals: segundoEnfrentamiento ganador.
	self assert: jugadorPie equals: tercerEnfrentamiento ganador.
	self assert: jugadorPie equals: ronda ganador.
	self assert: jugadorPie cantidadDeCartas equals: 1.
	self assert: jugadorMano cantidadDeCartas equals: 1.! !
!RondaDeTrucoTest methodsFor: 'orden de juego' stamp: 'BAG 7/5/2021 21:06:01'!
test12SiGanaElPrimeroYElUltimoEsElGanador
	| jugadorMano jugadorPie ronda primerEnfrentamiento segundoEnfrentamiento tercerEnfrentamiento |
	
	jugadorPie := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco copaCon: 3. CartaDeTruco anchoDeEspada.} asOrderedCollection.
	jugadorMano := Jugador con: {CartaDeTruco oroCon: 3.CartaDeTruco sieteDeOro . CartaDeTruco bastoCon: 4.} asOrderedCollection .
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	primerEnfrentamiento := ronda jugar.
	segundoEnfrentamiento := ronda jugar.
	tercerEnfrentamiento := ronda jugar.
	
	self assert: primerEnfrentamiento esPardo.
	self assert: jugadorPie equals: primerEnfrentamiento ganador.
	self assert: segundoEnfrentamiento esPardo.
	self assert: jugadorPie equals: tercerEnfrentamiento ganador.
	self assert: jugadorPie equals: ronda ganador.
	self assert: jugadorPie cantidadDeCartas equals: 0.
	self assert: jugadorMano cantidadDeCartas equals: 0.! !

!methodRemoval: RondaDeTrucoTest #test12SiGanaLosUltimosDosEnfrentamientosGanaLaRonda stamp: 'BAG 7/5/2021 21:06:10'!
test12SiGanaLosUltimosDosEnfrentamientosGanaLaRonda
	| jugadorMano jugadorPie ronda primerEnfrentamiento segundoEnfrentamiento tercerEnfrentamiento |
	
	jugadorPie := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco copaCon: 3.} asOrderedCollection.
	jugadorMano := Jugador con: {CartaDeTruco oroCon: 3.CartaDeTruco sieteDeOro . CartaDeTruco bastoCon: 4.} asOrderedCollection .
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	primerEnfrentamiento := ronda jugar.
	segundoEnfrentamiento := ronda jugar.
	tercerEnfrentamiento := ronda jugar.
	
	self deny: primerEnfrentamiento esPardo.
	self assert: jugadorPie equals: primerEnfrentamiento ganador.
	self assert: jugadorPie equals: segundoEnfrentamiento ganador.
	self assert: jugadorPie equals: tercerEnfrentamiento ganador.
	self assert: jugadorPie equals: ronda ganador.
	self assert: jugadorPie cantidadDeCartas equals: 1.
	self assert: jugadorMano cantidadDeCartas equals: 1.!

!testRun: #RondaDeTrucoTest #test12SiGanaElPrimeroYElUltimoEsElGanador stamp: 'BAG 7/5/2021 21:06:16'!
FAILURE!

!testRun: #RondaDeTrucoTest #test12SiGanaElPrimeroYElUltimoEsElGanador stamp: 'BAG 7/5/2021 21:06:16'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'orden de juego' stamp: 'BAG 7/5/2021 21:06:24' prior: 50866839!
test12SiGanaElPrimeroYElUltimoEsElGanador
	| jugadorMano jugadorPie ronda primerEnfrentamiento segundoEnfrentamiento tercerEnfrentamiento |
	
	jugadorPie := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco copaCon: 3. CartaDeTruco anchoDeEspada.} asOrderedCollection.
	jugadorMano := Jugador con: {CartaDeTruco oroCon: 3.CartaDeTruco sieteDeOro . CartaDeTruco bastoCon: 4.} asOrderedCollection .
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	primerEnfrentamiento := ronda jugar.
	segundoEnfrentamiento := ronda jugar.
	tercerEnfrentamiento := ronda jugar.
	
	self deny: primerEnfrentamiento esPardo.
	self assert: jugadorPie equals: primerEnfrentamiento ganador.
	self assert: segundoEnfrentamiento esPardo.
	self assert: jugadorPie equals: tercerEnfrentamiento ganador.
	self assert: jugadorPie equals: ronda ganador.
	self assert: jugadorPie cantidadDeCartas equals: 0.
	self assert: jugadorMano cantidadDeCartas equals: 0.! !

!testRun: #RondaDeTrucoTest #test12SiGanaElPrimeroYElUltimoEsElGanador stamp: 'BAG 7/5/2021 21:06:25'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'orden de juego' stamp: 'BAG 7/5/2021 21:08:25' prior: 50866914!
test12SiGanaElPrimeroYElUltimoEsElGanador
	| jugadorMano jugadorPie ronda primerEnfrentamiento segundoEnfrentamiento tercerEnfrentamiento |
	
	jugadorPie := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco copaCon: 3. CartaDeTruco anchoDeEspada.} asOrderedCollection.
	jugadorMano := Jugador con: {CartaDeTruco sieteDeOro .CartaDeTruco oroCon: 3. CartaDeTruco bastoCon: 4.} asOrderedCollection .
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	primerEnfrentamiento := ronda jugar.
	segundoEnfrentamiento := ronda jugar.
	tercerEnfrentamiento := ronda jugar.
	
	self deny: primerEnfrentamiento esPardo.
	self assert: jugadorPie equals: primerEnfrentamiento ganador.
	self assert: segundoEnfrentamiento esPardo.
	self assert: jugadorPie equals: tercerEnfrentamiento ganador.
	self assert: jugadorPie equals: ronda ganador.
	self assert: jugadorPie cantidadDeCartas equals: 0.
	self assert: jugadorMano cantidadDeCartas equals: 0.! !

!testRun: #RondaDeTrucoTest #test12SiGanaElPrimeroYElUltimoEsElGanador stamp: 'BAG 7/5/2021 21:08:28'!
ERROR!

!testRun: #RondaDeTrucoTest #test12SiGanaElPrimeroYElUltimoEsElGanador stamp: 'BAG 7/5/2021 21:08:28'!
ERROR!
!Enfrentamiento methodsFor: 'jugar' stamp: 'BAG 7/5/2021 21:09:13' prior: 50866600 overrides: 50865608!
jugar
	| primerCarta segundaCarta  |
	
	primerCarta := juegaPrimero juegaUnaCarta.
	segundaCarta := juegaSegundo juegaUnaCarta.
	
	(segundaCarta  mataA:  primerCarta) ifTrue: [ 
		ganador := juegaSegundo. 
		juegaSegundo := juegaPrimero.
		juegaPrimero := ganador.
		ganador incrementarVictorias.
		].
	(primerCarta mataA: segundaCarta ) ifTrue: [ganador := juegaPrimero. ganador incrementarVictorias ].
	
	
	
	esPardo := (primerCarta empardaCon: segundaCarta).
	
	! !

!testRun: #RondaDeTrucoTest #test12SiGanaElPrimeroYElUltimoEsElGanador stamp: 'BAG 7/5/2021 21:09:16'!
ERROR!

!testRun: #RondaDeTrucoTest #test12SiGanaElPrimeroYElUltimoEsElGanador stamp: 'BAG 7/5/2021 21:09:52'!
PASSED!
!RondaDeTrucoTest methodsFor: 'orden de juego' stamp: 'BAG 7/5/2021 21:12:20'!
test13SiElPrimerEnfrentamientoEsPardoElQueGanaElSegundoGanaLaRonda
	| jugadorMano jugadorPie ronda primerEnfrentamiento segundoEnfrentamiento |
	
	jugadorPie := Jugador con: { CartaDeTruco copaCon: 3. CartaDeTruco sieteDeOro . CartaDeTruco anchoDeEspada.} asOrderedCollection.
	jugadorMano := Jugador con: {CartaDeTruco oroCon: 3. CartaDeTruco anchoDeBasto. CartaDeTruco bastoCon: 4.} asOrderedCollection .
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	primerEnfrentamiento := ronda jugar.
	segundoEnfrentamiento := ronda jugar.
	
	self assert: primerEnfrentamiento esPardo.
	self deny: segundoEnfrentamiento esPardo.
	self assert: jugadorMano equals: segundoEnfrentamiento ganador.
	self assert: jugadorMano equals: ronda ganador.
	self assert: jugadorPie cantidadDeCartas equals: 1.
	self assert: jugadorMano cantidadDeCartas equals: 1.! !

!testRun: #RondaDeTrucoTest #test13SiElPrimerEnfrentamientoEsPardoElQueGanaElSegundoGanaLaRonda stamp: 'BAG 7/5/2021 21:12:24'!
ERROR!

!testRun: #RondaDeTrucoTest #test13SiElPrimerEnfrentamientoEsPardoElQueGanaElSegundoGanaLaRonda stamp: 'BAG 7/5/2021 21:12:24'!
ERROR!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'BAG 7/5/2021 21:16:06'!
Truco subclass: #RondaDeTruco
	instanceVariableNames: 'enfrentamientos hayGanador'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'jugar' stamp: 'BAG 7/5/2021 21:16:01' prior: 50866589 overrides: 50865608!
jugar
	| enfrentamientoActual |
	
	enfrentamientoActual := (Enfrentamiento entre: juegaPrimero y: juegaSegundo).
	enfrentamientoActual jugar.
	enfrentamientos add: enfrentamientoActual. 
	
	(enfrentamientos first esPardo and: enfrentamientos size = 2) ifTrue: [ hayGanador := true. ganador := enfrentamientoActual ganador. ].
	
	^enfrentamientoActual. 
	
	! !

!testRun: #RondaDeTrucoTest #test13SiElPrimerEnfrentamientoEsPardoElQueGanaElSegundoGanaLaRonda stamp: 'BAG 7/5/2021 21:16:13'!
ERROR!

!testRun: #RondaDeTrucoTest #test13SiElPrimerEnfrentamientoEsPardoElQueGanaElSegundoGanaLaRonda stamp: 'BAG 7/5/2021 21:16:13'!
ERROR!
!RondaDeTruco methodsFor: 'validaciones' stamp: 'BAG 7/5/2021 21:16:27' prior: 50866769!
assertHayGanador
	(juegaPrimero victorias = 2 or: juegaSegundo victorias = 2 or: hayGanador) ifFalse:[self error: self class noHayUnGanadorAunDescripcionDeError ].! !

!testRun: #RondaDeTrucoTest #test13SiElPrimerEnfrentamientoEsPardoElQueGanaElSegundoGanaLaRonda stamp: 'BAG 7/5/2021 21:16:28'!
FAILURE!

!testRun: #RondaDeTrucoTest #test13SiElPrimerEnfrentamientoEsPardoElQueGanaElSegundoGanaLaRonda stamp: 'BAG 7/5/2021 21:18:21'!
FAILURE!

!testRun: #RondaDeTrucoTest #test13SiElPrimerEnfrentamientoEsPardoElQueGanaElSegundoGanaLaRonda stamp: 'BAG 7/5/2021 21:18:21'!
FAILURE!
!RondaDeTruco methodsFor: 'accessing' stamp: 'BAG 7/5/2021 21:20:21' prior: 50866731 overrides: 50866023!
ganador
	self assertHayGanador.
	hayGanador ifTrue:[^ganador].
	juegaPrimero victorias = 2 ifTrue:[^juegaPrimero].
	^juegaSegundo.! !

!testRun: #RondaDeTrucoTest #test13SiElPrimerEnfrentamientoEsPardoElQueGanaElSegundoGanaLaRonda stamp: 'BAG 7/5/2021 21:20:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SiElPrimerEnfrentamientoEsPardoElQueGanaElSegundoGanaLaRonda stamp: 'BAG 7/5/2021 21:20:26'!
PASSED!
!RondaDeTrucoTest methodsFor: 'orden de juego' stamp: 'BAG 7/5/2021 21:22:36'!
test14SiYaHayUnGanadorNoSePuedeSeguirJugando
	| jugadorMano jugadorPie ronda primerEnfrentamiento segundoEnfrentamiento |
	
	jugadorPie := Jugador con: { CartaDeTruco copaCon: 3. CartaDeTruco sieteDeOro . CartaDeTruco anchoDeEspada.} asOrderedCollection.
	jugadorMano := Jugador con: {CartaDeTruco oroCon: 3. CartaDeTruco anchoDeBasto. CartaDeTruco bastoCon: 4.} asOrderedCollection .
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	primerEnfrentamiento := ronda jugar.
	segundoEnfrentamiento := ronda jugar.
	
	self assert: primerEnfrentamiento esPardo.
	self deny: segundoEnfrentamiento esPardo.
	self assert: jugadorMano equals: segundoEnfrentamiento ganador.
	self assert: jugadorMano equals: ronda ganador.
	
	self should: [ronda jugar]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: anError messageText equals: RondaDeTruco noSePuedeSeguirJugandoCuandoHayUnGanador.
		self assert: jugadorPie cantidadDeCartas equals: 1.
		self assert: jugadorMano cantidadDeCartas equals: 1.
		].! !

!testRun: #RondaDeTrucoTest #test14SiYaHayUnGanadorNoSePuedeSeguirJugando stamp: 'BAG 7/5/2021 21:22:45'!
FAILURE!

!testRun: #RondaDeTrucoTest #test14SiYaHayUnGanadorNoSePuedeSeguirJugando stamp: 'BAG 7/5/2021 21:22:45'!
FAILURE!
!RondaDeTruco class methodsFor: 'descripcion de errores' stamp: 'BAG 7/5/2021 21:23:05'!
noSePuedeSeguirJugandoCuandoHayUnGanador
	 ^'No se puede seguir jugando cuando hay un ganador'! !
!RondaDeTruco methodsFor: 'jugar' stamp: 'BAG 7/5/2021 21:24:15' prior: 50867065 overrides: 50865608!
jugar
	| enfrentamientoActual |
	self sePuedeSeguirJugando.
	
	enfrentamientoActual := (Enfrentamiento entre: juegaPrimero y: juegaSegundo).
	enfrentamientoActual jugar.
	enfrentamientos add: enfrentamientoActual. 
	
	(enfrentamientos first esPardo and: enfrentamientos size = 2) ifTrue: [ hayGanador := true. ganador := enfrentamientoActual ganador. ].
	
	^enfrentamientoActual. 
	
	! !
!RondaDeTruco methodsFor: 'validaciones' stamp: 'BAG 7/5/2021 21:25:00'!
sePuedeSeguirJugando
	(juegaPrimero victorias = 2 or: juegaSegundo victorias = 2 or: hayGanador) ifTrue:[self error: self class noSePuedeSeguirJugandoCuandoHayUnGanador ].! !

!testRun: #RondaDeTrucoTest #test14SiYaHayUnGanadorNoSePuedeSeguirJugando stamp: 'BAG 7/5/2021 21:25:07'!
ERROR!

!testRun: #RondaDeTrucoTest #test14SiYaHayUnGanadorNoSePuedeSeguirJugando stamp: 'BAG 7/5/2021 21:25:07'!
ERROR!
!RondaDeTruco methodsFor: 'initialization' stamp: 'BAG 7/5/2021 21:25:35' prior: 50866778 overrides: 50865951!
comienza: unJugadorMano ySigue: unJugadorPie 
	self sonValidosJugadorMano: unJugadorMano jugadorPie: unJugadorPie.
		
	juegaPrimero := unJugadorMano.
	juegaSegundo := unJugadorPie.
	enfrentamientos:= OrderedCollection new.
	hayGanador := false.
	! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 21:25:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 21:25:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 21:25:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 21:25:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test05NoDebeHaberCartasRepetidasEntreJugadores stamp: 'BAG 7/5/2021 21:25:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test06ElJugadorManoDebeComenzarPrimero stamp: 'BAG 7/5/2021 21:25:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 21:25:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 21:25:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test09SiElPrimerEnfrentamientoEsPardoSigueLaMano stamp: 'BAG 7/5/2021 21:25:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SiGanaLosDosPrimerosEnfrentamientosGanaLaRonda stamp: 'BAG 7/5/2021 21:25:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SiSeJugoUnEnfrentamientoNoHayGanador stamp: 'BAG 7/5/2021 21:25:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SiGanaElPrimeroYElUltimoEsElGanador stamp: 'BAG 7/5/2021 21:25:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SiElPrimerEnfrentamientoEsPardoElQueGanaElSegundoGanaLaRonda stamp: 'BAG 7/5/2021 21:25:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SiYaHayUnGanadorNoSePuedeSeguirJugando stamp: 'BAG 7/5/2021 21:25:38'!
PASSED!
!RondaDeTruco methodsFor: 'validaciones' stamp: 'BAG 7/5/2021 21:26:33'!
hayGanador

	^ juegaPrimero victorias = 2 or: juegaSegundo victorias = 2 or: hayGanador! !
!RondaDeTruco methodsFor: 'validaciones' stamp: 'BAG 7/5/2021 21:26:33' prior: 50867088!
assertHayGanador
	(self hayGanador) ifFalse:[self error: self class noHayUnGanadorAunDescripcionDeError ].! !
!RondaDeTruco methodsFor: 'validaciones' stamp: 'BAG 7/5/2021 21:26:48' prior: 50867191!
sePuedeSeguirJugando
	self hayGanador ifTrue:[self error: self class noSePuedeSeguirJugandoCuandoHayUnGanador ].! !
!RondaDeTruco methodsFor: 'validaciones' stamp: 'BAG 7/5/2021 21:26:57' prior: 50867277!
assertHayGanador
	self hayGanador ifFalse:[self error: self class noHayUnGanadorAunDescripcionDeError ].! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'BAG 7/5/2021 21:27:43' prior: 50865886!
comienzaConMano: unJugadorMano yPie: unJugadorPie 
	^self new comienza: (unJugadorMano asOrderedCollection) ySigue: (unJugadorPie asOrderedCollection)! !
!RondaDeTrucoTest methodsFor: 'juegos validos' stamp: 'BAG 7/5/2021 21:27:56' prior: 50865129!
test01ElJugadorManoSoloDebeTener3Cartas 
	
	| jugadorMano jugadorPie |
	jugadorMano := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada. CartaDeTruco sieteDeEspada.}.
	jugadorPie := Jugador con: {CartaDeTruco sieteDeOro . CartaDeTruco bastoCon: 4. CartaDeTruco oroCon: 3. CartaDeTruco sieteDeEspada.}.
	
	self should: [RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: RondaDeTruco algunJugadorNoTiene3CartasDescripcionDeError.
		].! !
!RondaDeTrucoTest methodsFor: 'juegos validos' stamp: 'BAG 7/5/2021 21:28:03' prior: 50865077!
test02ElJugadorPieSoloDebeTener3Cartas 
	
	| jugadorMano jugadorPie |
	jugadorMano := Jugador con:{CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.} .
	jugadorPie := Jugador con:{CartaDeTruco sieteDeOro . CartaDeTruco bastoCon: 4. CartaDeTruco oroCon: 3. CartaDeTruco copaCon: 4.} .
	
	self should: [RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: RondaDeTruco algunJugadorNoTiene3CartasDescripcionDeError.
		].! !
!RondaDeTrucoTest methodsFor: 'juegos validos' stamp: 'BAG 7/5/2021 21:28:10' prior: 50865033!
test03ElJugadorManoNoDebeTenerCartasRepetidas
	
	| jugadorMano jugadorPie |
	jugadorMano := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco anchoDeEspada.} .
	jugadorPie := Jugador con: {CartaDeTruco sieteDeOro . CartaDeTruco bastoCon: 4. CartaDeTruco oroCon: 3.} .
	
	self should: [RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: RondaDeTruco noSePuedeJugarConMasDeUnMazoDescripcionDeError.
		].! !
!RondaDeTrucoTest methodsFor: 'juegos validos' stamp: 'BAG 7/5/2021 21:28:17' prior: 50865011!
test04ElJugadorPieNoDebeTenerCartasRepetidas
	
	| jugadorMano jugadorPie |
	jugadorMano := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.} .
	jugadorPie := Jugador con: {CartaDeTruco sieteDeOro . CartaDeTruco oroCon: 3. CartaDeTruco oroCon: 3.} .
	
	self should: [RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: RondaDeTruco noSePuedeJugarConMasDeUnMazoDescripcionDeError.
		].! !
!RondaDeTrucoTest methodsFor: 'juegos validos' stamp: 'BAG 7/5/2021 21:28:20' prior: 50864989!
test05NoDebeHaberCartasRepetidasEntreJugadores
	
	| jugadorMano jugadorPie |
	jugadorMano := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.} .
	jugadorPie := Jugador con: {CartaDeTruco sieteDeOro . CartaDeTruco sieteDeEspada. CartaDeTruco anchoDeEspada.} asOrderedCollection.
	
	self should: [RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: RondaDeTruco noSePuedeJugarConMasDeUnMazoDescripcionDeError.
		].! !
!RondaDeTrucoTest methodsFor: 'juegos validos' stamp: 'BAG 7/5/2021 21:28:24' prior: 50867391!
test05NoDebeHaberCartasRepetidasEntreJugadores
	
	| jugadorMano jugadorPie |
	jugadorMano := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.} .
	jugadorPie := Jugador con: {CartaDeTruco sieteDeOro . CartaDeTruco sieteDeEspada. CartaDeTruco anchoDeEspada.} .
	
	self should: [RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: RondaDeTruco noSePuedeJugarConMasDeUnMazoDescripcionDeError.
		].! !
!RondaDeTrucoTest methodsFor: 'orden de juego' stamp: 'BAG 7/5/2021 21:28:32' prior: 50864949!
test06ElJugadorManoDebeComenzarPrimero
	| jugadorMano jugadorPie ronda |
	
	jugadorMano := Jugador con:{CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.} .
	jugadorPie := Jugador con:{CartaDeTruco sieteDeOro . CartaDeTruco oroCon: 3. CartaDeTruco bastoCon: 4.} .
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	self assert: jugadorMano equals: ronda juegaPrimero.! !
!RondaDeTrucoTest methodsFor: 'orden de juego' stamp: 'BAG 7/5/2021 21:28:39' prior: 50866365!
test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero
	| jugadorMano jugadorPie ronda primerEnfrentamiento |
	
	jugadorMano := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.} .
	jugadorPie := Jugador con: {CartaDeTruco sieteDeOro . CartaDeTruco oroCon: 3. CartaDeTruco bastoCon: 4.}  .
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	primerEnfrentamiento := ronda jugar.
	
	self assert: jugadorMano equals: primerEnfrentamiento ganador.
	self assert: jugadorMano equals: ronda juegaPrimero.
	self assert: jugadorPie cantidadDeCartas equals: 2.
	self assert: jugadorMano cantidadDeCartas equals: 2.! !
!RondaDeTrucoTest methodsFor: 'orden de juego' stamp: 'BAG 7/5/2021 21:28:46' prior: 50866042!
test08SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero
	| jugadorMano jugadorPie ronda primerEnfrentamiento |
	
	jugadorPie := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco sieteDeEspada.} .
	jugadorMano := Jugador con: {CartaDeTruco sieteDeOro . CartaDeTruco oroCon: 3. CartaDeTruco bastoCon: 4.}  .
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	primerEnfrentamiento := ronda jugar.
	
	self assert: jugadorPie equals: primerEnfrentamiento ganador.
	self assert: jugadorPie equals: ronda juegaPrimero.
	self assert: jugadorPie cantidadDeCartas equals: 2.
	self assert: jugadorMano cantidadDeCartas equals: 2.! !
!RondaDeTrucoTest methodsFor: 'orden de juego' stamp: 'BAG 7/5/2021 21:28:50' prior: 50866340!
test09SiElPrimerEnfrentamientoEsPardoSigueLaMano
	| jugadorMano jugadorPie ronda primerEnfrentamiento |
	
	jugadorPie := Jugador con: {CartaDeTruco copaCon: 3.CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada.} .
	jugadorMano := Jugador con: {CartaDeTruco oroCon: 3.CartaDeTruco sieteDeOro . CartaDeTruco bastoCon: 4.} asOrderedCollection .
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	primerEnfrentamiento := ronda jugar.
	
	self assert: primerEnfrentamiento esPardo.
	self assert: jugadorMano equals: ronda juegaPrimero.
	self assert: jugadorPie cantidadDeCartas equals: 2.
	self assert: jugadorMano cantidadDeCartas equals: 2.! !
!RondaDeTrucoTest methodsFor: 'orden de juego' stamp: 'BAG 7/5/2021 21:28:53' prior: 50867501!
test09SiElPrimerEnfrentamientoEsPardoSigueLaMano
	| jugadorMano jugadorPie ronda primerEnfrentamiento |
	
	jugadorPie := Jugador con: {CartaDeTruco copaCon: 3.CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada.} .
	jugadorMano := Jugador con: {CartaDeTruco oroCon: 3.CartaDeTruco sieteDeOro . CartaDeTruco bastoCon: 4.}  .
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	primerEnfrentamiento := ronda jugar.
	
	self assert: primerEnfrentamiento esPardo.
	self assert: jugadorMano equals: ronda juegaPrimero.
	self assert: jugadorPie cantidadDeCartas equals: 2.
	self assert: jugadorMano cantidadDeCartas equals: 2.! !
!RondaDeTrucoTest methodsFor: 'orden de juego' stamp: 'BAG 7/5/2021 21:28:58' prior: 50866504!
test10SiGanaLosDosPrimerosEnfrentamientosGanaLaRonda
	| jugadorMano jugadorPie ronda primerEnfrentamiento segundoEnfrentamiento |
	
	jugadorPie := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco copaCon: 3.} .
	jugadorMano := Jugador con: {CartaDeTruco oroCon: 3.CartaDeTruco sieteDeOro . CartaDeTruco bastoCon: 4.}  .
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	primerEnfrentamiento := ronda jugar.
	segundoEnfrentamiento := ronda jugar.
	
	self deny: primerEnfrentamiento esPardo.
	self assert: jugadorPie equals: primerEnfrentamiento ganador.
	self assert: jugadorPie equals: segundoEnfrentamiento ganador.
	self assert: jugadorPie equals: ronda ganador.
	self assert: jugadorPie cantidadDeCartas equals: 1.
	self assert: jugadorMano cantidadDeCartas equals: 1.! !
!RondaDeTrucoTest methodsFor: 'orden de juego' stamp: 'BAG 7/5/2021 21:29:06' prior: 50866663!
test11SiSeJugoUnEnfrentamientoNoHayGanador
	| jugadorMano jugadorPie ronda primerEnfrentamiento |
	
	jugadorPie := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco anchoDeEspada. CartaDeTruco copaCon: 3.} .
	jugadorMano := Jugador con: {CartaDeTruco oroCon: 3.CartaDeTruco sieteDeOro . CartaDeTruco bastoCon: 4.}  .
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	primerEnfrentamiento := ronda jugar.
	
	self deny: primerEnfrentamiento esPardo.
	self assert: jugadorPie equals: primerEnfrentamiento ganador.
	self should: [ ronda ganador]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: anError messageText equals: RondaDeTruco noHayUnGanadorAunDescripcionDeError.
		self assert: jugadorPie cantidadDeCartas equals: 2.
		self assert: jugadorMano cantidadDeCartas equals: 2.
		]! !
!RondaDeTrucoTest methodsFor: 'orden de juego' stamp: 'BAG 7/5/2021 21:29:15' prior: 50866951!
test12SiGanaElPrimeroYElUltimoEsElGanador
	| jugadorMano jugadorPie ronda primerEnfrentamiento segundoEnfrentamiento tercerEnfrentamiento |
	
	jugadorPie := Jugador con: {CartaDeTruco anchoDeBasto. CartaDeTruco copaCon: 3. CartaDeTruco anchoDeEspada.} .
	jugadorMano := Jugador con: {CartaDeTruco sieteDeOro .CartaDeTruco oroCon: 3. CartaDeTruco bastoCon: 4.}  .
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	primerEnfrentamiento := ronda jugar.
	segundoEnfrentamiento := ronda jugar.
	tercerEnfrentamiento := ronda jugar.
	
	self deny: primerEnfrentamiento esPardo.
	self assert: jugadorPie equals: primerEnfrentamiento ganador.
	self assert: segundoEnfrentamiento esPardo.
	self assert: jugadorPie equals: tercerEnfrentamiento ganador.
	self assert: jugadorPie equals: ronda ganador.
	self assert: jugadorPie cantidadDeCartas equals: 0.
	self assert: jugadorMano cantidadDeCartas equals: 0.! !
!RondaDeTrucoTest methodsFor: 'orden de juego' stamp: 'BAG 7/5/2021 21:29:21' prior: 50867017!
test13SiElPrimerEnfrentamientoEsPardoElQueGanaElSegundoGanaLaRonda
	| jugadorMano jugadorPie ronda primerEnfrentamiento segundoEnfrentamiento |
	
	jugadorPie := Jugador con: { CartaDeTruco copaCon: 3. CartaDeTruco sieteDeOro . CartaDeTruco anchoDeEspada.} .
	jugadorMano := Jugador con: {CartaDeTruco oroCon: 3. CartaDeTruco anchoDeBasto. CartaDeTruco bastoCon: 4.}  .
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	primerEnfrentamiento := ronda jugar.
	segundoEnfrentamiento := ronda jugar.
	
	self assert: primerEnfrentamiento esPardo.
	self deny: segundoEnfrentamiento esPardo.
	self assert: jugadorMano equals: segundoEnfrentamiento ganador.
	self assert: jugadorMano equals: ronda ganador.
	self assert: jugadorPie cantidadDeCartas equals: 1.
	self assert: jugadorMano cantidadDeCartas equals: 1.! !
!RondaDeTrucoTest methodsFor: 'orden de juego' stamp: 'BAG 7/5/2021 21:29:26' prior: 50867126!
test14SiYaHayUnGanadorNoSePuedeSeguirJugando
	| jugadorMano jugadorPie ronda primerEnfrentamiento segundoEnfrentamiento |
	
	jugadorPie := Jugador con: { CartaDeTruco copaCon: 3. CartaDeTruco sieteDeOro . CartaDeTruco anchoDeEspada.} .
	jugadorMano := Jugador con: {CartaDeTruco oroCon: 3. CartaDeTruco anchoDeBasto. CartaDeTruco bastoCon: 4.}  .
	
	ronda:=RondaDeTruco comienzaConMano: jugadorMano yPie: jugadorPie.
	
	primerEnfrentamiento := ronda jugar.
	segundoEnfrentamiento := ronda jugar.
	
	self assert: primerEnfrentamiento esPardo.
	self deny: segundoEnfrentamiento esPardo.
	self assert: jugadorMano equals: segundoEnfrentamiento ganador.
	self assert: jugadorMano equals: ronda ganador.
	
	self should: [ronda jugar]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: anError messageText equals: RondaDeTruco noSePuedeSeguirJugandoCuandoHayUnGanador.
		self assert: jugadorPie cantidadDeCartas equals: 1.
		self assert: jugadorMano cantidadDeCartas equals: 1.
		].! !
!Jugador methodsFor: 'jugar' stamp: 'BAG 7/5/2021 21:32:24'!
esUnJuegoPardoContra: unJugador
	^self juegaUnaCarta empardaCon: unJugador juegaUnaCarta ! !
!Jugador methodsFor: 'jugar' stamp: 'BAG 7/5/2021 21:34:59'!
jugarContra: unJugador enEnfrentamiento: unEnfrentamiento
	(self juegaUnaCarta mataA: unJugador juegaUnaCarta) ifTrue:[unEnfrentamiento ganeYo: self.].
	unEnfrentamiento ganeYo: unJugador! !
!Jugador methodsFor: 'jugar' stamp: 'BAG 7/5/2021 21:35:22'!
jugarCarta

	^ cartas first! !
!Jugador methodsFor: 'jugar' stamp: 'BAG 7/5/2021 21:35:22' prior: 50865181!
juegaUnaCarta
	| cartaAJugar |
	cartaAJugar := self jugarCarta.
	cartas remove: cartaAJugar.
	
	^cartaAJugar ! !
!Jugador methodsFor: 'jugar' stamp: 'BAG 7/5/2021 21:35:39' prior: 50867703!
esUnJuegoPardoContra: unJugador
	^self jugarCarta empardaCon: unJugador jugarCarta ! !
!Enfrentamiento methodsFor: 'jugar' stamp: 'BAG 7/5/2021 21:38:15'!
ganeYo: unJugador
	ganador := unJugador.
	
	juegaSegundo = unJugador ifTrue:[juegaSegundo := juegaPrimero. juegaPrimero:= unJugador].
	
	! !
!Jugador methodsFor: 'jugar' stamp: 'BAG 7/5/2021 21:39:10' prior: 50867708!
jugarContra: unJugador enEnfrentamiento: unEnfrentamiento
	(self juegaUnaCarta mataA: unJugador juegaUnaCarta) ifTrue:[
		unEnfrentamiento ganeYo: self. 
		self incrementarVictorias.
	].
	
	unJugador incrementarVictorias. 
	unEnfrentamiento ganeYo: unJugador! !
!Enfrentamiento methodsFor: 'jugar' stamp: 'BAG 7/5/2021 21:40:12' prior: 50866992 overrides: 50865608!
jugar
	| primerCarta segundaCarta  |
	
	esPardo:= juegaPrimero esUnJuegoPardoContra: juegaSegundo. 
	
	primerCarta := juegaPrimero juegaUnaCarta.
	segundaCarta := juegaSegundo juegaUnaCarta.
	
	(segundaCarta  mataA:  primerCarta) ifTrue: [ 
		ganador := juegaSegundo. 
		juegaSegundo := juegaPrimero.
		juegaPrimero := ganador.
		ganador incrementarVictorias.
		].
	(primerCarta mataA: segundaCarta ) ifTrue: [ganador := juegaPrimero. ganador incrementarVictorias ].
	
	
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 21:40:15'!
ERROR!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 21:40:15'!
ERROR!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 21:40:15'!
ERROR!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 21:40:15'!
ERROR!

!testRun: #RondaDeTrucoTest #test05NoDebeHaberCartasRepetidasEntreJugadores stamp: 'BAG 7/5/2021 21:40:15'!
ERROR!

!testRun: #RondaDeTrucoTest #test06ElJugadorManoDebeComenzarPrimero stamp: 'BAG 7/5/2021 21:40:15'!
ERROR!

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 21:40:15'!
ERROR!

!testRun: #RondaDeTrucoTest #test08SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 21:40:15'!
ERROR!

!testRun: #RondaDeTrucoTest #test09SiElPrimerEnfrentamientoEsPardoSigueLaMano stamp: 'BAG 7/5/2021 21:40:15'!
ERROR!

!testRun: #RondaDeTrucoTest #test10SiGanaLosDosPrimerosEnfrentamientosGanaLaRonda stamp: 'BAG 7/5/2021 21:40:15'!
ERROR!

!testRun: #RondaDeTrucoTest #test11SiSeJugoUnEnfrentamientoNoHayGanador stamp: 'BAG 7/5/2021 21:40:15'!
ERROR!

!testRun: #RondaDeTrucoTest #test12SiGanaElPrimeroYElUltimoEsElGanador stamp: 'BAG 7/5/2021 21:40:15'!
ERROR!

!testRun: #RondaDeTrucoTest #test13SiElPrimerEnfrentamientoEsPardoElQueGanaElSegundoGanaLaRonda stamp: 'BAG 7/5/2021 21:40:15'!
ERROR!

!testRun: #RondaDeTrucoTest #test14SiYaHayUnGanadorNoSePuedeSeguirJugando stamp: 'BAG 7/5/2021 21:40:15'!
ERROR!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 21:40:19'!
ERROR!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'BAG 7/5/2021 21:40:45' prior: 50867298!
comienzaConMano: unJugadorMano yPie: unJugadorPie 
	^self new comienza: unJugadorMano  ySigue: unJugadorPie! !
!Jugador methodsFor: 'initialization' stamp: 'BAG 7/5/2021 21:41:04' prior: 50866574!
initializeCon: unaColeccionDeCartas
	cartas := unaColeccionDeCartas asOrderedCollection .
	victorias:=0. ! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 21:41:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 21:41:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 21:41:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 21:41:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test05NoDebeHaberCartasRepetidasEntreJugadores stamp: 'BAG 7/5/2021 21:41:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test06ElJugadorManoDebeComenzarPrimero stamp: 'BAG 7/5/2021 21:41:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 21:41:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 21:41:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test09SiElPrimerEnfrentamientoEsPardoSigueLaMano stamp: 'BAG 7/5/2021 21:41:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SiGanaLosDosPrimerosEnfrentamientosGanaLaRonda stamp: 'BAG 7/5/2021 21:41:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SiSeJugoUnEnfrentamientoNoHayGanador stamp: 'BAG 7/5/2021 21:41:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SiGanaElPrimeroYElUltimoEsElGanador stamp: 'BAG 7/5/2021 21:41:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SiElPrimerEnfrentamientoEsPardoElQueGanaElSegundoGanaLaRonda stamp: 'BAG 7/5/2021 21:41:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SiYaHayUnGanadorNoSePuedeSeguirJugando stamp: 'BAG 7/5/2021 21:41:06'!
PASSED!
!Enfrentamiento methodsFor: 'jugar' stamp: 'BAG 7/5/2021 21:41:56' prior: 50867750 overrides: 50865608!
jugar
	
	
	esPardo:= juegaPrimero esUnJuegoPardoContra: juegaSegundo. 
	
	esPardo ifFalse: [juegaPrimero juegaCon: juegaSegundo]. 
	
	
	
	
	
	! !

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'BAG 7/5/2021 21:42:02'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'BAG 7/5/2021 21:42:02'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'BAG 7/5/2021 21:42:02'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'BAG 7/5/2021 21:42:02'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'BAG 7/5/2021 21:42:02'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'BAG 7/5/2021 21:42:02'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'BAG 7/5/2021 21:42:02'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'BAG 7/5/2021 21:42:02'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'BAG 7/5/2021 21:42:02'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'BAG 7/5/2021 21:42:02'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'BAG 7/5/2021 21:42:02'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'BAG 7/5/2021 21:42:02'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'BAG 7/5/2021 21:42:02'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'BAG 7/5/2021 21:42:02'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'BAG 7/5/2021 21:42:02'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'BAG 7/5/2021 21:42:02'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'BAG 7/5/2021 21:42:02'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'BAG 7/5/2021 21:42:02'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'BAG 7/5/2021 21:42:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 21:42:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 21:42:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 21:42:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 21:42:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test05NoDebeHaberCartasRepetidasEntreJugadores stamp: 'BAG 7/5/2021 21:42:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test06ElJugadorManoDebeComenzarPrimero stamp: 'BAG 7/5/2021 21:42:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 21:42:02'!
FAILURE!

!testRun: #RondaDeTrucoTest #test08SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 21:42:02'!
FAILURE!

!testRun: #RondaDeTrucoTest #test09SiElPrimerEnfrentamientoEsPardoSigueLaMano stamp: 'BAG 7/5/2021 21:42:02'!
FAILURE!

!testRun: #RondaDeTrucoTest #test10SiGanaLosDosPrimerosEnfrentamientosGanaLaRonda stamp: 'BAG 7/5/2021 21:42:02'!
FAILURE!

!testRun: #RondaDeTrucoTest #test11SiSeJugoUnEnfrentamientoNoHayGanador stamp: 'BAG 7/5/2021 21:42:02'!
FAILURE!

!testRun: #RondaDeTrucoTest #test12SiGanaElPrimeroYElUltimoEsElGanador stamp: 'BAG 7/5/2021 21:42:02'!
FAILURE!

!testRun: #RondaDeTrucoTest #test13SiElPrimerEnfrentamientoEsPardoElQueGanaElSegundoGanaLaRonda stamp: 'BAG 7/5/2021 21:42:02'!
FAILURE!

!testRun: #RondaDeTrucoTest #test14SiYaHayUnGanadorNoSePuedeSeguirJugando stamp: 'BAG 7/5/2021 21:42:02'!
FAILURE!

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 21:42:10'!
FAILURE!
!Enfrentamiento methodsFor: 'jugar' stamp: 'BAG 7/5/2021 21:43:03' prior: 50867890 overrides: 50865608!
jugar
	
	
	esPardo:= juegaPrimero esUnJuegoPardoContra: juegaSegundo. 
	
	esPardo ifFalse: [juegaPrimero jugarContra: juegaSegundo enEnfrentamiento:self]. 
	
	
	
	
	
	! !

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'BAG 7/5/2021 21:43:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'BAG 7/5/2021 21:43:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'BAG 7/5/2021 21:43:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'BAG 7/5/2021 21:43:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'BAG 7/5/2021 21:43:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'BAG 7/5/2021 21:43:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'BAG 7/5/2021 21:43:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'BAG 7/5/2021 21:43:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'BAG 7/5/2021 21:43:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'BAG 7/5/2021 21:43:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'BAG 7/5/2021 21:43:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'BAG 7/5/2021 21:43:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'BAG 7/5/2021 21:43:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'BAG 7/5/2021 21:43:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'BAG 7/5/2021 21:43:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'BAG 7/5/2021 21:43:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'BAG 7/5/2021 21:43:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'BAG 7/5/2021 21:43:06'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'BAG 7/5/2021 21:43:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 21:43:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 21:43:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 21:43:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 21:43:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test05NoDebeHaberCartasRepetidasEntreJugadores stamp: 'BAG 7/5/2021 21:43:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test06ElJugadorManoDebeComenzarPrimero stamp: 'BAG 7/5/2021 21:43:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 21:43:06'!
FAILURE!

!testRun: #RondaDeTrucoTest #test08SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 21:43:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test09SiElPrimerEnfrentamientoEsPardoSigueLaMano stamp: 'BAG 7/5/2021 21:43:06'!
FAILURE!

!testRun: #RondaDeTrucoTest #test10SiGanaLosDosPrimerosEnfrentamientosGanaLaRonda stamp: 'BAG 7/5/2021 21:43:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SiSeJugoUnEnfrentamientoNoHayGanador stamp: 'BAG 7/5/2021 21:43:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SiGanaElPrimeroYElUltimoEsElGanador stamp: 'BAG 7/5/2021 21:43:06'!
FAILURE!

!testRun: #RondaDeTrucoTest #test13SiElPrimerEnfrentamientoEsPardoElQueGanaElSegundoGanaLaRonda stamp: 'BAG 7/5/2021 21:43:06'!
FAILURE!

!testRun: #RondaDeTrucoTest #test14SiYaHayUnGanadorNoSePuedeSeguirJugando stamp: 'BAG 7/5/2021 21:43:06'!
FAILURE!

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 21:43:10'!
FAILURE!

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 21:43:43'!
FAILURE!
!Jugador methodsFor: 'jugar' stamp: 'BAG 7/5/2021 21:44:54' prior: 50867738!
jugarContra: unJugador enEnfrentamiento: unEnfrentamiento
	(self juegaUnaCarta mataA: unJugador juegaUnaCarta) ifTrue:[
		unEnfrentamiento ganeYo: self. 
		self incrementarVictorias.
	] ifFalse:[	
		unJugador incrementarVictorias. 
		unEnfrentamiento ganeYo: unJugador
		]! !

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 21:44:55'!
FAILURE!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'BAG 7/5/2021 21:45:00'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'BAG 7/5/2021 21:45:00'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'BAG 7/5/2021 21:45:00'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'BAG 7/5/2021 21:45:00'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'BAG 7/5/2021 21:45:00'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'BAG 7/5/2021 21:45:00'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'BAG 7/5/2021 21:45:00'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'BAG 7/5/2021 21:45:00'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'BAG 7/5/2021 21:45:00'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'BAG 7/5/2021 21:45:00'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'BAG 7/5/2021 21:45:00'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'BAG 7/5/2021 21:45:00'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'BAG 7/5/2021 21:45:00'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'BAG 7/5/2021 21:45:00'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'BAG 7/5/2021 21:45:00'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'BAG 7/5/2021 21:45:00'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'BAG 7/5/2021 21:45:00'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'BAG 7/5/2021 21:45:00'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'BAG 7/5/2021 21:45:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 21:45:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 21:45:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 21:45:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 21:45:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test05NoDebeHaberCartasRepetidasEntreJugadores stamp: 'BAG 7/5/2021 21:45:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test06ElJugadorManoDebeComenzarPrimero stamp: 'BAG 7/5/2021 21:45:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 21:45:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SiGanaLosDosPrimerosEnfrentamientosGanaLaRonda stamp: 'BAG 7/5/2021 21:45:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SiSeJugoUnEnfrentamientoNoHayGanador stamp: 'BAG 7/5/2021 21:45:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 21:45:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test09SiElPrimerEnfrentamientoEsPardoSigueLaMano stamp: 'BAG 7/5/2021 21:45:00'!
FAILURE!

!testRun: #RondaDeTrucoTest #test12SiGanaElPrimeroYElUltimoEsElGanador stamp: 'BAG 7/5/2021 21:45:00'!
FAILURE!

!testRun: #RondaDeTrucoTest #test13SiElPrimerEnfrentamientoEsPardoElQueGanaElSegundoGanaLaRonda stamp: 'BAG 7/5/2021 21:45:00'!
FAILURE!

!testRun: #RondaDeTrucoTest #test14SiYaHayUnGanadorNoSePuedeSeguirJugando stamp: 'BAG 7/5/2021 21:45:00'!
FAILURE!

!testRun: #RondaDeTrucoTest #test09SiElPrimerEnfrentamientoEsPardoSigueLaMano stamp: 'BAG 7/5/2021 21:45:04'!
FAILURE!
!Jugador methodsFor: 'jugar' stamp: 'BAG 7/5/2021 21:48:00' prior: 50868155!
jugarContra: unJugador enEnfrentamiento: unEnfrentamiento
	
	(self juegaUnaCarta mataA: unJugador juegaUnaCarta) ifTrue:[
		unEnfrentamiento ganeYo: self. 
		self incrementarVictorias.
	]. 
	
	(self esUnJuegoPardoContra: unJugador) ifFalse: [unJugador jugarContra: self enEnfrentamiento: unEnfrentamiento.]! !

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'BAG 7/5/2021 21:48:02'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'BAG 7/5/2021 21:48:02'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'BAG 7/5/2021 21:48:02'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'BAG 7/5/2021 21:48:02'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'BAG 7/5/2021 21:48:02'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'BAG 7/5/2021 21:48:02'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'BAG 7/5/2021 21:48:02'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'BAG 7/5/2021 21:48:02'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'BAG 7/5/2021 21:48:02'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'BAG 7/5/2021 21:48:02'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'BAG 7/5/2021 21:48:02'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'BAG 7/5/2021 21:48:02'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'BAG 7/5/2021 21:48:02'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'BAG 7/5/2021 21:48:02'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'BAG 7/5/2021 21:48:02'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'BAG 7/5/2021 21:48:02'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'BAG 7/5/2021 21:48:02'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'BAG 7/5/2021 21:48:02'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'BAG 7/5/2021 21:48:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 21:48:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 21:48:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 21:48:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 21:48:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test05NoDebeHaberCartasRepetidasEntreJugadores stamp: 'BAG 7/5/2021 21:48:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test06ElJugadorManoDebeComenzarPrimero stamp: 'BAG 7/5/2021 21:48:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 21:48:02'!
ERROR!

!testRun: #RondaDeTrucoTest #test08SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 21:48:02'!
ERROR!

!testRun: #RondaDeTrucoTest #test09SiElPrimerEnfrentamientoEsPardoSigueLaMano stamp: 'BAG 7/5/2021 21:48:02'!
FAILURE!

!testRun: #RondaDeTrucoTest #test10SiGanaLosDosPrimerosEnfrentamientosGanaLaRonda stamp: 'BAG 7/5/2021 21:48:02'!
ERROR!

!testRun: #RondaDeTrucoTest #test11SiSeJugoUnEnfrentamientoNoHayGanador stamp: 'BAG 7/5/2021 21:48:02'!
ERROR!

!testRun: #RondaDeTrucoTest #test12SiGanaElPrimeroYElUltimoEsElGanador stamp: 'BAG 7/5/2021 21:48:02'!
FAILURE!

!testRun: #RondaDeTrucoTest #test13SiElPrimerEnfrentamientoEsPardoElQueGanaElSegundoGanaLaRonda stamp: 'BAG 7/5/2021 21:48:02'!
FAILURE!

!testRun: #RondaDeTrucoTest #test14SiYaHayUnGanadorNoSePuedeSeguirJugando stamp: 'BAG 7/5/2021 21:48:02'!
FAILURE!
!Jugador methodsFor: 'jugar' stamp: 'BAG 7/5/2021 21:48:25' prior: 50868292!
jugarContra: unJugador enEnfrentamiento: unEnfrentamiento
	(self juegaUnaCarta mataA: unJugador juegaUnaCarta) ifTrue:[
		unEnfrentamiento ganeYo: self. 
		self incrementarVictorias.
	] ifFalse:[	
		unJugador incrementarVictorias. 
		unEnfrentamiento ganeYo: unJugador
		]! !

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'BAG 7/5/2021 21:48:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'BAG 7/5/2021 21:48:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'BAG 7/5/2021 21:48:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'BAG 7/5/2021 21:48:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'BAG 7/5/2021 21:48:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'BAG 7/5/2021 21:48:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'BAG 7/5/2021 21:48:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'BAG 7/5/2021 21:48:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'BAG 7/5/2021 21:48:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'BAG 7/5/2021 21:48:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'BAG 7/5/2021 21:48:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'BAG 7/5/2021 21:48:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'BAG 7/5/2021 21:48:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'BAG 7/5/2021 21:48:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'BAG 7/5/2021 21:48:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'BAG 7/5/2021 21:48:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'BAG 7/5/2021 21:48:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'BAG 7/5/2021 21:48:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'BAG 7/5/2021 21:48:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 21:48:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 21:48:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 21:48:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 21:48:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test05NoDebeHaberCartasRepetidasEntreJugadores stamp: 'BAG 7/5/2021 21:48:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test06ElJugadorManoDebeComenzarPrimero stamp: 'BAG 7/5/2021 21:48:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 21:48:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 21:48:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test09SiElPrimerEnfrentamientoEsPardoSigueLaMano stamp: 'BAG 7/5/2021 21:48:26'!
FAILURE!

!testRun: #RondaDeTrucoTest #test10SiGanaLosDosPrimerosEnfrentamientosGanaLaRonda stamp: 'BAG 7/5/2021 21:48:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SiSeJugoUnEnfrentamientoNoHayGanador stamp: 'BAG 7/5/2021 21:48:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SiGanaElPrimeroYElUltimoEsElGanador stamp: 'BAG 7/5/2021 21:48:26'!
FAILURE!

!testRun: #RondaDeTrucoTest #test13SiElPrimerEnfrentamientoEsPardoElQueGanaElSegundoGanaLaRonda stamp: 'BAG 7/5/2021 21:48:26'!
FAILURE!

!testRun: #RondaDeTrucoTest #test14SiYaHayUnGanadorNoSePuedeSeguirJugando stamp: 'BAG 7/5/2021 21:48:26'!
FAILURE!
!Jugador methodsFor: 'jugar' stamp: 'BAG 7/5/2021 21:50:14' prior: 50868422!
jugarContra: unJugador enEnfrentamiento: unEnfrentamiento
	(self esUnJuegoPardoContra: unJugador) ifTrue:[unEnfrentamiento esUnEnfrentamientoPardo].
	(self juegaUnaCarta mataA: unJugador juegaUnaCarta) ifTrue:[
		unEnfrentamiento ganeYo: self. 
		self incrementarVictorias.
	] ifFalse:[	
		unJugador incrementarVictorias. 
		unEnfrentamiento ganeYo: unJugador
		]! !
!Enfrentamiento methodsFor: 'resultado' stamp: 'BAG 7/5/2021 21:50:35'!
esUnEnfrentamientoPardo
	esPardo := true.
	! !
!Enfrentamiento methodsFor: 'jugar' stamp: 'BAG 7/5/2021 21:50:58' prior: 50868020 overrides: 50865608!
jugar
	juegaPrimero jugarContra: juegaSegundo enEnfrentamiento:self. 
	
	
	
	
	
	! !
!Jugador methodsFor: 'jugar' stamp: 'BAG 7/5/2021 21:53:06' prior: 50868551!
jugarContra: unJugador enEnfrentamiento: unEnfrentamiento
	| primerCarta segundaCarta |
	primerCarta := self juegaUnaCarta.
	segundaCarta := unJugador juegaUnaCarta.
	
	( primerCarta empardaCon: segundaCarta) ifTrue:[unEnfrentamiento esUnEnfrentamientoPardo].
	(primerCarta mataA: segundaCarta) ifTrue:[
		unEnfrentamiento ganeYo: self. 
		self incrementarVictorias.
	] ifFalse:[	
		unJugador incrementarVictorias. 
		unEnfrentamiento ganeYo: unJugador
		]! !

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'BAG 7/5/2021 21:53:08'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'BAG 7/5/2021 21:53:08'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'BAG 7/5/2021 21:53:08'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'BAG 7/5/2021 21:53:08'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'BAG 7/5/2021 21:53:08'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'BAG 7/5/2021 21:53:08'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'BAG 7/5/2021 21:53:08'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'BAG 7/5/2021 21:53:08'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'BAG 7/5/2021 21:53:08'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'BAG 7/5/2021 21:53:08'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'BAG 7/5/2021 21:53:08'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'BAG 7/5/2021 21:53:08'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'BAG 7/5/2021 21:53:08'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'BAG 7/5/2021 21:53:08'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'BAG 7/5/2021 21:53:08'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'BAG 7/5/2021 21:53:08'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'BAG 7/5/2021 21:53:08'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'BAG 7/5/2021 21:53:08'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'BAG 7/5/2021 21:53:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 21:53:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 21:53:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 21:53:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 21:53:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test05NoDebeHaberCartasRepetidasEntreJugadores stamp: 'BAG 7/5/2021 21:53:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test06ElJugadorManoDebeComenzarPrimero stamp: 'BAG 7/5/2021 21:53:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 21:53:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 21:53:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test09SiElPrimerEnfrentamientoEsPardoSigueLaMano stamp: 'BAG 7/5/2021 21:53:08'!
FAILURE!

!testRun: #RondaDeTrucoTest #test10SiGanaLosDosPrimerosEnfrentamientosGanaLaRonda stamp: 'BAG 7/5/2021 21:53:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SiSeJugoUnEnfrentamientoNoHayGanador stamp: 'BAG 7/5/2021 21:53:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SiGanaElPrimeroYElUltimoEsElGanador stamp: 'BAG 7/5/2021 21:53:08'!
ERROR!

!testRun: #RondaDeTrucoTest #test13SiElPrimerEnfrentamientoEsPardoElQueGanaElSegundoGanaLaRonda stamp: 'BAG 7/5/2021 21:53:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SiYaHayUnGanadorNoSePuedeSeguirJugando stamp: 'BAG 7/5/2021 21:53:08'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'BAG 7/5/2021 21:53:22'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'BAG 7/5/2021 21:53:22'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'BAG 7/5/2021 21:53:22'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'BAG 7/5/2021 21:53:22'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'BAG 7/5/2021 21:53:22'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'BAG 7/5/2021 21:53:22'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'BAG 7/5/2021 21:53:22'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'BAG 7/5/2021 21:53:22'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'BAG 7/5/2021 21:53:22'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'BAG 7/5/2021 21:53:22'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'BAG 7/5/2021 21:53:22'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'BAG 7/5/2021 21:53:22'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'BAG 7/5/2021 21:53:22'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'BAG 7/5/2021 21:53:22'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'BAG 7/5/2021 21:53:22'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'BAG 7/5/2021 21:53:22'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'BAG 7/5/2021 21:53:22'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'BAG 7/5/2021 21:53:22'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'BAG 7/5/2021 21:53:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 21:53:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieSoloDebeTener3Cartas stamp: 'BAG 7/5/2021 21:53:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 21:53:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoDebeTenerCartasRepetidas stamp: 'BAG 7/5/2021 21:53:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test05NoDebeHaberCartasRepetidasEntreJugadores stamp: 'BAG 7/5/2021 21:53:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test06ElJugadorManoDebeComenzarPrimero stamp: 'BAG 7/5/2021 21:53:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 21:53:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SiElJugadorManoGanaElPrimerEnfrentamientoJuegaDevueltaPrimero stamp: 'BAG 7/5/2021 21:53:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test09SiElPrimerEnfrentamientoEsPardoSigueLaMano stamp: 'BAG 7/5/2021 21:53:22'!
FAILURE!

!testRun: #RondaDeTrucoTest #test10SiGanaLosDosPrimerosEnfrentamientosGanaLaRonda stamp: 'BAG 7/5/2021 21:53:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SiSeJugoUnEnfrentamientoNoHayGanador stamp: 'BAG 7/5/2021 21:53:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SiGanaElPrimeroYElUltimoEsElGanador stamp: 'BAG 7/5/2021 21:53:22'!
ERROR!

!testRun: #RondaDeTrucoTest #test13SiElPrimerEnfrentamientoEsPardoElQueGanaElSegundoGanaLaRonda stamp: 'BAG 7/5/2021 21:53:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SiYaHayUnGanadorNoSePuedeSeguirJugando stamp: 'BAG 7/5/2021 21:53:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test09SiElPrimerEnfrentamientoEsPardoSigueLaMano stamp: 'BAG 7/5/2021 21:53:28'!
FAILURE!

ronda juegaPrimero!