----End fileIn of C:\Users\cirob\Documents\Facultad\2021\1erCuatri\Inge1\Cuis\Parcial2\ISW1-2021-1C-2doParcial.st----!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'Ciro 7/5/2021 17:19:49'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'Ciro 7/5/2021 17:19:49'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'Ciro 7/5/2021 17:19:49'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'Ciro 7/5/2021 17:19:49'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'Ciro 7/5/2021 17:19:49'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'Ciro 7/5/2021 17:19:49'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'Ciro 7/5/2021 17:19:49'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'Ciro 7/5/2021 17:19:49'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'Ciro 7/5/2021 17:19:49'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'Ciro 7/5/2021 17:19:49'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'Ciro 7/5/2021 17:19:49'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'Ciro 7/5/2021 17:19:49'!
ERROR!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'Ciro 7/5/2021 17:19:49'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'Ciro 7/5/2021 17:19:49'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'Ciro 7/5/2021 17:19:49'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'Ciro 7/5/2021 17:19:49'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'Ciro 7/5/2021 17:19:49'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'Ciro 7/5/2021 17:19:49'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'Ciro 7/5/2021 17:19:49'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'Ciro 7/5/2021 17:19:49'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'Ciro 7/5/2021 17:19:56'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'Ciro 7/5/2021 17:19:56'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'Ciro 7/5/2021 17:19:56'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'Ciro 7/5/2021 17:19:56'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'Ciro 7/5/2021 17:19:56'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'Ciro 7/5/2021 17:19:56'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'Ciro 7/5/2021 17:19:56'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'Ciro 7/5/2021 17:19:56'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'Ciro 7/5/2021 17:19:56'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'Ciro 7/5/2021 17:19:56'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'Ciro 7/5/2021 17:19:56'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'Ciro 7/5/2021 17:19:56'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'Ciro 7/5/2021 17:19:56'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'Ciro 7/5/2021 17:19:56'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'Ciro 7/5/2021 17:19:56'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'Ciro 7/5/2021 17:19:56'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'Ciro 7/5/2021 17:19:56'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'Ciro 7/5/2021 17:19:56'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'Ciro 7/5/2021 17:19:56'!
PASSED!

Object subclass: #RondaDeTruco
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'Ciro 7/5/2021 17:22:51'!
Object subclass: #RondaDeTruco
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

Object subclass: #RondaDeTruco
	instanceVariableNames: 'mano pie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'Ciro 7/5/2021 17:24:02'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'mano pie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

Object subclass: #Jugador
	instanceVariableNames: 'mano pie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'Ciro 7/5/2021 17:24:08'!
Object subclass: #Jugador
	instanceVariableNames: 'mano pie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

Object subclass: #Jugador
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'Ciro 7/5/2021 17:24:24'!
Object subclass: #Jugador
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

Object subclass: #RondaDeTruco
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'Ciro 7/5/2021 17:24:27'!
Object subclass: #RondaDeTruco
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'Ciro 7/5/2021 17:25:41'!
TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'no messages' stamp: 'Ciro 7/5/2021 17:26:23'!
test01CrearRondaCon2Jugadores

	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:30:07' prior: 50989859!
test01CrearRondaCon2Jugadores

	| ronda mano pie |
	
	mano _ Jugador new.
	pie _ Jugador new.
	ronda _ RondaDeTruco con: mano yCon: pie.
	self assert: ronda mano equals: mano.
	self assert: ronda pie equals: pie.! !

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 17:30:12'!
ERROR!
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:30:23'!
con: aJugador yCon: aJugador2 
	self shouldBeImplemented.! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:31:42' prior: 50989877!
con: unJugador yCon: otroJugador

	self new inicializarCon: unJugador yCon: otroJugador.! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:31:46' prior: 50989883!
con: unJugador yCon: otroJugador

	self new inicializarCon: unJugador yCon: otroJugador! !

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 17:31:46'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:31:52'!
inicializarCon: aJugador yCon: aJugador2 
	self shouldBeImplemented.! !

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'Ciro 7/5/2021 17:32:14'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'mano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'Ciro 7/5/2021 17:32:15'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'mano pie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:32:13' prior: 50989899!
inicializarCon: unJugador yCon: otroJugador
	
	mano _ unJugador.
	pie _ otroJugador! !

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 17:32:17'!
ERROR!
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:32:28'!
mano
	self shouldBeImplemented.! !

!methodRemoval: RondaDeTruco class #mano stamp: 'Ciro 7/5/2021 17:33:04'!
mano
	self shouldBeImplemented.!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:33:27'!
mano

	^ mano copy! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:33:32'!
pie

	^ pie copy! !

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 17:33:42'!
ERROR!
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:34:26' prior: 50989890!
con: unJugador yCon: otroJugador

	^ self new inicializarCon: unJugador yCon: otroJugador! !

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 17:34:31'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:34:56' prior: 50989936!
mano

	^ mano! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:34:59' prior: 50989940!
pie

	^ pie! !

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 17:35:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 17:35:02'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:36:12' prior: 50989864!
test01CrearRondaCon2Jugadores

	| ronda mano pie |
	
	mano _ Jugador new.
	pie _ Jugador new.
	ronda _ RondaDeTruco con: mano yCon: pie.
	self assert: ronda mano equals: mano.
	self assert: ronda pie equals: pie.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:38:10'!
buenaMano

	^ OrderedCollection 
		with: (CartaDeTruco palo: 'espada' numero: 1)
		with: (CartaDeTruco palo: 'espada' numero: 1)
		with: (CartaDeTruco palo: 'espada' numero: 1)! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:39:14' prior: 50989981!
buenaMano

	^ OrderedCollection 
		with: (CartaDeTruco palo: (CartaDeTruco espada) numero: 1)
		with: (CartaDeTruco palo: (CartaDeTruco basto ) numero: 1)
		with: (CartaDeTruco palo: (CartaDeTruco espada) numero: 7)! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:39:28'!
malaMano

	^ OrderedCollection 
		with: (CartaDeTruco palo: (CartaDeTruco espada) numero: 4)
		with: (CartaDeTruco palo: (CartaDeTruco basto ) numero: 4)
		with: (CartaDeTruco palo: (CartaDeTruco copa) numero: 4)! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:39:47' prior: 50989971!
test01CrearRondaCon2Jugadores

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	self assert: ronda mano equals: mano.
	self assert: ronda pie equals: pie.! !

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 17:39:49'!
ERROR!
!Jugador class methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:39:56'!
con: anOrderedCollection 
	self shouldBeImplemented.! !
!Jugador class methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:40:50' prior: 50990024!
con: unaColeccionDeCartas
	
	^ self new inicializarCon: unaColeccionDeCartas! !

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 17:40:53'!
ERROR!
!Jugador methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:40:58'!
inicializarCon: anOrderedCollection 
	self shouldBeImplemented.! !

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'Ciro 7/5/2021 17:41:19'!
Object subclass: #Jugador
	instanceVariableNames: 'cartas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Jugador methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:41:18' prior: 50990037!
inicializarCon: unaColecionDeCartas
	
	cartas _ unaColecionDeCartas! !

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 17:41:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 17:41:21'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:41:52'!
test02NoSePuedeCrearRondaCon2JugadoresConMenosDe3Cartas

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	self assert: ronda mano equals: mano.
	self assert: ronda pie equals: pie.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:42:04'!
manoIncorrecta

	^ OrderedCollection 
		with: (CartaDeTruco palo: (CartaDeTruco espada) numero: 4)
		with: (CartaDeTruco palo: (CartaDeTruco basto ) numero: 4)! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:42:18' prior: 50990062!
test02NoSePuedeCrearRondaCon2JugadoresConMenosDe3Cartas

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self manoIncorrecta.
	ronda _ RondaDeTruco con: mano yCon: pie.
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:43:40' prior: 50990083!
test02NoSePuedeCrearRondaCon2JugadoresConMenosDe3Cartas

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self manoIncorrecta.
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:45:59' prior: 50990010!
test01CrearRondaCon2Jugadores

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	self assert: ronda mano equals: mano.
	self assert: ronda pie equals: pie! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:48:56'!
test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas

	| mano pie |
	
	mano _ Jugador con: self manoIncorrecta.
	pie _ Jugador con: self buenaMano.
	self
		should: [ RondaDeTruco con: mano y yCon: pie ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: RondaDeTruco manoNoTiene3CartasDescripcionDeError ]! !

!methodRemoval: RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConMenosDe3Cartas stamp: 'Ciro 7/5/2021 17:49:07'!
test02NoSePuedeCrearRondaCon2JugadoresConMenosDe3Cartas

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self manoIncorrecta.
	!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 17:49:09'!
ERROR!
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:49:27' prior: 50989947!
con: unJugador yCon: otroJugador

	

	^ self new inicializarCon: unJugador yCon: otroJugador! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:51:01' prior: 50990142!
con: unJugador yCon: otroJugador

	self verificarTienen3Cartas: unJugador y: otroJugador.

	^ self new inicializarCon: unJugador yCon: otroJugador! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:51:41'!
verificarTienen3Cartas: unJugador y: otroJugador

	self verificarTiene3Cartas: unJugador.
	self verificarTiene3Cartas: otroJugador.! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:51:49'!
verificarTiene3Cartas: unJugador! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:52:41' prior: 50990164!
verificarTiene3Cartas: unJugador

	unJugador tiene3Cartas ifFalse: [self manoNotiene3CartasAviso ]! !
!Jugador methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:53:34'!
tiene3Cartas

	^ cartas length = 3! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:54:18'!
manoNotiene3CartasAviso

	self error: self cartCanNotBeEmptyErrorMessage! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:54:35' prior: 50990179!
manoNotiene3CartasAviso

	self error: self manoNoTiene3CartasDescripcionDeError! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:54:52' prior: 50990169!
verificarTiene3Cartas: unJugador

	unJugador tiene3Cartas ifFalse: [self jugadorNotiene3CartasAviso ]! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:54:58'!
jugadorNotiene3CartasAviso

	self error: self manoNoTiene3CartasDescripcionDeError! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:55:01' prior: 50990197!
jugadorNotiene3CartasAviso

	self error: self jugadorNoTiene3CartasDescripcionDeError! !

!methodRemoval: RondaDeTruco class #manoNotiene3CartasAviso stamp: 'Ciro 7/5/2021 17:55:08'!
manoNotiene3CartasAviso

	self error: self manoNoTiene3CartasDescripcionDeError!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:55:17' prior: 50990113!
test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas

	| mano pie |
	
	mano _ Jugador con: self manoIncorrecta.
	pie _ Jugador con: self buenaMano.
	self
		should: [ RondaDeTruco con: mano y yCon: pie ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: RondaDeTruco jugadorNoTiene3CartasDescripcionDeError ]! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:55:46'!
jugadorNoTiene3CartasDescripcionDeError

	^ 'Jugador no tiene 3 cartas'! !

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 17:55:52'!
ERROR!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 17:56:14'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:56:37' prior: 50990215!
test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas

	| mano pie |
	
	mano _ Jugador con: self manoIncorrecta.
	pie _ Jugador con: self buenaMano.
	self
		should: [ RondaDeTruco con: mano yCon: pie ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: RondaDeTruco jugadorNoTiene3CartasDescripcionDeError ]! !

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 17:56:39'!
ERROR!
!Jugador methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:57:02' prior: 50990175!
tiene3Cartas

	^ cartas size = 3! !

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 17:57:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 17:57:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 17:57:05'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:57:23'!
test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas

	| mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self manoIncorrecta.
	self
		should: [ RondaDeTruco con: mano yCon: pie ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: RondaDeTruco jugadorNoTiene3CartasDescripcionDeError ]! !

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 17:57:24'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 17:57:24'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 17:57:24'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 17:57:24'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 17:58:01'!
test04SePuedeJugarLaPrimerRonda

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	self assert: ronda mano equals: mano.
	self assert: ronda pie equals: pie! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:03:24' prior: 50990310!
test04SePuedeJugarLaPrimerRonda

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento = 1.
	self assert: ronda cartasJugadasPorMano size = 1.
	self assert: ronda cartasJugadasPorPie size = 1.
	self assert: ronda cartasJugadasPorMano first = self buenaMano first.
	self assert: ronda cartasJugadasPorPie first = self malaMano first.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:03:59'!
test04SePuedeJugarElPrimerEnfrentamiento

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento = 1.
	self assert: ronda cartasJugadasPorMano size = 1.
	self assert: ronda cartasJugadasPorPie size = 1.
	self assert: ronda cartasJugadasPorMano first = self buenaMano first.
	self assert: ronda cartasJugadasPorPie first = self malaMano first.! !

!methodRemoval: RondaDeTrucoTest #test04SePuedeJugarLaPrimerRonda stamp: 'Ciro 7/5/2021 18:03:59'!
test04SePuedeJugarLaPrimerRonda

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento = 1.
	self assert: ronda cartasJugadasPorMano size = 1.
	self assert: ronda cartasJugadasPorPie size = 1.
	self assert: ronda cartasJugadasPorMano first = self buenaMano first.
	self assert: ronda cartasJugadasPorPie first = self malaMano first.!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:04:50' prior: 50990340!
test04SePuedeJugarElPrimerEnfrentamiento

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento = 1.
	self assert: ronda cartasJugadasPorMano size = 1.
	self assert: ronda cartasJugadasPorPie size = 1.
	self assert: ronda cartasJugadasPorMano first = self buenaMano first.
	self assert: ronda cartasJugadasPorPie first = self malaMano first.
	self assert: ronda ganadorDelPrimerEnfrentamiento = mano.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:05:05' prior: 50990378!
test04SePuedeJugarElPrimerEnfrentamiento

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento = 1.
	self assert: ronda cartasJugadasPorMano size = 1.
	self assert: ronda cartasJugadasPorPie size = 1.
	self assert: ronda cartasJugadasPorMano first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorPie first equals: self malaMano first.
	self assert: ronda ganadorDelPrimerEnfrentamiento equals: mano.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:05:11' prior: 50990399!
test04SePuedeJugarElPrimerEnfrentamiento

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 1.
	self assert: ronda cartasJugadasPorMano size equals: 1.
	self assert: ronda cartasJugadasPorPie size equals: 1.
	self assert: ronda cartasJugadasPorMano first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorPie first equals: self malaMano first.
	self assert: ronda ganadorDelPrimerEnfrentamiento equals: mano.! !

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamiento stamp: 'Ciro 7/5/2021 18:05:21'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:05:26'!
jugarPrimerEnfrentamiento
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:05:38' prior: 50990446!
jugarPrimerEnfrentamiento

	! !

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'Ciro 7/5/2021 18:06:28'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'mano pie numeroDeEnfrentamiento'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:06:27' prior: 50989920!
inicializarCon: unJugador yCon: otroJugador
	
	mano _ unJugador.
	pie _ otroJugador.
	numeroDeEnfrentamiento _ 0.! !

Object subclass: #Enfrentamiento
	instanceVariableNames: 'jugadorInicial jugadorSiguiente numeroDeEnfrentamiento ganador'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Enfrentamiento category: 'ISW1-2021-1C-2doParcial' stamp: 'Ciro 7/5/2021 18:07:54'!
Object subclass: #Enfrentamiento
	instanceVariableNames: 'jugadorInicial jugadorSiguiente numeroDeEnfrentamiento ganador'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Enfrentamiento class methodsFor: 'no messages' stamp: 'Ciro 7/5/2021 18:09:30'!
numero: unNumero con: unJugador yCon: otroJugador! !
!Enfrentamiento class methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:10:19' prior: 50990487!
numero: unNumero con: unJugador yCon: otroJugador

	^ self new inicializarSiendoElNumero: unNumero con: unJugador yCon: otroJugador! !
!Enfrentamiento methodsFor: 'nil' stamp: 'Ciro 7/5/2021 18:10:51'!
inicializarSiendoElNumero: unNumero con: unJugador yCon: otroJugador

	numeroDeEnfrentamiento _ unNumero.
	jugadorInicial  _ unJugador.
	jugadorSiguiente  _ otroJugador! !
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:11:42'!
jugar

	ganador _ jugadorInicial.
	^ ganador.
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:13:30' prior: 50990451!
jugarPrimerEnfrentamiento

	| enfrentamiento |
	
	enfrentamiento _ Enfrentamiento numero: numeroDeEnfrentamiento con: mano yCon: pie.
	^ enfrentamiento jugar

	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:14:04' prior: 50990512!
jugarPrimerEnfrentamiento

	| enfrentamiento |
	
	enfrentamiento _ Enfrentamiento numero: numeroDeEnfrentamiento con: mano yCon: pie.
	numeroDeEnfrentamiento _ numeroDeEnfrentamiento + 1.
	^ enfrentamiento jugar

	! !

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamiento stamp: 'Ciro 7/5/2021 18:14:08'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:14:17'!
numeroDeEnfrentamiento
	self shouldBeImplemented.
	^numeroDeEnfrentamiento! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:14:21' prior: 50990534!
numeroDeEnfrentamiento
	
	^ numeroDeEnfrentamiento! !

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamiento stamp: 'Ciro 7/5/2021 18:14:27'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:14:45'!
cartasJugadasPorMano
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:16:22' prior: 50990548!
cartasJugadasPorMano

	^ mano cantidadDeCartasJugadas: numeroDeEnfrentamiento! !
!Jugador methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:17:05'!
cantidadDeCartasJugadas: unNumero

	| cartasJugadas |
	
	cartasJugadas _ OrderedCollection new.
	
	! !
!Jugador methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:22:05' prior: 50990558!
cantidadDeCartasJugadas: unNumero

	| cartasJugadas |
	
	cartasJugadas _ OrderedCollection new.
	cartasJugadas _ cartas copyFrom: 1 to: unNumero.
	^ cartasJugadas. 
	
	! !

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamiento stamp: 'Ciro 7/5/2021 18:22:23'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:22:28'!
cartasJugadasPorPie
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:22:42' prior: 50990577!
cartasJugadasPorPie
	
	^ pie cantidadDeCartasJugadas: numeroDeEnfrentamiento! !

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamiento stamp: 'Ciro 7/5/2021 18:22:48'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:22:57'!
ganadorDelPrimerEnfrentamiento
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:23:16' prior: 50990591!
ganadorDelPrimerEnfrentamiento
	
	! !
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:24:35' prior: 50990507!
jugar

	ganador _ jugadorInicial.
	! !

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'Ciro 7/5/2021 18:24:58'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'mano pie numeroDeEnfrentamiento enfrentamientos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:24:57' prior: 50990521!
jugarPrimerEnfrentamiento

	| enfrentamiento |
	
	enfrentamiento _ Enfrentamiento numero: numeroDeEnfrentamiento con: mano yCon: pie.
	numeroDeEnfrentamiento _ numeroDeEnfrentamiento + 1.
	enfrentamientos _ enfrentamiento jugar

	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:25:12' prior: 50990615!
jugarPrimerEnfrentamiento

	| enfrentamiento |
	
	enfrentamiento _ Enfrentamiento numero: numeroDeEnfrentamiento con: mano yCon: pie.
	numeroDeEnfrentamiento _ numeroDeEnfrentamiento + 1.
	enfrentamientos add: (enfrentamiento jugar)

	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:25:26' prior: 50990464!
inicializarCon: unJugador yCon: otroJugador
	
	mano _ unJugador.
	pie _ otroJugador.
	numeroDeEnfrentamiento _ 0.
	enfrentamientos _ OrderedCollection new! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:26:04' prior: 50990596!
ganadorDelPrimerEnfrentamiento

	^ (enfrentamientos at: 1) ganador
	
	! !
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:26:15'!
ganador

	^ ganador
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:26:36'!
ganadorDelEnfrentamientoNumero: unNumero

	^ (enfrentamientos at: unNumero) ganador
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:27:08' prior: 50990421!
test04SePuedeJugarElPrimerEnfrentamiento

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 1.
	self assert: ronda cartasJugadasPorMano size equals: 1.
	self assert: ronda cartasJugadasPorPie size equals: 1.
	self assert: ronda cartasJugadasPorMano first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorPie first equals: self malaMano first.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 1) equals: mano.! !

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamiento stamp: 'Ciro 7/5/2021 18:27:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 18:27:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 18:27:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 18:27:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamiento stamp: 'Ciro 7/5/2021 18:27:10'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:28:48'!
test05SePuedeJugarElPrimerEnfrentamientoYGanaPie

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 1.
	self assert: ronda cartasJugadasPorMano size equals: 1.
	self assert: ronda cartasJugadasPorPie size equals: 1.
	self assert: ronda cartasJugadasPorMano first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorPie first equals: self malaMano first.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 1) equals: mano.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:28:53' prior: 50990660!
test04SePuedeJugarElPrimerEnfrentamiento

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 1.
	self assert: ronda cartasJugadasPorMano size equals: 1.
	self assert: ronda cartasJugadasPorPie size equals: 1.
	self assert: ronda cartasJugadasPorMano first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorPie first equals: self malaMano first.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 1) equals: mano.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:29:05'!
test04SePuedeJugarElPrimerEnfrentamientoYGanaMano

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 1.
	self assert: ronda cartasJugadasPorMano size equals: 1.
	self assert: ronda cartasJugadasPorPie size equals: 1.
	self assert: ronda cartasJugadasPorMano first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorPie first equals: self malaMano first.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 1) equals: mano.! !

!methodRemoval: RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamiento stamp: 'Ciro 7/5/2021 18:29:05'!
test04SePuedeJugarElPrimerEnfrentamiento

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 1.
	self assert: ronda cartasJugadasPorMano size equals: 1.
	self assert: ronda cartasJugadasPorPie size equals: 1.
	self assert: ronda cartasJugadasPorMano first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorPie first equals: self malaMano first.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 1) equals: mano.!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:29:43' prior: 50990701!
test05SePuedeJugarElPrimerEnfrentamientoYGanaPie

	| ronda mano pie |
	
	mano _ Jugador con: self malaMano.
	pie _ Jugador con: self buenaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 1.
	self assert: ronda cartasJugadasPorMano size equals: 1.
	self assert: ronda cartasJugadasPorPie size equals: 1.
	self assert: ronda cartasJugadasPorMano first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorPie first equals: self malaMano first.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 1) equals: pie.! !

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 18:29:44'!
FAILURE!
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:31:09' prior: 50990601!
jugar

	| cartaJugadorInicial cartaJugadorSiguiente |
	
	cartaJugadorInicial _ jugadorInicial cartaNumero: numeroDeEnfrentamiento.
	cartaJugadorSiguiente _ jugadorSiguiente cartaNumero: numeroDeEnfrentamiento.

	ganador _ jugadorInicial.
	! !
!Jugador methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:31:34'!
cartaNumero: unNumero

	^ cartas at: unNumero.
	
	! !
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:32:52' prior: 50990817!
jugar

	| cartaJugadorInicial cartaJugadorSiguiente |
	
	cartaJugadorInicial _ jugadorInicial cartaNumero: numeroDeEnfrentamiento.
	cartaJugadorSiguiente _ jugadorSiguiente cartaNumero: numeroDeEnfrentamiento.

	ganador _ self determinarGanadorEntre: cartaJugadorInicial y: cartaJugadorSiguiente.
	! !
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:32:59'!
determinarGanadorEntre: cartaJugadorInicial y: cartaJugadorSiguiente


	! !
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:33:02' prior: 50990845!
determinarGanadorEntre: cartaJugadorInicial y: cartaJugadorSiguiente

	
	! !
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:33:38' prior: 50990851!
determinarGanadorEntre: cartaJugadorInicial y: cartaJugadorSiguiente

	| aux |
	
	aux _ cartaJugadorInicial mataA: cartaJugadorSiguiente.
	! !
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:33:42' prior: 50990857!
determinarGanadorEntre: cartaJugadorInicial y: cartaJugadorSiguiente

	| aux |
	
	aux _ cartaJugadorInicial mataA: cartaJugadorSiguiente.
	
	^ aux.
	! !
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:35:40' prior: 50990865!
determinarGanadorEntre: cartaJugadorInicial y: cartaJugadorSiguiente

	(cartaJugadorInicial empardaCon: cartaJugadorSiguiente) ifTrue: [^ 0].
	(cartaJugadorInicial mataA: cartaJugadorSiguiente) ifTrue: [^ jugadorInicial]
		ifFalse: [^ jugadorSiguiente].
	! !
!Enfrentamiento class methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:36:36'!
parda

	^ 'parda'! !
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:36:55' prior: 50990873!
determinarGanadorEntre: cartaJugadorInicial y: cartaJugadorSiguiente

	(cartaJugadorInicial empardaCon: cartaJugadorSiguiente) ifTrue: [^ Enfrentamiento parda].
	(cartaJugadorInicial mataA: cartaJugadorSiguiente) ifTrue: [^ jugadorInicial]
		ifFalse: [^ jugadorSiguiente].
	! !

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 18:37:03'!
ERROR!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 18:37:10'!
ERROR!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 18:37:30'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:38:22' prior: 50990626!
jugarPrimerEnfrentamiento

	| enfrentamiento |
	
	numeroDeEnfrentamiento _ numeroDeEnfrentamiento + 1.
	enfrentamiento _ Enfrentamiento numero: numeroDeEnfrentamiento con: mano yCon: pie.
	enfrentamientos add: (enfrentamiento jugar)

	! !

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 18:38:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 18:38:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 18:38:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 18:38:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 18:38:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 18:38:26'!
FAILURE!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 18:38:26'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:40:36' prior: 50990791!
test05SePuedeJugarElPrimerEnfrentamientoYGanaPie

	| ronda mano pie |
	
	mano _ Jugador con: self malaMano.
	pie _ Jugador con: self buenaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 1.
	self assert: ronda cartasJugadasPorMano size equals: 1.
	self assert: ronda cartasJugadasPorPie size equals: 1.
	self assert: ronda cartasJugadasPorMano first equals: self malaMano first.
	self assert: ronda cartasJugadasPorPie first equals: self buenaMano first.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 1) equals: pie.! !

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 18:40:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 18:40:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 18:40:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 18:40:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 18:40:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 18:40:38'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:40:57'!
test05SePuedeJugarElPrimerEnfrentamientoYHayParda

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self buenaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 1.
	self assert: ronda cartasJugadasPorMano size equals: 1.
	self assert: ronda cartasJugadasPorPie size equals: 1.
	self assert: ronda cartasJugadasPorMano first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorPie first equals: self buenaMano first.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 1) equals: (Enfrentamiento parda).! !

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 18:40:58'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 18:40:58'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 18:40:58'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 18:40:58'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 18:40:58'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 18:40:58'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 18:40:58'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:41:16'!
test06SePuedeJugarElPrimerEnfrentamientoYHayParda

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self buenaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 1.
	self assert: ronda cartasJugadasPorMano size equals: 1.
	self assert: ronda cartasJugadasPorPie size equals: 1.
	self assert: ronda cartasJugadasPorMano first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorPie first equals: self buenaMano first.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 1) equals: (Enfrentamiento parda).! !

!methodRemoval: RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 18:41:16'!
test05SePuedeJugarElPrimerEnfrentamientoYHayParda

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self buenaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 1.
	self assert: ronda cartasJugadasPorMano size equals: 1.
	self assert: ronda cartasJugadasPorPie size equals: 1.
	self assert: ronda cartasJugadasPorMano first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorPie first equals: self buenaMano first.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 1) equals: (Enfrentamiento parda).!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:43:31'!
malaManoParda

	^ OrderedCollection 
		with: (CartaDeTruco palo: (CartaDeTruco espada) numero: 4)
		with: (CartaDeTruco palo: (CartaDeTruco basto ) numero: 4)
		with: (CartaDeTruco palo: (CartaDeTruco espada) numero: 5)! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:43:39' prior: 50991090!
malaManoParda

	^ OrderedCollection 
		with: (CartaDeTruco palo: (CartaDeTruco copa) numero: 4)
		with: (CartaDeTruco palo: (CartaDeTruco oro ) numero: 4)
		with: (CartaDeTruco palo: (CartaDeTruco copa) numero: 5)! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:43:46' prior: 50990000!
malaMano

	^ OrderedCollection 
		with: (CartaDeTruco palo: (CartaDeTruco espada) numero: 4)
		with: (CartaDeTruco palo: (CartaDeTruco basto ) numero: 4)
		with: (CartaDeTruco palo: (CartaDeTruco espada) numero: 5)! !
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:45:01'!
determinarGanadorSiLoHayEntre: cartaJugadorInicial y: cartaJugadorSiguiente

	(cartaJugadorInicial empardaCon: cartaJugadorSiguiente) ifTrue: [^ Enfrentamiento parda].
	(cartaJugadorInicial mataA: cartaJugadorSiguiente) ifTrue: [^ jugadorInicial]
		ifFalse: [^ jugadorSiguiente].
	! !
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:45:01' prior: 50990832!
jugar

	| cartaJugadorInicial cartaJugadorSiguiente |
	
	cartaJugadorInicial _ jugadorInicial cartaNumero: numeroDeEnfrentamiento.
	cartaJugadorSiguiente _ jugadorSiguiente cartaNumero: numeroDeEnfrentamiento.

	ganador _ self determinarGanadorSiLoHayEntre: cartaJugadorInicial y: cartaJugadorSiguiente.
	! !

!methodRemoval: Enfrentamiento #determinarGanadorEntre:y: stamp: 'Ciro 7/5/2021 18:45:01'!
determinarGanadorEntre: cartaJugadorInicial y: cartaJugadorSiguiente

	(cartaJugadorInicial empardaCon: cartaJugadorSiguiente) ifTrue: [^ Enfrentamiento parda].
	(cartaJugadorInicial mataA: cartaJugadorSiguiente) ifTrue: [^ jugadorInicial]
		ifFalse: [^ jugadorSiguiente].
	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:47:02'!
test06SePuedeJugarElSegundoEnfrentamientoYGanaMano

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self buenaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 1.
	self assert: ronda cartasJugadasPorMano size equals: 1.
	self assert: ronda cartasJugadasPorPie size equals: 1.
	self assert: ronda cartasJugadasPorMano first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorPie first equals: self buenaMano first.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 1) equals: (Enfrentamiento parda).! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:47:54' prior: 50991157!
test06SePuedeJugarElSegundoEnfrentamientoYGanaMano

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorPie first equals: self buenaMano first.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: mano.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:48:10' prior: 50991044!
test06SePuedeJugarElPrimerEnfrentamientoYHayParda

	| ronda mano pie |
	
	mano _ Jugador con: self malaMano.
	pie _ Jugador con: self malaManoParda .
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 1.
	self assert: ronda cartasJugadasPorMano size equals: 1.
	self assert: ronda cartasJugadasPorPie size equals: 1.
	self assert: ronda cartasJugadasPorMano first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorPie first equals: self buenaMano first.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 1) equals: (Enfrentamiento parda).! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:48:11' prior: 50991204!
test06SePuedeJugarElPrimerEnfrentamientoYHayParda

	| ronda mano pie |
	
	mano _ Jugador con: self malaMano.
	pie _ Jugador con: self malaManoParda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 1.
	self assert: ronda cartasJugadasPorMano size equals: 1.
	self assert: ronda cartasJugadasPorPie size equals: 1.
	self assert: ronda cartasJugadasPorMano first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorPie first equals: self buenaMano first.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 1) equals: (Enfrentamiento parda).! !

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElSegundoEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 18:49:03'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:49:07'!
jugarSegundoEnfrentamiento
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:49:30' prior: 50991255!
jugarSegundoEnfrentamiento
	
	| enfrentamiento |
	
	numeroDeEnfrentamiento _ numeroDeEnfrentamiento + 1.
	enfrentamiento _ Enfrentamiento numero: numeroDeEnfrentamiento con: mano yCon: pie.
	enfrentamientos add: (enfrentamiento jugar)! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:49:40'!
test07SePuedeJugarElSegundoEnfrentamientoYGanaMano

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorPie first equals: self buenaMano first.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: mano.! !

!methodRemoval: RondaDeTrucoTest #test06SePuedeJugarElSegundoEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 18:49:40'!
test06SePuedeJugarElSegundoEnfrentamientoYGanaMano

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorPie first equals: self buenaMano first.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: mano.!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 18:49:41'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:50:28' prior: 50991271!
test07SePuedeJugarElSegundoEnfrentamientoYGanaMano

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorMano second equals: self buenaMano second.
	self assert: ronda cartasJugadasPorPie first equals: self malaMano first.
	self assert: ronda cartasJugadasPorPie second equals: self malaMano second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: mano.! !

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 18:50:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 18:50:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 18:50:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 18:50:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 18:50:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 18:50:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 18:50:29'!
FAILURE!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 18:50:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 18:50:29'!
FAILURE!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 18:50:40'!
FAILURE!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 18:50:40'!
FAILURE!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 18:50:47'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 18:50:47'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 18:50:47'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 18:50:47'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 18:50:47'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 18:50:47'!
FAILURE!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 18:50:47'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 18:50:47'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:51:01' prior: 50991228!
test06SePuedeJugarElPrimerEnfrentamientoYHayParda

	| ronda mano pie |
	
	mano _ Jugador con: self malaMano.
	pie _ Jugador con: self malaManoParda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 1.
	self assert: ronda cartasJugadasPorMano size equals: 1.
	self assert: ronda cartasJugadasPorPie size equals: 1.
	self assert: ronda cartasJugadasPorMano first equals: self malaMano first.
	self assert: ronda cartasJugadasPorPie first equals: self malaManoParda first.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 1) equals: (Enfrentamiento parda).! !

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 18:51:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 18:51:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 18:51:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 18:51:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 18:51:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 18:51:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 18:51:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 18:51:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 18:51:04'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:51:09'!
test07SePuedeJugarElSegundoEnfrentamientoYGanaPie

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorMano second equals: self buenaMano second.
	self assert: ronda cartasJugadasPorPie first equals: self malaMano first.
	self assert: ronda cartasJugadasPorPie second equals: self malaMano second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: mano.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:51:18' prior: 50991481!
test07SePuedeJugarElSegundoEnfrentamientoYGanaPie

	| ronda mano pie |
	
	mano _ Jugador con: self malaMano.
	pie _ Jugador con: self buenaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorMano second equals: self buenaMano second.
	self assert: ronda cartasJugadasPorPie first equals: self malaMano first.
	self assert: ronda cartasJugadasPorPie second equals: self malaMano second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: mano.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:51:29' prior: 50991510!
test07SePuedeJugarElSegundoEnfrentamientoYGanaPie

	| ronda mano pie |
	
	mano _ Jugador con: self malaMano.
	pie _ Jugador con: self buenaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self malaMano first.
	self assert: ronda cartasJugadasPorMano second equals: self malaMano second.
	self assert: ronda cartasJugadasPorPie first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorPie second equals: self buenaMano second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: pie.! !

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 18:51:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 18:51:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 18:51:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 18:51:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 18:51:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 18:51:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 18:51:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 18:51:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 18:51:30'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:52:26'!
test08NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero

	| ronda mano pie |
	
	mano _ Jugador con: self malaMano.
	pie _ Jugador con: self buenaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarSegundoEnfrentamiento.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:52:37'!
test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero

	| ronda mano pie |
	
	mano _ Jugador con: self malaMano.
	pie _ Jugador con: self buenaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarSegundoEnfrentamiento.! !

!methodRemoval: RondaDeTrucoTest #test08NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 18:52:37'!
test08NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero

	| ronda mano pie |
	
	mano _ Jugador con: self malaMano.
	pie _ Jugador con: self buenaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarSegundoEnfrentamiento.!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:52:44'!
test08SePuedeJugarElSegundoEnfrentamientoYGanaPie

	| ronda mano pie |
	
	mano _ Jugador con: self malaMano.
	pie _ Jugador con: self buenaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self malaMano first.
	self assert: ronda cartasJugadasPorMano second equals: self malaMano second.
	self assert: ronda cartasJugadasPorPie first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorPie second equals: self buenaMano second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: pie.! !

!methodRemoval: RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 18:52:44'!
test07SePuedeJugarElSegundoEnfrentamientoYGanaPie

	| ronda mano pie |
	
	mano _ Jugador con: self malaMano.
	pie _ Jugador con: self buenaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self malaMano first.
	self assert: ronda cartasJugadasPorMano second equals: self malaMano second.
	self assert: ronda cartasJugadasPorPie first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorPie second equals: self buenaMano second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: pie.!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:53:26' prior: 50991612!
test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero

	| ronda mano pie |
	
	mano _ Jugador con: self malaMano.
	pie _ Jugador con: self buenaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	self
		should: [ ronda jugarSegundoEnfrentamiento ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: ronda noSeJugoElEnfrentamientoAnteriorDescripcionDeError ]! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:53:44' prior: 50991260!
jugarSegundoEnfrentamiento

	
	
	| enfrentamiento |
	
	numeroDeEnfrentamiento _ numeroDeEnfrentamiento + 1.
	enfrentamiento _ Enfrentamiento numero: numeroDeEnfrentamiento con: mano yCon: pie.
	enfrentamientos add: (enfrentamiento jugar)! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:54:25' prior: 50991710!
jugarSegundoEnfrentamiento

	| enfrentamiento |

	self verificarQueSeJugoEnfrentamientoAnterior.
	
	numeroDeEnfrentamiento _ numeroDeEnfrentamiento + 1.
	enfrentamiento _ Enfrentamiento numero: numeroDeEnfrentamiento con: mano yCon: pie.
	enfrentamientos add: (enfrentamiento jugar)! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:54:46' prior: 50991721!
jugarSegundoEnfrentamiento

	| enfrentamiento |

	self verificarQueSeJugoEnfrentamientoAnterior: numeroDeEnfrentamiento.
	
	numeroDeEnfrentamiento _ numeroDeEnfrentamiento + 1.
	enfrentamiento _ Enfrentamiento numero: numeroDeEnfrentamiento con: mano yCon: pie.
	enfrentamientos add: (enfrentamiento jugar)! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:56:01'!
verificarQueSeJugoEnfrentamientoAnterior: numeroDeEnfrentamientoAJugar

	(numeroDeEnfrentamiento +1) < numeroDeEnfrentamientoAJugar ifTrue: [^ 1].! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:56:09' prior: 50991733!
jugarSegundoEnfrentamiento

	| enfrentamiento |

	self verificarQueSeJugoEnfrentamientoAnterior: 2.
	
	numeroDeEnfrentamiento _ numeroDeEnfrentamiento + 1.
	enfrentamiento _ Enfrentamiento numero: numeroDeEnfrentamiento con: mano yCon: pie.
	enfrentamientos add: (enfrentamiento jugar)! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:56:24' prior: 50991746!
verificarQueSeJugoEnfrentamientoAnterior: numeroDeEnfrentamientoAJugar

	(numeroDeEnfrentamiento +1) < numeroDeEnfrentamientoAJugar ifTrue: [^ 1].! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:56:57' prior: 50991767!
verificarQueSeJugoEnfrentamientoAnterior: numeroDeEnfrentamientoAJugar

	(numeroDeEnfrentamiento +1) < numeroDeEnfrentamientoAJugar ifTrue: [^ self noSeJugoEnfrentamientoAnteriorAviso].! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:57:07' prior: 50991775!
verificarQueSeJugoEnfrentamientoAnterior: numeroDeEnfrentamientoAJugar

	(numeroDeEnfrentamiento +1) < numeroDeEnfrentamientoAJugar ifTrue: [ self noSeJugoEnfrentamientoAnteriorAviso].! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:57:24'!
noSeJugoEnfrentamientoAnteriorAviso

	self error: self s! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:57:37' prior: 50991793!
noSeJugoEnfrentamientoAnteriorAviso

	self error: self noSeJugoElEnfrentamientoAnteriorDescripcionDeError! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:57:57'!
noSeJugoElEnfrentamientoAnteriorDescripcionDeError

	^ 'No se jugo el enfrentamiento anterior'! !

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 18:58:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 18:58:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 18:58:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 18:58:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 18:58:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 18:58:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 18:58:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 18:58:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 18:58:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 18:58:06'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 18:59:56' prior: 50990949!
test05SePuedeJugarElPrimerEnfrentamientoYGanaPie

	| ronda mano pie |
	
	mano _ Jugador con: self malaMano.
	pie _ Jugador con: self buenaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 1.
	self assert: ronda cartasJugadasPorMano size equals: 1.
	self assert: ronda cartasJugadasPorPie size equals: 1.
	self assert: ronda cartasJugadasPorMano first equals: self malaMano first.
	self assert: ronda cartasJugadasPorPie first equals: self buenaMano first.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 1) equals: pie.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:00:12'!
test07SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorMano second equals: self buenaMano second.
	self assert: ronda cartasJugadasPorPie first equals: self malaMano first.
	self assert: ronda cartasJugadasPorPie second equals: self malaMano second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: mano.! !

!methodRemoval: RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 19:00:12'!
test07SePuedeJugarElSegundoEnfrentamientoYGanaMano

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorMano second equals: self buenaMano second.
	self assert: ronda cartasJugadasPorPie first equals: self malaMano first.
	self assert: ronda cartasJugadasPorPie second equals: self malaMano second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: mano.!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:00:32'!
test08SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self malaMano.
	pie _ Jugador con: self buenaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self malaMano first.
	self assert: ronda cartasJugadasPorMano second equals: self malaMano second.
	self assert: ronda cartasJugadasPorPie first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorPie second equals: self buenaMano second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: pie.! !

!methodRemoval: RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 19:00:32'!
test08SePuedeJugarElSegundoEnfrentamientoYGanaPie

	| ronda mano pie |
	
	mano _ Jugador con: self malaMano.
	pie _ Jugador con: self buenaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self malaMano first.
	self assert: ronda cartasJugadasPorMano second equals: self malaMano second.
	self assert: ronda cartasJugadasPorPie first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorPie second equals: self buenaMano second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: pie.!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:01:50' prior: 50991930!
test08SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self malaMano.
	pie _ Jugador con: self buenaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self malaMano first.
	self assert: ronda cartasJugadasPorMano second equals: self malaMano second.
	self assert: ronda cartasJugadasPorPie first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorPie second equals: self buenaMano second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: pie.
	self assert: ronda ganadorDeRonda equals: mano.! !

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 19:02:10'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:02:17'!
ganadorDeRonda
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:02:30' prior: 50992022!
ganadorDeRonda

	^ mano! !

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 19:02:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 19:02:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 19:02:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 19:02:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 19:02:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 19:02:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 19:02:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 19:02:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 19:02:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 19:02:34'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:02:49' prior: 50991872!
test07SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorMano second equals: self buenaMano second.
	self assert: ronda cartasJugadasPorPie first equals: self malaMano first.
	self assert: ronda cartasJugadasPorPie second equals: self malaMano second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: mano.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: mano.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:03:00' prior: 50992071!
test07SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorMano second equals: self buenaMano second.
	self assert: ronda cartasJugadasPorPie first equals: self malaMano first.
	self assert: ronda cartasJugadasPorPie second equals: self malaMano second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: mano.
	self assert: ronda ganadorDeRonda equals: mano.! !

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 19:03:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 19:03:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 19:03:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 19:03:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 19:03:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 19:03:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 19:03:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 19:03:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 19:03:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 19:03:00'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:03:05' prior: 50991988!
test08SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self malaMano.
	pie _ Jugador con: self buenaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self malaMano first.
	self assert: ronda cartasJugadasPorMano second equals: self malaMano second.
	self assert: ronda cartasJugadasPorPie first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorPie second equals: self buenaMano second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: pie.
	self assert: ronda ganadorDeRonda equals: pie.! !

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 19:03:06'!
FAILURE!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 19:03:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 19:03:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 19:03:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 19:03:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 19:03:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 19:03:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 19:03:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 19:03:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 19:03:09'!
FAILURE!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 19:03:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 19:03:09'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:05:27' prior: 50992027!
ganadorDeRonda

	self verificarSiHayGanadorDeRonda.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:06:31'!
verificarSiHayGanadorDeRonda

	numeroDeEnfrentamiento >= 2 ifFalse: [^ RondaDeTruco SinGanador ]! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:06:56'!
sinGanador

	^ 'Sin ganador'! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:07:04' prior: 50992257!
verificarSiHayGanadorDeRonda

	numeroDeEnfrentamiento >= 2 ifFalse: [^ RondaDeTruco sinGanador ]! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:08:10' prior: 50992268!
verificarSiHayGanadorDeRonda

	numeroDeEnfrentamiento >= 2 ifFalse: [^ RondaDeTruco sinGanador ].
	
	self verificarSiAlgunJugadorGano2Enfrentamientos! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:08:19'!
verificarSiAlgunJugadorGano2Enfrentamientos

	^ true! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:11:10'!
verificarSiHayPosibilidadDeGanador

	numeroDeEnfrentamiento >= 2 ifFalse: [^ RondaDeTruco sinGanador ].
	
	self verificarSiAlgunJugadorGano2Enfrentamientos! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:11:10' prior: 50992252!
ganadorDeRonda

	self verificarSiHayPosibilidadDeGanador.! !

!methodRemoval: RondaDeTruco #verificarSiHayGanadorDeRonda stamp: 'Ciro 7/5/2021 19:11:10'!
verificarSiHayGanadorDeRonda

	numeroDeEnfrentamiento >= 2 ifFalse: [^ RondaDeTruco sinGanador ].
	
	self verificarSiAlgunJugadorGano2Enfrentamientos!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:11:24' prior: 50992288!
verificarSiHayPosibilidadDeGanador

	numeroDeEnfrentamiento >= 2 ifFalse: [^ RondaDeTruco sinGanador ].! !

!methodRemoval: RondaDeTruco #verificarSiAlgunJugadorGano2Enfrentamientos stamp: 'Ciro 7/5/2021 19:12:31'!
verificarSiAlgunJugadorGano2Enfrentamientos

	^ true!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:14:21' prior: 50992296!
ganadorDeRonda

	|numeroDeMano numeroDePie|

	self verificarSiHayPosibilidadDeGanador.
	
	enfrentamientos do: [ :unEnfrentamiento | ]
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:17:40' prior: 50992321!
ganadorDeRonda

	|numeroDeMano numeroDePie|

	self verificarSiHayPosibilidadDeGanador.
	
	self verificarSiHuboParda.
	
	numeroDeMano _ enfrentamientos sum: [ :unEnfrentamiento | ]
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:19:21'!
verificarSiHuboParda

	(enfrentamientos at: 1) ganador = (Enfrentamiento parda) ifTrue: [^ 1]
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:19:27' prior: 50992338!
verificarSiHuboParda

	(enfrentamientos at: 1) ganador = Enfrentamiento parda ifTrue: [^ 1]
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:19:44' prior: 50992345!
verificarSiHuboParda

	(enfrentamientos at: 1) ganador = Enfrentamiento parda ifTrue: [^ (enfrentamientos at: 2) ganador ]
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:19:57' prior: 50992329!
ganadorDeRonda

	|numeroDeMano numeroDePie|

	self verificarSiHayPosibilidadDeGanador.
	
	numeroDeMano _ enfrentamientos sum: [ :unEnfrentamiento | ]
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:21:26' prior: 50992360!
ganadorDeRonda

	| ganadores |

	self verificarSiHayPosibilidadDeGanador.
	
	ganadores _ OrderedCollection new.
	enfrentamientos do: [ :unEnfrentamiento | ganadores add: (unEnfrentamiento ganador)]
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:21:43' prior: 50992368!
ganadorDeRonda

	| ganadores numeroMano numeroPie |

	self verificarSiHayPosibilidadDeGanador.
	
	ganadores _ OrderedCollection new.
	enfrentamientos do: [ :unEnfrentamiento | ganadores add: (unEnfrentamiento ganador)].
	
	
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:23:20' prior: 50992378!
ganadorDeRonda

	| ganadores numeroMano numeroPie |

	self verificarSiHayPosibilidadDeGanador.
	
	ganadores _ OrderedCollection new.
	enfrentamientos do: [ :unEnfrentamiento | ganadores add: (unEnfrentamiento ganador)].
	numeroMano _ ganadores occurrencesOf: mano.
	numeroPie _ ganadores occurrencesOf: pie.
	
	numeroMano = 2 ifTrue: [ ^ mano].
	numeroPie = 2 ifTrue: [ ^ pie].
	
	^ RondaDeTruco sinGanador.
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 19:23:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 19:23:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 19:23:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 19:23:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 19:23:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 19:23:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 19:23:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 19:23:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 19:23:25'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:24:44'!
test10SePuedeJugarElSegundoEnfrentamientoYGanaManoYNoGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorMano second equals: self buenaMano second.
	self assert: ronda cartasJugadasPorPie first equals: self malaMano first.
	self assert: ronda cartasJugadasPorPie second equals: self malaMano second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: mano.
	self assert: ronda ganadorDeRonda equals: mano.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:24:56' prior: 50992441!
test10SePuedeJugarElSegundoEnfrentamientoYGanaManoYNoGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorMano second equals: self buenaMano second.
	self assert: ronda cartasJugadasPorPie first equals: self malaMano first.
	self assert: ronda cartasJugadasPorPie second equals: self malaMano second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: mano.
	self assert: ronda ganadorDeRonda equals: RondaDeTruco sinGanador.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:25:31'!
buenaManoParaTercerRonda

	^ OrderedCollection 
		with: (CartaDeTruco palo: (CartaDeTruco espada) numero: 1)
		with: (CartaDeTruco palo: (CartaDeTruco basto ) numero: 4)
		with: (CartaDeTruco palo: (CartaDeTruco basto) numero: 1)! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:25:39'!
malaManoParTerceraRonda

	^ OrderedCollection 
		with: (CartaDeTruco palo: (CartaDeTruco espada) numero: 4)
		with: (CartaDeTruco palo: (CartaDeTruco basto ) numero: 4)
		with: (CartaDeTruco palo: (CartaDeTruco espada) numero: 5)! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:25:53' prior: 50992513!
malaManoParTerceraRonda

	^ OrderedCollection 
		with: (CartaDeTruco palo: (CartaDeTruco copa) numero: 4)
		with: (CartaDeTruco palo: (CartaDeTruco espada ) numero: 7)
		with: (CartaDeTruco palo: (CartaDeTruco oro) numero: 4)! !

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 19:25:56'!
FAILURE!

----SNAPSHOT----(5 July 2021 19:27:09) CuisUniversity-4532.image priorSource: 21039165!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:27:53' prior: 50992472!
test10SePuedeJugarElSegundoEnfrentamientoYGanaManoYNoGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self buenaManoParaTercerRonda.
	pie _ Jugador con: self malaManoParTerceraRonda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorMano second equals: self buenaMano second.
	self assert: ronda cartasJugadasPorPie first equals: self malaMano first.
	self assert: ronda cartasJugadasPorPie second equals: self malaMano second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: mano.
	self assert: ronda ganadorDeRonda equals: RondaDeTruco sinGanador.! !

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 19:27:53'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:28:08' prior: 50992542!
test10SePuedeJugarElSegundoEnfrentamientoYGanaManoYNoGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self buenaManoParaTercerRonda.
	pie _ Jugador con: self malaManoParTerceraRonda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self buenaManoParaTercerRonda first.
	self assert: ronda cartasJugadasPorMano second equals: self buenaManoParaTercerRonda second.
	self assert: ronda cartasJugadasPorPie first equals: self malaManoParTerceraRonda first.
	self assert: ronda cartasJugadasPorPie second equals: self malaManoParTerceraRonda second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: mano.
	self assert: ronda ganadorDeRonda equals: RondaDeTruco sinGanador.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:28:16'!
malaManoParaTerceraRonda

	^ OrderedCollection 
		with: (CartaDeTruco palo: (CartaDeTruco copa) numero: 4)
		with: (CartaDeTruco palo: (CartaDeTruco espada ) numero: 7)
		with: (CartaDeTruco palo: (CartaDeTruco oro) numero: 4)! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:28:16' prior: 50992579!
test10SePuedeJugarElSegundoEnfrentamientoYGanaManoYNoGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self buenaManoParaTercerRonda.
	pie _ Jugador con: self malaManoParaTerceraRonda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self buenaManoParaTercerRonda first.
	self assert: ronda cartasJugadasPorMano second equals: self buenaManoParaTercerRonda second.
	self assert: ronda cartasJugadasPorPie first equals: self malaManoParaTerceraRonda first.
	self assert: ronda cartasJugadasPorPie second equals: self malaManoParaTerceraRonda second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: mano.
	self assert: ronda ganadorDeRonda equals: RondaDeTruco sinGanador.! !

!methodRemoval: RondaDeTrucoTest #malaManoParTerceraRonda stamp: 'Ciro 7/5/2021 19:28:16'!
malaManoParTerceraRonda

	^ OrderedCollection 
		with: (CartaDeTruco palo: (CartaDeTruco copa) numero: 4)
		with: (CartaDeTruco palo: (CartaDeTruco espada ) numero: 7)
		with: (CartaDeTruco palo: (CartaDeTruco oro) numero: 4)!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 19:28:21'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:28:32' prior: 50992624!
test10SePuedeJugarElSegundoEnfrentamientoYGanaManoYNoGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self buenaManoParaTercerRonda.
	pie _ Jugador con: self malaManoParaTerceraRonda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self buenaManoParaTercerRonda first.
	self assert: ronda cartasJugadasPorMano second equals: self buenaManoParaTercerRonda second.
	self assert: ronda cartasJugadasPorPie first equals: self malaManoParaTerceraRonda first.
	self assert: ronda cartasJugadasPorPie second equals: self malaManoParaTerceraRonda second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: pie.
	self assert: ronda ganadorDeRonda equals: RondaDeTruco sinGanador.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:29:00' prior: 50992503!
buenaManoParaTercerRonda

	^ OrderedCollection 
		with: (CartaDeTruco palo: (CartaDeTruco basto) numero: 4)
		with: (CartaDeTruco palo: (CartaDeTruco espada ) numero: 1)
		with: (CartaDeTruco palo: (CartaDeTruco basto) numero: 1)! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:29:07' prior: 50992613!
malaManoParaTerceraRonda

	^ OrderedCollection 
		with: (CartaDeTruco palo: (CartaDeTruco espada) numero: 4)
		with: (CartaDeTruco palo: (CartaDeTruco copa ) numero: 7)
		with: (CartaDeTruco palo: (CartaDeTruco oro) numero: 4)! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:29:11' prior: 50992718!
malaManoParaTerceraRonda

	^ OrderedCollection 
		with: (CartaDeTruco palo: (CartaDeTruco espada) numero: 7)
		with: (CartaDeTruco palo: (CartaDeTruco copa ) numero: 4)
		with: (CartaDeTruco palo: (CartaDeTruco oro) numero: 4)! !

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 19:29:14'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:29:19' prior: 50992673!
test10SePuedeJugarElSegundoEnfrentamientoYGanaManoYNoGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self buenaManoParaTercerRonda.
	pie _ Jugador con: self malaManoParaTerceraRonda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self buenaManoParaTercerRonda first.
	self assert: ronda cartasJugadasPorMano second equals: self buenaManoParaTercerRonda second.
	self assert: ronda cartasJugadasPorPie first equals: self malaManoParaTerceraRonda first.
	self assert: ronda cartasJugadasPorPie second equals: self malaManoParaTerceraRonda second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: mano.
	self assert: ronda ganadorDeRonda equals: RondaDeTruco sinGanador.! !

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 19:29:20'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 19:29:20'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 19:29:20'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 19:29:20'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 19:29:20'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 19:29:20'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 19:29:20'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 19:29:20'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 19:29:20'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 19:29:20'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 19:29:20'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:29:32'!
test10SePuedeJugarElSegundoEnfrentamientoYGanaPieYNoGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self buenaManoParaTercerRonda.
	pie _ Jugador con: self malaManoParaTerceraRonda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self buenaManoParaTercerRonda first.
	self assert: ronda cartasJugadasPorMano second equals: self buenaManoParaTercerRonda second.
	self assert: ronda cartasJugadasPorPie first equals: self malaManoParaTerceraRonda first.
	self assert: ronda cartasJugadasPorPie second equals: self malaManoParaTerceraRonda second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: mano.
	self assert: ronda ganadorDeRonda equals: RondaDeTruco sinGanador.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:29:46' prior: 50992822!
test10SePuedeJugarElSegundoEnfrentamientoYGanaPieYNoGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self malaManoParaTerceraRonda.
	pie _ Jugador con: self buenaManoParaTercerRonda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self buenaManoParaTercerRonda first.
	self assert: ronda cartasJugadasPorMano second equals: self buenaManoParaTercerRonda second.
	self assert: ronda cartasJugadasPorPie first equals: self malaManoParaTerceraRonda first.
	self assert: ronda cartasJugadasPorPie second equals: self malaManoParaTerceraRonda second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: mano.
	self assert: ronda ganadorDeRonda equals: RondaDeTruco sinGanador.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:29:54' prior: 50992856!
test10SePuedeJugarElSegundoEnfrentamientoYGanaPieYNoGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self malaManoParaTerceraRonda.
	pie _ Jugador con: self buenaManoParaTercerRonda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self malaManoParaTerceraRonda first.
	self assert: ronda cartasJugadasPorMano second equals: self malaManoParaTerceraRonda second.
	self assert: ronda cartasJugadasPorPie first equals: self buenaManoParaTercerRonda first.
	self assert: ronda cartasJugadasPorPie second equals: self buenaManoParaTercerRonda second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: pie.
	self assert: ronda ganadorDeRonda equals: RondaDeTruco sinGanador.! !

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 19:29:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 19:29:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 19:29:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 19:29:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 19:29:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 19:29:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 19:29:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 19:29:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 19:29:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 19:29:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 19:29:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 19:29:55'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:30:19'!
test12SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRondaPorPardarLaPrimera

	| ronda mano pie |
	
	mano _ Jugador con: self malaManoParaTerceraRonda.
	pie _ Jugador con: self buenaManoParaTercerRonda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self malaManoParaTerceraRonda first.
	self assert: ronda cartasJugadasPorMano second equals: self malaManoParaTerceraRonda second.
	self assert: ronda cartasJugadasPorPie first equals: self buenaManoParaTercerRonda first.
	self assert: ronda cartasJugadasPorPie second equals: self buenaManoParaTercerRonda second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: pie.
	self assert: ronda ganadorDeRonda equals: RondaDeTruco sinGanador.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:30:49'!
malaManoPeroGanaSegunda

	^ OrderedCollection 
		with: (CartaDeTruco palo: (CartaDeTruco copa) numero: 4)
		with: (CartaDeTruco palo: (CartaDeTruco oro ) numero: 4)
		with: (CartaDeTruco palo: (CartaDeTruco copa) numero: 5)! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:30:49' prior: 50991424!
test06SePuedeJugarElPrimerEnfrentamientoYHayParda

	| ronda mano pie |
	
	mano _ Jugador con: self malaMano.
	pie _ Jugador con: self malaManoPeroGanaSegunda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 1.
	self assert: ronda cartasJugadasPorMano size equals: 1.
	self assert: ronda cartasJugadasPorPie size equals: 1.
	self assert: ronda cartasJugadasPorMano first equals: self malaMano first.
	self assert: ronda cartasJugadasPorPie first equals: self malaManoPeroGanaSegunda first.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 1) equals: (Enfrentamiento parda).! !

!methodRemoval: RondaDeTrucoTest #malaManoParda stamp: 'Ciro 7/5/2021 19:30:49'!
malaManoParda

	^ OrderedCollection 
		with: (CartaDeTruco palo: (CartaDeTruco copa) numero: 4)
		with: (CartaDeTruco palo: (CartaDeTruco oro ) numero: 4)
		with: (CartaDeTruco palo: (CartaDeTruco copa) numero: 5)!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:30:59' prior: 50993006!
malaManoPeroGanaSegunda

	^ OrderedCollection 
		with: (CartaDeTruco palo: (CartaDeTruco copa) numero: 4)
		with: (CartaDeTruco palo: (CartaDeTruco espada ) numero: 1)
		with: (CartaDeTruco palo: (CartaDeTruco basto) numero: 1)! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:31:17'!
malaManoPardaPeroGanaSegunda

	^ OrderedCollection 
		with: (CartaDeTruco palo: (CartaDeTruco copa) numero: 4)
		with: (CartaDeTruco palo: (CartaDeTruco espada ) numero: 1)
		with: (CartaDeTruco palo: (CartaDeTruco basto) numero: 1)! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:31:17' prior: 50993017!
test06SePuedeJugarElPrimerEnfrentamientoYHayParda

	| ronda mano pie |
	
	mano _ Jugador con: self malaMano.
	pie _ Jugador con: self malaManoPardaPeroGanaSegunda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 1.
	self assert: ronda cartasJugadasPorMano size equals: 1.
	self assert: ronda cartasJugadasPorPie size equals: 1.
	self assert: ronda cartasJugadasPorMano first equals: self malaMano first.
	self assert: ronda cartasJugadasPorPie first equals: self malaManoPardaPeroGanaSegunda first.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 1) equals: (Enfrentamiento parda).! !

!methodRemoval: RondaDeTrucoTest #malaManoPeroGanaSegunda stamp: 'Ciro 7/5/2021 19:31:17'!
malaManoPeroGanaSegunda

	^ OrderedCollection 
		with: (CartaDeTruco palo: (CartaDeTruco copa) numero: 4)
		with: (CartaDeTruco palo: (CartaDeTruco espada ) numero: 1)
		with: (CartaDeTruco palo: (CartaDeTruco basto) numero: 1)!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:31:49' prior: 50992972!
test12SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRondaPorPardarLaPrimera

	| ronda mano pie |
	
	mano _ Jugador con: self malaManoPardaPeroGanaSegunda .
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self malaManoPardaPeroGanaSegunda first.
	self assert: ronda cartasJugadasPorMano second equals: self malaManoPardaPeroGanaSegunda second.
	self assert: ronda cartasJugadasPorPie first equals: self malaMano first.
	self assert: ronda cartasJugadasPorPie second equals: self malaMano second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: mano.
	self assert: ronda ganadorDeRonda equals: mano.! !

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 19:32:05'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:32:27' prior: 50992389!
ganadorDeRonda

	| ganadores numeroMano numeroPie |

	self verificarSiHayPosibilidadDeGanador.
	
	self verificarSiHuboParda.
	
	ganadores _ OrderedCollection new.
	enfrentamientos do: [ :unEnfrentamiento | ganadores add: (unEnfrentamiento ganador)].
	numeroMano _ ganadores occurrencesOf: mano.
	numeroPie _ ganadores occurrencesOf: pie.
	
	numeroMano = 2 ifTrue: [ ^ mano].
	numeroPie = 2 ifTrue: [ ^ pie].
	
	^ RondaDeTruco sinGanador.
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 19:32:32'!
FAILURE!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 19:32:53'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:34:25' prior: 50992352!
verificarSiHuboParda

	(enfrentamientos at: 1) ganador = Enfrentamiento parda ifTrue: [^ ((enfrentamientos at: 2) ganador)]
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:34:36' prior: 50993172!
verificarSiHuboParda

	(enfrentamientos at: 1) ganador = Enfrentamiento parda ifTrue: [^ (enfrentamientos at: 2) ganador]
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:34:41' prior: 50993180!
verificarSiHuboParda

	(enfrentamientos at: 1) ganador = Enfrentamiento parda ifTrue: [^ ((enfrentamientos at: 2) ganador)]
	
	! !

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 19:34:46'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:35:05'!
test11SePuedeJugarElSegundoEnfrentamientoYGanaPieYNoGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self malaManoParaTerceraRonda.
	pie _ Jugador con: self buenaManoParaTercerRonda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self malaManoParaTerceraRonda first.
	self assert: ronda cartasJugadasPorMano second equals: self malaManoParaTerceraRonda second.
	self assert: ronda cartasJugadasPorPie first equals: self buenaManoParaTercerRonda first.
	self assert: ronda cartasJugadasPorPie second equals: self buenaManoParaTercerRonda second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: pie.
	self assert: ronda ganadorDeRonda equals: RondaDeTruco sinGanador.! !

!methodRemoval: RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 19:35:05'!
test10SePuedeJugarElSegundoEnfrentamientoYGanaPieYNoGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self malaManoParaTerceraRonda.
	pie _ Jugador con: self buenaManoParaTercerRonda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self malaManoParaTerceraRonda first.
	self assert: ronda cartasJugadasPorMano second equals: self malaManoParaTerceraRonda second.
	self assert: ronda cartasJugadasPorPie first equals: self buenaManoParaTercerRonda first.
	self assert: ronda cartasJugadasPorPie second equals: self buenaManoParaTercerRonda second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: pie.
	self assert: ronda ganadorDeRonda equals: RondaDeTruco sinGanador.!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 19:35:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 19:35:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 19:35:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 19:35:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 19:35:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 19:35:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 19:35:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 19:35:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 19:35:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 19:35:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 19:35:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 19:35:10'!
FAILURE!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 19:35:10'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:36:52' prior: 50993145!
ganadorDeRonda

	| ganadores numeroMano numeroPie |
	
	self verificarSiHuboParda.
	
	ganadores _ OrderedCollection new.
	enfrentamientos do: [ :unEnfrentamiento | ganadores add: (unEnfrentamiento ganador)].
	numeroMano _ ganadores occurrencesOf: mano.
	numeroPie _ ganadores occurrencesOf: pie.
	
	numeroMano = 2 ifTrue: [ ^ mano].
	numeroPie = 2 ifTrue: [ ^ pie].
	
	^ RondaDeTruco sinGanador.
	
	
	
	! !

!methodRemoval: RondaDeTruco #verificarSiHayPosibilidadDeGanador stamp: 'Ciro 7/5/2021 19:37:03'!
verificarSiHayPosibilidadDeGanador

	numeroDeEnfrentamiento >= 2 ifFalse: [^ RondaDeTruco sinGanador ].!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 19:37:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 19:37:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 19:37:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 19:37:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 19:37:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 19:37:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 19:37:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 19:37:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 19:37:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 19:37:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 19:37:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 19:37:09'!
FAILURE!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 19:37:09'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:38:32' prior: 50993188!
verificarSiHuboParda

	(enfrentamientos at: 1) ganador = Enfrentamiento parda ifTrue: [self hayGanadorPorParda: ((enfrentamientos at: 2) ganador)]
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:38:48'!
hayGanadorPorParda: unJugador

	^ unJugador
	
	! !

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 19:39:02'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:40:57' prior: 50993323!
ganadorDeRonda

	| ganadores numeroMano numeroPie |
	
	(enfrentamientos at: 1) ganador = Enfrentamiento parda ifTrue: [self hayGanadorPorParda: ((enfrentamientos at: 2) ganador)].
	
	ganadores _ OrderedCollection new.
	enfrentamientos do: [ :unEnfrentamiento | ganadores add: (unEnfrentamiento ganador)].
	numeroMano _ ganadores occurrencesOf: mano.
	numeroPie _ ganadores occurrencesOf: pie.
	
	numeroMano = 2 ifTrue: [ ^ mano].
	numeroPie = 2 ifTrue: [ ^ pie].
	
	^ RondaDeTruco sinGanador.
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 19:41:01'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:41:18' prior: 50993417!
ganadorDeRonda

	| ganadores numeroMano numeroPie |
	
	(enfrentamientos at: 1) ganador = Enfrentamiento parda ifTrue: [^ ((enfrentamientos at: 2) ganador)].
	
	ganadores _ OrderedCollection new.
	enfrentamientos do: [ :unEnfrentamiento | ganadores add: (unEnfrentamiento ganador)].
	numeroMano _ ganadores occurrencesOf: mano.
	numeroPie _ ganadores occurrencesOf: pie.
	
	numeroMano = 2 ifTrue: [ ^ mano].
	numeroPie = 2 ifTrue: [ ^ pie].
	
	^ RondaDeTruco sinGanador.
	
	
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:41:21' prior: 50993441!
ganadorDeRonda

	| ganadores numeroMano numeroPie |
	
	(enfrentamientos at: 1) ganador = Enfrentamiento parda ifTrue: [^ (enfrentamientos at: 2) ganador].
	
	ganadores _ OrderedCollection new.
	enfrentamientos do: [ :unEnfrentamiento | ganadores add: (unEnfrentamiento ganador)].
	numeroMano _ ganadores occurrencesOf: mano.
	numeroPie _ ganadores occurrencesOf: pie.
	
	numeroMano = 2 ifTrue: [ ^ mano].
	numeroPie = 2 ifTrue: [ ^ pie].
	
	^ RondaDeTruco sinGanador.
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 19:41:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 19:41:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 19:41:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 19:41:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 19:41:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 19:41:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 19:41:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 19:41:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 19:41:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 19:41:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 19:41:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 19:41:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 19:41:25'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:42:04'!
test13SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRondaPorPardarLaPrimera

	| ronda mano pie |
	
	mano _ Jugador con: self malaMano.
	pie _ Jugador con: self malaManoPardaPeroGanaSegunda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self malaManoPardaPeroGanaSegunda first.
	self assert: ronda cartasJugadasPorMano second equals: self malaManoPardaPeroGanaSegunda second.
	self assert: ronda cartasJugadasPorPie first equals: self malaMano first.
	self assert: ronda cartasJugadasPorPie second equals: self malaMano second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: mano.
	self assert: ronda ganadorDeRonda equals: mano.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:42:19' prior: 50993532!
test13SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRondaPorPardarLaPrimera

	| ronda mano pie |
	
	mano _ Jugador con: self malaMano.
	pie _ Jugador con: self malaManoPardaPeroGanaSegunda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self malaMano first.
	self assert: ronda cartasJugadasPorMano second equals: self malaMano second.
	self assert: ronda cartasJugadasPorPie first equals: self malaManoPardaPeroGanaSegunda first.
	self assert: ronda cartasJugadasPorPie second equals: self malaManoPardaPeroGanaSegunda second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: pie.
	self assert: ronda ganadorDeRonda equals: pie.! !

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 19:42:24'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 19:42:24'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 19:42:24'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 19:42:24'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 19:42:24'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 19:42:24'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 19:42:24'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 19:42:24'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 19:42:24'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 19:42:24'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 19:42:24'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 19:42:24'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 19:42:24'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 19:42:24'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:43:31'!
test14SePuedeJugarElTercerEnfrentamientoYGanaManoYGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	ronda jugarTercerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 3.
	self assert: ronda cartasJugadasPorMano size equals: 3.
	self assert: ronda cartasJugadasPorPie size equals: 3.
	self assert: ronda cartasJugadasPorMano equals: self malaMano.
	self assert: ronda cartasJugadasPorPie equals: self malaManoPardaPeroGanaSegunda.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 3) equals: mano.
	self assert: ronda ganadorDeRonda equals: pie.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:43:40' prior: 50993656!
test14SePuedeJugarElTercerEnfrentamientoYGanaManoYGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	ronda jugarTercerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 3.
	self assert: ronda cartasJugadasPorMano size equals: 3.
	self assert: ronda cartasJugadasPorPie size equals: 3.
	self assert: ronda cartasJugadasPorMano equals: self malaMano.
	self assert: ronda cartasJugadasPorPie equals: self malaManoPardaPeroGanaSegunda.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 3) equals: mano.
	self assert: ronda ganadorDeRonda equals: mano.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:44:03' prior: 50993683!
test14SePuedeJugarElTercerEnfrentamientoYGanaManoYGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self buenaManoParaTercerRonda .
	pie _ Jugador con: self malaManoParaTerceraRonda .
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	ronda jugarTercerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 3.
	self assert: ronda cartasJugadasPorMano size equals: 3.
	self assert: ronda cartasJugadasPorPie size equals: 3.
	self assert: ronda cartasJugadasPorMano equals: self buenaManoParaTercerRonda.
	self assert: ronda cartasJugadasPorPie equals: self malaManoParaTerceraRonda.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 3) equals: mano.
	self assert: ronda ganadorDeRonda equals: mano.! !

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 19:44:06'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:44:13'!
jugarTercerEnfrentamiento
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:44:38' prior: 50993742!
jugarTercerEnfrentamiento
	
	| enfrentamiento |

	self verificarQueSeJugoEnfrentamientoAnterior: 3.
	
	numeroDeEnfrentamiento _ numeroDeEnfrentamiento + 1.
	enfrentamiento _ Enfrentamiento numero: numeroDeEnfrentamiento con: mano yCon: pie.
	enfrentamientos add: (enfrentamiento jugar)! !

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 19:44:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 19:44:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 19:44:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 19:44:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 19:44:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 19:44:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 19:44:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 19:44:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 19:44:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 19:44:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 19:44:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 19:44:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 19:44:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 19:44:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 19:44:43'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:45:13'!
test15SePuedeJugarElTercerEnfrentamientoYGanaPieYGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self malaManoParaTerceraRonda.
	pie _ Jugador con: self buenaManoParaTercerRonda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	ronda jugarTercerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 3.
	self assert: ronda cartasJugadasPorMano size equals: 3.
	self assert: ronda cartasJugadasPorPie size equals: 3.
	self assert: ronda cartasJugadasPorMano equals: self malaManoParaTerceraRonda.
	self assert: ronda cartasJugadasPorPie equals: self buenaManoParaTercerRonda.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 3) equals: pie.
	self assert: ronda ganadorDeRonda equals: pie.! !

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 19:45:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 19:45:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 19:45:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 19:45:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 19:45:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 19:45:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 19:45:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 19:45:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 19:45:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 19:45:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 19:45:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 19:45:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 19:45:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 19:45:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 19:45:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 19:45:14'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:45:37'!
test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores

	| ronda mano pie |
	
	mano _ Jugador con: self malaManoParaTerceraRonda.
	pie _ Jugador con: self buenaManoParaTercerRonda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarTercerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 3.
	self assert: ronda cartasJugadasPorMano size equals: 3.
	self assert: ronda cartasJugadasPorPie size equals: 3.
	self assert: ronda cartasJugadasPorMano equals: self malaManoParaTerceraRonda.
	self assert: ronda cartasJugadasPorPie equals: self buenaManoParaTercerRonda.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 3) equals: pie.
	self assert: ronda ganadorDeRonda equals: pie.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:45:54' prior: 50993915!
test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores

	| ronda mano pie |
	
	mano _ Jugador con: self malaManoParaTerceraRonda.
	pie _ Jugador con: self buenaManoParaTercerRonda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	self
		should: [ ronda jugarTercerEnfrentamiento ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: ronda noSeJugoElEnfrentamientoAnteriorDescripcionDeError ]! !

!testRun: #RondaDeTrucoTest #test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores stamp: 'Ciro 7/5/2021 19:45:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 19:45:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 19:45:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 19:45:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 19:45:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 19:45:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 19:45:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 19:45:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 19:45:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 19:45:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 19:45:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 19:45:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 19:45:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 19:45:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 19:45:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 19:45:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores stamp: 'Ciro 7/5/2021 19:45:54'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:46:09'!
test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador

	| ronda mano pie |
	
	mano _ Jugador con: self malaManoParaTerceraRonda.
	pie _ Jugador con: self buenaManoParaTercerRonda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	self
		should: [ ronda jugarTercerEnfrentamiento ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: ronda noSeJugoElEnfrentamientoAnteriorDescripcionDeError ]! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:46:18' prior: 50994030!
test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	self
		should: [ ronda jugarTercerEnfrentamiento ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: ronda noSeJugoElEnfrentamientoAnteriorDescripcionDeError ]! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:46:38' prior: 50994048!
test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento .
	ronda jugarSegundoEnfrentamiento .
	self
		should: [ ronda jugarTercerEnfrentamiento ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: ronda noSeJugoElEnfrentamientoAnteriorDescripcionDeError ]! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:46:56' prior: 50994065!
test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento .
	ronda jugarSegundoEnfrentamiento .
	self
		should: [ ronda jugarTercerEnfrentamiento ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: ronda noSeJugoElEnfrentamientoAnteriorDescripcionDeError.
			self assert: ronda numeroDeEnfrentamiento equals: 2]! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:47:13' prior: 50994084!
test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento .
	ronda jugarSegundoEnfrentamiento .
	self
		should: [ ronda jugarTercerEnfrentamiento ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: ronda noSeJugoElEnfrentamientoAnteriorDescripcionDeError.
			self assert: ronda numeroDeEnfrentamiento equals: 2.
			self assert: ronda cartasJugadasPorMano size equals: 2.
			self assert: ronda cartasJugadasPorPie size equals: 2]! !

!testRun: #RondaDeTrucoTest #test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador stamp: 'Ciro 7/5/2021 19:47:14'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:47:25' prior: 50994105!
test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento .
	ronda jugarSegundoEnfrentamiento .
	self
		should: [ ronda jugarTercerEnfrentamiento ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: ronda yaHayGanadorDescripcionDeError.
			self assert: ronda numeroDeEnfrentamiento equals: 2.
			self assert: ronda cartasJugadasPorMano size equals: 2.
			self assert: ronda cartasJugadasPorPie size equals: 2]! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:47:47' prior: 50993747!
jugarTercerEnfrentamiento
	
	| enfrentamiento |

	self verificarQueSeJugoEnfrentamientoAnterior: 3.
	
	self verificarQueNoHayaGanador.
	
	numeroDeEnfrentamiento _ numeroDeEnfrentamiento + 1.
	enfrentamiento _ Enfrentamiento numero: numeroDeEnfrentamiento con: mano yCon: pie.
	enfrentamientos add: (enfrentamiento jugar)! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:47:53'!
verificarQueNoHayaGanador! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:49:14' prior: 50994171!
verificarQueNoHayaGanador

	self ganadorDeRonda = RondaDeTruco sinGanador ifFalse: []! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:49:29' prior: 50994175!
verificarQueNoHayaGanador

	self ganadorDeRonda = RondaDeTruco sinGanador ifFalse: [ self yaHayGanadorAviso ].! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:49:44'!
yaHayGanadorAviso

	self error: self yaHayGanadorDescripcionDeError! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:50:00'!
yaHayGanadorDescripcionDeError

	^ 'YaH hay ganador'! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:50:03' prior: 50994193!
yaHayGanadorDescripcionDeError

	^ 'Ya hay ganador'! !

!testRun: #RondaDeTrucoTest #test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador stamp: 'Ciro 7/5/2021 19:50:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 19:50:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 19:50:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 19:50:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 19:50:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 19:50:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 19:50:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 19:50:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 19:50:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 19:50:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 19:50:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 19:50:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 19:50:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 19:50:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 19:50:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 19:50:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores stamp: 'Ciro 7/5/2021 19:50:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador stamp: 'Ciro 7/5/2021 19:50:07'!
PASSED!
!Behavior method!
espada
	^ #espada coverAll:
		{12 to: 18}.! !
!Behavior method!
palo: unPalo numero: unNumero
	[
	(self coverAll:
		{35 to: 38}) assertN�meroEsV�lido:
		(unNumero
			cover: (62 to: 69)
			declaredAt: (22 to: 29)) ] valueCoveringAll:
		{40 to: 60}.
	[
	(self coverAll:
		{73 to: 76}) assertPaloEsV�lido:
		(unPalo
			cover: (98 to: 103)
			declaredAt: (7 to: 12)) ] valueCoveringAll:
		{78 to: 96}.
	^ [
	([
	(self coverAll:
		{110 to: 113}) new ] valueCoveringAll:
		{115 to: 117})
		initializePalo:
			(unPalo
				cover: (135 to: 140)
				declaredAt: (7 to: 12))
		numero:
			(unNumero
				cover: (150 to: 157)
				declaredAt: (22 to: 29)) ] valueCoveringAll:
		{119 to: 133. 142 to: 148}.! !
!Behavior method!
assertN�meroEsV�lido: unNumero
	[
	([
	(unNumero
		cover: (34 to: 41)
		declaredAt: (23 to: 30)) <
		(1 coverAll:
			{45 to: 45}) ] valueCoveringAll:
		{43 to: 43}) ifTrue: [
		[
		(self coverAll:
			{57 to: 60}) error:
			([
			(self coverAll:
				{69 to: 72}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{74 to: 110}) ] valueCoveringAll:
			{62 to: 67} ]] valueCoveringAll:
		{47 to: 53}.
	[
	([
	(unNumero
		cover: (116 to: 123)
		declaredAt: (23 to: 30)) >
		(12 coverAll:
			{127 to: 128}) ] valueCoveringAll:
		{125 to: 125}) ifTrue: [
		[
		(self coverAll:
			{140 to: 143}) error:
			([
			(self coverAll:
				{152 to: 155}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{157 to: 193}) ] valueCoveringAll:
			{145 to: 150} ]] valueCoveringAll:
		{130 to: 136}.
	[
	([
	(unNumero
		cover: (200 to: 207)
		declaredAt: (23 to: 30))
		between:
			(8 coverAll:
				{218 to: 218})
		and:
			(9 coverAll:
				{225 to: 225}) ] valueCoveringAll:
		{209 to: 216. 220 to: 223}) ifTrue: [
		[
		(self coverAll:
			{238 to: 241}) error:
			([
			(self coverAll:
				{250 to: 253}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{255 to: 291}) ] valueCoveringAll:
			{243 to: 248} ]] valueCoveringAll:
		{228 to: 234}.
	[
	([
	(unNumero
		cover: (297 to: 304)
		declaredAt: (23 to: 30)) isInteger ] valueCoveringAll:
		{306 to: 314}) ifFalse: [
		[
		(self coverAll:
			{327 to: 330}) error:
			([
			(self coverAll:
				{339 to: 342}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{344 to: 380}) ] valueCoveringAll:
			{332 to: 337} ]] valueCoveringAll:
		{316 to: 323}.! !
!Behavior method!
assertPaloEsV�lido: unPalo
	^ [
	([
	([
	(self coverAll:
		{33 to: 36}) palos ] valueCoveringAll:
		{38 to: 42}) includes:
		(unPalo
			cover: (54 to: 59)
			declaredAt: (21 to: 26)) ] valueCoveringAll:
		{44 to: 52}) ifFalse: [
		[
		(self coverAll:
			{73 to: 76}) error:
			([
			(self coverAll:
				{85 to: 88}) paloInvalidoErrorDescription ] valueCoveringAll:
				{90 to: 117}) ] valueCoveringAll:
			{78 to: 83} ]] valueCoveringAll:
		{62 to: 69}.! !
!Behavior method!
basto
	^ #basto coverAll:
		{11 to: 16}.! !
!Behavior method!
oro
	^ #oro coverAll:
		{9 to: 12}.! !
!Behavior method!
copa
	^ #copa coverAll:
		{10 to: 14}.! !
!Behavior method!
palos
	"No se puede acceder a self en backtick, por eso se usa CartaDeTruco como receiver - Hernan"
	^ `{CartaDeTruco espada. CartaDeTruco basto. CartaDeTruco oro. CartaDeTruco copa}` coverAll:
		{105 to: 185}.! !
!Behavior method!
initializePalo: unPalo numero: unNumero
	(palo _ unPalo
		cover: (53 to: 58)
		declaredAt: (17 to: 22))
		cover: (45 to: 48)
		declaredAt: (45 to: 48).
	(numero _ unNumero
		cover: (72 to: 79)
		declaredAt: (32 to: 39))
		cover: (62 to: 67)
		declaredAt: (62 to: 67).! !
!Behavior method!
con: unaColeccionDeCartas
	^ [
	([
	(self coverAll:
		{32 to: 35}) new ] valueCoveringAll:
		{37 to: 39}) inicializarCon:
		(unaColeccionDeCartas
			cover: (57 to: 76)
			declaredAt: (6 to: 25)) ] valueCoveringAll:
		{41 to: 55}.! !
!Behavior method!
inicializarCon: unaColecionDeCartas
	(cartas _ unaColecionDeCartas
		cover: (49 to: 67)
		declaredAt: (17 to: 35))
		cover: (40 to: 45)
		declaredAt: (40 to: 45).! !
!Behavior method!
con: unJugador yCon: otroJugador
	[
	(self coverAll:
		{36 to: 39})
		verificarTienen3Cartas:
			(unJugador
				cover: (65 to: 73)
				declaredAt: (6 to: 14))
		y:
			(otroJugador
				cover: (78 to: 88)
				declaredAt: (22 to: 32)) ] valueCoveringAll:
		{41 to: 63. 75 to: 76}.
	^ [
	([
	(self coverAll:
		{95 to: 98}) new ] valueCoveringAll:
		{100 to: 102})
		inicializarCon:
			(unJugador
				cover: (120 to: 128)
				declaredAt: (6 to: 14))
		yCon:
			(otroJugador
				cover: (136 to: 146)
				declaredAt: (22 to: 32)) ] valueCoveringAll:
		{104 to: 118. 130 to: 134}.! !
!Behavior method!
verificarTienen3Cartas: unJugador y: otroJugador
	[
	(self coverAll:
		{52 to: 55}) verificarTiene3Cartas:
		(unJugador
			cover: (80 to: 88)
			declaredAt: (25 to: 33)) ] valueCoveringAll:
		{57 to: 78}.
	[
	(self coverAll:
		{92 to: 95}) verificarTiene3Cartas:
		(otroJugador
			cover: (120 to: 130)
			declaredAt: (38 to: 48)) ] valueCoveringAll:
		{97 to: 118}.! !
!Behavior method!
verificarTiene3Cartas: unJugador
	[
	([
	(unJugador
		cover: (36 to: 44)
		declaredAt: (24 to: 32)) tiene3Cartas ] valueCoveringAll:
		{46 to: 57}) ifFalse: [
		[
		(self coverAll:
			{69 to: 72}) jugadorNotiene3CartasAviso ] valueCoveringAll:
			{74 to: 99} ]] valueCoveringAll:
		{59 to: 66}.! !
!Behavior method!
tiene3Cartas
	^ [
	([
	(cartas
		cover: (18 to: 23)
		declaredAt: (18 to: 23)) size ] valueCoveringAll:
		{25 to: 28}) =
		(3 coverAll:
			{31 to: 32}) ] valueCoveringAll:
		{30 to: 30}.! !
!Behavior method!
inicializarCon: unJugador yCon: otroJugador
	(mano _ unJugador
		cover: (55 to: 63)
		declaredAt: (17 to: 25))
		cover: (48 to: 51)
		declaredAt: (48 to: 51).
	(pie _ otroJugador
		cover: (73 to: 83)
		declaredAt: (33 to: 43))
		cover: (67 to: 69)
		declaredAt: (67 to: 69).
	(numeroDeEnfrentamiento _ 0 coverAll:
		{112 to: 112})
		cover: (87 to: 108)
		declaredAt: (87 to: 108).
	(enfrentamientos _ [
	(OrderedCollection
		cover: (134 to: 150)
		declaredAt: (134 to: 150)) new ] valueCoveringAll:
		{152 to: 154})
		cover: (116 to: 130)
		declaredAt: (116 to: 130).! !
!Behavior method!
mano
	^ mano
		cover: (10 to: 13)
		declaredAt: (10 to: 13).! !
!Behavior method!
pie
	^ pie
		cover: (9 to: 11)
		declaredAt: (9 to: 11).! !

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 19:51:10'!
PASSED!
!Behavior method!
jugadorNotiene3CartasAviso
	[
	(self coverAll:
		{30 to: 33}) error:
		([
		(self coverAll:
			{42 to: 45}) jugadorNoTiene3CartasDescripcionDeError ] valueCoveringAll:
			{47 to: 85}) ] valueCoveringAll:
		{35 to: 40}.! !
!Behavior method!
jugadorNoTiene3CartasDescripcionDeError
	^ 'Jugador no tiene 3 cartas' coverAll:
		{45 to: 71}.! !

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 19:51:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 19:51:10'!
PASSED!
!Behavior method!
jugarPrimerEnfrentamiento
	| enfrentamiento |
	(numeroDeEnfrentamiento _ [
	(numeroDeEnfrentamiento
		cover: (51 to: 72)
		declaredAt: (51 to: 72)) +
		(1 coverAll:
			{101 to: 101}) ] valueCoveringAll:
		{99 to: 99})
		cover: (76 to: 97)
		declaredAt: (51 to: 72).
	(enfrentamiento _ [
	(Enfrentamiento
		cover: (122 to: 135)
		declaredAt: (122 to: 135))
		numero:
			(numeroDeEnfrentamiento
				cover: (145 to: 166)
				declaredAt: (51 to: 72))
		con:
			(mano
				cover: (173 to: 176)
				declaredAt: (173 to: 176))
		yCon:
			(pie
				cover: (184 to: 186)
				declaredAt: (184 to: 186)) ] valueCoveringAll:
		{137 to: 143. 168 to: 171. 178 to: 182})
		cover: (105 to: 118)
		declaredAt: (31 to: 44).
	[
	(enfrentamientos
		cover: (190 to: 204)
		declaredAt: (190 to: 204)) add:
		([
		(enfrentamiento
			cover: (212 to: 225)
			declaredAt: (31 to: 44)) jugar ] valueCoveringAll:
			{227 to: 231}) ] valueCoveringAll:
		{206 to: 209}.! !
!Behavior method!
numero: unNumero con: unJugador yCon: otroJugador
	^ [
	([
	(self coverAll:
		{55 to: 58}) new ] valueCoveringAll:
		{60 to: 62})
		inicializarSiendoElNumero:
			(unNumero
				cover: (91 to: 98)
				declaredAt: (9 to: 16))
		con:
			(unJugador
				cover: (105 to: 113)
				declaredAt: (23 to: 31))
		yCon:
			(otroJugador
				cover: (121 to: 131)
				declaredAt: (39 to: 49)) ] valueCoveringAll:
		{64 to: 89. 100 to: 103. 115 to: 119}.! !
!Behavior method!
inicializarSiendoElNumero: unNumero con: unJugador yCon: otroJugador
	(numeroDeEnfrentamiento _ unNumero
		cover: (97 to: 104)
		declaredAt: (28 to: 35))
		cover: (72 to: 93)
		declaredAt: (72 to: 93).
	(jugadorInicial _ unJugador
		cover: (126 to: 134)
		declaredAt: (42 to: 50))
		cover: (108 to: 121)
		declaredAt: (108 to: 121).
	(jugadorSiguiente _ otroJugador
		cover: (158 to: 168)
		declaredAt: (58 to: 68))
		cover: (138 to: 153)
		declaredAt: (138 to: 153).! !
!Behavior method!
jugar
	| cartaJugadorInicial cartaJugadorSiguiente |
	(cartaJugadorInicial _ [
	(jugadorInicial
		cover: (80 to: 93)
		declaredAt: (80 to: 93)) cartaNumero:
		(numeroDeEnfrentamiento
			cover: (108 to: 129)
			declaredAt: (108 to: 129)) ] valueCoveringAll:
		{95 to: 106})
		cover: (58 to: 76)
		declaredAt: (11 to: 29).
	(cartaJugadorSiguiente _ [
	(jugadorSiguiente
		cover: (157 to: 172)
		declaredAt: (157 to: 172)) cartaNumero:
		(numeroDeEnfrentamiento
			cover: (187 to: 208)
			declaredAt: (108 to: 129)) ] valueCoveringAll:
		{174 to: 185})
		cover: (133 to: 153)
		declaredAt: (31 to: 51).
	(ganador _ [
	(self coverAll:
		{223 to: 226})
		determinarGanadorSiLoHayEntre:
			(cartaJugadorInicial
				cover: (259 to: 277)
				declaredAt: (11 to: 29))
		y:
			(cartaJugadorSiguiente
				cover: (282 to: 302)
				declaredAt: (31 to: 51)) ] valueCoveringAll:
		{228 to: 257. 279 to: 280})
		cover: (213 to: 219)
		declaredAt: (213 to: 219).! !
!Behavior method!
cartaNumero: unNumero
	^ [
	(cartas
		cover: (27 to: 32)
		declaredAt: (27 to: 32)) at:
		(unNumero
			cover: (38 to: 45)
			declaredAt: (14 to: 21)) ] valueCoveringAll:
		{34 to: 36}.! !
!Behavior method!
determinarGanadorSiLoHayEntre: cartaJugadorInicial y: cartaJugadorSiguiente
	[
	([
	(cartaJugadorInicial
		cover: (80 to: 98)
		declaredAt: (32 to: 50)) empardaCon:
		(cartaJugadorSiguiente
			cover: (112 to: 132)
			declaredAt: (55 to: 75)) ] valueCoveringAll:
		{100 to: 110}) ifTrue: [ ^ [
		(Enfrentamiento
			cover: (146 to: 159)
			declaredAt: (146 to: 159)) parda ] valueCoveringAll:
			{161 to: 165} ]] valueCoveringAll:
		{135 to: 141}.
	[
	([
	(cartaJugadorInicial
		cover: (171 to: 189)
		declaredAt: (32 to: 50)) mataA:
		(cartaJugadorSiguiente
			cover: (198 to: 218)
			declaredAt: (55 to: 75)) ] valueCoveringAll:
		{191 to: 196})
		ifTrue: [ ^ jugadorInicial
				cover: (232 to: 245)
				declaredAt: (232 to: 245) ]
		ifFalse: [ ^ jugadorSiguiente
				cover: (262 to: 277)
				declaredAt: (262 to: 277) ]] valueCoveringAll:
		{221 to: 227. 250 to: 257}.! !
!Behavior method!
empardaCon: cartaParda
	^ [
	([
	(self coverAll:
		{27 to: 30}) valor ] valueCoveringAll:
		{32 to: 36}) =
		([
		(cartaParda
			cover: (40 to: 49)
			declaredAt: (13 to: 22)) valor ] valueCoveringAll:
			{51 to: 55}) ] valueCoveringAll:
		{38 to: 38}.! !
!Behavior method!
valor
	^ [
	([
	(self coverAll:
		{11 to: 14}) class ] valueCoveringAll:
		{16 to: 20}) valorDe:
		(self coverAll:
			{31 to: 34}) ] valueCoveringAll:
		{22 to: 29}.! !
!Behavior method!
valorDe: unaCarta
	[
	([
	(self coverAll:
		{23 to: 26}) ordenDePrioridad ] valueCoveringAll:
		{28 to: 43}) withIndexDo: [ :bloqueDeVerificacion :index |
		[
		([
		(bloqueDeVerificacion
			cover: (94 to: 113)
			declaredAt: (61 to: 80)) value:
			(unaCarta
				cover: (122 to: 129)
				declaredAt: (10 to: 17)) ] valueCoveringAll:
			{115 to: 120}) ifTrue: [ ^ index
				cover: (143 to: 147)
				declaredAt: (83 to: 87) ]] valueCoveringAll:
			{132 to: 138} ]] valueCoveringAll:
		{45 to: 56}.
	[
	(self coverAll:
		{156 to: 159}) error:
		([
		(self coverAll:
			{168 to: 171}) tablaDeValoresIncorrectaOCartaInvalidaErrorDescription ] valueCoveringAll:
			{173 to: 226}) ] valueCoveringAll:
		{161 to: 166}.! !
!Behavior method!
ordenDePrioridad
	^ [
	(ordenDePrioridad
		cover: (22 to: 37)
		declaredAt: (22 to: 37)) ifNil: [
		[
		(self coverAll:
			{48 to: 51}) initializeOrdenDePrioridad ] valueCoveringAll:
			{53 to: 78} ]] valueCoveringAll:
		{39 to: 44}.! !
!Behavior method!
esAnchoDeEspada
	^ [
	([
	(self coverAll:
		{21 to: 24}) esAncho ] valueCoveringAll:
		{26 to: 32}) and: [
		[
		(self coverAll:
			{41 to: 44}) esDeEspada ] valueCoveringAll:
			{46 to: 55} ]] valueCoveringAll:
		{34 to: 37}.! !
!Behavior method!
esAncho
	^ [
	(self coverAll:
		{13 to: 16}) numeroEs:
		(1 coverAll:
			{27 to: 28}) ] valueCoveringAll:
		{18 to: 26}.! !
!Behavior method!
numeroEs: unNumero
	^ [
	(numero
		cover: (23 to: 28)
		declaredAt: (23 to: 28)) =
		(unNumero
			cover: (32 to: 39)
			declaredAt: (11 to: 18)) ] valueCoveringAll:
		{30 to: 30}.! !
!Behavior method!
esDeEspada
	^ [
	(self coverAll:
		{16 to: 19}) paloEs:
		([
		(self coverAll:
			{29 to: 32}) espada ] valueCoveringAll:
			{34 to: 39}) ] valueCoveringAll:
		{21 to: 27}.! !
!Behavior method!
espada
	^ [
	([
	(self coverAll:
		{12 to: 15}) class ] valueCoveringAll:
		{17 to: 21}) espada ] valueCoveringAll:
		{23 to: 28}.! !
!Behavior method!
paloEs: unPalo
	^ [
	(palo
		cover: (19 to: 22)
		declaredAt: (19 to: 22)) =
		(unPalo
			cover: (26 to: 31)
			declaredAt: (9 to: 14)) ] valueCoveringAll:
		{24 to: 24}.! !
!Behavior method!
esAnchoDeBasto
	^ [
	([
	(self coverAll:
		{20 to: 23}) esAncho ] valueCoveringAll:
		{25 to: 31}) and: [
		[
		(self coverAll:
			{40 to: 43}) esDeBasto ] valueCoveringAll:
			{45 to: 53} ]] valueCoveringAll:
		{33 to: 36}.! !
!Behavior method!
esSieteDeEspadas
	^ [
	([
	(self coverAll:
		{22 to: 25}) esSiete ] valueCoveringAll:
		{27 to: 33}) and: [
		[
		(self coverAll:
			{42 to: 45}) esDeEspada ] valueCoveringAll:
			{47 to: 56} ]] valueCoveringAll:
		{35 to: 38}.! !
!Behavior method!
esSiete
	^ [
	(self coverAll:
		{13 to: 16}) numeroEs:
		(7 coverAll:
			{27 to: 28}) ] valueCoveringAll:
		{18 to: 26}.! !
!Behavior method!
esSieteDeOro
	^ [
	([
	(self coverAll:
		{18 to: 21}) esSiete ] valueCoveringAll:
		{23 to: 29}) and: [
		[
		(self coverAll:
			{38 to: 41}) esDeOro ] valueCoveringAll:
			{43 to: 49} ]] valueCoveringAll:
		{31 to: 34}.! !
!Behavior method!
esAnchoFalso
	^ [
	([
	(self coverAll:
		{18 to: 21}) esAncho ] valueCoveringAll:
		{23 to: 29}) and: [
		[
		([
		(self coverAll:
			{38 to: 41}) esDeOro ] valueCoveringAll:
			{43 to: 49}) or: [
			[
			(self coverAll:
				{57 to: 60}) esDeCopa ] valueCoveringAll:
				{62 to: 69} ]] valueCoveringAll:
			{51 to: 53} ]] valueCoveringAll:
		{31 to: 34}.! !
!Behavior method!
esRey
	^ [
	(self coverAll:
		{11 to: 14}) numeroEs:
		(12 coverAll:
			{26 to: 27}) ] valueCoveringAll:
		{16 to: 24}.! !
!Behavior method!
esCaballo
	^ [
	(self coverAll:
		{15 to: 18}) numeroEs:
		(11 coverAll:
			{30 to: 31}) ] valueCoveringAll:
		{20 to: 28}.! !
!Behavior method!
esSota
	^ [
	(self coverAll:
		{12 to: 15}) numeroEs:
		(10 coverAll:
			{27 to: 28}) ] valueCoveringAll:
		{17 to: 25}.! !
!Behavior method!
esSieteFalso
	^ [
	([
	(self coverAll:
		{18 to: 21}) esSiete ] valueCoveringAll:
		{23 to: 29}) and: [
		[
		([
		(self coverAll:
			{38 to: 41}) esDeCopa ] valueCoveringAll:
			{43 to: 50}) or: [
			[
			(self coverAll:
				{58 to: 61}) esDeBasto ] valueCoveringAll:
				{63 to: 71} ]] valueCoveringAll:
			{52 to: 54} ]] valueCoveringAll:
		{31 to: 34}.! !
!Behavior method!
mataA: cartaPerdedora
	^ [
	([
	(self coverAll:
		{26 to: 29}) valor ] valueCoveringAll:
		{31 to: 35}) <
		([
		(cartaPerdedora
			cover: (39 to: 52)
			declaredAt: (8 to: 21)) valor ] valueCoveringAll:
			{54 to: 58}) ] valueCoveringAll:
		{37 to: 37}.! !
!Behavior method!
numeroDeEnfrentamiento
	^ numeroDeEnfrentamiento
		cover: (29 to: 50)
		declaredAt: (29 to: 50).! !
!Behavior method!
cartasJugadasPorMano
	^ [
	(mano
		cover: (26 to: 29)
		declaredAt: (26 to: 29)) cantidadDeCartasJugadas:
		(numeroDeEnfrentamiento
			cover: (56 to: 77)
			declaredAt: (56 to: 77)) ] valueCoveringAll:
		{31 to: 54}.! !
!Behavior method!
cantidadDeCartasJugadas: unNumero
	| cartasJugadas |
	(cartasJugadas _ [
	(OrderedCollection
		cover: (74 to: 90)
		declaredAt: (74 to: 90)) new ] valueCoveringAll:
		{92 to: 94})
		cover: (58 to: 70)
		declaredAt: (39 to: 51).
	(cartasJugadas _ [
	(cartas
		cover: (114 to: 119)
		declaredAt: (114 to: 119))
		copyFrom:
			(1 coverAll:
				{131 to: 131})
		to:
			(unNumero
				cover: (137 to: 144)
				declaredAt: (26 to: 33)) ] valueCoveringAll:
		{121 to: 129. 133 to: 135})
		cover: (98 to: 110)
		declaredAt: (39 to: 51).
	^ cartasJugadas
		cover: (150 to: 162)
		declaredAt: (39 to: 51).! !
!Behavior method!
cartasJugadasPorPie
	^ [
	(pie
		cover: (26 to: 28)
		declaredAt: (26 to: 28)) cantidadDeCartasJugadas:
		(numeroDeEnfrentamiento
			cover: (55 to: 76)
			declaredAt: (55 to: 76)) ] valueCoveringAll:
		{30 to: 53}.! !
!Behavior method!
= unaCarta
	^ [
	([
	(unaCarta
		cover: (18 to: 25)
		declaredAt: (3 to: 10)) isKindOf:
		([
		(self coverAll:
			{37 to: 40}) class ] valueCoveringAll:
			{42 to: 46}) ] valueCoveringAll:
		{27 to: 35}) and: [
		[
		([
		(unaCarta
			cover: (56 to: 63)
			declaredAt: (3 to: 10)) paloEs:
			(palo
				cover: (73 to: 76)
				declaredAt: (73 to: 76)) ] valueCoveringAll:
			{65 to: 71}) and: [
			[
			(unaCarta
				cover: (86 to: 93)
				declaredAt: (3 to: 10)) numeroEs:
				(numero
					cover: (105 to: 110)
					declaredAt: (105 to: 110)) ] valueCoveringAll:
				{95 to: 103} ]] valueCoveringAll:
			{79 to: 82} ]] valueCoveringAll:
		{49 to: 52}.! !
!Behavior method!
ganadorDelEnfrentamientoNumero: unNumero
	^ [
	([
	(enfrentamientos
		cover: (47 to: 61)
		declaredAt: (47 to: 61)) at:
		(unNumero
			cover: (67 to: 74)
			declaredAt: (33 to: 40)) ] valueCoveringAll:
		{63 to: 65}) ganador ] valueCoveringAll:
		{77 to: 83}.! !
!Behavior method!
ganador
	^ ganador
		cover: (13 to: 19)
		declaredAt: (13 to: 19).! !

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 19:51:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 19:51:10'!
PASSED!
!Behavior method!
parda
	^ 'parda' coverAll:
		{11 to: 17}.! !

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 19:51:10'!
PASSED!
!Behavior method!
jugarSegundoEnfrentamiento
	| enfrentamiento |
	[
	(self coverAll:
		{51 to: 54}) verificarQueSeJugoEnfrentamientoAnterior:
		(2 coverAll:
			{98 to: 98}) ] valueCoveringAll:
		{56 to: 96}.
	(numeroDeEnfrentamiento _ [
	(numeroDeEnfrentamiento
		cover: (104 to: 125)
		declaredAt: (104 to: 125)) +
		(1 coverAll:
			{154 to: 154}) ] valueCoveringAll:
		{152 to: 152})
		cover: (129 to: 150)
		declaredAt: (104 to: 125).
	(enfrentamiento _ [
	(Enfrentamiento
		cover: (175 to: 188)
		declaredAt: (175 to: 188))
		numero:
			(numeroDeEnfrentamiento
				cover: (198 to: 219)
				declaredAt: (104 to: 125))
		con:
			(mano
				cover: (226 to: 229)
				declaredAt: (226 to: 229))
		yCon:
			(pie
				cover: (237 to: 239)
				declaredAt: (237 to: 239)) ] valueCoveringAll:
		{190 to: 196. 221 to: 224. 231 to: 235})
		cover: (158 to: 171)
		declaredAt: (32 to: 45).
	[
	(enfrentamientos
		cover: (243 to: 257)
		declaredAt: (243 to: 257)) add:
		([
		(enfrentamiento
			cover: (265 to: 278)
			declaredAt: (32 to: 45)) jugar ] valueCoveringAll:
			{280 to: 284}) ] valueCoveringAll:
		{259 to: 262}.! !
!Behavior method!
verificarQueSeJugoEnfrentamientoAnterior: numeroDeEnfrentamientoAJugar
	[
	([
	([
	(numeroDeEnfrentamiento
		cover: (75 to: 96)
		declaredAt: (75 to: 96)) +
		(1 coverAll:
			{99 to: 99}) ] valueCoveringAll:
		{98 to: 98}) <
		(numeroDeEnfrentamientoAJugar
			cover: (104 to: 131)
			declaredAt: (43 to: 70)) ] valueCoveringAll:
		{102 to: 102}) ifTrue: [
		[
		(self coverAll:
			{143 to: 146}) noSeJugoEnfrentamientoAnteriorAviso ] valueCoveringAll:
			{148 to: 182} ]] valueCoveringAll:
		{133 to: 139}.! !
!Behavior method!
esDeBasto
	^ [
	(self coverAll:
		{15 to: 18}) paloEs:
		([
		(self coverAll:
			{28 to: 31}) basto ] valueCoveringAll:
			{33 to: 37}) ] valueCoveringAll:
		{20 to: 26}.! !
!Behavior method!
basto
	^ [
	([
	(self coverAll:
		{11 to: 14}) class ] valueCoveringAll:
		{16 to: 20}) basto ] valueCoveringAll:
		{22 to: 26}.! !
!Behavior method!
ganadorDeRonda
	| ganadores numeroMano numeroPie |
	[
	([
	([
	([
	(enfrentamientos
		cover: (57 to: 71)
		declaredAt: (57 to: 71)) at:
		(1 coverAll:
			{77 to: 77}) ] valueCoveringAll:
		{73 to: 75}) ganador ] valueCoveringAll:
		{80 to: 86}) =
		([
		(Enfrentamiento
			cover: (90 to: 103)
			declaredAt: (90 to: 103)) parda ] valueCoveringAll:
			{105 to: 109}) ] valueCoveringAll:
		{88 to: 88}) ifTrue: [ ^ [
		([
		(enfrentamientos
			cover: (123 to: 137)
			declaredAt: (57 to: 71)) at:
			(2 coverAll:
				{143 to: 143}) ] valueCoveringAll:
			{139 to: 141}) ganador ] valueCoveringAll:
			{146 to: 152} ]] valueCoveringAll:
		{111 to: 117}.
	(ganadores _ [
	(OrderedCollection
		cover: (171 to: 187)
		declaredAt: (171 to: 187)) new ] valueCoveringAll:
		{189 to: 191})
		cover: (159 to: 167)
		declaredAt: (20 to: 28).
	[
	(enfrentamientos
		cover: (195 to: 209)
		declaredAt: (57 to: 71)) do: [ :unEnfrentamiento |
		[
		(ganadores
			cover: (237 to: 245)
			declaredAt: (20 to: 28)) add:
			([
			(unEnfrentamiento
				cover: (253 to: 268)
				declaredAt: (218 to: 233)) ganador ] valueCoveringAll:
				{270 to: 276}) ] valueCoveringAll:
			{247 to: 250} ]] valueCoveringAll:
		{211 to: 213}.
	(numeroMano _ [
	(ganadores
		cover: (295 to: 303)
		declaredAt: (20 to: 28)) occurrencesOf:
		(mano
			cover: (320 to: 323)
			declaredAt: (320 to: 323)) ] valueCoveringAll:
		{305 to: 318})
		cover: (282 to: 291)
		declaredAt: (30 to: 39).
	(numeroPie _ [
	(ganadores
		cover: (339 to: 347)
		declaredAt: (20 to: 28)) occurrencesOf:
		(pie
			cover: (364 to: 366)
			declaredAt: (364 to: 366)) ] valueCoveringAll:
		{349 to: 362})
		cover: (327 to: 335)
		declaredAt: (41 to: 49).
	[
	([
	(numeroMano
		cover: (372 to: 381)
		declaredAt: (30 to: 39)) =
		(2 coverAll:
			{385 to: 385}) ] valueCoveringAll:
		{383 to: 383}) ifTrue: [ ^ mano
			cover: (399 to: 402)
			declaredAt: (320 to: 323) ]] valueCoveringAll:
		{387 to: 393}.
	[
	([
	(numeroPie
		cover: (407 to: 415)
		declaredAt: (41 to: 49)) =
		(2 coverAll:
			{419 to: 419}) ] valueCoveringAll:
		{417 to: 417}) ifTrue: [ ^ pie
			cover: (433 to: 435)
			declaredAt: (364 to: 366) ]] valueCoveringAll:
		{421 to: 427}.
	^ [
	(RondaDeTruco
		cover: (444 to: 455)
		declaredAt: (444 to: 455)) sinGanador ] valueCoveringAll:
		{457 to: 466}.! !

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 19:51:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 19:51:10'!
PASSED!
!Behavior method!
noSeJugoEnfrentamientoAnteriorAviso
	[
	(self coverAll:
		{39 to: 42}) error:
		([
		(self coverAll:
			{51 to: 54}) noSeJugoElEnfrentamientoAnteriorDescripcionDeError ] valueCoveringAll:
			{56 to: 105}) ] valueCoveringAll:
		{44 to: 49}.! !
!Behavior method!
noSeJugoElEnfrentamientoAnteriorDescripcionDeError
	^ 'No se jugo el enfrentamiento anterior' coverAll:
		{56 to: 94}.! !

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 19:51:10'!
PASSED!
!Behavior method!
sinGanador
	^ 'Sin ganador' coverAll:
		{16 to: 28}.! !

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 19:51:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 19:51:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 19:51:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 19:51:10'!
PASSED!
!Behavior method!
jugarTercerEnfrentamiento
	| enfrentamiento |
	[
	(self coverAll:
		{51 to: 54}) verificarQueSeJugoEnfrentamientoAnterior:
		(3 coverAll:
			{98 to: 98}) ] valueCoveringAll:
		{56 to: 96}.
	[
	(self coverAll:
		{104 to: 107}) verificarQueNoHayaGanador ] valueCoveringAll:
		{109 to: 133}.
	(numeroDeEnfrentamiento _ [
	(numeroDeEnfrentamiento
		cover: (139 to: 160)
		declaredAt: (139 to: 160)) +
		(1 coverAll:
			{189 to: 189}) ] valueCoveringAll:
		{187 to: 187})
		cover: (164 to: 185)
		declaredAt: (139 to: 160).
	(enfrentamiento _ [
	(Enfrentamiento
		cover: (210 to: 223)
		declaredAt: (210 to: 223))
		numero:
			(numeroDeEnfrentamiento
				cover: (233 to: 254)
				declaredAt: (139 to: 160))
		con:
			(mano
				cover: (261 to: 264)
				declaredAt: (261 to: 264))
		yCon:
			(pie
				cover: (272 to: 274)
				declaredAt: (272 to: 274)) ] valueCoveringAll:
		{225 to: 231. 256 to: 259. 266 to: 270})
		cover: (193 to: 206)
		declaredAt: (32 to: 45).
	[
	(enfrentamientos
		cover: (278 to: 292)
		declaredAt: (278 to: 292)) add:
		([
		(enfrentamiento
			cover: (300 to: 313)
			declaredAt: (32 to: 45)) jugar ] valueCoveringAll:
			{315 to: 319}) ] valueCoveringAll:
		{294 to: 297}.! !
!Behavior method!
verificarQueNoHayaGanador
	[
	([
	([
	(self coverAll:
		{29 to: 32}) ganadorDeRonda ] valueCoveringAll:
		{34 to: 47}) =
		([
		(RondaDeTruco
			cover: (51 to: 62)
			declaredAt: (51 to: 62)) sinGanador ] valueCoveringAll:
			{64 to: 73}) ] valueCoveringAll:
		{49 to: 49}) ifFalse: [
		[
		(self coverAll:
			{86 to: 89}) yaHayGanadorAviso ] valueCoveringAll:
			{91 to: 107} ]] valueCoveringAll:
		{75 to: 82}.! !

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 19:51:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 19:51:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores stamp: 'Ciro 7/5/2021 19:51:10'!
PASSED!
!Behavior method!
yaHayGanadorAviso
	[
	(self coverAll:
		{21 to: 24}) error:
		([
		(self coverAll:
			{33 to: 36}) yaHayGanadorDescripcionDeError ] valueCoveringAll:
			{38 to: 67}) ] valueCoveringAll:
		{26 to: 31}.! !
!Behavior method!
yaHayGanadorDescripcionDeError
	^ 'Ya hay ganador' coverAll:
		{36 to: 51}.! !

!testRun: #RondaDeTrucoTest #test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador stamp: 'Ciro 7/5/2021 19:51:10'!
PASSED!

!methodRemoval: RondaDeTruco #ganadorDelPrimerEnfrentamiento stamp: 'Ciro 7/5/2021 19:51:52'!
ganadorDelPrimerEnfrentamiento

	^ (enfrentamientos at: 1) ganador
	
	!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:52:41'!
jugarEnfrentamiento

	| enfrentamiento |
	
	numeroDeEnfrentamiento _ numeroDeEnfrentamiento + 1.
	enfrentamiento _ Enfrentamiento numero: numeroDeEnfrentamiento con: mano yCon: pie.
	enfrentamientos add: (enfrentamiento jugar)

	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:52:55' prior: 50990911!
jugarPrimerEnfrentamiento

	self jugarEnfrentamiento 

	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:53:13' prior: 50991754!
jugarSegundoEnfrentamiento

	self verificarQueSeJugoEnfrentamientoAnterior: 2.
	
	self jugarEnfrentamiento ! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 19:53:19' prior: 50994158!
jugarTercerEnfrentamiento

	self verificarQueSeJugoEnfrentamientoAnterior: 3.
	
	self verificarQueNoHayaGanador.
	
	self jugarEnfrentamiento ! !

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 19:53:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 19:53:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 19:53:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 19:53:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 19:53:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 19:53:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 19:53:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 19:53:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 19:53:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 19:53:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 19:53:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 19:53:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 19:53:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 19:53:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 19:53:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores stamp: 'Ciro 7/5/2021 19:53:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador stamp: 'Ciro 7/5/2021 19:53:21'!
PASSED!
!RondaDeTruco methodsFor: 'jugar' stamp: 'Ciro 7/5/2021 19:58:07'!
jugarEnfrentamientoEmpezandoPorMano

	| enfrentamiento |
	
	numeroDeEnfrentamiento _ numeroDeEnfrentamiento + 1.
	enfrentamiento _ Enfrentamiento numero: numeroDeEnfrentamiento con: mano yCon: pie.
	enfrentamientos add: (enfrentamiento jugar)

	! !
!RondaDeTruco methodsFor: 'jugar' stamp: 'Ciro 7/5/2021 19:58:27'!
jugarEnfrentamientoEmpezandoPorPie

	| enfrentamiento |
	
	numeroDeEnfrentamiento _ numeroDeEnfrentamiento + 1.
	enfrentamiento _ Enfrentamiento numero: numeroDeEnfrentamiento con: pie yCon: mano.
	enfrentamientos add: (enfrentamiento jugar)

	! !
!RondaDeTruco methodsFor: 'jugar' stamp: 'Ciro 7/5/2021 19:59:37' prior: 50995146!
jugarEnfrentamiento

	(enfrentamientos at: numeroDeEnfrentamiento) ganador = mano ifTrue: [self jugarEnfrentamientoEmpezandoPorMano ]
		ifFalse: [self jugarEnfrentamientoEmpezandoPorPie].

	! !
!RondaDeTruco methodsFor: 'jugar' stamp: 'Ciro 7/5/2021 19:59:44' prior: 50995157!
jugarPrimerEnfrentamiento

	self jugarEnfrentamientoEmpezandoPorMano 

	! !
!RondaDeTruco methodsFor: 'jugar' stamp: 'Ciro 7/5/2021 19:59:48' prior: 50995277!
jugarPrimerEnfrentamiento

	self jugarEnfrentamientoEmpezandoPorMano

	! !

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 19:59:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 19:59:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 19:59:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 19:59:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 19:59:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 19:59:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 19:59:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 19:59:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 19:59:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 19:59:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 19:59:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 19:59:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 19:59:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 19:59:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 19:59:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores stamp: 'Ciro 7/5/2021 19:59:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador stamp: 'Ciro 7/5/2021 19:59:50'!
PASSED!

----SNAPSHOT----(5 July 2021 20:00:02) CuisUniversity-4532.image priorSource: 21148397!
!Behavior method!
espada
	^ #espada coverAll:
		{12 to: 18}.! !
!Behavior method!
palo: unPalo numero: unNumero
	[
	(self coverAll:
		{35 to: 38}) assertN�meroEsV�lido:
		(unNumero
			cover: (62 to: 69)
			declaredAt: (22 to: 29)) ] valueCoveringAll:
		{40 to: 60}.
	[
	(self coverAll:
		{73 to: 76}) assertPaloEsV�lido:
		(unPalo
			cover: (98 to: 103)
			declaredAt: (7 to: 12)) ] valueCoveringAll:
		{78 to: 96}.
	^ [
	([
	(self coverAll:
		{110 to: 113}) new ] valueCoveringAll:
		{115 to: 117})
		initializePalo:
			(unPalo
				cover: (135 to: 140)
				declaredAt: (7 to: 12))
		numero:
			(unNumero
				cover: (150 to: 157)
				declaredAt: (22 to: 29)) ] valueCoveringAll:
		{119 to: 133. 142 to: 148}.! !
!Behavior method!
assertN�meroEsV�lido: unNumero
	[
	([
	(unNumero
		cover: (34 to: 41)
		declaredAt: (23 to: 30)) <
		(1 coverAll:
			{45 to: 45}) ] valueCoveringAll:
		{43 to: 43}) ifTrue: [
		[
		(self coverAll:
			{57 to: 60}) error:
			([
			(self coverAll:
				{69 to: 72}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{74 to: 110}) ] valueCoveringAll:
			{62 to: 67} ]] valueCoveringAll:
		{47 to: 53}.
	[
	([
	(unNumero
		cover: (116 to: 123)
		declaredAt: (23 to: 30)) >
		(12 coverAll:
			{127 to: 128}) ] valueCoveringAll:
		{125 to: 125}) ifTrue: [
		[
		(self coverAll:
			{140 to: 143}) error:
			([
			(self coverAll:
				{152 to: 155}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{157 to: 193}) ] valueCoveringAll:
			{145 to: 150} ]] valueCoveringAll:
		{130 to: 136}.
	[
	([
	(unNumero
		cover: (200 to: 207)
		declaredAt: (23 to: 30))
		between:
			(8 coverAll:
				{218 to: 218})
		and:
			(9 coverAll:
				{225 to: 225}) ] valueCoveringAll:
		{209 to: 216. 220 to: 223}) ifTrue: [
		[
		(self coverAll:
			{238 to: 241}) error:
			([
			(self coverAll:
				{250 to: 253}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{255 to: 291}) ] valueCoveringAll:
			{243 to: 248} ]] valueCoveringAll:
		{228 to: 234}.
	[
	([
	(unNumero
		cover: (297 to: 304)
		declaredAt: (23 to: 30)) isInteger ] valueCoveringAll:
		{306 to: 314}) ifFalse: [
		[
		(self coverAll:
			{327 to: 330}) error:
			([
			(self coverAll:
				{339 to: 342}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{344 to: 380}) ] valueCoveringAll:
			{332 to: 337} ]] valueCoveringAll:
		{316 to: 323}.! !
!Behavior method!
assertPaloEsV�lido: unPalo
	^ [
	([
	([
	(self coverAll:
		{33 to: 36}) palos ] valueCoveringAll:
		{38 to: 42}) includes:
		(unPalo
			cover: (54 to: 59)
			declaredAt: (21 to: 26)) ] valueCoveringAll:
		{44 to: 52}) ifFalse: [
		[
		(self coverAll:
			{73 to: 76}) error:
			([
			(self coverAll:
				{85 to: 88}) paloInvalidoErrorDescription ] valueCoveringAll:
				{90 to: 117}) ] valueCoveringAll:
			{78 to: 83} ]] valueCoveringAll:
		{62 to: 69}.! !
!Behavior method!
basto
	^ #basto coverAll:
		{11 to: 16}.! !
!Behavior method!
oro
	^ #oro coverAll:
		{9 to: 12}.! !
!Behavior method!
copa
	^ #copa coverAll:
		{10 to: 14}.! !
!Behavior method!
palos
	"No se puede acceder a self en backtick, por eso se usa CartaDeTruco como receiver - Hernan"
	^ `{CartaDeTruco espada. CartaDeTruco basto. CartaDeTruco oro. CartaDeTruco copa}` coverAll:
		{105 to: 185}.! !
!Behavior method!
initializePalo: unPalo numero: unNumero
	(palo _ unPalo
		cover: (53 to: 58)
		declaredAt: (17 to: 22))
		cover: (45 to: 48)
		declaredAt: (45 to: 48).
	(numero _ unNumero
		cover: (72 to: 79)
		declaredAt: (32 to: 39))
		cover: (62 to: 67)
		declaredAt: (62 to: 67).! !
!Behavior method!
con: unaColeccionDeCartas
	^ [
	([
	(self coverAll:
		{32 to: 35}) new ] valueCoveringAll:
		{37 to: 39}) inicializarCon:
		(unaColeccionDeCartas
			cover: (57 to: 76)
			declaredAt: (6 to: 25)) ] valueCoveringAll:
		{41 to: 55}.! !
!Behavior method!
inicializarCon: unaColecionDeCartas
	(cartas _ unaColecionDeCartas
		cover: (49 to: 67)
		declaredAt: (17 to: 35))
		cover: (40 to: 45)
		declaredAt: (40 to: 45).! !
!Behavior method!
con: unJugador yCon: otroJugador
	[
	(self coverAll:
		{36 to: 39})
		verificarTienen3Cartas:
			(unJugador
				cover: (65 to: 73)
				declaredAt: (6 to: 14))
		y:
			(otroJugador
				cover: (78 to: 88)
				declaredAt: (22 to: 32)) ] valueCoveringAll:
		{41 to: 63. 75 to: 76}.
	^ [
	([
	(self coverAll:
		{95 to: 98}) new ] valueCoveringAll:
		{100 to: 102})
		inicializarCon:
			(unJugador
				cover: (120 to: 128)
				declaredAt: (6 to: 14))
		yCon:
			(otroJugador
				cover: (136 to: 146)
				declaredAt: (22 to: 32)) ] valueCoveringAll:
		{104 to: 118. 130 to: 134}.! !
!Behavior method!
verificarTienen3Cartas: unJugador y: otroJugador
	[
	(self coverAll:
		{52 to: 55}) verificarTiene3Cartas:
		(unJugador
			cover: (80 to: 88)
			declaredAt: (25 to: 33)) ] valueCoveringAll:
		{57 to: 78}.
	[
	(self coverAll:
		{92 to: 95}) verificarTiene3Cartas:
		(otroJugador
			cover: (120 to: 130)
			declaredAt: (38 to: 48)) ] valueCoveringAll:
		{97 to: 118}.! !
!Behavior method!
verificarTiene3Cartas: unJugador
	[
	([
	(unJugador
		cover: (36 to: 44)
		declaredAt: (24 to: 32)) tiene3Cartas ] valueCoveringAll:
		{46 to: 57}) ifFalse: [
		[
		(self coverAll:
			{69 to: 72}) jugadorNotiene3CartasAviso ] valueCoveringAll:
			{74 to: 99} ]] valueCoveringAll:
		{59 to: 66}.! !
!Behavior method!
tiene3Cartas
	^ [
	([
	(cartas
		cover: (18 to: 23)
		declaredAt: (18 to: 23)) size ] valueCoveringAll:
		{25 to: 28}) =
		(3 coverAll:
			{31 to: 32}) ] valueCoveringAll:
		{30 to: 30}.! !
!Behavior method!
inicializarCon: unJugador yCon: otroJugador
	(mano _ unJugador
		cover: (55 to: 63)
		declaredAt: (17 to: 25))
		cover: (48 to: 51)
		declaredAt: (48 to: 51).
	(pie _ otroJugador
		cover: (73 to: 83)
		declaredAt: (33 to: 43))
		cover: (67 to: 69)
		declaredAt: (67 to: 69).
	(numeroDeEnfrentamiento _ 0 coverAll:
		{112 to: 112})
		cover: (87 to: 108)
		declaredAt: (87 to: 108).
	(enfrentamientos _ [
	(OrderedCollection
		cover: (134 to: 150)
		declaredAt: (134 to: 150)) new ] valueCoveringAll:
		{152 to: 154})
		cover: (116 to: 130)
		declaredAt: (116 to: 130).! !
!Behavior method!
mano
	^ mano
		cover: (10 to: 13)
		declaredAt: (10 to: 13).! !
!Behavior method!
pie
	^ pie
		cover: (9 to: 11)
		declaredAt: (9 to: 11).! !

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 20:00:26'!
PASSED!
!Behavior method!
jugadorNotiene3CartasAviso
	[
	(self coverAll:
		{30 to: 33}) error:
		([
		(self coverAll:
			{42 to: 45}) jugadorNoTiene3CartasDescripcionDeError ] valueCoveringAll:
			{47 to: 85}) ] valueCoveringAll:
		{35 to: 40}.! !
!Behavior method!
jugadorNoTiene3CartasDescripcionDeError
	^ 'Jugador no tiene 3 cartas' coverAll:
		{45 to: 71}.! !

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 20:00:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 20:00:26'!
PASSED!
!Behavior method!
jugarPrimerEnfrentamiento
	[
	(self coverAll:
		{29 to: 32}) jugarEnfrentamientoEmpezandoPorMano ] valueCoveringAll:
		{34 to: 68}.! !
!Behavior method!
jugarEnfrentamientoEmpezandoPorMano
	| enfrentamiento |
	(numeroDeEnfrentamiento _ [
	(numeroDeEnfrentamiento
		cover: (61 to: 82)
		declaredAt: (61 to: 82)) +
		(1 coverAll:
			{111 to: 111}) ] valueCoveringAll:
		{109 to: 109})
		cover: (86 to: 107)
		declaredAt: (61 to: 82).
	(enfrentamiento _ [
	(Enfrentamiento
		cover: (132 to: 145)
		declaredAt: (132 to: 145))
		numero:
			(numeroDeEnfrentamiento
				cover: (155 to: 176)
				declaredAt: (61 to: 82))
		con:
			(mano
				cover: (183 to: 186)
				declaredAt: (183 to: 186))
		yCon:
			(pie
				cover: (194 to: 196)
				declaredAt: (194 to: 196)) ] valueCoveringAll:
		{147 to: 153. 178 to: 181. 188 to: 192})
		cover: (115 to: 128)
		declaredAt: (41 to: 54).
	[
	(enfrentamientos
		cover: (200 to: 214)
		declaredAt: (200 to: 214)) add:
		([
		(enfrentamiento
			cover: (222 to: 235)
			declaredAt: (41 to: 54)) jugar ] valueCoveringAll:
			{237 to: 241}) ] valueCoveringAll:
		{216 to: 219}.! !
!Behavior method!
numero: unNumero con: unJugador yCon: otroJugador
	^ [
	([
	(self coverAll:
		{55 to: 58}) new ] valueCoveringAll:
		{60 to: 62})
		inicializarSiendoElNumero:
			(unNumero
				cover: (91 to: 98)
				declaredAt: (9 to: 16))
		con:
			(unJugador
				cover: (105 to: 113)
				declaredAt: (23 to: 31))
		yCon:
			(otroJugador
				cover: (121 to: 131)
				declaredAt: (39 to: 49)) ] valueCoveringAll:
		{64 to: 89. 100 to: 103. 115 to: 119}.! !
!Behavior method!
inicializarSiendoElNumero: unNumero con: unJugador yCon: otroJugador
	(numeroDeEnfrentamiento _ unNumero
		cover: (97 to: 104)
		declaredAt: (28 to: 35))
		cover: (72 to: 93)
		declaredAt: (72 to: 93).
	(jugadorInicial _ unJugador
		cover: (126 to: 134)
		declaredAt: (42 to: 50))
		cover: (108 to: 121)
		declaredAt: (108 to: 121).
	(jugadorSiguiente _ otroJugador
		cover: (158 to: 168)
		declaredAt: (58 to: 68))
		cover: (138 to: 153)
		declaredAt: (138 to: 153).! !
!Behavior method!
jugar
	| cartaJugadorInicial cartaJugadorSiguiente |
	(cartaJugadorInicial _ [
	(jugadorInicial
		cover: (80 to: 93)
		declaredAt: (80 to: 93)) cartaNumero:
		(numeroDeEnfrentamiento
			cover: (108 to: 129)
			declaredAt: (108 to: 129)) ] valueCoveringAll:
		{95 to: 106})
		cover: (58 to: 76)
		declaredAt: (11 to: 29).
	(cartaJugadorSiguiente _ [
	(jugadorSiguiente
		cover: (157 to: 172)
		declaredAt: (157 to: 172)) cartaNumero:
		(numeroDeEnfrentamiento
			cover: (187 to: 208)
			declaredAt: (108 to: 129)) ] valueCoveringAll:
		{174 to: 185})
		cover: (133 to: 153)
		declaredAt: (31 to: 51).
	(ganador _ [
	(self coverAll:
		{223 to: 226})
		determinarGanadorSiLoHayEntre:
			(cartaJugadorInicial
				cover: (259 to: 277)
				declaredAt: (11 to: 29))
		y:
			(cartaJugadorSiguiente
				cover: (282 to: 302)
				declaredAt: (31 to: 51)) ] valueCoveringAll:
		{228 to: 257. 279 to: 280})
		cover: (213 to: 219)
		declaredAt: (213 to: 219).! !
!Behavior method!
cartaNumero: unNumero
	^ [
	(cartas
		cover: (27 to: 32)
		declaredAt: (27 to: 32)) at:
		(unNumero
			cover: (38 to: 45)
			declaredAt: (14 to: 21)) ] valueCoveringAll:
		{34 to: 36}.! !
!Behavior method!
determinarGanadorSiLoHayEntre: cartaJugadorInicial y: cartaJugadorSiguiente
	[
	([
	(cartaJugadorInicial
		cover: (80 to: 98)
		declaredAt: (32 to: 50)) empardaCon:
		(cartaJugadorSiguiente
			cover: (112 to: 132)
			declaredAt: (55 to: 75)) ] valueCoveringAll:
		{100 to: 110}) ifTrue: [ ^ [
		(Enfrentamiento
			cover: (146 to: 159)
			declaredAt: (146 to: 159)) parda ] valueCoveringAll:
			{161 to: 165} ]] valueCoveringAll:
		{135 to: 141}.
	[
	([
	(cartaJugadorInicial
		cover: (171 to: 189)
		declaredAt: (32 to: 50)) mataA:
		(cartaJugadorSiguiente
			cover: (198 to: 218)
			declaredAt: (55 to: 75)) ] valueCoveringAll:
		{191 to: 196})
		ifTrue: [ ^ jugadorInicial
				cover: (232 to: 245)
				declaredAt: (232 to: 245) ]
		ifFalse: [ ^ jugadorSiguiente
				cover: (262 to: 277)
				declaredAt: (262 to: 277) ]] valueCoveringAll:
		{221 to: 227. 250 to: 257}.! !
!Behavior method!
empardaCon: cartaParda
	^ [
	([
	(self coverAll:
		{27 to: 30}) valor ] valueCoveringAll:
		{32 to: 36}) =
		([
		(cartaParda
			cover: (40 to: 49)
			declaredAt: (13 to: 22)) valor ] valueCoveringAll:
			{51 to: 55}) ] valueCoveringAll:
		{38 to: 38}.! !
!Behavior method!
valor
	^ [
	([
	(self coverAll:
		{11 to: 14}) class ] valueCoveringAll:
		{16 to: 20}) valorDe:
		(self coverAll:
			{31 to: 34}) ] valueCoveringAll:
		{22 to: 29}.! !
!Behavior method!
valorDe: unaCarta
	[
	([
	(self coverAll:
		{23 to: 26}) ordenDePrioridad ] valueCoveringAll:
		{28 to: 43}) withIndexDo: [ :bloqueDeVerificacion :index |
		[
		([
		(bloqueDeVerificacion
			cover: (94 to: 113)
			declaredAt: (61 to: 80)) value:
			(unaCarta
				cover: (122 to: 129)
				declaredAt: (10 to: 17)) ] valueCoveringAll:
			{115 to: 120}) ifTrue: [ ^ index
				cover: (143 to: 147)
				declaredAt: (83 to: 87) ]] valueCoveringAll:
			{132 to: 138} ]] valueCoveringAll:
		{45 to: 56}.
	[
	(self coverAll:
		{156 to: 159}) error:
		([
		(self coverAll:
			{168 to: 171}) tablaDeValoresIncorrectaOCartaInvalidaErrorDescription ] valueCoveringAll:
			{173 to: 226}) ] valueCoveringAll:
		{161 to: 166}.! !
!Behavior method!
ordenDePrioridad
	^ [
	(ordenDePrioridad
		cover: (22 to: 37)
		declaredAt: (22 to: 37)) ifNil: [
		[
		(self coverAll:
			{48 to: 51}) initializeOrdenDePrioridad ] valueCoveringAll:
			{53 to: 78} ]] valueCoveringAll:
		{39 to: 44}.! !
!Behavior method!
esAnchoDeEspada
	^ [
	([
	(self coverAll:
		{21 to: 24}) esAncho ] valueCoveringAll:
		{26 to: 32}) and: [
		[
		(self coverAll:
			{41 to: 44}) esDeEspada ] valueCoveringAll:
			{46 to: 55} ]] valueCoveringAll:
		{34 to: 37}.! !
!Behavior method!
esAncho
	^ [
	(self coverAll:
		{13 to: 16}) numeroEs:
		(1 coverAll:
			{27 to: 28}) ] valueCoveringAll:
		{18 to: 26}.! !
!Behavior method!
numeroEs: unNumero
	^ [
	(numero
		cover: (23 to: 28)
		declaredAt: (23 to: 28)) =
		(unNumero
			cover: (32 to: 39)
			declaredAt: (11 to: 18)) ] valueCoveringAll:
		{30 to: 30}.! !
!Behavior method!
esDeEspada
	^ [
	(self coverAll:
		{16 to: 19}) paloEs:
		([
		(self coverAll:
			{29 to: 32}) espada ] valueCoveringAll:
			{34 to: 39}) ] valueCoveringAll:
		{21 to: 27}.! !
!Behavior method!
espada
	^ [
	([
	(self coverAll:
		{12 to: 15}) class ] valueCoveringAll:
		{17 to: 21}) espada ] valueCoveringAll:
		{23 to: 28}.! !
!Behavior method!
paloEs: unPalo
	^ [
	(palo
		cover: (19 to: 22)
		declaredAt: (19 to: 22)) =
		(unPalo
			cover: (26 to: 31)
			declaredAt: (9 to: 14)) ] valueCoveringAll:
		{24 to: 24}.! !
!Behavior method!
esAnchoDeBasto
	^ [
	([
	(self coverAll:
		{20 to: 23}) esAncho ] valueCoveringAll:
		{25 to: 31}) and: [
		[
		(self coverAll:
			{40 to: 43}) esDeBasto ] valueCoveringAll:
			{45 to: 53} ]] valueCoveringAll:
		{33 to: 36}.! !
!Behavior method!
esSieteDeEspadas
	^ [
	([
	(self coverAll:
		{22 to: 25}) esSiete ] valueCoveringAll:
		{27 to: 33}) and: [
		[
		(self coverAll:
			{42 to: 45}) esDeEspada ] valueCoveringAll:
			{47 to: 56} ]] valueCoveringAll:
		{35 to: 38}.! !
!Behavior method!
esSiete
	^ [
	(self coverAll:
		{13 to: 16}) numeroEs:
		(7 coverAll:
			{27 to: 28}) ] valueCoveringAll:
		{18 to: 26}.! !
!Behavior method!
esSieteDeOro
	^ [
	([
	(self coverAll:
		{18 to: 21}) esSiete ] valueCoveringAll:
		{23 to: 29}) and: [
		[
		(self coverAll:
			{38 to: 41}) esDeOro ] valueCoveringAll:
			{43 to: 49} ]] valueCoveringAll:
		{31 to: 34}.! !
!Behavior method!
esAnchoFalso
	^ [
	([
	(self coverAll:
		{18 to: 21}) esAncho ] valueCoveringAll:
		{23 to: 29}) and: [
		[
		([
		(self coverAll:
			{38 to: 41}) esDeOro ] valueCoveringAll:
			{43 to: 49}) or: [
			[
			(self coverAll:
				{57 to: 60}) esDeCopa ] valueCoveringAll:
				{62 to: 69} ]] valueCoveringAll:
			{51 to: 53} ]] valueCoveringAll:
		{31 to: 34}.! !
!Behavior method!
esRey
	^ [
	(self coverAll:
		{11 to: 14}) numeroEs:
		(12 coverAll:
			{26 to: 27}) ] valueCoveringAll:
		{16 to: 24}.! !
!Behavior method!
esCaballo
	^ [
	(self coverAll:
		{15 to: 18}) numeroEs:
		(11 coverAll:
			{30 to: 31}) ] valueCoveringAll:
		{20 to: 28}.! !
!Behavior method!
esSota
	^ [
	(self coverAll:
		{12 to: 15}) numeroEs:
		(10 coverAll:
			{27 to: 28}) ] valueCoveringAll:
		{17 to: 25}.! !
!Behavior method!
esSieteFalso
	^ [
	([
	(self coverAll:
		{18 to: 21}) esSiete ] valueCoveringAll:
		{23 to: 29}) and: [
		[
		([
		(self coverAll:
			{38 to: 41}) esDeCopa ] valueCoveringAll:
			{43 to: 50}) or: [
			[
			(self coverAll:
				{58 to: 61}) esDeBasto ] valueCoveringAll:
				{63 to: 71} ]] valueCoveringAll:
			{52 to: 54} ]] valueCoveringAll:
		{31 to: 34}.! !
!Behavior method!
mataA: cartaPerdedora
	^ [
	([
	(self coverAll:
		{26 to: 29}) valor ] valueCoveringAll:
		{31 to: 35}) <
		([
		(cartaPerdedora
			cover: (39 to: 52)
			declaredAt: (8 to: 21)) valor ] valueCoveringAll:
			{54 to: 58}) ] valueCoveringAll:
		{37 to: 37}.! !
!Behavior method!
numeroDeEnfrentamiento
	^ numeroDeEnfrentamiento
		cover: (29 to: 50)
		declaredAt: (29 to: 50).! !
!Behavior method!
cartasJugadasPorMano
	^ [
	(mano
		cover: (26 to: 29)
		declaredAt: (26 to: 29)) cantidadDeCartasJugadas:
		(numeroDeEnfrentamiento
			cover: (56 to: 77)
			declaredAt: (56 to: 77)) ] valueCoveringAll:
		{31 to: 54}.! !
!Behavior method!
cantidadDeCartasJugadas: unNumero
	| cartasJugadas |
	(cartasJugadas _ [
	(OrderedCollection
		cover: (74 to: 90)
		declaredAt: (74 to: 90)) new ] valueCoveringAll:
		{92 to: 94})
		cover: (58 to: 70)
		declaredAt: (39 to: 51).
	(cartasJugadas _ [
	(cartas
		cover: (114 to: 119)
		declaredAt: (114 to: 119))
		copyFrom:
			(1 coverAll:
				{131 to: 131})
		to:
			(unNumero
				cover: (137 to: 144)
				declaredAt: (26 to: 33)) ] valueCoveringAll:
		{121 to: 129. 133 to: 135})
		cover: (98 to: 110)
		declaredAt: (39 to: 51).
	^ cartasJugadas
		cover: (150 to: 162)
		declaredAt: (39 to: 51).! !
!Behavior method!
cartasJugadasPorPie
	^ [
	(pie
		cover: (26 to: 28)
		declaredAt: (26 to: 28)) cantidadDeCartasJugadas:
		(numeroDeEnfrentamiento
			cover: (55 to: 76)
			declaredAt: (55 to: 76)) ] valueCoveringAll:
		{30 to: 53}.! !
!Behavior method!
= unaCarta
	^ [
	([
	(unaCarta
		cover: (18 to: 25)
		declaredAt: (3 to: 10)) isKindOf:
		([
		(self coverAll:
			{37 to: 40}) class ] valueCoveringAll:
			{42 to: 46}) ] valueCoveringAll:
		{27 to: 35}) and: [
		[
		([
		(unaCarta
			cover: (56 to: 63)
			declaredAt: (3 to: 10)) paloEs:
			(palo
				cover: (73 to: 76)
				declaredAt: (73 to: 76)) ] valueCoveringAll:
			{65 to: 71}) and: [
			[
			(unaCarta
				cover: (86 to: 93)
				declaredAt: (3 to: 10)) numeroEs:
				(numero
					cover: (105 to: 110)
					declaredAt: (105 to: 110)) ] valueCoveringAll:
				{95 to: 103} ]] valueCoveringAll:
			{79 to: 82} ]] valueCoveringAll:
		{49 to: 52}.! !
!Behavior method!
ganadorDelEnfrentamientoNumero: unNumero
	^ [
	([
	(enfrentamientos
		cover: (47 to: 61)
		declaredAt: (47 to: 61)) at:
		(unNumero
			cover: (67 to: 74)
			declaredAt: (33 to: 40)) ] valueCoveringAll:
		{63 to: 65}) ganador ] valueCoveringAll:
		{77 to: 83}.! !
!Behavior method!
ganador
	^ ganador
		cover: (13 to: 19)
		declaredAt: (13 to: 19).! !

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 20:00:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 20:00:26'!
PASSED!
!Behavior method!
parda
	^ 'parda' coverAll:
		{11 to: 17}.! !

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 20:00:26'!
PASSED!
!Behavior method!
jugarSegundoEnfrentamiento
	[
	(self coverAll:
		{30 to: 33}) verificarQueSeJugoEnfrentamientoAnterior:
		(2 coverAll:
			{77 to: 77}) ] valueCoveringAll:
		{35 to: 75}.
	[
	(self coverAll:
		{83 to: 86}) jugarEnfrentamiento ] valueCoveringAll:
		{88 to: 106}.! !
!Behavior method!
verificarQueSeJugoEnfrentamientoAnterior: numeroDeEnfrentamientoAJugar
	[
	([
	([
	(numeroDeEnfrentamiento
		cover: (75 to: 96)
		declaredAt: (75 to: 96)) +
		(1 coverAll:
			{99 to: 99}) ] valueCoveringAll:
		{98 to: 98}) <
		(numeroDeEnfrentamientoAJugar
			cover: (104 to: 131)
			declaredAt: (43 to: 70)) ] valueCoveringAll:
		{102 to: 102}) ifTrue: [
		[
		(self coverAll:
			{143 to: 146}) noSeJugoEnfrentamientoAnteriorAviso ] valueCoveringAll:
			{148 to: 182} ]] valueCoveringAll:
		{133 to: 139}.! !
!Behavior method!
jugarEnfrentamiento
	[
	([
	([
	([
	(enfrentamientos
		cover: (24 to: 38)
		declaredAt: (24 to: 38)) at:
		(numeroDeEnfrentamiento
			cover: (44 to: 65)
			declaredAt: (44 to: 65)) ] valueCoveringAll:
		{40 to: 42}) ganador ] valueCoveringAll:
		{68 to: 74}) =
		(mano
			cover: (78 to: 81)
			declaredAt: (78 to: 81)) ] valueCoveringAll:
		{76 to: 76})
		ifTrue: [
			[
			(self coverAll:
				{92 to: 95}) jugarEnfrentamientoEmpezandoPorMano ] valueCoveringAll:
				{97 to: 131} ]
		ifFalse: [
			[
			(self coverAll:
				{147 to: 150}) jugarEnfrentamientoEmpezandoPorPie ] valueCoveringAll:
				{152 to: 185} ]] valueCoveringAll:
		{83 to: 89. 137 to: 144}.! !
!Behavior method!
esDeBasto
	^ [
	(self coverAll:
		{15 to: 18}) paloEs:
		([
		(self coverAll:
			{28 to: 31}) basto ] valueCoveringAll:
			{33 to: 37}) ] valueCoveringAll:
		{20 to: 26}.! !
!Behavior method!
basto
	^ [
	([
	(self coverAll:
		{11 to: 14}) class ] valueCoveringAll:
		{16 to: 20}) basto ] valueCoveringAll:
		{22 to: 26}.! !
!Behavior method!
ganadorDeRonda
	| ganadores numeroMano numeroPie |
	[
	([
	([
	([
	(enfrentamientos
		cover: (57 to: 71)
		declaredAt: (57 to: 71)) at:
		(1 coverAll:
			{77 to: 77}) ] valueCoveringAll:
		{73 to: 75}) ganador ] valueCoveringAll:
		{80 to: 86}) =
		([
		(Enfrentamiento
			cover: (90 to: 103)
			declaredAt: (90 to: 103)) parda ] valueCoveringAll:
			{105 to: 109}) ] valueCoveringAll:
		{88 to: 88}) ifTrue: [ ^ [
		([
		(enfrentamientos
			cover: (123 to: 137)
			declaredAt: (57 to: 71)) at:
			(2 coverAll:
				{143 to: 143}) ] valueCoveringAll:
			{139 to: 141}) ganador ] valueCoveringAll:
			{146 to: 152} ]] valueCoveringAll:
		{111 to: 117}.
	(ganadores _ [
	(OrderedCollection
		cover: (171 to: 187)
		declaredAt: (171 to: 187)) new ] valueCoveringAll:
		{189 to: 191})
		cover: (159 to: 167)
		declaredAt: (20 to: 28).
	[
	(enfrentamientos
		cover: (195 to: 209)
		declaredAt: (57 to: 71)) do: [ :unEnfrentamiento |
		[
		(ganadores
			cover: (237 to: 245)
			declaredAt: (20 to: 28)) add:
			([
			(unEnfrentamiento
				cover: (253 to: 268)
				declaredAt: (218 to: 233)) ganador ] valueCoveringAll:
				{270 to: 276}) ] valueCoveringAll:
			{247 to: 250} ]] valueCoveringAll:
		{211 to: 213}.
	(numeroMano _ [
	(ganadores
		cover: (295 to: 303)
		declaredAt: (20 to: 28)) occurrencesOf:
		(mano
			cover: (320 to: 323)
			declaredAt: (320 to: 323)) ] valueCoveringAll:
		{305 to: 318})
		cover: (282 to: 291)
		declaredAt: (30 to: 39).
	(numeroPie _ [
	(ganadores
		cover: (339 to: 347)
		declaredAt: (20 to: 28)) occurrencesOf:
		(pie
			cover: (364 to: 366)
			declaredAt: (364 to: 366)) ] valueCoveringAll:
		{349 to: 362})
		cover: (327 to: 335)
		declaredAt: (41 to: 49).
	[
	([
	(numeroMano
		cover: (372 to: 381)
		declaredAt: (30 to: 39)) =
		(2 coverAll:
			{385 to: 385}) ] valueCoveringAll:
		{383 to: 383}) ifTrue: [ ^ mano
			cover: (399 to: 402)
			declaredAt: (320 to: 323) ]] valueCoveringAll:
		{387 to: 393}.
	[
	([
	(numeroPie
		cover: (407 to: 415)
		declaredAt: (41 to: 49)) =
		(2 coverAll:
			{419 to: 419}) ] valueCoveringAll:
		{417 to: 417}) ifTrue: [ ^ pie
			cover: (433 to: 435)
			declaredAt: (364 to: 366) ]] valueCoveringAll:
		{421 to: 427}.
	^ [
	(RondaDeTruco
		cover: (444 to: 455)
		declaredAt: (444 to: 455)) sinGanador ] valueCoveringAll:
		{457 to: 466}.! !

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:00:26'!
PASSED!
!Behavior method!
jugarEnfrentamientoEmpezandoPorPie
	| enfrentamiento |
	(numeroDeEnfrentamiento _ [
	(numeroDeEnfrentamiento
		cover: (60 to: 81)
		declaredAt: (60 to: 81)) +
		(1 coverAll:
			{110 to: 110}) ] valueCoveringAll:
		{108 to: 108})
		cover: (85 to: 106)
		declaredAt: (60 to: 81).
	(enfrentamiento _ [
	(Enfrentamiento
		cover: (131 to: 144)
		declaredAt: (131 to: 144))
		numero:
			(numeroDeEnfrentamiento
				cover: (154 to: 175)
				declaredAt: (60 to: 81))
		con:
			(pie
				cover: (182 to: 184)
				declaredAt: (182 to: 184))
		yCon:
			(mano
				cover: (192 to: 195)
				declaredAt: (192 to: 195)) ] valueCoveringAll:
		{146 to: 152. 177 to: 180. 186 to: 190})
		cover: (114 to: 127)
		declaredAt: (40 to: 53).
	[
	(enfrentamientos
		cover: (199 to: 213)
		declaredAt: (199 to: 213)) add:
		([
		(enfrentamiento
			cover: (221 to: 234)
			declaredAt: (40 to: 53)) jugar ] valueCoveringAll:
			{236 to: 240}) ] valueCoveringAll:
		{215 to: 218}.! !

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:00:26'!
PASSED!
!Behavior method!
noSeJugoEnfrentamientoAnteriorAviso
	[
	(self coverAll:
		{39 to: 42}) error:
		([
		(self coverAll:
			{51 to: 54}) noSeJugoElEnfrentamientoAnteriorDescripcionDeError ] valueCoveringAll:
			{56 to: 105}) ] valueCoveringAll:
		{44 to: 49}.! !
!Behavior method!
noSeJugoElEnfrentamientoAnteriorDescripcionDeError
	^ 'No se jugo el enfrentamiento anterior' coverAll:
		{56 to: 94}.! !

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 20:00:26'!
PASSED!
!Behavior method!
sinGanador
	^ 'Sin ganador' coverAll:
		{16 to: 28}.! !

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 20:00:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 20:00:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 20:00:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 20:00:26'!
PASSED!
!Behavior method!
jugarTercerEnfrentamiento
	[
	(self coverAll:
		{29 to: 32}) verificarQueSeJugoEnfrentamientoAnterior:
		(3 coverAll:
			{76 to: 76}) ] valueCoveringAll:
		{34 to: 74}.
	[
	(self coverAll:
		{82 to: 85}) verificarQueNoHayaGanador ] valueCoveringAll:
		{87 to: 111}.
	[
	(self coverAll:
		{117 to: 120}) jugarEnfrentamiento ] valueCoveringAll:
		{122 to: 140}.! !
!Behavior method!
verificarQueNoHayaGanador
	[
	([
	([
	(self coverAll:
		{29 to: 32}) ganadorDeRonda ] valueCoveringAll:
		{34 to: 47}) =
		([
		(RondaDeTruco
			cover: (51 to: 62)
			declaredAt: (51 to: 62)) sinGanador ] valueCoveringAll:
			{64 to: 73}) ] valueCoveringAll:
		{49 to: 49}) ifFalse: [
		[
		(self coverAll:
			{86 to: 89}) yaHayGanadorAviso ] valueCoveringAll:
			{91 to: 107} ]] valueCoveringAll:
		{75 to: 82}.! !

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:00:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:00:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores stamp: 'Ciro 7/5/2021 20:00:26'!
PASSED!
!Behavior method!
yaHayGanadorAviso
	[
	(self coverAll:
		{21 to: 24}) error:
		([
		(self coverAll:
			{33 to: 36}) yaHayGanadorDescripcionDeError ] valueCoveringAll:
			{38 to: 67}) ] valueCoveringAll:
		{26 to: 31}.! !
!Behavior method!
yaHayGanadorDescripcionDeError
	^ 'Ya hay ganador' coverAll:
		{36 to: 51}.! !

!testRun: #RondaDeTrucoTest #test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador stamp: 'Ciro 7/5/2021 20:00:26'!
PASSED!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'Ciro 7/5/2021 20:05:39'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'mano pie numeroDeEnfrentamientos enfrentamientos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 20:05:39' prior: 50990582!
cartasJugadasPorPie
	
	^ pie cantidadDeCartasJugadas: numeroDeEnfrentamientos! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 20:05:39' prior: 50990553!
cartasJugadasPorMano

	^ mano cantidadDeCartasJugadas: numeroDeEnfrentamientos! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 20:05:39' prior: 50990540!
numeroDeEnfrentamiento
	
	^ numeroDeEnfrentamientos! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 20:05:39' prior: 50991784!
verificarQueSeJugoEnfrentamientoAnterior: numeroDeEnfrentamientoAJugar

	(numeroDeEnfrentamientos +1) < numeroDeEnfrentamientoAJugar ifTrue: [ self noSeJugoEnfrentamientoAnteriorAviso].! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 20:05:40' prior: 50995257!
jugarEnfrentamientoEmpezandoPorPie

	| enfrentamiento |
	
	numeroDeEnfrentamientos _ numeroDeEnfrentamientos + 1.
	enfrentamiento _ Enfrentamiento numero: numeroDeEnfrentamientos con: pie yCon: mano.
	enfrentamientos add: (enfrentamiento jugar)

	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 20:05:40' prior: 50995247!
jugarEnfrentamientoEmpezandoPorMano

	| enfrentamiento |
	
	numeroDeEnfrentamientos _ numeroDeEnfrentamientos + 1.
	enfrentamiento _ Enfrentamiento numero: numeroDeEnfrentamientos con: mano yCon: pie.
	enfrentamientos add: (enfrentamiento jugar)

	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 20:05:40' prior: 50990637!
inicializarCon: unJugador yCon: otroJugador
	
	mano _ unJugador.
	pie _ otroJugador.
	numeroDeEnfrentamientos _ 0.
	enfrentamientos _ OrderedCollection new! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 20:05:40' prior: 50995268!
jugarEnfrentamiento

	(enfrentamientos at: numeroDeEnfrentamientos) ganador = mano ifTrue: [self jugarEnfrentamientoEmpezandoPorMano ]
		ifFalse: [self jugarEnfrentamientoEmpezandoPorPie].

	! !

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 20:05:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 20:05:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 20:05:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 20:05:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 20:05:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 20:05:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:05:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:05:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 20:05:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 20:05:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 20:05:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 20:05:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 20:05:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:05:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:05:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores stamp: 'Ciro 7/5/2021 20:05:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador stamp: 'Ciro 7/5/2021 20:05:43'!
PASSED!
!RondaDeTrucoTest methodsFor: 'test segundo enfrentamiento' stamp: 'Ciro 7/5/2021 20:07:59' prior: 50992102!
test07SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorMano second equals: self buenaMano second.
	self assert: ronda cartasJugadasPorPie first equals: self malaMano first.
	self assert: ronda cartasJugadasPorPie second equals: self malaMano second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: mano.
	self assert: ronda ganadorDeRonda equals: mano.! !
!RondaDeTrucoTest methodsFor: 'test segundo enfrentamiento' stamp: 'Ciro 7/5/2021 20:08:07'!
test07SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorMano second equals: self buenaMano second.
	self assert: ronda cartasJugadasPorPie first equals: self malaMano first.
	self assert: ronda cartasJugadasPorPie second equals: self malaMano second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: mano.
	self assert: ronda ganadorDeRonda equals: mano.! !

!methodRemoval: RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:08:07'!
test07SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorMano second equals: self buenaMano second.
	self assert: ronda cartasJugadasPorPie first equals: self malaMano first.
	self assert: ronda cartasJugadasPorPie second equals: self malaMano second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: mano.
	self assert: ronda ganadorDeRonda equals: mano.!
!RondaDeTrucoTest methodsFor: 'test segundo enfrentamiento' stamp: 'Ciro 7/5/2021 20:08:18'!
test08SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaPieYGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self malaMano.
	pie _ Jugador con: self buenaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self malaMano first.
	self assert: ronda cartasJugadasPorMano second equals: self malaMano second.
	self assert: ronda cartasJugadasPorPie first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorPie second equals: self buenaMano second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: pie.
	self assert: ronda ganadorDeRonda equals: pie.! !

!methodRemoval: RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:08:18'!
test08SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self malaMano.
	pie _ Jugador con: self buenaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self malaMano first.
	self assert: ronda cartasJugadasPorMano second equals: self malaMano second.
	self assert: ronda cartasJugadasPorPie first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorPie second equals: self buenaMano second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: pie.
	self assert: ronda ganadorDeRonda equals: pie.!
!RondaDeTruco methodsFor: 'para test' stamp: 'Ciro 7/5/2021 20:10:35'!
ordenJugadoresQueComienzanElEnfrentamiento

	| jugadores |
	
	jugadores _ OrderedCollection new.
	
	enfrentamientos do: [ :unEnfrentamiento | jugadores add: (unEnfrentamiento jugadorInicial)]! !
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'Ciro 7/5/2021 20:10:50'!
jugadorInicial

	^ jugadorInicial
	! !
!RondaDeTruco methodsFor: 'para test' stamp: 'Ciro 7/5/2021 20:11:12' prior: 50996530!
ordenJugadoresQueComienzanElEnfrentamiento

	| jugadores |
	
	jugadores _ OrderedCollection new.
	.
	enfrentamientos do: [ :unEnfrentamiento | jugadores add: (unEnfrentamiento jugadorInicial)].
	
	^ jugadores ! !
!RondaDeTruco methodsFor: 'para test' stamp: 'Ciro 7/5/2021 20:11:14' prior: 50996543!
ordenJugadoresQueComienzanElEnfrentamiento

	| jugadores |
	
	jugadores _ OrderedCollection new.
	
	enfrentamientos do: [ :unEnfrentamiento | jugadores add: (unEnfrentamiento jugadorInicial)].
	
	^ jugadores ! !
!RondaDeTrucoTest methodsFor: 'test segundo enfrentamiento' stamp: 'Ciro 7/5/2021 20:11:48' prior: 50996407!
test07SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self buenaMano.
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorMano second equals: self buenaMano second.
	self assert: ronda cartasJugadasPorPie first equals: self malaMano first.
	self assert: ronda cartasJugadasPorPie second equals: self malaMano second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: mano.
	self assert: ronda ganadorDeRonda equals: mano.! !

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:11:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 20:11:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 20:11:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 20:11:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 20:11:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 20:11:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 20:11:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:11:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:11:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 20:11:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 20:11:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 20:11:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 20:11:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 20:11:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:11:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:11:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores stamp: 'Ciro 7/5/2021 20:11:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador stamp: 'Ciro 7/5/2021 20:11:51'!
PASSED!
!RondaDeTrucoTest methodsFor: 'test segundo enfrentamiento' stamp: 'Ciro 7/5/2021 20:12:02' prior: 50996469!
test08SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaPieYGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self malaMano.
	pie _ Jugador con: self buenaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self malaMano first.
	self assert: ronda cartasJugadasPorMano second equals: self malaMano second.
	self assert: ronda cartasJugadasPorPie first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorPie second equals: self buenaMano second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: pie.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: pie.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: pie.
	self assert: ronda ganadorDeRonda equals: pie.! !

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:12:03'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'test segundo enfrentamiento' stamp: 'Ciro 7/5/2021 20:12:39' prior: 50996677!
test08SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaPieYGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self malaMano.
	pie _ Jugador con: self buenaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self malaMano first.
	self assert: ronda cartasJugadasPorMano second equals: self malaMano second.
	self assert: ronda cartasJugadasPorPie first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorPie second equals: self buenaMano second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: pie.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: pie.
	self assert: ronda ganadorDeRonda equals: pie.! !

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:12:41'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 20:12:41'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 20:12:41'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 20:12:41'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 20:12:41'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 20:12:41'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 20:12:41'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:12:41'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:12:41'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 20:12:41'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 20:12:41'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 20:12:41'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 20:12:41'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 20:12:41'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:12:41'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:12:41'!
PASSED!

!testRun: #RondaDeTrucoTest #test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores stamp: 'Ciro 7/5/2021 20:12:41'!
PASSED!

!testRun: #RondaDeTrucoTest #test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador stamp: 'Ciro 7/5/2021 20:12:41'!
PASSED!
!RondaDeTrucoTest methodsFor: 'test segundo enfrentamiento' stamp: 'Ciro 7/5/2021 20:13:36'!
test10SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaManoYNoGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self buenaManoParaTercerRonda.
	pie _ Jugador con: self malaManoParaTerceraRonda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self buenaManoParaTercerRonda first.
	self assert: ronda cartasJugadasPorMano second equals: self buenaManoParaTercerRonda second.
	self assert: ronda cartasJugadasPorPie first equals: self malaManoParaTerceraRonda first.
	self assert: ronda cartasJugadasPorPie second equals: self malaManoParaTerceraRonda second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: mano.
	self assert: ronda ganadorDeRonda equals: RondaDeTruco sinGanador.! !

!methodRemoval: RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 20:13:36'!
test10SePuedeJugarElSegundoEnfrentamientoYGanaManoYNoGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self buenaManoParaTercerRonda.
	pie _ Jugador con: self malaManoParaTerceraRonda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self buenaManoParaTercerRonda first.
	self assert: ronda cartasJugadasPorMano second equals: self buenaManoParaTercerRonda second.
	self assert: ronda cartasJugadasPorPie first equals: self malaManoParaTerceraRonda first.
	self assert: ronda cartasJugadasPorPie second equals: self malaManoParaTerceraRonda second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: mano.
	self assert: ronda ganadorDeRonda equals: RondaDeTruco sinGanador.!
!RondaDeTrucoTest methodsFor: 'test segundo enfrentamiento' stamp: 'Ciro 7/5/2021 20:13:45' prior: 50996830!
test10SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaManoYNoGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self buenaManoParaTercerRonda.
	pie _ Jugador con: self malaManoParaTerceraRonda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self buenaManoParaTercerRonda first.
	self assert: ronda cartasJugadasPorMano second equals: self buenaManoParaTercerRonda second.
	self assert: ronda cartasJugadasPorPie first equals: self malaManoParaTerceraRonda first.
	self assert: ronda cartasJugadasPorPie second equals: self malaManoParaTerceraRonda second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: pie.
	self assert: ronda ganadorDeRonda equals: RondaDeTruco sinGanador.! !

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 20:13:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 20:13:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 20:13:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 20:13:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 20:13:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 20:13:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 20:13:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:13:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:13:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 20:13:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 20:13:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 20:13:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 20:13:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 20:13:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:13:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:13:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores stamp: 'Ciro 7/5/2021 20:13:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador stamp: 'Ciro 7/5/2021 20:13:46'!
PASSED!
!RondaDeTrucoTest methodsFor: 'test segundo enfrentamiento' stamp: 'Ciro 7/5/2021 20:13:55'!
test11SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYNoGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self malaManoParaTerceraRonda.
	pie _ Jugador con: self buenaManoParaTercerRonda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self malaManoParaTerceraRonda first.
	self assert: ronda cartasJugadasPorMano second equals: self malaManoParaTerceraRonda second.
	self assert: ronda cartasJugadasPorPie first equals: self buenaManoParaTercerRonda first.
	self assert: ronda cartasJugadasPorPie second equals: self buenaManoParaTercerRonda second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: pie.
	self assert: ronda ganadorDeRonda equals: RondaDeTruco sinGanador.! !
!RondaDeTrucoTest methodsFor: 'test segundo enfrentamiento' stamp: 'Ciro 7/5/2021 20:14:00' prior: 50997017!
test11SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYNoGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self malaManoParaTerceraRonda.
	pie _ Jugador con: self buenaManoParaTercerRonda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self malaManoParaTerceraRonda first.
	self assert: ronda cartasJugadasPorMano second equals: self malaManoParaTerceraRonda second.
	self assert: ronda cartasJugadasPorPie first equals: self buenaManoParaTercerRonda first.
	self assert: ronda cartasJugadasPorPie second equals: self buenaManoParaTercerRonda second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: pie.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: mano.
	self assert: ronda ganadorDeRonda equals: RondaDeTruco sinGanador.! !

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 20:14:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 20:14:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 20:14:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 20:14:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 20:14:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 20:14:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 20:14:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:14:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:14:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 20:14:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 20:14:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 20:14:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 20:14:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 20:14:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 20:14:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:14:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:14:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores stamp: 'Ciro 7/5/2021 20:14:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador stamp: 'Ciro 7/5/2021 20:14:02'!
PASSED!

!methodRemoval: RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 20:14:35'!
test11SePuedeJugarElSegundoEnfrentamientoYGanaPieYNoGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self malaManoParaTerceraRonda.
	pie _ Jugador con: self buenaManoParaTercerRonda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self malaManoParaTerceraRonda first.
	self assert: ronda cartasJugadasPorMano second equals: self malaManoParaTerceraRonda second.
	self assert: ronda cartasJugadasPorPie first equals: self buenaManoParaTercerRonda first.
	self assert: ronda cartasJugadasPorPie second equals: self buenaManoParaTercerRonda second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: pie.
	self assert: ronda ganadorDeRonda equals: RondaDeTruco sinGanador.!
!RondaDeTrucoTest methodsFor: 'test segundo enfrentamiento' stamp: 'Ciro 7/5/2021 20:15:21'!
test12SePuedeJugarElSegundoEnfrentamientoComanzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera

	| ronda mano pie |
	
	mano _ Jugador con: self malaManoPardaPeroGanaSegunda .
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self malaManoPardaPeroGanaSegunda first.
	self assert: ronda cartasJugadasPorMano second equals: self malaManoPardaPeroGanaSegunda second.
	self assert: ronda cartasJugadasPorPie first equals: self malaMano first.
	self assert: ronda cartasJugadasPorPie second equals: self malaMano second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: mano.
	self assert: ronda ganadorDeRonda equals: mano.! !
!RondaDeTrucoTest methodsFor: 'test segundo enfrentamiento' stamp: 'Ciro 7/5/2021 20:15:40'!
test12SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera

	| ronda mano pie |
	
	mano _ Jugador con: self malaManoPardaPeroGanaSegunda .
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self malaManoPardaPeroGanaSegunda first.
	self assert: ronda cartasJugadasPorMano second equals: self malaManoPardaPeroGanaSegunda second.
	self assert: ronda cartasJugadasPorPie first equals: self malaMano first.
	self assert: ronda cartasJugadasPorPie second equals: self malaMano second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: mano.
	self assert: ronda ganadorDeRonda equals: mano.! !

!methodRemoval: RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoComanzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 20:15:40'!
test12SePuedeJugarElSegundoEnfrentamientoComanzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera

	| ronda mano pie |
	
	mano _ Jugador con: self malaManoPardaPeroGanaSegunda .
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self malaManoPardaPeroGanaSegunda first.
	self assert: ronda cartasJugadasPorMano second equals: self malaManoPardaPeroGanaSegunda second.
	self assert: ronda cartasJugadasPorPie first equals: self malaMano first.
	self assert: ronda cartasJugadasPorPie second equals: self malaMano second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: mano.
	self assert: ronda ganadorDeRonda equals: mano.!

!methodRemoval: RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 20:15:42'!
test12SePuedeJugarElSegundoEnfrentamientoYGanaManoYGanaLaRondaPorPardarLaPrimera

	| ronda mano pie |
	
	mano _ Jugador con: self malaManoPardaPeroGanaSegunda .
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self malaManoPardaPeroGanaSegunda first.
	self assert: ronda cartasJugadasPorMano second equals: self malaManoPardaPeroGanaSegunda second.
	self assert: ronda cartasJugadasPorPie first equals: self malaMano first.
	self assert: ronda cartasJugadasPorPie second equals: self malaMano second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: mano.
	self assert: ronda ganadorDeRonda equals: mano.!
!RondaDeTrucoTest methodsFor: 'test segundo enfrentamiento' stamp: 'Ciro 7/5/2021 20:15:49' prior: 50997241!
test12SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera

	| ronda mano pie |
	
	mano _ Jugador con: self malaManoPardaPeroGanaSegunda .
	pie _ Jugador con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self malaManoPardaPeroGanaSegunda first.
	self assert: ronda cartasJugadasPorMano second equals: self malaManoPardaPeroGanaSegunda second.
	self assert: ronda cartasJugadasPorPie first equals: self malaMano first.
	self assert: ronda cartasJugadasPorPie second equals: self malaMano second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: mano.
	self assert: ronda ganadorDeRonda equals: mano.! !

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 20:15:51'!
FAILURE!
!RondaDeTruco methodsFor: 'jugar' stamp: 'Ciro 7/5/2021 20:17:55' prior: 50996296!
jugarEnfrentamiento

	(enfrentamientos at: numeroDeEnfrentamientos) ganador = mano ifTrue: [self jugarEnfrentamientoEmpezandoPorMano ]
		ifFalse: [self jugarEnfrentamientoEmpezandoPorPie].

	! !
!RondaDeTruco methodsFor: 'jugar' stamp: 'Ciro 7/5/2021 20:19:59' prior: 50997388!
jugarEnfrentamiento

	(enfrentamientos at: numeroDeEnfrentamientos) ganador = pie ifTrue: [self jugarEnfrentamientoEmpezandoPorPie ]
		ifFalse: [self jugarEnfrentamientoEmpezandoPorMano].

	! !

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 20:20:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 20:20:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 20:20:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 20:20:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 20:20:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 20:20:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 20:20:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:20:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:20:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 20:20:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 20:20:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 20:20:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 20:20:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 20:20:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:20:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:20:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores stamp: 'Ciro 7/5/2021 20:20:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador stamp: 'Ciro 7/5/2021 20:20:06'!
PASSED!
!RondaDeTrucoTest methodsFor: 'test segundo enfrentamiento' stamp: 'Ciro 7/5/2021 20:20:22'!
test13SePuedeJugarElSegundoEnfrentamientoComanzandoPorManoYGanaPieYGanaLaRondaPorPardarLaPrimera

	| ronda mano pie |
	
	mano _ Jugador con: self malaMano.
	pie _ Jugador con: self malaManoPardaPeroGanaSegunda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self malaMano first.
	self assert: ronda cartasJugadasPorMano second equals: self malaMano second.
	self assert: ronda cartasJugadasPorPie first equals: self malaManoPardaPeroGanaSegunda first.
	self assert: ronda cartasJugadasPorPie second equals: self malaManoPardaPeroGanaSegunda second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: pie.
	self assert: ronda ganadorDeRonda equals: pie.! !

!methodRemoval: RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 20:20:22'!
test13SePuedeJugarElSegundoEnfrentamientoYGanaPieYGanaLaRondaPorPardarLaPrimera

	| ronda mano pie |
	
	mano _ Jugador con: self malaMano.
	pie _ Jugador con: self malaManoPardaPeroGanaSegunda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self malaMano first.
	self assert: ronda cartasJugadasPorMano second equals: self malaMano second.
	self assert: ronda cartasJugadasPorPie first equals: self malaManoPardaPeroGanaSegunda first.
	self assert: ronda cartasJugadasPorPie second equals: self malaManoPardaPeroGanaSegunda second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: pie.
	self assert: ronda ganadorDeRonda equals: pie.!
!RondaDeTrucoTest methodsFor: 'test segundo enfrentamiento' stamp: 'Ciro 7/5/2021 20:20:27'!
test13SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYGanaLaRondaPorPardarLaPrimera

	| ronda mano pie |
	
	mano _ Jugador con: self malaMano.
	pie _ Jugador con: self malaManoPardaPeroGanaSegunda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self malaMano first.
	self assert: ronda cartasJugadasPorMano second equals: self malaMano second.
	self assert: ronda cartasJugadasPorPie first equals: self malaManoPardaPeroGanaSegunda first.
	self assert: ronda cartasJugadasPorPie second equals: self malaManoPardaPeroGanaSegunda second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: pie.
	self assert: ronda ganadorDeRonda equals: pie.! !

!methodRemoval: RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoComanzandoPorManoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 20:20:27'!
test13SePuedeJugarElSegundoEnfrentamientoComanzandoPorManoYGanaPieYGanaLaRondaPorPardarLaPrimera

	| ronda mano pie |
	
	mano _ Jugador con: self malaMano.
	pie _ Jugador con: self malaManoPardaPeroGanaSegunda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self malaMano first.
	self assert: ronda cartasJugadasPorMano second equals: self malaMano second.
	self assert: ronda cartasJugadasPorPie first equals: self malaManoPardaPeroGanaSegunda first.
	self assert: ronda cartasJugadasPorPie second equals: self malaManoPardaPeroGanaSegunda second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: pie.
	self assert: ronda ganadorDeRonda equals: pie.!
!RondaDeTrucoTest methodsFor: 'test segundo enfrentamiento' stamp: 'Ciro 7/5/2021 20:20:33' prior: 50997552!
test13SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYGanaLaRondaPorPardarLaPrimera

	| ronda mano pie |
	
	mano _ Jugador con: self malaMano.
	pie _ Jugador con: self malaManoPardaPeroGanaSegunda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self malaMano first.
	self assert: ronda cartasJugadasPorMano second equals: self malaMano second.
	self assert: ronda cartasJugadasPorPie first equals: self malaManoPardaPeroGanaSegunda first.
	self assert: ronda cartasJugadasPorPie second equals: self malaManoPardaPeroGanaSegunda second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: pie.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: mano.
	self assert: ronda ganadorDeRonda equals: pie.! !

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 20:20:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 20:20:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 20:20:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 20:20:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 20:20:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 20:20:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 20:20:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:20:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:20:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 20:20:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 20:20:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 20:20:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 20:20:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 20:20:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:20:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:20:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores stamp: 'Ciro 7/5/2021 20:20:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador stamp: 'Ciro 7/5/2021 20:20:34'!
PASSED!
!RondaDeTrucoTest methodsFor: 'test tercer enfrentamiento' stamp: 'Ciro 7/5/2021 20:21:10'!
test14SePuedeJugarElTercerEnfrentamientoComanzandoPorManoYGanaManoYGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self buenaManoParaTercerRonda .
	pie _ Jugador con: self malaManoParaTerceraRonda .
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	ronda jugarTercerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 3.
	self assert: ronda cartasJugadasPorMano size equals: 3.
	self assert: ronda cartasJugadasPorPie size equals: 3.
	self assert: ronda cartasJugadasPorMano equals: self buenaManoParaTercerRonda.
	self assert: ronda cartasJugadasPorPie equals: self malaManoParaTerceraRonda.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 3) equals: mano.
	self assert: ronda ganadorDeRonda equals: mano.! !

!methodRemoval: RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:21:10'!
test14SePuedeJugarElTercerEnfrentamientoYGanaManoYGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self buenaManoParaTercerRonda .
	pie _ Jugador con: self malaManoParaTerceraRonda .
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	ronda jugarTercerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 3.
	self assert: ronda cartasJugadasPorMano size equals: 3.
	self assert: ronda cartasJugadasPorPie size equals: 3.
	self assert: ronda cartasJugadasPorMano equals: self buenaManoParaTercerRonda.
	self assert: ronda cartasJugadasPorPie equals: self malaManoParaTerceraRonda.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 3) equals: mano.
	self assert: ronda ganadorDeRonda equals: mano.!
!RondaDeTrucoTest methodsFor: 'test tercer enfrentamiento' stamp: 'Ciro 7/5/2021 20:21:25'!
test15SePuedeJugarElTercerEnfrentamientoComezandoPorPieYGanaPieYGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self malaManoParaTerceraRonda.
	pie _ Jugador con: self buenaManoParaTercerRonda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	ronda jugarTercerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 3.
	self assert: ronda cartasJugadasPorMano size equals: 3.
	self assert: ronda cartasJugadasPorPie size equals: 3.
	self assert: ronda cartasJugadasPorMano equals: self malaManoParaTerceraRonda.
	self assert: ronda cartasJugadasPorPie equals: self buenaManoParaTercerRonda.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 3) equals: pie.
	self assert: ronda ganadorDeRonda equals: pie.! !

!methodRemoval: RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:21:25'!
test15SePuedeJugarElTercerEnfrentamientoYGanaPieYGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self malaManoParaTerceraRonda.
	pie _ Jugador con: self buenaManoParaTercerRonda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	ronda jugarTercerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 3.
	self assert: ronda cartasJugadasPorMano size equals: 3.
	self assert: ronda cartasJugadasPorPie size equals: 3.
	self assert: ronda cartasJugadasPorMano equals: self malaManoParaTerceraRonda.
	self assert: ronda cartasJugadasPorPie equals: self buenaManoParaTercerRonda.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 3) equals: pie.
	self assert: ronda ganadorDeRonda equals: pie.!
!RondaDeTrucoTest methodsFor: 'test tercer enfrentamiento' stamp: 'Ciro 7/5/2021 20:21:54' prior: 50997795!
test15SePuedeJugarElTercerEnfrentamientoComezandoPorPieYGanaPieYGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self malaManoParaTerceraRonda.
	pie _ Jugador con: self buenaManoParaTercerRonda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	ronda jugarTercerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 3.
	self assert: ronda cartasJugadasPorMano size equals: 3.
	self assert: ronda cartasJugadasPorPie size equals: 3.
	self assert: ronda cartasJugadasPorMano equals: self malaManoParaTerceraRonda.
	self assert: ronda cartasJugadasPorPie equals: self buenaManoParaTercerRonda.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 3) equals: pie.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento third equals: mano.
	self assert: ronda ganadorDeRonda equals: pie.! !
!RondaDeTrucoTest methodsFor: 'test tercer enfrentamiento' stamp: 'Ciro 7/5/2021 20:22:31' prior: 50997852!
test15SePuedeJugarElTercerEnfrentamientoComezandoPorPieYGanaPieYGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self malaManoParaTerceraRonda.
	pie _ Jugador con: self buenaManoParaTercerRonda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	ronda jugarTercerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 3.
	self assert: ronda cartasJugadasPorMano size equals: 3.
	self assert: ronda cartasJugadasPorPie size equals: 3.
	self assert: ronda cartasJugadasPorMano equals: self malaManoParaTerceraRonda.
	self assert: ronda cartasJugadasPorPie equals: self buenaManoParaTercerRonda.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 3) equals: pie.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: pie.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento third equals: pie.
	self assert: ronda ganadorDeRonda equals: pie.! !

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoComezandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:22:31'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'test tercer enfrentamiento' stamp: 'Ciro 7/5/2021 20:22:44' prior: 50997738!
test14SePuedeJugarElTercerEnfrentamientoComanzandoPorManoYGanaManoYGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self buenaManoParaTercerRonda .
	pie _ Jugador con: self malaManoParaTerceraRonda .
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	ronda jugarTercerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 3.
	self assert: ronda cartasJugadasPorMano size equals: 3.
	self assert: ronda cartasJugadasPorPie size equals: 3.
	self assert: ronda cartasJugadasPorMano equals: self buenaManoParaTercerRonda.
	self assert: ronda cartasJugadasPorPie equals: self malaManoParaTerceraRonda.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 3) equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: pie.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento third equals: mano.
	self assert: ronda ganadorDeRonda equals: mano.! !
!RondaDeTrucoTest methodsFor: 'test tercer enfrentamiento' stamp: 'Ciro 7/5/2021 20:23:16' prior: 50997888!
test15SePuedeJugarElTercerEnfrentamientoComezandoPorPieYGanaPieYGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self malaManoParaTerceraRonda.
	pie _ Jugador con: self buenaManoParaTercerRonda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	ronda jugarTercerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 3.
	self assert: ronda cartasJugadasPorMano size equals: 3.
	self assert: ronda cartasJugadasPorPie size equals: 3.
	self assert: ronda cartasJugadasPorMano equals: self malaManoParaTerceraRonda.
	self assert: ronda cartasJugadasPorPie equals: self buenaManoParaTercerRonda.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 3) equals: pie.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento third equals: pie.
	self assert: ronda ganadorDeRonda equals: pie.! !

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoComezandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:23:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 20:23:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 20:23:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 20:23:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 20:23:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 20:23:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 20:23:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:23:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:23:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 20:23:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 20:23:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 20:23:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 20:23:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 20:23:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoComanzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:23:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoComezandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:23:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores stamp: 'Ciro 7/5/2021 20:23:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador stamp: 'Ciro 7/5/2021 20:23:17'!
PASSED!
!RondaDeTrucoTest methodsFor: 'test tercer enfrentamiento' stamp: 'Ciro 7/5/2021 20:23:30'!
test18SePuedeJugarElTercerEnfrentamientoComanzandoPorPieYGanaManoYGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self buenaManoParaTercerRonda .
	pie _ Jugador con: self malaManoParaTerceraRonda .
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	ronda jugarTercerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 3.
	self assert: ronda cartasJugadasPorMano size equals: 3.
	self assert: ronda cartasJugadasPorPie size equals: 3.
	self assert: ronda cartasJugadasPorMano equals: self buenaManoParaTercerRonda.
	self assert: ronda cartasJugadasPorPie equals: self malaManoParaTerceraRonda.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 3) equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: pie.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento third equals: mano.
	self assert: ronda ganadorDeRonda equals: mano.! !
!RondaDeTrucoTest methodsFor: 'test tercer enfrentamiento' stamp: 'Ciro 7/5/2021 20:23:37'!
test19SePuedeJugarElTercerEnfrentamientoComezandoPorManoYGanaPieYGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self malaManoParaTerceraRonda.
	pie _ Jugador con: self buenaManoParaTercerRonda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	ronda jugarTercerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 3.
	self assert: ronda cartasJugadasPorMano size equals: 3.
	self assert: ronda cartasJugadasPorPie size equals: 3.
	self assert: ronda cartasJugadasPorMano equals: self malaManoParaTerceraRonda.
	self assert: ronda cartasJugadasPorPie equals: self buenaManoParaTercerRonda.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 3) equals: pie.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento third equals: pie.
	self assert: ronda ganadorDeRonda equals: pie.! !
!RondaDeTrucoTest methodsFor: 'test tercer enfrentamiento' stamp: 'Ciro 7/5/2021 20:24:54' prior: 50998081!
test18SePuedeJugarElTercerEnfrentamientoComanzandoPorPieYGanaManoYGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self buenaManoParaTercerRondaComenzandoPie .
	pie _ Jugador con: self malaManoParaTerceraRonda .
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	ronda jugarTercerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 3.
	self assert: ronda cartasJugadasPorMano size equals: 3.
	self assert: ronda cartasJugadasPorPie size equals: 3.
	self assert: ronda cartasJugadasPorMano equals: self buenaManoParaTercerRonda.
	self assert: ronda cartasJugadasPorPie equals: self malaManoParaTerceraRonda.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 3) equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: pie.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento third equals: mano.
	self assert: ronda ganadorDeRonda equals: mano.! !
!RondaDeTrucoTest methodsFor: 'test tercer enfrentamiento' stamp: 'Ciro 7/5/2021 20:25:15' prior: 50998153!
test18SePuedeJugarElTercerEnfrentamientoComanzandoPorPieYGanaManoYGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self buenaManoParaTercerRondaComenzandoPie .
	pie _ Jugador con: self malaManoParaTerceraRonda .
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	ronda jugarTercerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 3.
	self assert: ronda cartasJugadasPorMano size equals: 3.
	self assert: ronda cartasJugadasPorPie size equals: 3.
	self assert: ronda cartasJugadasPorMano equals: self buenaManoParaTercerRonda.
	self assert: ronda cartasJugadasPorPie equals: self malaManoParaTerceraRonda.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 3) equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento third equals: pie.
	self assert: ronda ganadorDeRonda equals: mano.! !
!RondaDeTrucoTest methodsFor: 'objectos para test' stamp: 'Ciro 7/5/2021 20:25:40' prior: 50992707!
buenaManoParaTercerRonda

	^ OrderedCollection 
		with: (CartaDeTruco palo: (CartaDeTruco espada) numero: 1)
		with: (CartaDeTruco palo: (CartaDeTruco basto ) numero: 4)
		with: (CartaDeTruco palo: (CartaDeTruco basto) numero: 1)! !
!RondaDeTrucoTest methodsFor: 'objectos para test' stamp: 'Ciro 7/5/2021 20:25:46'!
buenaManoParaTercerRondaComenzandoPorPie

	^ OrderedCollection 
		with: (CartaDeTruco palo: (CartaDeTruco espada) numero: 1)
		with: (CartaDeTruco palo: (CartaDeTruco basto ) numero: 4)
		with: (CartaDeTruco palo: (CartaDeTruco basto) numero: 1)! !
!RondaDeTrucoTest methodsFor: 'objectos para test' stamp: 'Ciro 7/5/2021 20:26:00' prior: 50998227!
buenaManoParaTercerRonda

	^ OrderedCollection 
		with: (CartaDeTruco palo: (CartaDeTruco basto) numero: 4)
		with: (CartaDeTruco palo: (CartaDeTruco espada ) numero: 1)
		with: (CartaDeTruco palo: (CartaDeTruco basto) numero: 1)! !
!RondaDeTrucoTest methodsFor: 'objectos para test' stamp: 'Ciro 7/5/2021 20:26:20'!
malaManoParaTerceraRondaComenzandoPorPie

	^ OrderedCollection 
		with: (CartaDeTruco palo: (CartaDeTruco espada) numero: 7)
		with: (CartaDeTruco palo: (CartaDeTruco copa ) numero: 4)
		with: (CartaDeTruco palo: (CartaDeTruco oro) numero: 4)! !
!RondaDeTrucoTest methodsFor: 'objectos para test' stamp: 'Ciro 7/5/2021 20:26:33' prior: 50998258!
malaManoParaTerceraRondaComenzandoPorPie

	^ OrderedCollection 
		with: (CartaDeTruco palo: (CartaDeTruco copa) numero: 4)
		with: (CartaDeTruco palo: (CartaDeTruco espada ) numero: 7)
		with: (CartaDeTruco palo: (CartaDeTruco oro) numero: 4)! !
!RondaDeTrucoTest methodsFor: 'test tercer enfrentamiento' stamp: 'Ciro 7/5/2021 20:26:52' prior: 50998190!
test18SePuedeJugarElTercerEnfrentamientoComanzandoPorPieYGanaManoYGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self buenaManoParaTercerRondaComenzandoPorPie .
	pie _ Jugador con: self malaManoParaTerceraRondaComenzandoPorPie .
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	ronda jugarTercerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 3.
	self assert: ronda cartasJugadasPorMano size equals: 3.
	self assert: ronda cartasJugadasPorPie size equals: 3.
	self assert: ronda cartasJugadasPorMano equals: self buenaManoParaTercerRonda.
	self assert: ronda cartasJugadasPorPie equals: self malaManoParaTerceraRonda.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 3) equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento third equals: pie.
	self assert: ronda ganadorDeRonda equals: mano.! !

!testRun: #RondaDeTrucoTest #test18SePuedeJugarElTercerEnfrentamientoComanzandoPorPieYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:26:53'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'test tercer enfrentamiento' stamp: 'Ciro 7/5/2021 20:27:03' prior: 50998281!
test18SePuedeJugarElTercerEnfrentamientoComanzandoPorPieYGanaManoYGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self buenaManoParaTercerRondaComenzandoPorPie .
	pie _ Jugador con: self malaManoParaTerceraRondaComenzandoPorPie .
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	ronda jugarTercerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 3.
	self assert: ronda cartasJugadasPorMano size equals: 3.
	self assert: ronda cartasJugadasPorPie size equals: 3.
	self assert: ronda cartasJugadasPorMano equals: self buenaManoParaTercerRondaComenzandoPorPie.
	self assert: ronda cartasJugadasPorPie equals: self malaManoParaTerceraRondaComenzandoPorPie.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 3) equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento third equals: pie.
	self assert: ronda ganadorDeRonda equals: mano.! !

!testRun: #RondaDeTrucoTest #test18SePuedeJugarElTercerEnfrentamientoComanzandoPorPieYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:27:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 20:27:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 20:27:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 20:27:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 20:27:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 20:27:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 20:27:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:27:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:27:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 20:27:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 20:27:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 20:27:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 20:27:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 20:27:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoComanzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:27:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoComezandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:27:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores stamp: 'Ciro 7/5/2021 20:27:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador stamp: 'Ciro 7/5/2021 20:27:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test18SePuedeJugarElTercerEnfrentamientoComanzandoPorPieYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:27:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test19SePuedeJugarElTercerEnfrentamientoComezandoPorManoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:27:04'!
PASSED!
!RondaDeTrucoTest methodsFor: 'test tercer enfrentamiento' stamp: 'Ciro 7/5/2021 20:27:19' prior: 50998117!
test19SePuedeJugarElTercerEnfrentamientoComezandoPorManoYGanaPieYGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self malaManoParaTerceraRonda.
	pie _ Jugador con: self buenaManoParaTercerRonda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	ronda jugarTercerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 3.
	self assert: ronda cartasJugadasPorMano size equals: 3.
	self assert: ronda cartasJugadasPorPie size equals: 3.
	self assert: ronda cartasJugadasPorMano equals: self malaManoParaTerceraRonda.
	self assert: ronda cartasJugadasPorPie equals: self buenaManoParaTercerRonda.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 3) equals: pie.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: pie.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento third equals: mano.
	self assert: ronda ganadorDeRonda equals: pie.! !
!RondaDeTrucoTest methodsFor: 'test tercer enfrentamiento' stamp: 'Ciro 7/5/2021 20:27:30' prior: 50998450!
test19SePuedeJugarElTercerEnfrentamientoComezandoPorManoYGanaPieYGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self malaManoParaTerceraRonda.
	pie _ Jugador con: self buenaManoParaTercerRondaComenzandoPorPie.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	ronda jugarTercerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 3.
	self assert: ronda cartasJugadasPorMano size equals: 3.
	self assert: ronda cartasJugadasPorPie size equals: 3.
	self assert: ronda cartasJugadasPorMano equals: self malaManoParaTerceraRonda.
	self assert: ronda cartasJugadasPorPie equals: self buenaManoParaTercerRondaComenzandoPorPie.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 3) equals: pie.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: pie.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento third equals: mano.
	self assert: ronda ganadorDeRonda equals: pie.! !
!RondaDeTrucoTest methodsFor: 'test tercer enfrentamiento' stamp: 'Ciro 7/5/2021 20:27:35' prior: 50998486!
test19SePuedeJugarElTercerEnfrentamientoComezandoPorManoYGanaPieYGanaLaRonda

	| ronda mano pie |
	
	mano _ Jugador con: self malaManoParaTerceraRondaComenzandoPorPie.
	pie _ Jugador con: self buenaManoParaTercerRondaComenzandoPorPie.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	ronda jugarTercerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 3.
	self assert: ronda cartasJugadasPorMano size equals: 3.
	self assert: ronda cartasJugadasPorPie size equals: 3.
	self assert: ronda cartasJugadasPorMano equals: self malaManoParaTerceraRondaComenzandoPorPie.
	self assert: ronda cartasJugadasPorPie equals: self buenaManoParaTercerRondaComenzandoPorPie.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 3) equals: pie.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: pie.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento third equals: mano.
	self assert: ronda ganadorDeRonda equals: pie.! !

!testRun: #RondaDeTrucoTest #test19SePuedeJugarElTercerEnfrentamientoComezandoPorManoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:27:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 20:27:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 20:27:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 20:27:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 20:27:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 20:27:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 20:27:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:27:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:27:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 20:27:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 20:27:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 20:27:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 20:27:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 20:27:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoComanzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:27:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoComezandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:27:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores stamp: 'Ciro 7/5/2021 20:27:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador stamp: 'Ciro 7/5/2021 20:27:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test18SePuedeJugarElTercerEnfrentamientoComanzandoPorPieYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:27:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test19SePuedeJugarElTercerEnfrentamientoComezandoPorManoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:27:36'!
PASSED!

----SNAPSHOT----(5 July 2021 20:32:44) CuisUniversity-4532.image priorSource: 21238620!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 20:44:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 20:44:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 20:44:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 20:44:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 20:44:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 20:44:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:44:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:44:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 20:44:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 20:44:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 20:44:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 20:44:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 20:44:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoComanzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:44:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoComezandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:44:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores stamp: 'Ciro 7/5/2021 20:44:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador stamp: 'Ciro 7/5/2021 20:44:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test18SePuedeJugarElTercerEnfrentamientoComanzandoPorPieYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:44:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test19SePuedeJugarElTercerEnfrentamientoComezandoPorManoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:44:19'!
PASSED!

!classRemoval: #Transference stamp: 'Ciro 7/5/2021 20:44:51'!
Object subclass: #Transference
	instanceVariableNames: 'transferenceWithdrawLeg transferenceDepositLeg value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferNet stamp: 'Ciro 7/5/2021 20:44:52'!
Report subclass: #TransferNet
	instanceVariableNames: 'transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountSummary stamp: 'Ciro 7/5/2021 20:44:52'!
Report subclass: #AccountSummary
	instanceVariableNames: 'summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Report stamp: 'Ciro 7/5/2021 20:44:52'!
Object subclass: #Report
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PortfolioTree stamp: 'Ciro 7/5/2021 20:44:52'!
PortfolioReport subclass: #PortfolioTree
	instanceVariableNames: 'tree'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PortfolioSummaryTree stamp: 'Ciro 7/5/2021 20:44:53'!
PortfolioReport subclass: #PortfolioSummaryTree
	instanceVariableNames: 'summaryTree'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PortfolioReport stamp: 'Ciro 7/5/2021 20:44:53'!
Object subclass: #PortfolioReport
	instanceVariableNames: 'account portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Withdraw stamp: 'Ciro 7/5/2021 20:44:53'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferenceWithdrawLeg stamp: 'Ciro 7/5/2021 20:44:54'!
TransferenceLeg subclass: #TransferenceWithdrawLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferenceDepositLeg stamp: 'Ciro 7/5/2021 20:44:54'!
TransferenceLeg subclass: #TransferenceDepositLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferenceLeg stamp: 'Ciro 7/5/2021 20:44:54'!
AccountTransaction subclass: #TransferenceLeg
	instanceVariableNames: 'transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Deposit stamp: 'Ciro 7/5/2021 20:44:54'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountTransaction stamp: 'Ciro 7/5/2021 20:44:55'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccount stamp: 'Ciro 7/5/2021 20:44:55'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Portfolio stamp: 'Ciro 7/5/2021 20:44:55'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Account stamp: 'Ciro 7/5/2021 20:44:56'!
Object subclass: #Account
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferenceTest stamp: 'Ciro 7/5/2021 20:44:56'!
TestCase subclass: #TransferenceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReportTest stamp: 'Ciro 7/5/2021 20:44:56'!
TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccountTest stamp: 'Ciro 7/5/2021 20:44:57'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PortfolioTest stamp: 'Ciro 7/5/2021 20:44:57'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PortfolioReportTest stamp: 'Ciro 7/5/2021 20:44:57'!
TestCase subclass: #PortfolioReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----End fileIn of C:\Users\cirob\Documents\Facultad\2021\1erCuatri\Inge1\Cuis\RepoDocenetes\2021-1c\18-Portfolio 2\Portfolio2-Solucion.st----!

!classRemoval: #West stamp: 'Ciro 7/5/2021 20:45:27'!
MarsRoverHeading subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classRemoval: #South stamp: 'Ciro 7/5/2021 20:45:27'!
MarsRoverHeading subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classRemoval: #North stamp: 'Ciro 7/5/2021 20:45:28'!
MarsRoverHeading subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classRemoval: #East stamp: 'Ciro 7/5/2021 20:45:28'!
MarsRoverHeading subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classRemoval: #MarsRoverHeading stamp: 'Ciro 7/5/2021 20:45:28'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classRemoval: #MarsRover stamp: 'Ciro 7/5/2021 20:45:29'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

!classRemoval: #MarsRoverTest stamp: 'Ciro 7/5/2021 20:45:29'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Exercise'!

----End fileIn of C:\Users\cirob\Documents\Facultad\2021\1erCuatri\Inge1\Cuis\RepoDocenetes\2021-1c\19-MarsRover-El regreso\MarsRover-WithHeading.st----!

!classRemoval: #MarsRoverHeadingWest stamp: 'Ciro 7/5/2021 20:45:53'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingSouth stamp: 'Ciro 7/5/2021 20:45:53'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingNorth stamp: 'Ciro 7/5/2021 20:45:53'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingEast stamp: 'Ciro 7/5/2021 20:45:54'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeading stamp: 'Ciro 7/5/2021 20:45:54'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRover stamp: 'Ciro 7/5/2021 20:45:54'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverTest stamp: 'Ciro 7/5/2021 20:45:55'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

----End fileIn of C:\Users\cirob\Documents\Facultad\2021\1erCuatri\Inge1\Cuis\RepoDocenetes\2021-1c\19-MarsRover-El regreso\MarsRover-Observer.st----!

!classRemoval: #Transfer stamp: 'Ciro 7/5/2021 20:46:15'!
Object subclass: #Transfer
	instanceVariableNames: 'withdrawLeg depositLeg value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Solucion'!

!classRemoval: #AccountTransferNet stamp: 'Ciro 7/5/2021 20:46:16'!
TransactionVisitor subclass: #AccountTransferNet
	instanceVariableNames: 'account transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Solucion'!

!classRemoval: #AccountSummary stamp: 'Ciro 7/5/2021 20:46:16'!
TransactionVisitor subclass: #AccountSummary
	instanceVariableNames: 'account lines'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Solucion'!

!classRemoval: #TransactionVisitor stamp: 'Ciro 7/5/2021 20:46:16'!
Object subclass: #TransactionVisitor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Solucion'!

!classRemoval: #PortfolioTreePrinter stamp: 'Ciro 7/5/2021 20:46:17'!
AccountVisitor subclass: #PortfolioTreePrinter
	instanceVariableNames: 'portfolio lines spaces'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Solucion'!

!classRemoval: #PortfolioSummary stamp: 'Ciro 7/5/2021 20:46:17'!
AccountVisitor subclass: #PortfolioSummary
	instanceVariableNames: 'portfolio lines spaces'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Solucion'!

!classRemoval: #AccountVisitor stamp: 'Ciro 7/5/2021 20:46:17'!
Object subclass: #AccountVisitor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Solucion'!

!classRemoval: #Withdraw stamp: 'Ciro 7/5/2021 20:46:17'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Solucion'!

!classRemoval: #TransferWithdraw stamp: 'Ciro 7/5/2021 20:46:18'!
TransferLeg subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Solucion'!

!classRemoval: #TransferDeposit stamp: 'Ciro 7/5/2021 20:46:18'!
TransferLeg subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Solucion'!

!classRemoval: #TransferLeg stamp: 'Ciro 7/5/2021 20:46:18'!
AccountTransaction subclass: #TransferLeg
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Solucion'!

!classRemoval: #Deposit stamp: 'Ciro 7/5/2021 20:46:19'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Solucion'!

!classRemoval: #AccountTransaction stamp: 'Ciro 7/5/2021 20:46:19'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Solucion'!

!classRemoval: #ReceptiveAccount stamp: 'Ciro 7/5/2021 20:46:19'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Solucion'!

!classRemoval: #Portfolio stamp: 'Ciro 7/5/2021 20:46:19'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Solucion'!

!classRemoval: #Account stamp: 'Ciro 7/5/2021 20:46:20'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio2-Solucion'!

----End fileIn of C:\Users\cirob\Documents\Facultad\2021\1erCuatri\Inge1\Cuis\RepoDocenetes\2021-1c\18-Portfolio 2\Portfolio2-Solucion.st----!

----SNAPSHOT----(5 July 2021 20:47:05) CuisUniversity-4532.image priorSource: 21343942!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 20:47:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 20:47:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 20:47:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 20:47:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 20:47:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 20:47:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:47:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:47:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 20:47:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 20:47:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 20:47:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 20:47:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 20:47:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoComanzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:47:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoComezandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:47:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores stamp: 'Ciro 7/5/2021 20:47:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador stamp: 'Ciro 7/5/2021 20:47:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test18SePuedeJugarElTercerEnfrentamientoComanzandoPorPieYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:47:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test19SePuedeJugarElTercerEnfrentamientoComezandoPorManoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:47:09'!
PASSED!

Enfrentamiento subclass: #EnfrentamientoComenzandoPorMano
	instanceVariableNames: 'jugadorInicial jugadorSiguiente numeroDeEnfrentamiento ganador'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

Enfrentamiento subclass: #EnfrentamientoComenzandoPorMano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #EnfrentamientoComenzandoPorMano category: 'ISW1-2021-1C-2doParcial' stamp: 'Ciro 7/5/2021 20:49:41'!
Enfrentamiento subclass: #EnfrentamientoComenzandoPorMano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

Enfrentamiento subclass: #EnfrentamientoComenzandoPorPie
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #EnfrentamientoComenzandoPorPie category: 'ISW1-2021-1C-2doParcial' stamp: 'Ciro 7/5/2021 20:49:44'!
Enfrentamiento subclass: #EnfrentamientoComenzandoPorPie
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'jugar' stamp: 'Ciro 7/5/2021 20:50:00' prior: 50996277!
jugarEnfrentamientoEmpezandoPorMano

	| enfrentamiento |
	
	numeroDeEnfrentamientos _ numeroDeEnfrentamientos + 1.
	enfrentamiento _ EnfrentamientoComenzandoPorMano numero: numeroDeEnfrentamientos con: mano yCon: pie.
	enfrentamientos add: (enfrentamiento jugar)

	! !
!RondaDeTruco methodsFor: 'jugar' stamp: 'Ciro 7/5/2021 20:50:07' prior: 50996266!
jugarEnfrentamientoEmpezandoPorPie

	| enfrentamiento |
	
	numeroDeEnfrentamientos _ numeroDeEnfrentamientos + 1.
	enfrentamiento _ EnfrentamientoComenzandoPorPie numero: numeroDeEnfrentamientos con: pie yCon: mano.
	enfrentamientos add: (enfrentamiento jugar)

	! !
!RondaDeTruco methodsFor: 'jugar' stamp: 'Ciro 7/5/2021 20:51:23' prior: 51002707!
jugarEnfrentamientoEmpezandoPorMano

	| enfrentamiento |
	
	numeroDeEnfrentamientos _ numeroDeEnfrentamientos + 1.
	enfrentamiento _ Enfrentamiento numero: numeroDeEnfrentamientos con: mano yCon: pie.
	enfrentamientos add: (enfrentamiento jugar)

	! !
!RondaDeTruco methodsFor: 'jugar' stamp: 'Ciro 7/5/2021 20:51:26' prior: 51002718!
jugarEnfrentamientoEmpezandoPorPie

	| enfrentamiento |
	
	numeroDeEnfrentamientos _ numeroDeEnfrentamientos + 1.
	enfrentamiento _ Enfrentamiento numero: numeroDeEnfrentamientos con: pie yCon: mano.
	enfrentamientos add: (enfrentamiento jugar)

	! !

!classRemoval: #EnfrentamientoComenzandoPorMano stamp: 'Ciro 7/5/2021 20:51:35'!
Enfrentamiento subclass: #EnfrentamientoComenzandoPorMano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classRemoval: #EnfrentamientoComenzandoPorPie stamp: 'Ciro 7/5/2021 20:51:38'!
Enfrentamiento subclass: #EnfrentamientoComenzandoPorPie
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

Jugador subclass: #Mano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Mano category: 'ISW1-2021-1C-2doParcial' stamp: 'Ciro 7/5/2021 20:51:53'!
Jugador subclass: #Mano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

Jugador subclass: #Pie
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Pie category: 'ISW1-2021-1C-2doParcial' stamp: 'Ciro 7/5/2021 20:51:56'!
Jugador subclass: #Pie
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'tests creacion' stamp: 'Ciro 7/5/2021 20:52:29' prior: 50990102!
test01CrearRondaCon2Jugadores

	| ronda mano pie |
	
	mano _ Mano con: self buenaMano.
	pie _ Pie con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	self assert: ronda mano equals: mano.
	self assert: ronda pie equals: pie! !
!RondaDeTrucoTest methodsFor: 'tests creacion' stamp: 'Ciro 7/5/2021 20:52:32' prior: 50990244!
test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas

	| mano pie |
	
	mano _ Mano con: self manoIncorrecta.
	pie _ Jugador con: self buenaMano.
	self
		should: [ RondaDeTruco con: mano yCon: pie ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: RondaDeTruco jugadorNoTiene3CartasDescripcionDeError ]! !
!RondaDeTrucoTest methodsFor: 'tests creacion' stamp: 'Ciro 7/5/2021 20:52:34' prior: 51002801!
test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas

	| mano pie |
	
	mano _ Mano con: self manoIncorrecta.
	pie _ Pie con: self buenaMano.
	self
		should: [ RondaDeTruco con: mano yCon: pie ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: RondaDeTruco jugadorNoTiene3CartasDescripcionDeError ]! !
!RondaDeTrucoTest methodsFor: 'tests creacion' stamp: 'Ciro 7/5/2021 20:52:39' prior: 50990279!
test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas

	| mano pie |
	
	mano _ Mano con: self buenaMano.
	pie _ Pie con: self manoIncorrecta.
	self
		should: [ RondaDeTruco con: mano yCon: pie ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: RondaDeTruco jugadorNoTiene3CartasDescripcionDeError ]! !
!RondaDeTrucoTest methodsFor: 'test primer enfrentamiento' stamp: 'Ciro 7/5/2021 20:52:49' prior: 50990746!
test04SePuedeJugarElPrimerEnfrentamientoYGanaMano

	| ronda mano pie |
	
	mano _ Mano con: self buenaMano.
	pie _ Pie con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 1.
	self assert: ronda cartasJugadasPorMano size equals: 1.
	self assert: ronda cartasJugadasPorPie size equals: 1.
	self assert: ronda cartasJugadasPorMano first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorPie first equals: self malaMano first.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 1) equals: mano.! !
!RondaDeTrucoTest methodsFor: 'test primer enfrentamiento' stamp: 'Ciro 7/5/2021 20:52:52' prior: 50991850!
test05SePuedeJugarElPrimerEnfrentamientoYGanaPie

	| ronda mano pie |
	
	mano _ Mano con: self malaMano.
	pie _ Jugador con: self buenaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 1.
	self assert: ronda cartasJugadasPorMano size equals: 1.
	self assert: ronda cartasJugadasPorPie size equals: 1.
	self assert: ronda cartasJugadasPorMano first equals: self malaMano first.
	self assert: ronda cartasJugadasPorPie first equals: self buenaMano first.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 1) equals: pie.! !
!RondaDeTrucoTest methodsFor: 'test primer enfrentamiento' stamp: 'Ciro 7/5/2021 20:52:54' prior: 51002870!
test05SePuedeJugarElPrimerEnfrentamientoYGanaPie

	| ronda mano pie |
	
	mano _ Mano con: self malaMano.
	pie _ Pie con: self buenaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 1.
	self assert: ronda cartasJugadasPorMano size equals: 1.
	self assert: ronda cartasJugadasPorPie size equals: 1.
	self assert: ronda cartasJugadasPorMano first equals: self malaMano first.
	self assert: ronda cartasJugadasPorPie first equals: self buenaMano first.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 1) equals: pie.! !
!RondaDeTrucoTest methodsFor: 'test primer enfrentamiento' stamp: 'Ciro 7/5/2021 20:53:00' prior: 50993072!
test06SePuedeJugarElPrimerEnfrentamientoYHayParda

	| ronda mano pie |
	
	mano _ Mano con: self malaMano.
	pie _ Pie con: self malaManoPardaPeroGanaSegunda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 1.
	self assert: ronda cartasJugadasPorMano size equals: 1.
	self assert: ronda cartasJugadasPorPie size equals: 1.
	self assert: ronda cartasJugadasPorMano first equals: self malaMano first.
	self assert: ronda cartasJugadasPorPie first equals: self malaManoPardaPeroGanaSegunda first.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 1) equals: (Enfrentamiento parda).! !
!RondaDeTruco methodsFor: 'jugar' stamp: 'Ciro 7/5/2021 20:54:54' prior: 50997397!
jugarEnfrentamiento

	(enfrentamientos at: numeroDeEnfrentamientos) ganador = (Enfrentamiento sinGanador) ifTrue: [self jugarEnfrentamientoEmpezandoPorMano ]
		ifFalse: [self jugarEnfrentamientoEmpezandoPorMano].

	! !
!RondaDeTruco methodsFor: 'jugar' stamp: 'Ciro 7/5/2021 20:55:10' prior: 51002940!
jugarEnfrentamiento

	(enfrentamientos at: numeroDeEnfrentamientos) ganador = (Enfrentamiento parda) ifTrue: [self jugarEnfrentamientoEmpezandoPorMano ]
		ifFalse: [self jugarEnfrentamientoEmpezandoPorMano].

	! !
!RondaDeTruco methodsFor: 'jugar' stamp: 'Ciro 7/5/2021 20:56:12' prior: 51002950!
jugarEnfrentamiento

	| ganador |
	ganador _ (enfrentamientos at: numeroDeEnfrentamientos) ganador.
	ganador = (Enfrentamiento parda) ifTrue: [self jugarEnfrentamientoEmpezandoPorMano ].
	
	ganador comenzaElSiguienteEnfrentamiento.

	! !
!RondaDeTruco methodsFor: 'jugar' stamp: 'Ciro 7/5/2021 20:56:18' prior: 51002960!
jugarEnfrentamiento

	| ganador |
	ganador _ (enfrentamientos at: numeroDeEnfrentamientos) ganador.
	ganador = (Enfrentamiento parda) ifTrue: [self jugarEnfrentamientoEmpezandoPorMano ].
	
	ganador jugaElSiguienteEnfrentamiento

	! !
!RondaDeTruco methodsFor: 'jugar' stamp: 'Ciro 7/5/2021 20:56:23' prior: 51002971!
jugarEnfrentamiento

	| ganador |
	ganador _ (enfrentamientos at: numeroDeEnfrentamientos) ganador.
	ganador = (Enfrentamiento parda) ifTrue: [self jugarEnfrentamientoEmpezandoPorMano ].
	
	ganador comenzaElSiguienteEnfrentamiento

	! !
!RondaDeTruco methodsFor: 'jugar' stamp: 'Ciro 7/5/2021 20:56:26' prior: 51002981!
jugarEnfrentamiento

	| ganador |
	
	ganador _ (enfrentamientos at: numeroDeEnfrentamientos) ganador.
	ganador = (Enfrentamiento parda) ifTrue: [self jugarEnfrentamientoEmpezandoPorMano ].
	
	ganador comenzaElSiguienteEnfrentamiento

	! !
!Jugador methodsFor: 'cartas' stamp: 'Ciro 7/5/2021 20:56:45'!
comenzaElSiguienteEnfrentamiento

	self subclassResponsibility 
	
	! !
!Jugador methodsFor: 'cartas' stamp: 'Ciro 7/5/2021 20:57:18'!
comenzaElSiguienteEnfrentamientoDe: unaRonda

	self subclassResponsibility 
	
	! !

!methodRemoval: Jugador #comenzaElSiguienteEnfrentamiento stamp: 'Ciro 7/5/2021 20:57:23'!
comenzaElSiguienteEnfrentamiento

	self subclassResponsibility 
	
	!
!RondaDeTruco methodsFor: 'jugar' stamp: 'Ciro 7/5/2021 20:57:31' prior: 51002991!
jugarEnfrentamiento

	| ganador |
	
	ganador _ (enfrentamientos at: numeroDeEnfrentamientos) ganador.
	ganador = (Enfrentamiento parda) ifTrue: [self jugarEnfrentamientoEmpezandoPorMano ].
	
	ganador comenzaElSiguienteEnfrentamientoDe: self

	! !
!Mano methodsFor: 'nil' stamp: 'Ciro 7/5/2021 20:57:53' overrides: 51003006!
comenzaElSiguienteEnfrentamientoDe: unaRonda

	unaRonda jugarEnfrentamientoEmpezandoPorMano 
	! !
!Pie methodsFor: 'no messages' stamp: 'Ciro 7/5/2021 20:58:00' overrides: 51003006!
comenzaElSiguienteEnfrentamientoDe: unaRonda

	unaRonda jugarEnfrentamientoEmpezandoPorPie! !

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 20:58:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 20:58:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 20:58:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 20:58:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 20:58:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 20:58:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:58:03'!
ERROR!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:58:03'!
ERROR!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 20:58:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 20:58:03'!
ERROR!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 20:58:03'!
ERROR!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 20:58:03'!
ERROR!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 20:58:03'!
ERROR!

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoComanzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:58:03'!
ERROR!

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoComezandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:58:03'!
ERROR!

!testRun: #RondaDeTrucoTest #test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores stamp: 'Ciro 7/5/2021 20:58:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador stamp: 'Ciro 7/5/2021 20:58:03'!
ERROR!

!testRun: #RondaDeTrucoTest #test18SePuedeJugarElTercerEnfrentamientoComanzandoPorPieYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:58:03'!
ERROR!

!testRun: #RondaDeTrucoTest #test19SePuedeJugarElTercerEnfrentamientoComezandoPorManoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:58:03'!
ERROR!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:58:43'!
ERROR!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:58:43'!
ERROR!
!RondaDeTrucoTest methodsFor: 'test segundo enfrentamiento' stamp: 'Ciro 7/5/2021 20:59:45' prior: 50996564!
test07SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRonda

	| ronda mano pie |
	
	mano _ Mano con: self buenaMano.
	pie _ Pie con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorMano second equals: self buenaMano second.
	self assert: ronda cartasJugadasPorPie first equals: self malaMano first.
	self assert: ronda cartasJugadasPorPie second equals: self malaMano second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: mano.
	self assert: ronda ganadorDeRonda equals: mano.! !
!RondaDeTrucoTest methodsFor: 'test segundo enfrentamiento' stamp: 'Ciro 7/5/2021 20:59:50' prior: 50996718!
test08SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaPieYGanaLaRonda

	| ronda mano pie |
	
	mano _ Mano con: self malaMano.
	pie _ Pie con: self buenaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self malaMano first.
	self assert: ronda cartasJugadasPorMano second equals: self malaMano second.
	self assert: ronda cartasJugadasPorPie first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorPie second equals: self buenaMano second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: pie.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: pie.
	self assert: ronda ganadorDeRonda equals: pie.! !

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:59:52'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 20:59:52'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 20:59:52'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 20:59:52'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 20:59:52'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 20:59:52'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 20:59:52'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:59:52'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:59:52'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 20:59:52'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 20:59:52'!
ERROR!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 20:59:52'!
ERROR!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 20:59:52'!
ERROR!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 20:59:52'!
ERROR!

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoComanzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:59:52'!
ERROR!

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoComezandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:59:52'!
ERROR!

!testRun: #RondaDeTrucoTest #test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores stamp: 'Ciro 7/5/2021 20:59:52'!
PASSED!

!testRun: #RondaDeTrucoTest #test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador stamp: 'Ciro 7/5/2021 20:59:52'!
ERROR!

!testRun: #RondaDeTrucoTest #test18SePuedeJugarElTercerEnfrentamientoComanzandoPorPieYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 20:59:52'!
ERROR!

!testRun: #RondaDeTrucoTest #test19SePuedeJugarElTercerEnfrentamientoComezandoPorManoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 20:59:52'!
ERROR!
!RondaDeTrucoTest methodsFor: 'test segundo enfrentamiento' stamp: 'Ciro 7/5/2021 21:00:00' prior: 50991693!
test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero

	| ronda mano pie |
	
	mano _ Mano con: self malaMano.
	pie _ Pie con: self buenaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	self
		should: [ ronda jugarSegundoEnfrentamiento ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: ronda noSeJugoElEnfrentamientoAnteriorDescripcionDeError ]! !
!RondaDeTrucoTest methodsFor: 'test segundo enfrentamiento' stamp: 'Ciro 7/5/2021 21:00:07' prior: 50996900!
test10SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaManoYNoGanaLaRonda

	| ronda mano pie |
	
	mano _ Mano con: self buenaManoParaTercerRonda.
	pie _ Pie con: self malaManoParaTerceraRonda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self buenaManoParaTercerRonda first.
	self assert: ronda cartasJugadasPorMano second equals: self buenaManoParaTercerRonda second.
	self assert: ronda cartasJugadasPorPie first equals: self malaManoParaTerceraRonda first.
	self assert: ronda cartasJugadasPorPie second equals: self malaManoParaTerceraRonda second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: pie.
	self assert: ronda ganadorDeRonda equals: RondaDeTruco sinGanador.! !
!RondaDeTrucoTest methodsFor: 'test segundo enfrentamiento' stamp: 'Ciro 7/5/2021 21:00:13' prior: 50997052!
test11SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYNoGanaLaRonda

	| ronda mano pie |
	
	mano _ Mano con: self malaManoParaTerceraRonda.
	pie _ Pie con: self buenaManoParaTercerRonda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self malaManoParaTerceraRonda first.
	self assert: ronda cartasJugadasPorMano second equals: self malaManoParaTerceraRonda second.
	self assert: ronda cartasJugadasPorPie first equals: self buenaManoParaTercerRonda first.
	self assert: ronda cartasJugadasPorPie second equals: self buenaManoParaTercerRonda second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: pie.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: mano.
	self assert: ronda ganadorDeRonda equals: RondaDeTruco sinGanador.! !
!RondaDeTrucoTest methodsFor: 'test segundo enfrentamiento' stamp: 'Ciro 7/5/2021 21:00:17' prior: 50997344!
test12SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera

	| ronda mano pie |
	
	mano _ Mano con: self malaManoPardaPeroGanaSegunda .
	pie _ Pie con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self malaManoPardaPeroGanaSegunda first.
	self assert: ronda cartasJugadasPorMano second equals: self malaManoPardaPeroGanaSegunda second.
	self assert: ronda cartasJugadasPorPie first equals: self malaMano first.
	self assert: ronda cartasJugadasPorPie second equals: self malaMano second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: mano.
	self assert: ronda ganadorDeRonda equals: mano.! !
!RondaDeTrucoTest methodsFor: 'test segundo enfrentamiento' stamp: 'Ciro 7/5/2021 21:00:23' prior: 50997621!
test13SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYGanaLaRondaPorPardarLaPrimera

	| ronda mano pie |
	
	mano _ Mano con: self malaMano.
	pie _ Pie con: self malaManoPardaPeroGanaSegunda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self malaMano first.
	self assert: ronda cartasJugadasPorMano second equals: self malaMano second.
	self assert: ronda cartasJugadasPorPie first equals: self malaManoPardaPeroGanaSegunda first.
	self assert: ronda cartasJugadasPorPie second equals: self malaManoPardaPeroGanaSegunda second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: pie.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: mano.
	self assert: ronda ganadorDeRonda equals: pie.! !
!RondaDeTrucoTest methodsFor: 'test tercer enfrentamiento' stamp: 'Ciro 7/5/2021 21:00:29' prior: 50997929!
test14SePuedeJugarElTercerEnfrentamientoComanzandoPorManoYGanaManoYGanaLaRonda

	| ronda mano pie |
	
	mano _ Mano con: self buenaManoParaTercerRonda .
	pie _ Pie con: self malaManoParaTerceraRonda .
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	ronda jugarTercerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 3.
	self assert: ronda cartasJugadasPorMano size equals: 3.
	self assert: ronda cartasJugadasPorPie size equals: 3.
	self assert: ronda cartasJugadasPorMano equals: self buenaManoParaTercerRonda.
	self assert: ronda cartasJugadasPorPie equals: self malaManoParaTerceraRonda.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 3) equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: pie.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento third equals: mano.
	self assert: ronda ganadorDeRonda equals: mano.! !
!RondaDeTrucoTest methodsFor: 'test tercer enfrentamiento' stamp: 'Ciro 7/5/2021 21:00:35' prior: 50997966!
test15SePuedeJugarElTercerEnfrentamientoComezandoPorPieYGanaPieYGanaLaRonda

	| ronda mano pie |
	
	mano _ Mano con: self malaManoParaTerceraRonda.
	pie _ Pie con: self buenaManoParaTercerRonda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	ronda jugarTercerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 3.
	self assert: ronda cartasJugadasPorMano size equals: 3.
	self assert: ronda cartasJugadasPorPie size equals: 3.
	self assert: ronda cartasJugadasPorMano equals: self malaManoParaTerceraRonda.
	self assert: ronda cartasJugadasPorPie equals: self buenaManoParaTercerRonda.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 3) equals: pie.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento third equals: pie.
	self assert: ronda ganadorDeRonda equals: pie.! !
!RondaDeTrucoTest methodsFor: 'test tercer enfrentamiento' stamp: 'Ciro 7/5/2021 21:00:40' prior: 50993941!
test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores

	| ronda mano pie |
	
	mano _ Mano con: self malaManoParaTerceraRonda.
	pie _ Pie con: self buenaManoParaTercerRonda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	self
		should: [ ronda jugarTercerEnfrentamiento ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: ronda noSeJugoElEnfrentamientoAnteriorDescripcionDeError ]! !
!RondaDeTrucoTest methodsFor: 'test tercer enfrentamiento' stamp: 'Ciro 7/5/2021 21:00:46' prior: 50994134!
test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador

	| ronda mano pie |
	
	mano _ Mano con: self buenaMano.
	pie _ Pie con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento .
	ronda jugarSegundoEnfrentamiento .
	self
		should: [ ronda jugarTercerEnfrentamiento ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: ronda yaHayGanadorDescripcionDeError.
			self assert: ronda numeroDeEnfrentamiento equals: 2.
			self assert: ronda cartasJugadasPorMano size equals: 2.
			self assert: ronda cartasJugadasPorPie size equals: 2]! !
!RondaDeTrucoTest methodsFor: 'test tercer enfrentamiento' stamp: 'Ciro 7/5/2021 21:00:52' prior: 50998323!
test18SePuedeJugarElTercerEnfrentamientoComanzandoPorPieYGanaManoYGanaLaRonda

	| ronda mano pie |
	
	mano _ Mano con: self buenaManoParaTercerRondaComenzandoPorPie .
	pie _ Pie con: self malaManoParaTerceraRondaComenzandoPorPie .
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	ronda jugarTercerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 3.
	self assert: ronda cartasJugadasPorMano size equals: 3.
	self assert: ronda cartasJugadasPorPie size equals: 3.
	self assert: ronda cartasJugadasPorMano equals: self buenaManoParaTercerRondaComenzandoPorPie.
	self assert: ronda cartasJugadasPorPie equals: self malaManoParaTerceraRondaComenzandoPorPie.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 3) equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento third equals: pie.
	self assert: ronda ganadorDeRonda equals: mano.! !
!RondaDeTrucoTest methodsFor: 'test tercer enfrentamiento' stamp: 'Ciro 7/5/2021 21:00:57' prior: 50998523!
test19SePuedeJugarElTercerEnfrentamientoComezandoPorManoYGanaPieYGanaLaRonda

	| ronda mano pie |
	
	mano _ Mano con: self malaManoParaTerceraRondaComenzandoPorPie.
	pie _ Pie con: self buenaManoParaTercerRondaComenzandoPorPie.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	ronda jugarTercerEnfrentamiento.
	self assert: ronda numeroDeEnfrentamiento equals: 3.
	self assert: ronda cartasJugadasPorMano size equals: 3.
	self assert: ronda cartasJugadasPorPie size equals: 3.
	self assert: ronda cartasJugadasPorMano equals: self malaManoParaTerceraRondaComenzandoPorPie.
	self assert: ronda cartasJugadasPorPie equals: self buenaManoParaTercerRondaComenzandoPorPie.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 3) equals: pie.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: pie.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento third equals: mano.
	self assert: ronda ganadorDeRonda equals: pie.! !

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 21:01:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 21:01:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 21:01:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 21:01:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 21:01:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 21:01:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:01:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:01:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 21:01:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 21:01:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 21:01:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 21:01:00'!
ERROR!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 21:01:00'!
ERROR!

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoComanzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:01:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoComezandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:01:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores stamp: 'Ciro 7/5/2021 21:01:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador stamp: 'Ciro 7/5/2021 21:01:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test18SePuedeJugarElTercerEnfrentamientoComanzandoPorPieYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:01:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test19SePuedeJugarElTercerEnfrentamientoComezandoPorManoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:01:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 21:01:21'!
ERROR!
!RondaDeTruco methodsFor: 'jugar' stamp: 'Ciro 7/5/2021 21:02:30' prior: 51003017!
jugarEnfrentamiento

	| ganador |
	
	ganador _ (enfrentamientos at: numeroDeEnfrentamientos) ganador.
	ganador = (Enfrentamiento parda) ifTrue: [^ self jugarEnfrentamientoEmpezandoPorMano ].
	
	ganador comenzaElSiguienteEnfrentamientoDe: self

	! !

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 21:02:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 21:02:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 21:02:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 21:02:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 21:02:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 21:02:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:02:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:02:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 21:02:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 21:02:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 21:02:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 21:02:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 21:02:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoComanzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:02:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoComezandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:02:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores stamp: 'Ciro 7/5/2021 21:02:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador stamp: 'Ciro 7/5/2021 21:02:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test18SePuedeJugarElTercerEnfrentamientoComanzandoPorPieYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:02:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test19SePuedeJugarElTercerEnfrentamientoComezandoPorManoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:02:32'!
PASSED!

----SNAPSHOT----(5 July 2021 21:03:18) CuisUniversity-4532.image priorSource: 21469879!
!RondaDeTruco methodsFor: 'para test' stamp: 'Ciro 7/5/2021 21:04:35' prior: 50993460!
ganadorDeRonda

	| ganadores numeroMano numeroPie |
	
	self verificarSiHuboParda .
	
	ganadores _ OrderedCollection new.
	enfrentamientos do: [ :unEnfrentamiento | ganadores add: (unEnfrentamiento ganador)].
	numeroMano _ ganadores occurrencesOf: mano.
	numeroPie _ ganadores occurrencesOf: pie.
	
	numeroMano = 2 ifTrue: [ ^ mano].
	numeroPie = 2 ifTrue: [ ^ pie].
	
	^ RondaDeTruco sinGanador.
	
	
	
	! !
!RondaDeTruco methodsFor: 'para test' stamp: 'Ciro 7/5/2021 21:04:36' prior: 51003848!
ganadorDeRonda

	| ganadores numeroMano numeroPie |
	
	self verificarSiHuboParda.
	
	ganadores _ OrderedCollection new.
	enfrentamientos do: [ :unEnfrentamiento | ganadores add: (unEnfrentamiento ganador)].
	numeroMano _ ganadores occurrencesOf: mano.
	numeroPie _ ganadores occurrencesOf: pie.
	
	numeroMano = 2 ifTrue: [ ^ mano].
	numeroPie = 2 ifTrue: [ ^ pie].
	
	^ RondaDeTruco sinGanador.
	
	
	
	! !
!RondaDeTruco methodsFor: 'verificacion' stamp: 'Ciro 7/5/2021 21:04:43' prior: 50993399!
verificarSiHuboParda

	^ (enfrentamientos at: 1) ganador = Enfrentamiento parda ifTrue: [self hayGanadorPorParda: ((enfrentamientos at: 2) ganador)]
	
	! !

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 21:04:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 21:04:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 21:04:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 21:04:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 21:04:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 21:04:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:04:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:04:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 21:04:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 21:04:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 21:04:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 21:04:46'!
FAILURE!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 21:04:46'!
FAILURE!

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoComanzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:04:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoComezandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:04:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores stamp: 'Ciro 7/5/2021 21:04:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador stamp: 'Ciro 7/5/2021 21:04:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test18SePuedeJugarElTercerEnfrentamientoComanzandoPorPieYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:04:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test19SePuedeJugarElTercerEnfrentamientoComezandoPorManoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:04:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 21:04:53'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 21:04:53'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 21:04:53'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 21:04:53'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 21:04:53'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 21:04:53'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:04:53'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:04:53'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 21:04:53'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 21:04:53'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 21:04:53'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 21:04:53'!
FAILURE!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 21:04:53'!
FAILURE!

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoComanzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:04:53'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoComezandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:04:53'!
PASSED!

!testRun: #RondaDeTrucoTest #test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores stamp: 'Ciro 7/5/2021 21:04:53'!
PASSED!

!testRun: #RondaDeTrucoTest #test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador stamp: 'Ciro 7/5/2021 21:04:53'!
PASSED!

!testRun: #RondaDeTrucoTest #test18SePuedeJugarElTercerEnfrentamientoComanzandoPorPieYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:04:53'!
PASSED!

!testRun: #RondaDeTrucoTest #test19SePuedeJugarElTercerEnfrentamientoComezandoPorManoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:04:53'!
PASSED!
!RondaDeTruco methodsFor: 'verificacion' stamp: 'Ciro 7/5/2021 21:05:40' prior: 51003880!
verificarSiHuboParda

	^ (enfrentamientos at: 1) ganador = Enfrentamiento parda ifTrue: [ ^ self hayGanadorPorParda: ((enfrentamientos at: 2) ganador)]
	
	! !

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 21:05:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 21:05:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 21:05:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 21:05:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 21:05:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 21:05:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:05:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:05:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 21:05:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 21:05:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 21:05:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 21:05:43'!
FAILURE!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 21:05:43'!
FAILURE!

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoComanzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:05:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoComezandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:05:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores stamp: 'Ciro 7/5/2021 21:05:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador stamp: 'Ciro 7/5/2021 21:05:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test18SePuedeJugarElTercerEnfrentamientoComanzandoPorPieYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:05:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test19SePuedeJugarElTercerEnfrentamientoComezandoPorManoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:05:43'!
PASSED!
!RondaDeTruco methodsFor: 'para test' stamp: 'Ciro 7/5/2021 21:05:57' prior: 51003864!
ganadorDeRonda

	| ganadores numeroMano numeroPie |
	
	self verificarSiHuboParda.
	
	ganadores _ OrderedCollection new.
	enfrentamientos do: [ :unEnfrentamiento | ganadores add: (unEnfrentamiento ganador)].
	numeroMano _ ganadores occurrencesOf: mano.
	numeroPie _ ganadores occurrencesOf: pie.
	
	numeroMano = 2 ifTrue: [ ^ mano].
	numeroPie = 2 ifTrue: [ ^ pie].
	
	^ RondaDeTruco sinGanador.
	
	
	
	! !
!RondaDeTruco methodsFor: 'verificacion' stamp: 'Ciro 7/5/2021 21:06:13' prior: 51004056!
verificarSiHuboParda

	^ ((enfrentamientos at: 1) ganador = Enfrentamiento parda ifTrue: [ ^ self hayGanadorPorParda: ((enfrentamientos at: 2) ganador)])
	
	! !

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 21:06:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 21:06:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 21:06:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 21:06:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 21:06:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 21:06:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:06:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:06:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 21:06:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 21:06:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 21:06:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 21:06:21'!
FAILURE!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 21:06:21'!
FAILURE!

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoComanzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:06:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoComezandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:06:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores stamp: 'Ciro 7/5/2021 21:06:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador stamp: 'Ciro 7/5/2021 21:06:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test18SePuedeJugarElTercerEnfrentamientoComanzandoPorPieYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:06:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test19SePuedeJugarElTercerEnfrentamientoComezandoPorManoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:06:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 21:06:27'!
FAILURE!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 21:06:28'!
FAILURE!
!RondaDeTruco methodsFor: 'verificacion' stamp: 'Ciro 7/5/2021 21:06:44' prior: 51004164!
verificarSiHuboParda

	^ ((enfrentamientos at: 1) ganador = Enfrentamiento parda ifTrue: [ ^ self hayGanadorPorParda: ((enfrentamientos at: 2) ganador)]) value
	
	! !

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 21:06:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 21:06:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 21:06:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 21:06:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 21:06:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 21:06:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:06:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:06:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 21:06:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 21:06:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 21:06:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 21:06:45'!
FAILURE!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 21:06:45'!
FAILURE!

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoComanzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:06:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoComezandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:06:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores stamp: 'Ciro 7/5/2021 21:06:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador stamp: 'Ciro 7/5/2021 21:06:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test18SePuedeJugarElTercerEnfrentamientoComanzandoPorPieYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:06:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test19SePuedeJugarElTercerEnfrentamientoComezandoPorManoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:06:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 21:12:21'!
FAILURE!
!RondaDeTruco methodsFor: 'verificacion' stamp: 'Ciro 7/5/2021 21:14:12' prior: 51004267!
verificarSiHuboParda

	^ (enfrentamientos at: 1) ganador = Enfrentamiento parda ifTrue: [ self hayGanadorPorParda: ((enfrentamientos at: 2) ganador)] value
	
	! !
!RondaDeTruco methodsFor: 'verificacion' stamp: 'Ciro 7/5/2021 21:15:01' prior: 51004365!
verificarSiHuboParda

	^ (enfrentamientos at: 1) ganador = Enfrentamiento parda ifTrue: [ ^ ((enfrentamientos at: 2) ganador)] value
	
	! !
!RondaDeTruco methodsFor: 'verificacion' stamp: 'Ciro 7/5/2021 21:17:11' prior: 51004373!
verificarSiHuboParda

	^ (enfrentamientos at: 1) huboParda ifTrue: [ ^ ((enfrentamientos at: 2) ganador)] value
	
	! !
!Enfrentamiento methodsFor: 'contenido' stamp: 'Ciro 7/5/2021 21:17:30'!
huboParda

	^ ganador = Enfrentamiento parda
	! !
!RondaDeTruco methodsFor: 'verificacion' stamp: 'Ciro 7/5/2021 21:18:51' prior: 51004381!
verificarSiHuboParda

	^ (enfrentamientos at: 1) huboParda ifTrue: [ ^ (enfrentamientos at: 2) ganador] value
	
	! !
!RondaDeTruco methodsFor: 'verificacion' stamp: 'Ciro 7/5/2021 21:18:53' prior: 51004392!
verificarSiHuboParda

	^ (enfrentamientos at: 1) huboParda ifTrue: [ ^ (enfrentamientos at: 2) ganador]
	
	! !
!RondaDeTruco methodsFor: 'verificacion' stamp: 'Ciro 7/5/2021 21:18:56' prior: 51004399!
verificarSiHuboParda

	^ (enfrentamientos at: 1) huboParda ifTrue: [ ^ (enfrentamientos at: 2) ganador ]
	
	! !
!RondaDeTruco methodsFor: 'verificacion' stamp: 'Ciro 7/5/2021 21:19:03' prior: 51004406!
verificarSiHuboParda

	(enfrentamientos at: 1) huboParda ifTrue: [ ^ (enfrentamientos at: 2) ganador ]
	
	! !

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 21:19:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 21:19:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 21:19:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 21:19:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 21:19:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 21:19:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:19:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:19:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 21:19:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 21:19:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 21:19:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 21:19:07'!
FAILURE!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 21:19:07'!
FAILURE!

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoComanzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:19:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoComezandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:19:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores stamp: 'Ciro 7/5/2021 21:19:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador stamp: 'Ciro 7/5/2021 21:19:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test18SePuedeJugarElTercerEnfrentamientoComanzandoPorPieYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:19:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test19SePuedeJugarElTercerEnfrentamientoComezandoPorManoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:19:07'!
PASSED!
!RondaDeTruco methodsFor: 'verificacion' stamp: 'Ciro 7/5/2021 21:20:51' prior: 51004413!
verificarSiHuboParda

	(enfrentamientos at: 1) huboParda ifTrue: [ ^ ((enfrentamientos at: 2) ganador) ]
	
	! !

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 21:21:29'!
FAILURE!
!Enfrentamiento methodsFor: 'contenido' stamp: 'Ciro 7/5/2021 21:22:00'!
ganadoraaaa

	^ ganador
	! !

!methodRemoval: Enfrentamiento #ganador stamp: 'Ciro 7/5/2021 21:22:00'!
ganador

	^ ganador
	!
!RondaDeTruco methodsFor: 'verificacion' stamp: 'Ciro 7/5/2021 21:22:10' prior: 51004504!
verificarSiHuboParda

	(enfrentamientos at: 1) huboParda ifTrue: [ ^ ((enfrentamientos at: 2) ganadoraaaa) ]
	
	! !

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 21:22:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 21:22:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 21:22:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 21:22:12'!
ERROR!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 21:22:12'!
ERROR!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 21:22:12'!
ERROR!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:22:12'!
ERROR!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:22:12'!
ERROR!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 21:22:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 21:22:12'!
ERROR!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 21:22:12'!
ERROR!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 21:22:12'!
ERROR!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 21:22:12'!
ERROR!

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoComanzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:22:12'!
ERROR!

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoComezandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:22:12'!
ERROR!

!testRun: #RondaDeTrucoTest #test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores stamp: 'Ciro 7/5/2021 21:22:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador stamp: 'Ciro 7/5/2021 21:22:12'!
ERROR!

!testRun: #RondaDeTrucoTest #test18SePuedeJugarElTercerEnfrentamientoComanzandoPorPieYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:22:12'!
ERROR!

!testRun: #RondaDeTrucoTest #test19SePuedeJugarElTercerEnfrentamientoComezandoPorManoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:22:12'!
ERROR!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 21:22:20'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 21:22:20'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 21:22:20'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 21:22:20'!
ERROR!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 21:22:20'!
ERROR!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 21:22:20'!
ERROR!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:22:20'!
ERROR!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:22:20'!
ERROR!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 21:22:20'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 21:22:20'!
ERROR!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 21:22:20'!
ERROR!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 21:22:20'!
ERROR!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 21:22:20'!
ERROR!

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoComanzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:22:20'!
ERROR!

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoComezandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:22:20'!
ERROR!

!testRun: #RondaDeTrucoTest #test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores stamp: 'Ciro 7/5/2021 21:22:20'!
PASSED!

!testRun: #RondaDeTrucoTest #test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador stamp: 'Ciro 7/5/2021 21:22:20'!
ERROR!

!testRun: #RondaDeTrucoTest #test18SePuedeJugarElTercerEnfrentamientoComanzandoPorPieYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:22:20'!
ERROR!

!testRun: #RondaDeTrucoTest #test19SePuedeJugarElTercerEnfrentamientoComezandoPorManoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:22:20'!
ERROR!
!Enfrentamiento methodsFor: 'contenido' stamp: 'Ciro 7/5/2021 21:22:00' prior: 51004516!
ganadoraaaa

	^ ganador
	! !
!Enfrentamiento methodsFor: 'contenido' stamp: 'Ciro 7/5/2021 21:22:42'!
ganador

	^ ganador
	! !

!methodRemoval: Enfrentamiento #ganadoraaaa stamp: 'Ciro 7/5/2021 21:22:42'!
ganadoraaaa

	^ ganador
	!
!RondaDeTruco methodsFor: 'verificacion' stamp: 'Ciro 7/5/2021 21:22:49' prior: 51004523!
verificarSiHuboParda

	(enfrentamientos at: 1) huboParda ifTrue: [ ^ ((enfrentamientos at: 2) ganador) ]
	
	! !
!Enfrentamiento methodsFor: 'contenido' stamp: 'Ciro 7/5/2021 21:22:55'!
ganadorsadas

	^ ganador
	! !
!RondaDeTruco methodsFor: 'verificacion' stamp: 'Ciro 7/5/2021 21:23:01' prior: 51004708!
verificarSiHuboParda

	(enfrentamientos at: 1) huboParda ifTrue: [ ^ ((enfrentamientos at: 2) ganadorsadas) ]
	
	! !

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 21:23:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 21:23:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 21:23:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 21:23:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 21:23:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 21:23:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:23:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:23:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 21:23:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 21:23:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 21:23:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 21:23:05'!
FAILURE!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 21:23:05'!
FAILURE!

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoComanzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:23:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoComezandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:23:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores stamp: 'Ciro 7/5/2021 21:23:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador stamp: 'Ciro 7/5/2021 21:23:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test18SePuedeJugarElTercerEnfrentamientoComanzandoPorPieYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:23:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test19SePuedeJugarElTercerEnfrentamientoComezandoPorManoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:23:05'!
PASSED!
!RondaDeTruco methodsFor: 'verificacion' stamp: 'Ciro 7/5/2021 21:24:27' prior: 51004718!
verificarSiHuboParda

	(enfrentamientos at: 1) huboParda ifTrue: [ ^ ((enfrentamientos at: 2) ganador ) ]
	
	! !

!methodRemoval: Enfrentamiento #ganadorsadas stamp: 'Ciro 7/5/2021 21:24:34'!
ganadorsadas

	^ ganador
	!
!RondaDeTruco methodsFor: 'para test' stamp: 'Ciro 7/5/2021 21:34:16' prior: 51004148!
ganadorDeRonda

	| ganadores numeroEnfrentamientosParaMano numeroPie |
	
	self verificarSiHuboParda.
	
	ganadores _ OrderedCollection new.
	enfrentamientos do: [ :unEnfrentamiento | ganadores add: (unEnfrentamiento ganador)].
	numeroEnfrentamientosParaMano _ ganadores occurrencesOf: mano.
	numeroPie _ ganadores occurrencesOf: pie.
	
	numeroEnfrentamientosParaMano = 2 ifTrue: [ ^ mano].
	numeroPie = 2 ifTrue: [ ^ pie].
	
	^ RondaDeTruco sinGanador.
	
	
	
	! !
!RondaDeTruco methodsFor: 'para test' stamp: 'Ciro 7/5/2021 21:34:24' prior: 51004819!
ganadorDeRonda

	| ganadores numeroEnfrentamientosParaMano numeroEnfrentamientosParaPie |
	
	self verificarSiHuboParda.
	
	ganadores _ OrderedCollection new.
	enfrentamientos do: [ :unEnfrentamiento | ganadores add: (unEnfrentamiento ganador)].
	numeroEnfrentamientosParaMano _ ganadores occurrencesOf: mano.
	numeroEnfrentamientosParaPie _ ganadores occurrencesOf: pie.
	
	numeroEnfrentamientosParaMano = 2 ifTrue: [ ^ mano].
	numeroEnfrentamientosParaPie = 2 ifTrue: [ ^ pie].
	
	^ RondaDeTruco sinGanador.
	
	
	
	! !

Object subclass: #Jugador
	instanceVariableNames: 'cartas enfrentamientosGanados'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Jugador category: 'ISW1-2021-1C-2doParcial' stamp: 'Ciro 7/5/2021 21:35:30'!
Object subclass: #Jugador
	instanceVariableNames: 'cartas enfrentamientosGanados'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Jugador methodsFor: 'inicializacion' stamp: 'Ciro 7/5/2021 21:35:40' prior: 50990050!
inicializarCon: unaColecionDeCartas
	
	cartas _ unaColecionDeCartas.
	enfrentamientosGanados _ 0! !
!Enfrentamiento methodsFor: 'privado' stamp: 'Ciro 7/5/2021 21:36:43' prior: 50991121!
determinarGanadorSiLoHayEntre: cartaJugadorInicial y: cartaJugadorSiguiente

	(cartaJugadorInicial empardaCon: cartaJugadorSiguiente) ifTrue: [^ Enfrentamiento parda].
	(cartaJugadorInicial mataA: cartaJugadorSiguiente) ifTrue: [
		jugadorInicial aumentarContadorEnfrentamientos.
		^ jugadorInicial]
		ifFalse: [^ jugadorSiguiente].
	! !
!Jugador methodsFor: 'cartas' stamp: 'Ciro 7/5/2021 21:36:58'!
aumentarContadorEnfrentamientos

	enfrentamientosGanados _ enfrentamientosGanados +1! !
!Jugador methodsFor: 'cartas' stamp: 'Ciro 7/5/2021 21:37:00' prior: 51004889!
aumentarContadorEnfrentamientos

	enfrentamientosGanados _ enfrentamientosGanados + 1! !
!Enfrentamiento methodsFor: 'privado' stamp: 'Ciro 7/5/2021 21:37:17' prior: 51004876!
determinarGanadorSiLoHayEntre: cartaJugadorInicial y: cartaJugadorSiguiente

	(cartaJugadorInicial empardaCon: cartaJugadorSiguiente) ifTrue: [^ Enfrentamiento parda].
	(cartaJugadorInicial mataA: cartaJugadorSiguiente) ifTrue: [
			jugadorInicial aumentarContadorEnfrentamientos.
			^ jugadorInicial]
		ifFalse: [
			jugadorInicial aumentarContadorEnfrentamientos.
			^ jugadorSiguiente].
	! !
!Enfrentamiento methodsFor: 'privado' stamp: 'Ciro 7/5/2021 21:37:20' prior: 51004901!
determinarGanadorSiLoHayEntre: cartaJugadorInicial y: cartaJugadorSiguiente

	(cartaJugadorInicial empardaCon: cartaJugadorSiguiente) ifTrue: [^ Enfrentamiento parda].
	(cartaJugadorInicial mataA: cartaJugadorSiguiente) ifTrue: [
			jugadorInicial aumentarContadorEnfrentamientos.
			^ jugadorInicial]
		ifFalse: [
			jugadorSiguiente aumentarContadorEnfrentamientos.
			^ jugadorSiguiente].
	! !
!RondaDeTruco methodsFor: 'para test' stamp: 'Ciro 7/5/2021 21:37:50' prior: 51004837!
ganadorDeRonda

	| ganadores numeroEnfrentamientosParaMano numeroEnfrentamientosParaPie |
	
	(enfrentamientos at: 1) huboParda ifTrue: [ ^ (enfrentamientos at: 2) ganador ].
	
	ganadores _ OrderedCollection new.
	enfrentamientos do: [ :unEnfrentamiento | ganadores add: (unEnfrentamiento ganador)].
	numeroEnfrentamientosParaMano _ ganadores occurrencesOf: mano.
	numeroEnfrentamientosParaPie _ ganadores occurrencesOf: pie.
	
	numeroEnfrentamientosParaMano = 2 ifTrue: [ ^ mano].
	numeroEnfrentamientosParaPie = 2 ifTrue: [ ^ pie].
	
	^ RondaDeTruco sinGanador.
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 21:37:52'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 21:37:52'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 21:37:52'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 21:37:52'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 21:37:52'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 21:37:52'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:37:52'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:37:52'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 21:37:52'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 21:37:52'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 21:37:52'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 21:37:52'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 21:37:52'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoComanzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:37:52'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoComezandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:37:52'!
PASSED!

!testRun: #RondaDeTrucoTest #test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores stamp: 'Ciro 7/5/2021 21:37:52'!
PASSED!

!testRun: #RondaDeTrucoTest #test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador stamp: 'Ciro 7/5/2021 21:37:52'!
PASSED!

!testRun: #RondaDeTrucoTest #test18SePuedeJugarElTercerEnfrentamientoComanzandoPorPieYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:37:52'!
PASSED!

!testRun: #RondaDeTrucoTest #test19SePuedeJugarElTercerEnfrentamientoComezandoPorManoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:37:52'!
PASSED!
!RondaDeTruco methodsFor: 'para test' stamp: 'Ciro 7/5/2021 21:39:07' prior: 51004933!
ganadorDeRonda

	| gandores numeroEnfrentamientosParaMano numeroEnfrentamientosParaPie |
	
	(enfrentamientos at: 1) huboParda ifTrue: [ ^ (enfrentamientos at: 2) ganador ].
	
	gandores _ OrderedCollection new.
	enfrentamientos do: [ :unEnfrentamiento | gandores add: (unEnfrentamiento ganador)].
	numeroEnfrentamientosParaMano _ gandores occurrencesOf: mano.
	numeroEnfrentamientosParaPie _ gandores occurrencesOf: pie.
	
	numeroEnfrentamientosParaMano = 2 ifTrue: [ ^ mano].
	numeroEnfrentamientosParaPie = 2 ifTrue: [ ^ pie].
	
	^ RondaDeTruco sinGanador.
	
	
	
	! !
!RondaDeTruco methodsFor: 'para test' stamp: 'Ciro 7/5/2021 21:39:15' prior: 51005038!
ganadorDeRonda

	| gandores numeroEnfrentamientosParaMano numeroEnfrentamientosParaPie |
	
	self verificarSiHuboParda .
	
	gandores _ OrderedCollection new.
	enfrentamientos do: [ :unEnfrentamiento | gandores add: (unEnfrentamiento ganador)].
	numeroEnfrentamientosParaMano _ gandores occurrencesOf: mano.
	numeroEnfrentamientosParaPie _ gandores occurrencesOf: pie.
	
	numeroEnfrentamientosParaMano = 2 ifTrue: [ ^ mano].
	numeroEnfrentamientosParaPie = 2 ifTrue: [ ^ pie].
	
	^ RondaDeTruco sinGanador.
	
	
	
	! !
!RondaDeTruco methodsFor: 'para test' stamp: 'Ciro 7/5/2021 21:39:17' prior: 51005059!
ganadorDeRonda

	| gandores numeroEnfrentamientosParaMano numeroEnfrentamientosParaPie |
	
	self verificarSiHuboParda.
	
	gandores _ OrderedCollection new.
	enfrentamientos do: [ :unEnfrentamiento | gandores add: (unEnfrentamiento ganador)].
	numeroEnfrentamientosParaMano _ gandores occurrencesOf: mano.
	numeroEnfrentamientosParaPie _ gandores occurrencesOf: pie.
	
	numeroEnfrentamientosParaMano = 2 ifTrue: [ ^ mano].
	numeroEnfrentamientosParaPie = 2 ifTrue: [ ^ pie].
	
	^ RondaDeTruco sinGanador.
	
	
	
	! !

enfrentamientos!

self ganador.!
!RondaDeTruco methodsFor: 'para test' stamp: 'Ciro 7/5/2021 21:45:12' prior: 51005078!
ganadorDeRonda

	| retorno gandores numeroEnfrentamientosParaMano numeroEnfrentamientosParaPie |
	
	retorno _ RondaDeTruco sinGanador.
	
	retorno _ self verificarSiHuboParda.
	
	gandores _ OrderedCollection new.
	enfrentamientos do: [ :unEnfrentamiento | gandores add: (unEnfrentamiento ganador)].
	numeroEnfrentamientosParaMano _ gandores occurrencesOf: mano.
	numeroEnfrentamientosParaPie _ gandores occurrencesOf: pie.
	
	numeroEnfrentamientosParaMano = 2 ifTrue: [ retorno _ mano].
	numeroEnfrentamientosParaPie = 2 ifTrue: [ retorno _ pie].
	
	^ retorno
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 21:45:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 21:45:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 21:45:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 21:45:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 21:45:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 21:45:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:45:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:45:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 21:45:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 21:45:15'!
FAILURE!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 21:45:15'!
FAILURE!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 21:45:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 21:45:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoComanzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:45:15'!
ERROR!

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoComezandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:45:15'!
ERROR!

!testRun: #RondaDeTrucoTest #test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores stamp: 'Ciro 7/5/2021 21:45:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador stamp: 'Ciro 7/5/2021 21:45:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test18SePuedeJugarElTercerEnfrentamientoComanzandoPorPieYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:45:15'!
ERROR!

!testRun: #RondaDeTrucoTest #test19SePuedeJugarElTercerEnfrentamientoComezandoPorManoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:45:15'!
ERROR!

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 21:45:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 21:45:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 21:45:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 21:45:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 21:45:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 21:45:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:45:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:45:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 21:45:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 21:45:30'!
FAILURE!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 21:45:30'!
FAILURE!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 21:45:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 21:45:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoComanzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:45:30'!
ERROR!

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoComezandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:45:30'!
ERROR!

!testRun: #RondaDeTrucoTest #test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores stamp: 'Ciro 7/5/2021 21:45:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador stamp: 'Ciro 7/5/2021 21:45:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test18SePuedeJugarElTercerEnfrentamientoComanzandoPorPieYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:45:30'!
ERROR!

!testRun: #RondaDeTrucoTest #test19SePuedeJugarElTercerEnfrentamientoComezandoPorManoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:45:30'!
ERROR!
!RondaDeTruco methodsFor: 'verificacion' stamp: 'Ciro 7/5/2021 21:47:37' prior: 51004809!
verificarSiHuboParda

	(enfrentamientos at: 1) huboParda ifTrue: [ ^ ((enfrentamientos at: 2) ganador ) ]
		ifFalse: [^ RondaDeTruco sinGanador ]
	
	! !
!RondaDeTruco methodsFor: 'para test' stamp: 'Ciro 7/5/2021 21:47:44' prior: 51005098!
ganadorDeRonda

	| retorno gandores numeroEnfrentamientosParaMano numeroEnfrentamientosParaPie |
	
	retorno _ self verificarSiHuboParda.
	
	gandores _ OrderedCollection new.
	enfrentamientos do: [ :unEnfrentamiento | gandores add: (unEnfrentamiento ganador)].
	numeroEnfrentamientosParaMano _ gandores occurrencesOf: mano.
	numeroEnfrentamientosParaPie _ gandores occurrencesOf: pie.
	
	numeroEnfrentamientosParaMano = 2 ifTrue: [ retorno _ mano].
	numeroEnfrentamientosParaPie = 2 ifTrue: [ retorno _ pie].
	
	^ retorno
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 21:47:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 21:47:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 21:47:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 21:47:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 21:47:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 21:47:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:47:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:47:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 21:47:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 21:47:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 21:47:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 21:47:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 21:47:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoComanzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:47:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoComezandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:47:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores stamp: 'Ciro 7/5/2021 21:47:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador stamp: 'Ciro 7/5/2021 21:47:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test18SePuedeJugarElTercerEnfrentamientoComanzandoPorPieYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:47:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test19SePuedeJugarElTercerEnfrentamientoComezandoPorManoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:47:46'!
PASSED!
!RondaDeTruco methodsFor: 'para test' stamp: 'Ciro 7/5/2021 21:48:38' prior: 51005295!
ganadorDeRonda

	| retorno gandores numeroEnfrentamientosParaMano numeroEnfrentamientosParaPie |
	
	retorno _ self verificarSiHuboParda.
	
	gandores _ OrderedCollection new.
	enfrentamientos do: [ :unEnfrentamiento | gandores add: (unEnfrentamiento ganador)].
	numeroEnfrentamientosParaMano _ gandores occurrencesOf: mano.
	numeroEnfrentamientosParaPie _ gandores occurrencesOf: pie.
	
	numeroEnfrentamientosParaMano = 2 ifTrue: [ retorno _ mano].
	numeroEnfrentamientosParaPie = 2 ifTrue: [ retorno _ pie].
	
	^ retorno
	
	
	
	! !

----SNAPSHOT----(5 July 2021 21:48:41) CuisUniversity-4532.image priorSource: 21510199!
!RondaDeTruco methodsFor: 'para test' stamp: 'Ciro 7/5/2021 21:49:59' prior: 51005399!
ganadorDeRonda

	| retorno ultimoGanador  |
	
	retorno _ self verificarSiHuboParda.
	
	ultimoGanador _ (enfrentamientos at: numeroDeEnfrentamientos) ganador.
	
	ultimoGanador yaGano ifTrue: [ retorno _ ultimoGanador].
	
	^ retorno
	
	
	
	! !
!RondaDeTruco methodsFor: 'para test' stamp: 'Ciro 7/5/2021 21:50:01' prior: 51005422!
ganadorDeRonda

	| retorno ultimoGanador  |
	
	retorno _ self verificarSiHuboParda.
	
	ultimoGanador _ (enfrentamientos at: numeroDeEnfrentamientos) ganador.
	
	ultimoGanador yaGano ifTrue: [ retorno _ ultimoGanador ].
	
	^ retorno
	
	
	
	! !
!Jugador methodsFor: 'cartas' stamp: 'Ciro 7/5/2021 21:50:18'!
yaGano

	^ enfrentamientosGanados = 2.
	
	! !

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 21:50:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 21:50:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 21:50:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 21:50:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 21:50:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 21:50:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:50:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:50:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 21:50:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 21:50:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 21:50:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 21:50:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 21:50:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoComanzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:50:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoComezandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:50:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores stamp: 'Ciro 7/5/2021 21:50:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador stamp: 'Ciro 7/5/2021 21:50:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test18SePuedeJugarElTercerEnfrentamientoComanzandoPorPieYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:50:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test19SePuedeJugarElTercerEnfrentamientoComezandoPorManoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:50:19'!
PASSED!

----SNAPSHOT----(5 July 2021 21:50:26) CuisUniversity-4532.image priorSource: 21560563!
!RondaDeTrucoTest methodsFor: 'test tercer enfrentamiento' stamp: 'Ciro 7/5/2021 21:51:52' prior: 51003623!
test19SePuedeJugarElTercerEnfrentamientoComezandoPorManoYGanaPieYGanaLaRonda

	| ronda mano pie |
	
	mano _ Mano con: self malaManoParaTerceraRondaComenzandoPorPie.
	pie _ Pie con: self buenaManoParaTercerRondaComenzandoPorPie.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	ronda jugarTercerEnfrentamiento.
	
	self assert: ronda numeroDeEnfrentamiento equals: 3.
	self assert: ronda cartasJugadasPorMano size equals: 3.
	self assert: ronda cartasJugadasPorPie size equals: 3.
	self assert: ronda cartasJugadasPorMano equals: self malaManoParaTerceraRondaComenzandoPorPie.
	self assert: ronda cartasJugadasPorPie equals: self buenaManoParaTercerRondaComenzandoPorPie.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 3) equals: pie.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: pie.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento third equals: mano.
	self assert: ronda ganadorDeRonda equals: pie.! !
!RondaDeTrucoTest methodsFor: 'test tercer enfrentamiento' stamp: 'Ciro 7/5/2021 21:51:55' prior: 51003585!
test18SePuedeJugarElTercerEnfrentamientoComanzandoPorPieYGanaManoYGanaLaRonda

	| ronda mano pie |
	
	mano _ Mano con: self buenaManoParaTercerRondaComenzandoPorPie .
	pie _ Pie con: self malaManoParaTerceraRondaComenzandoPorPie .
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	ronda jugarTercerEnfrentamiento.
	
	self assert: ronda numeroDeEnfrentamiento equals: 3.
	self assert: ronda cartasJugadasPorMano size equals: 3.
	self assert: ronda cartasJugadasPorPie size equals: 3.
	self assert: ronda cartasJugadasPorMano equals: self buenaManoParaTercerRondaComenzandoPorPie.
	self assert: ronda cartasJugadasPorPie equals: self malaManoParaTerceraRondaComenzandoPorPie.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 3) equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento third equals: pie.
	self assert: ronda ganadorDeRonda equals: mano.! !
!RondaDeTrucoTest methodsFor: 'test tercer enfrentamiento' stamp: 'Ciro 7/5/2021 21:51:59' prior: 51003561!
test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador

	| ronda mano pie |
	
	mano _ Mano con: self buenaMano.
	pie _ Pie con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento .
	ronda jugarSegundoEnfrentamiento .
	
	self
		should: [ ronda jugarTercerEnfrentamiento ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: ronda yaHayGanadorDescripcionDeError.
			self assert: ronda numeroDeEnfrentamiento equals: 2.
			self assert: ronda cartasJugadasPorMano size equals: 2.
			self assert: ronda cartasJugadasPorPie size equals: 2]! !
!RondaDeTrucoTest methodsFor: 'test tercer enfrentamiento' stamp: 'Ciro 7/5/2021 21:52:01' prior: 51003543!
test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores

	| ronda mano pie |
	
	mano _ Mano con: self malaManoParaTerceraRonda.
	pie _ Pie con: self buenaManoParaTercerRonda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	
	self
		should: [ ronda jugarTercerEnfrentamiento ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: ronda noSeJugoElEnfrentamientoAnteriorDescripcionDeError ]! !
!RondaDeTrucoTest methodsFor: 'test tercer enfrentamiento' stamp: 'Ciro 7/5/2021 21:52:05' prior: 51003507!
test15SePuedeJugarElTercerEnfrentamientoComezandoPorPieYGanaPieYGanaLaRonda

	| ronda mano pie |
	
	mano _ Mano con: self malaManoParaTerceraRonda.
	pie _ Pie con: self buenaManoParaTercerRonda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	ronda jugarTercerEnfrentamiento.
	
	self assert: ronda numeroDeEnfrentamiento equals: 3.
	self assert: ronda cartasJugadasPorMano size equals: 3.
	self assert: ronda cartasJugadasPorPie size equals: 3.
	self assert: ronda cartasJugadasPorMano equals: self malaManoParaTerceraRonda.
	self assert: ronda cartasJugadasPorPie equals: self buenaManoParaTercerRonda.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 3) equals: pie.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento third equals: pie.
	self assert: ronda ganadorDeRonda equals: pie.! !
!RondaDeTrucoTest methodsFor: 'test tercer enfrentamiento' stamp: 'Ciro 7/5/2021 21:52:07' prior: 51003471!
test14SePuedeJugarElTercerEnfrentamientoComanzandoPorManoYGanaManoYGanaLaRonda

	| ronda mano pie |
	
	mano _ Mano con: self buenaManoParaTercerRonda .
	pie _ Pie con: self malaManoParaTerceraRonda .
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	ronda jugarTercerEnfrentamiento.
	
	self assert: ronda numeroDeEnfrentamiento equals: 3.
	self assert: ronda cartasJugadasPorMano size equals: 3.
	self assert: ronda cartasJugadasPorPie size equals: 3.
	self assert: ronda cartasJugadasPorMano equals: self buenaManoParaTercerRonda.
	self assert: ronda cartasJugadasPorPie equals: self malaManoParaTerceraRonda.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 3) equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: pie.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento third equals: mano.
	self assert: ronda ganadorDeRonda equals: mano.! !
!RondaDeTrucoTest methodsFor: 'test segundo enfrentamiento' stamp: 'Ciro 7/5/2021 21:52:10' prior: 51003432!
test13SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYGanaLaRondaPorPardarLaPrimera

	| ronda mano pie |
	
	mano _ Mano con: self malaMano.
	pie _ Pie con: self malaManoPardaPeroGanaSegunda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self malaMano first.
	self assert: ronda cartasJugadasPorMano second equals: self malaMano second.
	self assert: ronda cartasJugadasPorPie first equals: self malaManoPardaPeroGanaSegunda first.
	self assert: ronda cartasJugadasPorPie second equals: self malaManoPardaPeroGanaSegunda second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: pie.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: mano.
	self assert: ronda ganadorDeRonda equals: pie.! !
!RondaDeTrucoTest methodsFor: 'test segundo enfrentamiento' stamp: 'Ciro 7/5/2021 21:52:12' prior: 51003393!
test12SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera

	| ronda mano pie |
	
	mano _ Mano con: self malaManoPardaPeroGanaSegunda .
	pie _ Pie con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self malaManoPardaPeroGanaSegunda first.
	self assert: ronda cartasJugadasPorMano second equals: self malaManoPardaPeroGanaSegunda second.
	self assert: ronda cartasJugadasPorPie first equals: self malaMano first.
	self assert: ronda cartasJugadasPorPie second equals: self malaMano second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: mano.
	self assert: ronda ganadorDeRonda equals: mano.! !
!RondaDeTrucoTest methodsFor: 'test segundo enfrentamiento' stamp: 'Ciro 7/5/2021 21:52:15' prior: 51003353!
test11SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYNoGanaLaRonda

	| ronda mano pie |
	
	mano _ Mano con: self malaManoParaTerceraRonda.
	pie _ Pie con: self buenaManoParaTercerRonda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self malaManoParaTerceraRonda first.
	self assert: ronda cartasJugadasPorMano second equals: self malaManoParaTerceraRonda second.
	self assert: ronda cartasJugadasPorPie first equals: self buenaManoParaTercerRonda first.
	self assert: ronda cartasJugadasPorPie second equals: self buenaManoParaTercerRonda second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: pie.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: mano.
	self assert: ronda ganadorDeRonda equals: RondaDeTruco sinGanador.! !
!RondaDeTrucoTest methodsFor: 'test segundo enfrentamiento' stamp: 'Ciro 7/5/2021 21:52:17' prior: 51003313!
test10SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaManoYNoGanaLaRonda

	| ronda mano pie |
	
	mano _ Mano con: self buenaManoParaTercerRonda.
	pie _ Pie con: self malaManoParaTerceraRonda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self buenaManoParaTercerRonda first.
	self assert: ronda cartasJugadasPorMano second equals: self buenaManoParaTercerRonda second.
	self assert: ronda cartasJugadasPorPie first equals: self malaManoParaTerceraRonda first.
	self assert: ronda cartasJugadasPorPie second equals: self malaManoParaTerceraRonda second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: pie.
	self assert: ronda ganadorDeRonda equals: RondaDeTruco sinGanador.! !
!RondaDeTrucoTest methodsFor: 'test segundo enfrentamiento' stamp: 'Ciro 7/5/2021 21:52:20' prior: 51003296!
test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero

	| ronda mano pie |
	
	mano _ Mano con: self malaMano.
	pie _ Pie con: self buenaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	
	self
		should: [ ronda jugarSegundoEnfrentamiento ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: ronda noSeJugoElEnfrentamientoAnteriorDescripcionDeError ]! !
!RondaDeTrucoTest methodsFor: 'test segundo enfrentamiento' stamp: 'Ciro 7/5/2021 21:52:24' prior: 51003171!
test08SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaPieYGanaLaRonda

	| ronda mano pie |
	
	mano _ Mano con: self malaMano.
	pie _ Pie con: self buenaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self malaMano first.
	self assert: ronda cartasJugadasPorMano second equals: self malaMano second.
	self assert: ronda cartasJugadasPorPie first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorPie second equals: self buenaMano second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: pie.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: pie.
	self assert: ronda ganadorDeRonda equals: pie.! !
!RondaDeTrucoTest methodsFor: 'test segundo enfrentamiento' stamp: 'Ciro 7/5/2021 21:52:26' prior: 51003134!
test07SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRonda

	| ronda mano pie |
	
	mano _ Mano con: self buenaMano.
	pie _ Pie con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	ronda jugarSegundoEnfrentamiento.
	
	self assert: ronda numeroDeEnfrentamiento equals: 2.
	self assert: ronda cartasJugadasPorMano size equals: 2.
	self assert: ronda cartasJugadasPorPie size equals: 2.
	self assert: ronda cartasJugadasPorMano first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorMano second equals: self buenaMano second.
	self assert: ronda cartasJugadasPorPie first equals: self malaMano first.
	self assert: ronda cartasJugadasPorPie second equals: self malaMano second.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 2) equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento first equals: mano.
	self assert: ronda ordenJugadoresQueComienzanElEnfrentamiento second equals: mano.
	self assert: ronda ganadorDeRonda equals: mano.! !
!RondaDeTrucoTest methodsFor: 'test primer enfrentamiento' stamp: 'Ciro 7/5/2021 21:52:30' prior: 51002916!
test06SePuedeJugarElPrimerEnfrentamientoYHayParda

	| ronda mano pie |
	
	mano _ Mano con: self malaMano.
	pie _ Pie con: self malaManoPardaPeroGanaSegunda.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	
	self assert: ronda numeroDeEnfrentamiento equals: 1.
	self assert: ronda cartasJugadasPorMano size equals: 1.
	self assert: ronda cartasJugadasPorPie size equals: 1.
	self assert: ronda cartasJugadasPorMano first equals: self malaMano first.
	self assert: ronda cartasJugadasPorPie first equals: self malaManoPardaPeroGanaSegunda first.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 1) equals: (Enfrentamiento parda).! !
!RondaDeTrucoTest methodsFor: 'test primer enfrentamiento' stamp: 'Ciro 7/5/2021 21:52:31' prior: 51002893!
test05SePuedeJugarElPrimerEnfrentamientoYGanaPie

	| ronda mano pie |
	
	mano _ Mano con: self malaMano.
	pie _ Pie con: self buenaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	
	self assert: ronda numeroDeEnfrentamiento equals: 1.
	self assert: ronda cartasJugadasPorMano size equals: 1.
	self assert: ronda cartasJugadasPorPie size equals: 1.
	self assert: ronda cartasJugadasPorMano first equals: self malaMano first.
	self assert: ronda cartasJugadasPorPie first equals: self buenaMano first.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 1) equals: pie.! !
!RondaDeTrucoTest methodsFor: 'test primer enfrentamiento' stamp: 'Ciro 7/5/2021 21:52:34' prior: 51002847!
test04SePuedeJugarElPrimerEnfrentamientoYGanaMano

	| ronda mano pie |
	
	mano _ Mano con: self buenaMano.
	pie _ Pie con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	ronda jugarPrimerEnfrentamiento.
	
	self assert: ronda numeroDeEnfrentamiento equals: 1.
	self assert: ronda cartasJugadasPorMano size equals: 1.
	self assert: ronda cartasJugadasPorPie size equals: 1.
	self assert: ronda cartasJugadasPorMano first equals: self buenaMano first.
	self assert: ronda cartasJugadasPorPie first equals: self malaMano first.
	self assert: (ronda ganadorDelEnfrentamientoNumero: 1) equals: mano.! !
!RondaDeTrucoTest methodsFor: 'tests creacion' stamp: 'Ciro 7/5/2021 21:52:37' prior: 51002831!
test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas

	| mano pie |
	
	mano _ Mano con: self buenaMano.
	pie _ Pie con: self manoIncorrecta.
	
	self
		should: [ RondaDeTruco con: mano yCon: pie ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: RondaDeTruco jugadorNoTiene3CartasDescripcionDeError ]! !
!RondaDeTrucoTest methodsFor: 'tests creacion' stamp: 'Ciro 7/5/2021 21:52:39' prior: 51002816!
test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas

	| mano pie |
	
	mano _ Mano con: self manoIncorrecta.
	pie _ Pie con: self buenaMano.
	
	self
		should: [ RondaDeTruco con: mano yCon: pie ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: RondaDeTruco jugadorNoTiene3CartasDescripcionDeError ]! !
!RondaDeTrucoTest methodsFor: 'tests creacion' stamp: 'Ciro 7/5/2021 21:52:42' prior: 51002790!
test01CrearRondaCon2Jugadores

	| ronda mano pie |
	
	mano _ Mano con: self buenaMano.
	pie _ Pie con: self malaMano.
	ronda _ RondaDeTruco con: mano yCon: pie.
	
	self assert: ronda mano equals: mano.
	self assert: ronda pie equals: pie! !
!Enfrentamiento methodsFor: 'jugar' stamp: 'Ciro 7/5/2021 21:53:30' prior: 50991133!
jugar

	ganador _ self determinarGanadorSiLoHayEntre: 	(jugadorInicial cartaNumero: numeroDeEnfrentamiento) 
		y: (jugadorSiguiente cartaNumero: numeroDeEnfrentamiento).
	! !

!testRun: #RondaDeTrucoTest #test01CrearRondaCon2Jugadores stamp: 'Ciro 7/5/2021 21:53:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearRondaCon2JugadoresConManoConMenosDe3Cartas stamp: 'Ciro 7/5/2021 21:53:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoSePuedeCrearRondaCon2JugadoresConPieConMenosDe3Cartas stamp: 'Ciro 7/5/2021 21:53:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SePuedeJugarElPrimerEnfrentamientoYGanaMano stamp: 'Ciro 7/5/2021 21:53:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test05SePuedeJugarElPrimerEnfrentamientoYGanaPie stamp: 'Ciro 7/5/2021 21:53:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test06SePuedeJugarElPrimerEnfrentamientoYHayParda stamp: 'Ciro 7/5/2021 21:53:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test07SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:53:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test08SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:53:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test09NoSePuedeJugarElSegundoEnfrentamientoPorqueTodaviaNoJugaronElPrimero stamp: 'Ciro 7/5/2021 21:53:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SePuedeJugarElSegundoEnfrentamientoComenzandoPorPieYGanaManoYNoGanaLaRonda stamp: 'Ciro 7/5/2021 21:53:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYNoGanaLaRonda stamp: 'Ciro 7/5/2021 21:53:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaManoYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 21:53:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SePuedeJugarElSegundoEnfrentamientoComenzandoPorManoYGanaPieYGanaLaRondaPorPardarLaPrimera stamp: 'Ciro 7/5/2021 21:53:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SePuedeJugarElTercerEnfrentamientoComanzandoPorManoYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:53:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SePuedeJugarElTercerEnfrentamientoComezandoPorPieYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:53:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test16NoSePuedeJugarElTercerEnfrentamientoPorqueNoSeJugaronLosAnteriores stamp: 'Ciro 7/5/2021 21:53:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test17NoSePuedeJugarElTercerEnfrentamientoPorqueYaHayGanador stamp: 'Ciro 7/5/2021 21:53:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test18SePuedeJugarElTercerEnfrentamientoComanzandoPorPieYGanaManoYGanaLaRonda stamp: 'Ciro 7/5/2021 21:53:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test19SePuedeJugarElTercerEnfrentamientoComezandoPorManoYGanaPieYGanaLaRonda stamp: 'Ciro 7/5/2021 21:53:32'!
PASSED!
!Enfrentamiento methodsFor: 'privado' stamp: 'Ciro 7/5/2021 21:54:00' prior: 51004917!
determinarGanadorSiLoHayEntre: cartaJugadorInicial y: cartaJugadorSiguiente

	(cartaJugadorInicial empardaCon: cartaJugadorSiguiente) ifTrue: [^ Enfrentamiento parda].
	
	(cartaJugadorInicial mataA: cartaJugadorSiguiente) ifTrue: [
			jugadorInicial aumentarContadorEnfrentamientos.
			^ jugadorInicial]
		ifFalse: [
			jugadorSiguiente aumentarContadorEnfrentamientos.
			^ jugadorSiguiente].
	! !

----QUIT----(5 July 2021 21:54:13) CuisUniversity-4532.image priorSource: 21564172!