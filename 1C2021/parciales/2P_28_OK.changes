
----End fileIn of /Users/dbenitez/uba/1c2021-IS1/Quiz/macos64 - 2do Parcial/ISW1-2021-1C-2doParcial.st----!

TestCase subclass: #RondaTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'DB 7/5/2021 17:33:35'!
TestCase subclass: #RondaTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classRenamed: #RondaTest as: #RondaDeTrucoTest stamp: 'DB 7/5/2021 17:36:08'!
Smalltalk renameClassNamed: #RondaTest as: #RondaDeTrucoTest!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 17:41:48'!
_test00

	"
	La ronda es solo para dos jugadores,
	 la mano (el que comienza el primer enfrentamiento) y 
	     el pie (el que juega segundo en el primer enfrentamiento)."
! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 17:42:26' prior: 50859889!
_test00

	" - test01 no se puede crear una ronda con m�s de dos jugadores.
	  - test02 no se puede crear una ronda 
	La ronda es solo para dos jugadores,
	 la mano (el que comienza el primer enfrentamiento) y 
	     el pie (el que juega segundo en el primer enfrentamiento)."
! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 17:48:52' prior: 50859898!
_test00

"La ronda es solo para dos jugadores, la mano (el que comienza el primer enfrentamiento) y el pie (el que juega segundo en el primer enfrentamiento)."

	"  - test01 arranca jugando siempre la mano
	   - test02 el jugador mano tiene sus 3 cartas
	   - test03 el jugador 
	 test01 no se puede crear una ronda con m�s de dos jugadores.
	  - test02 no se puede crear una ronda 
	La ronda es solo para dos jugadores,
	 la mano (el que comienza el primer enfrentamiento) y 
	     el pie (el que juega segundo en el primer enfrentamiento)."
! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 17:49:45' prior: 50859910!
_test00

"1. La ronda es solo para dos jugadores, la mano (el que comienza el primer enfrentamiento) y el pie (el que juega segundo en el primer enfrentamiento)."

	"  - test01 arranca jugando siempre la mano
	   - test02 la mano tiene sus 3 cartas.
	   - test03 el pie tiene sus 3 cartas. 
	
	 test01 no se puede crear una ronda con m�s de dos jugadores.
	  - test02 no se puede crear una ronda 
	La ronda es solo para dos jugadores,
	 la mano (el que comienza el primer enfrentamiento) y 
	     el pie (el que juega segundo en el primer enfrentamiento)."
! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 17:50:52'!
test01_arrancaJugandoSiempreLaMano

	| ronda |
	ronda := self crearRondaDeTruco.

"1. La ronda es solo para dos jugadores, la mano (el que comienza el primer enfrentamiento) y el pie (el que juega segundo en el primer enfrentamiento)."

	"  - test01 arranca jugando siempre la mano
	   - test02 la mano tiene sus 3 cartas.
	   - test03 el pie tiene sus 3 cartas. 
	
	 test01 no se puede crear una ronda con m�s de dos jugadores.
	  - test02 no se puede crear una ronda 
	La ronda es solo para dos jugadores,
	 la mano (el que comienza el primer enfrentamiento) y 
	     el pie (el que juega segundo en el primer enfrentamiento)."
! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 17:51:54' prior: 50859950!
test01_arrancaJugandoSiempreLaMano

	| ronda |
	ronda := self crearRondaDeTruco.
	self assert: #mano equals: ronda aQuienLeToca.

"1. La ronda es solo para dos jugadores, la mano (el que comienza el primer enfrentamiento) y el pie (el que juega segundo en el primer enfrentamiento)."

	"  - test01 arranca jugando siempre la mano
	   - test02 la mano tiene sus 3 cartas.
	   - test03 el pie tiene sus 3 cartas. 
	
	 test01 no se puede crear una ronda con m�s de dos jugadores.
	  - test02 no se puede crear una ronda 
	La ronda es solo para dos jugadores,
	 la mano (el que comienza el primer enfrentamiento) y 
	     el pie (el que juega segundo en el primer enfrentamiento)."
! !

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 17:51:56'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 17:52:34'!
crearRondaDeTruco
	self shouldBeImplemented.! !

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'DB 7/5/2021 17:52:58'!
Object subclass: #RondaDeTruco
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 17:52:49' prior: 50860001!
crearRondaDeTruco
	^RondaDeTruco new.! !

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 17:53:00'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 17:53:06'!
aQuienLeToca
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 17:53:19' prior: 50860021!
aQuienLeToca
	^#mano! !

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 17:53:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 17:53:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 17:55:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 17:55:16'!
PASSED!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 17:58:53'!
test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas

	| ronda |
	ronda := self crearRondaDeTruco.
	self assert: #mano equals: ronda aQuienLeToca.

"1. La ronda es solo para dos jugadores, la mano (el que comienza el primer enfrentamiento) y el pie (el que juega segundo en el primer enfrentamiento)."

	"  - test01 arranca jugando siempre la mano
	   - test02 la mano tiene sus 3 cartas.
	   - test03 el pie tiene sus 3 cartas. 
	
	 test01 no se puede crear una ronda con m�s de dos jugadores.
	  - test02 no se puede crear una ronda 
	La ronda es solo para dos jugadores,
	 la mano (el que comienza el primer enfrentamiento) y 
	     el pie (el que juega segundo en el primer enfrentamiento)."
! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 17:58:57' prior: 50860042!
test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas

	| ronda |
	ronda := self crearRondaDeTruco.
	self assert: #mano equals: ronda aQuienLeToca.! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 18:00:28' prior: 50860067!
test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas

	| ronda cartasDeLaMano |
	
	cartasDeLaMano := OrderedCollection with: CartaDeTruco anchoDeBasto.
	
	ronda := self crearRondaDeTruco.
	self assert: #mano equals: ronda aQuienLeToca.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 18:01:37'!
crearRondaDeTruco: cartasDeLaMano
	^RondaDeTruco new.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 18:01:37' prior: 50859973!
test01_arrancaJugandoSiempreLaMano

	| ronda |
	ronda := self crearRondaDeTruco: self defaultCartasMano.
	self assert: #mano equals: ronda aQuienLeToca.

"1. La ronda es solo para dos jugadores, la mano (el que comienza el primer enfrentamiento) y el pie (el que juega segundo en el primer enfrentamiento)."

	"  - test01 arranca jugando siempre la mano
	   - test02 la mano tiene sus 3 cartas.
	   - test03 el pie tiene sus 3 cartas. 
	
	 test01 no se puede crear una ronda con m�s de dos jugadores.
	  - test02 no se puede crear una ronda 
	La ronda es solo para dos jugadores,
	 la mano (el que comienza el primer enfrentamiento) y 
	     el pie (el que juega segundo en el primer enfrentamiento)."
! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 18:01:37' prior: 50860075!
test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas

	| ronda cartasDeLaMano |
	
	cartasDeLaMano := OrderedCollection with: CartaDeTruco anchoDeBasto.
	
	ronda := self crearRondaDeTruco: self defaultCartasMano.
	self assert: #mano equals: ronda aQuienLeToca.! !

!methodRemoval: RondaDeTrucoTest #crearRondaDeTruco stamp: 'DB 7/5/2021 18:01:37'!
crearRondaDeTruco
	^RondaDeTruco new.!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 18:02:16' prior: 50860086!
crearRondaDeTruco: cartasDeLaMano
	^RondaDeTruco new.! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 18:05:09' prior: 50860117!
test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas

	| cartasDeLaMano |
	cartasDeLaMano := OrderedCollection with: CartaDeTruco anchoDeBasto.
	
	self 
		should: [self crearRondaDeTruco: cartasDeLaMano] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConMenosDeTresCartasErrorDescription.! !

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 18:05:15'!
ERROR!

----SNAPSHOT----(5 July 2021 18:05:31) CuisUniversity-4532.image priorSource: 16886318!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 18:05:41' prior: 50860138!
test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas

	| cartasDeLaMano |
	cartasDeLaMano := OrderedCollection with: CartaDeTruco anchoDeBasto.
	
	self 
		should: [self crearRondaDeTruco: cartasDeLaMano] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConMenosDeTresCartasErrorDescription.! !

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 18:05:44'!
ERROR!
!RondaDeTruco class methodsFor: 'error descriptions' stamp: 'DB 7/5/2021 18:06:04'!
jugadorConMenosDeTresCartasErrorDescription
	self shouldBeImplemented.! !
!RondaDeTruco class methodsFor: 'error descriptions' stamp: 'DB 7/5/2021 18:06:31' prior: 50860175!
jugadorConMenosDeTresCartasErrorDescription
	^'No se puede crear una si el jugador tiene menos de tres cartas'! !

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 18:06:33'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 18:07:01' prior: 50860133!
crearRondaDeTruco: cartasDeLaMano
	^RondaDeTruco new.! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 18:08:01'!
cartasDeLaMano: cartasDeLaMano
	
	self error: self jugadorConMenosDeTresCartasErrorDescription ! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 18:08:38' prior: 50860192!
crearRondaDeTruco: unasCartasDeLaMano
	^RondaDeTruco cartasDeLaMano: unasCartasDeLaMano.! !

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 18:08:41'!
PASSED!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 18:08:41'!
ERROR!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 18:08:41'!
PASSED!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 18:08:41'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 18:09:03'!
defaultCartasMano
	self shouldBeImplemented.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 18:09:28' prior: 50860224!
defaultCartasMano
	^OrderedCollection with: 1 with: 2 with:3 ! !

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 18:09:29'!
ERROR!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 18:10:23' prior: 50860197!
cartasDeLaMano: cartasDeLaMano
	
	cartasDeLaMano size < 3 ifTrue: [	self error: self jugadorConMenosDeTresCartasErrorDescription].! !

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 18:10:25'!
ERROR!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 18:10:35'!
ERROR!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 18:11:07' prior: 50860238!
cartasDeLaMano: cartasDeLaMano
	
	cartasDeLaMano size < 3 ifTrue: [	self error: self jugadorConMenosDeTresCartasErrorDescription].
	
	self initializeWith: cartasDeLaMano! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 18:11:16' prior: 50860252!
cartasDeLaMano: cartasDeLaMano
	
	cartasDeLaMano size < 3 ifTrue: [	self error: self jugadorConMenosDeTresCartasErrorDescription].
	
	^self new.! !

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 18:11:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 18:11:20'!
PASSED!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 18:11:20'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 18:11:20'!
PASSED!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 18:11:41'!
test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas

	| cartasDeLaMano |
	cartasDeLaMano := OrderedCollection with: CartaDeTruco anchoDeBasto.
	
	self 
		should: [self crearRondaDeTruco: cartasDeLaMano] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConMenosDeTresCartasErrorDescription.! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 18:11:56' prior: 50860283!
test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas

	| cartasDelPie |
	cartasDelPie := OrderedCollection with: CartaDeTruco anchoDeBasto.
	
	self 
		should: [self crearRondaDeTruco: cartasDelPie] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConMenosDeTresCartasErrorDescription.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 18:13:48'!
crearRondaDeTruco: unasCartasDeLaMano lasCartasDelPieSon: unasCartasDelPie 
	^RondaDeTruco cartasDeLaMano: unasCartasDeLaMano.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 18:13:48' prior: 50860158!
test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas

	| cartasDeLaMano |
	cartasDeLaMano := OrderedCollection with: CartaDeTruco anchoDeBasto.
	
	self 
		should: [self crearRondaDeTruco: cartasDeLaMano lasCartasDelPieSon: self defaultCartas] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConMenosDeTresCartasErrorDescription.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 18:13:48' prior: 50860091!
test01_arrancaJugandoSiempreLaMano

	| ronda |
	ronda := self crearRondaDeTruco: self defaultCartasMano lasCartasDelPieSon: self defaultCartas.
	self assert: #mano equals: ronda aQuienLeToca.

"1. La ronda es solo para dos jugadores, la mano (el que comienza el primer enfrentamiento) y el pie (el que juega segundo en el primer enfrentamiento)."

	"  - test01 arranca jugando siempre la mano
	   - test02 la mano tiene sus 3 cartas.
	   - test03 el pie tiene sus 3 cartas. 
	
	 test01 no se puede crear una ronda con m�s de dos jugadores.
	  - test02 no se puede crear una ronda 
	La ronda es solo para dos jugadores,
	 la mano (el que comienza el primer enfrentamiento) y 
	     el pie (el que juega segundo en el primer enfrentamiento)."
! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 18:13:48' prior: 50860297!
test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas

	| cartasDelPie |
	cartasDelPie := OrderedCollection with: CartaDeTruco anchoDeBasto.
	
	self 
		should: [self crearRondaDeTruco: cartasDelPie lasCartasDelPieSon: self defaultCartas] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConMenosDeTresCartasErrorDescription.! !

!methodRemoval: RondaDeTrucoTest #crearRondaDeTruco: stamp: 'DB 7/5/2021 18:13:48'!
crearRondaDeTruco: unasCartasDeLaMano
	^RondaDeTruco cartasDeLaMano: unasCartasDeLaMano.!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 18:14:16'!
crearRondaDeTrucoCon: unasCartasDeLaMano lasCartasDelPieSon: unasCartasDelPie 
	^RondaDeTruco cartasDeLaMano: unasCartasDeLaMano.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 18:14:16' prior: 50860360!
test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas

	| cartasDelPie |
	cartasDelPie := OrderedCollection with: CartaDeTruco anchoDeBasto.
	
	self 
		should: [self crearRondaDeTrucoCon: cartasDelPie lasCartasDelPieSon: self defaultCartas] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConMenosDeTresCartasErrorDescription.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 18:14:16' prior: 50860333!
test01_arrancaJugandoSiempreLaMano

	| ronda |
	ronda := self crearRondaDeTrucoCon: self defaultCartasMano lasCartasDelPieSon: self defaultCartas.
	self assert: #mano equals: ronda aQuienLeToca.

"1. La ronda es solo para dos jugadores, la mano (el que comienza el primer enfrentamiento) y el pie (el que juega segundo en el primer enfrentamiento)."

	"  - test01 arranca jugando siempre la mano
	   - test02 la mano tiene sus 3 cartas.
	   - test03 el pie tiene sus 3 cartas. 
	
	 test01 no se puede crear una ronda con m�s de dos jugadores.
	  - test02 no se puede crear una ronda 
	La ronda es solo para dos jugadores,
	 la mano (el que comienza el primer enfrentamiento) y 
	     el pie (el que juega segundo en el primer enfrentamiento)."
! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 18:14:16' prior: 50860318!
test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas

	| cartasDeLaMano |
	cartasDeLaMano := OrderedCollection with: CartaDeTruco anchoDeBasto.
	
	self 
		should: [self crearRondaDeTrucoCon: cartasDeLaMano lasCartasDelPieSon: self defaultCartas] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConMenosDeTresCartasErrorDescription.! !

!methodRemoval: RondaDeTrucoTest #crearRondaDeTruco:lasCartasDelPieSon: stamp: 'DB 7/5/2021 18:14:16'!
crearRondaDeTruco: unasCartasDeLaMano lasCartasDelPieSon: unasCartasDelPie 
	^RondaDeTruco cartasDeLaMano: unasCartasDeLaMano.!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 18:15:16'!
cartasPorDefecto
	^OrderedCollection with: 1 with: 2 with:3 ! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 18:15:16' prior: 50860403!
test01_arrancaJugandoSiempreLaMano

	| ronda |
	ronda := self crearRondaDeTrucoCon: self cartasPorDefecto lasCartasDelPieSon: self defaultCartas.
	self assert: #mano equals: ronda aQuienLeToca.

"1. La ronda es solo para dos jugadores, la mano (el que comienza el primer enfrentamiento) y el pie (el que juega segundo en el primer enfrentamiento)."

	"  - test01 arranca jugando siempre la mano
	   - test02 la mano tiene sus 3 cartas.
	   - test03 el pie tiene sus 3 cartas. 
	
	 test01 no se puede crear una ronda con m�s de dos jugadores.
	  - test02 no se puede crear una ronda 
	La ronda es solo para dos jugadores,
	 la mano (el que comienza el primer enfrentamiento) y 
	     el pie (el que juega segundo en el primer enfrentamiento)."
! !

!methodRemoval: RondaDeTrucoTest #defaultCartasMano stamp: 'DB 7/5/2021 18:15:16'!
defaultCartasMano
	^OrderedCollection with: 1 with: 2 with:3 !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 18:15:51' prior: 50860388!
test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas

	| cartasDelPie |
	cartasDelPie := OrderedCollection with: CartaDeTruco anchoDeBasto.
	
	self 
		should: [self crearRondaDeTrucoCon: self cartasPorDefecto lasCartasDelPieSon: self defaultCartas] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConMenosDeTresCartasErrorDescription.! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 18:16:02' prior: 50860489!
test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas

	| cartasDelPie |
	cartasDelPie := OrderedCollection with: CartaDeTruco anchoDeBasto.
	
	self 
		should: [self crearRondaDeTrucoCon: self cartasPorDefecto lasCartasDelPieSon:  cartasDelPie] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConMenosDeTresCartasErrorDescription.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 18:16:19' prior: 50860380!
crearRondaDeTrucoCon: unasCartasDeLaMano lasCartasDelPieSon: unasCartasDelPie 
	^RondaDeTruco cartasDeLaMano: unasCartasDeLaMano.
	
	" [self crearRondaDeTrucoCon: self cartasPorDefecto lasCartasDelPieSon:  cartasDelPie] "! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 18:17:22'!
crearRondaDeTrucoConCartasDeLaMano: unasCartasDeLaMano yCartasDelPie: unasCartasDelPie 
	^RondaDeTruco cartasDeLaMano: unasCartasDeLaMano.
	
	" [self crearRondaDeTrucoCon: self cartasPorDefecto lasCartasDelPieSon:  cartasDelPie] "! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 18:17:22' prior: 50860458!
test01_arrancaJugandoSiempreLaMano

	| ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self cartasPorDefecto yCartasDelPie: self defaultCartas.
	self assert: #mano equals: ronda aQuienLeToca.

"1. La ronda es solo para dos jugadores, la mano (el que comienza el primer enfrentamiento) y el pie (el que juega segundo en el primer enfrentamiento)."

	"  - test01 arranca jugando siempre la mano
	   - test02 la mano tiene sus 3 cartas.
	   - test03 el pie tiene sus 3 cartas. 
	
	 test01 no se puede crear una ronda con m�s de dos jugadores.
	  - test02 no se puede crear una ronda 
	La ronda es solo para dos jugadores,
	 la mano (el que comienza el primer enfrentamiento) y 
	     el pie (el que juega segundo en el primer enfrentamiento)."
! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 18:17:22' prior: 50860504!
test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas

	| cartasDelPie |
	cartasDelPie := OrderedCollection with: CartaDeTruco anchoDeBasto.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: self cartasPorDefecto yCartasDelPie:  cartasDelPie] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConMenosDeTresCartasErrorDescription.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 18:17:22' prior: 50860430!
test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas

	| cartasDeLaMano |
	cartasDeLaMano := OrderedCollection with: CartaDeTruco anchoDeBasto.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: cartasDeLaMano yCartasDelPie: self defaultCartas] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConMenosDeTresCartasErrorDescription.! !

!methodRemoval: RondaDeTrucoTest #crearRondaDeTrucoCon:lasCartasDelPieSon: stamp: 'DB 7/5/2021 18:17:22'!
crearRondaDeTrucoCon: unasCartasDeLaMano lasCartasDelPieSon: unasCartasDelPie 
	^RondaDeTruco cartasDeLaMano: unasCartasDeLaMano.
	
	" [self crearRondaDeTrucoCon: self cartasPorDefecto lasCartasDelPieSon:  cartasDelPie] "!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 18:17:26' prior: 50860529!
crearRondaDeTrucoConCartasDeLaMano: unasCartasDeLaMano yCartasDelPie: unasCartasDelPie 
	^RondaDeTruco cartasDeLaMano: unasCartasDeLaMano.
! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 18:17:46' prior: 50860608!
crearRondaDeTrucoConCartasDeLaMano: unasCartasDeLaMano yCartasDelPie: unasCartasDelPie 
	^RondaDeTruco cartasDeLaMano: unasCartasDeLaMano cartasDelPie: unasCartasDelPie.
! !

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 18:17:52'!
ERROR!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 18:18:54'!
cartasDeLaMano: cartasDeLaMano cartasDelPie: cartasDelPie 
	
	cartasDeLaMano size < 3 ifTrue: [	self error: self jugadorConMenosDeTresCartasErrorDescription].
	
	^self new.! !

!methodRemoval: RondaDeTruco class #cartasDeLaMano: stamp: 'DB 7/5/2021 18:18:54'!
cartasDeLaMano: cartasDeLaMano
	
	cartasDeLaMano size < 3 ifTrue: [	self error: self jugadorConMenosDeTresCartasErrorDescription].
	
	^self new.!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 18:19:22' prior: 50860628!
cartasDeLaMano: cartasDeLaMano cartasDelPie: cartasDelPie 
	
	cartasDeLaMano size < 3 ifTrue: [	self error: self jugadorConMenosDeTresCartasErrorDescription].
	cartasDelPie size < 3 ifTrue: [self error: self jugadorConMenosDeTresCartasErrorDescription ].
	
	^self new.! !

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 18:19:23'!
ERROR!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 18:19:23'!
ERROR!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 18:19:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 18:19:30'!
ERROR!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 18:19:38' prior: 50860540!
test01_arrancaJugandoSiempreLaMano

	| ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self cartasPorDefecto yCartasDelPie: self defaultCartas.
	self assert: #mano equals: ronda aQuienLeToca.
! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 18:19:51' prior: 50860670!
test01_arrancaJugandoSiempreLaMano

	| ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self cartasPorDefecto yCartasDelPie: self cartasPorDefecto.
	self assert: #mano equals: ronda aQuienLeToca.
! !

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 18:19:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 18:19:59'!
ERROR!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 18:20:16' prior: 50860582!
test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas

	| cartasDeLaMano |
	cartasDeLaMano := OrderedCollection with: CartaDeTruco anchoDeBasto.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: cartasDeLaMano yCartasDelPie: self cartasPorDefecto] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConMenosDeTresCartasErrorDescription.! !

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 18:20:18'!
PASSED!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 18:20:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 18:20:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 18:20:21'!
PASSED!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 18:21:00'!
laCantidadDeCartasTieneQueSerTres: cartasDeLaMano

	^ cartasDeLaMano size < 3 ifTrue: [	self error: self jugadorConMenosDeTresCartasErrorDescription]! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 18:21:00' prior: 50860644!
cartasDeLaMano: cartasDeLaMano cartasDelPie: cartasDelPie 
	
	self laCantidadDeCartasTieneQueSerTres: cartasDeLaMano.
	cartasDelPie size < 3 ifTrue: [self error: self jugadorConMenosDeTresCartasErrorDescription ].
	
	^self new.! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 18:21:15' prior: 50860735!
cartasDeLaMano: cartasDeLaMano cartasDelPie: cartasDelPie 
	
	self laCantidadDeCartasTieneQueSerTres: cartasDeLaMano.
	self laCantidadDeCartasTieneQueSerTres: cartasDelPie.
	^self new.! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 18:21:24' prior: 50860727!
laCantidadDeCartasTieneQueSerTres: cartas

	^ cartas size < 3 ifTrue: [	self error: self jugadorConMenosDeTresCartasErrorDescription]! !

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 18:21:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 18:21:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 18:21:25'!
PASSED!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 18:22:00'!
test04_lasCartasTienenQueSerCartasDeTruco

	| cartasDelPie |
	cartasDelPie := OrderedCollection with: CartaDeTruco anchoDeBasto.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: self cartasPorDefecto yCartasDelPie:  cartasDelPie] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConMenosDeTresCartasErrorDescription.! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 18:22:09' prior: 50860773!
test04_lasCartasTienenQueSerCartasDeTruco

	| cartasDelPie |
	cartasDelPie := OrderedCollection with: 1.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: self cartasPorDefecto yCartasDelPie:  cartasDelPie] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConMenosDeTresCartasErrorDescription.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 18:23:08' prior: 50860452!
cartasPorDefecto
	^OrderedCollection with: (CartaDeTruco bastoCon: 2) with: (CartaDeTruco bastoCon: 3) with: (CartaDeTruco bastoCon: 4)! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 18:24:35'!
test04_lasCartasDeLaManoTienenQueSerCartasDeTruco

	| cartasDelPie |
	cartasDelPie := OrderedCollection with: 1 with: CartaDeTruco anchoDeBasto with: 'el ancho'.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: self cartasPorDefecto yCartasDelPie:  cartasDelPie] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConMenosDeTresCartasErrorDescription.! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 18:24:58' prior: 50860809!
test04_lasCartasDeLaManoTienenQueSerCartasDeTruco

	| cartasDelPie |
	cartasDelPie := OrderedCollection with: 1 with: CartaDeTruco anchoDeBasto with: 'el ancho'.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: self cartasPorDefecto yCartasDelPie:  cartasDelPie] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco lasCartasNoSonCartasDeTrucoErrorDescription.! !

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 18:25:03'!
ERROR!
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 18:25:13'!
lasCartasNoSonCartasDeTrucoErrorDescription
	self shouldBeImplemented.! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 18:26:55' prior: 50860844!
lasCartasNoSonCartasDeTrucoErrorDescription
	^'Las cartas dada no son cartas de truco'! !

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 18:26:56'!
FAILURE!

----SNAPSHOT----(5 July 2021 18:29:44) CuisUniversity-4532.image priorSource: 16912138!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 18:30:37' prior: 50860746!
cartasDeLaMano: cartasDeLaMano cartasDelPie: cartasDelPie 
	
	self laCantidadDeCartasTieneQueSerTres: cartasDeLaMano.
	self laCantidadDeCartasTieneQueSerTres: cartasDelPie.
	
	cartasDeLaMano anySatisfy: [:carta | carta isKindOf: CartaDeTruco ]
	
	^self new.! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 18:31:32' prior: 50860863!
cartasDeLaMano: cartasDeLaMano cartasDelPie: cartasDelPie 
	
	self laCantidadDeCartasTieneQueSerTres: cartasDeLaMano.
	self laCantidadDeCartasTieneQueSerTres: cartasDelPie.
	
	cartasDeLaMano anySatisfy: [:carta | carta isKindOf: CartaDeTruco ]
	
	^self new.! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 18:33:29' prior: 50860875!
cartasDeLaMano: cartasDeLaMano cartasDelPie: cartasDelPie 
	
	self laCantidadDeCartasTieneQueSerTres: cartasDeLaMano.
	self laCantidadDeCartasTieneQueSerTres: cartasDelPie.
	
	cartasDeLaMano do: [:carta | (carta isKindOf: CartaDeTruco) not ifTrue: [self error: self class lasCartasNoSonCartasDeTrucoErrorDescription ]]
	
	^self new.! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 18:33:32' prior: 50860887!
cartasDeLaMano: cartasDeLaMano cartasDelPie: cartasDelPie 
	
	self laCantidadDeCartasTieneQueSerTres: cartasDeLaMano.
	self laCantidadDeCartasTieneQueSerTres: cartasDelPie.
	
	cartasDeLaMano do: [:carta | (carta isKindOf: CartaDeTruco) not ifTrue: [self error: self class lasCartasNoSonCartasDeTrucoErrorDescription ]].
	
	^self new.! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 18:34:28' prior: 50860825!
test04_lasCartasDeLaManoTienenQueSerCartasDeTruco

	| cartasDeLaMano |
	cartasDeLaMano := OrderedCollection with: 1 with: CartaDeTruco anchoDeBasto with: 'el ancho'.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: cartasDeLaMano yCartasDelPie: self cartasPorDefecto] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco lasCartasNoSonCartasDeTrucoErrorDescription.! !

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 18:34:29'!
ERROR!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 18:34:46'!
ERROR!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 18:34:53' prior: 50860901!
cartasDeLaMano: cartasDeLaMano cartasDelPie: cartasDelPie 
	
	self laCantidadDeCartasTieneQueSerTres: cartasDeLaMano.
	self laCantidadDeCartasTieneQueSerTres: cartasDelPie.
	
	cartasDeLaMano do: [:carta | (carta isKindOf: CartaDeTruco) not ifTrue: [self error: self class lasCartasNoSonCartasDeTrucoErrorDescription ]].
	
	^self new.! !

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 18:35:04'!
ERROR!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 18:36:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 18:36:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 18:36:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 18:36:50'!
ERROR!

!testRun: #RondaDeTrucoTest #test04_lasCartasTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 18:36:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 18:36:50'!
ERROR!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 18:37:44' prior: 50860938!
cartasDeLaMano: cartasDeLaMano cartasDelPie: cartasDelPie 
	
	self laCantidadDeCartasTieneQueSerTres: cartasDeLaMano.
	self laCantidadDeCartasTieneQueSerTres: cartasDelPie.
	
	cartasDeLaMano do: [:carta | (carta isKindOf: CartaDeTruco) not ifTrue: [self error: self lasCartasNoSonCartasDeTrucoErrorDescription ]].
	
	^self new.! !

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 18:37:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 18:37:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 18:37:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 18:37:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 18:37:45'!
PASSED!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 18:38:17'!
test04_lasCartasDelPieTienenQueSerCartasDeTruco

	| cartasDelPie |
	cartasDelPie := OrderedCollection with: 1.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: self cartasPorDefecto yCartasDelPie:  cartasDelPie] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConMenosDeTresCartasErrorDescription.! !

!methodRemoval: RondaDeTrucoTest #test04_lasCartasTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 18:38:17'!
test04_lasCartasTienenQueSerCartasDeTruco

	| cartasDelPie |
	cartasDelPie := OrderedCollection with: 1.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: self cartasPorDefecto yCartasDelPie:  cartasDelPie] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConMenosDeTresCartasErrorDescription.!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 18:38:25'!
test05_lasCartasDelPieTienenQueSerCartasDeTruco

	| cartasDelPie |
	cartasDelPie := OrderedCollection with: 1.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: self cartasPorDefecto yCartasDelPie:  cartasDelPie] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConMenosDeTresCartasErrorDescription.! !

!methodRemoval: RondaDeTrucoTest #test04_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 18:38:25'!
test04_lasCartasDelPieTienenQueSerCartasDeTruco

	| cartasDelPie |
	cartasDelPie := OrderedCollection with: 1.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: self cartasPorDefecto yCartasDelPie:  cartasDelPie] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConMenosDeTresCartasErrorDescription.!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 18:38:32' prior: 50861037!
test05_lasCartasDelPieTienenQueSerCartasDeTruco

	| cartasDelPie |
	cartasDelPie := OrderedCollection with: 1.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: self cartasPorDefecto yCartasDelPie: cartasDelPie] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConMenosDeTresCartasErrorDescription.! !

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 18:38:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 18:38:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 18:38:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 18:38:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 18:38:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 18:38:33'!
PASSED!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 18:38:58' prior: 50861065!
test05_lasCartasDelPieTienenQueSerCartasDeTruco

	| cartasDelPie |
	cartasDelPie := OrderedCollection with: 1.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: self cartasPorDefecto yCartasDelPie: cartasDelPie] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco lasCartasNoSonCartasDeTrucoErrorDescription.! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 18:39:09' prior: 50861101!
test05_lasCartasDelPieTienenQueSerCartasDeTruco

	| cartasDelPie |
	cartasDelPie := OrderedCollection with: 1 with: CartaDeTruco anchoDeBasto with: 'el ancho'.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: self cartasPorDefecto yCartasDelPie: cartasDelPie] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco lasCartasNoSonCartasDeTrucoErrorDescription.! !

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 18:39:10'!
FAILURE!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 18:39:35' prior: 50860978!
cartasDeLaMano: cartasDeLaMano cartasDelPie: cartasDelPie 
	
	self laCantidadDeCartasTieneQueSerTres: cartasDeLaMano.
	self laCantidadDeCartasTieneQueSerTres: cartasDelPie.
	
	cartasDeLaMano do: [:carta | (carta isKindOf: CartaDeTruco) not ifTrue: [self error: self lasCartasNoSonCartasDeTrucoErrorDescription ]].
	cartasDelPie do: [:carta | (carta isKindOf: CartaDeTruco) not ifTrue: [self error: self lasCartasNoSonCartasDeTrucoErrorDescription ]].
	
	^self new.! !

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 18:39:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 18:39:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 18:39:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 18:39:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 18:39:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 18:39:36'!
PASSED!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 18:40:11'!
tienenQueSerCartasDeTruco: cartasDeLaMano

	^ cartasDeLaMano do: [:carta | (carta isKindOf: CartaDeTruco) not ifTrue: [self error: self lasCartasNoSonCartasDeTrucoErrorDescription ]]! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 18:40:11' prior: 50861135!
cartasDeLaMano: cartasDeLaMano cartasDelPie: cartasDelPie 
	
	self laCantidadDeCartasTieneQueSerTres: cartasDeLaMano.
	self laCantidadDeCartasTieneQueSerTres: cartasDelPie.
	
	self tienenQueSerCartasDeTruco: cartasDeLaMano.
	cartasDelPie do: [:carta | (carta isKindOf: CartaDeTruco) not ifTrue: [self error: self lasCartasNoSonCartasDeTrucoErrorDescription ]].
	
	^self new.! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 18:40:27' prior: 50861184!
cartasDeLaMano: cartasDeLaMano cartasDelPie: cartasDelPie 
	
	self laCantidadDeCartasTieneQueSerTres: cartasDeLaMano.
	self laCantidadDeCartasTieneQueSerTres: cartasDelPie.
	
	self tienenQueSerCartasDeTruco: cartasDeLaMano.
	self tienenQueSerCartasDeTruco: cartasDelPie.
	
	^self new.! !
!RondaDeTruco class methodsFor: 'assertions' stamp: 'DB 7/5/2021 18:40:44' prior: 50861175!
tienenQueSerCartasDeTruco: cartas

	^ cartas do: [:carta | (carta isKindOf: CartaDeTruco) not ifTrue: [self error: self lasCartasNoSonCartasDeTrucoErrorDescription ]]! !

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 18:40:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 18:40:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 18:40:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 18:40:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 18:40:46'!
PASSED!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 18:43:07'!
test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas

	| cartasDeLaMano |
	cartasDeLaMano := OrderedCollection 
		with: CartaDeTruco anchoDeBasto 
		with: CartaDeTruco anchoDeEspada 
		with: CartaDeTruco sieteDeEspada 
		with: CartaDeTruco sieteDeOro.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: cartasDeLaMano yCartasDelPie: self cartasPorDefecto] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConMenosDeTresCartasErrorDescription.! !

!testRun: #RondaDeTrucoTest #test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas stamp: 'DB 7/5/2021 18:43:12'!
FAILURE!
!RondaDeTruco class methodsFor: 'assertions' stamp: 'DB 7/5/2021 18:43:59' prior: 50860755!
laCantidadDeCartasTieneQueSerTres: cartas

	^ (cartas size = 3) ifTrue: [	self error: self jugadorConMenosDeTresCartasErrorDescription]! !

!testRun: #RondaDeTrucoTest #test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas stamp: 'DB 7/5/2021 18:44:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 18:44:00'!
ERROR!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 18:44:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 18:44:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 18:44:00'!
FAILURE!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 18:44:00'!
FAILURE!

!testRun: #RondaDeTrucoTest #test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas stamp: 'DB 7/5/2021 18:44:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 18:44:09'!
ERROR!

self size!
!RondaDeTruco class methodsFor: 'assertions' stamp: 'DB 7/5/2021 18:44:47' prior: 50861261!
laCantidadDeCartasTieneQueSerTres: cartas

	^ (cartas size = 3) ifFalse: [	self error: self jugadorConMenosDeTresCartasErrorDescription]! !

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 18:44:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 18:44:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 18:44:49'!
PASSED!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 18:45:11'!
test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas

	| cartasDeLaMano |
	cartasDeLaMano := OrderedCollection 
		with: CartaDeTruco anchoDeBasto 
		with: CartaDeTruco anchoDeEspada 
		with: CartaDeTruco sieteDeEspada 
		with: CartaDeTruco sieteDeOro.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: cartasDeLaMano yCartasDelPie: self cartasPorDefecto] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConMenosDeTresCartasErrorDescription.! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 18:45:23' prior: 50861317!
test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas

	| cartasDeLaMano |
	cartasDeLaMano := OrderedCollection 
		with: CartaDeTruco anchoDeBasto 
		with: CartaDeTruco anchoDeEspada 
		with: CartaDeTruco sieteDeEspada 
		with: CartaDeTruco sieteDeOro.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: cartasDeLaMano yCartasDelPie: self cartasPorDefecto] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConMenosDeTresCartasErrorDescription.! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 18:45:44' prior: 50861336!
test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas

	| cartasDelPie |
	cartasDelPie := OrderedCollection 
		with: CartaDeTruco anchoDeBasto 
		with: CartaDeTruco anchoDeEspada 
		with: CartaDeTruco sieteDeEspada 
		with: CartaDeTruco sieteDeOro.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: cartasDelPie yCartasDelPie: self cartasPorDefecto] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConMenosDeTresCartasErrorDescription.! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 18:45:55' prior: 50861355!
test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas

	| cartasDelPie |
	cartasDelPie := OrderedCollection 
		with: CartaDeTruco anchoDeBasto 
		with: CartaDeTruco anchoDeEspada 
		with: CartaDeTruco sieteDeEspada 
		with: CartaDeTruco sieteDeOro.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: self cartasPorDefecto yCartasDelPie: cartasDelPie] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConMenosDeTresCartasErrorDescription.! !

!testRun: #RondaDeTrucoTest #test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas stamp: 'DB 7/5/2021 18:45:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 18:45:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 18:45:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 18:45:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 18:45:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 18:45:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas stamp: 'DB 7/5/2021 18:45:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas stamp: 'DB 7/5/2021 18:45:57'!
PASSED!
!RondaDeTruco class methodsFor: 'error descriptions' stamp: 'DB 7/5/2021 18:47:19'!
jugadorConCantidadIncorrectasDeCartasErrorDescription
	^'No se puede crear una si el jugador tiene menos de tres cartas'! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 18:47:19' prior: 50860567!
test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas

	| cartasDelPie |
	cartasDelPie := OrderedCollection with: CartaDeTruco anchoDeBasto.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: self cartasPorDefecto yCartasDelPie:  cartasDelPie] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConCantidadIncorrectasDeCartasErrorDescription.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 18:47:19' prior: 50861238!
test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas

	| cartasDeLaMano |
	cartasDeLaMano := OrderedCollection 
		with: CartaDeTruco anchoDeBasto 
		with: CartaDeTruco anchoDeEspada 
		with: CartaDeTruco sieteDeEspada 
		with: CartaDeTruco sieteDeOro.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: cartasDeLaMano yCartasDelPie: self cartasPorDefecto] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConCantidadIncorrectasDeCartasErrorDescription.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 18:47:19' prior: 50860697!
test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas

	| cartasDeLaMano |
	cartasDeLaMano := OrderedCollection with: CartaDeTruco anchoDeBasto.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: cartasDeLaMano yCartasDelPie: self cartasPorDefecto] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConCantidadIncorrectasDeCartasErrorDescription.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 18:47:19' prior: 50861373!
test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas

	| cartasDelPie |
	cartasDelPie := OrderedCollection 
		with: CartaDeTruco anchoDeBasto 
		with: CartaDeTruco anchoDeEspada 
		with: CartaDeTruco sieteDeEspada 
		with: CartaDeTruco sieteDeOro.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: self cartasPorDefecto yCartasDelPie: cartasDelPie] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConCantidadIncorrectasDeCartasErrorDescription.! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 18:47:19' prior: 50861299!
laCantidadDeCartasTieneQueSerTres: cartas

	^ (cartas size = 3) ifFalse: [	self error: self jugadorConCantidadIncorrectasDeCartasErrorDescription]! !

!methodRemoval: RondaDeTruco class #jugadorConMenosDeTresCartasErrorDescription stamp: 'DB 7/5/2021 18:47:19'!
jugadorConMenosDeTresCartasErrorDescription
	^'No se puede crear una si el jugador tiene menos de tres cartas'!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 18:47:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 18:47:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 18:47:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 18:47:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 18:47:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas stamp: 'DB 7/5/2021 18:47:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas stamp: 'DB 7/5/2021 18:47:22'!
PASSED!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 18:48:35'!
test08_laManoNoPuedeTenerCartasDuplicadas

	| cartasDelPie |
	cartasDelPie := OrderedCollection 
		with: CartaDeTruco anchoDeBasto 
		with: CartaDeTruco anchoDeEspada 
		with: CartaDeTruco sieteDeEspada 
		with: CartaDeTruco sieteDeOro.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: self cartasPorDefecto yCartasDelPie: cartasDelPie] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConCantidadIncorrectasDeCartasErrorDescription.! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 18:49:42' prior: 50861540!
test08_laManoNoPuedeTenerCartasDuplicadas

	| cartasDelPie |
	cartasDelPie := OrderedCollection 
		with: CartaDeTruco anchoDeBasto 
		with: CartaDeTruco anchoDeEspada 
		with: CartaDeTruco anchoDeBasto.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: self cartasPorDefecto yCartasDelPie: cartasDelPie] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConCantidadIncorrectasDeCartasErrorDescription.! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 18:49:56' prior: 50861558!
test08_laManoNoPuedeTenerCartasDuplicadas

	| cartasDeLaMano |
	cartasDeLaMano := OrderedCollection 
		with: CartaDeTruco anchoDeBasto 
		with: CartaDeTruco anchoDeEspada 
		with: CartaDeTruco anchoDeBasto.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: self cartasPorDefecto yCartasDelPie: cartasDeLaMano] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConCantidadIncorrectasDeCartasErrorDescription.! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 18:50:10' prior: 50861575!
test08_laManoNoPuedeTenerCartasDuplicadas

	| cartasDeLaMano |
	cartasDeLaMano := OrderedCollection 
		with: CartaDeTruco anchoDeBasto 
		with: CartaDeTruco anchoDeEspada 
		with: CartaDeTruco anchoDeBasto.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: cartasDeLaMano yCartasDelPie: self cartasPorDefecto ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConCantidadIncorrectasDeCartasErrorDescription.! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 18:50:31' prior: 50861592!
test08_laManoNoPuedeTenerCartasDuplicadas

	| cartasDeLaMano |
	cartasDeLaMano := OrderedCollection 
		with: CartaDeTruco anchoDeBasto 
		with: CartaDeTruco anchoDeEspada 
		with: CartaDeTruco anchoDeBasto.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: cartasDeLaMano yCartasDelPie: self cartasPorDefecto ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco lasCartasNoPuedenEstarDuplicadasErrorDescription.! !

!testRun: #RondaDeTrucoTest #test08_laManoNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 18:50:34'!
ERROR!
!RondaDeTruco class methodsFor: 'error descriptions' stamp: 'DB 7/5/2021 18:50:47'!
lasCartasNoPuedenEstarDuplicadasErrorDescription
	self shouldBeImplemented.! !
!RondaDeTruco class methodsFor: 'error descriptions' stamp: 'DB 7/5/2021 18:51:04' prior: 50861630!
lasCartasNoPuedenEstarDuplicadasErrorDescription
	^'Las cartas no pueden estar duplicadas'! !

!testRun: #RondaDeTrucoTest #test08_laManoNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 18:51:06'!
FAILURE!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 18:52:49' prior: 50861199!
cartasDeLaMano: cartasDeLaMano cartasDelPie: cartasDelPie 
	
	self laCantidadDeCartasTieneQueSerTres: cartasDeLaMano.
	self laCantidadDeCartasTieneQueSerTres: cartasDelPie.
	
	self tienenQueSerCartasDeTruco: cartasDeLaMano.
	self tienenQueSerCartasDeTruco: cartasDelPie.
	
	
	
	
	^self new.! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 18:59:18' prior: 50861646!
cartasDeLaMano: cartasDeLaMano cartasDelPie: cartasDelPie 
	
	| mazo |
	self laCantidadDeCartasTieneQueSerTres: cartasDeLaMano.
	self laCantidadDeCartasTieneQueSerTres: cartasDelPie.
	
	self tienenQueSerCartasDeTruco: cartasDeLaMano.
	self tienenQueSerCartasDeTruco: cartasDelPie.
	
	mazo := Bag new.
	cartasDeLaMano do: [:carta | mazo add: carta.		].
	
	^self new.! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 19:01:15' prior: 50861659!
cartasDeLaMano: cartasDeLaMano cartasDelPie: cartasDelPie 
	
	| mazo |
	self laCantidadDeCartasTieneQueSerTres: cartasDeLaMano.
	self laCantidadDeCartasTieneQueSerTres: cartasDelPie.
	
	self tienenQueSerCartasDeTruco: cartasDeLaMano.
	self tienenQueSerCartasDeTruco: cartasDelPie.
	
	mazo := Bag new.
	cartasDeLaMano do: [:carta | mazo add: carta.		].
	
	mazo do: [:carta |
		" ((mazo occurrencesOf: carta) = 1) not ifTrue: [self error: self lasCartasNoPuedenEstarDuplicadasErrorDescription ]."
	].
	
	^self new.! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 19:01:49' prior: 50861674!
cartasDeLaMano: cartasDeLaMano cartasDelPie: cartasDelPie 
	
	| mazo |
	self laCantidadDeCartasTieneQueSerTres: cartasDeLaMano.
	self laCantidadDeCartasTieneQueSerTres: cartasDelPie.
	
	self tienenQueSerCartasDeTruco: cartasDeLaMano.
	self tienenQueSerCartasDeTruco: cartasDelPie.
	
	mazo := Bag new.
	cartasDeLaMano do: [:carta | mazo add: carta.		].
	
	mazo do: [:carta |
		
		(mazo occurrencesOf: carta) = 1 ifFalse: [self error: self lasCartasNoPuedenEstarDuplicadasErrorDescription ]
		" ((mazo occurrencesOf: carta) = 1) not ifTrue: [self error: self lasCartasNoPuedenEstarDuplicadasErrorDescription ]."
	].
	
	^self new.! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 19:01:55' prior: 50861694!
cartasDeLaMano: cartasDeLaMano cartasDelPie: cartasDelPie 
	
	| mazo |
	self laCantidadDeCartasTieneQueSerTres: cartasDeLaMano.
	self laCantidadDeCartasTieneQueSerTres: cartasDelPie.
	
	self tienenQueSerCartasDeTruco: cartasDeLaMano.
	self tienenQueSerCartasDeTruco: cartasDelPie.
	
	mazo := Bag new.
	cartasDeLaMano do: [:carta | mazo add: carta.		].
	
	mazo do: [:carta |
		(mazo occurrencesOf: carta) = 1 ifFalse: [self error: self lasCartasNoPuedenEstarDuplicadasErrorDescription ]
	].
	
	^self new.! !

(mazo occurrencesOf: carta)!

!testRun: #RondaDeTrucoTest #test08_laManoNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 19:02:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 19:02:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 19:02:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 19:02:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 19:02:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 19:02:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas stamp: 'DB 7/5/2021 19:02:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas stamp: 'DB 7/5/2021 19:02:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test08_laManoNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 19:02:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test08_laManoNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 19:02:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 19:02:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 19:02:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 19:02:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 19:02:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 19:02:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas stamp: 'DB 7/5/2021 19:02:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas stamp: 'DB 7/5/2021 19:02:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test08_laManoNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 19:02:34'!
PASSED!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 19:03:04'!
test09_elPieNoPuedeTenerCartasDuplicadas

	| cartasDelPie |
	cartasDelPie := OrderedCollection 
		with: CartaDeTruco anchoDeBasto 
		with: CartaDeTruco anchoDeEspada 
		with: CartaDeTruco anchoDeBasto.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: self cartasPorDefecto yCartasDelPie: cartasDelPie ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco lasCartasNoPuedenEstarDuplicadasErrorDescription.! !

!testRun: #RondaDeTrucoTest #test09_elPieNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 19:03:05'!
FAILURE!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 19:03:41' prior: 50861717!
cartasDeLaMano: cartasDeLaMano cartasDelPie: cartasDelPie 
	
	| mazo |
	self laCantidadDeCartasTieneQueSerTres: cartasDeLaMano.
	self laCantidadDeCartasTieneQueSerTres: cartasDelPie.
	
	self tienenQueSerCartasDeTruco: cartasDeLaMano.
	self tienenQueSerCartasDeTruco: cartasDelPie.
	
	mazo := Bag new.
	cartasDeLaMano do: [:carta | mazo add: carta.		].
	
	mazo do: [:carta |
		(mazo occurrencesOf: carta) = 1 ifFalse: [self error: self lasCartasNoPuedenEstarDuplicadasErrorDescription ]
	].

	mazo := Bag new.
	cartasDelPie do: [:carta | mazo add: carta.		].
	
	mazo do: [:carta |
		(mazo occurrencesOf: carta) = 1 ifFalse: [self error: self lasCartasNoPuedenEstarDuplicadasErrorDescription ]
	].
	
	^self new.! !

!testRun: #RondaDeTrucoTest #test09_elPieNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 19:03:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 19:03:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 19:03:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 19:03:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 19:03:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 19:03:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas stamp: 'DB 7/5/2021 19:03:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas stamp: 'DB 7/5/2021 19:03:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test08_laManoNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 19:03:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test09_elPieNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 19:03:42'!
PASSED!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 19:05:15'!
noPuedenHaberCartasDuplicadas: cartasDeLaMano sinDuplicadas: mazo

	cartasDeLaMano do: [:carta | mazo add: carta.		].
	
	mazo do: [:carta |
		(mazo occurrencesOf: carta) = 1 ifFalse: [self error: self lasCartasNoPuedenEstarDuplicadasErrorDescription ]
	]! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 19:05:15' prior: 50861825!
cartasDeLaMano: cartasDeLaMano cartasDelPie: cartasDelPie 
	
	| mazo |
	self laCantidadDeCartasTieneQueSerTres: cartasDeLaMano.
	self laCantidadDeCartasTieneQueSerTres: cartasDelPie.
	
	self tienenQueSerCartasDeTruco: cartasDeLaMano.
	self tienenQueSerCartasDeTruco: cartasDelPie.
	
	mazo := Bag new.
	self noPuedenHaberCartasDuplicadas: cartasDeLaMano sinDuplicadas: mazo.

	mazo := Bag new.
	cartasDelPie do: [:carta | mazo add: carta.		].
	
	mazo do: [:carta |
		(mazo occurrencesOf: carta) = 1 ifFalse: [self error: self lasCartasNoPuedenEstarDuplicadasErrorDescription ]
	].
	
	^self new.! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 19:05:45' prior: 50861887!
noPuedenHaberCartasDuplicadas: cartasDeLaMano sinDuplicadas: mazo

	
	| mazo2 |
	mazo2 := Bag new.
	
	cartasDeLaMano do: [:carta | mazo add: carta.		].
	
	mazo do: [:carta |
		(mazo occurrencesOf: carta) = 1 ifFalse: [self error: self lasCartasNoPuedenEstarDuplicadasErrorDescription ]
	]! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 19:06:06' prior: 50861921!
noPuedenHaberCartasDuplicadas: cartasDeLaMano sinDuplicadas: mazo

	
	| mazo2 |
	mazo2 := Bag new.
	
	cartasDeLaMano do: [:carta | mazo2 add: carta.		].
	
	mazo do: [:carta |
		(mazo occurrencesOf: carta) = 1 ifFalse: [self error: self lasCartasNoPuedenEstarDuplicadasErrorDescription ]
	]! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 19:06:31' prior: 50861899!
cartasDeLaMano: cartasDeLaMano cartasDelPie: cartasDelPie 
	
	| mazo |
	self laCantidadDeCartasTieneQueSerTres: cartasDeLaMano.
	self laCantidadDeCartasTieneQueSerTres: cartasDelPie.
	
	self tienenQueSerCartasDeTruco: cartasDeLaMano.
	self tienenQueSerCartasDeTruco: cartasDelPie.
	
	
	self noPuedenHaberCartasDuplicadas: cartasDeLaMano.

	mazo := Bag new.
	cartasDelPie do: [:carta | mazo add: carta.		].
	
	mazo do: [:carta |
		(mazo occurrencesOf: carta) = 1 ifFalse: [self error: self lasCartasNoPuedenEstarDuplicadasErrorDescription ]
	].
	
	^self new.! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 19:06:42' prior: 50861947!
cartasDeLaMano: cartasDeLaMano cartasDelPie: cartasDelPie 
	
	| mazo |
	self laCantidadDeCartasTieneQueSerTres: cartasDeLaMano.
	self laCantidadDeCartasTieneQueSerTres: cartasDelPie.
	
	self tienenQueSerCartasDeTruco: cartasDeLaMano.
	self tienenQueSerCartasDeTruco: cartasDelPie.
	
	self noPuedenHaberCartasDuplicadas: cartasDeLaMano.

	mazo := Bag new.
	cartasDelPie do: [:carta | mazo add: carta.		].
	
	mazo do: [:carta |
		(mazo occurrencesOf: carta) = 1 ifFalse: [self error: self lasCartasNoPuedenEstarDuplicadasErrorDescription ]
	].
	
	^self new.! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 19:07:21' prior: 50861934!
noPuedenHaberCartasDuplicadas: cartasDeLaMano sinDuplicadas: mazo

	
	| mazo2 |
	mazo2 := Bag new.
	
	cartasDeLaMano do: [:carta | mazo2 add: carta.		].
	
	mazo2 do: [:carta |
		(mazo2 occurrencesOf: carta) = 1 ifFalse: [self error: self lasCartasNoPuedenEstarDuplicadasErrorDescription ]
	]! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 19:07:25'!
noPuedenHaberCartasDuplicadas: cartasDeLaMano 

	
	| mazo2 |
	mazo2 := Bag new.
	
	cartasDeLaMano do: [:carta | mazo2 add: carta.		].
	
	mazo2 do: [:carta |
		(mazo2 occurrencesOf: carta) = 1 ifFalse: [self error: self lasCartasNoPuedenEstarDuplicadasErrorDescription ]
	]! !

!methodRemoval: RondaDeTruco class #noPuedenHaberCartasDuplicadas:sinDuplicadas: stamp: 'DB 7/5/2021 19:07:25'!
noPuedenHaberCartasDuplicadas: cartasDeLaMano sinDuplicadas: mazo

	
	| mazo2 |
	mazo2 := Bag new.
	
	cartasDeLaMano do: [:carta | mazo2 add: carta.		].
	
	mazo2 do: [:carta |
		(mazo2 occurrencesOf: carta) = 1 ifFalse: [self error: self lasCartasNoPuedenEstarDuplicadasErrorDescription ]
	]!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 19:07:31' prior: 50862001!
noPuedenHaberCartasDuplicadas: cartasDeLaMano 

	
	| mazo |
	mazo := Bag new.
	
	cartasDeLaMano do: [:carta | mazo add: carta.		].
	
	mazo do: [:carta |
		(mazo occurrencesOf: carta) = 1 ifFalse: [self error: self lasCartasNoPuedenEstarDuplicadasErrorDescription ]
	]! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 19:07:36' prior: 50862026!
noPuedenHaberCartasDuplicadas: cartasDeLaMano 
	
	| mazo |
	mazo := Bag new.
	
	cartasDeLaMano do: [:carta | mazo add: carta.		].
	
	mazo do: [:carta |
		(mazo occurrencesOf: carta) = 1 ifFalse: [self error: self lasCartasNoPuedenEstarDuplicadasErrorDescription ]
	]! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 19:07:52' prior: 50861968!
cartasDeLaMano: cartasDeLaMano cartasDelPie: cartasDelPie 
	
	
	self laCantidadDeCartasTieneQueSerTres: cartasDeLaMano.
	self laCantidadDeCartasTieneQueSerTres: cartasDelPie.
	
	self tienenQueSerCartasDeTruco: cartasDeLaMano.
	self tienenQueSerCartasDeTruco: cartasDelPie.
	
	self noPuedenHaberCartasDuplicadas: cartasDeLaMano.
	self noPuedenHaberCartasDuplicadas: cartasDelPie .	
	^self new.! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 19:07:57' prior: 50862050!
cartasDeLaMano: cartasDeLaMano cartasDelPie: cartasDelPie 
	
	
	self laCantidadDeCartasTieneQueSerTres: cartasDeLaMano.
	self laCantidadDeCartasTieneQueSerTres: cartasDelPie.
	
	self tienenQueSerCartasDeTruco: cartasDeLaMano.
	self tienenQueSerCartasDeTruco: cartasDelPie.
	
	self noPuedenHaberCartasDuplicadas: cartasDeLaMano.
	self noPuedenHaberCartasDuplicadas: cartasDelPie .	
	
	^self new.! !

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 19:07:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 19:07:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 19:07:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 19:07:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 19:07:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas stamp: 'DB 7/5/2021 19:07:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas stamp: 'DB 7/5/2021 19:07:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test08_laManoNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 19:07:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test09_elPieNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 19:07:58'!
PASSED!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 19:09:49'!
test09_lasCartasRepartidasNoPuedenTenerDuplicados

	| cartasDelPie cartasDeLaMano |
	cartasDelPie := OrderedCollection 
		with: CartaDeTruco anchoDeBasto 
		with: CartaDeTruco anchoDeEspada 
		with: CartaDeTruco sieteDeEspada.
		
	cartasDeLaMano := OrderedCollection 
		with: CartaDeTruco sieteDeOro 
		with: CartaDeTruco anchoDeBasto 
		with: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: self cartasPorDefecto yCartasDelPie: cartasDelPie ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco lasCartasNoPuedenEstarDuplicadasErrorDescription.! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 19:10:00' prior: 50862115!
test09_lasCartasRepartidasNoPuedenTenerDuplicados

	| cartasDelPie cartasDeLaMano |
	cartasDelPie := OrderedCollection 
		with: CartaDeTruco anchoDeBasto 
		with: CartaDeTruco anchoDeEspada 
		with: CartaDeTruco sieteDeEspada.
		
	cartasDeLaMano := OrderedCollection 
		with: CartaDeTruco sieteDeOro 
		with: CartaDeTruco anchoDeBasto 
		with: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: cartasDeLaMano yCartasDelPie: cartasDelPie ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco lasCartasNoPuedenEstarDuplicadasErrorDescription.! !

!testRun: #RondaDeTrucoTest #test09_lasCartasRepartidasNoPuedenTenerDuplicados stamp: 'DB 7/5/2021 19:10:04'!
FAILURE!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 19:11:15'!
noPuedenHaberCartasDuplicadas: cartasDeLaMano con: cartasDelPie  
	
	| mazo |
	mazo := Bag new.
	
	cartasDeLaMano do: [:carta | mazo add: carta.		].
	
	mazo do: [:carta |
		(mazo occurrencesOf: carta) = 1 ifFalse: [self error: self lasCartasNoPuedenEstarDuplicadasErrorDescription ]
	]! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 19:11:15' prior: 50862066!
cartasDeLaMano: cartasDeLaMano cartasDelPie: cartasDelPie 
	
	
	self laCantidadDeCartasTieneQueSerTres: cartasDeLaMano.
	self laCantidadDeCartasTieneQueSerTres: cartasDelPie.
	
	self tienenQueSerCartasDeTruco: cartasDeLaMano.
	self tienenQueSerCartasDeTruco: cartasDelPie.
	
	self noPuedenHaberCartasDuplicadas: cartasDeLaMano con: cartasDelPie.
	self noPuedenHaberCartasDuplicadas: cartasDelPie con: cartasDelPie .	
	
	^self new.! !

!methodRemoval: RondaDeTruco class #noPuedenHaberCartasDuplicadas: stamp: 'DB 7/5/2021 19:11:15'!
noPuedenHaberCartasDuplicadas: cartasDeLaMano 
	
	| mazo |
	mazo := Bag new.
	
	cartasDeLaMano do: [:carta | mazo add: carta.		].
	
	mazo do: [:carta |
		(mazo occurrencesOf: carta) = 1 ifFalse: [self error: self lasCartasNoPuedenEstarDuplicadasErrorDescription ]
	]!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 19:11:40' prior: 50862176!
cartasDeLaMano: cartasDeLaMano cartasDelPie: cartasDelPie 
	
	
	self laCantidadDeCartasTieneQueSerTres: cartasDeLaMano.
	self laCantidadDeCartasTieneQueSerTres: cartasDelPie.
	
	self tienenQueSerCartasDeTruco: cartasDeLaMano.
	self tienenQueSerCartasDeTruco: cartasDelPie.
	
	self noPuedenHaberCartasDuplicadas: cartasDeLaMano con: cartasDelPie.
	
	^self new.! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 19:12:10' prior: 50862163!
noPuedenHaberCartasDuplicadas: cartasDeLaMano con: cartasDelPie  
	
	| mazo |
	mazo := Bag new.
	
	cartasDeLaMano do: [:carta | mazo add: carta.		].
	cartasDelPie do: [:carta | mazo add: carta.].
	
	mazo do: [:carta |
		(mazo occurrencesOf: carta) = 1 ifFalse: [self error: self lasCartasNoPuedenEstarDuplicadasErrorDescription ]
	]! !

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 19:12:13'!
ERROR!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 19:12:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 19:12:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 19:12:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 19:12:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas stamp: 'DB 7/5/2021 19:12:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas stamp: 'DB 7/5/2021 19:12:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test08_laManoNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 19:12:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test09_elPieNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 19:12:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test09_lasCartasRepartidasNoPuedenTenerDuplicados stamp: 'DB 7/5/2021 19:12:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 19:12:14'!
ERROR!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 19:12:31'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 19:12:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'DB 7/5/2021 19:12:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'DB 7/5/2021 19:12:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'DB 7/5/2021 19:12:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'DB 7/5/2021 19:12:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'DB 7/5/2021 19:12:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'DB 7/5/2021 19:12:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'DB 7/5/2021 19:12:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'DB 7/5/2021 19:12:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'DB 7/5/2021 19:12:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'DB 7/5/2021 19:12:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'DB 7/5/2021 19:12:33'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'DB 7/5/2021 19:12:34'!
ERROR!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'DB 7/5/2021 19:12:34'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'DB 7/5/2021 19:12:34'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'DB 7/5/2021 19:12:34'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'DB 7/5/2021 19:12:34'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'DB 7/5/2021 19:12:34'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'DB 7/5/2021 19:12:34'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'DB 7/5/2021 19:12:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 19:12:34'!
ERROR!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 19:12:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 19:12:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 19:12:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 19:12:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas stamp: 'DB 7/5/2021 19:12:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas stamp: 'DB 7/5/2021 19:12:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test08_laManoNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 19:12:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test09_elPieNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 19:12:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test09_lasCartasRepartidasNoPuedenTenerDuplicados stamp: 'DB 7/5/2021 19:12:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 19:12:48'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 19:13:32'!
repartirParaLaMano
	^OrderedCollection with: (CartaDeTruco bastoCon: 2) with: (CartaDeTruco bastoCon: 3) with: (CartaDeTruco bastoCon: 4)! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 19:13:32' prior: 50860680!
test01_arrancaJugandoSiempreLaMano

	| ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaLaMano.
	self assert: #mano equals: ronda aQuienLeToca.
! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 19:13:32' prior: 50861480!
test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas

	| cartasDelPie |
	cartasDelPie := OrderedCollection 
		with: CartaDeTruco anchoDeBasto 
		with: CartaDeTruco anchoDeEspada 
		with: CartaDeTruco sieteDeEspada 
		with: CartaDeTruco sieteDeOro.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: cartasDelPie] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConCantidadIncorrectasDeCartasErrorDescription.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 19:13:32' prior: 50861445!
test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas

	| cartasDeLaMano |
	cartasDeLaMano := OrderedCollection 
		with: CartaDeTruco anchoDeBasto 
		with: CartaDeTruco anchoDeEspada 
		with: CartaDeTruco sieteDeEspada 
		with: CartaDeTruco sieteDeOro.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: cartasDeLaMano yCartasDelPie: self repartirParaLaMano] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConCantidadIncorrectasDeCartasErrorDescription.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 19:13:33' prior: 50860915!
test04_lasCartasDeLaManoTienenQueSerCartasDeTruco

	| cartasDeLaMano |
	cartasDeLaMano := OrderedCollection with: 1 with: CartaDeTruco anchoDeBasto with: 'el ancho'.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: cartasDeLaMano yCartasDelPie: self repartirParaLaMano] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco lasCartasNoSonCartasDeTrucoErrorDescription.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 19:13:33' prior: 50861115!
test05_lasCartasDelPieTienenQueSerCartasDeTruco

	| cartasDelPie |
	cartasDelPie := OrderedCollection with: 1 with: CartaDeTruco anchoDeBasto with: 'el ancho'.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: cartasDelPie] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco lasCartasNoSonCartasDeTrucoErrorDescription.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 19:13:33' prior: 50861804!
test09_elPieNoPuedeTenerCartasDuplicadas

	| cartasDelPie |
	cartasDelPie := OrderedCollection 
		with: CartaDeTruco anchoDeBasto 
		with: CartaDeTruco anchoDeEspada 
		with: CartaDeTruco anchoDeBasto.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: cartasDelPie ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco lasCartasNoPuedenEstarDuplicadasErrorDescription.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 19:13:33' prior: 50861609!
test08_laManoNoPuedeTenerCartasDuplicadas

	| cartasDeLaMano |
	cartasDeLaMano := OrderedCollection 
		with: CartaDeTruco anchoDeBasto 
		with: CartaDeTruco anchoDeEspada 
		with: CartaDeTruco anchoDeBasto.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: cartasDeLaMano yCartasDelPie: self repartirParaLaMano ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco lasCartasNoPuedenEstarDuplicadasErrorDescription.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 19:13:33' prior: 50861429!
test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas

	| cartasDelPie |
	cartasDelPie := OrderedCollection with: CartaDeTruco anchoDeBasto.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie:  cartasDelPie] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConCantidadIncorrectasDeCartasErrorDescription.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 19:13:33' prior: 50861464!
test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas

	| cartasDeLaMano |
	cartasDeLaMano := OrderedCollection with: CartaDeTruco anchoDeBasto.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: cartasDeLaMano yCartasDelPie: self repartirParaLaMano] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConCantidadIncorrectasDeCartasErrorDescription.! !

!methodRemoval: RondaDeTrucoTest #cartasPorDefecto stamp: 'DB 7/5/2021 19:13:33'!
cartasPorDefecto
	^OrderedCollection with: (CartaDeTruco bastoCon: 2) with: (CartaDeTruco bastoCon: 3) with: (CartaDeTruco bastoCon: 4)!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 19:13:50'!
repartirParaElPie
	^OrderedCollection with: (CartaDeTruco bastoCon: 2) with: (CartaDeTruco bastoCon: 3) with: (CartaDeTruco bastoCon: 4)! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 19:14:13' prior: 50862547!
repartirParaElPie
	^OrderedCollection with: (CartaDeTruco anchoDeBasto ) with: (CartaDeTruco anchoDeEspada ) with: (CartaDeTruco bastoCon: 7)! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 19:14:28' prior: 50862394!
test01_arrancaJugandoSiempreLaMano

	| ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie .
	self assert: #mano equals: ronda aQuienLeToca.
! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 19:14:42' prior: 50862525!
test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas

	| cartasDeLaMano |
	cartasDeLaMano := OrderedCollection with: CartaDeTruco anchoDeBasto.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: cartasDeLaMano yCartasDelPie: self repartirParaElPie ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConCantidadIncorrectasDeCartasErrorDescription.! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 19:14:52' prior: 50862442!
test04_lasCartasDeLaManoTienenQueSerCartasDeTruco

	| cartasDeLaMano |
	cartasDeLaMano := OrderedCollection with: 1 with: CartaDeTruco anchoDeBasto with: 'el ancho'.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: cartasDeLaMano yCartasDelPie: self repartirParaElPie ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco lasCartasNoSonCartasDeTrucoErrorDescription.! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 19:15:16' prior: 50862423!
test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas

	| cartasDeLaMano |
	cartasDeLaMano := OrderedCollection 
		with: CartaDeTruco anchoDeBasto 
		with: CartaDeTruco anchoDeEspada 
		with: CartaDeTruco sieteDeEspada 
		with: CartaDeTruco sieteDeOro.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: cartasDeLaMano yCartasDelPie: self repartirParaElPie ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConCantidadIncorrectasDeCartasErrorDescription.! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 19:15:31' prior: 50862491!
test08_laManoNoPuedeTenerCartasDuplicadas

	| cartasDeLaMano |
	cartasDeLaMano := OrderedCollection 
		with: CartaDeTruco anchoDeBasto 
		with: CartaDeTruco anchoDeEspada 
		with: CartaDeTruco anchoDeBasto.
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: cartasDeLaMano yCartasDelPie: self repartirParaElPie ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco lasCartasNoPuedenEstarDuplicadasErrorDescription.! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 19:15:45'!
test10_lasCartasRepartidasNoPuedenTenerDuplicados

	| cartasDelPie cartasDeLaMano |
	cartasDelPie := OrderedCollection 
		with: CartaDeTruco anchoDeBasto 
		with: CartaDeTruco anchoDeEspada 
		with: CartaDeTruco sieteDeEspada.
		
	cartasDeLaMano := OrderedCollection 
		with: CartaDeTruco sieteDeOro 
		with: CartaDeTruco anchoDeBasto 
		with: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: cartasDeLaMano yCartasDelPie: cartasDelPie ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco lasCartasNoPuedenEstarDuplicadasErrorDescription.! !

!methodRemoval: RondaDeTrucoTest #test09_lasCartasRepartidasNoPuedenTenerDuplicados stamp: 'DB 7/5/2021 19:15:45'!
test09_lasCartasRepartidasNoPuedenTenerDuplicados

	| cartasDelPie cartasDeLaMano |
	cartasDelPie := OrderedCollection 
		with: CartaDeTruco anchoDeBasto 
		with: CartaDeTruco anchoDeEspada 
		with: CartaDeTruco sieteDeEspada.
		
	cartasDeLaMano := OrderedCollection 
		with: CartaDeTruco sieteDeOro 
		with: CartaDeTruco anchoDeBasto 
		with: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: cartasDeLaMano yCartasDelPie: cartasDelPie ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco lasCartasNoPuedenEstarDuplicadasErrorDescription.!

!testRun: #RondaDeTrucoTest #test10_lasCartasRepartidasNoPuedenTenerDuplicados stamp: 'DB 7/5/2021 19:15:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 19:15:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 19:15:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 19:15:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 19:15:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 19:15:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas stamp: 'DB 7/5/2021 19:15:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas stamp: 'DB 7/5/2021 19:15:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test08_laManoNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 19:15:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test09_elPieNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 19:15:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test10_lasCartasRepartidasNoPuedenTenerDuplicados stamp: 'DB 7/5/2021 19:15:48'!
PASSED!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 19:18:28'!
test11_cuandoArrancaElJuegoElPieEsperaSuTurno

	| cartasDelPie cartasDeLaMano |
	cartasDelPie := OrderedCollection 
		with: CartaDeTruco anchoDeBasto 
		with: CartaDeTruco anchoDeEspada 
		with: CartaDeTruco sieteDeEspada.
		
	cartasDeLaMano := OrderedCollection 
		with: CartaDeTruco sieteDeOro 
		with: CartaDeTruco anchoDeBasto 
		with: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: cartasDeLaMano yCartasDelPie: cartasDelPie ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco lasCartasNoPuedenEstarDuplicadasErrorDescription.! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 19:19:30' prior: 50862726!
test11_cuandoArrancaElJuegoElPieEsperaSuTurno

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	
	"
	self 
		should: [self crearRondaDeTrucoConCartasDeLaMano: cartasDeLaMano yCartasDelPie: cartasDelPie ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco lasCartasNoPuedenEstarDuplicadasErrorDescription."! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 19:33:48' prior: 50862748!
test11_cuandoArrancaElJuegoElPieEsperaSuTurno

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	
	
	self 
		should: [ronda tiraElPie: CartaDeTruco anchoDeBasto  ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco lasCartasNoPuedenEstarDuplicadasErrorDescriptionUnmatched! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 19:34:30' prior: 50862563!
test01_arrancaJugandoSiempreLaMano

	| ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie .
	self assert: ronda LeTocaALaMano.
! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 19:36:02'!
LeTocaALaMano
	^true! !

!methodRemoval: RondaDeTruco #aQuienLeToca stamp: 'DB 7/5/2021 19:36:16'!
aQuienLeToca
	^#mano!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 19:36:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 19:36:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 19:36:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 19:36:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 19:36:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 19:36:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas stamp: 'DB 7/5/2021 19:36:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas stamp: 'DB 7/5/2021 19:36:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test08_laManoNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 19:36:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test09_elPieNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 19:36:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test10_lasCartasRepartidasNoPuedenTenerDuplicados stamp: 'DB 7/5/2021 19:36:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test11_cuandoArrancaElJuegoElPieEsperaSuTurno stamp: 'DB 7/5/2021 19:36:29'!
ERROR!

!testRun: #RondaDeTrucoTest #test11_cuandoArrancaElJuegoElPieEsperaSuTurno stamp: 'DB 7/5/2021 19:36:29'!
ERROR!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 19:41:19' prior: 50862764!
test11_cuandoArrancaElJuegoElPieEsperaSuTurno

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	
	self 
		should: [ronda tiraElPie: CartaDeTruco anchoDeBasto] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			
			self assert: ronda esTurnoDeLaMano	]! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 19:41:32' prior: 50862779!
test01_arrancaJugandoSiempreLaMano

	| ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie .
	self assert: ronda esElTurnoDeLaMano.
! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 19:41:41'!
esElTurnoDeLaMano
	^true! !

!methodRemoval: RondaDeTruco #LeTocaALaMano stamp: 'DB 7/5/2021 19:41:41'!
LeTocaALaMano
	^true!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 19:42:34' prior: 50862843!
test11_cuandoArrancaElJuegoElPieEsperaSuTurno

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	
	self 
		should: [ronda tiraElPie: CartaDeTruco anchoDeBasto] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: CartaDeTruco noEsTuTurnoErrorDescription equals: anError.
			self assert: ronda esTurnoDeLaMano	]! !

!testRun: #RondaDeTrucoTest #test11_cuandoArrancaElJuegoElPieEsperaSuTurno stamp: 'DB 7/5/2021 19:42:36'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 19:42:43'!
tiraElPie: aCartaDeTruco 
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 19:43:17' prior: 50862893!
tiraElPie: aCartaDeTruco 
	self error: self class noEsTuTurnoErrorDescription ! !

!testRun: #RondaDeTrucoTest #test11_cuandoArrancaElJuegoElPieEsperaSuTurno stamp: 'DB 7/5/2021 19:43:18'!
ERROR!
!RondaDeTruco class methodsFor: 'error descriptions' stamp: 'DB 7/5/2021 19:43:26'!
noEsTuTurnoErrorDescription
	self shouldBeImplemented.! !
!RondaDeTruco class methodsFor: 'error descriptions' stamp: 'DB 7/5/2021 19:43:43' prior: 50862907!
noEsTuTurnoErrorDescription
	^'No es tu turno'! !

!testRun: #RondaDeTrucoTest #test11_cuandoArrancaElJuegoElPieEsperaSuTurno stamp: 'DB 7/5/2021 19:43:43'!
ERROR!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 19:44:11' prior: 50862873!
test11_cuandoArrancaElJuegoElPieEsperaSuTurno

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	
	self 
		should: [ronda tiraElPie: CartaDeTruco anchoDeBasto] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: RondaDeTruco noEsTuTurnoErrorDescription equals: anError.
			self assert: ronda esTurnoDeLaMano	]! !

!testRun: #RondaDeTrucoTest #test11_cuandoArrancaElJuegoElPieEsperaSuTurno stamp: 'DB 7/5/2021 19:44:12'!
FAILURE!

!testRun: #RondaDeTrucoTest #test11_cuandoArrancaElJuegoElPieEsperaSuTurno stamp: 'DB 7/5/2021 19:44:27'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 19:44:47' prior: 50862920!
test11_cuandoArrancaElJuegoElPieEsperaSuTurno

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	
	self 
		should: [ronda tiraElPie: CartaDeTruco anchoDeBasto] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: RondaDeTruco noEsTuTurnoErrorDescription equals: anError.
			self assert: ronda esElTurnoDeLaMano	]! !

!testRun: #RondaDeTrucoTest #test11_cuandoArrancaElJuegoElPieEsperaSuTurno stamp: 'DB 7/5/2021 19:44:48'!
FAILURE!

!testRun: #RondaDeTrucoTest #test11_cuandoArrancaElJuegoElPieEsperaSuTurno stamp: 'DB 7/5/2021 19:44:54'!
FAILURE!

!testRun: #RondaDeTrucoTest #test11_cuandoArrancaElJuegoElPieEsperaSuTurno stamp: 'DB 7/5/2021 19:45:19'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 19:45:47' prior: 50862944!
test11_cuandoArrancaElJuegoElPieEsperaSuTurno

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	
	self 
		should: [ronda tiraElPie: CartaDeTruco anchoDeBasto] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: RondaDeTruco noEsTuTurnoErrorDescription equals: anError description .
			self assert: ronda esElTurnoDeLaMano	]! !

----SNAPSHOT----(5 July 2021 19:46:07) CuisUniversity-4532.image priorSource: 16934673!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 19:46:11' prior: 50862971!
test11_cuandoArrancaElJuegoElPieEsperaSuTurno

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	
	self 
		should: [ronda tiraElPie: CartaDeTruco anchoDeBasto] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: RondaDeTruco noEsTuTurnoErrorDescription equals: anError messageText .
			self assert: ronda esElTurnoDeLaMano	]! !

!testRun: #RondaDeTrucoTest #test11_cuandoArrancaElJuegoElPieEsperaSuTurno stamp: 'DB 7/5/2021 19:46:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 19:46:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 19:46:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 19:46:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 19:46:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 19:46:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas stamp: 'DB 7/5/2021 19:46:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas stamp: 'DB 7/5/2021 19:46:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test08_laManoNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 19:46:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test09_elPieNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 19:46:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test10_lasCartasRepartidasNoPuedenTenerDuplicados stamp: 'DB 7/5/2021 19:46:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test11_cuandoArrancaElJuegoElPieEsperaSuTurno stamp: 'DB 7/5/2021 19:46:12'!
PASSED!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 19:46:55'!
test12_laManoNoPuedeTirarCartasQueNoTenga

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	
	self 
		should: [ronda tiraElPie: CartaDeTruco anchoDeBasto] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: RondaDeTruco noEsTuTurnoErrorDescription equals: anError messageText .
			self assert: ronda esElTurnoDeLaMano	]! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 19:47:08' prior: 50863052!
test12_laManoNoPuedeTirarCartasQueNoTenga

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	
	self 
		should: [ronda tiraLaMano: CartaDeTruco anchoDeBasto] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: RondaDeTruco noEsTuTurnoErrorDescription equals: anError messageText .
			self assert: ronda esElTurnoDeLaMano	]! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 19:48:05' prior: 50863069!
test12_laManoNoPuedeTirarCartasQueNoTenga

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	
	self 
		should: [ronda tiraLaMano: CartaDeTruco anchoDeBasto] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: RondaDeTruco laCartaSeleccionadaNoEstaEntreTusCartas equals: anError messageText .
			self assert: ronda esElTurnoDeLaMano	]! !

!testRun: #RondaDeTrucoTest #test12_laManoNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 19:48:37'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 19:48:48'!
tiraLaMano: aCartaDeTruco 
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 19:49:18' prior: 50863106!
tiraLaMano: aCartaDeTruco 
	self error: self class laCartaSeleccionadaNoEstaEntreTusCartas! !

!testRun: #RondaDeTrucoTest #test12_laManoNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 19:49:19'!
ERROR!
!RondaDeTruco class methodsFor: 'error descriptions' stamp: 'DB 7/5/2021 19:49:26'!
laCartaSeleccionadaNoEstaEntreTusCartas
	self shouldBeImplemented.! !
!RondaDeTruco class methodsFor: 'error descriptions' stamp: 'DB 7/5/2021 19:49:45' prior: 50863120!
laCartaSeleccionadaNoEstaEntreTusCartas
	^'La carta seleccionada no est� entre tus cartas'! !

!testRun: #RondaDeTrucoTest #test12_laManoNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 19:49:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 19:49:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 19:49:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 19:49:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 19:49:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 19:49:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas stamp: 'DB 7/5/2021 19:49:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas stamp: 'DB 7/5/2021 19:49:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test08_laManoNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 19:49:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test09_elPieNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 19:49:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test10_lasCartasRepartidasNoPuedenTenerDuplicados stamp: 'DB 7/5/2021 19:49:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test11_cuandoArrancaElJuegoElPieEsperaSuTurno stamp: 'DB 7/5/2021 19:49:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test12_laManoNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 19:49:46'!
PASSED!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 19:50:04'!
test13_elPieNoPuedeTirarCartasQueNoTenga

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	
	self 
		should: [ronda tiraLaMano: CartaDeTruco anchoDeBasto] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: RondaDeTruco laCartaSeleccionadaNoEstaEntreTusCartas equals: anError messageText .
			self assert: ronda esElTurnoDeLaMano	]! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 19:50:18' prior: 50863179!
test13_elPieNoPuedeTirarCartasQueNoTenga

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	
	self 
		should: [ronda tiraLaMano: CartaDeTruco anchoDeBasto] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: RondaDeTruco laCartaSeleccionadaNoEstaEntreTusCartas equals: anError messageText .
			self assert: ronda esElTurnoDeLaMano	]! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 19:52:03' prior: 50863196!
test13_elPieNoPuedeTirarCartasQueNoTenga

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	ronda tiraElPie: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [ronda tiraLaMano: CartaDeTruco anchoDeBasto] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: RondaDeTruco laCartaSeleccionadaNoEstaEntreTusCartas equals: anError messageText .
			self assert: ronda esElTurnoDeLaMano	]! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 19:52:19' prior: 50863213!
test13_elPieNoPuedeTirarCartasQueNoTenga

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	ronda tiraLaMano: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [ronda tiraElPie: CartaDeTruco anchoDeBasto] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: RondaDeTruco laCartaSeleccionadaNoEstaEntreTusCartas equals: anError messageText .
			self assert: ronda esElTurnoDeLaMano	]! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 19:54:12' prior: 50863232!
test13_elPieNoPuedeTirarCartasQueNoTenga

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	ronda tiraLaMano: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [ronda tiraElPie: (CartaDeTruco bastoCon: 4) ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: RondaDeTruco laCartaSeleccionadaNoEstaEntreTusCartas equals: anError messageText .
			self assert: ronda esElTurnoDeLaMano	]! !

!testRun: #RondaDeTrucoTest #test13_elPieNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 19:54:13'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 19:54:34' prior: 50863111!
tiraLaMano: aCartaDeTruco 

	

	self error: self class laCartaSeleccionadaNoEstaEntreTusCartas! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'DB 7/5/2021 19:55:22' prior: 50862205!
cartasDeLaMano: cartasDeLaMano cartasDelPie: cartasDelPie 
	
	
	self laCantidadDeCartasTieneQueSerTres: cartasDeLaMano.
	self laCantidadDeCartasTieneQueSerTres: cartasDelPie.
	
	self tienenQueSerCartasDeTruco: cartasDeLaMano.
	self tienenQueSerCartasDeTruco: cartasDelPie.
	
	self noPuedenHaberCartasDuplicadas: cartasDeLaMano con: cartasDelPie.
	
	^self new initializeWith: cartasDeLaMano and: cartasDelPie.! !

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 19:55:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'DB 7/5/2021 19:55:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'DB 7/5/2021 19:55:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'DB 7/5/2021 19:55:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'DB 7/5/2021 19:55:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'DB 7/5/2021 19:55:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'DB 7/5/2021 19:55:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'DB 7/5/2021 19:55:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'DB 7/5/2021 19:55:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'DB 7/5/2021 19:55:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'DB 7/5/2021 19:55:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'DB 7/5/2021 19:55:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'DB 7/5/2021 19:55:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'DB 7/5/2021 19:55:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'DB 7/5/2021 19:55:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'DB 7/5/2021 19:55:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'DB 7/5/2021 19:55:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'DB 7/5/2021 19:55:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'DB 7/5/2021 19:55:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'DB 7/5/2021 19:55:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 19:55:36'!
ERROR!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 19:55:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 19:55:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 19:55:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 19:55:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas stamp: 'DB 7/5/2021 19:55:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas stamp: 'DB 7/5/2021 19:55:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test08_laManoNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 19:55:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test09_elPieNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 19:55:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test10_lasCartasRepartidasNoPuedenTenerDuplicados stamp: 'DB 7/5/2021 19:55:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test11_cuandoArrancaElJuegoElPieEsperaSuTurno stamp: 'DB 7/5/2021 19:55:36'!
ERROR!

!testRun: #RondaDeTrucoTest #test12_laManoNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 19:55:36'!
ERROR!

!testRun: #RondaDeTrucoTest #test13_elPieNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 19:55:36'!
ERROR!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 19:55:39'!
ERROR!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'DB 7/5/2021 19:55:50'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasDeLaMano_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'DB 7/5/2021 19:55:50'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasDeLaMano_CHANGE_ME cartasDelPie_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'initialization' stamp: 'DB 7/5/2021 19:55:50'!
initializeWith: cartasDeLaMano and: cartasDelPie 
	self shouldBeImplemented.
	cartasDeLaMano_CHANGE_ME := cartasDeLaMano.
	cartasDelPie_CHANGE_ME := cartasDelPie.! !

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'DB 7/5/2021 19:56:31'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasDeLaMano_CHANGE_ME cartasDelPie_CHANGE_ME cartasDeLaMano2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'DB 7/5/2021 19:56:34'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasDeLaMano_CHANGE_ME cartasDelPie_CHANGE_ME cartasDeLaMano2 cartasDelPie2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'initialization' stamp: 'DB 7/5/2021 19:56:29' prior: 50863432!
initializeWith: lasCartasDeLaMano and: lasCartasDelPie 

	cartasDeLaMano2 := lasCartasDeLaMano.
	cartasDelPie2 := lasCartasDelPie.! !

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 19:56:36'!
PASSED!

Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasDeLaMano2 cartasDelPie2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'DB 7/5/2021 19:56:45'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasDeLaMano2 cartasDelPie2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasDeLaMano cartasDelPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'DB 7/5/2021 19:56:49'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasDeLaMano cartasDelPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'initialization' stamp: 'DB 7/5/2021 19:56:56' prior: 50863460!
initializeWith: lasCartasDeLaMano and: lasCartasDelPie 

	cartasDeLaMano := lasCartasDeLaMano.
	cartasDelPie := lasCartasDelPie.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 19:57:06' prior: 50862898!
tiraElPie: aCartaDeTruco 

	
	self error: self class noEsTuTurnoErrorDescription ! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 19:57:43' prior: 50863273!
tiraLaMano: aCartaDeTruco 

	(cartasDeLaMano includes: aCartaDeTruco) ifFalse: [	self error: self class laCartaSeleccionadaNoEstaEntreTusCartas]! !

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 19:57:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 19:57:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 19:57:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 19:57:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 19:57:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas stamp: 'DB 7/5/2021 19:57:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas stamp: 'DB 7/5/2021 19:57:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test08_laManoNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 19:57:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test09_elPieNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 19:57:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test10_lasCartasRepartidasNoPuedenTenerDuplicados stamp: 'DB 7/5/2021 19:57:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test11_cuandoArrancaElJuegoElPieEsperaSuTurno stamp: 'DB 7/5/2021 19:57:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test12_laManoNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 19:57:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test13_elPieNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 19:57:48'!
FAILURE!

!testRun: #RondaDeTrucoTest #test13_elPieNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 19:57:48'!
FAILURE!

Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasDeLaMano cartasDelPie state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'DB 7/5/2021 19:58:34'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasDeLaMano cartasDelPie state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 19:59:16' prior: 50863512!
tiraLaMano: aCartaDeTruco 

	(cartasDeLaMano includes: aCartaDeTruco) ifFalse: [	self error: self class laCartaSeleccionadaNoEstaEntreTusCartas]
	
	! !
!RondaDeTruco methodsFor: 'initialization' stamp: 'DB 7/5/2021 19:59:56' prior: 50863498!
initializeWith: lasCartasDeLaMano and: lasCartasDelPie 

	cartasDeLaMano := lasCartasDeLaMano.
	cartasDelPie := lasCartasDelPie.
	
	state := #JuegaLaMano! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:00:44' prior: 50863585!
tiraLaMano: aCartaDeTruco 

	(cartasDeLaMano includes: aCartaDeTruco) ifFalse: [	self error: self class laCartaSeleccionadaNoEstaEntreTusCartas].
	
	state := #juegoElPie	.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:00:50' prior: 50863601!
tiraLaMano: aCartaDeTruco 

	(cartasDeLaMano includes: aCartaDeTruco) ifFalse: [	self error: self class laCartaSeleccionadaNoEstaEntreTusCartas].
	
	state := #juegaElPie	.! !

!classDefinition: #JuegaElPie category: 'ISW1-2021-1C-2doParcial' stamp: 'DB 7/5/2021 20:01:22'!
Object subclass: #JuegaElPie
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:01:14' prior: 50863610!
tiraLaMano: aCartaDeTruco 

	(cartasDeLaMano includes: aCartaDeTruco) ifFalse: [	self error: self class laCartaSeleccionadaNoEstaEntreTusCartas].
	
	state := JuegaElPie new	.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:01:54' prior: 50863506!
tiraElPie: aCartaDeTruco 

	state juegaElpie ifFalse: [	self error: self class noEsTuTurnoErrorDescription]! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:01:57' prior: 50863635!
tiraElPie: aCartaDeTruco 

	state juegaElpie ifFalse: [	self error: self class noEsTuTurnoErrorDescription].! !
!JuegaElPie methodsFor: 'nil' stamp: 'DB 7/5/2021 20:02:13'!
juegaElPie
	^true! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:03:03' prior: 50863642!
tiraElPie: aCartaDeTruco 

	state juegaElpie ifFalse: [	self error: self class noEsTuTurnoErrorDescription].
	
	self error: self class laCartaSeleccionadaNoEstaEntreTusCartas.! !

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 20:03:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 20:03:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 20:03:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 20:03:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 20:03:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas stamp: 'DB 7/5/2021 20:03:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas stamp: 'DB 7/5/2021 20:03:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test08_laManoNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 20:03:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test09_elPieNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 20:03:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test10_lasCartasRepartidasNoPuedenTenerDuplicados stamp: 'DB 7/5/2021 20:03:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test11_cuandoArrancaElJuegoElPieEsperaSuTurno stamp: 'DB 7/5/2021 20:03:04'!
ERROR!

!testRun: #RondaDeTrucoTest #test12_laManoNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 20:03:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test13_elPieNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 20:03:04'!
ERROR!

!testRun: #RondaDeTrucoTest #test11_cuandoArrancaElJuegoElPieEsperaSuTurno stamp: 'DB 7/5/2021 20:03:10'!
ERROR!

!classDefinition: #JuegaLaMano category: 'ISW1-2021-1C-2doParcial' stamp: 'DB 7/5/2021 20:04:04'!
Object subclass: #JuegaLaMano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'initialization' stamp: 'DB 7/5/2021 20:03:58' prior: 50863593!
initializeWith: lasCartasDeLaMano and: lasCartasDelPie 

	cartasDeLaMano := lasCartasDeLaMano.
	cartasDelPie := lasCartasDelPie.
	
	state := JuegaLaMano new.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:04:29' prior: 50862866!
esElTurnoDeLaMano
	^state esElTurnoDeLaMano! !
!JuegaLaMano methodsFor: 'nil' stamp: 'DB 7/5/2021 20:04:38'!
esElTurnoDeLaMano
	^true! !
!JuegaElPie methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:04:47'!
esElTurnoDeLaMano
	^false! !

!methodRemoval: JuegaElPie #juegaElPie stamp: 'DB 7/5/2021 20:04:53'!
juegaElPie
	^true!

Object subclass: #EstadoDeLaRonda
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #EstadoDeLaRonda category: 'ISW1-2021-1C-2doParcial' stamp: 'DB 7/5/2021 20:05:30'!
Object subclass: #EstadoDeLaRonda
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

EstadoDeLaRonda subclass: #JuegaElPie
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #JuegaElPie category: 'ISW1-2021-1C-2doParcial' stamp: 'DB 7/5/2021 20:05:33'!
EstadoDeLaRonda subclass: #JuegaElPie
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

EstadoDeLaRonda subclass: #JuegaLaMano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #JuegaLaMano category: 'ISW1-2021-1C-2doParcial' stamp: 'DB 7/5/2021 20:05:36'!
EstadoDeLaRonda subclass: #JuegaLaMano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!EstadoDeLaRonda methodsFor: 'nil' stamp: 'DB 7/5/2021 20:05:48'!
EstadoDeLaRonda
	self subclassResponsibility .! !
!EstadoDeLaRonda methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:06:15'!
esElTurnoDeLaMano
	self subclassResponsibility .! !

!methodRemoval: EstadoDeLaRonda #EstadoDeLaRonda stamp: 'DB 7/5/2021 20:06:15'!
EstadoDeLaRonda
	self subclassResponsibility .!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:06:32' prior: 50863728!
esElTurnoDeLaMano

	^state esElTurnoDeLaMano! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:06:51' prior: 50863652!
tiraElPie: aCartaDeTruco 

	state esElTurnoDelPie ifFalse: [	self error: self class noEsTuTurnoErrorDescription].
	
	self error: self class laCartaSeleccionadaNoEstaEntreTusCartas.! !
!JuegaLaMano methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:08:19'!
esElTurnoDelPie
	^false! !
!JuegaElPie methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:08:24'!
esElTurnoDelPie
	^true! !
!EstadoDeLaRonda methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:08:28'!
esElTurnoDelPie
	self subclassResponsibility .! !

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 20:08:35'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 20:08:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 20:08:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'DB 7/5/2021 20:08:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'DB 7/5/2021 20:08:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'DB 7/5/2021 20:08:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'DB 7/5/2021 20:08:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'DB 7/5/2021 20:08:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'DB 7/5/2021 20:08:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'DB 7/5/2021 20:08:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'DB 7/5/2021 20:08:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'DB 7/5/2021 20:08:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'DB 7/5/2021 20:08:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'DB 7/5/2021 20:08:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'DB 7/5/2021 20:08:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'DB 7/5/2021 20:08:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'DB 7/5/2021 20:08:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'DB 7/5/2021 20:08:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'DB 7/5/2021 20:08:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'DB 7/5/2021 20:08:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'DB 7/5/2021 20:08:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'DB 7/5/2021 20:08:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 20:08:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 20:08:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 20:08:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 20:08:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 20:08:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas stamp: 'DB 7/5/2021 20:08:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas stamp: 'DB 7/5/2021 20:08:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test08_laManoNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 20:08:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test09_elPieNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 20:08:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test10_lasCartasRepartidasNoPuedenTenerDuplicados stamp: 'DB 7/5/2021 20:08:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test11_cuandoArrancaElJuegoElPieEsperaSuTurno stamp: 'DB 7/5/2021 20:08:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test12_laManoNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 20:08:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test13_elPieNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 20:08:39'!
FAILURE!

!testRun: #RondaDeTrucoTest #test13_elPieNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 20:08:39'!
FAILURE!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 20:08:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'DB 7/5/2021 20:08:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'DB 7/5/2021 20:08:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'DB 7/5/2021 20:08:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'DB 7/5/2021 20:08:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'DB 7/5/2021 20:08:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'DB 7/5/2021 20:08:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'DB 7/5/2021 20:08:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'DB 7/5/2021 20:08:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'DB 7/5/2021 20:08:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'DB 7/5/2021 20:08:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'DB 7/5/2021 20:08:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'DB 7/5/2021 20:08:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'DB 7/5/2021 20:08:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'DB 7/5/2021 20:08:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'DB 7/5/2021 20:08:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'DB 7/5/2021 20:08:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'DB 7/5/2021 20:08:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'DB 7/5/2021 20:08:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'DB 7/5/2021 20:08:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 20:08:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 20:08:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 20:08:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 20:08:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 20:08:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas stamp: 'DB 7/5/2021 20:08:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas stamp: 'DB 7/5/2021 20:08:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test08_laManoNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 20:08:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test09_elPieNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 20:08:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test10_lasCartasRepartidasNoPuedenTenerDuplicados stamp: 'DB 7/5/2021 20:08:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test11_cuandoArrancaElJuegoElPieEsperaSuTurno stamp: 'DB 7/5/2021 20:08:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test12_laManoNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 20:08:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test13_elPieNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 20:08:42'!
FAILURE!

!testRun: #RondaDeTrucoTest #test13_elPieNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 20:08:42'!
FAILURE!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 20:08:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 20:08:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 20:08:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 20:08:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 20:08:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 20:08:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas stamp: 'DB 7/5/2021 20:08:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas stamp: 'DB 7/5/2021 20:08:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test08_laManoNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 20:08:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test09_elPieNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 20:08:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test10_lasCartasRepartidasNoPuedenTenerDuplicados stamp: 'DB 7/5/2021 20:08:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test11_cuandoArrancaElJuegoElPieEsperaSuTurno stamp: 'DB 7/5/2021 20:08:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test12_laManoNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 20:08:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test13_elPieNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 20:08:44'!
FAILURE!

!testRun: #RondaDeTrucoTest #test13_elPieNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 20:08:44'!
FAILURE!

----SNAPSHOT----(5 July 2021 20:08:54) CuisUniversity-4532.image priorSource: 17002776!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 20:08:58'!
PASSED!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 20:08:58'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 20:08:58'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 20:08:58'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 20:08:58'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 20:08:58'!
PASSED!

!testRun: #RondaDeTrucoTest #test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas stamp: 'DB 7/5/2021 20:08:58'!
PASSED!

!testRun: #RondaDeTrucoTest #test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas stamp: 'DB 7/5/2021 20:08:58'!
PASSED!

!testRun: #RondaDeTrucoTest #test08_laManoNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 20:08:58'!
PASSED!

!testRun: #RondaDeTrucoTest #test09_elPieNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 20:08:58'!
PASSED!

!testRun: #RondaDeTrucoTest #test10_lasCartasRepartidasNoPuedenTenerDuplicados stamp: 'DB 7/5/2021 20:08:58'!
PASSED!

!testRun: #RondaDeTrucoTest #test11_cuandoArrancaElJuegoElPieEsperaSuTurno stamp: 'DB 7/5/2021 20:08:58'!
PASSED!

!testRun: #RondaDeTrucoTest #test12_laManoNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 20:08:58'!
PASSED!

!testRun: #RondaDeTrucoTest #test13_elPieNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 20:08:58'!
FAILURE!

!testRun: #RondaDeTrucoTest #test13_elPieNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 20:08:58'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 20:09:18' prior: 50863251!
test13_elPieNoPuedeTirarCartasQueNoTenga

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	ronda tiraLaMano: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [ronda tiraElPie: (CartaDeTruco bastoCon: 4) ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: RondaDeTruco laCartaSeleccionadaNoEstaEntreTusCartas equals: anError messageText .
			self assert: ronda esElTurnoDelPie 	]! !

!testRun: #RondaDeTrucoTest #test13_elPieNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 20:09:27'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:09:41'!
esElTurnoDelPie
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:09:49' prior: 50864202!
esElTurnoDelPie
	state esElTurnoDelPie ! !

!testRun: #RondaDeTrucoTest #test13_elPieNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 20:09:50'!
ERROR!

!testRun: #RondaDeTrucoTest #test13_elPieNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 20:10:32'!
ERROR!

!testRun: #RondaDeTrucoTest #test13_elPieNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 20:10:35'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 20:10:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 20:10:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 20:10:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 20:10:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 20:10:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 20:10:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas stamp: 'DB 7/5/2021 20:10:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas stamp: 'DB 7/5/2021 20:10:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test08_laManoNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 20:10:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test09_elPieNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 20:10:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test10_lasCartasRepartidasNoPuedenTenerDuplicados stamp: 'DB 7/5/2021 20:10:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test11_cuandoArrancaElJuegoElPieEsperaSuTurno stamp: 'DB 7/5/2021 20:10:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test12_laManoNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 20:10:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test13_elPieNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 20:10:37'!
ERROR!

!testRun: #RondaDeTrucoTest #test13_elPieNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 20:10:37'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:11:06' prior: 50864207!
esElTurnoDelPie
	^state esElTurnoDelPie ! !

!testRun: #RondaDeTrucoTest #test13_elPieNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 20:11:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 20:11:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 20:11:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 20:11:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 20:11:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 20:11:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 20:11:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas stamp: 'DB 7/5/2021 20:11:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas stamp: 'DB 7/5/2021 20:11:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test08_laManoNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 20:11:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test09_elPieNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 20:11:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test10_lasCartasRepartidasNoPuedenTenerDuplicados stamp: 'DB 7/5/2021 20:11:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test11_cuandoArrancaElJuegoElPieEsperaSuTurno stamp: 'DB 7/5/2021 20:11:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test12_laManoNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 20:11:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test13_elPieNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 20:11:09'!
PASSED!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 20:12:25'!
test14_despuesQueSeJuegaElPrimerEnfrentamientoYGanaLaManoElTurnoSigueSiendoDeLaMano

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	ronda tiraLaMano: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [ronda tiraElPie: (CartaDeTruco bastoCon: 4) ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: RondaDeTruco laCartaSeleccionadaNoEstaEntreTusCartas equals: anError messageText .
			self assert: ronda esElTurnoDelPie 	]! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 20:12:53' prior: 50864336!
test14_despuesQueSeJuegaElPrimerEnfrentamientoYGanaLaManoElTurnoSigueSiendoDeLaMano

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	ronda tiraLaMano: (CartaDeTruco bastoCon: 3).
	ronda tiraElPie: (CartaDeTruco bastoCon: 4).! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:13:02' prior: 50862555!
repartirParaElPie

	^OrderedCollection with: (CartaDeTruco anchoDeBasto ) with: (CartaDeTruco anchoDeEspada ) with: (CartaDeTruco bastoCon: 7)! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:13:12' prior: 50862386!
repartirParaLaMano

	^OrderedCollection with: (CartaDeTruco bastoCon: 2) with: (CartaDeTruco bastoCon: 3) with: (CartaDeTruco bastoCon: 4)! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:14:10' prior: 50864277!
esElTurnoDelPie

	^state esElTurnoDelPie ! !

!methodRemoval: RondaDeTrucoTest #_test00 stamp: 'DB 7/5/2021 20:15:50'!
_test00

"1. La ronda es solo para dos jugadores, la mano (el que comienza el primer enfrentamiento) y el pie (el que juega segundo en el primer enfrentamiento)."

	"  - test01 arranca jugando siempre la mano
	   - test02 la mano tiene sus 3 cartas.
	   - test03 el pie tiene sus 3 cartas. 
	
	 test01 no se puede crear una ronda con m�s de dos jugadores.
	  - test02 no se puede crear una ronda 
	La ronda es solo para dos jugadores,
	 la mano (el que comienza el primer enfrentamiento) y 
	     el pie (el que juega segundo en el primer enfrentamiento)."
!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 20:22:14' prior: 50864356!
test14_despuesQueSeJuegaElPrimerEnfrentamientoYGanaLaManoElTurnoSigueSiendoDeLaMano

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	ronda tiraLaMano: (CartaDeTruco bastoCon: 3).
	ronda tiraElPie: (CartaDeTruco bastoCon: 4).
	
	self assert: ronda esElTurnoDeLaMano.
	self deny: ronda esElTurnoDelPie.! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 20:23:21' prior: 50864409!
test14_despuesQueSeJuegaElPrimerEnfrentamientoYGanaLaManoElTurnoSigueSiendoDeLaMano

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	ronda tiraLaMano: (CartaDeTruco bastoCon: 3).
	ronda tiraElPie: (CartaDeTruco bastoCon: 4).
	
	self assert: ronda esElTurnoDeLaMano.
	self deny: ronda esElTurnoDelPie.
	self assert: ronda ganoPrimerEnfrentamientoLaMano.
	self deny: ronda ganoPrimerEnfrentamientoElPie.! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 20:24:01' prior: 50864424!
test14_despuesQueSeJuegaElPrimerEnfrentamientoYGanaLaManoElTurnoSigueSiendoDeLaMano

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	ronda tiraLaMano: (CartaDeTruco bastoCon: 3).
	ronda tiraElPie: (CartaDeTruco bastoCon: 4).
	
	self assert: ronda primerEnfrentamientoFinalizado.
	self assert: ronda esElTurnoDeLaMano.
	self deny: ronda esElTurnoDelPie.
	self assert: ronda ganoPrimerEnfrentamientoLaMano.
	self deny: ronda ganoPrimerEnfrentamientoElPie.
	! !

!testRun: #RondaDeTrucoTest #test14_despuesQueSeJuegaElPrimerEnfrentamientoYGanaLaManoElTurnoSigueSiendoDeLaMano stamp: 'DB 7/5/2021 20:24:03'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:24:37' prior: 50864369!
repartirParaElPie

	^OrderedCollection with: (CartaDeTruco anchoDeBasto ) with: (CartaDeTruco anchoDeEspada ) with: (CartaDeTruco bastoCon: 2)! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 20:24:53' prior: 50864442!
test14_despuesQueSeJuegaElPrimerEnfrentamientoYGanaLaManoElTurnoSigueSiendoDeLaMano

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	ronda tiraLaMano: (CartaDeTruco bastoCon: 3).
	ronda tiraElPie: (CartaDeTruco bastoCon: 2).
	
	self assert: ronda primerEnfrentamientoFinalizado.
	self assert: ronda esElTurnoDeLaMano.
	self deny: ronda esElTurnoDelPie.
	self assert: ronda ganoPrimerEnfrentamientoLaMano.
	self deny: ronda ganoPrimerEnfrentamientoElPie.
	! !

!testRun: #RondaDeTrucoTest #test14_despuesQueSeJuegaElPrimerEnfrentamientoYGanaLaManoElTurnoSigueSiendoDeLaMano stamp: 'DB 7/5/2021 20:24:54'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:25:10' prior: 50864467!
repartirParaElPie

	^OrderedCollection with: (CartaDeTruco anchoDeBasto ) with: (CartaDeTruco anchoDeEspada ) with: (CartaDeTruco espadaCon: 2)! !

!testRun: #RondaDeTrucoTest #test14_despuesQueSeJuegaElPrimerEnfrentamientoYGanaLaManoElTurnoSigueSiendoDeLaMano stamp: 'DB 7/5/2021 20:25:19'!
ERROR!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 20:25:32' prior: 50864475!
test14_despuesQueSeJuegaElPrimerEnfrentamientoYGanaLaManoElTurnoSigueSiendoDeLaMano

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	ronda tiraLaMano: (CartaDeTruco bastoCon: 3).
	ronda tiraElPie: (CartaDeTruco espadaCon: 2).
	
	self assert: ronda primerEnfrentamientoFinalizado.
	self assert: ronda esElTurnoDeLaMano.
	self deny: ronda esElTurnoDelPie.
	self assert: ronda ganoPrimerEnfrentamientoLaMano.
	self deny: ronda ganoPrimerEnfrentamientoElPie.
	! !

!testRun: #RondaDeTrucoTest #test14_despuesQueSeJuegaElPrimerEnfrentamientoYGanaLaManoElTurnoSigueSiendoDeLaMano stamp: 'DB 7/5/2021 20:25:33'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:26:56' prior: 50863798!
tiraElPie: aCartaDeTruco 

	state esElTurnoDelPie ifFalse: [	self error: self class noEsTuTurnoErrorDescription].
	
	
	(cartasDeLaMano includes: aCartaDeTruco) ifFalse: [	self error: self class laCartaSeleccionadaNoEstaEntreTusCartas].! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:27:08' prior: 50864538!
tiraElPie: aCartaDeTruco 

	state esElTurnoDelPie ifFalse: [	self error: self class noEsTuTurnoErrorDescription].
	
	
	(cartasDelPie includes: aCartaDeTruco) ifFalse: [	self error: self class laCartaSeleccionadaNoEstaEntreTusCartas].! !

!testRun: #RondaDeTrucoTest #test14_despuesQueSeJuegaElPrimerEnfrentamientoYGanaLaManoElTurnoSigueSiendoDeLaMano stamp: 'DB 7/5/2021 20:27:11'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:27:35'!
primerEnfrentamientoFinalizado
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:27:41' prior: 50864564!
primerEnfrentamientoFinalizado
	^true! !

!testRun: #RondaDeTrucoTest #test14_despuesQueSeJuegaElPrimerEnfrentamientoYGanaLaManoElTurnoSigueSiendoDeLaMano stamp: 'DB 7/5/2021 20:27:46'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:28:59' prior: 50864549!
tiraElPie: aCartaDeTruco 

	state esElTurnoDelPie ifFalse: [	self error: self class noEsTuTurnoErrorDescription].
	
	
	(cartasDelPie includes: aCartaDeTruco) ifFalse: [	self error: self class laCartaSeleccionadaNoEstaEntreTusCartas].
	
	state := JuegaLaMano new.! !

!testRun: #RondaDeTrucoTest #test14_despuesQueSeJuegaElPrimerEnfrentamientoYGanaLaManoElTurnoSigueSiendoDeLaMano stamp: 'DB 7/5/2021 20:29:10'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:29:23'!
ganoPrimerEnfrentamientoLaMano
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:29:28' prior: 50864595!
ganoPrimerEnfrentamientoLaMano
	^true! !

!testRun: #RondaDeTrucoTest #test14_despuesQueSeJuegaElPrimerEnfrentamientoYGanaLaManoElTurnoSigueSiendoDeLaMano stamp: 'DB 7/5/2021 20:29:30'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:29:36'!
ganoPrimerEnfrentamientoElPie
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:29:42' prior: 50864609!
ganoPrimerEnfrentamientoElPie
	^false! !

!testRun: #RondaDeTrucoTest #test14_despuesQueSeJuegaElPrimerEnfrentamientoYGanaLaManoElTurnoSigueSiendoDeLaMano stamp: 'DB 7/5/2021 20:29:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test14_despuesQueSeJuegaElPrimerEnfrentamientoYGanaLaManoElTurnoSigueSiendoDeLaMano stamp: 'DB 7/5/2021 20:29:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 20:29:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 20:29:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 20:29:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 20:29:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 20:29:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas stamp: 'DB 7/5/2021 20:29:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas stamp: 'DB 7/5/2021 20:29:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test08_laManoNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 20:29:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test09_elPieNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 20:29:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test10_lasCartasRepartidasNoPuedenTenerDuplicados stamp: 'DB 7/5/2021 20:29:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test11_cuandoArrancaElJuegoElPieEsperaSuTurno stamp: 'DB 7/5/2021 20:29:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test12_laManoNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 20:29:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test13_elPieNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 20:29:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test14_despuesQueSeJuegaElPrimerEnfrentamientoYGanaLaManoElTurnoSigueSiendoDeLaMano stamp: 'DB 7/5/2021 20:29:49'!
PASSED!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 20:32:11'!
test15_despuesQueSeJuegaElPrimerEnfrentamientoYGanaElPieElProximoTurnoEsDelPie

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	ronda tiraLaMano: (CartaDeTruco bastoCon: 3).
	ronda tiraElPie: (CartaDeTruco espadaCon: 2).
	
	self assert: ronda primerEnfrentamientoFinalizado.
	self assert: ronda esElTurnoDeLaMano.
	self deny: ronda esElTurnoDelPie.
	self assert: ronda ganoPrimerEnfrentamientoLaMano.
	self deny: ronda ganoPrimerEnfrentamientoElPie.
	! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 20:33:02' prior: 50864680!
test15_despuesQueSeJuegaElPrimerEnfrentamientoYGanaElPieElProximoTurnoEsDelPie

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	ronda tiraLaMano: (CartaDeTruco bastoCon: 3).
	ronda tiraElPie: (CartaDeTruco anchoDeBasto).
	
	self assert: ronda primerEnfrentamientoFinalizado.
	self assert: ronda esElTurnoDeLaMano.
	self deny: ronda esElTurnoDelPie.
	self assert: ronda ganoPrimerEnfrentamientoLaMano.
	self deny: ronda ganoPrimerEnfrentamientoElPie.
	! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 20:33:22' prior: 50864700!
test15_despuesQueSeJuegaElPrimerEnfrentamientoYGanaElPieElProximoTurnoEsDelPie

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	ronda tiraLaMano: (CartaDeTruco bastoCon: 3).
	ronda tiraElPie: (CartaDeTruco anchoDeBasto).
	
	self assert: ronda primerEnfrentamientoFinalizado.
	self deny: ronda esElTurnoDeLaMano.
	self assert: ronda esElTurnoDelPie.
	self deny: ronda ganoPrimerEnfrentamientoLaMano.
	self assert: ronda ganoPrimerEnfrentamientoElPie.
	! !

!testRun: #RondaDeTrucoTest #test15_despuesQueSeJuegaElPrimerEnfrentamientoYGanaElPieElProximoTurnoEsDelPie stamp: 'DB 7/5/2021 20:33:45'!
FAILURE!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'DB 7/5/2021 20:34:50'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasDeLaMano cartasDelPie state cartasJugadasPorLaMano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:34:46' prior: 50863626!
tiraLaMano: aCartaDeTruco 

	(cartasDeLaMano includes: aCartaDeTruco) ifFalse: [	self error: self class laCartaSeleccionadaNoEstaEntreTusCartas].
	
	cartasJugadasPorLaMano add: aCartaDeTruco.
	
	state := JuegaElPie new	.! !

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'DB 7/5/2021 20:35:33'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasDeLaMano cartasDelPie state cartasJugadasPorLaMano cartasJugadasPorElPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'initialization' stamp: 'DB 7/5/2021 20:35:31' prior: 50863720!
initializeWith: lasCartasDeLaMano and: lasCartasDelPie 

	cartasDeLaMano := lasCartasDeLaMano.
	cartasDelPie := lasCartasDelPie.
	
	state := JuegaLaMano new.
	cartasJugadasPorLaMano := OrderedCollection new.
	cartasJugadasPorElPie := OrderedCollection new.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:36:43' prior: 50864579!
tiraElPie: aCartaDeTruco 

	state esElTurnoDelPie ifFalse: [	self error: self class noEsTuTurnoErrorDescription].
	
	
	(cartasDelPie includes: aCartaDeTruco) ifFalse: [	self error: self class laCartaSeleccionadaNoEstaEntreTusCartas].
	
	state proximoTurno! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:36:48' prior: 50864786!
tiraElPie: aCartaDeTruco 

	state esElTurnoDelPie ifFalse: [	self error: self class noEsTuTurnoErrorDescription].
	
	(cartasDelPie includes: aCartaDeTruco) ifFalse: [	self error: self class laCartaSeleccionadaNoEstaEntreTusCartas].
	
	state proximoTurno! !

!testRun: #RondaDeTrucoTest #test15_despuesQueSeJuegaElPrimerEnfrentamientoYGanaElPieElProximoTurnoEsDelPie stamp: 'DB 7/5/2021 20:36:52'!
ERROR!

!testRun: #RondaDeTrucoTest #test15_despuesQueSeJuegaElPrimerEnfrentamientoYGanaElPieElProximoTurnoEsDelPie stamp: 'DB 7/5/2021 20:37:11'!
ERROR!
!JuegaElPie methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:37:19'!
proximoTurno
	self shouldBeImplemented.! !

!classDefinition: #JuegaElPie category: 'ISW1-2021-1C-2doParcial' stamp: 'DB 7/5/2021 20:38:44'!
EstadoDeLaRonda subclass: #JuegaElPie
	instanceVariableNames: 'ronda'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!JuegaElPie methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:38:42' prior: 50864818!
proximoTurno
	ronda proximoTurno! !
!RondaDeTruco methodsFor: 'initialization' stamp: 'DB 7/5/2021 20:39:23' prior: 50864774!
initializeWith: lasCartasDeLaMano and: lasCartasDelPie 

	cartasDeLaMano := lasCartasDeLaMano.
	cartasDelPie := lasCartasDelPie.
	
	state := JuegaLaMano new initializeFor: self.
	cartasJugadasPorLaMano := OrderedCollection new.
	cartasJugadasPorElPie := OrderedCollection new.! !

!testRun: #RondaDeTrucoTest #test15_despuesQueSeJuegaElPrimerEnfrentamientoYGanaElPieElProximoTurnoEsDelPie stamp: 'DB 7/5/2021 20:39:26'!
ERROR!

!classDefinition: #JuegaLaMano category: 'ISW1-2021-1C-2doParcial' stamp: 'DB 7/5/2021 20:39:39'!
EstadoDeLaRonda subclass: #JuegaLaMano
	instanceVariableNames: 'self_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!testRun: #RondaDeTrucoTest #test15_despuesQueSeJuegaElPrimerEnfrentamientoYGanaElPieElProximoTurnoEsDelPie stamp: 'DB 7/5/2021 20:39:50'!
ERROR!

!classDefinition: #JuegaLaMano category: 'ISW1-2021-1C-2doParcial' stamp: 'DB 7/5/2021 20:41:01'!
EstadoDeLaRonda subclass: #JuegaLaMano
	instanceVariableNames: 'self_CHANGE_ME ronda'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!JuegaLaMano methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:41:00'!
initializeFor: aRonda
	
	ronda := aRonda .! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:42:03' prior: 50864754!
tiraLaMano: aCartaDeTruco 

	(cartasDeLaMano includes: aCartaDeTruco) ifFalse: [	self error: self class laCartaSeleccionadaNoEstaEntreTusCartas].
	
	cartasJugadasPorLaMano add: aCartaDeTruco.
	
	state := JuegaElPie new	 initializeFor: self.! !

!testRun: #RondaDeTrucoTest #test15_despuesQueSeJuegaElPrimerEnfrentamientoYGanaElPieElProximoTurnoEsDelPie stamp: 'DB 7/5/2021 20:42:07'!
ERROR!
!JuegaElPie methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:42:24'!
cartasJugadasPorLaMano! !
!JuegaElPie methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:42:34'!
initializeFor: aRonda
	
	ronda := aRonda .! !

!methodRemoval: JuegaElPie #cartasJugadasPorLaMano stamp: 'DB 7/5/2021 20:42:37'!
cartasJugadasPorLaMano!

!testRun: #RondaDeTrucoTest #test15_despuesQueSeJuegaElPrimerEnfrentamientoYGanaElPieElProximoTurnoEsDelPie stamp: 'DB 7/5/2021 20:42:49'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:43:07'!
proximoTurno
	self shouldBeImplemented.! !

cartasDeLaMano at: 1!

		(cartasDeLaMano at: 1) mataA: (cartasJugadasPorElPie at: 1	)!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:46:22' prior: 50864908!
proximoTurno
	
	cartasJugadasPorLaMano size = cartasJugadasPorElPie size ifTrue: [
		
		(cartasDeLaMano at: 1) mataA: (cartasJugadasPorElPie at: 1	)
	]
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:46:51' prior: 50864798!
tiraElPie: aCartaDeTruco 

	state esElTurnoDelPie ifFalse: [	self error: self class noEsTuTurnoErrorDescription].
	
	(cartasDelPie includes: aCartaDeTruco) ifFalse: [	self error: self class laCartaSeleccionadaNoEstaEntreTusCartas].
	
	cartasJugadasPorElPie add: aCartaDeTruco .
	state proximoTurno! !

		(cartasDeLaMano at: 1) mataA: (cartasJugadasPorElPie at: 1	)!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:48:01' prior: 50864916!
proximoTurno
	
	cartasJugadasPorLaMano size = cartasJugadasPorElPie size ifTrue: [
		((cartasDeLaMano at: 1) mataA: (cartasJugadasPorElPie at: 1	)) ifFalse: [state := JuegaElPie new initializeFor: self].
	]
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:48:24' prior: 50864939!
proximoTurno
	
	cartasJugadasPorLaMano size = cartasJugadasPorElPie size ifTrue: [
		((cartasJugadasPorElPie at: 1) mataA: (cartasJugadasPorLaMano at: 1	)) ifTrue: [state := JuegaElPie new initializeFor: self].
	]
	! !

!testRun: #RondaDeTrucoTest #test15_despuesQueSeJuegaElPrimerEnfrentamientoYGanaElPieElProximoTurnoEsDelPie stamp: 'DB 7/5/2021 20:48:26'!
FAILURE!

!testRun: #RondaDeTrucoTest #test15_despuesQueSeJuegaElPrimerEnfrentamientoYGanaElPieElProximoTurnoEsDelPie stamp: 'DB 7/5/2021 20:48:52'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:49:40' prior: 50864569!
primerEnfrentamientoFinalizado
	^cartasJugadasPorLaMano size > 1 and: cartasJugadasPorElPie size > 1.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:50:10' prior: 50864600!
ganoPrimerEnfrentamientoLaMano
	^self primerEnfrentamientoFinalizado! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:50:55' prior: 50864976!
ganoPrimerEnfrentamientoLaMano
	^self primerEnfrentamientoFinalizado and:
		((cartasJugadasPorLaMano at: 1) mataA: (cartasJugadasPorElPie at: 1	)) ! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:51:07' prior: 50864614!
ganoPrimerEnfrentamientoElPie
	^self ganoPrimerEnfrentamientoLaMano not! !

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 20:51:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 20:51:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 20:51:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 20:51:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 20:51:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas stamp: 'DB 7/5/2021 20:51:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas stamp: 'DB 7/5/2021 20:51:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test08_laManoNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 20:51:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test09_elPieNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 20:51:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test10_lasCartasRepartidasNoPuedenTenerDuplicados stamp: 'DB 7/5/2021 20:51:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test11_cuandoArrancaElJuegoElPieEsperaSuTurno stamp: 'DB 7/5/2021 20:51:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test12_laManoNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 20:51:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test13_elPieNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 20:51:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test14_despuesQueSeJuegaElPrimerEnfrentamientoYGanaLaManoElTurnoSigueSiendoDeLaMano stamp: 'DB 7/5/2021 20:51:09'!
FAILURE!

!testRun: #RondaDeTrucoTest #test15_despuesQueSeJuegaElPrimerEnfrentamientoYGanaElPieElProximoTurnoEsDelPie stamp: 'DB 7/5/2021 20:51:09'!
FAILURE!

!testRun: #RondaDeTrucoTest #test14_despuesQueSeJuegaElPrimerEnfrentamientoYGanaLaManoElTurnoSigueSiendoDeLaMano stamp: 'DB 7/5/2021 20:51:15'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:51:38' prior: 50864969!
primerEnfrentamientoFinalizado
	^cartasJugadasPorLaMano size >= 1 and: cartasJugadasPorElPie size >= 1.! !

!testRun: #RondaDeTrucoTest #test14_despuesQueSeJuegaElPrimerEnfrentamientoYGanaLaManoElTurnoSigueSiendoDeLaMano stamp: 'DB 7/5/2021 20:51:45'!
FAILURE!

!testRun: #RondaDeTrucoTest #test14_despuesQueSeJuegaElPrimerEnfrentamientoYGanaLaManoElTurnoSigueSiendoDeLaMano stamp: 'DB 7/5/2021 20:52:07'!
FAILURE!

!testRun: #RondaDeTrucoTest #test14_despuesQueSeJuegaElPrimerEnfrentamientoYGanaLaManoElTurnoSigueSiendoDeLaMano stamp: 'DB 7/5/2021 20:52:20'!
FAILURE!

!testRun: #RondaDeTrucoTest #test14_despuesQueSeJuegaElPrimerEnfrentamientoYGanaLaManoElTurnoSigueSiendoDeLaMano stamp: 'DB 7/5/2021 20:52:21'!
FAILURE!

!testRun: #RondaDeTrucoTest #test14_despuesQueSeJuegaElPrimerEnfrentamientoYGanaLaManoElTurnoSigueSiendoDeLaMano stamp: 'DB 7/5/2021 20:52:44'!
FAILURE!

state esElTurnoDeLaMano!

!testRun: #RondaDeTrucoTest #test14_despuesQueSeJuegaElPrimerEnfrentamientoYGanaLaManoElTurnoSigueSiendoDeLaMano stamp: 'DB 7/5/2021 20:54:23'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:54:53' prior: 50864924!
tiraElPie: aCartaDeTruco 

	state esElTurnoDelPie ifFalse: [	self error: self class noEsTuTurnoErrorDescription].
	
	(cartasDelPie includes: aCartaDeTruco) ifFalse: [	self error: self class laCartaSeleccionadaNoEstaEntreTusCartas].
	
	cartasJugadasPorElPie add: aCartaDeTruco .
	
	self proximoTurno ! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:55:26' prior: 50864949!
proximoTurno
	
	cartasJugadasPorLaMano size = cartasJugadasPorElPie size ifTrue: [
		((cartasJugadasPorElPie at: 1) mataA: (cartasJugadasPorLaMano at: 1	)) ifTrue: [state := JuegaElPie new initializeFor: self]
		ifFalse: [state := JuegaLaMano new initializeFor: self].
	]
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:55:32' prior: 50865107!
proximoTurno
	
	cartasJugadasPorLaMano size = cartasJugadasPorElPie size ifTrue: [
		((cartasJugadasPorElPie at: 1) mataA: (cartasJugadasPorLaMano at: 1	)) 
			ifTrue: [state := JuegaElPie new initializeFor: self]
			ifFalse: [state := JuegaLaMano new initializeFor: self].
	]
	! !

!testRun: #RondaDeTrucoTest #test14_despuesQueSeJuegaElPrimerEnfrentamientoYGanaLaManoElTurnoSigueSiendoDeLaMano stamp: 'DB 7/5/2021 20:55:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test15_despuesQueSeJuegaElPrimerEnfrentamientoYGanaElPieElProximoTurnoEsDelPie stamp: 'DB 7/5/2021 20:55:42'!
PASSED!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 20:57:39'!
test16_siElPrimerEnfrentamientoEsPardoSeTerminaElJuegoEnElSegundoEnfrentamiento

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	ronda tiraLaMano: (CartaDeTruco bastoCon: 2).
	ronda tiraElPie: (CartaDeTruco espadaCon: 2).
	
	self assert: ronda primerEnfrentamientoFinalizado.
	self deny: ronda esElTurnoDeLaMano.
	self assert: ronda esElTurnoDelPie.
	self deny: ronda ganoPrimerEnfrentamientoLaMano.
	self assert: ronda ganoPrimerEnfrentamientoElPie.
	! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 20:58:35'!
test16_siElPrimerEnfrentamientoElTurnoEsParaLaMano

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	ronda tiraLaMano: (CartaDeTruco bastoCon: 2).
	ronda tiraElPie: (CartaDeTruco espadaCon: 2).
	
	self assert: ronda primerEnfrentamientoFinalizado.
	self deny: ronda esElTurnoDeLaMano.
	self assert: ronda esElTurnoDelPie.
	self deny: ronda ganoPrimerEnfrentamientoLaMano.
	self assert: ronda ganoPrimerEnfrentamientoElPie.
	! !

!methodRemoval: RondaDeTrucoTest #test16_siElPrimerEnfrentamientoEsPardoSeTerminaElJuegoEnElSegundoEnfrentamiento stamp: 'DB 7/5/2021 20:58:35'!
test16_siElPrimerEnfrentamientoEsPardoSeTerminaElJuegoEnElSegundoEnfrentamiento

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	ronda tiraLaMano: (CartaDeTruco bastoCon: 2).
	ronda tiraElPie: (CartaDeTruco espadaCon: 2).
	
	self assert: ronda primerEnfrentamientoFinalizado.
	self deny: ronda esElTurnoDeLaMano.
	self assert: ronda esElTurnoDelPie.
	self deny: ronda ganoPrimerEnfrentamientoLaMano.
	self assert: ronda ganoPrimerEnfrentamientoElPie.
	!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 20:59:04' prior: 50865159!
test16_siElPrimerEnfrentamientoElTurnoEsParaLaMano

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	ronda tiraLaMano: (CartaDeTruco bastoCon: 2).
	ronda tiraElPie: (CartaDeTruco espadaCon: 2).
	
	self assert: ronda primerEnfrentamientoFinalizado.
	self assert: ronda primerEnfrentamientoPardo.
	self deny: ronda esElTurnoDeLaMano.
	self assert: ronda esElTurnoDelPie.
	self deny: ronda ganoPrimerEnfrentamientoLaMano.
	self deny: ronda ganoPrimerEnfrentamientoElPie.
	
	! !

!testRun: #RondaDeTrucoTest #test16_siElPrimerEnfrentamientoElTurnoEsParaLaMano stamp: 'DB 7/5/2021 20:59:07'!
ERROR!

!testRun: #RondaDeTrucoTest #test16_siElPrimerEnfrentamientoElTurnoEsParaLaMano stamp: 'DB 7/5/2021 20:59:13'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:59:21'!
primerEnfrentamientoPardo
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 20:59:28' prior: 50865227!
primerEnfrentamientoPardo
	^true! !

!testRun: #RondaDeTrucoTest #test16_siElPrimerEnfrentamientoElTurnoEsParaLaMano stamp: 'DB 7/5/2021 20:59:29'!
FAILURE!

!testRun: #RondaDeTrucoTest #test16_siElPrimerEnfrentamientoElTurnoEsParaLaMano stamp: 'DB 7/5/2021 20:59:34'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:02:01' prior: 50865119!
proximoTurno
	
	cartasJugadasPorLaMano size = cartasJugadasPorElPie size ifTrue: [
		((cartasJugadasPorLaMano at: 1) empardaCon: (cartasDelPie at: 1)) ifTrue: [^state := JuegaLaMano new initializeFor: self.].
		
		((cartasJugadasPorElPie at: 1) mataA: (cartasJugadasPorLaMano at: 1	)) 
			ifTrue: [state := JuegaElPie new initializeFor: self]
			ifFalse: [state := JuegaLaMano new initializeFor: self].
	]
	! !

	^self valor = cartaParda valor!

self valor!

cartasDelPie at: 1!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:04:15' prior: 50865244!
proximoTurno
	
	cartasJugadasPorLaMano size = cartasJugadasPorElPie size ifTrue: [
		((cartasJugadasPorLaMano at: 1) empardaCon: (cartasJugadasPorElPie at: 1)) ifTrue: [^state := JuegaLaMano new initializeFor: self.].
		
		((cartasJugadasPorElPie at: 1) mataA: (cartasJugadasPorLaMano at: 1	)) 
			ifTrue: [state := JuegaElPie new initializeFor: self]
			ifFalse: [state := JuegaLaMano new initializeFor: self].
	]
	! !

!testRun: #RondaDeTrucoTest #test16_siElPrimerEnfrentamientoElTurnoEsParaLaMano stamp: 'DB 7/5/2021 21:04:32'!
FAILURE!

^state esElTurnoDeLaMano!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:05:14' prior: 50863793!
esElTurnoDeLaMano

	^state esElTurnoDeLaMano! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 21:05:32' prior: 50865199!
test16_siElPrimerEnfrentamientoElTurnoEsParaLaMano

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	ronda tiraLaMano: (CartaDeTruco bastoCon: 2).
	ronda tiraElPie: (CartaDeTruco espadaCon: 2).
	
	self assert: ronda primerEnfrentamientoFinalizado.
	self assert: ronda primerEnfrentamientoPardo.
	self assert: ronda esElTurnoDeLaMano.
	self deny: ronda esElTurnoDelPie.
	self deny: ronda ganoPrimerEnfrentamientoLaMano.
	self deny: ronda ganoPrimerEnfrentamientoElPie.
	
	! !

!testRun: #RondaDeTrucoTest #test16_siElPrimerEnfrentamientoElTurnoEsParaLaMano stamp: 'DB 7/5/2021 21:05:34'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:06:44' prior: 50864982!
ganoPrimerEnfrentamientoLaMano
	^self primerEnfrentamientoFinalizado
		and: ((cartasJugadasPorLaMano at: 1) empardaCon: (cartasJugadasPorElPie at: 1)) not 
		and: 	((cartasJugadasPorLaMano at: 1) mataA: (cartasJugadasPorElPie at: 1	)) ! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:07:08'!
noEmpardaron

	^ ((cartasJugadasPorLaMano at: 1) empardaCon: (cartasJugadasPorElPie at: 1)) not! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:07:08' prior: 50865313!
ganoPrimerEnfrentamientoLaMano
	^self primerEnfrentamientoFinalizado
		and: self noEmpardaron 
		and: 	((cartasJugadasPorLaMano at: 1) mataA: (cartasJugadasPorElPie at: 1	)) ! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:09:29'!
ganoLaManoEn: enfrentamientoNumero
	^ (cartasJugadasPorLaMano at: enfrentamientoNumero) mataA: (cartasJugadasPorElPie at: enfrentamientoNumero)! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:09:50' prior: 50865330!
ganoPrimerEnfrentamientoLaMano
	^self primerEnfrentamientoFinalizado
		and: self noEmpardaron 
		and: (self ganoLaManoEn: 1).! !

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 21:10:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 21:10:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'DB 7/5/2021 21:10:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'DB 7/5/2021 21:10:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'DB 7/5/2021 21:10:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'DB 7/5/2021 21:10:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'DB 7/5/2021 21:10:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'DB 7/5/2021 21:10:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'DB 7/5/2021 21:10:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'DB 7/5/2021 21:10:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'DB 7/5/2021 21:10:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'DB 7/5/2021 21:10:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'DB 7/5/2021 21:10:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'DB 7/5/2021 21:10:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'DB 7/5/2021 21:10:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'DB 7/5/2021 21:10:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'DB 7/5/2021 21:10:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'DB 7/5/2021 21:10:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'DB 7/5/2021 21:10:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'DB 7/5/2021 21:10:09'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'DB 7/5/2021 21:10:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 21:10:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 21:10:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 21:10:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 21:10:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 21:10:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas stamp: 'DB 7/5/2021 21:10:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas stamp: 'DB 7/5/2021 21:10:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test08_laManoNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 21:10:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test09_elPieNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 21:10:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test10_lasCartasRepartidasNoPuedenTenerDuplicados stamp: 'DB 7/5/2021 21:10:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test11_cuandoArrancaElJuegoElPieEsperaSuTurno stamp: 'DB 7/5/2021 21:10:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test12_laManoNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 21:10:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test13_elPieNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 21:10:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test14_despuesQueSeJuegaElPrimerEnfrentamientoYGanaLaManoElTurnoSigueSiendoDeLaMano stamp: 'DB 7/5/2021 21:10:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test15_despuesQueSeJuegaElPrimerEnfrentamientoYGanaElPieElProximoTurnoEsDelPie stamp: 'DB 7/5/2021 21:10:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test16_siElPrimerEnfrentamientoElTurnoEsParaLaMano stamp: 'DB 7/5/2021 21:10:09'!
FAILURE!

!testRun: #RondaDeTrucoTest #test16_siElPrimerEnfrentamientoElTurnoEsParaLaMano stamp: 'DB 7/5/2021 21:10:09'!
FAILURE!

!testRun: #RondaDeTrucoTest #test16_siElPrimerEnfrentamientoElTurnoEsParaLaMano stamp: 'DB 7/5/2021 21:10:31'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:11:19' prior: 50864990!
ganoPrimerEnfrentamientoElPie
	^self ganoPrimerEnfrentamientoLaMano not and: self noEmpardaron ! !

!testRun: #RondaDeTrucoTest #test16_siElPrimerEnfrentamientoElTurnoEsParaLaMano stamp: 'DB 7/5/2021 21:11:20'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 21:11:23'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'DB 7/5/2021 21:11:23'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'DB 7/5/2021 21:11:23'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'DB 7/5/2021 21:11:23'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'DB 7/5/2021 21:11:23'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'DB 7/5/2021 21:11:23'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'DB 7/5/2021 21:11:23'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'DB 7/5/2021 21:11:23'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'DB 7/5/2021 21:11:23'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'DB 7/5/2021 21:11:23'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'DB 7/5/2021 21:11:23'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'DB 7/5/2021 21:11:23'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'DB 7/5/2021 21:11:23'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'DB 7/5/2021 21:11:23'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'DB 7/5/2021 21:11:23'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'DB 7/5/2021 21:11:23'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'DB 7/5/2021 21:11:23'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'DB 7/5/2021 21:11:23'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'DB 7/5/2021 21:11:23'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'DB 7/5/2021 21:11:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 21:11:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 21:11:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 21:11:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 21:11:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 21:11:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas stamp: 'DB 7/5/2021 21:11:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas stamp: 'DB 7/5/2021 21:11:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test08_laManoNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 21:11:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test09_elPieNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 21:11:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test10_lasCartasRepartidasNoPuedenTenerDuplicados stamp: 'DB 7/5/2021 21:11:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test11_cuandoArrancaElJuegoElPieEsperaSuTurno stamp: 'DB 7/5/2021 21:11:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test12_laManoNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 21:11:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test13_elPieNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 21:11:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test14_despuesQueSeJuegaElPrimerEnfrentamientoYGanaLaManoElTurnoSigueSiendoDeLaMano stamp: 'DB 7/5/2021 21:11:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test15_despuesQueSeJuegaElPrimerEnfrentamientoYGanaElPieElProximoTurnoEsDelPie stamp: 'DB 7/5/2021 21:11:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test16_siElPrimerEnfrentamientoElTurnoEsParaLaMano stamp: 'DB 7/5/2021 21:11:23'!
PASSED!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 21:11:41'!
test16_siElPrimerEnfrentamientoEsPardoElTurnoEsParaLaMano

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	ronda tiraLaMano: (CartaDeTruco bastoCon: 2).
	ronda tiraElPie: (CartaDeTruco espadaCon: 2).
	
	self assert: ronda primerEnfrentamientoFinalizado.
	self assert: ronda primerEnfrentamientoPardo.
	self assert: ronda esElTurnoDeLaMano.
	self deny: ronda esElTurnoDelPie.
	self deny: ronda ganoPrimerEnfrentamientoLaMano.
	self deny: ronda ganoPrimerEnfrentamientoElPie.
	
	! !

!methodRemoval: RondaDeTrucoTest #test16_siElPrimerEnfrentamientoElTurnoEsParaLaMano stamp: 'DB 7/5/2021 21:11:41'!
test16_siElPrimerEnfrentamientoElTurnoEsParaLaMano

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	ronda tiraLaMano: (CartaDeTruco bastoCon: 2).
	ronda tiraElPie: (CartaDeTruco espadaCon: 2).
	
	self assert: ronda primerEnfrentamientoFinalizado.
	self assert: ronda primerEnfrentamientoPardo.
	self assert: ronda esElTurnoDeLaMano.
	self deny: ronda esElTurnoDelPie.
	self deny: ronda ganoPrimerEnfrentamientoLaMano.
	self deny: ronda ganoPrimerEnfrentamientoElPie.
	
	!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 21:12:02'!
test17_siElPrimerEnfrentamientoEsPardoYLaManoGanaFinalizaElJuego

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	ronda tiraLaMano: (CartaDeTruco bastoCon: 2).
	ronda tiraElPie: (CartaDeTruco espadaCon: 2).
	
	self assert: ronda primerEnfrentamientoFinalizado.
	self assert: ronda primerEnfrentamientoPardo.
	self assert: ronda esElTurnoDeLaMano.
	self deny: ronda esElTurnoDelPie.
	self deny: ronda ganoPrimerEnfrentamientoLaMano.
	self deny: ronda ganoPrimerEnfrentamientoElPie.
	
	! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 21:12:24' prior: 50865676!
test17_siElPrimerEnfrentamientoEsPardoYLaManoGanaFinalizaElJuego

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	ronda tiraLaMano: (CartaDeTruco bastoCon: 2).
	ronda tiraElPie: (CartaDeTruco espadaCon: 2).
	
	
	self assert: ronda primerEnfrentamientoFinalizado.
	self assert: ronda primerEnfrentamientoPardo.
	self assert: ronda esElTurnoDeLaMano.
	self deny: ronda esElTurnoDelPie.
	self deny: ronda ganoPrimerEnfrentamientoLaMano.
	self deny: ronda ganoPrimerEnfrentamientoElPie.
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:13:24' prior: 50864500!
repartirParaElPie

	^OrderedCollection with: (CartaDeTruco anchoDeBasto ) with: (CartaDeTruco copaCon: 2 ) with: (CartaDeTruco espadaCon: 2)! !

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 21:13:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 21:13:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 21:13:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 21:13:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 21:13:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas stamp: 'DB 7/5/2021 21:13:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas stamp: 'DB 7/5/2021 21:13:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test08_laManoNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 21:13:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test09_elPieNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 21:13:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test10_lasCartasRepartidasNoPuedenTenerDuplicados stamp: 'DB 7/5/2021 21:13:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test11_cuandoArrancaElJuegoElPieEsperaSuTurno stamp: 'DB 7/5/2021 21:13:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test12_laManoNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 21:13:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test13_elPieNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 21:13:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test14_despuesQueSeJuegaElPrimerEnfrentamientoYGanaLaManoElTurnoSigueSiendoDeLaMano stamp: 'DB 7/5/2021 21:13:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test15_despuesQueSeJuegaElPrimerEnfrentamientoYGanaElPieElProximoTurnoEsDelPie stamp: 'DB 7/5/2021 21:13:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test16_siElPrimerEnfrentamientoEsPardoElTurnoEsParaLaMano stamp: 'DB 7/5/2021 21:13:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test17_siElPrimerEnfrentamientoEsPardoYLaManoGanaFinalizaElJuego stamp: 'DB 7/5/2021 21:13:25'!
PASSED!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 21:15:23' prior: 50865697!
test17_siElPrimerEnfrentamientoEsPardoYLaManoGanaFinalizaElJuego

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	ronda tiraLaMano: (CartaDeTruco bastoCon: 2).
	ronda tiraElPie: (CartaDeTruco espadaCon: 2).
	
	ronda tiraLaMano: (CartaDeTruco bastoCon: 3).
	ronda tiraElPie: (CartaDeTruco copaCon: 2).
	
	
	self assert: ronda primerEnfrentamientoFinalizado.
	self assert: ronda primerEnfrentamientoPardo.
	self assert: ronda esElTurnoDeLaMano.
	self deny: ronda esElTurnoDelPie.
	self deny: ronda ganoPrimerEnfrentamientoLaMano.
	self deny: ronda ganoPrimerEnfrentamientoElPie.
	
	! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 21:16:50' prior: 50865791!
test17_siElPrimerEnfrentamientoEsPardoYLaManoGanaFinalizaElJuego

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	ronda tiraLaMano: (CartaDeTruco bastoCon: 2).
	ronda tiraElPie: (CartaDeTruco espadaCon: 2).
	
	ronda tiraLaMano: (CartaDeTruco bastoCon: 3).
	ronda tiraElPie: (CartaDeTruco copaCon: 2).
		
	self assert: ronda primerEnfrentamientoFinalizado.
	self assert: ronda primerEnfrentamientoPardo.
	self assert: ronda segundoEnfrentamientoFinalizado.
	self assert: ronda juegoFinalizado.
	self deny: ronda esElTurnoDeLaMano.
	self deny: ronda esElTurnoDelPie.
	self assert: ronda ganoLaPartidaLaMano.
	self deny: ronda ganoLaPartidaElPie.
	
	! !

!testRun: #RondaDeTrucoTest #test17_siElPrimerEnfrentamientoEsPardoYLaManoGanaFinalizaElJuego stamp: 'DB 7/5/2021 21:16:57'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:17:16'!
segundoEnfrentamientoFinalizado
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:17:40' prior: 50865845!
segundoEnfrentamientoFinalizado
	^cartasJugadasPorLaMano size >= 2 and: cartasJugadasPorElPie size >= 2.! !

!testRun: #RondaDeTrucoTest #test17_siElPrimerEnfrentamientoEsPardoYLaManoGanaFinalizaElJuego stamp: 'DB 7/5/2021 21:17:41'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:17:50'!
juegoFinalizado
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:17:59' prior: 50865860!
juegoFinalizado
	^state juegoFinalizado! !

!testRun: #RondaDeTrucoTest #test17_siElPrimerEnfrentamientoEsPardoYLaManoGanaFinalizaElJuego stamp: 'DB 7/5/2021 21:18:01'!
ERROR!
!JuegaLaMano methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:18:10'!
juegoFinalizado
	self shouldBeImplemented.! !
!JuegaLaMano methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:18:15' prior: 50865873!
juegoFinalizado
	^false! !

!testRun: #RondaDeTrucoTest #test17_siElPrimerEnfrentamientoEsPardoYLaManoGanaFinalizaElJuego stamp: 'DB 7/5/2021 21:18:18'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:20:05' prior: 50865262!
proximoTurno
	
	cartasJugadasPorLaMano size = cartasJugadasPorElPie size ifTrue: [
			
		((cartasJugadasPorLaMano at: 1) empardaCon: (cartasJugadasPorElPie at: 1)) ifTrue: [^state := JuegaLaMano new initializeFor: self.].
		
		((cartasJugadasPorElPie at: 1) mataA: (cartasJugadasPorLaMano at: 1	)) 
			ifTrue: [state := JuegaElPie new initializeFor: self]
			ifFalse: [state := JuegaLaMano new initializeFor: self].
	]
	! !

!classDefinition: #JuegoFinalizado category: 'ISW1-2021-1C-2doParcial' stamp: 'DB 7/5/2021 21:21:40'!
Object subclass: #JuegoFinalizado
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:21:34' prior: 50865887!
proximoTurno
	
	cartasJugadasPorLaMano size = cartasJugadasPorElPie size ifTrue: [
			
		((cartasJugadasPorLaMano at: 1) empardaCon: (cartasJugadasPorElPie at: 1)) ifTrue: [
			self segundoEnfrentamientoFinalizado ifTrue: [
				^state := JuegoFinalizado new initializeFor: self.
			].
			^state := JuegaLaMano new initializeFor: self.].
		
		((cartasJugadasPorElPie at: 1) mataA: (cartasJugadasPorLaMano at: 1	)) 
			ifTrue: [state := JuegaElPie new initializeFor: self]
			ifFalse: [state := JuegaLaMano new initializeFor: self].
	]
	! !

!testRun: #RondaDeTrucoTest #test17_siElPrimerEnfrentamientoEsPardoYLaManoGanaFinalizaElJuego stamp: 'DB 7/5/2021 21:21:42'!
ERROR!

!classDefinition: #JuegoFinalizado category: 'ISW1-2021-1C-2doParcial' stamp: 'DB 7/5/2021 21:21:49'!
Object subclass: #JuegoFinalizado
	instanceVariableNames: 'self_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

Object subclass: #JuegoFinalizado
	instanceVariableNames: 'ronda'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #JuegoFinalizado category: 'ISW1-2021-1C-2doParcial' stamp: 'DB 7/5/2021 21:22:05'!
Object subclass: #JuegoFinalizado
	instanceVariableNames: 'ronda'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

EstadoDeLaRonda subclass: #JuegoFinalizado
	instanceVariableNames: 'ronda'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #JuegoFinalizado category: 'ISW1-2021-1C-2doParcial' stamp: 'DB 7/5/2021 21:22:13'!
EstadoDeLaRonda subclass: #JuegoFinalizado
	instanceVariableNames: 'ronda'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

EstadoDeLaRonda subclass: #JuegaElPie
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #JuegaElPie category: 'ISW1-2021-1C-2doParcial' stamp: 'DB 7/5/2021 21:22:43'!
EstadoDeLaRonda subclass: #JuegaElPie
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

EstadoDeLaRonda subclass: #JuegaLaMano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #JuegaLaMano category: 'ISW1-2021-1C-2doParcial' stamp: 'DB 7/5/2021 21:22:51'!
EstadoDeLaRonda subclass: #JuegaLaMano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

EstadoDeLaRonda subclass: #JuegoFinalizado
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #JuegoFinalizado category: 'ISW1-2021-1C-2doParcial' stamp: 'DB 7/5/2021 21:22:55'!
EstadoDeLaRonda subclass: #JuegoFinalizado
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!methodRemoval: JuegaLaMano #initializeFor: stamp: 'DB 7/5/2021 21:23:17'!
initializeFor: aRonda
	
	ronda := aRonda .!

!methodRemoval: JuegaElPie #initializeFor: stamp: 'DB 7/5/2021 21:23:22'!
initializeFor: aRonda
	
	ronda := aRonda .!

!classDefinition: #EstadoDeLaRonda category: 'ISW1-2021-1C-2doParcial' stamp: 'DB 7/5/2021 21:23:28'!
Object subclass: #EstadoDeLaRonda
	instanceVariableNames: 'ronda'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!EstadoDeLaRonda methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:23:26'!
initializeFor: aRonda
	
	ronda := aRonda .! !
!JuegoFinalizado methodsFor: 'no messages' stamp: 'DB 7/5/2021 21:24:31' overrides: 50863815!
esElTurnoDelPie
	^false! !
!JuegoFinalizado methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:24:40' prior: 50866027 overrides: 50863815!
esElTurnoDelPie
	^false! !
!JuegoFinalizado methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:24:49' prior: 50866032 overrides: 50863815!
esElTurnoDelPie
	^false! !

----SNAPSHOT----(5 July 2021 21:25:04) CuisUniversity-4532.image priorSource: 17039061!
!JuegoFinalizado methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:25:35'!
juegoFinalizado
	^true! !
!JuegaElPie methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:25:47'!
juegoFinalizado
	^false! !

!methodRemoval: JuegaElPie #proximoTurno stamp: 'DB 7/5/2021 21:25:52'!
proximoTurno
	ronda proximoTurno!
!EstadoDeLaRonda methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:26:07'!
juegoFinalizado
	self subclassResponsibility ! !

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 21:26:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 21:26:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 21:26:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 21:26:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 21:26:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas stamp: 'DB 7/5/2021 21:26:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas stamp: 'DB 7/5/2021 21:26:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test08_laManoNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 21:26:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test09_elPieNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 21:26:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test10_lasCartasRepartidasNoPuedenTenerDuplicados stamp: 'DB 7/5/2021 21:26:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test11_cuandoArrancaElJuegoElPieEsperaSuTurno stamp: 'DB 7/5/2021 21:26:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test12_laManoNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 21:26:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test13_elPieNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 21:26:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test14_despuesQueSeJuegaElPrimerEnfrentamientoYGanaLaManoElTurnoSigueSiendoDeLaMano stamp: 'DB 7/5/2021 21:26:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test15_despuesQueSeJuegaElPrimerEnfrentamientoYGanaElPieElProximoTurnoEsDelPie stamp: 'DB 7/5/2021 21:26:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test16_siElPrimerEnfrentamientoEsPardoElTurnoEsParaLaMano stamp: 'DB 7/5/2021 21:26:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test17_siElPrimerEnfrentamientoEsPardoYLaManoGanaFinalizaElJuego stamp: 'DB 7/5/2021 21:26:10'!
ERROR!

!testRun: #RondaDeTrucoTest #test17_siElPrimerEnfrentamientoEsPardoYLaManoGanaFinalizaElJuego stamp: 'DB 7/5/2021 21:26:10'!
ERROR!

^state juegoFinalizado!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:27:00' prior: 50865865!
juegoFinalizado
	^state juegoFinalizado! !

	^state esElTurnoDeLaMano!
!JuegoFinalizado methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:27:28' overrides: 50863784!
esElTurnoDeLaMano
	^false! !

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 21:27:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 21:27:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 21:27:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 21:27:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 21:27:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas stamp: 'DB 7/5/2021 21:27:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas stamp: 'DB 7/5/2021 21:27:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test08_laManoNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 21:27:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test09_elPieNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 21:27:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test10_lasCartasRepartidasNoPuedenTenerDuplicados stamp: 'DB 7/5/2021 21:27:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test11_cuandoArrancaElJuegoElPieEsperaSuTurno stamp: 'DB 7/5/2021 21:27:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test12_laManoNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 21:27:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test13_elPieNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 21:27:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test14_despuesQueSeJuegaElPrimerEnfrentamientoYGanaLaManoElTurnoSigueSiendoDeLaMano stamp: 'DB 7/5/2021 21:27:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test15_despuesQueSeJuegaElPrimerEnfrentamientoYGanaElPieElProximoTurnoEsDelPie stamp: 'DB 7/5/2021 21:27:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test16_siElPrimerEnfrentamientoEsPardoElTurnoEsParaLaMano stamp: 'DB 7/5/2021 21:27:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test17_siElPrimerEnfrentamientoEsPardoYLaManoGanaFinalizaElJuego stamp: 'DB 7/5/2021 21:27:30'!
ERROR!

!testRun: #RondaDeTrucoTest #test17_siElPrimerEnfrentamientoEsPardoYLaManoGanaFinalizaElJuego stamp: 'DB 7/5/2021 21:27:30'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:28:24'!
ganoLaPartidaLaMano
	self shouldBeImplemented.! !

!testRun: #RondaDeTrucoTest #test17_siElPrimerEnfrentamientoEsPardoYLaManoGanaFinalizaElJuego stamp: 'DB 7/5/2021 21:28:39'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:32:15' prior: 50866209!
ganoLaPartidaLaMano
		
	^self primerEnfrentamientoFinalizado 
	and: self primerEnfrentamientoPardo 
	and: (self ganoLaManoEn: 2).! !

!testRun: #RondaDeTrucoTest #test17_siElPrimerEnfrentamientoEsPardoYLaManoGanaFinalizaElJuego stamp: 'DB 7/5/2021 21:32:31'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:32:43'!
ganoLaPartidaElPie
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:33:38' prior: 50866229!
ganoLaPartidaElPie
	^self primerEnfrentamientoFinalizado 
	and: self primerEnfrentamientoPardo 
	and: (self ganoLaManoEn: 2) not! !

!testRun: #RondaDeTrucoTest #test17_siElPrimerEnfrentamientoEsPardoYLaManoGanaFinalizaElJuego stamp: 'DB 7/5/2021 21:33:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 21:33:49'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'DB 7/5/2021 21:33:49'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'DB 7/5/2021 21:33:49'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'DB 7/5/2021 21:33:49'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'DB 7/5/2021 21:33:49'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'DB 7/5/2021 21:33:49'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'DB 7/5/2021 21:33:49'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'DB 7/5/2021 21:33:49'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'DB 7/5/2021 21:33:49'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'DB 7/5/2021 21:33:49'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'DB 7/5/2021 21:33:49'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'DB 7/5/2021 21:33:49'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'DB 7/5/2021 21:33:49'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'DB 7/5/2021 21:33:49'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'DB 7/5/2021 21:33:49'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'DB 7/5/2021 21:33:49'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'DB 7/5/2021 21:33:49'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'DB 7/5/2021 21:33:49'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'DB 7/5/2021 21:33:49'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'DB 7/5/2021 21:33:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 21:33:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 21:33:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 21:33:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 21:33:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 21:33:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas stamp: 'DB 7/5/2021 21:33:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas stamp: 'DB 7/5/2021 21:33:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test08_laManoNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 21:33:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test09_elPieNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 21:33:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test10_lasCartasRepartidasNoPuedenTenerDuplicados stamp: 'DB 7/5/2021 21:33:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test11_cuandoArrancaElJuegoElPieEsperaSuTurno stamp: 'DB 7/5/2021 21:33:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test12_laManoNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 21:33:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test13_elPieNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 21:33:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test14_despuesQueSeJuegaElPrimerEnfrentamientoYGanaLaManoElTurnoSigueSiendoDeLaMano stamp: 'DB 7/5/2021 21:33:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test15_despuesQueSeJuegaElPrimerEnfrentamientoYGanaElPieElProximoTurnoEsDelPie stamp: 'DB 7/5/2021 21:33:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test16_siElPrimerEnfrentamientoEsPardoElTurnoEsParaLaMano stamp: 'DB 7/5/2021 21:33:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test17_siElPrimerEnfrentamientoEsPardoYLaManoGanaFinalizaElJuego stamp: 'DB 7/5/2021 21:33:49'!
PASSED!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 21:34:08'!
test18_siElPrimerEnfrentamientoEsPardoYElPieGanaFinalizaElJuego

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	ronda tiraLaMano: (CartaDeTruco bastoCon: 2).
	ronda tiraElPie: (CartaDeTruco espadaCon: 2).
	
	ronda tiraLaMano: (CartaDeTruco bastoCon: 3).
	ronda tiraElPie: (CartaDeTruco copaCon: 2).
		
	self assert: ronda primerEnfrentamientoFinalizado.
	self assert: ronda primerEnfrentamientoPardo.
	self assert: ronda segundoEnfrentamientoFinalizado.
	self assert: ronda juegoFinalizado.
	self deny: ronda esElTurnoDeLaMano.
	self deny: ronda esElTurnoDelPie.
	self assert: ronda ganoLaPartidaLaMano.
	self deny: ronda ganoLaPartidaElPie.
	
	! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 21:34:20' prior: 50866379!
test18_siElPrimerEnfrentamientoEsPardoYElPieGanaFinalizaElJuego

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	ronda tiraLaMano: (CartaDeTruco bastoCon: 2).
	ronda tiraElPie: (CartaDeTruco espadaCon: 2).
	
	ronda tiraLaMano: (CartaDeTruco bastoCon: 3).
	ronda tiraElPie: (CartaDeTruco anchoDeBasto).
		
	self assert: ronda primerEnfrentamientoFinalizado.
	self assert: ronda primerEnfrentamientoPardo.
	self assert: ronda segundoEnfrentamientoFinalizado.
	self assert: ronda juegoFinalizado.
	self deny: ronda esElTurnoDeLaMano.
	self deny: ronda esElTurnoDelPie.
	self assert: ronda ganoLaPartidaLaMano.
	self deny: ronda ganoLaPartidaElPie.
	
	! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 21:34:52' prior: 50866405!
test18_siElPrimerEnfrentamientoEsPardoYElPieGanaFinalizaElJuego

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	ronda tiraLaMano: (CartaDeTruco bastoCon: 2).
	ronda tiraElPie: (CartaDeTruco espadaCon: 2).
	
	ronda tiraLaMano: (CartaDeTruco bastoCon: 3).
	ronda tiraElPie: (CartaDeTruco anchoDeBasto).
		
	self assert: ronda primerEnfrentamientoFinalizado.
	self assert: ronda primerEnfrentamientoPardo.
	self assert: ronda segundoEnfrentamientoFinalizado.
	self assert: ronda juegoFinalizado.
	self deny: ronda esElTurnoDeLaMano.
	self deny: ronda esElTurnoDelPie.
	self deny: ronda ganoLaPartidaLaMano.
	self assert: ronda ganoLaPartidaElPie.
	
	! !

!testRun: #RondaDeTrucoTest #test18_siElPrimerEnfrentamientoEsPardoYElPieGanaFinalizaElJuego stamp: 'DB 7/5/2021 21:34:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 21:34:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 21:34:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 21:34:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 21:34:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 21:34:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas stamp: 'DB 7/5/2021 21:34:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas stamp: 'DB 7/5/2021 21:34:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test08_laManoNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 21:34:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test09_elPieNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 21:34:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test10_lasCartasRepartidasNoPuedenTenerDuplicados stamp: 'DB 7/5/2021 21:34:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test11_cuandoArrancaElJuegoElPieEsperaSuTurno stamp: 'DB 7/5/2021 21:34:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test12_laManoNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 21:34:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test13_elPieNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 21:34:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test14_despuesQueSeJuegaElPrimerEnfrentamientoYGanaLaManoElTurnoSigueSiendoDeLaMano stamp: 'DB 7/5/2021 21:34:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test15_despuesQueSeJuegaElPrimerEnfrentamientoYGanaElPieElProximoTurnoEsDelPie stamp: 'DB 7/5/2021 21:34:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test16_siElPrimerEnfrentamientoEsPardoElTurnoEsParaLaMano stamp: 'DB 7/5/2021 21:34:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test17_siElPrimerEnfrentamientoEsPardoYLaManoGanaFinalizaElJuego stamp: 'DB 7/5/2021 21:34:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test18_siElPrimerEnfrentamientoEsPardoYElPieGanaFinalizaElJuego stamp: 'DB 7/5/2021 21:34:54'!
PASSED!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 21:39:10'!
test19_siNoHayPardaEnLaPrimerElJuegoSeDefineEnLaTercera

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	ronda tiraLaMano: (CartaDeTruco bastoCon: 3).
	ronda tiraElPie: (CartaDeTruco copaCon: 2).
	
	ronda tiraLaMano: (CartaDeTruco bastoCon: 4).
	ronda tiraElPie: (CartaDeTruco anchoDeBasto).
	
	ronda tiraElPie: (CartaDeTruco espadaCon: 2).
	ronda tiraLaMano:(CartaDeTruco bastoCon: 2). 
		
	self assert: ronda primerEnfrentamientoFinalizado.
	self assert: ronda primerEnfrentamientoPardo.
	self assert: ronda segundoEnfrentamientoFinalizado.
	self  ronda juegoFinalizado.
	self deny: ronda esElTurnoDeLaMano.
	self deny: ronda esElTurnoDelPie.
	self deny: ronda ganoLaPartidaLaMano.
	self assert: ronda ganoLaPartidaElPie.
	
	! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 21:41:23' prior: 50866530!
test19_siNoHayPardaEnLaPrimerElJuegoSeDefineEnLaTercera

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	ronda tiraLaMano: (CartaDeTruco bastoCon: 3).
	ronda tiraElPie: (CartaDeTruco copaCon: 2).
	
	ronda tiraLaMano: (CartaDeTruco bastoCon: 4).
	ronda tiraElPie: (CartaDeTruco anchoDeBasto).
	
	ronda tiraElPie: (CartaDeTruco espadaCon: 2).
	ronda tiraLaMano:(CartaDeTruco bastoCon: 2). 
		
	self assert: ronda primerEnfrentamientoFinalizado.
	self deny: ronda primerEnfrentamientoPardo.
	self assert: ronda segundoEnfrentamientoFinalizado.
	self assert:  ronda juegoFinalizado.
	self deny: ronda esElTurnoDeLaMano.
	self deny: ronda esElTurnoDelPie.
	self deny: ronda ganoLaPartidaLaMano.
	self assert: ronda ganoLaPartidaElPie.
	
	! !

!testRun: #RondaDeTrucoTest #test19_siNoHayPardaEnLaPrimerElJuegoSeDefineEnLaTercera stamp: 'DB 7/5/2021 21:41:23'!
ERROR!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 21:41:38'!
_test19_siNoHayPardaEnLaPrimerElJuegoSeDefineEnLaTercera

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	ronda tiraLaMano: (CartaDeTruco bastoCon: 3).
	ronda tiraElPie: (CartaDeTruco copaCon: 2).
	
	ronda tiraLaMano: (CartaDeTruco bastoCon: 4).
	ronda tiraElPie: (CartaDeTruco anchoDeBasto).
	
	ronda tiraElPie: (CartaDeTruco espadaCon: 2).
	ronda tiraLaMano:(CartaDeTruco bastoCon: 2). 
		
	self assert: ronda primerEnfrentamientoFinalizado.
	self deny: ronda primerEnfrentamientoPardo.
	self assert: ronda segundoEnfrentamientoFinalizado.
	self assert:  ronda juegoFinalizado.
	self deny: ronda esElTurnoDeLaMano.
	self deny: ronda esElTurnoDelPie.
	self deny: ronda ganoLaPartidaLaMano.
	self assert: ronda ganoLaPartidaElPie.
	
	! !

!methodRemoval: RondaDeTrucoTest #test19_siNoHayPardaEnLaPrimerElJuegoSeDefineEnLaTercera stamp: 'DB 7/5/2021 21:41:38'!
test19_siNoHayPardaEnLaPrimerElJuegoSeDefineEnLaTercera

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	ronda tiraLaMano: (CartaDeTruco bastoCon: 3).
	ronda tiraElPie: (CartaDeTruco copaCon: 2).
	
	ronda tiraLaMano: (CartaDeTruco bastoCon: 4).
	ronda tiraElPie: (CartaDeTruco anchoDeBasto).
	
	ronda tiraElPie: (CartaDeTruco espadaCon: 2).
	ronda tiraLaMano:(CartaDeTruco bastoCon: 2). 
		
	self assert: ronda primerEnfrentamientoFinalizado.
	self deny: ronda primerEnfrentamientoPardo.
	self assert: ronda segundoEnfrentamientoFinalizado.
	self assert:  ronda juegoFinalizado.
	self deny: ronda esElTurnoDeLaMano.
	self deny: ronda esElTurnoDelPie.
	self deny: ronda ganoLaPartidaLaMano.
	self assert: ronda ganoLaPartidaElPie.
	
	!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 21:42:15'!
test19_noSePuedeSeguirJugandoLaRondaSiHayUnGanador

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	ronda tiraLaMano: (CartaDeTruco bastoCon: 3).
	ronda tiraElPie: (CartaDeTruco copaCon: 2).
	
	ronda tiraLaMano: (CartaDeTruco bastoCon: 4).
	ronda tiraElPie: (CartaDeTruco anchoDeBasto).
	
	ronda tiraElPie: (CartaDeTruco espadaCon: 2).
	ronda tiraLaMano:(CartaDeTruco bastoCon: 2). 
		
	self assert: ronda primerEnfrentamientoFinalizado.
	self deny: ronda primerEnfrentamientoPardo.
	self assert: ronda segundoEnfrentamientoFinalizado.
	self assert:  ronda juegoFinalizado.
	self deny: ronda esElTurnoDeLaMano.
	self deny: ronda esElTurnoDelPie.
	self deny: ronda ganoLaPartidaLaMano.
	self assert: ronda ganoLaPartidaElPie.
	
	! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 21:42:32' prior: 50866649!
test19_noSePuedeSeguirJugandoLaRondaSiHayUnGanador

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	ronda tiraLaMano: (CartaDeTruco bastoCon: 2).
	ronda tiraElPie: (CartaDeTruco espadaCon: 2).
	
	ronda tiraLaMano: (CartaDeTruco bastoCon: 3).
	ronda tiraElPie: (CartaDeTruco anchoDeBasto).
		
	self assert: ronda primerEnfrentamientoFinalizado.
	self assert: ronda primerEnfrentamientoPardo.
	self assert: ronda segundoEnfrentamientoFinalizado.
	self assert: ronda juegoFinalizado.
	self deny: ronda esElTurnoDeLaMano.
	self deny: ronda esElTurnoDelPie.
	self deny: ronda ganoLaPartidaLaMano.
	self assert: ronda ganoLaPartidaElPie.
	
	! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 21:42:53' prior: 50866678!
test19_noSePuedeSeguirJugandoLaRondaSiHayUnGanador

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	ronda tiraLaMano: (CartaDeTruco bastoCon: 2).
	ronda tiraElPie: (CartaDeTruco espadaCon: 2).
	
	ronda tiraLaMano: (CartaDeTruco bastoCon: 3).
	ronda tiraElPie: (CartaDeTruco anchoDeBasto).
		
	self assert: ronda primerEnfrentamientoFinalizado.
	self assert: ronda primerEnfrentamientoPardo.
	self assert: ronda segundoEnfrentamientoFinalizado.
	self assert: ronda juegoFinalizado.
	self deny: ronda esElTurnoDeLaMano.
	self deny: ronda esElTurnoDelPie.
	self deny: ronda ganoLaPartidaLaMano.
	self assert: ronda ganoLaPartidaElPie.
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 21:44:30' prior: 50866704!
test19_noSePuedeSeguirJugandoLaRondaSiHayUnGanador

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	ronda tiraLaMano: (CartaDeTruco bastoCon: 2).
	ronda tiraElPie: (CartaDeTruco espadaCon: 2).
	
	ronda tiraLaMano: (CartaDeTruco bastoCon: 3).
	ronda tiraElPie: (CartaDeTruco anchoDeBasto).
		
	self assert: ronda primerEnfrentamientoFinalizado.
	self assert: ronda primerEnfrentamientoPardo.
	self assert: ronda segundoEnfrentamientoFinalizado.
	self assert: ronda juegoFinalizado.
	self deny: ronda esElTurnoDeLaMano.
	self deny: ronda esElTurnoDelPie.
	self deny: ronda ganoLaPartidaLaMano.
	self assert: ronda ganoLaPartidaElPie.
	
	self 
		should: [self tiraLaMano: (CartaDeTruco bastoCon: 4) ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConCantidadIncorrectasDeCartasErrorDescription.
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test19_noSePuedeSeguirJugandoLaRondaSiHayUnGanador stamp: 'DB 7/5/2021 21:44:31'!
ERROR!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 21:44:42' prior: 50866730!
test19_noSePuedeSeguirJugandoLaRondaSiHayUnGanador

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	ronda tiraLaMano: (CartaDeTruco bastoCon: 2).
	ronda tiraElPie: (CartaDeTruco espadaCon: 2).
	
	ronda tiraLaMano: (CartaDeTruco bastoCon: 3).
	ronda tiraElPie: (CartaDeTruco anchoDeBasto).
		
	self assert: ronda primerEnfrentamientoFinalizado.
	self assert: ronda primerEnfrentamientoPardo.
	self assert: ronda segundoEnfrentamientoFinalizado.
	self assert: ronda juegoFinalizado.
	self deny: ronda esElTurnoDeLaMano.
	self deny: ronda esElTurnoDelPie.
	self deny: ronda ganoLaPartidaLaMano.
	self assert: ronda ganoLaPartidaElPie.
	
	self 
		should: [self tiraLaMano: (CartaDeTruco bastoCon: 4) ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConCantidadIncorrectasDeCartasErrorDescription.
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test19_noSePuedeSeguirJugandoLaRondaSiHayUnGanador stamp: 'DB 7/5/2021 21:44:44'!
ERROR!
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 21:44:58' prior: 50866766!
test19_noSePuedeSeguirJugandoLaRondaSiHayUnGanador

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	ronda tiraLaMano: (CartaDeTruco bastoCon: 2).
	ronda tiraElPie: (CartaDeTruco espadaCon: 2).
	
	ronda tiraLaMano: (CartaDeTruco bastoCon: 3).
	ronda tiraElPie: (CartaDeTruco anchoDeBasto).
		
	self assert: ronda primerEnfrentamientoFinalizado.
	self assert: ronda primerEnfrentamientoPardo.
	self assert: ronda segundoEnfrentamientoFinalizado.
	self assert: ronda juegoFinalizado.
	self deny: ronda esElTurnoDeLaMano.
	self deny: ronda esElTurnoDelPie.
	self deny: ronda ganoLaPartidaLaMano.
	self assert: ronda ganoLaPartidaElPie.
	
	self 
		should: [ronda tiraLaMano: (CartaDeTruco bastoCon: 4) ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco jugadorConCantidadIncorrectasDeCartasErrorDescription.
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test19_noSePuedeSeguirJugandoLaRondaSiHayUnGanador stamp: 'DB 7/5/2021 21:44:59'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:47:08' prior: 50865094!
tiraElPie: aCartaDeTruco 

	state tiraElPie: self.

	state esElTurnoDelPie ifFalse: [	self error: self class noEsTuTurnoErrorDescription].
	
	(cartasDelPie includes: aCartaDeTruco) ifFalse: [	self error: self class laCartaSeleccionadaNoEstaEntreTusCartas].
	
	cartasJugadasPorElPie add: aCartaDeTruco .
	
	self proximoTurno ! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:48:29' prior: 50866838!
tiraElPie: aCartaDeTruco 

	state tiraElPie.

	state esElTurnoDelPie ifFalse: [	self error: self class noEsTuTurnoErrorDescription].
	
	(cartasDelPie includes: aCartaDeTruco) ifFalse: [	self error: self class laCartaSeleccionadaNoEstaEntreTusCartas].
	
	cartasJugadasPorElPie add: aCartaDeTruco .
	
	self proximoTurno ! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:48:57'!
tiraElPieCuandoEraSuTurno: aCartaDeTruco 

	state tiraElPie: aCartaDeTruco.

	state esElTurnoDelPie ifFalse: [	self error: self class noEsTuTurnoErrorDescription].
	
	(cartasDelPie includes: aCartaDeTruco) ifFalse: [	self error: self class laCartaSeleccionadaNoEstaEntreTusCartas].
	
	cartasJugadasPorElPie add: aCartaDeTruco .
	
	self proximoTurno ! !
!RondaDeTrucoTest methodsFor: 'creacion' stamp: 'DB 7/5/2021 21:50:41' prior: 50866802!
test19_noSePuedeSeguirJugandoLaRondaSiHayUnGanador

	|  ronda |
	ronda := self crearRondaDeTrucoConCartasDeLaMano: self repartirParaLaMano yCartasDelPie: self repartirParaElPie.
	ronda tiraLaMano: (CartaDeTruco bastoCon: 2).
	ronda tiraElPie: (CartaDeTruco espadaCon: 2).
	
	ronda tiraLaMano: (CartaDeTruco bastoCon: 3).
	ronda tiraElPie: (CartaDeTruco anchoDeBasto).
		
	self assert: ronda primerEnfrentamientoFinalizado.
	self assert: ronda primerEnfrentamientoPardo.
	self assert: ronda segundoEnfrentamientoFinalizado.
	self assert: ronda juegoFinalizado.
	self deny: ronda esElTurnoDeLaMano.
	self deny: ronda esElTurnoDelPie.
	self deny: ronda ganoLaPartidaLaMano.
	self assert: ronda ganoLaPartidaElPie.
	
	self 
		should: [ronda tiraLaMano: (CartaDeTruco bastoCon: 4) ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: RondaDeTruco elJuegoEstaFinalizadoErrorDescription.
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test19_noSePuedeSeguirJugandoLaRondaSiHayUnGanador stamp: 'DB 7/5/2021 21:51:02'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:51:41' prior: 50866852!
tiraElPie: aCartaDeTruco 

	state estaFinalizado ifTrue: [self error: self class elJuegoEstaFinalizadoErrorDescription].

	state esElTurnoDelPie ifFalse: [	self error: self class noEsTuTurnoErrorDescription].
	
	(cartasDelPie includes: aCartaDeTruco) ifFalse: [	self error: self class laCartaSeleccionadaNoEstaEntreTusCartas].
	
	cartasJugadasPorElPie add: aCartaDeTruco .
	
	self proximoTurno ! !

!testRun: #RondaDeTrucoTest #test19_noSePuedeSeguirJugandoLaRondaSiHayUnGanador stamp: 'DB 7/5/2021 21:51:44'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:52:21' prior: 50866914!
tiraElPie: aCartaDeTruco 

	state juegoFinalizado ifTrue: [self error: self class elJuegoEstaFinalizadoErrorDescription].

	state esElTurnoDelPie ifFalse: [	self error: self class noEsTuTurnoErrorDescription].
	
	(cartasDelPie includes: aCartaDeTruco) ifFalse: [	self error: self class laCartaSeleccionadaNoEstaEntreTusCartas].
	
	cartasJugadasPorElPie add: aCartaDeTruco .
	
	self proximoTurno ! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:52:44' prior: 50864877!
tiraLaMano: aCartaDeTruco 


	state juegoFinalizado ifTrue: [self error: self class elJuegoEstaFinalizadoErrorDescription].

	(cartasDeLaMano includes: aCartaDeTruco) ifFalse: [	self error: self class laCartaSeleccionadaNoEstaEntreTusCartas].
	
	cartasJugadasPorLaMano add: aCartaDeTruco.
	
	state := JuegaElPie new	 initializeFor: self.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:52:46' prior: 50866950!
tiraLaMano: aCartaDeTruco 

	state juegoFinalizado ifTrue: [self error: self class elJuegoEstaFinalizadoErrorDescription].

	(cartasDeLaMano includes: aCartaDeTruco) ifFalse: [	self error: self class laCartaSeleccionadaNoEstaEntreTusCartas].
	
	cartasJugadasPorLaMano add: aCartaDeTruco.
	
	state := JuegaElPie new	 initializeFor: self.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:52:55' prior: 50866964!
tiraLaMano: aCartaDeTruco 

	state juegoFinalizado ifTrue: [self error: self class elJuegoEstaFinalizadoErrorDescription].

	(cartasDeLaMano includes: aCartaDeTruco) ifFalse: [	self error: self class laCartaSeleccionadaNoEstaEntreTusCartas].
	
	cartasJugadasPorLaMano add: aCartaDeTruco.
	
	state := JuegaElPie new	 initializeFor: self.! !

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 21:52:56'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 21:52:56'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 21:52:56'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 21:52:56'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 21:52:56'!
PASSED!

!testRun: #RondaDeTrucoTest #test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas stamp: 'DB 7/5/2021 21:52:56'!
PASSED!

!testRun: #RondaDeTrucoTest #test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas stamp: 'DB 7/5/2021 21:52:56'!
PASSED!

!testRun: #RondaDeTrucoTest #test08_laManoNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 21:52:56'!
PASSED!

!testRun: #RondaDeTrucoTest #test09_elPieNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 21:52:56'!
PASSED!

!testRun: #RondaDeTrucoTest #test10_lasCartasRepartidasNoPuedenTenerDuplicados stamp: 'DB 7/5/2021 21:52:56'!
PASSED!

!testRun: #RondaDeTrucoTest #test11_cuandoArrancaElJuegoElPieEsperaSuTurno stamp: 'DB 7/5/2021 21:52:56'!
PASSED!

!testRun: #RondaDeTrucoTest #test12_laManoNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 21:52:56'!
PASSED!

!testRun: #RondaDeTrucoTest #test13_elPieNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 21:52:56'!
PASSED!

!testRun: #RondaDeTrucoTest #test14_despuesQueSeJuegaElPrimerEnfrentamientoYGanaLaManoElTurnoSigueSiendoDeLaMano stamp: 'DB 7/5/2021 21:52:56'!
PASSED!

!testRun: #RondaDeTrucoTest #test15_despuesQueSeJuegaElPrimerEnfrentamientoYGanaElPieElProximoTurnoEsDelPie stamp: 'DB 7/5/2021 21:52:56'!
PASSED!

!testRun: #RondaDeTrucoTest #test16_siElPrimerEnfrentamientoEsPardoElTurnoEsParaLaMano stamp: 'DB 7/5/2021 21:52:56'!
PASSED!

!testRun: #RondaDeTrucoTest #test17_siElPrimerEnfrentamientoEsPardoYLaManoGanaFinalizaElJuego stamp: 'DB 7/5/2021 21:52:56'!
PASSED!

!testRun: #RondaDeTrucoTest #test18_siElPrimerEnfrentamientoEsPardoYElPieGanaFinalizaElJuego stamp: 'DB 7/5/2021 21:52:56'!
PASSED!

!testRun: #RondaDeTrucoTest #test19_noSePuedeSeguirJugandoLaRondaSiHayUnGanador stamp: 'DB 7/5/2021 21:52:56'!
ERROR!

!testRun: #RondaDeTrucoTest #test19_noSePuedeSeguirJugandoLaRondaSiHayUnGanador stamp: 'DB 7/5/2021 21:52:56'!
ERROR!
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:53:04'!
elJuegoEstaFinalizadoErrorDescription
	self shouldBeImplemented.! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'DB 7/5/2021 21:53:19' prior: 50867069!
elJuegoEstaFinalizadoErrorDescription
	^'El juego esta finalizado'! !

!testRun: #RondaDeTrucoTest #test19_noSePuedeSeguirJugandoLaRondaSiHayUnGanador stamp: 'DB 7/5/2021 21:53:20'!
PASSED!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 21:53:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 21:53:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 21:53:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 21:53:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 21:53:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas stamp: 'DB 7/5/2021 21:53:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas stamp: 'DB 7/5/2021 21:53:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test08_laManoNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 21:53:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test09_elPieNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 21:53:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test10_lasCartasRepartidasNoPuedenTenerDuplicados stamp: 'DB 7/5/2021 21:53:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test11_cuandoArrancaElJuegoElPieEsperaSuTurno stamp: 'DB 7/5/2021 21:53:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test12_laManoNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 21:53:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test13_elPieNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 21:53:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test14_despuesQueSeJuegaElPrimerEnfrentamientoYGanaLaManoElTurnoSigueSiendoDeLaMano stamp: 'DB 7/5/2021 21:53:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test15_despuesQueSeJuegaElPrimerEnfrentamientoYGanaElPieElProximoTurnoEsDelPie stamp: 'DB 7/5/2021 21:53:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test16_siElPrimerEnfrentamientoEsPardoElTurnoEsParaLaMano stamp: 'DB 7/5/2021 21:53:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test17_siElPrimerEnfrentamientoEsPardoYLaManoGanaFinalizaElJuego stamp: 'DB 7/5/2021 21:53:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test18_siElPrimerEnfrentamientoEsPardoYElPieGanaFinalizaElJuego stamp: 'DB 7/5/2021 21:53:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test19_noSePuedeSeguirJugandoLaRondaSiHayUnGanador stamp: 'DB 7/5/2021 21:53:22'!
PASSED!

!methodRemoval: RondaDeTruco #tiraElPieCuandoEraSuTurno: stamp: 'DB 7/5/2021 21:54:41'!
tiraElPieCuandoEraSuTurno: aCartaDeTruco 

	state tiraElPie: aCartaDeTruco.

	state esElTurnoDelPie ifFalse: [	self error: self class noEsTuTurnoErrorDescription].
	
	(cartasDelPie includes: aCartaDeTruco) ifFalse: [	self error: self class laCartaSeleccionadaNoEstaEntreTusCartas].
	
	cartasJugadasPorElPie add: aCartaDeTruco .
	
	self proximoTurno !

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'DB 7/5/2021 21:54:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'DB 7/5/2021 21:54:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'DB 7/5/2021 21:54:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'DB 7/5/2021 21:54:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'DB 7/5/2021 21:54:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'DB 7/5/2021 21:54:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'DB 7/5/2021 21:54:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'DB 7/5/2021 21:54:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'DB 7/5/2021 21:54:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'DB 7/5/2021 21:54:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'DB 7/5/2021 21:54:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'DB 7/5/2021 21:54:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'DB 7/5/2021 21:54:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'DB 7/5/2021 21:54:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'DB 7/5/2021 21:54:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'DB 7/5/2021 21:54:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'DB 7/5/2021 21:54:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'DB 7/5/2021 21:54:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'DB 7/5/2021 21:54:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 21:54:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 21:54:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 21:54:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 21:54:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 21:54:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas stamp: 'DB 7/5/2021 21:54:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas stamp: 'DB 7/5/2021 21:54:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test08_laManoNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 21:54:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test09_elPieNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 21:54:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test10_lasCartasRepartidasNoPuedenTenerDuplicados stamp: 'DB 7/5/2021 21:54:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test11_cuandoArrancaElJuegoElPieEsperaSuTurno stamp: 'DB 7/5/2021 21:54:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test12_laManoNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 21:54:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test13_elPieNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 21:54:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test14_despuesQueSeJuegaElPrimerEnfrentamientoYGanaLaManoElTurnoSigueSiendoDeLaMano stamp: 'DB 7/5/2021 21:54:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test15_despuesQueSeJuegaElPrimerEnfrentamientoYGanaElPieElProximoTurnoEsDelPie stamp: 'DB 7/5/2021 21:54:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test16_siElPrimerEnfrentamientoEsPardoElTurnoEsParaLaMano stamp: 'DB 7/5/2021 21:54:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test17_siElPrimerEnfrentamientoEsPardoYLaManoGanaFinalizaElJuego stamp: 'DB 7/5/2021 21:54:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test18_siElPrimerEnfrentamientoEsPardoYElPieGanaFinalizaElJuego stamp: 'DB 7/5/2021 21:54:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test19_noSePuedeSeguirJugandoLaRondaSiHayUnGanador stamp: 'DB 7/5/2021 21:54:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 21:55:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 21:55:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 21:55:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 21:55:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 21:55:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas stamp: 'DB 7/5/2021 21:55:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas stamp: 'DB 7/5/2021 21:55:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test08_laManoNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 21:55:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test09_elPieNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 21:55:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test10_lasCartasRepartidasNoPuedenTenerDuplicados stamp: 'DB 7/5/2021 21:55:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test11_cuandoArrancaElJuegoElPieEsperaSuTurno stamp: 'DB 7/5/2021 21:55:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test12_laManoNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 21:55:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test13_elPieNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 21:55:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test14_despuesQueSeJuegaElPrimerEnfrentamientoYGanaLaManoElTurnoSigueSiendoDeLaMano stamp: 'DB 7/5/2021 21:55:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test15_despuesQueSeJuegaElPrimerEnfrentamientoYGanaElPieElProximoTurnoEsDelPie stamp: 'DB 7/5/2021 21:55:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test16_siElPrimerEnfrentamientoEsPardoElTurnoEsParaLaMano stamp: 'DB 7/5/2021 21:55:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test17_siElPrimerEnfrentamientoEsPardoYLaManoGanaFinalizaElJuego stamp: 'DB 7/5/2021 21:55:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test18_siElPrimerEnfrentamientoEsPardoYElPieGanaFinalizaElJuego stamp: 'DB 7/5/2021 21:55:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test19_noSePuedeSeguirJugandoLaRondaSiHayUnGanador stamp: 'DB 7/5/2021 21:55:36'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'DB 7/5/2021 21:55:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'DB 7/5/2021 21:55:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'DB 7/5/2021 21:55:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'DB 7/5/2021 21:55:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'DB 7/5/2021 21:55:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'DB 7/5/2021 21:55:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'DB 7/5/2021 21:55:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'DB 7/5/2021 21:55:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'DB 7/5/2021 21:55:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'DB 7/5/2021 21:55:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'DB 7/5/2021 21:55:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'DB 7/5/2021 21:55:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'DB 7/5/2021 21:55:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'DB 7/5/2021 21:55:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'DB 7/5/2021 21:55:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'DB 7/5/2021 21:55:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'DB 7/5/2021 21:55:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'DB 7/5/2021 21:55:40'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'DB 7/5/2021 21:55:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test01_arrancaJugandoSiempreLaMano stamp: 'DB 7/5/2021 21:55:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test02_noSePuedeCrearUnaRondaSiLaManoTieneMenosDeTresCartas stamp: 'DB 7/5/2021 21:55:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test03_noSePuedeCrearUnaRondaSiElPieTieneMenosDeTresCartas stamp: 'DB 7/5/2021 21:55:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test04_lasCartasDeLaManoTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 21:55:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test05_lasCartasDelPieTienenQueSerCartasDeTruco stamp: 'DB 7/5/2021 21:55:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test06_noSePuedeCrearUnaRondaSiLaManoTieneMasDeTresCartas stamp: 'DB 7/5/2021 21:55:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test07_noSePuedeCrearUnaRondaSiElPieTieneMasDeTresCartas stamp: 'DB 7/5/2021 21:55:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test08_laManoNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 21:55:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test09_elPieNoPuedeTenerCartasDuplicadas stamp: 'DB 7/5/2021 21:55:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test10_lasCartasRepartidasNoPuedenTenerDuplicados stamp: 'DB 7/5/2021 21:55:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test11_cuandoArrancaElJuegoElPieEsperaSuTurno stamp: 'DB 7/5/2021 21:55:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test12_laManoNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 21:55:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test13_elPieNoPuedeTirarCartasQueNoTenga stamp: 'DB 7/5/2021 21:55:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test14_despuesQueSeJuegaElPrimerEnfrentamientoYGanaLaManoElTurnoSigueSiendoDeLaMano stamp: 'DB 7/5/2021 21:55:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test15_despuesQueSeJuegaElPrimerEnfrentamientoYGanaElPieElProximoTurnoEsDelPie stamp: 'DB 7/5/2021 21:55:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test16_siElPrimerEnfrentamientoEsPardoElTurnoEsParaLaMano stamp: 'DB 7/5/2021 21:55:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test17_siElPrimerEnfrentamientoEsPardoYLaManoGanaFinalizaElJuego stamp: 'DB 7/5/2021 21:55:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test18_siElPrimerEnfrentamientoEsPardoYElPieGanaFinalizaElJuego stamp: 'DB 7/5/2021 21:55:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test19_noSePuedeSeguirJugandoLaRondaSiHayUnGanador stamp: 'DB 7/5/2021 21:55:40'!
PASSED!

----QUIT----(5 July 2021 21:56:44) CuisUniversity-4532.image priorSource: 17100474!