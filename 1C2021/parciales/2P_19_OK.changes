----End fileIn of C:\Users\malka\Downloads\ISW1-2021-1C-2doParcial.st----!

TestCase subclass: #JuegoDeTrucoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #JuegoDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'ms 7/5/2021 17:22:03'!
TestCase subclass: #JuegoDeTrucoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

Object subclass: #Ronda
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'ms 7/5/2021 17:28:20'!
Object subclass: #Ronda
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!JuegoDeTrucoTest methodsFor: 'nil' stamp: 'ms 7/5/2021 17:28:43'!
test01NoSePuedeCrearUnaRondaSinCartas
	
	|ronda jugadorMano jugadorPie|
	
	jugadorMano := {}.
	jugadorPie := {}.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 17:30:29' prior: 51211835!
test01NoSePuedeCrearUnaRondaSinCartas
	
	|ronda jugadorMano jugadorPie|
	
	jugadorMano := {}.
	jugadorPie := {}.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	
	self should: []
	raise: Error - MessageNotUnderstood
	withExceptionDo:[:anError |
		self assert: Ronda noSePuedeCrearUnaRondaSinCartas equals: anError messageText .
		]! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 17:31:47' prior: 51211844!
test01NoSePuedeCrearUnaRondaSinCartas
	
	|jugadorMano jugadorPie|
	
	jugadorMano := {}.
	jugadorPie := {}.
	
	self should: [Ronda crearCon: jugadorMano y: jugadorPie.]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[:anError |
		self assert: Ronda noSePuedeCrearUnaRondaSinCartas equals: anError messageText .
		]! !

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 17:31:49'!
ERROR!
!Ronda class methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 17:31:54'!
crearCon: anArray y: anArray2 
	self shouldBeImplemented.! !
!Ronda class methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 17:32:32' prior: 51211874!
crearCon: jugadorMano y: jugadorPie 
	
	^self new iniciarRondaConUn: jugadorMano yUn: jugadorPie! !

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 17:32:35'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 17:32:40'!
iniciarRondaConUn: anArray yUn: anArray2 
	self shouldBeImplemented.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 17:34:06' prior: 51211888!
iniciarRondaConUn: unJugadorMano yUn: unJugadorPie

	(unJugadorMano isEmpty or: [unJugadorPie isEmpty]) isTrue: [^Error signal: self class noSePuedeCrearUnaRondaSinCartas]! !

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 17:34:11'!
ERROR!

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 17:34:25'!
ERROR!

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 17:34:31'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 17:34:35' prior: 51211893!
iniciarRondaConUn: unJugadorMano yUn: unJugadorPie

	(unJugadorMano isEmpty or: [unJugadorPie isEmpty]) ifTrue: [^Error signal: self class noSePuedeCrearUnaRondaSinCartas]! !

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 17:34:39'!
ERROR!
!Ronda class methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 17:34:44'!
noSePuedeCrearUnaRondaSinCartas
	self shouldBeImplemented.! !
!Ronda class methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 17:35:09' prior: 51211924!
noSePuedeCrearUnaRondaSinCartas
	
	^ 'No Se Puede Crear Una Ronda Sin Cartas'! !

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 17:35:11'!
PASSED!

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 17:35:11'!
PASSED!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 17:35:43'!
test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas
	
	|jugadorMano jugadorPie|
	
	jugadorMano := {}.
	jugadorPie := {}.
	
	self should: [Ronda crearCon: jugadorMano y: jugadorPie.]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[:anError |
		self assert: Ronda noSePuedeCrearUnaRondaSinCartas equals: anError messageText .
		]! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 17:36:39' prior: 51211941!
test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas
	
	|jugadorMano jugadorPie|
	
	jugadorMano := {CartaDeTruco bastoCon: 1. }.
	jugadorPie := {CartaDeTruco bastoCon: 2. CartaDeTruco espadaCon: 3. CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 1}.
	
	self should: [Ronda crearCon: jugadorMano y: jugadorPie.]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[:anError |
		self assert: Ronda noSePuedeCrearUnaRondaSinCartas equals: anError messageText .
		]! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 17:37:37' prior: 51211956!
test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas
	
	|jugadorMano jugadorPie|
	
	jugadorMano := {CartaDeTruco bastoCon: 1. }.
	jugadorPie := {CartaDeTruco bastoCon: 2. CartaDeTruco espadaCon: 3. CartaDeTruco copaCon: 1. CartaDeTruco oroCon: 5}.
	
	self should: [Ronda crearCon: jugadorMano y: jugadorPie.]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[:anError |
		self assert: Ronda noSePuedeCrearUnaRondaSinCartas equals: anError messageText .
		]! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 17:37:49' prior: 51211975!
test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas
	
	|jugadorMano jugadorPie|
	
	jugadorMano := {CartaDeTruco bastoCon: 1. }.
	jugadorPie := {CartaDeTruco bastoCon: 2. CartaDeTruco espadaCon: 3. CartaDeTruco copaCon: 1. CartaDeTruco oroCon: 5}.
	
	self should: [Ronda crearCon: jugadorMano y: jugadorPie.]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[:anError |
		self assert: Ronda NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas equals: anError messageText .
		]! !

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 17:37:53'!
FAILURE!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 17:38:24'!
FAILURE!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 17:38:24'!
FAILURE!
!Ronda class methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 17:38:53' prior: 51211879!
crearCon: jugadorMano y: jugadorPie 
	
	(jugadorMano isEmpty or: [jugadorMano isEmpty]) ifTrue: [^Error signal: self class noSePuedeCrearUnaRondaSinCartas].
	
	
	
	^self new iniciarRondaConUn: jugadorMano yUn: jugadorPie! !
!Ronda class methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 17:39:24' prior: 51212026!
crearCon: jugadorMano y: jugadorPie 
	
	
	^self new iniciarRondaConUn: jugadorMano yUn: jugadorPie! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 17:40:07' prior: 51211912!
iniciarRondaConUn: unJugadorMano yUn: unJugadorPie

	(unJugadorMano isEmpty or: [unJugadorPie isEmpty]) ifTrue: [^Error signal: self class noSePuedeCrearUnaRondaSinCartas].
	
	self validarJugador: unJugadorMano .
	self validarJugador: unJugadorPie .! !

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 17:40:15'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 17:40:19'!
validarJugador: anArray 
	self shouldBeImplemented.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 17:41:33' prior: 51212057!
validarJugador: unJugador
 
	(unJugador size ~= 3) ifTrue: [^Error signal: self class NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas] ! !

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 17:41:39'!
ERROR!
!Ronda class methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 17:41:42'!
NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas
	self shouldBeImplemented.! !
!Ronda class methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 17:42:07' prior: 51212074!
NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas
	
	^'No Se Puede Crear Una Ronda Sin Que Cada Jugador Tenga Exactamente 3 Cartas'! !

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 17:42:07'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 17:42:12'!
PASSED!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 17:42:22' prior: 51212042!
iniciarRondaConUn: unJugadorMano yUn: unJugadorPie

	self validarJugador: unJugadorMano .
	self validarJugador: unJugadorPie .! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 17:42:37' prior: 51212062!
validarJugador: unJugador
 	
	(unJugador isEmpty) ifTrue: [^Error signal: self class noSePuedeCrearUnaRondaSinCartas].	
	
	(unJugador size ~= 3) ifTrue: [^Error signal: self class NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas] ! !

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 17:42:38'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 17:42:38'!
PASSED!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 17:45:29'!
test03
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := {CartaDeTruco bastoCon: 1. CartaDeTruco oroCon: 5}.
	jugadorPie := {CartaDeTruco bastoCon: 2. CartaDeTruco espadaCon: 3. CartaDeTruco copaCon: 1. }.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	
	self should: []
	raise: Error - MessageNotUnderstood
	withExceptionDo:[:anError |
		self assert: Ronda NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas equals: anError messageText .
		]! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 17:47:27' prior: 51212121!
test03
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := {CartaDeTruco bastoCon: 1. CartaDeTruco copaCon: 1. CartaDeTruco oroCon: 2}.
	jugadorPie := {CartaDeTruco bastoCon: 2. CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	
	self should: []
	raise: Error - MessageNotUnderstood
	withExceptionDo:[:anError |
		self assert: Ronda NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas equals: anError messageText .
		]! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 17:48:05' prior: 51212139!
test03
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := {CartaDeTruco bastoCon: 1. CartaDeTruco copaCon: 1. CartaDeTruco oroCon: 2}.
	jugadorPie := {CartaDeTruco bastoCon: 2. CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	
	self assert: 1! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 17:53:10' prior: 51212158!
test03
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := {CartaDeTruco bastoCon: 1. CartaDeTruco espadaCon: 1. CartaDeTruco oroCon: 2}.
	jugadorPie := {CartaDeTruco bastoCon: 6. CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	
	self assert: 1! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 18:04:10' prior: 51212171!
test03
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := {CartaDeTruco bastoCon: 1. CartaDeTruco espadaCon: 1. CartaDeTruco oroCon: 2}.
	jugadorPie := {CartaDeTruco bastoCon: 6. CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	
	ronda juega: jugadorMano tira: (CartaDeTruco bastoCon: 1 ) enElEnfrentamiento: 1.
	ronda juega: jugadorPie tira: (CartaDeTruco bastoCon: 6 ) enElEnfrentamiento: 1.
	
	self assert: (ronda ganoEnElEnfrentamiento: 1) equals: jugadorMano .
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco espadaCon: 1. CartaDeTruco oroCon: 2}.
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }.! !

!testRun: #JuegoDeTrucoTest #test03 stamp: 'ms 7/5/2021 18:04:26'!
ERROR!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'ms 7/5/2021 18:05:04'!
Object subclass: #Ronda
	instanceVariableNames: 'jugadorMano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'ms 7/5/2021 18:05:05'!
Object subclass: #Ronda
	instanceVariableNames: 'jugadorMano jugadorPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 18:05:02' prior: 51212096!
iniciarRondaConUn: unJugadorMano yUn: unJugadorPie

	self validarJugador: unJugadorMano .
	self validarJugador: unJugadorPie .
	
	jugadorMano := unJugadorMano .
	jugadorPie := unJugadorPie .! !
!Ronda methodsFor: 'nil' stamp: 'ms 7/5/2021 18:06:10'!
juega: unJugador tira: unaCarta enElEnfrentamiento:  numeroDeEnfrentamiento

	! !

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'ms 7/5/2021 18:06:51'!
Object subclass: #Ronda
	instanceVariableNames: 'jugadorMano jugadorPie enfrentamientos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 18:06:50' prior: 51212228!
iniciarRondaConUn: unJugadorMano yUn: unJugadorPie

	self validarJugador: unJugadorMano .
	self validarJugador: unJugadorPie .
	
	jugadorMano := unJugadorMano .
	jugadorPie := unJugadorPie .
	enfrentamientos := Dictionary new.! !

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'ms 7/5/2021 18:08:03'!
Object subclass: #Ronda
	instanceVariableNames: 'jugadorMano jugadorPie enfrentamientos enfrentamiento1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 18:08:01' prior: 51212250!
iniciarRondaConUn: unJugadorMano yUn: unJugadorPie

	self validarJugador: unJugadorMano .
	self validarJugador: unJugadorPie .
	
	jugadorMano := unJugadorMano .
	jugadorPie := unJugadorPie .
	enfrentamiento1 := OrderedCollection new.
	enfrentamientos := Dictionary new.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 18:09:52' prior: 51212236!
juega: unJugador tira: unaCarta enElEnfrentamiento:  numeroDeEnfrentamiento

	enfrentamiento1 add: unaCarta.
	unJugador remove: unaCarta.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 18:12:05' prior: 51212281!
juega: unJugador tira: unaCarta enElEnfrentamiento:  numeroDeEnfrentamiento

	(numeroDeEnfrentamiento = 1) ifTrue: [enfrentamiento1 add: unaCarta.].
	(unJugador = jugadorMano) ifTrue:[jugadorMano remove: unaCarta.]! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 18:12:39' prior: 51212289!
juega: unJugador tira: unaCarta enElEnfrentamiento:  numeroDeEnfrentamiento

	(numeroDeEnfrentamiento = 1) ifTrue: [enfrentamiento1 add: unaCarta.].
	(unJugador = jugadorMano) ifTrue:[jugadorMano remove: unaCarta.].
	(unJugador = jugadorPie ) ifTrue:[jugadorPie remove: unaCarta.]! !

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 18:12:44'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 18:12:44'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03 stamp: 'ms 7/5/2021 18:12:44'!
ERROR!

!testRun: #JuegoDeTrucoTest #test03 stamp: 'ms 7/5/2021 18:12:44'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 18:15:11' prior: 51212299!
juega: unJugador tira: unaCarta enElEnfrentamiento:  numeroDeEnfrentamiento

	(numeroDeEnfrentamiento = 1) ifTrue: [enfrentamiento1 add: unaCarta.].
	(unJugador = jugadorMano) ifTrue:[jugadorMano remove: unaCarta ifAbsent: []].
	(unJugador = jugadorPie ) ifTrue:[jugadorPie remove: unaCarta ifAbsent: []]! !

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 18:15:22'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 18:15:22'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03 stamp: 'ms 7/5/2021 18:15:22'!
ERROR!

!testRun: #JuegoDeTrucoTest #test03 stamp: 'ms 7/5/2021 18:15:22'!
ERROR!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 18:17:01' prior: 51211858!
test01NoSePuedeCrearUnaRondaSinCartas
	
	|jugadorMano jugadorPie|
	
	jugadorMano := OrderedCollection new.
	jugadorPie := {}.
	
	self should: [Ronda crearCon: jugadorMano y: jugadorPie.]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[:anError |
		self assert: Ronda noSePuedeCrearUnaRondaSinCartas equals: anError messageText .
		]! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 18:17:05' prior: 51212349!
test01NoSePuedeCrearUnaRondaSinCartas
	
	|jugadorMano jugadorPie|
	
	jugadorMano := OrderedCollection new.
	jugadorPie := OrderedCollection new.
	
	self should: [Ronda crearCon: jugadorMano y: jugadorPie.]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[:anError |
		self assert: Ronda noSePuedeCrearUnaRondaSinCartas equals: anError messageText .
		]! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 18:17:46' prior: 51211994!
test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas
	
	|jugadorMano jugadorPie|
	
	jugadorMano := OrderedCollection new add: (CartaDeTruco bastoCon: 1); yourself.
	
	jugadorPie := {CartaDeTruco bastoCon: 2. CartaDeTruco espadaCon: 3. CartaDeTruco copaCon: 1. CartaDeTruco oroCon: 5}.
	
	self should: [Ronda crearCon: jugadorMano y: jugadorPie.]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[:anError |
		self assert: Ronda NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas equals: anError messageText .
		]! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 18:18:55' prior: 51212378!
test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas
	
	|jugadorMano jugadorPie|
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); yourself.
	
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco espadaCon: 3); 
		add: (CartaDeTruco copaCon: 1);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	self should: [Ronda crearCon: jugadorMano y: jugadorPie.]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[:anError |
		self assert: Ronda NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas equals: anError messageText .
		]! !

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 18:19:01'!
PASSED!

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 18:19:04'!
PASSED!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 18:20:14' prior: 51212184!
test03
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco espadaCon: 1);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	
	ronda juega: jugadorMano tira: (CartaDeTruco bastoCon: 1 ) enElEnfrentamiento: 1.
	ronda juega: jugadorPie tira: (CartaDeTruco bastoCon: 6 ) enElEnfrentamiento: 1.
	
	self assert: (ronda ganoEnElEnfrentamiento: 1) equals: jugadorMano .
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco espadaCon: 1. CartaDeTruco oroCon: 2}.
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }.! !

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 18:20:18'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 18:20:18'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03 stamp: 'ms 7/5/2021 18:20:18'!
ERROR!

!testRun: #JuegoDeTrucoTest #test03 stamp: 'ms 7/5/2021 18:20:18'!
ERROR!
!Ronda methodsFor: 'nil' stamp: 'ms 7/5/2021 18:21:45'!
ganoEnElEnfrentamiento: elNumeroDeEnfrentamiento

	elNumeroDeEnfrentamiento = 1 ifTrue: [^ self ganadorDel: enfrentamiento1]! !
!Ronda methodsFor: 'nil' stamp: 'ms 7/5/2021 18:22:56'!
ganadorDel: unEnfrentamiento

	unEnfrentamiento 

	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 18:23:49' prior: 51212269!
iniciarRondaConUn: unJugadorMano yUn: unJugadorPie

	self validarJugador: unJugadorMano .
	self validarJugador: unJugadorPie .
	
	jugadorMano := unJugadorMano .
	jugadorPie := unJugadorPie .
	enfrentamiento1 := Dictionary new.
	enfrentamientos := Dictionary new.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 18:25:49' prior: 51212323!
juega: unJugador tira: unaCarta enElEnfrentamiento:  numeroDeEnfrentamiento
	
	(unJugador = jugadorMano) ifTrue:[
		(numeroDeEnfrentamiento = 1) ifTrue: [
			enfrentamiento1 at: 			jugadorMano put: unaCarta.].
			jugadorMano remove: unaCarta ifAbsent: []].
		
	(unJugador = jugadorPie ) ifTrue:[
		(numeroDeEnfrentamiento = 1) ifTrue: [
			enfrentamiento1 at: 			jugadorPie put: unaCarta.].
			jugadorPie remove: unaCarta ifAbsent: []].! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 18:29:14' prior: 51212472!
ganoEnElEnfrentamiento: elNumeroDeEnfrentamiento
	|cartaJugadorMano cartaJugadorPie|
	elNumeroDeEnfrentamiento = 1 ifTrue: [
		cartaJugadorMano := enfrentamiento1 at: jugadorMano .
		cartaJugadorPie := enfrentamiento1 at: jugadorPie.
		(cartaJugadorMano mataA: cartaJugadorPie) ifTrue: [
			enfrentamientos at: 1 put: 'jugadorMano'.
			^jugadorMano] ifFalse:[
			enfrentamientos at: 1 put: 'jugadorPie'].
			]! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 18:29:36' prior: 51212512!
ganoEnElEnfrentamiento: elNumeroDeEnfrentamiento
	|cartaJugadorMano cartaJugadorPie|
	elNumeroDeEnfrentamiento = 1 ifTrue: [
		cartaJugadorMano := enfrentamiento1 at: jugadorMano .
		cartaJugadorPie := enfrentamiento1 at: jugadorPie.
		(cartaJugadorMano mataA: cartaJugadorPie) ifTrue: [
			enfrentamientos at: 1 put: 'jugadorMano'.
			^jugadorMano] ifFalse:[
			enfrentamientos at: 1 put: 'jugadorPie'.
			^jugadorPie].
			]! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 18:30:31'!
test03JugadorManoGanaElPrimerEnfrentamiento
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco espadaCon: 1);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	
	ronda juega: jugadorMano tira: (CartaDeTruco bastoCon: 1 ) enElEnfrentamiento: 1.
	ronda juega: jugadorPie tira: (CartaDeTruco bastoCon: 6 ) enElEnfrentamiento: 1.
	
	self assert: (ronda ganoEnElEnfrentamiento: 1) equals: jugadorMano .
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco espadaCon: 1. CartaDeTruco oroCon: 2}.
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }.! !

!methodRemoval: JuegoDeTrucoTest #test03 stamp: 'ms 7/5/2021 18:30:31'!
test03
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco espadaCon: 1);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	
	ronda juega: jugadorMano tira: (CartaDeTruco bastoCon: 1 ) enElEnfrentamiento: 1.
	ronda juega: jugadorPie tira: (CartaDeTruco bastoCon: 6 ) enElEnfrentamiento: 1.
	
	self assert: (ronda ganoEnElEnfrentamiento: 1) equals: jugadorMano .
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco espadaCon: 1. CartaDeTruco oroCon: 2}.
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }.!

!testRun: #JuegoDeTrucoTest #test03JugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 18:30:41'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 18:31:02' prior: 51212528!
ganoEnElEnfrentamiento: elNumeroDeEnfrentamiento
	|cartaJugadorMano cartaJugadorPie|
	elNumeroDeEnfrentamiento = 1 ifTrue: [
		cartaJugadorMano := enfrentamiento1 at: 'jugadorMano' .
		cartaJugadorPie := enfrentamiento1 at: 'jugadorPie'.
		(cartaJugadorMano mataA: cartaJugadorPie) ifTrue: [
			enfrentamientos at: 1 put: 'jugadorMano'.
			^jugadorMano] ifFalse:[
			enfrentamientos at: 1 put: 'jugadorPie'.
			^jugadorPie].
			]! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 18:31:24' prior: 51212495!
juega: unJugador tira: unaCarta enElEnfrentamiento:  numeroDeEnfrentamiento
	
	(unJugador = jugadorMano) ifTrue:[
		(numeroDeEnfrentamiento = 1) ifTrue: [
			enfrentamiento1 at: 		'	jugadorMano' put: unaCarta.].
			jugadorMano remove: unaCarta ifAbsent: []].
		
	(unJugador = jugadorPie ) ifTrue:[
		(numeroDeEnfrentamiento = 1) ifTrue: [
			enfrentamiento1 at: 			'jugadorPie' put: unaCarta.].
			jugadorPie remove: unaCarta ifAbsent: []].! !

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'ms 7/5/2021 18:31:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'ms 7/5/2021 18:31:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'ms 7/5/2021 18:31:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'ms 7/5/2021 18:31:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'ms 7/5/2021 18:31:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'ms 7/5/2021 18:31:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'ms 7/5/2021 18:31:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'ms 7/5/2021 18:31:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'ms 7/5/2021 18:31:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'ms 7/5/2021 18:31:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'ms 7/5/2021 18:31:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'ms 7/5/2021 18:31:26'!
ERROR!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'ms 7/5/2021 18:31:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'ms 7/5/2021 18:31:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'ms 7/5/2021 18:31:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'ms 7/5/2021 18:31:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'ms 7/5/2021 18:31:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'ms 7/5/2021 18:31:26'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'ms 7/5/2021 18:31:26'!
PASSED!

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 18:31:26'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 18:31:26'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03JugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 18:31:26'!
ERROR!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'ms 7/5/2021 18:31:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'ms 7/5/2021 18:31:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'ms 7/5/2021 18:31:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'ms 7/5/2021 18:31:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'ms 7/5/2021 18:31:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'ms 7/5/2021 18:31:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'ms 7/5/2021 18:31:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'ms 7/5/2021 18:31:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'ms 7/5/2021 18:31:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'ms 7/5/2021 18:31:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'ms 7/5/2021 18:31:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'ms 7/5/2021 18:31:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'ms 7/5/2021 18:31:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'ms 7/5/2021 18:31:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'ms 7/5/2021 18:31:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'ms 7/5/2021 18:31:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'ms 7/5/2021 18:31:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'ms 7/5/2021 18:31:39'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'ms 7/5/2021 18:31:39'!
PASSED!

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 18:31:39'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 18:31:39'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03JugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 18:31:39'!
ERROR!

!testRun: #JuegoDeTrucoTest #test03JugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 18:31:39'!
ERROR!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'ms 7/5/2021 18:31:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'ms 7/5/2021 18:31:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'ms 7/5/2021 18:31:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'ms 7/5/2021 18:31:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'ms 7/5/2021 18:31:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'ms 7/5/2021 18:31:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'ms 7/5/2021 18:31:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'ms 7/5/2021 18:31:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'ms 7/5/2021 18:31:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'ms 7/5/2021 18:31:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'ms 7/5/2021 18:31:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'ms 7/5/2021 18:31:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'ms 7/5/2021 18:31:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'ms 7/5/2021 18:31:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'ms 7/5/2021 18:31:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'ms 7/5/2021 18:31:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'ms 7/5/2021 18:31:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'ms 7/5/2021 18:31:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'ms 7/5/2021 18:31:42'!
PASSED!

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 18:31:42'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 18:31:43'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03JugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 18:31:43'!
ERROR!

!testRun: #JuegoDeTrucoTest #test03JugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 18:31:43'!
ERROR!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'ms 7/5/2021 18:32:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'ms 7/5/2021 18:32:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'ms 7/5/2021 18:32:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'ms 7/5/2021 18:32:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'ms 7/5/2021 18:32:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'ms 7/5/2021 18:32:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'ms 7/5/2021 18:32:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'ms 7/5/2021 18:32:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'ms 7/5/2021 18:32:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'ms 7/5/2021 18:32:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'ms 7/5/2021 18:32:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'ms 7/5/2021 18:32:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'ms 7/5/2021 18:32:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'ms 7/5/2021 18:32:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'ms 7/5/2021 18:32:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'ms 7/5/2021 18:32:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'ms 7/5/2021 18:32:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'ms 7/5/2021 18:32:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'ms 7/5/2021 18:32:35'!
PASSED!

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 18:32:35'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 18:32:35'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03JugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 18:32:35'!
ERROR!

!testRun: #JuegoDeTrucoTest #test03JugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 18:32:35'!
ERROR!

Object subclass: #JugadorPie
	instanceVariableNames: 'cartas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #JugadorPie category: 'ISW1-2021-1C-2doParcial' stamp: 'ms 7/5/2021 18:35:35'!
Object subclass: #JugadorPie
	instanceVariableNames: 'cartas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

Object subclass: #JugadorMano
	instanceVariableNames: 'cartas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #JugadorMano category: 'ISW1-2021-1C-2doParcial' stamp: 'ms 7/5/2021 18:35:40'!
Object subclass: #JugadorMano
	instanceVariableNames: 'cartas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 18:35:45' prior: 51212544!
test03JugadorManoGanaElPrimerEnfrentamiento
	
	|jugadorMano jugadorPie ronda cartasDelJugadorMano cartasDelJugadorPie|
	
	cartasDelJugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco espadaCon: 1);
		add: (CartaDeTruco oroCon: 2); yourself.
	
	jugadorMano := JugadorMano crearConLasCartas: cartasDelJugadorMano.
	
	cartasDelJugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	jugadorPie := JugadorPie crearConLasCartas: cartasDelJugadorPie.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	
	ronda juega: jugadorMano tira: (CartaDeTruco bastoCon: 1 ) enElEnfrentamiento: 1.
	ronda juega: jugadorPie tira: (CartaDeTruco bastoCon: 6 ) enElEnfrentamiento: 1.
	
	self assert: (ronda ganoEnElEnfrentamiento: 1) equals: jugadorMano .
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco espadaCon: 1. CartaDeTruco oroCon: 2}.
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }.! !

!testRun: #JuegoDeTrucoTest #test03JugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 18:35:52'!
ERROR!
!JugadorMano class methodsFor: 'nil' stamp: 'ms 7/5/2021 18:36:50'!
crearConLasCartas: unaColleccionDeCartas

	^ self new inicializarConLasCartas: unaColleccionDeCartas ! !
!JugadorMano methodsFor: 'nil' stamp: 'ms 7/5/2021 18:37:05'!
 inicializarConLasCartas: unaColleccionDeCartas 

	cartas := unaColleccionDeCartas ! !

!classRenamed: #JugadorMano as: #Jugador stamp: 'ms 7/5/2021 18:37:20'!
Smalltalk renameClassNamed: #JugadorMano as: #Jugador!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 18:37:21' prior: 51212981!
test03JugadorManoGanaElPrimerEnfrentamiento
	
	|jugadorMano jugadorPie ronda cartasDelJugadorMano cartasDelJugadorPie|
	
	cartasDelJugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco espadaCon: 1);
		add: (CartaDeTruco oroCon: 2); yourself.
	
	jugadorMano := Jugador crearConLasCartas: cartasDelJugadorMano.
	
	cartasDelJugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	jugadorPie := JugadorPie crearConLasCartas: cartasDelJugadorPie.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	
	ronda juega: jugadorMano tira: (CartaDeTruco bastoCon: 1 ) enElEnfrentamiento: 1.
	ronda juega: jugadorPie tira: (CartaDeTruco bastoCon: 6 ) enElEnfrentamiento: 1.
	
	self assert: (ronda ganoEnElEnfrentamiento: 1) equals: jugadorMano .
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco espadaCon: 1. CartaDeTruco oroCon: 2}.
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }.! !

Object subclass: #JugadorMano
	instanceVariableNames: 'cartas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #JugadorMano category: 'ISW1-2021-1C-2doParcial' stamp: 'ms 7/5/2021 18:37:36'!
Object subclass: #JugadorMano
	instanceVariableNames: 'cartas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 18:38:05' prior: 51213037!
test03JugadorManoGanaElPrimerEnfrentamiento
	
	|jugadorMano jugadorPie ronda cartasDelJugadorMano cartasDelJugadorPie|
	
	cartasDelJugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco espadaCon: 1);
		add: (CartaDeTruco oroCon: 2); yourself.
	
	jugadorMano := JugadorMano crearConLasCartas: cartasDelJugadorMano.
	
	cartasDelJugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	jugadorPie := JugadorPie crearConLasCartas: cartasDelJugadorPie.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	
	ronda juega: jugadorMano tira: (CartaDeTruco bastoCon: 1 ) enElEnfrentamiento: 1.
	ronda juega: jugadorPie tira: (CartaDeTruco bastoCon: 6 ) enElEnfrentamiento: 1.
	
	self assert: (ronda ganoEnElEnfrentamiento: 1) equals: jugadorMano .
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco espadaCon: 1. CartaDeTruco oroCon: 2}.
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }.! !

!classRemoval: #Jugador stamp: 'ms 7/5/2021 18:38:11'!
Object subclass: #Jugador
	instanceVariableNames: 'cartas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!JugadorMano class methodsFor: 'nil' stamp: 'ms 7/5/2021 18:38:49'!
crearConLasCartas:  unaColleccionDeCartas

	^self new inicializarConLasCartas: unaColleccionDeCartas ! !
!JugadorMano methodsFor: 'nil' stamp: 'ms 7/5/2021 18:38:57'!
inicializarConLasCartas: unaColleccionDeCartas ! !
!JugadorMano methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 18:39:03' prior: 51213136!
inicializarConLasCartas: unaColleccionDeCartas 

	cartas := unaColleccionDeCartas ! !
!JugadorPie class methodsFor: 'nil' stamp: 'ms 7/5/2021 18:39:13'!
crearConLasCartas:  unaColleccionDeCartas

	^self new inicializarConLasCartas: unaColleccionDeCartas ! !
!JugadorPie methodsFor: 'nil' stamp: 'ms 7/5/2021 18:39:25'!
inicializarConLasCartas: unaColleccionDeCartas 

	cartas := unaColleccionDeCartas ! !
!JugadorMano methodsFor: 'nil' stamp: 'ms 7/5/2021 18:40:16'!
isEmpty

	^cartas isEmpty ! !
!JugadorPie methodsFor: 'nil' stamp: 'ms 7/5/2021 18:40:28'!
isEmpty

	^cartas isEmpty ! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 18:40:49' prior: 51212103!
validarJugador: unJugador
 	
	(unJugador isEmpty) ifTrue: [^Error signal: self class noSePuedeCrearUnaRondaSinCartas].	
	
	(unJugador NoTieneTresCartas) ifTrue: [^Error signal: self class NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas] ! !
!JugadorMano methodsFor: 'nil' stamp: 'ms 7/5/2021 18:41:23'!
NoTieneTresCartas
	
	^cartas size ~= 3! !
!JugadorPie methodsFor: 'nil' stamp: 'ms 7/5/2021 18:41:30'!
NoTieneTresCartas
	
	^cartas size ~= 3! !

!testRun: #JuegoDeTrucoTest #test03JugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 18:41:46'!
ERROR!

!testRun: #JuegoDeTrucoTest #test03JugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 18:41:46'!
ERROR!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 18:42:07' prior: 51213087!
test03JugadorManoGanaElPrimerEnfrentamiento
	
	|jugadorMano jugadorPie ronda cartasDelJugadorMano cartasDelJugadorPie|
	
	cartasDelJugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco espadaCon: 1);
		add: (CartaDeTruco oroCon: 2); yourself.
	
	cartasDelJugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
		
	jugadorMano := JugadorMano crearConLasCartas: cartasDelJugadorMano.
	jugadorPie := JugadorPie crearConLasCartas: cartasDelJugadorPie.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	
	ronda juega: jugadorMano tira: (CartaDeTruco bastoCon: 1 ) enElEnfrentamiento: 1.
	ronda juega: jugadorPie tira: (CartaDeTruco bastoCon: 6 ) enElEnfrentamiento: 1.
	
	self assert: (ronda ganoEnElEnfrentamiento: 1) equals: jugadorMano .
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco espadaCon: 1. CartaDeTruco oroCon: 2}.
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 18:42:58' prior: 51212625!
juega: unJugador tira: unaCarta enElEnfrentamiento:  numeroDeEnfrentamiento
	
	(numeroDeEnfrentamiento = 1) ifTrue: [
			enfrentamiento1 at: unJugador put: unaCarta.].
			unJugador remove: unaCarta.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 18:43:21' prior: 51213228!
juega: unJugador tira: unaCarta enElEnfrentamiento:  numeroDeEnfrentamiento
	
	(numeroDeEnfrentamiento = 1) ifTrue: [
			enfrentamiento1 at: unJugador put: unaCarta.
			unJugador remove: unaCarta.]! !
!JugadorMano methodsFor: 'nil' stamp: 'ms 7/5/2021 18:43:39'!
remove: unaCarta

	cartas remove: unaCarta ifAbsent: []! !
!JugadorPie methodsFor: 'nil' stamp: 'ms 7/5/2021 18:43:46'!
remove: unaCarta

	cartas remove: unaCarta ifAbsent: []! !

!testRun: #JuegoDeTrucoTest #test03JugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 18:43:56'!
ERROR!

!testRun: #JuegoDeTrucoTest #test03JugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 18:43:56'!
ERROR!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 18:56:11' prior: 51213190!
test03JugadorManoGanaElPrimerEnfrentamiento
	
	|jugadorMano jugadorPie ronda cartasDelJugadorMano cartasDelJugadorPie|
	
	cartasDelJugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco espadaCon: 1);
		add: (CartaDeTruco oroCon: 2); yourself.
	
	cartasDelJugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
		
	jugadorMano := JugadorMano crearConLasCartas: cartasDelJugadorMano.
	jugadorPie := JugadorPie crearConLasCartas: cartasDelJugadorPie.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	
	ronda juegaManoTira: (CartaDeTruco bastoCon: 1 ) enElEnfrentamiento: 1.
	ronda juegaPieTira: (CartaDeTruco bastoCon: 6 ) enElEnfrentamiento: 1.
	
	self assert: (ronda ganoEnElEnfrentamiento: 1) equals: jugadorMano .
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco espadaCon: 1. CartaDeTruco oroCon: 2}.
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 18:59:36'!
juegaManoyTira: unaCarta enElEnfrentamiento:  numeroDeEnfrentamiento
	
	(numeroDeEnfrentamiento = 1) ifTrue: [
			enfrentamiento1 at: jugadorMano put: unaCarta.
			jugadorMano remove: unaCarta.]! !

!methodRemoval: Ronda #ganadorDel: stamp: 'ms 7/5/2021 19:05:39'!
ganadorDel: unEnfrentamiento

	unEnfrentamiento 

	!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 18:30:31' prior: 51213263!
test03JugadorManoGanaElPrimerEnfrentamiento
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco espadaCon: 1);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	
	ronda juega: jugadorMano tira: (CartaDeTruco bastoCon: 1 ) enElEnfrentamiento: 1.
	ronda juega: jugadorPie tira: (CartaDeTruco bastoCon: 6 ) enElEnfrentamiento: 1.
	
	self assert: (ronda ganoEnElEnfrentamiento: 1) equals: jugadorMano .
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco espadaCon: 1. CartaDeTruco oroCon: 2}.
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 17:42:37' prior: 51213164!
validarJugador: unJugador
 	
	(unJugador isEmpty) ifTrue: [^Error signal: self class noSePuedeCrearUnaRondaSinCartas].	
	
	(unJugador size ~= 3) ifTrue: [^Error signal: self class NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas] ! !

!classRemoval: #JugadorMano stamp: 'ms 7/5/2021 19:07:44'!
Object subclass: #JugadorMano
	instanceVariableNames: 'cartas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classRemoval: #JugadorPie stamp: 'ms 7/5/2021 19:07:48'!
Object subclass: #JugadorPie
	instanceVariableNames: 'cartas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 19:08:13'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 19:08:15'!
PASSED!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:08:32'!
test03ValidarQueLasCartasNoSeRepitan
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco espadaCon: 1);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	
	ronda juega: jugadorMano tira: (CartaDeTruco bastoCon: 1 ) enElEnfrentamiento: 1.
	ronda juega: jugadorPie tira: (CartaDeTruco bastoCon: 6 ) enElEnfrentamiento: 1.
	
	self assert: (ronda ganoEnElEnfrentamiento: 1) equals: jugadorMano .
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco espadaCon: 1. CartaDeTruco oroCon: 2}.
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }.! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:08:44'!
testMASADELANTEJugadorManoGanaElPrimerEnfrentamiento
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco espadaCon: 1);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	
	ronda juega: jugadorMano tira: (CartaDeTruco bastoCon: 1 ) enElEnfrentamiento: 1.
	ronda juega: jugadorPie tira: (CartaDeTruco bastoCon: 6 ) enElEnfrentamiento: 1.
	
	self assert: (ronda ganoEnElEnfrentamiento: 1) equals: jugadorMano .
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco espadaCon: 1. CartaDeTruco oroCon: 2}.
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }.! !

!methodRemoval: JuegoDeTrucoTest #test03JugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 19:08:44'!
test03JugadorManoGanaElPrimerEnfrentamiento
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco espadaCon: 1);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	
	ronda juega: jugadorMano tira: (CartaDeTruco bastoCon: 1 ) enElEnfrentamiento: 1.
	ronda juega: jugadorPie tira: (CartaDeTruco bastoCon: 6 ) enElEnfrentamiento: 1.
	
	self assert: (ronda ganoEnElEnfrentamiento: 1) equals: jugadorMano .
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco espadaCon: 1. CartaDeTruco oroCon: 2}.
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }.!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:08:51' prior: 51213406!
testMASADELANTEJugadorManoGanaElPrimerEnfrentamiento
	
	"|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco espadaCon: 1);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	
	ronda juega: jugadorMano tira: (CartaDeTruco bastoCon: 1 ) enElEnfrentamiento: 1.
	ronda juega: jugadorPie tira: (CartaDeTruco bastoCon: 6 ) enElEnfrentamiento: 1.
	
	self assert: (ronda ganoEnElEnfrentamiento: 1) equals: jugadorMano .
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco espadaCon: 1. CartaDeTruco oroCon: 2}.
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }."! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:09:00' prior: 51213470!
testMASADELANTEJugadorManoGanaElPrimerEnfrentamiento
	
	"|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco espadaCon: 1);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	
	ronda juegaJugadorMano tira: (CartaDeTruco bastoCon: 1 ) enElEnfrentamiento: 1.
	ronda juegaJugadorPie tira: (CartaDeTruco bastoCon: 6 ) enElEnfrentamiento: 1.
	
	self assert: (ronda ganoEnElEnfrentamiento: 1) equals: jugadorMano .
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco espadaCon: 1. CartaDeTruco oroCon: 2}.
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }."! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:09:58' prior: 51213375!
test03ValidarQueLasCartasNoSeRepitan
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco espadaCon: 1);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	
	ronda juega: jugadorMano tira: (CartaDeTruco bastoCon: 1 ) enElEnfrentamiento: 1.
	
	self should: []
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
			]
	! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:10:17' prior: 51213534!
test03ValidarQueLasCartasNoSeRepitan
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco espadaCon: 1);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	
	ronda juega: jugadorMano tira: (CartaDeTruco bastoCon: 1 ) enElEnfrentamiento: 1.
	
	self should: []
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda NoSePuedeCrearUnaRondaConCartasRepetidas equals: anError messageText .
			]
	! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:10:55' prior: 51213557!
test03ValidarQueLasCartasNoSeRepitan
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 1);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	self should: [Ronda crearCon: jugadorMano y: jugadorPie.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda NoSePuedeCrearUnaRondaConCartasRepetidas equals: anError messageText .
			]
	! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:10:59' prior: 51213583!
test03ValidarQueLasCartasNoSeRepitan
	
	|jugadorMano jugadorPie |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 1);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	self should: [Ronda crearCon: jugadorMano y: jugadorPie.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda NoSePuedeCrearUnaRondaConCartasRepetidas equals: anError messageText .
			]
	! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:11:07'!
test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador
	
	|jugadorMano jugadorPie |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 1);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	self should: [Ronda crearCon: jugadorMano y: jugadorPie.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda NoSePuedeCrearUnaRondaConCartasRepetidas equals: anError messageText .
			]
	! !

!methodRemoval: JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitan stamp: 'ms 7/5/2021 19:11:07'!
test03ValidarQueLasCartasNoSeRepitan
	
	|jugadorMano jugadorPie |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 1);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	self should: [Ronda crearCon: jugadorMano y: jugadorPie.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda NoSePuedeCrearUnaRondaConCartasRepetidas equals: anError messageText .
			]
	!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 19:11:11'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:13:10' prior: 51213344!
validarJugador: unJugador
 	
	(unJugador isEmpty) ifTrue: [^Error signal: self class noSePuedeCrearUnaRondaSinCartas].	
	
	(unJugador size ~= 3) ifTrue: [^Error signal: self class NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas].
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:13:23'!
validarCartasDelJugador: unJugador
 	
	(unJugador isEmpty) ifTrue: [^Error signal: self class noSePuedeCrearUnaRondaSinCartas].	
	
	(unJugador size ~= 3) ifTrue: [^Error signal: self class NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas].
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:13:23' prior: 51212483!
iniciarRondaConUn: unJugadorMano yUn: unJugadorPie

	self validarCartasDelJugador: unJugadorMano .
	self validarCartasDelJugador: unJugadorPie .
	
	jugadorMano := unJugadorMano .
	jugadorPie := unJugadorPie .
	enfrentamiento1 := Dictionary new.
	enfrentamientos := Dictionary new.! !

!methodRemoval: Ronda #validarJugador: stamp: 'ms 7/5/2021 19:13:23'!
validarJugador: unJugador
 	
	(unJugador isEmpty) ifTrue: [^Error signal: self class noSePuedeCrearUnaRondaSinCartas].	
	
	(unJugador size ~= 3) ifTrue: [^Error signal: self class NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas].
	!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:14:28' prior: 51213688!
validarCartasDelJugador: lasCartasDelJugador
 	
	(lasCartasDelJugador isEmpty) ifTrue: [^Error signal: self class noSePuedeCrearUnaRondaSinCartas].	
	
	(lasCartasDelJugador size ~= 3) ifTrue: [^Error signal: self class NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas].
	
	lasCartasDelJugador do: [:carta ]! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:14:41' prior: 51213721!
validarCartasDelJugador: lasCartasDelJugador
 	
	(lasCartasDelJugador isEmpty) ifTrue: [^Error signal: self class noSePuedeCrearUnaRondaSinCartas].	
	
	(lasCartasDelJugador size ~= 3) ifTrue: [^Error signal: self class NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas].
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:15:57' prior: 51213699!
iniciarRondaConUn: cartasJugadorMano yUn: cartasJugadorPie

	self validarCartasDelJugador: cartasJugadorMano .
	self validarCartasDelJugador: cartasJugadorPie .
	
	
	
	jugadorMano := cartasJugadorMano .
	jugadorPie := cartasJugadorPie .
	enfrentamiento1 := Dictionary new.
	enfrentamientos := Dictionary new.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:20:16' prior: 51213746!
iniciarRondaConUn: cartasJugadorMano yUn: cartasJugadorPie
 |cartasJugadas|
	self validarCartasDelJugador: cartasJugadorMano .
	self validarCartasDelJugador: cartasJugadorPie .
	
	cartasJugadas := cartasJugadorMano addLast: cartasJugadorPie.
	
	cartasJugadas do: [:carta | |cartasRestantes|
		cartasRestantes := cartasJugadas remove: carta ifAbsent: [].
		(carta isRepeatIn: cartasRestantes) ifTrue: [^Error signal: self class NoSePuedeCrearUnaRondaConCartasRepetidas]
		].
	
	jugadorMano := cartasJugadorMano .
	jugadorPie := cartasJugadorPie .
	enfrentamiento1 := Dictionary new.
	enfrentamientos := Dictionary new.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:20:30' prior: 51213759!
iniciarRondaConUn: cartasJugadorMano yUn: cartasJugadorPie
 |cartasJugadas|
	self validarCartasDelJugador: cartasJugadorMano .
	self validarCartasDelJugador: cartasJugadorPie .
	
	cartasJugadas := cartasJugadorMano addLast: cartasJugadorPie.
	
	cartasJugadas do: [:carta | |cartasRestantes|
		cartasRestantes := cartasJugadas remove: carta ifAbsent: [].
		(carta includes: cartasRestantes) ifTrue: [^Error signal: self class NoSePuedeCrearUnaRondaConCartasRepetidas]
		].
	
	jugadorMano := cartasJugadorMano .
	jugadorPie := cartasJugadorPie .
	enfrentamiento1 := Dictionary new.
	enfrentamientos := Dictionary new.! !
!Ronda class methodsFor: 'nil' stamp: 'ms 7/5/2021 19:21:07'!
NoSePuedeCrearUnaRondaConCartasRepetidas

	^'No Se Puede Crear Una Ronda Con Cartas Repetidas'! !

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 19:21:13'!
ERROR!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 19:21:13'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:21:33' prior: 51213782!
iniciarRondaConUn: cartasJugadorMano yUn: cartasJugadorPie
 |cartasJugadas|
	self validarCartasDelJugador: cartasJugadorMano .
	self validarCartasDelJugador: cartasJugadorPie .
	
	cartasJugadas := cartasJugadorMano addLast: cartasJugadorPie.
	
	cartasJugadas do: [:carta | |cartasRestantes|
		cartasRestantes := cartasJugadas remove: carta ifAbsent: [].
		(cartasRestantes includes: carta ) ifTrue: [^Error signal: self class NoSePuedeCrearUnaRondaConCartasRepetidas]
		].
	
	jugadorMano := cartasJugadorMano .
	jugadorPie := cartasJugadorPie .
	enfrentamiento1 := Dictionary new.
	enfrentamientos := Dictionary new.! !

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 19:21:36'!
ERROR!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 19:21:36'!
ERROR!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 19:21:53'!
ERROR!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 19:21:53'!
ERROR!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 19:22:03'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:23:38' prior: 51213818!
iniciarRondaConUn: cartasJugadorMano yUn: cartasJugadorPie
 |cartasJugadas|
	self validarCartasDelJugador: cartasJugadorMano .
	self validarCartasDelJugador: cartasJugadorPie .
	
	cartasJugadas := cartasJugadorMano.
	cartasJugadas addLast: cartasJugadorPie.
	
	cartasJugadas do: [:carta | |cartasRestantes|
		cartasRestantes := cartasJugadas remove: carta ifAbsent: [].
		(cartasRestantes includes: carta ) ifTrue: [^Error signal: self class NoSePuedeCrearUnaRondaConCartasRepetidas]
		].
	
	jugadorMano := cartasJugadorMano .
	jugadorPie := cartasJugadorPie .
	enfrentamiento1 := Dictionary new.
	enfrentamientos := Dictionary new.! !

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 19:23:41'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:24:47' prior: 51213860!
iniciarRondaConUn: cartasJugadorMano yUn: cartasJugadorPie
 |cartasJugadas|
	self validarCartasDelJugador: cartasJugadorMano .
	self validarCartasDelJugador: cartasJugadorPie .
	
	cartasJugadas := cartasJugadorMano.
	cartasJugadas addAllLast: cartasJugadorPie.
	
	cartasJugadas do: [:carta | |cartasRestantes|
		cartasRestantes := cartasJugadas remove: carta ifAbsent: [].
		(cartasRestantes includes: carta ) ifTrue: [^Error signal: self class NoSePuedeCrearUnaRondaConCartasRepetidas]
		].
	
	jugadorMano := cartasJugadorMano .
	jugadorPie := cartasJugadorPie .
	enfrentamiento1 := Dictionary new.
	enfrentamientos := Dictionary new.! !

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 19:24:50'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:30:20' prior: 51213887!
iniciarRondaConUn: cartasJugadorMano yUn: cartasJugadorPie
 |cartasJugadas cartasJugadasTotales|
	self validarCartasDelJugador: cartasJugadorMano .
	self validarCartasDelJugador: cartasJugadorPie .
	
	cartasJugadas := cartasJugadorMano.
	cartasJugadas addAllLast: cartasJugadorPie.
	
	cartasJugadasTotales := cartasJugadas.
	
	cartasJugadasTotales do: [:carta |
		cartasJugadas remove: carta ifAbsent: [].
		(cartasJugadas includes: carta ) ifTrue: [^Error signal: self class NoSePuedeCrearUnaRondaConCartasRepetidas]
		].
	
	jugadorMano := cartasJugadorMano .
	jugadorPie := cartasJugadorPie .
	enfrentamiento1 := Dictionary new.
	enfrentamientos := Dictionary new.! !

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 19:30:22'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:33:11' prior: 51213914!
iniciarRondaConUn: cartasJugadorMano yUn: cartasJugadorPie
 |cartasJugadas cartasJugadasTotales|
	self validarCartasDelJugador: cartasJugadorMano .
	self validarCartasDelJugador: cartasJugadorPie .
	
	cartasJugadas := cartasJugadorMano copy.
	cartasJugadas addAllLast: cartasJugadorPie.
	
	cartasJugadasTotales := cartasJugadas.
	
	cartasJugadasTotales do: [:carta |
		cartasJugadas remove: carta ifAbsent: [].
		(cartasJugadas includes: carta ) ifTrue: [^Error signal: self class NoSePuedeCrearUnaRondaConCartasRepetidas]
		].
	
	jugadorMano := cartasJugadorMano .
	jugadorPie := cartasJugadorPie .
	enfrentamiento1 := Dictionary new.
	enfrentamientos := Dictionary new.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:33:14' prior: 51213942!
iniciarRondaConUn: cartasJugadorMano yUn: cartasJugadorPie
 |cartasJugadas cartasJugadasTotales|
	self validarCartasDelJugador: cartasJugadorMano .
	self validarCartasDelJugador: cartasJugadorPie .
	
	cartasJugadas := cartasJugadorMano copy.
	cartasJugadas addAllLast: cartasJugadorPie.
	
	cartasJugadasTotales := cartasJugadas copy.
	
	cartasJugadasTotales do: [:carta |
		cartasJugadas remove: carta ifAbsent: [].
		(cartasJugadas includes: carta ) ifTrue: [^Error signal: self class NoSePuedeCrearUnaRondaConCartasRepetidas]
		].
	
	jugadorMano := cartasJugadorMano .
	jugadorPie := cartasJugadorPie .
	enfrentamiento1 := Dictionary new.
	enfrentamientos := Dictionary new.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:35:33' prior: 51213966!
iniciarRondaConUn: cartasJugadorMano yUn: cartasJugadorPie
 |cartasJugadas cartasJugadasTotales|
	self validarCartasDelJugador: cartasJugadorMano .
	self validarCartasDelJugador: cartasJugadorPie .
	
	cartasJugadas := cartasJugadorMano asSet .
	cartasJugadas addAll: cartasJugadorPie.
	
	cartasJugadasTotales := cartasJugadas copy.
	
	cartasJugadasTotales do: [:carta |
		cartasJugadas remove: carta ifAbsent: [].
		(cartasJugadas includes: carta ) ifTrue: [^Error signal: self class NoSePuedeCrearUnaRondaConCartasRepetidas]
		].
	
	jugadorMano := cartasJugadorMano .
	jugadorPie := cartasJugadorPie .
	enfrentamiento1 := Dictionary new.
	enfrentamientos := Dictionary new.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:36:41' prior: 51213990!
iniciarRondaConUn: cartasJugadorMano yUn: cartasJugadorPie
 |cartasJugadas cartasJugadasTotales|
	self validarCartasDelJugador: cartasJugadorMano .
	self validarCartasDelJugador: cartasJugadorPie .
	
	cartasJugadas := cartasJugadorMano asSet .
	cartasJugadas addAll: cartasJugadorPie.
	
	cartasJugadas size = 6 ifFalse: [^Error signal: self class NoSePuedeCrearUnaRondaConCartasRepetidas].
	
	jugadorMano := cartasJugadorMano .
	jugadorPie := cartasJugadorPie .
	enfrentamiento1 := Dictionary new.
	enfrentamientos := Dictionary new.! !

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 19:36:58'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 19:37:00'!
PASSED!

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 19:37:03'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 19:37:03'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 19:37:03'!
PASSED!

!testRun: #JuegoDeTrucoTest #testMASADELANTEJugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 19:37:03'!
PASSED!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:37:51' prior: 51214014!
iniciarRondaConUn: cartasJugadorMano yUn: cartasJugadorPie
 |cartasJugadas |
	self validarCartasDelJugador: cartasJugadorMano .
	self validarCartasDelJugador: cartasJugadorPie .
	
	cartasJugadas := cartasJugadorMano asSet addAll: cartasJugadorPie; yourself.
	
	cartasJugadas size = 6 ifFalse: [^Error signal: self class NoSePuedeCrearUnaRondaConCartasRepetidas].
	
	jugadorMano := cartasJugadorMano .
	jugadorPie := cartasJugadorPie .
	enfrentamiento1 := Dictionary new.
	enfrentamientos := Dictionary new.! !

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 19:37:56'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 19:37:56'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 19:37:56'!
PASSED!

!testRun: #JuegoDeTrucoTest #testMASADELANTEJugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 19:37:56'!
PASSED!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:38:07' prior: 51214057!
iniciarRondaConUn: cartasJugadorMano yUn: cartasJugadorPie
 |cartasJugadas |
	self validarCartasDelJugador: cartasJugadorMano .
	self validarCartasDelJugador: cartasJugadorPie .
	
	cartasJugadas := cartasJugadorMano asSet addAll: cartasJugadorPie; yourself.
	(cartasJugadas size = 6) ifFalse: [^Error signal: self class NoSePuedeCrearUnaRondaConCartasRepetidas].
	
	jugadorMano := cartasJugadorMano .
	jugadorPie := cartasJugadorPie .
	enfrentamiento1 := Dictionary new.
	enfrentamientos := Dictionary new.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:38:54' prior: 51214091!
iniciarRondaConUn: cartasJugadorMano yUn: cartasJugadorPie
 |cartasJugadas |
	self validarCartasDelJugador: cartasJugadorMano .
	self validarCartasDelJugador: cartasJugadorPie .
	
	self validarQueNoHayCartasRepetidasEn: (cartasJugadorMano asSet addAll: cartasJugadorPie; yourself).
	cartasJugadas := 
	(cartasJugadas size = 6) ifFalse: [^Error signal: self class NoSePuedeCrearUnaRondaConCartasRepetidas].
	
	jugadorMano := cartasJugadorMano .
	jugadorPie := cartasJugadorPie .
	enfrentamiento1 := Dictionary new.
	enfrentamientos := Dictionary new.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:39:05' prior: 51214110!
iniciarRondaConUn: cartasJugadorMano yUn: cartasJugadorPie
 
	self validarCartasDelJugador: cartasJugadorMano .
	self validarCartasDelJugador: cartasJugadorPie .
	
	self validarQueNoHayCartasRepetidasEn: (cartasJugadorMano asSet addAll: cartasJugadorPie; yourself).
	
	jugadorMano := cartasJugadorMano .
	jugadorPie := cartasJugadorPie .
	enfrentamiento1 := Dictionary new.
	enfrentamientos := Dictionary new.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:39:42'!
validarQueNoHayCartasRepetidasEn: lasCartasEnJuego
 	

	(lasCartasEnJuego size = 6) ifFalse: [^Error signal: self class NoSePuedeCrearUnaRondaConCartasRepetidas].! !

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 19:39:45'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 19:39:45'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 19:39:45'!
PASSED!

!testRun: #JuegoDeTrucoTest #testMASADELANTEJugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 19:39:45'!
PASSED!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:40:15'!
test04ValidarQueTiroUnaCartaQuePertenezcaAlJugadorQueLaTirp
	
	|jugadorMano jugadorPie |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 1);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	self should: [Ronda crearCon: jugadorMano y: jugadorPie.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda NoSePuedeCrearUnaRondaConCartasRepetidas equals: anError messageText .
			]
	! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:40:50'!
test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp
	
	|jugadorMano jugadorPie |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 1);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	self should: [Ronda crearCon: jugadorMano y: jugadorPie.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda NoSePuedeCrearUnaRondaConCartasRepetidas equals: anError messageText .
			]
	! !

!methodRemoval: JuegoDeTrucoTest #test04ValidarQueTiroUnaCartaQuePertenezcaAlJugadorQueLaTirp stamp: 'ms 7/5/2021 19:40:50'!
test04ValidarQueTiroUnaCartaQuePertenezcaAlJugadorQueLaTirp
	
	|jugadorMano jugadorPie |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 1);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	self should: [Ronda crearCon: jugadorMano y: jugadorPie.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda NoSePuedeCrearUnaRondaConCartasRepetidas equals: anError messageText .
			]
	!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:41:55' prior: 51214194!
test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	
	
	
	self should: [ronda juegaJugadorManoYTira: (CartaDeTruco espadaCon: 1 ) enElEnfrentamiento: 1.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda NoSePuedeCrearUnaRondaConCartasRepetidas equals: anError messageText .
			]
	! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:41:57' prior: 51214241!
test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	
	
	
	self should: [ronda juegaJugadorManoYTira: (CartaDeTruco espadaCon: 1 ) enElEnfrentamiento: 1.]s
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda NoSePuedeCrearUnaRondaConCartasRepetidas equals: anError messageText .
			]
	! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:41:58' prior: 51214267!
test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	
	
	
	self should: [ronda juegaJugadorManoYTira: (CartaDeTruco espadaCon: 1 ) enElEnfrentamiento: 1.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda NoSePuedeCrearUnaRondaConCartasRepetidas equals: anError messageText .
			]
	! !

!testRun: #JuegoDeTrucoTest #test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp stamp: 'ms 7/5/2021 19:42:02'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:42:08'!
juegaJugadorManoYTira: aCartaDeTruco enElEnfrentamiento: aSmallInteger 
	self shouldBeImplemented.! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:43:37' prior: 51214294!
test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	
	
	
	self should: [ronda juegaJugadorManoYTira: (CartaDeTruco espadaCon: 1 ) enElEnfrentamiento: 1.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noSePuedeTirarUnaCartaQueNoPertenezcaAlJugador equals: anError messageText .
			]
	! !

!methodRemoval: Ronda #juega:tira:enElEnfrentamiento: stamp: 'ms 7/5/2021 19:44:34'!
juega: unJugador tira: unaCarta enElEnfrentamiento:  numeroDeEnfrentamiento
	
	(numeroDeEnfrentamiento = 1) ifTrue: [
			enfrentamiento1 at: unJugador put: unaCarta.
			unJugador remove: unaCarta.]!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:45:58' prior: 51214324!
juegaJugadorManoYTira: unaCarta enElEnfrentamiento: elNumeroDeEnfrentamiento 
	
	(jugadorMano includes: unaCarta) ifFalse: [^Error signal: self class noSePuedeTirarUnaCartaQueNoPertenezcaAlJugador].! !
!Ronda class methodsFor: 'nil' stamp: 'ms 7/5/2021 19:46:21'!
noSePuedeTirarUnaCartaQueNoPertenezcaAlJugador

^'no Se Puede Tirar Una Carta Que No Pertenezca Al jugador'! !
!Ronda class methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:46:33'!
noSePuedeCrearUnaRondaConCartasRepetidas

	^'No Se Puede Crear Una Ronda Con Cartas Repetidas'! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:46:33' prior: 51213628!
test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador
	
	|jugadorMano jugadorPie |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 1);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	self should: [Ronda crearCon: jugadorMano y: jugadorPie.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noSePuedeCrearUnaRondaConCartasRepetidas equals: anError messageText .
			]
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:46:33' prior: 51214147!
validarQueNoHayCartasRepetidasEn: lasCartasEnJuego
 	

	(lasCartasEnJuego size = 6) ifFalse: [^Error signal: self class noSePuedeCrearUnaRondaConCartasRepetidas].! !

!methodRemoval: Ronda class #NoSePuedeCrearUnaRondaConCartasRepetidas stamp: 'ms 7/5/2021 19:46:33'!
NoSePuedeCrearUnaRondaConCartasRepetidas

	^'No Se Puede Crear Una Ronda Con Cartas Repetidas'!
!Ronda class methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:46:42'!
noSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas
	
	^'No Se Puede Crear Una Ronda Sin Que Cada Jugador Tenga Exactamente 3 Cartas'! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:46:42' prior: 51213734!
validarCartasDelJugador: lasCartasDelJugador
 	
	(lasCartasDelJugador isEmpty) ifTrue: [^Error signal: self class noSePuedeCrearUnaRondaSinCartas].	
	
	(lasCartasDelJugador size ~= 3) ifTrue: [^Error signal: self class noSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas].
	! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:46:42' prior: 51212399!
test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas
	
	|jugadorMano jugadorPie|
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); yourself.
	
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco espadaCon: 3); 
		add: (CartaDeTruco copaCon: 1);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	self should: [Ronda crearCon: jugadorMano y: jugadorPie.]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[:anError |
		self assert: Ronda noSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas equals: anError messageText .
		]! !

!methodRemoval: Ronda class #NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 19:46:42'!
NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas
	
	^'No Se Puede Crear Una Ronda Sin Que Cada Jugador Tenga Exactamente 3 Cartas'!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'ms 7/5/2021 19:46:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'ms 7/5/2021 19:46:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'ms 7/5/2021 19:46:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'ms 7/5/2021 19:46:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'ms 7/5/2021 19:46:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'ms 7/5/2021 19:46:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'ms 7/5/2021 19:46:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'ms 7/5/2021 19:46:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'ms 7/5/2021 19:46:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'ms 7/5/2021 19:46:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'ms 7/5/2021 19:46:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'ms 7/5/2021 19:46:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'ms 7/5/2021 19:46:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'ms 7/5/2021 19:46:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'ms 7/5/2021 19:46:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'ms 7/5/2021 19:46:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'ms 7/5/2021 19:46:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'ms 7/5/2021 19:46:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'ms 7/5/2021 19:46:44'!
PASSED!

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 19:46:44'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 19:46:44'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 19:46:44'!
PASSED!

!testRun: #JuegoDeTrucoTest #test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp stamp: 'ms 7/5/2021 19:46:44'!
PASSED!

!testRun: #JuegoDeTrucoTest #testMASADELANTEJugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 19:46:44'!
PASSED!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:47:15'!
test05NoPuedeTirarUnaCartaQuePertenezcaAlJugadorPie
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	
	
	
	self should: [ronda juegaJugadorManoYTira: (CartaDeTruco espadaCon: 1 ) enElEnfrentamiento: 1.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noSePuedeTirarUnaCartaQueNoPertenezcaAlJugador equals: anError messageText .
			]
	! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:47:29' prior: 51214561!
test05NoPuedeTirarUnaCartaQuePertenezcaAlJugadorPie
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	
	
	
	self should: [ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon: 1 ) enElEnfrentamiento: 1.]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noSePuedeTirarUnaCartaQueNoPertenezcaAlJugador equals: anError messageText .
			]
	! !

!testRun: #JuegoDeTrucoTest #test05NoPuedeTirarUnaCartaQuePertenezcaAlJugadorPie stamp: 'ms 7/5/2021 19:47:32'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:47:37'!
juegaJugadorPieYTira: aCartaDeTruco enElEnfrentamiento: aSmallInteger 
	self shouldBeImplemented.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:48:02' prior: 51214616!
juegaJugadorPieYTira: unaCarta enElEnfrentamiento: elNumeroDeEnfrentamiento 
	
	(jugadorPie includes: unaCarta) ifFalse: [^Error signal: self class noSePuedeTirarUnaCartaQueNoPertenezcaAlJugador]. 
	! !

!testRun: #JuegoDeTrucoTest #test05NoPuedeTirarUnaCartaQuePertenezcaAlJugadorPie stamp: 'ms 7/5/2021 19:48:04'!
PASSED!

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 19:48:04'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 19:48:04'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 19:48:04'!
PASSED!

!testRun: #JuegoDeTrucoTest #test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp stamp: 'ms 7/5/2021 19:48:04'!
PASSED!

!testRun: #JuegoDeTrucoTest #test05NoPuedeTirarUnaCartaQuePertenezcaAlJugadorPie stamp: 'ms 7/5/2021 19:48:04'!
PASSED!

!testRun: #JuegoDeTrucoTest #testMASADELANTEJugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 19:48:04'!
PASSED!

!methodRemoval: Ronda #juegaManoyTira:enElEnfrentamiento: stamp: 'ms 7/5/2021 19:48:29'!
juegaManoyTira: unaCarta enElEnfrentamiento:  numeroDeEnfrentamiento
	
	(numeroDeEnfrentamiento = 1) ifTrue: [
			enfrentamiento1 at: jugadorMano put: unaCarta.
			jugadorMano remove: unaCarta.]!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:50:42'!
test06NoPuedeEmpezarAJugarElJugadorPie
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	
	self should: [ronda empiezaAJugar: jugadorPie enElEnfrentamiento: 1]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noPuedeEmpezarAJugarElJugadorPieEnElEnfrentamiento1 equals: anError messageText .
			]
	! !

!testRun: #JuegoDeTrucoTest #test06NoPuedeEmpezarAJugarElJugadorPie stamp: 'ms 7/5/2021 19:50:53'!
ERROR!

!testRun: #JuegoDeTrucoTest #test06NoPuedeEmpezarAJugarElJugadorPie stamp: 'ms 7/5/2021 19:50:53'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:50:59'!
empiezaAJugar: anOrderedCollection enElEnfrentamiento: aSmallInteger 
	self shouldBeImplemented.! !

!methodRemoval: Ronda #empiezaAJugar:enElEnfrentamiento: stamp: 'ms 7/5/2021 19:51:35'!
empiezaAJugar: anOrderedCollection enElEnfrentamiento: aSmallInteger 
	self shouldBeImplemented.!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:52:11' prior: 51214667!
test06NoPuedeEmpezarAJugarElJugadorPie
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	
	self should: []
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noPuedeEmpezarAJugarElJugadorPieEnElEnfrentamiento1 equals: anError messageText .
			]
	! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:53:54' prior: 51214711!
test06NoPuedeEmpezarAJugarElJugadorPie
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	
	self should: [ronda EmpiezaAJugar: jugadorPie enElEnfrentamiento:1]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noPuedeEmpezarAJugarElJugadorPieEnElEnfrentamiento1 equals: anError messageText .
			]
	! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:53:59' prior: 51214735!
test06NoPuedeEmpezarAJugarElJugadorPie
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	
	self should: [ronda empiezaAJugar: jugadorPie enElEnfrentamiento:1]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noPuedeEmpezarAJugarElJugadorPieEnElEnfrentamiento1 equals: anError messageText .
			]
	! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:54:57' prior: 51214760!
test06NoPuedeEmpezarAJugarElJugadorPie
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	
	self should: [ronda empiezaAJugar: jugadorPie enElEnfrentamiento:1]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noPuedeEmpezarAJugarElJugadorPieEnElEnfrentamiento1 equals: anError messageText .
			].
		
	self assert: 1! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:55:51' prior: 51214785!
test06NoPuedeEmpezarAJugarElJugadorPie
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	
	self should: [ronda empiezaAJugar: jugadorPie enElEnfrentamiento:1]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noPuedeEmpezarAJugarElJugadorPieEnElEnfrentamiento1 equals: anError messageText .
			].
	
	ronda juegaJugadorManoYTira: (CartaDeTruco espadaCon: 1 ) enElEnfrentamiento: 1.
	ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon: 1 ) enElEnfrentamiento: 1.
	
	self assert: 1! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:56:55' prior: 51214811!
test06NoPuedeEmpezarAJugarElJugadorPie
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	
	self should: [ronda empiezaAJugar: jugadorPie enElEnfrentamiento:1]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noPuedeEmpezarAJugarElJugadorPieEnElEnfrentamiento1 equals: anError messageText .
			].
	
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1 ) enElEnfrentamiento: 1.
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6 ) enElEnfrentamiento: 1.
	
	self assert: 1! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:58:54' prior: 51214842!
test06NoPuedeEmpezarAJugarElJugadorPie
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	
	self should: [ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6 ).]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noPuedeEmpezarAJugarElJugadorPieEnElEnfrentamiento1 equals: anError messageText .
			].
	
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 19:59:06' prior: 51214131!
iniciarRondaConUn: cartasJugadorMano yUn: cartasJugadorPie
 
	self validarCartasDelJugador: cartasJugadorMano .
	self validarCartasDelJugador: cartasJugadorPie .
	
	self validarQueNoHayCartasRepetidasEn: (cartasJugadorMano asSet addAll: cartasJugadorPie; yourself).
	
	jugadorMano := cartasJugadorMano .
	jugadorPie := cartasJugadorPie .! !

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 19:59:09'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 19:59:09'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 19:59:09'!
PASSED!

!testRun: #JuegoDeTrucoTest #test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp stamp: 'ms 7/5/2021 19:59:09'!
PASSED!

!testRun: #JuegoDeTrucoTest #test05NoPuedeTirarUnaCartaQuePertenezcaAlJugadorPie stamp: 'ms 7/5/2021 19:59:09'!
PASSED!

!testRun: #JuegoDeTrucoTest #test06NoPuedeEmpezarAJugarElJugadorPie stamp: 'ms 7/5/2021 19:59:09'!
ERROR!

!testRun: #JuegoDeTrucoTest #testMASADELANTEJugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 19:59:09'!
PASSED!

!testRun: #JuegoDeTrucoTest #test06NoPuedeEmpezarAJugarElJugadorPie stamp: 'ms 7/5/2021 19:59:09'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:00:17' prior: 51214366!
juegaJugadorManoYTira: unaCarta enElEnfrentamiento: elNumeroDeEnfrentamiento 
	
	(jugadorMano includes: unaCarta) ifFalse: [^Error signal: self class noSePuedeTirarUnaCartaQueNoPertenezcaAlJugador].
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:00:21'!
juegaJugadorManoYTira: unaCarta 
	
	(jugadorMano includes: unaCarta) ifFalse: [^Error signal: self class noSePuedeTirarUnaCartaQueNoPertenezcaAlJugador].
	! !

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'ms 7/5/2021 20:00:41'!
Object subclass: #Ronda
	instanceVariableNames: 'jugadorMano jugadorPie enfrentamientos enfrentamiento1 enfrentamiento'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:00:40' prior: 51214898!
iniciarRondaConUn: cartasJugadorMano yUn: cartasJugadorPie
 
	self validarCartasDelJugador: cartasJugadorMano .
	self validarCartasDelJugador: cartasJugadorPie .
	
	self validarQueNoHayCartasRepetidasEn: (cartasJugadorMano asSet addAll: cartasJugadorPie; yourself).
	
	jugadorMano := cartasJugadorMano .
	jugadorPie := cartasJugadorPie .
	enfrentamiento := 1.! !

Object subclass: #Ronda
	instanceVariableNames: 'jugadorMano jugadorPie  enfrentamiento'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'ms 7/5/2021 20:01:23'!
Object subclass: #Ronda
	instanceVariableNames: 'jugadorMano jugadorPie enfrentamiento'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

Object subclass: #Ronda
	instanceVariableNames: 'jugadorMano jugadorPie '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'ms 7/5/2021 20:02:56'!
Object subclass: #Ronda
	instanceVariableNames: 'jugadorMano jugadorPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'ms 7/5/2021 20:03:29'!
Object subclass: #Ronda
	instanceVariableNames: 'jugadorMano jugadorPie cartasJugadasDelJugadorMano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'ms 7/5/2021 20:03:30'!
Object subclass: #Ronda
	instanceVariableNames: 'jugadorMano jugadorPie cartasJugadasDelJugadorMano cartasJugadasDelJugadorPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:03:28' prior: 51214968!
iniciarRondaConUn: cartasJugadorMano yUn: cartasJugadorPie
 
	self validarCartasDelJugador: cartasJugadorMano .
	self validarCartasDelJugador: cartasJugadorPie .
	
	self validarQueNoHayCartasRepetidasEn: (cartasJugadorMano asSet addAll: cartasJugadorPie; yourself).
	
	jugadorMano := cartasJugadorMano .
	jugadorPie := cartasJugadorPie .
	cartasJugadasDelJugadorMano := OrderedCollection new.
	cartasJugadasDelJugadorPie := OrderedCollection new.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:03:53' prior: 51214951!
juegaJugadorManoYTira: unaCarta 
	
	(jugadorMano includes: unaCarta) ifFalse: [^Error signal: self class noSePuedeTirarUnaCartaQueNoPertenezcaAlJugador].
	
	
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:03:58'!
juegaJugadorPieYTira: unaCarta 
	
	(jugadorPie includes: unaCarta) ifFalse: [^Error signal: self class noSePuedeTirarUnaCartaQueNoPertenezcaAlJugador]. 
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:04:25' prior: 51215044!
juegaJugadorManoYTira: unaCarta 
	
	(jugadorMano includes: unaCarta) ifFalse: [^Error signal: self class noSePuedeTirarUnaCartaQueNoPertenezcaAlJugador].
	
	cartasJugadasDelJugadorMano add: unaCarta.
	
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:05:01' prior: 51215052!
juegaJugadorPieYTira: unaCarta 
	
	(jugadorPie includes: unaCarta) ifFalse: [^Error signal: self class noSePuedeTirarUnaCartaQueNoPertenezcaAlJugador]. 
	
	cartasJugadasDelJugadorMano isEmpty ifTrue: [^Error signal: self class noPuedeEmpezarAJugarElJugadorPieEnElEnfrentamiento1]! !
!Ronda class methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:05:23'!
noPuedeEmpezarAJugarElJugadorPieEnElEnfrentamiento1

	^'No Puede Empezar A Jugar El Jugador Pie En El Enfrentamiento 1'! !

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 20:05:26'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 20:05:26'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 20:05:26'!
PASSED!

!testRun: #JuegoDeTrucoTest #test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp stamp: 'ms 7/5/2021 20:05:26'!
PASSED!

!testRun: #JuegoDeTrucoTest #test05NoPuedeTirarUnaCartaQuePertenezcaAlJugadorPie stamp: 'ms 7/5/2021 20:05:26'!
PASSED!

!testRun: #JuegoDeTrucoTest #test06NoPuedeEmpezarAJugarElJugadorPie stamp: 'ms 7/5/2021 20:05:26'!
PASSED!

!testRun: #JuegoDeTrucoTest #testMASADELANTEJugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 20:05:26'!
PASSED!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:06:18'!
test07
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6 ).
	
	self should: [ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6 ).]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noPuedeEmpezarAJugarElJugadorPieEnElEnfrentamiento1 equals: anError messageText .
			].
	
	! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:06:36' prior: 51215115!
test07
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6 ).
	
	self should: [ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6 ).]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noPuedeEmpezarAJugarElJugadorPieEnElEnfrentamiento1 equals: anError messageText .
			].
		
	self assert: (ronda ganoEnElEnfrentamiento: 1) equals: jugadorMano .
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco espadaCon: 1. CartaDeTruco oroCon: 2}.
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }.
	
	! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:07:03' prior: 51215143!
test07
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6 ).
	
	self should: [ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6 ).]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noPuedeEmpezarAJugarElJugadorPieEnElEnfrentamiento1 equals: anError messageText .
			].
		
	self assert: (ronda ganoEnElEnfrentamiento1) equals: jugadorMano .
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco espadaCon: 1. CartaDeTruco oroCon: 2}.
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }.
	
	! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:07:41' prior: 51215180!
test07
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6 ).
	
	self should: [ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6 ).]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noPuedeEmpezarAJugarElJugadorPieEnElEnfrentamiento1 equals: anError messageText .
			].
		
	self assert: (ronda ganoEnElEnfrentamiento1) equals: jugadorMano .
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco bastoCon: 2. CartaDeTruco oroCon: 2}.
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }.
	
	! !

!testRun: #JuegoDeTrucoTest #test07 stamp: 'ms 7/5/2021 20:07:44'!
FAILURE!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:07:54' prior: 51215217!
test07
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6 ).
			
	self assert: (ronda ganoEnElEnfrentamiento1) equals: jugadorMano .
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco bastoCon: 2. CartaDeTruco oroCon: 2}.
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }.
	
	! !

!testRun: #JuegoDeTrucoTest #test07 stamp: 'ms 7/5/2021 20:08:02'!
ERROR!
!Ronda methodsFor: 'nil' stamp: 'ms 7/5/2021 20:09:45'!
ganoEnElEnfrentamiento1
|cartaJugadorMano cartaJugadorPie|

	cartaJugadorMano := cartasJugadasDelJugadorMano first.
	cartaJugadorPie := cartasJugadasDelJugadorPie  first.
	
	(cartaJugadorMano mataA: cartaJugadorPie) 
	ifTrue: [^jugadorMano ]
	ifFalse: [^jugadorPie ]! !

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'ms 7/5/2021 20:10:49'!
Object subclass: #Ronda
	instanceVariableNames: 'jugadorMano jugadorPie cartasJugadasDelJugadorMano cartasJugadasDelJugadorPie empiezaLaRonda'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:10:48' prior: 51215286!
ganoEnElEnfrentamiento1
|cartaJugadorMano cartaJugadorPie|

	cartaJugadorMano := cartasJugadasDelJugadorMano first.
	cartaJugadorPie := cartasJugadasDelJugadorPie  first.
	
	(cartaJugadorMano mataA: cartaJugadorPie) 
	ifTrue: [empiezaLaRonda := jugadorMano.]
	ifFalse: [empiezaLaRonda := jugadorPie ].
	
	^empiezaLaRonda! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:11:07' prior: 51215027!
iniciarRondaConUn: cartasJugadorMano yUn: cartasJugadorPie
 
	self validarCartasDelJugador: cartasJugadorMano .
	self validarCartasDelJugador: cartasJugadorPie .
	
	self validarQueNoHayCartasRepetidasEn: (cartasJugadorMano asSet addAll: cartasJugadorPie; yourself).
	
	jugadorMano := cartasJugadorMano .
	jugadorPie := cartasJugadorPie .
	cartasJugadasDelJugadorMano := OrderedCollection new.
	cartasJugadasDelJugadorPie := OrderedCollection new.
	empiezaLaRonda := jugadorMano! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:11:19' prior: 51214331!
test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	
	
	
	self should: [ronda juegaJugadorManoYTira: (CartaDeTruco espadaCon: 1 ) ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noSePuedeTirarUnaCartaQueNoPertenezcaAlJugador equals: anError messageText .
			]
	! !

!methodRemoval: Ronda #juegaJugadorManoYTira:enElEnfrentamiento: stamp: 'ms 7/5/2021 20:11:28'!
juegaJugadorManoYTira: unaCarta enElEnfrentamiento: elNumeroDeEnfrentamiento 
	
	(jugadorMano includes: unaCarta) ifFalse: [^Error signal: self class noSePuedeTirarUnaCartaQueNoPertenezcaAlJugador].
	!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:11:35' prior: 51214587!
test05NoPuedeTirarUnaCartaQuePertenezcaAlJugadorPie
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	
	
	
	self should: [ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon: 1 ) ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noSePuedeTirarUnaCartaQueNoPertenezcaAlJugador equals: anError messageText .
			]
	! !

!methodRemoval: Ronda #juegaJugadorPieYTira:enElEnfrentamiento: stamp: 'ms 7/5/2021 20:11:42'!
juegaJugadorPieYTira: unaCarta enElEnfrentamiento: elNumeroDeEnfrentamiento 
	
	(jugadorPie includes: unaCarta) ifFalse: [^Error signal: self class noSePuedeTirarUnaCartaQueNoPertenezcaAlJugador]. 
	!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:12:46' prior: 51212608!
ganoEnElEnfrentamiento: numeroDeEnfrentamiento
|cartaJugadorMano cartaJugadorPie|

	cartaJugadorMano := cartasJugadasDelJugadorMano at: numeroDeEnfrentamiento.
	cartaJugadorPie := cartasJugadasDelJugadorPie   at: numeroDeEnfrentamiento.
	
	(cartaJugadorMano mataA: cartaJugadorPie) 
	ifTrue: [empiezaLaRonda := jugadorMano.]
	ifFalse: [empiezaLaRonda := jugadorPie ].
	
	^empiezaLaRonda! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:12:49' prior: 51215410!
ganoEnElEnfrentamiento: numeroDeEnfrentamiento
|cartaJugadorMano cartaJugadorPie|

	cartaJugadorMano := cartasJugadasDelJugadorMano at: numeroDeEnfrentamiento.
	cartaJugadorPie := cartasJugadasDelJugadorPie at: numeroDeEnfrentamiento.
	
	(cartaJugadorMano mataA: cartaJugadorPie) 
	ifTrue: [empiezaLaRonda := jugadorMano.]
	ifFalse: [empiezaLaRonda := jugadorPie ].
	
	^empiezaLaRonda! !

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 20:12:57'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 20:12:57'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 20:12:57'!
PASSED!

!testRun: #JuegoDeTrucoTest #test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp stamp: 'ms 7/5/2021 20:12:57'!
PASSED!

!testRun: #JuegoDeTrucoTest #test05NoPuedeTirarUnaCartaQuePertenezcaAlJugadorPie stamp: 'ms 7/5/2021 20:12:57'!
PASSED!

!testRun: #JuegoDeTrucoTest #test06NoPuedeEmpezarAJugarElJugadorPie stamp: 'ms 7/5/2021 20:12:57'!
PASSED!

!testRun: #JuegoDeTrucoTest #test07 stamp: 'ms 7/5/2021 20:12:57'!
ERROR!

!testRun: #JuegoDeTrucoTest #testMASADELANTEJugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 20:12:57'!
PASSED!

!testRun: #JuegoDeTrucoTest #test07 stamp: 'ms 7/5/2021 20:12:57'!
ERROR!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:13:08' prior: 51215256!
test07
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6 ).
			
	self assert: (ronda ganoEnElEnfrentamiento: 1) equals: jugadorMano .
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco bastoCon: 2. CartaDeTruco oroCon: 2}.
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }.
	
	! !

!testRun: #JuegoDeTrucoTest #test07 stamp: 'ms 7/5/2021 20:13:10'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:13:27' prior: 51215425!
ganoEnElEnfrentamiento: numeroDeEnfrentamiento
|cartaJugadorMano cartaJugadorPie|

	cartaJugadorMano := cartasJugadasDelJugadorMano at: numeroDeEnfrentamiento -1.
	cartaJugadorPie := cartasJugadasDelJugadorPie at: numeroDeEnfrentamiento-1.
	
	(cartaJugadorMano mataA: cartaJugadorPie) 
	ifTrue: [empiezaLaRonda := jugadorMano.]
	ifFalse: [empiezaLaRonda := jugadorPie ].
	
	^empiezaLaRonda! !

!testRun: #JuegoDeTrucoTest #test07 stamp: 'ms 7/5/2021 20:13:31'!
ERROR!

!testRun: #JuegoDeTrucoTest #test07 stamp: 'ms 7/5/2021 20:13:31'!
ERROR!

!testRun: #JuegoDeTrucoTest #test07 stamp: 'ms 7/5/2021 20:13:47'!
ERROR!

!testRun: #JuegoDeTrucoTest #test07 stamp: 'ms 7/5/2021 20:13:47'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:15:18' prior: 51215503!
ganoEnElEnfrentamiento: numeroDeEnfrentamiento
|cartaJugadorMano cartaJugadorPie|

	cartaJugadorMano := cartasJugadasDelJugadorMano at: numeroDeEnfrentamiento.
	cartaJugadorPie := cartasJugadasDelJugadorPie at: numeroDeEnfrentamiento.
	
	(cartaJugadorMano mataA: cartaJugadorPie) 
	ifTrue: [empiezaLaRonda := jugadorMano.]
	ifFalse: [empiezaLaRonda := jugadorPie ].
	
	^empiezaLaRonda! !

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 20:15:22'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 20:15:22'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 20:15:22'!
PASSED!

!testRun: #JuegoDeTrucoTest #test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp stamp: 'ms 7/5/2021 20:15:22'!
PASSED!

!testRun: #JuegoDeTrucoTest #test05NoPuedeTirarUnaCartaQuePertenezcaAlJugadorPie stamp: 'ms 7/5/2021 20:15:22'!
PASSED!

!testRun: #JuegoDeTrucoTest #test06NoPuedeEmpezarAJugarElJugadorPie stamp: 'ms 7/5/2021 20:15:22'!
PASSED!

!testRun: #JuegoDeTrucoTest #test07 stamp: 'ms 7/5/2021 20:15:22'!
ERROR!

!testRun: #JuegoDeTrucoTest #testMASADELANTEJugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 20:15:22'!
PASSED!

!testRun: #JuegoDeTrucoTest #test07 stamp: 'ms 7/5/2021 20:15:22'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:15:53' prior: 51215070!
juegaJugadorPieYTira: unaCarta 
	
	(jugadorPie includes: unaCarta) ifFalse: [^Error signal: self class noSePuedeTirarUnaCartaQueNoPertenezcaAlJugador]. 
	
	cartasJugadasDelJugadorMano isEmpty ifTrue: [^Error signal: self class noPuedeEmpezarAJugarElJugadorPieEnElEnfrentamiento1].
	
	cartasJugadasDelJugadorPie add: unaCarta.! !

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 20:15:56'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 20:15:56'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 20:15:56'!
PASSED!

!testRun: #JuegoDeTrucoTest #test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp stamp: 'ms 7/5/2021 20:15:56'!
PASSED!

!testRun: #JuegoDeTrucoTest #test05NoPuedeTirarUnaCartaQuePertenezcaAlJugadorPie stamp: 'ms 7/5/2021 20:15:56'!
PASSED!

!testRun: #JuegoDeTrucoTest #test06NoPuedeEmpezarAJugarElJugadorPie stamp: 'ms 7/5/2021 20:15:56'!
PASSED!

!testRun: #JuegoDeTrucoTest #test07 stamp: 'ms 7/5/2021 20:15:56'!
ERROR!

!testRun: #JuegoDeTrucoTest #testMASADELANTEJugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 20:15:56'!
PASSED!

!testRun: #JuegoDeTrucoTest #test07 stamp: 'ms 7/5/2021 20:15:56'!
ERROR!
!Ronda methodsFor: 'nil' stamp: 'ms 7/5/2021 20:16:37'!
cartasDeljugadorMano

	^jugadorMano 

	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:16:43'!
cartasDeljugadorPie

	^jugadorPie 

	! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:16:57' prior: 51215472!
test07
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6 ).
			
	self assert: (ronda ganoEnElEnfrentamiento: 1) equals: jugadorMano .
	self assert: (ronda cartasDelJugadorMano) equals: {CartaDeTruco bastoCon: 2. CartaDeTruco oroCon: 2}.
	self assert: (ronda cartasDelJugadorPie) equals: {CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }.
	
	! !

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 20:17:01'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 20:17:01'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 20:17:01'!
PASSED!

!testRun: #JuegoDeTrucoTest #test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp stamp: 'ms 7/5/2021 20:17:01'!
PASSED!

!testRun: #JuegoDeTrucoTest #test05NoPuedeTirarUnaCartaQuePertenezcaAlJugadorPie stamp: 'ms 7/5/2021 20:17:01'!
PASSED!

!testRun: #JuegoDeTrucoTest #test06NoPuedeEmpezarAJugarElJugadorPie stamp: 'ms 7/5/2021 20:17:01'!
PASSED!

!testRun: #JuegoDeTrucoTest #test07 stamp: 'ms 7/5/2021 20:17:01'!
ERROR!

!testRun: #JuegoDeTrucoTest #testMASADELANTEJugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 20:17:01'!
PASSED!

!testRun: #JuegoDeTrucoTest #test07 stamp: 'ms 7/5/2021 20:17:01'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:17:14'!
cartasDelJugadorMano

	^jugadorMano 

	! !

!methodRemoval: Ronda #cartasDeljugadorMano stamp: 'ms 7/5/2021 20:17:18'!
cartasDeljugadorMano

	^jugadorMano 

	!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:17:22'!
cartasDelJugadorPie

	^jugadorPie 

	! !

!methodRemoval: Ronda #cartasDeljugadorPie stamp: 'ms 7/5/2021 20:17:25'!
cartasDeljugadorPie

	^jugadorPie 

	!

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 20:17:27'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 20:17:27'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 20:17:27'!
PASSED!

!testRun: #JuegoDeTrucoTest #test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp stamp: 'ms 7/5/2021 20:17:27'!
PASSED!

!testRun: #JuegoDeTrucoTest #test05NoPuedeTirarUnaCartaQuePertenezcaAlJugadorPie stamp: 'ms 7/5/2021 20:17:27'!
PASSED!

!testRun: #JuegoDeTrucoTest #test06NoPuedeEmpezarAJugarElJugadorPie stamp: 'ms 7/5/2021 20:17:27'!
PASSED!

!testRun: #JuegoDeTrucoTest #test07 stamp: 'ms 7/5/2021 20:17:28'!
FAILURE!

!testRun: #JuegoDeTrucoTest #testMASADELANTEJugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 20:17:28'!
PASSED!

!testRun: #JuegoDeTrucoTest #test07 stamp: 'ms 7/5/2021 20:17:28'!
FAILURE!

(ronda ganoEnElEnfrentamiento: 1)!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:18:20' prior: 51215060!
juegaJugadorManoYTira: unaCarta 
	
	(jugadorMano includes: unaCarta) ifFalse: [^Error signal: self class noSePuedeTirarUnaCartaQueNoPertenezcaAlJugador].
	
	cartasJugadasDelJugadorMano add: unaCarta.
	jugadorMano remove: unaCarta ifAbsent: []
	
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:18:30' prior: 51215575!
juegaJugadorPieYTira: unaCarta 
	
	(jugadorPie includes: unaCarta) ifFalse: [^Error signal: self class noSePuedeTirarUnaCartaQueNoPertenezcaAlJugador]. 
	
	cartasJugadasDelJugadorMano isEmpty ifTrue: [^Error signal: self class noPuedeEmpezarAJugarElJugadorPieEnElEnfrentamiento1].
	
	cartasJugadasDelJugadorPie add: unaCarta.
	jugadorPie remove: unaCarta ifAbsent: []! !

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 20:18:33'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 20:18:34'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 20:18:34'!
PASSED!

!testRun: #JuegoDeTrucoTest #test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp stamp: 'ms 7/5/2021 20:18:34'!
PASSED!

!testRun: #JuegoDeTrucoTest #test05NoPuedeTirarUnaCartaQuePertenezcaAlJugadorPie stamp: 'ms 7/5/2021 20:18:34'!
PASSED!

!testRun: #JuegoDeTrucoTest #test06NoPuedeEmpezarAJugarElJugadorPie stamp: 'ms 7/5/2021 20:18:34'!
PASSED!

!testRun: #JuegoDeTrucoTest #test07 stamp: 'ms 7/5/2021 20:18:34'!
FAILURE!

!testRun: #JuegoDeTrucoTest #testMASADELANTEJugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 20:18:34'!
PASSED!

!testRun: #JuegoDeTrucoTest #test07 stamp: 'ms 7/5/2021 20:18:34'!
FAILURE!

(ronda ganoEnElEnfrentamiento: 1)!

self assert: (ronda ganoEnElEnfrentamiento: 1) equals: jugadorMano .!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:19:21' prior: 51215628!
test07
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6 ).
			
	self assert: (ronda ganoEnElEnfrentamiento: 1) equals: jugadorMano .
	self assert: (ronda cartasDelJugadorMano) equals: {CartaDeTruco bastoCon: 2. CartaDeTruco oroCon: 2}.
	self assert: (ronda cartasDelJugadorPie) equals: {CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }.
	
	! !

jugadorMano!

ronda cartasDelJugadorMano!

!testRun: #JuegoDeTrucoTest #test07 stamp: 'ms 7/5/2021 20:20:06'!
FAILURE!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:20:38' prior: 51215796!
test07
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6 ).
			
	self assert: (ronda ganoEnElEnfrentamiento: 1) equals: jugadorMano .
	self assert: (ronda cartasDelJugadorMano) equals: {CartaDeTruco bastoCon: 2. CartaDeTruco oroCon: 2} asOrderedCollection .
	self assert: (ronda cartasDelJugadorPie) equals: {CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }asOrderedCollection.
	
	! !

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 20:20:39'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 20:20:39'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 20:20:39'!
PASSED!

!testRun: #JuegoDeTrucoTest #test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp stamp: 'ms 7/5/2021 20:20:39'!
PASSED!

!testRun: #JuegoDeTrucoTest #test05NoPuedeTirarUnaCartaQuePertenezcaAlJugadorPie stamp: 'ms 7/5/2021 20:20:39'!
PASSED!

!testRun: #JuegoDeTrucoTest #test06NoPuedeEmpezarAJugarElJugadorPie stamp: 'ms 7/5/2021 20:20:39'!
PASSED!

!testRun: #JuegoDeTrucoTest #test07 stamp: 'ms 7/5/2021 20:20:39'!
PASSED!

!testRun: #JuegoDeTrucoTest #testMASADELANTEJugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 20:20:39'!
PASSED!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:21:23'!
test07GanaLaManoEnElPrimerEnfrentamiento
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6 ).
			
	self assert: (ronda ganoEnElEnfrentamiento: 1) equals: jugadorMano .
	self assert: (ronda cartasDelJugadorMano) equals: {CartaDeTruco bastoCon: 2. CartaDeTruco oroCon: 2} asOrderedCollection .
	self assert: (ronda cartasDelJugadorPie) equals: {CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }asOrderedCollection.
	
	! !

!methodRemoval: JuegoDeTrucoTest #test07 stamp: 'ms 7/5/2021 20:21:23'!
test07
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6 ).
			
	self assert: (ronda ganoEnElEnfrentamiento: 1) equals: jugadorMano .
	self assert: (ronda cartasDelJugadorMano) equals: {CartaDeTruco bastoCon: 2. CartaDeTruco oroCon: 2} asOrderedCollection .
	self assert: (ronda cartasDelJugadorPie) equals: {CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }asOrderedCollection.
	
	!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:22:19'!
test08SiGanaLaManoEnElPrimerEnfrentamientoNoDebeEmpezarElPie
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6 ).
			
	self assert: (ronda ganoEnElEnfrentamiento: 1) equals: jugadorMano .
	self assert: (ronda cartasDelJugadorMano) equals: {CartaDeTruco bastoCon: 2. CartaDeTruco oroCon: 2} asOrderedCollection .
	self assert: (ronda cartasDelJugadorPie) equals: {CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }asOrderedCollection.
	
	! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:23:40' prior: 51215948!
test08SiGanaLaManoEnElPrimerEnfrentamientoNoDebeEmpezarElPie
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6 ).
	
	self should: [ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6 ).]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noDebeEmpezarAJugarElJugadorPiePuesPerdioElAnteriorEnfrentamiento equals: anError messageText .
		self assert: (ronda cartasDelJugadorPie) equals: {CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }asOrderedCollection.
			].
	
	
	! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:24:30' prior: 51215980!
test08SiGanaLaManoEnElPrimerEnfrentamientoNoDebeEmpezarElPie
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6 ).
	
	self should: [ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon: 3 ).]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noDebeEmpezarAJugarElJugadorPiePuesPerdioElAnteriorEnfrentamiento equals: anError messageText .
		self assert: (ronda cartasDelJugadorPie) equals: {CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }asOrderedCollection.
			].
	
	
	! !

!testRun: #JuegoDeTrucoTest #test08SiGanaLaManoEnElPrimerEnfrentamientoNoDebeEmpezarElPie stamp: 'ms 7/5/2021 20:24:33'!
FAILURE!

!testRun: #JuegoDeTrucoTest #test08SiGanaLaManoEnElPrimerEnfrentamientoNoDebeEmpezarElPie stamp: 'ms 7/5/2021 20:24:33'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:25:58' prior: 51215746!
juegaJugadorPieYTira: unaCarta 
	
	(jugadorPie includes: unaCarta) ifFalse: [^Error signal: self class noSePuedeTirarUnaCartaQueNoPertenezcaAlJugador]. 
	
	cartasJugadasDelJugadorMano isEmpty ifTrue: [^Error signal: self class noPuedeEmpezarAJugarElJugadorPieEnElEnfrentamiento1].
	
	(empiezaLaRonda isNotEqualTo: jugadorPie ) ifTrue: [^Error signal: self class noDebeEmpezarAJugarElJugadorPiePuesPerdioElAnteriorEnfrentamiento].
	
	cartasJugadasDelJugadorPie add: unaCarta.
	jugadorPie remove: unaCarta ifAbsent: []! !

!testRun: #JuegoDeTrucoTest #test08SiGanaLaManoEnElPrimerEnfrentamientoNoDebeEmpezarElPie stamp: 'ms 7/5/2021 20:26:08'!
ERROR!
!Ronda class methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:26:12'!
noDebeEmpezarAJugarElJugadorPiePuesPerdioElAnteriorEnfrentamiento
	self shouldBeImplemented.! !
!Ronda class methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:26:31' prior: 51216079!
noDebeEmpezarAJugarElJugadorPiePuesPerdioElAnteriorEnfrentamiento
	
	^'No Debe Empezar A Jugar El Jugador Pie Pues Perdio El Anterior Enfrentamiento'! !

!testRun: #JuegoDeTrucoTest #test08SiGanaLaManoEnElPrimerEnfrentamientoNoDebeEmpezarElPie stamp: 'ms 7/5/2021 20:26:34'!
PASSED!

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 20:26:37'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 20:26:37'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 20:26:37'!
PASSED!

!testRun: #JuegoDeTrucoTest #test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp stamp: 'ms 7/5/2021 20:26:37'!
PASSED!

!testRun: #JuegoDeTrucoTest #test05NoPuedeTirarUnaCartaQuePertenezcaAlJugadorPie stamp: 'ms 7/5/2021 20:26:37'!
PASSED!

!testRun: #JuegoDeTrucoTest #test06NoPuedeEmpezarAJugarElJugadorPie stamp: 'ms 7/5/2021 20:26:37'!
PASSED!

!testRun: #JuegoDeTrucoTest #test07GanaLaManoEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 20:26:37'!
ERROR!

!testRun: #JuegoDeTrucoTest #test08SiGanaLaManoEnElPrimerEnfrentamientoNoDebeEmpezarElPie stamp: 'ms 7/5/2021 20:26:37'!
ERROR!

!testRun: #JuegoDeTrucoTest #testMASADELANTEJugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 20:26:37'!
PASSED!

!testRun: #JuegoDeTrucoTest #test07GanaLaManoEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 20:26:40'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:27:57' prior: 51216056!
juegaJugadorPieYTira: unaCarta 
	
	(jugadorPie includes: unaCarta) ifFalse: [^Error signal: self class noSePuedeTirarUnaCartaQueNoPertenezcaAlJugador]. 
	
	cartasJugadasDelJugadorMano isEmpty ifTrue: [^Error signal: self class noPuedeEmpezarAJugarElJugadorPieEnElEnfrentamiento1].
	
	(empiezaLaRonda isNotEqualTo: jugadorPie ) ifTrue: [^Error signal: self class noDebeEmpezarAJugarElJugadorPiePuesPerdioElAnteriorEnfrentamiento].
	
	cartasJugadasDelJugadorPie add: unaCarta.
	jugadorPie remove: unaCarta ifAbsent: []! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:28:28' prior: 51216134!
juegaJugadorPieYTira: unaCarta 
	
	(jugadorPie includes: unaCarta) ifFalse: [^Error signal: self class noSePuedeTirarUnaCartaQueNoPertenezcaAlJugador]. 
	
	cartasJugadasDelJugadorMano isEmpty ifTrue: [^Error signal: self class noPuedeEmpezarAJugarElJugadorPieEnElEnfrentamiento1].
	
	(empiezaLaRonda isNotEqualTo: jugadorPie ) ifTrue: [^Error signal: self class noDebeEmpezarAJugarElJugadorPiePuesPerdioElAnteriorEnfrentamiento].
	
	cartasJugadasDelJugadorPie add: unaCarta.
	jugadorPie remove: unaCarta ifAbsent: []! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:28:38' prior: 51215321!
iniciarRondaConUn: cartasJugadorMano yUn: cartasJugadorPie
 
	self validarCartasDelJugador: cartasJugadorMano .
	self validarCartasDelJugador: cartasJugadorPie .
	
	self validarQueNoHayCartasRepetidasEn: (cartasJugadorMano asSet addAll: cartasJugadorPie; yourself).
	
	jugadorMano := cartasJugadorMano .
	jugadorPie := cartasJugadorPie .
	cartasJugadasDelJugadorMano := OrderedCollection new.
	cartasJugadasDelJugadorPie := OrderedCollection new.
	empiezaLaRonda := OrderedCollection new.! !

!testRun: #JuegoDeTrucoTest #test07GanaLaManoEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 20:28:42'!
ERROR!

!testRun: #JuegoDeTrucoTest #test07GanaLaManoEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 20:28:42'!
ERROR!

!methodRemoval: Ronda #ganoEnElEnfrentamiento1 stamp: 'ms 7/5/2021 20:31:44'!
ganoEnElEnfrentamiento1
|cartaJugadorMano cartaJugadorPie|

	cartaJugadorMano := cartasJugadasDelJugadorMano first.
	cartaJugadorPie := cartasJugadasDelJugadorPie  first.
	
	(cartaJugadorMano mataA: cartaJugadorPie) 
	ifTrue: [empiezaLaRonda := jugadorMano.]
	ifFalse: [empiezaLaRonda := jugadorPie ].
	
	^empiezaLaRonda!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:32:12' prior: 51216172!
iniciarRondaConUn: cartasJugadorMano yUn: cartasJugadorPie
 
	self validarCartasDelJugador: cartasJugadorMano .
	self validarCartasDelJugador: cartasJugadorPie .
	
	self validarQueNoHayCartasRepetidasEn: (cartasJugadorMano asSet addAll: cartasJugadorPie; yourself).
	
	jugadorMano := cartasJugadorMano .
	jugadorPie := cartasJugadorPie .
	cartasJugadasDelJugadorMano := OrderedCollection new.
	cartasJugadasDelJugadorPie := OrderedCollection new.
	empiezaLaRonda := jugadorMano.! !

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 20:33:30'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 20:33:30'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 20:33:30'!
PASSED!

!testRun: #JuegoDeTrucoTest #test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp stamp: 'ms 7/5/2021 20:33:30'!
PASSED!

!testRun: #JuegoDeTrucoTest #test05NoPuedeTirarUnaCartaQuePertenezcaAlJugadorPie stamp: 'ms 7/5/2021 20:33:30'!
PASSED!

!testRun: #JuegoDeTrucoTest #test06NoPuedeEmpezarAJugarElJugadorPie stamp: 'ms 7/5/2021 20:33:30'!
PASSED!

!testRun: #JuegoDeTrucoTest #test07GanaLaManoEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 20:33:30'!
ERROR!

!testRun: #JuegoDeTrucoTest #test08SiGanaLaManoEnElPrimerEnfrentamientoNoDebeEmpezarElPie stamp: 'ms 7/5/2021 20:33:30'!
ERROR!

!testRun: #JuegoDeTrucoTest #testMASADELANTEJugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 20:33:30'!
PASSED!

!testRun: #JuegoDeTrucoTest #test07GanaLaManoEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 20:33:33'!
ERROR!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:35:42' prior: 51215888!
test07GanaLaManoEnElPrimerEnfrentamiento
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6 ).
			
	self assert: (ronda ganoEnElEnfrentamiento: 1) equals: jugadorMano ."ojo con los nombres y poner quien sigue despues"
	self assert: (ronda cartasDelJugadorMano) equals: {CartaDeTruco bastoCon: 2. CartaDeTruco oroCon: 2} asOrderedCollection .
	self assert: (ronda cartasDelJugadorPie) equals: {CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }asOrderedCollection.
	
	! !

!testRun: #JuegoDeTrucoTest #test08SiGanaLaManoEnElPrimerEnfrentamientoNoDebeEmpezarElPie stamp: 'ms 7/5/2021 20:37:50'!
ERROR!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'ms 7/5/2021 20:39:48'!
Object subclass: #Ronda
	instanceVariableNames: 'jugadorMano jugadorPie cartasJugadasDelJugadorMano cartasJugadasDelJugadorPie siguienteATirarCartas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:39:48' prior: 51215528!
ganoEnElEnfrentamiento: numeroDeEnfrentamiento
|cartaJugadorMano cartaJugadorPie|

	cartaJugadorMano := cartasJugadasDelJugadorMano at: numeroDeEnfrentamiento.
	cartaJugadorPie := cartasJugadasDelJugadorPie at: numeroDeEnfrentamiento.
	
	(cartaJugadorMano mataA: cartaJugadorPie) 
	ifTrue: [siguienteATirarCartas := jugadorMano.]
	ifFalse: [siguienteATirarCartas := jugadorPie ].
	
	^siguienteATirarCartas! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:39:48' prior: 51216210!
iniciarRondaConUn: cartasJugadorMano yUn: cartasJugadorPie
 
	self validarCartasDelJugador: cartasJugadorMano .
	self validarCartasDelJugador: cartasJugadorPie .
	
	self validarQueNoHayCartasRepetidasEn: (cartasJugadorMano asSet addAll: cartasJugadorPie; yourself).
	
	jugadorMano := cartasJugadorMano .
	jugadorPie := cartasJugadorPie .
	cartasJugadasDelJugadorMano := OrderedCollection new.
	cartasJugadasDelJugadorPie := OrderedCollection new.
	siguienteATirarCartas := jugadorMano.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:39:48' prior: 51216153!
juegaJugadorPieYTira: unaCarta 
	
	(jugadorPie includes: unaCarta) ifFalse: [^Error signal: self class noSePuedeTirarUnaCartaQueNoPertenezcaAlJugador]. 
	
	cartasJugadasDelJugadorMano isEmpty ifTrue: [^Error signal: self class noPuedeEmpezarAJugarElJugadorPieEnElEnfrentamiento1].
	
	(siguienteATirarCartas isNotEqualTo: jugadorPie ) ifTrue: [^Error signal: self class noDebeEmpezarAJugarElJugadorPiePuesPerdioElAnteriorEnfrentamiento].
	
	cartasJugadasDelJugadorPie add: unaCarta.
	jugadorPie remove: unaCarta ifAbsent: []! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:40:10' prior: 51215735!
juegaJugadorManoYTira: unaCarta 
	
	(jugadorMano includes: unaCarta) ifFalse: [^Error signal: self class noSePuedeTirarUnaCartaQueNoPertenezcaAlJugador].
	
	cartasJugadasDelJugadorMano add: unaCarta.
	jugadorMano remove: unaCarta ifAbsent: [].
	siguienteATirarCartas := jugadorPie 
	
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:41:16' prior: 51216368!
juegaJugadorManoYTira: unaCarta 
	
	(jugadorMano includes: unaCarta) ifFalse: [^Error signal: self class noSePuedeTirarUnaCartaQueNoPertenezcaAlJugador].
	
	cartasJugadasDelJugadorMano add: unaCarta.
	jugadorMano remove: unaCarta ifAbsent: [].
	
	! !

Object subclass: #Ronda
	instanceVariableNames: 'jugadorMano jugadorPie cartasJugadasDelJugadorMano cartasJugadasDelJugadorPie siguienteATirarCartas siguienteAEmpezarEnfrentamiento'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'ms 7/5/2021 20:41:49'!
Object subclass: #Ronda
	instanceVariableNames: 'jugadorMano jugadorPie cartasJugadasDelJugadorMano cartasJugadasDelJugadorPie siguienteATirarCartas siguienteAEmpezarEnfrentamiento'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:45:41' prior: 51216014!
test08SiGanaLaManoEnElPrimerEnfrentamientoNoDebeEmpezarElPie
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6 ).
	ronda ganoEnElEnfrentamiento: 1.
	
	self should: [ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon: 3 ).]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noDebeEmpezarAJugarElJugadorPiePuesPerdioElAnteriorEnfrentamiento equals: anError messageText .
		self assert: (ronda cartasDelJugadorPie) equals: {CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }asOrderedCollection.
			].
	
	
	! !

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 20:45:43'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 20:45:44'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 20:45:44'!
PASSED!

!testRun: #JuegoDeTrucoTest #test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp stamp: 'ms 7/5/2021 20:45:44'!
PASSED!

!testRun: #JuegoDeTrucoTest #test05NoPuedeTirarUnaCartaQuePertenezcaAlJugadorPie stamp: 'ms 7/5/2021 20:45:44'!
PASSED!

!testRun: #JuegoDeTrucoTest #test06NoPuedeEmpezarAJugarElJugadorPie stamp: 'ms 7/5/2021 20:45:44'!
PASSED!

!testRun: #JuegoDeTrucoTest #test07GanaLaManoEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 20:45:44'!
ERROR!

!testRun: #JuegoDeTrucoTest #test08SiGanaLaManoEnElPrimerEnfrentamientoNoDebeEmpezarElPie stamp: 'ms 7/5/2021 20:45:44'!
ERROR!

!testRun: #JuegoDeTrucoTest #testMASADELANTEJugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 20:45:44'!
PASSED!

!testRun: #JuegoDeTrucoTest #test08SiGanaLaManoEnElPrimerEnfrentamientoNoDebeEmpezarElPie stamp: 'ms 7/5/2021 20:45:55'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:46:08' prior: 51216348!
juegaJugadorPieYTira: unaCarta 
	
	(jugadorPie includes: unaCarta) ifFalse: [^Error signal: self class noSePuedeTirarUnaCartaQueNoPertenezcaAlJugador]. 
	
	cartasJugadasDelJugadorMano isEmpty ifTrue: [^Error signal: self class noPuedeEmpezarAJugarElJugadorPieEnElEnfrentamiento1].
	
	"(siguienteATirarCartas isNotEqualTo: jugadorPie ) ifTrue: [^Error signal: self class noDebeEmpezarAJugarElJugadorPiePuesPerdioElAnteriorEnfrentamiento]."
	
	cartasJugadasDelJugadorPie add: unaCarta.
	jugadorPie remove: unaCarta ifAbsent: []! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:49:54' prior: 51216484!
juegaJugadorPieYTira: unaCarta 
	
	(jugadorPie includes: unaCarta) ifFalse: [^Error signal: self class noSePuedeTirarUnaCartaQueNoPertenezcaAlJugador]. 
	
	cartasJugadasDelJugadorMano isEmpty ifTrue: [^Error signal: self class noPuedeEmpezarAJugarElJugadorPieEnElEnfrentamiento1].
	
	(siguienteATirarCartas isNotEqualTo: jugadorPie ) ifTrue: [^Error signal: self class noDebeEmpezarAJugarElJugadorPiePuesPerdioElAnteriorEnfrentamiento].
	
	cartasJugadasDelJugadorPie add: unaCarta.
	jugadorPie remove: unaCarta ifAbsent: []! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:53:28' prior: 51216504!
juegaJugadorPieYTira: unaCarta 
	
	(jugadorPie includes: unaCarta) ifFalse: [^Error signal: self class noSePuedeTirarUnaCartaQueNoPertenezcaAlJugador]. 
	
	cartasJugadasDelJugadorMano isEmpty ifTrue: [^Error signal: self class noPuedeEmpezarAJugarElJugadorPieEnElEnfrentamiento1].
	
	(jugadorPie size < jugadorMano size) ifTrue: [^Error signal: self class noDebeEmpezarAJugarElJugadorPiePuesPerdioElAnteriorEnfrentamiento].
	
	cartasJugadasDelJugadorPie add: unaCarta.
	jugadorPie remove: unaCarta ifAbsent: []! !

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'ms 7/5/2021 20:55:45'!
Object subclass: #Ronda
	instanceVariableNames: 'jugadorMano jugadorPie cartasJugadasDelJugadorMano cartasJugadasDelJugadorPie siguienteATirarCartas siguienteAEmpezarEnfrentamiento elUltimoGanador'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:55:44' prior: 51216524!
juegaJugadorPieYTira: unaCarta 
	
	(jugadorPie includes: unaCarta) ifFalse: [^Error signal: self class noSePuedeTirarUnaCartaQueNoPertenezcaAlJugador]. 
	
	cartasJugadasDelJugadorMano isEmpty ifTrue: [^Error signal: self class noPuedeEmpezarAJugarElJugadorPieEnElEnfrentamiento1].
	
	(jugadorPie size < jugadorMano size) ifTrue: [^Error signal: self class noDebeEmpezarAJugarElJugadorPiePuesPerdioElAnteriorEnfrentamiento].
	
	(elUltimoGanador isNotEqualTo: jugadorPie) ifTrue: [^Error signal: self class noDebeEmpezarAJugarElJugadorPiePuesPerdioElAnteriorEnfrentamiento].
	
	cartasJugadasDelJugadorPie add: unaCarta.
	jugadorPie remove: unaCarta ifAbsent: []! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:55:56' prior: 51216313!
ganoEnElEnfrentamiento: numeroDeEnfrentamiento
|cartaJugadorMano cartaJugadorPie|

	cartaJugadorMano := cartasJugadasDelJugadorMano at: numeroDeEnfrentamiento.
	cartaJugadorPie := cartasJugadasDelJugadorPie at: numeroDeEnfrentamiento.
	
	(cartaJugadorMano mataA: cartaJugadorPie) 
	ifTrue: [elUltimoGanador := jugadorMano.]
	ifFalse: [elUltimoGanador := jugadorPie ].
	
	^elUltimoGanador! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:56:00' prior: 51216329!
iniciarRondaConUn: cartasJugadorMano yUn: cartasJugadorPie
 
	self validarCartasDelJugador: cartasJugadorMano .
	self validarCartasDelJugador: cartasJugadorPie .
	
	self validarQueNoHayCartasRepetidasEn: (cartasJugadorMano asSet addAll: cartasJugadorPie; yourself).
	
	jugadorMano := cartasJugadorMano .
	jugadorPie := cartasJugadorPie .
	cartasJugadasDelJugadorMano := OrderedCollection new.
	cartasJugadasDelJugadorPie := OrderedCollection new.
	elUltimoGanador := jugadorMano.! !

!testRun: #JuegoDeTrucoTest #test08SiGanaLaManoEnElPrimerEnfrentamientoNoDebeEmpezarElPie stamp: 'ms 7/5/2021 20:56:07'!
ERROR!

!testRun: #JuegoDeTrucoTest #test08SiGanaLaManoEnElPrimerEnfrentamientoNoDebeEmpezarElPie stamp: 'ms 7/5/2021 20:56:08'!
ERROR!

jugadorPie size!

jugadorMano size!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 20:57:57' prior: 51216555!
juegaJugadorPieYTira: unaCarta 
	
	(jugadorPie includes: unaCarta) ifFalse: [^Error signal: self class noSePuedeTirarUnaCartaQueNoPertenezcaAlJugador]. 
	
	cartasJugadasDelJugadorMano isEmpty ifTrue: [^Error signal: self class noPuedeEmpezarAJugarElJugadorPieEnElEnfrentamiento1].
	
	(jugadorPie size < jugadorMano size) ifTrue: [^Error signal: self class noDebeEmpezarAJugarElJugadorPiePuesPerdioElAnteriorEnfrentamiento].
	
	(jugadorPie size = jugadorMano size) ifTrue:
		 [(elUltimoGanador isNotEqualTo: jugadorPie) ifTrue: [^Error signal: self class noDebeEmpezarAJugarElJugadorPiePuesPerdioElAnteriorEnfrentamiento]].
	
	cartasJugadasDelJugadorPie add: unaCarta.
	jugadorPie remove: unaCarta ifAbsent: []! !

!testRun: #JuegoDeTrucoTest #test08SiGanaLaManoEnElPrimerEnfrentamientoNoDebeEmpezarElPie stamp: 'ms 7/5/2021 20:58:15'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'ms 7/5/2021 20:58:18'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'ms 7/5/2021 20:58:18'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'ms 7/5/2021 20:58:18'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'ms 7/5/2021 20:58:18'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'ms 7/5/2021 20:58:18'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'ms 7/5/2021 20:58:18'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'ms 7/5/2021 20:58:18'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'ms 7/5/2021 20:58:18'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'ms 7/5/2021 20:58:18'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'ms 7/5/2021 20:58:18'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'ms 7/5/2021 20:58:18'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'ms 7/5/2021 20:58:18'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'ms 7/5/2021 20:58:18'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'ms 7/5/2021 20:58:18'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'ms 7/5/2021 20:58:18'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'ms 7/5/2021 20:58:18'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'ms 7/5/2021 20:58:18'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'ms 7/5/2021 20:58:18'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'ms 7/5/2021 20:58:18'!
PASSED!

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 20:58:18'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 20:58:18'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 20:58:18'!
PASSED!

!testRun: #JuegoDeTrucoTest #test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp stamp: 'ms 7/5/2021 20:58:18'!
PASSED!

!testRun: #JuegoDeTrucoTest #test05NoPuedeTirarUnaCartaQuePertenezcaAlJugadorPie stamp: 'ms 7/5/2021 20:58:18'!
PASSED!

!testRun: #JuegoDeTrucoTest #test06NoPuedeEmpezarAJugarElJugadorPie stamp: 'ms 7/5/2021 20:58:18'!
PASSED!

!testRun: #JuegoDeTrucoTest #test07GanaLaManoEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 20:58:18'!
PASSED!

!testRun: #JuegoDeTrucoTest #test08SiGanaLaManoEnElPrimerEnfrentamientoNoDebeEmpezarElPie stamp: 'ms 7/5/2021 20:58:18'!
PASSED!

!testRun: #JuegoDeTrucoTest #testMASADELANTEJugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 20:58:18'!
PASSED!
!Ronda methodsFor: 'intancializacion' stamp: 'ms 7/5/2021 21:00:26' prior: 51216594!
iniciarRondaConUn: cartasJugadorMano yUn: cartasJugadorPie
 
	self validarCartasDelJugador: cartasJugadorMano .
	self validarCartasDelJugador: cartasJugadorPie .
	
	self validarQueNoHayCartasRepetidasEn: (cartasJugadorMano asSet addAll: cartasJugadorPie; yourself).
	
	jugadorMano := cartasJugadorMano .
	jugadorPie := cartasJugadorPie .
	cartasJugadasDelJugadorMano := OrderedCollection new.
	cartasJugadasDelJugadorPie := OrderedCollection new.
	elUltimoGanador := OrderedCollection new.! !

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 21:00:30'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 21:00:30'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 21:00:30'!
PASSED!

!testRun: #JuegoDeTrucoTest #test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp stamp: 'ms 7/5/2021 21:00:30'!
PASSED!

!testRun: #JuegoDeTrucoTest #test05NoPuedeTirarUnaCartaQuePertenezcaAlJugadorPie stamp: 'ms 7/5/2021 21:00:30'!
PASSED!

!testRun: #JuegoDeTrucoTest #test06NoPuedeEmpezarAJugarElJugadorPie stamp: 'ms 7/5/2021 21:00:30'!
PASSED!

!testRun: #JuegoDeTrucoTest #test07GanaLaManoEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:00:30'!
PASSED!

!testRun: #JuegoDeTrucoTest #test08SiGanaLaManoEnElPrimerEnfrentamientoNoDebeEmpezarElPie stamp: 'ms 7/5/2021 21:00:30'!
PASSED!

!testRun: #JuegoDeTrucoTest #testMASADELANTEJugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:00:30'!
PASSED!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 21:01:06' prior: 51216411!
test08SiGanaLaManoEnElPrimerEnfrentamientoNoDebeEmpezarElPie
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6 ).
	ronda ganoEnElEnfrentamiento: 1.
	
	self should: [ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon: 3 ).]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noDebeEmpezarAJugarElJugadorPiePuesPerdioElAnteriorEnfrentamiento equals: anError messageText .
		self assert: (ronda cartasDelJugadorPie) equals: {CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }asOrderedCollection.
			].
	
	
	! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 21:02:15'!
test09NoDebeEmpezarLaManoEnElSegundoEnfrentamientoSiGanaElPieEnElPrimerEnfrentamiento
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6 ).
	ronda ganoEnElEnfrentamiento: 1.
	
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6 ).
	
	self should: [ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon: 3 ).]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noDebeEmpezarAJugarElJugadorPiePuesPerdioElAnteriorEnfrentamiento equals: anError messageText .
		self assert: (ronda cartasDelJugadorPie) equals: {CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }asOrderedCollection.
			].
	
	
	! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 21:02:28' prior: 51216838!
test09NoDebeEmpezarLaManoEnElSegundoEnfrentamientoSiGanaElPieEnElPrimerEnfrentamiento
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 1);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6 ).
	ronda ganoEnElEnfrentamiento: 1.
	
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6 ).
	
	self should: [ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon: 3 ).]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noDebeEmpezarAJugarElJugadorPiePuesPerdioElAnteriorEnfrentamiento equals: anError messageText .
		self assert: (ronda cartasDelJugadorPie) equals: {CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }asOrderedCollection.
			].
	
	
	! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 21:02:36' prior: 51216878!
test09NoDebeEmpezarLaManoEnElSegundoEnfrentamientoSiGanaElPieEnElPrimerEnfrentamiento
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 1);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon: 1).
	ronda ganoEnElEnfrentamiento: 1.
	
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6 ).
	
	self should: [ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon: 3 ).]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noDebeEmpezarAJugarElJugadorPiePuesPerdioElAnteriorEnfrentamiento equals: anError messageText .
		self assert: (ronda cartasDelJugadorPie) equals: {CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }asOrderedCollection.
			].
	
	
	! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 21:03:05' prior: 51216918!
test09NoDebeEmpezarLaManoEnElSegundoEnfrentamientoSiGanaElPieEnElPrimerEnfrentamiento
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 1);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon: 1).
	ronda ganoEnElEnfrentamiento: 1.
		
	self should: [ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 2).]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noDebeEmpezarAJugarElJugadorPiePuesPerdioElAnteriorEnfrentamiento equals: anError messageText .
		self assert: (ronda cartasDelJugadorPie) equals: {CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }asOrderedCollection.
			].
	
	
	! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 21:03:12' prior: 51216958!
test09NoDebeEmpezarLaManoEnElSegundoEnfrentamientoSiGanaElPieEnElPrimerEnfrentamiento
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 1);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon: 1).
	ronda ganoEnElEnfrentamiento: 1.
		
	self should: [ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 2).]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noDebeEmpezarAJugarElJugadorManoPuesPerdioElAnteriorEnfrentamiento equals: anError messageText .
		self assert: (ronda cartasDelJugadorPie) equals: {CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }asOrderedCollection.
			].
	
	
	! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 21:03:46' prior: 51216994!
test09NoDebeEmpezarLaManoEnElSegundoEnfrentamientoSiGanaElPieEnElPrimerEnfrentamiento
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 1);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon: 1).
	ronda ganoEnElEnfrentamiento: 1.
		
	self should: [ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 2).]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noDebeEmpezarAJugarElJugadorManoPuesPerdioElAnteriorEnfrentamiento equals: anError messageText .
		self assert: (ronda cartasDelJugadorMano) equals: {CartaDeTruco bastoCon: 2. CartaDeTruco oroCon: 2. }asOrderedCollection.
			].
	
	
	! !

!testRun: #JuegoDeTrucoTest #test09NoDebeEmpezarLaManoEnElSegundoEnfrentamientoSiGanaElPieEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:03:47'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 21:05:33' prior: 51216380!
juegaJugadorManoYTira: unaCarta 
	
	(jugadorMano includes: unaCarta) ifFalse: [^Error signal: self class noSePuedeTirarUnaCartaQueNoPertenezcaAlJugador].
	
	(jugadorMano size < jugadorPie size) ifTrue: [^Error signal: self class noDebeEmpezarAJugarElJugadorManoPuesPerdioElAnteriorEnfrentamiento].
	
	(jugadorPie size = jugadorMano size) ifTrue:
		 [(elUltimoGanador isNotEqualTo: jugadorMano) ifTrue: [^Error signal: self class noDebeEmpezarAJugarElJugadorManoPuesPerdioElAnteriorEnfrentamiento]].
	cartasJugadasDelJugadorMano add: unaCarta.
	jugadorMano remove: unaCarta ifAbsent: [].
	
	! !

!testRun: #JuegoDeTrucoTest #test09NoDebeEmpezarLaManoEnElSegundoEnfrentamientoSiGanaElPieEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:05:42'!
ERROR!
!Ronda class methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 21:05:45'!
noDebeEmpezarAJugarElJugadorManoPuesPerdioElAnteriorEnfrentamiento
	self shouldBeImplemented.! !
!Ronda class methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 21:05:59' prior: 51217097!
noDebeEmpezarAJugarElJugadorManoPuesPerdioElAnteriorEnfrentamiento
	^'no Debe Empezar A Jugar El Jugador Mano Pues Perdio El Anterior Enfrentamiento'! !

!testRun: #JuegoDeTrucoTest #test09NoDebeEmpezarLaManoEnElSegundoEnfrentamientoSiGanaElPieEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:06:01'!
PASSED!

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 21:06:05'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 21:06:05'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 21:06:05'!
PASSED!

!testRun: #JuegoDeTrucoTest #test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp stamp: 'ms 7/5/2021 21:06:05'!
PASSED!

!testRun: #JuegoDeTrucoTest #test05NoPuedeTirarUnaCartaQuePertenezcaAlJugadorPie stamp: 'ms 7/5/2021 21:06:05'!
PASSED!

!testRun: #JuegoDeTrucoTest #test06NoPuedeEmpezarAJugarElJugadorPie stamp: 'ms 7/5/2021 21:06:05'!
PASSED!

!testRun: #JuegoDeTrucoTest #test07GanaLaManoEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:06:05'!
ERROR!

!testRun: #JuegoDeTrucoTest #test08SiGanaLaManoEnElPrimerEnfrentamientoNoDebeEmpezarElPie stamp: 'ms 7/5/2021 21:06:05'!
ERROR!

!testRun: #JuegoDeTrucoTest #test09NoDebeEmpezarLaManoEnElSegundoEnfrentamientoSiGanaElPieEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:06:05'!
ERROR!

!testRun: #JuegoDeTrucoTest #testMASADELANTEJugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:06:05'!
PASSED!

!testRun: #JuegoDeTrucoTest #test07GanaLaManoEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:06:09'!
ERROR!
!Ronda methodsFor: 'intancializacion' stamp: 'ms 7/5/2021 21:07:09' prior: 51216750!
iniciarRondaConUn: cartasJugadorMano yUn: cartasJugadorPie
 
	self validarCartasDelJugador: cartasJugadorMano .
	self validarCartasDelJugador: cartasJugadorPie .
	
	self validarQueNoHayCartasRepetidasEn: (cartasJugadorMano asSet addAll: cartasJugadorPie; yourself).
	
	jugadorMano := cartasJugadorMano .
	jugadorPie := cartasJugadorPie .
	cartasJugadasDelJugadorMano := OrderedCollection new.
	cartasJugadasDelJugadorPie := OrderedCollection new.
	elUltimoGanador := jugadorMano.! !

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'ms 7/5/2021 21:07:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'ms 7/5/2021 21:07:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'ms 7/5/2021 21:07:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'ms 7/5/2021 21:07:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'ms 7/5/2021 21:07:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'ms 7/5/2021 21:07:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'ms 7/5/2021 21:07:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'ms 7/5/2021 21:07:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'ms 7/5/2021 21:07:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'ms 7/5/2021 21:07:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'ms 7/5/2021 21:07:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'ms 7/5/2021 21:07:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'ms 7/5/2021 21:07:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'ms 7/5/2021 21:07:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'ms 7/5/2021 21:07:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'ms 7/5/2021 21:07:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'ms 7/5/2021 21:07:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'ms 7/5/2021 21:07:12'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'ms 7/5/2021 21:07:12'!
PASSED!

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 21:07:12'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 21:07:12'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 21:07:12'!
PASSED!

!testRun: #JuegoDeTrucoTest #test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp stamp: 'ms 7/5/2021 21:07:12'!
PASSED!

!testRun: #JuegoDeTrucoTest #test05NoPuedeTirarUnaCartaQuePertenezcaAlJugadorPie stamp: 'ms 7/5/2021 21:07:12'!
PASSED!

!testRun: #JuegoDeTrucoTest #test06NoPuedeEmpezarAJugarElJugadorPie stamp: 'ms 7/5/2021 21:07:12'!
PASSED!

!testRun: #JuegoDeTrucoTest #test07GanaLaManoEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:07:12'!
PASSED!

!testRun: #JuegoDeTrucoTest #test08SiGanaLaManoEnElPrimerEnfrentamientoNoDebeEmpezarElPie stamp: 'ms 7/5/2021 21:07:12'!
PASSED!

!testRun: #JuegoDeTrucoTest #test09NoDebeEmpezarLaManoEnElSegundoEnfrentamientoSiGanaElPieEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:07:12'!
PASSED!

!testRun: #JuegoDeTrucoTest #testMASADELANTEJugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:07:12'!
PASSED!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 21:07:58'!
test09GanaLaManoEnElSegundoEnfrentamientoYNoDebeEpezarElPieEnElTercero
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 1);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon: 1).
	ronda ganoEnElEnfrentamiento: 1.
		
	self should: [ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 2).]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noDebeEmpezarAJugarElJugadorManoPuesPerdioElAnteriorEnfrentamiento equals: anError messageText .
		self assert: (ronda cartasDelJugadorMano) equals: {CartaDeTruco bastoCon: 2. CartaDeTruco oroCon: 2. }asOrderedCollection.
			].
	
	
	! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 21:08:17' prior: 51217280!
test09GanaLaManoEnElSegundoEnfrentamientoYNoDebeEpezarElPieEnElTercero
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6).
	ronda ganoEnElEnfrentamiento: 1.
		
	self should: [ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 2).]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noDebeEmpezarAJugarElJugadorManoPuesPerdioElAnteriorEnfrentamiento equals: anError messageText .
		self assert: (ronda cartasDelJugadorMano) equals: {CartaDeTruco bastoCon: 2. CartaDeTruco oroCon: 2. }asOrderedCollection.
			].
	
	
	! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 21:09:37' prior: 51217316!
test09GanaLaManoEnElSegundoEnfrentamientoYNoDebeEpezarElPieEnElTercero
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco espadaCon: 1); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6).
	ronda ganoEnElEnfrentamiento: 1.
	
	ronda juegaJugadorManoYTira: (CartaDeTruco espadaCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco oroCon: 5).
	ronda ganoEnElEnfrentamiento: 2.
		
	self should: [ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon: 3).]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noDebeEmpezarAJugarElJugadorManoPuesPerdioElAnteriorEnfrentamiento equals: anError messageText .
		self assert: (ronda cartasDelJugadorMano) equals: {CartaDeTruco bastoCon: 2. CartaDeTruco oroCon: 2. }asOrderedCollection.
			].
	
	
	! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 21:09:52' prior: 51217030!
test09NoDebeEmpezarLaManoEnElSegundoEnfrentamientoSiGanaElPieEnElPrimerEnfrentamiento
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 1);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon: 1).
	ronda ganoEnElEnfrentamiento: 1.
		
	self should: [ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 2).]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noDebeEmpezarAJugarElJugadorPiePuesPerdioElAnteriorEnfrentamiento equals: anError messageText .
		self assert: (ronda cartasDelJugadorMano) equals: {CartaDeTruco bastoCon: 2. CartaDeTruco oroCon: 2. }asOrderedCollection.
			].
	
	
	! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 21:10:08' prior: 51217392!
test09NoDebeEmpezarLaManoEnElSegundoEnfrentamientoSiGanaElPieEnElPrimerEnfrentamiento
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 1);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon: 1).
	ronda ganoEnElEnfrentamiento: 1.
		
	self should: [ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 2).]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noDebeEmpezarAJugarElJugadorPiePuesPerdioElAnteriorEnfrentamiento equals: anError messageText .
		self assert: (ronda cartasDelJugadorMano) equals: {CartaDeTruco bastoCon: 2. CartaDeTruco oroCon: 2. }asOrderedCollection.
			].
	
	
	! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 21:10:14'!
test10NoDebeEmpezarLaManoEnElSegundoEnfrentamientoSiGanaElPieEnElPrimerEnfrentamiento
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 1);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon: 1).
	ronda ganoEnElEnfrentamiento: 1.
		
	self should: [ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 2).]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noDebeEmpezarAJugarElJugadorPiePuesPerdioElAnteriorEnfrentamiento equals: anError messageText .
		self assert: (ronda cartasDelJugadorMano) equals: {CartaDeTruco bastoCon: 2. CartaDeTruco oroCon: 2. }asOrderedCollection.
			].
	
	
	! !

!methodRemoval: JuegoDeTrucoTest #test09NoDebeEmpezarLaManoEnElSegundoEnfrentamientoSiGanaElPieEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:10:15'!
test09NoDebeEmpezarLaManoEnElSegundoEnfrentamientoSiGanaElPieEnElPrimerEnfrentamiento
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 1);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon: 1).
	ronda ganoEnElEnfrentamiento: 1.
		
	self should: [ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 2).]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noDebeEmpezarAJugarElJugadorPiePuesPerdioElAnteriorEnfrentamiento equals: anError messageText .
		self assert: (ronda cartasDelJugadorMano) equals: {CartaDeTruco bastoCon: 2. CartaDeTruco oroCon: 2. }asOrderedCollection.
			].
	
	
	!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 21:11:15'!
test09NoDebeEmpezarLaManoEnElSegundoEnfrentamientoSiGanaElPieEnElPrimerEnfrentamiento
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 1);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon: 1).
	ronda ganoEnElEnfrentamiento: 1.
		
	self should: [ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 2).]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noDebeEmpezarAJugarElJugadorPiePuesPerdioElAnteriorEnfrentamiento equals: anError messageText .
		self assert: (ronda cartasDelJugadorMano) equals: {CartaDeTruco bastoCon: 2. CartaDeTruco oroCon: 2. }asOrderedCollection.
			].
	
	
	! !

!methodRemoval: JuegoDeTrucoTest #test10NoDebeEmpezarLaManoEnElSegundoEnfrentamientoSiGanaElPieEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:11:15'!
test10NoDebeEmpezarLaManoEnElSegundoEnfrentamientoSiGanaElPieEnElPrimerEnfrentamiento
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 1);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon: 1).
	ronda ganoEnElEnfrentamiento: 1.
		
	self should: [ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 2).]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noDebeEmpezarAJugarElJugadorPiePuesPerdioElAnteriorEnfrentamiento equals: anError messageText .
		self assert: (ronda cartasDelJugadorMano) equals: {CartaDeTruco bastoCon: 2. CartaDeTruco oroCon: 2. }asOrderedCollection.
			].
	
	
	!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 21:11:20'!
test10GanaLaManoEnElSegundoEnfrentamientoYNoDebeEpezarElPieEnElTercero
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco espadaCon: 1); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6).
	ronda ganoEnElEnfrentamiento: 1.
	
	ronda juegaJugadorManoYTira: (CartaDeTruco espadaCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco oroCon: 5).
	ronda ganoEnElEnfrentamiento: 2.
		
	self should: [ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon: 3).]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noDebeEmpezarAJugarElJugadorManoPuesPerdioElAnteriorEnfrentamiento equals: anError messageText .
		self assert: (ronda cartasDelJugadorMano) equals: {CartaDeTruco bastoCon: 2. CartaDeTruco oroCon: 2. }asOrderedCollection.
			].
	
	
	! !

!methodRemoval: JuegoDeTrucoTest #test09GanaLaManoEnElSegundoEnfrentamientoYNoDebeEpezarElPieEnElTercero stamp: 'ms 7/5/2021 21:11:20'!
test09GanaLaManoEnElSegundoEnfrentamientoYNoDebeEpezarElPieEnElTercero
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco espadaCon: 1); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6).
	ronda ganoEnElEnfrentamiento: 1.
	
	ronda juegaJugadorManoYTira: (CartaDeTruco espadaCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco oroCon: 5).
	ronda ganoEnElEnfrentamiento: 2.
		
	self should: [ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon: 3).]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noDebeEmpezarAJugarElJugadorManoPuesPerdioElAnteriorEnfrentamiento equals: anError messageText .
		self assert: (ronda cartasDelJugadorMano) equals: {CartaDeTruco bastoCon: 2. CartaDeTruco oroCon: 2. }asOrderedCollection.
			].
	
	
	!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 21:11:36' prior: 51217536!
test09NoDebeEmpezarLaManoEnElSegundoEnfrentamientoSiGanaElPieEnElPrimerEnfrentamiento
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 1);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon: 1).
	ronda ganoEnElEnfrentamiento: 1.
		
	self should: [ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 2).]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noDebeEmpezarAJugarElJugadorPiePuesPerdioElAnteriorEnfrentamiento equals: anError messageText .
		self assert: (ronda cartasDelJugadorMano) equals: {CartaDeTruco bastoCon: 2. CartaDeTruco oroCon: 2. }asOrderedCollection.
			].
	
	
	! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 21:12:06' prior: 51217609!
test10GanaLaManoEnElSegundoEnfrentamientoYNoDebeEpezarElPieEnElTercero
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco espadaCon: 1); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6).
	ronda ganoEnElEnfrentamiento: 1.
	
	ronda juegaJugadorManoYTira: (CartaDeTruco espadaCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco oroCon: 5).
	ronda ganoEnElEnfrentamiento: 2.
		
	self should: [ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon: 3).]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noDebeEmpezarAJugarElJugadorManoPuesPerdioElAnteriorEnfrentamiento equals: anError messageText .
		self assert: (ronda cartasDelJugadorPie) equals: {CartaDeTruco bastoCon: 5. CartaDeTruco espadaCon: 3 }asOrderedCollection.
			].
	
	
	! !

!testRun: #JuegoDeTrucoTest #test10GanaLaManoEnElSegundoEnfrentamientoYNoDebeEpezarElPieEnElTercero stamp: 'ms 7/5/2021 21:12:08'!
FAILURE!

!testRun: #JuegoDeTrucoTest #test10GanaLaManoEnElSegundoEnfrentamientoYNoDebeEpezarElPieEnElTercero stamp: 'ms 7/5/2021 21:12:16'!
FAILURE!

!testRun: #JuegoDeTrucoTest #test10GanaLaManoEnElSegundoEnfrentamientoYNoDebeEpezarElPieEnElTercero stamp: 'ms 7/5/2021 21:12:16'!
FAILURE!

!testRun: #JuegoDeTrucoTest #test10GanaLaManoEnElSegundoEnfrentamientoYNoDebeEpezarElPieEnElTercero stamp: 'ms 7/5/2021 21:13:30'!
FAILURE!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 21:13:44' prior: 51217726!
test10GanaLaManoEnElSegundoEnfrentamientoYNoDebeEpezarElPieEnElTercero
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco espadaCon: 1); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6).
	ronda ganoEnElEnfrentamiento: 1.
	
	ronda juegaJugadorManoYTira: (CartaDeTruco espadaCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco oroCon: 5).
	ronda ganoEnElEnfrentamiento: 2.
		
	self should: [ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon: 3).]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noDebeEmpezarAJugarElJugadorPiePuesPerdioElAnteriorEnfrentamiento equals: anError messageText .
		self assert: (ronda cartasDelJugadorPie) equals: {CartaDeTruco bastoCon: 5. CartaDeTruco espadaCon: 3 }asOrderedCollection.
			].
	
	
	! !

!testRun: #JuegoDeTrucoTest #test10GanaLaManoEnElSegundoEnfrentamientoYNoDebeEpezarElPieEnElTercero stamp: 'ms 7/5/2021 21:13:45'!
FAILURE!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 21:14:07' prior: 51217784!
test10GanaLaManoEnElSegundoEnfrentamientoYNoDebeEpezarElPieEnElTercero
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco espadaCon: 1); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6).
	ronda ganoEnElEnfrentamiento: 1.
	
	ronda juegaJugadorManoYTira: (CartaDeTruco espadaCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco oroCon: 5).
	ronda ganoEnElEnfrentamiento: 2.
		
	self should: [ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon: 3).]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noDebeEmpezarAJugarElJugadorPiePuesPerdioElAnteriorEnfrentamiento equals: anError messageText .
		self assert: (ronda cartasDelJugadorPie) equals: {CartaDeTruco espadaCon: 3 }asOrderedCollection.
			].
	
	
	! !

!testRun: #JuegoDeTrucoTest #test10GanaLaManoEnElSegundoEnfrentamientoYNoDebeEpezarElPieEnElTercero stamp: 'ms 7/5/2021 21:14:08'!
PASSED!

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 21:14:08'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 21:14:08'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 21:14:08'!
PASSED!

!testRun: #JuegoDeTrucoTest #test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp stamp: 'ms 7/5/2021 21:14:08'!
PASSED!

!testRun: #JuegoDeTrucoTest #test05NoPuedeTirarUnaCartaQuePertenezcaAlJugadorPie stamp: 'ms 7/5/2021 21:14:08'!
PASSED!

!testRun: #JuegoDeTrucoTest #test06NoPuedeEmpezarAJugarElJugadorPie stamp: 'ms 7/5/2021 21:14:08'!
PASSED!

!testRun: #JuegoDeTrucoTest #test07GanaLaManoEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:14:08'!
PASSED!

!testRun: #JuegoDeTrucoTest #test08SiGanaLaManoEnElPrimerEnfrentamientoNoDebeEmpezarElPie stamp: 'ms 7/5/2021 21:14:08'!
PASSED!

!testRun: #JuegoDeTrucoTest #test09NoDebeEmpezarLaManoEnElSegundoEnfrentamientoSiGanaElPieEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:14:08'!
FAILURE!

!testRun: #JuegoDeTrucoTest #test10GanaLaManoEnElSegundoEnfrentamientoYNoDebeEpezarElPieEnElTercero stamp: 'ms 7/5/2021 21:14:08'!
PASSED!

!testRun: #JuegoDeTrucoTest #testMASADELANTEJugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:14:08'!
PASSED!

!testRun: #JuegoDeTrucoTest #test09NoDebeEmpezarLaManoEnElSegundoEnfrentamientoSiGanaElPieEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:14:08'!
FAILURE!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 21:14:23' prior: 51217690!
test09NoDebeEmpezarLaManoEnElSegundoEnfrentamientoSiGanaElPieEnElPrimerEnfrentamiento
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco bastoCon: 2);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 1);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon: 1).
	ronda ganoEnElEnfrentamiento: 1.
		
	self should: [ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 2).]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noDebeEmpezarAJugarElJugadorManoPuesPerdioElAnteriorEnfrentamiento equals: anError messageText .
		self assert: (ronda cartasDelJugadorMano) equals: {CartaDeTruco bastoCon: 2. CartaDeTruco oroCon: 2. }asOrderedCollection.
			].
	
	
	! !

!testRun: #JuegoDeTrucoTest #test09NoDebeEmpezarLaManoEnElSegundoEnfrentamientoSiGanaElPieEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:14:24'!
PASSED!

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 21:14:26'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 21:14:26'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 21:14:26'!
PASSED!

!testRun: #JuegoDeTrucoTest #test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp stamp: 'ms 7/5/2021 21:14:26'!
PASSED!

!testRun: #JuegoDeTrucoTest #test05NoPuedeTirarUnaCartaQuePertenezcaAlJugadorPie stamp: 'ms 7/5/2021 21:14:26'!
PASSED!

!testRun: #JuegoDeTrucoTest #test06NoPuedeEmpezarAJugarElJugadorPie stamp: 'ms 7/5/2021 21:14:26'!
PASSED!

!testRun: #JuegoDeTrucoTest #test07GanaLaManoEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:14:26'!
PASSED!

!testRun: #JuegoDeTrucoTest #test08SiGanaLaManoEnElPrimerEnfrentamientoNoDebeEmpezarElPie stamp: 'ms 7/5/2021 21:14:26'!
PASSED!

!testRun: #JuegoDeTrucoTest #test09NoDebeEmpezarLaManoEnElSegundoEnfrentamientoSiGanaElPieEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:14:26'!
PASSED!

!testRun: #JuegoDeTrucoTest #test10GanaLaManoEnElSegundoEnfrentamientoYNoDebeEpezarElPieEnElTercero stamp: 'ms 7/5/2021 21:14:26'!
PASSED!

!testRun: #JuegoDeTrucoTest #testMASADELANTEJugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:14:26'!
PASSED!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 21:15:20'!
test11GanaElPieEnElSegundoEnfrentamientoYNoDebeEpezarLaManoEnElTercero
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco espadaCon: 6);
		add: (CartaDeTruco espadaCon: 1); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6).
	ronda ganoEnElEnfrentamiento: 1.
	
	ronda juegaJugadorManoYTira: (CartaDeTruco espadaCon: 6).
	ronda juegaJugadorPieYTira: (CartaDeTruco oroCon: 5).
	ronda ganoEnElEnfrentamiento: 2.
		
	self should: [ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon: 3).]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noDebeEmpezarAJugarElJugadorPiePuesPerdioElAnteriorEnfrentamiento equals: anError messageText .
		self assert: (ronda cartasDelJugadorPie) equals: {CartaDeTruco espadaCon: 3 }asOrderedCollection.
			].
	
	
	! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 21:15:51' prior: 51218005!
test11GanaElPieEnElSegundoEnfrentamientoYNoDebeEpezarLaManoEnElTercero
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco espadaCon: 6);
		add: (CartaDeTruco espadaCon: 1); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6).
	ronda ganoEnElEnfrentamiento: 1.
	
	ronda juegaJugadorManoYTira: (CartaDeTruco espadaCon: 6).
	ronda juegaJugadorPieYTira: (CartaDeTruco oroCon: 5).
	ronda ganoEnElEnfrentamiento: 2.
		
	self should: [ronda juegaJugadorManoYTira: (CartaDeTruco espadaCon: 1).]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noDebeEmpezarAJugarElJugadorManoPuesPerdioElAnteriorEnfrentamiento equals: anError messageText .
		self assert: (ronda cartasDelJugadorPie) equals: {CartaDeTruco espadaCon: 1 }asOrderedCollection.
			].
	
	
	! !

!testRun: #JuegoDeTrucoTest #test11GanaElPieEnElSegundoEnfrentamientoYNoDebeEpezarLaManoEnElTercero stamp: 'ms 7/5/2021 21:15:53'!
FAILURE!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 21:17:01' prior: 51218045!
test11GanaElPieEnElSegundoEnfrentamientoYNoDebeEpezarLaManoEnElTercero
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco espadaCon: 6);
		add: (CartaDeTruco espadaCon: 1); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 1); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6).
	ronda ganoEnElEnfrentamiento: 1.
	
	ronda juegaJugadorManoYTira: (CartaDeTruco espadaCon: 6).
	ronda juegaJugadorPieYTira: (CartaDeTruco oroCon:1).
	ronda ganoEnElEnfrentamiento: 2.
		
	self should: [ronda juegaJugadorManoYTira: (CartaDeTruco espadaCon: 1).]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noDebeEmpezarAJugarElJugadorManoPuesPerdioElAnteriorEnfrentamiento equals: anError messageText .
		self assert: (ronda cartasDelJugadorPie) equals: {CartaDeTruco espadaCon: 1 }asOrderedCollection.
			].
	
	
	! !

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 21:17:02'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 21:17:02'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 21:17:02'!
PASSED!

!testRun: #JuegoDeTrucoTest #test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp stamp: 'ms 7/5/2021 21:17:02'!
PASSED!

!testRun: #JuegoDeTrucoTest #test05NoPuedeTirarUnaCartaQuePertenezcaAlJugadorPie stamp: 'ms 7/5/2021 21:17:02'!
PASSED!

!testRun: #JuegoDeTrucoTest #test06NoPuedeEmpezarAJugarElJugadorPie stamp: 'ms 7/5/2021 21:17:02'!
PASSED!

!testRun: #JuegoDeTrucoTest #test07GanaLaManoEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:17:02'!
PASSED!

!testRun: #JuegoDeTrucoTest #test08SiGanaLaManoEnElPrimerEnfrentamientoNoDebeEmpezarElPie stamp: 'ms 7/5/2021 21:17:02'!
PASSED!

!testRun: #JuegoDeTrucoTest #test09NoDebeEmpezarLaManoEnElSegundoEnfrentamientoSiGanaElPieEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:17:02'!
PASSED!

!testRun: #JuegoDeTrucoTest #test10GanaLaManoEnElSegundoEnfrentamientoYNoDebeEpezarElPieEnElTercero stamp: 'ms 7/5/2021 21:17:02'!
PASSED!

!testRun: #JuegoDeTrucoTest #test11GanaElPieEnElSegundoEnfrentamientoYNoDebeEpezarLaManoEnElTercero stamp: 'ms 7/5/2021 21:17:02'!
FAILURE!

!testRun: #JuegoDeTrucoTest #testMASADELANTEJugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:17:02'!
PASSED!

!testRun: #JuegoDeTrucoTest #test11GanaElPieEnElSegundoEnfrentamientoYNoDebeEpezarLaManoEnElTercero stamp: 'ms 7/5/2021 21:17:02'!
FAILURE!

!testRun: #JuegoDeTrucoTest #test11GanaElPieEnElSegundoEnfrentamientoYNoDebeEpezarLaManoEnElTercero stamp: 'ms 7/5/2021 21:17:47'!
FAILURE!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 21:17:59' prior: 51218089!
test11GanaElPieEnElSegundoEnfrentamientoYNoDebeEpezarLaManoEnElTercero
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco espadaCon: 6);
		add: (CartaDeTruco espadaCon: 1); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 1); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6).
	ronda ganoEnElEnfrentamiento: 1.
	
	ronda juegaJugadorManoYTira: (CartaDeTruco espadaCon: 6).
	ronda juegaJugadorPieYTira: (CartaDeTruco oroCon:1).
	ronda ganoEnElEnfrentamiento: 2.
		
	self should: [ronda juegaJugadorManoYTira: (CartaDeTruco espadaCon: 1).]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noDebeEmpezarAJugarElJugadorManoPuesPerdioElAnteriorEnfrentamiento equals: anError messageText .
		self assert: (ronda cartasDelJugadorMano) equals: {CartaDeTruco espadaCon: 1 }asOrderedCollection.
			].
	
	
	! !

!testRun: #JuegoDeTrucoTest #test11GanaElPieEnElSegundoEnfrentamientoYNoDebeEpezarLaManoEnElTercero stamp: 'ms 7/5/2021 21:18:00'!
PASSED!

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 21:18:00'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 21:18:00'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 21:18:00'!
PASSED!

!testRun: #JuegoDeTrucoTest #test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp stamp: 'ms 7/5/2021 21:18:00'!
PASSED!

!testRun: #JuegoDeTrucoTest #test05NoPuedeTirarUnaCartaQuePertenezcaAlJugadorPie stamp: 'ms 7/5/2021 21:18:00'!
PASSED!

!testRun: #JuegoDeTrucoTest #test06NoPuedeEmpezarAJugarElJugadorPie stamp: 'ms 7/5/2021 21:18:00'!
PASSED!

!testRun: #JuegoDeTrucoTest #test07GanaLaManoEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:18:00'!
PASSED!

!testRun: #JuegoDeTrucoTest #test08SiGanaLaManoEnElPrimerEnfrentamientoNoDebeEmpezarElPie stamp: 'ms 7/5/2021 21:18:00'!
PASSED!

!testRun: #JuegoDeTrucoTest #test09NoDebeEmpezarLaManoEnElSegundoEnfrentamientoSiGanaElPieEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:18:00'!
PASSED!

!testRun: #JuegoDeTrucoTest #test10GanaLaManoEnElSegundoEnfrentamientoYNoDebeEpezarElPieEnElTercero stamp: 'ms 7/5/2021 21:18:00'!
PASSED!

!testRun: #JuegoDeTrucoTest #test11GanaElPieEnElSegundoEnfrentamientoYNoDebeEpezarLaManoEnElTercero stamp: 'ms 7/5/2021 21:18:00'!
PASSED!

!testRun: #JuegoDeTrucoTest #testMASADELANTEJugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:18:00'!
PASSED!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 21:18:44'!
test12GanaElPieLaRonda
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco espadaCon: 6);
		add: (CartaDeTruco espadaCon: 1); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 1); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6).
	ronda ganoEnElEnfrentamiento: 1.
	
	ronda juegaJugadorManoYTira: (CartaDeTruco espadaCon: 6).
	ronda juegaJugadorPieYTira: (CartaDeTruco oroCon:1).
	ronda ganoEnElEnfrentamiento: 2.
	
	ronda juegaJugadorManoYTira: (CartaDeTruco espadaCon: 6).
	ronda juegaJugadorPieYTira: (CartaDeTruco oroCon:1).
	ronda ganoEnElEnfrentamiento: 2.
		
	self should: [ronda juegaJugadorManoYTira: (CartaDeTruco espadaCon: 1).]
	raise: Error - MessageNotUnderstood 
	withExceptionDo:[:anError |
		self assert: Ronda noDebeEmpezarAJugarElJugadorManoPuesPerdioElAnteriorEnfrentamiento equals: anError messageText .
		self assert: (ronda cartasDelJugadorMano) equals: {CartaDeTruco espadaCon: 1 }asOrderedCollection.
			].
	
	
	! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 21:20:29' prior: 51218276!
test12GanaElPieLaRonda
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco espadaCon: 6);
		add: (CartaDeTruco espadaCon: 1); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 1); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6).
	ronda ganoEnElEnfrentamiento: 1.
	
	ronda juegaJugadorManoYTira: (CartaDeTruco espadaCon: 6).
	ronda juegaJugadorPieYTira: (CartaDeTruco oroCon:1).
	ronda ganoEnElEnfrentamiento: 2.
	
	ronda juegaJugadorManoYTira: (CartaDeTruco espadaCon: 6).
	ronda juegaJugadorPieYTira: (CartaDeTruco oroCon:1).
	ronda ganoEnElEnfrentamiento: 2.
		
	self assert: (ronda ganadorDeLaRonda) equals: jugadorMano .
	self assert: (ronda cartasDelJugadorMano) isEmpty .
	self assert: (ronda cartasDelJugadorPie) isEmpty 
	
	
	! !
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 21:21:34' prior: 51218319!
test12GanaElPieLaRonda
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco espadaCon: 6);
		add: (CartaDeTruco espadaCon: 1); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 1); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6).
	ronda ganoEnElEnfrentamiento: 1.
	
	ronda juegaJugadorManoYTira: (CartaDeTruco espadaCon: 6).
	ronda juegaJugadorPieYTira: (CartaDeTruco oroCon:1).
	ronda ganoEnElEnfrentamiento: 2.
	
	ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon: 3).
	ronda juegaJugadorManoYTira: (CartaDeTruco espadaCon: 1).
	ronda ganoEnElEnfrentamiento: 3.
		
	self assert: (ronda ganadorDeLaRonda) equals: jugadorMano .
	self assert: (ronda cartasDelJugadorMano) isEmpty .
	self assert: (ronda cartasDelJugadorPie) isEmpty 
	
	
	! !

!testRun: #JuegoDeTrucoTest #test12GanaElPieLaRonda stamp: 'ms 7/5/2021 21:21:35'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 21:21:44'!
ganadorDeLaRonda
	self shouldBeImplemented.! !

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'ms 7/5/2021 21:24:18'!
Object subclass: #Ronda
	instanceVariableNames: 'jugadorMano jugadorPie cartasJugadasDelJugadorMano cartasJugadasDelJugadorPie siguienteATirarCartas siguienteAEmpezarEnfrentamiento elUltimoGanador enfrentamientos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 21:24:17' prior: 51216579!
ganoEnElEnfrentamiento: numeroDeEnfrentamiento
|cartaJugadorMano cartaJugadorPie|

	cartaJugadorMano := cartasJugadasDelJugadorMano at: numeroDeEnfrentamiento.
	cartaJugadorPie := cartasJugadasDelJugadorPie at: numeroDeEnfrentamiento.
	
	(cartaJugadorMano mataA: cartaJugadorPie) 
	ifTrue: [elUltimoGanador := jugadorMano.]
	ifFalse: [elUltimoGanador := jugadorPie ].
	enfrentamientos add: elUltimoGanador.
	^elUltimoGanador! !
!Ronda methodsFor: 'intancializacion' stamp: 'ms 7/5/2021 21:26:08' prior: 51217158!
iniciarRondaConUn: cartasJugadorMano yUn: cartasJugadorPie
 
	self validarCartasDelJugador: cartasJugadorMano .
	self validarCartasDelJugador: cartasJugadorPie .
	
	self validarQueNoHayCartasRepetidasEn: (cartasJugadorMano asSet addAll: cartasJugadorPie; yourself).
	
	jugadorMano := cartasJugadorMano .
	jugadorPie := cartasJugadorPie .
	cartasJugadasDelJugadorMano := OrderedCollection new.
	cartasJugadasDelJugadorPie := OrderedCollection new.
	elUltimoGanador := jugadorMano.
	enfrentamientos := Bag new.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 21:26:31' prior: 51218394!
ganadorDeLaRonda

	^enfrentamientos ! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 21:26:57' prior: 51218447!
ganadorDeLaRonda

	^enfrentamientos occurrencesOf: jugadorMano ! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 21:27:40' prior: 51218451!
ganadorDeLaRonda

	(enfrentamientos occurrencesOf: jugadorMano > (enfrentamientos occurrencesOf: jugadorPie))
	ifTrue: [^jugadorMano ]
	ifFalse:[^jugadorPie ]! !

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 21:27:43'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 21:27:43'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 21:27:43'!
PASSED!

!testRun: #JuegoDeTrucoTest #test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp stamp: 'ms 7/5/2021 21:27:43'!
PASSED!

!testRun: #JuegoDeTrucoTest #test05NoPuedeTirarUnaCartaQuePertenezcaAlJugadorPie stamp: 'ms 7/5/2021 21:27:43'!
PASSED!

!testRun: #JuegoDeTrucoTest #test06NoPuedeEmpezarAJugarElJugadorPie stamp: 'ms 7/5/2021 21:27:43'!
PASSED!

!testRun: #JuegoDeTrucoTest #test07GanaLaManoEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:27:43'!
PASSED!

!testRun: #JuegoDeTrucoTest #test08SiGanaLaManoEnElPrimerEnfrentamientoNoDebeEmpezarElPie stamp: 'ms 7/5/2021 21:27:43'!
PASSED!

!testRun: #JuegoDeTrucoTest #test09NoDebeEmpezarLaManoEnElSegundoEnfrentamientoSiGanaElPieEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:27:43'!
PASSED!

!testRun: #JuegoDeTrucoTest #test10GanaLaManoEnElSegundoEnfrentamientoYNoDebeEpezarElPieEnElTercero stamp: 'ms 7/5/2021 21:27:43'!
PASSED!

!testRun: #JuegoDeTrucoTest #test11GanaElPieEnElSegundoEnfrentamientoYNoDebeEpezarLaManoEnElTercero stamp: 'ms 7/5/2021 21:27:43'!
PASSED!

!testRun: #JuegoDeTrucoTest #test12GanaElPieLaRonda stamp: 'ms 7/5/2021 21:27:43'!
ERROR!

!testRun: #JuegoDeTrucoTest #testMASADELANTEJugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:27:43'!
PASSED!

!testRun: #JuegoDeTrucoTest #test12GanaElPieLaRonda stamp: 'ms 7/5/2021 21:27:43'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 21:28:01' prior: 51218456!
ganadorDeLaRonda

	((enfrentamientos occurrencesOf: jugadorMano) > (enfrentamientos occurrencesOf: jugadorPie))
	ifTrue: [^jugadorMano ]
	ifFalse:[^jugadorPie ]! !

(enfrentamientos occurrencesOf: jugadorMano)!

(enfrentamientos occurrencesOf: jugadorPie)!

!testRun: #JuegoDeTrucoTest #test12GanaElPieLaRonda stamp: 'ms 7/5/2021 21:28:18'!
PASSED!

!testRun: #JuegoDeTrucoTest #test12GanaElPieLaRonda stamp: 'ms 7/5/2021 21:28:26'!
PASSED!

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 21:28:28'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 21:28:28'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 21:28:28'!
PASSED!

!testRun: #JuegoDeTrucoTest #test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp stamp: 'ms 7/5/2021 21:28:28'!
PASSED!

!testRun: #JuegoDeTrucoTest #test05NoPuedeTirarUnaCartaQuePertenezcaAlJugadorPie stamp: 'ms 7/5/2021 21:28:28'!
PASSED!

!testRun: #JuegoDeTrucoTest #test06NoPuedeEmpezarAJugarElJugadorPie stamp: 'ms 7/5/2021 21:28:28'!
PASSED!

!testRun: #JuegoDeTrucoTest #test07GanaLaManoEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:28:28'!
PASSED!

!testRun: #JuegoDeTrucoTest #test08SiGanaLaManoEnElPrimerEnfrentamientoNoDebeEmpezarElPie stamp: 'ms 7/5/2021 21:28:28'!
PASSED!

!testRun: #JuegoDeTrucoTest #test09NoDebeEmpezarLaManoEnElSegundoEnfrentamientoSiGanaElPieEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:28:28'!
PASSED!

!testRun: #JuegoDeTrucoTest #test10GanaLaManoEnElSegundoEnfrentamientoYNoDebeEpezarElPieEnElTercero stamp: 'ms 7/5/2021 21:28:28'!
PASSED!

!testRun: #JuegoDeTrucoTest #test11GanaElPieEnElSegundoEnfrentamientoYNoDebeEpezarLaManoEnElTercero stamp: 'ms 7/5/2021 21:28:28'!
PASSED!

!testRun: #JuegoDeTrucoTest #test12GanaElPieLaRonda stamp: 'ms 7/5/2021 21:28:28'!
PASSED!

!testRun: #JuegoDeTrucoTest #testMASADELANTEJugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:28:28'!
PASSED!
!JuegoDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 21:28:46'!
test12GanaLaManoLaRonda
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco espadaCon: 6);
		add: (CartaDeTruco espadaCon: 1); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 1); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6).
	ronda ganoEnElEnfrentamiento: 1.
	
	ronda juegaJugadorManoYTira: (CartaDeTruco espadaCon: 6).
	ronda juegaJugadorPieYTira: (CartaDeTruco oroCon:1).
	ronda ganoEnElEnfrentamiento: 2.
	
	ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon: 3).
	ronda juegaJugadorManoYTira: (CartaDeTruco espadaCon: 1).
	ronda ganoEnElEnfrentamiento: 3.
		
	self assert: (ronda ganadorDeLaRonda) equals: jugadorMano .
	self assert: (ronda cartasDelJugadorMano) isEmpty .
	self assert: (ronda cartasDelJugadorPie) isEmpty 
	
	
	! !

!methodRemoval: JuegoDeTrucoTest #test12GanaElPieLaRonda stamp: 'ms 7/5/2021 21:28:46'!
test12GanaElPieLaRonda
	
	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco espadaCon: 6);
		add: (CartaDeTruco espadaCon: 1); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 1); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6).
	ronda ganoEnElEnfrentamiento: 1.
	
	ronda juegaJugadorManoYTira: (CartaDeTruco espadaCon: 6).
	ronda juegaJugadorPieYTira: (CartaDeTruco oroCon:1).
	ronda ganoEnElEnfrentamiento: 2.
	
	ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon: 3).
	ronda juegaJugadorManoYTira: (CartaDeTruco espadaCon: 1).
	ronda ganoEnElEnfrentamiento: 3.
		
	self assert: (ronda ganadorDeLaRonda) equals: jugadorMano .
	self assert: (ronda cartasDelJugadorMano) isEmpty .
	self assert: (ronda cartasDelJugadorPie) isEmpty 
	
	
	!

!methodRemoval: JuegoDeTrucoTest #testMASADELANTEJugadorManoGanaElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:29:07'!
testMASADELANTEJugadorManoGanaElPrimerEnfrentamiento
	
	"|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco espadaCon: 1);
		add: (CartaDeTruco oroCon: 2); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 5); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	
	ronda juegaJugadorMano tira: (CartaDeTruco bastoCon: 1 ) enElEnfrentamiento: 1.
	ronda juegaJugadorPie tira: (CartaDeTruco bastoCon: 6 ) enElEnfrentamiento: 1.
	
	self assert: (ronda ganoEnElEnfrentamiento: 1) equals: jugadorMano .
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco espadaCon: 1. CartaDeTruco oroCon: 2}.
	self assert: (ronda cartasDel: jugadorMano) equals: {CartaDeTruco espadaCon: 3. CartaDeTruco oroCon: 5. }."!
!JuegoDeTrucoTest methodsFor: 'testing' stamp: 'ms 7/5/2021 21:31:58'!
test13EmpardaLaManoNoHayGanador

	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco espadaCon: 6);
		add: (CartaDeTruco espadaCon: 1); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 1); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6).
	ronda ganoEnElEnfrentamiento: 1.
	
	ronda juegaJugadorManoYTira: (CartaDeTruco espadaCon: 6).
	ronda juegaJugadorPieYTira: (CartaDeTruco oroCon:1).
	ronda ganoEnElEnfrentamiento: 2.
	
	ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon: 3).
	ronda juegaJugadorManoYTira: (CartaDeTruco espadaCon: 1).
	ronda ganoEnElEnfrentamiento: 3.
		
	self assert: (ronda ganadorDeLaRonda) equals: jugadorMano .
	self assert: (ronda cartasDelJugadorMano) isEmpty .
	self assert: (ronda cartasDelJugadorPie) isEmpty 
	
	
	! !
!JuegoDeTrucoTest methodsFor: 'testing' stamp: 'ms 7/5/2021 21:32:11' prior: 51218689!
test13EmpardaLaManoNoHayGanador

	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco oroCon: 3);
		add: (CartaDeTruco espadaCon: 1); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 1); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6).
	ronda ganoEnElEnfrentamiento: 1.
	
	ronda juegaJugadorManoYTira: (CartaDeTruco espadaCon: 6).
	ronda juegaJugadorPieYTira: (CartaDeTruco oroCon:1).
	ronda ganoEnElEnfrentamiento: 2.
	
	ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon: 3).
	ronda juegaJugadorManoYTira: (CartaDeTruco espadaCon: 1).
	ronda ganoEnElEnfrentamiento: 3.
		
	self assert: (ronda ganadorDeLaRonda) equals: jugadorMano .
	self assert: (ronda cartasDelJugadorMano) isEmpty .
	self assert: (ronda cartasDelJugadorPie) isEmpty 
	
	
	! !
!JuegoDeTrucoTest methodsFor: 'testing' stamp: 'ms 7/5/2021 21:33:40' prior: 51218725!
test13EmpardaLaManoNoHayGanador

	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco oroCon: 3);
		add: (CartaDeTruco espadaCon: 1); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 1); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6).
	ronda ganoEnElEnfrentamiento: 1.
	
	ronda juegaJugadorManoYTira: (CartaDeTruco espadaCon: 3).
	ronda juegaJugadorPieYTira: (CartaDeTruco oroCon:3).
	.
		
	self assert: (ronda ganoEnElEnfrentamiento: 2)  isEmpty .
	self assert: (ronda cartasDelJugadorMano) equals:{(CartaDeTruco espadaCon: 1)} asOrderedCollection .
	self assert: (ronda cartasDelJugadorPie) equals: {(CartaDeTruco oroCon: 1)} asOrderedCollection  
	
	
	! !

!testRun: #JuegoDeTrucoTest #test13EmpardaLaManoNoHayGanador stamp: 'ms 7/5/2021 21:33:43'!
ERROR!

!testRun: #JuegoDeTrucoTest #test13EmpardaLaManoNoHayGanador stamp: 'ms 7/5/2021 21:33:43'!
ERROR!
!Ronda methodsFor: 'tirar cartas' stamp: 'ms 7/5/2021 21:34:51' prior: 51217071!
juegaJugadorManoYTira: unaCarta 
	
	(jugadorMano includes: unaCarta) ifFalse: [^Error signal: self class noSePuedeTirarUnaCartaQueNoPertenezcaAlJugador].
	
	(jugadorMano size < jugadorPie size) ifTrue: [^Error signal: self class noDebeEmpezarAJugarElJugadorManoPuesPerdioElAnteriorEnfrentamiento].
	
	(jugadorPie size = jugadorMano size) ifTrue:
		 [(elUltimoGanador isNotEqualTo: jugadorMano) ifTrue: [^Error signal: self class noDebeEmpezarAJugarElJugadorManoPuesPerdioElAnteriorEnfrentamiento]].
	cartasJugadasDelJugadorMano add: unaCarta.
	jugadorMano remove: unaCarta ifAbsent: [Error signal: self class noPuedeRemoverUnaCartaQueNoTengaElJugador].
	
	! !
!Ronda methodsFor: 'tirar cartas' stamp: 'ms 7/5/2021 21:35:04' prior: 51216622!
juegaJugadorPieYTira: unaCarta 
	
	(jugadorPie includes: unaCarta) ifFalse: [^Error signal: self class noSePuedeTirarUnaCartaQueNoPertenezcaAlJugador]. 
	
	cartasJugadasDelJugadorMano isEmpty ifTrue: [^Error signal: self class noPuedeEmpezarAJugarElJugadorPieEnElEnfrentamiento1].
	
	(jugadorPie size < jugadorMano size) ifTrue: [^Error signal: self class noDebeEmpezarAJugarElJugadorPiePuesPerdioElAnteriorEnfrentamiento].
	
	(jugadorPie size = jugadorMano size) ifTrue:
		 [(elUltimoGanador isNotEqualTo: jugadorPie) ifTrue: [^Error signal: self class noDebeEmpezarAJugarElJugadorPiePuesPerdioElAnteriorEnfrentamiento]].
	
	cartasJugadasDelJugadorPie add: unaCarta.
	jugadorPie remove: unaCarta ifAbsent: [^Error signal: self class noPuedeRemoverUnaCartaQueNoTengaElJugador]! !
!Ronda class methodsFor: 'error Messages' stamp: 'ms 7/5/2021 21:35:13'!
noPuedeRemoverUnaCartaQueNoTengaElJugador

	^'noPuedeRemoverUnaCartaQueNoTengaElJugador'! !
!Ronda methodsFor: 'ganador del enfrentamiento' stamp: 'ms 7/5/2021 21:35:57' prior: 51218411!
ganoEnElEnfrentamiento: numeroDeEnfrentamiento
|cartaJugadorMano cartaJugadorPie|

	cartaJugadorMano := cartasJugadasDelJugadorMano at: numeroDeEnfrentamiento.
	cartaJugadorPie := cartasJugadasDelJugadorPie at: numeroDeEnfrentamiento.
	
	(cartaJugadorMano mataA: cartaJugadorPie) 
	ifTrue: [elUltimoGanador := jugadorMano.].
	
	(cartaJugadorPie mataA: cartaJugadorMano) 
	ifTrue: [elUltimoGanador := jugadorPie ].
	
	enfrentamientos add: elUltimoGanador.
	^elUltimoGanador! !
!Ronda methodsFor: 'ganador del enfrentamiento' stamp: 'ms 7/5/2021 21:37:22' prior: 51218858!
ganoEnElEnfrentamiento: numeroDeEnfrentamiento
|cartaJugadorMano cartaJugadorPie|

	cartaJugadorMano := cartasJugadasDelJugadorMano at: numeroDeEnfrentamiento.
	cartaJugadorPie := cartasJugadasDelJugadorPie at: numeroDeEnfrentamiento.
	
	(cartaJugadorMano mataA: cartaJugadorPie) 
	ifTrue: [elUltimoGanador := jugadorMano.]
	ifFalse: [
		(cartaJugadorPie empardaCon: cartaJugadorMano)
		ifTrue: [elUltimoGanador := jugadorMano ]
		ifFalse:[elUltimoGanador := jugadorPie ]
		].
		
	
	 
	
	
	enfrentamientos add: elUltimoGanador.
	^elUltimoGanador! !
!Ronda methodsFor: 'ganador del enfrentamiento' stamp: 'ms 7/5/2021 21:37:25' prior: 51218876!
ganoEnElEnfrentamiento: numeroDeEnfrentamiento
|cartaJugadorMano cartaJugadorPie|

	cartaJugadorMano := cartasJugadasDelJugadorMano at: numeroDeEnfrentamiento.
	cartaJugadorPie := cartasJugadasDelJugadorPie at: numeroDeEnfrentamiento.
	
	(cartaJugadorMano mataA: cartaJugadorPie) 
	ifTrue: [elUltimoGanador := jugadorMano.]
	ifFalse: [
		(cartaJugadorPie empardaCon: cartaJugadorMano)
		ifTrue: [elUltimoGanador := jugadorMano ]
		ifFalse:[elUltimoGanador := jugadorPie ]
		].
	
	enfrentamientos add: elUltimoGanador.
	^elUltimoGanador! !

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 21:37:28'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 21:37:28'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 21:37:28'!
PASSED!

!testRun: #JuegoDeTrucoTest #test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp stamp: 'ms 7/5/2021 21:37:28'!
PASSED!

!testRun: #JuegoDeTrucoTest #test05NoPuedeTirarUnaCartaQuePertenezcaAlJugadorPie stamp: 'ms 7/5/2021 21:37:28'!
PASSED!

!testRun: #JuegoDeTrucoTest #test06NoPuedeEmpezarAJugarElJugadorPie stamp: 'ms 7/5/2021 21:37:28'!
PASSED!

!testRun: #JuegoDeTrucoTest #test07GanaLaManoEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:37:28'!
PASSED!

!testRun: #JuegoDeTrucoTest #test08SiGanaLaManoEnElPrimerEnfrentamientoNoDebeEmpezarElPie stamp: 'ms 7/5/2021 21:37:28'!
PASSED!

!testRun: #JuegoDeTrucoTest #test09NoDebeEmpezarLaManoEnElSegundoEnfrentamientoSiGanaElPieEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:37:28'!
PASSED!

!testRun: #JuegoDeTrucoTest #test10GanaLaManoEnElSegundoEnfrentamientoYNoDebeEpezarElPieEnElTercero stamp: 'ms 7/5/2021 21:37:28'!
PASSED!

!testRun: #JuegoDeTrucoTest #test11GanaElPieEnElSegundoEnfrentamientoYNoDebeEpezarLaManoEnElTercero stamp: 'ms 7/5/2021 21:37:28'!
PASSED!

!testRun: #JuegoDeTrucoTest #test12GanaLaManoLaRonda stamp: 'ms 7/5/2021 21:37:28'!
PASSED!

!testRun: #JuegoDeTrucoTest #test13EmpardaLaManoNoHayGanador stamp: 'ms 7/5/2021 21:37:28'!
ERROR!

!testRun: #JuegoDeTrucoTest #test13EmpardaLaManoNoHayGanador stamp: 'ms 7/5/2021 21:37:28'!
ERROR!

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 21:37:40'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 21:37:40'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 21:37:40'!
PASSED!

!testRun: #JuegoDeTrucoTest #test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp stamp: 'ms 7/5/2021 21:37:40'!
PASSED!

!testRun: #JuegoDeTrucoTest #test05NoPuedeTirarUnaCartaQuePertenezcaAlJugadorPie stamp: 'ms 7/5/2021 21:37:40'!
PASSED!

!testRun: #JuegoDeTrucoTest #test06NoPuedeEmpezarAJugarElJugadorPie stamp: 'ms 7/5/2021 21:37:40'!
PASSED!

!testRun: #JuegoDeTrucoTest #test07GanaLaManoEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:37:40'!
PASSED!

!testRun: #JuegoDeTrucoTest #test08SiGanaLaManoEnElPrimerEnfrentamientoNoDebeEmpezarElPie stamp: 'ms 7/5/2021 21:37:40'!
PASSED!

!testRun: #JuegoDeTrucoTest #test09NoDebeEmpezarLaManoEnElSegundoEnfrentamientoSiGanaElPieEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:37:40'!
PASSED!

!testRun: #JuegoDeTrucoTest #test10GanaLaManoEnElSegundoEnfrentamientoYNoDebeEpezarElPieEnElTercero stamp: 'ms 7/5/2021 21:37:40'!
PASSED!

!testRun: #JuegoDeTrucoTest #test11GanaElPieEnElSegundoEnfrentamientoYNoDebeEpezarLaManoEnElTercero stamp: 'ms 7/5/2021 21:37:40'!
PASSED!

!testRun: #JuegoDeTrucoTest #test12GanaLaManoLaRonda stamp: 'ms 7/5/2021 21:37:40'!
PASSED!

!testRun: #JuegoDeTrucoTest #test13EmpardaLaManoNoHayGanador stamp: 'ms 7/5/2021 21:37:40'!
ERROR!

!testRun: #JuegoDeTrucoTest #test13EmpardaLaManoNoHayGanador stamp: 'ms 7/5/2021 21:37:40'!
ERROR!

!testRun: #JuegoDeTrucoTest #test13EmpardaLaManoNoHayGanador stamp: 'ms 7/5/2021 21:38:03'!
ERROR!
!JuegoDeTrucoTest methodsFor: 'testing' stamp: 'ms 7/5/2021 21:38:27' prior: 51218761!
test13EmpardaLaManoNoHayGanador

	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco oroCon: 3);
		add: (CartaDeTruco espadaCon: 1); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 1); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6).
	ronda ganoEnElEnfrentamiento: 1.
	
	ronda juegaJugadorManoYTira: (CartaDeTruco OroCon: 3).
	ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon:3).
	.
		
	self assert: (ronda ganoEnElEnfrentamiento: 2)  isEmpty .
	self assert: (ronda cartasDelJugadorMano) equals:{(CartaDeTruco espadaCon: 1)} asOrderedCollection .
	self assert: (ronda cartasDelJugadorPie) equals: {(CartaDeTruco oroCon: 1)} asOrderedCollection  
	
	
	! !
!JuegoDeTrucoTest methodsFor: 'testing' stamp: 'ms 7/5/2021 21:38:30' prior: 51219026!
test13EmpardaLaManoNoHayGanador

	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco oroCon: 3);
		add: (CartaDeTruco espadaCon: 1); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 1); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6).
	ronda ganoEnElEnfrentamiento: 1.
	
	ronda juegaJugadorManoYTira: (CartaDeTruco oroCon: 3).
	ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon:3).
	.
		
	self assert: (ronda ganoEnElEnfrentamiento: 2)  isEmpty .
	self assert: (ronda cartasDelJugadorMano) equals:{(CartaDeTruco espadaCon: 1)} asOrderedCollection .
	self assert: (ronda cartasDelJugadorPie) equals: {(CartaDeTruco oroCon: 1)} asOrderedCollection  
	
	
	! !

!testRun: #JuegoDeTrucoTest #test13EmpardaLaManoNoHayGanador stamp: 'ms 7/5/2021 21:38:31'!
FAILURE!
!Ronda methodsFor: 'ganador del enfrentamiento' stamp: 'ms 7/5/2021 21:39:43' prior: 51218897!
ganoEnElEnfrentamiento: numeroDeEnfrentamiento
|cartaJugadorMano cartaJugadorPie|

	cartaJugadorMano := cartasJugadasDelJugadorMano at: numeroDeEnfrentamiento.
	cartaJugadorPie := cartasJugadasDelJugadorPie at: numeroDeEnfrentamiento.
	
	(cartaJugadorMano mataA: cartaJugadorPie) 
	ifTrue: [elUltimoGanador := jugadorMano.
		   enfrentamientos add: elUltimoGanador.]
	ifFalse: [
		(cartaJugadorPie empardaCon: cartaJugadorMano)
		ifTrue: [elUltimoGanador := jugadorMano ]
		ifFalse:[elUltimoGanador := jugadorPie .
			  enfrentamientos add: elUltimoGanador.]
		].
	
	^elUltimoGanador! !

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 21:39:47'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 21:39:47'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 21:39:47'!
PASSED!

!testRun: #JuegoDeTrucoTest #test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp stamp: 'ms 7/5/2021 21:39:47'!
PASSED!

!testRun: #JuegoDeTrucoTest #test05NoPuedeTirarUnaCartaQuePertenezcaAlJugadorPie stamp: 'ms 7/5/2021 21:39:47'!
PASSED!

!testRun: #JuegoDeTrucoTest #test06NoPuedeEmpezarAJugarElJugadorPie stamp: 'ms 7/5/2021 21:39:47'!
PASSED!

!testRun: #JuegoDeTrucoTest #test07GanaLaManoEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:39:47'!
PASSED!

!testRun: #JuegoDeTrucoTest #test08SiGanaLaManoEnElPrimerEnfrentamientoNoDebeEmpezarElPie stamp: 'ms 7/5/2021 21:39:47'!
PASSED!

!testRun: #JuegoDeTrucoTest #test09NoDebeEmpezarLaManoEnElSegundoEnfrentamientoSiGanaElPieEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:39:47'!
PASSED!

!testRun: #JuegoDeTrucoTest #test10GanaLaManoEnElSegundoEnfrentamientoYNoDebeEpezarElPieEnElTercero stamp: 'ms 7/5/2021 21:39:47'!
PASSED!

!testRun: #JuegoDeTrucoTest #test11GanaElPieEnElSegundoEnfrentamientoYNoDebeEpezarLaManoEnElTercero stamp: 'ms 7/5/2021 21:39:47'!
PASSED!

!testRun: #JuegoDeTrucoTest #test12GanaLaManoLaRonda stamp: 'ms 7/5/2021 21:39:47'!
PASSED!

!testRun: #JuegoDeTrucoTest #test13EmpardaLaManoNoHayGanador stamp: 'ms 7/5/2021 21:39:47'!
FAILURE!

!testRun: #JuegoDeTrucoTest #test13EmpardaLaManoNoHayGanador stamp: 'ms 7/5/2021 21:39:48'!
FAILURE!

(ronda ganoEnElEnfrentamiento: 2)!
!Ronda methodsFor: 'ganador del enfrentamiento' stamp: 'ms 7/5/2021 21:41:16' prior: 51219097!
ganoEnElEnfrentamiento: numeroDeEnfrentamiento
|cartaJugadorMano cartaJugadorPie|

	cartaJugadorMano := cartasJugadasDelJugadorMano at: numeroDeEnfrentamiento.
	cartaJugadorPie := cartasJugadasDelJugadorPie at: numeroDeEnfrentamiento.
	
	(cartaJugadorMano mataA: cartaJugadorPie) 
	ifTrue: [elUltimoGanador := jugadorMano.
		   enfrentamientos add: elUltimoGanador.]
	ifFalse: [
		(cartaJugadorPie empardaCon: cartaJugadorMano)
		ifTrue: [elUltimoGanador := jugadorMano.
			   ^OrderedCollection new]
		ifFalse:[elUltimoGanador := jugadorPie .
			  enfrentamientos add: elUltimoGanador.]
		].
	
	^elUltimoGanador! !

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 21:41:18'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 21:41:19'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 21:41:19'!
PASSED!

!testRun: #JuegoDeTrucoTest #test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp stamp: 'ms 7/5/2021 21:41:19'!
PASSED!

!testRun: #JuegoDeTrucoTest #test05NoPuedeTirarUnaCartaQuePertenezcaAlJugadorPie stamp: 'ms 7/5/2021 21:41:19'!
PASSED!

!testRun: #JuegoDeTrucoTest #test06NoPuedeEmpezarAJugarElJugadorPie stamp: 'ms 7/5/2021 21:41:19'!
PASSED!

!testRun: #JuegoDeTrucoTest #test07GanaLaManoEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:41:19'!
PASSED!

!testRun: #JuegoDeTrucoTest #test08SiGanaLaManoEnElPrimerEnfrentamientoNoDebeEmpezarElPie stamp: 'ms 7/5/2021 21:41:19'!
PASSED!

!testRun: #JuegoDeTrucoTest #test09NoDebeEmpezarLaManoEnElSegundoEnfrentamientoSiGanaElPieEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:41:19'!
PASSED!

!testRun: #JuegoDeTrucoTest #test10GanaLaManoEnElSegundoEnfrentamientoYNoDebeEpezarElPieEnElTercero stamp: 'ms 7/5/2021 21:41:19'!
PASSED!

!testRun: #JuegoDeTrucoTest #test11GanaElPieEnElSegundoEnfrentamientoYNoDebeEpezarLaManoEnElTercero stamp: 'ms 7/5/2021 21:41:19'!
PASSED!

!testRun: #JuegoDeTrucoTest #test12GanaLaManoLaRonda stamp: 'ms 7/5/2021 21:41:19'!
PASSED!

!testRun: #JuegoDeTrucoTest #test13EmpardaLaManoNoHayGanador stamp: 'ms 7/5/2021 21:41:19'!
PASSED!
!JuegoDeTrucoTest methodsFor: 'testing' stamp: 'ms 7/5/2021 21:42:52'!
test13EmpardaLaPrimerManoGanaLaRondaElGanadorDelSegundaEnfrentamiento

	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco oroCon: 3);
		add: (CartaDeTruco espadaCon: 1); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 1); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco oroCon: 3).
	ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon:3).
	ronda ganoEnElEnfrentamiento: 1.
	
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6).
		
	self assert: (ronda ganadorDeLaRonda ) equals: jugadorMano .
	self assert: (ronda cartasDelJugadorMano) equals:{(CartaDeTruco espadaCon: 1)} asOrderedCollection .
	self assert: (ronda cartasDelJugadorPie) equals: {(CartaDeTruco oroCon: 1)} asOrderedCollection  
	
	
	! !
!JuegoDeTrucoTest methodsFor: 'testing' stamp: 'ms 7/5/2021 21:43:02'!
test14EmpardaLaPrimerManoGanaLaRondaElGanadorDelSegundaEnfrentamiento

	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco oroCon: 3);
		add: (CartaDeTruco espadaCon: 1); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 1); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco oroCon: 3).
	ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon:3).
	ronda ganoEnElEnfrentamiento: 1.
	
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6).
		
	self assert: (ronda ganadorDeLaRonda ) equals: jugadorMano .
	self assert: (ronda cartasDelJugadorMano) equals:{(CartaDeTruco espadaCon: 1)} asOrderedCollection .
	self assert: (ronda cartasDelJugadorPie) equals: {(CartaDeTruco oroCon: 1)} asOrderedCollection  
	
	
	! !

!methodRemoval: JuegoDeTrucoTest #test13EmpardaLaPrimerManoGanaLaRondaElGanadorDelSegundaEnfrentamiento stamp: 'ms 7/5/2021 21:43:02'!
test13EmpardaLaPrimerManoGanaLaRondaElGanadorDelSegundaEnfrentamiento

	|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco oroCon: 3);
		add: (CartaDeTruco espadaCon: 1); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 1); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco oroCon: 3).
	ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon:3).
	ronda ganoEnElEnfrentamiento: 1.
	
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6).
		
	self assert: (ronda ganadorDeLaRonda ) equals: jugadorMano .
	self assert: (ronda cartasDelJugadorMano) equals:{(CartaDeTruco espadaCon: 1)} asOrderedCollection .
	self assert: (ronda cartasDelJugadorPie) equals: {(CartaDeTruco oroCon: 1)} asOrderedCollection  
	
	
	!

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 21:43:05'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 21:43:05'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 21:43:05'!
PASSED!

!testRun: #JuegoDeTrucoTest #test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp stamp: 'ms 7/5/2021 21:43:05'!
PASSED!

!testRun: #JuegoDeTrucoTest #test05NoPuedeTirarUnaCartaQuePertenezcaAlJugadorPie stamp: 'ms 7/5/2021 21:43:05'!
PASSED!

!testRun: #JuegoDeTrucoTest #test06NoPuedeEmpezarAJugarElJugadorPie stamp: 'ms 7/5/2021 21:43:05'!
PASSED!

!testRun: #JuegoDeTrucoTest #test07GanaLaManoEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:43:05'!
PASSED!

!testRun: #JuegoDeTrucoTest #test08SiGanaLaManoEnElPrimerEnfrentamientoNoDebeEmpezarElPie stamp: 'ms 7/5/2021 21:43:05'!
PASSED!

!testRun: #JuegoDeTrucoTest #test09NoDebeEmpezarLaManoEnElSegundoEnfrentamientoSiGanaElPieEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:43:05'!
PASSED!

!testRun: #JuegoDeTrucoTest #test10GanaLaManoEnElSegundoEnfrentamientoYNoDebeEpezarElPieEnElTercero stamp: 'ms 7/5/2021 21:43:05'!
PASSED!

!testRun: #JuegoDeTrucoTest #test11GanaElPieEnElSegundoEnfrentamientoYNoDebeEpezarLaManoEnElTercero stamp: 'ms 7/5/2021 21:43:05'!
PASSED!

!testRun: #JuegoDeTrucoTest #test12GanaLaManoLaRonda stamp: 'ms 7/5/2021 21:43:05'!
PASSED!

!testRun: #JuegoDeTrucoTest #test13EmpardaLaManoNoHayGanador stamp: 'ms 7/5/2021 21:43:05'!
PASSED!

!testRun: #JuegoDeTrucoTest #test14EmpardaLaPrimerManoGanaLaRondaElGanadorDelSegundaEnfrentamiento stamp: 'ms 7/5/2021 21:43:05'!
FAILURE!

!testRun: #JuegoDeTrucoTest #test14EmpardaLaPrimerManoGanaLaRondaElGanadorDelSegundaEnfrentamiento stamp: 'ms 7/5/2021 21:43:05'!
FAILURE!
!Ronda methodsFor: 'ganador del enfrentamiento' stamp: 'ms 7/5/2021 21:46:42' prior: 51219173!
ganoEnElEnfrentamiento: numeroDeEnfrentamiento
|cartaJugadorMano cartaJugadorPie|

	cartaJugadorMano := cartasJugadasDelJugadorMano at: numeroDeEnfrentamiento.
	cartaJugadorPie := cartasJugadasDelJugadorPie at: numeroDeEnfrentamiento.
	
	(cartaJugadorMano mataA: cartaJugadorPie) 
	ifTrue: [
		elUltimoGanador := jugadorMano.
		   enfrentamientos add: elUltimoGanador.]
	ifFalse: [
		(cartaJugadorPie empardaCon: cartaJugadorMano)
		ifTrue: [
			   elUltimoGanador := jugadorMano.
			   ^OrderedCollection new]
		ifFalse:[elUltimoGanador := jugadorPie .
			  enfrentamientos add: elUltimoGanador.]
		].
	
	^elUltimoGanador! !
!JuegoDeTrucoTest methodsFor: 'testing' stamp: 'ms 7/5/2021 21:46:50' prior: 51219279!
test14EmpardaLaPrimerManoGanaLaRondaElGanadorDelSegundaEnfrentamiento

	"|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco oroCon: 3);
		add: (CartaDeTruco espadaCon: 1); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 1); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco oroCon: 3).
	ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon:3).
	ronda ganoEnElEnfrentamiento: 1.
	
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6).
		
	self assert: (ronda ganadorDeLaRonda ) equals: jugadorMano .
	self assert: (ronda cartasDelJugadorMano) equals:{(CartaDeTruco espadaCon: 1)} asOrderedCollection .
	self assert: (ronda cartasDelJugadorPie) equals: {(CartaDeTruco oroCon: 1)} asOrderedCollection  "
	
	
	! !

!testRun: #JuegoDeTrucoTest #test14EmpardaLaPrimerManoGanaLaRondaElGanadorDelSegundaEnfrentamiento stamp: 'ms 7/5/2021 21:46:51'!
PASSED!

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 21:46:51'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 21:46:51'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 21:46:51'!
PASSED!

!testRun: #JuegoDeTrucoTest #test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp stamp: 'ms 7/5/2021 21:46:51'!
PASSED!

!testRun: #JuegoDeTrucoTest #test05NoPuedeTirarUnaCartaQuePertenezcaAlJugadorPie stamp: 'ms 7/5/2021 21:46:51'!
PASSED!

!testRun: #JuegoDeTrucoTest #test06NoPuedeEmpezarAJugarElJugadorPie stamp: 'ms 7/5/2021 21:46:51'!
PASSED!

!testRun: #JuegoDeTrucoTest #test07GanaLaManoEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:46:51'!
PASSED!

!testRun: #JuegoDeTrucoTest #test08SiGanaLaManoEnElPrimerEnfrentamientoNoDebeEmpezarElPie stamp: 'ms 7/5/2021 21:46:51'!
PASSED!

!testRun: #JuegoDeTrucoTest #test09NoDebeEmpezarLaManoEnElSegundoEnfrentamientoSiGanaElPieEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:46:51'!
PASSED!

!testRun: #JuegoDeTrucoTest #test10GanaLaManoEnElSegundoEnfrentamientoYNoDebeEpezarElPieEnElTercero stamp: 'ms 7/5/2021 21:46:51'!
PASSED!

!testRun: #JuegoDeTrucoTest #test11GanaElPieEnElSegundoEnfrentamientoYNoDebeEpezarLaManoEnElTercero stamp: 'ms 7/5/2021 21:46:51'!
PASSED!

!testRun: #JuegoDeTrucoTest #test12GanaLaManoLaRonda stamp: 'ms 7/5/2021 21:46:51'!
PASSED!

!testRun: #JuegoDeTrucoTest #test13EmpardaLaManoNoHayGanador stamp: 'ms 7/5/2021 21:46:51'!
PASSED!

!testRun: #JuegoDeTrucoTest #test14EmpardaLaPrimerManoGanaLaRondaElGanadorDelSegundaEnfrentamiento stamp: 'ms 7/5/2021 21:46:51'!
PASSED!
!JuegoDeTrucoTest methodsFor: 'testing' stamp: 'ms 7/5/2021 21:47:07' prior: 51219431!
test14EmpardaLaPrimerManoGanaLaRondaElGanadorDelSegundaEnfrentamiento

	"|jugadorMano jugadorPie ronda |
	
	jugadorMano := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 1); 
		add: (CartaDeTruco oroCon: 3);
		add: (CartaDeTruco espadaCon: 1); yourself.
		
	jugadorPie := OrderedCollection new 
		add: (CartaDeTruco bastoCon: 6); 
		add: (CartaDeTruco espadaCon: 3);
		add: (CartaDeTruco oroCon: 1); yourself.
	
	ronda := Ronda crearCon: jugadorMano y: jugadorPie.
	ronda juegaJugadorManoYTira: (CartaDeTruco oroCon: 3).
	ronda juegaJugadorPieYTira: (CartaDeTruco espadaCon:3).
	ronda ganoEnElEnfrentamiento: 1.
	
	ronda juegaJugadorManoYTira: (CartaDeTruco bastoCon: 1).
	ronda juegaJugadorPieYTira: (CartaDeTruco bastoCon: 6).
		
	self assert: (ronda ganadorDeLaRonda ) equals: jugadorMano .
	self assert: (ronda cartasDelJugadorMano) equals:{(CartaDeTruco espadaCon: 1)} asOrderedCollection .
	self assert: (ronda cartasDelJugadorPie) equals: {(CartaDeTruco oroCon: 1)} asOrderedCollection  
	
	NO LLEGUE A HACER ESTE TEST POR EL TIEMPO"
	
	
	! !
!Ronda methodsFor: 'tirar cartas' stamp: 'ms 7/5/2021 21:48:11' prior: 51218801!
juegaJugadorManoYTira: unaCarta 
	
	self validarLaCarta: unaCarta.
	
	
	(jugadorMano size < jugadorPie size) ifTrue: [^Error signal: self class noDebeEmpezarAJugarElJugadorManoPuesPerdioElAnteriorEnfrentamiento].
	
	(jugadorPie size = jugadorMano size) ifTrue:
		 [(elUltimoGanador isNotEqualTo: jugadorMano) ifTrue: [^Error signal: self class noDebeEmpezarAJugarElJugadorManoPuesPerdioElAnteriorEnfrentamiento]].
	cartasJugadasDelJugadorMano add: unaCarta.
	jugadorMano remove: unaCarta ifAbsent: [Error signal: self class noPuedeRemoverUnaCartaQueNoTengaElJugador].
	
	! !
!Ronda methodsFor: 'nil' stamp: 'ms 7/5/2021 21:48:29'!
validarCarta: unaCarta

	(jugadorMano includes: unaCarta) ifFalse: [^Error signal: self class noSePuedeTirarUnaCartaQueNoPertenezcaAlJugador].! !
!Ronda methodsFor: 'tirar cartas' stamp: 'ms 7/5/2021 21:48:40' prior: 51219560!
juegaJugadorManoYTira: unaCarta 
	
	self validarCarta: unaCarta.
	
	
	(jugadorMano size < jugadorPie size) ifTrue: [^Error signal: self class noDebeEmpezarAJugarElJugadorManoPuesPerdioElAnteriorEnfrentamiento].
	
	(jugadorPie size = jugadorMano size) ifTrue:
		 [(elUltimoGanador isNotEqualTo: jugadorMano) ifTrue: [^Error signal: self class noDebeEmpezarAJugarElJugadorManoPuesPerdioElAnteriorEnfrentamiento]].
	cartasJugadasDelJugadorMano add: unaCarta.
	jugadorMano remove: unaCarta ifAbsent: [Error signal: self class noPuedeRemoverUnaCartaQueNoTengaElJugador].
	
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'ms 7/5/2021 21:49:26'!
validarCarta: unaCarta delJugador: unJugador

	(unJugador includes: unaCarta) ifFalse: [^Error signal: self class noSePuedeTirarUnaCartaQueNoPertenezcaAlJugador].! !

!methodRemoval: Ronda #validarCarta: stamp: 'ms 7/5/2021 21:49:31'!
validarCarta: unaCarta

	(jugadorMano includes: unaCarta) ifFalse: [^Error signal: self class noSePuedeTirarUnaCartaQueNoPertenezcaAlJugador].!
!Ronda methodsFor: 'tirar cartas' stamp: 'ms 7/5/2021 21:50:03' prior: 51219588!
juegaJugadorManoYTira: unaCarta 
	
	self validarCarta: unaCarta delJugador: jugadorMano .
	
	
	(jugadorMano size < jugadorPie size) ifTrue: [^Error signal: self class noDebeEmpezarAJugarElJugadorManoPuesPerdioElAnteriorEnfrentamiento].
	
	(jugadorPie size = jugadorMano size) ifTrue:
		 [(elUltimoGanador isNotEqualTo: jugadorMano) ifTrue: [^Error signal: self class noDebeEmpezarAJugarElJugadorManoPuesPerdioElAnteriorEnfrentamiento]].
	cartasJugadasDelJugadorMano add: unaCarta.
	jugadorMano remove: unaCarta ifAbsent: [Error signal: self class noPuedeRemoverUnaCartaQueNoTengaElJugador].
	
	! !

!methodRemoval: Ronda #validarCarta:delJugador: stamp: 'ms 7/5/2021 21:50:22'!
validarCarta: unaCarta delJugador: unJugador

	(unJugador includes: unaCarta) ifFalse: [^Error signal: self class noSePuedeTirarUnaCartaQueNoPertenezcaAlJugador].!
!Ronda methodsFor: 'tirar cartas' stamp: 'ms 7/5/2021 21:50:32' prior: 51219624!
juegaJugadorManoYTira: unaCarta 
	
	(jugadorMano includes: unaCarta) ifFalse: [^Error signal: self class noSePuedeTirarUnaCartaQueNoPertenezcaAlJugador].
	
	(jugadorMano size < jugadorPie size) ifTrue: [^Error signal: self class noDebeEmpezarAJugarElJugadorManoPuesPerdioElAnteriorEnfrentamiento].
	
	(jugadorPie size = jugadorMano size) ifTrue:
		 [(elUltimoGanador isNotEqualTo: jugadorMano) ifTrue: [^Error signal: self class noDebeEmpezarAJugarElJugadorManoPuesPerdioElAnteriorEnfrentamiento]].
	cartasJugadasDelJugadorMano add: unaCarta.
	jugadorMano remove: unaCarta ifAbsent: [Error signal: self class noPuedeRemoverUnaCartaQueNoTengaElJugador].
	
	! !
!Ronda methodsFor: 'tirar cartas' stamp: 'ms 7/5/2021 21:50:42' prior: 51219653!
juegaJugadorManoYTira: unaCarta 
	
	(jugadorMano includes: unaCarta) ifFalse: [^Error signal: self class noSePuedeTirarUnaCartaQueNoPertenezcaAlJugador].
	
	(jugadorMano size < jugadorPie size) ifTrue: [^Error signal: self class noDebeEmpezarAJugarElJugadorManoPuesPerdioElAnteriorEnfrentamiento].
	
	(jugadorPie size = jugadorMano size) ifTrue:
		 [(elUltimoGanador isNotEqualTo: jugadorMano) ifTrue: [^Error signal: self class noDebeEmpezarAJugarElJugadorManoPuesPerdioElAnteriorEnfrentamiento]].
		
	cartasJugadasDelJugadorMano add: unaCarta.
	
	jugadorMano remove: unaCarta ifAbsent: [Error signal: self class noPuedeRemoverUnaCartaQueNoTengaElJugador].
	
	! !

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'ms 7/5/2021 21:50:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'ms 7/5/2021 21:50:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'ms 7/5/2021 21:50:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'ms 7/5/2021 21:50:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'ms 7/5/2021 21:50:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'ms 7/5/2021 21:50:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'ms 7/5/2021 21:50:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'ms 7/5/2021 21:50:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'ms 7/5/2021 21:50:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'ms 7/5/2021 21:50:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'ms 7/5/2021 21:50:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'ms 7/5/2021 21:50:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'ms 7/5/2021 21:50:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'ms 7/5/2021 21:50:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'ms 7/5/2021 21:50:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'ms 7/5/2021 21:50:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'ms 7/5/2021 21:50:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'ms 7/5/2021 21:50:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'ms 7/5/2021 21:50:45'!
PASSED!

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 21:50:45'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 21:50:45'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 21:50:45'!
PASSED!

!testRun: #JuegoDeTrucoTest #test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp stamp: 'ms 7/5/2021 21:50:45'!
PASSED!

!testRun: #JuegoDeTrucoTest #test05NoPuedeTirarUnaCartaQuePertenezcaAlJugadorPie stamp: 'ms 7/5/2021 21:50:45'!
PASSED!

!testRun: #JuegoDeTrucoTest #test06NoPuedeEmpezarAJugarElJugadorPie stamp: 'ms 7/5/2021 21:50:45'!
PASSED!

!testRun: #JuegoDeTrucoTest #test07GanaLaManoEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:50:45'!
PASSED!

!testRun: #JuegoDeTrucoTest #test08SiGanaLaManoEnElPrimerEnfrentamientoNoDebeEmpezarElPie stamp: 'ms 7/5/2021 21:50:45'!
PASSED!

!testRun: #JuegoDeTrucoTest #test09NoDebeEmpezarLaManoEnElSegundoEnfrentamientoSiGanaElPieEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:50:45'!
PASSED!

!testRun: #JuegoDeTrucoTest #test10GanaLaManoEnElSegundoEnfrentamientoYNoDebeEpezarElPieEnElTercero stamp: 'ms 7/5/2021 21:50:45'!
PASSED!

!testRun: #JuegoDeTrucoTest #test11GanaElPieEnElSegundoEnfrentamientoYNoDebeEpezarLaManoEnElTercero stamp: 'ms 7/5/2021 21:50:45'!
PASSED!

!testRun: #JuegoDeTrucoTest #test12GanaLaManoLaRonda stamp: 'ms 7/5/2021 21:50:45'!
PASSED!

!testRun: #JuegoDeTrucoTest #test13EmpardaLaManoNoHayGanador stamp: 'ms 7/5/2021 21:50:45'!
PASSED!

!testRun: #JuegoDeTrucoTest #test14EmpardaLaPrimerManoGanaLaRondaElGanadorDelSegundaEnfrentamiento stamp: 'ms 7/5/2021 21:50:45'!
PASSED!

Object subclass: #Ronda
	instanceVariableNames: 'jugadorMano jugadorPie cartasJugadasDelJugadorMano cartasJugadasDelJugadorPie  elUltimoGanador enfrentamientos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'ms 7/5/2021 21:51:56'!
Object subclass: #Ronda
	instanceVariableNames: 'jugadorMano jugadorPie cartasJugadasDelJugadorMano cartasJugadasDelJugadorPie elUltimoGanador enfrentamientos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'ms 7/5/2021 21:51:59'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'ms 7/5/2021 21:51:59'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'ms 7/5/2021 21:51:59'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'ms 7/5/2021 21:51:59'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'ms 7/5/2021 21:51:59'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'ms 7/5/2021 21:51:59'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'ms 7/5/2021 21:51:59'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'ms 7/5/2021 21:51:59'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'ms 7/5/2021 21:51:59'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'ms 7/5/2021 21:51:59'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'ms 7/5/2021 21:51:59'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'ms 7/5/2021 21:51:59'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'ms 7/5/2021 21:51:59'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'ms 7/5/2021 21:51:59'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'ms 7/5/2021 21:51:59'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'ms 7/5/2021 21:51:59'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'ms 7/5/2021 21:51:59'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'ms 7/5/2021 21:51:59'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'ms 7/5/2021 21:51:59'!
PASSED!

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 21:51:59'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 21:51:59'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 21:51:59'!
PASSED!

!testRun: #JuegoDeTrucoTest #test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp stamp: 'ms 7/5/2021 21:51:59'!
PASSED!

!testRun: #JuegoDeTrucoTest #test05NoPuedeTirarUnaCartaQuePertenezcaAlJugadorPie stamp: 'ms 7/5/2021 21:51:59'!
PASSED!

!testRun: #JuegoDeTrucoTest #test06NoPuedeEmpezarAJugarElJugadorPie stamp: 'ms 7/5/2021 21:51:59'!
PASSED!

!testRun: #JuegoDeTrucoTest #test07GanaLaManoEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:51:59'!
PASSED!

!testRun: #JuegoDeTrucoTest #test08SiGanaLaManoEnElPrimerEnfrentamientoNoDebeEmpezarElPie stamp: 'ms 7/5/2021 21:51:59'!
PASSED!

!testRun: #JuegoDeTrucoTest #test09NoDebeEmpezarLaManoEnElSegundoEnfrentamientoSiGanaElPieEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:51:59'!
PASSED!

!testRun: #JuegoDeTrucoTest #test10GanaLaManoEnElSegundoEnfrentamientoYNoDebeEpezarElPieEnElTercero stamp: 'ms 7/5/2021 21:51:59'!
PASSED!

!testRun: #JuegoDeTrucoTest #test11GanaElPieEnElSegundoEnfrentamientoYNoDebeEpezarLaManoEnElTercero stamp: 'ms 7/5/2021 21:51:59'!
PASSED!

!testRun: #JuegoDeTrucoTest #test12GanaLaManoLaRonda stamp: 'ms 7/5/2021 21:51:59'!
PASSED!

!testRun: #JuegoDeTrucoTest #test13EmpardaLaManoNoHayGanador stamp: 'ms 7/5/2021 21:51:59'!
PASSED!

!testRun: #JuegoDeTrucoTest #test14EmpardaLaPrimerManoGanaLaRondaElGanadorDelSegundaEnfrentamiento stamp: 'ms 7/5/2021 21:51:59'!
PASSED!

Object subclass: #Ronda
	instanceVariableNames: 'jugadorMano jugadorPie cartasJugadasDelJugadorMano  elUltimoGanador enfrentamientos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'ms 7/5/2021 21:52:18'!
Object subclass: #Ronda
	instanceVariableNames: 'jugadorMano jugadorPie cartasJugadasDelJugadorMano elUltimoGanador enfrentamientos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'intancializacion' stamp: 'ms 7/5/2021 21:52:27' prior: 51218428!
iniciarRondaConUn: cartasJugadorMano yUn: cartasJugadorPie
 
	self validarCartasDelJugador: cartasJugadorMano .
	self validarCartasDelJugador: cartasJugadorPie .
	
	self validarQueNoHayCartasRepetidasEn: (cartasJugadorMano asSet addAll: cartasJugadorPie; yourself).
	
	jugadorMano := cartasJugadorMano .
	jugadorPie := cartasJugadorPie .
	cartasJugadasDelJugadorMano := OrderedCollection new.
	elUltimoGanador := jugadorMano.
	enfrentamientos := Bag new.! !

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'ms 7/5/2021 21:52:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'ms 7/5/2021 21:52:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'ms 7/5/2021 21:52:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'ms 7/5/2021 21:52:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'ms 7/5/2021 21:52:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'ms 7/5/2021 21:52:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'ms 7/5/2021 21:52:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'ms 7/5/2021 21:52:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'ms 7/5/2021 21:52:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'ms 7/5/2021 21:52:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'ms 7/5/2021 21:52:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'ms 7/5/2021 21:52:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'ms 7/5/2021 21:52:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'ms 7/5/2021 21:52:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'ms 7/5/2021 21:52:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'ms 7/5/2021 21:52:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'ms 7/5/2021 21:52:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'ms 7/5/2021 21:52:29'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'ms 7/5/2021 21:52:29'!
PASSED!

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 21:52:29'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 21:52:29'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 21:52:29'!
PASSED!

!testRun: #JuegoDeTrucoTest #test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp stamp: 'ms 7/5/2021 21:52:29'!
PASSED!

!testRun: #JuegoDeTrucoTest #test05NoPuedeTirarUnaCartaQuePertenezcaAlJugadorPie stamp: 'ms 7/5/2021 21:52:29'!
PASSED!

!testRun: #JuegoDeTrucoTest #test06NoPuedeEmpezarAJugarElJugadorPie stamp: 'ms 7/5/2021 21:52:29'!
PASSED!

!testRun: #JuegoDeTrucoTest #test07GanaLaManoEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:52:29'!
ERROR!

!testRun: #JuegoDeTrucoTest #test08SiGanaLaManoEnElPrimerEnfrentamientoNoDebeEmpezarElPie stamp: 'ms 7/5/2021 21:52:29'!
ERROR!

!testRun: #JuegoDeTrucoTest #test09NoDebeEmpezarLaManoEnElSegundoEnfrentamientoSiGanaElPieEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:52:29'!
ERROR!

!testRun: #JuegoDeTrucoTest #test10GanaLaManoEnElSegundoEnfrentamientoYNoDebeEpezarElPieEnElTercero stamp: 'ms 7/5/2021 21:52:29'!
ERROR!

!testRun: #JuegoDeTrucoTest #test11GanaElPieEnElSegundoEnfrentamientoYNoDebeEpezarLaManoEnElTercero stamp: 'ms 7/5/2021 21:52:29'!
ERROR!

!testRun: #JuegoDeTrucoTest #test12GanaLaManoLaRonda stamp: 'ms 7/5/2021 21:52:29'!
ERROR!

!testRun: #JuegoDeTrucoTest #test13EmpardaLaManoNoHayGanador stamp: 'ms 7/5/2021 21:52:29'!
ERROR!

!testRun: #JuegoDeTrucoTest #test14EmpardaLaPrimerManoGanaLaRondaElGanadorDelSegundaEnfrentamiento stamp: 'ms 7/5/2021 21:52:29'!
PASSED!
!Ronda methodsFor: 'intancializacion' stamp: 'ms 7/5/2021 21:52:27' prior: 51219973!
iniciarRondaConUn: cartasJugadorMano yUn: cartasJugadorPie
 
	self validarCartasDelJugador: cartasJugadorMano .
	self validarCartasDelJugador: cartasJugadorPie .
	
	self validarQueNoHayCartasRepetidasEn: (cartasJugadorMano asSet addAll: cartasJugadorPie; yourself).
	
	jugadorMano := cartasJugadorMano .
	jugadorPie := cartasJugadorPie .
	cartasJugadasDelJugadorMano := OrderedCollection new.
	elUltimoGanador := jugadorMano.
	enfrentamientos := Bag new.! !
!Ronda methodsFor: 'intancializacion' stamp: 'ms 7/5/2021 21:26:08' prior: 51220109!
iniciarRondaConUn: cartasJugadorMano yUn: cartasJugadorPie
 
	self validarCartasDelJugador: cartasJugadorMano .
	self validarCartasDelJugador: cartasJugadorPie .
	
	self validarQueNoHayCartasRepetidasEn: (cartasJugadorMano asSet addAll: cartasJugadorPie; yourself).
	
	jugadorMano := cartasJugadorMano .
	jugadorPie := cartasJugadorPie .
	cartasJugadasDelJugadorMano := OrderedCollection new.
	cartasJugadasDelJugadorPie := OrderedCollection new.
	elUltimoGanador := jugadorMano.
	enfrentamientos := Bag new.! !

Object subclass: #Ronda
	instanceVariableNames: 'jugadorMano jugadorPie cartasJugadasDelJugadorMano cartasJugadasDelJugadorPie elUltimoGanador enfrentamientos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'ms 7/5/2021 21:53:02'!
Object subclass: #Ronda
	instanceVariableNames: 'jugadorMano jugadorPie cartasJugadasDelJugadorMano cartasJugadasDelJugadorPie elUltimoGanador enfrentamientos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'ms 7/5/2021 21:53:03'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'ms 7/5/2021 21:53:03'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'ms 7/5/2021 21:53:03'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'ms 7/5/2021 21:53:03'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'ms 7/5/2021 21:53:03'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'ms 7/5/2021 21:53:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'ms 7/5/2021 21:53:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'ms 7/5/2021 21:53:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'ms 7/5/2021 21:53:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'ms 7/5/2021 21:53:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'ms 7/5/2021 21:53:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'ms 7/5/2021 21:53:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'ms 7/5/2021 21:53:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'ms 7/5/2021 21:53:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'ms 7/5/2021 21:53:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'ms 7/5/2021 21:53:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'ms 7/5/2021 21:53:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'ms 7/5/2021 21:53:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInv�lida stamp: 'ms 7/5/2021 21:53:04'!
PASSED!

!testRun: #JuegoDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'ms 7/5/2021 21:53:04'!
PASSED!

!testRun: #JuegoDeTrucoTest #test02NoSePuedeCrearUnaRondaSinQueCadaJugadorTengaExactamente3Cartas stamp: 'ms 7/5/2021 21:53:04'!
PASSED!

!testRun: #JuegoDeTrucoTest #test03ValidarQueLasCartasNoSeRepitanEnUnMismoJugador stamp: 'ms 7/5/2021 21:53:04'!
PASSED!

!testRun: #JuegoDeTrucoTest #test04NoSePuedeTirarUnaCartaQuePertenezcaAlJugadorQueLaTirp stamp: 'ms 7/5/2021 21:53:04'!
PASSED!

!testRun: #JuegoDeTrucoTest #test05NoPuedeTirarUnaCartaQuePertenezcaAlJugadorPie stamp: 'ms 7/5/2021 21:53:04'!
PASSED!

!testRun: #JuegoDeTrucoTest #test06NoPuedeEmpezarAJugarElJugadorPie stamp: 'ms 7/5/2021 21:53:04'!
PASSED!

!testRun: #JuegoDeTrucoTest #test07GanaLaManoEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:53:04'!
PASSED!

!testRun: #JuegoDeTrucoTest #test08SiGanaLaManoEnElPrimerEnfrentamientoNoDebeEmpezarElPie stamp: 'ms 7/5/2021 21:53:04'!
PASSED!

!testRun: #JuegoDeTrucoTest #test09NoDebeEmpezarLaManoEnElSegundoEnfrentamientoSiGanaElPieEnElPrimerEnfrentamiento stamp: 'ms 7/5/2021 21:53:04'!
PASSED!

!testRun: #JuegoDeTrucoTest #test10GanaLaManoEnElSegundoEnfrentamientoYNoDebeEpezarElPieEnElTercero stamp: 'ms 7/5/2021 21:53:04'!
PASSED!

!testRun: #JuegoDeTrucoTest #test11GanaElPieEnElSegundoEnfrentamientoYNoDebeEpezarLaManoEnElTercero stamp: 'ms 7/5/2021 21:53:04'!
PASSED!

!testRun: #JuegoDeTrucoTest #test12GanaLaManoLaRonda stamp: 'ms 7/5/2021 21:53:04'!
PASSED!

!testRun: #JuegoDeTrucoTest #test13EmpardaLaManoNoHayGanador stamp: 'ms 7/5/2021 21:53:04'!
PASSED!

!testRun: #JuegoDeTrucoTest #test14EmpardaLaPrimerManoGanaLaRondaElGanadorDelSegundaEnfrentamiento stamp: 'ms 7/5/2021 21:53:04'!
PASSED!