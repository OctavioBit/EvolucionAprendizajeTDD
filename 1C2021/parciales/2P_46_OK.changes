

----QUIT----(9 March 2021 14:58:42) CuisUniversity-4532.image priorSource: 13044060!

----STARTUP---- (9 March 2021 14:58:43) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4532.image!


----QUIT----(9 March 2021 14:58:43) CuisUniversity-4532.image priorSource: 16885479!

----STARTUP---- (5 July 2021 16:49:47) as /Users/joaco/Desktop/Computacion/Inge I/Parcial2/macos64/CuisUniversity-4532.image!


----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/Parcial2/ISW1-2021-1C-2doParcial.st----!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'JN 7/5/2021 17:12:05'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'JN 7/5/2021 17:12:05'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'JN 7/5/2021 17:12:05'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'JN 7/5/2021 17:12:05'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'JN 7/5/2021 17:12:05'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'JN 7/5/2021 17:12:05'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'JN 7/5/2021 17:12:05'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'JN 7/5/2021 17:12:05'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'JN 7/5/2021 17:12:05'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'JN 7/5/2021 17:12:05'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'JN 7/5/2021 17:12:05'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'JN 7/5/2021 17:12:05'!
ERROR!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'JN 7/5/2021 17:12:05'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'JN 7/5/2021 17:12:05'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'JN 7/5/2021 17:12:05'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'JN 7/5/2021 17:12:05'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'JN 7/5/2021 17:12:05'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'JN 7/5/2021 17:12:05'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInválida stamp: 'JN 7/5/2021 17:12:05'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'JN 7/5/2021 17:12:05'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'JN 7/5/2021 17:12:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'JN 7/5/2021 17:12:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'JN 7/5/2021 17:12:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'JN 7/5/2021 17:12:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'JN 7/5/2021 17:12:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'JN 7/5/2021 17:12:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'JN 7/5/2021 17:12:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'JN 7/5/2021 17:12:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'JN 7/5/2021 17:12:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'JN 7/5/2021 17:12:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'JN 7/5/2021 17:12:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'JN 7/5/2021 17:12:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'JN 7/5/2021 17:12:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'JN 7/5/2021 17:12:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'JN 7/5/2021 17:12:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'JN 7/5/2021 17:12:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'JN 7/5/2021 17:12:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'JN 7/5/2021 17:12:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInválida stamp: 'JN 7/5/2021 17:12:11'!
PASSED!

TestCase subclass: #JugadorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #JugadorTest category: 'ISW1-2021-1C-2doParcial' stamp: 'JN 7/5/2021 17:42:18'!
TestCase subclass: #JugadorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

----End fileIn of /Users/joaco/Desktop/Computacion/Inge I/Parcial2/macos64/Packages/TerseGuide.pck.st----!

!classRemoval: #JugadorTest stamp: 'JN 7/5/2021 18:02:02'!
TestCase subclass: #JugadorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

TestCase subclass: #JugadorDeRondaTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #JugadorDeRondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'JN 7/5/2021 18:02:10'!
TestCase subclass: #JugadorDeRondaTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #JugadorDeRonda category: 'ISW1-2021-1C-2doParcial' stamp: 'JN 7/5/2021 18:05:03'!
Object subclass: #JugadorDeRonda
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!JugadorDeRondaTest methodsFor: 'no messages' stamp: 'JN 7/5/2021 18:04:58'!
test01

	self 
		should: [ JugadorDeRonda con: {} ]  
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [ :anError |
			self assert: JugadorDeRonda noSePuedeCrearUnJugadorDeRondaSinCartasMensajeDeError 
				equals: anError messageText.
			]! !
!JugadorDeRonda class methodsFor: 'no messages' stamp: 'JN 7/5/2021 18:07:07'!
con: manoDeCartas

	self error: self noSePuedeCrearUnJugadorDeRondaSinCartasMensajeDeError.! !
!JugadorDeRonda class methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:07:36'!
noSePuedeCrearUnJugadorDeRondaSinCartasMensajeDeError

	^'No se puede crear un jugador de ronda sin cartas!!'.! !

!testRun: #JugadorDeRondaTest #test01 stamp: 'JN 7/5/2021 18:07:38'!
PASSED!

!testRun: #JugadorDeRondaTest #test01 stamp: 'JN 7/5/2021 18:07:44'!
PASSED!
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:07:58'!
test01NoSePuedeCrearUnJugadorDeRondaSinCartas

	self 
		should: [ JugadorDeRonda con: {} ]  
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [ :anError |
			self assert: JugadorDeRonda noSePuedeCrearUnJugadorDeRondaSinCartasMensajeDeError 
				equals: anError messageText.
			]! !

!methodRemoval: JugadorDeRondaTest #test01 stamp: 'JN 7/5/2021 18:08:05'!
test01

	self 
		should: [ JugadorDeRonda con: {} ]  
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [ :anError |
			self assert: JugadorDeRonda noSePuedeCrearUnJugadorDeRondaSinCartasMensajeDeError 
				equals: anError messageText.
			]!

!testRun: #JugadorDeRondaTest #test01NoSePuedeCrearUnJugadorDeRondaSinCartas stamp: 'JN 7/5/2021 18:08:06'!
PASSED!
!JugadorDeRonda class methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:09:23'!
cantidadDeCartasDistintaATres

	^'No se puede crear un jugador de ronda sin cartas!!'.! !
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:09:23' prior: 50862979!
test01NoSePuedeCrearUnJugadorDeRondaSinCartas

	self 
		should: [ JugadorDeRonda con: {} ]  
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [ :anError |
			self assert: JugadorDeRonda cantidadDeCartasDistintaATres 
				equals: anError messageText.
			]! !
!JugadorDeRonda class methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:09:23' prior: 50862961!
con: manoDeCartas

	self error: self cantidadDeCartasDistintaATres.! !

!methodRemoval: JugadorDeRonda class #noSePuedeCrearUnJugadorDeRondaSinCartasMensajeDeError stamp: 'JN 7/5/2021 18:09:23'!
noSePuedeCrearUnJugadorDeRondaSinCartasMensajeDeError

	^'No se puede crear un jugador de ronda sin cartas!!'.!
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:10:14'!
test01NoSePuedeCrearUnJugadorDeRondaSin3Cartas

	self 
		should: [ JugadorDeRonda con: {} ]  
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [ :anError |
			self assert: JugadorDeRonda cantidadDeCartasDistintaATres 
				equals: anError messageText.
			]! !

!methodRemoval: JugadorDeRondaTest #test01NoSePuedeCrearUnJugadorDeRondaSinCartas stamp: 'JN 7/5/2021 18:10:14'!
test01NoSePuedeCrearUnJugadorDeRondaSinCartas

	self 
		should: [ JugadorDeRonda con: {} ]  
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [ :anError |
			self assert: JugadorDeRonda cantidadDeCartasDistintaATres 
				equals: anError messageText.
			]!
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:11:13' prior: 50863036!
test01NoSePuedeCrearUnJugadorDeRondaSin3Cartas

	self 
		should: [ JugadorDeRonda con: {} ]  
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [ :anError |
			self assert: JugadorDeRonda cantidadDeCartasDistintaATres 
				equals: anError messageText.
			].! !
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:12:08' prior: 50863060!
test01NoSePuedeCrearUnJugadorDeRondaSin3Cartas

	self 
		should: [ JugadorDeRonda con: {} ]  
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [ :anError |
			self assert: JugadorDeRonda cantidadDeCartasDistintaATres 
				equals: anError messageText.
			].
! !

!classRemoval: #JugadorDeRondaTest stamp: 'JN 7/5/2021 18:13:30'!
TestCase subclass: #JugadorDeRondaTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classRemoval: #JugadorDeRonda stamp: 'JN 7/5/2021 18:13:35'!
Object subclass: #JugadorDeRonda
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'JN 7/5/2021 18:13:48'!
TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classRemoval: #RondaDeTrucoTest stamp: 'JN 7/5/2021 18:19:40'!
TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

TestCase subclass: #JugadorDeRondaTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #JugadorDeRondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'JN 7/5/2021 18:19:47'!
TestCase subclass: #JugadorDeRondaTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #JugadorDeRonda category: 'ISW1-2021-1C-2doParcial' stamp: 'JN 7/5/2021 18:26:33'!
Object subclass: #JugadorDeRonda
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'JN 7/5/2021 18:26:49'!
Object subclass: #Ronda
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!JugadorDeRondaTest methodsFor: 'no messages' stamp: 'JN 7/5/2021 18:26:29'!
test01

	| mano pie ronda |
	
	mano := JugadorDeRonda conCartas: {}. 
	pie := JugadorDeRonda conCartas: {}. 
	
	ronda := Ronda conMano: mano yPie: pie.
	
	self 
		should: [ mano tiraCartaEn: ronda. ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: JugadorDeRonda sinCartasErrorDescription equals: anError messageText.
			]! !
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:27:14' prior: 50863143!
test01

	| mano |
	
	mano := JugadorDeRonda conCartas: {}. 

	self 
		should: [ mano tiraCarta. ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: JugadorDeRonda sinCartasErrorDescription equals: anError messageText.
			]! !

!classRemoval: #Ronda stamp: 'JN 7/5/2021 18:27:21'!
Object subclass: #Ronda
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!testRun: #JugadorDeRondaTest #test01 stamp: 'JN 7/5/2021 18:27:27'!
ERROR!

!testRun: #JugadorDeRondaTest #test01 stamp: 'JN 7/5/2021 18:27:27'!
ERROR!
!JugadorDeRonda class methodsFor: 'no messages' stamp: 'JN 7/5/2021 18:28:13'!
conCartas: coleccionDeCartas

	self error: self sincartas! !
!JugadorDeRonda class methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:28:29' prior: 50863180!
conCartas: coleccionDeCartas

	self error: self sinCartasErrorDescription.! !
!JugadorDeRonda class methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:28:45'!
sinCartasErrorDescription
	
	^'El jugador no tiene cartas para tirar'.! !

!testRun: #JugadorDeRondaTest #test01 stamp: 'JN 7/5/2021 18:28:47'!
ERROR!

!testRun: #JugadorDeRondaTest #test01 stamp: 'JN 7/5/2021 18:28:47'!
ERROR!
!JugadorDeRonda class methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:29:25' prior: 50863186!
conCartas: coleccionDeCartas

	self initializeWith: coleccionDeCartas.! !

!classDefinition: #JugadorDeRonda category: 'ISW1-2021-1C-2doParcial' stamp: 'JN 7/5/2021 18:29:57'!
Object subclass: #JugadorDeRonda
	instanceVariableNames: 'cartas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!JugadorDeRonda methodsFor: 'no messages' stamp: 'JN 7/5/2021 18:29:53'!
initializeWith: coleccionDeCartas

	cartas := coleccionDeCartas.! !

!testRun: #JugadorDeRondaTest #test01 stamp: 'JN 7/5/2021 18:30:01'!
ERROR!

!testRun: #JugadorDeRondaTest #test01 stamp: 'JN 7/5/2021 18:30:01'!
ERROR!
!JugadorDeRonda class methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:30:25' prior: 50863203!
conCartas: coleccionDeCartas

	self new initializeWith: coleccionDeCartas.! !

!testRun: #JugadorDeRondaTest #test01 stamp: 'JN 7/5/2021 18:30:29'!
ERROR!

!testRun: #JugadorDeRondaTest #test01 stamp: 'JN 7/5/2021 18:30:29'!
ERROR!
!JugadorDeRonda class methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:30:49' prior: 50863227!
conCartas: coleccionDeCartas

	^ self new initializeWith: coleccionDeCartas.! !

!testRun: #JugadorDeRondaTest #test01 stamp: 'JN 7/5/2021 18:30:53'!
ERROR!

!testRun: #JugadorDeRondaTest #test01 stamp: 'JN 7/5/2021 18:30:53'!
ERROR!
!JugadorDeRonda methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:30:59'!
tiraCarta
	self shouldBeImplemented.! !
!JugadorDeRonda methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:31:16' prior: 50863248!
tiraCarta

	self error: self class sinCartasErrorDescription .! !

!testRun: #JugadorDeRondaTest #test01 stamp: 'JN 7/5/2021 18:31:18'!
PASSED!

!testRun: #JugadorDeRondaTest #test01 stamp: 'JN 7/5/2021 18:31:20'!
PASSED!
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:31:59'!
test01JugadorNoPuedeTirarCartaSinCartas

	| jugador |
	
	jugador := JugadorDeRonda conCartas: {}. 

	self 
		should: [ jugador tiraCarta. ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: JugadorDeRonda sinCartasErrorDescription equals: anError messageText.
			]! !

!methodRemoval: JugadorDeRondaTest #test01 stamp: 'JN 7/5/2021 18:32:05'!
test01

	| mano |
	
	mano := JugadorDeRonda conCartas: {}. 

	self 
		should: [ mano tiraCarta. ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: JugadorDeRonda sinCartasErrorDescription equals: anError messageText.
			]!
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:34:11'!
test02JugadorConUnaCartaTiraEsaCarta

	| jugador carta cartaTirada |
	
	carta := CartaDeTruco anchoDeEspada.
	jugador := JugadorDeRonda conCartas: { carta }. 

	cartaTirada := jugador tiraCarta.
	
	self assert: cartaTirada = carta.
	self assert: jugador sinCartas.! !

!testRun: #JugadorDeRondaTest #test02JugadorConUnaCartaTiraEsaCarta stamp: 'JN 7/5/2021 18:34:19'!
ERROR!

!testRun: #JugadorDeRondaTest #test02JugadorConUnaCartaTiraEsaCarta stamp: 'JN 7/5/2021 18:34:19'!
ERROR!
!JugadorDeRonda methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:35:04' prior: 50863253!
tiraCarta

	^ cartas pop.! !

!testRun: #JugadorDeRondaTest #test01JugadorNoPuedeTirarCartaSinCartas stamp: 'JN 7/5/2021 18:35:06'!
ERROR!

!testRun: #JugadorDeRondaTest #test02JugadorConUnaCartaTiraEsaCarta stamp: 'JN 7/5/2021 18:35:06'!
ERROR!
!JugadorDeRonda methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:35:31'!
sinCartas

	^ cartas size.! !

!testRun: #JugadorDeRondaTest #test01JugadorNoPuedeTirarCartaSinCartas stamp: 'JN 7/5/2021 18:35:33'!
ERROR!

!testRun: #JugadorDeRondaTest #test02JugadorConUnaCartaTiraEsaCarta stamp: 'JN 7/5/2021 18:35:33'!
ERROR!

!testRun: #JugadorDeRondaTest #test02JugadorConUnaCartaTiraEsaCarta stamp: 'JN 7/5/2021 18:35:38'!
ERROR!

!testRun: #JugadorDeRondaTest #test02JugadorConUnaCartaTiraEsaCarta stamp: 'JN 7/5/2021 18:35:38'!
ERROR!
!JugadorDeRonda methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:37:19' prior: 50863305!
tiraCarta
	
	| carta |
	carta := cartas first.
	^ carta.! !

!testRun: #JugadorDeRondaTest #test01JugadorNoPuedeTirarCartaSinCartas stamp: 'JN 7/5/2021 18:37:21'!
FAILURE!

!testRun: #JugadorDeRondaTest #test02JugadorConUnaCartaTiraEsaCarta stamp: 'JN 7/5/2021 18:37:21'!
ERROR!

!testRun: #JugadorDeRondaTest #test02JugadorConUnaCartaTiraEsaCarta stamp: 'JN 7/5/2021 18:37:24'!
ERROR!

!testRun: #JugadorDeRondaTest #test02JugadorConUnaCartaTiraEsaCarta stamp: 'JN 7/5/2021 18:37:24'!
ERROR!
!JugadorDeRonda methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:37:39' prior: 50863316!
sinCartas

	^ cartas isEmpty .! !

!testRun: #JugadorDeRondaTest #test01JugadorNoPuedeTirarCartaSinCartas stamp: 'JN 7/5/2021 18:37:41'!
FAILURE!

!testRun: #JugadorDeRondaTest #test02JugadorConUnaCartaTiraEsaCarta stamp: 'JN 7/5/2021 18:37:41'!
FAILURE!

!testRun: #JugadorDeRondaTest #test02JugadorConUnaCartaTiraEsaCarta stamp: 'JN 7/5/2021 18:38:07'!
FAILURE!
!JugadorDeRonda methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:41:14' prior: 50863334!
tiraCarta
	
	| carta |
	cartas sinCartas ifTrue: [ self error: self class sinCartasErrorDescription ].
	
	carta := cartas first.
	cartas remove: carta.
	^ carta.! !

!testRun: #JugadorDeRondaTest #test01JugadorNoPuedeTirarCartaSinCartas stamp: 'JN 7/5/2021 18:41:20'!
ERROR!

!testRun: #JugadorDeRondaTest #test02JugadorConUnaCartaTiraEsaCarta stamp: 'JN 7/5/2021 18:41:20'!
ERROR!

!testRun: #JugadorDeRondaTest #test02JugadorConUnaCartaTiraEsaCarta stamp: 'JN 7/5/2021 18:41:26'!
ERROR!

!testRun: #JugadorDeRondaTest #test02JugadorConUnaCartaTiraEsaCarta stamp: 'JN 7/5/2021 18:41:36'!
ERROR!

!testRun: #JugadorDeRondaTest #test02JugadorConUnaCartaTiraEsaCarta stamp: 'JN 7/5/2021 18:41:42'!
ERROR!

!testRun: #JugadorDeRondaTest #test02JugadorConUnaCartaTiraEsaCarta stamp: 'JN 7/5/2021 18:41:42'!
ERROR!
!JugadorDeRonda methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:42:09' prior: 50863368!
tiraCarta
	
	| carta |
	self sinCartas ifTrue: [ self error: self class sinCartasErrorDescription ].
	
	carta := cartas first.
	cartas remove: carta.
	^ carta.! !

!testRun: #JugadorDeRondaTest #test01JugadorNoPuedeTirarCartaSinCartas stamp: 'JN 7/5/2021 18:42:11'!
PASSED!

!testRun: #JugadorDeRondaTest #test02JugadorConUnaCartaTiraEsaCarta stamp: 'JN 7/5/2021 18:42:11'!
ERROR!

!testRun: #JugadorDeRondaTest #test02JugadorConUnaCartaTiraEsaCarta stamp: 'JN 7/5/2021 18:42:11'!
ERROR!
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:43:09' prior: 50863263!
test01JugadorNoPuedeTirarCartaSinCartas

	| jugador |
	
	jugador := JugadorDeRonda conCartas: Set new. 

	self 
		should: [ jugador tiraCarta. ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: JugadorDeRonda sinCartasErrorDescription equals: anError messageText.
			]! !
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:43:28' prior: 50863286!
test02JugadorConUnaCartaTiraEsaCarta

	| jugador carta cartaTirada |
	
	carta := CartaDeTruco anchoDeEspada.
	jugador := JugadorDeRonda conCartas: (Set with: carta). 

	cartaTirada := jugador tiraCarta.
	
	self assert: cartaTirada = carta.
	self assert: jugador sinCartas.! !

!testRun: #JugadorDeRondaTest #test01JugadorNoPuedeTirarCartaSinCartas stamp: 'JN 7/5/2021 18:43:30'!
PASSED!

!testRun: #JugadorDeRondaTest #test02JugadorConUnaCartaTiraEsaCarta stamp: 'JN 7/5/2021 18:43:30'!
ERROR!

!testRun: #JugadorDeRondaTest #test02JugadorConUnaCartaTiraEsaCarta stamp: 'JN 7/5/2021 18:43:30'!
ERROR!
!JugadorDeRonda methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:45:35' prior: 50863397!
tiraCarta
	
	| carta |
	self sinCartas ifTrue: [ self error: self class sinCartasErrorDescription ].
	
	carta := cartas at: 1.
	cartas remove: carta.
	^ carta.! !

!testRun: #JugadorDeRondaTest #test01JugadorNoPuedeTirarCartaSinCartas stamp: 'JN 7/5/2021 18:45:37'!
PASSED!

!testRun: #JugadorDeRondaTest #test02JugadorConUnaCartaTiraEsaCarta stamp: 'JN 7/5/2021 18:45:37'!
ERROR!

!testRun: #JugadorDeRondaTest #test02JugadorConUnaCartaTiraEsaCarta stamp: 'JN 7/5/2021 18:45:37'!
ERROR!
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:46:18' prior: 50863416!
test01JugadorNoPuedeTirarCartaSinCartas

	| jugador |
	
	jugador := JugadorDeRonda conCartas: OrderedCollection new. 

	self 
		should: [ jugador tiraCarta. ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: JugadorDeRonda sinCartasErrorDescription equals: anError messageText.
			]! !
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:46:29' prior: 50863429!
test02JugadorConUnaCartaTiraEsaCarta

	| jugador carta cartaTirada |
	
	carta := CartaDeTruco anchoDeEspada.
	jugador := JugadorDeRonda conCartas: (OrderedCollection with: carta). 

	cartaTirada := jugador tiraCarta.
	
	self assert: cartaTirada = carta.
	self assert: jugador sinCartas.! !
!JugadorDeRonda methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:46:52' prior: 50863451!
tiraCarta
	
	| carta |
	self sinCartas ifTrue: [ self error: self class sinCartasErrorDescription ].
	
	carta := cartas first.
	cartas removeFirst.
	^ carta.! !

!testRun: #JugadorDeRondaTest #test01JugadorNoPuedeTirarCartaSinCartas stamp: 'JN 7/5/2021 18:46:54'!
PASSED!

!testRun: #JugadorDeRondaTest #test02JugadorConUnaCartaTiraEsaCarta stamp: 'JN 7/5/2021 18:46:54'!
PASSED!

!testRun: #JugadorDeRondaTest #test01JugadorNoPuedeTirarCartaSinCartas stamp: 'JN 7/5/2021 18:46:57'!
PASSED!

!testRun: #JugadorDeRondaTest #test02JugadorConUnaCartaTiraEsaCarta stamp: 'JN 7/5/2021 18:46:59'!
PASSED!
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:47:18'!
test02JugadorConUnaCartaTiraEsaCartaYNoQuedaEnSuMano

	| jugador carta cartaTirada |
	
	carta := CartaDeTruco anchoDeEspada.
	jugador := JugadorDeRonda conCartas: (OrderedCollection with: carta). 

	cartaTirada := jugador tiraCarta.
	
	self assert: cartaTirada = carta.
	self assert: jugador sinCartas.! !

!methodRemoval: JugadorDeRondaTest #test02JugadorConUnaCartaTiraEsaCarta stamp: 'JN 7/5/2021 18:47:23'!
test02JugadorConUnaCartaTiraEsaCarta

	| jugador carta cartaTirada |
	
	carta := CartaDeTruco anchoDeEspada.
	jugador := JugadorDeRonda conCartas: (OrderedCollection with: carta). 

	cartaTirada := jugador tiraCarta.
	
	self assert: cartaTirada = carta.
	self assert: jugador sinCartas.!
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:47:37' prior: 50863470!
test01JugadorNoPuedeTirarCartaSinCartas

	| jugador |
	
	jugador := JugadorDeRonda conCartas: OrderedCollection new. 

	self 
		should: [ jugador tiraCarta. ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: JugadorDeRonda sinCartasErrorDescription equals: anError messageText.
			self assert: jugador sinCartas.
			]! !

!testRun: #JugadorDeRondaTest #test01JugadorNoPuedeTirarCartaSinCartas stamp: 'JN 7/5/2021 18:47:39'!
PASSED!

!testRun: #JugadorDeRondaTest #test02JugadorConUnaCartaTiraEsaCartaYNoQuedaEnSuMano stamp: 'JN 7/5/2021 18:47:39'!
PASSED!
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:48:24'!
test02JugadorNoPuedeTenerMasDe3Cartas

	| jugador carta cartaTirada |
	
	carta := CartaDeTruco anchoDeEspada.
	jugador := JugadorDeRonda conCartas: (OrderedCollection with: carta). 

	! !
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:51:05' prior: 50863566!
test02JugadorNoPuedeTenerMasDe3Cartas

	| jugador carta |
	
	carta := CartaDeTruco anchoDeEspada.
	
	self 
		should: [ JugadorDeRonda conCartas: (OrderedCollection with: carta with: carta with: carta with: carta) ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: JugadorDeRonda maximoTresCartasErrorDescription equals: anError messageText.
			self assert: jugador sinCartas.
			]

	! !
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:51:21' prior: 50863576!
test02JugadorNoPuedeTenerMasDe3Cartas

	| carta |
	
	carta := CartaDeTruco anchoDeEspada.
	
	self 
		should: [ JugadorDeRonda conCartas: (OrderedCollection with: carta with: carta with: carta with: carta) ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: JugadorDeRonda maximoTresCartasErrorDescription equals: anError messageText.
			]

	! !

!testRun: #JugadorDeRondaTest #test02JugadorNoPuedeTenerMasDe3Cartas stamp: 'JN 7/5/2021 18:51:27'!
FAILURE!

!testRun: #JugadorDeRondaTest #test02JugadorNoPuedeTenerMasDe3Cartas stamp: 'JN 7/5/2021 18:51:27'!
FAILURE!
!JugadorDeRonda class methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:52:19' prior: 50863238!
conCartas: coleccionDeCartas
	coleccionDeCartas size = 3 ifFalse: [ self error: self aa].
	
	^ self new initializeWith: coleccionDeCartas.! !
!JugadorDeRonda class methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:52:44' prior: 50863616!
conCartas: coleccionDeCartas

	coleccionDeCartas size = 3 ifFalse: [ self error: self maximoTresCartasErrorDescription ].
	
	^ self new initializeWith: coleccionDeCartas.! !
!JugadorDeRonda class methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:53:10'!
maximoTresCartasErrorDescription

	^'Jugador de ronda solo puede arrancar con exactamente 3 cartas.'! !

!testRun: #JugadorDeRondaTest #test02JugadorNoPuedeTenerMasDe3Cartas stamp: 'JN 7/5/2021 18:53:15'!
PASSED!
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:54:00'!
test02JugadorSoloPuedeArrancarConExactamenteTresCartas

	| carta |
	
	carta := CartaDeTruco anchoDeEspada.
	
	self 
		should: [ JugadorDeRonda conCartas: (OrderedCollection with: carta with: carta with: carta with: carta) ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: JugadorDeRonda maximoTresCartasErrorDescription equals: anError messageText.
			].
	self 
		should: [ JugadorDeRonda conCartas: (OrderedCollection with: carta with: carta) ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: JugadorDeRonda maximoTresCartasErrorDescription equals: anError messageText.
			]

	! !

!testRun: #JugadorDeRondaTest #test02JugadorSoloPuedeArrancarConExactamenteTresCartas stamp: 'JN 7/5/2021 18:54:05'!
PASSED!

!methodRemoval: JugadorDeRondaTest #test02JugadorNoPuedeTenerMasDe3Cartas stamp: 'JN 7/5/2021 18:54:43'!
test02JugadorNoPuedeTenerMasDe3Cartas

	| carta |
	
	carta := CartaDeTruco anchoDeEspada.
	
	self 
		should: [ JugadorDeRonda conCartas: (OrderedCollection with: carta with: carta with: carta with: carta) ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: JugadorDeRonda maximoTresCartasErrorDescription equals: anError messageText.
			]

	!
!JugadorDeRonda class methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:55:15'!
noSePuedeCrearSinExactamenteTresCartas

	^'Jugador de ronda solo puede arrancar con exactamente 3 cartas.'! !
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:55:15' prior: 50863643!
test02JugadorSoloPuedeArrancarConExactamenteTresCartas

	| carta |
	
	carta := CartaDeTruco anchoDeEspada.
	
	self 
		should: [ JugadorDeRonda conCartas: (OrderedCollection with: carta with: carta with: carta with: carta) ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: JugadorDeRonda noSePuedeCrearSinExactamenteTresCartas equals: anError messageText.
			].
	self 
		should: [ JugadorDeRonda conCartas: (OrderedCollection with: carta with: carta) ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: JugadorDeRonda noSePuedeCrearSinExactamenteTresCartas equals: anError messageText.
			]

	! !
!JugadorDeRonda class methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:55:15' prior: 50863624!
conCartas: coleccionDeCartas

	coleccionDeCartas size = 3 ifFalse: [ self error: self noSePuedeCrearSinExactamenteTresCartas ].
	
	^ self new initializeWith: coleccionDeCartas.! !

!methodRemoval: JugadorDeRonda class #maximoTresCartasErrorDescription stamp: 'JN 7/5/2021 18:55:15'!
maximoTresCartasErrorDescription

	^'Jugador de ronda solo puede arrancar con exactamente 3 cartas.'!

!testRun: #JugadorDeRondaTest #test01JugadorNoPuedeTirarCartaSinCartas stamp: 'JN 7/5/2021 18:55:28'!
ERROR!

!testRun: #JugadorDeRondaTest #test02JugadorConUnaCartaTiraEsaCartaYNoQuedaEnSuMano stamp: 'JN 7/5/2021 18:55:28'!
ERROR!

!testRun: #JugadorDeRondaTest #test02JugadorSoloPuedeArrancarConExactamenteTresCartas stamp: 'JN 7/5/2021 18:55:28'!
PASSED!

!testRun: #JugadorDeRondaTest #test02JugadorConUnaCartaTiraEsaCartaYNoQuedaEnSuMano stamp: 'JN 7/5/2021 18:55:37'!
ERROR!

!testRun: #JugadorDeRondaTest #test02JugadorConUnaCartaTiraEsaCartaYNoQuedaEnSuMano stamp: 'JN 7/5/2021 18:55:37'!
ERROR!
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:56:20'!
test02JugadorSoloPuedeTirarComoMaximo3Veces

	| carta |
	
	carta := CartaDeTruco anchoDeEspada.
	
	self 
		should: [ JugadorDeRonda conCartas: (OrderedCollection with: carta with: carta with: carta with: carta) ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: JugadorDeRonda noSePuedeCrearSinExactamenteTresCartas equals: anError messageText.
			].
	self 
		should: [ JugadorDeRonda conCartas: (OrderedCollection with: carta with: carta) ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: JugadorDeRonda noSePuedeCrearSinExactamenteTresCartas equals: anError messageText.
			]

	! !
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:57:31'!
test02JugadorSoloPuedeTirarComoMaximo3VecesYSinCartasRepetidas

	| carta  jugador cartaTirada |
	
	carta := CartaDeTruco anchoDeEspada.
	jugador := JugadorDeRonda conCartas: (OrderedCollection with: carta with: carta with: carta). 

	cartaTirada := jugador tiraCarta.
	
	self assert: cartaTirada = carta.
	self assert: jugador sinCartas.

	! !

!methodRemoval: JugadorDeRondaTest #test02JugadorSoloPuedeTirarComoMaximo3Veces stamp: 'JN 7/5/2021 18:57:41'!
test02JugadorSoloPuedeTirarComoMaximo3Veces

	| carta |
	
	carta := CartaDeTruco anchoDeEspada.
	
	self 
		should: [ JugadorDeRonda conCartas: (OrderedCollection with: carta with: carta with: carta with: carta) ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: JugadorDeRonda noSePuedeCrearSinExactamenteTresCartas equals: anError messageText.
			].
	self 
		should: [ JugadorDeRonda conCartas: (OrderedCollection with: carta with: carta) ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: JugadorDeRonda noSePuedeCrearSinExactamenteTresCartas equals: anError messageText.
			]

	!

!methodRemoval: JugadorDeRondaTest #test02JugadorSoloPuedeArrancarConExactamenteTresCartas stamp: 'JN 7/5/2021 18:57:45'!
test02JugadorSoloPuedeArrancarConExactamenteTresCartas

	| carta |
	
	carta := CartaDeTruco anchoDeEspada.
	
	self 
		should: [ JugadorDeRonda conCartas: (OrderedCollection with: carta with: carta with: carta with: carta) ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: JugadorDeRonda noSePuedeCrearSinExactamenteTresCartas equals: anError messageText.
			].
	self 
		should: [ JugadorDeRonda conCartas: (OrderedCollection with: carta with: carta) ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: JugadorDeRonda noSePuedeCrearSinExactamenteTresCartas equals: anError messageText.
			]

	!
!JugadorDeRonda class methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 18:58:13' prior: 50863718!
conCartas: coleccionDeCartas
	
	^ self new initializeWith: coleccionDeCartas.! !

!testRun: #JugadorDeRondaTest #test01JugadorNoPuedeTirarCartaSinCartas stamp: 'JN 7/5/2021 18:58:16'!
PASSED!

!testRun: #JugadorDeRondaTest #test02JugadorConUnaCartaTiraEsaCartaYNoQuedaEnSuMano stamp: 'JN 7/5/2021 18:58:16'!
PASSED!

!testRun: #JugadorDeRondaTest #test02JugadorSoloPuedeTirarComoMaximo3VecesYSinCartasRepetidas stamp: 'JN 7/5/2021 18:58:16'!
FAILURE!

!testRun: #JugadorDeRondaTest #test02JugadorSoloPuedeTirarComoMaximo3VecesYSinCartasRepetidas stamp: 'JN 7/5/2021 18:58:16'!
FAILURE!

!testRun: #JugadorDeRondaTest #test01JugadorNoPuedeTirarCartaSinCartas stamp: 'JN 7/5/2021 18:58:21'!
PASSED!

!testRun: #JugadorDeRondaTest #test02JugadorConUnaCartaTiraEsaCartaYNoQuedaEnSuMano stamp: 'JN 7/5/2021 18:58:24'!
PASSED!

!testRun: #JugadorDeRondaTest #test02JugadorSoloPuedeTirarComoMaximo3VecesYSinCartasRepetidas stamp: 'JN 7/5/2021 18:58:29'!
FAILURE!

!testRun: #JugadorDeRondaTest #test02JugadorSoloPuedeTirarComoMaximo3VecesYSinCartasRepetidas stamp: 'JN 7/5/2021 18:58:29'!
FAILURE!
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:00:10'!
test01SoloSePuedeCrearUnJugadorConExactamente3Cartas

	
	
	self 
		should: [ JugadorDeRonda conCartas: OrderedCollection new.  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: JugadorDeRonda noSePuedeCrearSinExactamenteTresCartas equals: anError messageText.
			]
! !
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:00:20' prior: 50863877!
test01SoloSePuedeCrearUnJugadorConExactamente3Cartas

	self 
		should: [ JugadorDeRonda conCartas: OrderedCollection new.  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: JugadorDeRonda noSePuedeCrearSinExactamenteTresCartas equals: anError messageText.
			]
! !

!testRun: #JugadorDeRondaTest #test01SoloSePuedeCrearUnJugadorConExactamente3Cartas stamp: 'JN 7/5/2021 19:00:22'!
FAILURE!

!testRun: #JugadorDeRondaTest #test01SoloSePuedeCrearUnJugadorConExactamente3Cartas stamp: 'JN 7/5/2021 19:00:22'!
FAILURE!
!JugadorDeRonda class methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:00:56' prior: 50863840!
conCartas: coleccionDeCartas
	
	coleccionDeCartas size = 3 ifFalse: [ self error: self noSePuedeCrearSinExactamenteTresCartas. ].
	
	^ self new initializeWith: coleccionDeCartas.! !
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:01:12'!
test01NoSePuedeCrearUnJugadorSinExactamente3Cartas

	self 
		should: [ JugadorDeRonda conCartas: OrderedCollection new.  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: JugadorDeRonda noSePuedeCrearSinExactamenteTresCartas equals: anError messageText.
			]
! !

!methodRemoval: JugadorDeRondaTest #test01SoloSePuedeCrearUnJugadorConExactamente3Cartas stamp: 'JN 7/5/2021 19:01:15'!
test01SoloSePuedeCrearUnJugadorConExactamente3Cartas

	self 
		should: [ JugadorDeRonda conCartas: OrderedCollection new.  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: JugadorDeRonda noSePuedeCrearSinExactamenteTresCartas equals: anError messageText.
			]
!

!testRun: #JugadorDeRondaTest #test01NoSePuedeCrearUnJugadorSinExactamente3Cartas stamp: 'JN 7/5/2021 19:01:17'!
PASSED!
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:01:29'!
test09JugadorNoPuedeTirarCartaSinCartas

	| jugador |
	
	jugador := JugadorDeRonda conCartas: OrderedCollection new. 

	self 
		should: [ jugador tiraCarta. ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: JugadorDeRonda sinCartasErrorDescription equals: anError messageText.
			self assert: jugador sinCartas.
			]! !

!methodRemoval: JugadorDeRondaTest #test01JugadorNoPuedeTirarCartaSinCartas stamp: 'JN 7/5/2021 19:01:29'!
test01JugadorNoPuedeTirarCartaSinCartas

	| jugador |
	
	jugador := JugadorDeRonda conCartas: OrderedCollection new. 

	self 
		should: [ jugador tiraCarta. ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: JugadorDeRonda sinCartasErrorDescription equals: anError messageText.
			self assert: jugador sinCartas.
			]!

!testRun: #JugadorDeRondaTest #test01NoSePuedeCrearUnJugadorSinExactamente3Cartas stamp: 'JN 7/5/2021 19:01:31'!
PASSED!
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:02:09'!
test02NoSePuedeCrearUnJugadorConCartasRepetidas

	| jugador carta cartaTirada |
	
	carta := CartaDeTruco anchoDeEspada.
	jugador := JugadorDeRonda conCartas: (OrderedCollection with: carta with: carta with: carta). 

	cartaTirada := jugador tiraCarta.
	
	self assert: cartaTirada = carta.
	self assert: jugador sinCartas.! !
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:03:00' prior: 50863983!
test02NoSePuedeCrearUnJugadorConCartasRepetidas

	| carta |
	carta := CartaDeTruco anchoDeEspada.

	self 
		should: [ JugadorDeRonda conCartas: (OrderedCollection with: carta with: carta with: carta).   ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: JugadorDeRonda noSePuedeCrearConCartasRepetidas equals: anError messageText.
			]! !

!testRun: #JugadorDeRondaTest #test02NoSePuedeCrearUnJugadorConCartasRepetidas stamp: 'JN 7/5/2021 19:03:06'!
FAILURE!

!testRun: #JugadorDeRondaTest #test02NoSePuedeCrearUnJugadorConCartasRepetidas stamp: 'JN 7/5/2021 19:03:06'!
FAILURE!
!JugadorDeRonda class methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:05:48' prior: 50863911!
conCartas: coleccionDeCartas
	
	coleccionDeCartas asSet size = 3 ifFalse: [ self error: self noSePuedeCrearSinExactamenteTresCartas. ].
	
	^ self new initializeWith: coleccionDeCartas.! !

!testRun: #JugadorDeRondaTest #test01NoSePuedeCrearUnJugadorSinExactamente3Cartas stamp: 'JN 7/5/2021 19:05:52'!
PASSED!

!testRun: #JugadorDeRondaTest #test02NoSePuedeCrearUnJugadorConCartasRepetidas stamp: 'JN 7/5/2021 19:05:57'!
ERROR!

!testRun: #JugadorDeRondaTest #test02NoSePuedeCrearUnJugadorConCartasRepetidas stamp: 'JN 7/5/2021 19:05:57'!
ERROR!
!JugadorDeRonda class methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:06:22'!
noSePuedeCrearConCartasRepetidas

	^'Jugador de ronda solo puede arrancar con exactamente 3 cartas distintas.'! !
!JugadorDeRonda class methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:07:20'!
cartasEnManoInvalidasErrorDescription

	^'Jugador de ronda solo puede arrancar con exactamente 3 cartas distintas.'! !

!methodRemoval: JugadorDeRonda class #noSePuedeCrearConCartasRepetidas stamp: 'JN 7/5/2021 19:07:27'!
noSePuedeCrearConCartasRepetidas

	^'Jugador de ronda solo puede arrancar con exactamente 3 cartas distintas.'!

!methodRemoval: JugadorDeRonda class #noSePuedeCrearSinExactamenteTresCartas stamp: 'JN 7/5/2021 19:07:32'!
noSePuedeCrearSinExactamenteTresCartas

	^'Jugador de ronda solo puede arrancar con exactamente 3 cartas.'!
!JugadorDeRonda class methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:07:41' prior: 50864020!
conCartas: coleccionDeCartas
	
	coleccionDeCartas asSet size = 3 ifFalse: [ self error: self cartasEnManoInvalidasErrorDescription. ].
	
	^ self new initializeWith: coleccionDeCartas.! !
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:07:54' prior: 50863920!
test01NoSePuedeCrearUnJugadorSinExactamente3Cartas

	self 
		should: [ JugadorDeRonda conCartas: OrderedCollection new.  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: JugadorDeRonda cartasEnManoInvalidasErrorDescription equals: anError messageText.
			]
! !
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:07:59' prior: 50863997!
test02NoSePuedeCrearUnJugadorConCartasRepetidas

	| carta |
	carta := CartaDeTruco anchoDeEspada.

	self 
		should: [ JugadorDeRonda conCartas: (OrderedCollection with: carta with: carta with: carta).   ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: JugadorDeRonda cartasEnManoInvalidasErrorDescription equals: anError messageText.
			]! !

!testRun: #JugadorDeRondaTest #test02NoSePuedeCrearUnJugadorConCartasRepetidas stamp: 'JN 7/5/2021 19:08:01'!
PASSED!
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:08:12'!
test08JugadorConUnaCartaTiraEsaCartaYNoQuedaEnSuMano

	| jugador carta cartaTirada |
	
	carta := CartaDeTruco anchoDeEspada.
	jugador := JugadorDeRonda conCartas: (OrderedCollection with: carta). 

	cartaTirada := jugador tiraCarta.
	
	self assert: cartaTirada = carta.
	self assert: jugador sinCartas.! !

!methodRemoval: JugadorDeRondaTest #test02JugadorConUnaCartaTiraEsaCartaYNoQuedaEnSuMano stamp: 'JN 7/5/2021 19:08:12'!
test02JugadorConUnaCartaTiraEsaCartaYNoQuedaEnSuMano

	| jugador carta cartaTirada |
	
	carta := CartaDeTruco anchoDeEspada.
	jugador := JugadorDeRonda conCartas: (OrderedCollection with: carta). 

	cartaTirada := jugador tiraCarta.
	
	self assert: cartaTirada = carta.
	self assert: jugador sinCartas.!
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:08:20'!
test07JugadorSoloPuedeTirarComoMaximo3VecesYSinCartasRepetidas

	| carta  jugador cartaTirada |
	
	carta := CartaDeTruco anchoDeEspada.
	jugador := JugadorDeRonda conCartas: (OrderedCollection with: carta with: carta with: carta). 

	cartaTirada := jugador tiraCarta.
	
	self assert: cartaTirada = carta.
	self assert: jugador sinCartas.

	! !

!methodRemoval: JugadorDeRondaTest #test02JugadorSoloPuedeTirarComoMaximo3VecesYSinCartasRepetidas stamp: 'JN 7/5/2021 19:08:20'!
test02JugadorSoloPuedeTirarComoMaximo3VecesYSinCartasRepetidas

	| carta  jugador cartaTirada |
	
	carta := CartaDeTruco anchoDeEspada.
	jugador := JugadorDeRonda conCartas: (OrderedCollection with: carta with: carta with: carta). 

	cartaTirada := jugador tiraCarta.
	
	self assert: cartaTirada = carta.
	self assert: jugador sinCartas.

	!

!testRun: #JugadorDeRondaTest #test01NoSePuedeCrearUnJugadorSinExactamente3Cartas stamp: 'JN 7/5/2021 19:08:26'!
PASSED!

!testRun: #JugadorDeRondaTest #test02NoSePuedeCrearUnJugadorConCartasRepetidas stamp: 'JN 7/5/2021 19:08:33'!
PASSED!
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:11:20'!
test03JugadorSoloPuedeTirarComoMaximo3Veces

	| jugador anchoDeBasto anchoDeEspada primeraCartaTirada segundaCartaTirada sieteDeEspada terceraCartaTirada |
	
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .

	jugador := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada). 

	primeraCartaTirada := jugador tiraCarta.
	segundaCartaTirada := jugador tiraCarta.
	terceraCartaTirada := jugador tiraCarta.

	
	self assert: primeraCartaTirada = anchoDeEspada.
	self assert: segundaCartaTirada = anchoDeBasto.
	self assert: terceraCartaTirada = sieteDeEspada.
	self assert: jugador sinCartas.

	! !

!testRun: #JugadorDeRondaTest #test03JugadorSoloPuedeTirarComoMaximo3Veces stamp: 'JN 7/5/2021 19:11:32'!
PASSED!
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:12:04'!
test03JugadorSoloPuedeTirarComoMaximo3VecesYSeQuedaSinCartas

	| jugador anchoDeBasto anchoDeEspada primeraCartaTirada segundaCartaTirada sieteDeEspada terceraCartaTirada |
	
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .

	jugador := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada). 

	primeraCartaTirada := jugador tiraCarta.
	segundaCartaTirada := jugador tiraCarta.
	terceraCartaTirada := jugador tiraCarta.

	
	self assert: primeraCartaTirada = anchoDeEspada.
	self assert: segundaCartaTirada = anchoDeBasto.
	self assert: terceraCartaTirada = sieteDeEspada.
	self assert: jugador sinCartas.

	! !

!methodRemoval: JugadorDeRondaTest #test03JugadorSoloPuedeTirarComoMaximo3Veces stamp: 'JN 7/5/2021 19:12:09'!
test03JugadorSoloPuedeTirarComoMaximo3Veces

	| jugador anchoDeBasto anchoDeEspada primeraCartaTirada segundaCartaTirada sieteDeEspada terceraCartaTirada |
	
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .

	jugador := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada). 

	primeraCartaTirada := jugador tiraCarta.
	segundaCartaTirada := jugador tiraCarta.
	terceraCartaTirada := jugador tiraCarta.

	
	self assert: primeraCartaTirada = anchoDeEspada.
	self assert: segundaCartaTirada = anchoDeBasto.
	self assert: terceraCartaTirada = sieteDeEspada.
	self assert: jugador sinCartas.

	!

!methodRemoval: JugadorDeRondaTest #test07JugadorSoloPuedeTirarComoMaximo3VecesYSinCartasRepetidas stamp: 'JN 7/5/2021 19:12:31'!
test07JugadorSoloPuedeTirarComoMaximo3VecesYSinCartasRepetidas

	| carta  jugador cartaTirada |
	
	carta := CartaDeTruco anchoDeEspada.
	jugador := JugadorDeRonda conCartas: (OrderedCollection with: carta with: carta with: carta). 

	cartaTirada := jugador tiraCarta.
	
	self assert: cartaTirada = carta.
	self assert: jugador sinCartas.

	!

!methodRemoval: JugadorDeRondaTest #test08JugadorConUnaCartaTiraEsaCartaYNoQuedaEnSuMano stamp: 'JN 7/5/2021 19:12:36'!
test08JugadorConUnaCartaTiraEsaCartaYNoQuedaEnSuMano

	| jugador carta cartaTirada |
	
	carta := CartaDeTruco anchoDeEspada.
	jugador := JugadorDeRonda conCartas: (OrderedCollection with: carta). 

	cartaTirada := jugador tiraCarta.
	
	self assert: cartaTirada = carta.
	self assert: jugador sinCartas.!
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:13:49'!
test03JugadorTiraLas3CartasEnOrden

	| jugador anchoDeBasto anchoDeEspada primeraCartaTirada segundaCartaTirada sieteDeEspada terceraCartaTirada |
	
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .

	jugador := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada). 

	primeraCartaTirada := jugador tiraCarta.
	segundaCartaTirada := jugador tiraCarta.
	terceraCartaTirada := jugador tiraCarta.

	
	self assert: primeraCartaTirada = anchoDeEspada.
	self assert: segundaCartaTirada = anchoDeBasto.
	self assert: terceraCartaTirada = sieteDeEspada.
	self assert: jugador sinCartas.

	! !

!methodRemoval: JugadorDeRondaTest #test03JugadorSoloPuedeTirarComoMaximo3VecesYSeQuedaSinCartas stamp: 'JN 7/5/2021 19:13:49'!
test03JugadorSoloPuedeTirarComoMaximo3VecesYSeQuedaSinCartas

	| jugador anchoDeBasto anchoDeEspada primeraCartaTirada segundaCartaTirada sieteDeEspada terceraCartaTirada |
	
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .

	jugador := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada). 

	primeraCartaTirada := jugador tiraCarta.
	segundaCartaTirada := jugador tiraCarta.
	terceraCartaTirada := jugador tiraCarta.

	
	self assert: primeraCartaTirada = anchoDeEspada.
	self assert: segundaCartaTirada = anchoDeBasto.
	self assert: terceraCartaTirada = sieteDeEspada.
	self assert: jugador sinCartas.

	!

!testRun: #JugadorDeRondaTest #test03JugadorTiraLas3CartasEnOrden stamp: 'JN 7/5/2021 19:13:55'!
PASSED!
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:14:08'!
test04JugadorNoPuedeTirarCuandoSeQuedaSinCartas

	| jugador |
	
	jugador := JugadorDeRonda conCartas: OrderedCollection new. 

	self 
		should: [ jugador tiraCarta. ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: JugadorDeRonda sinCartasErrorDescription equals: anError messageText.
			self assert: jugador sinCartas.
			]! !

!methodRemoval: JugadorDeRondaTest #test09JugadorNoPuedeTirarCartaSinCartas stamp: 'JN 7/5/2021 19:14:12'!
test09JugadorNoPuedeTirarCartaSinCartas

	| jugador |
	
	jugador := JugadorDeRonda conCartas: OrderedCollection new. 

	self 
		should: [ jugador tiraCarta. ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: JugadorDeRonda sinCartasErrorDescription equals: anError messageText.
			self assert: jugador sinCartas.
			]!
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:16:48' prior: 50864339!
test04JugadorNoPuedeTirarCuandoSeQuedaSinCartas

	| jugador anchoDeBasto anchoDeEspada sieteDeEspada |
	
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .

	jugador := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada). 
	
	jugador tiraCarta.
	jugador tiraCarta.
	jugador tiraCarta.
	
	self 
		should: [ jugador tiraCarta ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: JugadorDeRonda sinCartasErrorDescription equals: anError messageText.
			]
	
	
	
	
	
	! !

!testRun: #JugadorDeRondaTest #test04JugadorNoPuedeTirarCuandoSeQuedaSinCartas stamp: 'JN 7/5/2021 19:16:54'!
PASSED!

!testRun: #JugadorDeRondaTest #test01NoSePuedeCrearUnJugadorSinExactamente3Cartas stamp: 'JN 7/5/2021 19:16:57'!
PASSED!

!testRun: #JugadorDeRondaTest #test02NoSePuedeCrearUnJugadorConCartasRepetidas stamp: 'JN 7/5/2021 19:16:57'!
PASSED!

!testRun: #JugadorDeRondaTest #test03JugadorTiraLas3CartasEnOrden stamp: 'JN 7/5/2021 19:16:57'!
PASSED!

!testRun: #JugadorDeRondaTest #test04JugadorNoPuedeTirarCuandoSeQuedaSinCartas stamp: 'JN 7/5/2021 19:16:57'!
PASSED!
!JugadorDeRonda methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:18:10' prior: 50863497!
tiraCarta
	
	
	self sinCartas ifTrue: [ self error: self class sinCartasErrorDescription ].
	
	^ self tiraPrimerCarta.
	! !
!JugadorDeRonda methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:18:23'!
tiraPrimerCarta

	| carta |
	carta := cartas first.
	cartas removeFirst.
	^ carta.
	! !

!testRun: #JugadorDeRondaTest #test01NoSePuedeCrearUnJugadorSinExactamente3Cartas stamp: 'JN 7/5/2021 19:18:28'!
PASSED!

!testRun: #JugadorDeRondaTest #test02NoSePuedeCrearUnJugadorConCartasRepetidas stamp: 'JN 7/5/2021 19:18:28'!
PASSED!

!testRun: #JugadorDeRondaTest #test03JugadorTiraLas3CartasEnOrden stamp: 'JN 7/5/2021 19:18:28'!
PASSED!

!testRun: #JugadorDeRondaTest #test04JugadorNoPuedeTirarCuandoSeQuedaSinCartas stamp: 'JN 7/5/2021 19:18:28'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'JN 7/5/2021 19:18:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'JN 7/5/2021 19:18:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'JN 7/5/2021 19:18:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'JN 7/5/2021 19:18:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'JN 7/5/2021 19:18:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'JN 7/5/2021 19:18:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'JN 7/5/2021 19:18:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'JN 7/5/2021 19:18:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'JN 7/5/2021 19:18:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'JN 7/5/2021 19:18:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'JN 7/5/2021 19:18:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'JN 7/5/2021 19:18:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'JN 7/5/2021 19:18:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'JN 7/5/2021 19:18:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'JN 7/5/2021 19:18:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'JN 7/5/2021 19:18:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'JN 7/5/2021 19:18:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'JN 7/5/2021 19:18:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInválida stamp: 'JN 7/5/2021 19:18:30'!
PASSED!
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:20:16' prior: 50864077!
test01NoSePuedeCrearUnJugadorSinExactamente3Cartas

	| anchoDeBasto anchoDeEspada sieteDeEspada sieteDeOro |
	self 
		should: [ JugadorDeRonda conCartas: OrderedCollection new.  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: JugadorDeRonda cartasEnManoInvalidasErrorDescription equals: anError messageText.
			].

	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	sieteDeOro := CartaDeTruco sieteDeOro .


	self 
		should: [ JugadorDeRonda conCartas: 
	(OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada with: sieteDeOro).  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: JugadorDeRonda cartasEnManoInvalidasErrorDescription equals: anError messageText.
			].
	 ! !

!testRun: #JugadorDeRondaTest #test01NoSePuedeCrearUnJugadorSinExactamente3Cartas stamp: 'JN 7/5/2021 19:20:22'!
PASSED!

!testRun: #JugadorDeRondaTest #test02NoSePuedeCrearUnJugadorConCartasRepetidas stamp: 'JN 7/5/2021 19:20:23'!
PASSED!

!testRun: #JugadorDeRondaTest #test03JugadorTiraLas3CartasEnOrden stamp: 'JN 7/5/2021 19:20:26'!
PASSED!

!testRun: #JugadorDeRondaTest #test04JugadorNoPuedeTirarCuandoSeQuedaSinCartas stamp: 'JN 7/5/2021 19:20:28'!
PASSED!

TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'JN 7/5/2021 19:21:36'!
TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'no messages' stamp: 'JN 7/5/2021 19:21:59'!
test01

	| mano |
	mano := JugadorDeRonda ! !

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'JN 7/5/2021 19:25:33'!
Object subclass: #Ronda
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:25:25' prior: 50864561!
test01

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .

	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada).
	pie := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada).  
	
	self
		should: [ Ronda conMano: mano yPie: pie. ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Ronda jugadoresConCartasRepetidasErrorDescription equals: anError messageText.
			]! !

!classRenamed: #Ronda as: #RondaDeTruco stamp: 'JN 7/5/2021 19:25:49'!
Smalltalk renameClassNamed: #Ronda as: #RondaDeTruco!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:25:49' prior: 50864573!
test01

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .

	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada).
	pie := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada).  
	
	self
		should: [ RondaDeTruco conMano: mano yPie: pie. ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco jugadoresConCartasRepetidasErrorDescription equals: anError messageText.
			]! !
!RondaDeTruco class methodsFor: 'no messages' stamp: 'JN 7/5/2021 19:28:18'!
conMano: jugadorMano yPie: jugadorPie

	! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:29:10' prior: 50864625!
conMano: jugadorMano yPie: jugadorPie

	self error: self 
	! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:29:23' prior: 50864630!
conMano: jugadorMano yPie: jugadorPie

	self error: self jugadoresConCartasRepetidasErrorDescription.
	! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:29:35'!
jugadoresConCartasRepetidasErrorDescription

	^'Los jugadores tienen cartas repetidas'.
	! !

!testRun: #RondaDeTrucoTest #test01 stamp: 'JN 7/5/2021 19:29:40'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:30:04'!
test01NoSePuedeCrearUnaRondaConDosJugadoresDeRondaConCartasRepetidasEntreSi

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .

	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada).
	pie := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada).  
	
	self
		should: [ RondaDeTruco conMano: mano yPie: pie. ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco jugadoresConCartasRepetidasErrorDescription equals: anError messageText.
			]! !

!methodRemoval: RondaDeTrucoTest #test01 stamp: 'JN 7/5/2021 19:30:10'!
test01

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .

	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada).
	pie := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada).  
	
	self
		should: [ RondaDeTruco conMano: mano yPie: pie. ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco jugadoresConCartasRepetidasErrorDescription equals: anError messageText.
			]!

!classDefinition: #JugadorDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'JN 7/5/2021 19:42:51'!
Object subclass: #JugadorDeTruco
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:42:46'!
test01

	| mano pie |
	mano := JugadorDeTruco new.
	pie := JugadorDeTruco new. 
	
	self 
		should: [ RondaDeTruco paraMano: mano yPie: pie conCartas: OrderedCollection new. ] 
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert Ronda cartasInvalidasErrorDescription equals: anError messageText .
			]
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:43:09' prior: 50864707!
test01

	| mano pie |
	mano := JugadorDeTruco new.
	pie := JugadorDeTruco new. 
	
	self 
		should: [ RondaDeTruco paraMano: mano yPie: pie conCartas: OrderedCollection new. ] 
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco cartasInvalidasErrorDescription equals: anError messageText .
			]
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:43:34'!
test01NoSePuedeCrearUnaRondaSinCartas

	| mano pie |
	mano := JugadorDeTruco new.
	pie := JugadorDeTruco new. 
	
	self 
		should: [ RondaDeTruco paraMano: mano yPie: pie conCartas: OrderedCollection new. ] 
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco cartasInvalidasErrorDescription equals: anError messageText .
			]
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:43:42'!
test99NoSePuedeCrearUnaRondaConDosJugadoresDeRondaConCartasRepetidasEntreSi

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .

	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada).
	pie := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada).  
	
	self
		should: [ RondaDeTruco conMano: mano yPie: pie. ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco jugadoresConCartasRepetidasErrorDescription equals: anError messageText.
			]! !

!methodRemoval: RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConDosJugadoresDeRondaConCartasRepetidasEntreSi stamp: 'JN 7/5/2021 19:43:42'!
test01NoSePuedeCrearUnaRondaConDosJugadoresDeRondaConCartasRepetidasEntreSi

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .

	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada).
	pie := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada).  
	
	self
		should: [ RondaDeTruco conMano: mano yPie: pie. ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco jugadoresConCartasRepetidasErrorDescription equals: anError messageText.
			]!

!methodRemoval: RondaDeTrucoTest #test01 stamp: 'JN 7/5/2021 19:43:48'!
test01

	| mano pie |
	mano := JugadorDeTruco new.
	pie := JugadorDeTruco new. 
	
	self 
		should: [ RondaDeTruco paraMano: mano yPie: pie conCartas: OrderedCollection new. ] 
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco cartasInvalidasErrorDescription equals: anError messageText .
			]
	
	!

!methodRemoval: RondaDeTruco class #jugadoresConCartasRepetidasErrorDescription stamp: 'JN 7/5/2021 19:44:02'!
jugadoresConCartasRepetidasErrorDescription

	^'Los jugadores tienen cartas repetidas'.
	!

!methodRemoval: RondaDeTruco class #conMano:yPie: stamp: 'JN 7/5/2021 19:44:08'!
conMano: jugadorMano yPie: jugadorPie

	self error: self jugadoresConCartasRepetidasErrorDescription.
	!
!RondaDeTruco class methodsFor: 'no messages' stamp: 'JN 7/5/2021 19:44:46'!
paraMano: jugadorMano yPie: jugadorPie conCartas: coleccionDeCartas

	self error: self cartasInvalidasErrorDescription.! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:45:18'!
cartasInvalidasErrorDescription

	^'La cantidad de cartas es invalida'! !

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'JN 7/5/2021 19:45:23'!
PASSED!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'JN 7/5/2021 19:45:31'!
Object subclass: #Ronda
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:42:59'!
test01

	| mano pie |
	mano := JugadorDeTruco new.
	pie := JugadorDeTruco new. 
	
	self 
		should: [ RondaDeTruco paraMano: mano yPie: pie conCartas: OrderedCollection new. ] 
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco cartasInvalidasErrorDescription equals: anError messageText .
			]
	
	! !

!classRenamed: #Ronda as: #Rondaaaaa stamp: 'JN 7/5/2021 19:45:56'!
Smalltalk renameClassNamed: #Ronda as: #Rondaaaaa!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:45:57' prior: 50864852!
test01

	| mano pie |
	mano := JugadorDeTruco new.
	pie := JugadorDeTruco new. 
	
	self 
		should: [ RondaDeTruco paraMano: mano yPie: pie conCartas: OrderedCollection new. ] 
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco cartasInvalidasErrorDescription equals: anError messageText .
			]
	
	! !

!classRemoval: #Rondaaaaa stamp: 'JN 7/5/2021 19:46:16'!
Object subclass: #Rondaaaaa
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'JN 7/5/2021 19:46:23'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:46:44'!
test01NoSePuedeCrearUnaRondaConCartasRepetidas

	| mano pie |
	mano := JugadorDeTruco new.
	pie := JugadorDeTruco new. 
	
	self 
		should: [ RondaDeTruco paraMano: mano yPie: pie conCartas: OrderedCollection new. ] 
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco cartasInvalidasErrorDescription equals: anError messageText .
			]
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:46:51'!
test02NoSePuedeCrearUnaRondaConCartasRepetidas

	| mano pie |
	mano := JugadorDeTruco new.
	pie := JugadorDeTruco new. 
	
	self 
		should: [ RondaDeTruco paraMano: mano yPie: pie conCartas: OrderedCollection new. ] 
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco cartasInvalidasErrorDescription equals: anError messageText .
			]
	
	! !

!methodRemoval: RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCartasRepetidas stamp: 'JN 7/5/2021 19:46:51'!
test01NoSePuedeCrearUnaRondaConCartasRepetidas

	| mano pie |
	mano := JugadorDeTruco new.
	pie := JugadorDeTruco new. 
	
	self 
		should: [ RondaDeTruco paraMano: mano yPie: pie conCartas: OrderedCollection new. ] 
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco cartasInvalidasErrorDescription equals: anError messageText .
			]
	
	!

!methodRemoval: RondaDeTrucoTest #test01 stamp: 'JN 7/5/2021 19:46:58'!
test01

	| mano pie |
	mano := JugadorDeTruco new.
	pie := JugadorDeTruco new. 
	
	self 
		should: [ RondaDeTruco paraMano: mano yPie: pie conCartas: OrderedCollection new. ] 
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco cartasInvalidasErrorDescription equals: anError messageText .
			]
	
	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:47:46' prior: 50864909!
test02NoSePuedeCrearUnaRondaConCartasRepetidas

	| mano pie cartasRepetidas |
	mano := JugadorDeTruco new.
	pie := JugadorDeTruco new. 
	
	cartasRepetidas := OrderedCollection new.
	
	
	self 
		should: [ RondaDeTruco paraMano: mano yPie: pie conCartas: cartasRepetidas ] 
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco cartasInvalidasErrorDescription equals: anError messageText .
			]
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:48:58'!
test02NoSePuedeCrearUnaRondaConCantidadDeCartasInvalida

	| mano pie cartasRepetidas |
	mano := JugadorDeTruco new.
	pie := JugadorDeTruco new. 
	
	cartasRepetidas := OrderedCollection new.

	
	self 
		should: [ RondaDeTruco paraMano: mano yPie: pie conCartas: cartasRepetidas ] 
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco cartasInvalidasErrorDescription equals: anError messageText .
			]
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:50:36'!
test01NoSePuedeCrearUnaRondaConCantidadDeCartasInvalida

	| mano pie cartasRepetidas |
	mano := JugadorDeTruco new.
	pie := JugadorDeTruco new. 
	
	cartasRepetidas := OrderedCollection new.
	cartasRepetidas add: CartaDeTruco anchoDeEspada.
	cartasRepetidas add: CartaDeTruco anchoDeBasto.
	cartasRepetidas add: CartaDeTruco sieteDeEspada .
	cartasRepetidas add: CartaDeTruco sieteDeOro .

	
	self 
		should: [ RondaDeTruco paraMano: mano yPie: pie conCartas: cartasRepetidas ] 
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco cartasInvalidasErrorDescription equals: anError messageText .
			].
	self 
		should: [ RondaDeTruco paraMano: mano yPie: pie conCartas: OrderedCollection new. ] 
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco cartasInvalidasErrorDescription equals: anError messageText .
			]
	
	! !

!methodRemoval: RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaSinCartas stamp: 'JN 7/5/2021 19:50:41'!
test01NoSePuedeCrearUnaRondaSinCartas

	| mano pie |
	mano := JugadorDeTruco new.
	pie := JugadorDeTruco new. 
	
	self 
		should: [ RondaDeTruco paraMano: mano yPie: pie conCartas: OrderedCollection new. ] 
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco cartasInvalidasErrorDescription equals: anError messageText .
			]
	
	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:51:52' prior: 50864988!
test01NoSePuedeCrearUnaRondaConCantidadDeCartasInvalida

	| mano pie cartasParaJugadores |
	mano := JugadorDeTruco new.
	pie := JugadorDeTruco new. 
	
	cartasParaJugadores := OrderedCollection new.
	cartasParaJugadores add: CartaDeTruco anchoDeEspada.
	cartasParaJugadores add: CartaDeTruco anchoDeBasto.
	cartasParaJugadores add: CartaDeTruco sieteDeEspada .
	cartasParaJugadores add: CartaDeTruco sieteDeOro .

	
	self 
		should: [ RondaDeTruco paraMano: mano yPie: pie conCartas: cartasParaJugadores ] 
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco cartasInvalidasErrorDescription equals: anError messageText .
			].
	self 
		should: [ RondaDeTruco paraMano: mano yPie: pie conCartas: OrderedCollection new. ] 
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco cartasInvalidasErrorDescription equals: anError messageText .
			]
	
	! !

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCantidadDeCartasInvalida stamp: 'JN 7/5/2021 19:52:46'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:52:55' prior: 50864954!
test02NoSePuedeCrearUnaRondaConCartasRepetidas

	| mano pie cartasRepetidas |
	mano := JugadorDeTruco new.
	pie := JugadorDeTruco new. 
	
	cartasRepetidas := OrderedCollection new.

	
	self 
		should: [ RondaDeTruco paraMano: mano yPie: pie conCartas: cartasRepetidas ] 
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco cartasInvalidasErrorDescription equals: anError messageText .
			]
	
	! !

!methodRemoval: RondaDeTrucoTest #test02NoSePuedeCrearUnaRondaConCantidadDeCartasInvalida stamp: 'JN 7/5/2021 19:52:59'!
test02NoSePuedeCrearUnaRondaConCantidadDeCartasInvalida

	| mano pie cartasRepetidas |
	mano := JugadorDeTruco new.
	pie := JugadorDeTruco new. 
	
	cartasRepetidas := OrderedCollection new.

	
	self 
		should: [ RondaDeTruco paraMano: mano yPie: pie conCartas: cartasRepetidas ] 
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco cartasInvalidasErrorDescription equals: anError messageText .
			]
	
	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:53:38' prior: 50865072!
test02NoSePuedeCrearUnaRondaConCartasRepetidas

	| mano pie cartasRepetidas |
	mano := JugadorDeTruco new.
	pie := JugadorDeTruco new. 
	
	cartasRepetidas := OrderedCollection new.
	cartasRepetidas add: CartaDeTruco anchoDeEspada.
	cartasRepetidas add: CartaDeTruco anchoDeBasto.
	cartasRepetidas add: CartaDeTruco sieteDeEspada .
	cartasRepetidas add: CartaDeTruco sieteDeOro .
	cartasRepetidas add: CartaDeTruco sieteDeOro .
	cartasRepetidas add: CartaDeTruco sieteDeOro .

	self 
		should: [ RondaDeTruco paraMano: mano yPie: pie conCartas: cartasRepetidas ] 
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco cartasRepetidasErrorDescription equals: anError messageText .
			]
	
	! !

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearUnaRondaConCartasRepetidas stamp: 'JN 7/5/2021 19:53:42'!
ERROR!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearUnaRondaConCartasRepetidas stamp: 'JN 7/5/2021 19:53:42'!
ERROR!
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:55:50' prior: 50864829!
paraMano: jugadorMano yPie: jugadorPie conCartas: coleccionDeCartas
	
	self assertCartasRepetidas.
	
	self error: self cartasInvalidasErrorDescription.! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:57:02'!
assertCartasRepetidas: coleccionDeCartas

	coleccionDeCartas asSet size = 6 ifFalse: [ self error: self cartasInvalidasErrorDescription ].! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:57:23' prior: 50865141!
paraMano: jugadorMano yPie: jugadorPie conCartas: coleccionDeCartas
	
	self assertCartasRepetidas: coleccionDeCartas.
! !

!testRun: #RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCantidadDeCartasInvalida stamp: 'JN 7/5/2021 19:57:27'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearUnaRondaConCartasRepetidas stamp: 'JN 7/5/2021 19:57:30'!
ERROR!

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearUnaRondaConCartasRepetidas stamp: 'JN 7/5/2021 19:57:30'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 19:57:44' prior: 50865107!
test02NoSePuedeCrearUnaRondaConCartasRepetidas

	| mano pie cartasRepetidas |
	mano := JugadorDeTruco new.
	pie := JugadorDeTruco new. 
	
	cartasRepetidas := OrderedCollection new.
	cartasRepetidas add: CartaDeTruco anchoDeEspada.
	cartasRepetidas add: CartaDeTruco anchoDeBasto.
	cartasRepetidas add: CartaDeTruco sieteDeEspada .
	cartasRepetidas add: CartaDeTruco sieteDeOro .
	cartasRepetidas add: CartaDeTruco sieteDeOro .
	cartasRepetidas add: CartaDeTruco sieteDeOro .

	self 
		should: [ RondaDeTruco paraMano: mano yPie: pie conCartas: cartasRepetidas ] 
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco cartasInvalidasErrorDescription equals: anError messageText .
			]
	
	! !

!testRun: #RondaDeTrucoTest #test02NoSePuedeCrearUnaRondaConCartasRepetidas stamp: 'JN 7/5/2021 19:57:46'!
PASSED!

!methodRemoval: RondaDeTrucoTest #test02NoSePuedeCrearUnaRondaConCartasRepetidas stamp: 'JN 7/5/2021 20:07:17'!
test02NoSePuedeCrearUnaRondaConCartasRepetidas

	| mano pie cartasRepetidas |
	mano := JugadorDeTruco new.
	pie := JugadorDeTruco new. 
	
	cartasRepetidas := OrderedCollection new.
	cartasRepetidas add: CartaDeTruco anchoDeEspada.
	cartasRepetidas add: CartaDeTruco anchoDeBasto.
	cartasRepetidas add: CartaDeTruco sieteDeEspada .
	cartasRepetidas add: CartaDeTruco sieteDeOro .
	cartasRepetidas add: CartaDeTruco sieteDeOro .
	cartasRepetidas add: CartaDeTruco sieteDeOro .

	self 
		should: [ RondaDeTruco paraMano: mano yPie: pie conCartas: cartasRepetidas ] 
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco cartasInvalidasErrorDescription equals: anError messageText .
			]
	
	!

!methodRemoval: RondaDeTrucoTest #test01NoSePuedeCrearUnaRondaConCantidadDeCartasInvalida stamp: 'JN 7/5/2021 20:07:22'!
test01NoSePuedeCrearUnaRondaConCantidadDeCartasInvalida

	| mano pie cartasParaJugadores |
	mano := JugadorDeTruco new.
	pie := JugadorDeTruco new. 
	
	cartasParaJugadores := OrderedCollection new.
	cartasParaJugadores add: CartaDeTruco anchoDeEspada.
	cartasParaJugadores add: CartaDeTruco anchoDeBasto.
	cartasParaJugadores add: CartaDeTruco sieteDeEspada .
	cartasParaJugadores add: CartaDeTruco sieteDeOro .

	
	self 
		should: [ RondaDeTruco paraMano: mano yPie: pie conCartas: cartasParaJugadores ] 
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco cartasInvalidasErrorDescription equals: anError messageText .
			].
	self 
		should: [ RondaDeTruco paraMano: mano yPie: pie conCartas: OrderedCollection new. ] 
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco cartasInvalidasErrorDescription equals: anError messageText .
			]
	
	!

!classRemoval: #JugadorDeTruco stamp: 'JN 7/5/2021 20:07:37'!
Object subclass: #JugadorDeTruco
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 20:08:33'!
paraMano: jugadorMano yPie: jugadorPie
	
! !

!methodRemoval: RondaDeTruco class #paraMano:yPie:conCartas: stamp: 'JN 7/5/2021 20:08:38'!
paraMano: jugadorMano yPie: jugadorPie conCartas: coleccionDeCartas
	
	self assertCartasRepetidas: coleccionDeCartas.
!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 20:11:24'!
test02PieNoPuedeTirarPrimero

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeCopa |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada).
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	tresDeCopa := CartaDeTruco copaCon: 3.
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: tresDeCopa).  
	
	ronda := RondaDeTruco conMano: mano yPie: pie.
	
	self
		should: [ pie tirarCartaEn: ronda.  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco noEsElTurnoDelJugadorErrorDescription equals: anError messageText.
			]! !

!testRun: #RondaDeTrucoTest #test02PieNoPuedeTirarPrimero stamp: 'JN 7/5/2021 20:11:36'!
ERROR!

!testRun: #RondaDeTrucoTest #test02PieNoPuedeTirarPrimero stamp: 'JN 7/5/2021 20:11:36'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 20:11:56' prior: 50865282!
test02PieNoPuedeTirarPrimero

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeCopa |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada).
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	tresDeCopa := CartaDeTruco copaCon: 3.
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: tresDeCopa).  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	self
		should: [ pie tirarCartaEn: ronda.  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco noEsElTurnoDelJugadorErrorDescription equals: anError messageText.
			]! !

!testRun: #RondaDeTrucoTest #test02PieNoPuedeTirarPrimero stamp: 'JN 7/5/2021 20:11:58'!
ERROR!

!testRun: #RondaDeTrucoTest #test99NoSePuedeCrearUnaRondaConDosJugadoresDeRondaConCartasRepetidasEntreSi stamp: 'JN 7/5/2021 20:11:58'!
ERROR!

!testRun: #RondaDeTrucoTest #test02PieNoPuedeTirarPrimero stamp: 'JN 7/5/2021 20:12:01'!
ERROR!

!testRun: #RondaDeTrucoTest #test02PieNoPuedeTirarPrimero stamp: 'JN 7/5/2021 20:12:01'!
ERROR!
!JugadorDeRonda methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 20:13:05'!
tirarCartaEn: ronda	
	
	self error: RondaDeTruco noEsElTurnoDelJugadorErrorDescription
	
	
	! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 20:13:22'!
noEsElTurnoDelJugadorErrorDescription

	^'No es el turno del jugador'! !

!testRun: #RondaDeTrucoTest #test02PieNoPuedeTirarPrimero stamp: 'JN 7/5/2021 20:13:27'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 20:16:31'!
test02ManoTiraPrimero

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeCopa |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada).
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	tresDeCopa := CartaDeTruco copaCon: 3.
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: tresDeCopa).  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	
	self assert: mano cantidadDeCartas equals: 2.
	self assert: pie cantidadDeCartas equals: 3.

	
	
	
	
	
	! !
!JugadorDeRonda methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 20:16:45'!
cantidadDeCartas

	^ cartas size .! !

!testRun: #RondaDeTrucoTest #test02PieNoPuedeTirarPrimero stamp: 'JN 7/5/2021 20:16:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ManoTiraPrimero stamp: 'JN 7/5/2021 20:16:51'!
ERROR!

!testRun: #RondaDeTrucoTest #test02ManoTiraPrimero stamp: 'JN 7/5/2021 20:16:51'!
ERROR!
!JugadorDeRonda methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 20:27:26' prior: 50865363!
tirarCartaEn: ronda	
	
	ronda tiraCarta: self.
	"self error: RondaDeTruco noEsElTurnoDelJugadorErrorDescription"
	
	
	! !

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'JN 7/5/2021 20:29:47'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'turno'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 20:30:32'!
test03ManoTiraPrimero

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeCopa |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada).
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	tresDeCopa := CartaDeTruco copaCon: 3.
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: tresDeCopa).  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	
	self assert: mano cantidadDeCartas equals: 2.
	self assert: pie cantidadDeCartas equals: 3.

	
	
	
	
	
	! !

!methodRemoval: RondaDeTrucoTest #test02ManoTiraPrimero stamp: 'JN 7/5/2021 20:30:32'!
test02ManoTiraPrimero

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeCopa |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada).
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	tresDeCopa := CartaDeTruco copaCon: 3.
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: tresDeCopa).  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	
	self assert: mano cantidadDeCartas equals: 2.
	self assert: pie cantidadDeCartas equals: 3.

	
	
	
	
	
	!

!testRun: #RondaDeTrucoTest #test02PieNoPuedeTirarPrimero stamp: 'JN 7/5/2021 20:30:35'!
ERROR!

!testRun: #RondaDeTrucoTest #test02PieNoPuedeTirarPrimero stamp: 'JN 7/5/2021 20:30:35'!
ERROR!
!JugadorDeRonda methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 20:31:08' prior: 50865418!
tirarCartaEn: ronda	
	

	self error: RondaDeTruco noEsElTurnoDelJugadorErrorDescription
	
	
	! !

!testRun: #RondaDeTrucoTest #test02PieNoPuedeTirarPrimero stamp: 'JN 7/5/2021 20:31:11'!
PASSED!
!JugadorDeRonda methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 20:31:50' prior: 50865495!
tirarCartaEn: ronda	
	
	ronda recibeCartaDe: self.
	
	
	! !

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'JN 7/5/2021 20:32:28'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'turno mano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'no messages' stamp: 'JN 7/5/2021 20:32:27'!
recibeCartaDe: jugador

	mano = jugador ifFalse: [ self error: RondaDeTruco noEsElTurnoDelJugadorErrorDescription ].
! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 20:32:55' prior: 50865271!
paraMano: jugadorMano yPie: jugadorPie

	self new initializeWithMano: jugadorMano andPie: jugadorPie.
	
! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 20:33:01' prior: 50865524!
paraMano: jugadorMano yPie: jugadorPie

	^ self new initializeWithMano: jugadorMano andPie: jugadorPie.
	
! !

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'JN 7/5/2021 20:33:21'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'turno mano pie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 20:33:18'!
initializeWithMano: jugadorMano andPie: jugadorPie

	mano := jugadorMano.
	pie := jugadorPie.! !

!testRun: #RondaDeTrucoTest #test02PieNoPuedeTirarPrimero stamp: 'JN 7/5/2021 20:33:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ManoTiraPrimero stamp: 'JN 7/5/2021 20:33:31'!
FAILURE!

!testRun: #RondaDeTrucoTest #test03ManoTiraPrimero stamp: 'JN 7/5/2021 20:33:31'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 20:33:49' prior: 50865517!
recibeCartaDe: jugador

	mano = jugador ifFalse: [ self error: RondaDeTruco noEsElTurnoDelJugadorErrorDescription ].
	jugador tiraCarta.
! !

!testRun: #RondaDeTrucoTest #test03ManoTiraPrimero stamp: 'JN 7/5/2021 20:33:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test02PieNoPuedeTirarPrimero stamp: 'JN 7/5/2021 20:33:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ManoTiraPrimero stamp: 'JN 7/5/2021 20:33:55'!
PASSED!

!testRun: #RondaDeTrucoTest #test02PieNoPuedeTirarPrimero stamp: 'JN 7/5/2021 20:46:52'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ManoTiraPrimero stamp: 'JN 7/5/2021 20:46:54'!
PASSED!
!JugadorDeRonda methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 20:52:14' prior: 50865505!
tirarCartaEn: ronda	
	
	self tirarCartaSiEsMiTurnoEn: ronda.
	"ronda recibeCartaDe: self."
	
	
	! !
!JugadorDeRonda methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 20:53:07' prior: 50865583!
tirarCartaEn: ronda	
	
	ronda recibeCartaDe: self.
	
	
	! !

!testRun: #RondaDeTrucoTest #test02PieNoPuedeTirarPrimero stamp: 'JN 7/5/2021 20:55:31'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ManoTiraPrimero stamp: 'JN 7/5/2021 20:55:33'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 20:56:59'!
test03PieTiraSegundo

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeCopa |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada).
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	tresDeCopa := CartaDeTruco copaCon: 3.
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: tresDeCopa).  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 

	self assert: mano cantidadDeCartas equals: 2.
	self assert: pie cantidadDeCartas equals: 2.

	
	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 20:57:08'!
test04PieTiraSegundo

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeCopa |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada).
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	tresDeCopa := CartaDeTruco copaCon: 3.
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: tresDeCopa).  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 

	self assert: mano cantidadDeCartas equals: 2.
	self assert: pie cantidadDeCartas equals: 2.

	
	
	
	
	
	! !

!methodRemoval: RondaDeTrucoTest #test03PieTiraSegundo stamp: 'JN 7/5/2021 20:57:08'!
test03PieTiraSegundo

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeCopa |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada).
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	tresDeCopa := CartaDeTruco copaCon: 3.
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: tresDeCopa).  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 

	self assert: mano cantidadDeCartas equals: 2.
	self assert: pie cantidadDeCartas equals: 2.

	
	
	
	
	
	!

!testRun: #RondaDeTrucoTest #test04PieTiraSegundo stamp: 'JN 7/5/2021 20:57:13'!
ERROR!

!testRun: #RondaDeTrucoTest #test04PieTiraSegundo stamp: 'JN 7/5/2021 20:57:13'!
ERROR!

!classDefinition: #JugadorDeRonda category: 'ISW1-2021-1C-2doParcial' stamp: 'JN 7/5/2021 20:58:06'!
Object subclass: #JugadorDeRonda
	instanceVariableNames: 'cartas estado'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!JugadorDeRonda methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 20:58:03' prior: 50865590!
tirarCartaEn: ronda	
	
	estado tirarCartaSiEsMiTurnoEn: ronda jugador: self.
	"ronda recibeCartaDe: self."
	
	
	! !
!JugadorDeRonda class methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 20:59:44'!
conCartas: coleccionDeCartas estado: estado 
	
	coleccionDeCartas asSet size = 3 ifFalse: [ self error: self cartasEnManoInvalidasErrorDescription. ].
	
	^ self new initializeWith: coleccionDeCartas.! !
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 20:59:44' prior: 50864282!
test03JugadorTiraLas3CartasEnOrden

	| jugador anchoDeBasto anchoDeEspada primeraCartaTirada segundaCartaTirada sieteDeEspada terceraCartaTirada |
	
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .

	jugador := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada) estado: EstadoMano. 

	primeraCartaTirada := jugador tiraCarta.
	segundaCartaTirada := jugador tiraCarta.
	terceraCartaTirada := jugador tiraCarta.

	
	self assert: primeraCartaTirada = anchoDeEspada.
	self assert: segundaCartaTirada = anchoDeBasto.
	self assert: terceraCartaTirada = sieteDeEspada.
	self assert: jugador sinCartas.

	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 20:59:44' prior: 50864750!
test99NoSePuedeCrearUnaRondaConDosJugadoresDeRondaConCartasRepetidasEntreSi

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .

	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada) estado: EstadoMano.
	pie := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada) estado: EstadoMano.  
	
	self
		should: [ RondaDeTruco conMano: mano yPie: pie. ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco jugadoresConCartasRepetidasErrorDescription equals: anError messageText.
			]! !
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 20:59:44' prior: 50864504!
test01NoSePuedeCrearUnJugadorSinExactamente3Cartas

	| anchoDeBasto anchoDeEspada sieteDeEspada sieteDeOro |
	self 
		should: [ JugadorDeRonda conCartas: OrderedCollection new estado: EstadoMano.  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: JugadorDeRonda cartasEnManoInvalidasErrorDescription equals: anError messageText.
			].

	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	sieteDeOro := CartaDeTruco sieteDeOro .


	self 
		should: [ JugadorDeRonda conCartas: 
	(OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada with: sieteDeOro) estado: EstadoMano.  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: JugadorDeRonda cartasEnManoInvalidasErrorDescription equals: anError messageText.
			].
	 ! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 20:59:44' prior: 50865630!
test04PieTiraSegundo

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeCopa |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada) estado: EstadoMano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	tresDeCopa := CartaDeTruco copaCon: 3.
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: tresDeCopa) estado: EstadoMano.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 

	self assert: mano cantidadDeCartas equals: 2.
	self assert: pie cantidadDeCartas equals: 2.

	
	
	
	
	
	! !
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 20:59:44' prior: 50864369!
test04JugadorNoPuedeTirarCuandoSeQuedaSinCartas

	| jugador anchoDeBasto anchoDeEspada sieteDeEspada |
	
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .

	jugador := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada) estado: EstadoMano. 
	
	jugador tiraCarta.
	jugador tiraCarta.
	jugador tiraCarta.
	
	self 
		should: [ jugador tiraCarta ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: JugadorDeRonda sinCartasErrorDescription equals: anError messageText.
			]
	
	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 20:59:44' prior: 50865319!
test02PieNoPuedeTirarPrimero

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeCopa |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada) estado: EstadoMano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	tresDeCopa := CartaDeTruco copaCon: 3.
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: tresDeCopa) estado: EstadoMano.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	self
		should: [ pie tirarCartaEn: ronda.  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco noEsElTurnoDelJugadorErrorDescription equals: anError messageText.
			]! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 20:59:44' prior: 50865433!
test03ManoTiraPrimero

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeCopa |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada) estado: EstadoMano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	tresDeCopa := CartaDeTruco copaCon: 3.
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: tresDeCopa) estado: EstadoMano.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	
	self assert: mano cantidadDeCartas equals: 2.
	self assert: pie cantidadDeCartas equals: 3.

	
	
	
	
	
	! !
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 20:59:44' prior: 50864090!
test02NoSePuedeCrearUnJugadorConCartasRepetidas

	| carta |
	carta := CartaDeTruco anchoDeEspada.

	self 
		should: [ JugadorDeRonda conCartas: (OrderedCollection with: carta with: carta with: carta) estado: EstadoMano.   ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: JugadorDeRonda cartasEnManoInvalidasErrorDescription equals: anError messageText.
			]! !

!methodRemoval: JugadorDeRonda class #conCartas: stamp: 'JN 7/5/2021 20:59:44'!
conCartas: coleccionDeCartas
	
	coleccionDeCartas asSet size = 3 ifFalse: [ self error: self cartasEnManoInvalidasErrorDescription. ].
	
	^ self new initializeWith: coleccionDeCartas.!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:11:21' prior: 50865859!
test02PieNoPuedeTirarPrimero

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeCopa |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	tresDeCopa := CartaDeTruco copaCon: 3.
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: tresDeCopa) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	self
		should: [ pie tirarCartaEn: ronda.  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco noEsElTurnoDelJugadorErrorDescription equals: anError messageText.
			]! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:11:31' prior: 50865891!
test03ManoTiraPrimero

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeCopa |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	tresDeCopa := CartaDeTruco copaCon: 3.
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: tresDeCopa) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	
	self assert: mano cantidadDeCartas equals: 2.
	self assert: pie cantidadDeCartas equals: 3.

	
	
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test02PieNoPuedeTirarPrimero stamp: 'JN 7/5/2021 21:11:33'!
ERROR!

!testRun: #RondaDeTrucoTest #test02PieNoPuedeTirarPrimero stamp: 'JN 7/5/2021 21:11:33'!
ERROR!
!JugadorDeRonda methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:11:48' prior: 50865701!
tirarCartaEn: ronda	
	
	ronda recibeCartaDe: self.
	
	
	! !

!testRun: #RondaDeTrucoTest #test02PieNoPuedeTirarPrimero stamp: 'JN 7/5/2021 21:11:52'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ManoTiraPrimero stamp: 'JN 7/5/2021 21:11:53'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:12:05' prior: 50865805!
test04PieTiraSegundo

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeCopa |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	tresDeCopa := CartaDeTruco copaCon: 3.
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: tresDeCopa) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 

	self assert: mano cantidadDeCartas equals: 2.
	self assert: pie cantidadDeCartas equals: 2.

	
	
	
	
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:16:08' prior: 50865560!
recibeCartaDe: jugador
	
	(self jugadorTurno) = jugador ifFalse: [ 
		self error: RondaDeTruco noEsElTurnoDelJugadorErrorDescription
		 ].
	jugador tiraCarta.

! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:17:28'!
jugadorTurno
	mano cantidadDeCartas = 3 ifTrue: [^mano].
	(mano cantidadDeCartas < pie cantidadDeCartas) ifTrue: [^pie] ifFalse: [^mano]
! !

!testRun: #RondaDeTrucoTest #test02PieNoPuedeTirarPrimero stamp: 'JN 7/5/2021 21:17:35'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ManoTiraPrimero stamp: 'JN 7/5/2021 21:17:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test04PieTiraSegundo stamp: 'JN 7/5/2021 21:17:37'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:19:23'!
test04PerdedorDePrimeraManoNoPuedeTirarPrimeroEnLaSegunda

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeCopa |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	tresDeCopa := CartaDeTruco copaCon: 3.
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: tresDeCopa) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 

	self
		should: [ 	pie tirarCartaEn: ronda.  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco noEsElTurnoDelJugadorErrorDescription equals: anError messageText 
		]

	
	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:19:31'!
test05PerdedorDePrimeraManoNoPuedeTirarPrimeroEnLaSegunda

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeCopa |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	tresDeCopa := CartaDeTruco copaCon: 3.
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: tresDeCopa) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 

	self
		should: [ 	pie tirarCartaEn: ronda.  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco noEsElTurnoDelJugadorErrorDescription equals: anError messageText 
		]

	
	
	
	
	
	! !

!methodRemoval: RondaDeTrucoTest #test04PerdedorDePrimeraManoNoPuedeTirarPrimeroEnLaSegunda stamp: 'JN 7/5/2021 21:19:31'!
test04PerdedorDePrimeraManoNoPuedeTirarPrimeroEnLaSegunda

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeCopa |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	tresDeCopa := CartaDeTruco copaCon: 3.
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: tresDeCopa) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 

	self
		should: [ 	pie tirarCartaEn: ronda.  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco noEsElTurnoDelJugadorErrorDescription equals: anError messageText 
		]

	
	
	
	
	
	!

!testRun: #RondaDeTrucoTest #test05PerdedorDePrimeraManoNoPuedeTirarPrimeroEnLaSegunda stamp: 'JN 7/5/2021 21:19:32'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:20:33'!
test06GanadorDePrimeraManoTiraPrimeroEnLaSegunda

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeCopa |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	tresDeCopa := CartaDeTruco copaCon: 3.
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: tresDeCopa) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 
	mano tirarCartaEn: ronda. 
	
	self assert: mano cantidadDeCartas equals: 1.
	self assert: pie cantidadDeCartas equals: 2.
	
	
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test06GanadorDePrimeraManoTiraPrimeroEnLaSegunda stamp: 'JN 7/5/2021 21:20:35'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:21:22' prior: 50866023!
test04PieTiraSegundo

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeCopa |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	tresDeCopa := CartaDeTruco copaCon: 3.
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: tresDeCopa) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 

	self assert: mano cantidadDeCartas equals: 2.
	self assert: pie cantidadDeCartas equals: 2.
	self assert: ronda ganadorPrimeraMano equals: mano.

	
	
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test04PieTiraSegundo stamp: 'JN 7/5/2021 21:21:24'!
ERROR!

!testRun: #RondaDeTrucoTest #test04PieTiraSegundo stamp: 'JN 7/5/2021 21:21:24'!
ERROR!
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:21:52' prior: 50865718!
test03JugadorTiraLas3CartasEnOrden

	| jugador anchoDeBasto anchoDeEspada primeraCartaTirada segundaCartaTirada sieteDeEspada terceraCartaTirada |
	
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .

	jugador := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada) estado: #Mano. 

	primeraCartaTirada := jugador tiraCarta.
	segundaCartaTirada := jugador tiraCarta.
	terceraCartaTirada := jugador tiraCarta.

	
	self assert: primeraCartaTirada = anchoDeEspada.
	self assert: segundaCartaTirada = anchoDeBasto.
	self assert: terceraCartaTirada = sieteDeEspada.
	self assert: jugador sinCartas.

	! !
!JugadorDeRonda methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:22:42' prior: 50864411!
tiraCarta
	
	
	self sinCartas ifTrue: [ self error: self class sinCartasErrorDescription ].
	
	^ self tiraPrimerCarta.
	! !

!testRun: #RondaDeTrucoTest #test04PieTiraSegundo stamp: 'JN 7/5/2021 21:22:54'!
ERROR!

!testRun: #RondaDeTrucoTest #test04PieTiraSegundo stamp: 'JN 7/5/2021 21:22:54'!
ERROR!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'JN 7/5/2021 21:24:30'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'turno mano pie manoCartasJugadas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'JN 7/5/2021 21:24:32'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'turno mano pie manoCartasJugadas pieCartasJugadas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:24:27'!
ganadorPrimeraMano

	manoCartasJugadas first mataA: pieCartasJugadas first ifTrue: [^mano] ifFalse: [^pie].

! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:24:52' prior: 50866316!
ganadorPrimeraMano

	(manoCartasJugadas first mataA: pieCartasJugadas first) 
		ifTrue: [^mano] 
		ifFalse: [^pie].

! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:25:36' prior: 50866323!
ganadorPrimeraMano

	(mano primeraCartaJugada mataA: pie primeraCartaJugada) 
		ifTrue: [^mano] 
		ifFalse: [^pie].

! !

!classDefinition: #JugadorDeRonda category: 'ISW1-2021-1C-2doParcial' stamp: 'JN 7/5/2021 21:26:04'!
Object subclass: #JugadorDeRonda
	instanceVariableNames: 'cartas estado cartasJugadas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!JugadorDeRonda methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:26:03'!
primeraCartaJugada
	
	^ cartasJugadas first.
	
	
	! !
!JugadorDeRonda methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:26:34' prior: 50866286!
tiraCarta
	
	
	self sinCartas ifTrue: [ self error: self class sinCartasErrorDescription ].
	
	^ self tiraPrimerCarta.
	! !
!JugadorDeRonda methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:26:47' prior: 50864418!
tiraPrimerCarta

	| carta |
	carta := cartas first.
	cartas removeFirst.
	cartasJugadas add: carta.
	^ carta.
	! !
!JugadorDeRonda methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:26:59' prior: 50863216!
initializeWith: coleccionDeCartas

	cartas := coleccionDeCartas.
	cartasJugadas := OrderedCollection new.! !

!testRun: #RondaDeTrucoTest #test04PieTiraSegundo stamp: 'JN 7/5/2021 21:27:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test05PerdedorDePrimeraManoNoPuedeTirarPrimeroEnLaSegunda stamp: 'JN 7/5/2021 21:27:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test06GanadorDePrimeraManoTiraPrimeroEnLaSegunda stamp: 'JN 7/5/2021 21:27:08'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:29:59'!
test07PieNoPuedeJugarPrimeroSegundaManoSiLaPrimeraFueParda

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeOro |
	tresDeOro := CartaDeTruco oroCon: 3.
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: tresDeOro with: anchoDeBasto with: sieteDeEspada) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: sieteDeEspada) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 
	mano tirarCartaEn: ronda. 
	
	self assert: mano cantidadDeCartas equals: 1.
	self assert: pie cantidadDeCartas equals: 2.
	
	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:30:30' prior: 50866381!
test07PieNoPuedeJugarPrimeroSegundaManoSiLaPrimeraFueParda

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeOro |
	tresDeOro := CartaDeTruco oroCon: 3.
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: tresDeOro with: anchoDeEspada with: anchoDeBasto) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: sieteDeEspada) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 
	mano tirarCartaEn: ronda. 
	
	self assert: mano cantidadDeCartas equals: 1.
	self assert: pie cantidadDeCartas equals: 2.
	
	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:30:53' prior: 50866413!
test07PieNoPuedeJugarPrimeroSegundaManoSiLaPrimeraFueParda

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeOro |
	tresDeOro := CartaDeTruco oroCon: 3.
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: tresDeOro with: anchoDeEspada with: anchoDeBasto) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: sieteDeEspada) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 
	
	self
		should: [ 	pie tirarCartaEn: ronda.  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco noEsElTurnoDelJugadorErrorDescription equals: anError messageText 
		]
	
	
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test07PieNoPuedeJugarPrimeroSegundaManoSiLaPrimeraFueParda stamp: 'JN 7/5/2021 21:30:55'!
PASSED!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:32:33' prior: 50866061!
jugadorTurno
	mano cantidadDeCartas = 3 ifTrue: [^mano].
	(mano cantidadDeCartas < pie cantidadDeCartas) ifTrue: [^pie] ifFalse: [^mano].
	(mano cantidadDeCartas = pie cantidadDeCartas) ifTrue: [^self ganadorPrimeraMano].
! !

!testRun: #RondaDeTrucoTest #test02PieNoPuedeTirarPrimero stamp: 'JN 7/5/2021 21:32:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ManoTiraPrimero stamp: 'JN 7/5/2021 21:32:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test04PieTiraSegundo stamp: 'JN 7/5/2021 21:32:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test05PerdedorDePrimeraManoNoPuedeTirarPrimeroEnLaSegunda stamp: 'JN 7/5/2021 21:32:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test06GanadorDePrimeraManoTiraPrimeroEnLaSegunda stamp: 'JN 7/5/2021 21:32:41'!
PASSED!

!testRun: #RondaDeTrucoTest #test07PieNoPuedeJugarPrimeroSegundaManoSiLaPrimeraFueParda stamp: 'JN 7/5/2021 21:32:42'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:33:33'!
test07ManoTiraPrimeroSegundaManoSiLaPrimeraFueParda

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeOro |
	tresDeOro := CartaDeTruco oroCon: 3.
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: tresDeOro with: anchoDeEspada with: anchoDeBasto) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: sieteDeEspada) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 
	mano tirarCartaEn: ronda.
	
	
	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:33:42'!
test08ManoTiraPrimeroSegundaManoSiLaPrimeraFueParda

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeOro |
	tresDeOro := CartaDeTruco oroCon: 3.
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: tresDeOro with: anchoDeEspada with: anchoDeBasto) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: sieteDeEspada) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 
	mano tirarCartaEn: ronda.
	
	
	
	
	
	
	! !

!methodRemoval: RondaDeTrucoTest #test07ManoTiraPrimeroSegundaManoSiLaPrimeraFueParda stamp: 'JN 7/5/2021 21:33:42'!
test07ManoTiraPrimeroSegundaManoSiLaPrimeraFueParda

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeOro |
	tresDeOro := CartaDeTruco oroCon: 3.
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: tresDeOro with: anchoDeEspada with: anchoDeBasto) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: sieteDeEspada) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 
	mano tirarCartaEn: ronda.
	
	
	
	
	
	
	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:35:02' prior: 50866543!
test08ManoTiraPrimeroSegundaManoSiLaPrimeraFueParda

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeOro |
	tresDeOro := CartaDeTruco oroCon: 3.
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: tresDeOro with: anchoDeEspada with: anchoDeBasto) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: sieteDeEspada) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 
	mano tirarCartaEn: ronda.
	
	
	self assert: mano cantidadDeCartas equals: 1.
	self assert: pie cantidadDeCartas equals: 2.
	self assert: ronda ganadorPrimeraMano equals: #Parda.
	
	
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test08ManoTiraPrimeroSegundaManoSiLaPrimeraFueParda stamp: 'JN 7/5/2021 21:35:05'!
FAILURE!

!testRun: #RondaDeTrucoTest #test08ManoTiraPrimeroSegundaManoSiLaPrimeraFueParda stamp: 'JN 7/5/2021 21:35:05'!
FAILURE!

!testRun: #RondaDeTrucoTest #test05PerdedorDePrimeraManoNoPuedeTirarPrimeroEnLaSegunda stamp: 'JN 7/5/2021 21:35:09'!
PASSED!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:35:59' prior: 50866330!
ganadorPrimeraMano

	(mano primeraCartaJugada mataA: pie primeraCartaJugada) ifTrue: [^mano].
	(pie primeraCartaJugada mataA: mano primeraCartaJugada) ifTrue: [^pie]. 
	^#Parda.

! !

!testRun: #RondaDeTrucoTest #test02PieNoPuedeTirarPrimero stamp: 'JN 7/5/2021 21:36:01'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ManoTiraPrimero stamp: 'JN 7/5/2021 21:36:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test04PieTiraSegundo stamp: 'JN 7/5/2021 21:36:03'!
PASSED!

!testRun: #RondaDeTrucoTest #test05PerdedorDePrimeraManoNoPuedeTirarPrimeroEnLaSegunda stamp: 'JN 7/5/2021 21:36:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test06GanadorDePrimeraManoTiraPrimeroEnLaSegunda stamp: 'JN 7/5/2021 21:36:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test07PieNoPuedeJugarPrimeroSegundaManoSiLaPrimeraFueParda stamp: 'JN 7/5/2021 21:36:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test08ManoTiraPrimeroSegundaManoSiLaPrimeraFueParda stamp: 'JN 7/5/2021 21:36:06'!
FAILURE!

!testRun: #RondaDeTrucoTest #test08ManoTiraPrimeroSegundaManoSiLaPrimeraFueParda stamp: 'JN 7/5/2021 21:36:06'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:37:09' prior: 50866445!
test07PieNoPuedeJugarPrimeroSegundaManoSiLaPrimeraFueParda

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeOro |
	tresDeOro := CartaDeTruco oroCon: 3.
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: tresDeOro with: anchoDeEspada with: anchoDeBasto) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	pie := JugadorDeRonda conCartas: (OrderedCollection with: tresDeBasto with: sieteDeOro with: sieteDeEspada) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 
	
	self
		should: [ 	pie tirarCartaEn: ronda.  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco noEsElTurnoDelJugadorErrorDescription equals: anError messageText 
		]
	
	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:37:20' prior: 50866601!
test08ManoTiraPrimeroSegundaManoSiLaPrimeraFueParda

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeOro |
	tresDeOro := CartaDeTruco oroCon: 3.
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: tresDeOro with: anchoDeEspada with: anchoDeBasto) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	pie := JugadorDeRonda conCartas: (OrderedCollection with: tresDeBasto with: sieteDeOro with: sieteDeEspada) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 
	mano tirarCartaEn: ronda.
	
	
	self assert: mano cantidadDeCartas equals: 1.
	self assert: pie cantidadDeCartas equals: 2.
	self assert: ronda ganadorPrimeraMano equals: #Parda.
	
	
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test07PieNoPuedeJugarPrimeroSegundaManoSiLaPrimeraFueParda stamp: 'JN 7/5/2021 21:37:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test08ManoTiraPrimeroSegundaManoSiLaPrimeraFueParda stamp: 'JN 7/5/2021 21:37:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test99NoSePuedeCrearUnaRondaConDosJugadoresDeRondaConCartasRepetidasEntreSi stamp: 'JN 7/5/2021 21:37:23'!
ERROR!

!testRun: #RondaDeTrucoTest #test99NoSePuedeCrearUnaRondaConDosJugadoresDeRondaConCartasRepetidasEntreSi stamp: 'JN 7/5/2021 21:37:23'!
ERROR!

!testRun: #RondaDeTrucoTest #test05PerdedorDePrimeraManoNoPuedeTirarPrimeroEnLaSegunda stamp: 'JN 7/5/2021 21:37:27'!
PASSED!

!testRun: #RondaDeTrucoTest #test06GanadorDePrimeraManoTiraPrimeroEnLaSegunda stamp: 'JN 7/5/2021 21:37:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test07PieNoPuedeJugarPrimeroSegundaManoSiLaPrimeraFueParda stamp: 'JN 7/5/2021 21:37:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test08ManoTiraPrimeroSegundaManoSiLaPrimeraFueParda stamp: 'JN 7/5/2021 21:37:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test08ManoTiraPrimeroSegundaManoSiLaPrimeraFueParda stamp: 'JN 7/5/2021 21:37:31'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:39:20'!
test07PieNoPuedetirarPrimeroSegundaManoSiLaPrimeraFueParda

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeOro |
	tresDeOro := CartaDeTruco oroCon: 3.
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: tresDeOro with: anchoDeEspada with: anchoDeBasto) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	pie := JugadorDeRonda conCartas: (OrderedCollection with: tresDeBasto with: sieteDeOro with: sieteDeEspada) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 
	
	self
		should: [ 	pie tirarCartaEn: ronda.  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco noEsElTurnoDelJugadorErrorDescription equals: anError messageText 
		]
	
	
	
	
	
	! !

!methodRemoval: RondaDeTrucoTest #test07PieNoPuedeJugarPrimeroSegundaManoSiLaPrimeraFueParda stamp: 'JN 7/5/2021 21:39:20'!
test07PieNoPuedeJugarPrimeroSegundaManoSiLaPrimeraFueParda

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeOro |
	tresDeOro := CartaDeTruco oroCon: 3.
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: tresDeOro with: anchoDeEspada with: anchoDeBasto) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	pie := JugadorDeRonda conCartas: (OrderedCollection with: tresDeBasto with: sieteDeOro with: sieteDeEspada) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 
	
	self
		should: [ 	pie tirarCartaEn: ronda.  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco noEsElTurnoDelJugadorErrorDescription equals: anError messageText 
		]
	
	
	
	
	
	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:39:31'!
test07PieNoPuedeTirarPrimeroSegundaManoSiLaPrimeraFueParda

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeOro |
	tresDeOro := CartaDeTruco oroCon: 3.
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: tresDeOro with: anchoDeEspada with: anchoDeBasto) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	pie := JugadorDeRonda conCartas: (OrderedCollection with: tresDeBasto with: sieteDeOro with: sieteDeEspada) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 
	
	self
		should: [ 	pie tirarCartaEn: ronda.  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco noEsElTurnoDelJugadorErrorDescription equals: anError messageText 
		]
	
	
	
	
	
	! !

!methodRemoval: RondaDeTrucoTest #test07PieNoPuedetirarPrimeroSegundaManoSiLaPrimeraFueParda stamp: 'JN 7/5/2021 21:39:31'!
test07PieNoPuedetirarPrimeroSegundaManoSiLaPrimeraFueParda

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeOro |
	tresDeOro := CartaDeTruco oroCon: 3.
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: tresDeOro with: anchoDeEspada with: anchoDeBasto) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	pie := JugadorDeRonda conCartas: (OrderedCollection with: tresDeBasto with: sieteDeOro with: sieteDeEspada) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 
	
	self
		should: [ 	pie tirarCartaEn: ronda.  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco noEsElTurnoDelJugadorErrorDescription equals: anError messageText 
		]
	
	
	
	
	
	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:39:49'!
test07PieNoPuedeTirarPrimeroEnSegundaManoSiLaPrimeraFueParda

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeOro |
	tresDeOro := CartaDeTruco oroCon: 3.
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: tresDeOro with: anchoDeEspada with: anchoDeBasto) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	pie := JugadorDeRonda conCartas: (OrderedCollection with: tresDeBasto with: sieteDeOro with: sieteDeEspada) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 
	
	self
		should: [ 	pie tirarCartaEn: ronda.  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco noEsElTurnoDelJugadorErrorDescription equals: anError messageText 
		]
	
	
	
	
	
	! !

!methodRemoval: RondaDeTrucoTest #test07PieNoPuedeTirarPrimeroSegundaManoSiLaPrimeraFueParda stamp: 'JN 7/5/2021 21:39:49'!
test07PieNoPuedeTirarPrimeroSegundaManoSiLaPrimeraFueParda

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeOro |
	tresDeOro := CartaDeTruco oroCon: 3.
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: tresDeOro with: anchoDeEspada with: anchoDeBasto) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	pie := JugadorDeRonda conCartas: (OrderedCollection with: tresDeBasto with: sieteDeOro with: sieteDeEspada) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 
	
	self
		should: [ 	pie tirarCartaEn: ronda.  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco noEsElTurnoDelJugadorErrorDescription equals: anError messageText 
		]
	
	
	
	
	
	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:40:01'!
test08ManoTiraPrimeroEnSegundaManoSiLaPrimeraFueParda

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeOro |
	tresDeOro := CartaDeTruco oroCon: 3.
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: tresDeOro with: anchoDeEspada with: anchoDeBasto) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	pie := JugadorDeRonda conCartas: (OrderedCollection with: tresDeBasto with: sieteDeOro with: sieteDeEspada) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 
	mano tirarCartaEn: ronda.
	
	
	self assert: mano cantidadDeCartas equals: 1.
	self assert: pie cantidadDeCartas equals: 2.
	self assert: ronda ganadorPrimeraMano equals: #Parda.
	
	
	
	
	
	! !

!methodRemoval: RondaDeTrucoTest #test08ManoTiraPrimeroSegundaManoSiLaPrimeraFueParda stamp: 'JN 7/5/2021 21:40:01'!
test08ManoTiraPrimeroSegundaManoSiLaPrimeraFueParda

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeOro |
	tresDeOro := CartaDeTruco oroCon: 3.
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: tresDeOro with: anchoDeEspada with: anchoDeBasto) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	pie := JugadorDeRonda conCartas: (OrderedCollection with: tresDeBasto with: sieteDeOro with: sieteDeEspada) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 
	mano tirarCartaEn: ronda.
	
	
	self assert: mano cantidadDeCartas equals: 1.
	self assert: pie cantidadDeCartas equals: 2.
	self assert: ronda ganadorPrimeraMano equals: #Parda.
	
	
	
	
	
	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:41:27'!
test05ManoNoPuedeTirarSegundo

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeCopa |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	tresDeCopa := CartaDeTruco copaCon: 3.
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: tresDeCopa) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	mano tirarCartaEn: ronda. 

	

	
	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:41:47' prior: 50867064!
test05ManoNoPuedeTirarSegundo

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeCopa |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	tresDeCopa := CartaDeTruco copaCon: 3.
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: tresDeCopa) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 

	self
		should: [ mano tirarCartaEn: ronda.  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco noEsElTurnoDelJugadorErrorDescription equals: anError messageText.
			]

	
	
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test05ManoNoPuedeTirarSegundo stamp: 'JN 7/5/2021 21:41:49'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:42:50'!
test06PerdedorDePrimeraManoNoPuedeTirarPrimeroEnLaSegunda

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeCopa |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	tresDeCopa := CartaDeTruco copaCon: 3.
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: tresDeCopa) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 

	self
		should: [ 	pie tirarCartaEn: ronda.  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco noEsElTurnoDelJugadorErrorDescription equals: anError messageText 
		]

	
	
	
	
	
	! !

!methodRemoval: RondaDeTrucoTest #test05PerdedorDePrimeraManoNoPuedeTirarPrimeroEnLaSegunda stamp: 'JN 7/5/2021 21:42:50'!
test05PerdedorDePrimeraManoNoPuedeTirarPrimeroEnLaSegunda

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeCopa |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	tresDeCopa := CartaDeTruco copaCon: 3.
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: tresDeCopa) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 

	self
		should: [ 	pie tirarCartaEn: ronda.  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco noEsElTurnoDelJugadorErrorDescription equals: anError messageText 
		]

	
	
	
	
	
	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:42:58'!
test07GanadorDePrimeraManoTiraPrimeroEnLaSegunda

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeCopa |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	tresDeCopa := CartaDeTruco copaCon: 3.
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: tresDeCopa) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 
	mano tirarCartaEn: ronda. 
	
	self assert: mano cantidadDeCartas equals: 1.
	self assert: pie cantidadDeCartas equals: 2.
	
	
	
	
	
	! !

!methodRemoval: RondaDeTrucoTest #test06GanadorDePrimeraManoTiraPrimeroEnLaSegunda stamp: 'JN 7/5/2021 21:42:58'!
test06GanadorDePrimeraManoTiraPrimeroEnLaSegunda

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeCopa |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	tresDeCopa := CartaDeTruco copaCon: 3.
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: tresDeCopa) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 
	mano tirarCartaEn: ronda. 
	
	self assert: mano cantidadDeCartas equals: 1.
	self assert: pie cantidadDeCartas equals: 2.
	
	
	
	
	
	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:43:53'!
test08GanadorDePrimeraManoNoPuedeTirarSegundoEnLaSegunda

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeCopa |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	tresDeCopa := CartaDeTruco copaCon: 3.
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: tresDeCopa) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 

	self
		should: [ 	mano tirarCartaEn: ronda.  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco noEsElTurnoDelJugadorErrorDescription equals: anError messageText 
		]

	
	
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test08GanadorDePrimeraManoNoPuedeTirarSegundoEnLaSegunda stamp: 'JN 7/5/2021 21:43:56'!
FAILURE!

!testRun: #RondaDeTrucoTest #test08GanadorDePrimeraManoNoPuedeTirarSegundoEnLaSegunda stamp: 'JN 7/5/2021 21:43:56'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:44:21' prior: 50867261!
test08GanadorDePrimeraManoNoPuedeTirarSegundoEnLaSegunda

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeCopa |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	tresDeCopa := CartaDeTruco copaCon: 3.
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: tresDeCopa) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 
	mano tirarCartaEn: ronda.
	self
		should: [ 	mano tirarCartaEn: ronda.  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco noEsElTurnoDelJugadorErrorDescription equals: anError messageText 
		]

	
	
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test08GanadorDePrimeraManoNoPuedeTirarSegundoEnLaSegunda stamp: 'JN 7/5/2021 21:44:23'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:44:47'!
test09PieNoPuedeTirarPrimeroEnSegundaManoSiLaPrimeraFueParda

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeOro |
	tresDeOro := CartaDeTruco oroCon: 3.
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: tresDeOro with: anchoDeEspada with: anchoDeBasto) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	pie := JugadorDeRonda conCartas: (OrderedCollection with: tresDeBasto with: sieteDeOro with: sieteDeEspada) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 
	
	self
		should: [ 	pie tirarCartaEn: ronda.  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco noEsElTurnoDelJugadorErrorDescription equals: anError messageText 
		]
	
	
	
	
	
	! !

!methodRemoval: RondaDeTrucoTest #test07PieNoPuedeTirarPrimeroEnSegundaManoSiLaPrimeraFueParda stamp: 'JN 7/5/2021 21:44:47'!
test07PieNoPuedeTirarPrimeroEnSegundaManoSiLaPrimeraFueParda

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeOro |
	tresDeOro := CartaDeTruco oroCon: 3.
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: tresDeOro with: anchoDeEspada with: anchoDeBasto) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	pie := JugadorDeRonda conCartas: (OrderedCollection with: tresDeBasto with: sieteDeOro with: sieteDeEspada) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 
	
	self
		should: [ 	pie tirarCartaEn: ronda.  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco noEsElTurnoDelJugadorErrorDescription equals: anError messageText 
		]
	
	
	
	
	
	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:45:01'!
test10ManoTiraPrimeroEnSegundaManoSiLaPrimeraFueParda

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeOro |
	tresDeOro := CartaDeTruco oroCon: 3.
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: tresDeOro with: anchoDeEspada with: anchoDeBasto) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	pie := JugadorDeRonda conCartas: (OrderedCollection with: tresDeBasto with: sieteDeOro with: sieteDeEspada) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 
	mano tirarCartaEn: ronda.
	
	
	self assert: mano cantidadDeCartas equals: 1.
	self assert: pie cantidadDeCartas equals: 2.
	self assert: ronda ganadorPrimeraMano equals: #Parda.
	
	
	
	
	
	! !

!methodRemoval: RondaDeTrucoTest #test08ManoTiraPrimeroEnSegundaManoSiLaPrimeraFueParda stamp: 'JN 7/5/2021 21:45:01'!
test08ManoTiraPrimeroEnSegundaManoSiLaPrimeraFueParda

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeOro |
	tresDeOro := CartaDeTruco oroCon: 3.
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: tresDeOro with: anchoDeEspada with: anchoDeBasto) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	pie := JugadorDeRonda conCartas: (OrderedCollection with: tresDeBasto with: sieteDeOro with: sieteDeEspada) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 
	mano tirarCartaEn: ronda.
	
	
	self assert: mano cantidadDeCartas equals: 1.
	self assert: pie cantidadDeCartas equals: 2.
	self assert: ronda ganadorPrimeraMano equals: #Parda.
	
	
	
	
	
	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:47:20'!
test11PerdedorDeLaSegundaNoPuedeTirarPrimeroEnLaTercera

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeOro |
	tresDeOro := CartaDeTruco oroCon: 3.
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: tresDeOro with: anchoDeEspada with: anchoDeBasto) estado: #Mano.
	
	tresDeBasto := CartaDeTruco bastoCon: 3.
	sieteDeOro := CartaDeTruco sieteDeOro.
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	pie := JugadorDeRonda conCartas: (OrderedCollection with:sieteDeOro  with:tresDeBasto  with: sieteDeEspada) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 
	mano tirarCartaEn: ronda. 

	self
		should: [ 	pie tirarCartaEn: ronda.  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco noEsElTurnoDelJugadorErrorDescription equals: anError messageText 
		]
	
	
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test11PerdedorDeLaSegundaNoPuedeTirarPrimeroEnLaTercera stamp: 'JN 7/5/2021 21:47:22'!
ERROR!

!testRun: #RondaDeTrucoTest #test11PerdedorDeLaSegundaNoPuedeTirarPrimeroEnLaTercera stamp: 'JN 7/5/2021 21:47:22'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:48:40'!
ganadorUltimaManoJugada

	(mano primeraCartaJugada mataA: pie primeraCartaJugada) ifTrue: [^mano].
	(pie primeraCartaJugada mataA: mano primeraCartaJugada) ifTrue: [^pie]. 
	^#Parda.

! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:48:40' prior: 50866484!
jugadorTurno
	mano cantidadDeCartas = 3 ifTrue: [^mano].
	(mano cantidadDeCartas < pie cantidadDeCartas) ifTrue: [^pie] ifFalse: [^mano].
	(mano cantidadDeCartas = pie cantidadDeCartas) ifTrue: [^self ganadorUltimaManoJugada].
! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:48:40' prior: 50866222!
test04PieTiraSegundo

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeCopa |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	tresDeCopa := CartaDeTruco copaCon: 3.
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: tresDeCopa) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 

	self assert: mano cantidadDeCartas equals: 2.
	self assert: pie cantidadDeCartas equals: 2.
	self assert: ronda ganadorUltimaManoJugada equals: mano.

	
	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:48:40' prior: 50867413!
test10ManoTiraPrimeroEnSegundaManoSiLaPrimeraFueParda

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeOro |
	tresDeOro := CartaDeTruco oroCon: 3.
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: tresDeOro with: anchoDeEspada with: anchoDeBasto) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	pie := JugadorDeRonda conCartas: (OrderedCollection with: tresDeBasto with: sieteDeOro with: sieteDeEspada) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 
	mano tirarCartaEn: ronda.
	
	
	self assert: mano cantidadDeCartas equals: 1.
	self assert: pie cantidadDeCartas equals: 2.
	self assert: ronda ganadorUltimaManoJugada equals: #Parda.
	
	
	
	
	
	! !

!methodRemoval: RondaDeTruco #ganadorPrimeraMano stamp: 'JN 7/5/2021 21:48:40'!
ganadorPrimeraMano

	(mano primeraCartaJugada mataA: pie primeraCartaJugada) ifTrue: [^mano].
	(pie primeraCartaJugada mataA: mano primeraCartaJugada) ifTrue: [^pie]. 
	^#Parda.

!
!JugadorDeRonda methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:49:05'!
ultimaCartaJugada
	
	^ cartasJugadas first.
	
	
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:49:05' prior: 50867524!
ganadorUltimaManoJugada

	(mano ultimaCartaJugada mataA: pie ultimaCartaJugada) ifTrue: [^mano].
	(pie ultimaCartaJugada mataA: mano ultimaCartaJugada) ifTrue: [^pie]. 
	^#Parda.

! !

!methodRemoval: JugadorDeRonda #primeraCartaJugada stamp: 'JN 7/5/2021 21:49:06'!
primeraCartaJugada
	
	^ cartasJugadas first.
	
	
	!
!JugadorDeRonda methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:49:11' prior: 50867617!
ultimaCartaJugada
	
	^ cartasJugadas last.
	
	
	! !

!testRun: #RondaDeTrucoTest #test02PieNoPuedeTirarPrimero stamp: 'JN 7/5/2021 21:49:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ManoTiraPrimero stamp: 'JN 7/5/2021 21:49:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test04PieTiraSegundo stamp: 'JN 7/5/2021 21:49:27'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ManoNoPuedeTirarSegundo stamp: 'JN 7/5/2021 21:49:27'!
PASSED!

!testRun: #RondaDeTrucoTest #test06PerdedorDePrimeraManoNoPuedeTirarPrimeroEnLaSegunda stamp: 'JN 7/5/2021 21:49:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test07GanadorDePrimeraManoTiraPrimeroEnLaSegunda stamp: 'JN 7/5/2021 21:49:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test08GanadorDePrimeraManoNoPuedeTirarSegundoEnLaSegunda stamp: 'JN 7/5/2021 21:49:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test09PieNoPuedeTirarPrimeroEnSegundaManoSiLaPrimeraFueParda stamp: 'JN 7/5/2021 21:49:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test10ManoTiraPrimeroEnSegundaManoSiLaPrimeraFueParda stamp: 'JN 7/5/2021 21:49:31'!
FAILURE!

!testRun: #RondaDeTrucoTest #test10ManoTiraPrimeroEnSegundaManoSiLaPrimeraFueParda stamp: 'JN 7/5/2021 21:49:31'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:51:54' prior: 50867576!
test10ManoTiraPrimeroEnSegundaManoSiLaPrimeraFueParda

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeOro |
	tresDeOro := CartaDeTruco oroCon: 3.
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: tresDeOro with: anchoDeEspada with: anchoDeBasto) estado: #Mano.
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	pie := JugadorDeRonda conCartas: (OrderedCollection with: tresDeBasto with: sieteDeOro with: sieteDeEspada) estado: #Pie.  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 
	mano tirarCartaEn: ronda.
	
	
	self assert: mano cantidadDeCartas equals: 1.
	self assert: pie cantidadDeCartas equals: 2.
	
	
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test10ManoTiraPrimeroEnSegundaManoSiLaPrimeraFueParda stamp: 'JN 7/5/2021 21:51:56'!
PASSED!

!testRun: #RondaDeTrucoTest #test11PerdedorDeLaSegundaNoPuedeTirarPrimeroEnLaTercera stamp: 'JN 7/5/2021 21:51:58'!
ERROR!

!testRun: #RondaDeTrucoTest #test11PerdedorDeLaSegundaNoPuedeTirarPrimeroEnLaTercera stamp: 'JN 7/5/2021 21:51:58'!
ERROR!

!testRun: #RondaDeTrucoTest #test11PerdedorDeLaSegundaNoPuedeTirarPrimeroEnLaTercera stamp: 'JN 7/5/2021 21:52:39'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:53:38' prior: 50867533!
jugadorTurno
	mano cantidadDeCartas = 3 ifTrue: [^mano].
	(mano cantidadDeCartas = pie cantidadDeCartas) ifTrue: [^self ganadorUltimaManoJugada].
	(mano cantidadDeCartas < pie cantidadDeCartas) ifTrue: [^pie] ifFalse: [^mano].
! !

!methodRemoval: RondaDeTrucoTest #test99NoSePuedeCrearUnaRondaConDosJugadoresDeRondaConCartasRepetidasEntreSi stamp: 'JN 7/5/2021 21:53:50'!
test99NoSePuedeCrearUnaRondaConDosJugadoresDeRondaConCartasRepetidasEntreSi

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .

	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada) estado: EstadoMano.
	pie := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada) estado: EstadoMano.  
	
	self
		should: [ RondaDeTruco conMano: mano yPie: pie. ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco jugadoresConCartasRepetidasErrorDescription equals: anError messageText.
			]!
!JugadorDeRonda class methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:54:04'!
conCartas: coleccionDeCartas  
	
	coleccionDeCartas asSet size = 3 ifFalse: [ self error: self cartasEnManoInvalidasErrorDescription. ].
	
	^ self new initializeWith: coleccionDeCartas.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:54:04' prior: 50867480!
test11PerdedorDeLaSegundaNoPuedeTirarPrimeroEnLaTercera

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeOro |
	tresDeOro := CartaDeTruco oroCon: 3.
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: tresDeOro with: anchoDeEspada with: anchoDeBasto) .
	
	tresDeBasto := CartaDeTruco bastoCon: 3.
	sieteDeOro := CartaDeTruco sieteDeOro.
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	pie := JugadorDeRonda conCartas: (OrderedCollection with:sieteDeOro  with:tresDeBasto  with: sieteDeEspada) .  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 
	mano tirarCartaEn: ronda. 

	self
		should: [ 	pie tirarCartaEn: ronda.  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco noEsElTurnoDelJugadorErrorDescription equals: anError messageText 
		]
	
	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:54:04' prior: 50867343!
test09PieNoPuedeTirarPrimeroEnSegundaManoSiLaPrimeraFueParda

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeOro |
	tresDeOro := CartaDeTruco oroCon: 3.
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: tresDeOro with: anchoDeEspada with: anchoDeBasto) .
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	pie := JugadorDeRonda conCartas: (OrderedCollection with: tresDeBasto with: sieteDeOro with: sieteDeEspada) .  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 
	
	self
		should: [ 	pie tirarCartaEn: ronda.  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco noEsElTurnoDelJugadorErrorDescription equals: anError messageText 
		]
	
	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:54:04' prior: 50867544!
test04PieTiraSegundo

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeCopa |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada) .
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	tresDeCopa := CartaDeTruco copaCon: 3.
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: tresDeCopa) .  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 

	self assert: mano cantidadDeCartas equals: 2.
	self assert: pie cantidadDeCartas equals: 2.
	self assert: ronda ganadorUltimaManoJugada equals: mano.

	
	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:54:04' prior: 50865977!
test03ManoTiraPrimero

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeCopa |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada) .
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	tresDeCopa := CartaDeTruco copaCon: 3.
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: tresDeCopa) .  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	
	self assert: mano cantidadDeCartas equals: 2.
	self assert: pie cantidadDeCartas equals: 3.

	
	
	
	
	
	! !
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:54:04' prior: 50865835!
test04JugadorNoPuedeTirarCuandoSeQuedaSinCartas

	| jugador anchoDeBasto anchoDeEspada sieteDeEspada |
	
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .

	jugador := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada) . 
	
	jugador tiraCarta.
	jugador tiraCarta.
	jugador tiraCarta.
	
	self 
		should: [ jugador tiraCarta ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: JugadorDeRonda sinCartasErrorDescription equals: anError messageText.
			]
	
	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:54:04' prior: 50867092!
test05ManoNoPuedeTirarSegundo

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeCopa |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada) .
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	tresDeCopa := CartaDeTruco copaCon: 3.
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: tresDeCopa) .  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 

	self
		should: [ mano tirarCartaEn: ronda.  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco noEsElTurnoDelJugadorErrorDescription equals: anError messageText.
			]

	
	
	
	
	
	! !
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:54:04' prior: 50865921!
test02NoSePuedeCrearUnJugadorConCartasRepetidas

	| carta |
	carta := CartaDeTruco anchoDeEspada.

	self 
		should: [ JugadorDeRonda conCartas: (OrderedCollection with: carta with: carta with: carta) .   ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: JugadorDeRonda cartasEnManoInvalidasErrorDescription equals: anError messageText.
			]! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:54:04' prior: 50867304!
test08GanadorDePrimeraManoNoPuedeTirarSegundoEnLaSegunda

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeCopa |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada) .
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	tresDeCopa := CartaDeTruco copaCon: 3.
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: tresDeCopa) .  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 
	mano tirarCartaEn: ronda.
	self
		should: [ 	mano tirarCartaEn: ronda.  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco noEsElTurnoDelJugadorErrorDescription equals: anError messageText 
		]

	
	
	
	
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:54:04' prior: 50865945!
test02PieNoPuedeTirarPrimero

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeCopa |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada) .
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	tresDeCopa := CartaDeTruco copaCon: 3.
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: tresDeCopa) .  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	self
		should: [ pie tirarCartaEn: ronda.  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco noEsElTurnoDelJugadorErrorDescription equals: anError messageText.
			]! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:54:04' prior: 50867128!
test06PerdedorDePrimeraManoNoPuedeTirarPrimeroEnLaSegunda

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeCopa |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada) .
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	tresDeCopa := CartaDeTruco copaCon: 3.
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: tresDeCopa) .  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 

	self
		should: [ 	pie tirarCartaEn: ronda.  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: RondaDeTruco noEsElTurnoDelJugadorErrorDescription equals: anError messageText 
		]

	
	
	
	
	
	! !
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:54:04' prior: 50866259!
test03JugadorTiraLas3CartasEnOrden

	| jugador anchoDeBasto anchoDeEspada primeraCartaTirada segundaCartaTirada sieteDeEspada terceraCartaTirada |
	
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .

	jugador := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada) . 

	primeraCartaTirada := jugador tiraCarta.
	segundaCartaTirada := jugador tiraCarta.
	terceraCartaTirada := jugador tiraCarta.

	
	self assert: primeraCartaTirada = anchoDeEspada.
	self assert: segundaCartaTirada = anchoDeBasto.
	self assert: terceraCartaTirada = sieteDeEspada.
	self assert: jugador sinCartas.

	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:54:04' prior: 50867198!
test07GanadorDePrimeraManoTiraPrimeroEnLaSegunda

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeCopa |
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada) .
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	tresDeCopa := CartaDeTruco copaCon: 3.
	pie := JugadorDeRonda conCartas: (OrderedCollection with: sieteDeOro with: tresDeBasto with: tresDeCopa) .  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 
	mano tirarCartaEn: ronda. 
	
	self assert: mano cantidadDeCartas equals: 1.
	self assert: pie cantidadDeCartas equals: 2.
	
	
	
	
	
	! !
!JugadorDeRondaTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:54:04' prior: 50865773!
test01NoSePuedeCrearUnJugadorSinExactamente3Cartas

	| anchoDeBasto anchoDeEspada sieteDeEspada sieteDeOro |
	self 
		should: [ JugadorDeRonda conCartas: OrderedCollection new .  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: JugadorDeRonda cartasEnManoInvalidasErrorDescription equals: anError messageText.
			].

	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	sieteDeOro := CartaDeTruco sieteDeOro .


	self 
		should: [ JugadorDeRonda conCartas: 
	(OrderedCollection with: anchoDeEspada with: anchoDeBasto with: sieteDeEspada with: sieteDeOro) .  ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: JugadorDeRonda cartasEnManoInvalidasErrorDescription equals: anError messageText.
			].
	 ! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:54:04' prior: 50867675!
test10ManoTiraPrimeroEnSegundaManoSiLaPrimeraFueParda

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeOro |
	tresDeOro := CartaDeTruco oroCon: 3.
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: tresDeOro with: anchoDeEspada with: anchoDeBasto) .
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	pie := JugadorDeRonda conCartas: (OrderedCollection with: tresDeBasto with: sieteDeOro with: sieteDeEspada) .  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 
	mano tirarCartaEn: ronda.
	
	
	self assert: mano cantidadDeCartas equals: 1.
	self assert: pie cantidadDeCartas equals: 2.
	
	
	
	
	
	! !

!methodRemoval: JugadorDeRonda class #conCartas:estado: stamp: 'JN 7/5/2021 21:54:04'!
conCartas: coleccionDeCartas estado: estado 
	
	coleccionDeCartas asSet size = 3 ifFalse: [ self error: self cartasEnManoInvalidasErrorDescription. ].
	
	^ self new initializeWith: coleccionDeCartas.!

!testRun: #RondaDeTrucoTest #test02PieNoPuedeTirarPrimero stamp: 'JN 7/5/2021 21:54:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ManoTiraPrimero stamp: 'JN 7/5/2021 21:54:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test04PieTiraSegundo stamp: 'JN 7/5/2021 21:54:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ManoNoPuedeTirarSegundo stamp: 'JN 7/5/2021 21:54:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test06PerdedorDePrimeraManoNoPuedeTirarPrimeroEnLaSegunda stamp: 'JN 7/5/2021 21:54:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test07GanadorDePrimeraManoTiraPrimeroEnLaSegunda stamp: 'JN 7/5/2021 21:54:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test08GanadorDePrimeraManoNoPuedeTirarSegundoEnLaSegunda stamp: 'JN 7/5/2021 21:54:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test09PieNoPuedeTirarPrimeroEnSegundaManoSiLaPrimeraFueParda stamp: 'JN 7/5/2021 21:54:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test10ManoTiraPrimeroEnSegundaManoSiLaPrimeraFueParda stamp: 'JN 7/5/2021 21:54:07'!
ERROR!

!testRun: #RondaDeTrucoTest #test11PerdedorDeLaSegundaNoPuedeTirarPrimeroEnLaTercera stamp: 'JN 7/5/2021 21:54:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test10ManoTiraPrimeroEnSegundaManoSiLaPrimeraFueParda stamp: 'JN 7/5/2021 21:54:07'!
ERROR!

!testRun: #RondaDeTrucoTest #test02PieNoPuedeTirarPrimero stamp: 'JN 7/5/2021 21:54:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ManoTiraPrimero stamp: 'JN 7/5/2021 21:54:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test04PieTiraSegundo stamp: 'JN 7/5/2021 21:54:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ManoNoPuedeTirarSegundo stamp: 'JN 7/5/2021 21:54:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test06PerdedorDePrimeraManoNoPuedeTirarPrimeroEnLaSegunda stamp: 'JN 7/5/2021 21:54:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test07GanadorDePrimeraManoTiraPrimeroEnLaSegunda stamp: 'JN 7/5/2021 21:54:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test08GanadorDePrimeraManoNoPuedeTirarSegundoEnLaSegunda stamp: 'JN 7/5/2021 21:54:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test09PieNoPuedeTirarPrimeroEnSegundaManoSiLaPrimeraFueParda stamp: 'JN 7/5/2021 21:54:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test10ManoTiraPrimeroEnSegundaManoSiLaPrimeraFueParda stamp: 'JN 7/5/2021 21:54:18'!
ERROR!

!testRun: #RondaDeTrucoTest #test10ManoTiraPrimeroEnSegundaManoSiLaPrimeraFueParda stamp: 'JN 7/5/2021 21:54:18'!
ERROR!

!testRun: #RondaDeTrucoTest #test11PerdedorDeLaSegundaNoPuedeTirarPrimeroEnLaTercera stamp: 'JN 7/5/2021 21:54:21'!
PASSED!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:55:43' prior: 50867622!
ganadorUltimaManoJugada

	(mano ultimaCartaJugada mataA: pie ultimaCartaJugada) ifTrue: [^mano].
	(pie ultimaCartaJugada mataA: mano ultimaCartaJugada) ifTrue: [^pie]. 
	^self ganadorAnteultimaManoJugada.

! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:57:08' prior: 50868279!
ganadorUltimaManoJugada

	(mano ultimaCartaJugada mataA: pie ultimaCartaJugada) ifTrue: [^mano].
	(pie ultimaCartaJugada mataA: mano ultimaCartaJugada) ifTrue: [^pie]. 
	^#Parda "Aca deberia devolver el ganador de la anteultima pero no llego con el tiempo"

! !

!testRun: #RondaDeTrucoTest #test02PieNoPuedeTirarPrimero stamp: 'JN 7/5/2021 21:57:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ManoTiraPrimero stamp: 'JN 7/5/2021 21:57:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test04PieTiraSegundo stamp: 'JN 7/5/2021 21:57:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ManoNoPuedeTirarSegundo stamp: 'JN 7/5/2021 21:57:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test06PerdedorDePrimeraManoNoPuedeTirarPrimeroEnLaSegunda stamp: 'JN 7/5/2021 21:57:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test07GanadorDePrimeraManoTiraPrimeroEnLaSegunda stamp: 'JN 7/5/2021 21:57:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test08GanadorDePrimeraManoNoPuedeTirarSegundoEnLaSegunda stamp: 'JN 7/5/2021 21:57:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test09PieNoPuedeTirarPrimeroEnSegundaManoSiLaPrimeraFueParda stamp: 'JN 7/5/2021 21:57:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test10ManoTiraPrimeroEnSegundaManoSiLaPrimeraFueParda stamp: 'JN 7/5/2021 21:57:10'!
ERROR!

!testRun: #RondaDeTrucoTest #test11PerdedorDeLaSegundaNoPuedeTirarPrimeroEnLaTercera stamp: 'JN 7/5/2021 21:57:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test10ManoTiraPrimeroEnSegundaManoSiLaPrimeraFueParda stamp: 'JN 7/5/2021 21:57:10'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JN 7/5/2021 21:57:32' prior: 50868161!
test10ManoTiraPrimeroEnSegundaManoSiLaPrimeraFueParda

	| mano anchoDeBasto anchoDeEspada pie sieteDeEspada ronda sieteDeOro tresDeBasto tresDeOro |
	tresDeOro := CartaDeTruco oroCon: 3.
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeBasto := CartaDeTruco anchoDeBasto .
	mano := JugadorDeRonda conCartas: (OrderedCollection with: tresDeOro with: anchoDeEspada with: anchoDeBasto) .
	
	sieteDeOro := CartaDeTruco sieteDeOro.
	tresDeBasto := CartaDeTruco bastoCon: 3.
	sieteDeEspada := CartaDeTruco sieteDeEspada .
	pie := JugadorDeRonda conCartas: (OrderedCollection with: tresDeBasto with: sieteDeOro with: sieteDeEspada) .  
	
	ronda := RondaDeTruco paraMano: mano yPie: pie.
	
	mano tirarCartaEn: ronda. 
	pie tirarCartaEn: ronda. 
	mano tirarCartaEn: ronda. "Falla por el ganador de la anteultima"
	
	
	self assert: mano cantidadDeCartas equals: 1.
	self assert: pie cantidadDeCartas equals: 2.
	
	
	
	
	
	! !

!testRun: #RondaDeTrucoTest #test02PieNoPuedeTirarPrimero stamp: 'JN 7/5/2021 21:57:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ManoTiraPrimero stamp: 'JN 7/5/2021 21:57:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test04PieTiraSegundo stamp: 'JN 7/5/2021 21:57:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test05ManoNoPuedeTirarSegundo stamp: 'JN 7/5/2021 21:57:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test06PerdedorDePrimeraManoNoPuedeTirarPrimeroEnLaSegunda stamp: 'JN 7/5/2021 21:57:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test07GanadorDePrimeraManoTiraPrimeroEnLaSegunda stamp: 'JN 7/5/2021 21:57:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test08GanadorDePrimeraManoNoPuedeTirarSegundoEnLaSegunda stamp: 'JN 7/5/2021 21:57:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test09PieNoPuedeTirarPrimeroEnSegundaManoSiLaPrimeraFueParda stamp: 'JN 7/5/2021 21:57:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test10ManoTiraPrimeroEnSegundaManoSiLaPrimeraFueParda stamp: 'JN 7/5/2021 21:57:36'!
ERROR!

!testRun: #RondaDeTrucoTest #test11PerdedorDeLaSegundaNoPuedeTirarPrimeroEnLaTercera stamp: 'JN 7/5/2021 21:57:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test10ManoTiraPrimeroEnSegundaManoSiLaPrimeraFueParda stamp: 'JN 7/5/2021 21:57:36'!
ERROR!