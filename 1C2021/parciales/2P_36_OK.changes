----End fileIn of C:\Users\sergi\OneDrive\Escritorio\JULIA\Materias\Inge1\parcial\ISW1-2021-1C-2doParcial.st----!

TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'JR 7/5/2021 17:38:18'!
TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'JR 7/5/2021 17:41:37'!
Object subclass: #RondaDeTruco
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'no messages' stamp: 'JR 7/5/2021 17:41:33'!
test01ElJugadorManoComienzaConTresCartas

	self 
		should:  [RondaDeTruco cartasDelJugadorMano: {} cartasDelJugadorPie: {}]
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 
				RondaDeTruco testCanCreateOrConditionWithOrConditionAndOrCondition]! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 17:43:50' prior: 50936790!
test01ElJugadorManoComienzaConTresCartas

	|cartasDelJugadorMano cartasDelJugadorPie|
	
	cartasDelJugadorMano := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	self 
		should:  [RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie ]
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 
				RondaDeTruco elJugadorManoDebeComenzarConTresCartasErrorDescription]! !

{1. 2. 1} size!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'JR 7/5/2021 17:44:54'!
cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie

	(cartasDelJugadorMano size = 3) ifFalse: [self error: self ]! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 17:45:03' prior: 50936803!
test01ElJugadorManoComienzaConTresCartas

	|cartasDelJugadorMano cartasDelJugadorPie|
	
	cartasDelJugadorMano := {}.
	
	cartasDelJugadorPie := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	self 
		should:  [RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie ]
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 
				RondaDeTruco elJugadorManoDebeComenzarConTresCartasErrorDescription]! !
!RondaDeTruco class methodsFor: 'error description' stamp: 'JR 7/5/2021 17:45:32'!
elJugadorManoDebeComenzarConTresCartasErrorDescription

	^'El jugador mano debe comenzar con tres cartas'! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'JR 7/5/2021 17:45:59' prior: 50936826!
cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie

	(cartasDelJugadorMano size = 3) ifFalse: [self error: self elJugadorManoDebeComenzarConTresCartasErrorDescription]! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 17:46:02'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 17:46:34'!
test02ElJugadorPieComienzaConTresCartas

	|cartasDelJugadorMano cartasDelJugadorPie|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {}.
	
	self 
		should:  [RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie ]
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 
				RondaDeTruco elJugadorPieDebeComenzarConTresCartasErrorDescription]! !
!RondaDeTruco class methodsFor: 'error descriptions' stamp: 'JR 7/5/2021 17:46:46'!
elJugadorPieDebeComenzarConTresCartasErrorDescription! !
!RondaDeTruco class methodsFor: 'error descriptions' stamp: 'JR 7/5/2021 17:46:56' prior: 50936894!
elJugadorPieDebeComenzarConTresCartasErrorDescription

	^'El jugador mano debe comenzar con tres cartas'! !
!RondaDeTruco class methodsFor: 'error descriptions' stamp: 'JR 7/5/2021 17:46:59' prior: 50936899!
elJugadorPieDebeComenzarConTresCartasErrorDescription

	^'El jugador pie debe comenzar con tres cartas'! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'JR 7/5/2021 17:47:17' prior: 50936861!
cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie

	(cartasDelJugadorMano size = 3) ifFalse: [self error: self elJugadorManoDebeComenzarConTresCartasErrorDescription].
	(cartasDelJugadorPie size = 3) ifFalse: [self error: self elJugadorPieDebeComenzarConTresCartasErrorDescription].! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 17:47:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 17:47:23'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 17:48:51'!
test03ElJugadorManoNoTieneCartasRepetidasEnMano

	|cartasDelJugadorMano cartasDelJugadorPie|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	self 
		should:  [RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie ]
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 
				RondaDeTruco elJugadorManoNoDebeTenerCartasRepetidasErrorDescription]! !
!RondaDeTruco class methodsFor: 'error descriptions' stamp: 'JR 7/5/2021 17:49:14'!
elJugadorManoNoDebeTenerCartasRepetidasErrorDescription

	^'El jugador mano no puede tener cartas repetidas'! !

{1. 2. 1} asSet!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'JR 7/5/2021 17:50:41' prior: 50936913!
cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie

	(cartasDelJugadorMano size = 3) ifFalse: [self error: self elJugadorManoDebeComenzarConTresCartasErrorDescription].
	(cartasDelJugadorPie size = 3) ifFalse: [self error: self elJugadorPieDebeComenzarConTresCartasErrorDescription].
	
	(cartasDelJugadorMano asSet size = 3) ifFalse: [self error: self elJugadorManoNoDebeTenerCartasRepetidasErrorDescription]. ! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 17:50:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 17:50:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 17:50:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'JR 7/5/2021 17:50:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'JR 7/5/2021 17:50:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'JR 7/5/2021 17:50:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'JR 7/5/2021 17:50:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'JR 7/5/2021 17:50:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'JR 7/5/2021 17:50:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'JR 7/5/2021 17:50:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'JR 7/5/2021 17:50:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'JR 7/5/2021 17:50:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'JR 7/5/2021 17:50:48'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'JR 7/5/2021 17:50:48'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'JR 7/5/2021 17:50:48'!
ERROR!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'JR 7/5/2021 17:50:48'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'JR 7/5/2021 17:50:48'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'JR 7/5/2021 17:50:48'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'JR 7/5/2021 17:50:48'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'JR 7/5/2021 17:50:48'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'JR 7/5/2021 17:50:48'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInvï¿½lida stamp: 'JR 7/5/2021 17:50:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 17:50:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 17:50:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 17:50:48'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'JR 7/5/2021 17:50:48'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'JR 7/5/2021 17:50:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'JR 7/5/2021 17:50:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'JR 7/5/2021 17:50:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'JR 7/5/2021 17:50:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'JR 7/5/2021 17:50:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'JR 7/5/2021 17:50:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'JR 7/5/2021 17:50:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'JR 7/5/2021 17:50:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'JR 7/5/2021 17:50:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'JR 7/5/2021 17:50:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'JR 7/5/2021 17:50:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'JR 7/5/2021 17:50:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'JR 7/5/2021 17:50:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'JR 7/5/2021 17:50:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'JR 7/5/2021 17:50:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'JR 7/5/2021 17:50:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'JR 7/5/2021 17:50:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'JR 7/5/2021 17:50:51'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInvï¿½lida stamp: 'JR 7/5/2021 17:50:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 17:50:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 17:50:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 17:50:51'!
PASSED!
!RondaDeTruco class methodsFor: 'error descriptions' stamp: 'JR 7/5/2021 17:51:56'!
cartasRepetidasErrorDescription

	^'El jugador mano no puede tener cartas repetidas'! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 17:51:56' prior: 50936933!
test03ElJugadorManoNoTieneCartasRepetidasEnMano

	|cartasDelJugadorMano cartasDelJugadorPie|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	self 
		should:  [RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie ]
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 
				RondaDeTruco cartasRepetidasErrorDescription]! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 17:51:56' prior: 50936963!
cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie

	(cartasDelJugadorMano size = 3) ifFalse: [self error: self elJugadorManoDebeComenzarConTresCartasErrorDescription].
	(cartasDelJugadorPie size = 3) ifFalse: [self error: self elJugadorPieDebeComenzarConTresCartasErrorDescription].
	
	(cartasDelJugadorMano asSet size = 3) ifFalse: [self error: self cartasRepetidasErrorDescription]. ! !

!methodRemoval: RondaDeTruco class #elJugadorManoNoDebeTenerCartasRepetidasErrorDescription stamp: 'JR 7/5/2021 17:51:56'!
elJugadorManoNoDebeTenerCartasRepetidasErrorDescription

	^'El jugador mano no puede tener cartas repetidas'!
!RondaDeTruco class methodsFor: 'error descriptions' stamp: 'JR 7/5/2021 17:52:29' prior: 50937144!
cartasRepetidasErrorDescription

	^'Se juega con un solo mazo'! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 17:52:35'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 17:52:35'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 17:52:35'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 17:52:53'!
test04ElJugadorPieNoTieneCartasRepetidasEnMano

	|cartasDelJugadorMano cartasDelJugadorPie|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 3}.
	
	self 
		should:  [RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie ]
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 
				RondaDeTruco cartasRepetidasErrorDescription]! !

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 17:52:55'!
FAILURE!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 17:52:55'!
FAILURE!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'JR 7/5/2021 17:53:12' prior: 50937172!
cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie

	(cartasDelJugadorMano size = 3) ifFalse: [self error: self elJugadorManoDebeComenzarConTresCartasErrorDescription].
	(cartasDelJugadorPie size = 3) ifFalse: [self error: self elJugadorPieDebeComenzarConTresCartasErrorDescription].
	
	(cartasDelJugadorMano asSet size = 3) ifFalse: [self error: self cartasRepetidasErrorDescription]. 
	(cartasDelJugadorPie asSet size = 3) ifFalse: [self error: self cartasRepetidasErrorDescription].! !

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'JR 7/5/2021 17:53:21'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'JR 7/5/2021 17:53:21'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'JR 7/5/2021 17:53:21'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'JR 7/5/2021 17:53:21'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'JR 7/5/2021 17:53:21'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'JR 7/5/2021 17:53:21'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'JR 7/5/2021 17:53:21'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'JR 7/5/2021 17:53:21'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'JR 7/5/2021 17:53:21'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'JR 7/5/2021 17:53:21'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'JR 7/5/2021 17:53:21'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'JR 7/5/2021 17:53:21'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'JR 7/5/2021 17:53:21'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'JR 7/5/2021 17:53:21'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'JR 7/5/2021 17:53:21'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'JR 7/5/2021 17:53:21'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'JR 7/5/2021 17:53:21'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'JR 7/5/2021 17:53:21'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInvï¿½lida stamp: 'JR 7/5/2021 17:53:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 17:53:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 17:53:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 17:53:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 17:53:21'!
PASSED!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'JR 7/5/2021 17:54:35'!
assertJugadorComienzaConTresCartas: cartasDelJugadorMano

	^ (cartasDelJugadorMano size = 3) ifFalse: [self error: self elJugadorManoDebeComenzarConTresCartasErrorDescription]! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'JR 7/5/2021 17:54:36' prior: 50937241!
cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie

	self assertJugadorComienzaConTresCartas: cartasDelJugadorMano.
	(cartasDelJugadorPie size = 3) ifFalse: [self error: self elJugadorPieDebeComenzarConTresCartasErrorDescription].
	
	(cartasDelJugadorMano asSet size = 3) ifFalse: [self error: self cartasRepetidasErrorDescription]. 
	(cartasDelJugadorPie asSet size = 3) ifFalse: [self error: self cartasRepetidasErrorDescription].! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'JR 7/5/2021 17:54:56'!
m1: cartasDelJugadorPie

	^ (cartasDelJugadorPie size = 3) ifFalse: [self error: self elJugadorPieDebeComenzarConTresCartasErrorDescription]! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'JR 7/5/2021 17:54:56' prior: 50937348!
cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie

	self assertJugadorComienzaConTresCartas: cartasDelJugadorMano.
	self m1: cartasDelJugadorPie.
	
	(cartasDelJugadorMano asSet size = 3) ifFalse: [self error: self cartasRepetidasErrorDescription]. 
	(cartasDelJugadorPie asSet size = 3) ifFalse: [self error: self cartasRepetidasErrorDescription].! !

!methodRemoval: RondaDeTruco class #m1: stamp: 'JR 7/5/2021 17:55:09'!
m1: cartasDelJugadorPie

	^ (cartasDelJugadorPie size = 3) ifFalse: [self error: self elJugadorPieDebeComenzarConTresCartasErrorDescription]!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'JR 7/5/2021 17:55:21' prior: 50937374!
cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie

	self assertJugadorComienzaConTresCartas: cartasDelJugadorMano.
	self assertJugadorComienzaConTresCartas: cartasDelJugadorPie.
	
	(cartasDelJugadorMano asSet size = 3) ifFalse: [self error: self cartasRepetidasErrorDescription]. 
	(cartasDelJugadorPie asSet size = 3) ifFalse: [self error: self cartasRepetidasErrorDescription].! !
!RondaDeTruco class methodsFor: 'error descriptions' stamp: 'JR 7/5/2021 17:55:46'!
losJugadoresDebenComenzarConTresCartasErrorDescription

	^'El jugador mano debe comenzar con tres cartas'! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 17:55:46' prior: 50937339!
assertJugadorComienzaConTresCartas: cartasDelJugadorMano

	^ (cartasDelJugadorMano size = 3) ifFalse: [self error: self losJugadoresDebenComenzarConTresCartasErrorDescription]! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 17:55:46' prior: 50936834!
test01ElJugadorManoComienzaConTresCartas

	|cartasDelJugadorMano cartasDelJugadorPie|
	
	cartasDelJugadorMano := {}.
	
	cartasDelJugadorPie := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	self 
		should:  [RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie ]
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 
				RondaDeTruco losJugadoresDebenComenzarConTresCartasErrorDescription]! !

!methodRemoval: RondaDeTruco class #elJugadorManoDebeComenzarConTresCartasErrorDescription stamp: 'JR 7/5/2021 17:55:47'!
elJugadorManoDebeComenzarConTresCartasErrorDescription

	^'El jugador mano debe comenzar con tres cartas'!
!RondaDeTruco class methodsFor: 'error descriptions' stamp: 'JR 7/5/2021 17:55:55' prior: 50937412!
losJugadoresDebenComenzarConTresCartasErrorDescription

	^'Los jugadores deben comenzar con tres cartas'! !

!methodRemoval: RondaDeTruco class #elJugadorPieDebeComenzarConTresCartasErrorDescription stamp: 'JR 7/5/2021 17:55:58'!
elJugadorPieDebeComenzarConTresCartasErrorDescription

	^'El jugador pie debe comenzar con tres cartas'!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 17:56:18' prior: 50936874!
test02ElJugadorPieComienzaConTresCartas

	|cartasDelJugadorMano cartasDelJugadorPie|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {}.
	
	self 
		should:  [RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie ]
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 
				RondaDeTruco losJugadoresDebenComenzarConTresCartasErrorDescription]! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 17:56:20'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 17:56:20'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 17:56:20'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 17:56:20'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 17:56:50'!
test05LosJugadoresNoTienenCartasRepetidasEntreSi

	|cartasDelJugadorMano cartasDelJugadorPie|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 3}.
	
	self 
		should:  [RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie ]
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 
				RondaDeTruco cartasRepetidasErrorDescription]! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 17:56:59' prior: 50937503!
test05LosJugadoresNoTienenCartasRepetidasEntreSi

	|cartasDelJugadorMano cartasDelJugadorPie|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco oroCon: 1. CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 3}.
	
	self 
		should:  [RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie ]
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 
				RondaDeTruco cartasRepetidasErrorDescription]! !

{1. 2. 1} , {1. 3. 4}!

({1. 2. 1} , {1. 3. 4}) size!

({1. 2. 1} , {1. 3. 4}) asSet size!

({1. 2. 5} , {1. 3. 4}) asSet size  !

{1. 2. 5} , {1. 3. 4} asSet size  !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'JR 7/5/2021 17:58:38' prior: 50937396!
cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie

	self assertJugadorComienzaConTresCartas: cartasDelJugadorMano.
	self assertJugadorComienzaConTresCartas: cartasDelJugadorPie.
	
	(cartasDelJugadorMano asSet size = 3) ifFalse: [self error: self cartasRepetidasErrorDescription]. 
	(cartasDelJugadorPie asSet size = 3) ifFalse: [self error: self cartasRepetidasErrorDescription].
	
	((cartasDelJugadorMano , cartasDelJugadorPie) asSet size = 6) ifFalse: [self error: self cartasRepetidasErrorDescription].! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 17:58:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 17:58:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 17:58:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 17:58:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 17:58:54'!
PASSED!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'JR 7/5/2021 17:59:10' prior: 50937552!
cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie

	self assertJugadorComienzaConTresCartas: cartasDelJugadorMano.
	self assertJugadorComienzaConTresCartas: cartasDelJugadorPie.
	
	((cartasDelJugadorMano , cartasDelJugadorPie) asSet size = 6) ifFalse: [self error: self cartasRepetidasErrorDescription].! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 17:59:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 17:59:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 17:59:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 17:59:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 17:59:13'!
PASSED!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'JR 7/5/2021 17:59:48'!
assertNoHayCartasRepetidasEn: cartasDelJugadorMano y: cartasDelJugadorPie

	^ ((cartasDelJugadorMano , cartasDelJugadorPie) asSet size = 6) ifFalse: [self error: self cartasRepetidasErrorDescription]! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'JR 7/5/2021 17:59:48' prior: 50937590!
cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie

	self assertJugadorComienzaConTresCartas: cartasDelJugadorMano.
	self assertJugadorComienzaConTresCartas: cartasDelJugadorPie.
	
	self assertNoHayCartasRepetidasEn: cartasDelJugadorMano y: cartasDelJugadorPie.! !

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'JR 7/5/2021 18:00:10'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'JR 7/5/2021 18:00:10'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'JR 7/5/2021 18:00:10'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'JR 7/5/2021 18:00:10'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'JR 7/5/2021 18:00:10'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'JR 7/5/2021 18:00:10'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'JR 7/5/2021 18:00:10'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'JR 7/5/2021 18:00:10'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'JR 7/5/2021 18:00:10'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'JR 7/5/2021 18:00:10'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'JR 7/5/2021 18:00:10'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'JR 7/5/2021 18:00:10'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'JR 7/5/2021 18:00:10'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'JR 7/5/2021 18:00:10'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'JR 7/5/2021 18:00:10'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'JR 7/5/2021 18:00:10'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'JR 7/5/2021 18:00:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'JR 7/5/2021 18:00:11'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInvï¿½lida stamp: 'JR 7/5/2021 18:00:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 18:00:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 18:00:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 18:00:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 18:00:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 18:00:11'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 18:03:54'!
test06EmpiezaJugandoElJugadorMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco |
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	
	self assert: rondaDeTruco! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 18:10:04' prior: 50937727!
test06EmpiezaJugandoElJugadorMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco |
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco bastoCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: RondaDeTruco esElTurnoDeLaManoErrorDescription.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDelJugadorMano.
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelJugadorPie ]! !
!RondaDeTruco class methodsFor: 'error descriptions' stamp: 'JR 7/5/2021 18:10:26'!
esElTurnoDeLaManoErrorDescription

	^'Le toca tirar a la mano'! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'JR 7/5/2021 18:10:59' prior: 50937632!
cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie

	self assertJugadorComienzaConTresCartas: cartasDelJugadorMano.
	self assertJugadorComienzaConTresCartas: cartasDelJugadorPie.
	
	self assertNoHayCartasRepetidasEn: cartasDelJugadorMano y: cartasDelJugadorPie.
	
	^self new initializeWithCartasDelJugadorMano: cartasDelJugadorMano yCartasDelJugadorPie: cartasDelJugadorPie.! !

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'JR 7/5/2021 18:11:45'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasDeLaMano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'JR 7/5/2021 18:11:47'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasDeLaMano cartasDelPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'initialization' stamp: 'JR 7/5/2021 18:11:43'!
initializeWithCartasDelJugadorMano: cartasDelJugadorMano yCartasDelJugadorPie: cartasDelJugadorPie

	cartasDeLaMano := cartasDelJugadorMano.
	cartasDelPie := cartasDelJugadorPie.! !
!RondaDeTruco methodsFor: 'accessing' stamp: 'JR 7/5/2021 18:12:15'!
cartasDelJugadorMano

	^cartasDeLaMano ! !
!RondaDeTruco methodsFor: 'accessing' stamp: 'JR 7/5/2021 18:12:22'!
cartasDelJugadorPie

	^cartasDelPie ! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 18:12:27'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 18:12:27'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 18:12:27'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 18:12:27'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 18:12:27'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 18:12:27'!
ERROR!

!testRun: #RondaDeTrucoTest #test06EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 18:12:27'!
ERROR!
!RondaDeTruco methodsFor: 'juego' stamp: 'JR 7/5/2021 18:13:15'!
jugar: unaCartaDeTruco

	self error: self class esElTurnoDeLaManoErrorDescription.! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 18:13:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 18:13:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 18:13:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 18:13:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 18:13:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 18:13:17'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 18:13:30'!
test06NoEmpiezaJugandoElJugadorPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco |
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco bastoCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: RondaDeTruco esElTurnoDeLaManoErrorDescription.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDelJugadorMano.
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelJugadorPie ]! !

!methodRemoval: RondaDeTrucoTest #test06EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 18:13:30'!
test06EmpiezaJugandoElJugadorMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco |
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco bastoCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: RondaDeTruco esElTurnoDeLaManoErrorDescription.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDelJugadorMano.
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelJugadorPie ]!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 18:14:49'!
test07EmpiezaJugandoElJugadorMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco |
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelJugadorPie.
	self assert: rondaDeTruco cartasDelJugadorMano equals: {CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.! !

{1. 2} includes: 1!

{1. 2} includes: 3!
!RondaDeTruco methodsFor: 'juego' stamp: 'JR 7/5/2021 18:17:45' prior: 50937852!
jugar: unaCartaDeTruco
	
	(cartasDelPie includes: unaCartaDeTruco) 	ifTrue: [	self error: self class esElTurnoDeLaManoErrorDescription].
	
	cartasDeLaMano remove: unaCartaDeTruco.! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 18:17:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 18:17:47'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 18:17:47'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 18:17:47'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 18:17:47'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 18:17:47'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 18:17:47'!
ERROR!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 18:17:47'!
ERROR!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 18:17:52'!
ERROR!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 18:17:52'!
ERROR!
!RondaDeTruco methodsFor: 'initialization' stamp: 'JR 7/5/2021 18:18:38' prior: 50937812!
initializeWithCartasDelJugadorMano: cartasDelJugadorMano yCartasDelJugadorPie: cartasDelJugadorPie

	cartasDeLaMano := cartasDelJugadorMano asOrderedCollection.
	cartasDelPie := cartasDelJugadorPie asOrderedCollection.! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 18:18:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 18:18:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 18:18:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 18:18:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 18:18:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 18:18:40'!
FAILURE!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 18:18:40'!
FAILURE!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 18:18:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 18:18:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 18:18:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 18:18:47'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 18:18:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 18:18:49'!
FAILURE!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 18:18:49'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 18:19:16' prior: 50937879!
test06NoEmpiezaJugandoElJugadorPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco |
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3} asOrderedCollection.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3} asOrderedCollection.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco bastoCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: RondaDeTruco esElTurnoDeLaManoErrorDescription.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDelJugadorMano.
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelJugadorPie ]! !

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 18:19:18'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 18:19:40' prior: 50938063!
test06NoEmpiezaJugandoElJugadorPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco |
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco bastoCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: RondaDeTruco esElTurnoDeLaManoErrorDescription.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDelJugadorMano asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelJugadorPie asOrderedCollection ]! !

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 18:19:42'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 18:20:28' prior: 50937936!
test07EmpiezaJugandoElJugadorMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDeLaManoDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3} asOrderedCollection .
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelJugadorPie.
	self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar .! !

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 18:20:29'!
FAILURE!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 18:20:29'!
FAILURE!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 18:20:50'!
FAILURE!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 18:20:50'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 18:21:08' prior: 50938129!
test07EmpiezaJugandoElJugadorMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDeLaManoDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelJugadorPie asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection.! !

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 18:21:10'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 18:22:13'!
test08NoSePuedeJugarUnaCartaQueNoFueRepartida

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco |
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco anchoDeEspada)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: RondaDeTruco laCartaNoEstaEnJuegoErrorDescription.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDelJugadorMano asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelJugadorPie asOrderedCollection ]! !
!RondaDeTruco methodsFor: 'juego' stamp: 'JR 7/5/2021 18:23:13' prior: 50937961!
jugar: unaCartaDeTruco
	
	(cartasDelPie includes: unaCartaDeTruco) 	ifTrue: [	self error: self class esElTurnoDeLaManoErrorDescription].
	(cartasDeLaMano includes: unaCartaDeTruco) IfFalse: [self error: self class laCartaNoEstaEnJuegoErrorDescription] 
	
	cartasDeLaMano remove: unaCartaDeTruco.! !
!RondaDeTruco methodsFor: 'juego' stamp: 'JR 7/5/2021 18:23:17' prior: 50938231!
jugar: unaCartaDeTruco
	
	(cartasDelPie includes: unaCartaDeTruco) 	ifTrue: [	self error: self class esElTurnoDeLaManoErrorDescription].
	(cartasDeLaMano includes: unaCartaDeTruco) IfFalse: [self error: self class laCartaNoEstaEnJuegoErrorDescription].
	
	cartasDeLaMano remove: unaCartaDeTruco.! !
!RondaDeTruco methodsFor: 'juego' stamp: 'JR 7/5/2021 18:23:24' prior: 50938243!
jugar: unaCartaDeTruco
	
	(cartasDelPie includes: unaCartaDeTruco) 	ifTrue: [	self error: self class esElTurnoDeLaManoErrorDescription].
	(cartasDeLaMano includes: unaCartaDeTruco) ifFalse: [self error: self class laCartaNoEstaEnJuegoErrorDescription].
	
	cartasDeLaMano remove: unaCartaDeTruco.! !
!RondaDeTruco class methodsFor: 'error descriptions' stamp: 'JR 7/5/2021 18:23:47'!
laCartaNoEstaEnJuegoErrorDescription

	^'La carta no fue repartida'! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 18:23:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 18:23:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 18:23:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 18:23:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 18:23:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 18:23:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 18:23:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 18:23:54'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 18:25:36'!
test09SiElJugadorManoGanaLaPrimeraRondaNoLeTocaJugarAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDeLaManoDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelJugadorPie asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 18:26:00'!
test09DespuesDeQueEmpieceLaManoLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDeLaManoDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelJugadorPie asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection.! !

!methodRemoval: RondaDeTrucoTest #test09SiElJugadorManoGanaLaPrimeraRondaNoLeTocaJugarAlPie stamp: 'JR 7/5/2021 18:26:01'!
test09SiElJugadorManoGanaLaPrimeraRondaNoLeTocaJugarAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDeLaManoDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelJugadorPie asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection.!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 18:27:12' prior: 50938328!
test09DespuesDeQueEmpieceLaManoLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDeLaManoDespuesDeJugar cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection.! !

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 18:27:13'!
ERROR!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 18:27:13'!
ERROR!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'JR 7/5/2021 18:29:22'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasDeLaMano cartasDelPie state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'juego' stamp: 'JR 7/5/2021 18:29:20' prior: 50938255!
jugar: unaCartaDeTruco
	
	(cartasDelPie includes: unaCartaDeTruco) 	ifTrue: 
		[(state esElTurnoDelPie) 
			ifTrue: [cartasDelPie remove: unaCartaDeTruco ] 
			ifFalse: [	self error: self class esElTurnoDeLaManoErrorDescription]].
	(cartasDeLaMano includes: unaCartaDeTruco) ifFalse: [self error: self class laCartaNoEstaEnJuegoErrorDescription].
	
	cartasDeLaMano remove: unaCartaDeTruco.! !
!RondaDeTruco methodsFor: 'juego' stamp: 'JR 7/5/2021 18:30:51' prior: 50938435!
jugar: unaCartaDeTruco
	
	(cartasDelPie includes: unaCartaDeTruco) 	ifTrue: 
		[(state esElTurnoDelPie) 
			ifTrue: [cartasDelPie remove: unaCartaDeTruco ] 
			ifFalse: [	self error: self class esElTurnoDeLaManoErrorDescription]].
		
	(cartasDeLaMano includes: unaCartaDeTruco) ifTrue: 
		[(state esElTurnoDeLaMano) 
			ifTrue: [	cartasDeLaMano remove: unaCartaDeTruco] 
			ifFalse: [self error: self class laCartaNoEstaEnJuegoErrorDescription]]
	
! !

!classDefinition: #TurnoDeLaManoState category: 'ISW1-2021-1C-2doParcial' stamp: 'JR 7/5/2021 18:32:10'!
Object subclass: #TurnoDeLaManoState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'initialization' stamp: 'JR 7/5/2021 18:32:05' prior: 50938004!
initializeWithCartasDelJugadorMano: cartasDelJugadorMano yCartasDelJugadorPie: cartasDelJugadorPie

	cartasDeLaMano := cartasDelJugadorMano asOrderedCollection.
	cartasDelPie := cartasDelJugadorPie asOrderedCollection.
	state := TurnoDeLaManoState for: self. ! !
!TurnoDeLaManoState class methodsFor: 'instance creation' stamp: 'JR 7/5/2021 18:32:44'!
for: unaRondaDeTruco

	^self new initializeFor: unaRondaDeTruco ! !
!TurnoDeLaManoState methodsFor: 'initialization' stamp: 'JR 7/5/2021 18:32:52'!
 initializeFor: unaRondaDeTruco ! !
!TurnoDeLaManoState methodsFor: 'turnos' stamp: 'JR 7/5/2021 18:33:28'!
esElTurnoDelPie

	^false! !
!TurnoDeLaManoState methodsFor: 'turnos' stamp: 'JR 7/5/2021 18:33:34'!
esElTurnoDeLaMano

	^true! !

!classDefinition: #TurnoDelPieState category: 'ISW1-2021-1C-2doParcial' stamp: 'JR 7/5/2021 18:34:42'!
Object subclass: #TurnoDelPieState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'juego' stamp: 'JR 7/5/2021 18:34:38' prior: 50938450!
jugar: unaCartaDeTruco
	
	(cartasDelPie includes: unaCartaDeTruco) 	ifTrue: 
		[(state esElTurnoDelPie) 
			ifTrue: [cartasDelPie remove: unaCartaDeTruco ] 
			ifFalse: [	self error: self class esElTurnoDeLaManoErrorDescription]].
		
	(cartasDeLaMano includes: unaCartaDeTruco) ifTrue: 
		[(state esElTurnoDeLaMano) 
			ifTrue: [	cartasDeLaMano remove: unaCartaDeTruco.
				    state := TurnoDelPieState for: self] 
			ifFalse: [self error: self class laCartaNoEstaEnJuegoErrorDescription]]
	
! !
!TurnoDelPieState methodsFor: 'initialization' stamp: 'JR 7/5/2021 18:34:58'!
initializeFor: unaRondaDeTruco ! !
!TurnoDelPieState class methodsFor: 'instance creation' stamp: 'JR 7/5/2021 18:35:13'!
for: unaRondaDeTruco

	^self new initializeFor: unaRondaDeTruco ! !
!TurnoDelPieState methodsFor: 'turnos' stamp: 'JR 7/5/2021 18:35:47'!
esElTurnoDelPie

	^true! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 18:35:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 18:35:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 18:35:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 18:35:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 18:35:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 18:35:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 18:35:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 18:35:51'!
FAILURE!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 18:35:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 18:35:51'!
FAILURE!
!RondaDeTruco methodsFor: 'juego' stamp: 'JR 7/5/2021 18:36:31' prior: 50938511!
jugar: unaCartaDeTruco
	
	(cartasDelPie includes: unaCartaDeTruco) 	ifTrue: 
		[(state esElTurnoDelPie) 
			ifTrue: [^cartasDelPie remove: unaCartaDeTruco ] 
			ifFalse: [	self error: self class esElTurnoDeLaManoErrorDescription]].
		
	(cartasDeLaMano includes: unaCartaDeTruco) ifTrue: 
		[(state esElTurnoDeLaMano) 
			ifTrue: [	cartasDeLaMano remove: unaCartaDeTruco.
				    ^state := TurnoDelPieState for: self]].
		
	self error: self class laCartaNoEstaEnJuegoErrorDescription
	
	
! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 18:36:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 18:36:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 18:36:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 18:36:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 18:36:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 18:36:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 18:36:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 18:36:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 18:36:34'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 18:38:08'!
test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDeLaManoDespuesDeJugar cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 18:39:26' prior: 50938627!
test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDeLaManoDespuesDeJugar cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 2)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: RondaDeTruco laCartaNoEstaEnJuegoErrorDescription.
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection.].! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 18:39:45' prior: 50938661!
test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDeLaManoDespuesDeJugar cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 2)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: RondaDeTruco esElTurnoDelPieErrorDescription.
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection.].! !
!RondaDeTruco class methodsFor: 'error descriptions' stamp: 'JR 7/5/2021 18:40:16'!
esElTurnoDelPieErrorDescription

	^'Le toca tirar al pie'! !
!RondaDeTruco methodsFor: 'juego' stamp: 'JR 7/5/2021 18:42:48' prior: 50938577!
jugar: unaCartaDeTruco
	
	(cartasDelPie includes: unaCartaDeTruco) 	ifTrue: 
		[(state esElTurnoDelPie) 
			ifTrue: [^cartasDelPie remove: unaCartaDeTruco ] 
			ifFalse: [	self error: self class esElTurnoDeLaManoErrorDescription]].
		
	(cartasDeLaMano includes: unaCartaDeTruco) ifTrue: 
		[(state esElTurnoDeLaMano) 
			ifTrue: [	cartasDeLaMano remove: unaCartaDeTruco.
				    ^state := TurnoDelPieState for: self]].
		
	self error: self class laCartaNoEstaEnJuegoErrorDescription! !
!RondaDeTruco methodsFor: 'juego' stamp: 'JR 7/5/2021 18:44:12' prior: 50938748!
jugar: unaCartaDeTruco
	
	(cartasDelPie includes: unaCartaDeTruco) 	ifTrue: 
		[(state esElTurnoDelPie) 
			ifTrue: [cartasDelPie remove: unaCartaDeTruco.
				   ^state := TurnoDelPieState for: self] 
			ifFalse: [	self error: self class esElTurnoDeLaManoErrorDescription]].
		
	(cartasDeLaMano includes: unaCartaDeTruco) ifTrue: 
		[(state esElTurnoDeLaMano) 
			ifTrue: [	cartasDeLaMano remove: unaCartaDeTruco.
				    ^state := TurnoDelPieState for: self]
			ifFalse: [self error: self class esElTurnoDelPieErrorDescription]].
		
	self error: self class laCartaNoEstaEnJuegoErrorDescription! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 18:44:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 18:44:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 18:44:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 18:44:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 18:44:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 18:44:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 18:44:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 18:44:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 18:44:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 18:44:16'!
ERROR!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 18:44:16'!
ERROR!
!TurnoDelPieState methodsFor: 'turnos' stamp: 'JR 7/5/2021 18:44:30'!
esElTurnoDeLaMano

	^false! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 18:44:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 18:44:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 18:44:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 18:44:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 18:44:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 18:44:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 18:44:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 18:44:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 18:44:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 18:44:33'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 18:45:08'!
test11SiElPrimerEnfrentamientoLoGanaElPieLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDeLaManoDespuesDeJugar cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 2)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: RondaDeTruco esElTurnoDelPieErrorDescription.
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection.].! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 18:45:55' prior: 50938866!
test11SiElPrimerEnfrentamientoLoGanaElPieLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDeLaManoDespuesDeJugar cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 1).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection.! !

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaElPieLeTocaAlPie stamp: 'JR 7/5/2021 18:45:56'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 18:46:10'!
test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDeLaManoDespuesDeJugar cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 1).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection.! !

!methodRemoval: RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaElPieLeTocaAlPie stamp: 'JR 7/5/2021 18:46:13'!
test11SiElPrimerEnfrentamientoLoGanaElPieLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDeLaManoDespuesDeJugar cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 1).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection.!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 18:47:23' prior: 50938945!
test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDeLaManoDespuesDeJugar cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco bastoCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: RondaDeTruco esElTurnoDeLaManoErrorDescription.
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection.]! !

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 18:47:24'!
FAILURE!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 18:47:24'!
FAILURE!
!RondaDeTruco methodsFor: 'juego' stamp: 'JR 7/5/2021 18:49:05' prior: 50938766!
jugar: unaCartaDeTruco
	
	| cartasJugadas |
	cartasJugadas := OrderedCollection new.
	
	(cartasDelPie includes: unaCartaDeTruco) 	ifTrue: 
		[(state esElTurnoDelPie) 
			ifTrue: [cartasDelPie remove: unaCartaDeTruco.
				   ^state := TurnoDelPieState for: self] 
			ifFalse: [	self error: self class esElTurnoDeLaManoErrorDescription]].
		
	(cartasDeLaMano includes: unaCartaDeTruco) ifTrue: 
		[(state esElTurnoDeLaMano) 
			ifTrue: [	cartasDeLaMano remove: unaCartaDeTruco.
				    ^state := TurnoDelPieState for: self]
			ifFalse: [self error: self class esElTurnoDelPieErrorDescription]].
		
	self error: self class laCartaNoEstaEnJuegoErrorDescription! !
!RondaDeTruco methodsFor: 'juego' stamp: 'JR 7/5/2021 18:49:11' prior: 50939064!
jugar: unaCartaDeTruco
	
	| cartasJugadas |
	
	cartasJugadas := OrderedCollection new.
	
	(cartasDelPie includes: unaCartaDeTruco) 	ifTrue: 
		[(state esElTurnoDelPie) 
			ifTrue: [cartasDelPie remove: unaCartaDeTruco.
				   ^state := TurnoDelPieState for: self] 
			ifFalse: [	self error: self class esElTurnoDeLaManoErrorDescription]].
		
	(cartasDeLaMano includes: unaCartaDeTruco) ifTrue: 
		[(state esElTurnoDeLaMano) 
			ifTrue: [	cartasDeLaMano remove: unaCartaDeTruco.
				    ^state := TurnoDelPieState for: self]
			ifFalse: [self error: self class esElTurnoDelPieErrorDescription]].
		
	self error: self class laCartaNoEstaEnJuegoErrorDescription! !

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'JR 7/5/2021 18:54:36'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasDeLaMano cartasDelPie state cartasJugadass'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'juego' stamp: 'JR 7/5/2021 18:54:34' prior: 50939088!
jugar: unaCartaDeTruco
	
	(cartasDelPie includes: unaCartaDeTruco) 	ifTrue: 
		[(state esElTurnoDelPie) 
			ifTrue: [cartasDelPie remove: unaCartaDeTruco.
				    cartasJugadass add: unaCartaDeTruco.
				    (self quienGanoElEnfrentamiento = #Pie) ifTrue: [^state := TurnoDelPieState for: self]
				   ifFalse: [^state := TurnoDeLaManoState for: self]] 
			ifFalse: [	self error: self class esElTurnoDeLaManoErrorDescription]].
		
	(cartasDeLaMano includes: unaCartaDeTruco) ifTrue: 
		[(state esElTurnoDeLaMano) 
			ifTrue: [	cartasDeLaMano remove: unaCartaDeTruco.
				    cartasJugadass add: unaCartaDeTruco.
				    ^state := TurnoDelPieState for: self]
			ifFalse: [self error: self class esElTurnoDelPieErrorDescription]].
		
	self error: self class laCartaNoEstaEnJuegoErrorDescription! !

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'JR 7/5/2021 18:54:40'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasDeLaMano cartasDelPie state cartasJugadas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 18:54:40' prior: 50939121!
jugar: unaCartaDeTruco
	
	(cartasDelPie includes: unaCartaDeTruco) 	ifTrue: 
		[(state esElTurnoDelPie) 
			ifTrue: [cartasDelPie remove: unaCartaDeTruco.
				    cartasJugadas add: unaCartaDeTruco.
				    (self quienGanoElEnfrentamiento = #Pie) ifTrue: [^state := TurnoDelPieState for: self]
				   ifFalse: [^state := TurnoDeLaManoState for: self]] 
			ifFalse: [	self error: self class esElTurnoDeLaManoErrorDescription]].
		
	(cartasDeLaMano includes: unaCartaDeTruco) ifTrue: 
		[(state esElTurnoDeLaMano) 
			ifTrue: [	cartasDeLaMano remove: unaCartaDeTruco.
				    cartasJugadas add: unaCartaDeTruco.
				    ^state := TurnoDelPieState for: self]
			ifFalse: [self error: self class esElTurnoDelPieErrorDescription]].
		
	self error: self class laCartaNoEstaEnJuegoErrorDescription! !
!RondaDeTruco methodsFor: 'initialization' stamp: 'JR 7/5/2021 18:54:53' prior: 50938475!
initializeWithCartasDelJugadorMano: cartasDelJugadorMano yCartasDelJugadorPie: cartasDelJugadorPie

	cartasDeLaMano := cartasDelJugadorMano asOrderedCollection.
	cartasDelPie := cartasDelJugadorPie asOrderedCollection.
	state := TurnoDeLaManoState for: self. 
	cartasJugadas := OrderedCollection new.! !
!RondaDeTruco methodsFor: 'juego' stamp: 'JR 7/5/2021 18:56:30'!
quienGanoElEnfrentamiento

	(cartasJugadas first mataA: cartasJugadas second) ifTrue: [^#Mano] ifFalse: [^#Pie]! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 18:56:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 18:56:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 18:56:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 18:56:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 18:56:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 18:56:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 18:56:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 18:56:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 18:56:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 18:56:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 18:56:38'!
FAILURE!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 18:56:38'!
FAILURE!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 18:56:43'!
FAILURE!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 18:56:43'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 18:57:16' prior: 50939015!
test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDeLaManoDespuesDeJugar cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco bastoCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: RondaDeTruco esElTurnoDeLaManoErrorDescription.
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection.]! !

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 18:57:17'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 18:58:22'!
test12SiElPrimerEnfrentamientoLoGanaLaManoLeTocaALaMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDeLaManoDespuesDeJugar cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection.! !

!testRun: #RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaLaManoLeTocaALaMano stamp: 'JR 7/5/2021 18:58:23'!
PASSED!

!methodRemoval: RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaLaManoLeTocaALaMano stamp: 'JR 7/5/2021 18:58:43'!
test12SiElPrimerEnfrentamientoLoGanaLaManoLeTocaALaMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDeLaManoDespuesDeJugar cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection.!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 18:59:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 18:59:12'!
PASSED!

!classDefinition: #TurnosRondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'JR 7/5/2021 19:00:35'!
Object subclass: #TurnosRondaDeTruco
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #TurnoDeLaManoState category: 'ISW1-2021-1C-2doParcial' stamp: 'JR 7/5/2021 19:00:35'!
TurnosRondaDeTruco subclass: #TurnoDeLaManoState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

TurnosRondaDeTruco subclass: #TurnoDelPieState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #TurnoDelPieState category: 'ISW1-2021-1C-2doParcial' stamp: 'JR 7/5/2021 19:00:52'!
TurnosRondaDeTruco subclass: #TurnoDelPieState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!TurnosRondaDeTruco methodsFor: 'initialization' stamp: 'JR 7/5/2021 19:01:04'!
initializeFor: unaRondaDeTruco ! !

!methodRemoval: TurnoDeLaManoState #initializeFor: stamp: 'JR 7/5/2021 19:01:13'!
initializeFor: unaRondaDeTruco !

!methodRemoval: TurnoDelPieState #initializeFor: stamp: 'JR 7/5/2021 19:01:16'!
initializeFor: unaRondaDeTruco !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 19:01:18'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 19:01:18'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 19:01:18'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 19:01:18'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 19:01:18'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 19:01:18'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 19:01:18'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 19:01:18'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 19:01:18'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 19:01:18'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 19:01:18'!
PASSED!
!TurnosRondaDeTruco methodsFor: 'turnos' stamp: 'JR 7/5/2021 19:01:37'!
esElTurnoDeLaMano
	
	self subclassResponsibility ! !
!TurnosRondaDeTruco methodsFor: 'turnos' stamp: 'JR 7/5/2021 19:01:41'!
esElTurnoDelPie
	
	self subclassResponsibility ! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 19:01:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 19:01:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 19:01:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 19:01:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 19:01:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 19:01:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 19:01:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 19:01:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 19:01:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 19:01:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 19:01:51'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 19:04:25'!
test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDeLaManoDespuesDeJugar cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 2)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: RondaDeTruco esElTurnoDelPieErrorDescription.
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection.].! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 19:06:31' prior: 50939509!
test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDeLaManoDespuesDeJugar cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 3}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco bastoCon: 1}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection.! !

!testRun: #RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 19:06:32'!
ERROR!

!testRun: #RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 19:06:32'!
ERROR!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'JR 7/5/2021 19:09:11'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasDeLaMano cartasDelPie turnosState cartasJugadas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 19:09:11' prior: 50939186!
initializeWithCartasDelJugadorMano: cartasDelJugadorMano yCartasDelJugadorPie: cartasDelJugadorPie

	cartasDeLaMano := cartasDelJugadorMano asOrderedCollection.
	cartasDelPie := cartasDelJugadorPie asOrderedCollection.
	turnosState := TurnoDeLaManoState for: self. 
	cartasJugadas := OrderedCollection new.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 19:09:11' prior: 50939158!
jugar: unaCartaDeTruco
	
	(cartasDelPie includes: unaCartaDeTruco) 	ifTrue: 
		[(turnosState esElTurnoDelPie) 
			ifTrue: [cartasDelPie remove: unaCartaDeTruco.
				    cartasJugadas add: unaCartaDeTruco.
				    (self quienGanoElEnfrentamiento = #Pie) ifTrue: [^turnosState := TurnoDelPieState for: self]
				   ifFalse: [^turnosState := TurnoDeLaManoState for: self]] 
			ifFalse: [	self error: self class esElTurnoDeLaManoErrorDescription]].
		
	(cartasDeLaMano includes: unaCartaDeTruco) ifTrue: 
		[(turnosState esElTurnoDeLaMano) 
			ifTrue: [	cartasDeLaMano remove: unaCartaDeTruco.
				    cartasJugadas add: unaCartaDeTruco.
				    ^turnosState := TurnoDelPieState for: self]
			ifFalse: [self error: self class esElTurnoDelPieErrorDescription]].
		
	self error: self class laCartaNoEstaEnJuegoErrorDescription! !
!RondaDeTruco methodsFor: 'juego' stamp: 'JR 7/5/2021 19:10:09' prior: 50939616!
jugar: unaCartaDeTruco
	
	(cartasDelPie includes: unaCartaDeTruco) 	ifTrue: 
		[(turnosState esElTurnoDelPie)
			ifTrue: [cartasDelPie remove: unaCartaDeTruco.
				    cartasJugadas add: unaCartaDeTruco.
				    (self quienGanoElEnfrentamiento = #Pie) ifTrue: [^turnosState := TurnoDelPieState for: self]
				   ifFalse: [^turnosState := TurnoDeLaManoState for: self]] 
			ifFalse: [	self error: self class esElTurnoDeLaManoErrorDescription]].
		
	(cartasDeLaMano includes: unaCartaDeTruco) ifTrue: 
		[(turnosState esElTurnoDeLaMano) 
			ifTrue: [	cartasDeLaMano remove: unaCartaDeTruco.
				    cartasJugadas add: unaCartaDeTruco.
				    ^turnosState := TurnoDelPieState for: self]
			ifFalse: [self error: self class esElTurnoDelPieErrorDescription]].
		
	self error: self class laCartaNoEstaEnJuegoErrorDescription! !
!TurnosRondaDeTruco methodsFor: 'jugar' stamp: 'JR 7/5/2021 19:11:01'!
jugar: unaCartaDeTruco

	self subclassResponsibility ! !

!classDefinition: #TurnoDeLaManoState category: 'ISW1-2021-1C-2doParcial' stamp: 'JR 7/5/2021 19:11:46'!
TurnosRondaDeTruco subclass: #TurnoDeLaManoState
	instanceVariableNames: 'ronda'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!TurnoDeLaManoState methodsFor: 'jugar' stamp: 'JR 7/5/2021 19:11:44' overrides: 50939673!
jugar: unaCartaDeTruco

	ronda jugarEnTurnoDeLaMano: unaCartaDeTruco.! !

!classDefinition: #TurnoDelPieState category: 'ISW1-2021-1C-2doParcial' stamp: 'JR 7/5/2021 19:12:20'!
TurnosRondaDeTruco subclass: #TurnoDelPieState
	instanceVariableNames: 'ronda'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!TurnoDelPieState methodsFor: 'jugar' stamp: 'JR 7/5/2021 19:12:18' overrides: 50939673!
jugar: unaCartaDeTruco

	ronda jugarEnTurnoDelPie: unaCartaDeTruco.! !

TurnosRondaDeTruco subclass: #TurnoDeLaManoState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #TurnoDeLaManoState category: 'ISW1-2021-1C-2doParcial' stamp: 'JR 7/5/2021 19:12:31'!
TurnosRondaDeTruco subclass: #TurnoDeLaManoState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

TurnosRondaDeTruco subclass: #TurnoDelPieState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #TurnoDelPieState category: 'ISW1-2021-1C-2doParcial' stamp: 'JR 7/5/2021 19:12:34'!
TurnosRondaDeTruco subclass: #TurnoDelPieState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

Object subclass: #TurnosRondaDeTruco
	instanceVariableNames: 'ronda'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #TurnosRondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'JR 7/5/2021 19:12:38'!
Object subclass: #TurnosRondaDeTruco
	instanceVariableNames: 'ronda'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!TurnosRondaDeTruco methodsFor: 'initialization' stamp: 'JR 7/5/2021 19:12:45' prior: 50939411!
initializeFor: unaRondaDeTruco 

	ronda := 	unaRondaDeTruco ! !
!RondaDeTruco methodsFor: 'juego' stamp: 'JR 7/5/2021 19:14:31'!
jugarEnTurnoDeLaMano: unaCartaDeTruco
	
	(cartasDelPie includes: unaCartaDeTruco) 	ifTrue: [self error: self class esElTurnoDeLaManoErrorDescription].
		
	(cartasDeLaMano includes: unaCartaDeTruco) ifTrue: 
		[cartasDeLaMano remove: unaCartaDeTruco.
		 cartasJugadas add: unaCartaDeTruco.
		 ^turnosState := TurnoDelPieState for: self.].
		
	self error: self class laCartaNoEstaEnJuegoErrorDescription! !
!RondaDeTruco methodsFor: 'juego' stamp: 'JR 7/5/2021 19:15:19'!
jugarEnTurnoDelPie: unaCartaDeTruco
	
	(cartasDelPie includes: unaCartaDeTruco) 	ifTrue: 
		[cartasDelPie remove: unaCartaDeTruco.
		cartasJugadas add: unaCartaDeTruco.
		(self quienGanoElEnfrentamiento = #Pie) 
				ifTrue: [^turnosState := TurnoDelPieState for: self]
				ifFalse: [^turnosState := TurnoDeLaManoState for: self]] .
		
	(cartasDeLaMano includes: unaCartaDeTruco) ifTrue: 
		[self error: self class esElTurnoDelPieErrorDescription].
		
	self error: self class laCartaNoEstaEnJuegoErrorDescription! !
!RondaDeTruco methodsFor: 'juego' stamp: 'JR 7/5/2021 19:15:35' prior: 50939645!
jugar: unaCartaDeTruco
	
	turnosState jugar: unaCartaDeTruco! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 19:15:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 19:15:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 19:15:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 19:15:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 19:15:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 19:15:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 19:15:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 19:15:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 19:15:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 19:15:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 19:15:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 19:15:39'!
ERROR!

!testRun: #RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 19:15:39'!
ERROR!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 19:15:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 19:15:47'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 19:15:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 19:15:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 19:15:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 19:15:51'!
PASSED!
!RondaDeTruco methodsFor: 'juego' stamp: 'JR 7/5/2021 19:16:29'!
assertEsTurnoDeLaMano: unaCartaDeTruco

	^ (cartasDelPie includes: unaCartaDeTruco) 	ifTrue: [self error: self class esElTurnoDeLaManoErrorDescription]! !
!RondaDeTruco methodsFor: 'juego' stamp: 'JR 7/5/2021 19:16:29' prior: 50939751!
jugarEnTurnoDeLaMano: unaCartaDeTruco
	
	self assertEsTurnoDeLaMano: unaCartaDeTruco.
		
	(cartasDeLaMano includes: unaCartaDeTruco) ifTrue: 
		[cartasDeLaMano remove: unaCartaDeTruco.
		 cartasJugadas add: unaCartaDeTruco.
		 ^turnosState := TurnoDelPieState for: self.].
		
	self error: self class laCartaNoEstaEnJuegoErrorDescription! !
!RondaDeTruco methodsFor: 'juego' stamp: 'JR 7/5/2021 19:16:46'!
assertEsTurnoDelPie: unaCartaDeTruco

	^ (cartasDeLaMano includes: unaCartaDeTruco) ifTrue: 
		[self error: self class esElTurnoDelPieErrorDescription]! !
!RondaDeTruco methodsFor: 'juego' stamp: 'JR 7/5/2021 19:16:46' prior: 50939766!
jugarEnTurnoDelPie: unaCartaDeTruco
	
	(cartasDelPie includes: unaCartaDeTruco) 	ifTrue: 
		[cartasDelPie remove: unaCartaDeTruco.
		cartasJugadas add: unaCartaDeTruco.
		(self quienGanoElEnfrentamiento = #Pie) 
				ifTrue: [^turnosState := TurnoDelPieState for: self]
				ifFalse: [^turnosState := TurnoDeLaManoState for: self]] .
		
	self assertEsTurnoDelPie: unaCartaDeTruco.
		
	self error: self class laCartaNoEstaEnJuegoErrorDescription! !
!RondaDeTruco methodsFor: 'juego' stamp: 'JR 7/5/2021 19:17:05'!
assertEsCartaDeLaMano: unaCartaDeTruco

	^ (cartasDelPie includes: unaCartaDeTruco) 	ifTrue: [self error: self class esElTurnoDeLaManoErrorDescription]! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 19:17:05' prior: 50939866!
jugarEnTurnoDeLaMano: unaCartaDeTruco
	
	self assertEsCartaDeLaMano: unaCartaDeTruco.
		
	(cartasDeLaMano includes: unaCartaDeTruco) ifTrue: 
		[cartasDeLaMano remove: unaCartaDeTruco.
		 cartasJugadas add: unaCartaDeTruco.
		 ^turnosState := TurnoDelPieState for: self.].
		
	self error: self class laCartaNoEstaEnJuegoErrorDescription! !

!methodRemoval: RondaDeTruco #assertEsTurnoDeLaMano: stamp: 'JR 7/5/2021 19:17:05'!
assertEsTurnoDeLaMano: unaCartaDeTruco

	^ (cartasDelPie includes: unaCartaDeTruco) 	ifTrue: [self error: self class esElTurnoDeLaManoErrorDescription]!
!RondaDeTruco methodsFor: 'juego' stamp: 'JR 7/5/2021 19:17:11'!
assertEsCartaDelPie: unaCartaDeTruco

	^ (cartasDeLaMano includes: unaCartaDeTruco) ifTrue: 
		[self error: self class esElTurnoDelPieErrorDescription]! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 19:17:11' prior: 50939887!
jugarEnTurnoDelPie: unaCartaDeTruco
	
	(cartasDelPie includes: unaCartaDeTruco) 	ifTrue: 
		[cartasDelPie remove: unaCartaDeTruco.
		cartasJugadas add: unaCartaDeTruco.
		(self quienGanoElEnfrentamiento = #Pie) 
				ifTrue: [^turnosState := TurnoDelPieState for: self]
				ifFalse: [^turnosState := TurnoDeLaManoState for: self]] .
		
	self assertEsCartaDelPie: unaCartaDeTruco.
		
	self error: self class laCartaNoEstaEnJuegoErrorDescription! !

!methodRemoval: RondaDeTruco #assertEsTurnoDelPie: stamp: 'JR 7/5/2021 19:17:11'!
assertEsTurnoDelPie: unaCartaDeTruco

	^ (cartasDeLaMano includes: unaCartaDeTruco) ifTrue: 
		[self error: self class esElTurnoDelPieErrorDescription]!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 19:17:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 19:17:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 19:17:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 19:17:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 19:17:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 19:17:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 19:17:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 19:17:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 19:17:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 19:17:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 19:17:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 19:17:14'!
ERROR!

!testRun: #RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 19:17:14'!
ERROR!
!RondaDeTruco methodsFor: 'juego' stamp: 'JR 7/5/2021 19:17:26' prior: 50939932!
assertEsCartaDelPie: unaCartaDeTruco

	^ (cartasDeLaMano includes: unaCartaDeTruco) ifTrue: 	[self error: self class esElTurnoDelPieErrorDescription]! !
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 19:18:17' prior: 50939940!
jugarEnTurnoDelPie: unaCartaDeTruco
	
	(cartasDelPie includes: unaCartaDeTruco) 	ifTrue: 
		[cartasDelPie remove: unaCartaDeTruco.
		cartasJugadas add: unaCartaDeTruco.
		(self quienGanoElEnfrentamiento = #Pie) 
				ifTrue: [^turnosState := TurnoDelPieState for: self]
				ifFalse: [^turnosState := TurnoDeLaManoState for: self]] .
		
	self assertEsCartaDelPie: unaCartaDeTruco.	
	self error: self class laCartaNoEstaEnJuegoErrorDescription! !
!RondaDeTruco methodsFor: 'assetions' stamp: 'JR 7/5/2021 19:19:21' prior: 50940012!
assertEsCartaDelPie: unaCartaDeTruco

	(cartasDeLaMano includes: unaCartaDeTruco) ifTrue: 	[self error: self class esElTurnoDelPieErrorDescription].
	(cartasDelPie includes: unaCartaDeTruco) ifFalse: [self error: self class laCartaNoEstaEnJuegoErrorDescription]! !
!RondaDeTruco methodsFor: 'assetions' stamp: 'JR 7/5/2021 19:19:42' prior: 50939903!
assertEsCartaDeLaMano: unaCartaDeTruco

	(cartasDelPie includes: unaCartaDeTruco) 	ifTrue: [self error: self class esElTurnoDeLaManoErrorDescription].
	(cartasDeLaMano includes: unaCartaDeTruco) ifFalse: [self error: self class laCartaNoEstaEnJuegoErrorDescription]! !
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 19:20:13' prior: 50939911!
jugarEnTurnoDeLaMano: unaCartaDeTruco
	
	self assertEsCartaDeLaMano: unaCartaDeTruco.
		
	cartasDeLaMano remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	^turnosState := TurnoDelPieState for: self.! !
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 19:20:34' prior: 50940020!
jugarEnTurnoDelPie: unaCartaDeTruco
	
	cartasDelPie remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	(self quienGanoElEnfrentamiento = #Pie) 
		ifTrue: [^turnosState := TurnoDelPieState for: self]
		ifFalse: [^turnosState := TurnoDeLaManoState for: self]! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 19:20:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 19:20:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 19:20:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 19:20:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 19:20:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 19:20:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 19:20:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 19:20:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 19:20:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 19:20:37'!
FAILURE!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 19:20:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 19:20:37'!
ERROR!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 19:20:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 19:20:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 19:20:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 19:20:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 19:20:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 19:20:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 19:20:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 19:20:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 19:20:50'!
FAILURE!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 19:20:50'!
FAILURE!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 19:20:57'!
PASSED!
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 19:21:26' prior: 50940070!
jugarEnTurnoDelPie: unaCartaDeTruco

	self assertEsCartaDeLaMano: unaCartaDeTruco.
	
	cartasDelPie remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	(self quienGanoElEnfrentamiento = #Pie) 
		ifTrue: [^turnosState := TurnoDelPieState for: self]
		ifFalse: [^turnosState := TurnoDeLaManoState for: self]! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 19:21:27'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 19:21:27'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 19:21:27'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 19:21:27'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 19:21:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 19:21:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 19:21:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 19:21:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 19:21:28'!
ERROR!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 19:21:28'!
ERROR!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 19:21:28'!
ERROR!

!testRun: #RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 19:21:28'!
ERROR!
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 19:21:40' prior: 50940165!
jugarEnTurnoDelPie: unaCartaDeTruco

	self assertEsCartaDelPie: unaCartaDeTruco.
	
	cartasDelPie remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	(self quienGanoElEnfrentamiento = #Pie) 
		ifTrue: [^turnosState := TurnoDelPieState for: self]
		ifFalse: [^turnosState := TurnoDeLaManoState for: self]! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 19:21:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 19:21:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 19:21:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 19:21:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 19:21:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 19:21:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 19:21:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 19:21:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 19:21:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 19:21:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 19:21:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 19:21:42'!
ERROR!

!testRun: #RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 19:21:42'!
ERROR!
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 19:22:07' prior: 50940060!
jugarEnTurnoDeLaMano: unaCartaDeTruco
	
	self assertEsCartaDeLaMano: unaCartaDeTruco.
		
	cartasDeLaMano remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	turnosState := TurnoDelPieState for: self.! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 19:22:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 19:22:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 19:22:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 19:22:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 19:22:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 19:22:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 19:22:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 19:22:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 19:22:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 19:22:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 19:22:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 19:22:09'!
ERROR!

!testRun: #RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 19:22:09'!
ERROR!
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 19:22:21' prior: 50940221!
jugarEnTurnoDelPie: unaCartaDeTruco

	self assertEsCartaDelPie: unaCartaDeTruco.
	
	cartasDelPie remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	(self quienGanoElEnfrentamiento = #Pie) 
		ifTrue: [turnosState := TurnoDelPieState for: self]
		ifFalse: [turnosState := TurnoDeLaManoState for: self]! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 19:22:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 19:22:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 19:22:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 19:22:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 19:22:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 19:22:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 19:22:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 19:22:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 19:22:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 19:22:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 19:22:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 19:22:23'!
ERROR!

!testRun: #RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 19:22:23'!
ERROR!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'JR 7/5/2021 19:26:30'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasDeLaMano cartasDelPie turnosState cartasJugadas enfrentamientoState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #SegundoEnfrentamientoState category: 'ISW1-2021-1C-2doParcial' stamp: 'JR 7/5/2021 19:26:39'!
Object subclass: #SegundoEnfrentamientoState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 19:26:29' prior: 50940339!
jugarEnTurnoDelPie: unaCartaDeTruco

	self assertEsCartaDelPie: unaCartaDeTruco.
	
	cartasDelPie remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.

	(self quienGanoElEnfrentamiento = #Pie) 
		ifTrue: [turnosState := TurnoDelPieState for: self]
		ifFalse: [turnosState := TurnoDeLaManoState for: self].
		
	enfrentamientoState esPrimerEnfrentamiento ifTrue: 
		[enfrentamientoState := SegundoEnfrentamientoState for: self].
		
	
	enfrentamientoState esSegundoEnfrentamiento ifTrue: 
		[cartasDelPie remove: unaCartaDeTruco.
		cartasJugadas add: unaCartaDeTruco.
		turnosState := TurnoDeLaManoState for: self].! !

!classDefinition: #PrimerEnfrentamientoState category: 'ISW1-2021-1C-2doParcial' stamp: 'JR 7/5/2021 19:27:01'!
Object subclass: #PrimerEnfrentamientoState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'initialization' stamp: 'JR 7/5/2021 19:26:59' prior: 50939603!
initializeWithCartasDelJugadorMano: cartasDelJugadorMano yCartasDelJugadorPie: cartasDelJugadorPie

	cartasDeLaMano := cartasDelJugadorMano asOrderedCollection.
	cartasDelPie := cartasDelJugadorPie asOrderedCollection.
	turnosState := TurnoDeLaManoState for: self. 
	cartasJugadas := OrderedCollection new.
	enfrentamientoState := PrimerEnfrentamientoState for: self.! !
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 19:27:17' prior: 50940418!
jugarEnTurnoDelPie: unaCartaDeTruco

	self assertEsCartaDelPie: unaCartaDeTruco.
	
	cartasDelPie remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.

	(self quienGanoElEnfrentamiento = #Pie) 
		ifTrue: [turnosState := TurnoDelPieState for: self]
		ifFalse: [turnosState := TurnoDeLaManoState for: self].
		
	enfrentamientoState esPrimerEnfrentamiento ifTrue: 
		[enfrentamientoState := SegundoEnfrentamientoState for: self].
	
	enfrentamientoState esSegundoEnfrentamiento ifTrue: 
		[cartasDelPie remove: unaCartaDeTruco.
		cartasJugadas add: unaCartaDeTruco.
		turnosState := TurnoDeLaManoState for: self].! !
!PrimerEnfrentamientoState methodsFor: 'enfrentamiento' stamp: 'JR 7/5/2021 19:27:41'!
esPrimerEnfrentamiento

	^true! !
!PrimerEnfrentamientoState methodsFor: 'enfrentamiento' stamp: 'JR 7/5/2021 19:27:48'!
esSegundoEnfrentamiento

	^false! !
!SegundoEnfrentamientoState methodsFor: 'enfrentamiento' stamp: 'JR 7/5/2021 19:28:03'!
esSegundoEnfrentamiento

	^true! !
!SegundoEnfrentamientoState methodsFor: 'enfrentamiento' stamp: 'JR 7/5/2021 19:28:10'!
esPrimerEnfrentamiento

	^false! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 19:28:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 19:28:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 19:28:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 19:28:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 19:28:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 19:28:15'!
ERROR!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 19:28:15'!
ERROR!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 19:28:15'!
ERROR!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 19:28:15'!
ERROR!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 19:28:15'!
ERROR!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 19:28:15'!
ERROR!

!testRun: #RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 19:28:15'!
ERROR!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 19:28:22'!
ERROR!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 19:28:22'!
ERROR!
!TurnosRondaDeTruco class methodsFor: 'instance creation' stamp: 'JR 7/5/2021 19:28:44'!
for: unaRondaDeTruco

	^self new initializeFor: unaRondaDeTruco ! !

!methodRemoval: TurnoDeLaManoState class #for: stamp: 'JR 7/5/2021 19:28:47'!
for: unaRondaDeTruco

	^self new initializeFor: unaRondaDeTruco !

!methodRemoval: TurnoDelPieState class #for: stamp: 'JR 7/5/2021 19:28:50'!
for: unaRondaDeTruco

	^self new initializeFor: unaRondaDeTruco !

!classDefinition: #EnfrentamientoState category: 'ISW1-2021-1C-2doParcial' stamp: 'JR 7/5/2021 19:29:13'!
Object subclass: #EnfrentamientoState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #SegundoEnfrentamientoState category: 'ISW1-2021-1C-2doParcial' stamp: 'JR 7/5/2021 19:29:13'!
EnfrentamientoState subclass: #SegundoEnfrentamientoState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

EnfrentamientoState subclass: #PrimerEnfrentamientoState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #PrimerEnfrentamientoState category: 'ISW1-2021-1C-2doParcial' stamp: 'JR 7/5/2021 19:29:23'!
EnfrentamientoState subclass: #PrimerEnfrentamientoState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!EnfrentamientoState class methodsFor: 'instance creation' stamp: 'JR 7/5/2021 19:29:50'!
for: unaRondaDeTruco

	^self new initializeFor: unaRondaDeTruco ! !
!EnfrentamientoState methodsFor: 'initialization' stamp: 'JR 7/5/2021 19:30:05'!
initializeFor: unaRondaDeTruco! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 19:30:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 19:30:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 19:30:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 19:30:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 19:30:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 19:30:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 19:30:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 19:30:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 19:30:13'!
ERROR!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 19:30:13'!
ERROR!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 19:30:13'!
ERROR!

!testRun: #RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 19:30:13'!
ERROR!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 19:30:18'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 19:30:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 19:30:21'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 19:30:22'!
ERROR!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 19:30:23'!
ERROR!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 19:30:38'!
ERROR!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 19:30:38'!
ERROR!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 19:30:57'!
ERROR!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 19:31:01'!
ERROR!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 19:31:01'!
ERROR!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 19:31:43'!
ERROR!
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 19:32:28' prior: 50940464!
jugarEnTurnoDelPie: unaCartaDeTruco

	self assertEsCartaDelPie: unaCartaDeTruco.
		
	enfrentamientoState esPrimerEnfrentamiento ifTrue: 
		[cartasDelPie remove: unaCartaDeTruco.
		cartasJugadas add: unaCartaDeTruco.

		(self quienGanoElEnfrentamiento = #Pie) 
			ifTrue: [turnosState := TurnoDelPieState for: self]
			ifFalse: [turnosState := TurnoDeLaManoState for: self].
		
		enfrentamientoState := SegundoEnfrentamientoState for: self].
	
	enfrentamientoState esSegundoEnfrentamiento ifTrue: 
		[cartasDelPie remove: unaCartaDeTruco.
		cartasJugadas add: unaCartaDeTruco.
		turnosState := TurnoDeLaManoState for: self].! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 19:32:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 19:32:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 19:32:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 19:32:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 19:32:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 19:32:31'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 19:32:31'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 19:32:31'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 19:32:31'!
ERROR!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 19:32:31'!
ERROR!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 19:32:31'!
ERROR!

!testRun: #RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 19:32:31'!
ERROR!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 19:32:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 19:32:50'!
ERROR!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 19:32:50'!
ERROR!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 19:33:16'!
ERROR!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 19:33:16'!
ERROR!
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 19:34:06' prior: 50940688!
jugarEnTurnoDelPie: unaCartaDeTruco

	self assertEsCartaDelPie: unaCartaDeTruco.
		
	enfrentamientoState esPrimerEnfrentamiento ifTrue: 
		[cartasDelPie remove: unaCartaDeTruco.
		cartasJugadas add: unaCartaDeTruco.

		(self quienGanoElEnfrentamiento = #Pie) 
			ifTrue: [turnosState := TurnoDelPieState for: self]
			ifFalse: [turnosState := TurnoDeLaManoState for: self].
		
		^enfrentamientoState := SegundoEnfrentamientoState for: self].
	
	enfrentamientoState esSegundoEnfrentamiento ifTrue: 
		[cartasDelPie remove: unaCartaDeTruco.
		cartasJugadas add: unaCartaDeTruco.
		^turnosState := TurnoDeLaManoState for: self].! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 19:34:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 19:34:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 19:34:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 19:34:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 19:34:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 19:34:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 19:34:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 19:34:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 19:34:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 19:34:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 19:34:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 19:34:09'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 19:34:59'!
test13SiElPrimerEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDeLaManoDespuesDeJugar cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 3}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco bastoCon: 1}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection.! !

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 19:35:05'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 19:35:34' prior: 50940838!
test13SiElPrimerEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDeLaManoDespuesDeJugar cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 3}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco bastoCon: 1}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection.! !

!testRun: #RondaDeTrucoTest #test13SiElPrimerEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie stamp: 'JR 7/5/2021 19:35:36'!
ERROR!

!testRun: #RondaDeTrucoTest #test13SiElPrimerEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie stamp: 'JR 7/5/2021 19:35:36'!
ERROR!

!testRun: #RondaDeTrucoTest #test13SiElPrimerEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie stamp: 'JR 7/5/2021 19:36:05'!
ERROR!

!testRun: #RondaDeTrucoTest #test13SiElPrimerEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie stamp: 'JR 7/5/2021 19:36:05'!
ERROR!

!testRun: #RondaDeTrucoTest #test13SiElPrimerEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie stamp: 'JR 7/5/2021 19:36:26'!
ERROR!

!testRun: #RondaDeTrucoTest #test13SiElPrimerEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie stamp: 'JR 7/5/2021 19:36:42'!
ERROR!

!testRun: #RondaDeTrucoTest #test13SiElPrimerEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie stamp: 'JR 7/5/2021 19:36:42'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 19:37:50' prior: 50940878!
test13SiElPrimerEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDeLaManoDespuesDeJugar cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 1}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco bastoCon: 1}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection.! !

!testRun: #RondaDeTrucoTest #test13SiElPrimerEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie stamp: 'JR 7/5/2021 19:37:51'!
PASSED!

!classDefinition: #PrimerEnfrentamientoState category: 'ISW1-2021-1C-2doParcial' stamp: 'JR 7/5/2021 19:40:41'!
EnfrentamientoState subclass: #PrimerEnfrentamientoState
	instanceVariableNames: 'ronda'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!PrimerEnfrentamientoState methodsFor: 'jugar' stamp: 'JR 7/5/2021 19:40:39'!
xxx: unaCartaDeTruco

	ronda jugarEnPrimerEnfrentamiento: unaCartaDeTruco ! !

!classDefinition: #SegundoEnfrentamientoState category: 'ISW1-2021-1C-2doParcial' stamp: 'JR 7/5/2021 19:41:03'!
EnfrentamientoState subclass: #SegundoEnfrentamientoState
	instanceVariableNames: 'ronda'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!SegundoEnfrentamientoState methodsFor: 'jugar' stamp: 'JR 7/5/2021 19:41:02'!
xxx: unaCartaDeTruco

	ronda jugarEnSegundoEnfrentamiento: unaCartaDeTruco ! !

EnfrentamientoState subclass: #SegundoEnfrentamientoState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #SegundoEnfrentamientoState category: 'ISW1-2021-1C-2doParcial' stamp: 'JR 7/5/2021 19:41:10'!
EnfrentamientoState subclass: #SegundoEnfrentamientoState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

EnfrentamientoState subclass: #PrimerEnfrentamientoState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #PrimerEnfrentamientoState category: 'ISW1-2021-1C-2doParcial' stamp: 'JR 7/5/2021 19:41:13'!
EnfrentamientoState subclass: #PrimerEnfrentamientoState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

Object subclass: #EnfrentamientoState
	instanceVariableNames: 'ronda'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #EnfrentamientoState category: 'ISW1-2021-1C-2doParcial' stamp: 'JR 7/5/2021 19:41:17'!
Object subclass: #EnfrentamientoState
	instanceVariableNames: 'ronda'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!EnfrentamientoState methodsFor: 'initialization' stamp: 'JR 7/5/2021 19:41:22' prior: 50940603!
initializeFor: unaRondaDeTruco

	ronda := unaRondaDeTruco ! !
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 19:42:18'!
jugarEnPrimerEnfrentamiento: 	unaCartaDeTruco
		
	cartasDelPie remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.

	(self quienGanoElEnfrentamiento = #Pie) 
		ifTrue: [turnosState := TurnoDelPieState for: self]
		ifFalse: [turnosState := TurnoDeLaManoState for: self].
		
	enfrentamientoState := SegundoEnfrentamientoState for: self! !
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 19:42:50'!
jugarEnSegundoEnfrentamiento: unaCartaDeTruco

	cartasDelPie remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	^turnosState := TurnoDeLaManoState for: self! !
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 19:43:01' prior: 50940772!
jugarEnTurnoDelPie: unaCartaDeTruco

	self assertEsCartaDelPie: unaCartaDeTruco.
		
	enfrentamientoState xxx: unaCartaDeTruco ! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 19:43:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 19:43:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 19:43:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 19:43:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 19:43:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 19:43:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 19:43:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 19:43:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 19:43:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 19:43:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 19:43:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 19:43:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SiElPrimerEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie stamp: 'JR 7/5/2021 19:43:05'!
PASSED!
!SegundoEnfrentamientoState methodsFor: 'jugar' stamp: 'JR 7/5/2021 19:43:47'!
jugar: unaCartaDeTruco

	ronda jugarEnSegundoEnfrentamiento: unaCartaDeTruco ! !

!methodRemoval: SegundoEnfrentamientoState #xxx: stamp: 'JR 7/5/2021 19:43:47'!
xxx: unaCartaDeTruco

	ronda jugarEnSegundoEnfrentamiento: unaCartaDeTruco !
!PrimerEnfrentamientoState methodsFor: 'jugar' stamp: 'JR 7/5/2021 19:43:56'!
jugar: unaCartaDeTruco

	ronda jugarEnPrimerEnfrentamiento: unaCartaDeTruco ! !

!methodRemoval: PrimerEnfrentamientoState #xxx: stamp: 'JR 7/5/2021 19:43:56'!
xxx: unaCartaDeTruco

	ronda jugarEnPrimerEnfrentamiento: unaCartaDeTruco !
!EnfrentamientoState methodsFor: 'jugar' stamp: 'JR 7/5/2021 19:44:19'!
jugar: unaCartaDeTruco
	
	self subclassResponsibility ! !
!EnfrentamientoState methodsFor: 'enfrentamiento' stamp: 'JR 7/5/2021 19:44:43'!
esSegundoEnfrentamiento

	self subclassResponsibility ! !
!EnfrentamientoState methodsFor: 'enfrentamiento' stamp: 'JR 7/5/2021 19:44:49'!
esPrimerEnfrentamiento

	self subclassResponsibility ! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 19:44:56'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 19:44:56'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 19:44:56'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 19:44:56'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 19:44:56'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 19:44:56'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 19:44:56'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 19:44:56'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 19:44:56'!
ERROR!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 19:44:56'!
ERROR!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 19:44:56'!
ERROR!

!testRun: #RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 19:44:56'!
ERROR!

!testRun: #RondaDeTrucoTest #test13SiElPrimerEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie stamp: 'JR 7/5/2021 19:44:56'!
ERROR!
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 19:45:13' prior: 50941079!
jugarEnTurnoDelPie: unaCartaDeTruco

	self assertEsCartaDelPie: unaCartaDeTruco.
		
	enfrentamientoState jugar: unaCartaDeTruco ! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 19:45:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 19:45:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 19:45:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 19:45:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 19:45:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 19:45:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 19:45:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 19:45:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 19:45:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 19:45:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 19:45:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 19:45:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SiElPrimerEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie stamp: 'JR 7/5/2021 19:45:14'!
PASSED!

!methodRemoval: RondaDeTrucoTest #test13SiElPrimerEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie stamp: 'JR 7/5/2021 19:46:19'!
test13SiElPrimerEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDeLaManoDespuesDeJugar cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 1}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco bastoCon: 1}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection.!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 19:47:01'!
test13SiElSegundoEnfrentamientoLoGanaElPieLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDeLaManoDespuesDeJugar cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 2)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: RondaDeTruco esElTurnoDelPieErrorDescription.
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection.].! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 19:49:52' prior: 50941306!
test13SiElSegundoEnfrentamientoLoGanaElPieLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano isEmpty! !

!testRun: #RondaDeTrucoTest #test13SiElSegundoEnfrentamientoLoGanaElPieLeTocaAlPie stamp: 'JR 7/5/2021 19:49:56'!
ERROR!

!testRun: #RondaDeTrucoTest #test13SiElSegundoEnfrentamientoLoGanaElPieLeTocaAlPie stamp: 'JR 7/5/2021 19:49:56'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 19:50:43'!
test13SiElSegundoEnfrentamientoLoGanaLaManoLeTocaALaMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano isEmpty! !

!methodRemoval: RondaDeTrucoTest #test13SiElSegundoEnfrentamientoLoGanaElPieLeTocaAlPie stamp: 'JR 7/5/2021 19:50:43'!
test13SiElSegundoEnfrentamientoLoGanaElPieLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano isEmpty!

!testRun: #RondaDeTrucoTest #test13SiElSegundoEnfrentamientoLoGanaLaManoLeTocaALaMano stamp: 'JR 7/5/2021 19:50:44'!
ERROR!

!testRun: #RondaDeTrucoTest #test13SiElSegundoEnfrentamientoLoGanaLaManoLeTocaALaMano stamp: 'JR 7/5/2021 19:50:45'!
ERROR!

!testRun: #RondaDeTrucoTest #test13SiElSegundoEnfrentamientoLoGanaLaManoLeTocaALaMano stamp: 'JR 7/5/2021 19:51:25'!
ERROR!

!testRun: #RondaDeTrucoTest #test13SiElSegundoEnfrentamientoLoGanaLaManoLeTocaALaMano stamp: 'JR 7/5/2021 19:51:25'!
ERROR!

!testRun: #RondaDeTrucoTest #test13SiElSegundoEnfrentamientoLoGanaLaManoLeTocaALaMano stamp: 'JR 7/5/2021 19:51:43'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 19:52:04' prior: 50941387!
test13SiElSegundoEnfrentamientoLoGanaLaManoLeTocaALaMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano isEmpty! !

!testRun: #RondaDeTrucoTest #test13SiElSegundoEnfrentamientoLoGanaLaManoLeTocaALaMano stamp: 'JR 7/5/2021 19:52:06'!
ERROR!

!testRun: #RondaDeTrucoTest #test13SiElSegundoEnfrentamientoLoGanaLaManoLeTocaALaMano stamp: 'JR 7/5/2021 19:52:06'!
ERROR!

!testRun: #RondaDeTrucoTest #test13SiElSegundoEnfrentamientoLoGanaLaManoLeTocaALaMano stamp: 'JR 7/5/2021 19:52:10'!
ERROR!

!testRun: #RondaDeTrucoTest #test13SiElSegundoEnfrentamientoLoGanaLaManoLeTocaALaMano stamp: 'JR 7/5/2021 19:52:10'!
ERROR!
!SegundoEnfrentamientoState methodsFor: 'jugar' stamp: 'JR 7/5/2021 19:53:49'!
jugarEnTurnoDelPie: unaCartaDeTruco

	ronda jugarEnSegundoEnfrentamiento: unaCartaDeTruco ! !
!EnfrentamientoState methodsFor: 'jugar' stamp: 'JR 7/5/2021 19:53:49'!
jugarEnTurnoDelPie: unaCartaDeTruco
	
	self subclassResponsibility ! !
!PrimerEnfrentamientoState methodsFor: 'jugar' stamp: 'JR 7/5/2021 19:53:49' overrides: 50941526!
jugarEnTurnoDelPie: unaCartaDeTruco

	ronda jugarEnPrimerEnfrentamiento: unaCartaDeTruco ! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 19:53:49' prior: 50941215!
jugarEnTurnoDelPie: unaCartaDeTruco

	self assertEsCartaDelPie: unaCartaDeTruco.
		
	enfrentamientoState jugarEnTurnoDelPie: unaCartaDeTruco ! !

!methodRemoval: SegundoEnfrentamientoState #jugar: stamp: 'JR 7/5/2021 19:53:49'!
jugar: unaCartaDeTruco

	ronda jugarEnSegundoEnfrentamiento: unaCartaDeTruco !

!methodRemoval: EnfrentamientoState #jugar: stamp: 'JR 7/5/2021 19:53:49'!
jugar: unaCartaDeTruco
	
	self subclassResponsibility !

!methodRemoval: PrimerEnfrentamientoState #jugar: stamp: 'JR 7/5/2021 19:53:49'!
jugar: unaCartaDeTruco

	ronda jugarEnPrimerEnfrentamiento: unaCartaDeTruco !
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 19:54:34'!
jugarPieEnPrimerEnfrentamiento: 	unaCartaDeTruco
		
	cartasDelPie remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.

	(self quienGanoElEnfrentamiento = #Pie) 
		ifTrue: [turnosState := TurnoDelPieState for: self]
		ifFalse: [turnosState := TurnoDeLaManoState for: self].
		
	enfrentamientoState := SegundoEnfrentamientoState for: self! !
!PrimerEnfrentamientoState methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 19:54:34' prior: 50941532 overrides: 50941526!
jugarEnTurnoDelPie: unaCartaDeTruco

	ronda jugarPieEnPrimerEnfrentamiento: unaCartaDeTruco ! !

!methodRemoval: RondaDeTruco #jugarEnPrimerEnfrentamiento: stamp: 'JR 7/5/2021 19:54:34'!
jugarEnPrimerEnfrentamiento: 	unaCartaDeTruco
		
	cartasDelPie remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.

	(self quienGanoElEnfrentamiento = #Pie) 
		ifTrue: [turnosState := TurnoDelPieState for: self]
		ifFalse: [turnosState := TurnoDeLaManoState for: self].
		
	enfrentamientoState := SegundoEnfrentamientoState for: self!
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 19:54:46'!
jugarPieEnSegundoEnfrentamiento: unaCartaDeTruco

	cartasDelPie remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	^turnosState := TurnoDeLaManoState for: self! !
!SegundoEnfrentamientoState methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 19:54:46' prior: 50941520 overrides: 50941526!
jugarEnTurnoDelPie: unaCartaDeTruco

	ronda jugarPieEnSegundoEnfrentamiento: unaCartaDeTruco ! !

!methodRemoval: RondaDeTruco #jugarEnSegundoEnfrentamiento: stamp: 'JR 7/5/2021 19:54:46'!
jugarEnSegundoEnfrentamiento: unaCartaDeTruco

	cartasDelPie remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	^turnosState := TurnoDeLaManoState for: self!
!EnfrentamientoState methodsFor: 'jugar' stamp: 'JR 7/5/2021 19:55:22'!
jugarEnTurnoDeLaMano: unaCartaDeTruco
	
	self subclassResponsibility ! !
!PrimerEnfrentamientoState methodsFor: 'jugar' stamp: 'JR 7/5/2021 19:55:34' overrides: 50941618!
jugarEnTurnoDeLaMano: unaCartaDeTruco

	ronda jugarManoEnPrimerEnfrentamiento: unaCartaDeTruco ! !
!SegundoEnfrentamientoState methodsFor: 'jugar' stamp: 'JR 7/5/2021 19:55:47' overrides: 50941618!
jugarEnTurnoDeLaMano: unaCartaDeTruco

	ronda jugarManoEnSegundoEnfrentamiento: unaCartaDeTruco ! !
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 19:56:23'!
jugarManoEnPrimerEnfrentamiento: 	unaCartaDeTruco
	
	cartasDeLaMano remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	turnosState := TurnoDelPieState for: self.! !
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 19:56:37'!
jugarManoEnPrimerYSegundoEnfrentamiento: 	unaCartaDeTruco
	
	cartasDeLaMano remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	turnosState := TurnoDelPieState for: self.! !
!PrimerEnfrentamientoState methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 19:56:37' prior: 50941624 overrides: 50941618!
jugarEnTurnoDeLaMano: unaCartaDeTruco

	ronda jugarManoEnPrimerYSegundoEnfrentamiento: unaCartaDeTruco ! !

!methodRemoval: RondaDeTruco #jugarManoEnPrimerEnfrentamiento: stamp: 'JR 7/5/2021 19:56:37'!
jugarManoEnPrimerEnfrentamiento: 	unaCartaDeTruco
	
	cartasDeLaMano remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	turnosState := TurnoDelPieState for: self.!
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 19:57:12'!
jugarManoEnPrimerEnfrentamiento: 	unaCartaDeTruco
	
	cartasDeLaMano remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	turnosState := TurnoDelPieState for: self.! !
!PrimerEnfrentamientoState methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 19:57:13' prior: 50941655 overrides: 50941618!
jugarEnTurnoDeLaMano: unaCartaDeTruco

	ronda jugarManoEnPrimerEnfrentamiento: unaCartaDeTruco ! !

!methodRemoval: RondaDeTruco #jugarManoEnPrimerYSegundoEnfrentamiento: stamp: 'JR 7/5/2021 19:57:13'!
jugarManoEnPrimerYSegundoEnfrentamiento: 	unaCartaDeTruco
	
	cartasDeLaMano remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	turnosState := TurnoDelPieState for: self.!
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 19:57:19'!
jugarManoEnSegundoEnfrentamiento: 	unaCartaDeTruco
	
	cartasDeLaMano remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	turnosState := TurnoDelPieState for: self.! !
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 19:57:35' prior: 50940282!
jugarEnTurnoDeLaMano: unaCartaDeTruco
	
	self assertEsCartaDeLaMano: unaCartaDeTruco.
		
	enfrentamientoState jugarEnTurnoDeLaMano: unaCartaDeTruco.! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 19:57:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 19:57:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 19:57:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 19:57:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 19:57:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 19:57:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 19:57:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 19:57:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 19:57:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 19:57:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 19:57:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 19:57:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SiElSegundoEnfrentamientoLoGanaLaManoLeTocaALaMano stamp: 'JR 7/5/2021 19:57:38'!
ERROR!

!testRun: #RondaDeTrucoTest #test13SiElSegundoEnfrentamientoLoGanaLaManoLeTocaALaMano stamp: 'JR 7/5/2021 19:57:38'!
ERROR!
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 20:00:04' prior: 50941695!
jugarManoEnSegundoEnfrentamiento: 	unaCartaDeTruco
	
	cartasDeLaMano remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	
	(self quienGanoElEnfrentamiento = #Pie) 
		ifTrue: [turnosState := TurnoDelPieState for: self]
		ifFalse: [turnosState := TurnoDeLaManoState for: self].! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 20:00:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 20:00:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 20:00:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 20:00:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 20:00:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 20:00:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 20:00:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 20:00:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 20:00:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 20:00:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 20:00:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 20:00:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SiElSegundoEnfrentamientoLoGanaLaManoLeTocaALaMano stamp: 'JR 7/5/2021 20:00:07'!
ERROR!

!testRun: #RondaDeTrucoTest #test13SiElSegundoEnfrentamientoLoGanaLaManoLeTocaALaMano stamp: 'JR 7/5/2021 20:00:07'!
ERROR!
!RondaDeTruco methodsFor: 'juego' stamp: 'JR 7/5/2021 20:00:27'!
quienGanoElPrimerEnfrentamiento

	(cartasJugadas first mataA: cartasJugadas second) ifTrue: [^#Mano] ifFalse: [^#Pie]! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:00:28' prior: 50941763!
jugarManoEnSegundoEnfrentamiento: 	unaCartaDeTruco
	
	cartasDeLaMano remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	
	(self quienGanoElPrimerEnfrentamiento = #Pie) 
		ifTrue: [turnosState := TurnoDelPieState for: self]
		ifFalse: [turnosState := TurnoDeLaManoState for: self].! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:00:28' prior: 50941560!
jugarPieEnPrimerEnfrentamiento: 	unaCartaDeTruco
		
	cartasDelPie remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.

	(self quienGanoElPrimerEnfrentamiento = #Pie) 
		ifTrue: [turnosState := TurnoDelPieState for: self]
		ifFalse: [turnosState := TurnoDeLaManoState for: self].
		
	enfrentamientoState := SegundoEnfrentamientoState for: self! !

!methodRemoval: RondaDeTruco #quienGanoElEnfrentamiento stamp: 'JR 7/5/2021 20:00:28'!
quienGanoElEnfrentamiento

	(cartasJugadas first mataA: cartasJugadas second) ifTrue: [^#Mano] ifFalse: [^#Pie]!
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 20:00:55' prior: 50941833!
jugarManoEnSegundoEnfrentamiento: 	unaCartaDeTruco
	
	cartasDeLaMano remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	
	(self quienGanoElSegundoEnfrentamiento = #Pie) 
		ifTrue: [turnosState := TurnoDelPieState for: self]
		ifFalse: [turnosState := TurnoDeLaManoState for: self].! !

{1. 2. 3. 4} third!

{1. 2. 3. 4} fourth!

{1. 2. 3. 4} fifth!

{1. 2. 3. 4. 5. 6} fifth!

{1. 2. 3. 4. 5. 6} sixth!
!RondaDeTruco methodsFor: 'juego' stamp: 'JR 7/5/2021 20:03:55'!
quienGanoElSegundoEnfrentamiento

	(cartasJugadas third mataA: cartasJugadas fourth)
	ifTrue: [(self quienGanoElPrimerEnfrentamiento = #Pie) 
		ifTrue: [^#Pie]
		ifFalse: [^#Mano]]
	ifFalse: [(self quienGanoElPrimerEnfrentamiento = #Pie) 
		ifTrue: [^#Mano]
		ifFalse: [^#Pie]]
		
		! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 20:04:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 20:04:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 20:04:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 20:04:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 20:04:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 20:04:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 20:04:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 20:04:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 20:04:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 20:04:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 20:04:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 20:04:19'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SiElSegundoEnfrentamientoLoGanaLaManoLeTocaALaMano stamp: 'JR 7/5/2021 20:04:19'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:04:34'!
test14SiElSegundoEnfrentamientoLoGanaElPieLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano isEmpty! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:04:48' prior: 50941941!
test14SiElSegundoEnfrentamientoLoGanaElPieLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano isEmpty! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:05:00' prior: 50941974!
test14SiElSegundoEnfrentamientoLoGanaElPieLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 1).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano isEmpty! !

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaElPieLeTocaAlPie stamp: 'JR 7/5/2021 20:05:01'!
FAILURE!

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaElPieLeTocaAlPie stamp: 'JR 7/5/2021 20:05:02'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:05:39' prior: 50942007!
test14SiElSegundoEnfrentamientoLoGanaElPieLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 1).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self assert: rondaDeTruco cartasDelJugadorPie isEmpty.
	self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar! !

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaElPieLeTocaAlPie stamp: 'JR 7/5/2021 20:05:44'!
FAILURE!

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaElPieLeTocaAlPie stamp: 'JR 7/5/2021 20:05:44'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:05:52' prior: 50942047!
test14SiElSegundoEnfrentamientoLoGanaElPieLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 1).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self assert: rondaDeTruco cartasDelJugadorPie isEmpty.
	self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection! !

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaElPieLeTocaAlPie stamp: 'JR 7/5/2021 20:05:54'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:06:49'!
test13SiElSegundoEnfrentamientoLoGanaLaManoDespuesDeHaberPerdidoElPrimeroLeTocaALaMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano isEmpty! !

!methodRemoval: RondaDeTrucoTest #test13SiElSegundoEnfrentamientoLoGanaLaManoLeTocaALaMano stamp: 'JR 7/5/2021 20:06:49'!
test13SiElSegundoEnfrentamientoLoGanaLaManoLeTocaALaMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano isEmpty!

!methodRemoval: RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaElPieLeTocaAlPie stamp: 'JR 7/5/2021 20:06:56'!
test14SiElSegundoEnfrentamientoLoGanaElPieLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 1).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self assert: rondaDeTruco cartasDelJugadorPie isEmpty.
	self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:07:08'!
test14SiElSegundoEnfrentamientoLoGanaLaManoDespuesDeHaberGanadoElPrimeroLeTocaALaMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano isEmpty! !

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaLaManoDespuesDeHaberGanadoElPrimeroLeTocaALaMano stamp: 'JR 7/5/2021 20:07:09'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:09:12' prior: 50942222!
test14SiElSegundoEnfrentamientoLoGanaLaManoDespuesDeHaberGanadoElPrimeroLeTocaALaMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano isEmpty! !

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaLaManoDespuesDeHaberGanadoElPrimeroLeTocaALaMano stamp: 'JR 7/5/2021 20:09:13'!
ERROR!

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaLaManoDespuesDeHaberGanadoElPrimeroLeTocaALaMano stamp: 'JR 7/5/2021 20:09:13'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:09:43' prior: 50942260!
test14SiElSegundoEnfrentamientoLoGanaLaManoDespuesDeHaberGanadoElPrimeroLeTocaALaMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano isEmpty! !

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaLaManoDespuesDeHaberGanadoElPrimeroLeTocaALaMano stamp: 'JR 7/5/2021 20:09:45'!
ERROR!

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaLaManoDespuesDeHaberGanadoElPrimeroLeTocaALaMano stamp: 'JR 7/5/2021 20:09:45'!
ERROR!
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 20:11:41' prior: 50941867!
jugarManoEnSegundoEnfrentamiento: 	unaCartaDeTruco
	
	cartasDeLaMano remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	
	(cartasJugadas size = 4) 
		ifTrue: [	(self quienGanoElSegundoEnfrentamiento = #Pie) 
			ifTrue: [turnosState := TurnoDelPieState for: self]
			ifFalse: [turnosState := TurnoDeLaManoState for: self]]
		ifFalse: [turnosState := TurnoDelPieState for: self]! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 20:11:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 20:11:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 20:11:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 20:11:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 20:11:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 20:11:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 20:11:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 20:11:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 20:11:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 20:11:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 20:11:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 20:11:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SiElSegundoEnfrentamientoLoGanaLaManoDespuesDeHaberPerdidoElPrimeroLeTocaALaMano stamp: 'JR 7/5/2021 20:11:44'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaLaManoDespuesDeHaberGanadoElPrimeroLeTocaALaMano stamp: 'JR 7/5/2021 20:11:44'!
ERROR!

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaLaManoDespuesDeHaberGanadoElPrimeroLeTocaALaMano stamp: 'JR 7/5/2021 20:11:44'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:11:57' prior: 50942303!
test14SiElSegundoEnfrentamientoLoGanaLaManoDespuesDeHaberGanadoElPrimeroLeTocaALaMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano isEmpty! !

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaLaManoDespuesDeHaberGanadoElPrimeroLeTocaALaMano stamp: 'JR 7/5/2021 20:11:58'!
FAILURE!

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaLaManoDespuesDeHaberGanadoElPrimeroLeTocaALaMano stamp: 'JR 7/5/2021 20:11:58'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:12:11' prior: 50942420!
test14SiElSegundoEnfrentamientoLoGanaLaManoDespuesDeHaberGanadoElPrimeroLeTocaALaMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 11}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano isEmpty! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:12:12' prior: 50942463!
test14SiElSegundoEnfrentamientoLoGanaLaManoDespuesDeHaberGanadoElPrimeroLeTocaALaMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano isEmpty! !

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaLaManoDespuesDeHaberGanadoElPrimeroLeTocaALaMano stamp: 'JR 7/5/2021 20:12:17'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:12:51'!
test14SiElSegundoEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano isEmpty! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:12:58'!
test15SiElSegundoEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano isEmpty! !

!methodRemoval: RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie stamp: 'JR 7/5/2021 20:12:58'!
test14SiElSegundoEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano isEmpty!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:14:05' prior: 50942567!
test15SiElSegundoEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano isEmpty! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:14:39' prior: 50942497!
test14SiElSegundoEnfrentamientoLoGanaLaManoDespuesDeHaberGanadoElPrimeroLeTocaALaMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano isEmpty! !

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaLaManoDespuesDeHaberGanadoElPrimeroLeTocaALaMano stamp: 'JR 7/5/2021 20:14:40'!
PASSED!

!methodRemoval: RondaDeTrucoTest #test15SiElSegundoEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie stamp: 'JR 7/5/2021 20:17:13'!
test15SiElSegundoEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano isEmpty!

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaLaManoDespuesDeHaberGanadoElPrimeroLeTocaALaMano stamp: 'JR 7/5/2021 20:17:15'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:17:40'!
test14SiLaManoGanaTerminaElJuego

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano isEmpty! !

!methodRemoval: RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaLaManoDespuesDeHaberGanadoElPrimeroLeTocaALaMano stamp: 'JR 7/5/2021 20:17:40'!
test14SiElSegundoEnfrentamientoLoGanaLaManoDespuesDeHaberGanadoElPrimeroLeTocaALaMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano isEmpty!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:19:45' prior: 50942742!
test14SiLaManoGanaTerminaElJuego

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar castasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorMano := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	castasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 2)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano castasDeLaManoDespuesDeJugar asOrderedCollection]! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:20:40' prior: 50942809!
test14SiLaManoGanaTerminaElJuego

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorMano := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 2)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano cartasDeLaManoDespuesDeJugar asOrderedCollection]! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:20:52' prior: 50942851!
test14SiLaManoGanaTerminaElJuego

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorMano := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 2)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !
!RondaDeTruco class methodsFor: 'error descriptions' stamp: 'JR 7/5/2021 20:21:06'!
terminoElJuegoErrorDescription

	^'Ya termino el juego'! !

!testRun: #RondaDeTrucoTest #test13SiElSegundoEnfrentamientoLoGanaLaManoDespuesDeHaberPerdidoElPrimeroLeTocaALaMano stamp: 'JR 7/5/2021 20:21:12'!
PASSED!
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 20:22:55' prior: 50941882!
quienGanoElSegundoEnfrentamiento

	(cartasJugadas third mataA: cartasJugadas fourth)
	ifTrue: [(self quienGanoElPrimerEnfrentamiento = #Pie) 
		ifTrue: [^#Pie]
		ifFalse: [#Mano.
			^enfrentamientoState .]]
	ifFalse: [(self quienGanoElPrimerEnfrentamiento = #Pie) 
		ifTrue: [^#Mano]
		ifFalse: [^#Pie]]
		
		! !

!classDefinition: #GanoLaManoState category: 'ISW1-2021-1C-2doParcial' stamp: 'JR 7/5/2021 20:23:30'!
EnfrentamientoState subclass: #GanoLaManoState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 20:23:21' prior: 50942945!
quienGanoElSegundoEnfrentamiento

	(cartasJugadas third mataA: cartasJugadas fourth)
	ifTrue: [(self quienGanoElPrimerEnfrentamiento = #Pie) 
		ifTrue: [^#Pie]
		ifFalse: [#Mano.
			^enfrentamientoState := GanoLaManoState.]]
	ifFalse: [(self quienGanoElPrimerEnfrentamiento = #Pie) 
		ifTrue: [^#Mano]
		ifFalse: [^#Pie]]
		
		! !
!GanoLaManoState methodsFor: 'enfrentamiento' stamp: 'JR 7/5/2021 20:24:31' overrides: 50941526!
jugarEnTurnoDelPie: unaCartaDeTruco

	ronda jugarCuandoGanoLaMano! !
!GanoLaManoState methodsFor: 'enfrentamiento' stamp: 'JR 7/5/2021 20:24:38' overrides: 50941618!
jugarEnTurnoDeLaMano: unaCartaDeTruco

	ronda jugarCuandoGanoLaMano! !
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 20:24:59'!
jugarCuandoGanoLaMano	
	
	self error: self class terminoElJuegoErrorDescription ! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 20:25:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 20:25:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 20:25:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 20:25:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 20:25:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 20:25:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 20:25:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 20:25:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 20:25:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 20:25:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 20:25:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 20:25:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SiElSegundoEnfrentamientoLoGanaLaManoDespuesDeHaberPerdidoElPrimeroLeTocaALaMano stamp: 'JR 7/5/2021 20:25:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SiLaManoGanaTerminaElJuego stamp: 'JR 7/5/2021 20:25:02'!
FAILURE!

!testRun: #RondaDeTrucoTest #test14SiLaManoGanaTerminaElJuego stamp: 'JR 7/5/2021 20:25:02'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:27:11'!
testxxSiLaManoGanaTerminaElJuego

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorMano := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 2)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !

!methodRemoval: RondaDeTrucoTest #test14SiLaManoGanaTerminaElJuego stamp: 'JR 7/5/2021 20:27:11'!
test14SiLaManoGanaTerminaElJuego

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorMano := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 2)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:27:19' prior: 50943051!
testxxSiLaManoGanaTerminaElJuego

	"lo voy a hacer despues :)"

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorMano := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 2)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:27:55'!
test14SiElSegundoEnfrentamientoLoGanaElPieDespuesDeHaberPerdidoElPrimeroLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano isEmpty! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:28:41' prior: 50943178!
test14SiElSegundoEnfrentamientoLoGanaElPieDespuesDeHaberPerdidoElPrimeroLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar|
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano isEmpty! !

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaElPieDespuesDeHaberPerdidoElPrimeroLeTocaAlPie stamp: 'JR 7/5/2021 20:28:42'!
ERROR!

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaElPieDespuesDeHaberPerdidoElPrimeroLeTocaAlPie stamp: 'JR 7/5/2021 20:28:42'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:29:25' prior: 50943211!
test14SiElSegundoEnfrentamientoLoGanaElPieDespuesDeHaberPerdidoElPrimeroLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorPie isEmpty! !

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaElPieDespuesDeHaberPerdidoElPrimeroLeTocaAlPie stamp: 'JR 7/5/2021 20:29:42'!
ERROR!

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaElPieDespuesDeHaberPerdidoElPrimeroLeTocaAlPie stamp: 'JR 7/5/2021 20:29:42'!
ERROR!

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaElPieDespuesDeHaberPerdidoElPrimeroLeTocaAlPie stamp: 'JR 7/5/2021 20:29:46'!
ERROR!

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaElPieDespuesDeHaberPerdidoElPrimeroLeTocaAlPie stamp: 'JR 7/5/2021 20:29:46'!
ERROR!
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 20:31:04' prior: 50941594!
jugarPieEnSegundoEnfrentamiento: unaCartaDeTruco

	cartasDelPie remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	
	(cartasJugadas size = 4) 
		ifTrue: [	(self quienGanoElSegundoEnfrentamiento = #Pie) 
			ifTrue: [turnosState := TurnoDeLaManoState for: self]
			ifFalse: [turnosState := TurnoDelPieState for: self]]
		ifFalse: [turnosState := TurnoDeLaManoState for: self]
	! !

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaElPieDespuesDeHaberPerdidoElPrimeroLeTocaAlPie stamp: 'JR 7/5/2021 20:31:08'!
ERROR!

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaElPieDespuesDeHaberPerdidoElPrimeroLeTocaAlPie stamp: 'JR 7/5/2021 20:31:08'!
ERROR!

!testRun: #RondaDeTrucoTest #test13SiElSegundoEnfrentamientoLoGanaLaManoDespuesDeHaberPerdidoElPrimeroLeTocaALaMano stamp: 'JR 7/5/2021 20:31:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 20:31:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 20:31:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaElPieDespuesDeHaberPerdidoElPrimeroLeTocaAlPie stamp: 'JR 7/5/2021 20:32:33'!
ERROR!

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaElPieDespuesDeHaberPerdidoElPrimeroLeTocaAlPie stamp: 'JR 7/5/2021 20:32:33'!
ERROR!
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 20:34:31' prior: 50943306!
jugarPieEnSegundoEnfrentamiento: unaCartaDeTruco

	cartasDelPie remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	
	(cartasJugadas size = 4) 
		ifTrue: [	(self quienGanoElSegundoEnfrentamiento = #Pie) 
			ifTrue: [turnosState := TurnoDelPieState for: self]
			ifFalse: [turnosState := TurnoDeLaManoState for: self]]
		ifFalse: [turnosState := TurnoDeLaManoState for: self]
	! !

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaElPieDespuesDeHaberPerdidoElPrimeroLeTocaAlPie stamp: 'JR 7/5/2021 20:34:35'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:35:32'!
test15SiElSegundoEnfrentamientoLoGanaElPieDespuesLeTocaALaMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco |
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	
	self assert: rondaDeTruco cartasDelJugadorMano isEmpty.
	self assert: rondaDeTruco cartasDelJugadorPie isEmpty! !

!testRun: #RondaDeTrucoTest #test15SiElSegundoEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 20:35:38'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:35:59'!
test15SiElSegundoEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco |
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	
	self assert: rondaDeTruco cartasDelJugadorMano isEmpty.
	self assert: rondaDeTruco cartasDelJugadorPie isEmpty! !

!methodRemoval: RondaDeTrucoTest #test15SiElSegundoEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 20:35:59'!
test15SiElSegundoEnfrentamientoLoGanaElPieDespuesLeTocaALaMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco |
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	
	self assert: rondaDeTruco cartasDelJugadorMano isEmpty.
	self assert: rondaDeTruco cartasDelJugadorPie isEmpty!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:36:24' prior: 50943407!
test15SiElSegundoEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco |
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 4. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 4).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self assert: rondaDeTruco cartasDelJugadorMano isEmpty.
	self assert: rondaDeTruco cartasDelJugadorPie isEmpty! !

!testRun: #RondaDeTrucoTest #test15SiElSegundoEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie stamp: 'JR 7/5/2021 20:36:25'!
ERROR!

!testRun: #RondaDeTrucoTest #test15SiElSegundoEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie stamp: 'JR 7/5/2021 20:36:25'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:37:18' prior: 50943468!
test15SiElSegundoEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco |
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 4. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 4).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self assert: rondaDeTruco cartasDelJugadorMano isEmpty.
	self assert: rondaDeTruco cartasDelJugadorPie isEmpty! !

!testRun: #RondaDeTrucoTest #test15SiElSegundoEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie stamp: 'JR 7/5/2021 20:37:31'!
ERROR!

!testRun: #RondaDeTrucoTest #test15SiElSegundoEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie stamp: 'JR 7/5/2021 20:37:31'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:37:49' prior: 50943506!
test15SiElSegundoEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco |
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 4. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 4).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1).
	
	self assert: rondaDeTruco cartasDelJugadorMano isEmpty.
	self assert: rondaDeTruco cartasDelJugadorPie isEmpty! !

!testRun: #RondaDeTrucoTest #test15SiElSegundoEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie stamp: 'JR 7/5/2021 20:37:56'!
PASSED!

!methodRemoval: RondaDeTrucoTest #test15SiElSegundoEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie stamp: 'JR 7/5/2021 20:38:02'!
test15SiElSegundoEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco |
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 4. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 4).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1).
	
	self assert: rondaDeTruco cartasDelJugadorMano isEmpty.
	self assert: rondaDeTruco cartasDelJugadorPie isEmpty!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:38:11'!
test15SiLaManoGanaTerminaElJuego

	"lo voy a hacer despues :)"

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorMano := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 2)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !

!methodRemoval: RondaDeTrucoTest #testxxSiLaManoGanaTerminaElJuego stamp: 'JR 7/5/2021 20:38:11'!
testxxSiLaManoGanaTerminaElJuego

	"lo voy a hacer despues :)"

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorMano := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 2)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:38:26' prior: 50943608!
test15SiLaManoGanaTerminaElJuego

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorMano := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 2)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !

!testRun: #RondaDeTrucoTest #test15SiLaManoGanaTerminaElJuego stamp: 'JR 7/5/2021 20:38:28'!
ERROR!

!testRun: #RondaDeTrucoTest #test15SiLaManoGanaTerminaElJuego stamp: 'JR 7/5/2021 20:38:28'!
ERROR!
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 20:40:08' prior: 50942966!
quienGanoElSegundoEnfrentamiento

	(cartasJugadas third mataA: cartasJugadas fourth)
	ifTrue: [(self quienGanoElPrimerEnfrentamiento = #Pie) 
		ifTrue: [^#Pie]
		ifFalse: [^#Mano]]
	ifFalse: [(self quienGanoElPrimerEnfrentamiento = #Pie) 
		ifTrue: [^#Mano]
		ifFalse: [^#Pie]]
		
		! !
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 20:41:11' prior: 50942346!
jugarManoEnSegundoEnfrentamiento: 	unaCartaDeTruco
	
	cartasDeLaMano remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	
	(cartasJugadas size = 4) 
		ifTrue: [	(self quienGanoElSegundoEnfrentamiento = #Pie) 
			ifTrue: [turnosState := TurnoDelPieState for: self]
			ifFalse: [turnosState := TurnoDeLaManoState for: self]]
		ifFalse: [turnosState := TurnoDelPieState for: self].! !
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 20:42:52' prior: 50943754!
jugarManoEnSegundoEnfrentamiento: 	unaCartaDeTruco
	
	cartasDeLaMano remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	
	(cartasJugadas size = 4) 
		ifTrue: [	(self quienGanoElSegundoEnfrentamiento = #Pie) 
			ifTrue: [turnosState := TurnoDelPieState for: self]
			ifFalse: [turnosState := TurnoDeLaManoState for: self]]
		ifFalse: [(self quienGanoElPrimerEnfrentamiento = #Mano)
			ifTrue: [turnosState := GanoLaManoState for: self]
			ifFalse: [	turnosState := TurnoDelPieState for: self]]! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:43:53'!
test15SiLaManoGanaLaManoNoPuedeJugar

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorMano := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 2)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !

!methodRemoval: RondaDeTrucoTest #test15SiLaManoGanaTerminaElJuego stamp: 'JR 7/5/2021 20:43:53'!
test15SiLaManoGanaTerminaElJuego

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorMano := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 2)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]!

!methodRemoval: GanoLaManoState #jugarEnTurnoDelPie: stamp: 'JR 7/5/2021 20:44:02'!
jugarEnTurnoDelPie: unaCartaDeTruco

	ronda jugarCuandoGanoLaMano!

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 20:44:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 20:44:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 20:44:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 20:44:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 20:44:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 20:44:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 20:44:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 20:44:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 20:44:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 20:44:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 20:44:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 20:44:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SiElSegundoEnfrentamientoLoGanaLaManoDespuesDeHaberPerdidoElPrimeroLeTocaALaMano stamp: 'JR 7/5/2021 20:44:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaElPieDespuesDeHaberPerdidoElPrimeroLeTocaAlPie stamp: 'JR 7/5/2021 20:44:14'!
ERROR!

!testRun: #RondaDeTrucoTest #test15SiLaManoGanaLaManoNoPuedeJugar stamp: 'JR 7/5/2021 20:44:14'!
ERROR!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 20:44:22'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 20:44:23'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 20:44:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 20:44:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 20:44:27'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 20:44:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 20:44:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SiElSegundoEnfrentamientoLoGanaLaManoDespuesDeHaberPerdidoElPrimeroLeTocaALaMano stamp: 'JR 7/5/2021 20:44:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaElPieDespuesDeHaberPerdidoElPrimeroLeTocaAlPie stamp: 'JR 7/5/2021 20:44:31'!
ERROR!

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaElPieDespuesDeHaberPerdidoElPrimeroLeTocaAlPie stamp: 'JR 7/5/2021 20:44:31'!
ERROR!
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 20:45:21' prior: 50943770!
jugarManoEnSegundoEnfrentamiento: 	unaCartaDeTruco
	
	cartasDeLaMano remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	
	(cartasJugadas size = 4) 
		ifTrue: [	(self quienGanoElSegundoEnfrentamiento = #Pie) 
			ifTrue: [turnosState := TurnoDelPieState for: self]
			ifFalse: [turnosState := TurnoDeLaManoState for: self]]
		ifFalse: [(self quienGanoElPrimerEnfrentamiento = #Mano)
			ifTrue: [turnosState := GanoLaManoState for: self]
			ifFalse: [	turnosState := TurnoDelPieState for: self]]! !
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 20:41:11' prior: 50943974!
jugarManoEnSegundoEnfrentamiento: 	unaCartaDeTruco
	
	cartasDeLaMano remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	
	(cartasJugadas size = 4) 
		ifTrue: [	(self quienGanoElSegundoEnfrentamiento = #Pie) 
			ifTrue: [turnosState := TurnoDelPieState for: self]
			ifFalse: [turnosState := TurnoDeLaManoState for: self]]
		ifFalse: [turnosState := TurnoDelPieState for: self].! !
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 20:46:36' prior: 50943993!
jugarManoEnSegundoEnfrentamiento: 	unaCartaDeTruco
	
	cartasDeLaMano remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	
	(cartasJugadas size = 4) 
		ifTrue: [	(self quienGanoElSegundoEnfrentamiento = #Pie) 
			ifTrue: [turnosState := TurnoDelPieState for: self]
			ifFalse: [turnosState := TurnoDeLaManoState for: self]]
		ifFalse: [turnosState := TurnoDelPieState for: self.
			(self quienGanoElPrimerEnfrentamiento = #Mano)
				ifTrue: [enfrentamientoState := GanoLaManoState for: self]].! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 20:46:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 20:46:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 20:46:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 20:46:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 20:46:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 20:46:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 20:46:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 20:46:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 20:46:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 20:46:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 20:46:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 20:46:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SiElSegundoEnfrentamientoLoGanaLaManoDespuesDeHaberPerdidoElPrimeroLeTocaALaMano stamp: 'JR 7/5/2021 20:46:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaElPieDespuesDeHaberPerdidoElPrimeroLeTocaAlPie stamp: 'JR 7/5/2021 20:46:40'!
ERROR!

!testRun: #RondaDeTrucoTest #test15SiLaManoGanaLaManoNoPuedeJugar stamp: 'JR 7/5/2021 20:46:40'!
ERROR!

!testRun: #RondaDeTrucoTest #test13SiElSegundoEnfrentamientoLoGanaLaManoDespuesDeHaberPerdidoElPrimeroLeTocaALaMano stamp: 'JR 7/5/2021 20:46:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaElPieDespuesDeHaberPerdidoElPrimeroLeTocaAlPie stamp: 'JR 7/5/2021 20:46:46'!
ERROR!

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaElPieDespuesDeHaberPerdidoElPrimeroLeTocaAlPie stamp: 'JR 7/5/2021 20:46:46'!
ERROR!

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaElPieDespuesDeHaberPerdidoElPrimeroLeTocaAlPie stamp: 'JR 7/5/2021 20:47:18'!
ERROR!

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaElPieDespuesDeHaberPerdidoElPrimeroLeTocaAlPie stamp: 'JR 7/5/2021 20:47:18'!
ERROR!
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 20:48:14' prior: 50944009!
jugarManoEnSegundoEnfrentamiento: 	unaCartaDeTruco
	
	cartasDeLaMano remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	
	(cartasJugadas size = 4) 
		ifTrue: [	(self quienGanoElSegundoEnfrentamiento = #Pie) 
			ifTrue: [turnosState := TurnoDelPieState for: self]
			ifFalse: [turnosState := TurnoDeLaManoState for: self.
				(self quienGanoElPrimerEnfrentamiento = #Mano)
				ifTrue: [enfrentamientoState := GanoLaManoState for: self]]]
		ifFalse: [turnosState := TurnoDelPieState for: self].! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 20:48:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 20:48:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 20:48:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 20:48:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 20:48:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 20:48:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 20:48:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 20:48:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 20:48:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 20:48:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 20:48:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 20:48:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SiElSegundoEnfrentamientoLoGanaLaManoDespuesDeHaberPerdidoElPrimeroLeTocaALaMano stamp: 'JR 7/5/2021 20:48:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaElPieDespuesDeHaberPerdidoElPrimeroLeTocaAlPie stamp: 'JR 7/5/2021 20:48:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SiLaManoGanaLaManoNoPuedeJugar stamp: 'JR 7/5/2021 20:48:16'!
FAILURE!

!testRun: #RondaDeTrucoTest #test15SiLaManoGanaLaManoNoPuedeJugar stamp: 'JR 7/5/2021 20:48:16'!
FAILURE!

!testRun: #RondaDeTrucoTest #test15SiLaManoGanaLaManoNoPuedeJugar stamp: 'JR 7/5/2021 20:48:21'!
FAILURE!

!testRun: #RondaDeTrucoTest #test15SiLaManoGanaLaManoNoPuedeJugar stamp: 'JR 7/5/2021 20:48:21'!
FAILURE!
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 20:49:13' prior: 50943353!
jugarPieEnSegundoEnfrentamiento: unaCartaDeTruco

	cartasDelPie remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	
	(cartasJugadas size = 4) 
		ifTrue: [	(self quienGanoElSegundoEnfrentamiento = #Pie) 
			ifTrue: [turnosState := TurnoDelPieState for: self]
			ifFalse: [turnosState := TurnoDeLaManoState for: self.
				(self quienGanoElPrimerEnfrentamiento = #Mano)
				ifTrue: [enfrentamientoState := GanoLaManoState for: self]]]
		ifFalse: [turnosState := TurnoDeLaManoState for: self]
	! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 20:49:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 20:49:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 20:49:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 20:49:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 20:49:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 20:49:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 20:49:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 20:49:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 20:49:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 20:49:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 20:49:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 20:49:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SiElSegundoEnfrentamientoLoGanaLaManoDespuesDeHaberPerdidoElPrimeroLeTocaALaMano stamp: 'JR 7/5/2021 20:49:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaElPieDespuesDeHaberPerdidoElPrimeroLeTocaAlPie stamp: 'JR 7/5/2021 20:49:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SiLaManoGanaLaManoNoPuedeJugar stamp: 'JR 7/5/2021 20:49:16'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:50:05'!
test16SiLaManoGanaElPieNoPuedeJugar

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorMano := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco copaCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !

!testRun: #RondaDeTrucoTest #test16SiLaManoGanaElPieNoPuedeJugar stamp: 'JR 7/5/2021 20:50:07'!
FAILURE!

!testRun: #RondaDeTrucoTest #test16SiLaManoGanaElPieNoPuedeJugar stamp: 'JR 7/5/2021 20:50:07'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:51:58'!
test16SiElSegundoEnfrentamientoLoGanaElPieDespuesDeHaberPerdidoElPrimeroLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorMano := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco copaCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !

!methodRemoval: RondaDeTrucoTest #test16SiLaManoGanaElPieNoPuedeJugar stamp: 'JR 7/5/2021 20:51:58'!
test16SiLaManoGanaElPieNoPuedeJugar

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorMano := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco copaCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:52:21'!
test16SiElSegundoEnfrentamientoLoGanaElPieDespuesLeTocaALaMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorMano := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco copaCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !

!methodRemoval: RondaDeTrucoTest #test16SiElSegundoEnfrentamientoLoGanaElPieDespuesDeHaberPerdidoElPrimeroLeTocaAlPie stamp: 'JR 7/5/2021 20:52:21'!
test16SiElSegundoEnfrentamientoLoGanaElPieDespuesDeHaberPerdidoElPrimeroLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorMano := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco copaCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:53:23' prior: 50944402!
test16SiElSegundoEnfrentamientoLoGanaElPieDespuesLeTocaALaMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorMano := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:53:55' prior: 50944490!
test16SiElSegundoEnfrentamientoLoGanaElPieDespuesLeTocaALaMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).

	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection! !

!testRun: #RondaDeTrucoTest #test16SiElSegundoEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 20:53:57'!
FAILURE!

!testRun: #RondaDeTrucoTest #test16SiElSegundoEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 20:53:57'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:54:28' prior: 50944526!
test16SiElSegundoEnfrentamientoLoGanaElPieDespuesLeTocaALaMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	
	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:54:46' prior: 50944572!
test16SiElSegundoEnfrentamientoLoGanaElPieDespuesLeTocaALaMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco |
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	
	self assert: rondaDeTruco cartasDelJugadorPie isEmpty.
	self assert: rondaDeTruco cartasDelJugadorMano isEmpty ! !

!testRun: #RondaDeTrucoTest #test16SiElSegundoEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 20:54:50'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:55:10'!
test16SiElSegundoEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco |
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	
	self assert: rondaDeTruco cartasDelJugadorPie isEmpty.
	self assert: rondaDeTruco cartasDelJugadorMano isEmpty ! !

!methodRemoval: RondaDeTrucoTest #test16SiElSegundoEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 20:55:10'!
test16SiElSegundoEnfrentamientoLoGanaElPieDespuesLeTocaALaMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco |
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	
	self assert: rondaDeTruco cartasDelJugadorPie isEmpty.
	self assert: rondaDeTruco cartasDelJugadorMano isEmpty !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:55:49' prior: 50944641!
test16SiElSegundoEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco |
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 4. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 4).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self assert: rondaDeTruco cartasDelJugadorPie isEmpty.
	self assert: rondaDeTruco cartasDelJugadorMano isEmpty ! !

!testRun: #RondaDeTrucoTest #test16SiElSegundoEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie stamp: 'JR 7/5/2021 20:55:52'!
ERROR!

!testRun: #RondaDeTrucoTest #test16SiElSegundoEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie stamp: 'JR 7/5/2021 20:55:52'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:56:05' prior: 50944702!
test16SiElSegundoEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco |
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 4. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 1).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 4).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self assert: rondaDeTruco cartasDelJugadorPie isEmpty.
	self assert: rondaDeTruco cartasDelJugadorMano isEmpty ! !

!testRun: #RondaDeTrucoTest #test16SiElSegundoEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie stamp: 'JR 7/5/2021 20:56:07'!
ERROR!

!testRun: #RondaDeTrucoTest #test16SiElSegundoEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie stamp: 'JR 7/5/2021 20:56:07'!
ERROR!

!testRun: #RondaDeTrucoTest #test16SiElSegundoEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie stamp: 'JR 7/5/2021 20:56:18'!
ERROR!

!testRun: #RondaDeTrucoTest #test16SiElSegundoEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie stamp: 'JR 7/5/2021 20:56:18'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:56:38' prior: 50944740!
test16SiElSegundoEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco |
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 4. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 4).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self assert: rondaDeTruco cartasDelJugadorPie isEmpty.
	self assert: rondaDeTruco cartasDelJugadorMano isEmpty ! !

!testRun: #RondaDeTrucoTest #test16SiElSegundoEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie stamp: 'JR 7/5/2021 20:56:40'!
PASSED!

!methodRemoval: RondaDeTrucoTest #test16SiElSegundoEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie stamp: 'JR 7/5/2021 20:56:48'!
test16SiElSegundoEnfrentamientoLoGanaLaManoDespuesLeTocaAlPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco |
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco bastoCon: 1. CartaDeTruco bastoCon: 4. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 4).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self assert: rondaDeTruco cartasDelJugadorPie isEmpty.
	self assert: rondaDeTruco cartasDelJugadorMano isEmpty !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 20:57:12'!
test16SiLaManoGanaElPieNoPuedeJugar

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorMano := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco copaCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !

!testRun: #RondaDeTrucoTest #test16SiLaManoGanaElPieNoPuedeJugar stamp: 'JR 7/5/2021 20:57:13'!
FAILURE!

!testRun: #RondaDeTrucoTest #test16SiLaManoGanaElPieNoPuedeJugar stamp: 'JR 7/5/2021 20:57:13'!
FAILURE!

!testRun: #RondaDeTrucoTest #test16SiLaManoGanaElPieNoPuedeJugar stamp: 'JR 7/5/2021 20:57:36'!
FAILURE!

!testRun: #RondaDeTrucoTest #test16SiLaManoGanaElPieNoPuedeJugar stamp: 'JR 7/5/2021 20:57:37'!
FAILURE!

!testRun: #RondaDeTrucoTest #test16SiLaManoGanaElPieNoPuedeJugar stamp: 'JR 7/5/2021 20:57:49'!
FAILURE!

!testRun: #RondaDeTrucoTest #test16SiLaManoGanaElPieNoPuedeJugar stamp: 'JR 7/5/2021 20:57:49'!
FAILURE!

!testRun: #RondaDeTrucoTest #test16SiLaManoGanaElPieNoPuedeJugar stamp: 'JR 7/5/2021 20:58:10'!
FAILURE!

!testRun: #RondaDeTrucoTest #test16SiLaManoGanaElPieNoPuedeJugar stamp: 'JR 7/5/2021 20:58:10'!
FAILURE!
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 20:59:58' prior: 50944194!
jugarPieEnSegundoEnfrentamiento: unaCartaDeTruco

	cartasDelPie remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	
	(cartasJugadas size = 4) 
		ifTrue: [	(self quienGanoElSegundoEnfrentamiento = #Pie) 
			ifTrue: [turnosState := TurnoDelPieState for: self]
			ifFalse: [turnosState := TurnoDeLaManoState for: self.
				(self quienGanoElPrimerEnfrentamiento = #Mano)
				ifTrue: [turnosState := GanoLaManoState for: self]]]
		ifFalse: [turnosState := TurnoDeLaManoState for: self]
	! !

TurnosRondaDeTruco subclass: #GanoLaManoState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #GanoLaManoState category: 'ISW1-2021-1C-2doParcial' stamp: 'JR 7/5/2021 21:00:13'!
TurnosRondaDeTruco subclass: #GanoLaManoState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!methodRemoval: GanoLaManoState #jugarEnTurnoDeLaMano: stamp: 'JR 7/5/2021 21:00:27'!
jugarEnTurnoDeLaMano: unaCartaDeTruco

	ronda jugarCuandoGanoLaMano!
!GanoLaManoState methodsFor: 'jugar' stamp: 'JR 7/5/2021 21:00:43' overrides: 50939673!
jugar: unaCartaDeTruco

	ronda jugarCuandoGanoLaMano ! !
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 21:00:58' prior: 50944108!
jugarManoEnSegundoEnfrentamiento: 	unaCartaDeTruco
	
	cartasDeLaMano remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	
	(cartasJugadas size = 4) 
		ifTrue: [	(self quienGanoElSegundoEnfrentamiento = #Pie) 
			ifTrue: [turnosState := TurnoDelPieState for: self]
			ifFalse: [turnosState := TurnoDeLaManoState for: self.
				(self quienGanoElPrimerEnfrentamiento = #Mano)
				ifTrue: [turnosState := GanoLaManoState for: self]]]
		ifFalse: [turnosState := TurnoDelPieState for: self].! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 21:01:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 21:01:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 21:01:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 21:01:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 21:01:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 21:01:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 21:01:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 21:01:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 21:01:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 21:01:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 21:01:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 21:01:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SiElSegundoEnfrentamientoLoGanaLaManoDespuesDeHaberPerdidoElPrimeroLeTocaALaMano stamp: 'JR 7/5/2021 21:01:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaElPieDespuesDeHaberPerdidoElPrimeroLeTocaAlPie stamp: 'JR 7/5/2021 21:01:01'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SiLaManoGanaLaManoNoPuedeJugar stamp: 'JR 7/5/2021 21:01:01'!
PASSED!

!testRun: #RondaDeTrucoTest #test16SiLaManoGanaElPieNoPuedeJugar stamp: 'JR 7/5/2021 21:01:01'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:02:10'!
test17SiElPieGanaLaManoNoPuedeJugar

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco copaCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !

!testRun: #RondaDeTrucoTest #test17SiElPieGanaLaManoNoPuedeJugar stamp: 'JR 7/5/2021 21:02:12'!
FAILURE!

!testRun: #RondaDeTrucoTest #test17SiElPieGanaLaManoNoPuedeJugar stamp: 'JR 7/5/2021 21:02:12'!
FAILURE!

!classDefinition: #GanoElPieState category: 'ISW1-2021-1C-2doParcial' stamp: 'JR 7/5/2021 21:03:28'!
TurnosRondaDeTruco subclass: #GanoElPieState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 21:03:53' prior: 50944961!
jugarManoEnSegundoEnfrentamiento: 	unaCartaDeTruco
	
	cartasDeLaMano remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	
	(cartasJugadas size = 4) 
		ifTrue: [	(self quienGanoElSegundoEnfrentamiento = #Pie) 
			ifTrue: [turnosState := TurnoDelPieState for: self.
				(self quienGanoElPrimerEnfrentamiento = #Pie)
				ifTrue: [turnosState := GanoElPieState for: self]]
			ifFalse: [turnosState := TurnoDeLaManoState for: self.
				(self quienGanoElPrimerEnfrentamiento = #Mano)
				ifTrue: [turnosState := GanoLaManoState for: self]]]
		ifFalse: [turnosState := TurnoDelPieState for: self].! !
!GanoElPieState methodsFor: 'jugar' stamp: 'JR 7/5/2021 21:04:23' overrides: 50939673!
jugar: unaCartaDeTruco

	ronda jugarCuandoGanoElPie 
! !
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 21:04:37'!
jugarCuandoGanoElPie	
	
	self error: self class terminoElJuegoErrorDescription ! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 21:04:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 21:04:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 21:04:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 21:04:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 21:04:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 21:04:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 21:04:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 21:04:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 21:04:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 21:04:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 21:04:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 21:04:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SiElSegundoEnfrentamientoLoGanaLaManoDespuesDeHaberPerdidoElPrimeroLeTocaALaMano stamp: 'JR 7/5/2021 21:04:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaElPieDespuesDeHaberPerdidoElPrimeroLeTocaAlPie stamp: 'JR 7/5/2021 21:04:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SiLaManoGanaLaManoNoPuedeJugar stamp: 'JR 7/5/2021 21:04:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test16SiLaManoGanaElPieNoPuedeJugar stamp: 'JR 7/5/2021 21:04:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test17SiElPieGanaLaManoNoPuedeJugar stamp: 'JR 7/5/2021 21:04:42'!
FAILURE!

!testRun: #RondaDeTrucoTest #test17SiElPieGanaLaManoNoPuedeJugar stamp: 'JR 7/5/2021 21:04:43'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:05:29' prior: 50945039!
test17SiElPieGanaLaManoNoPuedeJugar

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco copaCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !

!testRun: #RondaDeTrucoTest #test17SiElPieGanaLaManoNoPuedeJugar stamp: 'JR 7/5/2021 21:05:30'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:05:42'!
test18SiElPieGanaElPieNoPuedeJugar

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco copaCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !

!testRun: #RondaDeTrucoTest #test18SiElPieGanaElPieNoPuedeJugar stamp: 'JR 7/5/2021 21:05:43'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:05:55' prior: 50945240!
test18SiElPieGanaElPieNoPuedeJugar

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 2)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !

!testRun: #RondaDeTrucoTest #test18SiElPieGanaElPieNoPuedeJugar stamp: 'JR 7/5/2021 21:05:56'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:06:26'!
test17SiElPieGanaLaSegundaManoTerminaElJuego

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco copaCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !

!methodRemoval: RondaDeTrucoTest #test17SiElPieGanaLaManoNoPuedeJugar stamp: 'JR 7/5/2021 21:06:26'!
test17SiElPieGanaLaManoNoPuedeJugar

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco copaCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:06:43'!
test15SiLaManoGanaElSEgundoEnfrentamientoLaManoNoPuedeJugar

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorMano := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 2)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !

!methodRemoval: RondaDeTrucoTest #test15SiLaManoGanaLaManoNoPuedeJugar stamp: 'JR 7/5/2021 21:06:43'!
test15SiLaManoGanaLaManoNoPuedeJugar

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorMano := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 2)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:06:49'!
test17SiElPieGanaElSEgundoEnfrentamientoTerminaElJuego

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco copaCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !

!methodRemoval: RondaDeTrucoTest #test17SiElPieGanaLaSegundaManoTerminaElJuego stamp: 'JR 7/5/2021 21:06:49'!
test17SiElPieGanaLaSegundaManoTerminaElJuego

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco copaCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:06:55'!
test16SiLaManoGanaElSEgundoEnfrentamientoElPieNoPuedeJugar

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorMano := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco copaCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !

!methodRemoval: RondaDeTrucoTest #test16SiLaManoGanaElPieNoPuedeJugar stamp: 'JR 7/5/2021 21:06:55'!
test16SiLaManoGanaElPieNoPuedeJugar

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorMano := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco copaCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:07:14'!
test18SiLaManoGanaElTercerEnfrentamientoElPieNoPuedeJugar

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 2)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !

!methodRemoval: RondaDeTrucoTest #test18SiElPieGanaElPieNoPuedeJugar stamp: 'JR 7/5/2021 21:07:14'!
test18SiElPieGanaElPieNoPuedeJugar

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 2)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:08:17' prior: 50945668!
test18SiLaManoGanaElTercerEnfrentamientoElPieNoPuedeJugar

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco |
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 2)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie isEmpty.
			self assert: rondaDeTruco cartasDelJugadorMano isEmpty]! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:09:08'!
test18DespuesDelTercerEnfrentamientoTerminaElJuego

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco |
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 2)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie isEmpty.
			self assert: rondaDeTruco cartasDelJugadorMano isEmpty]! !

!methodRemoval: RondaDeTrucoTest #test18SiLaManoGanaElTercerEnfrentamientoElPieNoPuedeJugar stamp: 'JR 7/5/2021 21:09:08'!
test18SiLaManoGanaElTercerEnfrentamientoElPieNoPuedeJugar

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco |
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 2)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie isEmpty.
			self assert: rondaDeTruco cartasDelJugadorMano isEmpty]!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:10:31' prior: 50945788!
test18DespuesDelTercerEnfrentamientoTerminaElJuego

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco |
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 4}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 4).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 4)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie isEmpty.
			self assert: rondaDeTruco cartasDelJugadorMano isEmpty]! !

!testRun: #RondaDeTrucoTest #test18DespuesDelTercerEnfrentamientoTerminaElJuego stamp: 'JR 7/5/2021 21:10:33'!
FAILURE!

!testRun: #RondaDeTrucoTest #test18DespuesDelTercerEnfrentamientoTerminaElJuego stamp: 'JR 7/5/2021 21:10:33'!
FAILURE!

!classDefinition: #TercerEnfrentamientoState category: 'ISW1-2021-1C-2doParcial' stamp: 'JR 7/5/2021 21:14:26'!
EnfrentamientoState subclass: #TercerEnfrentamientoState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 21:14:08' prior: 50945096!
jugarManoEnSegundoEnfrentamiento: 	unaCartaDeTruco
	
	cartasDeLaMano remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	
	(cartasJugadas size = 4) 
		ifTrue: [	(self quienGanoElSegundoEnfrentamiento = #Pie) 
			ifTrue: [turnosState := TurnoDelPieState for: self.
				(self quienGanoElPrimerEnfrentamiento = #Pie)
				ifTrue: [turnosState := GanoElPieState for: self]]
			ifFalse: [turnosState := TurnoDeLaManoState for: self.
				(self quienGanoElPrimerEnfrentamiento = #Mano)
				ifTrue: [turnosState := GanoLaManoState for: self]].
			enfrentamientoState := TercerEnfrentamientoState for: self]
		ifFalse: [turnosState := TurnoDelPieState for: self].! !

!methodRemoval: PrimerEnfrentamientoState #esPrimerEnfrentamiento stamp: 'JR 7/5/2021 21:15:52'!
esPrimerEnfrentamiento

	^true!

!methodRemoval: PrimerEnfrentamientoState #esSegundoEnfrentamiento stamp: 'JR 7/5/2021 21:15:52'!
esSegundoEnfrentamiento

	^false!

!methodRemoval: SegundoEnfrentamientoState #esPrimerEnfrentamiento stamp: 'JR 7/5/2021 21:15:56'!
esPrimerEnfrentamiento

	^false!

!methodRemoval: SegundoEnfrentamientoState #esSegundoEnfrentamiento stamp: 'JR 7/5/2021 21:15:56'!
esSegundoEnfrentamiento

	^true!

!methodRemoval: EnfrentamientoState #esPrimerEnfrentamiento stamp: 'JR 7/5/2021 21:15:59'!
esPrimerEnfrentamiento

	self subclassResponsibility !

!methodRemoval: EnfrentamientoState #esSegundoEnfrentamiento stamp: 'JR 7/5/2021 21:15:59'!
esSegundoEnfrentamiento

	self subclassResponsibility !
!TercerEnfrentamientoState methodsFor: 'jugar' stamp: 'JR 7/5/2021 21:16:14' overrides: 50941618!
jugarEnTurnoDeLaMano: unaCartaDeTruco

	ronda jugarManoEnTercerEnfrentamiento: unaCartaDeTruco ! !
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 21:16:34' prior: 50945912!
jugarManoEnSegundoEnfrentamiento: 	unaCartaDeTruco
	
	cartasDeLaMano remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	
	(cartasJugadas size = 4) 
		ifTrue: [	(self quienGanoElSegundoEnfrentamiento = #Pie) 
			ifTrue: [turnosState := TurnoDelPieState for: self.
				(self quienGanoElPrimerEnfrentamiento = #Pie)
				ifTrue: [turnosState := GanoElPieState for: self]]
			ifFalse: [turnosState := TurnoDeLaManoState for: self.
				(self quienGanoElPrimerEnfrentamiento = #Mano)
				ifTrue: [turnosState := GanoLaManoState for: self]]]
		ifFalse: [turnosState := TurnoDelPieState for: self].! !

!classRemoval: #TercerEnfrentamientoState stamp: 'JR 7/5/2021 21:16:40'!
EnfrentamientoState subclass: #TercerEnfrentamientoState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:16:55'!
test18

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco |
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 4}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 4).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 4)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie isEmpty.
			self assert: rondaDeTruco cartasDelJugadorMano isEmpty]! !

!methodRemoval: RondaDeTrucoTest #test18DespuesDelTercerEnfrentamientoTerminaElJuego stamp: 'JR 7/5/2021 21:16:55'!
test18DespuesDelTercerEnfrentamientoTerminaElJuego

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco |
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 4}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 4).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 4)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie isEmpty.
			self assert: rondaDeTruco cartasDelJugadorMano isEmpty]!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:17:34'!
test18SiElPieGanaElSEgundoEnfrentamientoLaManoNoPuedeJugar

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco |
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 4}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 4).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 4)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie isEmpty.
			self assert: rondaDeTruco cartasDelJugadorMano isEmpty]! !

!methodRemoval: RondaDeTrucoTest #test18 stamp: 'JR 7/5/2021 21:17:34'!
test18

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco |
	
	cartasDelJugadorMano := {CartaDeTruco oroCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 4}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 4).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 4)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie isEmpty.
			self assert: rondaDeTruco cartasDelJugadorMano isEmpty]!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:20:34' prior: 50946070!
test18SiElPieGanaElSEgundoEnfrentamientoLaManoNoPuedeJugar

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 2)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !

!testRun: #RondaDeTrucoTest #test18SiElPieGanaElSEgundoEnfrentamientoLaManoNoPuedeJugar stamp: 'JR 7/5/2021 21:20:35'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SiLaManoGanaElSEgundoEnfrentamientoLaManoNoPuedeJugar stamp: 'JR 7/5/2021 21:20:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test16SiLaManoGanaElSEgundoEnfrentamientoElPieNoPuedeJugar stamp: 'JR 7/5/2021 21:20:52'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:21:03'!
m1

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 2)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:21:03' prior: 50946141!
test18SiElPieGanaElSEgundoEnfrentamientoLaManoNoPuedeJugar

	self m1! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:21:12' prior: 50946196!
m1

	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:21:20' prior: 50946237!
test18SiElPieGanaElSEgundoEnfrentamientoLaManoNoPuedeJugar

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 2)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !

!methodRemoval: RondaDeTrucoTest #m1 stamp: 'JR 7/5/2021 21:21:24'!
m1

	!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:22:20' prior: 50946247!
test18SiElPieGanaElSEgundoEnfrentamientoLaManoNoPuedeJugar

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco oroCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 2)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:22:42' prior: 50946292!
test18SiElPieGanaElSEgundoEnfrentamientoLaManoNoPuedeJugar

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco oroCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 2)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !

!testRun: #RondaDeTrucoTest #test18SiElPieGanaElSEgundoEnfrentamientoLaManoNoPuedeJugar stamp: 'JR 7/5/2021 21:22:43'!
ERROR!

!testRun: #RondaDeTrucoTest #test18SiElPieGanaElSEgundoEnfrentamientoLaManoNoPuedeJugar stamp: 'JR 7/5/2021 21:22:43'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:22:53' prior: 50946335!
test18SiElPieGanaElSEgundoEnfrentamientoLaManoNoPuedeJugar

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco oroCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 3)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !

!testRun: #RondaDeTrucoTest #test18SiElPieGanaElSEgundoEnfrentamientoLaManoNoPuedeJugar stamp: 'JR 7/5/2021 21:22:55'!
ERROR!

!testRun: #RondaDeTrucoTest #test18SiElPieGanaElSEgundoEnfrentamientoLaManoNoPuedeJugar stamp: 'JR 7/5/2021 21:22:55'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:23:39' prior: 50946386!
test18SiElPieGanaElSEgundoEnfrentamientoLaManoNoPuedeJugar

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco oroCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 3)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !

!testRun: #RondaDeTrucoTest #test18SiElPieGanaElSEgundoEnfrentamientoLaManoNoPuedeJugar stamp: 'JR 7/5/2021 21:23:42'!
FAILURE!

!testRun: #RondaDeTrucoTest #test18SiElPieGanaElSEgundoEnfrentamientoLaManoNoPuedeJugar stamp: 'JR 7/5/2021 21:23:42'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:24:42'!
test15SiLaManoGanaEnElSegundoEnfrentamientoLaManoNoPuedeJugar

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorMano := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 2)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !

!methodRemoval: RondaDeTrucoTest #test15SiLaManoGanaElSEgundoEnfrentamientoLaManoNoPuedeJugar stamp: 'JR 7/5/2021 21:24:42'!
test15SiLaManoGanaElSEgundoEnfrentamientoLaManoNoPuedeJugar

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorMano := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 2)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:24:47'!
test16SiLaManoGanaEnElSegundoEnfrentamientoElPieNoPuedeJugar

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorMano := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco copaCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !

!methodRemoval: RondaDeTrucoTest #test16SiLaManoGanaElSEgundoEnfrentamientoElPieNoPuedeJugar stamp: 'JR 7/5/2021 21:24:47'!
test16SiLaManoGanaElSEgundoEnfrentamientoElPieNoPuedeJugar

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorMano := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco copaCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:24:52'!
test17SiElPieGanaEnElSegundoEnfrentamientoTerminaElJuego

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco copaCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !

!methodRemoval: RondaDeTrucoTest #test17SiElPieGanaElSEgundoEnfrentamientoTerminaElJuego stamp: 'JR 7/5/2021 21:24:53'!
test17SiElPieGanaElSEgundoEnfrentamientoTerminaElJuego

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco copaCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:25:06'!
test18SiElPieGanaEnElSegundoEnfrentamientoLaManoNoPuedeJugar

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco oroCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 3)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !

!methodRemoval: RondaDeTrucoTest #test18SiElPieGanaElSEgundoEnfrentamientoLaManoNoPuedeJugar stamp: 'JR 7/5/2021 21:25:07'!
test18SiElPieGanaElSEgundoEnfrentamientoLaManoNoPuedeJugar

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco oroCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 3)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]!

!methodRemoval: RondaDeTrucoTest #test18SiElPieGanaEnElSegundoEnfrentamientoLaManoNoPuedeJugar stamp: 'JR 7/5/2021 21:25:43'!
test18SiElPieGanaEnElSegundoEnfrentamientoLaManoNoPuedeJugar

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco oroCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 3)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:27:08'!
test18PardaLaPrimeraYLaManoGanaLaSegundaLaManoGanoLaRonda

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco copaCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !

!testRun: #RondaDeTrucoTest #test18PardaLaPrimeraYLaManoGanaLaSegundaLaManoGanoLaRonda stamp: 'JR 7/5/2021 21:27:10'!
FAILURE!

!testRun: #RondaDeTrucoTest #test18PardaLaPrimeraYLaManoGanaLaSegundaLaManoGanoLaRonda stamp: 'JR 7/5/2021 21:27:10'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:27:19' prior: 50946874!
test18PardaLaPrimeraYLaManoGanaLaSegundaLaManoGanoLaRonda

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco oroCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco copaCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !

!testRun: #RondaDeTrucoTest #test18PardaLaPrimeraYLaManoGanaLaSegundaLaManoGanoLaRonda stamp: 'JR 7/5/2021 21:27:21'!
PASSED!
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 21:29:44' prior: 50941826!
quienGanoElPrimerEnfrentamiento

	(cartasJugadas first mataA: cartasJugadas second) ifTrue: [^#Mano] ifFalse: [^#Pie]! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 21:29:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 21:29:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 21:29:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 21:29:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 21:29:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 21:29:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 21:29:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 21:29:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 21:29:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 21:29:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 21:29:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 21:29:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SiElSegundoEnfrentamientoLoGanaLaManoDespuesDeHaberPerdidoElPrimeroLeTocaALaMano stamp: 'JR 7/5/2021 21:29:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaElPieDespuesDeHaberPerdidoElPrimeroLeTocaAlPie stamp: 'JR 7/5/2021 21:29:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SiLaManoGanaEnElSegundoEnfrentamientoLaManoNoPuedeJugar stamp: 'JR 7/5/2021 21:29:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test16SiLaManoGanaEnElSegundoEnfrentamientoElPieNoPuedeJugar stamp: 'JR 7/5/2021 21:29:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test17SiElPieGanaEnElSegundoEnfrentamientoTerminaElJuego stamp: 'JR 7/5/2021 21:29:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test18PardaLaPrimeraYLaManoGanaLaSegundaLaManoGanoLaRonda stamp: 'JR 7/5/2021 21:29:46'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:30:04'!
test18PardaLaPrimeraYElPieGanaLaSegundaElPieGanoLaRonda

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco oroCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco copaCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !

!methodRemoval: RondaDeTrucoTest #test18PardaLaPrimeraYLaManoGanaLaSegundaLaManoGanoLaRonda stamp: 'JR 7/5/2021 21:30:04'!
test18PardaLaPrimeraYLaManoGanaLaSegundaLaManoGanoLaRonda

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco oroCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco copaCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:30:21' prior: 50947048!
test18PardaLaPrimeraYElPieGanaLaSegundaElPieGanoLaRonda

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco oroCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon:3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco copaCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:30:30'!
test18PardaLaPrimeraJuegaLaMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco oroCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon:3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco copaCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !

!methodRemoval: RondaDeTrucoTest #test18PardaLaPrimeraYElPieGanaLaSegundaElPieGanoLaRonda stamp: 'JR 7/5/2021 21:30:30'!
test18PardaLaPrimeraYElPieGanaLaSegundaElPieGanoLaRonda

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco oroCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon:3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco copaCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:30:50' prior: 50947176!
test18PardaLaPrimeraJuegaLaMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco oroCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon:3).

	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:31:17' prior: 50947261!
test18PardaLaPrimeraJuegaLaMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 3}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco anchoDeEspada}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon:3).

	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection! !

!testRun: #RondaDeTrucoTest #test18PardaLaPrimeraJuegaLaMano stamp: 'JR 7/5/2021 21:31:18'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:31:34'!
test18PardaLaPrimeraYElPieGanaLaSegundaGanaElPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 3}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco anchoDeEspada}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon:3).

	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection! !

!methodRemoval: RondaDeTrucoTest #test18PardaLaPrimeraJuegaLaMano stamp: 'JR 7/5/2021 21:31:34'!
test18PardaLaPrimeraJuegaLaMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 3}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco anchoDeEspada}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon:3).

	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:32:04' prior: 50947331!
test18PardaLaPrimeraYElPieGanaLaSegundaGanaElPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 3}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco anchoDeEspada}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon:3).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).

	self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
	self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:32:16' prior: 50947399!
test18PardaLaPrimeraYElPieGanaLaSegundaGanaElPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 3}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco anchoDeEspada}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon:3).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).

	self 
		should: [rondaDeTruco jugar: (CartaDeTruco copaCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !

!testRun: #RondaDeTrucoTest #test18PardaLaPrimeraYElPieGanaLaSegundaGanaElPie stamp: 'JR 7/5/2021 21:32:17'!
ERROR!

!testRun: #RondaDeTrucoTest #test18PardaLaPrimeraYElPieGanaLaSegundaGanaElPie stamp: 'JR 7/5/2021 21:32:17'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:33:23' prior: 50947435!
test18PardaLaPrimeraYElPieGanaLaSegundaGanaElPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco anchoDeEspada. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco bastoCon: 3}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon:3).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).

	self 
		should: [rondaDeTruco jugar: (CartaDeTruco copaCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !

!testRun: #RondaDeTrucoTest #test18PardaLaPrimeraYElPieGanaLaSegundaGanaElPie stamp: 'JR 7/5/2021 21:33:24'!
FAILURE!

!testRun: #RondaDeTrucoTest #test18PardaLaPrimeraYElPieGanaLaSegundaGanaElPie stamp: 'JR 7/5/2021 21:33:25'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:33:50' prior: 50947486!
test18PardaLaPrimeraYElPieGanaLaSegundaGanaElPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco anchoDeEspada. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco bastoCon: 3}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon:3).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).

	self 
		should: [rondaDeTruco jugar: (CartaDeTruco bastoCon: 3)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !

!testRun: #RondaDeTrucoTest #test18PardaLaPrimeraYElPieGanaLaSegundaGanaElPie stamp: 'JR 7/5/2021 21:33:51'!
FAILURE!

!testRun: #RondaDeTrucoTest #test18PardaLaPrimeraYElPieGanaLaSegundaGanaElPie stamp: 'JR 7/5/2021 21:33:51'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:34:29'!
test18PardaLaPrimeraYElPieGanaLaSegundaGanaElPieYNoPuedeTirarLaMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco anchoDeEspada. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco bastoCon: 3}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon:3).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).

	self 
		should: [rondaDeTruco jugar: (CartaDeTruco bastoCon: 3)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !

!methodRemoval: RondaDeTrucoTest #test18PardaLaPrimeraYElPieGanaLaSegundaGanaElPie stamp: 'JR 7/5/2021 21:34:29'!
test18PardaLaPrimeraYElPieGanaLaSegundaGanaElPie

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco anchoDeEspada. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco bastoCon: 3}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon:3).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).

	self 
		should: [rondaDeTruco jugar: (CartaDeTruco bastoCon: 3)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]!
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 21:35:04' prior: 50945123!
jugarCuandoGanoElPie	
	
	self error: self class terminoElJuegoErrorDescription ! !
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 21:36:36' prior: 50946972!
quienGanoElPrimerEnfrentamiento

	(cartasJugadas first mataA: cartasJugadas second) ifTrue: [^#Mano] .
	(cartasJugadas second mataA: cartasJugadas first) ifTrue: [^#Pie].
	(cartasJugadas first empardaCon: cartasJugadas second) ifTrue: [^#Parda].! !
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 21:39:33' prior: 50943742!
quienGanoElSegundoEnfrentamiento

	(cartasJugadas third mataA: cartasJugadas fourth)
	ifTrue: [(self quienGanoElPrimerEnfrentamiento = #Pie) ifTrue: [^#Pie]
			ifFalse: [^#Mano]]
	ifFalse: [(self quienGanoElPrimerEnfrentamiento = #Pie) ifTrue: [^#Mano]
		 ifFalse: [^#Pie]]
		
		! !
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 21:39:46' prior: 50947689!
quienGanoElSegundoEnfrentamiento

	(cartasJugadas third mataA: cartasJugadas fourth)
	ifTrue: [(self quienGanoElPrimerEnfrentamiento = #Pie) 
			ifTrue: [^#Pie]
			ifFalse: [^#Mano]]
	ifFalse: [(self quienGanoElPrimerEnfrentamiento = #Pie) 
			ifTrue: [^#Mano]
			ifFalse: [^#Pie]]
		
		! !

!testRun: #RondaDeTrucoTest #test18PardaLaPrimeraYElPieGanaLaSegundaGanaElPieYNoPuedeTirarLaMano stamp: 'JR 7/5/2021 21:40:01'!
ERROR!

!testRun: #RondaDeTrucoTest #test18PardaLaPrimeraYElPieGanaLaSegundaGanaElPieYNoPuedeTirarLaMano stamp: 'JR 7/5/2021 21:40:02'!
ERROR!

!testRun: #RondaDeTrucoTest #test18PardaLaPrimeraYElPieGanaLaSegundaGanaElPieYNoPuedeTirarLaMano stamp: 'JR 7/5/2021 21:40:18'!
ERROR!

!testRun: #RondaDeTrucoTest #test18PardaLaPrimeraYElPieGanaLaSegundaGanaElPieYNoPuedeTirarLaMano stamp: 'JR 7/5/2021 21:40:18'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:40:52' prior: 50947586!
test18PardaLaPrimeraYElPieGanaLaSegundaGanaElPieYNoPuedeTirarLaMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco anchoDeEspada. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco bastoCon: 3}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1 ).

	self 
		should: [rondaDeTruco jugar: (CartaDeTruco bastoCon: 3)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !

!testRun: #RondaDeTrucoTest #test18PardaLaPrimeraYElPieGanaLaSegundaGanaElPieYNoPuedeTirarLaMano stamp: 'JR 7/5/2021 21:40:53'!
FAILURE!

!testRun: #RondaDeTrucoTest #test18PardaLaPrimeraYElPieGanaLaSegundaGanaElPieYNoPuedeTirarLaMano stamp: 'JR 7/5/2021 21:40:53'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:41:11' prior: 50947731!
test18PardaLaPrimeraYElPieGanaLaSegundaGanaElPieYNoPuedeTirarLaMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco anchoDeEspada. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco bastoCon: 3}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco oroCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1 ).

	self 
		should: [rondaDeTruco jugar: (CartaDeTruco bastoCon: 3)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !

!testRun: #RondaDeTrucoTest #test18PardaLaPrimeraYElPieGanaLaSegundaGanaElPieYNoPuedeTirarLaMano stamp: 'JR 7/5/2021 21:41:13'!
FAILURE!

!testRun: #RondaDeTrucoTest #test18PardaLaPrimeraYElPieGanaLaSegundaGanaElPieYNoPuedeTirarLaMano stamp: 'JR 7/5/2021 21:41:13'!
FAILURE!

!testRun: #RondaDeTrucoTest #test18PardaLaPrimeraYElPieGanaLaSegundaGanaElPieYNoPuedeTirarLaMano stamp: 'JR 7/5/2021 21:41:16'!
FAILURE!

!testRun: #RondaDeTrucoTest #test18PardaLaPrimeraYElPieGanaLaSegundaGanaElPieYNoPuedeTirarLaMano stamp: 'JR 7/5/2021 21:41:17'!
FAILURE!

!testRun: #RondaDeTrucoTest #test18PardaLaPrimeraYElPieGanaLaSegundaGanaElPieYNoPuedeTirarLaMano stamp: 'JR 7/5/2021 21:41:32'!
FAILURE!
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 21:44:10' prior: 50944919!
jugarPieEnSegundoEnfrentamiento: unaCartaDeTruco

	cartasDelPie remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	
	(cartasJugadas size = 4) 
		ifTrue: [	(self quienGanoElSegundoEnfrentamiento = #Pie) 
			ifTrue: [turnosState := TurnoDelPieState for: self	.
				(self quienGanoElPrimerEnfrentamiento = #Parda) 
					ifTrue: [turnosState := GanoElPieState for: self.]	]
			ifFalse: [turnosState := TurnoDeLaManoState for: self.
				(self quienGanoElPrimerEnfrentamiento = #Mano)
				ifTrue: [turnosState := GanoLaManoState for: self]]]
		ifFalse: [turnosState := TurnoDeLaManoState for: self]
	! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 21:44:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 21:44:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 21:44:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 21:44:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 21:44:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 21:44:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 21:44:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 21:44:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 21:44:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 21:44:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 21:44:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 21:44:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SiElSegundoEnfrentamientoLoGanaLaManoDespuesDeHaberPerdidoElPrimeroLeTocaALaMano stamp: 'JR 7/5/2021 21:44:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaElPieDespuesDeHaberPerdidoElPrimeroLeTocaAlPie stamp: 'JR 7/5/2021 21:44:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SiLaManoGanaEnElSegundoEnfrentamientoLaManoNoPuedeJugar stamp: 'JR 7/5/2021 21:44:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test16SiLaManoGanaEnElSegundoEnfrentamientoElPieNoPuedeJugar stamp: 'JR 7/5/2021 21:44:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test17SiElPieGanaEnElSegundoEnfrentamientoTerminaElJuego stamp: 'JR 7/5/2021 21:44:13'!
PASSED!

!testRun: #RondaDeTrucoTest #test18PardaLaPrimeraYElPieGanaLaSegundaGanaElPieYNoPuedeTirarLaMano stamp: 'JR 7/5/2021 21:44:13'!
FAILURE!

!testRun: #RondaDeTrucoTest #test18PardaLaPrimeraYElPieGanaLaSegundaGanaElPieYNoPuedeTirarLaMano stamp: 'JR 7/5/2021 21:44:13'!
FAILURE!
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 21:45:02' prior: 50947848!
jugarPieEnSegundoEnfrentamiento: unaCartaDeTruco

	cartasDelPie remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	
	(cartasJugadas size = 4) 
		ifTrue: [	(self quienGanoElSegundoEnfrentamiento = #Pie) 
			ifTrue: [turnosState := TurnoDelPieState for: self	.
				(self quienGanoElPrimerEnfrentamiento = #Parda) 
					ifTrue: [turnosState := GanoElPieState for: self.]	]
			ifFalse: [turnosState := TurnoDeLaManoState for: self.
				(self quienGanoElPrimerEnfrentamiento = #Mano)
				ifTrue: [turnosState := GanoLaManoState for: self]]]
		ifFalse: [turnosState := TurnoDeLaManoState for: self]
	! !

!testRun: #RondaDeTrucoTest #test18PardaLaPrimeraYElPieGanaLaSegundaGanaElPieYNoPuedeTirarLaMano stamp: 'JR 7/5/2021 21:45:05'!
FAILURE!

!testRun: #RondaDeTrucoTest #test18PardaLaPrimeraYElPieGanaLaSegundaGanaElPieYNoPuedeTirarLaMano stamp: 'JR 7/5/2021 21:45:05'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:46:02' prior: 50947783!
test18PardaLaPrimeraYElPieGanaLaSegundaGanaElPieYNoPuedeTirarLaMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco bastoCon: 3}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco oroCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1 ).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).

	self 
		should: [rondaDeTruco jugar: (CartaDeTruco bastoCon: 3)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco terminoElJuegoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !

!testRun: #RondaDeTrucoTest #test18PardaLaPrimeraYElPieGanaLaSegundaGanaElPieYNoPuedeTirarLaMano stamp: 'JR 7/5/2021 21:46:03'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:46:56' prior: 50946488!
test15SiLaManoGanaEnElSegundoEnfrentamientoLaManoNoPuedeJugar

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorMano := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco oroCon: 2)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco ganoLaManoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:47:06' prior: 50946574!
test16SiLaManoGanaEnElSegundoEnfrentamientoElPieNoPuedeJugar

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorMano := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDelPieDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco copaCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco ganoLaManoErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:47:15' prior: 50946660!
test17SiElPieGanaEnElSegundoEnfrentamientoTerminaElJuego

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco copaCon: 1}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco oroCon: 2}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco copaCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco ganoElPieErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:47:25' prior: 50947975!
test18PardaLaPrimeraYElPieGanaLaSegundaGanaElPieYNoPuedeTirarLaMano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco bastoCon: 3}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco oroCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1 ).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).

	self 
		should: [rondaDeTruco jugar: (CartaDeTruco bastoCon: 3)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco ganoElPieErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !
!RondaDeTruco class methodsFor: 'error descriptions' stamp: 'JR 7/5/2021 21:47:39'!
ganoElPieErrorDescription

	^'Gano el pie!!'! !
!RondaDeTruco class methodsFor: 'error descriptions' stamp: 'JR 7/5/2021 21:47:45'!
ganoLaManoErrorDescription

	^'Gano la mano!!'! !

!methodRemoval: RondaDeTruco class #terminoElJuegoErrorDescription stamp: 'JR 7/5/2021 21:47:55'!
terminoElJuegoErrorDescription

	^'Ya termino el juego'!
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 21:48:16' prior: 50947672!
jugarCuandoGanoElPie	
	
	self error: self class ganoElPieErrorDescription ! !
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 21:48:22' prior: 50942991!
jugarCuandoGanoLaMano	
	
	self error: self class ganoLaManoErrorDescription ! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 21:48:24'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 21:48:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 21:48:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 21:48:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 21:48:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 21:48:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 21:48:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 21:48:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 21:48:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 21:48:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 21:48:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 21:48:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SiElSegundoEnfrentamientoLoGanaLaManoDespuesDeHaberPerdidoElPrimeroLeTocaALaMano stamp: 'JR 7/5/2021 21:48:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaElPieDespuesDeHaberPerdidoElPrimeroLeTocaAlPie stamp: 'JR 7/5/2021 21:48:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SiLaManoGanaEnElSegundoEnfrentamientoLaManoNoPuedeJugar stamp: 'JR 7/5/2021 21:48:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test16SiLaManoGanaEnElSegundoEnfrentamientoElPieNoPuedeJugar stamp: 'JR 7/5/2021 21:48:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test17SiElPieGanaEnElSegundoEnfrentamientoTerminaElJuego stamp: 'JR 7/5/2021 21:48:25'!
PASSED!

!testRun: #RondaDeTrucoTest #test18PardaLaPrimeraYElPieGanaLaSegundaGanaElPieYNoPuedeTirarLaMano stamp: 'JR 7/5/2021 21:48:25'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:48:44'!
test19CuandoTerminaElJuegoSabemosQuienGano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorPie := {CartaDeTruco anchoDeEspada. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	cartasDeLaManoDespuesDeJugar := {CartaDeTruco bastoCon: 3}.
	cartasDelPieDespuesDeJugar := {CartaDeTruco oroCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1 ).
	rondaDeTruco jugar: (CartaDeTruco anchoDeEspada).

	self 
		should: [rondaDeTruco jugar: (CartaDeTruco bastoCon: 3)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco ganoElPieErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:50:38' prior: 50948291!
test19CuandoTerminaElJuegoSabemosQuienGano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco cartasDelPieDespuesDeJugar cartasDeLaManoDespuesDeJugar |
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 3. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco copaCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco ganoElPieErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie equals: cartasDelPieDespuesDeJugar asOrderedCollection.
			self assert: rondaDeTruco cartasDelJugadorMano equals: cartasDeLaManoDespuesDeJugar asOrderedCollection]! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:50:52' prior: 50948333!
test19CuandoTerminaElJuegoSabemosQuienGano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco |
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 3. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 3).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco copaCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco ganoElPieErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie isEmpty .
			self assert: rondaDeTruco cartasDelJugadorMano isEmpty ]! !

!testRun: #RondaDeTrucoTest #test19CuandoTerminaElJuegoSabemosQuienGano stamp: 'JR 7/5/2021 21:50:56'!
ERROR!

!testRun: #RondaDeTrucoTest #test19CuandoTerminaElJuegoSabemosQuienGano stamp: 'JR 7/5/2021 21:50:56'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:51:18' prior: 50948374!
test19CuandoTerminaElJuegoSabemosQuienGano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco |
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 3. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	
	rondaDeTruco jugar: (CartaDeTruco copaCon: 3).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco copaCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco ganoElPieErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie isEmpty .
			self assert: rondaDeTruco cartasDelJugadorMano isEmpty ]! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'JR 7/5/2021 21:51:19' prior: 50948418!
test19CuandoTerminaElJuegoSabemosQuienGano

	|cartasDelJugadorMano cartasDelJugadorPie rondaDeTruco |
	
	cartasDelJugadorMano := {CartaDeTruco copaCon: 1. CartaDeTruco oroCon: 2. CartaDeTruco oroCon: 3}.
	
	cartasDelJugadorPie := {CartaDeTruco copaCon: 3. CartaDeTruco bastoCon: 2. CartaDeTruco bastoCon: 3}.
	
	rondaDeTruco := RondaDeTruco cartasDelJugadorMano: cartasDelJugadorMano cartasDelJugadorPie: cartasDelJugadorPie.
	
	rondaDeTruco jugar: (CartaDeTruco oroCon: 3).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 2).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 1).
	rondaDeTruco jugar: (CartaDeTruco bastoCon: 3).
	rondaDeTruco jugar: (CartaDeTruco copaCon: 3).
	rondaDeTruco jugar: (CartaDeTruco oroCon: 2).
	
	self 
		should: [rondaDeTruco jugar: (CartaDeTruco copaCon: 1)]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: RondaDeTruco ganoElPieErrorDescription.	
			self assert: rondaDeTruco cartasDelJugadorPie isEmpty .
			self assert: rondaDeTruco cartasDelJugadorMano isEmpty ]! !

!testRun: #RondaDeTrucoTest #test19CuandoTerminaElJuegoSabemosQuienGano stamp: 'JR 7/5/2021 21:51:20'!
FAILURE!

!testRun: #RondaDeTrucoTest #test19CuandoTerminaElJuegoSabemosQuienGano stamp: 'JR 7/5/2021 21:51:20'!
FAILURE!

!classDefinition: #TercerEnfrentamientoState category: 'ISW1-2021-1C-2doParcial' stamp: 'JR 7/5/2021 21:52:10'!
EnfrentamientoState subclass: #TercerEnfrentamientoState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 21:52:00' prior: 50947944!
jugarPieEnSegundoEnfrentamiento: unaCartaDeTruco

	cartasDelPie remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	
	(cartasJugadas size = 4) 
		ifTrue: [	(self quienGanoElSegundoEnfrentamiento = #Pie) 
			ifTrue: [turnosState := TurnoDelPieState for: self	.
				(self quienGanoElPrimerEnfrentamiento = #Parda) 
					ifTrue: [turnosState := GanoElPieState for: self.]	]
			ifFalse: [turnosState := TurnoDeLaManoState for: self.
				(self quienGanoElPrimerEnfrentamiento = #Mano)
				ifTrue: [turnosState := GanoLaManoState for: self]]]
		ifFalse: [turnosState := TurnoDeLaManoState for: self].
		
		
	enfrentamientoState := TercerEnfrentamientoState for: self
	! !
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 21:52:15' prior: 50948507!
jugarPieEnSegundoEnfrentamiento: unaCartaDeTruco

	cartasDelPie remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	
	(cartasJugadas size = 4) 
		ifTrue: [	(self quienGanoElSegundoEnfrentamiento = #Pie) 
			ifTrue: [turnosState := TurnoDelPieState for: self	.
				(self quienGanoElPrimerEnfrentamiento = #Parda) 
					ifTrue: [turnosState := GanoElPieState for: self.]	]
			ifFalse: [turnosState := TurnoDeLaManoState for: self.
				(self quienGanoElPrimerEnfrentamiento = #Mano)
				ifTrue: [turnosState := GanoLaManoState for: self]]]
		ifFalse: [turnosState := TurnoDeLaManoState for: self].
		
	enfrentamientoState := TercerEnfrentamientoState for: self
	! !
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 21:52:21' prior: 50945968!
jugarManoEnSegundoEnfrentamiento: 	unaCartaDeTruco
	
	cartasDeLaMano remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	
	(cartasJugadas size = 4) 
		ifTrue: [	(self quienGanoElSegundoEnfrentamiento = #Pie) 
			ifTrue: [turnosState := TurnoDelPieState for: self.
				(self quienGanoElPrimerEnfrentamiento = #Pie)
				ifTrue: [turnosState := GanoElPieState for: self]]
			ifFalse: [turnosState := TurnoDeLaManoState for: self.
				(self quienGanoElPrimerEnfrentamiento = #Mano)
				ifTrue: [turnosState := GanoLaManoState for: self]]]
		ifFalse: [turnosState := TurnoDelPieState for: self].
		
		
	enfrentamientoState := TercerEnfrentamientoState for: self! !
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 21:52:23' prior: 50948555!
jugarManoEnSegundoEnfrentamiento: 	unaCartaDeTruco
	
	cartasDeLaMano remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	
	(cartasJugadas size = 4) 
		ifTrue: [	(self quienGanoElSegundoEnfrentamiento = #Pie) 
			ifTrue: [turnosState := TurnoDelPieState for: self.
				(self quienGanoElPrimerEnfrentamiento = #Pie)
				ifTrue: [turnosState := GanoElPieState for: self]]
			ifFalse: [turnosState := TurnoDeLaManoState for: self.
				(self quienGanoElPrimerEnfrentamiento = #Mano)
				ifTrue: [turnosState := GanoLaManoState for: self]]]
		ifFalse: [turnosState := TurnoDelPieState for: self].
		
	enfrentamientoState := TercerEnfrentamientoState for: self! !
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 21:53:04' prior: 50948531!
jugarPieEnSegundoEnfrentamiento: unaCartaDeTruco

	cartasDelPie remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	
	(cartasJugadas size = 4) 
		ifTrue: [	(self quienGanoElSegundoEnfrentamiento = #Pie) 
			ifTrue: [turnosState := TurnoDelPieState for: self	.
				(self quienGanoElPrimerEnfrentamiento = #Parda) 
					ifTrue: [turnosState := GanoElPieState for: self.]	]
			ifFalse: [turnosState := TurnoDeLaManoState for: self.
				(self quienGanoElPrimerEnfrentamiento = #Mano)
				ifTrue: [turnosState := GanoLaManoState for: self]]]
		ifFalse: [turnosState := TurnoDeLaManoState for: self].
	! !
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 21:53:07' prior: 50948579!
jugarManoEnSegundoEnfrentamiento: 	unaCartaDeTruco
	
	cartasDeLaMano remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	
	(cartasJugadas size = 4) 
		ifTrue: [	(self quienGanoElSegundoEnfrentamiento = #Pie) 
			ifTrue: [turnosState := TurnoDelPieState for: self.
				(self quienGanoElPrimerEnfrentamiento = #Pie)
				ifTrue: [turnosState := GanoElPieState for: self]]
			ifFalse: [turnosState := TurnoDeLaManoState for: self.
				(self quienGanoElPrimerEnfrentamiento = #Mano)
				ifTrue: [turnosState := GanoLaManoState for: self]]]
		ifFalse: [turnosState := TurnoDelPieState for: self].! !

!classRemoval: #TercerEnfrentamientoState stamp: 'JR 7/5/2021 21:53:11'!
EnfrentamientoState subclass: #TercerEnfrentamientoState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 21:55:26' prior: 50948625!
jugarManoEnSegundoEnfrentamiento: 	unaCartaDeTruco
	
	cartasDeLaMano remove: unaCartaDeTruco.
	cartasJugadas add: unaCartaDeTruco.
	
	(cartasJugadas size = 4) 
		ifTrue: [	(self quienGanoElSegundoEnfrentamiento = #Pie) 
			ifTrue: [turnosState := TurnoDelPieState for: self.
				(self quienGanoElPrimerEnfrentamiento = #Pie)
				ifTrue: [turnosState := GanoElPieState for: self]]
			ifFalse: [turnosState := TurnoDeLaManoState for: self.
				(self quienGanoElPrimerEnfrentamiento = #Mano)
				ifTrue: [turnosState := GanoLaManoState for: self]]]
		ifFalse: [turnosState := TurnoDelPieState for: self].
		
	(cartasJugadas size = 6) 
	ifTrue: 	[(self quienGanoLaRonda = #Pie) 
			ifTrue: [	turnosState := GanoElPieState for: self]
			ifFalse: [	turnosState := GanoLaManoState for: self]]! !
!RondaDeTruco methodsFor: 'juego - private' stamp: 'JR 7/5/2021 21:56:06'!
quienGanoLaRonda

	(cartasJugadas fifth mataA: cartasJugadas sixth)
	ifTrue: [(self quienGanoElSegundoEnfrentamiento = #Pie) 
			ifTrue: [^#Pie]
			ifFalse: [^#Mano]]
	ifFalse: [(self quienGanoElSegundoEnfrentamiento = #Pie) 
			ifTrue: [^#Mano]
			ifFalse: [^#Pie]]
		
		! !

!testRun: #RondaDeTrucoTest #test01ElJugadorManoComienzaConTresCartas stamp: 'JR 7/5/2021 21:56:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test02ElJugadorPieComienzaConTresCartas stamp: 'JR 7/5/2021 21:56:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test03ElJugadorManoNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 21:56:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test04ElJugadorPieNoTieneCartasRepetidasEnMano stamp: 'JR 7/5/2021 21:56:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test05LosJugadoresNoTienenCartasRepetidasEntreSi stamp: 'JR 7/5/2021 21:56:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test06NoEmpiezaJugandoElJugadorPie stamp: 'JR 7/5/2021 21:56:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EmpiezaJugandoElJugadorMano stamp: 'JR 7/5/2021 21:56:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeJugarUnaCartaQueNoFueRepartida stamp: 'JR 7/5/2021 21:56:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test09DespuesDeQueEmpieceLaManoLeTocaAlPie stamp: 'JR 7/5/2021 21:56:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test10SiElPrimerEnfrentamientoLoGanaElPieNoLeTocaALaMano stamp: 'JR 7/5/2021 21:56:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test11SiElPrimerEnfrentamientoLoGanaLaManoNoLeTocaAlPie stamp: 'JR 7/5/2021 21:56:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test12SiElPrimerEnfrentamientoLoGanaElPieDespuesLeTocaALaMano stamp: 'JR 7/5/2021 21:56:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test13SiElSegundoEnfrentamientoLoGanaLaManoDespuesDeHaberPerdidoElPrimeroLeTocaALaMano stamp: 'JR 7/5/2021 21:56:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test14SiElSegundoEnfrentamientoLoGanaElPieDespuesDeHaberPerdidoElPrimeroLeTocaAlPie stamp: 'JR 7/5/2021 21:56:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test15SiLaManoGanaEnElSegundoEnfrentamientoLaManoNoPuedeJugar stamp: 'JR 7/5/2021 21:56:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test16SiLaManoGanaEnElSegundoEnfrentamientoElPieNoPuedeJugar stamp: 'JR 7/5/2021 21:56:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test17SiElPieGanaEnElSegundoEnfrentamientoTerminaElJuego stamp: 'JR 7/5/2021 21:56:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test18PardaLaPrimeraYElPieGanaLaSegundaGanaElPieYNoPuedeTirarLaMano stamp: 'JR 7/5/2021 21:56:09'!
PASSED!

!testRun: #RondaDeTrucoTest #test19CuandoTerminaElJuegoSabemosQuienGano stamp: 'JR 7/5/2021 21:56:09'!
PASSED!