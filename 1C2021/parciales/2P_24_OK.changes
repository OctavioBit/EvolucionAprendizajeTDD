
----End fileIn of /home/franco/Downloads/ISW1-2021-1C-2doParcial.st----!

Object subclass: #Ronda
	instanceVariableNames: 'estado pie mano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 17:39:59'!
Object subclass: #Ronda
	instanceVariableNames: 'estado pie mano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda class methodsFor: 'nil' stamp: 'f 7/5/2021 17:46:47'!
initconLasCartasdelPie: anOrderedCollectionWithcards yLasCartasdeLaMano:anotherOrderedCollectionWithCards
		
		((anOrderedCollectionWithcards size = 3) and: [anotherOrderedCollectionWithCards size = 3]) 
		ifFalse:[^self error: Ronda not3cardsInonedeckError.].
	! !
!Ronda class methodsFor: 'nil' stamp: 'f 7/5/2021 17:47:36'!
not3cardsInonedeckError

	^'Al menos una de las dos manos tiene mas o menos de tres cartas'! !

TestCase subclass: #RondaTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 17:47:58'!
TestCase subclass: #RondaTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaTest methodsFor: 'nil' stamp: 'f 7/5/2021 17:50:04'!
test01SoloSePuedeIncializarCon3Cartas

	self should:[Ronda initconLasCartasdelPie: (OrderedCollection with: CartaDeTruco new) yLasCartasdeLaMano: (OrderedCollection with: CartaDeTruco new)]
	raise: Error
	withMessageText: Ronda! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 17:50:18' prior: 50907480!
test01SoloSePuedeIncializarCon3Cartas

	self should:[Ronda initconLasCartasdelPie: (OrderedCollection with: CartaDeTruco new) yLasCartasdeLaMano: (OrderedCollection with: CartaDeTruco new)]
	raise: Error
	withMessageText: Ronda not3cardsInonedeckError.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 17:50:51' prior: 50907491!
test01SoloSePuedeIncializarCon3Cartas

	self should:[Ronda initconLasCartasdelPie: (OrderedCollection with: CartaDeTruco anchoDeEspada) yLasCartasdeLaMano: (OrderedCollection with: CartaDeTruco anchoDeBasto)]
	raise: Error
	withMessageText: Ronda not3cardsInonedeckError.! !

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 17:50:53'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 17:50:53'!
PASSED!
!Ronda class methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 17:52:04' prior: 50907452!
initconLasCartasdelPie: anOrderedCollectionWithcards yLasCartasdeLaMano:anotherOrderedCollectionWithCards
		
	((anOrderedCollectionWithcards size = 3) and: [anotherOrderedCollectionWithCards size = 3]) 
	ifFalse:[^self error: Ronda not3cardsInonedeckError.].
	
	
	self new initWithPie: anOrderedCollectionWithcards andHand: anotherOrderedCollectionWithCards.
	
	! !
!Ronda methodsFor: 'nil' stamp: 'f 7/5/2021 17:52:56'!
initWithPie: anOrderedCollectionWithcards andHand: anotherOrderedCollectionWithCards

	Pie:= anOrderedCollectionWithcards.
	Mano:= anotherOrderedCollectionWithCards.
	Estado:= 0.! !

Object subclass: #Ronda
	instanceVariableNames: 'estado mano pie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 17:53:42'!
Object subclass: #Ronda
	instanceVariableNames: 'estado mano pie'
	classVariableNames: 'Estado Mano Pie'
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 17:53:58' prior: 50907534!
initWithPie: anOrderedCollectionWithcards andHand: anotherOrderedCollectionWithCards

	pie:= anOrderedCollectionWithcards.
	mano:= anotherOrderedCollectionWithCards.
	estado:= 0.
	! !

Object subclass: #Ronda
	instanceVariableNames: 'estado mano pie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 17:54:05'!
Object subclass: #Ronda
	instanceVariableNames: 'estado mano pie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 17:54:15' prior: 50907556!
initWithPie: anOrderedCollectionWithcards andHand: anotherOrderedCollectionWithCards

	pie:= anOrderedCollectionWithcards.
	mano:= anotherOrderedCollectionWithCards.
	estado:= 0.

	! !

Object subclass: #EstadoDelaRonda
	instanceVariableNames: 'estado mano pie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #EstadoDelaRonda category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 17:54:55'!
Object subclass: #EstadoDelaRonda
	instanceVariableNames: 'estado mano pie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

Object subclass: #EstadoDelaRonda
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #EstadoDelaRonda category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 17:55:00'!
Object subclass: #EstadoDelaRonda
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

EstadoDelaRonda subclass: #EstadoInicial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #EstadoInicial category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 17:56:58'!
EstadoDelaRonda subclass: #EstadoInicial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

EstadoDelaRonda subclass: #GanoPrimeraPie
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #GanoPrimeraPie category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 17:57:09'!
EstadoDelaRonda subclass: #GanoPrimeraPie
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

EstadoDelaRonda subclass: #GanoPrimeraMano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #GanoPrimeraMano category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 17:57:13'!
EstadoDelaRonda subclass: #GanoPrimeraMano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

EstadoDelaRonda subclass: #Empardaron
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Empardaron category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 17:57:24'!
EstadoDelaRonda subclass: #Empardaron
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

EstadoDelaRonda subclass: #GanoSegundaPie
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #GanoSegundaPie category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 17:57:38'!
EstadoDelaRonda subclass: #GanoSegundaPie
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

EstadoDelaRonda subclass: #GanoSegundaMano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #GanoSegundaMano category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 17:57:41'!
EstadoDelaRonda subclass: #GanoSegundaMano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 17:58:08' prior: 50907577!
initWithPie: anOrderedCollectionWithcards andHand: anotherOrderedCollectionWithCards

	pie:= anOrderedCollectionWithcards.
	mano:= anotherOrderedCollectionWithCards.
	estado:= EstadoInicial new..

	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 17:58:09' prior: 50907688!
initWithPie: anOrderedCollectionWithcards andHand: anotherOrderedCollectionWithCards

	pie:= anOrderedCollectionWithcards.
	mano:= anotherOrderedCollectionWithCards.
	estado:= EstadoInicial new.

	! !
!Ronda methodsFor: 'nil' stamp: 'f 7/5/2021 18:00:00'!
juegaPie

	estado juegaPie.

	! !
!EstadoDelaRonda methodsFor: 'nil' stamp: 'f 7/5/2021 18:01:05'!
juegaPie

	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:02:05' prior: 50907706!
juegaPie

	estado juegaPiePara:self.

	! !
!EstadoDelaRonda methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:02:21'!
juegaPiePara: unaRonda

	! !

!methodRemoval: EstadoDelaRonda #juegaPie stamp: 'f 7/5/2021 18:02:24'!
juegaPie

	!
!EstadoDelaRonda methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:05:28' prior: 50907718!
juegaPiePara: unaRonda

	self subclassResponsibility .! !

!classDefinition: #EstadoInicial category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 18:07:09'!
EstadoDelaRonda subclass: #EstadoInicial
	instanceVariableNames: 'estadodelEnfrentamiento'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!EstadoInicial methodsFor: 'nil' stamp: 'f 7/5/2021 18:07:08' overrides: 50907725!
juegaPiePara: unaRonda


	estadodelEnfrentamiento assertPuedeJugarPie.
	! !
!EstadoInicial class methodsFor: 'nil' stamp: 'f 7/5/2021 18:07:42' overrides: 16883149!
initialize

	self new initialize! !
!EstadoInicial class methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:07:58' prior: 50907744 overrides: 16883149!
initialize

	self new initializeWithInicial.! !

!classDefinition: #JuegaMano category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 18:09:00'!
Object subclass: #JuegaMano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!EstadoInicial methodsFor: 'nil' stamp: 'f 7/5/2021 18:08:44'!
initializeWithinizial

	estadodelEnfrentamiento :=  JuegaMano new.! !
!EstadoInicial methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:09:20'!
initializeWithInicial

	estadodelEnfrentamiento :=  JuegaMano new.! !

!methodRemoval: EstadoInicial #initializeWithinizial stamp: 'f 7/5/2021 18:09:22'!
initializeWithinizial

	estadodelEnfrentamiento :=  JuegaMano new.!

Object subclass: #EstadoEnfrentamiento
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #EstadoEnfrentamiento category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 18:11:05'!
Object subclass: #EstadoEnfrentamiento
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

EstadoEnfrentamiento subclass: #JuegaMano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #JuegaMano category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 18:11:19'!
EstadoEnfrentamiento subclass: #JuegaMano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

EstadoEnfrentamiento subclass: #JuegaPie
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #JuegaPie category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 18:11:35'!
EstadoEnfrentamiento subclass: #JuegaPie
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!JuegaMano methodsFor: 'nil' stamp: 'f 7/5/2021 18:12:12'!
assertPuedeJugarPie

 	self raiseDeberiaJugarMano! !
!JuegaMano methodsFor: 'nil' stamp: 'f 7/5/2021 18:12:24'!
assertPuedeJugarMano! !
!JuegaPie methodsFor: 'nil' stamp: 'f 7/5/2021 18:12:41'!
assertPuedeJugarPie

	! !
!JuegaPie methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:13:01'!
assertPuedeJugarMano

	self raiseDeberiaJugarPie

	! !
!JuegaPie methodsFor: 'nil' stamp: 'f 7/5/2021 18:13:41'!
raiseDeberiaJugarPie

	self error:self class errorTurno! !
!JuegaPie methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:13:52' prior: 50907827!
raiseDeberiaJugarPie

	self error:self class errorTurno! !
!JuegaPie class methodsFor: 'nil' stamp: 'f 7/5/2021 18:14:02'!
errorTurno

	^'Pie deberia jugar'! !
!JuegaPie methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:14:09' prior: 50907823!
assertPuedeJugarMano

	^self raiseDeberiaJugarPie

	! !
!JuegaPie methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:14:12' prior: 50907832!
raiseDeberiaJugarPie

	^self error:self class errorTurno! !
!JuegaMano methodsFor: 'nil' stamp: 'f 7/5/2021 18:14:37'!
raiseDeberiaJugarMano

	^self error: self class errorTurno! !
!JuegaMano methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:14:52' prior: 50907849!
raiseDeberiaJugarMano

	^self error: self class errorTurnoMano! !
!JuegaMano class methodsFor: 'nil' stamp: 'f 7/5/2021 18:15:26'!
errorTurnoMano

	^'Deberia jugar mano'! !
!JuegaPie class methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:15:31'!
errorTurnoPie

	^'Pie deberia jugar'! !

!methodRemoval: JuegaPie class #errorTurno stamp: 'f 7/5/2021 18:15:36'!
errorTurno

	^'Pie deberia jugar'!
!JuegaPie methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:15:41' prior: 50907845!
raiseDeberiaJugarPie

	^self error:self class errorTurnoPie! !
!EstadoInicial methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:16:21'!
juegaManoPara: unaRonda


	estadodelEnfrentamiento assertPuedeJugarMano.
	! !
!EstadoInicial methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:17:49' prior: 50907876!
juegaManoPara: unaRonda


	estadodelEnfrentamiento assertPuedeJugarMano.
	estadodelEnfrentamiento := JuegaPie new.
	! !

!classDefinition: #EstadoInicial category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 18:18:20'!
EstadoDelaRonda subclass: #EstadoInicial
	instanceVariableNames: 'estadodelEnfrentamiento cartaDeLaMano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!EstadoInicial methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:18:18' prior: 50907882!
juegaManoPara: unaRonda


	estadodelEnfrentamiento assertPuedeJugarMano.
	estadodelEnfrentamiento := JuegaPie new.
	cartaDeLaMano := unaRonda getCartaMano.
	! !
!Ronda methodsFor: 'nil' stamp: 'f 7/5/2021 18:20:15'!
getCartaMano

	|carta|
	carta := mano last.
	mano removeLast.
	^carta
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:20:28'!
getCartaPie

	|carta|
	carta := pie last.
	pie removeLast.
	^carta
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:20:42'!
juegaMano

	estado juegaManoPara:self.

	! !
!EstadoInicial methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:21:40' prior: 50907738 overrides: 50907725!
juegaPiePara: unaRonda


	estadodelEnfrentamiento assertPuedeJugarPie.
	

	! !

!classDefinition: #EstadoInicial category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 18:22:23'!
EstadoDelaRonda subclass: #EstadoInicial
	instanceVariableNames: 'estadodelEnfrentamiento cartaDeLaMano cartaDelPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!EstadoInicial methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:22:22' prior: 50907920 overrides: 50907725!
juegaPiePara: unaRonda


	estadodelEnfrentamiento assertPuedeJugarPie.
	cartaDelPie := unaRonda getCartaPie. 
	

	! !
!EstadoInicial methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:23:01' prior: 50907936 overrides: 50907725!
juegaPiePara: unaRonda


	estadodelEnfrentamiento assertPuedeJugarPie.
	cartaDelPie := unaRonda getCartaPie.
	self seEnfrentanLasCartas 
	

	! !
!EstadoInicial methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:23:10' prior: 50907944 overrides: 50907725!
juegaPiePara: unaRonda


	estadodelEnfrentamiento assertPuedeJugarPie.
	cartaDelPie := unaRonda getCartaPie.
	self seEnfrentanLasCartas .
	

	! !
!EstadoInicial methodsFor: 'nil' stamp: 'f 7/5/2021 18:23:32'!
seEnfrentanLasCartas

	! !
!EstadoInicial class methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:24:04'!
initiFor: aRound

	self new initializeFor: aRound.! !

!classDefinition: #EstadoInicial category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 18:24:58'!
EstadoDelaRonda subclass: #EstadoInicial
	instanceVariableNames: 'estadodelEnfrentamiento cartaDeLaMano cartaDelPie ronda'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!EstadoInicial methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:24:48'!
initializeFor: aRound

	estadodelEnfrentamiento :=  JuegaMano new.
	ronda:= aRound.! !
!EstadoInicial methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:25:22'!
juegaMano


	estadodelEnfrentamiento assertPuedeJugarMano.
	estadodelEnfrentamiento := JuegaPie new.
	cartaDeLaMano := ronda getCartaMano.
	! !

!methodRemoval: EstadoInicial #juegaManoPara: stamp: 'f 7/5/2021 18:25:26'!
juegaManoPara: unaRonda


	estadodelEnfrentamiento assertPuedeJugarMano.
	estadodelEnfrentamiento := JuegaPie new.
	cartaDeLaMano := unaRonda getCartaMano.
	!
!EstadoInicial methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:25:35'!
juegaPie


	estadodelEnfrentamiento assertPuedeJugarPie.
	cartaDelPie := ronda getCartaPie.
	self seEnfrentanLasCartas .
	

	! !

!methodRemoval: EstadoInicial #juegaPiePara: stamp: 'f 7/5/2021 18:25:39'!
juegaPiePara: unaRonda


	estadodelEnfrentamiento assertPuedeJugarPie.
	cartaDelPie := unaRonda getCartaPie.
	self seEnfrentanLasCartas .
	

	!
!EstadoInicial methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:26:42' prior: 50907960!
seEnfrentanLasCartas


	ronda seEnfrentanCartaDelPie: cartaDelPie  contraCartaDeLaMano: cartaDeLaMano .
	! !
!EstadoInicial methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:28:27' prior: 50908013!
seEnfrentanLasCartas


	ronda EnLaFaseInicialseEnfrentanCartaDelPie: cartaDelPie  contraCartaDeLaMano: cartaDeLaMano .
	! !
!Ronda methodsFor: 'nil' stamp: 'f 7/5/2021 18:29:23'!
EnLaFaseInicialseEnfrentanCartaDelPie: cartaDelPie  contraCartaDeLaMano: cartaDeLaMano

	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:31:10' prior: 50908026!
EnLaFaseInicialseEnfrentanCartaDelPie: cartaDelPie  contraCartaDeLaMano: cartaDeLaMano

	(cartaDelPie mataA: cartaDeLaMano) ifTrue:[estado:=GanoPrimeraMano for:self].

	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:31:37' prior: 50908032!
EnLaFaseInicialseEnfrentanCartaDelPie: cartaDelPie  contraCartaDeLaMano: cartaDeLaMano

	(cartaDelPie mataA: cartaDeLaMano) ifTrue:[estado:=GanoPrimeraMano initFor:self].

	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:32:26' prior: 50908041!
EnLaFaseInicialseEnfrentanCartaDelPie: cartaDelPie  contraCartaDeLaMano: cartaDeLaMano

	(cartaDelPie mataA: cartaDeLaMano) ifTrue:[estado:=GanoPrimeraMano initFor:self].
	(cartaDeLaMano mataA: cartaDelPie ) ifTrue:[estado:=GanoPrimeraPie initFor:self].

	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:33:16' prior: 50908050!
EnLaFaseInicialseEnfrentanCartaDelPie: cartaDelPie  contraCartaDeLaMano: cartaDeLaMano

	(cartaDelPie mataA: cartaDeLaMano) ifTrue:[estado:=GanoPrimeraMano initFor:self].
	(cartaDeLaMano mataA: cartaDelPie ) ifTrue:[estado:=GanoPrimeraPie initFor:self].
	(cartaDeLaMano empardaCon: cartaDelPie) ifTrue: [estado:=Empardaron initFor:self]

	! !

EstadoDelaRonda subclass: #GanoRondaPie
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #GanoRondaPie category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 18:34:06'!
EstadoDelaRonda subclass: #GanoRondaPie
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

EstadoDelaRonda subclass: #GanoRondaMano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #GanoRondaMano category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 18:34:10'!
EstadoDelaRonda subclass: #GanoRondaMano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!methodRemoval: EstadoInicial #initializeWithInicial stamp: 'f 7/5/2021 18:34:27'!
initializeWithInicial

	estadodelEnfrentamiento :=  JuegaMano new.!

!classDefinition: #GanoPrimeraMano category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 18:36:24'!
EstadoDelaRonda subclass: #GanoPrimeraMano
	instanceVariableNames: 'estadodelEnfrentamiento'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #GanoPrimeraMano category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 18:36:25'!
EstadoDelaRonda subclass: #GanoPrimeraMano
	instanceVariableNames: 'estadodelEnfrentamiento ronda'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!GanoPrimeraMano methodsFor: 'nil' stamp: 'f 7/5/2021 18:36:22'!
initializeFor: aRound

	estadodelEnfrentamiento :=  JuegaMano new.
	ronda:= aRound.! !

!classDefinition: #GanoPrimeraMano category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 18:36:46'!
EstadoDelaRonda subclass: #GanoPrimeraMano
	instanceVariableNames: 'estadodelEnfrentamiento ronda cartaDeLaMano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!GanoPrimeraMano methodsFor: 'nil' stamp: 'f 7/5/2021 18:36:44'!
juegaMano


	estadodelEnfrentamiento assertPuedeJugarMano.
	estadodelEnfrentamiento := JuegaPie new.
	cartaDeLaMano := ronda getCartaMano.
	! !

!classDefinition: #GanoPrimeraMano category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 18:37:14'!
EstadoDelaRonda subclass: #GanoPrimeraMano
	instanceVariableNames: 'estadodelEnfrentamiento ronda cartaDeLaMano cartaDelPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!GanoPrimeraMano methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:37:11'!
juegaPie


	estadodelEnfrentamiento assertPuedeJugarPie.
	cartaDelPie := ronda getCartaPie.
	self seEnfrentanLasCartas .
	! !
!GanoPrimeraMano methodsFor: 'nil' stamp: 'f 7/5/2021 18:37:43'!
seEnfrentanLasCartas


	ronda GanoPrimeraManoYseEnfrentanCartaDelPie: cartaDelPie  contraCartaDeLaMano: cartaDeLaMano .
	! !

!classDefinition: #GanoPrimeraPie category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 18:38:10'!
EstadoDelaRonda subclass: #GanoPrimeraPie
	instanceVariableNames: 'estadodelEnfrentamiento'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #GanoPrimeraPie category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 18:38:12'!
EstadoDelaRonda subclass: #GanoPrimeraPie
	instanceVariableNames: 'estadodelEnfrentamiento ronda'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!GanoPrimeraPie methodsFor: 'nil' stamp: 'f 7/5/2021 18:38:08'!
initializeFor: aRound

	estadodelEnfrentamiento :=  JuegaPie new.
	ronda:= aRound.! !

!classDefinition: #GanoPrimeraPie category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 18:39:08'!
EstadoDelaRonda subclass: #GanoPrimeraPie
	instanceVariableNames: 'estadodelEnfrentamiento ronda cartaDelPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!GanoPrimeraPie methodsFor: 'nil' stamp: 'f 7/5/2021 18:39:05'!
juegaPie


	estadodelEnfrentamiento assertPuedeJugarPie.
	estadodelEnfrentamiento := JuegaMano new.
	cartaDelPie := ronda getCartaPie.
	
	! !

!classDefinition: #GanoPrimeraPie category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 18:39:55'!
EstadoDelaRonda subclass: #GanoPrimeraPie
	instanceVariableNames: 'estadodelEnfrentamiento ronda cartaDelPie cartaDeLaMano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!GanoPrimeraPie methodsFor: 'nil' stamp: 'f 7/5/2021 18:39:53'!
juegaMano


	estadodelEnfrentamiento assertPuedeJugarMano.
	cartaDeLaMano := ronda getCartaMano.
	self seEnfrentanLasCartas .
	! !

EstadoDelaRonda subclass: #GanoPrimeraMano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #GanoPrimeraMano category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 18:40:21'!
EstadoDelaRonda subclass: #GanoPrimeraMano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

EstadoDelaRonda subclass: #EstadoInicial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #EstadoInicial category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 18:40:29'!
EstadoDelaRonda subclass: #EstadoInicial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

Object subclass: #EstadoDelaRonda
	instanceVariableNames: 'estadodelEnfrentamiento ronda cartaDeLaMano cartaDelPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

EstadoDelaRonda subclass: #GanoPrimeraPie
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #GanoPrimeraPie category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 18:40:55'!
EstadoDelaRonda subclass: #GanoPrimeraPie
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

Object subclass: #EstadoDelaRonda
	instanceVariableNames: 'estadodelEnfrentamiento ronda cartaDeLaMano cartaDelPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #EstadoDelaRonda category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 18:41:06'!
Object subclass: #EstadoDelaRonda
	instanceVariableNames: 'estadodelEnfrentamiento ronda cartaDeLaMano cartaDelPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!GanoPrimeraPie methodsFor: 'nil' stamp: 'f 7/5/2021 18:42:17'!
seEnfrentanLasCartas! !
!GanoPrimeraPie methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:42:39' prior: 50908282!
seEnfrentanLasCartas


		ronda GanoPrimeraPieYseEnfrentanCartaDelPie: cartaDelPie  contraCartaDeLaMano: cartaDeLaMano .! !

!methodRemoval: EstadoInicial class #initialize stamp: 'f 7/5/2021 18:42:58'!
initialize

	self new initializeWithInicial.!

(EstadoInicial initFor: (Ronda new)) class.!
!EstadoInicial class methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:45:50'!
initFor: aRound

	self new initializeFor: aRound.! !

!methodRemoval: EstadoInicial class #initiFor: stamp: 'f 7/5/2021 18:45:53'!
initiFor: aRound

	self new initializeFor: aRound.!

(EstadoInicial initFor: (Ronda new)) class.!
!EstadoDelaRonda class methodsFor: 'nil' stamp: 'f 7/5/2021 18:46:16'!
initiFor: aRound

	self new initializeFor: aRound.! !

!methodRemoval: EstadoInicial class #initFor: stamp: 'f 7/5/2021 18:46:22'!
initFor: aRound

	self new initializeFor: aRound.!

(EstadoInicial initFor: (Ronda new)) class. !
!EstadoDelaRonda class methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:46:40'!
initFor: aRound

	self new initializeFor: aRound.! !

!methodRemoval: EstadoDelaRonda class #initiFor: stamp: 'f 7/5/2021 18:46:43'!
initiFor: aRound

	self new initializeFor: aRound.!

(EstadoInicial initFor: (Ronda new)) class. !
!GanoSegundaPie methodsFor: 'nil' stamp: 'f 7/5/2021 18:47:36'!
initializeFor: aRound

	estadodelEnfrentamiento :=  JuegaPie new.
	ronda:= aRound.! !
!GanoSegundaPie methodsFor: 'nil' stamp: 'f 7/5/2021 18:49:23'!
juegaPie


	estadodelEnfrentamiento assertPuedeJugarPie.
	estadodelEnfrentamiento := JuegaMano new.
	cartaDelPie := ronda getCartaPie.
	
	! !
!GanoSegundaPie methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:49:47'!
juegaMano


	estadodelEnfrentamiento assertPuedeJugarMano.
	cartaDeLaMano := ronda getCartaMano.
	self seEnfrentanLasCartas .
	! !
!GanoSegundaPie methodsFor: 'nil' stamp: 'f 7/5/2021 18:50:08'!
seEnfrentanLasCartas


		ronda GanoSegundaPieYseEnfrentanCartaDelPie: cartaDelPie  contraCartaDeLaMano: cartaDeLaMano .! !
!GanoSegundaMano methodsFor: 'nil' stamp: 'f 7/5/2021 18:50:29'!
initializeFor: aRound

	estadodelEnfrentamiento :=  JuegaMano new.
	ronda:= aRound.! !
!GanoSegundaMano methodsFor: 'nil' stamp: 'f 7/5/2021 18:50:46'!
juegaMano


	estadodelEnfrentamiento assertPuedeJugarMano.
	estadodelEnfrentamiento := JuegaPie new.
	cartaDeLaMano := ronda getCartaMano.
	! !
!GanoSegundaMano methodsFor: 'nil' stamp: 'f 7/5/2021 18:51:00'!
juegaPie


	estadodelEnfrentamiento assertPuedeJugarPie.
	cartaDelPie := ronda getCartaPie.
	self seEnfrentanLasCartas .
	! !
!GanoSegundaMano methodsFor: 'nil' stamp: 'f 7/5/2021 18:51:25'!
seEnfrentanLasCartas


	ronda GanoSegudaManoYseEnfrentanCartaDelPie: cartaDelPie  contraCartaDeLaMano: cartaDeLaMano .
	! !
!GanoSegundaMano methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:51:31' prior: 50908371!
seEnfrentanLasCartas


	ronda GanoSegundaManoYseEnfrentanCartaDelPie: cartaDelPie  contraCartaDeLaMano: cartaDeLaMano .
	! !
!Empardaron methodsFor: 'nil' stamp: 'f 7/5/2021 18:51:46'!
initializeFor: aRound

	estadodelEnfrentamiento :=  JuegaMano new.
	ronda:= aRound.! !
!Empardaron methodsFor: 'nil' stamp: 'f 7/5/2021 18:51:58'!
juegaMano


	estadodelEnfrentamiento assertPuedeJugarMano.
	estadodelEnfrentamiento := JuegaPie new.
	cartaDeLaMano := ronda getCartaMano.
	! !
!Empardaron methodsFor: 'nil' stamp: 'f 7/5/2021 18:53:13'!
juegaPie


	estadodelEnfrentamiento assertPuedeJugarPie.
	cartaDelPie := ronda getCartaPie.
	self seEnfrentanLasCartas .
	

	! !
!Empardaron methodsFor: 'nil' stamp: 'f 7/5/2021 18:53:38'!
seEnfrentanLasCartas


	ronda DEspuesdeEmpardarseEnfrentanCartaDelPie: cartaDelPie  contraCartaDeLaMano: cartaDeLaMano .
	! !
!Empardaron methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:53:43' prior: 50908402!
seEnfrentanLasCartas


	ronda DespuesdeEmpardarseEnfrentanCartaDelPie: cartaDelPie  contraCartaDeLaMano: cartaDeLaMano .
	! !
!GanoRondaMano methodsFor: 'nil' stamp: 'f 7/5/2021 18:54:52'!
juegaMano

	self raiseRondaTerminadaError! !
!GanoRondaMano methodsFor: 'nil' stamp: 'f 7/5/2021 18:55:21'!
raiseRondaTerminadaError

	self error: self class RondaYaTermino! !
!GanoRondaMano class methodsFor: 'nil' stamp: 'f 7/5/2021 18:55:36'!
RondaYaTermino

	'Ronda ya termino no se puede seguir jugando'! !
!GanoRondaMano methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:55:51'!
juegaPie
	self raiseRondaTerminadaError! !
!GanoRondaMano methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:56:07' prior: 50908415!
juegaMano

	^self raiseRondaTerminadaError! !
!GanoRondaMano methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:56:13' prior: 50908429!
juegaPie
	^self raiseRondaTerminadaError! !
!GanoRondaMano methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:56:17' prior: 50908419!
raiseRondaTerminadaError

	^self error: self class RondaYaTermino! !
!GanoRondaMano methodsFor: 'nil' stamp: 'f 7/5/2021 18:56:23'!
initializeFor: aRound
! !
!GanoRondaMano methodsFor: 'nil' stamp: 'f 7/5/2021 18:57:35'!
seEnfrentanLasCartas
	"Si el dise�o es correcto nunca se deberia llegar a este error"
	
	^self raiseRondaTerminadaError ! !
!GanoRondaPie class methodsFor: 'nil' stamp: 'f 7/5/2021 18:57:53'!
RondaYaTermino

	'Ronda ya termino no se puede seguir jugando'! !
!GanoRondaPie methodsFor: 'nil' stamp: 'f 7/5/2021 18:58:01'!
initializeFor: aRound
! !
!GanoRondaPie methodsFor: 'nil' stamp: 'f 7/5/2021 18:58:11'!
juegaMano

	^self raiseRondaTerminadaError! !
!GanoRondaPie methodsFor: 'nil' stamp: 'f 7/5/2021 18:58:22'!
juegaPie
	^self raiseRondaTerminadaError! !
!GanoRondaPie methodsFor: 'nil' stamp: 'f 7/5/2021 18:58:32'!
raiseRondaTerminadaError

	^self error: self class RondaYaTermino! !
!GanoRondaPie methodsFor: 'nil' stamp: 'f 7/5/2021 18:58:41'!
seEnfrentanLasCartas
	"Si el dise�o es correcto nunca se deberia llegar a este error"
	
	^self raiseRondaTerminadaError ! !

!methodRemoval: EstadoDelaRonda #juegaPiePara: stamp: 'f 7/5/2021 18:59:16'!
juegaPiePara: unaRonda

	self subclassResponsibility .!
!EstadoDelaRonda methodsFor: 'nil' stamp: 'f 7/5/2021 18:59:41'!
initializeFor: aRound
		self subclassResponsibility 

! !
!EstadoDelaRonda methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:59:49'!
juegaPie	
	^self subclassResponsibility 

! !
!EstadoDelaRonda methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 18:59:55' prior: 50908489!
initializeFor: aRound
		^self subclassResponsibility 

! !
!EstadoDelaRonda methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:00:00'!
juegaMano	
	^self subclassResponsibility 

! !
!EstadoDelaRonda methodsFor: 'nil' stamp: 'f 7/5/2021 19:00:13'!
seEnfrentanLasCartas

	^self subclassResponsibility ! !
!EstadoDelaRonda methodsFor: 'nil' stamp: 'f 7/5/2021 19:00:31'!
raiseRondaTerminadaError

	^self subclassResponsibility ! !
!JuegaMano methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:01:10' prior: 50907812!
assertPuedeJugarPie

 	^self raiseDeberiaJugarMano! !
!EstadoEnfrentamiento methodsFor: 'nil' stamp: 'f 7/5/2021 19:01:29'!
assertPuedeJugarMano

	^self subclassResponsibility ! !
!EstadoEnfrentamiento methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:01:35'!
assertPuedeJugarPie

	^self subclassResponsibility ! !
!EstadoEnfrentamiento methodsFor: 'nil' stamp: 'f 7/5/2021 19:01:55'!
raiseDeberiaJugarMano
	
	^self subclassResponsibility ! !
!EstadoEnfrentamiento methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:02:20'!
raiseDeberiaJugarPie
	
	^self subclassResponsibility ! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:03:00' prior: 50907714!
juegaPie

	estado juegaPie.

	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:03:11' prior: 50907915!
juegaMano

	estado juegaMano.

	! !
!Ronda methodsFor: 'nil' stamp: 'f 7/5/2021 19:03:44'!
DespuesdeEmpardarseEnfrentanCartaDelPie: cartaDelPie  contraCartaDeLaMano: cartaDeLaMano .
! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:05:15' prior: 50908547!
DespuesdeEmpardarseEnfrentanCartaDelPie: cartaDelPie  contraCartaDeLaMano: cartaDeLaMano

	(cartaDelPie mataA: cartaDeLaMano) ifTrue:[estado:=GanoRondaPie initFor:self].
	(cartaDeLaMano mataA: cartaDelPie ) ifTrue:[estado:=GanoRondaMano initFor:self].

	"No testeo El caso de que empardan devuelta por lo hablado en clase"
	
! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:05:33' prior: 50908061!
EnLaFaseInicialseEnfrentanCartaDelPie: cartaDelPie  contraCartaDeLaMano: cartaDeLaMano

	(cartaDelPie mataA: cartaDeLaMano) ifTrue:[estado:=GanoPrimeraPie initFor:self].
	(cartaDeLaMano mataA: cartaDelPie ) ifTrue:[estado:=GanoPrimeraMano initFor:self].
	(cartaDeLaMano empardaCon: cartaDelPie) ifTrue: [estado:=Empardaron initFor:self]

	! !
!Ronda methodsFor: 'nil' stamp: 'f 7/5/2021 19:06:07'!
GanoPrimeraManoYseEnfrentanCartaDelPie: cartaDelPie  contraCartaDeLaMano: cartaDeLaMano
! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:06:25' prior: 50908553!
DespuesdeEmpardarseEnfrentanCartaDelPie: cartaDelPie  contraCartaDeLaMano: cartaDeLaMano

	(cartaDelPie mataA: cartaDeLaMano) ifTrue:[estado:=GanoRondaPie initFor:self].
	(cartaDeLaMano mataA: cartaDelPie ) ifTrue:[estado:=GanoRondaMano initFor:self].

	"No chequeo El caso de que empardan devuelta por lo hablado en clase"
	
! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:07:25' prior: 50908579!
GanoPrimeraManoYseEnfrentanCartaDelPie: cartaDelPie  contraCartaDeLaMano: cartaDeLaMano

	(cartaDelPie mataA: cartaDeLaMano) ifTrue:[estado:=GanoSegundaPie initFor:self].
	(cartaDeLaMano mataA: cartaDelPie ) ifTrue:[estado:=GanoRondaMano initFor:self].
! !
!Ronda methodsFor: 'nil' stamp: 'f 7/5/2021 19:07:49'!
GanoPrimeraPieYseEnfrentanCartaDelPie: cartaDelPie  contraCartaDeLaMano: cartaDeLaMano! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:08:06' prior: 50908609!
GanoPrimeraPieYseEnfrentanCartaDelPie: cartaDelPie  contraCartaDeLaMano: cartaDeLaMano

	(cartaDelPie mataA: cartaDeLaMano) ifTrue:[estado:=GanoRondaPie initFor:self].
	(cartaDeLaMano mataA: cartaDelPie ) ifTrue:[estado:=GanoSegundaMano initFor:self].
! !
!Ronda methodsFor: 'nil' stamp: 'f 7/5/2021 19:08:34'!
GanoSegundaManoYseEnfrentanCartaDelPie: cartaDelPie  contraCartaDeLaMano: cartaDeLaMano! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:09:00' prior: 50908625!
GanoSegundaManoYseEnfrentanCartaDelPie: cartaDelPie  contraCartaDeLaMano: cartaDeLaMano

	(cartaDelPie mataA: cartaDeLaMano) ifTrue:[estado:=GanoRondaPie initFor:self].
	(cartaDeLaMano mataA: cartaDelPie ) ifTrue:[estado:=GanoRondaMano initFor:self].
! !
!Ronda methodsFor: 'nil' stamp: 'f 7/5/2021 19:09:19'!
GanoSegundaPieYseEnfrentanCartaDelPie: cartaDelPie  contraCartaDeLaMano: cartaDeLaMano! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:09:31' prior: 50908641!
GanoSegundaPieYseEnfrentanCartaDelPie: cartaDelPie  contraCartaDeLaMano: cartaDeLaMano

	(cartaDelPie mataA: cartaDeLaMano) ifTrue:[estado:=GanoRondaPie initFor:self].
	(cartaDeLaMano mataA: cartaDelPie ) ifTrue:[estado:=GanoRondaMano initFor:self].
! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:26:31' prior: 50907698!
initWithPie: anOrderedCollectionWithcards andHand: anotherOrderedCollectionWithCards

	pie:= anOrderedCollectionWithcards.
	mano:= anotherOrderedCollectionWithCards.
	estado:= EstadoInicial initFor:self.

	! !
!Ronda methodsFor: 'nil' stamp: 'f 7/5/2021 19:27:56'!
Ganador

	estado ganador.! !
!GanoRondaPie methodsFor: 'nil' stamp: 'f 7/5/2021 19:28:35'!
ganador

	^ronda ganoPie! !
!GanoRondaMano methodsFor: 'nil' stamp: 'f 7/5/2021 19:28:51'!
ganador

	ronda ganoMano! !
!EstadoDelaRonda methodsFor: 'nil' stamp: 'f 7/5/2021 19:29:22'!
ganador

	self raiseRondaNoTermino! !
!EstadoDelaRonda methodsFor: 'nil' stamp: 'f 7/5/2021 19:29:42'!
raiseRondaNoTermino

	^self error: self class rondaSigueEnJuego! !
!EstadoDelaRonda class methodsFor: 'nil' stamp: 'f 7/5/2021 19:30:02'!
rondaSigueEnJuego

	^'Ronda siue en juego todavia no hay ganador'! !
!EstadoDelaRonda class methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:30:06' prior: 50908685!
rondaSigueEnJuego

	^'Ronda sigue en juego todavia no hay ganador'! !
!EstadoDelaRonda methodsFor: 'nil' stamp: 'f 7/5/2021 19:30:43'!
ganoPie


	! !

!methodRemoval: EstadoDelaRonda #ganoPie stamp: 'f 7/5/2021 19:30:53'!
ganoPie


	!
!GanoRondaPie methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:31:09' prior: 50908670 overrides: 50908676!
ganador

	^'Pie'! !
!GanoRondaMano methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:31:23' prior: 50908673 overrides: 50908676!
ganador

	^'Mano'! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:31:34' prior: 50908667!
Ganador

	^estado ganador.! !
!EstadoDelaRonda methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:32:58' prior: 50908676!
ganador

	^self raiseRondaNoTermino! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:33:19' prior: 50907502!
test01SoloSePuedeIncializarCon3Cartas
	|ronda|
	self should:[ronda:=Ronda initconLasCartasdelPie: (OrderedCollection with: CartaDeTruco anchoDeEspada) yLasCartasdeLaMano: (OrderedCollection with: CartaDeTruco anchoDeBasto)]
	raise: Error
	withMessageText: Ronda not3cardsInonedeckError.! !

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 19:33:22'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 19:33:22'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:33:32' prior: 50908721!
test01SoloSePuedeIncializarCon3Cartas
	|ronda|
	self should:[ronda:=Ronda initconLasCartasdelPie: (OrderedCollection with: CartaDeTruco anchoDeEspada) yLasCartasdeLaMano: (OrderedCollection with: CartaDeTruco anchoDeBasto)]
	raise: Error
	withMessageText: Ronda not3cardsInonedeckError.
	
	
	ronda juegaPie.! !

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 19:33:34'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:34:32' prior: 50908740!
test01SoloSePuedeIncializarCon3Cartas
	|ronda|
	self should:[ronda:=Ronda initconLasCartasdelPie: (OrderedCollection with: CartaDeTruco anchoDeEspada) yLasCartasdeLaMano: (OrderedCollection with: CartaDeTruco anchoDeBasto)]
	raise: Error
	withMessageText: Ronda not3cardsInonedeckError.
	
	
	self should:[ronda juegaPie.]
	raise: Error
	withMessageText: UndefinedObject! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:34:34' prior: 50908756!
test01SoloSePuedeIncializarCon3Cartas
	|ronda|
	self should:[ronda:=Ronda initconLasCartasdelPie: (OrderedCollection with: CartaDeTruco anchoDeEspada) yLasCartasdeLaMano: (OrderedCollection with: CartaDeTruco anchoDeBasto)]
	raise: Error
	withMessageText: Ronda not3cardsInonedeckError.
	
	
	self should:[ronda juegaPie.]
	raise: Error
	withMessageText: UndefinedObject! !

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 19:34:36'!
FAILURE!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:34:45' prior: 50908771!
test01SoloSePuedeIncializarCon3Cartas
	|ronda|
	self should:[ronda:=Ronda initconLasCartasdelPie: (OrderedCollection with: CartaDeTruco anchoDeEspada) yLasCartasdeLaMano: (OrderedCollection with: CartaDeTruco anchoDeBasto)]
	raise: Error
	withMessageText: Ronda not3cardsInonedeckError.
	
	
	self should:[ronda juegaPie.]
	raise: Error
	! !

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 19:34:46'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 19:34:46'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:35:03' prior: 50908789!
test01SoloSePuedeIncializarCon3Cartas
	|ronda|
	self should:[ronda:=Ronda initconLasCartasdelPie: (OrderedCollection with: CartaDeTruco anchoDeEspada) yLasCartasdeLaMano: (OrderedCollection with: CartaDeTruco anchoDeBasto)]
	raise: Error
	withMessageText: Ronda not3cardsInonedeckError.
	
	
	self should:[ronda juegaPie.]
	raise: Error.
		self should:[ronda juegaPie.]
	! !

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 19:35:04'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:36:17' prior: 50908809!
test01SoloSePuedeIncializarCon3Cartas
	|ronda|
	self should:[ronda:=Ronda initconLasCartasdelPie: (OrderedCollection with: CartaDeTruco anchoDeEspada) yLasCartasdeLaMano: (OrderedCollection with: CartaDeTruco anchoDeBasto)]
	raise: Error
	withMessageText: Ronda not3cardsInonedeckError.
	
	
	self should:[ronda juegaMano.]
	raise: Error .
		
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:36:34' prior: 50908827!
test01SoloSePuedeIncializarCon3Cartas
	|ronda|
	self should:[ronda:=Ronda initconLasCartasdelPie: (OrderedCollection with: CartaDeTruco anchoDeEspada) yLasCartasdeLaMano: (OrderedCollection with: CartaDeTruco anchoDeBasto)]
	raise: Error
	withMessageText: Ronda not3cardsInonedeckError.
	
	"JuegaMano solo tira error si el objeto no se creo"
	self should:[ronda juegaMano.]
	raise: Error .
		
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:39:09'!
test02InitlizedinInitialState
	|ronda|
	self should:[ronda:=Ronda initconLasCartasdelPie: (OrderedCollection with: CartaDeTruco anchoDeEspada) yLasCartasdeLaMano: (OrderedCollection with: CartaDeTruco anchoDeBasto)]
	raise: Error
	withMessageText: Ronda not3cardsInonedeckError.
	
	"JuegaMano solo tira error si el objeto no se creo"
	self should:[ronda juegaMano.]
	raise: Error .
		
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:39:13'!
test02InitializedinInitialState
	|ronda|
	self should:[ronda:=Ronda initconLasCartasdelPie: (OrderedCollection with: CartaDeTruco anchoDeEspada) yLasCartasdeLaMano: (OrderedCollection with: CartaDeTruco anchoDeBasto)]
	raise: Error
	withMessageText: Ronda not3cardsInonedeckError.
	
	"JuegaMano solo tira error si el objeto no se creo"
	self should:[ronda juegaMano.]
	raise: Error .
		
	! !

!methodRemoval: RondaTest #test02InitlizedinInitialState stamp: 'f 7/5/2021 19:39:17'!
test02InitlizedinInitialState
	|ronda|
	self should:[ronda:=Ronda initconLasCartasdelPie: (OrderedCollection with: CartaDeTruco anchoDeEspada) yLasCartasdeLaMano: (OrderedCollection with: CartaDeTruco anchoDeBasto)]
	raise: Error
	withMessageText: Ronda not3cardsInonedeckError.
	
	"JuegaMano solo tira error si el objeto no se creo"
	self should:[ronda juegaMano.]
	raise: Error .
		
	!
!Ronda methodsFor: 'nil' stamp: 'f 7/5/2021 19:39:39'!
state

	^estado! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:40:12' prior: 50908871!
test02InitializedinInitialState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie: (OrderedCollection with: CartaDeTruco anchoDeEspada) yLasCartasdeLaMano: (OrderedCollection with: CartaDeTruco anchoDeBasto)
		
	! !

!classDefinition: #RondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 19:41:03'!
TestCase subclass: #RondaTest
	instanceVariableNames: 'manoGanadora'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaTest methodsFor: 'nil' stamp: 'f 7/5/2021 19:41:01' overrides: 16927572!
setUp


	manoGanadora := OrderedCollection with: 3.! !

!classDefinition: #RondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 19:43:41'!
TestCase subclass: #RondaTest
	instanceVariableNames: 'manoGanadora manoPerdedora'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:43:39' prior: 50908921 overrides: 16927572!
setUp


	manoGanadora := OrderedCollection with: CartaDeTruco anchoDeEspada with: CartaDeTruco anchoDeBasto 
	with: (CartaDeTruco bastoCon: 2).
	manoPerdedora:= OrderedCollection with: (CartaDeTruco oroCon: 4 )with: (CartaDeTruco oroCon: 5 ) 
	with: (CartaDeTruco oroCon: 6 ).! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:44:08' prior: 50908904!
test02InitializedinInitialState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:manoGanadora yLasCartasdeLaMano: manoPerdedora.
		
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:44:48' prior: 50908947!
test02InitializedinInitialState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:manoGanadora yLasCartasdeLaMano: manoPerdedora.
	self assert: (ronda estado).
		
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:45:03'!
Estado

	^estado! !

!methodRemoval: Ronda #state stamp: 'f 7/5/2021 19:45:07'!
state

	^estado!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:45:43' prior: 50908955!
test02InitializedinInitialState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:manoGanadora yLasCartasdeLaMano: manoPerdedora.
	self assert: (ronda Estado) class equals: EstadoInicial class.
		
	! !

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 19:45:46'!
ERROR!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 19:46:01'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:46:25' prior: 50908969!
test02InitializedinInitialState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:manoGanadora yLasCartasdeLaMano: manoPerdedora.
	self assert: (ronda Estado)  equals: EstadoInicial class.
		
	! !

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 19:46:27'!
ERROR!
!Ronda class methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:47:14' prior: 50907520!
initconLasCartasdelPie: anOrderedCollectionWithcards yLasCartasdeLaMano:anotherOrderedCollectionWithCards
		
	((anOrderedCollectionWithcards size = 3) and: [anotherOrderedCollectionWithCards size = 3]) 
	ifFalse:[^self error: Ronda not3cardsInonedeckError.].
	
	
	^self new initWithPie: anOrderedCollectionWithcards andHand: anotherOrderedCollectionWithCards.
	
	! !

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 19:47:20'!
FAILURE!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:47:30' prior: 50908984!
test02InitializedinInitialState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:manoGanadora yLasCartasdeLaMano: manoPerdedora.
	self assert: (ronda Estado) class  equals: EstadoInicial class.
		
	! !

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 19:47:32'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 19:47:32'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 19:47:32'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:48:13'!
test03EachPlayerHas3CardsBeforePlaying
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:manoGanadora yLasCartasdeLaMano: manoPerdedora.
	self assert: (ronda Estado) class  equals: EstadoInicial class.
		
	! !
!Ronda methodsFor: 'nil' stamp: 'f 7/5/2021 19:48:44'!
cartasDelPie

	^pie! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:48:55'!
cartasDeLaMano

	^mano! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:50:14' prior: 50909032!
test03EachPlayerHas3CardsBeforePlaying
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:manoGanadora yLasCartasdeLaMano: manoPerdedora.
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 3.
		
	! !

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 19:50:15'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 19:50:15'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 19:50:15'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 19:50:15'!
PASSED!
!EstadoDelaRonda class methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:50:27' prior: 50908318!
initFor: aRound

	^self new initializeFor: aRound.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:52:44'!
test04HandStartsPlaying
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:manoGanadora yLasCartasdeLaMano: manoPerdedora.
	ronda juegaMano.
	self assert: 2  equals: (ronda cartasDeLaMano) size.
	
		
	! !

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 19:52:45'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 19:52:45'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 19:52:45'!
FAILURE!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 19:52:45'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 19:52:45'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 19:52:45'!
FAILURE!

ronda!

ronda cartasDeLaMano!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:56:48' prior: 50909077!
test04HandStartsPlaying
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:manoGanadora yLasCartasdeLaMano: manoPerdedora.
	ronda juegaMano.
	self assert: 2  equals: ((ronda cartasDeLaMano) size).
	
		
	! !

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 19:56:49'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 19:56:49'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 19:56:49'!
FAILURE!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 19:56:49'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 19:56:49'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 19:56:49'!
FAILURE!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:57:03' prior: 50909105!
test04HandStartsPlaying
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:manoGanadora yLasCartasdeLaMano: manoPerdedora.
	ronda juegaMano.
	
	
		
	! !

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 19:57:04'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 19:57:04'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 19:57:04'!
FAILURE!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 19:57:04'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 19:57:04'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 19:57:04'!
FAILURE!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 19:57:18'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 19:57:18'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 19:57:18'!
FAILURE!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 19:57:18'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 19:57:18'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 19:57:18'!
FAILURE!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 19:57:32'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 19:57:32'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 19:57:32'!
FAILURE!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 19:57:32'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 19:57:32'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 19:57:32'!
FAILURE!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 19:57:39'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 19:57:48'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 19:57:52'!
FAILURE!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 19:57:58'!
FAILURE!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 19:57:58'!
FAILURE!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:58:11' prior: 50909014!
test02InitializedinInitialState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:manoGanadora yLasCartasdeLaMano: manoPerdedora.
	self assert: ((ronda Estado) class)  equals: EstadoInicial class.
		
	! !

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 19:58:12'!
FAILURE!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:58:25' prior: 50909208!
test02InitializedinInitialState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:manoGanadora yLasCartasdeLaMano: manoPerdedora.
	self assert: ((ronda Estado) class)  equals: (EstadoInicial class).
		
	! !

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 19:58:27'!
FAILURE!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 19:59:12' prior: 50909132!
test04HandStartsPlaying
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:manoGanadora yLasCartasdeLaMano: manoPerdedora.
	ronda juegaMano.
       self assert:( (ronda cartasDeLaMano) size) equals: 2.
	
	
		
	! !

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 19:59:16'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 19:59:21'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 19:59:41'!
FAILURE!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 19:59:41'!
FAILURE!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:00:08' prior: 50909221!
test02InitializedinInitialState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:manoGanadora yLasCartasdeLaMano: manoPerdedora.
	self assert: ((ronda Estado) class)  equals: ((EstadoInicial new)class).
		
	! !

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 20:00:12'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 20:00:16'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 20:00:16'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 20:00:16'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 20:00:16'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:01:19'!
test05ErrorIfFootStartsPlaying
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:manoGanadora yLasCartasdeLaMano: manoPerdedora.
	self should: [ronda juegaPie.]
	raise: Error.
       self assert:( (ronda cartasDelPie ) size) equals: 3.
	
	
		
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:02:08' prior: 50909280!
test05ErrorIfFootStartsPlaying
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:manoGanadora yLasCartasdeLaMano: manoPerdedora.
	self should: [ronda juegaPie.]
	raise: Error
	withMessageText: JuegaMano errorTurnoMano.

       self assert:( (ronda cartasDelPie ) size) equals: 3.
	
	
		
	! !

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 20:02:09'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 20:02:09'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 20:02:09'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 20:02:09'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 20:02:09'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 20:02:09'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:05:12'!
test06HandCantPlayTwice
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:manoGanadora yLasCartasdeLaMano: manoPerdedora.
	ronda juegaMano.
	self should: [ronda juegaMano.]
	raise: Error
	withMessageText: JuegaPie errorTurnoPie.

       self assert:( (ronda cartasDeLaMano ) size) equals: 2.
	
	
		
	! !

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 20:05:13'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 20:05:13'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 20:05:13'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 20:05:13'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 20:05:13'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 20:05:13'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 20:05:13'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:06:37'!
test07HandWiningFirstEncounterReflectsOnrdsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:manoGanadora yLasCartasdeLaMano: manoPerdedora.
	ronda juegaMano.
	ronda juegaPie.
	

       self assert:( (ronda cartasDeLaMano ) size) equals: 2.
	
	
		
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:07:13' prior: 50909352!
test07HandWiningFirstEncounterReflectsOnrdsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:manoGanadora yLasCartasdeLaMano: manoPerdedora.
	ronda juegaMano.
	ronda juegaPie.
	

	self assert: ((ronda Estado) class)  equals: ((GanoPrimeraPie new)class).	
	
		
	! !

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOnrdsAndState stamp: 'f 7/5/2021 20:07:14'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:07:34' prior: 50909363!
test07HandWiningFirstEncounterReflectsOnrdsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:manoGanadora yLasCartasdeLaMano: manoPerdedora.
	ronda juegaMano.
	ronda juegaPie.
	
"""
	self assert: ((ronda Estado) class)  equals: ((GanoPrimeraPie new)class).	"""
	
		
	! !

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOnrdsAndState stamp: 'f 7/5/2021 20:07:35'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 20:07:35'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 20:07:35'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 20:07:35'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 20:07:35'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 20:07:35'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 20:07:35'!
PASSED!

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOnrdsAndState stamp: 'f 7/5/2021 20:07:35'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:07:44' prior: 50909378!
test07HandWiningFirstEncounterReflectsOnrdsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:manoGanadora yLasCartasdeLaMano: manoPerdedora.
	ronda juegaMano.
	ronda juegaPie.
	

	self assert: ((ronda Estado) class)  equals: ((GanoPrimeraPie new)class).	
	
		
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:08:46' prior: 50909256!
test02InitializedinInitialState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoGanadora copy)yLasCartasdeLaMano: (manoPerdedora copy).
	self assert: ((ronda Estado) class)  equals: ((EstadoInicial new)class).
		
	! !

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 20:08:47'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 20:08:47'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 20:08:48'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 20:08:48'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 20:08:48'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 20:08:48'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 20:08:48'!
PASSED!

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOnrdsAndState stamp: 'f 7/5/2021 20:08:48'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:09:13' prior: 50909234!
test04HandStartsPlaying
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoGanadora copy) yLasCartasdeLaMano: (manoPerdedora copy).
	ronda juegaMano.
       self assert:( (ronda cartasDeLaMano) size) equals: 2.
	
	
		
	! !

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 20:09:14'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 20:09:14'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 20:09:14'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 20:09:14'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 20:09:14'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 20:09:14'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 20:09:14'!
PASSED!

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOnrdsAndState stamp: 'f 7/5/2021 20:09:14'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:09:28' prior: 50909291!
test05ErrorIfFootStartsPlaying
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoGanadora copy) yLasCartasdeLaMano: (manoPerdedora copy).
	self should: [ronda juegaPie.]
	raise: Error
	withMessageText: JuegaMano errorTurnoMano.

       self assert:( (ronda cartasDelPie ) size) equals: 3.
	
	
		
	! !

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 20:09:29'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 20:09:29'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 20:09:29'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 20:09:29'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 20:09:29'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 20:09:29'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 20:09:29'!
PASSED!

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOnrdsAndState stamp: 'f 7/5/2021 20:09:29'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:09:42' prior: 50909320!
test06HandCantPlayTwice
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoGanadora copy)yLasCartasdeLaMano: (manoPerdedora copy).
	ronda juegaMano.
	self should: [ronda juegaMano.]
	raise: Error
	withMessageText: JuegaPie errorTurnoPie.

       self assert:( (ronda cartasDeLaMano ) size) equals: 2.
	
	
		
	! !

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 20:09:43'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 20:09:43'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 20:09:43'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 20:09:43'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 20:09:43'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 20:09:43'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 20:09:43'!
PASSED!

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOnrdsAndState stamp: 'f 7/5/2021 20:09:43'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:09:58' prior: 50909414!
test07HandWiningFirstEncounterReflectsOnrdsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoGanadora copy) yLasCartasdeLaMano: (manoPerdedora copy).
	ronda juegaMano.
	ronda juegaPie.
	

	self assert: ((ronda Estado) class)  equals: ((GanoPrimeraPie new)class).	
	
		
	! !

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOnrdsAndState stamp: 'f 7/5/2021 20:09:59'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 20:09:59'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 20:09:59'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 20:09:59'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 20:09:59'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 20:09:59'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 20:09:59'!
PASSED!

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOnrdsAndState stamp: 'f 7/5/2021 20:09:59'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:10:18' prior: 50909567!
test07HandWiningFirstEncounterReflectsOnrdsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoGanadora copy) yLasCartasdeLaMano: (manoPerdedora copy).
	ronda juegaMano.
	ronda juegaPie.
	

	self assert: ((ronda Estado) class)  equals: ((GanoPrimeraPie new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 2.
	
		
	! !

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOnrdsAndState stamp: 'f 7/5/2021 20:10:19'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 20:10:19'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 20:10:19'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 20:10:19'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 20:10:19'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 20:10:19'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 20:10:19'!
PASSED!

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOnrdsAndState stamp: 'f 7/5/2021 20:10:19'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:10:38'!
test07FeetWiningFirstEncounterReflectsOncardsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoGanadora copy) yLasCartasdeLaMano: (manoPerdedora copy).
	ronda juegaMano.
	ronda juegaPie.
	

	self assert: ((ronda Estado) class)  equals: ((GanoPrimeraPie new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 2.
	
		
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:10:43'!
test08FeetWiningFirstEncounterReflectsOncardsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoGanadora copy) yLasCartasdeLaMano: (manoPerdedora copy).
	ronda juegaMano.
	ronda juegaPie.
	

	self assert: ((ronda Estado) class)  equals: ((GanoPrimeraPie new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 2.
	
		
	! !

!methodRemoval: RondaTest #test07FeetWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:10:51'!
test07FeetWiningFirstEncounterReflectsOncardsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoGanadora copy) yLasCartasdeLaMano: (manoPerdedora copy).
	ronda juegaMano.
	ronda juegaPie.
	

	self assert: ((ronda Estado) class)  equals: ((GanoPrimeraPie new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 2.
	
		
	!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:10:56'!
test07HandWiningFirstEncounterReflectsOncardsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoGanadora copy) yLasCartasdeLaMano: (manoPerdedora copy).
	ronda juegaMano.
	ronda juegaPie.
	

	self assert: ((ronda Estado) class)  equals: ((GanoPrimeraPie new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 2.
	
		
	! !

!methodRemoval: RondaTest #test07HandWiningFirstEncounterReflectsOnrdsAndState stamp: 'f 7/5/2021 20:11:01'!
test07HandWiningFirstEncounterReflectsOnrdsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoGanadora copy) yLasCartasdeLaMano: (manoPerdedora copy).
	ronda juegaMano.
	ronda juegaPie.
	

	self assert: ((ronda Estado) class)  equals: ((GanoPrimeraPie new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 2.
	
		
	!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:11:17' prior: 50909660!
test08FeetWiningFirstEncounterReflectsOncardsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoPerdedora copy) yLasCartasdeLaMano: (manoGanadora copy).
	ronda juegaMano.
	ronda juegaPie.
	

	self assert: ((ronda Estado) class)  equals: ((GanoPrimeraPie new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 2.
	
		
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:11:22' prior: 50909725!
test08FeetWiningFirstEncounterReflectsOncardsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoPerdedora copy) yLasCartasdeLaMano: (manoGanadora copy).
	ronda juegaMano.
	ronda juegaPie.
	

	self assert: ((ronda Estado) class)  equals: ((GanoPrimeraMano new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 2.
	
		
	! !

!testRun: #RondaTest #test08FeetWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:11:24'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 20:11:24'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 20:11:24'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 20:11:24'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 20:11:24'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 20:11:24'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 20:11:24'!
PASSED!

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:11:24'!
PASSED!

!testRun: #RondaTest #test08FeetWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:11:24'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:11:54'!
test08TyingReflectsOncardsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoPerdedora copy) yLasCartasdeLaMano: (manoGanadora copy).
	ronda juegaMano.
	ronda juegaPie.
	

	self assert: ((ronda Estado) class)  equals: ((Empardaron new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 2.
	
		
	! !

!testRun: #RondaTest #test08TyingReflectsOncardsAndState stamp: 'f 7/5/2021 20:11:56'!
FAILURE!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:12:15' prior: 50909785!
test08TyingReflectsOncardsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoPerdedora copy) yLasCartasdeLaMano: (manoPerdedora copy).
	ronda juegaMano.
	ronda juegaPie.
	

	self assert: ((ronda Estado) class)  equals: ((Empardaron new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 2.
	
		
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:12:20'!
test09TyingReflectsOncardsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoPerdedora copy) yLasCartasdeLaMano: (manoPerdedora copy).
	ronda juegaMano.
	ronda juegaPie.
	

	self assert: ((ronda Estado) class)  equals: ((Empardaron new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 2.
	
		
	! !

!methodRemoval: RondaTest #test08TyingReflectsOncardsAndState stamp: 'f 7/5/2021 20:12:23'!
test08TyingReflectsOncardsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoPerdedora copy) yLasCartasdeLaMano: (manoPerdedora copy).
	ronda juegaMano.
	ronda juegaPie.
	

	self assert: ((ronda Estado) class)  equals: ((Empardaron new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 2.
	
		
	!

!testRun: #RondaTest #test09TyingReflectsOncardsAndState stamp: 'f 7/5/2021 20:12:26'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 20:12:26'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 20:12:26'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 20:12:26'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 20:12:26'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 20:12:26'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 20:12:26'!
PASSED!

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:12:26'!
PASSED!

!testRun: #RondaTest #test08FeetWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:12:26'!
PASSED!

!testRun: #RondaTest #test09TyingReflectsOncardsAndState stamp: 'f 7/5/2021 20:12:26'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:17:04'!
test10FeetWiningFirstandSecondEncounterReflectsOncardsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoGanadora copy) yLasCartasdeLaMano: (manoPerdedora copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaPie.
	ronda juegaMano.
	
	self assert: ((ronda Estado) class)  equals: ((GanoRondaPie new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 1.
	
		
	! !

!testRun: #RondaTest #test10FeetWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:17:07'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 20:17:07'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 20:17:07'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 20:17:07'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 20:17:07'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 20:17:07'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 20:17:07'!
PASSED!

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:17:07'!
PASSED!

!testRun: #RondaTest #test08FeetWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:17:07'!
PASSED!

!testRun: #RondaTest #test09TyingReflectsOncardsAndState stamp: 'f 7/5/2021 20:17:07'!
PASSED!

!testRun: #RondaTest #test10FeetWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:17:07'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:17:42'!
test08FootWiningFirstEncounterReflectsOncardsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoPerdedora copy) yLasCartasdeLaMano: (manoGanadora copy).
	ronda juegaMano.
	ronda juegaPie.
	

	self assert: ((ronda Estado) class)  equals: ((GanoPrimeraMano new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 2.
	
		
	! !

!methodRemoval: RondaTest #test08FeetWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:17:45'!
test08FeetWiningFirstEncounterReflectsOncardsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoPerdedora copy) yLasCartasdeLaMano: (manoGanadora copy).
	ronda juegaMano.
	ronda juegaPie.
	

	self assert: ((ronda Estado) class)  equals: ((GanoPrimeraMano new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 2.
	
		
	!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:17:53'!
test10FootWiningFirstandSecondEncounterReflectsOncardsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoGanadora copy) yLasCartasdeLaMano: (manoPerdedora copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaPie.
	ronda juegaMano.
	
	self assert: ((ronda Estado) class)  equals: ((GanoRondaPie new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 1.
	
		
	! !

!methodRemoval: RondaTest #test10FeetWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:17:57'!
test10FeetWiningFirstandSecondEncounterReflectsOncardsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoGanadora copy) yLasCartasdeLaMano: (manoPerdedora copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaPie.
	ronda juegaMano.
	
	self assert: ((ronda Estado) class)  equals: ((GanoRondaPie new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 1.
	
		
	!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:18:43'!
test11HandCantPlayIfFootWonFirstRound
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoGanadora copy) yLasCartasdeLaMano: (manoPerdedora copy).
	ronda juegaMano.
	ronda juegaPie.
	
	self should:ronda juegaMano.
	
	self assert: ((ronda Estado) class)  equals: ((GanoRondaPie new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 1.
	
		
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:19:13' prior: 50909999!
test11HandCantPlayIfFootWonFirstRound
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoGanadora copy) yLasCartasdeLaMano: (manoPerdedora copy).
	ronda juegaMano.
	ronda juegaPie.
	
	self should: [ronda juegaMano.]
	raise: Error
	withMessageText: JuegaPie errorTurnoPie.
	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 2.
	
		
	! !

!testRun: #RondaTest #test11HandCantPlayIfFootWonFirstRound stamp: 'f 7/5/2021 20:19:15'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 20:19:15'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 20:19:15'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 20:19:15'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 20:19:15'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 20:19:15'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 20:19:15'!
PASSED!

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:19:15'!
PASSED!

!testRun: #RondaTest #test08FootWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:19:15'!
PASSED!

!testRun: #RondaTest #test09TyingReflectsOncardsAndState stamp: 'f 7/5/2021 20:19:16'!
PASSED!

!testRun: #RondaTest #test10FootWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:19:16'!
PASSED!

!testRun: #RondaTest #test11HandCantPlayIfFootWonFirstRound stamp: 'f 7/5/2021 20:19:16'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:20:07'!
test12HandWiningFirstandSecondEncounterReflectsOncardsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoPerdedora copy) yLasCartasdeLaMano: (manoGanadora copy).
	ronda juegaMano.
	ronda juegaPie.
	
	ronda juegaMano.
	ronda juegaPie.
	
	self assert: ((ronda Estado) class)  equals: ((GanoRondaMano new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 1.
	
		
	! !

!testRun: #RondaTest #test12HandWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:20:10'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 20:20:10'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 20:20:10'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 20:20:10'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 20:20:10'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 20:20:10'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 20:20:10'!
PASSED!

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:20:10'!
PASSED!

!testRun: #RondaTest #test08FootWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:20:10'!
PASSED!

!testRun: #RondaTest #test09TyingReflectsOncardsAndState stamp: 'f 7/5/2021 20:20:10'!
PASSED!

!testRun: #RondaTest #test10FootWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:20:10'!
PASSED!

!testRun: #RondaTest #test11HandCantPlayIfFootWonFirstRound stamp: 'f 7/5/2021 20:20:10'!
PASSED!

!testRun: #RondaTest #test12HandWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:20:10'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:21:13'!
test11FootCantPlayIfHandWonFirstRound
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoPerdedora copy) yLasCartasdeLaMano: (manoGanadora copy).
	ronda juegaMano.
	ronda juegaPie.
	
	self should: [ronda juegaPie.]
	raise: Error
	withMessageText: JuegaMano errorTurnoMano.
	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 2.
	
		
	! !

!testRun: #RondaTest #test11FootCantPlayIfHandWonFirstRound stamp: 'f 7/5/2021 20:21:14'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 20:21:14'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 20:21:14'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 20:21:14'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 20:21:14'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 20:21:14'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 20:21:14'!
PASSED!

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:21:14'!
PASSED!

!testRun: #RondaTest #test08FootWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:21:14'!
PASSED!

!testRun: #RondaTest #test09TyingReflectsOncardsAndState stamp: 'f 7/5/2021 20:21:14'!
PASSED!

!testRun: #RondaTest #test10FootWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:21:14'!
PASSED!

!testRun: #RondaTest #test11FootCantPlayIfHandWonFirstRound stamp: 'f 7/5/2021 20:21:14'!
PASSED!

!testRun: #RondaTest #test11HandCantPlayIfFootWonFirstRound stamp: 'f 7/5/2021 20:21:14'!
PASSED!

!testRun: #RondaTest #test12HandWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:21:14'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:21:22'!
test13FootCantPlayIfHandWonFirstRound
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoPerdedora copy) yLasCartasdeLaMano: (manoGanadora copy).
	ronda juegaMano.
	ronda juegaPie.
	
	self should: [ronda juegaPie.]
	raise: Error
	withMessageText: JuegaMano errorTurnoMano.
	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 2.
	
		
	! !

!methodRemoval: RondaTest #test11FootCantPlayIfHandWonFirstRound stamp: 'f 7/5/2021 20:21:28'!
test11FootCantPlayIfHandWonFirstRound
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoPerdedora copy) yLasCartasdeLaMano: (manoGanadora copy).
	ronda juegaMano.
	ronda juegaPie.
	
	self should: [ronda juegaPie.]
	raise: Error
	withMessageText: JuegaMano errorTurnoMano.
	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 2.
	
		
	!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 20:21:32'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 20:21:32'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 20:21:32'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 20:21:32'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 20:21:32'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 20:21:32'!
PASSED!

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:21:32'!
PASSED!

!testRun: #RondaTest #test08FootWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:21:32'!
PASSED!

!testRun: #RondaTest #test09TyingReflectsOncardsAndState stamp: 'f 7/5/2021 20:21:32'!
PASSED!

!testRun: #RondaTest #test10FootWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:21:32'!
PASSED!

!testRun: #RondaTest #test11HandCantPlayIfFootWonFirstRound stamp: 'f 7/5/2021 20:21:32'!
PASSED!

!testRun: #RondaTest #test12HandWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:21:32'!
PASSED!

!testRun: #RondaTest #test13FootCantPlayIfHandWonFirstRound stamp: 'f 7/5/2021 20:21:32'!
PASSED!

!classDefinition: #RondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 20:24:32'!
TestCase subclass: #RondaTest
	instanceVariableNames: 'manoGanadora manoPerdedora manoGanaPrimerayTercera'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 20:24:34'!
TestCase subclass: #RondaTest
	instanceVariableNames: 'manoGanadora manoPerdedora manoGanaPrimerayTercera manoGanaSegunda'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:24:29' prior: 50908935 overrides: 16927572!
setUp


	manoGanadora := OrderedCollection with: CartaDeTruco anchoDeEspada with: CartaDeTruco anchoDeBasto 
	with: (CartaDeTruco bastoCon: 2).
	manoPerdedora:= OrderedCollection with: (CartaDeTruco oroCon: 4 )with: (CartaDeTruco oroCon: 5 ) 
	with: (CartaDeTruco oroCon: 6 ).
	manoGanaPrimerayTercera := OrderedCollection with: CartaDeTruco anchoDeEspada with: (CartaDeTruco bastoCon: 4) with: CartaDeTruco anchoDeBasto .
	manoGanaSegunda:= OrderedCollection with: (CartaDeTruco oroCon: 4 )with: (CartaDeTruco oroCon: 1 ) 
	with: (CartaDeTruco oroCon: 6 ).! !

!classDefinition: #RondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 20:25:40'!
TestCase subclass: #RondaTest
	instanceVariableNames: 'manoGanadora manoPerdedora manoGanaPrimerayTercera manoGanaSegunda manoGanaSegundayTercera'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:25:35' prior: 50910281 overrides: 16927572!
setUp


	manoGanadora := OrderedCollection with: CartaDeTruco anchoDeEspada with: CartaDeTruco anchoDeBasto 
	with: (CartaDeTruco bastoCon: 2).
	manoPerdedora:= OrderedCollection with: (CartaDeTruco oroCon: 4 )with: (CartaDeTruco oroCon: 5 ) 
	with: (CartaDeTruco oroCon: 6 ).
	manoGanaPrimerayTercera := OrderedCollection with: CartaDeTruco anchoDeEspada with: (CartaDeTruco bastoCon: 4) with: CartaDeTruco anchoDeBasto .
	manoGanaSegunda:= OrderedCollection with: (CartaDeTruco oroCon: 4 )with: (CartaDeTruco oroCon: 1 ) 
	with: (CartaDeTruco oroCon: 6 ).
	manoGanaSegundayTercera:= OrderedCollection with: CartaDeTruco anchoDeEspada with: CartaDeTruco anchoDeBasto with: (CartaDeTruco bastoCon: 4) . ! !

!classDefinition: #RondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 20:27:16'!
TestCase subclass: #RondaTest
	instanceVariableNames: 'manoGanadora manoPerdedora manoGanaPrimerayTercera manoGanaSegunda manoGanaSegundayTercera manoGanaPrimera'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:27:10' prior: 50910313 overrides: 16927572!
setUp


	manoGanadora := OrderedCollection with: CartaDeTruco anchoDeEspada with: CartaDeTruco anchoDeBasto 
	with: (CartaDeTruco bastoCon: 2).
	manoPerdedora:= OrderedCollection with: (CartaDeTruco oroCon: 4 )with: (CartaDeTruco oroCon: 5 ) 
	with: (CartaDeTruco oroCon: 6 ).
	manoGanaPrimerayTercera := OrderedCollection with: CartaDeTruco anchoDeEspada with: (CartaDeTruco bastoCon: 4) with: CartaDeTruco anchoDeBasto .
	manoGanaSegunda:= OrderedCollection with: (CartaDeTruco oroCon: 4 )with: (CartaDeTruco oroCon: 1 ) 
	with: (CartaDeTruco oroCon: 6 ).
	manoGanaSegundayTercera:= OrderedCollection with: CartaDeTruco anchoDeEspada with: CartaDeTruco anchoDeBasto with: (CartaDeTruco bastoCon: 4). 
	manoGanaPrimera:= OrderedCollection with: (CartaDeTruco oroCon:1 )with: (CartaDeTruco copaCon:4) with: (CartaDeTruco espadaCon: 7). ! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:28:36'!
test14FootWiningFirstandThirdEncounterReflectsOncardsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoGanaPrimerayTercera copy) yLasCartasdeLaMano: (manoGanaSegunda copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaPie.
	ronda juegaMano.
	
	self assert: ((ronda Estado) class)  equals: ((GanoRondaPie new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 1.
	
		
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:30:03' prior: 50910379!
test14FootWiningFirstandThirdEncounterReflectsOncardsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoGanaPrimerayTercera copy) yLasCartasdeLaMano: (manoGanaSegunda copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaPie.
	ronda juegaMano.
	
	self assert: ((ronda Estado) class)  equals: ((GanoSegundaMano new)class).	
	
	ronda juegaMano.
	ronda juegaPie.
	self assert: ((ronda Estado) class)  equals: ((GanoRondaPie new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 0.
	
		
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:30:06' prior: 50910397!
test14FootWiningFirstandThirdEncounterReflectsOncardsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoGanaPrimerayTercera copy) yLasCartasdeLaMano: (manoGanaSegunda copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaPie.
	ronda juegaMano.
	
	self assert: ((ronda Estado) class)  equals: ((GanoSegundaMano new)class).	
	
	
		
	! !

!testRun: #RondaTest #test14FootWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:30:10'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 20:30:10'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 20:30:10'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 20:30:10'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 20:30:10'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 20:30:10'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 20:30:10'!
PASSED!

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:30:10'!
PASSED!

!testRun: #RondaTest #test08FootWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:30:10'!
PASSED!

!testRun: #RondaTest #test09TyingReflectsOncardsAndState stamp: 'f 7/5/2021 20:30:10'!
PASSED!

!testRun: #RondaTest #test10FootWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:30:10'!
PASSED!

!testRun: #RondaTest #test11HandCantPlayIfFootWonFirstRound stamp: 'f 7/5/2021 20:30:10'!
PASSED!

!testRun: #RondaTest #test12HandWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:30:10'!
PASSED!

!testRun: #RondaTest #test13FootCantPlayIfHandWonFirstRound stamp: 'f 7/5/2021 20:30:10'!
PASSED!

!testRun: #RondaTest #test14FootWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:30:10'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:30:16' prior: 50910419!
test14FootWiningFirstandThirdEncounterReflectsOncardsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoGanaPrimerayTercera copy) yLasCartasdeLaMano: (manoGanaSegunda copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaPie.
	ronda juegaMano.
	
	self assert: ((ronda Estado) class)  equals: ((GanoSegundaMano new)class).	
	
	
	ronda juegaMano.
	ronda juegaPie.
	self assert: ((ronda Estado) class)  equals: ((GanoRondaPie new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 0.
	
		
	! !

!testRun: #RondaTest #test14FootWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:30:18'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 20:30:18'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 20:30:19'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 20:30:19'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 20:30:19'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 20:30:19'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 20:30:19'!
PASSED!

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:30:19'!
PASSED!

!testRun: #RondaTest #test08FootWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:30:19'!
PASSED!

!testRun: #RondaTest #test09TyingReflectsOncardsAndState stamp: 'f 7/5/2021 20:30:19'!
PASSED!

!testRun: #RondaTest #test10FootWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:30:19'!
PASSED!

!testRun: #RondaTest #test11HandCantPlayIfFootWonFirstRound stamp: 'f 7/5/2021 20:30:19'!
PASSED!

!testRun: #RondaTest #test12HandWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:30:19'!
PASSED!

!testRun: #RondaTest #test13FootCantPlayIfHandWonFirstRound stamp: 'f 7/5/2021 20:30:19'!
PASSED!

!testRun: #RondaTest #test14FootWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:30:19'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:30:34'!
test15FootWiningFirstandThirdEncounterReflectsOncardsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoGanaPrimerayTercera copy) yLasCartasdeLaMano: (manoGanaSegunda copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaPie.
	ronda juegaMano.
	
	self assert: ((ronda Estado) class)  equals: ((GanoSegundaMano new)class).	
	
	
	ronda juegaMano.
	ronda juegaPie.
	self assert: ((ronda Estado) class)  equals: ((GanoRondaPie new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 0.
	
		
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:31:13'!
test15FootCantPlayIfHandWonSecond
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoGanaPrimerayTercera copy) yLasCartasdeLaMano: (manoGanaSegunda copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaPie.
	ronda juegaMano.
	
	self assert: ((ronda Estado) class)  equals: ((GanoSegundaMano new)class).	
	
	
	ronda juegaMano.
	ronda juegaPie.
	self assert: ((ronda Estado) class)  equals: ((GanoRondaPie new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 0.
	
		
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:31:18'!
test16FootCantPlayIfHandWonSecond
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoGanaPrimerayTercera copy) yLasCartasdeLaMano: (manoGanaSegunda copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaPie.
	ronda juegaMano.
	
	self assert: ((ronda Estado) class)  equals: ((GanoSegundaMano new)class).	
	
	
	ronda juegaMano.
	ronda juegaPie.
	self assert: ((ronda Estado) class)  equals: ((GanoRondaPie new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 0.
	
		
	! !

!methodRemoval: RondaTest #test15FootCantPlayIfHandWonSecond stamp: 'f 7/5/2021 20:31:20'!
test15FootCantPlayIfHandWonSecond
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoGanaPrimerayTercera copy) yLasCartasdeLaMano: (manoGanaSegunda copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaPie.
	ronda juegaMano.
	
	self assert: ((ronda Estado) class)  equals: ((GanoSegundaMano new)class).	
	
	
	ronda juegaMano.
	ronda juegaPie.
	self assert: ((ronda Estado) class)  equals: ((GanoRondaPie new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 0.
	
		
	!

!methodRemoval: RondaTest #test15FootWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:31:54'!
test15FootWiningFirstandThirdEncounterReflectsOncardsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoGanaPrimerayTercera copy) yLasCartasdeLaMano: (manoGanaSegunda copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaPie.
	ronda juegaMano.
	
	self assert: ((ronda Estado) class)  equals: ((GanoSegundaMano new)class).	
	
	
	ronda juegaMano.
	ronda juegaPie.
	self assert: ((ronda Estado) class)  equals: ((GanoRondaPie new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 0.
	
		
	!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:32:23'!
test15FootCantPlayIfHandWonSecond
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoGanaPrimerayTercera copy) yLasCartasdeLaMano: (manoGanaSegunda copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaPie.
	ronda juegaMano.
	self should: [ronda juegaPie.]
	raise: Error
	withMessageText: JuegaMano errorTurnoMano.
	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 1.
		
	! !

!testRun: #RondaTest #test15FootCantPlayIfHandWonSecond stamp: 'f 7/5/2021 20:32:27'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 20:32:27'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 20:32:27'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 20:32:27'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 20:32:27'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 20:32:27'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 20:32:27'!
PASSED!

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:32:27'!
PASSED!

!testRun: #RondaTest #test08FootWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:32:27'!
PASSED!

!testRun: #RondaTest #test09TyingReflectsOncardsAndState stamp: 'f 7/5/2021 20:32:27'!
PASSED!

!testRun: #RondaTest #test10FootWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:32:27'!
PASSED!

!testRun: #RondaTest #test11HandCantPlayIfFootWonFirstRound stamp: 'f 7/5/2021 20:32:27'!
PASSED!

!testRun: #RondaTest #test12HandWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:32:27'!
PASSED!

!testRun: #RondaTest #test13FootCantPlayIfHandWonFirstRound stamp: 'f 7/5/2021 20:32:27'!
PASSED!

!testRun: #RondaTest #test14FootWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:32:27'!
PASSED!

!testRun: #RondaTest #test15FootCantPlayIfHandWonSecond stamp: 'f 7/5/2021 20:32:27'!
PASSED!

!testRun: #RondaTest #test16FootCantPlayIfHandWonSecond stamp: 'f 7/5/2021 20:32:27'!
PASSED!

!methodRemoval: RondaTest #test16FootCantPlayIfHandWonSecond stamp: 'f 7/5/2021 20:32:32'!
test16FootCantPlayIfHandWonSecond
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoGanaPrimerayTercera copy) yLasCartasdeLaMano: (manoGanaSegunda copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaPie.
	ronda juegaMano.
	
	self assert: ((ronda Estado) class)  equals: ((GanoSegundaMano new)class).	
	
	
	ronda juegaMano.
	ronda juegaPie.
	self assert: ((ronda Estado) class)  equals: ((GanoRondaPie new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 0.
	
		
	!

!testRun: #RondaTest #test15FootCantPlayIfHandWonSecond stamp: 'f 7/5/2021 20:32:35'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 20:32:35'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 20:32:35'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 20:32:35'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 20:32:35'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 20:32:35'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 20:32:35'!
PASSED!

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:32:35'!
PASSED!

!testRun: #RondaTest #test08FootWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:32:35'!
PASSED!

!testRun: #RondaTest #test09TyingReflectsOncardsAndState stamp: 'f 7/5/2021 20:32:35'!
PASSED!

!testRun: #RondaTest #test10FootWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:32:35'!
PASSED!

!testRun: #RondaTest #test11HandCantPlayIfFootWonFirstRound stamp: 'f 7/5/2021 20:32:35'!
PASSED!

!testRun: #RondaTest #test12HandWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:32:35'!
PASSED!

!testRun: #RondaTest #test13FootCantPlayIfHandWonFirstRound stamp: 'f 7/5/2021 20:32:35'!
PASSED!

!testRun: #RondaTest #test14FootWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:32:35'!
PASSED!

!testRun: #RondaTest #test15FootCantPlayIfHandWonSecond stamp: 'f 7/5/2021 20:32:35'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:34:13'!
test16HandWiningFirstandThirdEncounterReflectsOncardsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie: (manoGanaSegunda copy) yLasCartasdeLaMano: (manoGanaPrimerayTercera copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaMano.
	ronda juegaPie.
	
	
	self assert: ((ronda Estado) class)  equals: ((GanoSegundaPie new)class).	
	
	ronda juegaPie.
	ronda juegaMano.
	
	self assert: ((ronda Estado) class)  equals: ((GanoRondaMano new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 0.
	
		
	! !

!testRun: #RondaTest #test16HandWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:34:15'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 20:34:15'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 20:34:15'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 20:34:15'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 20:34:15'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 20:34:15'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 20:34:15'!
PASSED!

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:34:15'!
PASSED!

!testRun: #RondaTest #test08FootWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:34:15'!
PASSED!

!testRun: #RondaTest #test09TyingReflectsOncardsAndState stamp: 'f 7/5/2021 20:34:15'!
PASSED!

!testRun: #RondaTest #test10FootWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:34:15'!
PASSED!

!testRun: #RondaTest #test11HandCantPlayIfFootWonFirstRound stamp: 'f 7/5/2021 20:34:15'!
PASSED!

!testRun: #RondaTest #test12HandWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:34:15'!
PASSED!

!testRun: #RondaTest #test13FootCantPlayIfHandWonFirstRound stamp: 'f 7/5/2021 20:34:15'!
PASSED!

!testRun: #RondaTest #test14FootWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:34:15'!
PASSED!

!testRun: #RondaTest #test15FootCantPlayIfHandWonSecond stamp: 'f 7/5/2021 20:34:15'!
PASSED!

!testRun: #RondaTest #test16HandWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:34:15'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:35:53'!
test17HandCantPlayIfFootWonSecond
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:  (manoGanaSegunda copy) yLasCartasdeLaMano:(manoGanaPrimerayTercera copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaMano.
	ronda juegaPie.
	
	self should: [ronda juegaMano.]
	raise: Error
	withMessageText: JuegaPie errorTurnoPie.
	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 1.
		
	! !

!testRun: #RondaTest #test17HandCantPlayIfFootWonSecond stamp: 'f 7/5/2021 20:35:56'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 20:35:56'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 20:35:56'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 20:35:56'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 20:35:56'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 20:35:56'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 20:35:56'!
PASSED!

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:35:56'!
PASSED!

!testRun: #RondaTest #test08FootWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:35:56'!
PASSED!

!testRun: #RondaTest #test09TyingReflectsOncardsAndState stamp: 'f 7/5/2021 20:35:56'!
PASSED!

!testRun: #RondaTest #test10FootWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:35:56'!
PASSED!

!testRun: #RondaTest #test11HandCantPlayIfFootWonFirstRound stamp: 'f 7/5/2021 20:35:56'!
PASSED!

!testRun: #RondaTest #test12HandWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:35:56'!
PASSED!

!testRun: #RondaTest #test13FootCantPlayIfHandWonFirstRound stamp: 'f 7/5/2021 20:35:56'!
PASSED!

!testRun: #RondaTest #test14FootWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:35:56'!
PASSED!

!testRun: #RondaTest #test15FootCantPlayIfHandWonSecond stamp: 'f 7/5/2021 20:35:56'!
PASSED!

!testRun: #RondaTest #test16HandWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:35:56'!
PASSED!

!testRun: #RondaTest #test17HandCantPlayIfFootWonSecond stamp: 'f 7/5/2021 20:35:56'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:37:09'!
test18FootWiningSecondandThirdEncounterReflectsOncardsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoGanaSegundayTercera copy) yLasCartasdeLaMano: (manoGanaPrimera copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaMano.
	ronda juegaPie.

	
	self assert: ((ronda Estado) class)  equals: ((GanoSegundaPie new)class).	
	
	ronda juegaPie.
	ronda juegaMano.
	
	self assert: ((ronda Estado) class)  equals: ((GanoRondaPie new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 0.
	
		
	! !

!testRun: #RondaTest #test18FootWiningSecondandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:37:12'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 20:37:12'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 20:37:12'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 20:37:12'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 20:37:12'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 20:37:12'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 20:37:12'!
PASSED!

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:37:12'!
PASSED!

!testRun: #RondaTest #test08FootWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:37:12'!
PASSED!

!testRun: #RondaTest #test09TyingReflectsOncardsAndState stamp: 'f 7/5/2021 20:37:12'!
PASSED!

!testRun: #RondaTest #test10FootWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:37:12'!
PASSED!

!testRun: #RondaTest #test11HandCantPlayIfFootWonFirstRound stamp: 'f 7/5/2021 20:37:12'!
PASSED!

!testRun: #RondaTest #test12HandWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:37:12'!
PASSED!

!testRun: #RondaTest #test13FootCantPlayIfHandWonFirstRound stamp: 'f 7/5/2021 20:37:12'!
PASSED!

!testRun: #RondaTest #test14FootWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:37:12'!
PASSED!

!testRun: #RondaTest #test15FootCantPlayIfHandWonSecond stamp: 'f 7/5/2021 20:37:12'!
PASSED!

!testRun: #RondaTest #test16HandWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:37:12'!
PASSED!

!testRun: #RondaTest #test17HandCantPlayIfFootWonSecond stamp: 'f 7/5/2021 20:37:12'!
PASSED!

!testRun: #RondaTest #test18FootWiningSecondandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:37:12'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:38:35'!
test19HandWiningSecondandThirdEncounterReflectsOncardsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie: (manoGanaPrimera copy) yLasCartasdeLaMano: (manoGanaSegundayTercera copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaPie.
	ronda juegaMano.
	

	
	self assert: ((ronda Estado) class)  equals: ((GanoSegundaMano new)class).	
	
	ronda juegaMano.
	ronda juegaPie.
	
	self assert: ((ronda Estado) class)  equals: ((GanoRondaMano new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 0.
	
		
	! !

!testRun: #RondaTest #test19HandWiningSecondandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:38:38'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 20:38:38'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 20:38:38'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 20:38:38'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 20:38:38'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 20:38:38'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 20:38:38'!
PASSED!

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:38:38'!
PASSED!

!testRun: #RondaTest #test08FootWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:38:38'!
PASSED!

!testRun: #RondaTest #test09TyingReflectsOncardsAndState stamp: 'f 7/5/2021 20:38:38'!
PASSED!

!testRun: #RondaTest #test10FootWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:38:38'!
PASSED!

!testRun: #RondaTest #test11HandCantPlayIfFootWonFirstRound stamp: 'f 7/5/2021 20:38:38'!
PASSED!

!testRun: #RondaTest #test12HandWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:38:38'!
PASSED!

!testRun: #RondaTest #test13FootCantPlayIfHandWonFirstRound stamp: 'f 7/5/2021 20:38:38'!
PASSED!

!testRun: #RondaTest #test14FootWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:38:38'!
PASSED!

!testRun: #RondaTest #test15FootCantPlayIfHandWonSecond stamp: 'f 7/5/2021 20:38:38'!
PASSED!

!testRun: #RondaTest #test16HandWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:38:38'!
PASSED!

!testRun: #RondaTest #test17HandCantPlayIfFootWonSecond stamp: 'f 7/5/2021 20:38:38'!
PASSED!

!testRun: #RondaTest #test18FootWiningSecondandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:38:38'!
PASSED!

!testRun: #RondaTest #test19HandWiningSecondandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:38:38'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:40:22'!
test20HandWinningIsShownCorrectly
	|ronda|
	ronda:=Ronda initconLasCartasdelPie: (manoGanaPrimera copy) yLasCartasdeLaMano: (manoGanaSegundayTercera copy).
	ronda juegaMano.
	ronda juegaPie.
	
	ronda juegaPie.
	ronda juegaMano.
	
	ronda juegaMano.
	ronda juegaPie.
	
	self assert: (ronda Ganador )  equals: ('Mano').	
	
	
		
	! !

!testRun: #RondaTest #test20HandWinningIsShownCorrectly stamp: 'f 7/5/2021 20:40:24'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 20:40:24'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 20:40:24'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 20:40:24'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 20:40:24'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 20:40:24'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 20:40:24'!
PASSED!

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:40:24'!
PASSED!

!testRun: #RondaTest #test08FootWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:40:24'!
PASSED!

!testRun: #RondaTest #test09TyingReflectsOncardsAndState stamp: 'f 7/5/2021 20:40:24'!
PASSED!

!testRun: #RondaTest #test10FootWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:40:24'!
PASSED!

!testRun: #RondaTest #test11HandCantPlayIfFootWonFirstRound stamp: 'f 7/5/2021 20:40:24'!
PASSED!

!testRun: #RondaTest #test12HandWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:40:24'!
PASSED!

!testRun: #RondaTest #test13FootCantPlayIfHandWonFirstRound stamp: 'f 7/5/2021 20:40:24'!
PASSED!

!testRun: #RondaTest #test14FootWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:40:24'!
PASSED!

!testRun: #RondaTest #test15FootCantPlayIfHandWonSecond stamp: 'f 7/5/2021 20:40:24'!
PASSED!

!testRun: #RondaTest #test16HandWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:40:24'!
PASSED!

!testRun: #RondaTest #test17HandCantPlayIfFootWonSecond stamp: 'f 7/5/2021 20:40:24'!
PASSED!

!testRun: #RondaTest #test18FootWiningSecondandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:40:24'!
PASSED!

!testRun: #RondaTest #test19HandWiningSecondandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:40:24'!
PASSED!

!testRun: #RondaTest #test20HandWinningIsShownCorrectly stamp: 'f 7/5/2021 20:40:24'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:40:33'!
test20FootWinningIsShownCorrectly
	|ronda|
	ronda:=Ronda initconLasCartasdelPie: (manoGanaPrimera copy) yLasCartasdeLaMano: (manoGanaSegundayTercera copy).
	ronda juegaMano.
	ronda juegaPie.
	
	ronda juegaPie.
	ronda juegaMano.
	
	ronda juegaMano.
	ronda juegaPie.
	
	self assert: (ronda Ganador )  equals: ('Mano').	
	
	
		
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:41:25'!
test21FootWinningIsShownCorrectly
	|ronda|
	ronda:=Ronda initconLasCartasdelPie: (manoGanaSegundayTercera copy)  yLasCartasdeLaMano:  (manoGanaPrimera copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaMano.
	ronda juegaPie.
	
	ronda juegaPie.
	ronda juegaMano.
	
	
	self assert: (ronda Ganador )  equals: ('Pie').	
	
	
		
	! !

!testRun: #RondaTest #test21FootWinningIsShownCorrectly stamp: 'f 7/5/2021 20:41:27'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 20:41:27'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 20:41:27'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 20:41:27'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 20:41:27'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 20:41:27'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 20:41:27'!
PASSED!

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:41:27'!
PASSED!

!testRun: #RondaTest #test08FootWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:41:27'!
PASSED!

!testRun: #RondaTest #test09TyingReflectsOncardsAndState stamp: 'f 7/5/2021 20:41:27'!
PASSED!

!testRun: #RondaTest #test10FootWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:41:27'!
PASSED!

!testRun: #RondaTest #test11HandCantPlayIfFootWonFirstRound stamp: 'f 7/5/2021 20:41:27'!
PASSED!

!testRun: #RondaTest #test12HandWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:41:27'!
PASSED!

!testRun: #RondaTest #test13FootCantPlayIfHandWonFirstRound stamp: 'f 7/5/2021 20:41:27'!
PASSED!

!testRun: #RondaTest #test14FootWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:41:27'!
PASSED!

!testRun: #RondaTest #test15FootCantPlayIfHandWonSecond stamp: 'f 7/5/2021 20:41:27'!
PASSED!

!testRun: #RondaTest #test16HandWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:41:27'!
PASSED!

!testRun: #RondaTest #test17HandCantPlayIfFootWonSecond stamp: 'f 7/5/2021 20:41:27'!
PASSED!

!testRun: #RondaTest #test18FootWiningSecondandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:41:27'!
PASSED!

!testRun: #RondaTest #test19HandWiningSecondandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:41:27'!
PASSED!

!testRun: #RondaTest #test20FootWinningIsShownCorrectly stamp: 'f 7/5/2021 20:41:27'!
PASSED!

!testRun: #RondaTest #test20HandWinningIsShownCorrectly stamp: 'f 7/5/2021 20:41:27'!
PASSED!

!testRun: #RondaTest #test21FootWinningIsShownCorrectly stamp: 'f 7/5/2021 20:41:27'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:42:06'!
test22cantPlayAfterFinishingRound
	|ronda|
	ronda:=Ronda initconLasCartasdelPie: (manoGanaSegundayTercera copy)  yLasCartasdeLaMano:  (manoGanaPrimera copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaMano.
	ronda juegaPie.
	
	ronda juegaPie.
	ronda juegaMano.
	
	
	self assert: (ronda Ganador )  equals: ('Pie').	
	
	
		
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:44:08' prior: 50911305!
test22cantPlayAfterFinishingRound
	|ronda|
	ronda:=Ronda initconLasCartasdelPie: (manoGanaSegundayTercera copy)  yLasCartasdeLaMano:  (manoGanaPrimera copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaMano.
	ronda juegaPie.
	
	ronda juegaPie.
	ronda juegaMano.
	
	
	self should: [ronda juegaPie]
	raise: Error
	withMessageText: GanoRondaPie RondaYaTermino.
	
	
		
	! !

!testRun: #RondaTest #test22cantPlayAfterFinishingRound stamp: 'f 7/5/2021 20:44:11'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 20:44:11'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 20:44:11'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 20:44:11'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 20:44:11'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 20:44:11'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 20:44:11'!
PASSED!

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:44:11'!
PASSED!

!testRun: #RondaTest #test08FootWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:44:11'!
PASSED!

!testRun: #RondaTest #test09TyingReflectsOncardsAndState stamp: 'f 7/5/2021 20:44:11'!
PASSED!

!testRun: #RondaTest #test10FootWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:44:11'!
PASSED!

!testRun: #RondaTest #test11HandCantPlayIfFootWonFirstRound stamp: 'f 7/5/2021 20:44:11'!
PASSED!

!testRun: #RondaTest #test12HandWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:44:11'!
PASSED!

!testRun: #RondaTest #test13FootCantPlayIfHandWonFirstRound stamp: 'f 7/5/2021 20:44:11'!
PASSED!

!testRun: #RondaTest #test14FootWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:44:11'!
PASSED!

!testRun: #RondaTest #test15FootCantPlayIfHandWonSecond stamp: 'f 7/5/2021 20:44:11'!
PASSED!

!testRun: #RondaTest #test16HandWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:44:11'!
PASSED!

!testRun: #RondaTest #test17HandCantPlayIfFootWonSecond stamp: 'f 7/5/2021 20:44:11'!
PASSED!

!testRun: #RondaTest #test18FootWiningSecondandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:44:11'!
PASSED!

!testRun: #RondaTest #test19HandWiningSecondandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:44:11'!
PASSED!

!testRun: #RondaTest #test20FootWinningIsShownCorrectly stamp: 'f 7/5/2021 20:44:11'!
PASSED!

!testRun: #RondaTest #test20HandWinningIsShownCorrectly stamp: 'f 7/5/2021 20:44:11'!
PASSED!

!testRun: #RondaTest #test21FootWinningIsShownCorrectly stamp: 'f 7/5/2021 20:44:11'!
PASSED!

!testRun: #RondaTest #test22cantPlayAfterFinishingRound stamp: 'f 7/5/2021 20:44:11'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:44:23' prior: 50911319!
test22cantPlayAfterFinishingRound
	|ronda|
	ronda:=Ronda initconLasCartasdelPie: (manoGanaSegundayTercera copy)  yLasCartasdeLaMano:  (manoGanaPrimera copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaMano.
	ronda juegaPie.
	
	ronda juegaPie.
	ronda juegaMano.
	
	
	self should: [ronda juegaPie]
	raise: Error
	withMessageText: GanoRondaPie RondaYaTermino.
	
		self should: [ronda juegaMano]
	raise: Error
	withMessageText: GanoRondaPie RondaYaTermino.
	
	
		
	! !

!testRun: #RondaTest #test22cantPlayAfterFinishingRound stamp: 'f 7/5/2021 20:44:25'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 20:44:25'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 20:44:25'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 20:44:25'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 20:44:25'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 20:44:25'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 20:44:25'!
PASSED!

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:44:25'!
PASSED!

!testRun: #RondaTest #test08FootWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:44:25'!
PASSED!

!testRun: #RondaTest #test09TyingReflectsOncardsAndState stamp: 'f 7/5/2021 20:44:25'!
PASSED!

!testRun: #RondaTest #test10FootWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:44:25'!
PASSED!

!testRun: #RondaTest #test11HandCantPlayIfFootWonFirstRound stamp: 'f 7/5/2021 20:44:25'!
PASSED!

!testRun: #RondaTest #test12HandWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:44:25'!
PASSED!

!testRun: #RondaTest #test13FootCantPlayIfHandWonFirstRound stamp: 'f 7/5/2021 20:44:25'!
PASSED!

!testRun: #RondaTest #test14FootWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:44:25'!
PASSED!

!testRun: #RondaTest #test15FootCantPlayIfHandWonSecond stamp: 'f 7/5/2021 20:44:25'!
PASSED!

!testRun: #RondaTest #test16HandWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:44:25'!
PASSED!

!testRun: #RondaTest #test17HandCantPlayIfFootWonSecond stamp: 'f 7/5/2021 20:44:25'!
PASSED!

!testRun: #RondaTest #test18FootWiningSecondandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:44:25'!
PASSED!

!testRun: #RondaTest #test19HandWiningSecondandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:44:25'!
PASSED!

!testRun: #RondaTest #test20FootWinningIsShownCorrectly stamp: 'f 7/5/2021 20:44:25'!
PASSED!

!testRun: #RondaTest #test20HandWinningIsShownCorrectly stamp: 'f 7/5/2021 20:44:25'!
PASSED!

!testRun: #RondaTest #test21FootWinningIsShownCorrectly stamp: 'f 7/5/2021 20:44:25'!
PASSED!

!testRun: #RondaTest #test22cantPlayAfterFinishingRound stamp: 'f 7/5/2021 20:44:25'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:44:46' prior: 50911412!
test22cantPlayAfterFinishingRound
	|ronda|
	ronda:=Ronda initconLasCartasdelPie: (manoGanaSegundayTercera copy)  yLasCartasdeLaMano:  (manoGanaPrimera copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaMano.
	ronda juegaPie.
	
	ronda juegaPie.
	ronda juegaMano.
	
	
	self should: [ronda juegaPie]
	raise: Error
	withMessageText: GanoRondaPie RondaYaTermino.
	
		self should: [ronda juegaMano]
	raise: Error
	withMessageText: GanoRondaPie RondaYaTermino.
	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 0.
	
	
		
	! !

!testRun: #RondaTest #test22cantPlayAfterFinishingRound stamp: 'f 7/5/2021 20:44:47'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 20:44:47'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 20:44:47'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 20:44:47'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 20:44:47'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 20:44:47'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 20:44:47'!
PASSED!

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:44:47'!
PASSED!

!testRun: #RondaTest #test08FootWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:44:47'!
PASSED!

!testRun: #RondaTest #test09TyingReflectsOncardsAndState stamp: 'f 7/5/2021 20:44:47'!
PASSED!

!testRun: #RondaTest #test10FootWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:44:47'!
PASSED!

!testRun: #RondaTest #test11HandCantPlayIfFootWonFirstRound stamp: 'f 7/5/2021 20:44:47'!
PASSED!

!testRun: #RondaTest #test12HandWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:44:47'!
PASSED!

!testRun: #RondaTest #test13FootCantPlayIfHandWonFirstRound stamp: 'f 7/5/2021 20:44:47'!
PASSED!

!testRun: #RondaTest #test14FootWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:44:47'!
PASSED!

!testRun: #RondaTest #test15FootCantPlayIfHandWonSecond stamp: 'f 7/5/2021 20:44:47'!
PASSED!

!testRun: #RondaTest #test16HandWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:44:47'!
PASSED!

!testRun: #RondaTest #test17HandCantPlayIfFootWonSecond stamp: 'f 7/5/2021 20:44:47'!
PASSED!

!testRun: #RondaTest #test18FootWiningSecondandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:44:47'!
PASSED!

!testRun: #RondaTest #test19HandWiningSecondandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:44:47'!
PASSED!

!testRun: #RondaTest #test20FootWinningIsShownCorrectly stamp: 'f 7/5/2021 20:44:47'!
PASSED!

!testRun: #RondaTest #test20HandWinningIsShownCorrectly stamp: 'f 7/5/2021 20:44:47'!
PASSED!

!testRun: #RondaTest #test21FootWinningIsShownCorrectly stamp: 'f 7/5/2021 20:44:47'!
PASSED!

!testRun: #RondaTest #test22cantPlayAfterFinishingRound stamp: 'f 7/5/2021 20:44:47'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 20:45:02'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 20:45:02'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 20:45:02'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 20:45:02'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 20:45:02'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 20:45:02'!
PASSED!

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:45:02'!
PASSED!

!testRun: #RondaTest #test08FootWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:45:02'!
PASSED!

!testRun: #RondaTest #test09TyingReflectsOncardsAndState stamp: 'f 7/5/2021 20:45:02'!
PASSED!

!testRun: #RondaTest #test10FootWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:45:02'!
PASSED!

!testRun: #RondaTest #test11HandCantPlayIfFootWonFirstRound stamp: 'f 7/5/2021 20:45:02'!
PASSED!

!testRun: #RondaTest #test12HandWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:45:02'!
PASSED!

!testRun: #RondaTest #test13FootCantPlayIfHandWonFirstRound stamp: 'f 7/5/2021 20:45:02'!
PASSED!

!testRun: #RondaTest #test14FootWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:45:02'!
PASSED!

!testRun: #RondaTest #test15FootCantPlayIfHandWonSecond stamp: 'f 7/5/2021 20:45:02'!
PASSED!

!testRun: #RondaTest #test16HandWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:45:02'!
PASSED!

!testRun: #RondaTest #test17HandCantPlayIfFootWonSecond stamp: 'f 7/5/2021 20:45:02'!
PASSED!

!testRun: #RondaTest #test18FootWiningSecondandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:45:02'!
PASSED!

!testRun: #RondaTest #test19HandWiningSecondandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:45:02'!
PASSED!

!testRun: #RondaTest #test20FootWinningIsShownCorrectly stamp: 'f 7/5/2021 20:45:02'!
PASSED!

!testRun: #RondaTest #test20HandWinningIsShownCorrectly stamp: 'f 7/5/2021 20:45:02'!
PASSED!

!testRun: #RondaTest #test21FootWinningIsShownCorrectly stamp: 'f 7/5/2021 20:45:02'!
PASSED!

!testRun: #RondaTest #test22cantPlayAfterFinishingRound stamp: 'f 7/5/2021 20:45:02'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 20:45:10'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 20:45:10'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 20:45:10'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 20:45:10'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 20:45:10'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 20:45:10'!
PASSED!

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:45:10'!
PASSED!

!testRun: #RondaTest #test08FootWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:45:10'!
PASSED!

!testRun: #RondaTest #test09TyingReflectsOncardsAndState stamp: 'f 7/5/2021 20:45:10'!
PASSED!

!testRun: #RondaTest #test10FootWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:45:10'!
PASSED!

!testRun: #RondaTest #test11HandCantPlayIfFootWonFirstRound stamp: 'f 7/5/2021 20:45:10'!
PASSED!

!testRun: #RondaTest #test12HandWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:45:10'!
PASSED!

!testRun: #RondaTest #test13FootCantPlayIfHandWonFirstRound stamp: 'f 7/5/2021 20:45:10'!
PASSED!

!testRun: #RondaTest #test14FootWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:45:10'!
PASSED!

!testRun: #RondaTest #test15FootCantPlayIfHandWonSecond stamp: 'f 7/5/2021 20:45:10'!
PASSED!

!testRun: #RondaTest #test16HandWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:45:10'!
PASSED!

!testRun: #RondaTest #test17HandCantPlayIfFootWonSecond stamp: 'f 7/5/2021 20:45:10'!
PASSED!

!testRun: #RondaTest #test18FootWiningSecondandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:45:10'!
PASSED!

!testRun: #RondaTest #test19HandWiningSecondandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:45:10'!
PASSED!

!testRun: #RondaTest #test20FootWinningIsShownCorrectly stamp: 'f 7/5/2021 20:45:10'!
PASSED!

!testRun: #RondaTest #test20HandWinningIsShownCorrectly stamp: 'f 7/5/2021 20:45:10'!
PASSED!

!testRun: #RondaTest #test21FootWinningIsShownCorrectly stamp: 'f 7/5/2021 20:45:10'!
PASSED!

!testRun: #RondaTest #test22cantPlayAfterFinishingRound stamp: 'f 7/5/2021 20:45:10'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:45:57'!
test23CantAskForAWinnerBeforeEndingRound
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoGanadora copy) yLasCartasdeLaMano: (manoPerdedora copy).
	ronda juegaMano.
	ronda juegaPie.
	

	self assert: ((ronda Estado) class)  equals: ((GanoPrimeraPie new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 2.
	
		
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:47:24' prior: 50911757!
test23CantAskForAWinnerBeforeEndingRound
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoGanadora copy) yLasCartasdeLaMano: (manoPerdedora copy).
	ronda juegaMano.
	ronda juegaPie.
	

	self should: [ronda Ganador ]
	raise: Error
	withMessageText: EstadoDelaRonda rondaSigueEnJuego.
	
		
	! !

!testRun: #RondaTest #test23CantAskForAWinnerBeforeEndingRound stamp: 'f 7/5/2021 20:47:26'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 20:47:26'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 20:47:26'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 20:47:26'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 20:47:26'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 20:47:26'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 20:47:26'!
PASSED!

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:47:26'!
PASSED!

!testRun: #RondaTest #test08FootWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:47:26'!
PASSED!

!testRun: #RondaTest #test09TyingReflectsOncardsAndState stamp: 'f 7/5/2021 20:47:26'!
PASSED!

!testRun: #RondaTest #test10FootWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:47:26'!
PASSED!

!testRun: #RondaTest #test11HandCantPlayIfFootWonFirstRound stamp: 'f 7/5/2021 20:47:26'!
PASSED!

!testRun: #RondaTest #test12HandWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:47:26'!
PASSED!

!testRun: #RondaTest #test13FootCantPlayIfHandWonFirstRound stamp: 'f 7/5/2021 20:47:26'!
PASSED!

!testRun: #RondaTest #test14FootWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:47:26'!
PASSED!

!testRun: #RondaTest #test15FootCantPlayIfHandWonSecond stamp: 'f 7/5/2021 20:47:26'!
PASSED!

!testRun: #RondaTest #test16HandWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:47:26'!
PASSED!

!testRun: #RondaTest #test17HandCantPlayIfFootWonSecond stamp: 'f 7/5/2021 20:47:26'!
PASSED!

!testRun: #RondaTest #test18FootWiningSecondandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:47:26'!
PASSED!

!testRun: #RondaTest #test19HandWiningSecondandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:47:26'!
PASSED!

!testRun: #RondaTest #test20FootWinningIsShownCorrectly stamp: 'f 7/5/2021 20:47:26'!
PASSED!

!testRun: #RondaTest #test20HandWinningIsShownCorrectly stamp: 'f 7/5/2021 20:47:26'!
PASSED!

!testRun: #RondaTest #test21FootWinningIsShownCorrectly stamp: 'f 7/5/2021 20:47:26'!
PASSED!

!testRun: #RondaTest #test22cantPlayAfterFinishingRound stamp: 'f 7/5/2021 20:47:26'!
PASSED!

!testRun: #RondaTest #test23CantAskForAWinnerBeforeEndingRound stamp: 'f 7/5/2021 20:47:26'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:49:07'!
test24FootWinningAfterTyingReflectOnCardAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoPerdedora copy) yLasCartasdeLaMano: (manoPerdedora copy).
	ronda juegaMano.
	ronda juegaPie.
	

	self assert: ((ronda Estado) class)  equals: ((Empardaron new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 2.
	
		
	! !

!classDefinition: #RondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 20:51:40'!
TestCase subclass: #RondaTest
	instanceVariableNames: 'manoGanadora manoPerdedora manoGanaPrimerayTercera manoGanaSegunda manoGanaSegundayTercera manoGanaPrimera empardaPrimeraGanaSegunda'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'f 7/5/2021 20:51:42'!
TestCase subclass: #RondaTest
	instanceVariableNames: 'manoGanadora manoPerdedora manoGanaPrimerayTercera manoGanaSegunda manoGanaSegundayTercera manoGanaPrimera empardaPrimeraGanaSegunda empardaPrimeraPierdeSegunda'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:51:37' prior: 50910350 overrides: 16927572!
setUp


	manoGanadora := OrderedCollection with: CartaDeTruco anchoDeEspada with: CartaDeTruco anchoDeBasto 
	with: (CartaDeTruco bastoCon: 2).
	manoPerdedora:= OrderedCollection with: (CartaDeTruco oroCon: 4 )with: (CartaDeTruco oroCon: 5 ) 
	with: (CartaDeTruco oroCon: 6 ).
	manoGanaPrimerayTercera := OrderedCollection with: CartaDeTruco anchoDeEspada with: (CartaDeTruco bastoCon: 4) with: CartaDeTruco anchoDeBasto .
	manoGanaSegunda:= OrderedCollection with: (CartaDeTruco oroCon: 4 )with: (CartaDeTruco oroCon: 1 ) 
	with: (CartaDeTruco oroCon: 6 ).
	manoGanaSegundayTercera:= OrderedCollection with: CartaDeTruco anchoDeEspada with: CartaDeTruco anchoDeBasto with: (CartaDeTruco bastoCon: 4). 
	manoGanaPrimera:= OrderedCollection with: (CartaDeTruco oroCon:1 )with: (CartaDeTruco copaCon:4) with: (CartaDeTruco espadaCon: 7). 
	empardaPrimeraGanaSegunda:= OrderedCollection with: (CartaDeTruco oroCon:1 )with: (CartaDeTruco anchoDeBasto ) with: (CartaDeTruco bastoCon: 7). 
	empardaPrimeraPierdeSegunda:= OrderedCollection with: (CartaDeTruco bastoCon: 5)with: (CartaDeTruco bastoCon: 4) with: (CartaDeTruco copaCon: 7). ! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:52:34' prior: 50911866!
test24FootWinningAfterTyingReflectOnCardAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(empardaPrimeraGanaSegunda copy) yLasCartasdeLaMano: (empardaPrimeraPierdeSegunda copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaMano.
	ronda juegaPie.
	
	

	self assert: ((ronda Estado) class)  equals: ((GanoRondaPie new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 1.
	
		
	! !

!testRun: #RondaTest #test24FootWinningAfterTyingReflectOnCardAndState stamp: 'f 7/5/2021 20:52:37'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 20:52:37'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 20:52:37'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 20:52:37'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 20:52:37'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 20:52:37'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 20:52:37'!
PASSED!

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:52:37'!
PASSED!

!testRun: #RondaTest #test08FootWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:52:37'!
PASSED!

!testRun: #RondaTest #test09TyingReflectsOncardsAndState stamp: 'f 7/5/2021 20:52:37'!
PASSED!

!testRun: #RondaTest #test10FootWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:52:37'!
PASSED!

!testRun: #RondaTest #test11HandCantPlayIfFootWonFirstRound stamp: 'f 7/5/2021 20:52:37'!
PASSED!

!testRun: #RondaTest #test12HandWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:52:37'!
PASSED!

!testRun: #RondaTest #test13FootCantPlayIfHandWonFirstRound stamp: 'f 7/5/2021 20:52:37'!
PASSED!

!testRun: #RondaTest #test14FootWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:52:37'!
PASSED!

!testRun: #RondaTest #test15FootCantPlayIfHandWonSecond stamp: 'f 7/5/2021 20:52:37'!
PASSED!

!testRun: #RondaTest #test16HandWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:52:37'!
PASSED!

!testRun: #RondaTest #test17HandCantPlayIfFootWonSecond stamp: 'f 7/5/2021 20:52:37'!
PASSED!

!testRun: #RondaTest #test18FootWiningSecondandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:52:37'!
PASSED!

!testRun: #RondaTest #test19HandWiningSecondandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:52:37'!
PASSED!

!testRun: #RondaTest #test20FootWinningIsShownCorrectly stamp: 'f 7/5/2021 20:52:37'!
PASSED!

!testRun: #RondaTest #test20HandWinningIsShownCorrectly stamp: 'f 7/5/2021 20:52:37'!
PASSED!

!testRun: #RondaTest #test21FootWinningIsShownCorrectly stamp: 'f 7/5/2021 20:52:37'!
PASSED!

!testRun: #RondaTest #test22cantPlayAfterFinishingRound stamp: 'f 7/5/2021 20:52:37'!
PASSED!

!testRun: #RondaTest #test23CantAskForAWinnerBeforeEndingRound stamp: 'f 7/5/2021 20:52:37'!
PASSED!

!testRun: #RondaTest #test24FootWinningAfterTyingReflectOnCardAndState stamp: 'f 7/5/2021 20:52:37'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:54:43'!
test25FootCantPlayFirstAfterTying
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(empardaPrimeraGanaSegunda copy) yLasCartasdeLaMano: (empardaPrimeraPierdeSegunda copy).
	ronda juegaMano.
	ronda juegaPie.
	self should:[ronda juegaPie]
	raise: Error
	withMessageText: JuegaMano Tur.
	
	

	self assert: ((ronda Estado) class)  equals: ((GanoRondaPie new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 1.
	
		
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:55:25' prior: 50912048!
test25FootCantPlayFirstAfterTying
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(empardaPrimeraGanaSegunda copy) yLasCartasdeLaMano: (empardaPrimeraPierdeSegunda copy).
	ronda juegaMano.
	ronda juegaPie.
	self should:[ronda juegaPie]
	raise: Error
	withMessageText: JuegaMano errorTurnoMano.
	
	

	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 2.
	
		
	! !

!testRun: #RondaTest #test25FootCantPlayFirstAfterTying stamp: 'f 7/5/2021 20:55:26'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 20:55:26'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 20:55:26'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 20:55:26'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 20:55:26'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 20:55:26'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 20:55:26'!
PASSED!

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:55:26'!
PASSED!

!testRun: #RondaTest #test08FootWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:55:26'!
PASSED!

!testRun: #RondaTest #test09TyingReflectsOncardsAndState stamp: 'f 7/5/2021 20:55:26'!
PASSED!

!testRun: #RondaTest #test10FootWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:55:26'!
PASSED!

!testRun: #RondaTest #test11HandCantPlayIfFootWonFirstRound stamp: 'f 7/5/2021 20:55:26'!
PASSED!

!testRun: #RondaTest #test12HandWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:55:26'!
PASSED!

!testRun: #RondaTest #test13FootCantPlayIfHandWonFirstRound stamp: 'f 7/5/2021 20:55:26'!
PASSED!

!testRun: #RondaTest #test14FootWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:55:26'!
PASSED!

!testRun: #RondaTest #test15FootCantPlayIfHandWonSecond stamp: 'f 7/5/2021 20:55:26'!
PASSED!

!testRun: #RondaTest #test16HandWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:55:26'!
PASSED!

!testRun: #RondaTest #test17HandCantPlayIfFootWonSecond stamp: 'f 7/5/2021 20:55:26'!
PASSED!

!testRun: #RondaTest #test18FootWiningSecondandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:55:26'!
PASSED!

!testRun: #RondaTest #test19HandWiningSecondandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:55:26'!
PASSED!

!testRun: #RondaTest #test20FootWinningIsShownCorrectly stamp: 'f 7/5/2021 20:55:26'!
PASSED!

!testRun: #RondaTest #test20HandWinningIsShownCorrectly stamp: 'f 7/5/2021 20:55:26'!
PASSED!

!testRun: #RondaTest #test21FootWinningIsShownCorrectly stamp: 'f 7/5/2021 20:55:26'!
PASSED!

!testRun: #RondaTest #test22cantPlayAfterFinishingRound stamp: 'f 7/5/2021 20:55:26'!
PASSED!

!testRun: #RondaTest #test23CantAskForAWinnerBeforeEndingRound stamp: 'f 7/5/2021 20:55:26'!
PASSED!

!testRun: #RondaTest #test24FootWinningAfterTyingReflectOnCardAndState stamp: 'f 7/5/2021 20:55:26'!
PASSED!

!testRun: #RondaTest #test25FootCantPlayFirstAfterTying stamp: 'f 7/5/2021 20:55:26'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:55:54'!
test2CantPlayAfterTying
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(empardaPrimeraGanaSegunda copy) yLasCartasdeLaMano: (empardaPrimeraPierdeSegunda copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaMano.
	ronda juegaPie.
	
	

	self assert: ((ronda Estado) class)  equals: ((GanoRondaPie new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 1.
	
		
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:55:57'!
test24CantPlayAfterTying
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(empardaPrimeraGanaSegunda copy) yLasCartasdeLaMano: (empardaPrimeraPierdeSegunda copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaMano.
	ronda juegaPie.
	
	

	self assert: ((ronda Estado) class)  equals: ((GanoRondaPie new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 1.
	
		
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:56:01'!
test26CantPlayAfterTying
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(empardaPrimeraGanaSegunda copy) yLasCartasdeLaMano: (empardaPrimeraPierdeSegunda copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaMano.
	ronda juegaPie.
	
	

	self assert: ((ronda Estado) class)  equals: ((GanoRondaPie new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 1.
	
		
	! !

!methodRemoval: RondaTest #test24CantPlayAfterTying stamp: 'f 7/5/2021 20:56:04'!
test24CantPlayAfterTying
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(empardaPrimeraGanaSegunda copy) yLasCartasdeLaMano: (empardaPrimeraPierdeSegunda copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaMano.
	ronda juegaPie.
	
	

	self assert: ((ronda Estado) class)  equals: ((GanoRondaPie new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 1.
	
		
	!

!methodRemoval: RondaTest #test2CantPlayAfterTying stamp: 'f 7/5/2021 20:56:06'!
test2CantPlayAfterTying
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(empardaPrimeraGanaSegunda copy) yLasCartasdeLaMano: (empardaPrimeraPierdeSegunda copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaMano.
	ronda juegaPie.
	
	

	self assert: ((ronda Estado) class)  equals: ((GanoRondaPie new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 1.
	
		
	!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:56:49'!
test26CantPlayAfterTyingandFinishingGame
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(empardaPrimeraGanaSegunda copy) yLasCartasdeLaMano: (empardaPrimeraPierdeSegunda copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaMano.
	ronda juegaPie.
	
	
	
		
	! !

!methodRemoval: RondaTest #test26CantPlayAfterTying stamp: 'f 7/5/2021 20:57:04'!
test26CantPlayAfterTying
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(empardaPrimeraGanaSegunda copy) yLasCartasdeLaMano: (empardaPrimeraPierdeSegunda copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaMano.
	ronda juegaPie.
	
	

	self assert: ((ronda Estado) class)  equals: ((GanoRondaPie new)class).	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 1.
	
		
	!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 20:57:15' prior: 50912255!
test26CantPlayAfterTyingandFinishingGame
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(empardaPrimeraGanaSegunda copy) yLasCartasdeLaMano: (empardaPrimeraPierdeSegunda copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaMano.
	ronda juegaPie.
	
	self should: [ronda juegaPie]
	raise: Error
	withMessageText: GanoRondaPie RondaYaTermino.
	
		self should: [ronda juegaMano]
	raise: Error
	withMessageText: GanoRondaPie RondaYaTermino.
	
	
	
		
	! !

!testRun: #RondaTest #test26CantPlayAfterTyingandFinishingGame stamp: 'f 7/5/2021 20:57:21'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 20:57:21'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 20:57:21'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 20:57:21'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 20:57:21'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 20:57:21'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 20:57:21'!
PASSED!

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:57:21'!
PASSED!

!testRun: #RondaTest #test08FootWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:57:21'!
PASSED!

!testRun: #RondaTest #test09TyingReflectsOncardsAndState stamp: 'f 7/5/2021 20:57:21'!
PASSED!

!testRun: #RondaTest #test10FootWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:57:21'!
PASSED!

!testRun: #RondaTest #test11HandCantPlayIfFootWonFirstRound stamp: 'f 7/5/2021 20:57:21'!
PASSED!

!testRun: #RondaTest #test12HandWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:57:21'!
PASSED!

!testRun: #RondaTest #test13FootCantPlayIfHandWonFirstRound stamp: 'f 7/5/2021 20:57:21'!
PASSED!

!testRun: #RondaTest #test14FootWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:57:21'!
PASSED!

!testRun: #RondaTest #test15FootCantPlayIfHandWonSecond stamp: 'f 7/5/2021 20:57:21'!
PASSED!

!testRun: #RondaTest #test16HandWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:57:21'!
PASSED!

!testRun: #RondaTest #test17HandCantPlayIfFootWonSecond stamp: 'f 7/5/2021 20:57:21'!
PASSED!

!testRun: #RondaTest #test18FootWiningSecondandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:57:21'!
PASSED!

!testRun: #RondaTest #test19HandWiningSecondandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 20:57:21'!
PASSED!

!testRun: #RondaTest #test20FootWinningIsShownCorrectly stamp: 'f 7/5/2021 20:57:21'!
PASSED!

!testRun: #RondaTest #test20HandWinningIsShownCorrectly stamp: 'f 7/5/2021 20:57:21'!
PASSED!

!testRun: #RondaTest #test21FootWinningIsShownCorrectly stamp: 'f 7/5/2021 20:57:21'!
PASSED!

!testRun: #RondaTest #test22cantPlayAfterFinishingRound stamp: 'f 7/5/2021 20:57:21'!
PASSED!

!testRun: #RondaTest #test23CantAskForAWinnerBeforeEndingRound stamp: 'f 7/5/2021 20:57:21'!
PASSED!

!testRun: #RondaTest #test24FootWinningAfterTyingReflectOnCardAndState stamp: 'f 7/5/2021 20:57:21'!
PASSED!

!testRun: #RondaTest #test25FootCantPlayFirstAfterTying stamp: 'f 7/5/2021 20:57:21'!
PASSED!

!testRun: #RondaTest #test26CantPlayAfterTyingandFinishingGame stamp: 'f 7/5/2021 20:57:21'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 21:09:34'!
test27PlayerDoesntHaveCardAfterUsingIt
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(empardaPrimeraGanaSegunda copy) yLasCartasdeLaMano: (empardaPrimeraPierdeSegunda copy).
	ronda juegaMano.
	
	
	
	
	
		
	! !
!Ronda methodsFor: 'atributos' stamp: 'f 7/5/2021 21:11:44'!
cartadelPieEnElEncuentroActual
	
	^estado cartadelPie
	! !
!Ronda methodsFor: 'atributos' stamp: 'f 7/5/2021 21:12:02'!
cartadeLaManoEnElEncuentroActual
	
	^estado cartadeLaManoPie
	! !
!Ronda methodsFor: 'atributos' stamp: 'f 7/5/2021 21:12:07' prior: 50912404!
cartadeLaManoEnElEncuentroActual
	
	^estado cartadeLaMano
	! !
!EstadoDelaRonda methodsFor: 'nil' stamp: 'f 7/5/2021 21:12:41'!
cartadeLaManoEnElEncuentroActual

	^cartaDeLaMano ! !
!EstadoDelaRonda methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 21:12:48'!
cartadelPieEnElEncuentroActual

	^cartaDeLaMano ! !
!EstadoDelaRonda methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 21:12:58' prior: 50912418!
cartadelPieEnElEncuentroActual

	^cartaDelPie ! !
!EstadoDelaRonda methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 21:13:31'!
cartadelaManoEnElEncuentroActual

	^cartaDeLaMano ! !

!methodRemoval: EstadoDelaRonda #cartadeLaManoEnElEncuentroActual stamp: 'f 7/5/2021 21:13:41'!
cartadeLaManoEnElEncuentroActual

	^cartaDeLaMano !
!Ronda methodsFor: 'atributos' stamp: 'f 7/5/2021 21:14:25' prior: 50912409!
cartadeLaManoEnElEncuentroActual
	
	^estado cartadeLaMano
	! !
!EstadoDelaRonda methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 21:14:46'!
cartadelPie

	^cartaDelPie ! !
!EstadoDelaRonda methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 21:14:53'!
cartadelaMano

	^cartaDeLaMano ! !

!methodRemoval: EstadoDelaRonda #cartadelaManoEnElEncuentroActual stamp: 'f 7/5/2021 21:14:55'!
cartadelaManoEnElEncuentroActual

	^cartaDeLaMano !

!methodRemoval: EstadoDelaRonda #cartadelPieEnElEncuentroActual stamp: 'f 7/5/2021 21:14:58'!
cartadelPieEnElEncuentroActual

	^cartaDelPie !
!EstadoDelaRonda methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 21:15:24'!
cartadeLaMano
	^cartaDeLaMano ! !

!methodRemoval: EstadoDelaRonda #cartadelaMano stamp: 'f 7/5/2021 21:15:28'!
cartadelaMano

	^cartaDeLaMano !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 21:16:47' prior: 50912391!
test27PlayerDoesntHaveCardAfterUsingIt
	|ronda carta manorestante|
	ronda:=Ronda initconLasCartasdelPie:(empardaPrimeraGanaSegunda copy) yLasCartasdeLaMano: (empardaPrimeraPierdeSegunda copy).
	ronda juegaMano.
	carta := ronda cartadeLaManoEnElEncuentroActual.
	manorestante := ronda .
	
	
	
	
	
	
		
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 21:17:39' prior: 50912467!
test27PlayerDoesntHaveCardAfterUsingIt
	|ronda carta manorestante|
	ronda:=Ronda initconLasCartasdelPie:(empardaPrimeraGanaSegunda copy) yLasCartasdeLaMano: (empardaPrimeraPierdeSegunda copy).
	ronda juegaMano.
	carta := ronda cartadeLaManoEnElEncuentroActual.
	manorestante := ronda cartadeLaMano.
	self deny: (manorestante includes:  carta).
	
	
	
	
	
	
		
	! !

!testRun: #RondaTest #test27PlayerDoesntHaveCardAfterUsingIt stamp: 'f 7/5/2021 21:17:42'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 21:18:17' prior: 50912480!
test27PlayerDoesntHaveCardAfterUsingIt
	|ronda carta manorestante|
	ronda:=Ronda initconLasCartasdelPie:(empardaPrimeraGanaSegunda copy) yLasCartasdeLaMano: (empardaPrimeraPierdeSegunda copy).
	ronda juegaMano.
	carta := ronda cartadeLaManoEnElEncuentroActual.
	manorestante := ronda cartasDeLaMano.
	self deny: (manorestante includes:  carta).
	
	
	
	
	
	
		
	! !

!testRun: #RondaTest #test27PlayerDoesntHaveCardAfterUsingIt stamp: 'f 7/5/2021 21:18:18'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 21:18:18'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 21:18:18'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 21:18:18'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 21:18:18'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 21:18:18'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 21:18:18'!
PASSED!

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:18:18'!
PASSED!

!testRun: #RondaTest #test08FootWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:18:18'!
PASSED!

!testRun: #RondaTest #test09TyingReflectsOncardsAndState stamp: 'f 7/5/2021 21:18:18'!
PASSED!

!testRun: #RondaTest #test10FootWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:18:18'!
PASSED!

!testRun: #RondaTest #test11HandCantPlayIfFootWonFirstRound stamp: 'f 7/5/2021 21:18:18'!
PASSED!

!testRun: #RondaTest #test12HandWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:18:18'!
PASSED!

!testRun: #RondaTest #test13FootCantPlayIfHandWonFirstRound stamp: 'f 7/5/2021 21:18:18'!
PASSED!

!testRun: #RondaTest #test14FootWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:18:18'!
PASSED!

!testRun: #RondaTest #test15FootCantPlayIfHandWonSecond stamp: 'f 7/5/2021 21:18:18'!
PASSED!

!testRun: #RondaTest #test16HandWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:18:18'!
PASSED!

!testRun: #RondaTest #test17HandCantPlayIfFootWonSecond stamp: 'f 7/5/2021 21:18:18'!
PASSED!

!testRun: #RondaTest #test18FootWiningSecondandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:18:18'!
PASSED!

!testRun: #RondaTest #test19HandWiningSecondandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:18:18'!
PASSED!

!testRun: #RondaTest #test20FootWinningIsShownCorrectly stamp: 'f 7/5/2021 21:18:18'!
PASSED!

!testRun: #RondaTest #test20HandWinningIsShownCorrectly stamp: 'f 7/5/2021 21:18:18'!
PASSED!

!testRun: #RondaTest #test21FootWinningIsShownCorrectly stamp: 'f 7/5/2021 21:18:18'!
PASSED!

!testRun: #RondaTest #test22cantPlayAfterFinishingRound stamp: 'f 7/5/2021 21:18:18'!
PASSED!

!testRun: #RondaTest #test23CantAskForAWinnerBeforeEndingRound stamp: 'f 7/5/2021 21:18:18'!
PASSED!

!testRun: #RondaTest #test24FootWinningAfterTyingReflectOnCardAndState stamp: 'f 7/5/2021 21:18:18'!
PASSED!

!testRun: #RondaTest #test25FootCantPlayFirstAfterTying stamp: 'f 7/5/2021 21:18:18'!
PASSED!

!testRun: #RondaTest #test26CantPlayAfterTyingandFinishingGame stamp: 'f 7/5/2021 21:18:18'!
PASSED!

!testRun: #RondaTest #test27PlayerDoesntHaveCardAfterUsingIt stamp: 'f 7/5/2021 21:18:18'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 21:20:43'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 21:20:43'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 21:20:43'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 21:20:43'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 21:20:43'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 21:20:43'!
PASSED!

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:20:43'!
PASSED!

!testRun: #RondaTest #test08FootWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:20:43'!
PASSED!

!testRun: #RondaTest #test09TyingReflectsOncardsAndState stamp: 'f 7/5/2021 21:20:43'!
PASSED!

!testRun: #RondaTest #test10FootWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:20:43'!
PASSED!

!testRun: #RondaTest #test11HandCantPlayIfFootWonFirstRound stamp: 'f 7/5/2021 21:20:43'!
PASSED!

!testRun: #RondaTest #test12HandWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:20:43'!
PASSED!

!testRun: #RondaTest #test13FootCantPlayIfHandWonFirstRound stamp: 'f 7/5/2021 21:20:43'!
PASSED!

!testRun: #RondaTest #test14FootWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:20:43'!
PASSED!

!testRun: #RondaTest #test15FootCantPlayIfHandWonSecond stamp: 'f 7/5/2021 21:20:43'!
PASSED!

!testRun: #RondaTest #test16HandWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:20:43'!
PASSED!

!testRun: #RondaTest #test17HandCantPlayIfFootWonSecond stamp: 'f 7/5/2021 21:20:43'!
PASSED!

!testRun: #RondaTest #test18FootWiningSecondandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:20:43'!
PASSED!

!testRun: #RondaTest #test19HandWiningSecondandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:20:43'!
PASSED!

!testRun: #RondaTest #test20FootWinningIsShownCorrectly stamp: 'f 7/5/2021 21:20:43'!
PASSED!

!testRun: #RondaTest #test20HandWinningIsShownCorrectly stamp: 'f 7/5/2021 21:20:43'!
PASSED!

!testRun: #RondaTest #test21FootWinningIsShownCorrectly stamp: 'f 7/5/2021 21:20:43'!
PASSED!

!testRun: #RondaTest #test22cantPlayAfterFinishingRound stamp: 'f 7/5/2021 21:20:43'!
PASSED!

!testRun: #RondaTest #test23CantAskForAWinnerBeforeEndingRound stamp: 'f 7/5/2021 21:20:43'!
PASSED!

!testRun: #RondaTest #test24FootWinningAfterTyingReflectOnCardAndState stamp: 'f 7/5/2021 21:20:43'!
PASSED!

!testRun: #RondaTest #test25FootCantPlayFirstAfterTying stamp: 'f 7/5/2021 21:20:43'!
PASSED!

!testRun: #RondaTest #test26CantPlayAfterTyingandFinishingGame stamp: 'f 7/5/2021 21:20:43'!
PASSED!

!testRun: #RondaTest #test27PlayerDoesntHaveCardAfterUsingIt stamp: 'f 7/5/2021 21:20:43'!
PASSED!
!RondaTest methodsFor: 'nil' stamp: 'f 7/5/2021 21:34:41'!
assertcards: aCollectionOfCards andcards: anotherCollectionOfCards haveSize: anInteger 


	self assert: (aCollectionOfCards ) size  equals: (anotherCollectionOfCards) size.
	self assert: (anotherCollectionOfCards cartasDelPie) size equals: anInteger.! !
!RondaTest methodsFor: 'tests' stamp: 'f 7/5/2021 21:35:21' prior: 50909048!
test03EachPlayerHas3CardsBeforePlaying
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:manoGanadora yLasCartasdeLaMano: manoPerdedora.
	self assertcards: (ronda cartasDelPie ) andcards:  (ronda cartasDeLaMano) haveSize: 3 .

	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 3.
		
	! !

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 21:35:24'!
ERROR!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 21:35:24'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'f 7/5/2021 21:35:49' prior: 50912696!
assertcards: aCollectionOfCards andcards: anotherCollectionOfCards haveSize: anInteger 


	self assert: (aCollectionOfCards ) size  equals: (anotherCollectionOfCards) size.
	self assert: (anotherCollectionOfCards) size equals: anInteger.! !

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 21:35:55'!
PASSED!
!RondaTest methodsFor: 'tests' stamp: 'f 7/5/2021 21:35:59' prior: 50912707!
test03EachPlayerHas3CardsBeforePlaying
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:manoGanadora yLasCartasdeLaMano: manoPerdedora.
	self assertcards: (ronda cartasDelPie ) andcards:  (ronda cartasDeLaMano) haveSize: 3 .
! !
!RondaTest methodsFor: 'tests' stamp: 'f 7/5/2021 21:36:26' prior: 50909692!
test07HandWiningFirstEncounterReflectsOncardsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoGanadora copy) yLasCartasdeLaMano: (manoPerdedora copy).
	ronda juegaMano.
	ronda juegaPie.
	

	self assert: ((ronda Estado) class)  equals: ((GanoPrimeraPie new)class).	
	self assertcards: (ronda cartasDelPie ) andcards:  (ronda cartasDeLaMano) haveSize: 2 .
	
		
	! !

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:36:30'!
PASSED!
!RondaTest methodsFor: 'tests' stamp: 'f 7/5/2021 21:36:38' prior: 50909932!
test08FootWiningFirstEncounterReflectsOncardsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoPerdedora copy) yLasCartasdeLaMano: (manoGanadora copy).
	ronda juegaMano.
	ronda juegaPie.
	

	self assert: ((ronda Estado) class)  equals: ((GanoPrimeraMano new)class).	
	self assertcards: (ronda cartasDelPie ) andcards:  (ronda cartasDeLaMano) haveSize: 2 .
		
	! !

!testRun: #RondaTest #test08FootWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:36:40'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 21:36:40'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 21:36:40'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 21:36:40'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 21:36:40'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 21:36:40'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 21:36:40'!
PASSED!

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:36:40'!
PASSED!

!testRun: #RondaTest #test08FootWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:36:40'!
PASSED!

!testRun: #RondaTest #test09TyingReflectsOncardsAndState stamp: 'f 7/5/2021 21:36:40'!
PASSED!

!testRun: #RondaTest #test10FootWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:36:40'!
PASSED!

!testRun: #RondaTest #test11HandCantPlayIfFootWonFirstRound stamp: 'f 7/5/2021 21:36:40'!
PASSED!

!testRun: #RondaTest #test12HandWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:36:40'!
PASSED!

!testRun: #RondaTest #test13FootCantPlayIfHandWonFirstRound stamp: 'f 7/5/2021 21:36:40'!
PASSED!

!testRun: #RondaTest #test14FootWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:36:40'!
PASSED!

!testRun: #RondaTest #test15FootCantPlayIfHandWonSecond stamp: 'f 7/5/2021 21:36:40'!
PASSED!

!testRun: #RondaTest #test16HandWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:36:40'!
PASSED!

!testRun: #RondaTest #test17HandCantPlayIfFootWonSecond stamp: 'f 7/5/2021 21:36:40'!
PASSED!

!testRun: #RondaTest #test18FootWiningSecondandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:36:40'!
PASSED!

!testRun: #RondaTest #test19HandWiningSecondandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:36:40'!
PASSED!

!testRun: #RondaTest #test20FootWinningIsShownCorrectly stamp: 'f 7/5/2021 21:36:40'!
PASSED!

!testRun: #RondaTest #test20HandWinningIsShownCorrectly stamp: 'f 7/5/2021 21:36:40'!
PASSED!

!testRun: #RondaTest #test21FootWinningIsShownCorrectly stamp: 'f 7/5/2021 21:36:40'!
PASSED!

!testRun: #RondaTest #test22cantPlayAfterFinishingRound stamp: 'f 7/5/2021 21:36:40'!
PASSED!

!testRun: #RondaTest #test23CantAskForAWinnerBeforeEndingRound stamp: 'f 7/5/2021 21:36:40'!
PASSED!

!testRun: #RondaTest #test24FootWinningAfterTyingReflectOnCardAndState stamp: 'f 7/5/2021 21:36:40'!
PASSED!

!testRun: #RondaTest #test25FootCantPlayFirstAfterTying stamp: 'f 7/5/2021 21:36:40'!
PASSED!

!testRun: #RondaTest #test26CantPlayAfterTyingandFinishingGame stamp: 'f 7/5/2021 21:36:40'!
PASSED!

!testRun: #RondaTest #test27PlayerDoesntHaveCardAfterUsingIt stamp: 'f 7/5/2021 21:36:40'!
PASSED!
!RondaTest methodsFor: 'tests' stamp: 'f 7/5/2021 21:36:49' prior: 50909819!
test09TyingReflectsOncardsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoPerdedora copy) yLasCartasdeLaMano: (manoPerdedora copy).
	ronda juegaMano.
	ronda juegaPie.
	

	self assert: ((ronda Estado) class)  equals: ((Empardaron new)class).	
	self assertcards: (ronda cartasDelPie ) andcards:  (ronda cartasDeLaMano) haveSize: 2.
	
		
	! !
!RondaTest methodsFor: 'tests' stamp: 'f 7/5/2021 21:36:58' prior: 50909964!
test10FootWiningFirstandSecondEncounterReflectsOncardsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoGanadora copy) yLasCartasdeLaMano: (manoPerdedora copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaPie.
	ronda juegaMano.
	
	self assert: ((ronda Estado) class)  equals: ((GanoRondaPie new)class).	
	self assertcards: (ronda cartasDelPie ) andcards:  (ronda cartasDeLaMano) haveSize: 1.
	! !
!RondaTest methodsFor: 'tests' stamp: 'f 7/5/2021 21:37:06' prior: 50910016!
test11HandCantPlayIfFootWonFirstRound
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoGanadora copy) yLasCartasdeLaMano: (manoPerdedora copy).
	ronda juegaMano.
	ronda juegaPie.
	
	self should: [ronda juegaMano.]
	raise: Error
	withMessageText: JuegaPie errorTurnoPie.
	
	self assertcards: (ronda cartasDelPie ) andcards:  (ronda cartasDeLaMano) haveSize: 2 .
	
		
	! !
!RondaTest methodsFor: 'tests' stamp: 'f 7/5/2021 21:37:13' prior: 50910069!
test12HandWiningFirstandSecondEncounterReflectsOncardsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoPerdedora copy) yLasCartasdeLaMano: (manoGanadora copy).
	ronda juegaMano.
	ronda juegaPie.
	
	ronda juegaMano.
	ronda juegaPie.
	
	self assert: ((ronda Estado) class)  equals: ((GanoRondaMano new)class).	
	self assertcards: (ronda cartasDelPie ) andcards:  (ronda cartasDeLaMano) haveSize: 1 .
	
		
	! !
!RondaTest methodsFor: 'tests' stamp: 'f 7/5/2021 21:37:21' prior: 50910188!
test13FootCantPlayIfHandWonFirstRound
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoPerdedora copy) yLasCartasdeLaMano: (manoGanadora copy).
	ronda juegaMano.
	ronda juegaPie.
	
	self should: [ronda juegaPie.]
	raise: Error
	withMessageText: JuegaMano errorTurnoMano.
	
	self assertcards: (ronda cartasDelPie ) andcards:  (ronda cartasDeLaMano) haveSize: 2 .
	
		
	! !

!testRun: #RondaTest #test13FootCantPlayIfHandWonFirstRound stamp: 'f 7/5/2021 21:37:26'!
PASSED!
!RondaTest methodsFor: 'tests' stamp: 'f 7/5/2021 21:37:39' prior: 50910482!
test14FootWiningFirstandThirdEncounterReflectsOncardsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoGanaPrimerayTercera copy) yLasCartasdeLaMano: (manoGanaSegunda copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaPie.
	ronda juegaMano.
	
	self assert: ((ronda Estado) class)  equals: ((GanoSegundaMano new)class).	
	
	
	ronda juegaMano.
	ronda juegaPie.
	self assert: ((ronda Estado) class)  equals: ((GanoRondaPie new)class).	
	self assertcards: (ronda cartasDelPie ) andcards:  (ronda cartasDeLaMano) haveSize: 0 .
		
	! !
!RondaTest methodsFor: 'tests' stamp: 'f 7/5/2021 21:37:47' prior: 50910655!
test15FootCantPlayIfHandWonSecond
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoGanaPrimerayTercera copy) yLasCartasdeLaMano: (manoGanaSegunda copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaPie.
	ronda juegaMano.
	self should: [ronda juegaPie.]
	raise: Error
	withMessageText: JuegaMano errorTurnoMano.
	
	self assertcards: (ronda cartasDelPie ) andcards:  (ronda cartasDeLaMano) haveSize: 1 .
		
	! !
!RondaTest methodsFor: 'tests' stamp: 'f 7/5/2021 21:37:58' prior: 50910798!
test16HandWiningFirstandThirdEncounterReflectsOncardsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie: (manoGanaSegunda copy) yLasCartasdeLaMano: (manoGanaPrimerayTercera copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaMano.
	ronda juegaPie.
	
	
	self assert: ((ronda Estado) class)  equals: ((GanoSegundaPie new)class).	
	
	ronda juegaPie.
	ronda juegaMano.
	
	self assert: ((ronda Estado) class)  equals: ((GanoRondaMano new)class).	
	self assertcards: (ronda cartasDelPie ) andcards:  (ronda cartasDeLaMano) haveSize: 0 .
	
		
	! !
!RondaTest methodsFor: 'tests' stamp: 'f 7/5/2021 21:38:13' prior: 50910875!
test17HandCantPlayIfFootWonSecond
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:  (manoGanaSegunda copy) yLasCartasdeLaMano:(manoGanaPrimerayTercera copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaMano.
	ronda juegaPie.
	
	self should: [ronda juegaMano.]
	raise: Error
	withMessageText: JuegaPie errorTurnoPie.
	
	self assertcards: (ronda cartasDelPie ) andcards:  (ronda cartasDeLaMano) haveSize: 1.
		
	! !
!RondaTest methodsFor: 'tests' stamp: 'f 7/5/2021 21:38:20' prior: 50910950!
test18FootWiningSecondandThirdEncounterReflectsOncardsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(manoGanaSegundayTercera copy) yLasCartasdeLaMano: (manoGanaPrimera copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaMano.
	ronda juegaPie.

	
	self assert: ((ronda Estado) class)  equals: ((GanoSegundaPie new)class).	
	
	ronda juegaPie.
	ronda juegaMano.
	
	self assert: ((ronda Estado) class)  equals: ((GanoRondaPie new)class).	
	self assertcards: (ronda cartasDelPie ) andcards:  (ronda cartasDeLaMano) haveSize: 0 .
	
		
	! !

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 21:38:27'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 21:38:27'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 21:38:27'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 21:38:27'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 21:38:27'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 21:38:27'!
PASSED!

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:38:27'!
PASSED!

!testRun: #RondaTest #test08FootWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:38:27'!
PASSED!

!testRun: #RondaTest #test09TyingReflectsOncardsAndState stamp: 'f 7/5/2021 21:38:27'!
PASSED!

!testRun: #RondaTest #test10FootWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:38:27'!
PASSED!

!testRun: #RondaTest #test11HandCantPlayIfFootWonFirstRound stamp: 'f 7/5/2021 21:38:27'!
PASSED!

!testRun: #RondaTest #test12HandWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:38:27'!
PASSED!

!testRun: #RondaTest #test13FootCantPlayIfHandWonFirstRound stamp: 'f 7/5/2021 21:38:27'!
PASSED!

!testRun: #RondaTest #test14FootWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:38:27'!
PASSED!

!testRun: #RondaTest #test15FootCantPlayIfHandWonSecond stamp: 'f 7/5/2021 21:38:27'!
PASSED!

!testRun: #RondaTest #test16HandWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:38:27'!
PASSED!

!testRun: #RondaTest #test17HandCantPlayIfFootWonSecond stamp: 'f 7/5/2021 21:38:27'!
PASSED!

!testRun: #RondaTest #test18FootWiningSecondandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:38:27'!
PASSED!

!testRun: #RondaTest #test19HandWiningSecondandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:38:27'!
PASSED!

!testRun: #RondaTest #test20FootWinningIsShownCorrectly stamp: 'f 7/5/2021 21:38:27'!
PASSED!

!testRun: #RondaTest #test20HandWinningIsShownCorrectly stamp: 'f 7/5/2021 21:38:27'!
PASSED!

!testRun: #RondaTest #test21FootWinningIsShownCorrectly stamp: 'f 7/5/2021 21:38:27'!
PASSED!

!testRun: #RondaTest #test22cantPlayAfterFinishingRound stamp: 'f 7/5/2021 21:38:27'!
PASSED!

!testRun: #RondaTest #test23CantAskForAWinnerBeforeEndingRound stamp: 'f 7/5/2021 21:38:27'!
PASSED!

!testRun: #RondaTest #test24FootWinningAfterTyingReflectOnCardAndState stamp: 'f 7/5/2021 21:38:27'!
PASSED!

!testRun: #RondaTest #test25FootCantPlayFirstAfterTying stamp: 'f 7/5/2021 21:38:27'!
PASSED!

!testRun: #RondaTest #test26CantPlayAfterTyingandFinishingGame stamp: 'f 7/5/2021 21:38:27'!
PASSED!

!testRun: #RondaTest #test27PlayerDoesntHaveCardAfterUsingIt stamp: 'f 7/5/2021 21:38:27'!
PASSED!
!RondaTest methodsFor: 'tests' stamp: 'f 7/5/2021 21:38:47' prior: 50911034!
test19HandWiningSecondandThirdEncounterReflectsOncardsAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie: (manoGanaPrimera copy) yLasCartasdeLaMano: (manoGanaSegundayTercera copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaPie.
	ronda juegaMano.
	

	
	self assert: ((ronda Estado) class)  equals: ((GanoSegundaMano new)class).	
	
	ronda juegaMano.
	ronda juegaPie.
	
	self assert: ((ronda Estado) class)  equals: ((GanoRondaMano new)class).	
	self assertcards: (ronda cartasDelPie ) andcards:  (ronda cartasDeLaMano) haveSize: 0 .
	
		
	! !

!methodRemoval: RondaTest #test21FootWinningIsShownCorrectly stamp: 'f 7/5/2021 21:39:23'!
test21FootWinningIsShownCorrectly
	|ronda|
	ronda:=Ronda initconLasCartasdelPie: (manoGanaSegundayTercera copy)  yLasCartasdeLaMano:  (manoGanaPrimera copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaMano.
	ronda juegaPie.
	
	ronda juegaPie.
	ronda juegaMano.
	
	
	self assert: (ronda Ganador )  equals: ('Pie').	
	
	
		
	!
!RondaTest methodsFor: 'tests' stamp: 'f 7/5/2021 21:39:33'!
test21HandWinningIsShownCorrectly
	|ronda|
	ronda:=Ronda initconLasCartasdelPie: (manoGanaPrimera copy) yLasCartasdeLaMano: (manoGanaSegundayTercera copy).
	ronda juegaMano.
	ronda juegaPie.
	
	ronda juegaPie.
	ronda juegaMano.
	
	ronda juegaMano.
	ronda juegaPie.
	
	self assert: (ronda Ganador )  equals: ('Mano').	
	
	
		
	! !

!methodRemoval: RondaTest #test20HandWinningIsShownCorrectly stamp: 'f 7/5/2021 21:39:39'!
test20HandWinningIsShownCorrectly
	|ronda|
	ronda:=Ronda initconLasCartasdelPie: (manoGanaPrimera copy) yLasCartasdeLaMano: (manoGanaSegundayTercera copy).
	ronda juegaMano.
	ronda juegaPie.
	
	ronda juegaPie.
	ronda juegaMano.
	
	ronda juegaMano.
	ronda juegaPie.
	
	self assert: (ronda Ganador )  equals: ('Mano').	
	
	
		
	!
!RondaTest methodsFor: 'tests' stamp: 'f 7/5/2021 21:40:20' prior: 50911204!
test20FootWinningIsShownCorrectly
	|ronda|
	ronda:=Ronda initconLasCartasdelPie: (manoGanaSegundayTercera copy) yLasCartasdeLaMano: (manoGanaPrimera copy).
	ronda juegaMano.
	ronda juegaPie.
	
	ronda juegaMano.
	ronda juegaPie.
	
	ronda juegaPie.
	ronda juegaMano.
	
	
	self assert: (ronda Ganador )  equals: ('Pie').	
	
	
		
	! !

!testRun: #RondaTest #test20FootWinningIsShownCorrectly stamp: 'f 7/5/2021 21:40:22'!
PASSED!

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 21:40:22'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 21:40:22'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 21:40:22'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 21:40:22'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 21:40:22'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 21:40:22'!
PASSED!

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:40:22'!
PASSED!

!testRun: #RondaTest #test08FootWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:40:22'!
PASSED!

!testRun: #RondaTest #test09TyingReflectsOncardsAndState stamp: 'f 7/5/2021 21:40:22'!
PASSED!

!testRun: #RondaTest #test10FootWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:40:22'!
PASSED!

!testRun: #RondaTest #test11HandCantPlayIfFootWonFirstRound stamp: 'f 7/5/2021 21:40:22'!
PASSED!

!testRun: #RondaTest #test12HandWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:40:22'!
PASSED!

!testRun: #RondaTest #test13FootCantPlayIfHandWonFirstRound stamp: 'f 7/5/2021 21:40:22'!
PASSED!

!testRun: #RondaTest #test14FootWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:40:22'!
PASSED!

!testRun: #RondaTest #test15FootCantPlayIfHandWonSecond stamp: 'f 7/5/2021 21:40:22'!
PASSED!

!testRun: #RondaTest #test16HandWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:40:22'!
PASSED!

!testRun: #RondaTest #test17HandCantPlayIfFootWonSecond stamp: 'f 7/5/2021 21:40:22'!
PASSED!

!testRun: #RondaTest #test18FootWiningSecondandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:40:22'!
PASSED!

!testRun: #RondaTest #test19HandWiningSecondandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:40:22'!
PASSED!

!testRun: #RondaTest #test20FootWinningIsShownCorrectly stamp: 'f 7/5/2021 21:40:22'!
PASSED!

!testRun: #RondaTest #test21HandWinningIsShownCorrectly stamp: 'f 7/5/2021 21:40:22'!
PASSED!

!testRun: #RondaTest #test22cantPlayAfterFinishingRound stamp: 'f 7/5/2021 21:40:22'!
PASSED!

!testRun: #RondaTest #test23CantAskForAWinnerBeforeEndingRound stamp: 'f 7/5/2021 21:40:22'!
PASSED!

!testRun: #RondaTest #test24FootWinningAfterTyingReflectOnCardAndState stamp: 'f 7/5/2021 21:40:22'!
PASSED!

!testRun: #RondaTest #test25FootCantPlayFirstAfterTying stamp: 'f 7/5/2021 21:40:22'!
PASSED!

!testRun: #RondaTest #test26CantPlayAfterTyingandFinishingGame stamp: 'f 7/5/2021 21:40:22'!
PASSED!

!testRun: #RondaTest #test27PlayerDoesntHaveCardAfterUsingIt stamp: 'f 7/5/2021 21:40:22'!
PASSED!
!RondaTest methodsFor: 'tests' stamp: 'f 7/5/2021 21:40:44' prior: 50911508!
test22cantPlayAfterFinishingRound
	|ronda|
	ronda:=Ronda initconLasCartasdelPie: (manoGanaSegundayTercera copy)  yLasCartasdeLaMano:  (manoGanaPrimera copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaMano.
	ronda juegaPie.
	
	ronda juegaPie.
	ronda juegaMano.
	
	
	self should: [ronda juegaPie]
	raise: Error
	withMessageText: GanoRondaPie RondaYaTermino.
	
		self should: [ronda juegaMano]
	raise: Error
	withMessageText: GanoRondaPie RondaYaTermino.
	
	self assert: (ronda cartasDelPie ) size  equals: (ronda cartasDeLaMano) size.
	self assert: (ronda cartasDelPie) size equals: 0.
	
	
		
	! !
!RondaTest methodsFor: 'tests' stamp: 'f 7/5/2021 21:41:04' prior: 50913304!
test22cantPlayAfterFinishingRound
	|ronda|
	ronda:=Ronda initconLasCartasdelPie: (manoGanaSegundayTercera copy)  yLasCartasdeLaMano:  (manoGanaPrimera copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaMano.
	ronda juegaPie.
	
	ronda juegaPie.
	ronda juegaMano.
	
	
	self should: [ronda juegaPie]
	raise: Error
	withMessageText: GanoRondaPie RondaYaTermino.
	
		self should: [ronda juegaMano]
	raise: Error
	withMessageText: GanoRondaPie RondaYaTermino.
	
		self assertcards: (ronda cartasDelPie ) andcards:  (ronda cartasDeLaMano) haveSize: 0 .

	
	
		
	! !
!RondaTest methodsFor: 'tests' stamp: 'f 7/5/2021 21:41:18' prior: 50911946!
test24FootWinningAfterTyingReflectOnCardAndState
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(empardaPrimeraGanaSegunda copy) yLasCartasdeLaMano: (empardaPrimeraPierdeSegunda copy).
	ronda juegaMano.
	ronda juegaPie.
	ronda juegaMano.
	ronda juegaPie.
	
	

	self assert: ((ronda Estado) class)  equals: ((GanoRondaPie new)class).	
	self assertcards: (ronda cartasDelPie ) andcards:  (ronda cartasDeLaMano) haveSize: 1 .

	
		
	! !
!RondaTest methodsFor: 'tests' stamp: 'f 7/5/2021 21:41:26' prior: 50912067!
test25FootCantPlayFirstAfterTying
	|ronda|
	ronda:=Ronda initconLasCartasdelPie:(empardaPrimeraGanaSegunda copy) yLasCartasdeLaMano: (empardaPrimeraPierdeSegunda copy).
	ronda juegaMano.
	ronda juegaPie.
	self should:[ronda juegaPie]
	raise: Error
	withMessageText: JuegaMano errorTurnoMano.
	
	
	self assertcards: (ronda cartasDelPie ) andcards:  (ronda cartasDeLaMano) haveSize: 2 .

	
		
	! !

!testRun: #RondaTest #test01SoloSePuedeIncializarCon3Cartas stamp: 'f 7/5/2021 21:41:33'!
PASSED!

!testRun: #RondaTest #test02InitializedinInitialState stamp: 'f 7/5/2021 21:41:33'!
PASSED!

!testRun: #RondaTest #test03EachPlayerHas3CardsBeforePlaying stamp: 'f 7/5/2021 21:41:33'!
PASSED!

!testRun: #RondaTest #test04HandStartsPlaying stamp: 'f 7/5/2021 21:41:33'!
PASSED!

!testRun: #RondaTest #test05ErrorIfFootStartsPlaying stamp: 'f 7/5/2021 21:41:33'!
PASSED!

!testRun: #RondaTest #test06HandCantPlayTwice stamp: 'f 7/5/2021 21:41:33'!
PASSED!

!testRun: #RondaTest #test07HandWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:41:33'!
PASSED!

!testRun: #RondaTest #test08FootWiningFirstEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:41:33'!
PASSED!

!testRun: #RondaTest #test09TyingReflectsOncardsAndState stamp: 'f 7/5/2021 21:41:33'!
PASSED!

!testRun: #RondaTest #test10FootWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:41:33'!
PASSED!

!testRun: #RondaTest #test11HandCantPlayIfFootWonFirstRound stamp: 'f 7/5/2021 21:41:33'!
PASSED!

!testRun: #RondaTest #test12HandWiningFirstandSecondEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:41:33'!
PASSED!

!testRun: #RondaTest #test13FootCantPlayIfHandWonFirstRound stamp: 'f 7/5/2021 21:41:33'!
PASSED!

!testRun: #RondaTest #test14FootWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:41:33'!
PASSED!

!testRun: #RondaTest #test15FootCantPlayIfHandWonSecond stamp: 'f 7/5/2021 21:41:33'!
PASSED!

!testRun: #RondaTest #test16HandWiningFirstandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:41:33'!
PASSED!

!testRun: #RondaTest #test17HandCantPlayIfFootWonSecond stamp: 'f 7/5/2021 21:41:33'!
PASSED!

!testRun: #RondaTest #test18FootWiningSecondandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:41:33'!
PASSED!

!testRun: #RondaTest #test19HandWiningSecondandThirdEncounterReflectsOncardsAndState stamp: 'f 7/5/2021 21:41:33'!
PASSED!

!testRun: #RondaTest #test20FootWinningIsShownCorrectly stamp: 'f 7/5/2021 21:41:33'!
PASSED!

!testRun: #RondaTest #test21HandWinningIsShownCorrectly stamp: 'f 7/5/2021 21:41:33'!
PASSED!

!testRun: #RondaTest #test22cantPlayAfterFinishingRound stamp: 'f 7/5/2021 21:41:33'!
PASSED!

!testRun: #RondaTest #test23CantAskForAWinnerBeforeEndingRound stamp: 'f 7/5/2021 21:41:33'!
PASSED!

!testRun: #RondaTest #test24FootWinningAfterTyingReflectOnCardAndState stamp: 'f 7/5/2021 21:41:33'!
PASSED!

!testRun: #RondaTest #test25FootCantPlayFirstAfterTying stamp: 'f 7/5/2021 21:41:33'!
PASSED!

!testRun: #RondaTest #test26CantPlayAfterTyingandFinishingGame stamp: 'f 7/5/2021 21:41:33'!
PASSED!

!testRun: #RondaTest #test27PlayerDoesntHaveCardAfterUsingIt stamp: 'f 7/5/2021 21:41:33'!
PASSED!