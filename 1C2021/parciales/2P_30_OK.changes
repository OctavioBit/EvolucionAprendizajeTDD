----End fileIn of /Users/urichami/Downloads/ISW1-2021-1C-2doParcial.st----!

TestCase subclass: #RondaTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'UC 7/5/2021 17:37:04'!
TestCase subclass: #RondaTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'UC 7/5/2021 17:44:04'!
Object subclass: #Ronda
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaTest methodsFor: 'nil' stamp: 'UC 7/5/2021 17:44:19'!
test01
	| mano pie |
	pie := OrderedCollection with: CartaDeTruco anchoDeBasto with: CartaDeTruco anchoDeBasto 
	with: CartaDeTruco anchoDeEspada.
	mano := OrderedCollection with: CartaDeTruco anchoDeBasto with: CartaDeTruco anchoDeBasto 
	with: CartaDeTruco anchoDeEspada.
	Ronda mano: mano pie: pie.
	 
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 17:45:45' prior: 50859871!
test01
	| mano pie |
	pie := OrderedCollection with: CartaDeTruco anchoDeBasto with: (CartaDeTruco oroCon: 1)
	with: (CartaDeTruco oroCon: 4).
	mano := OrderedCollection with: CartaDeTruco anchoDeBasto with: (CartaDeTruco bastoCon: 3) 
	with: CartaDeTruco anchoDeEspada.
	Ronda mano: mano pie: pie.
	 
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 17:47:14' prior: 50859884!
test01
	| mano pie |
	pie := OrderedCollection with: CartaDeTruco anchoDeBasto with: (CartaDeTruco oroCon: 1)
	with: (CartaDeTruco oroCon: 4).
	mano := OrderedCollection with: CartaDeTruco anchoDeBasto with: (CartaDeTruco bastoCon: 3) 
	with: CartaDeTruco anchoDeEspada.
	self should: [Ronda mano: mano pie: pie.]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda esasCartasNoPudieronVenirDeUnSoloMazo equals: error messageText ]
	
	 
	! !
!Ronda class methodsFor: 'nil' stamp: 'UC 7/5/2021 17:47:31'!
esasCartasNoPudieronHaberVenidoDeUnUnicoMazo
! !
!Ronda class methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 17:47:48'!
esasCartasNoPudieronVenirDeUnSoloMazo
! !

!methodRemoval: Ronda class #esasCartasNoPudieronHaberVenidoDeUnUnicoMazo stamp: 'UC 7/5/2021 17:47:48'!
esasCartasNoPudieronHaberVenidoDeUnUnicoMazo
!
!Ronda class methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 17:48:09' prior: 50859918!
esasCartasNoPudieronVenirDeUnSoloMazo
	^'Matufia che!! Esas cartas no pudieron venir de un solo mazo'
! !
!Ronda class methodsFor: 'nil' stamp: 'UC 7/5/2021 17:49:00'!
mano: unJugadorMano pie: unJugadorPie
	self new initializeMano: unJugadorMano pie: unJugadorPie.! !

!testRun: #RondaTest #test01 stamp: 'UC 7/5/2021 17:49:16'!
FAILURE!

!testRun: #RondaTest #test01 stamp: 'UC 7/5/2021 17:49:16'!
FAILURE!

!testRun: #RondaTest #test01 stamp: 'UC 7/5/2021 17:49:18'!
FAILURE!

!testRun: #RondaTest #test01 stamp: 'UC 7/5/2021 17:49:18'!
FAILURE!

!testRun: #RondaTest #test01 stamp: 'UC 7/5/2021 17:49:20'!
FAILURE!

!testRun: #RondaTest #test01 stamp: 'UC 7/5/2021 17:49:20'!
FAILURE!

!testRun: #RondaTest #test01 stamp: 'UC 7/5/2021 17:49:28'!
FAILURE!

!testRun: #RondaTest #test01 stamp: 'UC 7/5/2021 17:49:28'!
FAILURE!
!Ronda methodsFor: 'nil' stamp: 'UC 7/5/2021 17:50:03'!
initializeMano: unJugadorMano pie: unJugadorPie
	! !

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'UC 7/5/2021 17:50:17'!
Object subclass: #Ronda
	instanceVariableNames: 'mano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'UC 7/5/2021 17:50:18'!
Object subclass: #Ronda
	instanceVariableNames: 'mano pie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 17:50:16' prior: 50859957!
initializeMano: unJugadorMano pie: unJugadorPie
	mano := unJugadorMano. 
	pie := unJugadorPie.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 17:50:34' prior: 50859977!
initializeMano: unJugadorMano pie: unJugadorPie
	self error: self class esasCartasNoPudieronVenirDeUnSoloMazo ! !
!Ronda class methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 17:50:42' prior: 50859934!
mano: unJugadorMano pie: unJugadorPie
	^self new initializeMano: unJugadorMano pie: unJugadorPie.! !

!testRun: #RondaTest #test01 stamp: 'UC 7/5/2021 17:50:44'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 17:51:10'!
test02
	| mano pie |
	pie := OrderedCollection with: CartaDeTruco anchoDeBasto with: (CartaDeTruco oroCon: 1)
	with: (CartaDeTruco oroCon: 4).
	mano := OrderedCollection with: CartaDeTruco sieteDeOro with: (CartaDeTruco bastoCon: 3) 
	with: CartaDeTruco anchoDeEspada.
	self should: [Ronda mano: mano pie: pie.]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda esasCartasNoPudieronVenirDeUnSoloMazo equals: error messageText ]
	
	 
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 17:52:02' prior: 50859998!
test02
	| mano pie ronda |
	pie := OrderedCollection with: CartaDeTruco anchoDeBasto with: (CartaDeTruco oroCon: 1)
	with: (CartaDeTruco oroCon: 4).
	mano := OrderedCollection with: CartaDeTruco sieteDeOro with: (CartaDeTruco bastoCon: 3) 
	with: CartaDeTruco anchoDeEspada.
	ronda := Ronda mano: mano pie: pie.
	self assert: ronda aQuienLeToca equals: #mano
	
	! !

!testRun: #RondaTest #test01 stamp: 'UC 7/5/2021 17:52:10'!
PASSED!

!testRun: #RondaTest #test02 stamp: 'UC 7/5/2021 17:52:10'!
ERROR!

!testRun: #RondaTest #test02 stamp: 'UC 7/5/2021 17:52:10'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 17:53:04' prior: 50859983!
initializeMano: unJugadorMano pie: unJugadorPie
	self error: self class esasCartasNoPudieronVenirDeUnSoloMazo ! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 17:54:16' prior: 50860036!
initializeMano: unJugadorMano pie: unJugadorPie
	unJugadorMano anySatisfy: [:cartaMano | unJugadorPie includes: cartaMano] ifTrue: [
		self error: self class esasCartasNoPudieronVenirDeUnSoloMazo 
	]
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 17:54:23' prior: 50860043!
initializeMano: unJugadorMano pie: unJugadorPie
	(unJugadorMano anySatisfy: [:cartaMano | unJugadorPie includes: cartaMano]) ifTrue: [
		self error: self class esasCartasNoPudieronVenirDeUnSoloMazo 
	]
	! !
!Ronda methodsFor: 'nil' stamp: 'UC 7/5/2021 17:54:34'!
aQuienLeToca
	^#Mano! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 17:54:39' prior: 50860015!
test02
	| mano pie ronda |
	pie := OrderedCollection with: CartaDeTruco anchoDeBasto with: (CartaDeTruco oroCon: 1)
	with: (CartaDeTruco oroCon: 4).
	mano := OrderedCollection with: CartaDeTruco sieteDeOro with: (CartaDeTruco bastoCon: 3) 
	with: CartaDeTruco anchoDeEspada.
	ronda := Ronda mano: mano pie: pie.
	self assert: ronda aQuienLeToca equals: #Mano
	
	! !

!testRun: #RondaTest #test01 stamp: 'UC 7/5/2021 17:54:40'!
PASSED!

!testRun: #RondaTest #test02 stamp: 'UC 7/5/2021 17:54:40'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 17:55:14' prior: 50859897!
test01
	| mano pie |
	pie := OrderedCollection with: CartaDeTruco anchoDeBasto with: (CartaDeTruco oroCon: 4)
	with: (CartaDeTruco oroCon: 4).
	mano := OrderedCollection with: CartaDeTruco anchoDeBasto with: (CartaDeTruco bastoCon: 3) 
	with: CartaDeTruco anchoDeEspada.
	self should: [Ronda mano: mano pie: pie.]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda esasCartasNoPudieronVenirDeUnSoloMazo equals: error messageText ]
	
	 
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 17:55:41' prior: 50860085!
test01
	| mano pie |
	pie := OrderedCollection with: CartaDeTruco anchoDeBasto with: (CartaDeTruco oroCon: 1)
	with: (CartaDeTruco oroCon: 4).
	mano := OrderedCollection with: CartaDeTruco anchoDeBasto with: (CartaDeTruco bastoCon: 3) 
	with: CartaDeTruco anchoDeEspada.
	self should: [Ronda mano: mano pie: pie.]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda esasCartasNoPudieronVenirDeUnSoloMazo equals: error messageText ]
	
	 
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 17:55:46'!
test03
	| mano pie |
	pie := OrderedCollection with: CartaDeTruco anchoDeBasto with: (CartaDeTruco oroCon: 4)
	with: (CartaDeTruco oroCon: 4).
	mano := OrderedCollection with: CartaDeTruco anchoDeBasto with: (CartaDeTruco bastoCon: 3) 
	with: CartaDeTruco anchoDeEspada.
	self should: [Ronda mano: mano pie: pie.]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda esasCartasNoPudieronVenirDeUnSoloMazo equals: error messageText ]
	
	 
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:02:39' prior: 50860120!
test03
	| mano pie |
	pie := Set with: CartaDeTruco anchoDeBasto with: (CartaDeTruco oroCon: 4)
	with: (CartaDeTruco oroCon: 4).
	mano := Set with: CartaDeTruco anchoDeBasto with: (CartaDeTruco bastoCon: 3) 
	with: CartaDeTruco anchoDeEspada.
	self should: [Ronda mano: mano pie: pie.]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda esasCartasNoPudieronVenirDeUnSoloMazo equals: error messageText ]
	
	 
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:02:44' prior: 50860066!
test02
	| mano pie ronda |
	pie := Set with: CartaDeTruco anchoDeBasto with: (CartaDeTruco oroCon: 1)
	with: (CartaDeTruco oroCon: 4).
	mano := Set with: CartaDeTruco sieteDeOro with: (CartaDeTruco bastoCon: 3) 
	with: CartaDeTruco anchoDeEspada.
	ronda := Ronda mano: mano pie: pie.
	self assert: ronda aQuienLeToca equals: #Mano
	
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:02:51' prior: 50860103!
test01
	| mano pie |
	pie := Set with: CartaDeTruco anchoDeBasto with: (CartaDeTruco oroCon: 1)
	with: (CartaDeTruco oroCon: 4).
	mano := Set with: CartaDeTruco anchoDeBasto with: (CartaDeTruco bastoCon: 3) 
	with: CartaDeTruco anchoDeEspada.
	self should: [Ronda mano: mano pie: pie.]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda esasCartasNoPudieronVenirDeUnSoloMazo equals: error messageText ]
	
	 
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:03:05'!
crearJugador

	^ Set with: CartaDeTruco anchoDeBasto with: (CartaDeTruco oroCon: 1)
	with: (CartaDeTruco oroCon: 4)! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:03:05' prior: 50860169!
test01
	| mano pie |
	pie := self crearJugador.
	mano := Set with: CartaDeTruco anchoDeBasto with: (CartaDeTruco bastoCon: 3) 
	with: CartaDeTruco anchoDeEspada.
	self should: [Ronda mano: mano pie: pie.]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda esasCartasNoPudieronVenirDeUnSoloMazo equals: error messageText ]
	
	 
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:03:37'!
crearJugadorCon: carta1 con: carta2 con: carta3

	^ Set with: carta1 with: carta2 with: carta3! !

!methodRemoval: RondaTest #crearJugador stamp: 'UC 7/5/2021 18:03:40'!
crearJugador

	^ Set with: CartaDeTruco anchoDeBasto with: (CartaDeTruco oroCon: 1)
	with: (CartaDeTruco oroCon: 4)!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:02:51' prior: 50860192!
test01
	| mano pie |
	pie := Set with: CartaDeTruco anchoDeBasto with: (CartaDeTruco oroCon: 1)
	with: (CartaDeTruco oroCon: 4).
	mano := Set with: CartaDeTruco anchoDeBasto with: (CartaDeTruco bastoCon: 3) 
	with: CartaDeTruco anchoDeEspada.
	self should: [Ronda mano: mano pie: pie.]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda esasCartasNoPudieronVenirDeUnSoloMazo equals: error messageText ]
	
	 
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:04:33' prior: 50860218!
test01
	| mano pie |
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 1)
	con: (CartaDeTruco oroCon: 4).
	mano := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	self should: [Ronda mano: mano pie: pie.]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda esasCartasNoPudieronVenirDeUnSoloMazo equals: error messageText ]
	
	 
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:04:35' prior: 50860235!
test01
	| mano pie |
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 1)
	con: (CartaDeTruco oroCon: 4).
	mano := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	self should: [Ronda mano: mano pie: pie.]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda esasCartasNoPudieronVenirDeUnSoloMazo equals: error messageText ]
	
	 
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:04:39' prior: 50860252!
test01
	| mano pie |
	
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 1)
	con: (CartaDeTruco oroCon: 4).
	
	mano := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	self should: [Ronda mano: mano pie: pie.]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda esasCartasNoPudieronVenirDeUnSoloMazo equals: error messageText ]
	
	 
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:05:21' prior: 50860155!
test02
	| mano pie ronda |
	
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 1)
	con: (CartaDeTruco oroCon: 4).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	self assert: ronda aQuienLeToca equals: #Mano
	
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:06:06' prior: 50860138!
test03
	| mano pie |
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 4)
	con: (CartaDeTruco oroCon: 4).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	self should: [Ronda mano: mano pie: pie.]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda esasCartasNoPudieronVenirDeUnSoloMazo equals: error messageText ]
	
	 
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:06:51'!
test01a
	| mano pie |
	mano := Set new.
	pie := Set new.
	Ronda mano: mano pie: pie. 
	 
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:12:09' prior: 50860318!
test01a
	| mano pie |
	mano := Set new.
	pie := Set new with: CartaDeTruco anchoDeBasto with: CartaDeTruco anchoDeEspada  with: CartaDeTruco sieteDeEspada.
	self should: [Ronda mano: mano pie: pie. ]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda ambosJugadoresDebenTenerTresCartas equals: error messageText ]
	
	 
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:15:46' prior: 50860286!
test02
	| mano pie ronda |
	
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 1)
	con: (CartaDeTruco oroCon: 4).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	self assert: ronda leTocaALaMano
	
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:15:49' prior: 50860338!
test02
	| mano pie ronda |
	
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 1)
	con: (CartaDeTruco oroCon: 4).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	self assert: ronda leTocaALaMano.
	
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:16:02'!
leTocaALaMano
	^true! !

!methodRemoval: Ronda #aQuienLeToca stamp: 'UC 7/5/2021 18:16:08'!
aQuienLeToca
	^#Mano!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:16:38'!
xtest03
	| mano pie |
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 4)
	con: (CartaDeTruco oroCon: 4).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	self should: [Ronda mano: mano pie: pie.]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda esasCartasNoPudieronVenirDeUnSoloMazo equals: error messageText ]
	
	 
	! !

!methodRemoval: RondaTest #test03 stamp: 'UC 7/5/2021 18:16:38'!
test03
	| mano pie |
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 4)
	con: (CartaDeTruco oroCon: 4).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	self should: [Ronda mano: mano pie: pie.]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda esasCartasNoPudieronVenirDeUnSoloMazo equals: error messageText ]
	
	 
	!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:16:55'!
test03
	| mano pie ronda |
	
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 1)
	con: (CartaDeTruco oroCon: 4).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	self assert: ronda leTocaALaMano.
	
	! !

!methodRemoval: RondaTest #test02 stamp: 'UC 7/5/2021 18:16:55'!
test02
	| mano pie ronda |
	
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 1)
	con: (CartaDeTruco oroCon: 4).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	self assert: ronda leTocaALaMano.
	
	!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:17:07'!
test02
	| mano pie ronda |
	
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 1)
	con: (CartaDeTruco oroCon: 4).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	self assert: ronda leTocaALaMano.
	
	! !

!methodRemoval: RondaTest #test03 stamp: 'UC 7/5/2021 18:17:07'!
test03
	| mano pie ronda |
	
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 1)
	con: (CartaDeTruco oroCon: 4).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	self assert: ronda leTocaALaMano.
	
	!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:17:17'!
test03
	| mano pie ronda |
	
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 1)
	con: (CartaDeTruco oroCon: 4).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	self assert: ronda leTocaALaMano.
	
	! !

!methodRemoval: RondaTest #test02 stamp: 'UC 7/5/2021 18:17:17'!
test02
	| mano pie ronda |
	
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 1)
	con: (CartaDeTruco oroCon: 4).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	self assert: ronda leTocaALaMano.
	
	!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:17:28'!
test02
	| mano pie |
	
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 1)
	con: (CartaDeTruco oroCon: 4).
	
	mano := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	self should: [Ronda mano: mano pie: pie.]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda esasCartasNoPudieronVenirDeUnSoloMazo equals: error messageText ]
	
	 
	! !

!methodRemoval: RondaTest #test01 stamp: 'UC 7/5/2021 18:17:28'!
test01
	| mano pie |
	
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 1)
	con: (CartaDeTruco oroCon: 4).
	
	mano := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	self should: [Ronda mano: mano pie: pie.]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda esasCartasNoPudieronVenirDeUnSoloMazo equals: error messageText ]
	
	 
	!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:17:32'!
test01
	| mano pie |
	mano := Set new.
	pie := Set new with: CartaDeTruco anchoDeBasto with: CartaDeTruco anchoDeEspada  with: CartaDeTruco sieteDeEspada.
	self should: [Ronda mano: mano pie: pie. ]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda ambosJugadoresDebenTenerTresCartas equals: error messageText ]
	
	 
	! !

!methodRemoval: RondaTest #test01a stamp: 'UC 7/5/2021 18:17:32'!
test01a
	| mano pie |
	mano := Set new.
	pie := Set new with: CartaDeTruco anchoDeBasto with: CartaDeTruco anchoDeEspada  with: CartaDeTruco sieteDeEspada.
	self should: [Ronda mano: mano pie: pie. ]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda ambosJugadoresDebenTenerTresCartas equals: error messageText ]
	
	 
	!

!testRun: #RondaTest #test01 stamp: 'UC 7/5/2021 18:17:37'!
ERROR!

!testRun: #RondaTest #test02 stamp: 'UC 7/5/2021 18:17:37'!
PASSED!

!testRun: #RondaTest #test03 stamp: 'UC 7/5/2021 18:17:37'!
PASSED!

!testRun: #RondaTest #test01 stamp: 'UC 7/5/2021 18:17:37'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:17:54' prior: 50860519!
test01
	| mano pie |
	mano := Set new.
	pie := Set with: CartaDeTruco anchoDeBasto with: CartaDeTruco anchoDeEspada  with: CartaDeTruco sieteDeEspada.
	self should: [Ronda mano: mano pie: pie. ]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda ambosJugadoresDebenTenerTresCartas equals: error messageText ]
	
	 
	! !

!testRun: #RondaTest #test01 stamp: 'UC 7/5/2021 18:17:55'!
FAILURE!

!testRun: #RondaTest #test01 stamp: 'UC 7/5/2021 18:17:58'!
PASSED!

!testRun: #RondaTest #test01 stamp: 'UC 7/5/2021 18:18:01'!
FAILURE!

!testRun: #RondaTest #test02 stamp: 'UC 7/5/2021 18:18:01'!
PASSED!

!testRun: #RondaTest #test03 stamp: 'UC 7/5/2021 18:18:01'!
PASSED!

!testRun: #RondaTest #test01 stamp: 'UC 7/5/2021 18:18:01'!
FAILURE!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:18:24' prior: 50860554!
test01
	| mano pie |
	mano := Set new.
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: CartaDeTruco anchoDeEspada  con: CartaDeTruco sieteDeEspada.
	self should: [Ronda mano: mano pie: pie. ]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda ambosJugadoresDebenTenerTresCartas equals: error messageText ]
	
	 
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:18:53' prior: 50860581!
test01
	| mano pie |
	mano := Set new.
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: CartaDeTruco anchoDeEspada  con: CartaDeTruco sieteDeEspada.
	self should: [Ronda mano: mano pie: pie. ]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda ambosJugadoresDebenTenerTresCartas equals: error messageText ].
	
	 self should: [Ronda mano: pie pie: mano. ]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda ambosJugadoresDebenTenerTresCartas equals: error messageText ]
	
	 
	
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:18:55' prior: 50860595!
test01
	| mano pie |
	mano := Set new.
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: CartaDeTruco anchoDeEspada  con: CartaDeTruco sieteDeEspada.
	
	self should: [Ronda mano: mano pie: pie. ]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda ambosJugadoresDebenTenerTresCartas equals: error messageText ].
	
	 self should: [Ronda mano: pie pie: mano. ]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda ambosJugadoresDebenTenerTresCartas equals: error messageText ]
	
	 
	
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:19:05' prior: 50860615!
test01
	| sinCartas pie |
	sinCartas := Set new.
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: CartaDeTruco anchoDeEspada  con: CartaDeTruco sieteDeEspada.
	
	self should: [Ronda mano: sinCartas pie: pie. ]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda ambosJugadoresDebenTenerTresCartas equals: error messageText ].
	
	 self should: [Ronda mano: pie pie: sinCartas. ]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda ambosJugadoresDebenTenerTresCartas equals: error messageText ]
	
	 
	
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:19:11' prior: 50860635!
test01
	| sinCartas con3Cartas |
	sinCartas := Set new.
	con3Cartas := self crearJugadorCon: CartaDeTruco anchoDeBasto con: CartaDeTruco anchoDeEspada  con: CartaDeTruco sieteDeEspada.
	
	self should: [Ronda mano: sinCartas pie: con3Cartas. ]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda ambosJugadoresDebenTenerTresCartas equals: error messageText ].
	
	 self should: [Ronda mano: con3Cartas pie: sinCartas. ]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda ambosJugadoresDebenTenerTresCartas equals: error messageText ]
	
	 
	
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:19:55' prior: 50860053!
initializeMano: unJugadorMano pie: unJugadorPie
	(unJugadorMano anySatisfy: [:cartaMano | unJugadorPie includes: cartaMano]) ifTrue: [
		self error: self class esasCartasNoPudieronVenirDeUnSoloMazo 
	].
	unJugadorMano size = 3 and: (unJugadorPie size =  3) ifFalse: [
		self error: self class.
	]
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:20:02' prior: 50860676!
initializeMano: unJugadorMano pie: unJugadorPie
	(unJugadorMano anySatisfy: [:cartaMano | unJugadorPie includes: cartaMano]) ifTrue: [
		self error: self class esasCartasNoPudieronVenirDeUnSoloMazo 
	].
	(unJugadorMano size = 3 and: (unJugadorPie size =  3)) ifFalse: [
		self error: self class.
	]
	! !
!Ronda class methodsFor: 'nil' stamp: 'UC 7/5/2021 18:20:29'!
ambosJugadoresDebenTenerTresCartas
	^'Ambos jugadores deben tener 3 cartas'.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:20:53' prior: 50860655!
test01
	| sinCartas con3Cartas |
	sinCartas := Set new.
	con3Cartas := self crearJugadorCon: CartaDeTruco anchoDeBasto con: CartaDeTruco anchoDeEspada  con: CartaDeTruco sieteDeEspada.
	
	self should: [Ronda mano: sinCartas pie: con3Cartas. ]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda ambosJugadoresDebenTenerTresCartas equals: error messageText ].
	
	 self should: [Ronda mano: con3Cartas pie: sinCartas. ]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda ambosJugadoresDebenTenerTresCartas equals: error messageText ]
	
	 
	
	! !

!testRun: #RondaTest #test01 stamp: 'UC 7/5/2021 18:21:17'!
FAILURE!

!testRun: #RondaTest #test02 stamp: 'UC 7/5/2021 18:21:17'!
PASSED!

!testRun: #RondaTest #test03 stamp: 'UC 7/5/2021 18:21:17'!
PASSED!

!testRun: #RondaTest #test01 stamp: 'UC 7/5/2021 18:21:17'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:21:29' prior: 50860689!
initializeMano: unJugadorMano pie: unJugadorPie
	(unJugadorMano anySatisfy: [:cartaMano | unJugadorPie includes: cartaMano]) ifTrue: [
		self error: self class esasCartasNoPudieronVenirDeUnSoloMazo 
	].
	(unJugadorMano size = 3 and: (unJugadorPie size =  3)) ifFalse: [
		self error: self class ambosJugadoresDebenTenerTresCartas .
	]
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:21:30' prior: 50860737!
initializeMano: unJugadorMano pie: unJugadorPie
	(unJugadorMano anySatisfy: [:cartaMano | unJugadorPie includes: cartaMano]) ifTrue: [
		self error: self class esasCartasNoPudieronVenirDeUnSoloMazo 
	].
	(unJugadorMano size = 3 and: (unJugadorPie size =  3)) ifFalse: [
		self error: self class ambosJugadoresDebenTenerTresCartas.
	]
	! !

!testRun: #RondaTest #test01 stamp: 'UC 7/5/2021 18:21:33'!
PASSED!

!testRun: #RondaTest #test02 stamp: 'UC 7/5/2021 18:21:33'!
PASSED!

!testRun: #RondaTest #test03 stamp: 'UC 7/5/2021 18:21:33'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:21:42'!
test04
	| mano pie |
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 4)
	con: (CartaDeTruco oroCon: 4).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	self should: [Ronda mano: mano pie: pie.]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda esasCartasNoPudieronVenirDeUnSoloMazo equals: error messageText ]
	
	 
	! !

!methodRemoval: RondaTest #xtest03 stamp: 'UC 7/5/2021 18:21:42'!
xtest03
	| mano pie |
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 4)
	con: (CartaDeTruco oroCon: 4).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	self should: [Ronda mano: mano pie: pie.]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda esasCartasNoPudieronVenirDeUnSoloMazo equals: error messageText ]
	
	 
	!

!testRun: #RondaTest #test01 stamp: 'UC 7/5/2021 18:21:45'!
PASSED!

!testRun: #RondaTest #test02 stamp: 'UC 7/5/2021 18:21:45'!
PASSED!

!testRun: #RondaTest #test03 stamp: 'UC 7/5/2021 18:21:45'!
PASSED!

!testRun: #RondaTest #test04 stamp: 'UC 7/5/2021 18:21:45'!
FAILURE!

!testRun: #RondaTest #test04 stamp: 'UC 7/5/2021 18:21:45'!
FAILURE!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:25:29' prior: 50860771!
test04
	| mano pie ronda |
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 4)
	con: (CartaDeTruco oroCon: 4).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	self should: [ronda pieJuega: CartaDeTruco anchoDeBasto.]
		raise: Error
		withExceptionDo:[:error | self assert: Ronda errorLeTocaAlOponente equals: error messageText ]
	
	
	 
	! !
!Ronda methodsFor: 'nil' stamp: 'UC 7/5/2021 18:26:13'!
pieJuega: unaCarta
	self error: self class errorLeTocaAlOponente! !
!Ronda class methodsFor: 'nil' stamp: 'UC 7/5/2021 18:26:33'!
errorLeTocaAlOponente
	^'Le toca al oponente. Espere su turno para jugar'! !

!testRun: #RondaTest #test01 stamp: 'UC 7/5/2021 18:26:46'!
PASSED!

!testRun: #RondaTest #test02 stamp: 'UC 7/5/2021 18:26:46'!
PASSED!

!testRun: #RondaTest #test03 stamp: 'UC 7/5/2021 18:26:46'!
PASSED!

!testRun: #RondaTest #test04 stamp: 'UC 7/5/2021 18:26:46'!
ERROR!

!testRun: #RondaTest #test04 stamp: 'UC 7/5/2021 18:26:46'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:26:56' prior: 50860815!
test04
	| mano pie ronda |
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 4)
	con: (CartaDeTruco oroCon: 3).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	self should: [ronda pieJuega: CartaDeTruco anchoDeBasto.]
		raise: Error
		withExceptionDo:[:error | self assert: Ronda errorLeTocaAlOponente equals: error messageText ]
	
	
	 
	! !

!testRun: #RondaTest #test01 stamp: 'UC 7/5/2021 18:26:58'!
PASSED!

!testRun: #RondaTest #test02 stamp: 'UC 7/5/2021 18:26:59'!
PASSED!

!testRun: #RondaTest #test03 stamp: 'UC 7/5/2021 18:26:59'!
PASSED!

!testRun: #RondaTest #test04 stamp: 'UC 7/5/2021 18:26:59'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:28:07' prior: 50860854!
test04
	| mano pie ronda |
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 4)
	con: (CartaDeTruco oroCon: 3).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	self should: [ronda manoJuega: CartaDeTruco anchoDeBasto.]
		raise: Error
		withExceptionDo:[:error | self assert: Ronda noTenesEsaCarta equals: error messageText ]
	
	
	 
	! !
!Ronda class methodsFor: 'nil' stamp: 'UC 7/5/2021 18:28:24'!
noTenesEsaCarta
	^'No tenes esa carta'! !
!Ronda methodsFor: 'nil' stamp: 'UC 7/5/2021 18:28:51'!
manoJuega: unaCarta
	self error: self class noTenesEsaCarta.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:29:30' prior: 50860881!
test04
	| mano pie ronda |
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 4)
	con: (CartaDeTruco oroCon: 3).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: CartaDeTruco sieteDeOro.
	
	self deny: ronda leTocaALaMano.
	 
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:30:29'!
test05
	| mano pie ronda |
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 4)
	con: (CartaDeTruco oroCon: 4).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	self should: [ronda pieJuega: CartaDeTruco anchoDeBasto.]
		raise: Error
		withExceptionDo:[:error | self assert: Ronda errorLeTocaAlOponente equals: error messageText ]
	 
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:31:19'!
test06
	| mano pie ronda |
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 4)
	con: (CartaDeTruco oroCon: 3).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	self should: [ronda manoJuega: CartaDeTruco anchoDeBasto.]
		raise: Error
		withExceptionDo:[:error | self assert: Ronda noTenesEsaCarta equals: error messageText ]
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:31:26'!
test07
	| mano pie ronda |
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 4)
	con: (CartaDeTruco oroCon: 3).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: CartaDeTruco sieteDeOro.
	
	self deny: ronda leTocaALaMano.
	 
	! !

!methodRemoval: RondaTest #test04 stamp: 'UC 7/5/2021 18:32:13'!
test04
	| mano pie ronda |
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 4)
	con: (CartaDeTruco oroCon: 3).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: CartaDeTruco sieteDeOro.
	
	self deny: ronda leTocaALaMano.
	 
	!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:32:16'!
test04
	| mano pie ronda |
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 4)
	con: (CartaDeTruco oroCon: 4).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	self should: [ronda pieJuega: CartaDeTruco anchoDeBasto.]
		raise: Error
		withExceptionDo:[:error | self assert: Ronda errorLeTocaAlOponente equals: error messageText ]
	 
	! !

!methodRemoval: RondaTest #test05 stamp: 'UC 7/5/2021 18:32:16'!
test05
	| mano pie ronda |
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 4)
	con: (CartaDeTruco oroCon: 4).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	self should: [ronda pieJuega: CartaDeTruco anchoDeBasto.]
		raise: Error
		withExceptionDo:[:error | self assert: Ronda errorLeTocaAlOponente equals: error messageText ]
	 
	!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:32:19'!
test05
	| mano pie ronda |
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 4)
	con: (CartaDeTruco oroCon: 3).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	self should: [ronda manoJuega: CartaDeTruco anchoDeBasto.]
		raise: Error
		withExceptionDo:[:error | self assert: Ronda noTenesEsaCarta equals: error messageText ]
	! !

!methodRemoval: RondaTest #test06 stamp: 'UC 7/5/2021 18:32:19'!
test06
	| mano pie ronda |
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 4)
	con: (CartaDeTruco oroCon: 3).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	self should: [ronda manoJuega: CartaDeTruco anchoDeBasto.]
		raise: Error
		withExceptionDo:[:error | self assert: Ronda noTenesEsaCarta equals: error messageText ]
	!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:32:23'!
test06
	| mano pie ronda |
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 4)
	con: (CartaDeTruco oroCon: 3).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: CartaDeTruco sieteDeOro.
	
	self deny: ronda leTocaALaMano.
	 
	! !

!methodRemoval: RondaTest #test07 stamp: 'UC 7/5/2021 18:32:23'!
test07
	| mano pie ronda |
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 4)
	con: (CartaDeTruco oroCon: 3).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: CartaDeTruco sieteDeOro.
	
	self deny: ronda leTocaALaMano.
	 
	!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:33:10'!
test01CuandoUnJugadorTieneMenosDe3CartasDaError
	| sinCartas con3Cartas |
	sinCartas := Set new.
	con3Cartas := self crearJugadorCon: CartaDeTruco anchoDeBasto con: CartaDeTruco anchoDeEspada  con: CartaDeTruco sieteDeEspada.
	
	self should: [Ronda mano: sinCartas pie: con3Cartas. ]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda ambosJugadoresDebenTenerTresCartas equals: error messageText ].
	
	 self should: [Ronda mano: con3Cartas pie: sinCartas. ]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda ambosJugadoresDebenTenerTresCartas equals: error messageText ]
	
	 
	
	! !

!methodRemoval: RondaTest #test01 stamp: 'UC 7/5/2021 18:33:10'!
test01
	| sinCartas con3Cartas |
	sinCartas := Set new.
	con3Cartas := self crearJugadorCon: CartaDeTruco anchoDeBasto con: CartaDeTruco anchoDeEspada  con: CartaDeTruco sieteDeEspada.
	
	self should: [Ronda mano: sinCartas pie: con3Cartas. ]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda ambosJugadoresDebenTenerTresCartas equals: error messageText ].
	
	 self should: [Ronda mano: con3Cartas pie: sinCartas. ]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda ambosJugadoresDebenTenerTresCartas equals: error messageText ]
	
	 
	
	!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:33:31'!
test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError
	| mano pie |
	
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 1)
	con: (CartaDeTruco oroCon: 4).
	
	mano := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	self should: [Ronda mano: mano pie: pie.]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda esasCartasNoPudieronVenirDeUnSoloMazo equals: error messageText ]
	
	 
	! !

!methodRemoval: RondaTest #test02 stamp: 'UC 7/5/2021 18:33:31'!
test02
	| mano pie |
	
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 1)
	con: (CartaDeTruco oroCon: 4).
	
	mano := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	self should: [Ronda mano: mano pie: pie.]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda esasCartasNoPudieronVenirDeUnSoloMazo equals: error messageText ]
	
	 
	!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:33:51'!
test03CuandoLaRondaEmpiezaLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 1)
	con: (CartaDeTruco oroCon: 4).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	self assert: ronda leTocaALaMano.
	
	! !

!methodRemoval: RondaTest #test03 stamp: 'UC 7/5/2021 18:33:51'!
test03
	| mano pie ronda |
	
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 1)
	con: (CartaDeTruco oroCon: 4).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	self assert: ronda leTocaALaMano.
	
	!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:34:07'!
test04CuandoElPieJuegaYNoEsSuTurnoDaError
	| mano pie ronda |
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 4)
	con: (CartaDeTruco oroCon: 4).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	self should: [ronda pieJuega: CartaDeTruco anchoDeBasto.]
		raise: Error
		withExceptionDo:[:error | self assert: Ronda errorLeTocaAlOponente equals: error messageText ]
	 
	! !

!methodRemoval: RondaTest #test04 stamp: 'UC 7/5/2021 18:34:07'!
test04
	| mano pie ronda |
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 4)
	con: (CartaDeTruco oroCon: 4).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	self should: [ronda pieJuega: CartaDeTruco anchoDeBasto.]
		raise: Error
		withExceptionDo:[:error | self assert: Ronda errorLeTocaAlOponente equals: error messageText ]
	 
	!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:34:24'!
test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError
	| mano pie ronda |
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 4)
	con: (CartaDeTruco oroCon: 3).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	self should: [ronda manoJuega: CartaDeTruco anchoDeBasto.]
		raise: Error
		withExceptionDo:[:error | self assert: Ronda noTenesEsaCarta equals: error messageText ]
	! !

!methodRemoval: RondaTest #test05 stamp: 'UC 7/5/2021 18:34:24'!
test05
	| mano pie ronda |
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 4)
	con: (CartaDeTruco oroCon: 3).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	self should: [ronda manoJuega: CartaDeTruco anchoDeBasto.]
		raise: Error
		withExceptionDo:[:error | self assert: Ronda noTenesEsaCarta equals: error messageText ]
	!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:34:38'!
test06CuandoLaManoJuegaUnaCartaLeTocaAlPie
	| mano pie ronda |
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 4)
	con: (CartaDeTruco oroCon: 3).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: CartaDeTruco sieteDeOro.
	
	self deny: ronda leTocaALaMano.
	 
	! !

!methodRemoval: RondaTest #test06 stamp: 'UC 7/5/2021 18:34:38'!
test06
	| mano pie ronda |
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 4)
	con: (CartaDeTruco oroCon: 3).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: CartaDeTruco sieteDeOro.
	
	self deny: ronda leTocaALaMano.
	 
	!

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 18:34:58'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 18:34:58'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 18:34:58'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaYNoEsSuTurnoDaError stamp: 'UC 7/5/2021 18:34:58'!
ERROR!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 18:34:58'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPie stamp: 'UC 7/5/2021 18:34:58'!
ERROR!

!testRun: #RondaTest #test04CuandoElPieJuegaYNoEsSuTurnoDaError stamp: 'UC 7/5/2021 18:35:01'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:35:12' prior: 50861192!
test04CuandoElPieJuegaYNoEsSuTurnoDaError
	| mano pie ronda |
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 4)
	con: (CartaDeTruco oroCon: 3).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	self should: [ronda pieJuega: CartaDeTruco anchoDeBasto.]
		raise: Error
		withExceptionDo:[:error | self assert: Ronda errorLeTocaAlOponente equals: error messageText ]
	 
	! !

!testRun: #RondaTest #test04CuandoElPieJuegaYNoEsSuTurnoDaError stamp: 'UC 7/5/2021 18:35:13'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPie stamp: 'UC 7/5/2021 18:35:15'!
ERROR!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'UC 7/5/2021 18:36:23'!
Object subclass: #Ronda
	instanceVariableNames: 'mano pie cartasMano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'UC 7/5/2021 18:36:24'!
Object subclass: #Ronda
	instanceVariableNames: 'mano pie cartasMano cartasPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:36:21' prior: 50860751!
initializeMano: unJugadorMano pie: unJugadorPie
	(unJugadorMano anySatisfy: [:cartaMano | unJugadorPie includes: cartaMano]) ifTrue: [
		self error: self class esasCartasNoPudieronVenirDeUnSoloMazo 
	].
	(unJugadorMano size = 3 and: (unJugadorPie size =  3)) ifFalse: [
		self error: self class ambosJugadoresDebenTenerTresCartas.
	].
	
	cartasMano:= unJugadorMano.
	cartasPie := unJugadorPie.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:36:41' prior: 50861361!
initializeMano: unasCartasDeUnaMano pie: unJugadorPie
	(unasCartasDeUnaMano anySatisfy: [:cartaMano | unJugadorPie includes: cartaMano]) ifTrue: [
		self error: self class esasCartasNoPudieronVenirDeUnSoloMazo 
	].
	(unasCartasDeUnaMano size = 3 and: (unJugadorPie size =  3)) ifFalse: [
		self error: self class ambosJugadoresDebenTenerTresCartas.
	].
	
	cartasMano:= unasCartasDeUnaMano.
	cartasPie := unJugadorPie.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:36:49' prior: 50861377!
initializeMano: unasCartasDeUnaMano pie: unasCartasDeUnPie
	(unasCartasDeUnaMano anySatisfy: [:cartaMano | unasCartasDeUnPie includes: cartaMano]) ifTrue: [
		self error: self class esasCartasNoPudieronVenirDeUnSoloMazo 
	].
	(unasCartasDeUnaMano size = 3 and: (unasCartasDeUnPie size =  3)) ifFalse: [
		self error: self class ambosJugadoresDebenTenerTresCartas.
	].
	
	cartasMano:= unasCartasDeUnaMano.
	cartasPie := unasCartasDeUnPie.! !

Object subclass: #Ronda
	instanceVariableNames: 'cartasMano cartasPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

Object subclass: #Ronda
	instanceVariableNames: 'cartasMano cartasPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

Object subclass: #Ronda
	instanceVariableNames: 'cartasMano cartasPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 18:37:22'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 18:37:22'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 18:37:22'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaYNoEsSuTurnoDaError stamp: 'UC 7/5/2021 18:37:22'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 18:37:22'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPie stamp: 'UC 7/5/2021 18:37:22'!
ERROR!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPie stamp: 'UC 7/5/2021 18:37:22'!
ERROR!

Object subclass: #Ronda
	instanceVariableNames: 'cartasMano cartasPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'UC 7/5/2021 18:38:18'!
Object subclass: #Ronda
	instanceVariableNames: 'cartasMano cartasPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:38:46' prior: 50860903!
manoJuega: unaCarta
	(cartasMano includes: unaCarta) ifFalse: [self error: self class noTenesEsaCarta.]
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:39:17' prior: 50861264!
test06CuandoLaManoJuegaUnaCartaLeTocaAlPie
	| mano pie ronda |
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 4)
	con: (CartaDeTruco oroCon: 3).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: CartaDeTruco sieteDeOro.
	
	self deny: ronda leTocaALaMano.
	self deny: (mano includes: CartaDeTruco sieteDeOro).
	! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 18:39:19'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 18:39:19'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 18:39:19'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaYNoEsSuTurnoDaError stamp: 'UC 7/5/2021 18:39:19'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 18:39:19'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPie stamp: 'UC 7/5/2021 18:39:19'!
FAILURE!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPie stamp: 'UC 7/5/2021 18:39:19'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:39:50' prior: 50861461!
manoJuega: unaCarta
	(cartasMano includes: unaCarta) ifFalse: [self error: self class noTenesEsaCarta.]
	cartasMano remove: unaCarta.
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:39:53' prior: 50861510!
manoJuega: unaCarta
	(cartasMano includes: unaCarta) ifFalse: [self error: self class noTenesEsaCarta.].
	cartasMano remove: unaCarta.
	! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 18:39:57'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 18:39:57'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 18:39:57'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaYNoEsSuTurnoDaError stamp: 'UC 7/5/2021 18:39:57'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 18:39:57'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPie stamp: 'UC 7/5/2021 18:39:57'!
FAILURE!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPie stamp: 'UC 7/5/2021 18:39:57'!
FAILURE!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPie stamp: 'UC 7/5/2021 18:40:04'!
PASSED!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'UC 7/5/2021 18:40:15'!
Object subclass: #Ronda
	instanceVariableNames: 'cartasMano cartasPie leTocaALaMano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:40:14' prior: 50860366!
leTocaALaMano
	^leTocaALaMano! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:40:26' prior: 50861393!
initializeMano: unasCartasDeUnaMano pie: unasCartasDeUnPie
	(unasCartasDeUnaMano anySatisfy: [:cartaMano | unasCartasDeUnPie includes: cartaMano]) ifTrue: [
		self error: self class esasCartasNoPudieronVenirDeUnSoloMazo 
	].
	(unasCartasDeUnaMano size = 3 and: (unasCartasDeUnPie size =  3)) ifFalse: [
		self error: self class ambosJugadoresDebenTenerTresCartas.
	].

	leTocaALaMano = true.
	
	cartasMano:= unasCartasDeUnaMano.
	cartasPie := unasCartasDeUnPie.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:40:40' prior: 50861518!
manoJuega: unaCarta
	(cartasMano includes: unaCarta) ifFalse: [self error: self class noTenesEsaCarta.].
	cartasMano remove: unaCarta.
	leTocaALaMano := false.
	! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 18:40:43'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 18:40:43'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 18:40:43'!
ERROR!

!testRun: #RondaTest #test04CuandoElPieJuegaYNoEsSuTurnoDaError stamp: 'UC 7/5/2021 18:40:43'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 18:40:43'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPie stamp: 'UC 7/5/2021 18:40:43'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 18:40:43'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:41:18' prior: 50861565!
initializeMano: unasCartasDeUnaMano pie: unasCartasDeUnPie
	(unasCartasDeUnaMano anySatisfy: [:cartaMano | unasCartasDeUnPie includes: cartaMano]) ifTrue: [
		self error: self class esasCartasNoPudieronVenirDeUnSoloMazo 
	].
	(unasCartasDeUnaMano size = 3 and: (unasCartasDeUnPie size =  3)) ifFalse: [
		self error: self class ambosJugadoresDebenTenerTresCartas.
	].

	leTocaALaMano := true.
	
	cartasMano:= unasCartasDeUnaMano.
	cartasPie := unasCartasDeUnPie.! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 18:41:21'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 18:41:21'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 18:41:21'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaYNoEsSuTurnoDaError stamp: 'UC 7/5/2021 18:41:21'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 18:41:21'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPie stamp: 'UC 7/5/2021 18:41:21'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:42:18'!
test04CuandoElPieJuegaEnElPrimerTurnoDaError
	| mano pie ronda |
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 4)
	con: (CartaDeTruco oroCon: 3).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	self should: [ronda pieJuega: CartaDeTruco anchoDeBasto.]
		raise: Error
		withExceptionDo:[:error | self assert: Ronda errorLeTocaAlOponente equals: error messageText ]
	 
	! !

!methodRemoval: RondaTest #test04CuandoElPieJuegaYNoEsSuTurnoDaError stamp: 'UC 7/5/2021 18:42:22'!
test04CuandoElPieJuegaYNoEsSuTurnoDaError
	| mano pie ronda |
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 4)
	con: (CartaDeTruco oroCon: 3).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	self should: [ronda pieJuega: CartaDeTruco anchoDeBasto.]
		raise: Error
		withExceptionDo:[:error | self assert: Ronda errorLeTocaAlOponente equals: error messageText ]
	 
	!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:43:54'!
test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError
	| mano pie ronda |
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 4)
	con: (CartaDeTruco oroCon: 3).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: CartaDeTruco sieteDeOro.
	
	self should: [ronda manoJuega: CartaDeTruco anchoDeEspada] 
		raise: Error
		withExceptionDo: [:error | ]
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:44:15' prior: 50861615!
initializeMano: unasCartasDeUnaMano pie: unasCartasDeUnPie
	(unasCartasDeUnaMano anySatisfy: [:cartaMano | unasCartasDeUnPie includes: cartaMano]) ifTrue: [
		self error: self class esasCartasNoPudieronVenirDeUnSoloMazo 
	].
	(unasCartasDeUnaMano size = 3 and: (unasCartasDeUnPie size =  3)) ifFalse: [
		self error: self class ambosJugadoresDebenTenerTresCartas.
	].

	leTocaALaMano := true.
	
	cartasMano:= unasCartasDeUnaMano copy.
	cartasPie := unasCartasDeUnPie copy.! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 18:44:17'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 18:44:17'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 18:44:17'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 18:44:17'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 18:44:17'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPie stamp: 'UC 7/5/2021 18:44:17'!
FAILURE!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 18:44:17'!
FAILURE!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPie stamp: 'UC 7/5/2021 18:44:28'!
FAILURE!
!Ronda methodsFor: 'nil' stamp: 'UC 7/5/2021 18:45:16'!
cartasDeLaMano
	^cartasMano ! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:45:26'!
cartasDelPie
	^cartasPie! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:45:46' prior: 50861468!
test06CuandoLaManoJuegaUnaCartaLeTocaAlPie
	| mano pie ronda |
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 4)
	con: (CartaDeTruco oroCon: 3).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: CartaDeTruco sieteDeOro.
	
	self deny: ronda leTocaALaMano.
	self deny: (ronda cartasDeLaMano includes: CartaDeTruco sieteDeOro).
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:48:00' prior: 50861692!
test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError
	| mano pie ronda |
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 4)
	con: (CartaDeTruco oroCon: 3).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: CartaDeTruco sieteDeOro.
	
	self should: [ronda manoJuega: CartaDeTruco anchoDeEspada] 
		raise: Error
		withExceptionDo: [:error | self assert: Ronda errorLeTocaAlOponente equals: error messageText ]
	! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 18:48:07'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 18:48:07'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 18:48:07'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 18:48:07'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 18:48:07'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPie stamp: 'UC 7/5/2021 18:48:07'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 18:48:07'!
FAILURE!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 18:48:07'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:49:33' prior: 50861583!
manoJuega: unaCarta
	self leTocaALaMano ifFalse: [self error: self class errorLeTocaAlOponente ].
	(cartasMano includes: unaCarta) ifFalse: [self error: self class noTenesEsaCarta.].
	cartasMano remove: unaCarta.
	leTocaALaMano := false.
	! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 18:49:49'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 18:49:49'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 18:49:49'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 18:49:49'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 18:49:49'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPie stamp: 'UC 7/5/2021 18:49:49'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 18:49:49'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:51:52'!
test08CuandoElPiePierdePrimeraLeTocaALaMano
	| mano pie ronda |
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 4)
	con: (CartaDeTruco oroCon: 3).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: CartaDeTruco sieteDeOro.
	
	self should: [ronda manoJuega: CartaDeTruco anchoDeEspada] 
		raise: Error
		withExceptionDo: [:error | self assert: Ronda errorLeTocaAlOponente equals: error messageText ]
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:52:44' prior: 50861865!
test08CuandoElPiePierdePrimeraLeTocaALaMano
	| mano pie ronda |
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 4)
	con: (CartaDeTruco oroCon: 3).
	
	mano := self crearJugadorCon: CartaDeTruco sieteDeOro con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: CartaDeTruco sieteDeOro.
	ronda pieJuega: (CartaDeTruco oroCon: 4).
	
	self should: [ronda manoJuega: CartaDeTruco anchoDeEspada] 
		raise: Error
		withExceptionDo: [:error | self assert: Ronda errorLeTocaAlOponente equals: error messageText ]
	! !

!classDefinition: #RondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'UC 7/5/2021 18:53:39'!
TestCase subclass: #RondaTest
	instanceVariableNames: 'cuatroDeOro'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'UC 7/5/2021 18:53:40'!
TestCase subclass: #RondaTest
	instanceVariableNames: 'cuatroDeOro sieteDeOro'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:53:36' overrides: 16927572!
setUp
	cuatroDeOro := (CartaDeTruco oroCon: 4).
	sieteDeOro := CartaDeTruco sieteDeOro ! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:53:46' prior: 50861925 overrides: 16927572!
setUp
	cuatroDeOro := (CartaDeTruco oroCon: 4).
	sieteDeOro := CartaDeTruco sieteDeOro.
	! !

!classDefinition: #RondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'UC 7/5/2021 18:54:00'!
TestCase subclass: #RondaTest
	instanceVariableNames: 'cuatroDeOro sieteDeOro anchoDeBasto'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:53:58' prior: 50861932 overrides: 16927572!
setUp
	cuatroDeOro := (CartaDeTruco oroCon: 4).
	sieteDeOro := CartaDeTruco sieteDeOro.
	anchoDeBasto := CartaDeTruco anchoDeBasto.! !

!classDefinition: #RondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'UC 7/5/2021 18:54:43'!
TestCase subclass: #RondaTest
	instanceVariableNames: 'cuatroDeOro sieteDeOro anchoDeBasto tresDeBasto'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:54:42' prior: 50861164!
test03CuandoLaRondaEmpiezaLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 1)
	con: (CartaDeTruco oroCon: 4).
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto 
	con: CartaDeTruco anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	self assert: ronda leTocaALaMano.
	
	! !

!classDefinition: #RondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'UC 7/5/2021 18:55:04'!
TestCase subclass: #RondaTest
	instanceVariableNames: 'cuatroDeOro sieteDeOro anchoDeBasto tresDeBasto anchoDeEspada'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:55:03' prior: 50861947 overrides: 16927572!
setUp
	cuatroDeOro := (CartaDeTruco oroCon: 4).
	sieteDeOro := CartaDeTruco sieteDeOro.
	anchoDeBasto := CartaDeTruco anchoDeBasto.
	tresDeBasto := (CartaDeTruco bastoCon: 3).
	anchoDeEspada := CartaDeTruco anchoDeEspada.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:55:22' prior: 50861963!
test03CuandoLaRondaEmpiezaLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 1)
	con: (CartaDeTruco oroCon: 4).
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	self assert: ronda leTocaALaMano.
	
	! !

!classDefinition: #RondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'UC 7/5/2021 18:55:43'!
TestCase subclass: #RondaTest
	instanceVariableNames: 'cuatroDeOro sieteDeOro anchoDeBasto tresDeBasto anchoDeEspada anchoDeOro'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:55:40' prior: 50861998!
test03CuandoLaRondaEmpiezaLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro
	con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	self assert: ronda leTocaALaMano.
	
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:55:54' prior: 50861988 overrides: 16927572!
setUp
	cuatroDeOro := (CartaDeTruco oroCon: 4).
	sieteDeOro := CartaDeTruco sieteDeOro.
	anchoDeBasto := CartaDeTruco anchoDeBasto.
	tresDeBasto := (CartaDeTruco bastoCon: 3).
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeOro := (CartaDeTruco oroCon: 1).! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:56:17' prior: 50861129!
test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError
	| mano pie |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro .
	
	mano := self crearJugadorCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco bastoCon: 3) 
	con: CartaDeTruco anchoDeEspada.
	
	self should: [Ronda mano: mano pie: pie.]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda esasCartasNoPudieronVenirDeUnSoloMazo equals: error messageText ]
	
	 
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:56:38' prior: 50862047!
test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError
	| mano pie |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro .
	
	mano := self crearJugadorCon: anchoDeBasto con: tresDeBasto con: anchoDeEspada.
	
	self should: [Ronda mano: mano pie: pie.]
		raise: Error
		withExceptionDo: [:error | self assert: Ronda esasCartasNoPudieronVenirDeUnSoloMazo equals: error messageText ]
	
	 
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:56:50' prior: 50862022!
test03CuandoLaRondaEmpiezaLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	self assert: ronda leTocaALaMano.
	
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:57:13' prior: 50861653!
test04CuandoElPieJuegaEnElPrimerTurnoDaError
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	self should: [ronda pieJuega: CartaDeTruco anchoDeBasto.]
		raise: Error
		withExceptionDo:[:error | self assert: Ronda errorLeTocaAlOponente equals: error messageText ]
	 
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:57:20' prior: 50861228!
test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	self should: [ronda manoJuega: CartaDeTruco anchoDeBasto.]
		raise: Error
		withExceptionDo:[:error | self assert: Ronda noTenesEsaCarta equals: error messageText ]
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:57:26' prior: 50861763!
test06CuandoLaManoJuegaUnaCartaLeTocaAlPie
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: CartaDeTruco sieteDeOro.
	
	self deny: ronda leTocaALaMano.
	self deny: (ronda cartasDeLaMano includes: CartaDeTruco sieteDeOro).
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:57:32' prior: 50861782!
test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: CartaDeTruco sieteDeOro.
	
	self should: [ronda manoJuega: CartaDeTruco anchoDeEspada] 
		raise: Error
		withExceptionDo: [:error | self assert: Ronda errorLeTocaAlOponente equals: error messageText ]
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:57:37' prior: 50861886!
test08CuandoElPiePierdePrimeraLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: CartaDeTruco sieteDeOro.
	ronda pieJuega: (CartaDeTruco oroCon: 4).
	
	self should: [ronda manoJuega: CartaDeTruco anchoDeEspada] 
		raise: Error
		withExceptionDo: [:error | self assert: Ronda errorLeTocaAlOponente equals: error messageText ]
	! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 18:57:41'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 18:57:41'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 18:57:41'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 18:57:41'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 18:57:41'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPie stamp: 'UC 7/5/2021 18:57:41'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 18:57:41'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaMano stamp: 'UC 7/5/2021 18:57:41'!
ERROR!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaMano stamp: 'UC 7/5/2021 18:57:41'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:58:06' prior: 50862163!
test08CuandoElPiePierdePrimeraLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeOro.
	
	self should: [ronda manoJuega: CartaDeTruco anchoDeEspada] 
		raise: Error
		withExceptionDo: [:error | self assert: Ronda errorLeTocaAlOponente equals: error messageText ]
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:58:18' prior: 50862094!
test04CuandoElPieJuegaEnElPrimerTurnoDaError
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	self should: [ronda pieJuega: anchoDeBasto.]
		raise: Error
		withExceptionDo:[:error | self assert: Ronda errorLeTocaAlOponente equals: error messageText ]
	 
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:58:22' prior: 50862111!
test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	self should: [ronda manoJuega: anchoDeBasto.]
		raise: Error
		withExceptionDo:[:error | self assert: Ronda noTenesEsaCarta equals: error messageText ]
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:58:26' prior: 50862128!
test06CuandoLaManoJuegaUnaCartaLeTocaAlPie
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	
	self deny: ronda leTocaALaMano.
	self deny: (ronda cartasDeLaMano includes: CartaDeTruco sieteDeOro).
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:58:31' prior: 50862144!
test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	
	self should: [ronda manoJuega: CartaDeTruco anchoDeEspada] 
		raise: Error
		withExceptionDo: [:error | self assert: Ronda errorLeTocaAlOponente equals: error messageText ]
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:58:39' prior: 50862213!
test08CuandoElPiePierdePrimeraLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeOro.
	
	self should: [ronda manoJuega: anchoDeEspada] 
		raise: Error
		withExceptionDo: [:error | self assert: Ronda errorLeTocaAlOponente equals: error messageText ]
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:01:31' prior: 50862300!
test08CuandoElPiePierdePrimeraLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeOro.
	
	self assert: ronda leTocaALaMano.
	self should: [] description: ''.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:01:33'!
xtest08CuandoElPiePierdePrimeraLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeOro.
	
	self assert: ronda leTocaALaMano.
	self should: [] description: ''.! !

!methodRemoval: RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaMano stamp: 'UC 7/5/2021 19:01:33'!
test08CuandoElPiePierdePrimeraLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeOro.
	
	self assert: ronda leTocaALaMano.
	self should: [] description: ''.!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:01:43' prior: 50862282!
test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	
	self should: [ronda manoJuega: CartaDeTruco anchoDeEspada] 
		
		description: [:error | self assert: Ronda errorLeTocaAlOponente equals: error messageText ]
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:01:45' prior: 50862365!
test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	
	self should: [ronda manoJuega: CartaDeTruco anchoDeEspada] 
		description: [:error | self assert: Ronda errorLeTocaAlOponente equals: error messageText ]
	! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 19:01:48'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 19:01:48'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 19:01:48'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 19:01:48'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:01:48'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPie stamp: 'UC 7/5/2021 19:01:48'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 19:01:48'!
ERROR!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 19:01:48'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:01:43' prior: 50862383!
test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	
	self should: [ronda manoJuega: CartaDeTruco anchoDeEspada] 
		
		description: [:error | self assert: Ronda errorLeTocaAlOponente equals: error messageText ]
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 18:58:31' prior: 50862428!
test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	
	self should: [ronda manoJuega: CartaDeTruco anchoDeEspada] 
		raise: Error
		withExceptionDo: [:error | self assert: Ronda errorLeTocaAlOponente equals: error messageText ]
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:02:26'!
test08CuandoElPiePierdePrimeraLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeOro.
	
	self assert: ronda leTocaALaMano.
	self should: [] description: ''.! !

!methodRemoval: RondaTest #xtest08CuandoElPiePierdePrimeraLeTocaALaMano stamp: 'UC 7/5/2021 19:02:26'!
xtest08CuandoElPiePierdePrimeraLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeOro.
	
	self assert: ronda leTocaALaMano.
	self should: [] description: ''.!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:03:14' prior: 50862464!
test08CuandoElPiePierdePrimeraLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeOro.
	
	self assert: ronda leTocaALaMano.
	self should: [ronda pieJuega: anchoDeOro .] 
		raise: Error
		withExceptionDo: [:error | self assert: Ronda equals: error messageText ].! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:03:15' prior: 50862495!
test08CuandoElPiePierdePrimeraLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeOro.
	
	self assert: ronda leTocaALaMano.
	self should: [ronda pieJuega: anchoDeOro.] 
		raise: Error
		withExceptionDo: [:error | self assert: Ronda equals: error messageText ].! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:03:26' prior: 50862514!
test08CuandoElPiePierdePrimeraLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeOro.
	
	self assert: ronda leTocaALaMano.
	self should: [ronda pieJuega: anchoDeOro.] 
		raise: Error
		withExceptionDo: [:error | self assert: Ronda errorLeTocaAlOponente equals: error messageText ].! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 19:03:31'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 19:03:31'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 19:03:31'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 19:03:31'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:03:31'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPie stamp: 'UC 7/5/2021 19:03:31'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 19:03:31'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaMano stamp: 'UC 7/5/2021 19:03:31'!
ERROR!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaMano stamp: 'UC 7/5/2021 19:03:31'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:04:18' prior: 50860833!
pieJuega: unaCarta
	leTocaALaMano ifTrue: [self error: self class errorLeTocaAlOponente]
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:05:06'!
xtest09CuandoElPieJuegaUnaCartaQueNoTieneDaError
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeOro.
	
	self assert: ronda leTocaALaMano.
	self should: [ronda pieJuega: anchoDeOro.] 
		raise: Error
		withExceptionDo: [:error | self assert: Ronda errorLeTocaAlOponente equals: error messageText ].! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:05:36' prior: 50862583!
pieJuega: unaCarta
	leTocaALaMano ifTrue: [self error: self class errorLeTocaAlOponente].
	
	leTocaALaMano := true.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:05:38' prior: 50862609!
pieJuega: unaCarta
	leTocaALaMano ifTrue: [self error: self class errorLeTocaAlOponente.].
	
	leTocaALaMano := true.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:05:41' prior: 50862616!
pieJuega: unaCarta
	leTocaALaMano ifTrue: [self error: self class errorLeTocaAlOponente.].
	leTocaALaMano := true.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:05:58' prior: 50862589!
xtest09CuandoElPieJuegaUnaCartaQueNoTieneDaError
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeOro.
	
		
	self assert: ronda leTocaALaMano.
	self should: [ronda pieJuega: anchoDeOro.] 
		raise: Error
		withExceptionDo: [:error | self assert: Ronda errorLeTocaAlOponente equals: error messageText ].! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:06:12'!
test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCarta
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	
	self deny: ronda leTocaALaMano.
	self deny: (ronda cartasDeLaMano includes: CartaDeTruco sieteDeOro).
	! !

!methodRemoval: RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPie stamp: 'UC 7/5/2021 19:06:12'!
test06CuandoLaManoJuegaUnaCartaLeTocaAlPie
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	
	self deny: ronda leTocaALaMano.
	self deny: (ronda cartasDeLaMano includes: CartaDeTruco sieteDeOro).
	!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:06:25' prior: 50862649!
test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCarta
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	
	self deny: ronda leTocaALaMano.
	self deny: (ronda cartasDeLaMano includes: CartaDeTruco sieteDeOro).
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:06:59' prior: 50862081!
test03CuandoLaRondaEmpiezaLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	self assert: ronda leTocaALaMano.
	self assert: ronda cartasDeLaMano equals: mano.
	self assert: ronda cartasDelPie equals: pie.
	
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:07:28' prior: 50862533!
test08CuandoElPiePierdePrimeraLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeOro.
	
	self assert: ronda leTocaALaMano.
	self should: [ronda pieJuega: anchoDeOro.] 
		raise: Error
		withExceptionDo: [:error | self assert: Ronda errorLeTocaAlOponente equals: error messageText ].! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 19:07:29'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 19:07:29'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 19:07:29'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 19:07:29'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:07:29'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCarta stamp: 'UC 7/5/2021 19:07:29'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 19:07:29'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaMano stamp: 'UC 7/5/2021 19:07:29'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:08:12' prior: 50862714!
test08CuandoElPiePierdePrimeraLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeOro.
	
	self deny: (ronda cartasDelPie includes: cuatroDeOro).
	self assert: ronda leTocaALaMano.
	self should: [ronda pieJuega: anchoDeOro.] 
		raise: Error
		withExceptionDo: [:error | self assert: Ronda errorLeTocaAlOponente equals: error messageText ].! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 19:08:31'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 19:08:31'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 19:08:31'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 19:08:31'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:08:31'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCarta stamp: 'UC 7/5/2021 19:08:31'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 19:08:31'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaMano stamp: 'UC 7/5/2021 19:08:31'!
FAILURE!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaMano stamp: 'UC 7/5/2021 19:08:31'!
FAILURE!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:08:50'!
test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeOro.
	
	self deny: (ronda cartasDelPie includes: cuatroDeOro).
	self assert: ronda leTocaALaMano.
	self should: [ronda pieJuega: anchoDeOro.] 
		raise: Error
		withExceptionDo: [:error | self assert: Ronda errorLeTocaAlOponente equals: error messageText ].! !

!methodRemoval: RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaMano stamp: 'UC 7/5/2021 19:08:50'!
test08CuandoElPiePierdePrimeraLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeOro.
	
	self deny: (ronda cartasDelPie includes: cuatroDeOro).
	self assert: ronda leTocaALaMano.
	self should: [ronda pieJuega: anchoDeOro.] 
		raise: Error
		withExceptionDo: [:error | self assert: Ronda errorLeTocaAlOponente equals: error messageText ].!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:08:58'!
test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	
	self deny: ronda leTocaALaMano.
	self deny: (ronda cartasDeLaMano includes: CartaDeTruco sieteDeOro).
	! !

!methodRemoval: RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCarta stamp: 'UC 7/5/2021 19:08:58'!
test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCarta
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	
	self deny: ronda leTocaALaMano.
	self deny: (ronda cartasDeLaMano includes: CartaDeTruco sieteDeOro).
	!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:09:20' prior: 50862623!
pieJuega: unaCarta
	leTocaALaMano ifTrue: [self error: self class errorLeTocaAlOponente.].
	leTocaALaMano := true.
	cartasPie remove: unaCarta.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:10:25'!
test09CuandoElPieJuegaUnaCartaQueNoTieneDaError
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	
	self should: [ronda pieJuega: sieteDeOro.] 
		raise: Error
		withExceptionDo: [:error | self assert: Ronda noTenesEsaCarta equals: error messageText ].! !

!methodRemoval: RondaTest #xtest09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:10:28'!
xtest09CuandoElPieJuegaUnaCartaQueNoTieneDaError
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeOro.
	
		
	self assert: ronda leTocaALaMano.
	self should: [ronda pieJuega: anchoDeOro.] 
		raise: Error
		withExceptionDo: [:error | self assert: Ronda errorLeTocaAlOponente equals: error messageText ].!

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 19:10:37'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 19:10:37'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 19:10:37'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 19:10:37'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:10:37'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 19:10:37'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 19:10:37'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 19:10:37'!
PASSED!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:10:37'!
FAILURE!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:10:37'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:10:55' prior: 50862891!
pieJuega: unaCarta
	leTocaALaMano ifTrue: [self error: self class errorLeTocaAlOponente.].
	(cartasPie includes: unaCarta) ifFalse: [self error: self class noTenesEsaCarta.].
	leTocaALaMano := true.
	cartasPie remove: unaCarta.! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 19:10:57'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 19:10:57'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 19:10:57'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 19:10:57'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:10:57'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 19:10:57'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 19:10:57'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 19:10:57'!
PASSED!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:10:57'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:11:23'!
test10CuandoElPieGanaLeTocaDeVuelta
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	
	self should: [ronda pieJuega: sieteDeOro.] 
		raise: Error
		withExceptionDo: [:error | self assert: Ronda noTenesEsaCarta equals: error messageText ].! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:12:04' prior: 50863013!
test10CuandoElPieGanaLeTocaDeVuelta
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: tresDeBasto.
	ronda pieJuega: sieteDeOro.
	
	self deny: ronda leTocaALaMano ! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 19:12:09'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 19:12:09'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 19:12:09'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 19:12:09'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:12:09'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 19:12:09'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 19:12:09'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 19:12:09'!
PASSED!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:12:09'!
PASSED!

!testRun: #RondaTest #test10CuandoElPieGanaLeTocaDeVuelta stamp: 'UC 7/5/2021 19:12:09'!
ERROR!

!testRun: #RondaTest #test10CuandoElPieGanaLeTocaDeVuelta stamp: 'UC 7/5/2021 19:12:09'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:12:22' prior: 50863030!
test10CuandoElPieGanaLeTocaDeVuelta
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: tresDeBasto.
	ronda pieJuega: anchoDeBasto.
	
	self deny: ronda leTocaALaMano ! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 19:12:25'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 19:12:25'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 19:12:25'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 19:12:25'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:12:25'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 19:12:25'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 19:12:25'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 19:12:25'!
PASSED!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:12:25'!
PASSED!

!testRun: #RondaTest #test10CuandoElPieGanaLeTocaDeVuelta stamp: 'UC 7/5/2021 19:12:25'!
FAILURE!

!testRun: #RondaTest #test10CuandoElPieGanaLeTocaDeVuelta stamp: 'UC 7/5/2021 19:12:25'!
FAILURE!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'UC 7/5/2021 19:14:51'!
Object subclass: #Ronda
	instanceVariableNames: 'cartasMano cartasPie leTocaALaMano elManoJugo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:14:49' prior: 50861831!
manoJuega: unaCarta
	self leTocaALaMano ifFalse: [self error: self class errorLeTocaAlOponente ].
	(cartasMano includes: unaCarta) ifFalse: [self error: self class noTenesEsaCarta.].
	cartasMano remove: unaCarta.
	leTocaALaMano := false.
	elManoJugo := unaCarta.
	! !

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'UC 7/5/2021 19:16:44'!
Object subclass: #Ronda
	instanceVariableNames: 'cartasMano cartasPie leTocaALaMano elManoJugo laManoJugo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:16:43' prior: 50863144!
manoJuega: unaCarta
	self leTocaALaMano ifFalse: [self error: self class errorLeTocaAlOponente ].
	(cartasMano includes: unaCarta) ifFalse: [self error: self class noTenesEsaCarta.].
	cartasMano remove: unaCarta.
	leTocaALaMano := false.
	laManoJugo := unaCarta.
	! !

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'UC 7/5/2021 19:16:52'!
Object subclass: #Ronda
	instanceVariableNames: 'cartasMano cartasPie leTocaALaMano laManoJugo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:17:05' prior: 50862971!
pieJuega: unaCarta
	leTocaALaMano ifTrue: [self error: self class errorLeTocaAlOponente.].
	(cartasPie includes: unaCarta) ifFalse: [self error: self class noTenesEsaCarta.].
	leTocaALaMano := unaCarta mataA: laManoJugo.
	cartasPie remove: unaCarta.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:17:34' prior: 50863184!
pieJuega: unaCarta
	leTocaALaMano ifTrue: [self error: self class errorLeTocaAlOponente.].
	(cartasPie includes: unaCarta) ifFalse: [self error: self class noTenesEsaCarta.].
	leTocaALaMano :=  laManoJugo mataA: unaCarta.
	cartasPie remove: unaCarta.! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 19:17:46'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 19:17:46'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 19:17:46'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 19:17:46'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:17:46'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 19:17:46'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 19:17:46'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 19:17:46'!
ERROR!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:17:46'!
PASSED!

!testRun: #RondaTest #test10CuandoElPieGanaLeTocaDeVuelta stamp: 'UC 7/5/2021 19:17:46'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 19:17:46'!
PASSED!

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 19:17:48'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 19:17:48'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 19:17:48'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 19:17:48'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:17:48'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 19:17:48'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 19:17:48'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 19:17:48'!
PASSED!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:17:48'!
PASSED!

!testRun: #RondaTest #test10CuandoElPieGanaLeTocaDeVuelta stamp: 'UC 7/5/2021 19:17:48'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:18:51'!
test10DespuesDeUnEnfrentamientoLeTocaAlQueGano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: tresDeBasto.
	ronda pieJuega: anchoDeBasto.
	
	self deny: ronda leTocaALaMano ! !

!methodRemoval: RondaTest #test10CuandoElPieGanaLeTocaDeVuelta stamp: 'UC 7/5/2021 19:18:51'!
test10CuandoElPieGanaLeTocaDeVuelta
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: tresDeBasto.
	ronda pieJuega: anchoDeBasto.
	
	self deny: ronda leTocaALaMano !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:19:44' prior: 50863280!
test10DespuesDeUnEnfrentamientoLeTocaAlQueGano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: tresDeBasto.
	ronda pieJuega: anchoDeBasto.
	
	self deny: ronda leTocaALaMano.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: tresDeBasto.
	ronda pieJuega: cuatroDeOro.
	
	self deny: ronda leTocaALaMano.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:19:48' prior: 50863309!
test10DespuesDeUnEnfrentamientoLeTocaAlQueGano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: tresDeBasto.
	ronda pieJuega: anchoDeBasto.
	
	self deny: ronda leTocaALaMano.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: tresDeBasto.
	ronda pieJuega: cuatroDeOro.
	
	self assert: ronda leTocaALaMano.! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 19:19:51'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 19:19:51'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 19:19:51'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 19:19:51'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:19:51'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 19:19:51'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 19:19:51'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 19:19:51'!
PASSED!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:19:51'!
PASSED!

!testRun: #RondaTest #test10DespuesDeUnEnfrentamientoLeTocaAlQueGano stamp: 'UC 7/5/2021 19:19:51'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:20:54' prior: 50863328!
test10DespuesDeUnEnfrentamientoLeTocaAlQueGano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: tresDeBasto.
	ronda pieJuega: anchoDeBasto.
	
	self deny: ronda leTocaALaMano.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:34:24' prior: 50863383!
test10DespuesDeUnEnfrentamientoLeTocaAlQueGano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: tresDeBasto.
	ronda pieJuega: anchoDeBasto.
	
	self deny: ronda leTocaALaMano.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:34:43'!
test10CuandoGanaElPieLeTocaAlPie
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: tresDeBasto.
	ronda pieJuega: anchoDeBasto.
	
	self deny: ronda leTocaALaMano.! !

!methodRemoval: RondaTest #test10DespuesDeUnEnfrentamientoLeTocaAlQueGano stamp: 'UC 7/5/2021 19:34:43'!
test10DespuesDeUnEnfrentamientoLeTocaAlQueGano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: tresDeBasto.
	ronda pieJuega: anchoDeBasto.
	
	self deny: ronda leTocaALaMano.!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:35:42' prior: 50863412!
test10CuandoGanaElPieLeTocaAlPie
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: tresDeBasto.
	ronda pieJuega: anchoDeBasto.
	
	self deny: ronda leTocaALaMano.
	
	"Aca no puedo testear que la mano gane porque eso pasaria de una. Eso lo voy a testear en la segunda mano"! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:35:58' prior: 50863441!
test10CuandoGanaElPieLeTocaAlPie
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: tresDeBasto.
	ronda pieJuega: anchoDeBasto.
	
	self deny: ronda leTocaALaMano.
	
	"Aca no puedo testear que la mano gane porque eso pasaria de una (al menos en mi implementacion acutal) . Eso lo voy a testear en la segunda mano"! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:36:08'!
test11
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: tresDeBasto.
	ronda pieJuega: anchoDeBasto.
	
	self deny: ronda leTocaALaMano.
	
	"Aca no puedo testear que la mano gane porque eso pasaria de una (al menos en mi implementacion acutal) . Eso lo voy a testear en la segunda mano"! !

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'UC 7/5/2021 19:36:38'!
Object subclass: #Ronda
	instanceVariableNames: 'cartasMano cartasPie leTocaALaMano elOponenteJugo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:36:38' prior: 50863195!
pieJuega: unaCarta
	leTocaALaMano ifTrue: [self error: self class errorLeTocaAlOponente.].
	(cartasPie includes: unaCarta) ifFalse: [self error: self class noTenesEsaCarta.].
	leTocaALaMano :=  elOponenteJugo mataA: unaCarta.
	cartasPie remove: unaCarta.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:36:38' prior: 50863164!
manoJuega: unaCarta
	self leTocaALaMano ifFalse: [self error: self class errorLeTocaAlOponente ].
	(cartasMano includes: unaCarta) ifFalse: [self error: self class noTenesEsaCarta.].
	cartasMano remove: unaCarta.
	leTocaALaMano := false.
	elOponenteJugo := unaCarta.
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:38:50'!
test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: tresDeBasto.
	ronda pieJuega: anchoDeBasto.
	
	self deny: ronda leTocaALaMano.
	
	"Aca no puedo testear que la mano gane porque eso pasaria de una (al menos en mi implementacion acutal) . Eso lo voy a testear en la segunda mano"! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:39:26' prior: 50863527!
test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: tresDeBasto.
	ronda pieJuega: anchoDeBasto.
	ronda pieJuega: anchoDeOro.
	
	self assert: ronda leTocaALaMano.
	
	"Aca no puedo testear que la mano gane porque eso pasaria de una (al menos en mi implementacion acutal) . Eso lo voy a testear en la segunda mano"! !

!methodRemoval: RondaTest #test11 stamp: 'UC 7/5/2021 19:39:29'!
test11
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: tresDeBasto.
	ronda pieJuega: anchoDeBasto.
	
	self deny: ronda leTocaALaMano.
	
	"Aca no puedo testear que la mano gane porque eso pasaria de una (al menos en mi implementacion acutal) . Eso lo voy a testear en la segunda mano"!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:39:36' prior: 50863547!
test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: cuatroDeOro.
	
	mano := self crearJugadorCon: sieteDeOro con: tresDeBasto con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: tresDeBasto.
	ronda pieJuega: anchoDeBasto.
	ronda pieJuega: anchoDeOro.
	
	self assert: ronda leTocaALaMano.! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 19:39:38'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 19:39:38'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 19:39:38'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 19:39:38'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:39:38'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 19:39:38'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 19:39:38'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 19:39:38'!
PASSED!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:39:38'!
PASSED!

!testRun: #RondaTest #test10CuandoGanaElPieLeTocaAlPie stamp: 'UC 7/5/2021 19:39:38'!
PASSED!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 19:39:38'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:40:38' prior: 50863585!
test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: anchoDeBasto.
	ronda pieJuega: anchoDeOro.
	
	self assert: ronda leTocaALaMano.! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 19:40:39'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 19:40:39'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 19:40:39'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 19:40:39'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:40:39'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 19:40:39'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 19:40:39'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 19:40:39'!
PASSED!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:40:39'!
PASSED!

!testRun: #RondaTest #test10CuandoGanaElPieLeTocaAlPie stamp: 'UC 7/5/2021 19:40:39'!
PASSED!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 19:40:39'!
FAILURE!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 19:40:39'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:41:37' prior: 50863505!
pieJuega: unaCarta
	leTocaALaMano ifTrue: [self error: self class errorLeTocaAlOponente.].
	(cartasPie includes: unaCarta) ifFalse: [self error: self class noTenesEsaCarta.].
	
	leTocaALaMano :=  elOponenteJugo mataA: unaCarta.
	cartasPie remove: unaCarta.! !

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'UC 7/5/2021 19:41:56'!
Object subclass: #Ronda
	instanceVariableNames: 'cartasMano cartasPie leTocaALaMano elOponenteJugo alguienJugoEstaRonda'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:41:54' prior: 50863516!
manoJuega: unaCarta
	self leTocaALaMano ifFalse: [self error: self class errorLeTocaAlOponente ].
	(cartasMano includes: unaCarta) ifFalse: [self error: self class noTenesEsaCarta.].
	cartasMano remove: unaCarta.
	leTocaALaMano := false.
	elOponenteJugo := unaCarta.
	alguienJugoEstaRonda := true.
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:43:40' prior: 50863698!
pieJuega: unaCarta
	leTocaALaMano ifTrue: [self error: self class errorLeTocaAlOponente.].
	(cartasPie includes: unaCarta) ifFalse: [self error: self class noTenesEsaCarta.].
	
	leTocaALaMano :=  alguienJugoEstaRonda and: (elOponenteJugo mataA: unaCarta).
	self pasarDeEnfrentamiento.
	
	cartasPie remove: unaCarta.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:44:00'!
pasarDeEnfrentamiento.
	alguienJugoEstaRonda := false.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:44:16' prior: 50863745!
pasarDeEnfrentamiento.
	alguienJugoEstaRonda := false.
	elOponenteJugo := nil.! !

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'UC 7/5/2021 19:45:09'!
Object subclass: #Ronda
	instanceVariableNames: 'cartasMano cartasPie leTocaALaMano elOponenteJugo elOponenteJugoEstaRonda'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:45:09' prior: 50863719!
manoJuega: unaCarta
	self leTocaALaMano ifFalse: [self error: self class errorLeTocaAlOponente ].
	(cartasMano includes: unaCarta) ifFalse: [self error: self class noTenesEsaCarta.].
	cartasMano remove: unaCarta.
	leTocaALaMano := false.
	elOponenteJugo := unaCarta.
	elOponenteJugoEstaRonda := true.
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:45:09' prior: 50863732!
pieJuega: unaCarta
	leTocaALaMano ifTrue: [self error: self class errorLeTocaAlOponente.].
	(cartasPie includes: unaCarta) ifFalse: [self error: self class noTenesEsaCarta.].
	
	leTocaALaMano :=  elOponenteJugoEstaRonda and: (elOponenteJugo mataA: unaCarta).
	self pasarDeEnfrentamiento.
	
	cartasPie remove: unaCarta.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:45:09' prior: 50863750!
pasarDeEnfrentamiento.
	elOponenteJugoEstaRonda := false.
	elOponenteJugo := nil.! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 19:45:27'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 19:45:27'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 19:45:27'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 19:45:27'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:45:27'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 19:45:27'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 19:45:27'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 19:45:27'!
PASSED!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:45:27'!
PASSED!

!testRun: #RondaTest #test10CuandoGanaElPieLeTocaAlPie stamp: 'UC 7/5/2021 19:45:27'!
PASSED!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 19:45:27'!
ERROR!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 19:45:27'!
ERROR!

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 19:46:00'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 19:46:00'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 19:46:00'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 19:46:00'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:46:00'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 19:46:00'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 19:46:00'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 19:46:00'!
PASSED!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:46:00'!
PASSED!

!testRun: #RondaTest #test10CuandoGanaElPieLeTocaAlPie stamp: 'UC 7/5/2021 19:46:00'!
PASSED!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 19:46:00'!
ERROR!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 19:46:00'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:46:17' prior: 50863778!
pieJuega: unaCarta
	leTocaALaMano ifTrue: [self error: self class errorLeTocaAlOponente.].
	(cartasPie includes: unaCarta) ifFalse: [self error: self class noTenesEsaCarta.].
	
	leTocaALaMano :=  elOponenteJugoEstaRonda and: [elOponenteJugo mataA: unaCarta].
	self pasarDeEnfrentamiento.
	
	cartasPie remove: unaCarta.! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 19:46:19'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 19:46:19'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 19:46:19'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 19:46:19'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:46:19'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 19:46:19'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 19:46:19'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 19:46:19'!
PASSED!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:46:19'!
PASSED!

!testRun: #RondaTest #test10CuandoGanaElPieLeTocaAlPie stamp: 'UC 7/5/2021 19:46:19'!
PASSED!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 19:46:19'!
FAILURE!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 19:46:19'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:48:32' prior: 50863882!
pieJuega: unaCarta
	leTocaALaMano ifTrue: [self error: self class errorLeTocaAlOponente.].
	(cartasPie includes: unaCarta) ifFalse: [self error: self class noTenesEsaCarta.].
	
	leTocaALaMano :=  elOponenteJugoEstaRonda ifTrue: [elOponenteJugo mataA: unaCarta] ifFalse: [false].
	self pasarDeEnfrentamiento.
	
	cartasPie remove: unaCarta.! !

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 19:48:40'!
FAILURE!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 19:48:42'!
PASSED!

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 19:48:44'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 19:48:44'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 19:48:44'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 19:48:44'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:48:44'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 19:48:44'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 19:48:44'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 19:48:44'!
PASSED!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:48:44'!
PASSED!

!testRun: #RondaTest #test10CuandoGanaElPieLeTocaAlPie stamp: 'UC 7/5/2021 19:48:44'!
PASSED!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 19:48:44'!
FAILURE!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 19:48:44'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:49:07' prior: 50863938!
pieJuega: unaCarta
	leTocaALaMano ifTrue: [self error: self class errorLeTocaAlOponente.].
	(cartasPie includes: unaCarta) ifFalse: [self error: self class noTenesEsaCarta.].
	
	leTocaALaMano :=  elOponenteJugoEstaRonda ifTrue: [elOponenteJugo mataA: unaCarta] ifFalse: [true].
	self pasarDeEnfrentamiento.
	
	cartasPie remove: unaCarta.! !

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 19:49:09'!
PASSED!

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 19:49:14'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 19:49:14'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 19:49:14'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 19:49:14'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:49:14'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 19:49:14'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 19:49:14'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 19:49:14'!
PASSED!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:49:14'!
PASSED!

!testRun: #RondaTest #test10CuandoGanaElPieLeTocaAlPie stamp: 'UC 7/5/2021 19:49:14'!
PASSED!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 19:49:14'!
PASSED!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:49:54'!
verificarQueMeToque

	^ leTocaALaMano ifTrue: [self error: self class errorLeTocaAlOponente.]! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:49:54' prior: 50864002!
pieJuega: unaCarta
	self verificarQueMeToque.
	(cartasPie includes: unaCarta) ifFalse: [self error: self class noTenesEsaCarta.].
	
	leTocaALaMano :=  elOponenteJugoEstaRonda ifTrue: [elOponenteJugo mataA: unaCarta] ifFalse: [true].
	self pasarDeEnfrentamiento.
	
	cartasPie remove: unaCarta.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:50:49'!
verificarQueMeToque: unaValidacion

	^ unaValidacion ifTrue: [self error: self class errorLeTocaAlOponente.]! !

!methodRemoval: Ronda #verificarQueMeToque stamp: 'UC 7/5/2021 19:50:53'!
verificarQueMeToque

	^ leTocaALaMano ifTrue: [self error: self class errorLeTocaAlOponente.]!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:51:17' prior: 50864064!
pieJuega: unaCarta
	self verificarQueMeToque: leTocaALaMano.
	(cartasPie includes: unaCarta) ifFalse: [self error: self class noTenesEsaCarta.].
	
	leTocaALaMano :=  elOponenteJugoEstaRonda ifTrue: [elOponenteJugo mataA: unaCarta] ifFalse: [true].
	self pasarDeEnfrentamiento.
	
	cartasPie remove: unaCarta.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:51:42' prior: 50863765!
manoJuega: unaCarta
	self verificarQueMeToque: leTocaALaMano not.
	(cartasMano includes: unaCarta) ifFalse: [self error: self class noTenesEsaCarta.].
	cartasMano remove: unaCarta.
	leTocaALaMano := false.
	elOponenteJugo := unaCarta.
	elOponenteJugoEstaRonda := true.
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:52:08' prior: 50864101!
manoJuega: unaCarta
	self verificarQueMeToque: leTocaALaMano not.
	self jugar: unaCarta siLaTengoEn: cartasMano.
	
	leTocaALaMano := false.
	elOponenteJugo := unaCarta.
	elOponenteJugoEstaRonda := true.
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:52:36'!
jugar: unaCarta siLaTengoEn: misCartas.
	(misCartas includes: unaCarta) ifFalse: [self error: self class noTenesEsaCarta.].
	misCartas remove: unaCarta.
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:52:55' prior: 50864088!
pieJuega: unaCarta
	self verificarQueMeToque: leTocaALaMano.
	self jugar: unaCarta siLaTengoEn: cartasPie.
	
	leTocaALaMano :=  elOponenteJugoEstaRonda ifTrue: [elOponenteJugo mataA: unaCarta] ifFalse: [true].
	self pasarDeEnfrentamiento.
	
	cartasPie remove: unaCarta.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:53:02' prior: 50864130!
pieJuega: unaCarta
	self verificarQueMeToque: leTocaALaMano.
	self jugar: unaCarta siLaTengoEn: cartasPie.
	
	leTocaALaMano :=  elOponenteJugoEstaRonda ifTrue: [elOponenteJugo mataA: unaCarta] ifFalse: [true].
	self pasarDeEnfrentamiento.
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:54:11' prior: 50864142!
pieJuega: unaCarta
	self verificarQueMeToque: leTocaALaMano.
	self jugar: unaCarta siLaTengoEn: cartasPie.
	
	leTocaALaMano :=  elOponenteJugoEstaRonda not or: [elOponenteJugo mataA: unaCarta].
	self pasarDeEnfrentamiento.
	! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 19:54:15'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 19:54:15'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 19:54:15'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 19:54:15'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:54:15'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 19:54:15'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 19:54:15'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 19:54:15'!
PASSED!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:54:15'!
PASSED!

!testRun: #RondaTest #test10CuandoGanaElPieLeTocaAlPie stamp: 'UC 7/5/2021 19:54:15'!
PASSED!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 19:54:15'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:54:58'!
test11CuandoLaManoGanaLaPrimeraLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: anchoDeBasto.
	ronda pieJuega: anchoDeOro.
	
	self assert: ronda leTocaALaMano.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:55:23'!
test12CuandoLaManoGanaLaPrimeraLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: tresDeBasto.
	ronda pieJuega: anchoDeOro.
	
	self assert: ronda leTocaALaMano.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:55:33' prior: 50864217!
test12CuandoLaManoGanaLaPrimeraLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: tresDeBasto.
	
	self assert: ronda leTocaALaMano.! !

!testRun: #RondaTest #test12CuandoLaManoGanaLaPrimeraLeTocaALaMano stamp: 'UC 7/5/2021 19:55:35'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:55:48'!
test12CuandoLaManoGanaLaPrimeraYJuegaLaSegundaLeTocaAlPie
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: tresDeBasto.
	
	self assert: ronda leTocaALaMano.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:56:14' prior: 50864251!
test12CuandoLaManoGanaLaPrimeraYJuegaLaSegundaLeTocaAlPie
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: tresDeBasto.
	ronda manoJuega: cuatroDeOro.
	
	self deny: ronda leTocaALaMano.! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 19:56:16'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 19:56:16'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 19:56:16'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 19:56:16'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:56:16'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 19:56:16'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 19:56:16'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 19:56:16'!
PASSED!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:56:16'!
PASSED!

!testRun: #RondaTest #test10CuandoGanaElPieLeTocaAlPie stamp: 'UC 7/5/2021 19:56:16'!
PASSED!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 19:56:16'!
PASSED!

!testRun: #RondaTest #test11CuandoLaManoGanaLaPrimeraLeTocaALaMano stamp: 'UC 7/5/2021 19:56:16'!
PASSED!

!testRun: #RondaTest #test12CuandoLaManoGanaLaPrimeraLeTocaALaMano stamp: 'UC 7/5/2021 19:56:16'!
PASSED!

!testRun: #RondaTest #test12CuandoLaManoGanaLaPrimeraYJuegaLaSegundaLeTocaAlPie stamp: 'UC 7/5/2021 19:56:16'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:56:39'!
test12CuandoLaManoGanaLaPrimeraYElPieGanaLaSegundaLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: tresDeBasto.
	ronda manoJuega: cuatroDeOro.
	
	self deny: ronda leTocaALaMano.! !

!methodRemoval: RondaTest #test12CuandoLaManoGanaLaPrimeraYJuegaLaSegundaLeTocaAlPie stamp: 'UC 7/5/2021 19:56:39'!
test12CuandoLaManoGanaLaPrimeraYJuegaLaSegundaLeTocaAlPie
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: tresDeBasto.
	ronda manoJuega: cuatroDeOro.
	
	self deny: ronda leTocaALaMano.!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 19:57:31' prior: 50864331!
test12CuandoLaManoGanaLaPrimeraYElPieGanaLaSegundaLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: tresDeBasto.
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: anchoDeOro.
	
	self assert: ronda leTocaALaMano.! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 19:57:34'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 19:57:34'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 19:57:34'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 19:57:34'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:57:34'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 19:57:34'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 19:57:34'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 19:57:34'!
PASSED!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 19:57:34'!
PASSED!

!testRun: #RondaTest #test10CuandoGanaElPieLeTocaAlPie stamp: 'UC 7/5/2021 19:57:34'!
PASSED!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 19:57:34'!
PASSED!

!testRun: #RondaTest #test11CuandoLaManoGanaLaPrimeraLeTocaALaMano stamp: 'UC 7/5/2021 19:57:34'!
PASSED!

!testRun: #RondaTest #test12CuandoLaManoGanaLaPrimeraLeTocaALaMano stamp: 'UC 7/5/2021 19:57:34'!
PASSED!

!testRun: #RondaTest #test12CuandoLaManoGanaLaPrimeraYElPieGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 19:57:34'!
FAILURE!

!testRun: #RondaTest #test12CuandoLaManoGanaLaPrimeraYElPieGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 19:57:34'!
FAILURE!

!testRun: #RondaTest #test12CuandoLaManoGanaLaPrimeraLeTocaALaMano stamp: 'UC 7/5/2021 19:57:46'!
PASSED!

!methodRemoval: RondaTest #test12CuandoLaManoGanaLaPrimeraLeTocaALaMano stamp: 'UC 7/5/2021 19:57:49'!
test12CuandoLaManoGanaLaPrimeraLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: tresDeBasto.
	
	self assert: ronda leTocaALaMano.!

!testRun: #RondaTest #test12CuandoLaManoGanaLaPrimeraYElPieGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 19:57:54'!
FAILURE!

!testRun: #RondaTest #test12CuandoLaManoGanaLaPrimeraYElPieGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 19:57:54'!
FAILURE!

!testRun: #RondaTest #test12CuandoLaManoGanaLaPrimeraYElPieGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 19:58:02'!
FAILURE!

!testRun: #RondaTest #test12CuandoLaManoGanaLaPrimeraYElPieGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 19:58:02'!
FAILURE!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:00:47'!
test12CuandoLaManoGanaLaPrimeraYElPieGanaLaSegundaLeTocaAlPie
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: tresDeBasto.
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: anchoDeOro.
	
	self deny: ronda leTocaALaMano.! !

!methodRemoval: RondaTest #test12CuandoLaManoGanaLaPrimeraYElPieGanaLaSegundaLeTocaAlPie stamp: 'UC 7/5/2021 20:00:50'!
test12CuandoLaManoGanaLaPrimeraYElPieGanaLaSegundaLeTocaAlPie
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: tresDeBasto.
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: anchoDeOro.
	
	self deny: ronda leTocaALaMano.!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:00:59'!
test12CuandoLaManoGanaLaPrimeraYElPieGanaLaSegundaLeTocaAlPie
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: tresDeBasto.
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: anchoDeOro.
	
	self assert: ronda leTocaALaMano.! !

!methodRemoval: RondaTest #test12CuandoLaManoGanaLaPrimeraYElPieGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 20:00:59'!
test12CuandoLaManoGanaLaPrimeraYElPieGanaLaSegundaLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: tresDeBasto.
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: anchoDeOro.
	
	self assert: ronda leTocaALaMano.!

!testRun: #RondaTest #test12CuandoLaManoGanaLaPrimeraYElPieGanaLaSegundaLeTocaAlPie stamp: 'UC 7/5/2021 20:01:02'!
FAILURE!

!testRun: #RondaTest #test12CuandoLaManoGanaLaPrimeraYElPieGanaLaSegundaLeTocaAlPie stamp: 'UC 7/5/2021 20:01:02'!
FAILURE!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:01:06' prior: 50864502!
test12CuandoLaManoGanaLaPrimeraYElPieGanaLaSegundaLeTocaAlPie
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: tresDeBasto.
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: anchoDeOro.
	
	self deny: ronda leTocaALaMano.! !

!testRun: #RondaTest #test12CuandoLaManoGanaLaPrimeraYElPieGanaLaSegundaLeTocaAlPie stamp: 'UC 7/5/2021 20:01:08'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:01:47'!
test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: tresDeBasto.
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: anchoDeOro.
	
	self deny: ronda leTocaALaMano.! !

!methodRemoval: RondaTest #test12CuandoLaManoGanaLaPrimeraYElPieGanaLaSegundaLeTocaAlPie stamp: 'UC 7/5/2021 20:01:47'!
test12CuandoLaManoGanaLaPrimeraYElPieGanaLaSegundaLeTocaAlPie
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: tresDeBasto.
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: anchoDeOro.
	
	self deny: ronda leTocaALaMano.!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:02:21' prior: 50864565!
test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: tresDeBasto.
	ronda pieJuega: anchoDeOro.
	ronda manoJuega: sieteDeOro.
	
	self assert: ronda leTocaALaMano.! !

!testRun: #RondaTest #test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 20:02:23'!
FAILURE!

!testRun: #RondaTest #test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 20:02:23'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:04:15' prior: 50864113!
manoJuega: unaCarta
	self verificarQueMeToque: leTocaALaMano not.
	self jugar: unaCarta siLaTengoEn: cartasMano.
	
	leTocaALaMano := elOponenteJugoEstaRonda ifTrue: [(elOponenteJugo mataA: unaCarta) not] ifFalse: [false].
	elOponenteJugo := unaCarta.
	elOponenteJugoEstaRonda := true.
	! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 20:04:18'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 20:04:18'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 20:04:18'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 20:04:18'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 20:04:18'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 20:04:18'!
ERROR!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 20:04:18'!
ERROR!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 20:04:18'!
ERROR!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 20:04:18'!
ERROR!

!testRun: #RondaTest #test10CuandoGanaElPieLeTocaAlPie stamp: 'UC 7/5/2021 20:04:18'!
ERROR!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 20:04:18'!
ERROR!

!testRun: #RondaTest #test11CuandoLaManoGanaLaPrimeraLeTocaALaMano stamp: 'UC 7/5/2021 20:04:18'!
ERROR!

!testRun: #RondaTest #test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 20:04:18'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:04:40' prior: 50861711!
initializeMano: unasCartasDeUnaMano pie: unasCartasDeUnPie
	(unasCartasDeUnaMano anySatisfy: [:cartaMano | unasCartasDeUnPie includes: cartaMano]) ifTrue: [
		self error: self class esasCartasNoPudieronVenirDeUnSoloMazo 
	].
	(unasCartasDeUnaMano size = 3 and: (unasCartasDeUnPie size =  3)) ifFalse: [
		self error: self class ambosJugadoresDebenTenerTresCartas.
	].

	leTocaALaMano := true.
	elOponenteJugoEstaRonda := false.
	
	cartasMano:= unasCartasDeUnaMano copy.
	cartasPie := unasCartasDeUnPie copy.! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 20:04:41'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 20:04:41'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 20:04:41'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 20:04:41'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 20:04:41'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 20:04:41'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 20:04:41'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 20:04:41'!
PASSED!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 20:04:41'!
PASSED!

!testRun: #RondaTest #test10CuandoGanaElPieLeTocaAlPie stamp: 'UC 7/5/2021 20:04:42'!
PASSED!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 20:04:42'!
PASSED!

!testRun: #RondaTest #test11CuandoLaManoGanaLaPrimeraLeTocaALaMano stamp: 'UC 7/5/2021 20:04:42'!
PASSED!

!testRun: #RondaTest #test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 20:04:42'!
FAILURE!

!testRun: #RondaTest #test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 20:04:42'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:06:06' prior: 50864625!
manoJuega: unaCarta
	self verificarQueMeToque: leTocaALaMano not.
	self jugar: unaCarta siLaTengoEn: cartasMano.
	
	leTocaALaMano := elOponenteJugoEstaRonda ifTrue: [(elOponenteJugo mataA: unaCarta) not] ifFalse: [false].
	elOponenteJugo := unaCarta.
	elOponenteJugoEstaRonda := true.
	! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 20:06:08'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 20:06:08'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 20:06:08'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 20:06:08'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 20:06:08'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 20:06:08'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 20:06:08'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 20:06:08'!
PASSED!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 20:06:08'!
PASSED!

!testRun: #RondaTest #test10CuandoGanaElPieLeTocaAlPie stamp: 'UC 7/5/2021 20:06:08'!
PASSED!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 20:06:08'!
PASSED!

!testRun: #RondaTest #test11CuandoLaManoGanaLaPrimeraLeTocaALaMano stamp: 'UC 7/5/2021 20:06:08'!
PASSED!

!testRun: #RondaTest #test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 20:06:08'!
FAILURE!

!testRun: #RondaTest #test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 20:06:08'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:07:58' prior: 50864153!
pieJuega: unaCarta
	self verificarQueMeToque: leTocaALaMano.
	self jugar: unaCarta siLaTengoEn: cartasPie.
	
	leTocaALaMano :=  elOponenteJugoEstaRonda not or: [elOponenteJugo mataA: unaCarta].
	elOponenteJugoEstaRonda ifTrue: [self pasarDeEnfrentamiento.].
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:08:32' prior: 50864752!
manoJuega: unaCarta
	self verificarQueMeToque: leTocaALaMano not.
	self jugar: unaCarta siLaTengoEn: cartasMano.
	
	leTocaALaMano := false.
	elOponenteJugo := unaCarta.
	elOponenteJugoEstaRonda := true.
	! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 20:08:37'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 20:08:37'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 20:08:37'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 20:08:37'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 20:08:37'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 20:08:37'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 20:08:37'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 20:08:37'!
PASSED!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 20:08:37'!
PASSED!

!testRun: #RondaTest #test10CuandoGanaElPieLeTocaAlPie stamp: 'UC 7/5/2021 20:08:37'!
PASSED!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 20:08:37'!
PASSED!

!testRun: #RondaTest #test11CuandoLaManoGanaLaPrimeraLeTocaALaMano stamp: 'UC 7/5/2021 20:08:37'!
PASSED!

!testRun: #RondaTest #test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 20:08:37'!
FAILURE!

!testRun: #RondaTest #test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 20:08:37'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:06:06' prior: 50864825!
manoJuega: unaCarta
	self verificarQueMeToque: leTocaALaMano not.
	self jugar: unaCarta siLaTengoEn: cartasMano.
	
	leTocaALaMano := elOponenteJugoEstaRonda ifTrue: [(elOponenteJugo mataA: unaCarta) not] ifFalse: [false].
	elOponenteJugo := unaCarta.
	elOponenteJugoEstaRonda := true.
	! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 20:08:56'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 20:08:56'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 20:08:56'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 20:08:56'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 20:08:56'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 20:08:56'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 20:08:56'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 20:08:56'!
PASSED!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 20:08:56'!
PASSED!

!testRun: #RondaTest #test10CuandoGanaElPieLeTocaAlPie stamp: 'UC 7/5/2021 20:08:56'!
PASSED!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 20:08:56'!
PASSED!

!testRun: #RondaTest #test11CuandoLaManoGanaLaPrimeraLeTocaALaMano stamp: 'UC 7/5/2021 20:08:56'!
PASSED!

!testRun: #RondaTest #test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 20:08:56'!
FAILURE!

!testRun: #RondaTest #test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 20:08:56'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:09:31' prior: 50864814!
pieJuega: unaCarta
	self verificarQueMeToque: leTocaALaMano.
	self jugar: unaCarta siLaTengoEn: cartasPie.
	
	leTocaALaMano :=  elOponenteJugoEstaRonda not or: [elOponenteJugo mataA: unaCarta].
	elOponenteJugoEstaRonda ifTrue: [self pasarDeEnfrentamiento.] ifFalse: [elOponenteJugoEstaRonda := true].
	! !

!testRun: #RondaTest #test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 20:09:33'!
ERROR!

!testRun: #RondaTest #test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 20:10:10'!
ERROR!

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 20:10:14'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 20:10:14'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 20:10:14'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 20:10:14'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 20:10:14'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 20:10:14'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 20:10:14'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 20:10:14'!
PASSED!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 20:10:14'!
PASSED!

!testRun: #RondaTest #test10CuandoGanaElPieLeTocaAlPie stamp: 'UC 7/5/2021 20:10:14'!
PASSED!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 20:10:14'!
PASSED!

!testRun: #RondaTest #test11CuandoLaManoGanaLaPrimeraLeTocaALaMano stamp: 'UC 7/5/2021 20:10:14'!
PASSED!

!testRun: #RondaTest #test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 20:10:14'!
ERROR!

!testRun: #RondaTest #test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 20:10:14'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:10:48' prior: 50864947!
pieJuega: unaCarta
	self verificarQueMeToque: leTocaALaMano.
	self jugar: unaCarta siLaTengoEn: cartasPie.
	
	leTocaALaMano :=  elOponenteJugoEstaRonda not or: [elOponenteJugo mataA: unaCarta].
	elOponenteJugoEstaRonda 
		ifTrue: [self pasarDeEnfrentamiento.] 
		ifFalse: [
			elOponenteJugoEstaRonda := true.
			elOponenteJugo := unaCarta.
		].
	! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 20:10:53'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 20:10:53'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 20:10:53'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 20:10:53'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 20:10:53'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 20:10:53'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 20:10:53'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 20:10:53'!
PASSED!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 20:10:53'!
PASSED!

!testRun: #RondaTest #test10CuandoGanaElPieLeTocaAlPie stamp: 'UC 7/5/2021 20:10:53'!
PASSED!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 20:10:53'!
PASSED!

!testRun: #RondaTest #test11CuandoLaManoGanaLaPrimeraLeTocaALaMano stamp: 'UC 7/5/2021 20:10:53'!
PASSED!

!testRun: #RondaTest #test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 20:10:53'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:14:22'!
testPruebita
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: tresDeBasto.
	ronda pieJuega: anchoDeOro.
	ronda manoJuega: sieteDeOro.
	
	self assert: ronda leTocaALaMano.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:15:50' prior: 50865078!
testPruebita
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: tresDeBasto.
	
	self assert: ronda leTocaALaMano.! !

!testRun: #RondaTest #testPruebita stamp: 'UC 7/5/2021 20:15:52'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:17:18' prior: 50865094!
testPruebita
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: tresDeBasto.
	ronda manoJuega: cuatroDeOro.
	
	self deny: ronda leTocaALaMano.! !

!testRun: #RondaTest #testPruebita stamp: 'UC 7/5/2021 20:17:20'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:17:49'!
test13CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: tresDeBasto.
	ronda pieJuega: anchoDeOro.
	ronda manoJuega: sieteDeOro.
	
	self assert: ronda leTocaALaMano.! !

!methodRemoval: RondaTest #test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 20:17:49'!
test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: tresDeBasto.
	ronda pieJuega: anchoDeOro.
	ronda manoJuega: sieteDeOro.
	
	self assert: ronda leTocaALaMano.!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:17:53'!
test12CuandoLaManoGanaLaPrimeraLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: anchoDeBasto.
	ronda pieJuega: anchoDeOro.
	
	self assert: ronda leTocaALaMano.! !

!methodRemoval: RondaTest #test11CuandoLaManoGanaLaPrimeraLeTocaALaMano stamp: 'UC 7/5/2021 20:17:53'!
test11CuandoLaManoGanaLaPrimeraLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: anchoDeBasto.
	ronda pieJuega: anchoDeOro.
	
	self assert: ronda leTocaALaMano.!

!methodRemoval: RondaTest #test12CuandoLaManoGanaLaPrimeraLeTocaALaMano stamp: 'UC 7/5/2021 20:18:47'!
test12CuandoLaManoGanaLaPrimeraLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: anchoDeBasto.
	ronda pieJuega: anchoDeOro.
	
	self assert: ronda leTocaALaMano.!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:18:51'!
test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: tresDeBasto.
	ronda pieJuega: anchoDeOro.
	ronda manoJuega: sieteDeOro.
	
	self assert: ronda leTocaALaMano.! !

!methodRemoval: RondaTest #test13CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 20:18:51'!
test13CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: tresDeBasto.
	ronda pieJuega: anchoDeOro.
	ronda manoJuega: sieteDeOro.
	
	self assert: ronda leTocaALaMano.!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:20:12' prior: 50865206!
test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: tresDeBasto.
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: anchoDeOro.
	
	
	self deny: ronda leTocaALaMano.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:18:51' prior: 50865241!
test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: tresDeBasto.
	ronda pieJuega: anchoDeOro.
	ronda manoJuega: sieteDeOro.
	
	self assert: ronda leTocaALaMano.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:21:26' prior: 50865110!
testPruebita
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: tresDeBasto.
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: anchoDeOro.
	
	
	self deny: ronda leTocaALaMano.! !

!testRun: #RondaTest #testPruebita stamp: 'UC 7/5/2021 20:21:28'!
PASSED!

!methodRemoval: RondaTest #testPruebita stamp: 'UC 7/5/2021 20:21:31'!
testPruebita
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: tresDeBasto.
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: anchoDeOro.
	
	
	self deny: ronda leTocaALaMano.!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:23:00'!
testPruebita
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: tresDeBasto.
	ronda pieJuega: anchoDeOro.
	ronda manoJuega: sieteDeOro.
	
	self assert: ronda leTocaALaMano.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:23:47' prior: 50865307!
testPruebita
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: tresDeBasto.
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: anchoDeOro.
	ronda pieJuega: anchoDeBasto.
	
	
	self assert: ronda leTocaALaMano.! !

!testRun: #RondaTest #testPruebita stamp: 'UC 7/5/2021 20:23:49'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:25:02' prior: 50865323!
testPruebita
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: anchoDeOro.
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: tresDeBasto.
	
	ronda manoJuega: anchoDeEspada.
	
	
	self assert: ronda leTocaALaMano.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:25:05' prior: 50865342!
testPruebita
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: anchoDeOro.
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: tresDeBasto.
	
	ronda manoJuega: anchoDeEspada.
	
	
	self deny: ronda leTocaALaMano.! !

!testRun: #RondaTest #testPruebita stamp: 'UC 7/5/2021 20:25:06'!
ERROR!

!testRun: #RondaTest #testPruebita stamp: 'UC 7/5/2021 20:25:06'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:25:51'!
test13CuandoElPieGanaLaPrimeraLaManoGanaLaSegundaYLaManoJuegaLeTocaAlPie
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: anchoDeOro.
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: tresDeBasto.
	
	ronda manoJuega: anchoDeEspada.
	
	
	self deny: ronda leTocaALaMano.! !

!methodRemoval: RondaTest #testPruebita stamp: 'UC 7/5/2021 20:25:51'!
testPruebita
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: anchoDeOro.
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: tresDeBasto.
	
	ronda manoJuega: anchoDeEspada.
	
	
	self deny: ronda leTocaALaMano.!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:25:59' prior: 50865380!
test13CuandoElPieGanaLaPrimeraLaManoGanaLaSegundaYLaManoJuegaLeTocaAlPie
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: anchoDeOro.
	
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: tresDeBasto.
	
	ronda manoJuega: anchoDeEspada.
	
	
	self deny: ronda leTocaALaMano.! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 20:26:20'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 20:26:20'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 20:26:20'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 20:26:20'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 20:26:20'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 20:26:20'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 20:26:20'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 20:26:20'!
PASSED!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 20:26:20'!
PASSED!

!testRun: #RondaTest #test10CuandoGanaElPieLeTocaAlPie stamp: 'UC 7/5/2021 20:26:20'!
PASSED!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 20:26:20'!
PASSED!

!testRun: #RondaTest #test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 20:26:20'!
PASSED!

!testRun: #RondaTest #test13CuandoElPieGanaLaPrimeraLaManoGanaLaSegundaYLaManoJuegaLeTocaAlPie stamp: 'UC 7/5/2021 20:26:20'!
ERROR!

!testRun: #RondaTest #test13CuandoElPieGanaLaPrimeraLaManoGanaLaSegundaYLaManoJuegaLeTocaAlPie stamp: 'UC 7/5/2021 20:26:20'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:26:51' prior: 50865414!
test13CuandoElPieGanaLaPrimeraLaManoGanaLaSegundaYLaManoJuegaLeTocaAlPie
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: anchoDeOro.
	
	ronda pieJuega: tresDeBasto.
	ronda manoJuega: sieteDeOro.
	
	ronda manoJuega: anchoDeEspada.
	
	
	self deny: ronda leTocaALaMano.! !

!testRun: #RondaTest #test13CuandoElPieGanaLaPrimeraLaManoGanaLaSegundaYLaManoJuegaLeTocaAlPie stamp: 'UC 7/5/2021 20:26:52'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:28:03' prior: 50865018!
pieJuega: unaCarta
	self verificarQueMeToque: leTocaALaMano.
	self jugar: unaCarta siLaTengoEn: cartasPie.
	
	leTocaALaMano :=  elOponenteJugoEstaRonda not or: [elOponenteJugo mataA: unaCarta].
	elOponenteJugoEstaRonda 
		ifTrue: [
			
		] 
		ifFalse: [
			elOponenteJugoEstaRonda := true.
			elOponenteJugo := unaCarta.
		].
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:28:09' prior: 50863791!
pasarDeEnfrentamiento.
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:28:19' prior: 50865507!
pieJuega: unaCarta
	self verificarQueMeToque: leTocaALaMano.
	self jugar: unaCarta siLaTengoEn: cartasPie.
	
	leTocaALaMano :=  elOponenteJugoEstaRonda not or: [elOponenteJugo mataA: unaCarta].
	elOponenteJugoEstaRonda 
		ifTrue: [
			elOponenteJugoEstaRonda := false.
			elOponenteJugo := nil.
		] 
		ifFalse: [
			elOponenteJugoEstaRonda := true.
			elOponenteJugo := unaCarta.
		].
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:28:24' prior: 50865525!
pieJuega: unaCarta
	self verificarQueMeToque: leTocaALaMano.
	self jugar: unaCarta siLaTengoEn: cartasPie.
	
	leTocaALaMano :=  elOponenteJugoEstaRonda not or: [elOponenteJugo mataA: unaCarta].
	elOponenteJugoEstaRonda 
		ifTrue: [
			elOponenteJugoEstaRonda := false.
		] 
		ifFalse: [
			elOponenteJugoEstaRonda := true.
			elOponenteJugo := unaCarta.
		].
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:29:10' prior: 50865540!
pieJuega: unaCarta
	self verificarQueMeToque: leTocaALaMano.
	self jugar: unaCarta siLaTengoEn: cartasPie.
	
	leTocaALaMano :=  elOponenteJugoEstaRonda not or: [elOponenteJugo mataA: unaCarta].
	self pasarElTurno.
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:29:32'!
avisarleAlOtroQueJugue: unaCarta
	elOponenteJugoEstaRonda := elOponenteJugoEstaRonda not.
	elOponenteJugo := unaCarta.
	! !

!methodRemoval: Ronda #pasarDeEnfrentamiento stamp: 'UC 7/5/2021 20:29:36'!
pasarDeEnfrentamiento.
	!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:30:11' prior: 50865555!
pieJuega: unaCarta
	self verificarQueMeToque: leTocaALaMano.
	self jugar: unaCarta siLaTengoEn: cartasPie.
	
	leTocaALaMano :=  elOponenteJugoEstaRonda not or: [elOponenteJugo mataA: unaCarta].
	self avisarleAlOtroQueJugue: unaCarta.
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:30:26'!
avisarleAlOponenteQueJugue: unaCarta
	elOponenteJugoEstaRonda := elOponenteJugoEstaRonda not.
	elOponenteJugo := unaCarta.
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:30:26' prior: 50865575!
pieJuega: unaCarta
	self verificarQueMeToque: leTocaALaMano.
	self jugar: unaCarta siLaTengoEn: cartasPie.
	
	leTocaALaMano :=  elOponenteJugoEstaRonda not or: [elOponenteJugo mataA: unaCarta].
	self avisarleAlOponenteQueJugue: unaCarta.
	! !

!methodRemoval: Ronda #avisarleAlOtroQueJugue: stamp: 'UC 7/5/2021 20:30:26'!
avisarleAlOtroQueJugue: unaCarta
	elOponenteJugoEstaRonda := elOponenteJugoEstaRonda not.
	elOponenteJugo := unaCarta.
	!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:30:35' prior: 50864885!
manoJuega: unaCarta
	self verificarQueMeToque: leTocaALaMano not.
	self jugar: unaCarta siLaTengoEn: cartasMano.
	
	leTocaALaMano := elOponenteJugoEstaRonda ifTrue: [(elOponenteJugo mataA: unaCarta) not] ifFalse: [false].
	self avisarleAlOponenteQueJugue: unaCarta.
	! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 20:30:38'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 20:30:38'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 20:30:38'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 20:30:38'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 20:30:38'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 20:30:38'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 20:30:38'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 20:30:38'!
PASSED!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 20:30:38'!
PASSED!

!testRun: #RondaTest #test10CuandoGanaElPieLeTocaAlPie stamp: 'UC 7/5/2021 20:30:38'!
PASSED!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 20:30:38'!
PASSED!

!testRun: #RondaTest #test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 20:30:38'!
PASSED!

!testRun: #RondaTest #test13CuandoElPieGanaLaPrimeraLaManoGanaLaSegundaYLaManoJuegaLeTocaAlPie stamp: 'UC 7/5/2021 20:30:38'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:31:14'!
test14CuandoElPieEmpardaConLaManoLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: anchoDeOro con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: anchoDeOro.
	
	ronda pieJuega: tresDeBasto.
	ronda manoJuega: sieteDeOro.
	
	ronda manoJuega: anchoDeEspada.
	
	
	self deny: ronda leTocaALaMano.! !

!classDefinition: #RondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'UC 7/5/2021 20:31:54'!
TestCase subclass: #RondaTest
	instanceVariableNames: 'cuatroDeOro sieteDeOro anchoDeBasto tresDeBasto anchoDeEspada anchoDeOro cuatroDeBasto'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:31:52' prior: 50862035 overrides: 16927572!
setUp
	cuatroDeOro := (CartaDeTruco oroCon: 4).
	cuatroDeBasto := (CartaDeTruco bastoCon: 4).
	sieteDeOro := CartaDeTruco sieteDeOro.
	anchoDeBasto := CartaDeTruco anchoDeBasto.
	tresDeBasto := (CartaDeTruco bastoCon: 3).
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	anchoDeOro := (CartaDeTruco oroCon: 1).! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:32:04' prior: 50865667!
test14CuandoElPieEmpardaConLaManoLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: anchoDeOro.
	
	ronda pieJuega: tresDeBasto.
	ronda manoJuega: sieteDeOro.
	
	ronda manoJuega: anchoDeEspada.
	
	
	self deny: ronda leTocaALaMano.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:32:17' prior: 50865709!
test14CuandoElPieEmpardaConLaManoLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: cuatroDeBasto.
	
	ronda pieJuega: tresDeBasto.
	ronda manoJuega: sieteDeOro.
	
	ronda manoJuega: anchoDeEspada.
	
	
	self deny: ronda leTocaALaMano.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:32:48' prior: 50865727!
test14CuandoElPieEmpardaConLaManoLeTocaALaMano
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: cuatroDeBasto.
	
	self assert: ronda leTocaALaMano.! !

!testRun: #RondaTest #test14CuandoElPieEmpardaConLaManoLeTocaALaMano stamp: 'UC 7/5/2021 20:32:50'!
FAILURE!

!testRun: #RondaTest #test14CuandoElPieEmpardaConLaManoLeTocaALaMano stamp: 'UC 7/5/2021 20:32:50'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:33:30' prior: 50865592!
pieJuega: unaCarta
	self verificarQueMeToque: leTocaALaMano.
	self jugar: unaCarta siLaTengoEn: cartasPie.
	
	leTocaALaMano :=  elOponenteJugoEstaRonda not or: [(elOponenteJugo mataA: unaCarta) or: (elOponenteJugo empardaCon: unaCarta)].
	self avisarleAlOponenteQueJugue: unaCarta.
	! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 20:33:33'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 20:33:33'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 20:33:33'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 20:33:33'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 20:33:33'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 20:33:33'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 20:33:33'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 20:33:33'!
PASSED!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 20:33:33'!
PASSED!

!testRun: #RondaTest #test10CuandoGanaElPieLeTocaAlPie stamp: 'UC 7/5/2021 20:33:33'!
PASSED!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 20:33:33'!
PASSED!

!testRun: #RondaTest #test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 20:33:33'!
PASSED!

!testRun: #RondaTest #test13CuandoElPieGanaLaPrimeraLaManoGanaLaSegundaYLaManoJuegaLeTocaAlPie stamp: 'UC 7/5/2021 20:33:33'!
PASSED!

!testRun: #RondaTest #test14CuandoElPieEmpardaConLaManoLeTocaALaMano stamp: 'UC 7/5/2021 20:33:33'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:34:38'!
test14CuandoLaManoGanaLaPrimeraYLaSegundaNoSePuedeSeguirJugando
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: cuatroDeBasto.
	
	self assert: ronda leTocaALaMano.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:34:49'!
test14CuandoLaManoGanaLaPrimeraYLaSegundaLaManoGanaYNoSePuedeSeguirJugando
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: cuatroDeBasto.
	
	self assert: ronda leTocaALaMano.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:36:59' prior: 50865844!
test14CuandoLaManoGanaLaPrimeraYLaSegundaLaManoGanaYNoSePuedeSeguirJugando
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeBasto.
	
	ronda manoJuega: anchoDeEspada.
	ronda pieJuega: anchoDeBasto.
	
	
	self assert: ronda ganoLaMano.
	self should: [ronda manoJuega: cuatroDeOro] raise: Error withExceptionDo: [:error | self assert: Ronda noSePuedeJugarPorquelaPartidaYaTermino equals: error messageText ]! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:37:13'!
test15CuandoLaManoGanaLaPrimeraYLaSegundaLaManoGanaYNoSePuedeSeguirJugando
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeBasto.
	
	ronda manoJuega: anchoDeEspada.
	ronda pieJuega: anchoDeBasto.
	
	
	self assert: ronda ganoLaMano.
	self should: [ronda manoJuega: cuatroDeOro] raise: Error withExceptionDo: [:error | self assert: Ronda noSePuedeJugarPorquelaPartidaYaTermino equals: error messageText ]! !

!methodRemoval: RondaTest #test14CuandoLaManoGanaLaPrimeraYLaSegundaLaManoGanaYNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 20:37:13'!
test14CuandoLaManoGanaLaPrimeraYLaSegundaLaManoGanaYNoSePuedeSeguirJugando
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeBasto.
	
	ronda manoJuega: anchoDeEspada.
	ronda pieJuega: anchoDeBasto.
	
	
	self assert: ronda ganoLaMano.
	self should: [ronda manoJuega: cuatroDeOro] raise: Error withExceptionDo: [:error | self assert: Ronda noSePuedeJugarPorquelaPartidaYaTermino equals: error messageText ]!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:37:23'!
test15CuandoLaManoGanaLaPrimeraYLaSegundaLaManoGanaLaRondaYNoSePuedeSeguirJugando
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeBasto.
	
	ronda manoJuega: anchoDeEspada.
	ronda pieJuega: anchoDeBasto.
	
	
	self assert: ronda ganoLaMano.
	self should: [ronda manoJuega: cuatroDeOro] raise: Error withExceptionDo: [:error | self assert: Ronda noSePuedeJugarPorquelaPartidaYaTermino equals: error messageText ]! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:37:38' prior: 50865930!
test15CuandoLaManoGanaLaPrimeraYLaSegundaLaManoGanaLaRondaYNoSePuedeSeguirJugando
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeBasto.
	
	ronda manoJuega: anchoDeEspada.
	ronda pieJuega: anchoDeBasto.
	
	
	self assert: ronda ganoLaMano.
	self should: [ronda manoJuega: cuatroDeOro] raise: Error withExceptionDo: [:error | self assert: Ronda noSePuedeJugarPorquelaPartidaYaTermino equals: error messageText ]! !
!Ronda methodsFor: 'nil' stamp: 'UC 7/5/2021 20:37:51'!
ganoLaMano
	^true.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:37:52' prior: 50865975!
ganoLaMano
	^true! !

!methodRemoval: RondaTest #test15CuandoLaManoGanaLaPrimeraYLaSegundaLaManoGanaYNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 20:38:15'!
test15CuandoLaManoGanaLaPrimeraYLaSegundaLaManoGanaYNoSePuedeSeguirJugando
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeBasto.
	
	ronda manoJuega: anchoDeEspada.
	ronda pieJuega: anchoDeBasto.
	
	
	self assert: ronda ganoLaMano.
	self should: [ronda manoJuega: cuatroDeOro] raise: Error withExceptionDo: [:error | self assert: Ronda noSePuedeJugarPorquelaPartidaYaTermino equals: error messageText ]!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:39:13' prior: 50864076!
verificarQueMeToque: meToca
	^ meToca ifTrue: [self error: self class errorLeTocaAlOponente.]! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:39:24' prior: 50865767!
pieJuega: unaCarta
	self verificarQueMeToque: leTocaALaMano not.
	self jugar: unaCarta siLaTengoEn: cartasPie.
	
	leTocaALaMano :=  elOponenteJugoEstaRonda not or: [(elOponenteJugo mataA: unaCarta) or: (elOponenteJugo empardaCon: unaCarta)].
	self avisarleAlOponenteQueJugue: unaCarta.
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:39:28' prior: 50865609!
manoJuega: unaCarta
	self verificarQueMeToque: leTocaALaMano.
	self jugar: unaCarta siLaTengoEn: cartasMano.
	
	leTocaALaMano := elOponenteJugoEstaRonda ifTrue: [(elOponenteJugo mataA: unaCarta) not] ifFalse: [false].
	self avisarleAlOponenteQueJugue: unaCarta.
	! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 20:40:17'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 20:40:17'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 20:40:17'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 20:40:17'!
FAILURE!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 20:40:17'!
FAILURE!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 20:40:17'!
ERROR!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 20:40:17'!
ERROR!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 20:40:17'!
ERROR!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 20:40:17'!
ERROR!

!testRun: #RondaTest #test10CuandoGanaElPieLeTocaAlPie stamp: 'UC 7/5/2021 20:40:17'!
ERROR!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 20:40:17'!
ERROR!

!testRun: #RondaTest #test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 20:40:17'!
ERROR!

!testRun: #RondaTest #test13CuandoElPieGanaLaPrimeraLaManoGanaLaSegundaYLaManoJuegaLeTocaAlPie stamp: 'UC 7/5/2021 20:40:17'!
ERROR!

!testRun: #RondaTest #test14CuandoElPieEmpardaConLaManoLeTocaALaMano stamp: 'UC 7/5/2021 20:40:17'!
ERROR!

!testRun: #RondaTest #test14CuandoLaManoGanaLaPrimeraYLaSegundaNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 20:40:17'!
ERROR!

!testRun: #RondaTest #test15CuandoLaManoGanaLaPrimeraYLaSegundaLaManoGanaLaRondaYNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 20:40:17'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:40:34' prior: 50866007!
verificarQueMeToque: meToca
	^ meToca ifFalse: [self error: self class errorLeTocaAlOponente.]! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 20:40:35'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 20:40:35'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 20:40:35'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 20:40:35'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 20:40:35'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 20:40:35'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 20:40:35'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 20:40:35'!
PASSED!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 20:40:35'!
PASSED!

!testRun: #RondaTest #test10CuandoGanaElPieLeTocaAlPie stamp: 'UC 7/5/2021 20:40:35'!
PASSED!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 20:40:35'!
PASSED!

!testRun: #RondaTest #test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 20:40:35'!
PASSED!

!testRun: #RondaTest #test13CuandoElPieGanaLaPrimeraLaManoGanaLaSegundaYLaManoJuegaLeTocaAlPie stamp: 'UC 7/5/2021 20:40:35'!
PASSED!

!testRun: #RondaTest #test14CuandoElPieEmpardaConLaManoLeTocaALaMano stamp: 'UC 7/5/2021 20:40:35'!
PASSED!

!testRun: #RondaTest #test14CuandoLaManoGanaLaPrimeraYLaSegundaNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 20:40:35'!
PASSED!

!testRun: #RondaTest #test15CuandoLaManoGanaLaPrimeraYLaSegundaLaManoGanaLaRondaYNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 20:40:35'!
FAILURE!

!testRun: #RondaTest #test15CuandoLaManoGanaLaPrimeraYLaSegundaLaManoGanaLaRondaYNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 20:40:35'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:40:51' prior: 50866025!
manoJuega: unaCarta
	self verificarQueMeToque: leTocaALaMano.
	self jugar: unaCarta siLaTengoEn: cartasMano.
	
	leTocaALaMano := elOponenteJugoEstaRonda ifTrue: [(elOponenteJugo mataA: unaCarta) not] ifFalse: [false].
	self avisarleAlOponenteQueJugue: unaCarta.
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:41:47'!
ganoAlguien
	^true! !

!methodRemoval: Ronda #ganoLaMano stamp: 'UC 7/5/2021 20:41:47'!
ganoLaMano
	^true!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:42:02'!
terminoLaPartida
	^true! !

!methodRemoval: Ronda #ganoAlguien stamp: 'UC 7/5/2021 20:42:02'!
ganoAlguien
	^true!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:42:52' prior: 50866095!
verificarQueMeToque: meToca
	meToca ifFalse: [self error: self class errorLeTocaAlOponente.]! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:43:13' prior: 50866165!
manoJuega: unaCarta
	self terminoLaPartida ifTrue: [self error: self class].
	self verificarQueMeToque: leTocaALaMano.
	self jugar: unaCarta siLaTengoEn: cartasMano.
	
	leTocaALaMano := elOponenteJugoEstaRonda ifTrue: [(elOponenteJugo mataA: unaCarta) not] ifFalse: [false].
	self avisarleAlOponenteQueJugue: unaCarta.
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:43:27' prior: 50866195!
manoJuega: unaCarta
	self terminoLaPartida ifTrue: [self error: self class noSePuedeJugarPorquelaPartidaYaTermino].
	self verificarQueMeToque: leTocaALaMano.
	self jugar: unaCarta siLaTengoEn: cartasMano.
	
	leTocaALaMano := elOponenteJugoEstaRonda ifTrue: [(elOponenteJugo mataA: unaCarta) not] ifFalse: [false].
	self avisarleAlOponenteQueJugue: unaCarta.
	! !
!Ronda class methodsFor: 'nil' stamp: 'UC 7/5/2021 20:43:43'!
noSePuedeJugarPorquelaPartidaYaTermino
	^'No se puede jugar porque la partida ya termin�'.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:43:57' prior: 50865953!
test15CuandoLaManoGanaLaPrimeraYLaSegundaLaManoGanaLaRondaYNoSePuedeSeguirJugando
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeBasto.
	
	ronda manoJuega: anchoDeEspada.
	ronda pieJuega: anchoDeBasto.
	
	
	self assert: ronda terminoLaPartida.
	self should: [ronda manoJuega: cuatroDeOro] raise: Error withExceptionDo: [:error | self assert: Ronda noSePuedeJugarPorquelaPartidaYaTermino equals: error messageText ]! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 20:44:09'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 20:44:09'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 20:44:09'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 20:44:09'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 20:44:09'!
FAILURE!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 20:44:09'!
ERROR!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 20:44:09'!
ERROR!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 20:44:09'!
ERROR!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 20:44:09'!
ERROR!

!testRun: #RondaTest #test10CuandoGanaElPieLeTocaAlPie stamp: 'UC 7/5/2021 20:44:09'!
ERROR!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 20:44:09'!
ERROR!

!testRun: #RondaTest #test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 20:44:09'!
ERROR!

!testRun: #RondaTest #test13CuandoElPieGanaLaPrimeraLaManoGanaLaSegundaYLaManoJuegaLeTocaAlPie stamp: 'UC 7/5/2021 20:44:09'!
ERROR!

!testRun: #RondaTest #test14CuandoElPieEmpardaConLaManoLeTocaALaMano stamp: 'UC 7/5/2021 20:44:09'!
ERROR!

!testRun: #RondaTest #test14CuandoLaManoGanaLaPrimeraYLaSegundaNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 20:44:09'!
ERROR!

!testRun: #RondaTest #test15CuandoLaManoGanaLaPrimeraYLaSegundaLaManoGanaLaRondaYNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 20:44:09'!
ERROR!

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 20:44:11'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 20:44:11'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 20:44:11'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 20:44:11'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 20:44:11'!
FAILURE!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 20:44:11'!
ERROR!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 20:44:11'!
ERROR!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 20:44:11'!
ERROR!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 20:44:11'!
ERROR!

!testRun: #RondaTest #test10CuandoGanaElPieLeTocaAlPie stamp: 'UC 7/5/2021 20:44:11'!
ERROR!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 20:44:11'!
ERROR!

!testRun: #RondaTest #test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 20:44:11'!
ERROR!

!testRun: #RondaTest #test13CuandoElPieGanaLaPrimeraLaManoGanaLaSegundaYLaManoJuegaLeTocaAlPie stamp: 'UC 7/5/2021 20:44:11'!
ERROR!

!testRun: #RondaTest #test14CuandoElPieEmpardaConLaManoLeTocaALaMano stamp: 'UC 7/5/2021 20:44:11'!
ERROR!

!testRun: #RondaTest #test14CuandoLaManoGanaLaPrimeraYLaSegundaNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 20:44:11'!
ERROR!

!testRun: #RondaTest #test15CuandoLaManoGanaLaPrimeraYLaSegundaLaManoGanaLaRondaYNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 20:44:11'!
ERROR!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'UC 7/5/2021 20:44:33'!
Object subclass: #Ronda
	instanceVariableNames: 'cartasMano cartasPie leTocaALaMano elOponenteJugo elOponenteJugoEstaRonda termino'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:44:32' prior: 50866182!
terminoLaPartida
	^termino! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:44:41' prior: 50864683!
initializeMano: unasCartasDeUnaMano pie: unasCartasDeUnPie
	(unasCartasDeUnaMano anySatisfy: [:cartaMano | unasCartasDeUnPie includes: cartaMano]) ifTrue: [
		self error: self class esasCartasNoPudieronVenirDeUnSoloMazo 
	].
	(unasCartasDeUnaMano size = 3 and: (unasCartasDeUnPie size =  3)) ifFalse: [
		self error: self class ambosJugadoresDebenTenerTresCartas.
	].

	leTocaALaMano := true.
	elOponenteJugoEstaRonda := false.
	termino := false.
	
	cartasMano:= unasCartasDeUnaMano copy.
	cartasPie := unasCartasDeUnPie copy.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:44:50'!
termino
	^termino! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:44:50' prior: 50866208!
manoJuega: unaCarta
	self termino ifTrue: [self error: self class noSePuedeJugarPorquelaPartidaYaTermino].
	self verificarQueMeToque: leTocaALaMano.
	self jugar: unaCarta siLaTengoEn: cartasMano.
	
	leTocaALaMano := elOponenteJugoEstaRonda ifTrue: [(elOponenteJugo mataA: unaCarta) not] ifFalse: [false].
	self avisarleAlOponenteQueJugue: unaCarta.
	! !

!methodRemoval: Ronda #terminoLaPartida stamp: 'UC 7/5/2021 20:44:50'!
terminoLaPartida
	^termino!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:44:57' prior: 50866228!
test15CuandoLaManoGanaLaPrimeraYLaSegundaLaManoGanaLaRondaYNoSePuedeSeguirJugando
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeBasto.
	
	ronda manoJuega: anchoDeEspada.
	ronda pieJuega: anchoDeBasto.
	
	
	self assert: ronda termino.
	self should: [ronda manoJuega: cuatroDeOro] raise: Error withExceptionDo: [:error | self assert: Ronda noSePuedeJugarPorquelaPartidaYaTermino equals: error messageText ]! !

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'UC 7/5/2021 20:45:36'!
Object subclass: #Ronda
	instanceVariableNames: 'cartasMano cartasPie leTocaALaMano elOponenteJugo elOponenteJugoEstaRonda termino enfrentamientosGanadosPorLaMano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:45:35' prior: 50866382!
initializeMano: unasCartasDeUnaMano pie: unasCartasDeUnPie
	(unasCartasDeUnaMano anySatisfy: [:cartaMano | unasCartasDeUnPie includes: cartaMano]) ifTrue: [
		self error: self class esasCartasNoPudieronVenirDeUnSoloMazo 
	].
	(unasCartasDeUnaMano size = 3 and: (unasCartasDeUnPie size =  3)) ifFalse: [
		self error: self class ambosJugadoresDebenTenerTresCartas.
	].

	leTocaALaMano := true.
	elOponenteJugoEstaRonda := false.
	termino := false.
	enfrentamientosGanadosPorLaMano := 0.
	
	cartasMano:= unasCartasDeUnaMano copy.
	cartasPie := unasCartasDeUnPie copy.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:47:32' prior: 50866405!
manoJuega: unaCarta
	self termino ifTrue: [self error: self class noSePuedeJugarPorquelaPartidaYaTermino].
	self verificarQueMeToque: leTocaALaMano.
	self jugar: unaCarta siLaTengoEn: cartasMano.
	
	leTocaALaMano := elOponenteJugoEstaRonda 
						ifTrue: [ | mate |mate := (elOponenteJugo mataA: unaCarta).
							mate ifTrue: [enfrentamientosGanadosPorLaMano := enfrentamientosGanadosPorLaMano + 1].
							^mate not.] 
						ifFalse: [false].
	self avisarleAlOponenteQueJugue: unaCarta.
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:47:54' prior: 50866478!
manoJuega: unaCarta
	self termino ifTrue: [self error: self class noSePuedeJugarPorquelaPartidaYaTermino].
	self verificarQueMeToque: leTocaALaMano.
	self jugar: unaCarta siLaTengoEn: cartasMano.
	
	leTocaALaMano := elOponenteJugoEstaRonda 
			ifTrue: [ | mate |
				mate := (elOponenteJugo mataA: unaCarta).
				mate ifTrue: [enfrentamientosGanadosPorLaMano := enfrentamientosGanadosPorLaMano + 1].
				^mate not.
			] 
			ifFalse: [false].
	self avisarleAlOponenteQueJugue: unaCarta.
	! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 20:48:09'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 20:48:09'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 20:48:09'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 20:48:09'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 20:48:09'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 20:48:09'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 20:48:09'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 20:48:09'!
PASSED!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 20:48:09'!
PASSED!

!testRun: #RondaTest #test10CuandoGanaElPieLeTocaAlPie stamp: 'UC 7/5/2021 20:48:09'!
PASSED!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 20:48:09'!
PASSED!

!testRun: #RondaTest #test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 20:48:09'!
PASSED!

!testRun: #RondaTest #test13CuandoElPieGanaLaPrimeraLaManoGanaLaSegundaYLaManoJuegaLeTocaAlPie stamp: 'UC 7/5/2021 20:48:09'!
FAILURE!

!testRun: #RondaTest #test14CuandoElPieEmpardaConLaManoLeTocaALaMano stamp: 'UC 7/5/2021 20:48:09'!
PASSED!

!testRun: #RondaTest #test14CuandoLaManoGanaLaPrimeraYLaSegundaNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 20:48:09'!
PASSED!

!testRun: #RondaTest #test15CuandoLaManoGanaLaPrimeraYLaSegundaLaManoGanaLaRondaYNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 20:48:09'!
FAILURE!

!testRun: #RondaTest #test13CuandoElPieGanaLaPrimeraLaManoGanaLaSegundaYLaManoJuegaLeTocaAlPie stamp: 'UC 7/5/2021 20:48:22'!
FAILURE!

!testRun: #RondaTest #test13CuandoElPieGanaLaPrimeraLaManoGanaLaSegundaYLaManoJuegaLeTocaAlPie stamp: 'UC 7/5/2021 20:50:22'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:51:55' prior: 50866497!
manoJuega: unaCarta
	self termino ifTrue: [self error: self class noSePuedeJugarPorquelaPartidaYaTermino].
	self verificarQueMeToque: leTocaALaMano.
	self jugar: unaCarta siLaTengoEn: cartasMano.
	
	leTocaALaMano := elOponenteJugoEstaRonda 
			ifTrue: [ | mate |
				mate := (elOponenteJugo mataA: unaCarta).
				mate ifTrue: [enfrentamientosGanadosPorLaMano := enfrentamientosGanadosPorLaMano + 1].
				mate not.
			] 
			ifFalse: [false].
	self avisarleAlOponenteQueJugue: unaCarta.
	! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 20:52:13'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 20:52:14'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 20:52:14'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 20:52:14'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 20:52:14'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 20:52:14'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 20:52:14'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 20:52:14'!
PASSED!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 20:52:14'!
PASSED!

!testRun: #RondaTest #test10CuandoGanaElPieLeTocaAlPie stamp: 'UC 7/5/2021 20:52:14'!
PASSED!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 20:52:14'!
PASSED!

!testRun: #RondaTest #test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 20:52:14'!
PASSED!

!testRun: #RondaTest #test13CuandoElPieGanaLaPrimeraLaManoGanaLaSegundaYLaManoJuegaLeTocaAlPie stamp: 'UC 7/5/2021 20:52:14'!
PASSED!

!testRun: #RondaTest #test14CuandoElPieEmpardaConLaManoLeTocaALaMano stamp: 'UC 7/5/2021 20:52:14'!
PASSED!

!testRun: #RondaTest #test14CuandoLaManoGanaLaPrimeraYLaSegundaNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 20:52:14'!
PASSED!

!testRun: #RondaTest #test15CuandoLaManoGanaLaPrimeraYLaSegundaLaManoGanaLaRondaYNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 20:52:14'!
FAILURE!

!testRun: #RondaTest #test15CuandoLaManoGanaLaPrimeraYLaSegundaLaManoGanaLaRondaYNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 20:52:14'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:52:45' prior: 50866401!
termino
	^enfrentamientosGanadosPorLaMano = 3! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:53:00' prior: 50866665!
termino
	^enfrentamientosGanadosPorLaMano = 2! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 20:53:03'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 20:53:03'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 20:53:03'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 20:53:03'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 20:53:03'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 20:53:03'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 20:53:03'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 20:53:03'!
PASSED!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 20:53:03'!
PASSED!

!testRun: #RondaTest #test10CuandoGanaElPieLeTocaAlPie stamp: 'UC 7/5/2021 20:53:03'!
PASSED!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 20:53:03'!
PASSED!

!testRun: #RondaTest #test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 20:53:03'!
PASSED!

!testRun: #RondaTest #test13CuandoElPieGanaLaPrimeraLaManoGanaLaSegundaYLaManoJuegaLeTocaAlPie stamp: 'UC 7/5/2021 20:53:03'!
PASSED!

!testRun: #RondaTest #test14CuandoElPieEmpardaConLaManoLeTocaALaMano stamp: 'UC 7/5/2021 20:53:03'!
PASSED!

!testRun: #RondaTest #test14CuandoLaManoGanaLaPrimeraYLaSegundaNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 20:53:03'!
PASSED!

!testRun: #RondaTest #test15CuandoLaManoGanaLaPrimeraYLaSegundaLaManoGanaLaRondaYNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 20:53:03'!
FAILURE!

!testRun: #RondaTest #test15CuandoLaManoGanaLaPrimeraYLaSegundaLaManoGanaLaRondaYNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 20:53:03'!
FAILURE!

----QUIT----(5 July 2021 20:53:40) CuisUniversity-4532.image priorSource: 16885703!

----STARTUP---- (5 July 2021 20:53:46) as /Users/urichami/Facu/ing1/inge1-1c-2021/Cuis/CuisUniversity-4532.image!

!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:54:38' prior: 50866457!
initializeMano: unasCartasDeUnaMano pie: unasCartasDeUnPie
	(unasCartasDeUnaMano anySatisfy: [:cartaMano | unasCartasDeUnPie includes: cartaMano]) ifTrue: [
		self error: self class esasCartasNoPudieronVenirDeUnSoloMazo 
	].
	(unasCartasDeUnaMano size = 3 and: (unasCartasDeUnPie size =  3)) ifFalse: [
		self error: self class ambosJugadoresDebenTenerTresCartas.
	].

	leTocaALaMano := true.
	elOponenteJugoEstaRonda := false.
	enfrentamientosGanadosPorLaMano := 0.
	
	cartasMano:= unasCartasDeUnaMano copy.
	cartasPie := unasCartasDeUnPie copy.! !

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'UC 7/5/2021 20:54:43'!
Object subclass: #Ronda
	instanceVariableNames: 'cartasMano cartasPie leTocaALaMano elOponenteJugo elOponenteJugoEstaRonda enfrentamientosGanadosPorLaMano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 20:54:48'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 20:54:48'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 20:54:48'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 20:54:48'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 20:54:48'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 20:54:48'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 20:54:48'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 20:54:48'!
PASSED!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 20:54:48'!
PASSED!

!testRun: #RondaTest #test10CuandoGanaElPieLeTocaAlPie stamp: 'UC 7/5/2021 20:54:48'!
PASSED!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 20:54:48'!
PASSED!

!testRun: #RondaTest #test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 20:54:48'!
PASSED!

!testRun: #RondaTest #test13CuandoElPieGanaLaPrimeraLaManoGanaLaSegundaYLaManoJuegaLeTocaAlPie stamp: 'UC 7/5/2021 20:54:48'!
PASSED!

!testRun: #RondaTest #test14CuandoElPieEmpardaConLaManoLeTocaALaMano stamp: 'UC 7/5/2021 20:54:48'!
PASSED!

!testRun: #RondaTest #test14CuandoLaManoGanaLaPrimeraYLaSegundaNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 20:54:48'!
PASSED!

!testRun: #RondaTest #test15CuandoLaManoGanaLaPrimeraYLaSegundaLaManoGanaLaRondaYNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 20:54:48'!
FAILURE!

!testRun: #RondaTest #test15CuandoLaManoGanaLaPrimeraYLaSegundaLaManoGanaLaRondaYNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 20:54:48'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:56:39' prior: 50866013!
pieJuega: unaCarta
	self verificarQueMeToque: leTocaALaMano not.
	self jugar: unaCarta siLaTengoEn: cartasPie.
	
	leTocaALaMano :=  elOponenteJugoEstaRonda ifTrue: [(elOponenteJugo mataA: unaCarta)  or: (elOponenteJugo empardaCon: unaCarta)] ifFalse: [true].
	self avisarleAlOponenteQueJugue: unaCarta.
	! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 20:56:41'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 20:56:41'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 20:56:41'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 20:56:41'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 20:56:41'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 20:56:41'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 20:56:41'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 20:56:41'!
PASSED!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 20:56:41'!
PASSED!

!testRun: #RondaTest #test10CuandoGanaElPieLeTocaAlPie stamp: 'UC 7/5/2021 20:56:41'!
PASSED!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 20:56:41'!
PASSED!

!testRun: #RondaTest #test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 20:56:41'!
PASSED!

!testRun: #RondaTest #test13CuandoElPieGanaLaPrimeraLaManoGanaLaSegundaYLaManoJuegaLeTocaAlPie stamp: 'UC 7/5/2021 20:56:41'!
PASSED!

!testRun: #RondaTest #test14CuandoElPieEmpardaConLaManoLeTocaALaMano stamp: 'UC 7/5/2021 20:56:41'!
PASSED!

!testRun: #RondaTest #test14CuandoLaManoGanaLaPrimeraYLaSegundaNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 20:56:41'!
PASSED!

!testRun: #RondaTest #test15CuandoLaManoGanaLaPrimeraYLaSegundaLaManoGanaLaRondaYNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 20:56:41'!
FAILURE!

!testRun: #RondaTest #test15CuandoLaManoGanaLaPrimeraYLaSegundaLaManoGanaLaRondaYNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 20:56:41'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:59:11' prior: 50866838!
pieJuega: unaCarta
	self verificarQueMeToque: leTocaALaMano not.
	self jugar: unaCarta siLaTengoEn: cartasPie.
	
	leTocaALaMano :=  elOponenteJugoEstaRonda 
					ifTrue: [ | meMatoOMeEmpardo |
						meMatoOMeEmpardo := (elOponenteJugo mataA: unaCarta) or: (elOponenteJugo empardaCon: unaCarta).
						meMatoOMeEmpardo ifTrue: [enfrentamientosGanadosPorLaMano := enfrentamientosGanadosPorLaMano + 1].
						meMatoOMeEmpardo.
					] ifFalse: [true].
	self avisarleAlOponenteQueJugue: unaCarta.
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:59:32' prior: 50866914!
pieJuega: unaCarta
	self verificarQueMeToque: leTocaALaMano not.
	self jugar: unaCarta siLaTengoEn: cartasPie.
	
	leTocaALaMano :=  elOponenteJugoEstaRonda 
				ifTrue: [ 
					| meMatoOMeEmpardo |
					meMatoOMeEmpardo := (elOponenteJugo mataA: unaCarta) or: (elOponenteJugo empardaCon: unaCarta).
					meMatoOMeEmpardo ifTrue: [enfrentamientosGanadosPorLaMano := enfrentamientosGanadosPorLaMano + 1].
					meMatoOMeEmpardo.
				] ifFalse: [true].
	self avisarleAlOponenteQueJugue: unaCarta.
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 20:59:39' prior: 50866933!
pieJuega: unaCarta
	self verificarQueMeToque: leTocaALaMano not.
	self jugar: unaCarta siLaTengoEn: cartasPie.
	
	leTocaALaMano :=  elOponenteJugoEstaRonda 
				ifTrue: [ 
					| meMatoOMeEmpardo |
					meMatoOMeEmpardo := (elOponenteJugo mataA: unaCarta) or: (elOponenteJugo empardaCon: unaCarta).
					meMatoOMeEmpardo ifTrue: [enfrentamientosGanadosPorLaMano := enfrentamientosGanadosPorLaMano + 1].
					meMatoOMeEmpardo.
				] ifFalse: [true].
	self avisarleAlOponenteQueJugue: unaCarta.
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:00:20' prior: 50866952!
pieJuega: unaCarta
	self verificarQueMeToque: leTocaALaMano not.
	self jugar: unaCarta siLaTengoEn: cartasPie.
	
	leTocaALaMano :=  elOponenteJugoEstaRonda 
				ifTrue: [ 
					| meMato |
					meMato := (elOponenteJugo mataA: unaCarta) .
					meMato ifTrue: [enfrentamientosGanadosPorLaMano := enfrentamientosGanadosPorLaMano + 1].
					meMato or: (elOponenteJugo empardaCon: unaCarta).
				] ifFalse: [true].
	self avisarleAlOponenteQueJugue: unaCarta.
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:00:47' prior: 50866583!
manoJuega: unaCarta
	self termino ifTrue: [self error: self class noSePuedeJugarPorquelaPartidaYaTermino].
	self verificarQueMeToque: leTocaALaMano.
	self jugar: unaCarta siLaTengoEn: cartasMano.
	
	leTocaALaMano := elOponenteJugoEstaRonda 
			ifTrue: [ | meMato |
				meMato := (elOponenteJugo mataA: unaCarta).
				meMato ifFalse: [enfrentamientosGanadosPorLaMano := enfrentamientosGanadosPorLaMano + 1].
				meMato not.
			] 
			ifFalse: [false].
	self avisarleAlOponenteQueJugue: unaCarta.
	! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 21:00:51'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 21:00:51'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 21:00:51'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 21:00:51'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 21:00:51'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 21:00:51'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 21:00:51'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 21:00:51'!
PASSED!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 21:00:51'!
PASSED!

!testRun: #RondaTest #test10CuandoGanaElPieLeTocaAlPie stamp: 'UC 7/5/2021 21:00:51'!
PASSED!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 21:00:51'!
PASSED!

!testRun: #RondaTest #test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 21:00:51'!
PASSED!

!testRun: #RondaTest #test13CuandoElPieGanaLaPrimeraLaManoGanaLaSegundaYLaManoJuegaLeTocaAlPie stamp: 'UC 7/5/2021 21:00:51'!
PASSED!

!testRun: #RondaTest #test14CuandoElPieEmpardaConLaManoLeTocaALaMano stamp: 'UC 7/5/2021 21:00:51'!
PASSED!

!testRun: #RondaTest #test14CuandoLaManoGanaLaPrimeraYLaSegundaNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 21:00:51'!
PASSED!

!testRun: #RondaTest #test15CuandoLaManoGanaLaPrimeraYLaSegundaLaManoGanaLaRondaYNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 21:00:51'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:01:34'!
test16CuandoLaManoGanaLaPrimeraElPieGanaLaSegundaYLaManoGanaLaTerceraLaManoGana
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeBasto.
	
	ronda manoJuega: anchoDeEspada.
	ronda pieJuega: anchoDeBasto.
	
	
	self assert: ronda termino.
	self should: [ronda manoJuega: cuatroDeOro] raise: Error withExceptionDo: [:error | self assert: Ronda noSePuedeJugarPorquelaPartidaYaTermino equals: error messageText ]! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:02:42'!
xtest16CuandoLaManoGanaLaPrimeraElPieGanaLaSegundaYLaManoGanaLaTerceraLaManoGana
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeBasto.
	
	ronda manoJuega: anchoDeEspada.
	ronda pieJuega: anchoDeBasto.
	
	
	self assert: ronda termino.
	self should: [ronda manoJuega: cuatroDeOro] raise: Error withExceptionDo: [:error | self assert: Ronda noSePuedeJugarPorquelaPartidaYaTermino equals: error messageText ]! !

!methodRemoval: RondaTest #test16CuandoLaManoGanaLaPrimeraElPieGanaLaSegundaYLaManoGanaLaTerceraLaManoGana stamp: 'UC 7/5/2021 21:02:42'!
test16CuandoLaManoGanaLaPrimeraElPieGanaLaSegundaYLaManoGanaLaTerceraLaManoGana
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeBasto.
	
	ronda manoJuega: anchoDeEspada.
	ronda pieJuega: anchoDeBasto.
	
	
	self assert: ronda termino.
	self should: [ronda manoJuega: cuatroDeOro] raise: Error withExceptionDo: [:error | self assert: Ronda noSePuedeJugarPorquelaPartidaYaTermino equals: error messageText ]!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:03:03'!
test16CuandoElPieGanaLaPrimeraYLaSegundaElPieGanaLaRondaYNoSePuedeSeguirJugando
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeBasto.
	
	ronda manoJuega: anchoDeEspada.
	ronda pieJuega: anchoDeBasto.
	
	
	self assert: ronda termino.
	self should: [ronda manoJuega: cuatroDeOro] raise: Error withExceptionDo: [:error | self assert: Ronda noSePuedeJugarPorquelaPartidaYaTermino equals: error messageText ]! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:03:38' prior: 50867136!
test16CuandoElPieGanaLaPrimeraYLaSegundaElPieGanaLaRondaYNoSePuedeSeguirJugando
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeBasto.
	
	ronda pieJuega: anchoDeBasto.
	ronda manoJuega: anchoDeEspada.
	
	
	self assert: ronda termino.
	self should: [ronda manoJuega: cuatroDeOro] raise: Error withExceptionDo: [:error | self assert: Ronda noSePuedeJugarPorquelaPartidaYaTermino equals: error messageText ]! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:04:43' prior: 50867159!
test16CuandoElPieGanaLaPrimeraYLaSegundaElPieGanaLaRondaYNoSePuedeSeguirJugando
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: tresDeBasto.
	
	ronda pieJuega: anchoDeBasto.
	ronda manoJuega: sieteDeOro.
	
	
	self assert: ronda termino.
	self should: [ronda pieJuega: cuatroDeBasto] 
		raise: Error 
		withExceptionDo: [:error | self assert: Ronda noSePuedeJugarPorquelaPartidaYaTermino equals: error messageText ]! !

!methodRemoval: RondaTest #test14CuandoLaManoGanaLaPrimeraYLaSegundaNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 21:05:29'!
test14CuandoLaManoGanaLaPrimeraYLaSegundaNoSePuedeSeguirJugando
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: cuatroDeBasto.
	
	self assert: ronda leTocaALaMano.!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:06:22' prior: 50867182!
test16CuandoElPieGanaLaPrimeraYLaSegundaElPieGanaLaRondaYNoSePuedeSeguirJugando
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: tresDeBasto.
	
	ronda pieJuega: anchoDeBasto.
	ronda manoJuega: sieteDeOro.
	
	
	self assert: ronda termino.
	self should: [ronda pieJuega: cuatroDeBasto] 
		raise: Error 
		withExceptionDo: [:error | 
			self assert: Ronda noSePuedeJugarPorquelaPartidaYaTermino equals: error messageText.
			self assert: ronda cartasDelPie includes: cuatroDeBasto.
		]! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:06:55' prior: 50866423!
test15CuandoLaManoGanaLaPrimeraYLaSegundaLaManoGanaLaRondaYNoSePuedeSeguirJugando
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeBasto.
	
	ronda manoJuega: anchoDeEspada.
	ronda pieJuega: anchoDeBasto.
	
	
	self assert: ronda termino.
	self should: [ronda manoJuega: cuatroDeOro] 
		raise: Error 
		withExceptionDo: [:error | 
			self assert: Ronda noSePuedeJugarPorquelaPartidaYaTermino equals: error messageText.
			self assert: ronda cartasDeLaMano includes: cuatroDeOro.
		]! !

!testRun: #RondaTest #test16CuandoElPieGanaLaPrimeraYLaSegundaElPieGanaLaRondaYNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 21:06:58'!
FAILURE!

!testRun: #RondaTest #test16CuandoElPieGanaLaPrimeraYLaSegundaElPieGanaLaRondaYNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 21:06:58'!
FAILURE!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'UC 7/5/2021 21:07:35'!
Object subclass: #Ronda
	instanceVariableNames: 'cartasMano cartasPie leTocaALaMano elOponenteJugo elOponenteJugoEstaRonda enfrentamientosGanadosPorLaMano enfrentamientosGanadosPorElPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:07:33' prior: 50866744!
initializeMano: unasCartasDeUnaMano pie: unasCartasDeUnPie
	(unasCartasDeUnaMano anySatisfy: [:cartaMano | unasCartasDeUnPie includes: cartaMano]) ifTrue: [
		self error: self class esasCartasNoPudieronVenirDeUnSoloMazo 
	].
	(unasCartasDeUnaMano size = 3 and: (unasCartasDeUnPie size =  3)) ifFalse: [
		self error: self class ambosJugadoresDebenTenerTresCartas.
	].

	leTocaALaMano := true.
	elOponenteJugoEstaRonda := false.
	enfrentamientosGanadosPorLaMano := 0.
	enfrentamientosGanadosPorElPie := 0.
	
	cartasMano:= unasCartasDeUnaMano copy.
	cartasPie := unasCartasDeUnPie copy.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:08:00' prior: 50866989!
manoJuega: unaCarta
	self termino ifTrue: [self error: self class noSePuedeJugarPorquelaPartidaYaTermino].
	self verificarQueMeToque: leTocaALaMano.
	self jugar: unaCarta siLaTengoEn: cartasMano.
	
	leTocaALaMano := elOponenteJugoEstaRonda 
			ifTrue: [ | ganoLaMano |
				ganoLaMano := (elOponenteJugo mataA: unaCarta).
				ganoLaMano ifFalse: [enfrentamientosGanadosPorLaMano := enfrentamientosGanadosPorLaMano + 1].
				ganoLaMano not.
			] 
			ifFalse: [false].
	self avisarleAlOponenteQueJugue: unaCarta.
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:08:33' prior: 50867315!
manoJuega: unaCarta
	self termino ifTrue: [self error: self class noSePuedeJugarPorquelaPartidaYaTermino].
	self verificarQueMeToque: leTocaALaMano.
	self jugar: unaCarta siLaTengoEn: cartasMano.
	
	leTocaALaMano := elOponenteJugoEstaRonda 
			ifTrue: [ | ganoLaMano |
				ganoLaMano := (unaCarta mataA: elOponenteJugo).
				ganoLaMano ifTrue: [enfrentamientosGanadosPorLaMano := enfrentamientosGanadosPorLaMano + 1].
				ganoLaMano.
			] 
			ifFalse: [false].
	self avisarleAlOponenteQueJugue: unaCarta.
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:08:36' prior: 50867334!
manoJuega: unaCarta
	self termino ifTrue: [self error: self class noSePuedeJugarPorquelaPartidaYaTermino].
	self verificarQueMeToque: leTocaALaMano.
	self jugar: unaCarta siLaTengoEn: cartasMano.
	
	leTocaALaMano := elOponenteJugoEstaRonda 
			ifTrue: [ 
				| ganoLaMano |
				ganoLaMano := (unaCarta mataA: elOponenteJugo).
				ganoLaMano ifTrue: [enfrentamientosGanadosPorLaMano := enfrentamientosGanadosPorLaMano + 1].
				ganoLaMano.
			] 
			ifFalse: [false].
	self avisarleAlOponenteQueJugue: unaCarta.
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:09:10' prior: 50866971!
pieJuega: unaCarta
	self verificarQueMeToque: leTocaALaMano not.
	self jugar: unaCarta siLaTengoEn: cartasPie.
	
	leTocaALaMano :=  elOponenteJugoEstaRonda 
				ifTrue: [ 
					| ganoLaMano |
					ganoLaMano := (elOponenteJugo mataA: unaCarta) .
					ganoLaMano ifTrue: [enfrentamientosGanadosPorLaMano := enfrentamientosGanadosPorLaMano + 1].
					ganoLaMano or: (elOponenteJugo empardaCon: unaCarta).
				] ifFalse: [true].
	self avisarleAlOponenteQueJugue: unaCarta.
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:09:17' prior: 50867372!
pieJuega: unaCarta
	self verificarQueMeToque: leTocaALaMano not.
	self jugar: unaCarta siLaTengoEn: cartasPie.
	
	leTocaALaMano :=  elOponenteJugoEstaRonda 
				ifTrue: [ 
					| ganoElEnfrentamientoLaMano |
					ganoElEnfrentamientoLaMano := (elOponenteJugo mataA: unaCarta) .
					ganoElEnfrentamientoLaMano ifTrue: [enfrentamientosGanadosPorLaMano := enfrentamientosGanadosPorLaMano + 1].
					ganoElEnfrentamientoLaMano or: (elOponenteJugo empardaCon: unaCarta).
				] ifFalse: [true].
	self avisarleAlOponenteQueJugue: unaCarta.
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:09:31' prior: 50867353!
manoJuega: unaCarta
	self termino ifTrue: [self error: self class noSePuedeJugarPorquelaPartidaYaTermino].
	self verificarQueMeToque: leTocaALaMano.
	self jugar: unaCarta siLaTengoEn: cartasMano.
	
	leTocaALaMano := elOponenteJugoEstaRonda 
			ifTrue: [ 
				| ganoElEnfrentamientoLaMano |
				ganoElEnfrentamientoLaMano := (unaCarta mataA: elOponenteJugo).
				ganoElEnfrentamientoLaMano ifTrue: [enfrentamientosGanadosPorLaMano := enfrentamientosGanadosPorLaMano + 1].
				ganoElEnfrentamientoLaMano.
			] 
			ifFalse: [false].
	self avisarleAlOponenteQueJugue: unaCarta.
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:10:09' prior: 50867390!
pieJuega: unaCarta
	self verificarQueMeToque: leTocaALaMano not.
	self jugar: unaCarta siLaTengoEn: cartasPie.
	
	leTocaALaMano :=  elOponenteJugoEstaRonda 
				ifTrue: [ 
					| ganoElEnfrentamientoLaMano |
					ganoElEnfrentamientoLaMano := (elOponenteJugo mataA: unaCarta) .
					self actualizarLosContadoresCuando: ganoElEnfrentamientoLaMano.
					ganoElEnfrentamientoLaMano or: (elOponenteJugo empardaCon: unaCarta).
				] ifFalse: [true].
	self avisarleAlOponenteQueJugue: unaCarta.
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:10:33' prior: 50867410!
manoJuega: unaCarta
	self termino ifTrue: [self error: self class noSePuedeJugarPorquelaPartidaYaTermino].
	self verificarQueMeToque: leTocaALaMano.
	self jugar: unaCarta siLaTengoEn: cartasMano.
	
	leTocaALaMano := elOponenteJugoEstaRonda 
			ifTrue: [ 
				| ganoElEnfrentamientoLaMano |
				ganoElEnfrentamientoLaMano := (unaCarta mataA: elOponenteJugo).
				self actualizarLosContadoresCuando: ganoElEnfrentamientoLaMano.
				ganoElEnfrentamientoLaMano.
			] 
			ifFalse: [false].
	self avisarleAlOponenteQueJugue: unaCarta.
	! !
!Ronda methodsFor: 'nil' stamp: 'UC 7/5/2021 21:11:18'!
actualizarLosContadoresCuando: ganoElEnfrentamientoLaMano
	ganoElEnfrentamientoLaMano 
		ifTrue: [enfrentamientosGanadosPorLaMano := enfrentamientosGanadosPorLaMano + 1]
		ifFalse: [enfrentamientosGanadosPorElPie := enfrentamientosGanadosPorElPie + 1]! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:12:36' prior: 50866670!
termino
	^enfrentamientosGanadosPorLaMano = 2 or: enfrentamientosGanadosPorElPie = 2! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 21:12:38'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 21:12:38'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 21:12:38'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 21:12:38'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 21:12:38'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 21:12:38'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 21:12:38'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 21:12:38'!
PASSED!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 21:12:38'!
PASSED!

!testRun: #RondaTest #test10CuandoGanaElPieLeTocaAlPie stamp: 'UC 7/5/2021 21:12:38'!
PASSED!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 21:12:38'!
PASSED!

!testRun: #RondaTest #test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 21:12:38'!
PASSED!

!testRun: #RondaTest #test13CuandoElPieGanaLaPrimeraLaManoGanaLaSegundaYLaManoJuegaLeTocaAlPie stamp: 'UC 7/5/2021 21:12:38'!
PASSED!

!testRun: #RondaTest #test14CuandoElPieEmpardaConLaManoLeTocaALaMano stamp: 'UC 7/5/2021 21:12:38'!
PASSED!

!testRun: #RondaTest #test15CuandoLaManoGanaLaPrimeraYLaSegundaLaManoGanaLaRondaYNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 21:12:38'!
PASSED!

!testRun: #RondaTest #test16CuandoElPieGanaLaPrimeraYLaSegundaElPieGanaLaRondaYNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 21:12:38'!
FAILURE!

!testRun: #RondaTest #test16CuandoElPieGanaLaPrimeraYLaSegundaElPieGanaLaRondaYNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 21:12:38'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:13:03' prior: 50867431!
pieJuega: unaCarta
	self termino ifTrue: [self error: self class noSePuedeJugarPorquelaPartidaYaTermino].
	self verificarQueMeToque: leTocaALaMano not.
	self jugar: unaCarta siLaTengoEn: cartasPie.
	
	leTocaALaMano :=  elOponenteJugoEstaRonda 
				ifTrue: [ 
					| ganoElEnfrentamientoLaMano |
					ganoElEnfrentamientoLaMano := (elOponenteJugo mataA: unaCarta) .
					self actualizarLosContadoresCuando: ganoElEnfrentamientoLaMano.
					ganoElEnfrentamientoLaMano or: (elOponenteJugo empardaCon: unaCarta).
				] ifFalse: [true].
	self avisarleAlOponenteQueJugue: unaCarta.
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:13:22'!
verificarQueNoHayaTerminadoLaRonda

	^ self termino ifTrue: [self error: self class noSePuedeJugarPorquelaPartidaYaTermino]! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:13:22' prior: 50867550!
pieJuega: unaCarta
	self verificarQueNoHayaTerminadoLaRonda.
	self verificarQueMeToque: leTocaALaMano not.
	self jugar: unaCarta siLaTengoEn: cartasPie.
	
	leTocaALaMano :=  elOponenteJugoEstaRonda 
				ifTrue: [ 
					| ganoElEnfrentamientoLaMano |
					ganoElEnfrentamientoLaMano := (elOponenteJugo mataA: unaCarta) .
					self actualizarLosContadoresCuando: ganoElEnfrentamientoLaMano.
					ganoElEnfrentamientoLaMano or: (elOponenteJugo empardaCon: unaCarta).
				] ifFalse: [true].
	self avisarleAlOponenteQueJugue: unaCarta.
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:13:31' prior: 50867450!
manoJuega: unaCarta
	self verificarQueNoHayaTerminadoLaRonda.
	self verificarQueMeToque: leTocaALaMano.
	self jugar: unaCarta siLaTengoEn: cartasMano.
	
	leTocaALaMano := elOponenteJugoEstaRonda 
			ifTrue: [ 
				| ganoElEnfrentamientoLaMano |
				ganoElEnfrentamientoLaMano := (unaCarta mataA: elOponenteJugo).
				self actualizarLosContadoresCuando: ganoElEnfrentamientoLaMano.
				ganoElEnfrentamientoLaMano.
			] 
			ifFalse: [false].
	self avisarleAlOponenteQueJugue: unaCarta.
	! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 21:13:33'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 21:13:33'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 21:13:33'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 21:13:33'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 21:13:33'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 21:13:33'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 21:13:33'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 21:13:33'!
PASSED!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 21:13:33'!
PASSED!

!testRun: #RondaTest #test10CuandoGanaElPieLeTocaAlPie stamp: 'UC 7/5/2021 21:13:33'!
PASSED!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 21:13:33'!
PASSED!

!testRun: #RondaTest #test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 21:13:33'!
PASSED!

!testRun: #RondaTest #test13CuandoElPieGanaLaPrimeraLaManoGanaLaSegundaYLaManoJuegaLeTocaAlPie stamp: 'UC 7/5/2021 21:13:33'!
PASSED!

!testRun: #RondaTest #test14CuandoElPieEmpardaConLaManoLeTocaALaMano stamp: 'UC 7/5/2021 21:13:33'!
PASSED!

!testRun: #RondaTest #test15CuandoLaManoGanaLaPrimeraYLaSegundaLaManoGanaLaRondaYNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 21:13:33'!
PASSED!

!testRun: #RondaTest #test16CuandoElPieGanaLaPrimeraYLaSegundaElPieGanaLaRondaYNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 21:13:33'!
PASSED!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:15:30'!
ganoLaMano

	^ enfrentamientosGanadosPorLaMano = 2! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:15:30' prior: 50867480!
termino
	^self ganoLaMano or: enfrentamientosGanadosPorElPie = 2! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:15:36'!
ganoElPie

	^ enfrentamientosGanadosPorElPie = 2! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:15:36' prior: 50867680!
termino
	^self ganoLaMano or: self ganoElPie! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:15:56' prior: 50867221!
test16CuandoElPieGanaLaPrimeraYLaSegundaElPieGanaLaRondaYNoSePuedeSeguirJugando
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: tresDeBasto.
	
	ronda pieJuega: anchoDeBasto.
	ronda manoJuega: sieteDeOro.
	
	
	self assert: ronda termino.
	self assert: ronda ganoLaMano.
	self deny: ronda ganoElPie.
	self should: [ronda pieJuega: cuatroDeBasto] 
		raise: Error 
		withExceptionDo: [:error | 
			self assert: Ronda noSePuedeJugarPorquelaPartidaYaTermino equals: error messageText.
			self assert: ronda cartasDelPie includes: cuatroDeBasto.
		]! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:16:18' prior: 50867695!
test16CuandoElPieGanaLaPrimeraYLaSegundaElPieGanaLaRondaYNoSePuedeSeguirJugando
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: tresDeBasto.
	
	ronda pieJuega: anchoDeBasto.
	ronda manoJuega: sieteDeOro.
	
	
	self assert: ronda termino.
	self deny: ronda ganoLaMano.
	self assert: ronda ganoElPie.
	self should: [ronda pieJuega: cuatroDeBasto] 
		raise: Error 
		withExceptionDo: [:error | 
			self assert: Ronda noSePuedeJugarPorquelaPartidaYaTermino equals: error messageText.
			self assert: ronda cartasDelPie includes: cuatroDeBasto.
		]! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:16:33' prior: 50867247!
test15CuandoLaManoGanaLaPrimeraYLaSegundaLaManoGanaLaRondaYNoSePuedeSeguirJugando
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeBasto.
	
	ronda manoJuega: anchoDeEspada.
	ronda pieJuega: anchoDeBasto.
	
	
	self assert: ronda termino.
	self assert: ronda ganoLaMano.
	self deny: ronda ganoElPie.
	self should: [ronda manoJuega: cuatroDeOro] 
		raise: Error 
		withExceptionDo: [:error | 
			self assert: Ronda noSePuedeJugarPorquelaPartidaYaTermino equals: error messageText.
			self assert: ronda cartasDeLaMano includes: cuatroDeOro.
		]! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 21:16:38'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 21:16:38'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 21:16:38'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 21:16:38'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 21:16:38'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 21:16:38'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 21:16:38'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 21:16:38'!
PASSED!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 21:16:38'!
PASSED!

!testRun: #RondaTest #test10CuandoGanaElPieLeTocaAlPie stamp: 'UC 7/5/2021 21:16:38'!
PASSED!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 21:16:38'!
PASSED!

!testRun: #RondaTest #test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 21:16:38'!
PASSED!

!testRun: #RondaTest #test13CuandoElPieGanaLaPrimeraLaManoGanaLaSegundaYLaManoJuegaLeTocaAlPie stamp: 'UC 7/5/2021 21:16:38'!
PASSED!

!testRun: #RondaTest #test14CuandoElPieEmpardaConLaManoLeTocaALaMano stamp: 'UC 7/5/2021 21:16:38'!
PASSED!

!testRun: #RondaTest #test15CuandoLaManoGanaLaPrimeraYLaSegundaLaManoGanaLaRondaYNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 21:16:38'!
PASSED!

!testRun: #RondaTest #test16CuandoElPieGanaLaPrimeraYLaSegundaElPieGanaLaRondaYNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 21:16:38'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:18:11'!
test17CuandoLaManoGanaLaPrimeraElPieGanaLaSegundaYLaManoGanaLaTerceraLaManoGana
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeBasto.
	
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: anchoDeBasto.
	
	ronda manoJuega: anchoDeEspada.
	ronda pieJuega: tresDeBasto.
	
	
	self assert: ronda termino.
	! !

!testRun: #RondaTest #test17CuandoLaManoGanaLaPrimeraElPieGanaLaSegundaYLaManoGanaLaTerceraLaManoGana stamp: 'UC 7/5/2021 21:18:13'!
ERROR!

!testRun: #RondaTest #test17CuandoLaManoGanaLaPrimeraElPieGanaLaSegundaYLaManoGanaLaTerceraLaManoGana stamp: 'UC 7/5/2021 21:18:13'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:18:25' prior: 50867835!
test17CuandoLaManoGanaLaPrimeraElPieGanaLaSegundaYLaManoGanaLaTerceraLaManoGana
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeBasto.
	
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: anchoDeBasto.
	
	ronda pieJuega: tresDeBasto.
	ronda manoJuega: anchoDeEspada.
	
	
	
	self assert: ronda termino.
	! !

!testRun: #RondaTest #test17CuandoLaManoGanaLaPrimeraElPieGanaLaSegundaYLaManoGanaLaTerceraLaManoGana stamp: 'UC 7/5/2021 21:18:27'!
PASSED!

!testRun: #RondaTest #test17CuandoLaManoGanaLaPrimeraElPieGanaLaSegundaYLaManoGanaLaTerceraLaManoGana stamp: 'UC 7/5/2021 21:18:29'!
PASSED!

!methodRemoval: RondaTest #test17CuandoLaManoGanaLaPrimeraElPieGanaLaSegundaYLaManoGanaLaTerceraLaManoGana stamp: 'UC 7/5/2021 21:18:39'!
test17CuandoLaManoGanaLaPrimeraElPieGanaLaSegundaYLaManoGanaLaTerceraLaManoGana
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeBasto.
	
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: anchoDeBasto.
	
	ronda pieJuega: tresDeBasto.
	ronda manoJuega: anchoDeEspada.
	
	
	
	self assert: ronda termino.
	!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:20:33'!
test17
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeBasto.
	
	ronda manoJuega: anchoDeEspada.
	ronda pieJuega: anchoDeBasto.
	
	
	self assert: ronda termino.
	self should: [ronda manoJuega: cuatroDeOro] raise: Error withExceptionDo: [:error | self assert: Ronda noSePuedeJugarPorquelaPartidaYaTermino equals: error messageText ]! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:21:28' prior: 50867913!
test17
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: anchoDeEspada.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: tresDeBasto .
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeBasto.
	
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: anchoDeBasto.
	
	ronda pieJuega: anchoDeEspada.
	ronda manoJuega: tresDeBasto.
	
	
	self assert: ronda termino.
	self should: [ronda manoJuega: cuatroDeOro] raise: Error withExceptionDo: [:error | self assert: Ronda noSePuedeJugarPorquelaPartidaYaTermino equals: error messageText ]! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:21:52' prior: 50867934!
test17
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: anchoDeEspada.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: tresDeBasto .
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeBasto.
	
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: anchoDeBasto.
	
	ronda pieJuega: anchoDeEspada.
	ronda manoJuega: tresDeBasto.
	
	
	self assert: ronda termino.
	self assert: ronda ganoElPie.
	self assert: ronda ganoLaMano not.! !

!testRun: #RondaTest #test17 stamp: 'UC 7/5/2021 21:21:55'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:23:12'!
test15CuandoLaManoGanaDosEnfrentamientosLaManoGanaLaRondaYNoSePuedeSeguirJugando
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeBasto.
	
	ronda manoJuega: anchoDeEspada.
	ronda pieJuega: anchoDeBasto.
	
	
	self assert: ronda termino.
	self assert: ronda ganoLaMano.
	self deny: ronda ganoElPie.
	self should: [ronda manoJuega: cuatroDeOro] 
		raise: Error 
		withExceptionDo: [:error | 
			self assert: Ronda noSePuedeJugarPorquelaPartidaYaTermino equals: error messageText.
			self assert: ronda cartasDeLaMano includes: cuatroDeOro.
		]! !

!methodRemoval: RondaTest #test15CuandoLaManoGanaLaPrimeraYLaSegundaLaManoGanaLaRondaYNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 21:23:12'!
test15CuandoLaManoGanaLaPrimeraYLaSegundaLaManoGanaLaRondaYNoSePuedeSeguirJugando
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeBasto.
	
	ronda manoJuega: anchoDeEspada.
	ronda pieJuega: anchoDeBasto.
	
	
	self assert: ronda termino.
	self assert: ronda ganoLaMano.
	self deny: ronda ganoElPie.
	self should: [ronda manoJuega: cuatroDeOro] 
		raise: Error 
		withExceptionDo: [:error | 
			self assert: Ronda noSePuedeJugarPorquelaPartidaYaTermino equals: error messageText.
			self assert: ronda cartasDeLaMano includes: cuatroDeOro.
		]!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:23:28'!
test16CuandoElPieGanaDosEnfrentamientoElPieGanaLaRondaYNoSePuedeSeguirJugando
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: tresDeBasto.
	
	ronda pieJuega: anchoDeBasto.
	ronda manoJuega: sieteDeOro.
	
	
	self assert: ronda termino.
	self deny: ronda ganoLaMano.
	self assert: ronda ganoElPie.
	self should: [ronda pieJuega: cuatroDeBasto] 
		raise: Error 
		withExceptionDo: [:error | 
			self assert: Ronda noSePuedeJugarPorquelaPartidaYaTermino equals: error messageText.
			self assert: ronda cartasDelPie includes: cuatroDeBasto.
		]! !

!methodRemoval: RondaTest #test16CuandoElPieGanaLaPrimeraYLaSegundaElPieGanaLaRondaYNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 21:23:28'!
test16CuandoElPieGanaLaPrimeraYLaSegundaElPieGanaLaRondaYNoSePuedeSeguirJugando
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: tresDeBasto.
	
	ronda pieJuega: anchoDeBasto.
	ronda manoJuega: sieteDeOro.
	
	
	self assert: ronda termino.
	self deny: ronda ganoLaMano.
	self assert: ronda ganoElPie.
	self should: [ronda pieJuega: cuatroDeBasto] 
		raise: Error 
		withExceptionDo: [:error | 
			self assert: Ronda noSePuedeJugarPorquelaPartidaYaTermino equals: error messageText.
			self assert: ronda cartasDelPie includes: cuatroDeBasto.
		]!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:23:54' prior: 50868034!
test16CuandoElPieGanaDosEnfrentamientoElPieGanaLaRondaYNoSePuedeSeguirJugando
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: anchoDeEspada.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: tresDeBasto .
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeBasto.
	
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: anchoDeBasto.
	
	ronda pieJuega: anchoDeEspada.
	ronda manoJuega: tresDeBasto.
	
	
	self assert: ronda termino.
	self deny: ronda ganoLaMano.
	self assert: ronda ganoElPie.
	self should: [ronda pieJuega: cuatroDeBasto] 
		raise: Error 
		withExceptionDo: [:error | 
			self assert: Ronda noSePuedeJugarPorquelaPartidaYaTermino equals: error messageText.
			self assert: ronda cartasDelPie includes: cuatroDeBasto.
		]! !

!testRun: #RondaTest #test16CuandoElPieGanaDosEnfrentamientoElPieGanaLaRondaYNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 21:23:55'!
FAILURE!

!testRun: #RondaTest #test16CuandoElPieGanaDosEnfrentamientoElPieGanaLaRondaYNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 21:23:55'!
FAILURE!

!testRun: #RondaTest #test16CuandoElPieGanaDosEnfrentamientoElPieGanaLaRondaYNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 21:24:09'!
FAILURE!

!testRun: #RondaTest #test16CuandoElPieGanaDosEnfrentamientoElPieGanaLaRondaYNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 21:24:09'!
FAILURE!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:26:16'!
test16CuandoElPieGanaDosEnfrentamientoElPieGanaLaRonda
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: anchoDeEspada.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: tresDeBasto .
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeBasto.
	
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: anchoDeBasto.
	
	ronda pieJuega: anchoDeEspada.
	ronda manoJuega: tresDeBasto.
	
	
	self assert: ronda termino.
	self deny: ronda ganoLaMano.
	self assert: ronda ganoElPie.
	
	"En este caso no puedo testear que no se pueda seguir jugando ya que no est� permitido tener m�s de 3 cartas y los jugadores ya jugaron todas sus cartas"
	! !

!methodRemoval: RondaTest #test16CuandoElPieGanaDosEnfrentamientoElPieGanaLaRondaYNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 21:26:31'!
test16CuandoElPieGanaDosEnfrentamientoElPieGanaLaRondaYNoSePuedeSeguirJugando
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: anchoDeEspada.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: tresDeBasto .
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeBasto.
	
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: anchoDeBasto.
	
	ronda pieJuega: anchoDeEspada.
	ronda manoJuega: tresDeBasto.
	
	
	self assert: ronda termino.
	self deny: ronda ganoLaMano.
	self assert: ronda ganoElPie.
	self should: [ronda pieJuega: cuatroDeBasto] 
		raise: Error 
		withExceptionDo: [:error | 
			self assert: Ronda noSePuedeJugarPorquelaPartidaYaTermino equals: error messageText.
			self assert: ronda cartasDelPie includes: cuatroDeBasto.
		]!

!methodRemoval: RondaTest #test17 stamp: 'UC 7/5/2021 21:26:41'!
test17
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: anchoDeEspada.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: tresDeBasto .
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeBasto.
	
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: anchoDeBasto.
	
	ronda pieJuega: anchoDeEspada.
	ronda manoJuega: tresDeBasto.
	
	
	self assert: ronda termino.
	self assert: ronda ganoElPie.
	self assert: ronda ganoLaMano not.!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:27:59' prior: 50868137!
test16CuandoElPieGanaDosEnfrentamientoElPieGanaLaRonda
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: anchoDeEspada.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: tresDeBasto .
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeBasto.
	
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: anchoDeBasto.
	
	ronda pieJuega: anchoDeEspada.
	ronda manoJuega: tresDeBasto.
	
	
	self assert: ronda termino.
	self deny: ronda ganoLaMano.
	self assert: ronda ganoElPie.
	
	
	"En este caso puedo testear que no se pueda seguir jugando pero igual fallar�a ya que no est� permitido tener m�s de 3 cartas y los jugadores ya jugaron todas sus cartas. De todos modos el assert de que termin� la partida est� primero y salta eso."
	
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:28:24' prior: 50868212!
test16CuandoElPieGanaDosEnfrentamientoElPieGanaLaRonda
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: anchoDeEspada.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: tresDeBasto .
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeBasto.
	
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: anchoDeBasto.
	
	ronda pieJuega: anchoDeEspada.
	ronda manoJuega: tresDeBasto.
	
	
	self assert: ronda termino.
	self deny: ronda ganoLaMano.
	self assert: ronda ganoElPie.
	
	
	"En este caso puedo testear que no se pueda seguir jugando pero igual fallar�a ya que no est� permitido tener m�s de 3 cartas y los jugadores ya jugaron todas sus cartas. De todos modos el assert de que termin� la partida est� primero y salta eso."
	self should: [ronda pieJuega: cuatroDeOro] 
		raise: Error 
		withExceptionDo: [:error | 
			self assert: Ronda noSePuedeJugarPorquelaPartidaYaTermino equals: error messageText.
			self assert: ronda cartasDeLaMano includes: cuatroDeOro.
		]
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:28:31' prior: 50868241!
test16CuandoElPieGanaDosEnfrentamientoElPieGanaLaRonda
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: anchoDeEspada.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: tresDeBasto .
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeBasto.
	
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: anchoDeBasto.
	
	ronda pieJuega: anchoDeEspada.
	ronda manoJuega: tresDeBasto.
	
	
	self assert: ronda termino.
	self deny: ronda ganoLaMano.
	self assert: ronda ganoElPie.
	
	
	"En este caso puedo testear que no se pueda seguir jugando pero igual fallar�a ya que no est� permitido tener m�s de 3 cartas y los jugadores ya jugaron todas sus cartas. De todos modos el assert de que termin� la partida est� primero y salta eso."
	self should: [ronda pieJuega: cuatroDeOro] 
		raise: Error 
		withExceptionDo: [:error | 
			self assert: Ronda noSePuedeJugarPorquelaPartidaYaTermino equals: error messageText.
		]
	! !

!methodRemoval: RondaTest #xtest16CuandoLaManoGanaLaPrimeraElPieGanaLaSegundaYLaManoGanaLaTerceraLaManoGana stamp: 'UC 7/5/2021 21:28:39'!
xtest16CuandoLaManoGanaLaPrimeraElPieGanaLaSegundaYLaManoGanaLaTerceraLaManoGana
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: tresDeBasto.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeEspada.
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: cuatroDeBasto.
	
	ronda manoJuega: anchoDeEspada.
	ronda pieJuega: anchoDeBasto.
	
	
	self assert: ronda termino.
	self should: [ronda manoJuega: cuatroDeOro] raise: Error withExceptionDo: [:error | self assert: Ronda noSePuedeJugarPorquelaPartidaYaTermino equals: error messageText ]!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:30:01'!
test17CuandoHayPardaEnLaPrimeraElQueGanaLaSegundaGana
	| mano pie ronda |
	
	pie := self crearJugadorCon: anchoDeBasto con: cuatroDeBasto con: anchoDeEspada.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: tresDeBasto .
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: cuatroDeBasto.
	
	ronda manoJuega: tresDeBasto.
	ronda pieJuega: anchoDeEspada.
	
	
	self assert: ronda termino.
	self deny: ronda ganoLaMano.
	self assert: ronda ganoElPie.
	
	
	"En este caso puedo testear que no se pueda seguir jugando pero igual fallar�a ya que no est� permitido tener m�s de 3 cartas y los jugadores ya jugaron todas sus cartas. De todos modos el assert de que termin� la partida est� primero y salta eso."
	self should: [ronda pieJuega: cuatroDeOro] 
		raise: Error 
		withExceptionDo: [:error | 
			self assert: Ronda noSePuedeJugarPorquelaPartidaYaTermino equals: error messageText.
		]
	! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 21:30:04'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 21:30:04'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 21:30:05'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 21:30:05'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 21:30:05'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 21:30:05'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 21:30:05'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 21:30:05'!
PASSED!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 21:30:05'!
PASSED!

!testRun: #RondaTest #test10CuandoGanaElPieLeTocaAlPie stamp: 'UC 7/5/2021 21:30:05'!
PASSED!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 21:30:05'!
PASSED!

!testRun: #RondaTest #test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 21:30:05'!
PASSED!

!testRun: #RondaTest #test13CuandoElPieGanaLaPrimeraLaManoGanaLaSegundaYLaManoJuegaLeTocaAlPie stamp: 'UC 7/5/2021 21:30:05'!
PASSED!

!testRun: #RondaTest #test14CuandoElPieEmpardaConLaManoLeTocaALaMano stamp: 'UC 7/5/2021 21:30:05'!
PASSED!

!testRun: #RondaTest #test15CuandoLaManoGanaDosEnfrentamientosLaManoGanaLaRondaYNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 21:30:05'!
PASSED!

!testRun: #RondaTest #test16CuandoElPieGanaDosEnfrentamientoElPieGanaLaRonda stamp: 'UC 7/5/2021 21:30:05'!
PASSED!

!testRun: #RondaTest #test17CuandoHayPardaEnLaPrimeraElQueGanaLaSegundaGana stamp: 'UC 7/5/2021 21:30:05'!
PASSED!

!testRun: #RondaTest #test17CuandoHayPardaEnLaPrimeraElQueGanaLaSegundaGana stamp: 'UC 7/5/2021 21:30:15'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:31:13' prior: 50868337!
test17CuandoHayPardaEnLaPrimeraElQueGanaLaSegundaGana
	| mano pie ronda |
	
	pie := self crearJugadorCon: tresDeBasto con: cuatroDeBasto con: anchoDeEspada.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeBasto .
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: cuatroDeBasto.
	
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: tresDeBasto.
	
	
	self assert: ronda termino.
	self deny: ronda ganoLaMano.
	self assert: ronda ganoElPie.
	
	
	"En este caso puedo testear que no se pueda seguir jugando pero igual fallar�a ya que no est� permitido tener m�s de 3 cartas y los jugadores ya jugaron todas sus cartas. De todos modos el assert de que termin� la partida est� primero y salta eso."
	self should: [ronda pieJuega: cuatroDeOro] 
		raise: Error 
		withExceptionDo: [:error | 
			self assert: Ronda noSePuedeJugarPorquelaPartidaYaTermino equals: error messageText.
		]
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:31:24' prior: 50868436!
test17CuandoHayPardaEnLaPrimeraElQueGanaLaSegundaGana
	| mano pie ronda |
	
	pie := self crearJugadorCon: tresDeBasto con: cuatroDeBasto con: anchoDeEspada.
	
	mano := self crearJugadorCon: sieteDeOro con: cuatroDeOro con: anchoDeBasto .
	
	ronda := Ronda mano: mano pie: pie.
	
	ronda manoJuega: cuatroDeOro.
	ronda pieJuega: cuatroDeBasto.
	
	ronda manoJuega: sieteDeOro.
	ronda pieJuega: tresDeBasto.
	
	
	self assert: ronda termino.
	self assert: ronda ganoLaMano.
	self deny: ronda ganoElPie.
	
	
	"En este caso puedo testear que no se pueda seguir jugando pero igual fallar�a ya que no est� permitido tener m�s de 3 cartas y los jugadores ya jugaron todas sus cartas. De todos modos el assert de que termin� la partida est� primero y salta eso."
	self should: [ronda pieJuega: cuatroDeOro] 
		raise: Error 
		withExceptionDo: [:error | 
			self assert: Ronda noSePuedeJugarPorquelaPartidaYaTermino equals: error messageText.
		]
	! !

!testRun: #RondaTest #test17CuandoHayPardaEnLaPrimeraElQueGanaLaSegundaGana stamp: 'UC 7/5/2021 21:31:26'!
FAILURE!

!testRun: #RondaTest #test17CuandoHayPardaEnLaPrimeraElQueGanaLaSegundaGana stamp: 'UC 7/5/2021 21:31:26'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:33:33' prior: 50867578!
pieJuega: unaCarta
	self verificarQueNoHayaTerminadoLaRonda.
	self verificarQueMeToque: leTocaALaMano not.
	self jugar: unaCarta siLaTengoEn: cartasPie.
	
	leTocaALaMano :=  elOponenteJugoEstaRonda 
				ifTrue: [ 
					| ganoElEnfrentamientoLaMano empardo |
					ganoElEnfrentamientoLaMano := elOponenteJugo mataA: unaCarta .
					empardo := elOponenteJugo empardaCon: unaCarta.
					self actualizarLosContadoresCuando: ganoElEnfrentamientoLaMano y: empardo.
					ganoElEnfrentamientoLaMano or: empardo.
				] ifFalse: [true].
	self avisarleAlOponenteQueJugue: unaCarta.
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:33:47'!
actualizarLosContadoresCuando: ganoElEnfrentamientoLaMano y: huboParda
	ganoElEnfrentamientoLaMano 
		ifTrue: [enfrentamientosGanadosPorLaMano := enfrentamientosGanadosPorLaMano + 1]
		ifFalse: [enfrentamientosGanadosPorElPie := enfrentamientosGanadosPorElPie + 1]! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:34:34' prior: 50868530!
actualizarLosContadoresCuando: ganoElEnfrentamientoLaMano y: huboParda
	huboParda ifTrue: [
		enfrentamientosGanadosPorLaMano := enfrentamientosGanadosPorLaMano + 1.
		enfrentamientosGanadosPorElPie := enfrentamientosGanadosPorElPie + 1
	] ifFalse:[
		ganoElEnfrentamientoLaMano 
			ifTrue: [enfrentamientosGanadosPorLaMano := enfrentamientosGanadosPorLaMano + 1]
			ifFalse: [enfrentamientosGanadosPorElPie := enfrentamientosGanadosPorElPie + 1]
	]! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:35:45'!
enfrentamientosJugados
	^enfrentamientosGanadosPorLaMano + enfrentamientosGanadosPorElPie ! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:36:35' prior: 50868542!
actualizarLosContadoresCuando: ganoElEnfrentamientoLaMano y: huboParda
	(self enfrentamientosJugados = 0 and: huboParda) ifTrue: [
		enfrentamientosGanadosPorLaMano := enfrentamientosGanadosPorLaMano + 1.
		enfrentamientosGanadosPorElPie := enfrentamientosGanadosPorElPie + 1
	] ifFalse:[
		ganoElEnfrentamientoLaMano 
			ifTrue: [enfrentamientosGanadosPorLaMano := enfrentamientosGanadosPorLaMano + 1]
			ifFalse: [enfrentamientosGanadosPorElPie := enfrentamientosGanadosPorElPie + 1]
	]! !

!testRun: #RondaTest #test01CuandoUnJugadorTieneMenosDe3CartasDaError stamp: 'UC 7/5/2021 21:36:43'!
PASSED!

!testRun: #RondaTest #test02CuandoLasCartasSeRepitenEntreLosJugadoresDaError stamp: 'UC 7/5/2021 21:36:43'!
PASSED!

!testRun: #RondaTest #test03CuandoLaRondaEmpiezaLeTocaALaMano stamp: 'UC 7/5/2021 21:36:43'!
PASSED!

!testRun: #RondaTest #test04CuandoElPieJuegaEnElPrimerTurnoDaError stamp: 'UC 7/5/2021 21:36:43'!
PASSED!

!testRun: #RondaTest #test05CuandoLaManoJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 21:36:43'!
PASSED!

!testRun: #RondaTest #test06CuandoLaManoJuegaUnaCartaLeTocaAlPieYLaManoPierdeLaCartaJugada stamp: 'UC 7/5/2021 21:36:43'!
PASSED!

!testRun: #RondaTest #test07CuandoLaManoJuegaLosDosPrimerosTurnosDaError stamp: 'UC 7/5/2021 21:36:43'!
PASSED!

!testRun: #RondaTest #test08CuandoElPiePierdePrimeraLeTocaALaManoYElPiePierdeLaCartaJugada stamp: 'UC 7/5/2021 21:36:43'!
PASSED!

!testRun: #RondaTest #test09CuandoElPieJuegaUnaCartaQueNoTieneDaError stamp: 'UC 7/5/2021 21:36:43'!
PASSED!

!testRun: #RondaTest #test10CuandoGanaElPieLeTocaAlPie stamp: 'UC 7/5/2021 21:36:43'!
PASSED!

!testRun: #RondaTest #test11CuandoElPieGanaLaPrimeraYElPieJuegaLeTocaALaMano stamp: 'UC 7/5/2021 21:36:43'!
PASSED!

!testRun: #RondaTest #test12CuandoElPieGanaLaPrimeraYLaManoGanaLaSegundaLeTocaALaMano stamp: 'UC 7/5/2021 21:36:43'!
PASSED!

!testRun: #RondaTest #test13CuandoElPieGanaLaPrimeraLaManoGanaLaSegundaYLaManoJuegaLeTocaAlPie stamp: 'UC 7/5/2021 21:36:43'!
PASSED!

!testRun: #RondaTest #test14CuandoElPieEmpardaConLaManoLeTocaALaMano stamp: 'UC 7/5/2021 21:36:43'!
PASSED!

!testRun: #RondaTest #test15CuandoLaManoGanaDosEnfrentamientosLaManoGanaLaRondaYNoSePuedeSeguirJugando stamp: 'UC 7/5/2021 21:36:43'!
PASSED!

!testRun: #RondaTest #test16CuandoElPieGanaDosEnfrentamientoElPieGanaLaRonda stamp: 'UC 7/5/2021 21:36:43'!
PASSED!

!testRun: #RondaTest #test17CuandoHayPardaEnLaPrimeraElQueGanaLaSegundaGana stamp: 'UC 7/5/2021 21:36:43'!
PASSED!

!methodRemoval: Ronda #actualizarLosContadoresCuando: stamp: 'UC 7/5/2021 21:37:31'!
actualizarLosContadoresCuando: ganoElEnfrentamientoLaMano
	ganoElEnfrentamientoLaMano 
		ifTrue: [enfrentamientosGanadosPorLaMano := enfrentamientosGanadosPorLaMano + 1]
		ifFalse: [enfrentamientosGanadosPorElPie := enfrentamientosGanadosPorElPie + 1]!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:37:55' prior: 50867598!
manoJuega: unaCarta
	self verificarQueNoHayaTerminadoLaRonda.
	self verificarQueMeToque: leTocaALaMano.
	self jugar: unaCarta siLaTengoEn: cartasMano.
	
	leTocaALaMano := elOponenteJugoEstaRonda 
			ifTrue: [ 
				| ganoElEnfrentamientoLaMano |
				ganoElEnfrentamientoLaMano := (unaCarta mataA: elOponenteJugo).
				self actualizarLosContadoresCuando: ganoElEnfrentamientoLaMano y: false.
				ganoElEnfrentamientoLaMano.
			] 
			ifFalse: [false].
	self avisarleAlOponenteQueJugue: unaCarta.
	! !

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'UC 7/5/2021 21:50:30'!
Object subclass: #Ronda
	instanceVariableNames: 'cartasMano cartasPie leTocaALaMano cartaQueJugoElOponente elOponenteJugoEstaRonda enfrentamientosGanadosPorLaMano enfrentamientosGanadosPorElPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:50:30' prior: 50868656!
manoJuega: unaCarta
	self verificarQueNoHayaTerminadoLaRonda.
	self verificarQueMeToque: leTocaALaMano.
	self jugar: unaCarta siLaTengoEn: cartasMano.
	
	leTocaALaMano := elOponenteJugoEstaRonda 
			ifTrue: [ 
				| ganoElEnfrentamientoLaMano |
				ganoElEnfrentamientoLaMano := (unaCarta mataA: cartaQueJugoElOponente).
				self actualizarLosContadoresCuando: ganoElEnfrentamientoLaMano y: false.
				ganoElEnfrentamientoLaMano.
			] 
			ifFalse: [false].
	self avisarleAlOponenteQueJugue: unaCarta.
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:50:30' prior: 50868509!
pieJuega: unaCarta
	self verificarQueNoHayaTerminadoLaRonda.
	self verificarQueMeToque: leTocaALaMano not.
	self jugar: unaCarta siLaTengoEn: cartasPie.
	
	leTocaALaMano :=  elOponenteJugoEstaRonda 
				ifTrue: [ 
					| ganoElEnfrentamientoLaMano empardo |
					ganoElEnfrentamientoLaMano := cartaQueJugoElOponente mataA: unaCarta .
					empardo := cartaQueJugoElOponente empardaCon: unaCarta.
					self actualizarLosContadoresCuando: ganoElEnfrentamientoLaMano y: empardo.
					ganoElEnfrentamientoLaMano or: empardo.
				] ifFalse: [true].
	self avisarleAlOponenteQueJugue: unaCarta.
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'UC 7/5/2021 21:50:30' prior: 50865585!
avisarleAlOponenteQueJugue: unaCarta
	elOponenteJugoEstaRonda := elOponenteJugoEstaRonda not.
	cartaQueJugoElOponente := unaCarta.
	! !
!Ronda methodsFor: 'juego' stamp: 'UC 7/5/2021 21:54:53' prior: 50868686!
manoJuega: unaCarta
	self verificarQueNoHayaTerminadoLaRonda.
	self verificarQueMeToque: leTocaALaMano.
	self jugar: unaCarta siLaTengoEn: cartasMano.
	
	"Este codigo esta bastante similar al de pieJuega:, con mas tiempo encontraria una abstraccion mas linda"
	leTocaALaMano := elOponenteJugoEstaRonda 
			ifTrue: [ 
				| ganoElEnfrentamientoLaMano |
				ganoElEnfrentamientoLaMano := (unaCarta mataA: cartaQueJugoElOponente).
				self actualizarLosContadoresCuando: ganoElEnfrentamientoLaMano y: false.
				ganoElEnfrentamientoLaMano.
			] 
			ifFalse: [false].
	self avisarleAlOponenteQueJugue: unaCarta.
	! !
!Ronda methodsFor: 'juego' stamp: 'UC 7/5/2021 21:55:01' prior: 50868705!
pieJuega: unaCarta
	self verificarQueNoHayaTerminadoLaRonda.
	self verificarQueMeToque: leTocaALaMano not.
	self jugar: unaCarta siLaTengoEn: cartasPie.
	
	"Este codigo esta bastante similar al de manoJuega:, con mas tiempo encontraria una abstraccion mas linda"
	leTocaALaMano :=  elOponenteJugoEstaRonda 
				ifTrue: [ 
					| ganoElEnfrentamientoLaMano empardo |
					ganoElEnfrentamientoLaMano := cartaQueJugoElOponente mataA: unaCarta .
					empardo := cartaQueJugoElOponente empardaCon: unaCarta.
					self actualizarLosContadoresCuando: ganoElEnfrentamientoLaMano y: empardo.
					ganoElEnfrentamientoLaMano or: empardo.
				] ifFalse: [true].
	self avisarleAlOponenteQueJugue: unaCarta.
	! !