

----STARTUP---- (5 July 2021 17:19:42) as /home/awolfsdorf/Dropbox/CSCOM/IngeSoft1/2doParcial/CuisUniversity-4532.image!


----End fileIn of /home/awolfsdorf/Dropbox/CSCOM/IngeSoft1/2doParcial/ISW1-2021-1C-2doParcial.st----!

TestCase subclass: #EnfrentamientoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #EnfrentamientoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'AW 7/5/2021 17:38:43'!
TestCase subclass: #EnfrentamientoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Enfrentamiento category: 'ISW1-2021-1C-2doParcial' stamp: 'AW 7/5/2021 17:41:56'!
Object subclass: #Enfrentamiento
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!EnfrentamientoTest methodsFor: 'nil' stamp: 'AW 7/5/2021 17:41:49'!
test01

	| manoDeMano manoDePie |
	manoDeMano := OrderedCollection with: CartaDeTruco anchoDeBasto .
	manoDePie := OrderedCollection with: CartaDeTruco anchoDeEspada with: CartaDeTruco sieteDeEspada with: CartaDeTruco sieteDeOro.
	
	Enfrentamiento! !

!classRemoval: #Enfrentamiento stamp: 'AW 7/5/2021 17:42:15'!
Object subclass: #Enfrentamiento
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classRenamed: #EnfrentamientoTest as: #RondaTest stamp: 'AW 7/5/2021 17:42:22'!
Smalltalk renameClassNamed: #EnfrentamientoTest as: #RondaTest!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'AW 7/5/2021 17:43:50'!
Object subclass: #Ronda
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 17:43:47' prior: 50332192!
test01

	| manoDeMano manoDePie |
	manoDeMano := OrderedCollection with: CartaDeTruco anchoDeBasto .
	manoDePie := OrderedCollection with: CartaDeTruco anchoDeEspada with: CartaDeTruco sieteDeEspada with: CartaDeTruco sieteDeOro.
	
	
	
	self should: [ Ronda mano: manoDeMano pie: manoDePie. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Ronda configuracionDeRondaInvalidaErrorDescription	
	! !

!testRun: #RondaTest #test01 stamp: 'AW 7/5/2021 17:43:58'!
ERROR!
!Ronda class methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 17:44:08'!
configuracionDeRondaInvalidaErrorDescription
	self shouldBeImplemented.! !
!Ronda class methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 17:44:42' prior: 50332239!
configuracionDeRondaInvalidaErrorDescription

	^'Configuración de ronda inválida!!'! !

!testRun: #RondaTest #test01 stamp: 'AW 7/5/2021 17:44:44'!
ERROR!
!Ronda class methodsFor: 'instance creation' stamp: 'AW 7/5/2021 17:44:51'!
mano: anOrderedCollection pie: anOrderedCollection2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeMano: anOrderedCollection pie: anOrderedCollection2 ! !
!Ronda class methodsFor: 'instance creation' stamp: 'AW 7/5/2021 17:45:30' prior: 50332253!
mano: manoDeMano pie: manoDePie 


	^self new initializeMano: manoDeMano pie: manoDePie! !

!testRun: #RondaTest #test01 stamp: 'AW 7/5/2021 17:45:32'!
ERROR!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'AW 7/5/2021 17:45:53'!
Object subclass: #Ronda
	instanceVariableNames: 'manoDeMano_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'AW 7/5/2021 17:45:53'!
Object subclass: #Ronda
	instanceVariableNames: 'manoDeMano_CHANGE_ME manoDePie_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'initialization' stamp: 'AW 7/5/2021 17:45:53'!
initializeMano: manoDeMano pie: manoDePie 
	self shouldBeImplemented.
	manoDeMano_CHANGE_ME := manoDeMano.
	manoDePie_CHANGE_ME := manoDePie.! !
!Ronda methodsFor: 'initialization' stamp: 'AW 7/5/2021 17:46:04' prior: 50332287!
initializeMano: manoDeMano pie: manoDePie 

	manoDeMano_CHANGE_ME := manoDeMano.
	manoDePie_CHANGE_ME := manoDePie.! !
!Ronda methodsFor: 'initialization' stamp: 'AW 7/5/2021 17:46:10' prior: 50332295!
initializeMano: unaManoDeMano pie: manoDePie 

	manoDeMano_CHANGE_ME := unaManoDeMano.
	manoDePie_CHANGE_ME := manoDePie.! !
!Ronda methodsFor: 'initialization' stamp: 'AW 7/5/2021 17:46:20' prior: 50332302!
initializeMano: unaManoDeMano pie: unaManoDePie 

	manoDeMano_CHANGE_ME := unaManoDeMano.
	manoDePie_CHANGE_ME := unaManoDePie.! !

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'AW 7/5/2021 17:46:26'!
Object subclass: #Ronda
	instanceVariableNames: 'manoDeMano manoDePie_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 17:46:26' prior: 50332309!
initializeMano: unaManoDeMano pie: unaManoDePie 

	manoDeMano := unaManoDeMano.
	manoDePie_CHANGE_ME := unaManoDePie.! !

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'AW 7/5/2021 17:46:34'!
Object subclass: #Ronda
	instanceVariableNames: 'manoDeMano manoDePie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 17:46:34' prior: 50332324!
initializeMano: unaManoDeMano pie: unaManoDePie 

	manoDeMano := unaManoDeMano.
	manoDePie := unaManoDePie.! !

!testRun: #RondaTest #test01 stamp: 'AW 7/5/2021 17:46:37'!
FAILURE!
!Ronda methodsFor: 'initialization' stamp: 'AW 7/5/2021 17:47:50' prior: 50332339!
initializeMano: unaManoDeMano pie: unaManoDePie 

	manoDeMano := unaManoDeMano.
	manoDePie := unaManoDePie.
	
	^self error: self class configuracionDeRondaInvalidaErrorDescription.! !

!testRun: #RondaTest #test01 stamp: 'AW 7/5/2021 17:47:55'!
PASSED!

!testRun: #RondaTest #test01 stamp: 'AW 7/5/2021 17:47:55'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 17:49:59'!
test02
	| manoDeMano manoDePie stubs |
	manoDeMano := OrderedCollection with: stubs anchoDeBasto with: stubs.
	manoDePie := OrderedCollection with: CartaDeTruco anchoDeEspada with: CartaDeTruco sieteDeEspada with: CartaDeTruco sieteDeOro.
	
	
	
	self should: [ Ronda mano: manoDeMano pie: manoDePie. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Ronda configuracionDeRondaInvalidaErrorDescription	
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 17:54:40' prior: 50332361!
test02
	| manoDeMano manoDePie ronda |
	manoDeMano := OrderedCollection with: CartaDeTruco anchoDeBasto with: (CartaDeTruco oroCon: 6) with: (CartaDeTruco bastoCon: 4).
	manoDePie := OrderedCollection with: CartaDeTruco anchoDeEspada with: CartaDeTruco sieteDeEspada with: CartaDeTruco sieteDeOro.
	
	
	
	ronda := Ronda mano: manoDeMano pie: manoDePie. 


	self assert: (ronda hayGanador) equals: false.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 17:57:39' prior: 50332377!
test02
	| manoDeMano manoDePie ronda |
	manoDeMano := OrderedCollection with: CartaDeTruco anchoDeBasto with: (CartaDeTruco oroCon: 6) with: (CartaDeTruco bastoCon: 4).
	manoDePie := OrderedCollection with: CartaDeTruco anchoDeEspada with: CartaDeTruco sieteDeEspada with: CartaDeTruco sieteDeOro.
	
	
	
	ronda := Ronda mano: manoDeMano pie: manoDePie. 


	self assert: (ronda pieJuega: 	CartaDeTruco anchoDeEspada) equals: false.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 17:58:07' prior: 50332393!
test02
	| manoDeMano manoDePie ronda |
	manoDeMano := OrderedCollection with: CartaDeTruco anchoDeBasto with: (CartaDeTruco oroCon: 6) with: (CartaDeTruco bastoCon: 4).
	manoDePie := OrderedCollection with: CartaDeTruco anchoDeEspada with: CartaDeTruco sieteDeEspada with: CartaDeTruco sieteDeOro.
	
	
	
	ronda := Ronda mano: manoDeMano pie: manoDePie. 


	self should: [ ronda pieJuega: 	CartaDeTruco anchoDeEspada. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Ronda configuracionDeRondaInvalidaErrorDescription.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 17:58:23' prior: 50332410!
test02
	| manoDeMano manoDePie ronda |
	manoDeMano := OrderedCollection with: CartaDeTruco anchoDeBasto with: (CartaDeTruco oroCon: 6) with: (CartaDeTruco bastoCon: 4).
	manoDePie := OrderedCollection with: CartaDeTruco anchoDeEspada with: CartaDeTruco sieteDeEspada with: CartaDeTruco sieteDeOro.
	
	
	
	ronda := Ronda mano: manoDeMano pie: manoDePie. 


	self should: [ ronda pieJuega: 	CartaDeTruco anchoDeEspada. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Ronda noEsTuTurnoErrorDescription.! !

!testRun: #RondaTest #test02 stamp: 'AW 7/5/2021 17:58:28'!
ERROR!
!Ronda methodsFor: 'initialization' stamp: 'AW 7/5/2021 18:00:19' prior: 50332348!
initializeMano: unaManoDeMano pie: unaManoDePie 

	(unaManoDeMano size /= 3) ifTrue: [
		^self error: self class configuracionDeRondaInvalidaErrorDescription. ].

	manoDeMano := unaManoDeMano.
	manoDePie := unaManoDePie.
	! !

!testRun: #RondaTest #test02 stamp: 'AW 7/5/2021 18:00:22'!
ERROR!
!Ronda methodsFor: 'initialization' stamp: 'AW 7/5/2021 18:01:50' prior: 50332451!
initializeMano: unaManoDeMano pie: unaManoDePie 

	(unaManoDeMano size ~= 3) ifTrue: [
		^self error: self class configuracionDeRondaInvalidaErrorDescription. ].

	manoDeMano := unaManoDeMano.
	manoDePie := unaManoDePie.
	! !

!testRun: #RondaTest #test02 stamp: 'AW 7/5/2021 18:01:53'!
ERROR!

!testRun: #RondaTest #test02 stamp: 'AW 7/5/2021 18:02:07'!
ERROR!
!Ronda class methodsFor: 'error handling' stamp: 'AW 7/5/2021 18:02:22'!
noEsTuTurnoErrorDescription
	self shouldBeImplemented.! !
!Ronda class methodsFor: 'error handling' stamp: 'AW 7/5/2021 18:02:36' prior: 50332477!
noEsTuTurnoErrorDescription
	^'No es tu turno!!'.! !

!testRun: #RondaTest #test02 stamp: 'AW 7/5/2021 18:02:38'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:02:47'!
pieJuega: aCartaDeTruco 
	self shouldBeImplemented.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:03:23' prior: 50332489!
pieJuega: unaCartaDeTruco 
	
	self error: self class noEsTuTurnoErrorDescription.! !

!testRun: #RondaTest #test02 stamp: 'AW 7/5/2021 18:03:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'AW 7/5/2021 18:03:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'AW 7/5/2021 18:03:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'AW 7/5/2021 18:03:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'AW 7/5/2021 18:03:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'AW 7/5/2021 18:03:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'AW 7/5/2021 18:03:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'AW 7/5/2021 18:03:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'AW 7/5/2021 18:03:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'AW 7/5/2021 18:03:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'AW 7/5/2021 18:03:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'AW 7/5/2021 18:03:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'AW 7/5/2021 18:03:25'!
ERROR!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'AW 7/5/2021 18:03:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'AW 7/5/2021 18:03:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'AW 7/5/2021 18:03:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'AW 7/5/2021 18:03:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'AW 7/5/2021 18:03:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'AW 7/5/2021 18:03:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInválida stamp: 'AW 7/5/2021 18:03:25'!
PASSED!

!testRun: #RondaTest #test01 stamp: 'AW 7/5/2021 18:03:25'!
PASSED!

!testRun: #RondaTest #test02 stamp: 'AW 7/5/2021 18:03:25'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'AW 7/5/2021 18:03:25'!
PASSED!

!testRun: #RondaTest #test02 stamp: 'AW 7/5/2021 18:03:34'!
PASSED!

!testRun: #RondaTest #test01 stamp: 'AW 7/5/2021 18:03:34'!
PASSED!

!testRun: #RondaTest #test02 stamp: 'AW 7/5/2021 18:03:34'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:03:51' prior: 50332221!
test01

	| manoDeMano manoDePie |
	manoDePie := OrderedCollection with: CartaDeTruco anchoDeBasto .
	manoDeMano := OrderedCollection with: CartaDeTruco anchoDeEspada with: CartaDeTruco sieteDeEspada with: CartaDeTruco sieteDeOro.
	
	
	
	self should: [ Ronda mano: manoDeMano pie: manoDePie. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Ronda configuracionDeRondaInvalidaErrorDescription	
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:03:58'!
test03

	| manoDeMano manoDePie |
	manoDePie := OrderedCollection with: CartaDeTruco anchoDeBasto .
	manoDeMano := OrderedCollection with: CartaDeTruco anchoDeEspada with: CartaDeTruco sieteDeEspada with: CartaDeTruco sieteDeOro.
	
	
	
	self should: [ Ronda mano: manoDeMano pie: manoDePie. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Ronda configuracionDeRondaInvalidaErrorDescription	
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:04:08' prior: 50332581!
test01

	| manoDeMano manoDePie |
	manoDeMano := OrderedCollection with: CartaDeTruco anchoDeBasto .
	manoDePie := OrderedCollection with: CartaDeTruco anchoDeEspada with: CartaDeTruco sieteDeEspada with: CartaDeTruco sieteDeOro.
	
	
	
	self should: [ Ronda mano: manoDeMano pie: manoDePie. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Ronda configuracionDeRondaInvalidaErrorDescription	
	! !

!testRun: #RondaTest #test03 stamp: 'AW 7/5/2021 18:04:12'!
FAILURE!
!Ronda methodsFor: 'initialization' stamp: 'AW 7/5/2021 18:04:54' prior: 50332463!
initializeMano: unaManoDeMano pie: unaManoDePie 

	(unaManoDeMano size ~= 3 or: unaManoDePie size ~= 3) ifTrue: [
		^self error: self class configuracionDeRondaInvalidaErrorDescription. ].

	manoDeMano := unaManoDeMano.
	manoDePie := unaManoDePie.
	! !

!testRun: #RondaTest #test03 stamp: 'AW 7/5/2021 18:04:56'!
PASSED!

!testRun: #RondaTest #test01 stamp: 'AW 7/5/2021 18:04:56'!
PASSED!

!testRun: #RondaTest #test02 stamp: 'AW 7/5/2021 18:04:56'!
PASSED!

!testRun: #RondaTest #test03 stamp: 'AW 7/5/2021 18:04:56'!
PASSED!

!classDefinition: #RondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'AW 7/5/2021 18:05:36'!
TestCase subclass: #RondaTest
	instanceVariableNames: 'stubs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:05:34' prior: 50332597!
test03

	| manoDeMano manoDePie |
	manoDePie := stubs manoIncompleta.
	manoDeMano := OrderedCollection with: CartaDeTruco anchoDeEspada with: CartaDeTruco sieteDeEspada with: CartaDeTruco sieteDeOro.
	
	
	
	self should: [ Ronda mano: manoDeMano pie: manoDePie. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Ronda configuracionDeRondaInvalidaErrorDescription	
	! !

!testRun: #RondaTest #test03 stamp: 'AW 7/5/2021 18:05:40'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:06:24' overrides: 16927572!
setUp

	stubs := TrucoTestStubs new.! !

TestCase subclass: #RondaTest
	instanceVariableNames: 'stubs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'AW 7/5/2021 18:06:41'!
TestCase subclass: #RondaTest
	instanceVariableNames: 'stubs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #TrucoTestStubs category: 'ISW1-2021-1C-2doParcial' stamp: 'AW 7/5/2021 18:06:50'!
Object subclass: #TrucoTestStubs
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:06:47' prior: 50332675 overrides: 16927572!
setUp

	stubs := TrucoTestStubs new.! !

!testRun: #RondaTest #test01 stamp: 'AW 7/5/2021 18:07:02'!
PASSED!

!testRun: #RondaTest #test01 stamp: 'AW 7/5/2021 18:07:02'!
PASSED!

!testRun: #RondaTest #test02 stamp: 'AW 7/5/2021 18:07:02'!
PASSED!

!testRun: #RondaTest #test03 stamp: 'AW 7/5/2021 18:07:02'!
ERROR!

!testRun: #RondaTest #test03 stamp: 'AW 7/5/2021 18:07:02'!
ERROR!
!TrucoTestStubs methodsFor: 'accessing' stamp: 'AW 7/5/2021 18:07:13'!
manoIncompleta
	self shouldBeImplemented.! !
!TrucoTestStubs methodsFor: 'accessing' stamp: 'AW 7/5/2021 18:07:19' prior: 50332715!
manoIncompleta
	
	^OrderedCollection with: CartaDeTruco anchoDeBasto .! !

!testRun: #RondaTest #test03 stamp: 'AW 7/5/2021 18:07:26'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:07:38' prior: 50332613!
test01

	| manoDeMano manoDePie |
	manoDeMano := stubs manoIncompleta .
	manoDePie := OrderedCollection with: CartaDeTruco anchoDeEspada with: CartaDeTruco sieteDeEspada with: CartaDeTruco sieteDeOro.
	
	
	
	self should: [ Ronda mano: manoDeMano pie: manoDePie. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Ronda configuracionDeRondaInvalidaErrorDescription	
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:08:15' prior: 50332728!
test01

	| manoDeMano manoDePie |
	manoDeMano := stubs manoIncompleta .
	manoDePie := stubs manoUltraFuerte.
	
	
	self should: [ Ronda mano: manoDeMano pie: manoDePie. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Ronda configuracionDeRondaInvalidaErrorDescription	
	! !

!testRun: #RondaTest #test01 stamp: 'AW 7/5/2021 18:08:16'!
ERROR!
!TrucoTestStubs methodsFor: 'accessing' stamp: 'AW 7/5/2021 18:08:22'!
manoUltraFuerte
	self shouldBeImplemented.! !
!TrucoTestStubs methodsFor: 'accessing' stamp: 'AW 7/5/2021 18:08:28' prior: 50332757!
manoUltraFuerte
	
	^OrderedCollection with: CartaDeTruco anchoDeEspada with: CartaDeTruco sieteDeEspada with: CartaDeTruco sieteDeOro.
	! !

!testRun: #RondaTest #test01 stamp: 'AW 7/5/2021 18:08:29'!
PASSED!

!testRun: #RondaTest #test01 stamp: 'AW 7/5/2021 18:08:29'!
PASSED!

!testRun: #RondaTest #test02 stamp: 'AW 7/5/2021 18:08:29'!
PASSED!

!testRun: #RondaTest #test03 stamp: 'AW 7/5/2021 18:08:29'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:09:49' prior: 50332743!
test01

	| manoDeMano manoDePie |
	manoDeMano := stubs manoIncompleta .
	manoDePie := stubs manoUltraFuerte.
	
	
	self assert: [ Ronda mano: manoDeMano pie: manoDePie. ]
		raiseErrorWithText: Ronda configuracionDeRondaInvalidaErrorDescription	
	! !

!testRun: #RondaTest #test01 stamp: 'AW 7/5/2021 18:09:53'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:10:02'!
assert: aBlockClosure raiseErrorWithText: aString 
	self shouldBeImplemented.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:10:35' prior: 50332791!
assert: aBlockClosureToEvaluete raiseErrorWithText: aErrorString 

	self should: [ aBlockClosureToEvaluete value. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: aErrorString.
	! !

!testRun: #RondaTest #test01 stamp: 'AW 7/5/2021 18:10:45'!
PASSED!

!testRun: #RondaTest #test01 stamp: 'AW 7/5/2021 18:10:45'!
PASSED!

!testRun: #RondaTest #test02 stamp: 'AW 7/5/2021 18:10:45'!
PASSED!

!testRun: #RondaTest #test03 stamp: 'AW 7/5/2021 18:10:45'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:11:26' prior: 50332658!
test03

	| manoDeMano manoDePie |
	manoDePie := stubs manoIncompleta.
	manoDeMano := OrderedCollection with: CartaDeTruco anchoDeEspada with: CartaDeTruco sieteDeEspada with: CartaDeTruco sieteDeOro.
	
	
	
	self assert: [ Ronda mano: manoDeMano pie: manoDePie. ]
		raiseErrorWithText: Ronda configuracionDeRondaInvalidaErrorDescription	
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:12:04' prior: 50332430!
test02
	| manoDeMano manoDePie ronda |
	manoDeMano := OrderedCollection with: CartaDeTruco anchoDeBasto with: (CartaDeTruco oroCon: 6) with: (CartaDeTruco bastoCon: 4).
	manoDePie := OrderedCollection with: CartaDeTruco anchoDeEspada with: CartaDeTruco sieteDeEspada with: CartaDeTruco sieteDeOro.
	
	
	
	ronda := Ronda mano: manoDeMano pie: manoDePie. 

self assert: [ ronda pieJuega: 	CartaDeTruco anchoDeEspada. ]
		raiseErrorWithText: Ronda noEsTuTurnoErrorDescription.	
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:12:08' prior: 50332829!
test02
	| manoDeMano manoDePie ronda |
	manoDeMano := OrderedCollection with: CartaDeTruco anchoDeBasto with: (CartaDeTruco oroCon: 6) with: (CartaDeTruco bastoCon: 4).
	manoDePie := OrderedCollection with: CartaDeTruco anchoDeEspada with: CartaDeTruco sieteDeEspada with: CartaDeTruco sieteDeOro.
	
	
	
	ronda := Ronda mano: manoDeMano pie: manoDePie. 

	self assert: [ ronda pieJuega: 	CartaDeTruco anchoDeEspada. ]
		raiseErrorWithText: Ronda noEsTuTurnoErrorDescription.	
	! !

!testRun: #RondaTest #test02 stamp: 'AW 7/5/2021 18:12:09'!
PASSED!

!testRun: #RondaTest #test01 stamp: 'AW 7/5/2021 18:12:09'!
PASSED!

!testRun: #RondaTest #test02 stamp: 'AW 7/5/2021 18:12:09'!
PASSED!

!testRun: #RondaTest #test03 stamp: 'AW 7/5/2021 18:12:09'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:12:48' prior: 50332847!
test02
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs manoConUnaSolaBuena.
	manoDePie := OrderedCollection with: CartaDeTruco anchoDeEspada with: CartaDeTruco sieteDeEspada with: CartaDeTruco sieteDeOro.
	
	
	
	ronda := Ronda mano: manoDeMano pie: manoDePie. 

	self assert: [ ronda pieJuega: 	CartaDeTruco anchoDeEspada. ]
		raiseErrorWithText: Ronda noEsTuTurnoErrorDescription.	
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:12:52' prior: 50332874!
test02
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs manoConUnaSolaBuena.
	manoDePie := OrderedCollection with: CartaDeTruco anchoDeEspada with: CartaDeTruco sieteDeEspada with: CartaDeTruco sieteDeOro.
	
	
	
	ronda := Ronda mano: manoDeMano pie: manoDePie. 

	self assert: [ ronda pieJuega: 	CartaDeTruco anchoDeEspada. ]
		raiseErrorWithText: Ronda noEsTuTurnoErrorDescription.	
	! !

!testRun: #RondaTest #test02 stamp: 'AW 7/5/2021 18:12:52'!
ERROR!
!TrucoTestStubs methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:12:58'!
manoConUnaSolaBuena
	self shouldBeImplemented.! !
!TrucoTestStubs methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:13:06' prior: 50332907!
manoConUnaSolaBuena
	^OrderedCollection with: CartaDeTruco anchoDeBasto with: (CartaDeTruco oroCon: 6) with: (CartaDeTruco bastoCon: 4).! !

!testRun: #RondaTest #test02 stamp: 'AW 7/5/2021 18:13:14'!
PASSED!

!testRun: #RondaTest #test01 stamp: 'AW 7/5/2021 18:13:14'!
PASSED!

!testRun: #RondaTest #test02 stamp: 'AW 7/5/2021 18:13:14'!
PASSED!

!testRun: #RondaTest #test03 stamp: 'AW 7/5/2021 18:13:14'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:13:30' prior: 50332890!
test02
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs manoConUnaSolaBuena.
	manoDePie := stubs manoUltraFuerte.
	
	ronda := Ronda mano: manoDeMano pie: manoDePie. 

	self assert: [ ronda pieJuega: 	CartaDeTruco anchoDeEspada. ]
		raiseErrorWithText: Ronda noEsTuTurnoErrorDescription.	
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:17:51' prior: 50332928!
test02
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs manoConUnaSolaBuena.
	manoDePie := stubs manoUltraFuerte.
	
	ronda := Ronda mano: manoDeMano pie: manoDePie. 

	self assert: [ ronda manoJuega: 	manoDeMano first. ]
		raiseErrorWithText: Ronda noEsTuTurnoErrorDescription.	
	! !

!testRun: #RondaTest #test02 stamp: 'AW 7/5/2021 18:17:54'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:18:11' prior: 50332941!
test02
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs manoConUnaSolaBuena.
	manoDePie := stubs manoUltraFuerte.
	
	ronda := Ronda mano: manoDeMano pie: manoDePie. 

	self assert: [ ronda pieJuega: 	CartaDeTruco anchoDeEspada. ]
		raiseErrorWithText: Ronda noEsTuTurnoErrorDescription.	
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:18:22'!
test04
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs manoConUnaSolaBuena.
	manoDePie := stubs manoUltraFuerte.
	
	ronda := Ronda mano: manoDeMano pie: manoDePie. 

	self assert: [ ronda manoJuega: 	manoDeMano first. ]
		raiseErrorWithText: Ronda noEsTuTurnoErrorDescription.	
	! !

!testRun: #RondaTest #test04 stamp: 'AW 7/5/2021 18:18:25'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:18:41'!
manoJuega: aCartaDeTruco 
	self shouldBeImplemented.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:18:49' prior: 50332981!
manoJuega: aCartaDeTruco 
	! !

!testRun: #RondaTest #test04 stamp: 'AW 7/5/2021 18:18:50'!
FAILURE!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:19:09' prior: 50332967!
test04
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs manoConUnaSolaBuena.
	manoDePie := stubs manoUltraFuerte.
	
	ronda := Ronda mano: manoDeMano pie: manoDePie. 
	ronda manoJuega: 	manoDeMano first.
	
	self assert: [ ronda manoJuega: 	manoDeMano second. ]
		raiseErrorWithText: Ronda noEsTuTurnoErrorDescription.	
	! !

!testRun: #RondaTest #test04 stamp: 'AW 7/5/2021 18:19:11'!
FAILURE!

!testRun: #RondaTest #test04 stamp: 'AW 7/5/2021 18:19:41'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:20:41' prior: 50332986!
manoJuega: aCartaDeTruco 
	
	(aCartaDeTruco == 		manoDeMano second) ifTrue: [ self error: self class noEsTuTurnoErrorDescription ].! !

!testRun: #RondaTest #test01 stamp: 'AW 7/5/2021 18:20:42'!
PASSED!

!testRun: #RondaTest #test02 stamp: 'AW 7/5/2021 18:20:42'!
PASSED!

!testRun: #RondaTest #test03 stamp: 'AW 7/5/2021 18:20:42'!
PASSED!

!testRun: #RondaTest #test04 stamp: 'AW 7/5/2021 18:20:42'!
PASSED!

!testRun: #RondaTest #test04 stamp: 'AW 7/5/2021 18:20:44'!
PASSED!

!testRun: #RondaTest #test01 stamp: 'AW 7/5/2021 18:20:44'!
PASSED!

!testRun: #RondaTest #test02 stamp: 'AW 7/5/2021 18:20:44'!
PASSED!

!testRun: #RondaTest #test03 stamp: 'AW 7/5/2021 18:20:44'!
PASSED!

!testRun: #RondaTest #test04 stamp: 'AW 7/5/2021 18:20:44'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:24:01'!
test05
	| manoDeMano manoDePie |
	manoDeMano := stubs manoConUnaSolaBuena.
	manoDePie := stubs manoConUnaSolaBuena .
	
	self assert: [ Ronda mano: manoDeMano pie: manoDePie ] 
		raiseErrorWithText: Ronda configuracionDeRondaInvalidaErrorDescription . 
! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:24:04' prior: 50333037!
test05
	| manoDeMano manoDePie |
	manoDeMano := stubs manoConUnaSolaBuena.
	manoDePie := stubs manoConUnaSolaBuena .
	
	self assert: [ Ronda mano: manoDeMano pie: manoDePie ] 
		raiseErrorWithText: Ronda configuracionDeRondaInvalidaErrorDescription . ! !

!testRun: #RondaTest #test05 stamp: 'AW 7/5/2021 18:24:14'!
FAILURE!
!Ronda methodsFor: 'initialization' stamp: 'AW 7/5/2021 18:27:10' prior: 50332631!
initializeMano: unaManoDeMano pie: unaManoDePie 

	(unaManoDeMano size ~= 3 or: unaManoDePie size ~= 3) ifTrue: [
		^self error: self class configuracionDeRondaInvalidaErrorDescription. ].
	
	(unaManoDeMano includesAnyOf: unaManoDePie) ifTrue: [
		^self error: self class configuracionDeRondaInvalidaErrorDescription. ].

	manoDeMano := unaManoDeMano.
	manoDePie := unaManoDePie.
	! !
!Ronda methodsFor: 'initialization' stamp: 'AW 7/5/2021 18:27:48' prior: 50333061!
initializeMano: unaManoDeMano pie: unaManoDePie 

	(unaManoDeMano size ~= 3 or: unaManoDePie size ~= 3) ifTrue: [
		^self error: self class configuracionDeRondaInvalidaErrorDescription. ].
	
	(unaManoDeMano includesAnyOf: unaManoDePie) ifTrue: [
		^self error: self class configuracionDeManosInvalidaCartasDuplicadasErrorDescription. ].

	manoDeMano := unaManoDeMano.
	manoDePie := unaManoDePie.
	! !
!Ronda class methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:28:32'!
configuracionDeManosInvalidaCantidadIncorrectaErrorDescription

	^'Configuración de ronda inválida!!'! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:28:32' prior: 50333076!
initializeMano: unaManoDeMano pie: unaManoDePie 

	(unaManoDeMano size ~= 3 or: unaManoDePie size ~= 3) ifTrue: [
		^self error: self class configuracionDeManosInvalidaCantidadIncorrectaErrorDescription. ].
	
	(unaManoDeMano includesAnyOf: unaManoDePie) ifTrue: [
		^self error: self class configuracionDeManosInvalidaCartasDuplicadasErrorDescription. ].

	manoDeMano := unaManoDeMano.
	manoDePie := unaManoDePie.
	! !

!methodRemoval: Ronda class #configuracionDeRondaInvalidaErrorDescription stamp: 'AW 7/5/2021 18:28:32'!
configuracionDeRondaInvalidaErrorDescription

	^'Configuración de ronda inválida!!'!

!testRun: #RondaTest #test05 stamp: 'AW 7/5/2021 18:28:42'!
ERROR!
!Ronda class methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:29:19' prior: 50333091!
configuracionDeManosInvalidaCantidadIncorrectaErrorDescription

	^'Configuración de manos inválida, cantidad de cartas incorrecta!!'! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:29:58' prior: 50333048!
test05
	| manoDeMano manoDePie |
	manoDeMano := stubs manoConUnaSolaBuena.
	manoDePie := stubs manoConUnaSolaBuena .
	
	self assert: [ Ronda mano: manoDeMano pie: manoDePie ] 
		raiseErrorWithText: Ronda configuracionDeManosInvalidaCartasDuplicadasErrorDescription . ! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:30:09' prior: 50332815!
test03

	| manoDeMano manoDePie |
	manoDePie := stubs manoIncompleta.
	manoDeMano := OrderedCollection with: CartaDeTruco anchoDeEspada with: CartaDeTruco sieteDeEspada with: CartaDeTruco sieteDeOro.
	
	
	
	self assert: [ Ronda mano: manoDeMano pie: manoDePie. ]
		raiseErrorWithText: Ronda configuracionDeManosInvalidaCantidadIncorrectaErrorDescription	
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:30:16' prior: 50332778!
test01

	| manoDeMano manoDePie |
	manoDeMano := stubs manoIncompleta .
	manoDePie := stubs manoUltraFuerte.
	
	
	self assert: [ Ronda mano: manoDeMano pie: manoDePie. ]
		raiseErrorWithText: Ronda configuracionDeManosInvalidaCantidadIncorrectaErrorDescription	
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:30:18' prior: 50333158!
test01

	| manoDeMano manoDePie |
	manoDeMano := stubs manoIncompleta .
	manoDePie := stubs manoUltraFuerte.
	
	
	self assert: [ Ronda mano: manoDeMano pie: manoDePie. ]
		raiseErrorWithText: Ronda configuracionDeManosInvalidaCantidadIncorrectaErrorDescription.	
	! !

!testRun: #RondaTest #test01 stamp: 'AW 7/5/2021 18:30:19'!
PASSED!

!testRun: #RondaTest #test01 stamp: 'AW 7/5/2021 18:30:19'!
PASSED!

!testRun: #RondaTest #test02 stamp: 'AW 7/5/2021 18:30:19'!
PASSED!

!testRun: #RondaTest #test03 stamp: 'AW 7/5/2021 18:30:19'!
PASSED!

!testRun: #RondaTest #test04 stamp: 'AW 7/5/2021 18:30:19'!
PASSED!

!testRun: #RondaTest #test05 stamp: 'AW 7/5/2021 18:30:19'!
ERROR!

!testRun: #RondaTest #test05 stamp: 'AW 7/5/2021 18:30:19'!
ERROR!
!Ronda class methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:30:28'!
configuracionDeManosInvalidaCartasDuplicadasErrorDescription
	self shouldBeImplemented.! !
!Ronda class methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:30:58' prior: 50333196!
configuracionDeManosInvalidaCartasDuplicadasErrorDescription
	
	^'Configuración de manos inválida, cartas duplicadas!!'! !

!testRun: #RondaTest #test05 stamp: 'AW 7/5/2021 18:30:59'!
PASSED!

!testRun: #RondaTest #test01 stamp: 'AW 7/5/2021 18:31:03'!
PASSED!

!testRun: #RondaTest #test01 stamp: 'AW 7/5/2021 18:31:03'!
PASSED!

!testRun: #RondaTest #test02 stamp: 'AW 7/5/2021 18:31:03'!
PASSED!

!testRun: #RondaTest #test03 stamp: 'AW 7/5/2021 18:31:03'!
PASSED!

!testRun: #RondaTest #test04 stamp: 'AW 7/5/2021 18:31:03'!
PASSED!

!testRun: #RondaTest #test05 stamp: 'AW 7/5/2021 18:31:03'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:33:14' prior: 50333131!
test05
	| manoDeMano manoDePie |
	manoDeMano := stubs manoCon: CartaDeTruco anchoDeEspada con: CartaDeTruco anchoDeBasto con: CartaDeTruco sieteDeEspada.
	manoDePie := stubs manoConUnaSolaBuena.
	
	self assert: [ Ronda mano: manoDeMano pie: manoDePie ] 
		raiseErrorWithText: Ronda configuracionDeManosInvalidaCartasDuplicadasErrorDescription . ! !

!testRun: #RondaTest #test05 stamp: 'AW 7/5/2021 18:33:21'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:33:26'!
test06
	| manoDeMano manoDePie |
	manoDeMano := stubs manoCon: CartaDeTruco anchoDeEspada con: CartaDeTruco anchoDeBasto con: CartaDeTruco sieteDeEspada.
	manoDePie := stubs manoConUnaSolaBuena.
	
	self assert: [ Ronda mano: manoDeMano pie: manoDePie ] 
		raiseErrorWithText: Ronda configuracionDeManosInvalidaCartasDuplicadasErrorDescription . ! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:29:58' prior: 50333224!
test05
	| manoDeMano manoDePie |
	manoDeMano := stubs manoConUnaSolaBuena.
	manoDePie := stubs manoConUnaSolaBuena .
	
	self assert: [ Ronda mano: manoDeMano pie: manoDePie ] 
		raiseErrorWithText: Ronda configuracionDeManosInvalidaCartasDuplicadasErrorDescription . ! !

!testRun: #RondaTest #test06 stamp: 'AW 7/5/2021 18:36:29'!
ERROR!
!TrucoTestStubs methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:36:37'!
manoCon: aCartaDeTruco con: aCartaDeTruco2 con: aCartaDeTruco3 
	self shouldBeImplemented.! !
!TrucoTestStubs methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:37:07' prior: 50333268!
manoCon: aCartaDeTruco con: aCartaDeTruco2 con: aCartaDeTruco3 
	^OrderedCollection with: aCartaDeTruco with: aCartaDeTruco2 with: aCartaDeTruco3 ! !
!TrucoTestStubs methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:37:09' prior: 50333274!
manoCon: aCartaDeTruco con: aCartaDeTruco2 con: aCartaDeTruco3 
	^OrderedCollection with: aCartaDeTruco with: aCartaDeTruco2 with: aCartaDeTruco3.! !

!testRun: #RondaTest #test06 stamp: 'AW 7/5/2021 18:37:10'!
PASSED!

!testRun: #RondaTest #test01 stamp: 'AW 7/5/2021 18:37:10'!
PASSED!

!testRun: #RondaTest #test02 stamp: 'AW 7/5/2021 18:37:10'!
PASSED!

!testRun: #RondaTest #test03 stamp: 'AW 7/5/2021 18:37:10'!
PASSED!

!testRun: #RondaTest #test04 stamp: 'AW 7/5/2021 18:37:10'!
PASSED!

!testRun: #RondaTest #test05 stamp: 'AW 7/5/2021 18:37:10'!
PASSED!

!testRun: #RondaTest #test06 stamp: 'AW 7/5/2021 18:37:10'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:40:31' prior: 50333240!
test06
	| manoDeMano manoDePie cartaRepetida |
	cartaRepetida := CartaDeTruco anchoDeEspada.
	manoDeMano := stubs manoCon: cartaRepetida con: cartaRepetida con: cartaRepetida.
	manoDePie := stubs manoConUnaSolaBuena.
	
	self assert: [ Ronda mano: manoDeMano pie: manoDePie ] 
		raiseErrorWithText: Ronda configuracionDeManosInvalidaCartasDuplicadasErrorDescription . ! !

!testRun: #RondaTest #test06 stamp: 'AW 7/5/2021 18:40:36'!
FAILURE!
!Ronda methodsFor: 'initialization' stamp: 'AW 7/5/2021 18:43:28' prior: 50333098!
initializeMano: unaManoDeMano pie: unaManoDePie 

	(unaManoDeMano size ~= 3 or: unaManoDePie size ~= 3) ifTrue: [
		^self error: self class configuracionDeManosInvalidaCantidadIncorrectaErrorDescription. ].
	
	(unaManoDeMano includesAnyOf: unaManoDePie) ifTrue: [
		^self error: self class configuracionDeManosInvalidaCartasDuplicadasErrorDescription. ].

	manoDeMano := unaManoDeMano.
	manoDePie := unaManoDePie.
	! !
!Ronda methodsFor: 'initialization' stamp: 'AW 7/5/2021 18:45:27' prior: 50333322!
initializeMano: unaManoDeMano pie: unaManoDePie 

	(unaManoDeMano size ~= 3 or: unaManoDePie size ~= 3) ifTrue: [
		^self error: self class configuracionDeManosInvalidaCantidadIncorrectaErrorDescription. ].
	
	(unaManoDeMano includesAnyOf: unaManoDePie) ifTrue: [
		^self error: self class configuracionDeManosInvalidaCartasDuplicadasErrorDescription. ].
	
	self tieneRepetidas: unaManoDeMano.

	manoDeMano := unaManoDeMano.
	manoDePie := unaManoDePie.
	! !

!testRun: #RondaTest #test06 stamp: 'AW 7/5/2021 18:45:31'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:45:44'!
tieneRepetidas: anOrderedCollection 
	self shouldBeImplemented.! !

!testRun: #RondaTest #test06 stamp: 'AW 7/5/2021 18:49:40'!
FAILURE!
!Ronda methodsFor: 'initialization' stamp: 'AW 7/5/2021 18:50:02' prior: 50333338!
initializeMano: unaManoDeMano pie: unaManoDePie 

	(unaManoDeMano size ~= 3 or: unaManoDePie size ~= 3) ifTrue: [
		^self error: self class configuracionDeManosInvalidaCantidadIncorrectaErrorDescription. ].
	
	(unaManoDeMano includesAnyOf: unaManoDePie) ifTrue: [
		^self error: self class configuracionDeManosInvalidaCartasDuplicadasErrorDescription. ].

	manoDeMano := unaManoDeMano.
	manoDePie := unaManoDePie.
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:50:07' prior: 50333305!
test06
	| manoDeMano manoDePie cartaRepetida |
	cartaRepetida := CartaDeTruco anchoDeEspada.
	manoDeMano := stubs manoCon: cartaRepetida con: cartaRepetida con: cartaRepetida.
	manoDePie := stubs manoConUnaSolaBuena.
	
	"self assert: [ Ronda mano: manoDeMano pie: manoDePie ] 
		raiseErrorWithText: Ronda configuracionDeManosInvalidaCartasDuplicadasErrorDescription . "! !

TestCase subclass: #ManoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #ManoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'AW 7/5/2021 18:50:40'!
TestCase subclass: #ManoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #ManoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'AW 7/5/2021 18:52:07'!
Object subclass: #ManoDeTruco
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!ManoTest methodsFor: 'nil' stamp: 'AW 7/5/2021 18:52:03'!
test01	
	
	self assert: [ ManoDeTruco con: CartaDeTruco anchoDeBasto ]
		raiseErrorWithText: ManoDeTruco configuracionDeManosInvalidaCantidadIncorrectaErrorDescription.	
	! !
!ManoTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:54:41' prior: 50333413!
test01	
	
	self assert: [ ManoDeTruco con: CartaDeTruco anchoDeBasto con: CartaDeTruco anchoDeEspada con: CartaDeTruco anchoDeBasto ]
		raiseErrorWithText: ManoDeTruco cartaRepetidaErrorDescription.	
	! !

!testRun: #ManoTest #test01 stamp: 'AW 7/5/2021 18:54:45'!
ERROR!
!ManoDeTruco class methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:54:53'!
cartaRepetidaErrorDescription
	self shouldBeImplemented.! !
!ManoDeTruco class methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:55:14' prior: 50333434!
cartaRepetidaErrorDescription
	^'Hay almenos una carta repetida!!'! !

!testRun: #ManoTest #test01 stamp: 'AW 7/5/2021 18:55:16'!
ERROR!

!classDefinition: #TestHelper category: 'ISW1-2021-1C-2doParcial' stamp: 'AW 7/5/2021 18:55:56'!
Object subclass: #TestHelper
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!ManoTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:55:53' prior: 50333422!
test01	
	
	TestHelper assert: [ ManoDeTruco con: CartaDeTruco anchoDeBasto con: CartaDeTruco anchoDeEspada con: CartaDeTruco anchoDeBasto ]
		raiseErrorWithText: ManoDeTruco cartaRepetidaErrorDescription.	
	! !

!testRun: #ManoTest #test01 stamp: 'AW 7/5/2021 18:55:58'!
ERROR!
!TestHelper class methodsFor: 'asserting' stamp: 'AW 7/5/2021 18:56:10'!
assert: aBlockClosure raiseErrorWithText: aString 
	self shouldBeImplemented.! !
!TestHelper class methodsFor: 'asserting' stamp: 'AW 7/5/2021 18:56:18' prior: 50333465!
assert: aBlockClosureToEvaluete raiseErrorWithText: aErrorString 

	self should: [ aBlockClosureToEvaluete value. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: aErrorString.
	! !

!testRun: #ManoTest #test01 stamp: 'AW 7/5/2021 18:56:20'!
ERROR!
!ManoTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:57:15' prior: 50333454!
test01	
	
	self assert: [ ManoDeTruco con: CartaDeTruco anchoDeBasto con: CartaDeTruco anchoDeEspada con: CartaDeTruco anchoDeBasto ]
		raiseErrorWithText: ManoDeTruco cartaRepetidaErrorDescription.	
	! !
!ManoTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 18:57:17'!
assert: aBlockClosureToEvaluete raiseErrorWithText: aErrorString 

	self should: [ aBlockClosureToEvaluete value. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: aErrorString.
	! !

!classRemoval: #TestHelper stamp: 'AW 7/5/2021 18:57:21'!
Object subclass: #TestHelper
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!testRun: #ManoTest #test01 stamp: 'AW 7/5/2021 18:57:51'!
ERROR!
!ManoDeTruco class methodsFor: 'instance creation' stamp: 'AW 7/5/2021 18:57:57'!
con: aCartaDeTruco con: aCartaDeTruco2 con: aCartaDeTruco3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeCon: aCartaDeTruco con: aCartaDeTruco2 con: aCartaDeTruco3 ! !
!ManoDeTruco class methodsFor: 'instance creation' stamp: 'AW 7/5/2021 18:58:55' prior: 50333508!
con: aCartaDeTruco con: aCartaDeTruco2 con: aCartaDeTruco3 

	^self new initializeCon: aCartaDeTruco con: aCartaDeTruco2 con: aCartaDeTruco3 ! !

!testRun: #ManoTest #test01 stamp: 'AW 7/5/2021 18:58:59'!
ERROR!

!testRun: #ManoTest #test01 stamp: 'AW 7/5/2021 18:58:59'!
ERROR!

!classDefinition: #ManoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'AW 7/5/2021 18:59:07'!
Object subclass: #ManoDeTruco
	instanceVariableNames: 'cartaDeTruco'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #ManoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'AW 7/5/2021 18:59:07'!
Object subclass: #ManoDeTruco
	instanceVariableNames: 'cartaDeTruco cartaDeTruco2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #ManoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'AW 7/5/2021 18:59:08'!
Object subclass: #ManoDeTruco
	instanceVariableNames: 'cartaDeTruco cartaDeTruco2 cartaDeTruco3'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!ManoDeTruco methodsFor: 'initialization' stamp: 'AW 7/5/2021 18:59:08'!
initializeCon: aCartaDeTruco con: aCartaDeTruco2 con: aCartaDeTruco3 
	self shouldBeImplemented.
	cartaDeTruco := aCartaDeTruco.
	cartaDeTruco2 := aCartaDeTruco2.
	cartaDeTruco3 := aCartaDeTruco3.! !
!ManoDeTruco methodsFor: 'initialization' stamp: 'AW 7/5/2021 18:59:12' prior: 50333555!
initializeCon: aCartaDeTruco con: aCartaDeTruco2 con: aCartaDeTruco3 

	cartaDeTruco := aCartaDeTruco.
	cartaDeTruco2 := aCartaDeTruco2.
	cartaDeTruco3 := aCartaDeTruco3.! !

!classDefinition: #ManoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'AW 7/5/2021 19:00:22'!
Object subclass: #ManoDeTruco
	instanceVariableNames: 'cartaDeTruco cartaDeTruco2 cartaDeTruco3 mano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!ManoDeTruco methodsFor: 'initialization' stamp: 'AW 7/5/2021 19:00:20' prior: 50333565!
initializeCon: aCartaDeTruco con: aCartaDeTruco2 con: aCartaDeTruco3 
	
	
	
	mano := Set with: aCartaDeTruco with: aCartaDeTruco2 with: aCartaDeTruco3.! !

!testRun: #ManoTest #test01 stamp: 'AW 7/5/2021 19:00:26'!
FAILURE!
!ManoTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:01:22' prior: 50333482!
test01	
	
	self assert: [ ManoDeTruco con: CartaDeTruco anchoDeBasto con: CartaDeTruco anchoDeEspada con: CartaDeTruco anchoDeBasto ]
		raiseErrorWithText: ManoDeTruco cartaRepetidaErrorDescription.	
	! !
!ManoDeTruco methodsFor: 'initialization' stamp: 'AW 7/5/2021 19:01:31' prior: 50333583!
initializeCon: aCartaDeTruco con: aCartaDeTruco2 con: aCartaDeTruco3 
	
	self error: self class cartaRepetidaErrorDescription .  
	
	mano := Set with: aCartaDeTruco with: aCartaDeTruco2 with: aCartaDeTruco3.! !

!testRun: #ManoTest #test01 stamp: 'AW 7/5/2021 19:01:32'!
PASSED!
!ManoTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:03:52'!
test02
	
	ManoDeTruco con: CartaDeTruco anchoDeBasto con: CartaDeTruco anchoDeEspada con: CartaDeTruco sieteDeOro. ! !

!testRun: #ManoTest #test02 stamp: 'AW 7/5/2021 19:04:19'!
ERROR!
!ManoDeTruco methodsFor: 'initialization' stamp: 'AW 7/5/2021 19:05:01' prior: 50333603!
initializeCon: aCartaDeTruco con: aCartaDeTruco2 con: aCartaDeTruco3 
	
	
	mano := Set with: aCartaDeTruco with: aCartaDeTruco2 with: aCartaDeTruco3.
	
	(self hayRepetidas) ifTrue: [ self error: self class cartaRepetidaErrorDescription ].
	! !

!testRun: #ManoTest #test02 stamp: 'AW 7/5/2021 19:05:07'!
ERROR!
!ManoDeTruco methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:05:15'!
hayRepetidas
	self shouldBeImplemented.! !
!ManoDeTruco methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:08:46' prior: 50333637!
hayRepetidas
	
	^mano asSet size ~= 3.! !
!ManoDeTruco methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:09:05' prior: 50333642!
hayRepetidas
	
	^mano asSet size < 3.! !

!testRun: #ManoTest #test02 stamp: 'AW 7/5/2021 19:09:11'!
PASSED!

!testRun: #ManoTest #test01 stamp: 'AW 7/5/2021 19:09:11'!
PASSED!

!testRun: #ManoTest #test02 stamp: 'AW 7/5/2021 19:09:11'!
PASSED!
!ManoDeTruco methodsFor: 'initialization' stamp: 'AW 7/5/2021 19:09:46' prior: 50333624!
initializeCon: aCartaDeTruco con: aCartaDeTruco2 con: aCartaDeTruco3 
	
	
	mano := OrderedCollection with: aCartaDeTruco with: aCartaDeTruco2 with: aCartaDeTruco3.
	
	(self hayRepetidas) ifTrue: [ self error: self class cartaRepetidaErrorDescription ].
	! !

!testRun: #ManoTest #test02 stamp: 'AW 7/5/2021 19:09:48'!
PASSED!

!testRun: #ManoTest #test01 stamp: 'AW 7/5/2021 19:09:48'!
PASSED!

!testRun: #ManoTest #test02 stamp: 'AW 7/5/2021 19:09:48'!
PASSED!
!ManoTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:15:12' prior: 50333615!
test02
	
	| mano1 mano2 |
	mano1 := ManoDeTruco con: CartaDeTruco anchoDeBasto con: CartaDeTruco anchoDeEspada con: CartaDeTruco sieteDeOro. 
	
	mano2 := ManoDeTruco con: CartaDeTruco anchoDeBasto con: CartaDeTruco anchoDeEspada con: CartaDeTruco sieteDeOro. 
	
	self assert: (mano1 puedeEnfrentarseA: mano2) equals: false.! !

!testRun: #ManoTest #test02 stamp: 'AW 7/5/2021 19:16:04'!
ERROR!
!ManoDeTruco methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:16:15'!
puedeEnfrentarseA: aManoDeTruco 
	self shouldBeImplemented.! !
!ManoDeTruco methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:16:35' prior: 50333691!
puedeEnfrentarseA: aManoDeTruco 
	mano includesAnyOf: aManoDeTruco mano.! !
!ManoDeTruco methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:17:39' prior: 50333696!
puedeEnfrentarseA: aManoDeTruco 
	^(aManoDeTruco tieneAlguna: mano) not.! !

!testRun: #ManoTest #test02 stamp: 'AW 7/5/2021 19:17:42'!
ERROR!
!ManoDeTruco methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:17:49'!
tieneAlguna: anOrderedCollection 
	self shouldBeImplemented.! !
!ManoDeTruco methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:18:55' prior: 50333709!
tieneAlguna: unaCollecionDeCartasDeTruco 
	^unaCollecionDeCartasDeTruco includesAnyOf: mano.! !

!testRun: #ManoTest #test02 stamp: 'AW 7/5/2021 19:18:57'!
PASSED!

!testRun: #ManoTest #test01 stamp: 'AW 7/5/2021 19:18:57'!
PASSED!

!testRun: #ManoTest #test02 stamp: 'AW 7/5/2021 19:18:57'!
PASSED!
!ManoTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:20:15'!
test03
	
	| mano1 mano2 |
	mano1 := ManoDeTruco con: CartaDeTruco anchoDeBasto con: CartaDeTruco anchoDeEspada con: CartaDeTruco sieteDeOro. 
	
	mano2 := ManoDeTruco con: (CartaDeTruco oroCon: 4) con: (CartaDeTruco oroCon: 5) con: (CartaDeTruco oroCon: 6). 
	
	self assert: (mano1 puedeEnfrentarseA: mano2) equals: false.! !
!ManoTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:20:20' prior: 50333726!
test03
	
	| mano1 mano2 |
	mano1 := ManoDeTruco con: CartaDeTruco anchoDeBasto con: CartaDeTruco anchoDeEspada con: CartaDeTruco sieteDeOro. 
	
	mano2 := ManoDeTruco con: (CartaDeTruco oroCon: 4) con: (CartaDeTruco oroCon: 5) con: (CartaDeTruco oroCon: 6). 
	
	self assert: (mano1 puedeEnfrentarseA: mano2) equals: true.! !

!testRun: #ManoTest #test03 stamp: 'AW 7/5/2021 19:20:20'!
PASSED!

!testRun: #ManoTest #test01 stamp: 'AW 7/5/2021 19:20:20'!
PASSED!

!testRun: #ManoTest #test02 stamp: 'AW 7/5/2021 19:20:20'!
PASSED!

!testRun: #ManoTest #test03 stamp: 'AW 7/5/2021 19:20:20'!
PASSED!
!TrucoTestStubs methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:21:34' prior: 50333282!
manoCon: aCartaDeTruco con: aCartaDeTruco2 con: aCartaDeTruco3 
	^ManoDeTruco con: aCartaDeTruco con: aCartaDeTruco2 con: aCartaDeTruco3.! !
!TrucoTestStubs methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:22:16' prior: 50332912!
manoConUnaSolaBuena
	^self manoCon: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 6)  con: (CartaDeTruco bastoCon: 4).! !
!TrucoTestStubs methodsFor: 'accessing' stamp: 'AW 7/5/2021 19:23:09' prior: 50333769!
manoConUnaSolaBuena
	^ManoDeTruco con: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 6) con: (CartaDeTruco bastoCon: 4).
! !

!methodRemoval: TrucoTestStubs #manoIncompleta stamp: 'AW 7/5/2021 19:23:18'!
manoIncompleta
	
	^OrderedCollection with: CartaDeTruco anchoDeBasto .!
!TrucoTestStubs methodsFor: 'accessing' stamp: 'AW 7/5/2021 19:24:02' prior: 50332762!
manoUltraFuerte
	^ManoDeTruco con: CartaDeTruco anchoDeEspada con: CartaDeTruco sieteDeEspada con: CartaDeTruco sieteDeOro.
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:24:22' prior: 50333170!
test01
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs manoConUnaSolaBuena.
	manoDePie := stubs manoUltraFuerte.
	
	ronda := Ronda mano: manoDeMano pie: manoDePie. 

	self assert: [ ronda pieJuega: 	CartaDeTruco anchoDeEspada. ]
		raiseErrorWithText: Ronda noEsTuTurnoErrorDescription.	
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:24:39' prior: 50332955!
test02
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs manoConUnaSolaBuena.
	manoDePie := stubs manoUltraFuerte.
	
	ronda := Ronda mano: manoDeMano pie: manoDePie. 
	ronda manoJuega: 	manoDeMano first.
	
	self assert: [ ronda manoJuega: 	manoDeMano second. ]
		raiseErrorWithText: Ronda noEsTuTurnoErrorDescription.	
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:24:50' prior: 50333143!
test03
	| manoDeMano manoDePie |
	manoDeMano := stubs manoConUnaSolaBuena.
	manoDePie := stubs manoConUnaSolaBuena .
	
	self assert: [ Ronda mano: manoDeMano pie: manoDePie ] 
		raiseErrorWithText: Ronda configuracionDeManosInvalidaCartasDuplicadasErrorDescription . ! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:25:16' prior: 50333380!
test06
	| manoDeMano manoDePie cartaRepetida |
	cartaRepetida := CartaDeTruco anchoDeEspada.
	manoDeMano := stubs manoCon: cartaRepetida con: cartaRepetida con: cartaRepetida.
	manoDePie := stubs manoConUnaSolaBuena.
	
	self assert: [ Ronda mano: manoDeMano pie: manoDePie ] 
		raiseErrorWithText: Ronda configuracionDeManosInvalidaManosIncompatiblesErrorDescription .! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:25:59' prior: 50332993!
test04
	| manoDeMano manoDePie cartaRepetida |
	cartaRepetida := CartaDeTruco anchoDeEspada.
	manoDeMano := stubs manoCon: cartaRepetida con: cartaRepetida con: cartaRepetida.
	manoDePie := stubs manoConUnaSolaBuena.
	
	self assert: [ Ronda mano: manoDeMano pie: manoDePie ] 
		raiseErrorWithText: Ronda configuracionDeManosInvalidaManosIncompatiblesErrorDescription .! !

!methodRemoval: RondaTest #test05 stamp: 'AW 7/5/2021 19:26:01'!
test05
	| manoDeMano manoDePie |
	manoDeMano := stubs manoConUnaSolaBuena.
	manoDePie := stubs manoConUnaSolaBuena .
	
	self assert: [ Ronda mano: manoDeMano pie: manoDePie ] 
		raiseErrorWithText: Ronda configuracionDeManosInvalidaCartasDuplicadasErrorDescription . !

!methodRemoval: RondaTest #test06 stamp: 'AW 7/5/2021 19:26:02'!
test06
	| manoDeMano manoDePie cartaRepetida |
	cartaRepetida := CartaDeTruco anchoDeEspada.
	manoDeMano := stubs manoCon: cartaRepetida con: cartaRepetida con: cartaRepetida.
	manoDePie := stubs manoConUnaSolaBuena.
	
	self assert: [ Ronda mano: manoDeMano pie: manoDePie ] 
		raiseErrorWithText: Ronda configuracionDeManosInvalidaManosIncompatiblesErrorDescription .!

!testRun: #RondaTest #test04 stamp: 'AW 7/5/2021 19:26:22'!
ERROR!
!Ronda methodsFor: 'initialization' stamp: 'AW 7/5/2021 19:27:13' prior: 50333364!
initializeMano: unaManoDeMano pie: unaManoDePie 
	
	(unaManoDeMano includesAnyOf: unaManoDePie) ifTrue: [
		^self error: self class configuracionDeManosInvalidaCartasDuplicadasErrorDescription. ].

	manoDeMano := unaManoDeMano.
	manoDePie := unaManoDePie.
	! !

!testRun: #RondaTest #test01 stamp: 'AW 7/5/2021 19:27:14'!
ERROR!

!testRun: #RondaTest #test02 stamp: 'AW 7/5/2021 19:27:14'!
ERROR!

!testRun: #RondaTest #test03 stamp: 'AW 7/5/2021 19:27:14'!
ERROR!

!testRun: #RondaTest #test04 stamp: 'AW 7/5/2021 19:27:14'!
ERROR!
!Ronda methodsFor: 'initialization' stamp: 'AW 7/5/2021 19:27:39' prior: 50333890!
initializeMano: unaManoDeMano pie: unaManoDePie 

	(unaManoDeMano size ~= 3 or: unaManoDePie size ~= 3) ifTrue: [
		^self error: self class configuracionDeManosInvalidaCantidadIncorrectaErrorDescription. ].
	
	(unaManoDeMano includesAnyOf: unaManoDePie) ifTrue: [
		^self error: self class configuracionDeManosInvalidaCartasDuplicadasErrorDescription. ].

	manoDeMano := unaManoDeMano.
	manoDePie := unaManoDePie.
	! !

!testRun: #RondaTest #test01 stamp: 'AW 7/5/2021 19:27:40'!
ERROR!

!testRun: #RondaTest #test02 stamp: 'AW 7/5/2021 19:27:40'!
ERROR!

!testRun: #RondaTest #test03 stamp: 'AW 7/5/2021 19:27:40'!
FAILURE!

!testRun: #RondaTest #test04 stamp: 'AW 7/5/2021 19:27:40'!
ERROR!
!Ronda methodsFor: 'initialization' stamp: 'AW 7/5/2021 19:27:53' prior: 50333910!
initializeMano: unaManoDeMano pie: unaManoDePie 
	
	(unaManoDeMano includesAnyOf: unaManoDePie) ifTrue: [
		^self error: self class configuracionDeManosInvalidaCartasDuplicadasErrorDescription. ].

	manoDeMano := unaManoDeMano.
	manoDePie := unaManoDePie.
	! !
!Ronda methodsFor: 'initialization' stamp: 'AW 7/5/2021 19:28:37' prior: 50333935!
initializeMano: unaManoDeMano pie: unaManoDePie 
	
	(unaManoDeMano puedeEnfrentarseA: unaManoDePie) ifFalse: [
		^self error: self class configuracionDeManosInvalidaCartasDuplicadasErrorDescription. ].

	manoDeMano := unaManoDeMano.
	manoDePie := unaManoDePie.
	! !
!Ronda class methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:28:45'!
configuracionDeManosInvalidaManosIncompatiblesErrorDescription
	
	^'Configuración de manos inválida, cartas duplicadas!!'! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:28:45' prior: 50333946!
initializeMano: unaManoDeMano pie: unaManoDePie 
	
	(unaManoDeMano puedeEnfrentarseA: unaManoDePie) ifFalse: [
		^self error: self class configuracionDeManosInvalidaManosIncompatiblesErrorDescription. ].

	manoDeMano := unaManoDeMano.
	manoDePie := unaManoDePie.
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:28:45' prior: 50333822!
test03
	| manoDeMano manoDePie |
	manoDeMano := stubs manoConUnaSolaBuena.
	manoDePie := stubs manoConUnaSolaBuena .
	
	self assert: [ Ronda mano: manoDeMano pie: manoDePie ] 
		raiseErrorWithText: Ronda configuracionDeManosInvalidaManosIncompatiblesErrorDescription . ! !

!methodRemoval: Ronda class #configuracionDeManosInvalidaCartasDuplicadasErrorDescription stamp: 'AW 7/5/2021 19:28:45'!
configuracionDeManosInvalidaCartasDuplicadasErrorDescription
	
	^'Configuración de manos inválida, cartas duplicadas!!'!

!methodRemoval: Ronda class #configuracionDeManosInvalidaCantidadIncorrectaErrorDescription stamp: 'AW 7/5/2021 19:28:52'!
configuracionDeManosInvalidaCantidadIncorrectaErrorDescription

	^'Configuración de manos inválida, cantidad de cartas incorrecta!!'!
!Ronda class methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:29:08' prior: 50333957!
configuracionDeManosInvalidaManosIncompatiblesErrorDescription
	
	^'Las manos son incompatibles!!'! !
!Ronda class methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:29:16'!
manosIncompatiblesErrorDescription
	
	^'Las manos son incompatibles!!'! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:29:16' prior: 50333976!
test03
	| manoDeMano manoDePie |
	manoDeMano := stubs manoConUnaSolaBuena.
	manoDePie := stubs manoConUnaSolaBuena .
	
	self assert: [ Ronda mano: manoDeMano pie: manoDePie ] 
		raiseErrorWithText: Ronda manosIncompatiblesErrorDescription . ! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:29:16' prior: 50333964!
initializeMano: unaManoDeMano pie: unaManoDePie 
	
	(unaManoDeMano puedeEnfrentarseA: unaManoDePie) ifFalse: [
		^self error: self class manosIncompatiblesErrorDescription. ].

	manoDeMano := unaManoDeMano.
	manoDePie := unaManoDePie.
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:29:16' prior: 50333849!
test04
	| manoDeMano manoDePie cartaRepetida |
	cartaRepetida := CartaDeTruco anchoDeEspada.
	manoDeMano := stubs manoCon: cartaRepetida con: cartaRepetida con: cartaRepetida.
	manoDePie := stubs manoConUnaSolaBuena.
	
	self assert: [ Ronda mano: manoDeMano pie: manoDePie ] 
		raiseErrorWithText: Ronda manosIncompatiblesErrorDescription .! !

!methodRemoval: Ronda class #configuracionDeManosInvalidaManosIncompatiblesErrorDescription stamp: 'AW 7/5/2021 19:29:16'!
configuracionDeManosInvalidaManosIncompatiblesErrorDescription
	
	^'Las manos son incompatibles!!'!

!testRun: #RondaTest #test04 stamp: 'AW 7/5/2021 19:29:30'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:29:51' prior: 50334038!
test04
	| manoDeMano manoDePie |
	manoDeMano := stubs manoUltraFuerte .
	manoDePie := stubs manoConUnaSolaBuena.
	
	self assert: [ Ronda mano: manoDeMano pie: manoDePie ] 
		raiseErrorWithText: Ronda manosIncompatiblesErrorDescription .! !

!testRun: #RondaTest #test04 stamp: 'AW 7/5/2021 19:29:57'!
FAILURE!
!TrucoTestStubs methodsFor: 'accessing' stamp: 'AW 7/5/2021 19:30:38' prior: 50333776!
manoConUnaSolaBuena
	^ManoDeTruco con: CartaDeTruco anchoDeEspada con: (CartaDeTruco oroCon: 6) con: (CartaDeTruco bastoCon: 4).
! !
!TrucoTestStubs methodsFor: 'accessing' stamp: 'AW 7/5/2021 19:30:40' prior: 50334074!
manoConUnaSolaBuena
	^ManoDeTruco con: CartaDeTruco anchoDeBasto con: (CartaDeTruco oroCon: 6) con: (CartaDeTruco bastoCon: 4).
! !
!TrucoTestStubs methodsFor: 'accessing' stamp: 'AW 7/5/2021 19:30:49' prior: 50333788!
manoUltraFuerte
	^ManoDeTruco con: CartaDeTruco anchoDeEspada con: CartaDeTruco sieteDeEspada con: CartaDeTruco anchoDeBasto .
	! !

!testRun: #RondaTest #test04 stamp: 'AW 7/5/2021 19:30:55'!
PASSED!

!testRun: #RondaTest #test01 stamp: 'AW 7/5/2021 19:30:55'!
ERROR!

!testRun: #RondaTest #test02 stamp: 'AW 7/5/2021 19:30:55'!
ERROR!

!testRun: #RondaTest #test03 stamp: 'AW 7/5/2021 19:30:55'!
PASSED!

!testRun: #RondaTest #test04 stamp: 'AW 7/5/2021 19:30:55'!
PASSED!

!testRun: #RondaTest #test01 stamp: 'AW 7/5/2021 19:30:58'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:31:40' prior: 50333795!
test01
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs mano1.
	manoDePie := stubs mano2.
	
	ronda := Ronda mano: manoDeMano pie: manoDePie. 

	self assert: [ ronda pieJuega: 	CartaDeTruco anchoDeEspada. ]
		raiseErrorWithText: Ronda noEsTuTurnoErrorDescription.	
	! !

!testRun: #RondaTest #test01 stamp: 'AW 7/5/2021 19:31:43'!
ERROR!
!TrucoTestStubs methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:31:49'!
mano1
	self shouldBeImplemented.! !
!TrucoTestStubs methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:32:32' prior: 50334122!
mano1
	^ManoDeTruco con: (CartaDeTruco oroCon: 3) con: (CartaDeTruco oroCon: 12) con: (CartaDeTruco espadaCon: 6) ! !

!testRun: #RondaTest #test01 stamp: 'AW 7/5/2021 19:32:36'!
ERROR!
!TrucoTestStubs methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:32:40'!
mano2
	self shouldBeImplemented.! !
!TrucoTestStubs methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:33:17' prior: 50334136!
mano2
	^ManoDeTruco con: (CartaDeTruco bastoCon: 3) con: (CartaDeTruco espadaCon: 12) con: (CartaDeTruco copaCon: 6) ! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:33:29' prior: 50333808!
test02
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs mano1 .
	manoDePie := stubs mano2 .
	
	ronda := Ronda mano: manoDeMano pie: manoDePie. 
	ronda manoJuega: 	manoDeMano first.
	
	self assert: [ ronda manoJuega: 	manoDeMano second. ]
		raiseErrorWithText: Ronda noEsTuTurnoErrorDescription.	
	! !

!testRun: #RondaTest #test02 stamp: 'AW 7/5/2021 19:33:38'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:34:34' prior: 50334148!
test02
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs mano1 .
	manoDePie := stubs mano2 .
	
	ronda := Ronda mano: manoDeMano pie: manoDePie. 
	ronda manoJuega: 	manoDeMano primera.
	
	self assert: [ ronda manoJuega: 	manoDeMano second. ]
		raiseErrorWithText: Ronda noEsTuTurnoErrorDescription.	
	! !

!testRun: #RondaTest #test02 stamp: 'AW 7/5/2021 19:34:39'!
ERROR!
!ManoDeTruco methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:34:45'!
primera
	self shouldBeImplemented.! !
!ManoDeTruco methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:34:52' prior: 50334178!
primera
	mano first.! !

!testRun: #RondaTest #test02 stamp: 'AW 7/5/2021 19:34:54'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:35:07' prior: 50334163!
test02
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs mano1 .
	manoDePie := stubs mano2 .
	
	ronda := Ronda mano: manoDeMano pie: manoDePie. 
	ronda manoJuega: 	manoDeMano primera.
	
	self assert: [ ronda manoJuega: 	manoDeMano segunda. ]
		raiseErrorWithText: Ronda noEsTuTurnoErrorDescription.	
	! !

!testRun: #RondaTest #test02 stamp: 'AW 7/5/2021 19:35:12'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:35:20' prior: 50333011!
manoJuega: aCartaDeTruco 
	
	(aCartaDeTruco == 		manoDeMano segunda) ifTrue: [ self error: self class noEsTuTurnoErrorDescription ].! !

!testRun: #RondaTest #test02 stamp: 'AW 7/5/2021 19:35:27'!
ERROR!
!ManoDeTruco methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:35:31'!
segunda
	self shouldBeImplemented.! !
!ManoDeTruco methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:35:38' prior: 50334213!
segunda
	mano second.! !

!testRun: #RondaTest #test02 stamp: 'AW 7/5/2021 19:35:40'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:36:17' prior: 50334204!
manoJuega: aCartaDeTruco 
	
	(aCartaDeTruco = 		manoDeMano segunda) ifTrue: [ self error: self class noEsTuTurnoErrorDescription ].! !

		manoDeMano segunda!
!ManoDeTruco methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:36:44' prior: 50334218!
segunda
	^mano second.! !

!testRun: #RondaTest #test02 stamp: 'AW 7/5/2021 19:36:46'!
PASSED!

!testRun: #RondaTest #test01 stamp: 'AW 7/5/2021 19:36:46'!
PASSED!

!testRun: #RondaTest #test02 stamp: 'AW 7/5/2021 19:36:46'!
PASSED!

!testRun: #RondaTest #test03 stamp: 'AW 7/5/2021 19:36:46'!
PASSED!

!testRun: #RondaTest #test04 stamp: 'AW 7/5/2021 19:36:46'!
PASSED!
!ManoDeTruco methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:36:59' prior: 50334183!
primera
	^mano first.! !

!testRun: #RondaTest #test04 stamp: 'AW 7/5/2021 19:37:07'!
PASSED!

!testRun: #RondaTest #test01 stamp: 'AW 7/5/2021 19:37:07'!
PASSED!

!testRun: #RondaTest #test02 stamp: 'AW 7/5/2021 19:37:07'!
PASSED!

!testRun: #RondaTest #test03 stamp: 'AW 7/5/2021 19:37:07'!
PASSED!

!testRun: #RondaTest #test04 stamp: 'AW 7/5/2021 19:37:07'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:37:25'!
test05
	| manoDeMano manoDePie |
	manoDeMano := stubs manoUltraFuerte .
	manoDePie := stubs manoUltraFuerte .
	
	self assert: [ Ronda mano: manoDeMano pie: manoDePie ] 
		raiseErrorWithText: Ronda manosIncompatiblesErrorDescription .! !

!testRun: #RondaTest #test05 stamp: 'AW 7/5/2021 19:37:26'!
PASSED!

!testRun: #RondaTest #test01 stamp: 'AW 7/5/2021 19:37:26'!
PASSED!

!testRun: #RondaTest #test02 stamp: 'AW 7/5/2021 19:37:26'!
PASSED!

!testRun: #RondaTest #test03 stamp: 'AW 7/5/2021 19:37:26'!
PASSED!

!testRun: #RondaTest #test04 stamp: 'AW 7/5/2021 19:37:26'!
PASSED!

!testRun: #RondaTest #test05 stamp: 'AW 7/5/2021 19:37:26'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:37:49' prior: 50334261!
test05
	| manoDeMano manoDePie |
	manoDeMano := stubs mano1.
	manoDePie := stubs mano2.
	
	self assert: [ Ronda mano: manoDeMano pie: manoDePie ] 
		raiseErrorWithText: Ronda manosIncompatiblesErrorDescription .! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:40:09' prior: 50334285!
test05
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs mano1.
	manoDePie := stubs mano2.
	
	ronda := Ronda mano: manoDeMano pie: manoDePie.
	
	ronda manoJuega: manoDeMano primera.
	ronda pieJuega: manoDePie segunda.
	
	! !
!TrucoTestStubs methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:40:39'!
mano3Oro12Oro6Espada
	^ManoDeTruco con: (CartaDeTruco oroCon: 3) con: (CartaDeTruco oroCon: 12) con: (CartaDeTruco espadaCon: 6) ! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:40:39' prior: 50334189!
test02
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs mano3Oro12Oro6Espada .
	manoDePie := stubs mano2 .
	
	ronda := Ronda mano: manoDeMano pie: manoDePie. 
	ronda manoJuega: 	manoDeMano primera.
	
	self assert: [ ronda manoJuega: 	manoDeMano segunda. ]
		raiseErrorWithText: Ronda noEsTuTurnoErrorDescription.	
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:40:39' prior: 50334108!
test01
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs mano3Oro12Oro6Espada.
	manoDePie := stubs mano2.
	
	ronda := Ronda mano: manoDeMano pie: manoDePie. 

	self assert: [ ronda pieJuega: 	CartaDeTruco anchoDeEspada. ]
		raiseErrorWithText: Ronda noEsTuTurnoErrorDescription.	
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:40:39' prior: 50334295!
test05
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs mano3Oro12Oro6Espada.
	manoDePie := stubs mano2.
	
	ronda := Ronda mano: manoDeMano pie: manoDePie.
	
	ronda manoJuega: manoDeMano primera.
	ronda pieJuega: manoDePie segunda.
	
	! !

!methodRemoval: TrucoTestStubs #mano1 stamp: 'AW 7/5/2021 19:40:39'!
mano1
	^ManoDeTruco con: (CartaDeTruco oroCon: 3) con: (CartaDeTruco oroCon: 12) con: (CartaDeTruco espadaCon: 6) !
!TrucoTestStubs methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:40:58'!
mano3Basto12Espada6Copa
	^ManoDeTruco con: (CartaDeTruco bastoCon: 3) con: (CartaDeTruco espadaCon: 12) con: (CartaDeTruco copaCon: 6) ! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:40:58' prior: 50334326!
test01
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs mano3Oro12Oro6Espada.
	manoDePie := stubs mano3Basto12Espada6Copa.
	
	ronda := Ronda mano: manoDeMano pie: manoDePie. 

	self assert: [ ronda pieJuega: 	CartaDeTruco anchoDeEspada. ]
		raiseErrorWithText: Ronda noEsTuTurnoErrorDescription.	
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:40:58' prior: 50334338!
test05
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs mano3Oro12Oro6Espada.
	manoDePie := stubs mano3Basto12Espada6Copa.
	
	ronda := Ronda mano: manoDeMano pie: manoDePie.
	
	ronda manoJuega: manoDeMano primera.
	ronda pieJuega: manoDePie segunda.
	
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:40:58' prior: 50334313!
test02
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs mano3Oro12Oro6Espada .
	manoDePie := stubs mano3Basto12Espada6Copa .
	
	ronda := Ronda mano: manoDeMano pie: manoDePie. 
	ronda manoJuega: 	manoDeMano primera.
	
	self assert: [ ronda manoJuega: 	manoDeMano segunda. ]
		raiseErrorWithText: Ronda noEsTuTurnoErrorDescription.	
	! !

!methodRemoval: TrucoTestStubs #mano2 stamp: 'AW 7/5/2021 19:40:58'!
mano2
	^ManoDeTruco con: (CartaDeTruco bastoCon: 3) con: (CartaDeTruco espadaCon: 12) con: (CartaDeTruco copaCon: 6) !

!methodRemoval: Ronda #tieneRepetidas: stamp: 'AW 7/5/2021 19:41:19'!
tieneRepetidas: anOrderedCollection 
	self shouldBeImplemented.!

!testRun: #RondaTest #test05 stamp: 'AW 7/5/2021 19:41:26'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:42:24' prior: 50334375!
test05
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs mano3Oro12Oro6Espada.
	manoDePie := stubs mano3Basto12Espada6Copa.
	
	ronda := Ronda mano: manoDeMano pie: manoDePie.
	
	ronda manoJuega: manoDeMano primera.
	ronda pieJuega: manoDePie segunda.
	
	self assert: ronda manoGanoPrimera equals: true.! !

!testRun: #RondaTest #test05 stamp: 'AW 7/5/2021 19:42:30'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:46:58' prior: 50332494!
pieJuega: unaCartaDeTruco 
	
	| enfrentamiento |
	enfrentamiento := self ultimoEnfrentamiento.
	
	enfrentamiento pieJuega: unaCartaDeTruco.
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:47:22' prior: 50334428!
pieJuega: unaCartaDeTruco 
	
	| enfrentamiento |
	enfrentamiento := self enfrentamientoActual.
	
	enfrentamiento pieJuega: unaCartaDeTruco.
	! !

!testRun: #RondaTest #test05 stamp: 'AW 7/5/2021 19:48:00'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:48:13'!
enfrentamientoActual
	self shouldBeImplemented.! !

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'AW 7/5/2021 19:48:29'!
Object subclass: #Ronda
	instanceVariableNames: 'manoDeMano manoDePie enfrentamientos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:48:27' prior: 50334445!
enfrentamientoActual
	
	enfrentamientos last.! !

!testRun: #RondaTest #test05 stamp: 'AW 7/5/2021 19:48:32'!
ERROR!

!classDefinition: #EnfrentamientoEmpiezaMano category: 'ISW1-2021-1C-2doParcial' stamp: 'AW 7/5/2021 19:49:11'!
Object subclass: #EnfrentamientoEmpiezaMano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'initialization' stamp: 'AW 7/5/2021 19:49:08' prior: 50334027!
initializeMano: unaManoDeMano pie: unaManoDePie 
	
	(unaManoDeMano puedeEnfrentarseA: unaManoDePie) ifFalse: [
		^self error: self class manosIncompatiblesErrorDescription. ].

	manoDeMano := unaManoDeMano.
	manoDePie := unaManoDePie.
	enfrentamientos := OrderedCollection with: EnfrentamientoEmpiezaMano new.
	! !

enfrentamientos last!
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:50:48' prior: 50334458!
enfrentamientoActual
	
	^enfrentamientos last.! !

!testRun: #RondaTest #test05 stamp: 'AW 7/5/2021 19:50:49'!
ERROR!
!EnfrentamientoEmpiezaMano methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:50:55'!
pieJuega: aCartaDeTruco 
	self shouldBeImplemented.! !
!EnfrentamientoEmpiezaMano methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:51:04' prior: 50334494!
pieJuega: aCartaDeTruco 
	self error: self class noEsTuTurnoErrorDescription.	! !
!EnfrentamientoEmpiezaMano class methodsFor: 'nil' stamp: 'AW 7/5/2021 19:51:27'!
noEsTuTurnoErrorDescription
	^'No es tu turno!!'.! !

!methodRemoval: Ronda class #noEsTuTurnoErrorDescription stamp: 'AW 7/5/2021 19:51:32'!
noEsTuTurnoErrorDescription
	^'No es tu turno!!'.!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:52:29' prior: 50334362!
test01
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs mano3Oro12Oro6Espada.
	manoDePie := stubs mano3Basto12Espada6Copa.
	
	ronda := Ronda mano: manoDeMano pie: manoDePie. 

	self assert: [ ronda pieJuega: 	CartaDeTruco anchoDeEspada. ]
		raiseErrorWithText: Ronda noEsTuTurnoErrorDescription.	
	! !

Object subclass: #Enfrentamiento
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Enfrentamiento category: 'ISW1-2021-1C-2doParcial' stamp: 'AW 7/5/2021 19:52:55'!
Object subclass: #Enfrentamiento
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Enfrentamiento methodsFor: 'nil' stamp: 'AW 7/5/2021 19:53:09'!
pieJuega: aCartaDeTruco 
	self error: self class noEsTuTurnoErrorDescription.	! !
!Ronda methodsFor: 'initialization' stamp: 'AW 7/5/2021 19:53:32' prior: 50334473!
initializeMano: unaManoDeMano pie: unaManoDePie 
	
	(unaManoDeMano puedeEnfrentarseA: unaManoDePie) ifFalse: [
		^self error: self class manosIncompatiblesErrorDescription. ].

	manoDeMano := unaManoDeMano.
	manoDePie := unaManoDePie.
	enfrentamientos := OrderedCollection with: Enfrentamiento new.
	! !

Enfrentamiento subclass: #EnfrentamientoEmpiezaMano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #EnfrentamientoEmpiezaMano category: 'ISW1-2021-1C-2doParcial' stamp: 'AW 7/5/2021 19:54:14'!
Enfrentamiento subclass: #EnfrentamientoEmpiezaMano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Enfrentamiento class methodsFor: 'no messages' stamp: 'AW 7/5/2021 19:54:41'!
noEsTuTurnoErrorDescription
	^'No es tu turno!!'.! !

!methodRemoval: EnfrentamientoEmpiezaMano class #noEsTuTurnoErrorDescription stamp: 'AW 7/5/2021 19:54:45'!
noEsTuTurnoErrorDescription
	^'No es tu turno!!'.!
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:54:59' prior: 50334539!
pieJuega: aCartaDeTruco 
	self subclassResponsibility.! !
!Ronda methodsFor: 'initialization' stamp: 'AW 7/5/2021 19:55:46' prior: 50334545!
initializeMano: unaManoDeMano pie: unaManoDePie 
	
	(unaManoDeMano puedeEnfrentarseA: unaManoDePie) ifFalse: [
		^self error: self class manosIncompatiblesErrorDescription. ].

	manoDeMano := unaManoDeMano.
	manoDePie := unaManoDePie.
	enfrentamientos := OrderedCollection with: EnfrentamientoEmpiezaMano new.
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:56:01' prior: 50334515!
test01
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs mano3Oro12Oro6Espada.
	manoDePie := stubs mano3Basto12Espada6Copa.
	
	ronda := Ronda mano: manoDeMano pie: manoDePie. 

	self assert: [ ronda pieJuega: 	CartaDeTruco anchoDeEspada. ]
		raiseErrorWithText: Enfrentamiento noEsTuTurnoErrorDescription.	
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:56:10' prior: 50334387!
test02
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs mano3Oro12Oro6Espada .
	manoDePie := stubs mano3Basto12Espada6Copa .
	
	ronda := Ronda mano: manoDeMano pie: manoDePie. 
	ronda manoJuega: 	manoDeMano primera.
	
	self assert: [ ronda manoJuega: 	manoDeMano segunda. ]
		raiseErrorWithText: Enfrentamiento noEsTuTurnoErrorDescription.	
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:56:17' prior: 50334016!
test03
	| manoDeMano manoDePie |
	manoDeMano := stubs manoConUnaSolaBuena.
	manoDePie := stubs manoConUnaSolaBuena .
	
	self assert: [ Ronda mano: manoDeMano pie: manoDePie ] 
		raiseErrorWithText: Enfrentamiento manosIncompatiblesErrorDescription . ! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:56:20' prior: 50334626!
test03
	| manoDeMano manoDePie |
	manoDeMano := stubs manoConUnaSolaBuena.
	manoDePie := stubs manoConUnaSolaBuena .
	
	self assert: [ Ronda mano: manoDeMano pie: manoDePie ] 
		raiseErrorWithText: Ronda manosIncompatiblesErrorDescription . ! !

!testRun: #RondaTest #test05 stamp: 'AW 7/5/2021 19:56:26'!
ERROR!
!EnfrentamientoEmpiezaMano methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:59:24' prior: 50334500 overrides: 50334581!
pieJuega: aCartaDeTruco 
	(self primerYaJugoMano) ifFalse: [ self error: self class noEsTuTurnoErrorDescription.	 ]

	! !
!EnfrentamientoEmpiezaMano methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 19:59:32' prior: 50334651 overrides: 50334581!
pieJuega: aCartaDeTruco 
	(self yaJugoMano) ifFalse: [ self error: self class noEsTuTurnoErrorDescription.	 ]

	! !

!testRun: #RondaTest #test05 stamp: 'AW 7/5/2021 19:59:39'!
ERROR!
!EnfrentamientoEmpiezaMano methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 20:00:11'!
yaJugoMano
	self shouldBeImplemented.! !

!methodRemoval: EnfrentamientoEmpiezaMano #yaJugoMano stamp: 'AW 7/5/2021 20:00:36'!
yaJugoMano
	self shouldBeImplemented.!

!classDefinition: #Enfrentamiento category: 'ISW1-2021-1C-2doParcial' stamp: 'AW 7/5/2021 20:02:02'!
Object subclass: #Enfrentamiento
	instanceVariableNames: 'juegoMano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 20:01:59'!
yaJugoMano

	^juegoMano = nil.! !

!testRun: #RondaTest #test05 stamp: 'AW 7/5/2021 20:02:07'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 20:02:21'!
manoGanoPrimera
	self shouldBeImplemented.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 20:04:12' prior: 50334690!
manoGanoPrimera
	
	enfrentamientos first ganoMano.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 20:17:16'!
test01ElPieNoJuegaPrimeroEnElPrimerEnfrentamiento
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs mano3Oro12Oro6Espada.
	manoDePie := stubs mano3Basto12Espada6Copa.
	
	ronda := Ronda mano: manoDeMano pie: manoDePie. 

	self assert: [ ronda pieJuega: 	CartaDeTruco anchoDeEspada. ]
		raiseErrorWithText: Enfrentamiento noEsTuTurnoErrorDescription.	
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 20:17:45'!
test02LaManoNoPuedeJugar2VecesSeguidas
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs mano3Oro12Oro6Espada .
	manoDePie := stubs mano3Basto12Espada6Copa .
	
	ronda := Ronda mano: manoDeMano pie: manoDePie. 
	ronda manoJuega: 	manoDeMano primera.
	
	self assert: [ ronda manoJuega: 	manoDeMano segunda. ]
		raiseErrorWithText: Enfrentamiento noEsTuTurnoErrorDescription.	
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 20:18:42'!
test03ManosIncompatiblesNoPuedenJugarEntreEllas
	| manoDeMano manoDePie |
	manoDeMano := stubs manoConUnaSolaBuena.
	manoDePie := stubs manoConUnaSolaBuena .
	
	self assert: [ Ronda mano: manoDeMano pie: manoDePie ] 
		raiseErrorWithText: Ronda manosIncompatiblesErrorDescription . ! !

!methodRemoval: RondaTest #test03ManosIncompatiblesNoPuedenJugarEntreEllas stamp: 'AW 7/5/2021 20:18:44'!
test03ManosIncompatiblesNoPuedenJugarEntreEllas
	| manoDeMano manoDePie |
	manoDeMano := stubs manoConUnaSolaBuena.
	manoDePie := stubs manoConUnaSolaBuena .
	
	self assert: [ Ronda mano: manoDeMano pie: manoDePie ] 
		raiseErrorWithText: Ronda manosIncompatiblesErrorDescription . !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 20:18:56'!
test03ManosIncompatiblesNoPuedenEnfrentarse
	| manoDeMano manoDePie |
	manoDeMano := stubs manoConUnaSolaBuena.
	manoDePie := stubs manoConUnaSolaBuena .
	
	self assert: [ Ronda mano: manoDeMano pie: manoDePie ] 
		raiseErrorWithText: Ronda manosIncompatiblesErrorDescription . ! !

!methodRemoval: RondaTest #test01 stamp: 'AW 7/5/2021 20:18:59'!
test01
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs mano3Oro12Oro6Espada.
	manoDePie := stubs mano3Basto12Espada6Copa.
	
	ronda := Ronda mano: manoDeMano pie: manoDePie. 

	self assert: [ ronda pieJuega: 	CartaDeTruco anchoDeEspada. ]
		raiseErrorWithText: Enfrentamiento noEsTuTurnoErrorDescription.	
	!

!methodRemoval: RondaTest #test02 stamp: 'AW 7/5/2021 20:19:01'!
test02
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs mano3Oro12Oro6Espada .
	manoDePie := stubs mano3Basto12Espada6Copa .
	
	ronda := Ronda mano: manoDeMano pie: manoDePie. 
	ronda manoJuega: 	manoDeMano primera.
	
	self assert: [ ronda manoJuega: 	manoDeMano segunda. ]
		raiseErrorWithText: Enfrentamiento noEsTuTurnoErrorDescription.	
	!

!methodRemoval: RondaTest #test03 stamp: 'AW 7/5/2021 20:19:04'!
test03
	| manoDeMano manoDePie |
	manoDeMano := stubs manoConUnaSolaBuena.
	manoDePie := stubs manoConUnaSolaBuena .
	
	self assert: [ Ronda mano: manoDeMano pie: manoDePie ] 
		raiseErrorWithText: Ronda manosIncompatiblesErrorDescription . !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 20:23:30'!
test05MayotCartaGanaUnEnfrentamiento
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs mano3Oro12Oro6Espada.
	manoDePie := stubs mano3Basto12Espada6Copa.
	
	ronda := Ronda mano: manoDeMano pie: manoDePie.
	
	ronda manoJuega: manoDeMano primera.
	ronda pieJuega: manoDePie segunda.
	
	self assert: ronda manoGanoPrimera equals: true.! !

!methodRemoval: RondaTest #test05 stamp: 'AW 7/5/2021 20:23:30'!
test05
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs mano3Oro12Oro6Espada.
	manoDePie := stubs mano3Basto12Espada6Copa.
	
	ronda := Ronda mano: manoDeMano pie: manoDePie.
	
	ronda manoJuega: manoDeMano primera.
	ronda pieJuega: manoDePie segunda.
	
	self assert: ronda manoGanoPrimera equals: true.!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 20:23:35'!
test05MayorCartaGanaUnEnfrentamiento
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs mano3Oro12Oro6Espada.
	manoDePie := stubs mano3Basto12Espada6Copa.
	
	ronda := Ronda mano: manoDeMano pie: manoDePie.
	
	ronda manoJuega: manoDeMano primera.
	ronda pieJuega: manoDePie segunda.
	
	self assert: ronda manoGanoPrimera equals: true.! !

!methodRemoval: RondaTest #test05MayotCartaGanaUnEnfrentamiento stamp: 'AW 7/5/2021 20:23:35'!
test05MayotCartaGanaUnEnfrentamiento
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs mano3Oro12Oro6Espada.
	manoDePie := stubs mano3Basto12Espada6Copa.
	
	ronda := Ronda mano: manoDeMano pie: manoDePie.
	
	ronda manoJuega: manoDeMano primera.
	ronda pieJuega: manoDePie segunda.
	
	self assert: ronda manoGanoPrimera equals: true.!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 20:27:47' prior: 50334824!
test05MayorCartaGanaUnEnfrentamiento
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs mano3Oro12Oro6Espada.
	manoDePie := stubs mano3Basto12Espada6Copa.
	
	ronda := Ronda mano: manoDeMano pie: manoDePie.
	
	ronda manoJuega: manoDeMano primera.
	ronda pieJuega: manoDePie segunda.
	
	self assert: (ronda manoGano: 1).
	self assert: (ronda pieGano: 0).! !

!methodRemoval: Enfrentamiento #yaJugoMano stamp: 'AW 7/5/2021 20:28:22'!
yaJugoMano

	^juegoMano = nil.!
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 20:30:02'!
yaJugoMano

	^juegoMano = nil! !

!testRun: #RondaTest #test05MayorCartaGanaUnEnfrentamiento stamp: 'AW 7/5/2021 20:30:34'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 20:30:42'!
manoGano: aSmallInteger 
	self shouldBeImplemented.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 20:32:19' prior: 50334851!
test05MayorCartaGanaUnEnfrentamiento
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs mano3Oro12Oro6Espada.
	manoDePie := stubs mano3Basto12Espada6Copa.
	
	ronda := Ronda mano: manoDeMano pie: manoDePie.
	
	ronda manoJuega: manoDeMano primera.
	ronda pieJuega: manoDePie segunda.
	
	self assert: ronda ganadasPorMano equals: 1.
	self assert: ronda ganadasPorPie equals: 0.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 20:32:48'!
manoGano 
	self shouldBeImplemented.! !

!methodRemoval: Ronda #manoGano: stamp: 'AW 7/5/2021 20:32:48'!
manoGano: aSmallInteger 
	self shouldBeImplemented.!
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 20:32:57'!
ganadasPorMano 
	self shouldBeImplemented.! !

!methodRemoval: Ronda #manoGano stamp: 'AW 7/5/2021 20:32:57'!
manoGano 
	self shouldBeImplemented.!
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 20:33:26' prior: 50334904!
ganadasPorMano 
	^1! !

!testRun: #RondaTest #test05MayorCartaGanaUnEnfrentamiento stamp: 'AW 7/5/2021 20:33:29'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 20:33:37'!
ganadasPorPie
	self shouldBeImplemented.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 20:33:43' prior: 50334919!
ganadasPorPie
	^0! !

!testRun: #RondaTest #test05MayorCartaGanaUnEnfrentamiento stamp: 'AW 7/5/2021 20:33:48'!
PASSED!

!testRun: #RondaTest #test01ElPieNoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'AW 7/5/2021 20:33:48'!
FAILURE!

!testRun: #RondaTest #test02LaManoNoPuedeJugar2VecesSeguidas stamp: 'AW 7/5/2021 20:33:48'!
ERROR!

!testRun: #RondaTest #test03ManosIncompatiblesNoPuedenEnfrentarse stamp: 'AW 7/5/2021 20:33:48'!
PASSED!

!testRun: #RondaTest #test04 stamp: 'AW 7/5/2021 20:33:48'!
PASSED!

!testRun: #RondaTest #test05MayorCartaGanaUnEnfrentamiento stamp: 'AW 7/5/2021 20:33:48'!
PASSED!

!testRun: #RondaTest #test02LaManoNoPuedeJugar2VecesSeguidas stamp: 'AW 7/5/2021 20:33:53'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 20:35:15' prior: 50334224!
manoJuega: aCartaDeTruco 
	
	
	self enfrentamientoActual manoJuega: aCartaDeTruco.
	! !

!testRun: #RondaTest #test02LaManoNoPuedeJugar2VecesSeguidas stamp: 'AW 7/5/2021 20:35:18'!
ERROR!
!EnfrentamientoEmpiezaMano methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 20:35:27'!
manoJuega: aCartaDeTruco 
	self shouldBeImplemented.! !
!EnfrentamientoEmpiezaMano methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 20:36:18' prior: 50334958!
manoJuega: aCartaDeTruco 
	(self yaJugoMano) ifTrue: [ self error: self class noEsTuTurnoErrorDescription ].! !

!testRun: #RondaTest #test02LaManoNoPuedeJugar2VecesSeguidas stamp: 'AW 7/5/2021 20:36:21'!
PASSED!

!testRun: #RondaTest #test01ElPieNoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'AW 7/5/2021 20:36:22'!
FAILURE!
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 20:37:33' prior: 50334869!
yaJugoMano

	^juegoMano ~= nil! !

!testRun: #RondaTest #test01ElPieNoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'AW 7/5/2021 20:37:38'!
PASSED!

!testRun: #RondaTest #test05MayorCartaGanaUnEnfrentamiento stamp: 'AW 7/5/2021 20:37:42'!
ERROR!

!testRun: #RondaTest #test05MayorCartaGanaUnEnfrentamiento stamp: 'AW 7/5/2021 20:38:04'!
ERROR!
!EnfrentamientoEmpiezaMano methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 20:38:51' prior: 50334964!
manoJuega: aCartaDeTruco 
	(self yaJugoMano) ifTrue: [ self error: self class noEsTuTurnoErrorDescription ].
	
	juegoMano := 	aCartaDeTruco.! !

!testRun: #RondaTest #test05MayorCartaGanaUnEnfrentamiento stamp: 'AW 7/5/2021 20:38:53'!
PASSED!

!testRun: #RondaTest #test01ElPieNoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'AW 7/5/2021 20:38:53'!
PASSED!

!testRun: #RondaTest #test02LaManoNoPuedeJugar2VecesSeguidas stamp: 'AW 7/5/2021 20:38:53'!
PASSED!

!testRun: #RondaTest #test03ManosIncompatiblesNoPuedenEnfrentarse stamp: 'AW 7/5/2021 20:38:53'!
PASSED!

!testRun: #RondaTest #test04 stamp: 'AW 7/5/2021 20:38:53'!
PASSED!

!testRun: #RondaTest #test05MayorCartaGanaUnEnfrentamiento stamp: 'AW 7/5/2021 20:38:53'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 20:42:15'!
test06GanarDosEnfrentamientosSeguidosGanaLaRonda
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs mano3Oro12Oro6Espada.
	manoDePie := stubs mano3Basto12Espada6Copa.
	
	ronda := Ronda mano: manoDeMano pie: manoDePie.
	
	ronda manoJuega: manoDeMano primera.
	ronda pieJuega: manoDePie segunda.
	
	ronda manoJuega: manoDeMano primera.
	ronda pieJuega: manoDePie segunda.
	
	self assert: ronda ganadasPorMano equals: 2.
	self assert: ronda ganadasPorPie equals: 0.
	self assert: ronda ganoMano equals: true.! !

!testRun: #RondaTest #test06GanarDosEnfrentamientosSeguidosGanaLaRonda stamp: 'AW 7/5/2021 20:42:17'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 20:42:36' prior: 50335019!
test06GanarDosEnfrentamientosSeguidosGanaLaRonda
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs mano3Oro12Oro6Espada.
	manoDePie := stubs mano3Basto12Espada6Copa.
	
	ronda := Ronda mano: manoDeMano pie: manoDePie.
	
	ronda manoJuega: manoDeMano primera.
	ronda pieJuega: manoDePie segunda.
	
	ronda manoJuega: manoDeMano segunda.
	ronda pieJuega: manoDePie tercera.
	
	self assert: ronda ganadasPorMano equals: 2.
	self assert: ronda ganadasPorPie equals: 0.
	self assert: ronda ganoMano equals: true.! !

!testRun: #RondaTest #test06GanarDosEnfrentamientosSeguidosGanaLaRonda stamp: 'AW 7/5/2021 20:42:38'!
ERROR!

!classDefinition: #EnfrentamientoEmpiezaMano category: 'ISW1-2021-1C-2doParcial' stamp: 'AW 7/5/2021 20:44:21'!
Enfrentamiento subclass: #EnfrentamientoEmpiezaMano
	instanceVariableNames: 'juegoPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!EnfrentamientoEmpiezaMano methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 20:44:19' prior: 50334659 overrides: 50334581!
pieJuega: aCartaDeTruco 
	(self yaJugoMano) ifFalse: [ self error: self class noEsTuTurnoErrorDescription.	 ].

	juegoPie := aCartaDeTruco.
	
	
	! !

!classDefinition: #EnfrentamientoEmpiezaMano category: 'ISW1-2021-1C-2doParcial' stamp: 'AW 7/5/2021 20:49:16'!
Enfrentamiento subclass: #EnfrentamientoEmpiezaMano
	instanceVariableNames: 'juegoPie resultado'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!EnfrentamientoEmpiezaMano methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 20:49:14' prior: 50335075 overrides: 50334581!
pieJuega: aCartaDeTruco 
	(self yaJugoMano) ifFalse: [ self error: self class noEsTuTurnoErrorDescription.	 ].

	juegoPie := aCartaDeTruco.
	
	
	resultado := self calcularResultado.
	! !

!testRun: #RondaTest #test06GanarDosEnfrentamientosSeguidosGanaLaRonda stamp: 'AW 7/5/2021 20:49:30'!
ERROR!
!EnfrentamientoEmpiezaMano methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 20:49:35'!
calcularResultado
	self shouldBeImplemented.! !
!EnfrentamientoEmpiezaMano methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 20:49:58' prior: 50335106!
calcularResultado
	
	(juegoMano mataA: juegoPie)	ifTrue: [
		^1
	] ifFalse: [
		^-1
	]! !
!EnfrentamientoEmpiezaMano methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 20:50:40' prior: 50335111!
calcularResultado
	
	(juegoMano mataA: juegoPie)	ifTrue: [
		^1
	].

	(juegoPie mataA: juegoMano)	ifFalse: [
		^-1
	].

	^0.! !

!testRun: #RondaTest #test06GanarDosEnfrentamientosSeguidosGanaLaRonda stamp: 'AW 7/5/2021 20:50:42'!
ERROR!

!classDefinition: #EnfrentamientoEmpiezaPie category: 'ISW1-2021-1C-2doParcial' stamp: 'AW 7/5/2021 20:57:21'!
Enfrentamiento subclass: #EnfrentamientoEmpiezaPie
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 20:57:10' prior: 50334436!
pieJuega: unaCartaDeTruco 
	
	| enfrentamiento |
	enfrentamiento := self enfrentamientoActual.
	
	enfrentamiento pieJuega: unaCartaDeTruco.
	
	(enfrentamiento termino) ifTrue: [
		enfrentamientos append: EnfrentamientoEmpiezaPie new.
	]
	! !

!testRun: #RondaTest #test06GanarDosEnfrentamientosSeguidosGanaLaRonda stamp: 'AW 7/5/2021 20:57:28'!
ERROR!
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 20:57:43'!
termino
	self shouldBeImplemented.! !
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 20:58:36' prior: 50335151!
termino
	(self ganadasPorMano > 1) or: (self ganadasPorPie > 1).! !

!testRun: #RondaTest #test06GanarDosEnfrentamientosSeguidosGanaLaRonda stamp: 'AW 7/5/2021 20:58:38'!
ERROR!

!testRun: #RondaTest #test06GanarDosEnfrentamientosSeguidosGanaLaRonda stamp: 'AW 7/5/2021 20:59:40'!
ERROR!

!testRun: #RondaTest #test06GanarDosEnfrentamientosSeguidosGanaLaRonda stamp: 'AW 7/5/2021 20:59:47'!
ERROR!
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:00:17' prior: 50335156!
termino
	true.! !
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:00:19' prior: 50335172!
termino
	^true.! !

!testRun: #RondaTest #test06GanarDosEnfrentamientosSeguidosGanaLaRonda stamp: 'AW 7/5/2021 21:00:24'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:00:35' prior: 50335137!
pieJuega: unaCartaDeTruco 
	
	| enfrentamiento |
	enfrentamiento := self enfrentamientoActual.
	
	enfrentamiento pieJuega: unaCartaDeTruco.
	
	(enfrentamiento termino) ifTrue: [
		enfrentamientos add: EnfrentamientoEmpiezaPie new.
	]
	! !

!testRun: #RondaTest #test06GanarDosEnfrentamientosSeguidosGanaLaRonda stamp: 'AW 7/5/2021 21:00:37'!
ERROR!
!EnfrentamientoEmpiezaPie methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:01:20'!
manoJuega: aCartaDeTruco 
	self shouldBeImplemented.! !
!EnfrentamientoEmpiezaPie methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:02:02' prior: 50335197!
manoJuega: aCartaDeTruco 
		
	(self yaJugoPie) ifTrue: [ self error: self class noEsTuTurnoErrorDescription ].
	
	juegoMano := 	aCartaDeTruco.! !

!testRun: #RondaTest #test06GanarDosEnfrentamientosSeguidosGanaLaRonda stamp: 'AW 7/5/2021 21:02:07'!
ERROR!
!EnfrentamientoEmpiezaPie methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:02:14'!
yaJugoPie
	self shouldBeImplemented.! !
!EnfrentamientoEmpiezaPie methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:02:19' prior: 50335214!
yaJugoPie
	^false.! !

!testRun: #RondaTest #test06GanarDosEnfrentamientosSeguidosGanaLaRonda stamp: 'AW 7/5/2021 21:02:25'!
ERROR!
!ManoDeTruco methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:02:35'!
tercera
	self shouldBeImplemented.! !
!ManoDeTruco methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:02:42' prior: 50335226!
tercera
	^mano third.! !

!testRun: #RondaTest #test06GanarDosEnfrentamientosSeguidosGanaLaRonda stamp: 'AW 7/5/2021 21:02:44'!
ERROR!
!EnfrentamientoEmpiezaPie methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:03:04' overrides: 50334581!
pieJuega: aCartaDeTruco 
	self shouldBeImplemented.! !

!classDefinition: #EnfrentamientoEmpiezaPie category: 'ISW1-2021-1C-2doParcial' stamp: 'AW 7/5/2021 21:03:44'!
Enfrentamiento subclass: #EnfrentamientoEmpiezaPie
	instanceVariableNames: 'juegoPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #EnfrentamientoEmpiezaPie category: 'ISW1-2021-1C-2doParcial' stamp: 'AW 7/5/2021 21:03:46'!
Enfrentamiento subclass: #EnfrentamientoEmpiezaPie
	instanceVariableNames: 'juegoPie resultado'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!EnfrentamientoEmpiezaPie methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:03:41' prior: 50335239 overrides: 50334581!
pieJuega: aCartaDeTruco 
	(self yaJugoPie) ifFalse: [ self error: self class noEsTuTurnoErrorDescription.	 ].

	juegoPie := aCartaDeTruco.
	
	
	resultado := self calcularResultado.
	! !

!testRun: #RondaTest #test06GanarDosEnfrentamientosSeguidosGanaLaRonda stamp: 'AW 7/5/2021 21:04:00'!
ERROR!

!classDefinition: #Enfrentamiento category: 'ISW1-2021-1C-2doParcial' stamp: 'AW 7/5/2021 21:04:51'!
Object subclass: #Enfrentamiento
	instanceVariableNames: 'juegoMano juegoPie2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:04:49'!
yaJugoPie

	^juegoPie2 ~= nil.! !

Enfrentamiento subclass: #EnfrentamientoEmpiezaPie
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #EnfrentamientoEmpiezaPie category: 'ISW1-2021-1C-2doParcial' stamp: 'AW 7/5/2021 21:04:56'!
Enfrentamiento subclass: #EnfrentamientoEmpiezaPie
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!methodRemoval: EnfrentamientoEmpiezaPie #yaJugoPie stamp: 'AW 7/5/2021 21:05:04'!
yaJugoPie
	^false.!

Object subclass: #Enfrentamiento
	instanceVariableNames: 'juegoMano juegoPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

Enfrentamiento subclass: #EnfrentamientoEmpiezaMano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #EnfrentamientoEmpiezaMano category: 'ISW1-2021-1C-2doParcial' stamp: 'AW 7/5/2021 21:05:22'!
Enfrentamiento subclass: #EnfrentamientoEmpiezaMano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

Object subclass: #Enfrentamiento
	instanceVariableNames: 'juegoMano juegoPie resultado'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Enfrentamiento category: 'ISW1-2021-1C-2doParcial' stamp: 'AW 7/5/2021 21:05:32'!
Object subclass: #Enfrentamiento
	instanceVariableNames: 'juegoMano juegoPie resultado'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:05:41' prior: 50335284!
yaJugoPie

	^juegoPie ~= nil.! !

!testRun: #RondaTest #test06GanarDosEnfrentamientosSeguidosGanaLaRonda stamp: 'AW 7/5/2021 21:06:42'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:08:44' prior: 50335183!
pieJuega: unaCartaDeTruco 
	
	| enfrentamiento |
	enfrentamiento := self enfrentamientoActual.
	
	enfrentamiento pieJuega: unaCartaDeTruco.
	
	(enfrentamiento termino) ifTrue: [
		enfrentamientos add: EnfrentamientoEmpiezaMano new.
	]
	! !

!testRun: #RondaTest #test01ElPieNoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'AW 7/5/2021 21:08:51'!
PASSED!

!testRun: #RondaTest #test02LaManoNoPuedeJugar2VecesSeguidas stamp: 'AW 7/5/2021 21:08:51'!
PASSED!

!testRun: #RondaTest #test03ManosIncompatiblesNoPuedenEnfrentarse stamp: 'AW 7/5/2021 21:08:51'!
PASSED!

!testRun: #RondaTest #test04 stamp: 'AW 7/5/2021 21:08:51'!
PASSED!

!testRun: #RondaTest #test05MayorCartaGanaUnEnfrentamiento stamp: 'AW 7/5/2021 21:08:51'!
PASSED!

!testRun: #RondaTest #test06GanarDosEnfrentamientosSeguidosGanaLaRonda stamp: 'AW 7/5/2021 21:08:51'!
FAILURE!

!testRun: #RondaTest #test06GanarDosEnfrentamientosSeguidosGanaLaRonda stamp: 'AW 7/5/2021 21:08:51'!
FAILURE!

!testRun: #RondaTest #test06GanarDosEnfrentamientosSeguidosGanaLaRonda stamp: 'AW 7/5/2021 21:09:00'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:11:09' prior: 50334912!
ganadasPorMano 
	^enfrentamientos sum: [ :enfrentamiento | 
		enfrentamiento ganoMano ifTrue: [ 1 ]
	]! !

!testRun: #RondaTest #test01ElPieNoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'AW 7/5/2021 21:11:09'!
PASSED!

!testRun: #RondaTest #test02LaManoNoPuedeJugar2VecesSeguidas stamp: 'AW 7/5/2021 21:11:09'!
PASSED!

!testRun: #RondaTest #test03ManosIncompatiblesNoPuedenEnfrentarse stamp: 'AW 7/5/2021 21:11:09'!
PASSED!

!testRun: #RondaTest #test04 stamp: 'AW 7/5/2021 21:11:09'!
PASSED!

!testRun: #RondaTest #test05MayorCartaGanaUnEnfrentamiento stamp: 'AW 7/5/2021 21:11:09'!
ERROR!

!testRun: #RondaTest #test06GanarDosEnfrentamientosSeguidosGanaLaRonda stamp: 'AW 7/5/2021 21:11:09'!
ERROR!

!testRun: #RondaTest #test06GanarDosEnfrentamientosSeguidosGanaLaRonda stamp: 'AW 7/5/2021 21:12:04'!
ERROR!
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:12:27'!
ganoMano
	self shouldBeImplemented.! !
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:12:59' prior: 50335410!
ganoMano
	resultado = 1.! !

!testRun: #RondaTest #test06GanarDosEnfrentamientosSeguidosGanaLaRonda stamp: 'AW 7/5/2021 21:13:05'!
ERROR!

enfrentamiento ganoMano!
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:13:37' prior: 50335415!
ganoMano
	^resultado = 1.! !

!testRun: #RondaTest #test06GanarDosEnfrentamientosSeguidosGanaLaRonda stamp: 'AW 7/5/2021 21:13:43'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:15:29' prior: 50335382!
ganadasPorMano 
	^enfrentamientos sum: [ :enfrentamiento | 
		self puntosParaManoPorEnfrentamiento: enfrentamiento.
	]! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:16:09'!
puntosParaManoPorEnfrentamiento: enfrentamiento

	enfrentamiento ganoMano 
		ifTrue: [ ^1 ]
		
	^0.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:16:11' prior: 50335439!
puntosParaManoPorEnfrentamiento: enfrentamiento

	enfrentamiento ganoMano 
		ifTrue: [ ^1 ].
		
	^0.! !

!testRun: #RondaTest #test06GanarDosEnfrentamientosSeguidosGanaLaRonda stamp: 'AW 7/5/2021 21:16:23'!
ERROR!

!testRun: #RondaTest #test06GanarDosEnfrentamientosSeguidosGanaLaRonda stamp: 'AW 7/5/2021 21:16:45'!
ERROR!
!MethodContext methodsFor: 'controlling' stamp: 'AW 7/5/2021 21:16:54' overrides: 16824440!
runUntilErrorOrReturnFrom: anUnhandledError 
	self shouldBeImplemented.! !

----QUIT----(5 July 2021 21:28:00) CuisUniversity-4532.image priorSource: 16885703!

----STARTUP---- (5 July 2021 21:28:41) as /home/awolfsdorf/Dropbox/CSCOM/IngeSoft1/2doParcial/CuisUniversity-4532.image!


----End fileIn of /home/awolfsdorf/Dropbox/CSCOM/IngeSoft1/2doParcial/ISW1-2021-1C-2doParcial.st----!

!testRun: #RondaTest #test06GanarDosEnfrentamientosSeguidosGanaLaRonda stamp: 'AW 7/5/2021 21:30:10'!
ERROR!

!testRun: #RondaTest #test06GanarDosEnfrentamientosSeguidosGanaLaRonda stamp: 'AW 7/5/2021 21:31:26'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:31:42'!
ganoMano
	self shouldBeImplemented.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:32:09' prior: 50332672!
ganoMano
	self ganadasPorMano > 1.! !

!testRun: #RondaTest #test06GanarDosEnfrentamientosSeguidosGanaLaRonda stamp: 'AW 7/5/2021 21:32:13'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:32:34' prior: 50332676!
ganoMano
	^self ganadasPorMano > 1.! !

!testRun: #RondaTest #test06GanarDosEnfrentamientosSeguidosGanaLaRonda stamp: 'AW 7/5/2021 21:32:35'!
PASSED!

!testRun: #RondaTest #test01ElPieNoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'AW 7/5/2021 21:32:35'!
PASSED!

!testRun: #RondaTest #test02LaManoNoPuedeJugar2VecesSeguidas stamp: 'AW 7/5/2021 21:32:35'!
PASSED!

!testRun: #RondaTest #test03ManosIncompatiblesNoPuedenEnfrentarse stamp: 'AW 7/5/2021 21:32:35'!
PASSED!

!testRun: #RondaTest #test04 stamp: 'AW 7/5/2021 21:32:35'!
PASSED!

!testRun: #RondaTest #test05MayorCartaGanaUnEnfrentamiento stamp: 'AW 7/5/2021 21:32:35'!
PASSED!

!testRun: #RondaTest #test06GanarDosEnfrentamientosSeguidosGanaLaRonda stamp: 'AW 7/5/2021 21:32:35'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:34:00'!
test07
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs mano3Oro12Oro6Espada.
	manoDePie := stubs mano3Basto12Espada6Copa.
	
	ronda := Ronda mano: manoDeMano pie: manoDePie.
	
	ronda manoJuega: manoDeMano primera.
	ronda pieJuega: manoDePie segunda.
	
	ronda manoJuega: manoDeMano segunda.
	ronda pieJuega: manoDePie tercera.
	
	self assert: ronda ganadasPorMano equals: 2.
	self assert: ronda ganadasPorPie equals: 0.
	self assert: ronda ganoMano equals: true.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:34:45' prior: 50332710!
test07
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs mano3Oro12Oro6Espada.
	manoDePie := stubs mano3Basto12Espada6Copa.
	
	ronda := Ronda mano: manoDeMano pie: manoDePie.
	
	ronda manoJuega: manoDeMano segunda.
	ronda pieJuega: manoDePie primera.
	
	ronda manoJuega: manoDeMano segunda.
	ronda pieJuega: manoDePie tercera.
	
	self assert: ronda ganadasPorMano equals: 2.
	self assert: ronda ganadasPorPie equals: 0.
	self assert: ronda ganoMano equals: true.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:35:57' prior: 50332728!
test07
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs mano3Oro12Oro6Espada.
	manoDePie := stubs mano3Basto12Espada6Copa.
	
	ronda := Ronda mano: manoDeMano pie: manoDePie.
	
	ronda manoJuega: manoDeMano segunda.
	ronda pieJuega: manoDePie primera.
	
	ronda manoJuega: manoDeMano tercera .
	ronda pieJuega: manoDePie segunda.
	
	self assert: ronda ganadasPorMano equals: 0.
	self assert: ronda ganadasPorPie equals: 2.
	self assert: ronda ganoPie equals: true.! !

!testRun: #RondaTest #test07 stamp: 'AW 7/5/2021 21:36:07'!
FAILURE!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:36:34' prior: 50332746!
test07
	| manoDeMano manoDePie ronda |
	manoDeMano := stubs mano3Oro12Oro6Espada.
	manoDePie := stubs mano3Basto12Espada6Copa.
	
	ronda := Ronda mano: manoDeMano pie: manoDePie.
	
	ronda manoJuega: manoDeMano segunda.
	ronda pieJuega: manoDePie primera.
	
	ronda pieJuega: manoDePie segunda.
	ronda manoJuega: manoDeMano tercera .
	
	self assert: ronda ganadasPorMano equals: 0.
	self assert: ronda ganadasPorPie equals: 2.
	self assert: ronda ganoPie equals: true.! !

!testRun: #RondaTest #test07 stamp: 'AW 7/5/2021 21:36:38'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:38:18' prior: 50332580!
pieJuega: unaCartaDeTruco 
	
	| enfrentamiento |
	enfrentamiento := self enfrentamientoActual.
	
	enfrentamiento pieJuega: unaCartaDeTruco.
	
	(enfrentamiento termino) ifTrue: [
		enfrentamientos add: (self getNextEnfrentamiento: enfrentamiento).
	]
	! !

!testRun: #RondaTest #test07 stamp: 'AW 7/5/2021 21:38:21'!
ERROR!

!testRun: #RondaTest #test07 stamp: 'AW 7/5/2021 21:38:30'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:38:36'!
getNextEnfrentamiento: anEnfrentamientoEmpiezaMano 
	self shouldBeImplemented.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:40:00' prior: 50332801!
getNextEnfrentamiento: anEnfrentamiento 
	self shouldBeImplemented.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:40:12' prior: 50332807!
getNextEnfrentamiento: anEnfrentamiento 
	anEnfrentamiento getNextEnfrentamiento.! !

!testRun: #RondaTest #test01ElPieNoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'AW 7/5/2021 21:40:16'!
PASSED!

!testRun: #RondaTest #test02LaManoNoPuedeJugar2VecesSeguidas stamp: 'AW 7/5/2021 21:40:16'!
PASSED!

!testRun: #RondaTest #test03ManosIncompatiblesNoPuedenEnfrentarse stamp: 'AW 7/5/2021 21:40:16'!
PASSED!

!testRun: #RondaTest #test04 stamp: 'AW 7/5/2021 21:40:16'!
PASSED!

!testRun: #RondaTest #test05MayorCartaGanaUnEnfrentamiento stamp: 'AW 7/5/2021 21:40:16'!
ERROR!

!testRun: #RondaTest #test06GanarDosEnfrentamientosSeguidosGanaLaRonda stamp: 'AW 7/5/2021 21:40:16'!
ERROR!

!testRun: #RondaTest #test07 stamp: 'AW 7/5/2021 21:40:16'!
ERROR!

!testRun: #RondaTest #test05MayorCartaGanaUnEnfrentamiento stamp: 'AW 7/5/2021 21:40:19'!
ERROR!
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:40:30'!
getNextEnfrentamiento
	self shouldBeImplemented.! !
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:40:35' prior: 50332841!
getNextEnfrentamiento
	self subclassResponsibility ! !
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:40:37' prior: 50332846!
getNextEnfrentamiento
	self subclassResponsibility.! !

!testRun: #RondaTest #test05MayorCartaGanaUnEnfrentamiento stamp: 'AW 7/5/2021 21:40:39'!
ERROR!
!EnfrentamientoEmpiezaMano methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:40:46' overrides: 50332851!
getNextEnfrentamiento
	self shouldBeImplemented.! !

!methodRemoval: EnfrentamientoEmpiezaMano #getNextEnfrentamiento stamp: 'AW 7/5/2021 21:41:11'!
getNextEnfrentamiento
	self shouldBeImplemented.!
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:42:16' prior: 50332851!
getNextEnfrentamiento
	
	
	(resultado = -1) ifTrue: [
		^EnfrentamientoEmpiezaPie new.	
	].

	^EnfrentamientoEmpiezaMano new.	

	! !

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'AW 7/5/2021 21:42:18'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'AW 7/5/2021 21:42:18'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'AW 7/5/2021 21:42:18'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'AW 7/5/2021 21:42:18'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'AW 7/5/2021 21:42:18'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'AW 7/5/2021 21:42:18'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'AW 7/5/2021 21:42:18'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'AW 7/5/2021 21:42:18'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'AW 7/5/2021 21:42:18'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'AW 7/5/2021 21:42:18'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'AW 7/5/2021 21:42:18'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'AW 7/5/2021 21:42:18'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'AW 7/5/2021 21:42:18'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'AW 7/5/2021 21:42:18'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'AW 7/5/2021 21:42:18'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'AW 7/5/2021 21:42:18'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'AW 7/5/2021 21:42:18'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'AW 7/5/2021 21:42:18'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInválida stamp: 'AW 7/5/2021 21:42:18'!
PASSED!

!testRun: #ManoTest #test01 stamp: 'AW 7/5/2021 21:42:18'!
PASSED!

!testRun: #ManoTest #test02 stamp: 'AW 7/5/2021 21:42:18'!
PASSED!

!testRun: #ManoTest #test03 stamp: 'AW 7/5/2021 21:42:18'!
PASSED!

!testRun: #RondaTest #test01ElPieNoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'AW 7/5/2021 21:42:18'!
PASSED!

!testRun: #RondaTest #test02LaManoNoPuedeJugar2VecesSeguidas stamp: 'AW 7/5/2021 21:42:18'!
PASSED!

!testRun: #RondaTest #test03ManosIncompatiblesNoPuedenEnfrentarse stamp: 'AW 7/5/2021 21:42:18'!
PASSED!

!testRun: #RondaTest #test04 stamp: 'AW 7/5/2021 21:42:18'!
PASSED!
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:43:11' prior: 50332812!
getNextEnfrentamiento: anEnfrentamiento 
	^anEnfrentamiento getNextEnfrentamiento.! !

!testRun: #RondaTest #test07 stamp: 'AW 7/5/2021 21:43:12'!
ERROR!

!testRun: #RondaTest #test07 stamp: 'AW 7/5/2021 21:43:16'!
ERROR!

!testRun: #RondaTest #test07 stamp: 'AW 7/5/2021 21:43:33'!
ERROR!

!testRun: #RondaTest #test07 stamp: 'AW 7/5/2021 21:43:58'!
ERROR!

(self getNextEnfrentamiento: enfrentamiento)!
!EnfrentamientoEmpiezaMano methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:45:07' prior: 50332402!
calcularResultado
	
	(juegoMano mataA: juegoPie)	ifTrue: [
		^1
	].

	(juegoPie mataA: juegoMano) 	ifTrue: [
		^-1
	].

	^0.! !

!testRun: #RondaTest #test07 stamp: 'AW 7/5/2021 21:45:11'!
ERROR!

!testRun: #RondaTest #test07 stamp: 'AW 7/5/2021 21:45:17'!
ERROR!

(self getNextEnfrentamiento: enfrentamiento)!

!testRun: #RondaTest #test07 stamp: 'AW 7/5/2021 21:45:56'!
ERROR!

!testRun: #RondaTest #test07 stamp: 'AW 7/5/2021 21:46:00'!
ERROR!

!testRun: #RondaTest #test07 stamp: 'AW 7/5/2021 21:46:21'!
ERROR!
!EnfrentamientoEmpiezaPie methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:46:58' prior: 50332449 overrides: 50332357!
pieJuega: aCartaDeTruco 
	(self yaJugoPie) ifTrue: [ self error: self class noEsTuTurnoErrorDescription.	 ].

	juegoPie := aCartaDeTruco.
	
	
	resultado := self calcularResultado.
	! !

!testRun: #RondaTest #test07 stamp: 'AW 7/5/2021 21:47:07'!
ERROR!
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:47:24'!
calcularResultado
	
	(juegoMano mataA: juegoPie)	ifTrue: [
		^1
	].

	(juegoPie mataA: juegoMano) 	ifTrue: [
		^-1
	].

	^0.! !

!methodRemoval: EnfrentamientoEmpiezaMano #calcularResultado stamp: 'AW 7/5/2021 21:47:29'!
calcularResultado
	
	(juegoMano mataA: juegoPie)	ifTrue: [
		^1
	].

	(juegoPie mataA: juegoMano) 	ifTrue: [
		^-1
	].

	^0.!

!testRun: #RondaTest #test07 stamp: 'AW 7/5/2021 21:47:35'!
ERROR!

!testRun: #RondaTest #test07 stamp: 'AW 7/5/2021 21:47:58'!
ERROR!
!EnfrentamientoEmpiezaPie methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:48:12' prior: 50332999 overrides: 50332357!
pieJuega: aCartaDeTruco 
	(self yaJugoPie) ifTrue: [ self error: self class noEsTuTurnoErrorDescription.	 ].

	juegoPie := aCartaDeTruco.
! !

!testRun: #RondaTest #test07 stamp: 'AW 7/5/2021 21:48:14'!
ERROR!
!EnfrentamientoEmpiezaPie methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:48:41' prior: 50332440!
manoJuega: aCartaDeTruco 
		
	(self yaJugoPie) ifFalse: [ self error: self class noEsTuTurnoErrorDescription ].
	
	juegoMano := 	aCartaDeTruco.
	
	resultado := self calcularResultado.
	! !

!testRun: #RondaTest #test07 stamp: 'AW 7/5/2021 21:48:48'!
FAILURE!

enfrentamientos sum: [ :enfrentamiento | 
		self puntosParaManoPorEnfrentamiento: enfrentamiento.
	]!
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:50:14' prior: 50332568!
ganadasPorPie
	^enfrentamientos sum: [ :enfrentamiento | 
		self puntosParaManoPorEnfrentamiento: enfrentamiento.
	]! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:50:24' prior: 50333055!
ganadasPorPie
	^enfrentamientos sum: [ :enfrentamiento | 
		self puntosParaPiePorEnfrentamiento: enfrentamiento.
	]! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:51:01'!
puntosParaPiePorEnfrentamiento: enfrentamiento

	enfrentamiento ganoPie 
		ifTrue: [ ^1 ].
		
	^0.! !

!testRun: #RondaTest #test07 stamp: 'AW 7/5/2021 21:51:07'!
ERROR!
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:51:29'!
ganoPie
	^resultado = 0.! !
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:51:44'!
empardaron
	^resultado = 0.! !
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:51:51' prior: 50333076!
ganoPie
	^resultado = -1.! !

!testRun: #RondaTest #test07 stamp: 'AW 7/5/2021 21:52:03'!
FAILURE!

!testRun: #RondaTest #test07 stamp: 'AW 7/5/2021 21:52:52'!
FAILURE!

!testRun: #RondaTest #test07 stamp: 'AW 7/5/2021 21:53:20'!
FAILURE!

!testRun: #RondaTest #test07 stamp: 'AW 7/5/2021 21:53:54'!
FAILURE!
!Enfrentamiento methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:54:55' prior: 50332362!
termino
	^(self yaJugoMano) and: (self yaJugoPie).! !

!testRun: #RondaTest #test07 stamp: 'AW 7/5/2021 21:55:00'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'AW 7/5/2021 21:55:24'!
ganoPie
	^self ganadasPorPie > 1.! !

!testRun: #RondaTest #test07 stamp: 'AW 7/5/2021 21:55:30'!
PASSED!

!testRun: #RondaTest #test01ElPieNoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'AW 7/5/2021 21:55:30'!
PASSED!

!testRun: #RondaTest #test02LaManoNoPuedeJugar2VecesSeguidas stamp: 'AW 7/5/2021 21:55:30'!
PASSED!

!testRun: #RondaTest #test03ManosIncompatiblesNoPuedenEnfrentarse stamp: 'AW 7/5/2021 21:55:30'!
PASSED!

!testRun: #RondaTest #test04 stamp: 'AW 7/5/2021 21:55:30'!
PASSED!

!testRun: #RondaTest #test05MayorCartaGanaUnEnfrentamiento stamp: 'AW 7/5/2021 21:55:30'!
PASSED!

!testRun: #RondaTest #test06GanarDosEnfrentamientosSeguidosGanaLaRonda stamp: 'AW 7/5/2021 21:55:30'!
PASSED!

!testRun: #RondaTest #test07 stamp: 'AW 7/5/2021 21:55:30'!
PASSED!

----SNAPSHOT----(5 July 2021 21:55:52) CuisUniversity-4532.image priorSource: 16885703!