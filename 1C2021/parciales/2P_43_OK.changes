

----QUIT----(9 March 2021 14:58:42) CuisUniversity-4532.image priorSource: 13044060!

----STARTUP---- (9 March 2021 14:58:43) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4532.image!


----QUIT----(9 March 2021 14:58:43) CuisUniversity-4532.image priorSource: 16885479!

----STARTUP---- (5 July 2021 16:28:07) as /home/caro/Downloads/linux64 (1)/CuisUniversity-4532.image!


----End fileIn of /home/caro/Downloads/linux64 (1)/ISW1-2021-1C-2doParcial.st----!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CD 7/5/2021 17:19:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CD 7/5/2021 17:19:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CD 7/5/2021 17:19:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CD 7/5/2021 17:19:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CD 7/5/2021 17:19:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CD 7/5/2021 17:19:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CD 7/5/2021 17:19:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CD 7/5/2021 17:19:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CD 7/5/2021 17:19:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CD 7/5/2021 17:19:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CD 7/5/2021 17:19:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CD 7/5/2021 17:19:44'!
ERROR!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CD 7/5/2021 17:19:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CD 7/5/2021 17:19:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CD 7/5/2021 17:19:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CD 7/5/2021 17:19:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CD 7/5/2021 17:19:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CD 7/5/2021 17:19:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInválida stamp: 'CD 7/5/2021 17:19:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CD 7/5/2021 17:19:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'CD 7/5/2021 17:19:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'CD 7/5/2021 17:19:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'CD 7/5/2021 17:19:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'CD 7/5/2021 17:19:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'CD 7/5/2021 17:19:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'CD 7/5/2021 17:19:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'CD 7/5/2021 17:19:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'CD 7/5/2021 17:19:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'CD 7/5/2021 17:19:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'CD 7/5/2021 17:19:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'CD 7/5/2021 17:19:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'CD 7/5/2021 17:19:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'CD 7/5/2021 17:19:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'CD 7/5/2021 17:19:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'CD 7/5/2021 17:19:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'CD 7/5/2021 17:19:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'CD 7/5/2021 17:19:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'CD 7/5/2021 17:19:47'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInválida stamp: 'CD 7/5/2021 17:19:47'!
PASSED!

TestCase subclass: #TrucoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #TrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'CD 7/5/2021 17:26:12'!
TestCase subclass: #TrucoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'CD 7/5/2021 17:36:40'!
TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classRemoval: #TrucoTest stamp: 'CD 7/5/2021 17:36:44'!
TestCase subclass: #TrucoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'CD 7/5/2021 17:44:20'!
Object subclass: #RondaDeTruco
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'nil' stamp: 'CD 7/5/2021 17:44:07'!
test01SeArmaUnaRondaSinEmpezar

	| cartasMano cartasPie ronda |
	ronda := RondaDeTruco conMano: 'mano' pie: 'pie' cartasMano: cartasMano cartasPie: cartasPie.
	
	self assert: false equals: ronda hayGanador.

	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'CD 7/5/2021 17:47:22' prior: 50860023!
test01SeArmaUnaRondaSinEmpezar

	| cartasMano cartasPie ronda |
	cartasMano := (CartaDeTruco sieteDeOro, CartaDeTruco sieteDeEspada, CartaDeTruco anchoDeBasto ).
	cartasPie := ((CartaDeTruco espadaCon: 2),( CartaDeTruco espadaCon: 3), CartaDeTruco anchoDeEspada).
	ronda := RondaDeTruco conMano: 'mano' pie: 'pie' cartasMano: cartasMano cartasPie: cartasPie.
	
	self assert: false equals: ronda hayGanador.

	! !

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 17:47:39'!
ERROR!

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 17:47:39'!
ERROR!

----End fileIn of /home/caro/Downloads/linux64 (1)/Packages/TerseGuide.pck.st----!
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 17:50:03' prior: 50860033!
test01SeArmaUnaRondaSinEmpezar

	| cartasMano cartasPie ronda |
	cartasMano := OrderedCollection with: (CartaDeTruco sieteDeOro) with: (CartaDeTruco sieteDeEspada) with: (CartaDeTruco anchoDeBasto).
	cartasPie := OrderedCollection with: (CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3) with: (CartaDeTruco anchoDeBasto).
	ronda := RondaDeTruco conMano: 'mano' pie: 'pie' cartasMano: cartasMano cartasPie: cartasPie.
	
	self assert: false equals: ronda hayGanador.

	! !

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 17:50:06'!
ERROR!

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 17:50:06'!
ERROR!
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'CD 7/5/2021 17:50:28'!
conMano: aString pie: aString2 cartasMano: anOrderedCollection cartasPie: anOrderedCollection4 
	self shouldBeImplemented.! !
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 17:52:56' prior: 50862980!
test01SeArmaUnaRondaSinEmpezar

	| cartasMano cartasPie ronda |
	cartasMano := OrderedCollection with: (CartaDeTruco sieteDeOro) with: (CartaDeTruco sieteDeEspada) with: (CartaDeTruco anchoDeBasto).
	cartasPie := OrderedCollection with: (CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3) with: (CartaDeTruco anchoDeBasto).
	ronda := RondaDeTruco cartasMano: cartasMano cartasPie: cartasPie.
	
	self assert: false equals: ronda hayGanador.

	! !
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 17:53:09' prior: 50863011!
test01SeArmaUnaRondaSinEmpezar

	| cartasMano cartasPie ronda |
	
	cartasMano := OrderedCollection with: (CartaDeTruco sieteDeOro) with: (CartaDeTruco sieteDeEspada) with: (CartaDeTruco anchoDeBasto).
	cartasPie := OrderedCollection with: (CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3) with: (CartaDeTruco anchoDeBasto).
	ronda := RondaDeTruco cartasMano: cartasMano cartasPie: cartasPie.
	
	self assert: false equals: ronda hayGanador.

	! !

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 17:53:11'!
ERROR!

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 17:53:11'!
ERROR!
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'CD 7/5/2021 17:53:19'!
cartasMano: anOrderedCollection cartasPie: anOrderedCollection2 
	self shouldBeImplemented.! !

!classDefinition: 'RondaDeTruco class' category: 'ISW1-2021-1C-2doParcial' stamp: 'CD 7/5/2021 17:54:14'!
RondaDeTruco class
	instanceVariableNames: 'cartasMano'!

!classDefinition: 'RondaDeTruco class' category: 'ISW1-2021-1C-2doParcial' stamp: 'CD 7/5/2021 17:54:15'!
RondaDeTruco class
	instanceVariableNames: 'cartasMano cartasPie'!
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'CD 7/5/2021 17:54:11' prior: 50863051!
cartasMano: cartasDeMano cartasPie: cartasDePie 
	cartasMano := cartasDeMano.
	cartasPie := cartasDePie.! !

!methodRemoval: RondaDeTruco class #conMano:pie:cartasMano:cartasPie: stamp: 'CD 7/5/2021 17:54:34'!
conMano: aString pie: aString2 cartasMano: anOrderedCollection cartasPie: anOrderedCollection4 
	self shouldBeImplemented.!
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'CD 7/5/2021 17:54:51' prior: 50863068!
cartasMano: cartasDeMano cartasPie: cartasDePie 
	cartasMano := cartasDeMano.
	cartasPie := cartasDePie.! !

!methodRemoval: RondaDeTruco class #cartasMano:cartasPie: stamp: 'CD 7/5/2021 17:55:01'!
cartasMano: cartasDeMano cartasPie: cartasDePie 
	cartasMano := cartasDeMano.
	cartasPie := cartasDePie.!

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 17:55:31'!
ERROR!

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 17:55:31'!
ERROR!
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'CD 7/5/2021 17:55:39'!
cartasMano: anOrderedCollection cartasPie: anOrderedCollection2 
	self shouldBeImplemented.! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'CD 7/5/2021 17:56:03' prior: 50863101!
cartasMano: cartasDeMano cartasPie: cartasDePie 
	self new cartasMano: cartasDeMano cartasPie: cartasDePie.! !

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 17:56:34'!
ERROR!

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 17:56:34'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'CD 7/5/2021 17:56:45'!
cartasMano: anOrderedCollection cartasPie: anOrderedCollection2 
	self shouldBeImplemented.! !

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'CD 7/5/2021 17:57:22'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasMano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'CD 7/5/2021 17:57:24'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasMano cartasPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'CD 7/5/2021 17:57:19' prior: 50863121!
cartasMano: cartasDeMano cartasPie: cartasDePie 
	cartasMano := cartasDeMano.
	cartasPie := cartasDePie.! !

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 17:57:30'!
ERROR!

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 17:57:30'!
ERROR!
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'CD 7/5/2021 17:57:57'!
hayGanador
	self shouldBeImplemented.! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'CD 7/5/2021 17:58:12' prior: 50863156!
hayGanador
	^ false.! !

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 17:58:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 17:58:19'!
PASSED!
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 18:01:00'!
test02SeJuegaPrimerEnfrentamientoEmpezandoMano

	! !
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 18:05:02' prior: 50863171!
test02SeJuegaPrimerEnfrentamientoEmpezandoMano

	| cartasMano cartasPie ronda cartaPrimerJugador cartaSegundoJugador |
	
	cartasMano := OrderedCollection with: (CartaDeTruco sieteDeOro) with: (CartaDeTruco sieteDeEspada) with: (CartaDeTruco anchoDeBasto).
	cartasPie := OrderedCollection with: (CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3) with: (CartaDeTruco anchoDeBasto).
	ronda := RondaDeTruco cartasMano: cartasMano cartasPie: cartasPie.
	
	ronda enfrentamientoCon: cartaPrimerJugador y: cartaSegundoJugador
	
	self assert: 1 equals: (ronda enfrentamientosJugados).
	self assert: false equals: (ronda hayGanador).


	! !
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 18:11:34' prior: 50863176!
test02SeJuegaPrimerEnfrentamientoEmpezandoMano

	| cartasMano cartasPie ronda cartaEnfrentamientoMano cartaEnfrentamientoPie |
	
	cartasMano := OrderedCollection with: (CartaDeTruco sieteDeOro) with: (CartaDeTruco sieteDeEspada) with: (CartaDeTruco anchoDeBasto).
	cartasPie := OrderedCollection with: (CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3) with: (CartaDeTruco anchoDeBasto).
	ronda := RondaDeTruco cartasMano: cartasMano cartasPie: cartasPie.
	cartaEnfrentamientoMano := cartasMano first.
	cartaEnfrentamientoPie := cartasPie first.
	
	ronda enfrentamientoManoCon: cartaEnfrentamientoMano pieCon: cartaEnfrentamientoPie.
	
	self assert: 1 equals: (ronda enfrentamientosJugados).
	self assert: (RondaDeTruco mano) equals: ronda turnoUltimoEnfrentamiento. 
	self assert: false equals: (ronda hayGanador).

	! !

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 18:11:43'!
ERROR!

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 18:11:43'!
ERROR!
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'CD 7/5/2021 18:11:50'!
enfrentamientoManoCon: aCartaDeTruco pieCon: aCartaDeTruco2 
	self shouldBeImplemented.! !

!classDefinition: 'RondaDeTruco class' category: 'ISW1-2021-1C-2doParcial' stamp: 'CD 7/5/2021 18:14:46'!
RondaDeTruco class
	instanceVariableNames: 'cartasPie cartasMano historialEnfrentamientos'!

!classDefinition: #Enfrentamiento category: 'ISW1-2021-1C-2doParcial' stamp: 'CD 7/5/2021 18:15:04'!
Object subclass: #Enfrentamiento
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'CD 7/5/2021 18:14:59' prior: 50863235!
enfrentamientoManoCon: cartaDeTrucoMano pieCon: cartaDeTrucoPie 
	historialEnfrentamientos add: (Enfrentamiento cartaMano: cartaDeTrucoMano cartaPie: cartaDeTrucoPie).
	! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'CD 7/5/2021 18:15:47' prior: 50863255!
enfrentamientoManoCon: cartaDeTrucoMano pieCon: cartaDeTrucoPie 
	historialEnfrentamientos add: (Enfrentamiento cartaMano: cartaDeTrucoMano cartaPie: cartaDeTrucoPie).
	cartasMano remove: cartaDeTrucoMano.
	cartasPie remove: cartaDeTrucoPie.
	! !

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 18:16:30'!
ERROR!

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 18:16:30'!
ERROR!

RondaDeTruco class
	instanceVariableNames: 'cartasPie cartasMano'!

!classDefinition: 'RondaDeTruco class' category: 'ISW1-2021-1C-2doParcial' stamp: 'CD 7/5/2021 18:21:34'!
RondaDeTruco class
	instanceVariableNames: 'cartasPie cartasMano'!

Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasMano cartasPie  historialEnfrentamientos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'CD 7/5/2021 18:21:38'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasMano cartasPie historialEnfrentamientos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'initializers' stamp: 'CD 7/5/2021 18:22:40' prior: 50863143!
cartasMano: cartasDeMano cartasPie: cartasDePie 
	cartasMano := cartasDeMano.
	cartasPie := cartasDePie.
	historialEnfrentamientos := OrderedCollection new.! !

!methodRemoval: RondaDeTruco class #enfrentamientoManoCon:pieCon: stamp: 'CD 7/5/2021 18:22:57'!
enfrentamientoManoCon: cartaDeTrucoMano pieCon: cartaDeTrucoPie 
	historialEnfrentamientos add: (Enfrentamiento cartaMano: cartaDeTrucoMano cartaPie: cartaDeTrucoPie).
	cartasMano remove: cartaDeTrucoMano.
	cartasPie remove: cartaDeTrucoPie.
	!
!RondaDeTruco methodsFor: 'nil' stamp: 'CD 7/5/2021 18:23:18'!
enfrentamientoManoCon: cartaDeTrucoMano pieCon: cartaDeTrucoPie 
	historialEnfrentamientos add: (Enfrentamiento cartaMano: cartaDeTrucoMano cartaPie: cartaDeTrucoPie).
	cartasMano remove: cartaDeTrucoMano.
	cartasPie remove: cartaDeTrucoPie.
	! !

!methodRemoval: RondaDeTruco class #hayGanador stamp: 'CD 7/5/2021 18:23:39'!
hayGanador
	^ false.!
!RondaDeTruco methodsFor: 'nil' stamp: 'CD 7/5/2021 18:23:52'!
hayGanador
	^ false.! !

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 18:24:16'!
ERROR!

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 18:24:16'!
ERROR!
!RondaDeTruco class methodsFor: 'initializers' stamp: 'CD 7/5/2021 18:24:35' prior: 50863108!
cartasMano: cartasDeMano cartasPie: cartasDePie 
	^ self new cartasMano: cartasDeMano cartasPie: cartasDePie.! !

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 18:24:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 18:25:20'!
ERROR!

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 18:25:20'!
ERROR!
!Enfrentamiento class methodsFor: 'as yet unclassified' stamp: 'CD 7/5/2021 18:25:44'!
cartaMano: aCartaDeTruco cartaPie: aCartaDeTruco2 
	self shouldBeImplemented.! !
!Enfrentamiento class methodsFor: 'as yet unclassified' stamp: 'CD 7/5/2021 18:28:17'!
cartaMano: cartaDeMano cartaPie: cartaDePie enRonda: ronda
! !

!methodRemoval: Enfrentamiento class #cartaMano:cartaPie: stamp: 'CD 7/5/2021 18:28:21'!
cartaMano: aCartaDeTruco cartaPie: aCartaDeTruco2 
	self shouldBeImplemented.!
!RondaDeTruco methodsFor: 'enfrentamiento' stamp: 'CD 7/5/2021 18:28:46' prior: 50863323!
enfrentamientoManoCon: cartaDeTrucoMano pieCon: cartaDeTrucoPie 
	historialEnfrentamientos add: (Enfrentamiento cartaMano: cartaDeTrucoMano cartaPie: cartaDeTrucoPie enRonda: self).
	cartasMano remove: cartaDeTrucoMano.
	cartasPie remove: cartaDeTrucoPie.
	! !

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 18:31:18'!
ERROR!

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 18:31:18'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'CD 7/5/2021 18:31:26'!
enfrentamientosJugados
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'CD 7/5/2021 18:31:39' prior: 50863398!
enfrentamientosJugados
	^ historialEnfrentamientos size.! !

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 18:31:43'!
ERROR!

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 18:31:43'!
ERROR!
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'CD 7/5/2021 18:31:59'!
mano
	self shouldBeImplemented.! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'CD 7/5/2021 18:32:09' prior: 50863415!
mano
	^ 'mano'.! !
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 18:32:54' prior: 50863199!
test02SeJuegaPrimerEnfrentamientoEmpezandoMano

	| cartasMano cartasPie ronda cartaEnfrentamientoMano cartaEnfrentamientoPie |
	
	cartasMano := OrderedCollection with: (CartaDeTruco sieteDeOro) with: (CartaDeTruco sieteDeEspada) with: (CartaDeTruco anchoDeBasto).
	cartasPie := OrderedCollection with: (CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3) with: (CartaDeTruco anchoDeBasto).
	ronda := RondaDeTruco cartasMano: cartasMano cartasPie: cartasPie.
	cartaEnfrentamientoMano := cartasMano first.
	cartaEnfrentamientoPie := cartasPie first.
	
	ronda enfrentamientoManoCon: cartaEnfrentamientoMano pieCon: cartaEnfrentamientoPie.
	
	self assert: 1 equals: (ronda enfrentamientosJugados).
	self assert: (RondaDeTruco mano) equals: ronda quienEmpezoUltimoEnfrentamiento. 
	self assert: false equals: (ronda hayGanador).

	! !

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 18:33:01'!
ERROR!

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 18:33:01'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'CD 7/5/2021 18:33:08'!
quienEmpezoUltimoEnfrentamiento
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'CD 7/5/2021 18:33:33' prior: 50863460!
quienEmpezoUltimoEnfrentamiento
	^ (historialEnfrentamientos last) turno.! !
!Enfrentamiento class methodsFor: 'as yet unclassified' stamp: 'CD 7/5/2021 18:34:17' prior: 50863369!
cartaMano: cartaDeMano cartaPie: cartaDePie enRonda: ronda

	^ self new cartaMano: cartaDeMano cartaPie: cartaDePie enRonda: ronda.
! !

!classDefinition: #Enfrentamiento category: 'ISW1-2021-1C-2doParcial' stamp: 'CD 7/5/2021 18:37:06'!
Object subclass: #Enfrentamiento
	instanceVariableNames: 'cartaMano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Enfrentamiento category: 'ISW1-2021-1C-2doParcial' stamp: 'CD 7/5/2021 18:37:07'!
Object subclass: #Enfrentamiento
	instanceVariableNames: 'cartaMano cartaPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Enfrentamiento methodsFor: 'initializers' stamp: 'CD 7/5/2021 18:37:03'!
cartaMano: cartaDeMano cartaPie: cartaDePie

	cartaMano := cartaDeMano.
	cartaPie := cartaDePie.! !
!Enfrentamiento class methodsFor: 'initializers' stamp: 'CD 7/5/2021 18:37:41' prior: 50863471!
cartaMano: cartaDeMano cartaPie: cartaDePie enRonda: ronda

	^ self new cartaMano: cartaDeMano cartaPie: cartaDePie.
! !
!Enfrentamiento class methodsFor: 'initializers' stamp: 'CD 7/5/2021 18:38:23'!
cartaMano: cartaDeMano cartaPie: cartaDePie 

	^ self new cartaMano: cartaDeMano cartaPie: cartaDePie.
! !

!methodRemoval: Enfrentamiento class #cartaMano:cartaPie:enRonda: stamp: 'CD 7/5/2021 18:38:23'!
cartaMano: cartaDeMano cartaPie: cartaDePie enRonda: ronda

	^ self new cartaMano: cartaDeMano cartaPie: cartaDePie.
!

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 18:38:52'!
PASSED!

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 18:38:55'!
ERROR!

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 18:38:55'!
ERROR!
!RondaDeTruco methodsFor: 'enfrentamiento' stamp: 'CD 7/5/2021 18:39:09' prior: 50863380!
enfrentamientoManoCon: cartaDeTrucoMano pieCon: cartaDeTrucoPie 
	historialEnfrentamientos add: (Enfrentamiento cartaMano: cartaDeTrucoMano cartaPie: cartaDeTrucoPie).
	cartasMano remove: cartaDeTrucoMano.
	cartasPie remove: cartaDeTrucoPie.
	! !

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 18:39:15'!
ERROR!

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 18:39:28'!
ERROR!

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 18:39:28'!
ERROR!
!RondaDeTruco methodsFor: 'testing' stamp: 'CD 7/5/2021 18:39:59' prior: 50863465!
quienEmpezoUltimoEnfrentamiento
	^ RondaDeTruco mano.! !

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 18:40:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 18:40:02'!
PASSED!
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 18:41:56'!
test02SeJuegaSegundoEnfrentamientoEmpezandoQuienGanoElAnterior

	| cartasMano cartasPie ronda cartaEnfrentamientoMano cartaEnfrentamientoPie |
	
	cartasMano := OrderedCollection with: (CartaDeTruco sieteDeOro) with: (CartaDeTruco sieteDeEspada) with: (CartaDeTruco anchoDeBasto).
	cartasPie := OrderedCollection with: (CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3) with: (CartaDeTruco anchoDeBasto).
	ronda := RondaDeTruco cartasMano: cartasMano cartasPie: cartasPie.
	cartaEnfrentamientoMano := cartasMano first.
	cartaEnfrentamientoPie := cartasPie first.
	
	ronda enfrentamientoManoCon: cartaEnfrentamientoMano pieCon: cartaEnfrentamientoPie.
	
	self assert: 1 equals: (ronda enfrentamientosJugados).
	self assert: (RondaDeTruco mano) equals: ronda quienEmpezoUltimoEnfrentamiento. 
	self assert: false equals: (ronda hayGanador).

	! !
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 18:42:07'!
test03SeJuegaSegundoEnfrentamientoEmpezandoQuienGanoElAnterior

	| cartasMano cartasPie ronda cartaEnfrentamientoMano cartaEnfrentamientoPie |
	
	cartasMano := OrderedCollection with: (CartaDeTruco sieteDeOro) with: (CartaDeTruco sieteDeEspada) with: (CartaDeTruco anchoDeBasto).
	cartasPie := OrderedCollection with: (CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3) with: (CartaDeTruco anchoDeBasto).
	ronda := RondaDeTruco cartasMano: cartasMano cartasPie: cartasPie.
	cartaEnfrentamientoMano := cartasMano first.
	cartaEnfrentamientoPie := cartasPie first.
	
	ronda enfrentamientoManoCon: cartaEnfrentamientoMano pieCon: cartaEnfrentamientoPie.
	
	self assert: 1 equals: (ronda enfrentamientosJugados).
	self assert: (RondaDeTruco mano) equals: ronda quienEmpezoUltimoEnfrentamiento. 
	self assert: false equals: (ronda hayGanador).

	! !

!methodRemoval: RondaDeTrucoTest #test02SeJuegaSegundoEnfrentamientoEmpezandoQuienGanoElAnterior stamp: 'CD 7/5/2021 18:42:07'!
test02SeJuegaSegundoEnfrentamientoEmpezandoQuienGanoElAnterior

	| cartasMano cartasPie ronda cartaEnfrentamientoMano cartaEnfrentamientoPie |
	
	cartasMano := OrderedCollection with: (CartaDeTruco sieteDeOro) with: (CartaDeTruco sieteDeEspada) with: (CartaDeTruco anchoDeBasto).
	cartasPie := OrderedCollection with: (CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3) with: (CartaDeTruco anchoDeBasto).
	ronda := RondaDeTruco cartasMano: cartasMano cartasPie: cartasPie.
	cartaEnfrentamientoMano := cartasMano first.
	cartaEnfrentamientoPie := cartasPie first.
	
	ronda enfrentamientoManoCon: cartaEnfrentamientoMano pieCon: cartaEnfrentamientoPie.
	
	self assert: 1 equals: (ronda enfrentamientosJugados).
	self assert: (RondaDeTruco mano) equals: ronda quienEmpezoUltimoEnfrentamiento. 
	self assert: false equals: (ronda hayGanador).

	!
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 18:42:24'!
test03SeJuegaSegundoEnfrentamientoHabiendoEmpateEnPrimero

	| cartasMano cartasPie ronda cartaEnfrentamientoMano cartaEnfrentamientoPie |
	
	cartasMano := OrderedCollection with: (CartaDeTruco sieteDeOro) with: (CartaDeTruco sieteDeEspada) with: (CartaDeTruco anchoDeBasto).
	cartasPie := OrderedCollection with: (CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3) with: (CartaDeTruco anchoDeBasto).
	ronda := RondaDeTruco cartasMano: cartasMano cartasPie: cartasPie.
	cartaEnfrentamientoMano := cartasMano first.
	cartaEnfrentamientoPie := cartasPie first.
	
	ronda enfrentamientoManoCon: cartaEnfrentamientoMano pieCon: cartaEnfrentamientoPie.
	
	self assert: 1 equals: (ronda enfrentamientosJugados).
	self assert: (RondaDeTruco mano) equals: ronda quienEmpezoUltimoEnfrentamiento. 
	self assert: false equals: (ronda hayGanador).

	! !

!methodRemoval: RondaDeTrucoTest #test03SeJuegaSegundoEnfrentamientoEmpezandoQuienGanoElAnterior stamp: 'CD 7/5/2021 18:42:28'!
test03SeJuegaSegundoEnfrentamientoEmpezandoQuienGanoElAnterior

	| cartasMano cartasPie ronda cartaEnfrentamientoMano cartaEnfrentamientoPie |
	
	cartasMano := OrderedCollection with: (CartaDeTruco sieteDeOro) with: (CartaDeTruco sieteDeEspada) with: (CartaDeTruco anchoDeBasto).
	cartasPie := OrderedCollection with: (CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3) with: (CartaDeTruco anchoDeBasto).
	ronda := RondaDeTruco cartasMano: cartasMano cartasPie: cartasPie.
	cartaEnfrentamientoMano := cartasMano first.
	cartaEnfrentamientoPie := cartasPie first.
	
	ronda enfrentamientoManoCon: cartaEnfrentamientoMano pieCon: cartaEnfrentamientoPie.
	
	self assert: 1 equals: (ronda enfrentamientosJugados).
	self assert: (RondaDeTruco mano) equals: ronda quienEmpezoUltimoEnfrentamiento. 
	self assert: false equals: (ronda hayGanador).

	!
!RondaDeTrucoTest methodsFor: 'auxiliares - tests' stamp: 'CD 7/5/2021 18:44:28'!
rondaConPrimerEnfrentamientoEmpatado! !
!RondaDeTrucoTest methodsFor: 'auxiliares - tests' stamp: 'CD 7/5/2021 18:44:58' prior: 50863714!
rondaConPrimerEnfrentamientoEmpatado

	| cartaEnfrentamientoMano cartaEnfrentamientoPie cartasMano cartasPie ronda |
	cartasMano := OrderedCollection with: (CartaDeTruco sieteDeOro) with: (CartaDeTruco sieteDeEspada) with: (CartaDeTruco anchoDeBasto).
	cartasPie := OrderedCollection with: (CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3) with: (CartaDeTruco anchoDeBasto).
	ronda := RondaDeTruco cartasMano: cartasMano cartasPie: cartasPie.
	cartaEnfrentamientoMano := cartasMano first.
	cartaEnfrentamientoPie := cartasPie first.
	
	ronda enfrentamientoManoCon: cartaEnfrentamientoMano pieCon: cartaEnfrentamientoPie.! !
!RondaDeTrucoTest methodsFor: 'auxiliares - tests' stamp: 'CD 7/5/2021 18:46:15' prior: 50863719!
rondaConPrimerEnfrentamientoEmpatado

	| cartaEnfrentamientoMano cartaEnfrentamientoPie cartasMano cartasPie ronda |
	cartasMano := OrderedCollection with: (CartaDeTruco sieteDeOro) with: (CartaDeTruco espadaCon: 2) with: (CartaDeTruco anchoDeBasto).
	cartasPie := OrderedCollection with: (CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3) with: (CartaDeTruco anchoDeBasto).
	ronda := RondaDeTruco cartasMano: cartasMano cartasPie: cartasPie.
	cartaEnfrentamientoMano := cartasMano second.
	cartaEnfrentamientoPie := cartasPie first.

	ronda enfrentamientoManoCon: cartaEnfrentamientoMano pieCon: cartaEnfrentamientoPie.
	
	^ ronda.! !
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 18:47:21' prior: 50863654!
test03SeJuegaSegundoEnfrentamientoHabiendoEmpateEnPrimero

	| ronda  |
	ronda := self rondaConPrimerEnfrentamientoEmpatado 
	
	self assert: 1 equals: (ronda enfrentamientosJugados).
	self assert: (RondaDeTruco mano) equals: ronda quienEmpezoUltimoEnfrentamiento. 
	self assert: false equals: (ronda hayGanador).

	! !
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 18:47:29' prior: 50863765!
test03SeJuegaSegundoEnfrentamientoHabiendoEmpateEnPrimero

	| ronda  |
	ronda := self rondaConPrimerEnfrentamientoEmpatado.
	
	self assert: 1 equals: (ronda enfrentamientosJugados).
	self assert: (RondaDeTruco mano) equals: ronda quienEmpezoUltimoEnfrentamiento. 
	self assert: false equals: (ronda hayGanador).

	! !

!classDefinition: #RondaDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'CD 7/5/2021 18:48:22'!
TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: 'cartasDeMano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'CD 7/5/2021 18:48:23'!
TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: 'cartasDeMano cartasDePie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'setUp' stamp: 'CD 7/5/2021 18:48:20' overrides: 16927572!
setUp

	cartasDeMano := ''.
	cartasDePie := ''.! !
!RondaDeTrucoTest methodsFor: 'setUp' stamp: 'CD 7/5/2021 18:49:25' prior: 50863808 overrides: 16927572!
setUp
	
	cartasDeMano := OrderedCollection with: (CartaDeTruco sieteDeOro) with: (CartaDeTruco espadaCon: 2) with: (CartaDeTruco anchoDeBasto).
	cartasDePie := OrderedCollection with: (CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3) with: (CartaDeTruco anchoDeBasto).
	! !
!RondaDeTrucoTest methodsFor: 'auxiliares - tests' stamp: 'CD 7/5/2021 18:50:55' prior: 50863742!
rondaConPrimerEnfrentamientoEmpatado

	| cartaEnfrentamientoMano cartaEnfrentamientoPie ronda |
	
	ronda := RondaDeTruco cartasMano: cartasDeMano cartasPie: cartasDePie.
	cartaEnfrentamientoMano := cartasDeMano second.
	cartaEnfrentamientoPie := cartasDePie first.

	ronda enfrentamientoManoCon: cartaEnfrentamientoMano pieCon: cartaEnfrentamientoPie.
	
	^ ronda.! !

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 18:51:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 18:51:03'!
PASSED!
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 18:52:47' prior: 50863778!
test03SeJuegaSegundoEnfrentamientoHabiendoEmpateEnPrimero

	| ronda  |
	ronda := self rondaConPrimerEnfrentamientoEmpatado.
	
	ronda enfrentamientoManoCon: (cartasDeMano first) pieCon: (cartasDePie second).
	
	self assert: 2 equals: (ronda enfrentamientosJugados).
	self assert: (RondaDeTruco mano) equals: ronda quienEmpezoUltimoEnfrentamiento. 

	! !

!testRun: #RondaDeTrucoTest #test03SeJuegaSegundoEnfrentamientoHabiendoEmpateEnPrimero stamp: 'CD 7/5/2021 18:52:54'!
PASSED!
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 18:53:29'!
test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior

	| ronda  |
	ronda := self rondaConPrimerEnfrentamientoEmpatado.
	
	ronda enfrentamientoManoCon: (cartasDeMano first) pieCon: (cartasDePie second).
	
	self assert: 2 equals: (ronda enfrentamientosJugados).
	self assert: (RondaDeTruco pie) equals: ronda quienEmpezoUltimoEnfrentamiento. 

	! !

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 18:53:33'!
ERROR!

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 18:53:33'!
ERROR!
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'CD 7/5/2021 18:53:42'!
pie
	self shouldBeImplemented.! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'CD 7/5/2021 18:53:50' prior: 50863886!
pie
	^ 'pie'.! !

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 18:53:55'!
FAILURE!

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 18:53:55'!
FAILURE!
!RondaDeTruco methodsFor: 'testing' stamp: 'CD 7/5/2021 18:56:56' prior: 50863554!
quienEmpezoUltimoEnfrentamiento
	^ (historialEnfrentamientos last) turno.! !

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'CD 7/5/2021 18:57:37'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasMano cartasPie historialEnfrentamientos turno'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'testing' stamp: 'CD 7/5/2021 18:57:35' prior: 50863903!
quienEmpezoUltimoEnfrentamiento
	^ turno.! !
!RondaDeTruco methodsFor: 'initializers' stamp: 'CD 7/5/2021 18:57:56' prior: 50863305!
cartasMano: cartasDeMano cartasPie: cartasDePie 
	cartasMano := cartasDeMano.
	cartasPie := cartasDePie.
	historialEnfrentamientos := OrderedCollection new.
	turno := ''.! !
!RondaDeTruco methodsFor: 'enfrentamiento' stamp: 'CD 7/5/2021 18:59:36' prior: 50863532!
enfrentamientoManoCon: cartaDeTrucoMano pieCon: cartaDeTrucoPie 
	historialEnfrentamientos add: (Enfrentamiento cartaMano: cartaDeTrucoMano cartaPie: cartaDeTrucoPie).
	turno := self quienLeTocaEmpezar.
	cartasMano remove: cartaDeTrucoMano.
	cartasPie remove: cartaDeTrucoPie.
	! !
!RondaDeTruco methodsFor: 'turno' stamp: 'CD 7/5/2021 19:04:06'!
quienLeTocaEmpezar

	| jugador |
	jugador := (self juegoNoEmpezo or: [self huboEmpate]) ifTrue: [RondaDeTruco mano] ifFalse: [self ultimoGanador].! !
!RondaDeTruco methodsFor: 'turno' stamp: 'CD 7/5/2021 19:04:34' prior: 50863943!
quienLeTocaEmpezar

	^ (self juegoNoEmpezo or: [self huboEmpate]) ifTrue: [RondaDeTruco mano] ifFalse: [self ultimoGanador].! !

----SNAPSHOT----(5 July 2021 19:04:46) CuisUniversity-4532.image priorSource: 16885703!
!RondaDeTruco methodsFor: 'turno' stamp: 'CD 7/5/2021 19:05:33'!
juegoNoEmpezo

	^ historialEnfrentamientos isEmpty.! !
!RondaDeTruco methodsFor: 'turno' stamp: 'CD 7/5/2021 19:06:03' prior: 50863951!
quienLeTocaEmpezar

	^ (self juegoNoEmpezo or: [self huboEmpateEnUltimoEnfrentamiento]) ifTrue: [RondaDeTruco mano] ifFalse: [self ultimoGanador].! !
!RondaDeTruco methodsFor: 'enfrentamiento' stamp: 'CD 7/5/2021 19:06:37'!
huboEmpateEnUltimoEnfrentamiento

	^ (historialEnfrentamientos last) hayEmpate.! !
!Enfrentamiento methodsFor: 'resultado' stamp: 'CD 7/5/2021 19:07:38'!
hayEmpate

	^ cartaMano empardaCon: cartaPie.! !
!RondaDeTruco methodsFor: 'turno' stamp: 'CD 7/5/2021 19:08:11' prior: 50863965!
quienLeTocaEmpezar

	^ (self juegoNoEmpezo or: [self huboEmpateEnUltimoEnfrentamiento]) ifTrue: [RondaDeTruco mano] ifFalse: [self ultimoGanadorEnUltimoEnfrentamiento].! !
!RondaDeTruco methodsFor: 'turno' stamp: 'CD 7/5/2021 19:08:26' prior: 50863982!
quienLeTocaEmpezar

	^ (self juegoNoEmpezo or: [self huboEmpateEnUltimoEnfrentamiento]) ifTrue: [RondaDeTruco mano] ifFalse: [self ganadorEnUltimoEnfrentamiento].! !
!RondaDeTruco methodsFor: 'enfrentamiento' stamp: 'CD 7/5/2021 19:08:50'!
ganadorEnUltimoEnfrentamiento

	^ (historialEnfrentamientos last) ganador.! !
!Enfrentamiento methodsFor: 'resultado' stamp: 'CD 7/5/2021 19:11:01'!
ganador

	^ (cartaMano mataA: cartaPie) ifFalse: [RondaDeTruco pie] ifTrue: [RondaDeTruco mano]! !

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 19:11:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 19:11:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test03SeJuegaSegundoEnfrentamientoHabiendoEmpateEnPrimero stamp: 'CD 7/5/2021 19:11:33'!
FAILURE!

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 19:11:33'!
PASSED!

!testRun: #RondaDeTrucoTest #test03SeJuegaSegundoEnfrentamientoHabiendoEmpateEnPrimero stamp: 'CD 7/5/2021 19:11:33'!
FAILURE!

!testRun: #RondaDeTrucoTest #test03SeJuegaSegundoEnfrentamientoHabiendoEmpateEnPrimero stamp: 'CD 7/5/2021 19:11:41'!
FAILURE!

!testRun: #RondaDeTrucoTest #test03SeJuegaSegundoEnfrentamientoHabiendoEmpateEnPrimero stamp: 'CD 7/5/2021 19:11:41'!
FAILURE!

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 19:11:47'!
PASSED!
!RondaDeTruco methodsFor: 'testing' stamp: 'CD 7/5/2021 19:12:44' prior: 50863918!
quienEmpezoUltimoEnfrentamiento
	^ turno.! !
!RondaDeTruco methodsFor: 'enfrentamiento' stamp: 'CD 7/5/2021 19:13:47' prior: 50863932!
enfrentamientoManoCon: cartaDeTrucoMano pieCon: cartaDeTrucoPie
	turno := self quienLeTocaEmpezar. 
	historialEnfrentamientos add: (Enfrentamiento cartaMano: cartaDeTrucoMano cartaPie: cartaDeTrucoPie).
	cartasMano remove: cartaDeTrucoMano.
	cartasPie remove: cartaDeTrucoPie.
	! !

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 19:13:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 19:13:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test03SeJuegaSegundoEnfrentamientoHabiendoEmpateEnPrimero stamp: 'CD 7/5/2021 19:13:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 19:13:51'!
FAILURE!

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 19:13:51'!
FAILURE!

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 19:13:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 19:14:00'!
PASSED!

!testRun: #RondaDeTrucoTest #test03SeJuegaSegundoEnfrentamientoHabiendoEmpateEnPrimero stamp: 'CD 7/5/2021 19:14:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 19:14:06'!
FAILURE!

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 19:14:06'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'auxiliares - tests' stamp: 'CD 7/5/2021 19:15:25'!
rondaConPrimerEnfrentamientoGanadoPorPie

	| cartaEnfrentamientoMano cartaEnfrentamientoPie ronda |
	
	ronda := RondaDeTruco cartasMano: cartasDeMano cartasPie: cartasDePie.
	cartaEnfrentamientoMano := cartasDeMano second.
	cartaEnfrentamientoPie := cartasDePie first.

	ronda enfrentamientoManoCon: cartaEnfrentamientoMano pieCon: cartaEnfrentamientoPie.
	
	^ ronda.! !
!RondaDeTrucoTest methodsFor: 'setUp' stamp: 'CD 7/5/2021 19:15:42' prior: 50863813 overrides: 16927572!
setUp
	
	cartasDeMano := OrderedCollection with: (CartaDeTruco sieteDeOro) with: (CartaDeTruco espadaCon: 2) with: (CartaDeTruco anchoDeEspada).
	cartasDePie := OrderedCollection with: (CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3) with: (CartaDeTruco anchoDeBasto).
	! !
!RondaDeTrucoTest methodsFor: 'auxiliares - tests' stamp: 'CD 7/5/2021 19:15:59' prior: 50864095!
rondaConPrimerEnfrentamientoGanadoPorPie

	| cartaEnfrentamientoMano cartaEnfrentamientoPie ronda |
	
	ronda := RondaDeTruco cartasMano: cartasDeMano cartasPie: cartasDePie.
	cartaEnfrentamientoMano := cartasDeMano second.
	cartaEnfrentamientoPie := cartasDePie third.

	ronda enfrentamientoManoCon: cartaEnfrentamientoMano pieCon: cartaEnfrentamientoPie.
	
	^ ronda.! !

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 19:16:07'!
FAILURE!

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 19:16:07'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 19:17:51' prior: 50863864!
test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior

	| ronda  |
	ronda := self rondaConPrimerEnfrentamientoEmpatado.
	
	ronda enfrentamientoManoCon: (cartasDeMano first) pieCon: (cartasDePie first).
	
	self assert: 2 equals: (ronda enfrentamientosJugados).
	self assert: (RondaDeTruco pie) equals: ronda quienEmpezoUltimoEnfrentamiento. 

	! !
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 19:18:01' prior: 50864145!
test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior

	| ronda  |
	ronda := self rondaConPrimerEnfrentamientoGanadoPorPie.
	
	ronda enfrentamientoManoCon: (cartasDeMano first) pieCon: (cartasDePie first).
	
	self assert: 2 equals: (ronda enfrentamientosJugados).
	self assert: (RondaDeTruco pie) equals: ronda quienEmpezoUltimoEnfrentamiento. 

	! !

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 19:18:04'!
PASSED!
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 19:22:24'!
test05hayGanadorEnSegundoEnfrentamientoCuandoSeEmpataEnPrimero

	| ronda  |
	ronda := self rondaConPrimerEnfrentamientoEmpatado.
	
	ronda enfrentamientoManoCon: (cartasDeMano first) pieCon: (cartasDePie first).
	
	self assert: 2 equals: (ronda enfrentamientosJugados).
	self assert: (RondaDeTruco pie) equals: ronda quienEmpezoUltimoEnfrentamiento. 

	! !
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 19:23:23'!
test05hayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero

	| ronda  |
	ronda := self rondaConPrimerEnfrentamientoEmpatado.
	
	ronda enfrentamientoManoCon: (cartasDeMano first) pieCon: (cartasDePie first).
	
	self assert: 2 equals: (ronda enfrentamientosJugados).
	self assert: (RondaDeTruco pie) equals: ronda quienEmpezoUltimoEnfrentamiento. 

	! !
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 19:24:59' prior: 50864177!
test05hayGanadorEnSegundoEnfrentamientoCuandoSeEmpataEnPrimero

	| ronda  |
	ronda := self rondaConPrimerEnfrentamientoEmpatado.
	
	ronda enfrentamientoManoCon: (cartasDeMano third) pieCon: (cartasDePie second).
	
	self assert: 2 equals: (ronda enfrentamientosJugados).
	self assert: RondaDeTruco hayGanador. 

	! !
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 19:25:24' prior: 50864205!
test05hayGanadorEnSegundoEnfrentamientoCuandoSeEmpataEnPrimero

	| ronda  |
	ronda := self rondaConPrimerEnfrentamientoEmpatado.
	
	ronda enfrentamientoManoCon: (cartasDeMano third) pieCon: (cartasDePie second).
	
	self assert: 2 equals: (ronda enfrentamientosJugados).
	self assert: ronda hayGanador.
	self assert: ronda ganador equals: RondaDeTruco mano.

	! !
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 19:25:32' prior: 50864218!
test05hayGanadorEnSegundoEnfrentamientoCuandoSeEmpataEnPrimero

	| ronda  |
	ronda := self rondaConPrimerEnfrentamientoEmpatado.
	
	ronda enfrentamientoManoCon: (cartasDeMano third) pieCon: (cartasDePie second).
	
	self assert: 2 equals: (ronda enfrentamientosJugados).
	self assert: ronda hayGanador.
	self assert: (ronda ganador) equals: RondaDeTruco mano.

	! !
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 19:25:45' prior: 50863028!
test01SeArmaUnaRondaSinEmpezar

	| cartasMano cartasPie ronda |
	
	cartasMano := OrderedCollection with: (CartaDeTruco sieteDeOro) with: (CartaDeTruco sieteDeEspada) with: (CartaDeTruco anchoDeBasto).
	cartasPie := OrderedCollection with: (CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3) with: (CartaDeTruco anchoDeBasto).
	ronda := RondaDeTruco cartasMano: cartasMano cartasPie: cartasPie.
	
	self deny: ronda hayGanador.

	! !

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 19:25:47'!
PASSED!
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 19:26:00' prior: 50863424!
test02SeJuegaPrimerEnfrentamientoEmpezandoMano

	| cartasMano cartasPie ronda cartaEnfrentamientoMano cartaEnfrentamientoPie |
	
	cartasMano := OrderedCollection with: (CartaDeTruco sieteDeOro) with: (CartaDeTruco sieteDeEspada) with: (CartaDeTruco anchoDeBasto).
	cartasPie := OrderedCollection with: (CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3) with: (CartaDeTruco anchoDeBasto).
	ronda := RondaDeTruco cartasMano: cartasMano cartasPie: cartasPie.
	cartaEnfrentamientoMano := cartasMano first.
	cartaEnfrentamientoPie := cartasPie first.
	
	ronda enfrentamientoManoCon: cartaEnfrentamientoMano pieCon: cartaEnfrentamientoPie.
	
	self assert: 1 equals: (ronda enfrentamientosJugados).
	self assert: (RondaDeTruco mano) equals: ronda quienEmpezoUltimoEnfrentamiento. 
	self deny: (ronda hayGanador).

	! !
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 19:26:31'!
test06hayGanadorEnSegundoEnfrentamientoCuandoSeEmpataEnPrimero

	| ronda  |
	ronda := self rondaConPrimerEnfrentamientoEmpatado.
	
	ronda enfrentamientoManoCon: (cartasDeMano third) pieCon: (cartasDePie second).
	
	self assert: 2 equals: (ronda enfrentamientosJugados).
	self assert: ronda hayGanador.
	self assert: (ronda ganador) equals: RondaDeTruco mano.

	! !

!methodRemoval: RondaDeTrucoTest #test05hayGanadorEnSegundoEnfrentamientoCuandoSeEmpataEnPrimero stamp: 'CD 7/5/2021 19:26:31'!
test05hayGanadorEnSegundoEnfrentamientoCuandoSeEmpataEnPrimero

	| ronda  |
	ronda := self rondaConPrimerEnfrentamientoEmpatado.
	
	ronda enfrentamientoManoCon: (cartasDeMano third) pieCon: (cartasDePie second).
	
	self assert: 2 equals: (ronda enfrentamientosJugados).
	self assert: ronda hayGanador.
	self assert: (ronda ganador) equals: RondaDeTruco mano.

	!
!RondaDeTruco methodsFor: 'ganador' stamp: 'CD 7/5/2021 19:31:28' prior: 50863336!
hayGanador

	^ self huboMasDeUnEnfrentamientoJugado.! !
!RondaDeTruco methodsFor: 'enfrentamiento' stamp: 'CD 7/5/2021 19:31:59'!
huboMasDeUnEnfrentamientoJugado

	^ 1 < historialEnfrentamientos size.! !

!testRun: #RondaDeTrucoTest #test06hayGanadorEnSegundoEnfrentamientoCuandoSeEmpataEnPrimero stamp: 'CD 7/5/2021 19:32:18'!
ERROR!

!testRun: #RondaDeTrucoTest #test06hayGanadorEnSegundoEnfrentamientoCuandoSeEmpataEnPrimero stamp: 'CD 7/5/2021 19:32:18'!
ERROR!

!classDefinition: #RondaDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'CD 7/5/2021 19:36:05'!
TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: 'cartasDeMano cartasDePie sieteDeOro'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'CD 7/5/2021 19:36:06'!
TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: 'cartasDeMano cartasDePie sieteDeOro dosDeEspada'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'CD 7/5/2021 19:36:07'!
TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: 'cartasDeMano cartasDePie sieteDeOro dosDeEspada anchoDeEspada'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'CD 7/5/2021 19:36:08'!
TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: 'cartasDeMano cartasDePie sieteDeOro dosDeEspada anchoDeEspada dosDeOro'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'CD 7/5/2021 19:36:08'!
TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: 'cartasDeMano cartasDePie sieteDeOro dosDeEspada anchoDeEspada dosDeOro tresDeOro'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'CD 7/5/2021 19:36:10'!
TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: 'cartasDeMano cartasDePie sieteDeOro dosDeEspada anchoDeEspada dosDeOro tresDeOro anchoDeBasto'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'setUp' stamp: 'CD 7/5/2021 19:36:03' prior: 50864110 overrides: 16927572!
setUp
	sieteDeOro := CartaDeTruco sieteDeOro.
	dosDeEspada := CartaDeTruco espadaCon: 2.
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	cartasDeMano := 	 OrderedCollection with: sieteDeOro with: dosDeEspada with: anchoDeEspada.
	
	dosDeOro := CartaDeTruco oroCon: 2.
	tresDeOro := CartaDeTruco oroCon: 3.
	anchoDeBasto := CartaDeTruco anchoDeBasto.
	cartasDePie := OrderedCollection with: dosDeOro with: tresDeOro with: anchoDeBasto.
	! !
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 19:36:44' prior: 50864247!
test01SeArmaUnaRondaSinEmpezar

	| cartasMano cartasPie ronda |
	
	cartasMano := cartasDeMano.
	cartasPie := cartasDePie.
	ronda := RondaDeTruco cartasMano: cartasMano cartasPie: cartasPie.
	
	self deny: ronda hayGanador.

	! !
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 19:37:28' prior: 50864421!
test01SeArmaUnaRondaSinEmpezar

	| cartasMano cartasPie ronda |
	
	cartasMano := cartasDeMano.
	cartasPie := cartasDePie.
	ronda := RondaDeTruco cartasMano: cartasMano cartasPie: cartasPie.
	
	self deny: ronda hayGanador.
	self assert: 0 equals: (ronda enfrentamientosJugados). 

	! !

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 19:37:30'!
PASSED!
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 19:38:08' prior: 50864431!
test01SeArmaUnaRondaSinEmpezar

	| ronda |
	
	ronda := RondaDeTruco cartasMano: cartasDeMano cartasPie: cartasDePie.
	
	self deny: ronda hayGanador.
	self assert: 0 equals: (ronda enfrentamientosJugados). 

	! !
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 19:38:47' prior: 50864267!
test02SeJuegaPrimerEnfrentamientoEmpezandoMano

	| cartasMano cartasPie ronda cartaEnfrentamientoMano cartaEnfrentamientoPie |
	
	cartasMano := cartasDeMano copy.
	cartasPie := cartasDePie copy.
	ronda := RondaDeTruco cartasMano: cartasMano cartasPie: cartasPie.
	cartaEnfrentamientoMano := cartasMano first.
	cartaEnfrentamientoPie := cartasPie first.
	
	ronda enfrentamientoManoCon: cartaEnfrentamientoMano pieCon: cartaEnfrentamientoPie.
	
	self assert: 1 equals: (ronda enfrentamientosJugados).
	self assert: (RondaDeTruco mano) equals: ronda quienEmpezoUltimoEnfrentamiento. 
	self deny: (ronda hayGanador).

	! !

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 19:38:50'!
PASSED!

!testRun: #RondaDeTrucoTest #test03SeJuegaSegundoEnfrentamientoHabiendoEmpateEnPrimero stamp: 'CD 7/5/2021 19:39:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 19:39:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test05hayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 19:39:10'!
FAILURE!

!testRun: #RondaDeTrucoTest #test05hayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 19:39:10'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'auxiliares - tests' stamp: 'CD 7/5/2021 19:39:37' prior: 50863825!
rondaConPrimerEnfrentamientoEmpatado

	| cartaEnfrentamientoMano cartaEnfrentamientoPie ronda |
	
	ronda := RondaDeTruco cartasMano: (cartasDeMano copy) cartasPie: (cartasDePie copy).
	cartaEnfrentamientoMano := cartasDeMano second.
	cartaEnfrentamientoPie := cartasDePie first.

	ronda enfrentamientoManoCon: cartaEnfrentamientoMano pieCon: cartaEnfrentamientoPie.
	
	^ ronda.! !
!RondaDeTrucoTest methodsFor: 'auxiliares - tests' stamp: 'CD 7/5/2021 19:39:53' prior: 50864122!
rondaConPrimerEnfrentamientoGanadoPorPie

	| cartaEnfrentamientoMano cartaEnfrentamientoPie ronda |
	
	ronda := RondaDeTruco cartasMano: (cartasDeMano copy) cartasPie: (cartasDePie copy).
	cartaEnfrentamientoMano := cartasDeMano second.
	cartaEnfrentamientoPie := cartasDePie third.

	ronda enfrentamientoManoCon: cartaEnfrentamientoMano pieCon: cartaEnfrentamientoPie.
	
	^ ronda.! !

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 19:39:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 19:39:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test03SeJuegaSegundoEnfrentamientoHabiendoEmpateEnPrimero stamp: 'CD 7/5/2021 19:39:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 19:39:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test05hayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 19:39:57'!
ERROR!

!testRun: #RondaDeTrucoTest #test06hayGanadorEnSegundoEnfrentamientoCuandoSeEmpataEnPrimero stamp: 'CD 7/5/2021 19:39:57'!
ERROR!

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 19:40:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test05hayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 19:40:54'!
ERROR!

!testRun: #RondaDeTrucoTest #test05hayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 19:40:54'!
ERROR!

!testRun: #RondaDeTrucoTest #test05hayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 19:41:16'!
ERROR!

!testRun: #RondaDeTrucoTest #test05hayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 19:41:16'!
ERROR!
!RondaDeTrucoTest methodsFor: 'auxiliares - tests' stamp: 'CD 7/5/2021 19:41:43' prior: 50864499!
rondaConPrimerEnfrentamientoEmpatado

	| cartaEnfrentamientoMano cartaEnfrentamientoPie ronda |
	
	ronda := RondaDeTruco cartasMano: (cartasDeMano copy) cartasPie: (cartasDePie copy).
	cartaEnfrentamientoMano := cartasDeMano second.
	cartaEnfrentamientoPie := cartasDePie second.

	ronda enfrentamientoManoCon: cartaEnfrentamientoMano pieCon: cartaEnfrentamientoPie.
	
	^ ronda.! !
!RondaDeTrucoTest methodsFor: 'setUp' stamp: 'CD 7/5/2021 19:41:56' prior: 50864404 overrides: 16927572!
setUp
	sieteDeOro := CartaDeTruco sieteDeOro.
	dosDeEspada := CartaDeTruco espadaCon: 2.
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	cartasDeMano := 	 OrderedCollection with: sieteDeOro with: dosDeEspada with: anchoDeEspada.
	
	dosDeOro := CartaDeTruco oroCon: 2.
	tresDeOro := CartaDeTruco bastoCon: 3.
	anchoDeBasto := CartaDeTruco anchoDeBasto.
	cartasDePie := OrderedCollection with: dosDeOro with: tresDeOro with: anchoDeBasto.
	! !
!RondaDeTrucoTest methodsFor: 'setUp' stamp: 'CD 7/5/2021 19:42:00' prior: 50864590 overrides: 16927572!
setUp
	sieteDeOro := CartaDeTruco sieteDeOro.
	dosDeEspada := CartaDeTruco espadaCon: 2.
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	cartasDeMano := 	 OrderedCollection with: sieteDeOro with: dosDeEspada with: anchoDeEspada.
	
	dosDeOro := CartaDeTruco oroCon: 2.
	tresDeOro := CartaDeTruco bastoCon: 2.
	anchoDeBasto := CartaDeTruco anchoDeBasto.
	cartasDePie := OrderedCollection with: dosDeOro with: tresDeOro with: anchoDeBasto.
	! !

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 19:42:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 19:42:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test03SeJuegaSegundoEnfrentamientoHabiendoEmpateEnPrimero stamp: 'CD 7/5/2021 19:42:07'!
ERROR!

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 19:42:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test05hayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 19:42:07'!
FAILURE!

!testRun: #RondaDeTrucoTest #test06hayGanadorEnSegundoEnfrentamientoCuandoSeEmpataEnPrimero stamp: 'CD 7/5/2021 19:42:07'!
ERROR!

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 19:42:12'!
PASSED!

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 19:42:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test03SeJuegaSegundoEnfrentamientoHabiendoEmpateEnPrimero stamp: 'CD 7/5/2021 19:42:16'!
ERROR!

!testRun: #RondaDeTrucoTest #test03SeJuegaSegundoEnfrentamientoHabiendoEmpateEnPrimero stamp: 'CD 7/5/2021 19:42:16'!
ERROR!
!RondaDeTrucoTest methodsFor: 'auxiliares - tests' stamp: 'CD 7/5/2021 19:46:50' prior: 50864574!
rondaConPrimerEnfrentamientoEmpatado

	| cartaEnfrentamientoMano cartaEnfrentamientoPie ronda |
	
	ronda := RondaDeTruco cartasMano: cartasDeMano cartasPie: cartasDePie.
	cartaEnfrentamientoMano := cartasDeMano second.
	cartaEnfrentamientoPie := cartasDePie second.

	ronda enfrentamientoManoCon: cartaEnfrentamientoMano pieCon: cartaEnfrentamientoPie.
	
	^ ronda.! !

!testRun: #RondaDeTrucoTest #test03SeJuegaSegundoEnfrentamientoHabiendoEmpateEnPrimero stamp: 'CD 7/5/2021 19:46:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 19:46:56'!
PASSED!

!testRun: #RondaDeTrucoTest #test05hayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 19:46:59'!
FAILURE!

!testRun: #RondaDeTrucoTest #test05hayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 19:46:59'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'auxiliares - tests' stamp: 'CD 7/5/2021 19:47:17' prior: 50864514!
rondaConPrimerEnfrentamientoGanadoPorPie

	| cartaEnfrentamientoMano cartaEnfrentamientoPie ronda |
	
	ronda := RondaDeTruco cartasMano: cartasDeMano cartasPie: cartasDePie.
	cartaEnfrentamientoMano := cartasDeMano second.
	cartaEnfrentamientoPie := cartasDePie third.

	ronda enfrentamientoManoCon: cartaEnfrentamientoMano pieCon: cartaEnfrentamientoPie.
	
	^ ronda.! !

!testRun: #RondaDeTrucoTest #test05hayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 19:47:22'!
FAILURE!

!testRun: #RondaDeTrucoTest #test05hayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 19:47:22'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 19:48:18' prior: 50864191!
test05hayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero

	| ronda  |
	ronda := self rondaConPrimerEnfrentamientoEmpatado.
	
	ronda enfrentamientoManoCon: (cartasDeMano first) pieCon: (cartasDePie first).
	
	self assert: 2 equals: (ronda enfrentamientosJugados).
	self assert: (RondaDeTruco pie) equals: ronda quienEmpezoUltimoEnfrentamiento. 

	! !

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 19:48:42'!
PASSED!

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 19:48:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test03SeJuegaSegundoEnfrentamientoHabiendoEmpateEnPrimero stamp: 'CD 7/5/2021 19:48:47'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 19:48:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test05hayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 19:48:51'!
FAILURE!

!testRun: #RondaDeTrucoTest #test05hayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 19:48:51'!
FAILURE!

!classDefinition: #RondaDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'CD 7/5/2021 19:50:40'!
TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: 'cartasDeMano cartasDePie sieteDeOro dosDeEspada anchoDeEspada dosDeOro tresDeOro anchoDeBasto dosDeBasto'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'setUp' stamp: 'CD 7/5/2021 19:50:38' prior: 50864608 overrides: 16927572!
setUp
	sieteDeOro := CartaDeTruco sieteDeOro.
	dosDeEspada := CartaDeTruco espadaCon: 2.
	anchoDeEspada := CartaDeTruco anchoDeEspada.
	cartasDeMano := 	 OrderedCollection with: sieteDeOro with: dosDeEspada with: anchoDeEspada.
	
	dosDeOro := CartaDeTruco oroCon: 2.
	dosDeBasto := CartaDeTruco bastoCon: 2.
	anchoDeBasto := CartaDeTruco anchoDeBasto.
	cartasDePie := OrderedCollection with: dosDeOro with: dosDeBasto with: anchoDeBasto.
	! !

TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: 'cartasDeMano cartasDePie sieteDeOro dosDeEspada anchoDeEspada tresDeOro anchoDeBasto dosDeBasto'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'CD 7/5/2021 19:50:52'!
TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: 'cartasDeMano cartasDePie sieteDeOro dosDeEspada anchoDeEspada tresDeOro anchoDeBasto dosDeBasto'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: 'cartasDeMano cartasDePie sieteDeOro dosDeEspada anchoDeEspada dosDeOro anchoDeBasto dosDeBasto'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'CD 7/5/2021 19:51:19'!
TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: 'cartasDeMano cartasDePie sieteDeOro dosDeEspada anchoDeEspada dosDeOro anchoDeBasto dosDeBasto'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 19:52:14' prior: 50864718!
test05hayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero

	| ronda  |
	ronda := self rondaConPrimerEnfrentamientoEmpatado.
	
	ronda enfrentamientoManoCon: sieteDeOro pieCon: anchoDeBasto .
	
	self assert: 2 equals: (ronda enfrentamientosJugados).
	self assert: (RondaDeTruco pie) equals: ronda quienEmpezoUltimoEnfrentamiento. 

	! !

!testRun: #RondaDeTrucoTest #test05hayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 19:52:16'!
FAILURE!

!testRun: #RondaDeTrucoTest #test05hayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 19:52:16'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 19:52:53' prior: 50864822!
test05hayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero

	| ronda  |
	ronda := self rondaConPrimerEnfrentamientoEmpatado.
	
	ronda enfrentamientoManoCon: sieteDeOro pieCon: anchoDeBasto .
	self halt.
	
	self assert: 2 equals: (ronda enfrentamientosJugados).
	self assert: (RondaDeTruco pie) equals: ronda quienEmpezoUltimoEnfrentamiento. 

	! !
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 19:54:51' prior: 50864845!
test05hayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero

	| ronda  |
	ronda := self rondaConPrimerEnfrentamientoEmpatado.
	
	ronda enfrentamientoManoCon: sieteDeOro pieCon: anchoDeBasto .
	self halt.
	
	self assert: 2 equals: (ronda enfrentamientosJugados).
	self assert: (RondaDeTruco pie) equals: ronda quienEmpezoUltimoEnfrentamiento. 

	! !
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 19:56:20' prior: 50864859!
test05hayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero

	| ronda  |
	ronda := self rondaConPrimerEnfrentamientoEmpatado.
	
	ronda enfrentamientoManoCon: sieteDeOro pieCon: anchoDeBasto .
	self halt.
	
	self assert: 2 equals: (ronda enfrentamientosJugados).
	
	! !

!methodRemoval: RondaDeTrucoTest #test06hayGanadorEnSegundoEnfrentamientoCuandoSeEmpataEnPrimero stamp: 'CD 7/5/2021 19:56:32'!
test06hayGanadorEnSegundoEnfrentamientoCuandoSeEmpataEnPrimero

	| ronda  |
	ronda := self rondaConPrimerEnfrentamientoEmpatado.
	
	ronda enfrentamientoManoCon: (cartasDeMano third) pieCon: (cartasDePie second).
	
	self assert: 2 equals: (ronda enfrentamientosJugados).
	self assert: ronda hayGanador.
	self assert: (ronda ganador) equals: RondaDeTruco mano.

	!
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 19:57:12' prior: 50864873!
test05hayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero

	| ronda  |
	ronda := self rondaConPrimerEnfrentamientoEmpatado.
	
	ronda enfrentamientoManoCon: sieteDeOro pieCon: anchoDeBasto .
	self halt.
	
	self assert: 2 equals: (ronda enfrentamientosJugados).
	self assert: ronda hayGanador.
	self assert: (ronda ganador) equals: RondaDeTruco pie.
	
	! !
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 19:57:17' prior: 50864900!
test05hayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero

	| ronda  |
	ronda := self rondaConPrimerEnfrentamientoEmpatado.
	
	ronda enfrentamientoManoCon: sieteDeOro pieCon: anchoDeBasto .
	self halt.
	
	self assert: 2 equals: (ronda enfrentamientosJugados).
	self assert: ronda hayGanador.
	self assert: (ronda ganador) equals: (RondaDeTruco pie).
	
	! !
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 19:57:29' prior: 50864915!
test05hayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero

	| ronda  |
	ronda := self rondaConPrimerEnfrentamientoEmpatado.
	
	ronda enfrentamientoManoCon: sieteDeOro pieCon: anchoDeBasto .
	
	self assert: 2 equals: (ronda enfrentamientosJugados).
	self assert: ronda hayGanador.
	self assert: (ronda ganador) equals: (RondaDeTruco pie).
	
	! !

!testRun: #RondaDeTrucoTest #test05hayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 19:57:32'!
ERROR!

!testRun: #RondaDeTrucoTest #test05hayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 19:57:32'!
ERROR!
!RondaDeTruco methodsFor: 'ganador' stamp: 'CD 7/5/2021 19:58:15'!
ganador

	^ (historialEnfrentamientos last) ganador.! !

!testRun: #RondaDeTrucoTest #test05hayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 19:59:05'!
PASSED!
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 20:02:10'!
test05hayGanadorDeRondaEnTercerEnfrentamiento

	| ronda  |
	ronda := self rondaConPrimerEnfrentamientoEmpatado.
	
	ronda enfrentamientoManoCon: sieteDeOro pieCon: anchoDeBasto .
	
	self assert: 2 equals: (ronda enfrentamientosJugados).
	self assert: ronda hayGanador.
	self assert: (ronda ganador) equals: (RondaDeTruco pie).
	
	! !
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 20:02:28'!
test06hayGanadorDeRondaEnTercerEnfrentamiento

	| ronda  |
	ronda := self rondaConPrimerEnfrentamientoEmpatado.
	
	ronda enfrentamientoManoCon: sieteDeOro pieCon: anchoDeBasto .
	
	self assert: 2 equals: (ronda enfrentamientosJugados).
	self assert: ronda hayGanador.
	self assert: (ronda ganador) equals: (RondaDeTruco pie).
	
	! !

!methodRemoval: RondaDeTrucoTest #test05hayGanadorDeRondaEnTercerEnfrentamiento stamp: 'CD 7/5/2021 20:02:28'!
test05hayGanadorDeRondaEnTercerEnfrentamiento

	| ronda  |
	ronda := self rondaConPrimerEnfrentamientoEmpatado.
	
	ronda enfrentamientoManoCon: sieteDeOro pieCon: anchoDeBasto .
	
	self assert: 2 equals: (ronda enfrentamientosJugados).
	self assert: ronda hayGanador.
	self assert: (ronda ganador) equals: (RondaDeTruco pie).
	
	!
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 20:03:18'!
test06hayGanadorDeRondaAlTercerEnfrentamiento

	| ronda  |
	ronda := self rondaConPrimerosDosEnfrentamientosConGanadorAlternado.
	
	ronda enfrentamientoManoCon: sieteDeOro pieCon: anchoDeBasto .
	
	self assert: 2 equals: (ronda enfrentamientosJugados).
	self assert: ronda hayGanador.
	self assert: (ronda ganador) equals: (RondaDeTruco pie).
	
	! !
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 20:03:59' prior: 50865001!
test06hayGanadorDeRondaAlTercerEnfrentamiento

	| ronda  |
	ronda := self rondaConPrimerosDosEnfrentamientosConGanadorAlternado.
	
	ronda enfrentamientoManoCon: sieteDeOro pieCon: anchoDeBasto .
	
	self assert: 3 equals: (ronda enfrentamientosJugados).
	self assert: ronda hayGanador.
	self assert: (ronda ganador) equals: (RondaDeTruco pie).
	
	! !

!methodRemoval: RondaDeTrucoTest #test06hayGanadorDeRondaEnTercerEnfrentamiento stamp: 'CD 7/5/2021 20:04:08'!
test06hayGanadorDeRondaEnTercerEnfrentamiento

	| ronda  |
	ronda := self rondaConPrimerEnfrentamientoEmpatado.
	
	ronda enfrentamientoManoCon: sieteDeOro pieCon: anchoDeBasto .
	
	self assert: 2 equals: (ronda enfrentamientosJugados).
	self assert: ronda hayGanador.
	self assert: (ronda ganador) equals: (RondaDeTruco pie).
	
	!
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 20:04:44' prior: 50865015!
test06hayGanadorDeRondaAlTercerEnfrentamiento

	| ronda  |
	ronda := self rondaConPrimerosDosEnfrentamientosConGanadorAlternado.
	
	ronda enfrentamientoManoCon: anchoDeEspada pieCon: sieteDeOro .
	
	self assert: 3 equals: (ronda enfrentamientosJugados).
	self assert: ronda hayGanador.
	self assert: (ronda ganador) equals: (RondaDeTruco pie).
	
	! !
!RondaDeTrucoTest methodsFor: 'auxiliares - tests' stamp: 'CD 7/5/2021 20:05:19'!
rondaConPrimerosDosEnfrentamientosConGanadorAlternado! !
!RondaDeTrucoTest methodsFor: 'auxiliares - tests' stamp: 'CD 7/5/2021 20:09:22' prior: 50865057!
rondaConPrimerosDosEnfrentamientosConGanadorAlternado

	| ronda |
	"1) siete de oro contra oro con dos
2) espada con dos con ancho de basto
3) ancho de espada con dos de basto"

	ronda := RondaDeTruco cartasMano: cartasDeMano cartasPie: cartasDePie.
	ronda enfrentamientoManoCon: sieteDeOro pieCon: dosDeOro.
	ronda enfrentamientoManoCon: dosDeEspada pieCon: anchoDeBasto.
	
	^ ronda.! !
!RondaDeTrucoTest methodsFor: 'auxiliares - tests' stamp: 'CD 7/5/2021 20:09:30' prior: 50865062!
rondaConPrimerosDosEnfrentamientosConGanadorAlternado

	| ronda |

	ronda := RondaDeTruco cartasMano: cartasDeMano cartasPie: cartasDePie.
	ronda enfrentamientoManoCon: sieteDeOro pieCon: dosDeOro.
	ronda enfrentamientoManoCon: dosDeEspada pieCon: anchoDeBasto.
	
	^ ronda.! !
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 20:09:48' prior: 50865043!
test06hayGanadorDeRondaAlTercerEnfrentamiento

	| ronda  |
	ronda := self rondaConPrimerosDosEnfrentamientosConGanadorAlternado.
	"1) siete de oro contra oro con dos
2) espada con dos con ancho de basto
3) ancho de espada con dos de basto"
	
	ronda enfrentamientoManoCon: anchoDeEspada pieCon: dosDeBasto.
	
	self assert: 3 equals: (ronda enfrentamientosJugados).
	self assert: ronda hayGanador.
	self assert: (ronda ganador) equals: (RondaDeTruco pie).
	
	! !
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 20:10:02' prior: 50865090!
test06hayGanadorDeRondaAlTercerEnfrentamiento

	| ronda  |
	ronda := self rondaConPrimerosDosEnfrentamientosConGanadorAlternado.
	
	ronda enfrentamientoManoCon: anchoDeEspada pieCon: dosDeBasto.
	
	self assert: 3 equals: (ronda enfrentamientosJugados).
	self assert: ronda hayGanador.
	self assert: (ronda ganador) equals: (RondaDeTruco mano).
	
	! !

!testRun: #RondaDeTrucoTest #test06hayGanadorDeRondaAlTercerEnfrentamiento stamp: 'CD 7/5/2021 20:10:04'!
PASSED!
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 20:11:44'!
test06HayGanadorDeRondaAlTercerEnfrentamiento

	| ronda  |
	ronda := self rondaConPrimerosDosEnfrentamientosConGanadorAlternado.
	
	ronda enfrentamientoManoCon: anchoDeEspada pieCon: dosDeBasto.
	
	self assert: 3 equals: (ronda enfrentamientosJugados).
	self assert: ronda hayGanador.
	self assert: (ronda ganador) equals: (RondaDeTruco mano).
	
	! !

!methodRemoval: RondaDeTrucoTest #test06hayGanadorDeRondaAlTercerEnfrentamiento stamp: 'CD 7/5/2021 20:11:44'!
test06hayGanadorDeRondaAlTercerEnfrentamiento

	| ronda  |
	ronda := self rondaConPrimerosDosEnfrentamientosConGanadorAlternado.
	
	ronda enfrentamientoManoCon: anchoDeEspada pieCon: dosDeBasto.
	
	self assert: 3 equals: (ronda enfrentamientosJugados).
	self assert: ronda hayGanador.
	self assert: (ronda ganador) equals: (RondaDeTruco mano).
	
	!
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 20:11:54'!
test05HayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero

	| ronda  |
	ronda := self rondaConPrimerEnfrentamientoEmpatado.
	
	ronda enfrentamientoManoCon: sieteDeOro pieCon: anchoDeBasto .
	
	self assert: 2 equals: (ronda enfrentamientosJugados).
	self assert: ronda hayGanador.
	self assert: (ronda ganador) equals: (RondaDeTruco pie).
	
	! !

!methodRemoval: RondaDeTrucoTest #test05hayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 20:11:54'!
test05hayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero

	| ronda  |
	ronda := self rondaConPrimerEnfrentamientoEmpatado.
	
	ronda enfrentamientoManoCon: sieteDeOro pieCon: anchoDeBasto .
	
	self assert: 2 equals: (ronda enfrentamientosJugados).
	self assert: ronda hayGanador.
	self assert: (ronda ganador) equals: (RondaDeTruco pie).
	
	!
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 20:12:12'!
test07NoSePuedeSeguirJugandoRondaCuandoHayGanador

	| ronda  |
	ronda := self rondaConPrimerosDosEnfrentamientosConGanadorAlternado.
	
	ronda enfrentamientoManoCon: anchoDeEspada pieCon: dosDeBasto.
	
	self assert: 3 equals: (ronda enfrentamientosJugados).
	self assert: ronda hayGanador.
	self assert: (ronda ganador) equals: (RondaDeTruco mano).
	
	! !
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 20:16:01' prior: 50865182!
test07NoSePuedeSeguirJugandoRondaCuandoHayGanador

	| ronda  |
	ronda := self rondaConPrimerEnfrentamientoEmpatado.
	ronda enfrentamientoManoCon: sieteDeOro pieCon: anchoDeBasto.
	
	
	self 
		should: [ ronda enfrentamientoManoCon: sieteDeOro pieCon: anchoDeBasto]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: RondaDeTruco noSePuedeJugarUnaRondaFinalizada.
			self assert: 2 equals:(ronda enfrentamientosJugados )]
	
	! !
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 20:18:16' prior: 50865196!
test07NoSePuedeSeguirJugandoRondaCuandoHayGanador

	| ronda  |
	ronda := self rondaConPrimerEnfrentamientoEmpatado.
	ronda enfrentamientoManoCon: sieteDeOro pieCon: anchoDeBasto.
	
	
	self 
		should: [ ronda enfrentamientoManoCon: anchoDeEspada pieCon: dosDeOro]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: RondaDeTruco noSePuedeJugarUnaRondaFinalizada.
			self assert: 2 equals:(ronda enfrentamientosJugados )]
	
	! !

!testRun: #RondaDeTrucoTest #test07NoSePuedeSeguirJugandoRondaCuandoHayGanador stamp: 'CD 7/5/2021 20:18:20'!
FAILURE!

!testRun: #RondaDeTrucoTest #test07NoSePuedeSeguirJugandoRondaCuandoHayGanador stamp: 'CD 7/5/2021 20:18:20'!
FAILURE!
!RondaDeTruco class methodsFor: 'mensajes de error' stamp: 'CD 7/5/2021 20:20:07'!
noSePuedeJugarUnaRondaFinalizada

	^ 'No se puede jugar en una ronda de truco que ha finalizado'.! !

!testRun: #RondaDeTrucoTest #test07NoSePuedeSeguirJugandoRondaCuandoHayGanador stamp: 'CD 7/5/2021 20:20:45'!
FAILURE!

!testRun: #RondaDeTrucoTest #test07NoSePuedeSeguirJugandoRondaCuandoHayGanador stamp: 'CD 7/5/2021 20:20:45'!
FAILURE!
!RondaDeTruco methodsFor: 'enfrentamiento' stamp: 'CD 7/5/2021 20:21:21' prior: 50864045!
enfrentamientoManoCon: cartaDeTrucoMano pieCon: cartaDeTrucoPie
	self asertarRondaNoFinalizada.
	turno := self quienLeTocaEmpezar. 
	historialEnfrentamientos add: (Enfrentamiento cartaMano: cartaDeTrucoMano cartaPie: cartaDeTrucoPie).
	cartasMano remove: cartaDeTrucoMano.
	cartasPie remove: cartaDeTrucoPie.
	! !
!RondaDeTruco methodsFor: 'aserciones' stamp: 'CD 7/5/2021 20:23:01'!
asertarRondaNoFinalizada

	^ (self hayGanador) ifTrue: [self error: RondaDeTruco noSePuedeJugarUnaRondaFinalizada].! !

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 20:23:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 20:23:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test03SeJuegaSegundoEnfrentamientoHabiendoEmpateEnPrimero stamp: 'CD 7/5/2021 20:23:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 20:23:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test05HayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 20:23:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test06HayGanadorDeRondaAlTercerEnfrentamiento stamp: 'CD 7/5/2021 20:23:11'!
ERROR!

!testRun: #RondaDeTrucoTest #test07NoSePuedeSeguirJugandoRondaCuandoHayGanador stamp: 'CD 7/5/2021 20:23:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test06HayGanadorDeRondaAlTercerEnfrentamiento stamp: 'CD 7/5/2021 20:23:11'!
ERROR!

!testRun: #RondaDeTrucoTest #test06HayGanadorDeRondaAlTercerEnfrentamiento stamp: 'CD 7/5/2021 20:23:32'!
ERROR!

!testRun: #RondaDeTrucoTest #test06HayGanadorDeRondaAlTercerEnfrentamiento stamp: 'CD 7/5/2021 20:23:32'!
ERROR!

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 20:23:41'!
PASSED!

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 20:23:41'!
PASSED!

!testRun: #RondaDeTrucoTest #test03SeJuegaSegundoEnfrentamientoHabiendoEmpateEnPrimero stamp: 'CD 7/5/2021 20:23:41'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 20:23:41'!
PASSED!

!testRun: #RondaDeTrucoTest #test05HayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 20:23:41'!
PASSED!

!testRun: #RondaDeTrucoTest #test06HayGanadorDeRondaAlTercerEnfrentamiento stamp: 'CD 7/5/2021 20:23:41'!
ERROR!

!testRun: #RondaDeTrucoTest #test07NoSePuedeSeguirJugandoRondaCuandoHayGanador stamp: 'CD 7/5/2021 20:23:41'!
PASSED!

!testRun: #RondaDeTrucoTest #test06HayGanadorDeRondaAlTercerEnfrentamiento stamp: 'CD 7/5/2021 20:23:41'!
ERROR!
!RondaDeTruco methodsFor: 'ganador' stamp: 'CD 7/5/2021 20:26:38' prior: 50864325!
hayGanador

	^ self huboMasDeUnEnfrentamientoJugado and: ([self huboEmpateEnPrimerEnfrentamiento] or: [self algunJugadorGanoMasDeUnEnfrentamiento]).! !
!RondaDeTruco methodsFor: 'ganador' stamp: 'CD 7/5/2021 20:28:41'!
huboEmpateEnPrimerEnfrentamiento

	^ historialEnfrentamientos notEmpty and: [historialEnfrentamientos first hayEmpate]. ! !
!RondaDeTruco methodsFor: 'ganador' stamp: 'CD 7/5/2021 20:29:05'!
huboEnfrentamientos

	^ historialEnfrentamientos notEmpty! !
!RondaDeTruco methodsFor: 'ganador' stamp: 'CD 7/5/2021 20:29:05' prior: 50865347!
huboEmpateEnPrimerEnfrentamiento

	^ self huboEnfrentamientos and: [historialEnfrentamientos first hayEmpate]. ! !
!RondaDeTruco methodsFor: 'ganador' stamp: 'CD 7/5/2021 20:31:00'!
algunJugadorGanoMasDeUnEnfrentamiento

	^ self manoGanoMasDeUnEnfrentamiento or: [ self pieGanoMasDeUnEnfrentamiento].! !
!RondaDeTruco methodsFor: 'ganador' stamp: 'CD 7/5/2021 20:32:07'!
manoGanoMasDeUnEnfrentamiento

	^ (historialEnfrentamientos select: [: enfrentamiento | enfrentamiento ganador = RondaDeTruco mano]) size.! !
!RondaDeTruco methodsFor: 'ganador' stamp: 'CD 7/5/2021 20:32:23' prior: 50865370!
manoGanoMasDeUnEnfrentamiento

	^ 1 < ((historialEnfrentamientos select: [: enfrentamiento | enfrentamiento ganador = RondaDeTruco mano]) size).! !
!RondaDeTruco methodsFor: 'ganador' stamp: 'CD 7/5/2021 20:33:04'!
jugadorGanoMasDeUnEnfrentamiento: unJugador

	^ 1 < ((historialEnfrentamientos select: [: enfrentamiento | enfrentamiento ganador = unJugador]) size).! !

!methodRemoval: RondaDeTruco #manoGanoMasDeUnEnfrentamiento stamp: 'CD 7/5/2021 20:33:08'!
manoGanoMasDeUnEnfrentamiento

	^ 1 < ((historialEnfrentamientos select: [: enfrentamiento | enfrentamiento ganador = RondaDeTruco mano]) size).!
!RondaDeTruco methodsFor: 'ganador' stamp: 'CD 7/5/2021 20:33:59' prior: 50865364!
algunJugadorGanoMasDeUnEnfrentamiento

	^ (self jugadorGanoMasDeUnEnfrentamiento: RondaDeTruco mano) or: [self jugadorGanoMasDeUnEnfrentamiento: RondaDeTruco pie].! !

!testRun: #RondaDeTrucoTest #test07NoSePuedeSeguirJugandoRondaCuandoHayGanador stamp: 'CD 7/5/2021 20:34:17'!
ERROR!

!testRun: #RondaDeTrucoTest #test07NoSePuedeSeguirJugandoRondaCuandoHayGanador stamp: 'CD 7/5/2021 20:34:17'!
ERROR!

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 20:35:04'!
ERROR!

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 20:35:04'!
ERROR!

!testRun: #RondaDeTrucoTest #test03SeJuegaSegundoEnfrentamientoHabiendoEmpateEnPrimero stamp: 'CD 7/5/2021 20:35:04'!
ERROR!

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 20:35:04'!
ERROR!

!testRun: #RondaDeTrucoTest #test05HayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 20:35:04'!
ERROR!

!testRun: #RondaDeTrucoTest #test06HayGanadorDeRondaAlTercerEnfrentamiento stamp: 'CD 7/5/2021 20:35:04'!
ERROR!

!testRun: #RondaDeTrucoTest #test07NoSePuedeSeguirJugandoRondaCuandoHayGanador stamp: 'CD 7/5/2021 20:35:04'!
ERROR!

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 20:37:51'!
ERROR!

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 20:37:51'!
ERROR!

!testRun: #RondaDeTrucoTest #test03SeJuegaSegundoEnfrentamientoHabiendoEmpateEnPrimero stamp: 'CD 7/5/2021 20:37:51'!
ERROR!

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 20:37:51'!
ERROR!

!testRun: #RondaDeTrucoTest #test05HayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 20:37:51'!
ERROR!

!testRun: #RondaDeTrucoTest #test06HayGanadorDeRondaAlTercerEnfrentamiento stamp: 'CD 7/5/2021 20:37:51'!
ERROR!

!testRun: #RondaDeTrucoTest #test07NoSePuedeSeguirJugandoRondaCuandoHayGanador stamp: 'CD 7/5/2021 20:37:51'!
ERROR!

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 20:37:59'!
ERROR!

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 20:37:59'!
ERROR!
!RondaDeTruco methodsFor: 'ganador' stamp: 'CD 7/5/2021 20:39:01' prior: 50865358!
huboEmpateEnPrimerEnfrentamiento

	^ self huboEnfrentamientos and: [(historialEnfrentamientos first) hayEmpate]. ! !

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 20:39:05'!
ERROR!

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 20:39:05'!
ERROR!

!testRun: #RondaDeTrucoTest #test03SeJuegaSegundoEnfrentamientoHabiendoEmpateEnPrimero stamp: 'CD 7/5/2021 20:39:05'!
ERROR!

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 20:39:05'!
ERROR!

!testRun: #RondaDeTrucoTest #test05HayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 20:39:05'!
ERROR!

!testRun: #RondaDeTrucoTest #test06HayGanadorDeRondaAlTercerEnfrentamiento stamp: 'CD 7/5/2021 20:39:05'!
ERROR!

!testRun: #RondaDeTrucoTest #test07NoSePuedeSeguirJugandoRondaCuandoHayGanador stamp: 'CD 7/5/2021 20:39:05'!
ERROR!

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 20:39:15'!
ERROR!

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 20:39:15'!
ERROR!
!RondaDeTruco methodsFor: 'ganador' stamp: 'CD 7/5/2021 20:39:44' prior: 50865340!
hayGanador
	self halt.
	^ self huboMasDeUnEnfrentamientoJugado and: ([self huboEmpateEnPrimerEnfrentamiento] or: [self algunJugadorGanoMasDeUnEnfrentamiento]).! !
!RondaDeTruco methodsFor: 'ganador' stamp: 'CD 7/5/2021 20:42:43' prior: 50865474!
huboEmpateEnPrimerEnfrentamiento

	^ (self huboEnfrentamientos) and: [^(historialEnfrentamientos first) hayEmpate]. ! !
!RondaDeTruco methodsFor: 'ganador' stamp: 'CD 7/5/2021 20:44:27' prior: 50865521!
huboEmpateEnPrimerEnfrentamiento

	^ (self huboEnfrentamientos) and: [true]. ! !
!RondaDeTruco methodsFor: 'ganador' stamp: 'CD 7/5/2021 20:44:46' prior: 50865513!
hayGanador
	^ self huboMasDeUnEnfrentamientoJugado and: ([self huboEmpateEnPrimerEnfrentamiento] or: [self algunJugadorGanoMasDeUnEnfrentamiento]).! !

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 20:44:49'!
ERROR!

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 20:44:49'!
ERROR!
!RondaDeTruco methodsFor: 'ganador' stamp: 'CD 7/5/2021 20:46:10' prior: 50865534!
hayGanador
	^ (self huboMasDeUnEnfrentamientoJugado) and: [self algunJugadorGanoMasDeUnEnfrentamiento].! !

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 20:46:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 20:46:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 20:46:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 20:46:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test03SeJuegaSegundoEnfrentamientoHabiendoEmpateEnPrimero stamp: 'CD 7/5/2021 20:46:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 20:46:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test05HayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 20:46:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test06HayGanadorDeRondaAlTercerEnfrentamiento stamp: 'CD 7/5/2021 20:46:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test07NoSePuedeSeguirJugandoRondaCuandoHayGanador stamp: 'CD 7/5/2021 20:46:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test05HayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 20:47:20'!
PASSED!
!Enfrentamiento methodsFor: 'resultado' stamp: 'CD 7/5/2021 20:49:42' prior: 50864003!
ganador
	
	^ (cartaMano mataA: cartaPie) ifFalse: [RondaDeTruco pie] ifTrue: [RondaDeTruco mano]! !
!Enfrentamiento methodsFor: 'resultado' stamp: 'CD 7/5/2021 20:50:06'!
hayGanador 

	^ self hayEmpate not.! !

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 20:50:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 20:50:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test03SeJuegaSegundoEnfrentamientoHabiendoEmpateEnPrimero stamp: 'CD 7/5/2021 20:50:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 20:50:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test05HayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 20:50:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test06HayGanadorDeRondaAlTercerEnfrentamiento stamp: 'CD 7/5/2021 20:50:15'!
PASSED!

!testRun: #RondaDeTrucoTest #test07NoSePuedeSeguirJugandoRondaCuandoHayGanador stamp: 'CD 7/5/2021 20:50:15'!
PASSED!
!RondaDeTruco methodsFor: 'ganador' stamp: 'CD 7/5/2021 20:51:27' prior: 50865385!
jugadorGanoMasDeUnEnfrentamiento: unJugador

	^ 1 < ((historialEnfrentamientos select: [: enfrentamiento | enfrentamiento hayGanador and: [enfrentamiento ganador = unJugador]]) size).! !

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 20:51:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 20:51:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test03SeJuegaSegundoEnfrentamientoHabiendoEmpateEnPrimero stamp: 'CD 7/5/2021 20:51:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 20:51:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test05HayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 20:51:45'!
FAILURE!

!testRun: #RondaDeTrucoTest #test06HayGanadorDeRondaAlTercerEnfrentamiento stamp: 'CD 7/5/2021 20:51:45'!
PASSED!

!testRun: #RondaDeTrucoTest #test07NoSePuedeSeguirJugandoRondaCuandoHayGanador stamp: 'CD 7/5/2021 20:51:45'!
FAILURE!
!RondaDeTruco methodsFor: 'turno' stamp: 'CD 7/5/2021 20:53:53' prior: 50863990!
quienLeTocaEmpezar

	^ (self juegoNoEmpezo or: [self huboEmpateEnPrimerEnfrentamiento ]) ifTrue: [RondaDeTruco mano] ifFalse: [self ganadorEnUltimoEnfrentamiento].! !

!methodRemoval: RondaDeTruco #huboEmpateEnUltimoEnfrentamiento stamp: 'CD 7/5/2021 20:53:58'!
huboEmpateEnUltimoEnfrentamiento

	^ (historialEnfrentamientos last) hayEmpate.!

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 20:54:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 20:54:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test03SeJuegaSegundoEnfrentamientoHabiendoEmpateEnPrimero stamp: 'CD 7/5/2021 20:54:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 20:54:11'!
FAILURE!

!testRun: #RondaDeTrucoTest #test05HayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 20:54:11'!
FAILURE!

!testRun: #RondaDeTrucoTest #test06HayGanadorDeRondaAlTercerEnfrentamiento stamp: 'CD 7/5/2021 20:54:11'!
PASSED!

!testRun: #RondaDeTrucoTest #test07NoSePuedeSeguirJugandoRondaCuandoHayGanador stamp: 'CD 7/5/2021 20:54:11'!
FAILURE!

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 20:54:23'!
FAILURE!

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 20:54:23'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'auxiliares - tests' stamp: 'CD 7/5/2021 20:58:13' prior: 50864695!
rondaConPrimerEnfrentamientoGanadoPorPie

	| ronda |
	
	ronda := RondaDeTruco cartasMano: cartasDeMano cartasPie: cartasDePie.

	ronda enfrentamientoManoCon: dosDeEspada pieCon: anchoDeBasto.
	
	^ ronda.! !

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 20:58:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 20:58:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test03SeJuegaSegundoEnfrentamientoHabiendoEmpateEnPrimero stamp: 'CD 7/5/2021 20:58:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 20:58:16'!
FAILURE!

!testRun: #RondaDeTrucoTest #test05HayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 20:58:16'!
FAILURE!

!testRun: #RondaDeTrucoTest #test06HayGanadorDeRondaAlTercerEnfrentamiento stamp: 'CD 7/5/2021 20:58:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test07NoSePuedeSeguirJugandoRondaCuandoHayGanador stamp: 'CD 7/5/2021 20:58:16'!
FAILURE!

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 20:58:24'!
FAILURE!

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 20:58:24'!
FAILURE!
!RondaDeTruco methodsFor: 'turno' stamp: 'CD 7/5/2021 21:00:05' prior: 50865664!
quienLeTocaEmpezar

	^ (self juegoNoEmpezo or: [self huboEmpateEnPrimerEnfrentamiento ]) ifTrue: [RondaDeTruco mano] ifFalse: [self ganadorEnUltimoEnfrentamiento].! !

!testRun: #RondaDeTrucoTest #test05HayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 21:02:04'!
FAILURE!

!testRun: #RondaDeTrucoTest #test05HayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 21:02:04'!
FAILURE!

!testRun: #RondaDeTrucoTest #test05HayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 21:02:18'!
FAILURE!

!testRun: #RondaDeTrucoTest #test05HayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 21:02:18'!
FAILURE!
!RondaDeTruco methodsFor: 'ganador' stamp: 'CD 7/5/2021 21:03:10'!
alguienGanoMasDeUnEnfrentamiento

	^ (self huboMasDeUnEnfrentamientoJugado) and: [self algunJugadorGanoMasDeUnEnfrentamiento]! !
!RondaDeTruco methodsFor: 'ganador' stamp: 'CD 7/5/2021 21:03:10' prior: 50865548!
hayGanador
	^ self alguienGanoMasDeUnEnfrentamiento.! !
!RondaDeTruco methodsFor: 'ganador' stamp: 'CD 7/5/2021 21:04:08' prior: 50865789!
hayGanador
	^ self alguienGanoMasDeUnEnfrentamiento or: [self huboEmpateEnPrimeraYSegundoEnfrentamiento].! !
!RondaDeTruco methodsFor: 'ganador' stamp: 'CD 7/5/2021 21:04:22' prior: 50865794!
hayGanador
	^ self alguienGanoMasDeUnEnfrentamiento or: [self huboEmpateEnPrimeraYGanadorEnSegunda].! !
!RondaDeTruco methodsFor: 'ganador' stamp: 'CD 7/5/2021 21:05:18'!
huboEmpateEnPrimeraYGanadorEnSegunda

	self huboMasDeUnEnfrentamientoJugado and: [self huboEmpateEnPrimerEnfrentamiento].! !
!RondaDeTruco methodsFor: 'ganador' stamp: 'CD 7/5/2021 21:05:28' prior: 50865806!
huboEmpateEnPrimeraYGanadorEnSegunda

	^self huboMasDeUnEnfrentamientoJugado and: [self huboEmpateEnPrimerEnfrentamiento].! !

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 21:05:31'!
PASSED!

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 21:05:31'!
PASSED!

!testRun: #RondaDeTrucoTest #test03SeJuegaSegundoEnfrentamientoHabiendoEmpateEnPrimero stamp: 'CD 7/5/2021 21:05:31'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 21:05:31'!
FAILURE!

!testRun: #RondaDeTrucoTest #test05HayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 21:05:31'!
PASSED!

!testRun: #RondaDeTrucoTest #test06HayGanadorDeRondaAlTercerEnfrentamiento stamp: 'CD 7/5/2021 21:05:31'!
ERROR!

!testRun: #RondaDeTrucoTest #test07NoSePuedeSeguirJugandoRondaCuandoHayGanador stamp: 'CD 7/5/2021 21:05:31'!
PASSED!

!testRun: #RondaDeTrucoTest #test07NoSePuedeSeguirJugandoRondaCuandoHayGanador stamp: 'CD 7/5/2021 21:05:47'!
PASSED!

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 21:07:27'!
PASSED!

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 21:07:27'!
PASSED!

!testRun: #RondaDeTrucoTest #test03SeJuegaSegundoEnfrentamientoHabiendoEmpateEnPrimero stamp: 'CD 7/5/2021 21:07:27'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 21:07:27'!
FAILURE!

!testRun: #RondaDeTrucoTest #test05HayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 21:07:27'!
PASSED!

!testRun: #RondaDeTrucoTest #test06HayGanadorDeRondaAlTercerEnfrentamiento stamp: 'CD 7/5/2021 21:07:27'!
ERROR!

!testRun: #RondaDeTrucoTest #test07NoSePuedeSeguirJugandoRondaCuandoHayGanador stamp: 'CD 7/5/2021 21:07:27'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 21:07:38'!
FAILURE!

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 21:07:38'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 21:08:54' prior: 50864159!
test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior

	| ronda  |
	ronda := self rondaConPrimerEnfrentamientoGanadoPorPie.
	
	ronda enfrentamientoManoCon: (anchoDeEspada ) pieCon: (dosDeOro ).
	
	self assert: 2 equals: (ronda enfrentamientosJugados).
	self assert: (RondaDeTruco pie) equals: ronda quienEmpezoUltimoEnfrentamiento. 

	! !
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 21:08:59' prior: 50865885!
test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior

	| ronda  |
	ronda := self rondaConPrimerEnfrentamientoGanadoPorPie.
	
	ronda enfrentamientoManoCon: (anchoDeEspada) pieCon: (dosDeOro).
	
	self assert: 2 equals: (ronda enfrentamientosJugados).
	self assert: (RondaDeTruco pie) equals: ronda quienEmpezoUltimoEnfrentamiento. 

	! !

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 21:09:07'!
FAILURE!

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 21:09:07'!
FAILURE!

!testRun: #RondaDeTrucoTest #test06HayGanadorDeRondaAlTercerEnfrentamiento stamp: 'CD 7/5/2021 21:09:25'!
ERROR!

!testRun: #RondaDeTrucoTest #test06HayGanadorDeRondaAlTercerEnfrentamiento stamp: 'CD 7/5/2021 21:09:25'!
ERROR!

!testRun: #RondaDeTrucoTest #test06HayGanadorDeRondaAlTercerEnfrentamiento stamp: 'CD 7/5/2021 21:09:38'!
ERROR!

!testRun: #RondaDeTrucoTest #test06HayGanadorDeRondaAlTercerEnfrentamiento stamp: 'CD 7/5/2021 21:09:38'!
ERROR!

!testRun: #RondaDeTrucoTest #test07NoSePuedeSeguirJugandoRondaCuandoHayGanador stamp: 'CD 7/5/2021 21:10:14'!
PASSED!
!RondaDeTruco methodsFor: 'ganador' stamp: 'CD 7/5/2021 21:11:04' prior: 50865800!
hayGanador
self halt.
	^ self alguienGanoMasDeUnEnfrentamiento or: [self huboEmpateEnPrimeraYGanadorEnSegunda].! !
!RondaDeTruco methodsFor: 'aserciones' stamp: 'CD 7/5/2021 21:14:08' prior: 50865528!
huboEmpateEnPrimerEnfrentamiento

	^ (self huboEnfrentamientos) and: [(historialEnfrentamientos first) hayEmpate]. ! !
!RondaDeTruco methodsFor: 'ganador' stamp: 'CD 7/5/2021 21:14:26' prior: 50865939!
hayGanador

	^ self alguienGanoMasDeUnEnfrentamiento or: [self huboEmpateEnPrimeraYGanadorEnSegunda].! !

!testRun: #RondaDeTrucoTest #test06HayGanadorDeRondaAlTercerEnfrentamiento stamp: 'CD 7/5/2021 21:14:30'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 21:14:33'!
PASSED!
!RondaDeTruco methodsFor: 'enfrentamientos' stamp: 'CD 7/5/2021 21:17:10'!
jugadoresUsanCartasConMano: cartaDeTrucoPie yConPie: cartaDeTrucoMano

	cartasMano remove: cartaDeTrucoMano.
	cartasPie remove: cartaDeTrucoPie! !
!RondaDeTruco methodsFor: 'enfrentamientos' stamp: 'CD 7/5/2021 21:17:10' prior: 50865254!
enfrentamientoManoCon: cartaDeTrucoMano pieCon: cartaDeTrucoPie
	self asertarRondaNoFinalizada.
	turno := self quienLeTocaEmpezar. 
	historialEnfrentamientos add: (Enfrentamiento cartaMano: cartaDeTrucoMano cartaPie: cartaDeTrucoPie).
	self jugadoresUsanCartasConMano: cartaDeTrucoPie yConPie: cartaDeTrucoMano.
	! !
!RondaDeTruco methodsFor: 'enfrentamientos' stamp: 'CD 7/5/2021 21:17:40' prior: 50865975!
enfrentamientoManoCon: cartaDeTrucoMano pieCon: cartaDeTrucoPie
	self asertarRondaNoFinalizada.
	
	turno := self quienLeTocaEmpezar. 
	historialEnfrentamientos add: (Enfrentamiento cartaMano: cartaDeTrucoMano cartaPie: cartaDeTrucoPie).
	self jugadoresUsanCartasConMano: cartaDeTrucoPie yConPie: cartaDeTrucoMano.
	! !
!RondaDeTruco methodsFor: 'enfrentamientos' stamp: 'CD 7/5/2021 21:18:10'!
agregarJugadaDeMano: cartaDeTrucoMano yDePie: cartaDeTrucoPie

	^ historialEnfrentamientos add: (Enfrentamiento cartaMano: cartaDeTrucoMano cartaPie: cartaDeTrucoPie)! !
!RondaDeTruco methodsFor: 'enfrentamientos' stamp: 'CD 7/5/2021 21:18:10' prior: 50865988!
enfrentamientoManoCon: cartaDeTrucoMano pieCon: cartaDeTrucoPie
	self asertarRondaNoFinalizada.
	
	turno := self quienLeTocaEmpezar. 
	self agregarJugadaDeMano: cartaDeTrucoMano yDePie: cartaDeTrucoPie.
	self jugadoresUsanCartasConMano: cartaDeTrucoPie yConPie: cartaDeTrucoMano.
	! !
!RondaDeTruco methodsFor: 'enfrentamientos' stamp: 'CD 7/5/2021 21:18:27' prior: 50866010!
enfrentamientoManoCon: cartaDeTrucoMano pieCon: cartaDeTrucoPie
	self asertarRondaNoFinalizada.
	
	turno := self quienLeTocaEmpezar. 
	self agregarJugadaDeMano: cartaDeTrucoMano yDePie: cartaDeTrucoPie.
	
	! !
!RondaDeTruco methodsFor: 'enfrentamientos' stamp: 'CD 7/5/2021 21:18:46' prior: 50866001!
agregarJugadaDeMano: cartaDeTrucoMano yDePie: cartaDeTrucoPie

	historialEnfrentamientos add: (Enfrentamiento cartaMano: cartaDeTrucoMano cartaPie: cartaDeTrucoPie).
	self jugadoresUsanCartasConMano: cartaDeTrucoPie yConPie: cartaDeTrucoMano.! !

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 21:18:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 21:18:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test03SeJuegaSegundoEnfrentamientoHabiendoEmpateEnPrimero stamp: 'CD 7/5/2021 21:18:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 21:18:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test05HayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 21:18:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test06HayGanadorDeRondaAlTercerEnfrentamiento stamp: 'CD 7/5/2021 21:18:54'!
PASSED!

!testRun: #RondaDeTrucoTest #test07NoSePuedeSeguirJugandoRondaCuandoHayGanador stamp: 'CD 7/5/2021 21:18:54'!
PASSED!
!RondaDeTruco methodsFor: 'turno' stamp: 'CD 7/5/2021 21:19:43'!
aQuienLeTocaEmpezar

	^ (self juegoNoEmpezo or: [self huboEmpateEnPrimerEnfrentamiento ]) ifTrue: [RondaDeTruco mano] ifFalse: [self ganadorEnUltimoEnfrentamiento].! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'CD 7/5/2021 21:19:43' prior: 50866022!
enfrentamientoManoCon: cartaDeTrucoMano pieCon: cartaDeTrucoPie
	self asertarRondaNoFinalizada.
	
	turno := self aQuienLeTocaEmpezar. 
	self agregarJugadaDeMano: cartaDeTrucoMano yDePie: cartaDeTrucoPie.
	
	! !

!methodRemoval: RondaDeTruco #quienLeTocaEmpezar stamp: 'CD 7/5/2021 21:19:43'!
quienLeTocaEmpezar

	^ (self juegoNoEmpezo or: [self huboEmpateEnPrimerEnfrentamiento ]) ifTrue: [RondaDeTruco mano] ifFalse: [self ganadorEnUltimoEnfrentamiento].!

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 21:19:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 21:19:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test03SeJuegaSegundoEnfrentamientoHabiendoEmpateEnPrimero stamp: 'CD 7/5/2021 21:19:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 21:19:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test05HayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 21:19:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test06HayGanadorDeRondaAlTercerEnfrentamiento stamp: 'CD 7/5/2021 21:19:46'!
PASSED!

!testRun: #RondaDeTrucoTest #test07NoSePuedeSeguirJugandoRondaCuandoHayGanador stamp: 'CD 7/5/2021 21:19:46'!
PASSED!
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 21:21:08'!
test07HayGanadorDeRondaAlTercerEnfrentamiento

	| ronda  |
	ronda := self rondaConPrimerosDosEnfrentamientosConGanadorAlternado.
	
	ronda enfrentamientoManoCon: anchoDeEspada pieCon: dosDeBasto.
	
	self assert: 3 equals: (ronda enfrentamientosJugados).
	self assert: ronda hayGanador.
	self assert: (ronda ganador) equals: (RondaDeTruco mano).
	
	! !

!methodRemoval: RondaDeTrucoTest #test06HayGanadorDeRondaAlTercerEnfrentamiento stamp: 'CD 7/5/2021 21:21:08'!
test06HayGanadorDeRondaAlTercerEnfrentamiento

	| ronda  |
	ronda := self rondaConPrimerosDosEnfrentamientosConGanadorAlternado.
	
	ronda enfrentamientoManoCon: anchoDeEspada pieCon: dosDeBasto.
	
	self assert: 3 equals: (ronda enfrentamientosJugados).
	self assert: ronda hayGanador.
	self assert: (ronda ganador) equals: (RondaDeTruco mano).
	
	!
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 21:21:16'!
test08NoSePuedeSeguirJugandoRondaCuandoHayGanador

	| ronda  |
	ronda := self rondaConPrimerEnfrentamientoEmpatado.
	ronda enfrentamientoManoCon: sieteDeOro pieCon: anchoDeBasto.
	
	
	self 
		should: [ ronda enfrentamientoManoCon: anchoDeEspada pieCon: dosDeOro]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: RondaDeTruco noSePuedeJugarUnaRondaFinalizada.
			self assert: 2 equals:(ronda enfrentamientosJugados )]
	
	! !

!methodRemoval: RondaDeTrucoTest #test07NoSePuedeSeguirJugandoRondaCuandoHayGanador stamp: 'CD 7/5/2021 21:21:16'!
test07NoSePuedeSeguirJugandoRondaCuandoHayGanador

	| ronda  |
	ronda := self rondaConPrimerEnfrentamientoEmpatado.
	ronda enfrentamientoManoCon: sieteDeOro pieCon: anchoDeBasto.
	
	
	self 
		should: [ ronda enfrentamientoManoCon: anchoDeEspada pieCon: dosDeOro]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: RondaDeTruco noSePuedeJugarUnaRondaFinalizada.
			self assert: 2 equals:(ronda enfrentamientosJugados )]
	
	!
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 21:21:47'!
test06HayGanadorDeRondaCuandoJugadorGanaPrimerySegundoEnfrentamiento

	| ronda  |
	ronda := self rondaConPrimerEnfrentamientoEmpatado.
	
	ronda enfrentamientoManoCon: sieteDeOro pieCon: anchoDeBasto .
	
	self assert: 2 equals: (ronda enfrentamientosJugados).
	self assert: ronda hayGanador.
	self assert: (ronda ganador) equals: (RondaDeTruco pie).
	
	! !
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 21:21:54' prior: 50866186!
test06HayGanadorDeRondaCuandoJugadorGanaPrimerySegundoEnfrentamiento

	| ronda  |
	ronda := self rondaConPrimerEnfrentamientoGanadoPorPie .
	
	ronda enfrentamientoManoCon: sieteDeOro pieCon: anchoDeBasto .
	
	self assert: 2 equals: (ronda enfrentamientosJugados).
	self assert: ronda hayGanador.
	self assert: (ronda ganador) equals: (RondaDeTruco pie).
	
	! !
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 21:21:57' prior: 50866200!
test06HayGanadorDeRondaCuandoJugadorGanaPrimerySegundoEnfrentamiento

	| ronda  |
	ronda := self rondaConPrimerEnfrentamientoGanadoPorPie.
	
	ronda enfrentamientoManoCon: sieteDeOro pieCon: anchoDeBasto .
	
	self assert: 2 equals: (ronda enfrentamientosJugados).
	self assert: ronda hayGanador.
	self assert: (ronda ganador) equals: (RondaDeTruco pie).
	
	! !
!RondaDeTrucoTest methodsFor: 'auxiliares - tests' stamp: 'CD 7/5/2021 21:22:40' prior: 50865713!
rondaConPrimerEnfrentamientoGanadoPorPie

	| ronda |
	
	ronda := RondaDeTruco cartasMano: cartasDeMano cartasPie: cartasDePie.
	ronda enfrentamientoManoCon: dosDeEspada pieCon: anchoDeBasto.
	
	^ ronda.! !
!RondaDeTrucoTest methodsFor: 'auxiliares - tests' stamp: 'CD 7/5/2021 21:23:29' prior: 50864663!
rondaConPrimerEnfrentamientoEmpatado

	| ronda |
	
	ronda := RondaDeTruco cartasMano: cartasDeMano cartasPie: cartasDePie.
	ronda enfrentamientoManoCon: dosDeEspada pieCon: dosDeBasto.
	
	^ ronda.! !

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 21:23:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 21:23:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test03SeJuegaSegundoEnfrentamientoHabiendoEmpateEnPrimero stamp: 'CD 7/5/2021 21:23:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 21:23:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test05HayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 21:23:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test06HayGanadorDeRondaCuandoJugadorGanaPrimerySegundoEnfrentamiento stamp: 'CD 7/5/2021 21:23:32'!
ERROR!

!testRun: #RondaDeTrucoTest #test07HayGanadorDeRondaAlTercerEnfrentamiento stamp: 'CD 7/5/2021 21:23:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeSeguirJugandoRondaCuandoHayGanador stamp: 'CD 7/5/2021 21:23:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test06HayGanadorDeRondaCuandoJugadorGanaPrimerySegundoEnfrentamiento stamp: 'CD 7/5/2021 21:23:32'!
ERROR!
!RondaDeTrucoTest methodsFor: 'auxiliares - tests' stamp: 'CD 7/5/2021 19:46:50' prior: 50866239!
rondaConPrimerEnfrentamientoEmpatado

	| cartaEnfrentamientoMano cartaEnfrentamientoPie ronda |
	
	ronda := RondaDeTruco cartasMano: cartasDeMano cartasPie: cartasDePie.
	cartaEnfrentamientoMano := cartasDeMano second.
	cartaEnfrentamientoPie := cartasDePie second.

	ronda enfrentamientoManoCon: cartaEnfrentamientoMano pieCon: cartaEnfrentamientoPie.
	
	^ ronda.! !

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 21:24:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 21:24:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test03SeJuegaSegundoEnfrentamientoHabiendoEmpateEnPrimero stamp: 'CD 7/5/2021 21:24:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 21:24:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test05HayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 21:24:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test06HayGanadorDeRondaCuandoJugadorGanaPrimerySegundoEnfrentamiento stamp: 'CD 7/5/2021 21:24:08'!
ERROR!

!testRun: #RondaDeTrucoTest #test07HayGanadorDeRondaAlTercerEnfrentamiento stamp: 'CD 7/5/2021 21:24:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeSeguirJugandoRondaCuandoHayGanador stamp: 'CD 7/5/2021 21:24:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test06HayGanadorDeRondaCuandoJugadorGanaPrimerySegundoEnfrentamiento stamp: 'CD 7/5/2021 21:24:08'!
ERROR!
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 21:25:00' prior: 50866214!
test06HayGanadorDeRondaCuandoJugadorGanaPrimerySegundoEnfrentamiento

	| ronda  |
	ronda := ronda := RondaDeTruco cartasMano: cartasDeMano cartasPie: cartasDePie.
	
	ronda enfrentamientoManoCon: sieteDeOro pieCon: anchoDeBasto .
	
	self assert: 2 equals: (ronda enfrentamientosJugados).
	self assert: ronda hayGanador.
	self assert: (ronda ganador) equals: (RondaDeTruco pie).
	
	! !
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 21:25:36' prior: 50866334!
test06HayGanadorDeRondaCuandoJugadorGanaPrimerySegundoEnfrentamiento

	| ronda  |
	ronda := ronda := RondaDeTruco cartasMano: cartasDeMano cartasPie: cartasDePie.
	ronda enfrentamientoManoCon: anchoDeEspada pieCon: anchoDeBasto.
	ronda enfrentamientoManoCon: sieteDeOro pieCon: dosDeOro.
	
	self assert: 2 equals: (ronda enfrentamientosJugados).
	self assert: ronda hayGanador.
	self assert: (ronda ganador) equals: (RondaDeTruco pie).
	
	! !

!testRun: #RondaDeTrucoTest #test06HayGanadorDeRondaCuandoJugadorGanaPrimerySegundoEnfrentamiento stamp: 'CD 7/5/2021 21:25:38'!
FAILURE!

!testRun: #RondaDeTrucoTest #test06HayGanadorDeRondaCuandoJugadorGanaPrimerySegundoEnfrentamiento stamp: 'CD 7/5/2021 21:25:38'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'CD 7/5/2021 21:25:45' prior: 50866349!
test06HayGanadorDeRondaCuandoJugadorGanaPrimerySegundoEnfrentamiento

	| ronda  |
	ronda := ronda := RondaDeTruco cartasMano: cartasDeMano cartasPie: cartasDePie.
	ronda enfrentamientoManoCon: anchoDeEspada pieCon: anchoDeBasto.
	ronda enfrentamientoManoCon: sieteDeOro pieCon: dosDeOro.
	
	self assert: 2 equals: (ronda enfrentamientosJugados).
	self assert: ronda hayGanador.
	self assert: (ronda ganador) equals: (RondaDeTruco mano).
	
	! !

!testRun: #RondaDeTrucoTest #test01SeArmaUnaRondaSinEmpezar stamp: 'CD 7/5/2021 21:25:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test02SeJuegaPrimerEnfrentamientoEmpezandoMano stamp: 'CD 7/5/2021 21:25:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test03SeJuegaSegundoEnfrentamientoHabiendoEmpateEnPrimero stamp: 'CD 7/5/2021 21:25:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test04SeJuegaSegundoEnfrentamientoHabiendoGanadoPieElAnterior stamp: 'CD 7/5/2021 21:25:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test05HayGanadorDeRondaCuandoNoHayEmpateEnSegundoYHayEmpateEnPrimero stamp: 'CD 7/5/2021 21:25:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test06HayGanadorDeRondaCuandoJugadorGanaPrimerySegundoEnfrentamiento stamp: 'CD 7/5/2021 21:25:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test07HayGanadorDeRondaAlTercerEnfrentamiento stamp: 'CD 7/5/2021 21:25:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test08NoSePuedeSeguirJugandoRondaCuandoHayGanador stamp: 'CD 7/5/2021 21:25:49'!
PASSED!
!RondaDeTruco methodsFor: 'turno' stamp: 'CD 7/5/2021 21:27:03'!
empiezaTurnoMano

	^ self juegoNoEmpezo or: [self huboEmpateEnPrimerEnfrentamiento ]! !
!RondaDeTruco methodsFor: 'turno' stamp: 'CD 7/5/2021 21:27:03' prior: 50866069!
aQuienLeTocaEmpezar

	^ (self empiezaTurnoMano) ifTrue: [RondaDeTruco mano] ifFalse: [self ganadorEnUltimoEnfrentamiento].! !

----QUIT----(5 July 2021 21:29:11) CuisUniversity-4532.image priorSource: 17033823!