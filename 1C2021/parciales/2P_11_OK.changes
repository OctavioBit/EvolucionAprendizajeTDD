

----QUIT----(9 March 2021 14:58:42) CuisUniversity-4532.image priorSource: 13044060!

----STARTUP---- (9 March 2021 14:58:43) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4532.image!


----QUIT----(9 March 2021 14:58:43) CuisUniversity-4532.image priorSource: 16885479!

----STARTUP---- (10 May 2021 17:19:00) as /home/lbiglieri/Downloads/build/CuisUniversity/linux64/CuisUniversity-4532.image!


----QUIT----(10 May 2021 17:19:31) CuisUniversity-4532.image priorSource: 16885703!

----STARTUP---- (5 July 2021 16:57:35) as /home/lbiglieri/Downloads/build/CuisUniversity/Parcial2/CuisUniversity-4532.image!


----QUIT----(5 July 2021 16:57:51) CuisUniversity-4532.image priorSource: 16885915!

----STARTUP---- (5 July 2021 17:31:54) as /home/lbiglieri/Downloads/build/CuisUniversity/Parcial2/CuisUniversity-4532.image!


----End fileIn of /home/lbiglieri/Downloads/build/CuisUniversity/Parcial2/ISW1-2021-1C-2doParcial.st----!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'LB 7/5/2021 17:32:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'LB 7/5/2021 17:32:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'LB 7/5/2021 17:32:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'LB 7/5/2021 17:32:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'LB 7/5/2021 17:32:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'LB 7/5/2021 17:32:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'LB 7/5/2021 17:32:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'LB 7/5/2021 17:32:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'LB 7/5/2021 17:32:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'LB 7/5/2021 17:32:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'LB 7/5/2021 17:32:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'LB 7/5/2021 17:32:42'!
ERROR!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'LB 7/5/2021 17:32:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'LB 7/5/2021 17:32:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'LB 7/5/2021 17:32:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'LB 7/5/2021 17:32:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'LB 7/5/2021 17:32:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'LB 7/5/2021 17:32:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInválida stamp: 'LB 7/5/2021 17:32:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'LB 7/5/2021 17:32:42'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'LB 7/5/2021 17:32:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'LB 7/5/2021 17:32:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'LB 7/5/2021 17:32:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'LB 7/5/2021 17:32:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'LB 7/5/2021 17:32:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'LB 7/5/2021 17:32:44'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'LB 7/5/2021 17:32:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'LB 7/5/2021 17:32:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'LB 7/5/2021 17:32:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'LB 7/5/2021 17:32:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'LB 7/5/2021 17:32:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'LB 7/5/2021 17:32:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'LB 7/5/2021 17:32:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'LB 7/5/2021 17:32:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'LB 7/5/2021 17:32:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'LB 7/5/2021 17:32:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'LB 7/5/2021 17:32:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'LB 7/5/2021 17:32:45'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInválida stamp: 'LB 7/5/2021 17:32:45'!
PASSED!

TestCase subclass: #RondaTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'LB 7/5/2021 17:33:49'!
TestCase subclass: #RondaTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'LB 7/5/2021 17:39:38'!
TestCase subclass: #RondaTest
	instanceVariableNames: 'mano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Player category: 'ISW1-2021-1C-2doParcial' stamp: 'LB 7/5/2021 17:39:46'!
Object subclass: #Player
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'LB 7/5/2021 17:39:54'!
TestCase subclass: #RondaTest
	instanceVariableNames: 'mano pie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'LB 7/5/2021 17:39:57'!
TestCase subclass: #RondaTest
	instanceVariableNames: 'mano pie ronda'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'LB 7/5/2021 17:40:00'!
Object subclass: #Ronda
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaTest methodsFor: 'no messages' stamp: 'LB 7/5/2021 17:39:36'!
test01_RondaTieneUnUnicoJugadorManoYUnUnicoJugadorPie
	mano := Player new.
	pie := Player new.
	ronda := Ronda conMano: mano yPie: pie.
	
	self assert: mano equals: ronda mano.
	self assert: pie equals: ronda pie.
	
	! !

!testRun: #RondaTest #test01_RondaTieneUnUnicoJugadorManoYUnUnicoJugadorPie stamp: 'LB 7/5/2021 17:40:07'!
ERROR!
!Ronda class methodsFor: 'instance creation' stamp: 'LB 7/5/2021 17:40:14'!
conMano: aPlayer yPie: aPlayer2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeConMano: aPlayer yPie: aPlayer2 ! !
!Ronda class methodsFor: 'instance creation' stamp: 'LB 7/5/2021 17:40:21' prior: 50860062!
conMano: aPlayer yPie: aPlayer2 

	^self new initializeConMano: aPlayer yPie: aPlayer2 ! !
!Ronda class methodsFor: 'instance creation' stamp: 'LB 7/5/2021 17:40:45' prior: 50860071!
conMano: jugadorMano yPie: jugadorPie 

	^self new initializeConMano: jugadorMano yPie: jugadorPie ! !

!testRun: #RondaTest #test01_RondaTieneUnUnicoJugadorManoYUnUnicoJugadorPie stamp: 'LB 7/5/2021 17:40:46'!
ERROR!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'LB 7/5/2021 17:41:03'!
Object subclass: #Ronda
	instanceVariableNames: 'jugadorMano_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'LB 7/5/2021 17:41:03'!
Object subclass: #Ronda
	instanceVariableNames: 'jugadorMano_CHANGE_ME jugadorPie_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'initialization' stamp: 'LB 7/5/2021 17:41:03'!
initializeConMano: jugadorMano yPie: jugadorPie 
	self shouldBeImplemented.
	jugadorMano_CHANGE_ME := jugadorMano.
	jugadorPie_CHANGE_ME := jugadorPie.! !

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'LB 7/5/2021 17:41:15'!
Object subclass: #Ronda
	instanceVariableNames: 'jugadorMano_CHANGE_ME jugadorPie_CHANGE_ME mano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'LB 7/5/2021 17:41:18'!
Object subclass: #Ronda
	instanceVariableNames: 'jugadorMano_CHANGE_ME jugadorPie_CHANGE_ME mano pie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'initialization' stamp: 'LB 7/5/2021 17:41:13' prior: 50860103!
initializeConMano: jugadorMano yPie: jugadorPie 

	mano := jugadorMano.
	pie := jugadorPie.! !

TestCase subclass: #RondaTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'LB 7/5/2021 17:41:27'!
TestCase subclass: #RondaTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 17:41:35' prior: 50860049!
test01_RondaTieneUnUnicoJugadorManoYUnUnicoJugadorPie
	| mano pie ronda |
	mano := Player new.
	pie := Player new.
	ronda := Ronda conMano: mano yPie: pie.
	
	self assert: mano equals: ronda mano.
	self assert: pie equals: ronda pie.
	
	! !

!testRun: #RondaTest #test01_RondaTieneUnUnicoJugadorManoYUnUnicoJugadorPie stamp: 'LB 7/5/2021 17:41:36'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 17:41:42'!
mano
	self shouldBeImplemented.
	^mano! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 17:41:45' prior: 50860160!
mano

	^mano! !

!testRun: #RondaTest #test01_RondaTieneUnUnicoJugadorManoYUnUnicoJugadorPie stamp: 'LB 7/5/2021 17:41:46'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 17:41:51'!
pie
	self shouldBeImplemented.
	^pie! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 17:41:53' prior: 50860172!
pie

	^pie! !

!testRun: #RondaTest #test01_RondaTieneUnUnicoJugadorManoYUnUnicoJugadorPie stamp: 'LB 7/5/2021 17:41:54'!
PASSED!

!testRun: #RondaTest #test01_RondaTieneUnUnicoJugadorManoYUnUnicoJugadorPie stamp: 'LB 7/5/2021 17:41:54'!
PASSED!

!testRun: #RondaTest #test01_RondaTieneUnUnicoJugadorManoYUnUnicoJugadorPie stamp: 'LB 7/5/2021 17:41:56'!
PASSED!

!testRun: #RondaTest #test01_RondaTieneUnUnicoJugadorManoYUnUnicoJugadorPie stamp: 'LB 7/5/2021 17:41:56'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 17:45:20'!
test01_CadaJugadorIniciaCon3CartasDeTruco
	| mano pie ronda |
	mano := Player new.
	pie := Player new.
	ronda := Ronda conMano: mano yPie: pie.
	
	self assert: ronda mano cantidadCartasPorJugar equals: 3.
	self assert: ronda pie cantidadCartasPorJugar equals: 3.
	
	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 17:45:28'!
test02_CadaJugadorIniciaCon3CartasDeTruco
	| mano pie ronda |
	mano := Player new.
	pie := Player new.
	ronda := Ronda conMano: mano yPie: pie.
	
	self assert: ronda mano cantidadCartasPorJugar equals: 3.
	self assert: ronda pie cantidadCartasPorJugar equals: 3.
	
	! !

!methodRemoval: RondaTest #test01_CadaJugadorIniciaCon3CartasDeTruco stamp: 'LB 7/5/2021 17:45:28'!
test01_CadaJugadorIniciaCon3CartasDeTruco
	| mano pie ronda |
	mano := Player new.
	pie := Player new.
	ronda := Ronda conMano: mano yPie: pie.
	
	self assert: ronda mano cantidadCartasPorJugar equals: 3.
	self assert: ronda pie cantidadCartasPorJugar equals: 3.
	
	!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 17:46:26' prior: 50860205!
test02_CadaJugadorIniciaCon3CartasDeTruco
	| mano pie ronda |
	mano := Player new.
	pie := Player new.
	ronda := Ronda conMano: mano yPie: pie.
	
	self assert: ronda mano cartas equals: 3.
	self assert: ronda pie cartas equals: 3.
	
	! !

!testRun: #RondaTest #test02_CadaJugadorIniciaCon3CartasDeTruco stamp: 'LB 7/5/2021 17:46:37'!
ERROR!

!testRun: #RondaTest #test02_CadaJugadorIniciaCon3CartasDeTruco stamp: 'LB 7/5/2021 17:46:37'!
ERROR!

!testRun: #RondaTest #test02_CadaJugadorIniciaCon3CartasDeTruco stamp: 'LB 7/5/2021 17:52:27'!
ERROR!

!testRun: #RondaTest #test02_CadaJugadorIniciaCon3CartasDeTruco stamp: 'LB 7/5/2021 17:52:42'!
ERROR!
!Player methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 17:53:27'!
cartas
	self shouldBeImplemented.! !
!Player methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 17:53:36' prior: 50860251!
cartas
	^3! !

!testRun: #RondaTest #test02_CadaJugadorIniciaCon3CartasDeTruco stamp: 'LB 7/5/2021 17:53:37'!
PASSED!

!testRun: #RondaTest #test01_RondaTieneUnUnicoJugadorManoYUnUnicoJugadorPie stamp: 'LB 7/5/2021 17:53:37'!
PASSED!

!testRun: #RondaTest #test02_CadaJugadorIniciaCon3CartasDeTruco stamp: 'LB 7/5/2021 17:53:37'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 17:56:14' prior: 50860228!
test02_CadaJugadorIniciaCon3CartasDeTruco
	| mano pie ronda |
	mano := Player new.
	pie := Player new.
	ronda := Ronda conMano: mano yPie: pie.
	
	self assert: ronda mano cartas size equals: 3.
	self assert: (ronda mano cartas do: [:carta | carta class = CartaDeTruco]).
	
	self assert: ronda pie cartas size equals: 3.
	self assert: (ronda pie cartas do: [:carta | carta class = CartaDeTruco]).
	
	! !

!testRun: #RondaTest #test02_CadaJugadorIniciaCon3CartasDeTruco stamp: 'LB 7/5/2021 17:56:16'!
ERROR!
!Player methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 17:57:59' prior: 50860255!
cartas
	^OrderedCollection new
		with: CartaDeTruco anchoDeEspada;
		with: CartaDeTruco anchoDeEspada;
		with: CartaDeTruco anchoDeEspada.! !

!testRun: #RondaTest #test01_RondaTieneUnUnicoJugadorManoYUnUnicoJugadorPie stamp: 'LB 7/5/2021 17:58:00'!
PASSED!

!testRun: #RondaTest #test02_CadaJugadorIniciaCon3CartasDeTruco stamp: 'LB 7/5/2021 17:58:00'!
ERROR!

!testRun: #RondaTest #test02_CadaJugadorIniciaCon3CartasDeTruco stamp: 'LB 7/5/2021 17:58:00'!
ERROR!
!Player methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 17:58:14' prior: 50860288!
cartas
	^OrderedCollection new
		add: CartaDeTruco anchoDeEspada;
		add: CartaDeTruco anchoDeEspada;
		add: CartaDeTruco anchoDeEspada.! !

!testRun: #RondaTest #test01_RondaTieneUnUnicoJugadorManoYUnUnicoJugadorPie stamp: 'LB 7/5/2021 17:58:14'!
PASSED!

!testRun: #RondaTest #test02_CadaJugadorIniciaCon3CartasDeTruco stamp: 'LB 7/5/2021 17:58:14'!
ERROR!

!testRun: #RondaTest #test02_CadaJugadorIniciaCon3CartasDeTruco stamp: 'LB 7/5/2021 17:58:14'!
ERROR!
!Player methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 17:58:31' prior: 50860306!
cartas
	^OrderedCollection new
		add: CartaDeTruco anchoDeEspada;
		add: CartaDeTruco anchoDeEspada;
		add: CartaDeTruco anchoDeEspada;
		yourself.! !

!testRun: #RondaTest #test01_RondaTieneUnUnicoJugadorManoYUnUnicoJugadorPie stamp: 'LB 7/5/2021 17:58:32'!
PASSED!

!testRun: #RondaTest #test02_CadaJugadorIniciaCon3CartasDeTruco stamp: 'LB 7/5/2021 17:58:32'!
ERROR!

!testRun: #RondaTest #test02_CadaJugadorIniciaCon3CartasDeTruco stamp: 'LB 7/5/2021 17:58:32'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 17:59:22' prior: 50860269!
test02_CadaJugadorIniciaCon3CartasDeTruco
	| mano pie ronda |
	mano := Player new.
	pie := Player new.
	ronda := Ronda conMano: mano yPie: pie.
	
	self assert: ronda mano cartas size equals: 3.
	self assert: (ronda mano cartas at: 1  class = CartaDeTruco).
	
	self assert: ronda pie cartas size equals: 3.
	self assert: (ronda pie cartas at: 1  class = CartaDeTruco).
	
	! !

!testRun: #RondaTest #test02_CadaJugadorIniciaCon3CartasDeTruco stamp: 'LB 7/5/2021 17:59:23'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 17:59:47' prior: 50860342!
test02_CadaJugadorIniciaCon3CartasDeTruco
	| mano pie ronda |
	mano := Player new.
	pie := Player new.
	ronda := Ronda conMano: mano yPie: pie.
	
	self assert: ronda mano cartas size equals: 3.
	self assert: ((ronda mano cartas at: 1) class = CartaDeTruco).
	
	self assert: ronda pie cartas size equals: 3.
	self assert: ((ronda pie cartas at: 1)  class = CartaDeTruco).
	
	! !

!testRun: #RondaTest #test02_CadaJugadorIniciaCon3CartasDeTruco stamp: 'LB 7/5/2021 17:59:47'!
PASSED!

!testRun: #RondaTest #test01_RondaTieneUnUnicoJugadorManoYUnUnicoJugadorPie stamp: 'LB 7/5/2021 17:59:47'!
PASSED!

!testRun: #RondaTest #test02_CadaJugadorIniciaCon3CartasDeTruco stamp: 'LB 7/5/2021 17:59:47'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 17:59:59' prior: 50860360!
test02_CadaJugadorIniciaCon3CartasDeTruco
	| mano pie ronda |
	mano := Player new.
	pie := Player new.
	ronda := Ronda conMano: mano yPie: pie.
	
	self assert: ronda mano cartas size equals: 3.
	self assert: ((ronda mano cartas at: 1) class = CartaDeTruco).
	self assert: ((ronda mano cartas at: 2) class = CartaDeTruco).
	self assert: ((ronda mano cartas at: 3) class = CartaDeTruco).
	
	self assert: ronda pie cartas size equals: 3.
	self assert: ((ronda pie cartas at: 1)  class = CartaDeTruco).
	self assert: ((ronda pie cartas at: 2)  class = CartaDeTruco).
	self assert: ((ronda pie cartas at: 3)  class = CartaDeTruco).
	
	! !

!testRun: #RondaTest #test02_CadaJugadorIniciaCon3CartasDeTruco stamp: 'LB 7/5/2021 18:00:00'!
PASSED!

!testRun: #RondaTest #test01_RondaTieneUnUnicoJugadorManoYUnUnicoJugadorPie stamp: 'LB 7/5/2021 18:00:00'!
PASSED!

!testRun: #RondaTest #test02_CadaJugadorIniciaCon3CartasDeTruco stamp: 'LB 7/5/2021 18:00:00'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:01:21'!
test03_CadaJugadorIniciaCon3CartasDeTrucoDiferentes
	| mano pie ronda |
	mano := Player new.
	pie := Player new.
	ronda := Ronda conMano: mano yPie: pie.
	
	self assert: ronda mano cartas size equals: 3.
	self assert: ((ronda mano cartas at: 1) class = CartaDeTruco).
	self assert: ((ronda mano cartas at: 2) class = CartaDeTruco).
	self assert: ((ronda mano cartas at: 3) class = CartaDeTruco).
	
	self assert: ronda pie cartas size equals: 3.
	self assert: ((ronda pie cartas at: 1)  class = CartaDeTruco).
	self assert: ((ronda pie cartas at: 2)  class = CartaDeTruco).
	self assert: ((ronda pie cartas at: 3)  class = CartaDeTruco).
	
	! !

!testRun: #RondaTest #test03_CadaJugadorIniciaCon3CartasDeTrucoDiferentes stamp: 'LB 7/5/2021 18:01:21'!
PASSED!

!testRun: #RondaTest #test01_RondaTieneUnUnicoJugadorManoYUnUnicoJugadorPie stamp: 'LB 7/5/2021 18:01:21'!
PASSED!

!testRun: #RondaTest #test02_CadaJugadorIniciaCon3CartasDeTruco stamp: 'LB 7/5/2021 18:01:21'!
PASSED!

!testRun: #RondaTest #test03_CadaJugadorIniciaCon3CartasDeTrucoDiferentes stamp: 'LB 7/5/2021 18:01:21'!
PASSED!

----STARTUP---- (5 July 2021 18:03:03) as /home/lbiglieri/Downloads/build/CuisUniversity/Parcial2/CuisUniversity-4532.image!


----End fileIn of /home/lbiglieri/Downloads/build/CuisUniversity/Parcial2/ISW1-2021-1C-2doParcial.st----!

----SNAPSHOT----(5 July 2021 18:03:34) CuisUniversity-4532.image priorSource: 16886127!

TestCase subclass: #RondaTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'LB 7/5/2021 18:03:38'!
TestCase subclass: #RondaTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'LB 7/5/2021 18:04:27'!
Object subclass: #Ronda
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaTest methodsFor: 'no messages' stamp: 'LB 7/5/2021 18:04:46'!
test01_RondaTieneManoYPieDistintos
	
	| ronda |
	ronda := Ronda new.
	
	self deny: ronda mano equals: ronda pie.! !

!testRun: #RondaTest #test01_RondaTieneManoYPieDistintos stamp: 'LB 7/5/2021 18:04:50'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:05:08' prior: 50859889!
test01_RondaTieneManoYPieDistintos
	
	| ronda |
	ronda := Ronda new.
	
	self deny: (ronda mano = ronda pie).! !

!testRun: #RondaTest #test01_RondaTieneManoYPieDistintos stamp: 'LB 7/5/2021 18:05:09'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:05:15'!
mano
	self shouldBeImplemented.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:05:21' prior: 50859908!
mano
	^'mano'! !

!testRun: #RondaTest #test01_RondaTieneManoYPieDistintos stamp: 'LB 7/5/2021 18:05:22'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:05:26'!
pie
	self shouldBeImplemented.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:05:32' prior: 50859918!
pie
	^'pie'! !

!testRun: #RondaTest #test01_RondaTieneManoYPieDistintos stamp: 'LB 7/5/2021 18:05:33'!
PASSED!

!testRun: #RondaTest #test01_RondaTieneManoYPieDistintos stamp: 'LB 7/5/2021 18:05:33'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:11:14'!
test02_ManoIniciaCon3CartasDeTrucoDistintas	

	| ronda carta1 carta2 carta3 |
	ronda := Ronda new.
	
	self assert: ronda mano size equals: 3.
	carta1 := ronda mano at: 1.
	carta2 := ronda mano at: 2.
	carta3 := ronda mano at: 3.
	
	self deny: (carta1 = carta2).
	self deny: (carta1 = carta3).
	self deny: (carta2 = carta3).! !

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:11:19'!
FAILURE!

Bag with: 1 with: 2 with: 3 !

bag at: 1!

bag := Bag with: 1 with: 2 with: 3.
bag at: 1!

set !

set := Set with: 1 with: 2 with: 3.
set !

set := Set with: 1 with: 2 with: 3.
set atRandom  !

set := Set with: 1 with: 2 with: 3.
set atRandom  !

set at:1 !

set := Set with: 1 with: 2 with: 3.
set at:1 !
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:15:12' prior: 50859912!
mano
	^OrderedCollection 
		with: 	CartaDeTruco anchoDeEspada 
		with: CartaDeTruco anchoDeBasto 
		with: CartaDeTruco sieteDeEspada.! !

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:15:13'!
PASSED!

!testRun: #RondaTest #test01_RondaTieneManoYPieDistintos stamp: 'LB 7/5/2021 18:15:13'!
PASSED!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:15:13'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:15:31'!
test03_PieIniciaCon3CartasDeTrucoDistintas	

	| ronda carta1 carta2 carta3 |
	ronda := Ronda new.
	
	self assert: ronda pie size equals: 3.
	carta1 := ronda pie at: 1.
	carta2 := ronda pie at: 2.
	carta3 := ronda pie at: 3.
	
	self deny: (carta1 = carta2).
	self deny: (carta1 = carta3).
	self deny: (carta2 = carta3).! !

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:15:32'!
PASSED!

!testRun: #RondaTest #test01_RondaTieneManoYPieDistintos stamp: 'LB 7/5/2021 18:15:32'!
PASSED!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:15:32'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:15:32'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:15:39'!
PASSED!

!testRun: #RondaTest #test01_RondaTieneManoYPieDistintos stamp: 'LB 7/5/2021 18:15:39'!
PASSED!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:15:39'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:15:39'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:15:54'!
PASSED!

!testRun: #RondaTest #test01_RondaTieneManoYPieDistintos stamp: 'LB 7/5/2021 18:15:54'!
PASSED!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:15:54'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:15:54'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:16:08' prior: 50859974!
test03_PieIniciaCon3CartasDeTrucoDistintas	

	| ronda carta1 carta2 carta3 |
	ronda := Ronda new.
	
	self assert: ronda pie size equals: 3.
	carta1 := ronda pie at: 1.
	carta2 := ronda pie at: 2.
	carta3 := ronda pie at: 3.
	
	self deny: (carta1 = carta2).
	self deny: (carta1 = carta3).
	self deny: (carta2 = carta3).! !

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:16:09'!
PASSED!

!testRun: #RondaTest #test01_RondaTieneManoYPieDistintos stamp: 'LB 7/5/2021 18:16:09'!
PASSED!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:16:09'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:16:09'!
PASSED!

	| ronda carta1 carta2 carta3 |
	ronda := Ronda new.
	ronda pie. !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:16:37' prior: 50860026!
test03_PieIniciaCon3CartasDeTrucoDistintas	

	| ronda carta1 carta2 carta3 |
	ronda := Ronda new.
	
	self assert: (ronda pie size) equals: 3.
	carta1 := ronda pie at: 1.
	carta2 := ronda pie at: 2.
	carta3 := ronda pie at: 3.
	
	self deny: (carta1 = carta2).
	self deny: (carta1 = carta3).
	self deny: (carta2 = carta3).! !

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:16:38'!
PASSED!

!testRun: #RondaTest #test01_RondaTieneManoYPieDistintos stamp: 'LB 7/5/2021 18:16:38'!
PASSED!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:16:38'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:16:38'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:17:02' prior: 50860054!
test03_PieIniciaCon3CartasDeTrucoDistintas	

	| ronda carta1 carta2 carta3 |
	ronda := Ronda new.
	
	self assert: ronda pie size equals: 3.
	carta1 := ronda pie at: 1.
	carta2 := ronda pie at: 2.
	carta3 := ronda pie at: 3.
	
	self deny: (carta1 = carta2).
	self deny: (carta1 = carta3).
	self deny: (carta2 = carta3).! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:17:28' prior: 50860080!
test03_PieIniciaCon3CartasDeTrucoDistintas	

	| ronda carta1 carta2 carta3 |
	ronda := Ronda new.
	
	self assert: ronda pie size equals: 3.
	carta1 := ronda pie at: 1.
	carta2 := ronda pie at: 2.
	carta3 := ronda pie at: 3.
	
	self assert: 	carta1 class equals: CartaDeTruco.	
	self assert: 	carta2 class equals: CartaDeTruco.	
	self assert: 	carta3 class equals: CartaDeTruco.	
	self deny: (carta1 = carta2).
	self deny: (carta1 = carta3).
	self deny: (carta2 = carta3).! !

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:17:29'!
FAILURE!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:17:43' prior: 50859931!
test02_ManoIniciaCon3CartasDeTrucoDistintas	

	| ronda carta1 carta2 carta3 |
	ronda := Ronda new.
	
	self assert: ronda mano size equals: 3.
	carta1 := ronda mano at: 1.
	carta2 := ronda mano at: 2.
	carta3 := ronda mano at: 3.
	
	self assert: 	carta1 class equals: CartaDeTruco.	
	self assert: 	carta2 class equals: CartaDeTruco.	
	self assert: 	carta3 class equals: CartaDeTruco.	
	self deny: (carta1 = carta2).
	self deny: (carta1 = carta3).
	self deny: (carta2 = carta3).! !

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:17:44'!
PASSED!

!testRun: #RondaTest #test01_RondaTieneManoYPieDistintos stamp: 'LB 7/5/2021 18:17:44'!
PASSED!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:17:44'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:17:44'!
FAILURE!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:17:44'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:17:55' prior: 50859922!
pie
	^OrderedCollection 
		with: 	CartaDeTruco anchoDeEspada 
		with: CartaDeTruco anchoDeBasto 
		with: CartaDeTruco sieteDeEspada.! !

!testRun: #RondaTest #test01_RondaTieneManoYPieDistintos stamp: 'LB 7/5/2021 18:17:57'!
FAILURE!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:17:57'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:17:57'!
PASSED!

!testRun: #RondaTest #test01_RondaTieneManoYPieDistintos stamp: 'LB 7/5/2021 18:17:57'!
FAILURE!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:18:12'!
PASSED!

!testRun: #RondaTest #test01_RondaTieneManoYPieDistintos stamp: 'LB 7/5/2021 18:18:12'!
FAILURE!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:18:12'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:18:12'!
PASSED!

!testRun: #RondaTest #test01_RondaTieneManoYPieDistintos stamp: 'LB 7/5/2021 18:18:12'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:18:45' prior: 50860150!
pie
	^OrderedCollection 
		with: 	CartaDeTruco anchoDeBasto 
		with: CartaDeTruco sieteDeOro 
		with: CartaDeTruco sieteDeEspada.! !

!testRun: #RondaTest #test01_RondaTieneManoYPieDistintos stamp: 'LB 7/5/2021 18:18:45'!
PASSED!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:18:45'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:18:45'!
PASSED!

| ronda |
	ronda := Ronda new.
	
	ronda mano anySatisfy: [:carta | ronda pie includes: 		carta ]!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:22:11'!
test04_PieYManoInicianCon3CartasDeTrucoDistintas	

	| ronda |
	ronda := Ronda new.
	
	self deny: (ronda mano anySatisfy: [:carta | ronda pie includes: 		carta ])! !

!testRun: #RondaTest #test04_PieYManoInicianCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:22:13'!
FAILURE!

CartaDeTruco new !

CartaDeTruco new !

mazo := Bag.
CartaDeTruco palos do: [:unPalo |
	mazo add: (CartaDeTruco palo: unPalo numero: 1).
].
mazo!

mazo := Bag.
CartaDeTruco palos do: [:unPalo |
	mazo put: (CartaDeTruco palo: unPalo numero: 1).
].
mazo!

mazo := Bag new.
CartaDeTruco palos do: [:unPalo |
	mazo add: (CartaDeTruco palo: unPalo numero: 1).
].
mazo!

mazo := Bag new.
CartaDeTruco palos do: [:unPalo |
	mazo add: (CartaDeTruco palo: unPalo numero: 1).
].
mazo atRandom  !

!testRun: #RondaTest #test04_PieYManoInicianCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:30:07'!
FAILURE!

!methodRemoval: RondaTest #test04_PieYManoInicianCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:30:51'!
test04_PieYManoInicianCon3CartasDeTrucoDistintas	

	| ronda |
	ronda := Ronda new.
	
	self deny: (ronda mano anySatisfy: [:carta | ronda pie includes: 		carta ])!
!RondaTest class methodsFor: 'no messages' stamp: 'LB 7/5/2021 18:32:04'!
withMano: mano pie: pie

	^ self new initializeWithMano: mano pie: pie.! !

!methodRemoval: RondaTest class #withMano:pie: stamp: 'LB 7/5/2021 18:32:23'!
withMano: mano pie: pie

	^ self new initializeWithMano: mano pie: pie.!
!Ronda class methodsFor: 'no messages' stamp: 'LB 7/5/2021 18:32:27'!
withMano: mano pie: pie

	^ self new initializeWithMano: mano pie: pie.! !

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'LB 7/5/2021 18:33:00'!
Object subclass: #Ronda
	instanceVariableNames: 'mano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'LB 7/5/2021 18:33:01'!
Object subclass: #Ronda
	instanceVariableNames: 'mano pie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:32:58'!
initializeWithMano: jugadorMano pie: jugadorPie.
	mano := jugadorMano.
	pie := jugadorPie.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:33:26' prior: 50859899!
test01_RondaTieneManoYPieDistintos
	
	| ronda |
	ronda := Ronda withMano: 'mano' pie: 'pie'.
	
	self deny: (ronda mano = ronda pie).! !

!testRun: #RondaTest #test01_RondaTieneManoYPieDistintos stamp: 'LB 7/5/2021 18:33:27'!
PASSED!

!testRun: #RondaTest #test01_RondaTieneManoYPieDistintos stamp: 'LB 7/5/2021 18:33:27'!
PASSED!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:33:27'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:33:27'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:33:34' prior: 50860115!
test02_ManoIniciaCon3CartasDeTrucoDistintas	

	| ronda carta1 carta2 carta3 |
	ronda := Ronda withMano: 'mano' pie: 'pie'.
	
	self assert: ronda mano size equals: 3.
	carta1 := ronda mano at: 1.
	carta2 := ronda mano at: 2.
	carta3 := ronda mano at: 3.
	
	self assert: 	carta1 class equals: CartaDeTruco.	
	self assert: 	carta2 class equals: CartaDeTruco.	
	self assert: 	carta3 class equals: CartaDeTruco.	
	self deny: (carta1 = carta2).
	self deny: (carta1 = carta3).
	self deny: (carta2 = carta3).! !

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:33:35'!
PASSED!

!testRun: #RondaTest #test01_RondaTieneManoYPieDistintos stamp: 'LB 7/5/2021 18:33:35'!
PASSED!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:33:35'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:33:35'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:33:39' prior: 50860093!
test03_PieIniciaCon3CartasDeTrucoDistintas	

	| ronda carta1 carta2 carta3 |
	ronda := Ronda withMano: 'mano' pie: 'pie'.
	
	self assert: ronda pie size equals: 3.
	carta1 := ronda pie at: 1.
	carta2 := ronda pie at: 2.
	carta3 := ronda pie at: 3.
	
	self assert: 	carta1 class equals: CartaDeTruco.	
	self assert: 	carta2 class equals: CartaDeTruco.	
	self assert: 	carta3 class equals: CartaDeTruco.	
	self deny: (carta1 = carta2).
	self deny: (carta1 = carta3).
	self deny: (carta2 = carta3).! !

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:33:40'!
PASSED!

!testRun: #RondaTest #test01_RondaTieneManoYPieDistintos stamp: 'LB 7/5/2021 18:33:40'!
PASSED!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:33:40'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:33:40'!
PASSED!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:34:03' prior: 50859957!
mano
	^mano! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:34:07' prior: 50860186!
pie
	^pie! !

!testRun: #RondaTest #test01_RondaTieneManoYPieDistintos stamp: 'LB 7/5/2021 18:34:15'!
PASSED!

!testRun: #RondaTest #test01_RondaTieneManoYPieDistintos stamp: 'LB 7/5/2021 18:34:15'!
PASSED!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:34:15'!
FAILURE!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:34:15'!
FAILURE!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:36:54' prior: 50860301!
test02_ManoIniciaCon3CartasDeTrucoDistintas	

	| mano |
	mano := OrderedCollection with: CartaDeTruco anchoDeBasto with: 	CartaDeTruco anchoDeBasto with: CartaDeTruco anchoDeEspada.
	
	self should: [Ronda withMano: mano pie: 'pie']
		raise: Error - MessageNotUnderstood 
		withMessageText: Ronda cartasRepetidasErrorDescription.! !

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:37:12'!
ERROR!
!Ronda class methodsFor: 'error' stamp: 'LB 7/5/2021 18:37:21'!
cartasRepetidasErrorDescription
	self shouldBeImplemented.! !
!Ronda class methodsFor: 'error' stamp: 'LB 7/5/2021 18:37:40' prior: 50860401!
cartasRepetidasErrorDescription
	^'error las cartas no pueden repetirse'! !

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:37:41'!
FAILURE!
!Ronda class methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:38:59' prior: 50860255!
withMano: mano pie: pie
	
	(mano anySatisfy: [:carta | mano occurrencesOf: carta > 1]) ifTrue: [^self error: self cartasRepetidasErrorDescription].
	^ self new initializeWithMano: mano pie: pie.! !

!testRun: #RondaTest #test01_RondaTieneManoYPieDistintos stamp: 'LB 7/5/2021 18:39:01'!
ERROR!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:39:01'!
ERROR!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:39:01'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:39:35' prior: 50860281!
test01_RondaTieneManoYPieDistintos
	
	| ronda mano |
	mano := OrderedCollection with: CartaDeTruco anchoDeBasto with: 	CartaDeTruco anchoDeBasto with: CartaDeTruco anchoDeEspada.
	ronda := Ronda withMano: 'mano' pie: 'pie'.
	
	self deny: (ronda mano = ronda pie).! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:39:40' prior: 50860434!
test01_RondaTieneManoYPieDistintos
	
	| ronda mano |
	mano := OrderedCollection with: CartaDeTruco anchoDeBasto with: 	CartaDeTruco anchoDeBasto with: CartaDeTruco anchoDeEspada.
	ronda := Ronda withMano: mano pie: 'pie'.
	
	self deny: (ronda mano = ronda pie).! !

!testRun: #RondaTest #test01_RondaTieneManoYPieDistintos stamp: 'LB 7/5/2021 18:39:42'!
ERROR!
!Ronda class methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:39:58' prior: 50860415!
withMano: mano pie: pie
	
	(mano anySatisfy: [:carta | (mano occurrencesOf: carta) > 1]) ifTrue: [^self error: self cartasRepetidasErrorDescription].
	^ self new initializeWithMano: mano pie: pie.! !

!testRun: #RondaTest #test01_RondaTieneManoYPieDistintos stamp: 'LB 7/5/2021 18:40:00'!
ERROR!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:40:00'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:40:00'!
FAILURE!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:40:13' prior: 50860446!
test01_RondaTieneManoYPieDistintos
	
	| ronda mano |
	mano := OrderedCollection with: CartaDeTruco anchoDeBasto with: 	CartaDeTruco sieteDeEspada with: CartaDeTruco anchoDeEspada.
	ronda := Ronda withMano: mano pie: 'pie'.
	
	self deny: (ronda mano = ronda pie).! !

!testRun: #RondaTest #test01_RondaTieneManoYPieDistintos stamp: 'LB 7/5/2021 18:40:14'!
PASSED!

!testRun: #RondaTest #test01_RondaTieneManoYPieDistintos stamp: 'LB 7/5/2021 18:40:14'!
PASSED!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:40:14'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:40:14'!
FAILURE!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:40:14'!
FAILURE!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:41:06' prior: 50860333!
test03_PieIniciaCon3CartasDeTrucoDistintas	

	| mano pie |
	mano := OrderedCollection with: CartaDeTruco anchoDeBasto with: 	CartaDeTruco sieteDeEspada with: CartaDeTruco anchoDeEspada.
	pie := OrderedCollection with: CartaDeTruco anchoDeBasto with: 	CartaDeTruco anchoDeBasto with: CartaDeTruco anchoDeEspada.
	
	self should: [Ronda withMano: mano pie: pie]
		raise: Error - MessageNotUnderstood 
		withMessageText: Ronda cartasRepetidasErrorDescription.! !

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:41:12'!
FAILURE!
!Ronda class methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:41:27' prior: 50860461!
withMano: mano pie: pie
	
	(mano anySatisfy: [:carta | (mano occurrencesOf: carta) > 1]) ifTrue: [^self error: self cartasRepetidasErrorDescription].
	(pie anySatisfy: [:carta | (pie occurrencesOf: carta) > 1]) ifTrue: [^self error: self cartasRepetidasErrorDescription].
	^ self new initializeWithMano: mano pie: pie.! !

!testRun: #RondaTest #test01_RondaTieneManoYPieDistintos stamp: 'LB 7/5/2021 18:41:30'!
PASSED!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:41:30'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:41:30'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:41:59'!
test04_ManoyPieDebenTenerCartasDistintas

	| mano pie |
	mano := OrderedCollection with: CartaDeTruco anchoDeBasto with: 	CartaDeTruco sieteDeEspada with: CartaDeTruco anchoDeEspada.
	pie := OrderedCollection with: CartaDeTruco anchoDeBasto with: 	CartaDeTruco sieteDeEspada with: CartaDeTruco anchoDeEspada.
	
	self should: [Ronda withMano: mano pie: pie]
		raise: Error - MessageNotUnderstood 
		withMessageText: Ronda cartasRepetidasErrorDescription.! !

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 18:42:00'!
FAILURE!
!Ronda class methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:42:13' prior: 50860529!
withMano: mano pie: pie
	
	(mano anySatisfy: [:carta | (mano occurrencesOf: carta) > 1]) ifTrue: [^self error: self cartasRepetidasErrorDescription].
	(pie anySatisfy: [:carta | (pie occurrencesOf: carta) > 1]) ifTrue: [^self error: self cartasRepetidasErrorDescription].
	(pie anySatisfy: [:carta | (mano occurrencesOf: carta) > 1]) ifTrue: [^self error: self cartasRepetidasErrorDescription].
	^ self new initializeWithMano: mano pie: pie.! !

!testRun: #RondaTest #test01_RondaTieneManoYPieDistintos stamp: 'LB 7/5/2021 18:42:15'!
PASSED!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:42:15'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:42:15'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 18:42:15'!
FAILURE!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 18:42:15'!
FAILURE!
!Ronda class methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:42:34' prior: 50860573!
withMano: mano pie: pie
	
	(mano anySatisfy: [:carta | (mano occurrencesOf: carta) > 1]) ifTrue: [^self error: self cartasRepetidasErrorDescription].
	(pie anySatisfy: [:carta | (pie occurrencesOf: carta) > 1]) ifTrue: [^self error: self cartasRepetidasErrorDescription].
	(pie anySatisfy: [:carta | mano includes: carta]) ifTrue: [^self error: self cartasRepetidasErrorDescription].
	^ self new initializeWithMano: mano pie: pie.! !

!testRun: #RondaTest #test01_RondaTieneManoYPieDistintos stamp: 'LB 7/5/2021 18:42:35'!
PASSED!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:42:35'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:42:35'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 18:42:35'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:43:28'!
test04_ManoyPieDebenTenerCartasDeTruco

	| mano pie |
	mano := OrderedCollection with: 1 with: 	2 with: 3.
	pie := OrderedCollection with: 4 with: 	5 with: 6.
	
	self should: [Ronda withMano: mano pie: pie]
		raise: Error - MessageNotUnderstood 
		withMessageText: Ronda cartasInvalidasErrorDescription.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:43:36'!
test05_ManoyPieDebenTenerCartasDeTruco

	| mano pie |
	mano := OrderedCollection with: 1 with: 	2 with: 3.
	pie := OrderedCollection with: 4 with: 	5 with: 6.
	
	self should: [Ronda withMano: mano pie: pie]
		raise: Error - MessageNotUnderstood 
		withMessageText: Ronda cartasInvalidasErrorDescription.! !

!methodRemoval: RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 18:43:36'!
test04_ManoyPieDebenTenerCartasDeTruco

	| mano pie |
	mano := OrderedCollection with: 1 with: 	2 with: 3.
	pie := OrderedCollection with: 4 with: 	5 with: 6.
	
	self should: [Ronda withMano: mano pie: pie]
		raise: Error - MessageNotUnderstood 
		withMessageText: Ronda cartasInvalidasErrorDescription.!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 18:43:37'!
ERROR!
!Ronda class methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:43:42'!
cartasInvalidasErrorDescription
	self shouldBeImplemented.! !
!Ronda class methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:43:54' prior: 50860675!
cartasInvalidasErrorDescription
	^'Cartas invalidas'! !

!testRun: #RondaTest #test01_RondaTieneManoYPieDistintos stamp: 'LB 7/5/2021 18:43:55'!
PASSED!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:43:55'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:43:55'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 18:43:55'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 18:43:55'!
FAILURE!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 18:43:55'!
FAILURE!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 18:43:57'!
FAILURE!
!Ronda class methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:44:53' prior: 50860606!
withMano: mano pie: pie
	
	(mano anySatisfy: [:carta | (mano occurrencesOf: carta) > 1]) ifTrue: [^self error: self cartasRepetidasErrorDescription].
	(pie anySatisfy: [:carta | (pie occurrencesOf: carta) > 1]) ifTrue: [^self error: self cartasRepetidasErrorDescription].
	(pie anySatisfy: [:carta | mano includes: carta]) ifTrue: [^self error: self cartasRepetidasErrorDescription].
	(mano anySatisfy: [:carta | carta class ~= CartaDeTruco]) ifTrue: [^self error: self cartasInvalidasErrorDescription ].
	(pie anySatisfy: [:carta | carta class ~= CartaDeTruco]) ifTrue: [^self error: self cartasInvalidasErrorDescription].
	^ self new initializeWithMano: mano pie: pie.! !

!testRun: #RondaTest #test01_RondaTieneManoYPieDistintos stamp: 'LB 7/5/2021 18:44:54'!
ERROR!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:44:54'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:44:54'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 18:44:54'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 18:44:54'!
PASSED!

!testRun: #RondaTest #test01_RondaTieneManoYPieDistintos stamp: 'LB 7/5/2021 18:44:54'!
ERROR!

!methodRemoval: RondaTest #test01_RondaTieneManoYPieDistintos stamp: 'LB 7/5/2021 18:46:05'!
test01_RondaTieneManoYPieDistintos
	
	| ronda mano |
	mano := OrderedCollection with: CartaDeTruco anchoDeBasto with: 	CartaDeTruco sieteDeEspada with: CartaDeTruco anchoDeEspada.
	ronda := Ronda withMano: mano pie: 'pie'.
	
	self deny: (ronda mano = ronda pie).!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:46:13'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:46:58'!
test06_RondaIniciaEnEnfrentamiento1

	| mano pie |
	mano := OrderedCollection with: 1 with: 	2 with: 3.
	pie := OrderedCollection with: 4 with: 	5 with: 6.
	
	self should: [Ronda withMano: mano pie: pie]
		raise: Error - MessageNotUnderstood 
		withMessageText: Ronda cartasInvalidasErrorDescription.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:50:04'!
test06_RondaIniciaEnEnfrentamiento1ySinCartasJugadas

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	self assert: 1 equals: ronda enfrentamiento.
	self assert: 0 equals: ronda cartasJugadasEnEnfrentamiento.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:50:13'!
test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	self assert: 1 equals: ronda enfrentamiento.
	self assert: 0 equals: ronda cartasJugadasEnEnfrentamiento.! !

!methodRemoval: RondaTest #test06_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 18:50:13'!
test06_RondaIniciaEnEnfrentamiento1ySinCartasJugadas

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	self assert: 1 equals: ronda enfrentamiento.
	self assert: 0 equals: ronda cartasJugadasEnEnfrentamiento.!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 18:50:39'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:50:45'!
enfrentamiento
	self shouldBeImplemented.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:50:50' prior: 50860834!
enfrentamiento
	^1! !

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 18:50:51'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:51:17'!
cartasJugadasEnEnfrentamiento
	self shouldBeImplemented.! !

----SNAPSHOT----(5 July 2021 18:51:29) CuisUniversity-4532.image priorSource: 16902917!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 18:51:33'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:51:40' prior: 50860846!
cartasJugadasEnEnfrentamiento
	^0! !

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 18:51:41'!
PASSED!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:51:41'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:51:41'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 18:51:41'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 18:51:41'!
PASSED!

!testRun: #RondaTest #test06_RondaIniciaEnEnfrentamiento1 stamp: 'LB 7/5/2021 18:51:41'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 18:51:41'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:53:36'!
test07_ManoTiraPimero

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	self should: [ronda pieJuega: (CartaDeTruco oroCon: 4)]
		raise: Error - MessageNotUnderstood
		withMessageText: Ronda noEsTuTurnoErrorDescription.! !

!testRun: #RondaTest #test07_ManoTiraPimero stamp: 'LB 7/5/2021 18:53:39'!
ERROR!
!Ronda class methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:53:44'!
noEsTuTurnoErrorDescription
	self shouldBeImplemented.! !
!Ronda class methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:53:54' prior: 50860905!
noEsTuTurnoErrorDescription
	^'Error es el turno del otro jugador'! !

!testRun: #RondaTest #test07_ManoTiraPimero stamp: 'LB 7/5/2021 18:53:55'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:54:00'!
pieJuega: aCartaDeTruco 
	self shouldBeImplemented.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:54:20' prior: 50860918!
pieJuega: cartaDeTruco 
	^self error: self class noEsTuTurnoErrorDescription.! !

!testRun: #RondaTest #test07_ManoTiraPimero stamp: 'LB 7/5/2021 18:54:20'!
PASSED!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:54:20'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:54:20'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 18:54:20'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 18:54:20'!
PASSED!

!testRun: #RondaTest #test06_RondaIniciaEnEnfrentamiento1 stamp: 'LB 7/5/2021 18:54:20'!
PASSED!

!testRun: #RondaTest #test07_ManoTiraPimero stamp: 'LB 7/5/2021 18:54:20'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 18:54:20'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:54:27'!
test08_ManoTiraPimero

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	self should: [ronda pieJuega: (CartaDeTruco oroCon: 4)]
		raise: Error - MessageNotUnderstood
		withMessageText: Ronda noEsTuTurnoErrorDescription.! !

!methodRemoval: RondaTest #test07_ManoTiraPimero stamp: 'LB 7/5/2021 18:54:27'!
test07_ManoTiraPimero

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	self should: [ronda pieJuega: (CartaDeTruco oroCon: 4)]
		raise: Error - MessageNotUnderstood
		withMessageText: Ronda noEsTuTurnoErrorDescription.!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:55:39'!
test08_ManoSoloPuedeJugarUnaCartaSuya

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	self should: [ronda manoJuega: (CartaDeTruco oroCon: 4)]
		raise: Error - MessageNotUnderstood
		withMessageText: Ronda cartaInvalidaErrorDescription.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:55:47'!
test09_ManoSoloPuedeJugarUnaCartaSuya

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	self should: [ronda manoJuega: (CartaDeTruco oroCon: 4)]
		raise: Error - MessageNotUnderstood
		withMessageText: Ronda cartaInvalidaErrorDescription.! !

!methodRemoval: RondaTest #test08_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 18:55:47'!
test08_ManoSoloPuedeJugarUnaCartaSuya

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	self should: [ronda manoJuega: (CartaDeTruco oroCon: 4)]
		raise: Error - MessageNotUnderstood
		withMessageText: Ronda cartaInvalidaErrorDescription.!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 18:55:48'!
ERROR!
!Ronda class methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:55:52'!
cartaInvalidaErrorDescription
	self shouldBeImplemented.! !
!Ronda class methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:56:09' prior: 50861046!
cartaInvalidaErrorDescription
	^'No tienes esa carta'! !

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 18:56:09'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:56:13'!
manoJuega: aCartaDeTruco 
	self shouldBeImplemented.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 18:56:49' prior: 50861059!
manoJuega: cartaDeTruco 
	(mano includes: cartaDeTruco) ifFalse: [^self error: self class cartaInvalidaErrorDescription]! !

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 18:56:50'!
PASSED!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:56:50'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 18:56:50'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 18:56:50'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 18:56:50'!
PASSED!

!testRun: #RondaTest #test06_RondaIniciaEnEnfrentamiento1 stamp: 'LB 7/5/2021 18:56:50'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 18:56:50'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPimero stamp: 'LB 7/5/2021 18:56:50'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 18:56:50'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:01:02'!
test10_RondaConoceLaCartaJugada

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda manoJuega: (CartaDeTruco oroCon: 1).
	self assert: (CartaDeTruco oroCon: 1) equals: ronda cartaJugada.! !

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 19:01:04'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:01:08'!
cartaJugada
	self shouldBeImplemented.! !

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'LB 7/5/2021 19:01:14'!
Object subclass: #Ronda
	instanceVariableNames: 'mano pie cartaJugada'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:01:13' prior: 50861119!
cartaJugada
	^cartaJugada! !

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 19:01:16'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:01:39' prior: 50861064!
manoJuega: cartaDeTruco 
	(mano includes: cartaDeTruco) ifFalse: [^self error: self class cartaInvalidaErrorDescription].
	cartaJugada := cartaDeTruco.! !

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:01:41'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:01:41'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 19:01:41'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 19:01:41'!
PASSED!

!testRun: #RondaTest #test06_RondaIniciaEnEnfrentamiento1 stamp: 'LB 7/5/2021 19:01:41'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 19:01:41'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPimero stamp: 'LB 7/5/2021 19:01:41'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:01:41'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 19:01:41'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:03:27' prior: 50861099!
test10_RondaConoceLaCartaJugada

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda manoJuega: (CartaDeTruco oroCon: 1).
	self assert: ronda cartasJugadasEnEnfrentamiento includes: (CartaDeTruco oroCon: 1).! !

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'LB 7/5/2021 19:03:44'!
Object subclass: #Ronda
	instanceVariableNames: 'mano pie cartaJugada cartasJugadas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:03:42' prior: 50860857!
cartasJugadasEnEnfrentamiento
	^cartasJugadas! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:04:02' prior: 50861138!
manoJuega: cartaDeTruco 
	(mano includes: cartaDeTruco) ifFalse: [^self error: self class cartaInvalidaErrorDescription].
	cartasJugadas add: cartaDeTruco.! !

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:04:06'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:04:06'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 19:04:06'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 19:04:06'!
PASSED!

!testRun: #RondaTest #test06_RondaIniciaEnEnfrentamiento1 stamp: 'LB 7/5/2021 19:04:06'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 19:04:06'!
FAILURE!

!testRun: #RondaTest #test08_ManoTiraPimero stamp: 'LB 7/5/2021 19:04:06'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:04:06'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 19:04:06'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:04:25' prior: 50860795!
test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	self assert: 1 equals: ronda enfrentamiento.
	self assert: ronda cartasJugadasEnEnfrentamiento isEmpty.! !

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 19:04:26'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:04:50' prior: 50861243!
test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	self assert: 1 equals: ronda enfrentamiento.
	self assert: 0 equals: ronda cartasJugadasEnEnfrentamiento size.! !

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 19:04:51'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:05:15' prior: 50860275!
initializeWithMano: jugadorMano pie: jugadorPie.
	mano := jugadorMano.
	pie := jugadorPie.
	cartasJugadas := OrderedCollection new.! !

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:05:17'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:05:17'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 19:05:17'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 19:05:17'!
PASSED!

!testRun: #RondaTest #test06_RondaIniciaEnEnfrentamiento1 stamp: 'LB 7/5/2021 19:05:17'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 19:05:17'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPimero stamp: 'LB 7/5/2021 19:05:17'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:05:17'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 19:05:17'!
PASSED!

!methodRemoval: Ronda #cartaJugada stamp: 'LB 7/5/2021 19:05:26'!
cartaJugada
	^cartaJugada!

Object subclass: #Ronda
	instanceVariableNames: 'mano pie cartasJugadas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'LB 7/5/2021 19:05:31'!
Object subclass: #Ronda
	instanceVariableNames: 'mano pie cartasJugadas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:05:32'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:05:32'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 19:05:32'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 19:05:32'!
PASSED!

!testRun: #RondaTest #test06_RondaIniciaEnEnfrentamiento1 stamp: 'LB 7/5/2021 19:05:32'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 19:05:32'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPimero stamp: 'LB 7/5/2021 19:05:32'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:05:32'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 19:05:32'!
PASSED!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:05:49'!
mesa
	^cartasJugadas! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:05:49' prior: 50861265!
test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	self assert: 1 equals: ronda enfrentamiento.
	self assert: 0 equals: ronda mesa size.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:05:49' prior: 50861175!
test10_RondaConoceLaCartaJugada

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda manoJuega: (CartaDeTruco oroCon: 1).
	self assert: ronda mesa includes: (CartaDeTruco oroCon: 1).! !

!methodRemoval: Ronda #cartasJugadasEnEnfrentamiento stamp: 'LB 7/5/2021 19:05:49'!
cartasJugadasEnEnfrentamiento
	^cartasJugadas!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:06:36' prior: 50861387!
test10_RondaConoceLaCartaJugada

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda manoJuega: (CartaDeTruco oroCon: 1).
	
	self assert: ronda mesa includes: (CartaDeTruco oroCon: 1).
	self assert: 1 includes:  ronda mesa size.! !

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 19:06:37'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:06:52' prior: 50861408!
test10_RondaConoceLaCartaJugada

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda manoJuega: (CartaDeTruco oroCon: 1).
	
	self assert: ronda mesa includes: (CartaDeTruco oroCon: 1).
	self assert: 1 equals: ronda mesa size.! !

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 19:06:52'!
PASSED!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:06:52'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:06:52'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 19:06:52'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 19:06:52'!
PASSED!

!testRun: #RondaTest #test06_RondaIniciaEnEnfrentamiento1 stamp: 'LB 7/5/2021 19:06:52'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 19:06:52'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPimero stamp: 'LB 7/5/2021 19:06:52'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:06:52'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 19:06:52'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:07:17'!
test11_LuegoDeJugarManoEsTurnoDePie

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda manoJuega: (CartaDeTruco oroCon: 1).
	
	self assert: ronda mesa includes: (CartaDeTruco oroCon: 1).
	self assert: 1 equals: ronda mesa size.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:08:06' prior: 50861479!
test11_LuegoDeJugarManoEsTurnoDePie

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda manoJuega: (CartaDeTruco oroCon: 1).
	
	self assert: #Pie equals: ronda turno.! !

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 19:08:10'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:08:14'!
turno
	self shouldBeImplemented.! !

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'LB 7/5/2021 19:08:22'!
Object subclass: #Ronda
	instanceVariableNames: 'mano pie cartasJugadas turno'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:08:21' prior: 50861517!
turno
	^turno! !

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 19:08:24'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:08:41' prior: 50861206!
manoJuega: cartaDeTruco 
	(mano includes: cartaDeTruco) ifFalse: [^self error: self class cartaInvalidaErrorDescription].
	cartasJugadas add: cartaDeTruco.
	turno := #Pie.! !

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:08:42'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:08:42'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 19:08:42'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 19:08:42'!
PASSED!

!testRun: #RondaTest #test06_RondaIniciaEnEnfrentamiento1 stamp: 'LB 7/5/2021 19:08:42'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 19:08:42'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPimero stamp: 'LB 7/5/2021 19:08:42'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:08:42'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 19:08:42'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 19:08:42'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:09:17'!
test08_ManoTiraPrimero

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	self should: [ronda pieJuega: (CartaDeTruco oroCon: 4)]
		raise: Error - MessageNotUnderstood
		withMessageText: Ronda noEsTuTurnoErrorDescription.! !

!methodRemoval: RondaTest #test08_ManoTiraPimero stamp: 'LB 7/5/2021 19:09:17'!
test08_ManoTiraPimero

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	self should: [ronda pieJuega: (CartaDeTruco oroCon: 4)]
		raise: Error - MessageNotUnderstood
		withMessageText: Ronda noEsTuTurnoErrorDescription.!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:09:32'!
test12_ManoSoloPuedeTirarEnSuTurno

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda manoJuega: (CartaDeTruco oroCon: 1).
	
	self assert: #Pie equals: ronda turno.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:09:59' prior: 50861611!
test12_ManoSoloPuedeTirarEnSuTurno

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda manoJuega: (CartaDeTruco oroCon: 1).

	
	self should: [ronda manoJuega: (CartaDeTruco oroCon: 2)]
		raise: Error - MessageNotUnderstood
		withMessageText: Ronda noEsTuTurnoErrorDescription.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:10:02' prior: 50861628!
test12_ManoSoloPuedeTirarEnSuTurno

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda manoJuega: (CartaDeTruco oroCon: 1).
	
	self should: [ronda manoJuega: (CartaDeTruco oroCon: 2)]
		raise: Error - MessageNotUnderstood
		withMessageText: Ronda noEsTuTurnoErrorDescription.! !

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:10:03'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:10:39' prior: 50861536!
manoJuega: cartaDeTruco 
	(turno = #Mano) ifFalse: [^self error: self class noEsTuTurnoErrorDescription ].
	(mano includes: cartaDeTruco) ifFalse: [^self error: self class cartaInvalidaErrorDescription].
	cartasJugadas add: cartaDeTruco.
	turno := #Pie.! !

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:10:39'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:10:39'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 19:10:39'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 19:10:39'!
PASSED!

!testRun: #RondaTest #test06_RondaIniciaEnEnfrentamiento1 stamp: 'LB 7/5/2021 19:10:39'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 19:10:39'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 19:10:39'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:10:39'!
FAILURE!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 19:10:39'!
ERROR!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 19:10:39'!
ERROR!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:10:39'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:10:50' prior: 50861287!
initializeWithMano: jugadorMano pie: jugadorPie.
	mano := jugadorMano.
	pie := jugadorPie.
	cartasJugadas := OrderedCollection new.
	turno := #Mano.! !

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:10:51'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:10:51'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 19:10:51'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 19:10:51'!
PASSED!

!testRun: #RondaTest #test06_RondaIniciaEnEnfrentamiento1 stamp: 'LB 7/5/2021 19:10:51'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 19:10:51'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 19:10:51'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:10:51'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 19:10:51'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 19:10:51'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:10:51'!
PASSED!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:13:17'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:13:17'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 19:13:17'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 19:13:17'!
PASSED!

!testRun: #RondaTest #test06_RondaIniciaEnEnfrentamiento1 stamp: 'LB 7/5/2021 19:13:17'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 19:13:17'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 19:13:17'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:13:17'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 19:13:17'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 19:13:17'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:13:17'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:14:00'!
test13_PieSoloPuedeTirarEnSuTurno

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	self should: [ronda pieJuega: (CartaDeTruco oroCon: 4)]
		raise: Error - MessageNotUnderstood
		withMessageText: Ronda noEsTuTurnoErrorDescription.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:14:26' prior: 50861576!
test08_ManoTiraPrimero

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	self assert: #Mano equals: ronda turno.! !

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:14:28'!
PASSED!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:14:28'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:14:28'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 19:14:28'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 19:14:28'!
PASSED!

!testRun: #RondaTest #test06_RondaIniciaEnEnfrentamiento1 stamp: 'LB 7/5/2021 19:14:28'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 19:14:28'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 19:14:28'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:14:28'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 19:14:28'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 19:14:28'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:14:29'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:14:29'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:20:01'!
test14_GanadorDeEnfrentamientoGana1Punto
	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda manoJuega: (CartaDeTruco oroCon: 1).
	ronda pieJuega: (CartaDeTruco oroCon: 4).
	
	self assert: 1 equals: ronda puntosPie.
	self assert: 0 equals: ronda puntosMano.! !

!testRun: #RondaTest #test14_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 19:20:05'!
ERROR!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:20:20'!
PASSED!

!testRun: #RondaTest #test14_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 19:20:26'!
ERROR!

!testRun: #RondaTest #test14_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 19:20:26'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:25:47'!
test14_PieSoloPuedeJugarUnaCartaSuya
	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda manoJuega: (CartaDeTruco oroCon: 1).
	ronda pieJuega: (CartaDeTruco oroCon: 2).
! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:26:05' prior: 50861899!
test14_PieSoloPuedeJugarUnaCartaSuya
	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda manoJuega: (CartaDeTruco oroCon: 1).
	
	self should: [ronda pieJuega: (CartaDeTruco oroCon: 2).]
		raise: Error - MessageNotUnderstood
		withMessageText: Ronda cartaInvalidaErrorDescription.! !

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:26:05'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:26:19' prior: 50860923!
pieJuega: cartaDeTruco 
	(mano includes: cartaDeTruco) ifFalse: [^self error: self class cartaInvalidaErrorDescription].
	^self error: self class noEsTuTurnoErrorDescription.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:26:33' prior: 50861939!
pieJuega: cartaDeTruco 
	(turno = #Pie) ifFalse: [^self error: self class noEsTuTurnoErrorDescription ].
	(mano includes: cartaDeTruco) ifFalse: [^self error: self class cartaInvalidaErrorDescription].
	! !

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:26:35'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:26:35'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 19:26:35'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 19:26:35'!
PASSED!

!testRun: #RondaTest #test06_RondaIniciaEnEnfrentamiento1 stamp: 'LB 7/5/2021 19:26:35'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 19:26:35'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 19:26:35'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:26:35'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 19:26:35'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 19:26:35'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:26:35'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:26:35'!
PASSED!

!testRun: #RondaTest #test14_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 19:26:35'!
ERROR!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:26:35'!
FAILURE!

!methodRemoval: RondaTest #test14_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 19:26:46'!
test14_GanadorDeEnfrentamientoGana1Punto
	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda manoJuega: (CartaDeTruco oroCon: 1).
	ronda pieJuega: (CartaDeTruco oroCon: 4).
	
	self assert: 1 equals: ronda puntosPie.
	self assert: 0 equals: ronda puntosMano.!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:26:47'!
FAILURE!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:26:47'!
FAILURE!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:27:20'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:27:20'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 19:27:20'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 19:27:20'!
PASSED!

!testRun: #RondaTest #test06_RondaIniciaEnEnfrentamiento1 stamp: 'LB 7/5/2021 19:27:20'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 19:27:20'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 19:27:20'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:27:20'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 19:27:20'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 19:27:20'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:27:20'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:27:20'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:27:20'!
FAILURE!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:27:20'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:27:31' prior: 50861948!
pieJuega: cartaDeTruco 
	(turno = #Pie) ifFalse: [^self error: self class noEsTuTurnoErrorDescription ].
	(pie includes: cartaDeTruco) ifFalse: [^self error: self class cartaInvalidaErrorDescription].
	! !

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:27:32'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:27:32'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 19:27:32'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 19:27:32'!
PASSED!

!testRun: #RondaTest #test06_RondaIniciaEnEnfrentamiento1 stamp: 'LB 7/5/2021 19:27:32'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 19:27:32'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 19:27:32'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:27:32'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 19:27:32'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 19:27:32'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:27:32'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:27:32'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:27:32'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:28:23'!
test15_LuegoDeJugarPieEsTurnoDeMano
	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda manoJuega: (CartaDeTruco oroCon: 1).
	ronda pieJuega: (CartaDeTruco oroCon: 4).
		
	self assert: #Mano equals: ronda turno.! !

!testRun: #RondaTest #test15_LuegoDeJugarPieEsTurnoDeMano stamp: 'LB 7/5/2021 19:28:25'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:28:40' prior: 50862071!
pieJuega: cartaDeTruco 
	(turno = #Pie) ifFalse: [^self error: self class noEsTuTurnoErrorDescription ].
	(pie includes: cartaDeTruco) ifFalse: [^self error: self class cartaInvalidaErrorDescription].
	turno := #Mano
	! !

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:28:41'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:28:41'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 19:28:41'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 19:28:41'!
PASSED!

!testRun: #RondaTest #test06_RondaIniciaEnEnfrentamiento1 stamp: 'LB 7/5/2021 19:28:41'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 19:28:41'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 19:28:41'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:28:41'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 19:28:41'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 19:28:41'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:28:41'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:28:41'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:28:41'!
PASSED!

!testRun: #RondaTest #test15_LuegoDeJugarPieEsTurnoDeMano stamp: 'LB 7/5/2021 19:28:41'!
PASSED!

----SNAPSHOT----(5 July 2021 19:33:39) CuisUniversity-4532.image priorSource: 16934395!

!methodRemoval: RondaTest #test06_RondaIniciaEnEnfrentamiento1 stamp: 'LB 7/5/2021 19:34:33'!
test06_RondaIniciaEnEnfrentamiento1

	| mano pie |
	mano := OrderedCollection with: 1 with: 	2 with: 3.
	pie := OrderedCollection with: 4 with: 	5 with: 6.
	
	self should: [Ronda withMano: mano pie: pie]
		raise: Error - MessageNotUnderstood 
		withMessageText: Ronda cartasInvalidasErrorDescription.!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:39:19'!
test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores
	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda manoJuega: (CartaDeTruco oroCon: 1).
	ronda pieJuega: (CartaDeTruco oroCon: 4).
	
	self assert: 2 equals: ronda enfrentamiento.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:39:51' prior: 50862211!
test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores
	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda manoJuega: (CartaDeTruco oroCon: 1).
	ronda pieJuega: (CartaDeTruco oroCon: 4).
	
	self assert: 2 equals: ronda enfrentamiento.
	self assert: 0 equals: ronda mesa size.! !

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 19:39:51'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:41:35' prior: 50862142!
pieJuega: cartaDeTruco 
	(turno = #Pie) ifFalse: [^self error: self class noEsTuTurnoErrorDescription ].
	(pie includes: cartaDeTruco) ifFalse: [^self error: self class cartaInvalidaErrorDescription].
	cartasJugadas add: cartaDeTruco.
	turno := #Mano
	
	self checkFinDeEnfrentamiento.
	
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:41:46' prior: 50861671!
manoJuega: cartaDeTruco 
	(turno = #Mano) ifFalse: [^self error: self class noEsTuTurnoErrorDescription ].
	(mano includes: cartaDeTruco) ifFalse: [^self error: self class cartaInvalidaErrorDescription].
	cartasJugadas add: cartaDeTruco.
	turno := #Pie.
	
	self checkFinDeEnfrentamiento.! !

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'LB 7/5/2021 19:43:02'!
Object subclass: #Ronda
	instanceVariableNames: 'mano pie cartasJugadas turno enfrentamiento'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:43:00'!
checkFinDeEnfrentamiento
	(self mesa size = 2) ifTrue: [
		enfrentamiento := enfrentamiento + 1.
		cartasJugadas removeAll.
	]! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:43:08' prior: 50860839!
enfrentamiento
	^enfrentamiento! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:43:17' prior: 50861717!
initializeWithMano: jugadorMano pie: jugadorPie.
	mano := jugadorMano.
	pie := jugadorPie.
	cartasJugadas := OrderedCollection new.
	enfrentamiento := 1.
	turno := #Mano.! !

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:43:19'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:43:19'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 19:43:19'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 19:43:19'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 19:43:19'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 19:43:19'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:43:19'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 19:43:19'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 19:43:19'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:43:19'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:43:19'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:43:19'!
PASSED!

!testRun: #RondaTest #test15_LuegoDeJugarPieEsTurnoDeMano stamp: 'LB 7/5/2021 19:43:19'!
ERROR!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 19:43:19'!
ERROR!

!testRun: #RondaTest #test15_LuegoDeJugarPieEsTurnoDeMano stamp: 'LB 7/5/2021 19:43:30'!
ERROR!

!testRun: #RondaTest #test15_LuegoDeJugarPieEsTurnoDeMano stamp: 'LB 7/5/2021 19:43:30'!
ERROR!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 19:43:39'!
ERROR!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 19:43:39'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:43:51' prior: 50862254!
pieJuega: cartaDeTruco 
	(turno = #Pie) ifFalse: [^self error: self class noEsTuTurnoErrorDescription ].
	(pie includes: cartaDeTruco) ifFalse: [^self error: self class cartaInvalidaErrorDescription].
	cartasJugadas add: cartaDeTruco.
	turno := #Mano.
	
	self checkFinDeEnfrentamiento.
	
	! !

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:43:53'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:43:53'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 19:43:53'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 19:43:53'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 19:43:53'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 19:43:53'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:43:53'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 19:43:53'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 19:43:53'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:43:53'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:43:53'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:43:53'!
PASSED!

!testRun: #RondaTest #test15_LuegoDeJugarPieEsTurnoDeMano stamp: 'LB 7/5/2021 19:43:53'!
PASSED!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 19:43:53'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:45:20'!
test17_GanadorComienzaElSiguienteEnfrentamiento

	! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:45:45' prior: 50862421!
test17_GanadorComienzaElSiguienteEnfrentamiento

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda manoJuega: (CartaDeTruco oroCon: 1).
	ronda pieJuega: (CartaDeTruco oroCon: 4).
	
	self assert: #Pie equals: ronda turno.! !

!testRun: #RondaTest #test17_GanadorComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 19:45:46'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:46:27' prior: 50862286!
checkFinDeEnfrentamiento
	(self mesa size = 2) ifTrue: [
		enfrentamiento := enfrentamiento + 1.
		self checkGanador.
		cartasJugadas removeAll.
	]! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:48:35'!
checkGanador
	((self mesa at: 2) mataA: (self mesa at: 1)) ifTrue: [turno := #Pie].! !

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:48:37'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:48:37'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 19:48:37'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 19:48:37'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 19:48:37'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 19:48:37'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:48:37'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 19:48:37'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 19:48:37'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:48:37'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:48:37'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:48:37'!
PASSED!

!testRun: #RondaTest #test15_LuegoDeJugarPieEsTurnoDeMano stamp: 'LB 7/5/2021 19:48:37'!
ERROR!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 19:48:37'!
PASSED!

!testRun: #RondaTest #test17_GanadorComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 19:48:37'!
FAILURE!

!methodRemoval: RondaTest #test15_LuegoDeJugarPieEsTurnoDeMano stamp: 'LB 7/5/2021 19:49:07'!
test15_LuegoDeJugarPieEsTurnoDeMano
	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda manoJuega: (CartaDeTruco oroCon: 1).
	ronda pieJuega: (CartaDeTruco oroCon: 4).
		
	self assert: #Mano equals: ronda turno.!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:49:14' prior: 50862426!
test17_GanadorComienzaElSiguienteEnfrentamiento

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda manoJuega: (CartaDeTruco oroCon: 1).
	ronda pieJuega: (CartaDeTruco oroCon: 4).
	
	self assert: #Mano equals: ronda turno.! !

!testRun: #RondaTest #test17_GanadorComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 19:49:14'!
PASSED!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:49:14'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:49:14'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 19:49:14'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 19:49:14'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 19:49:14'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 19:49:14'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:49:14'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 19:49:14'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 19:49:14'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:49:14'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:49:14'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:49:14'!
PASSED!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 19:49:14'!
PASSED!

!testRun: #RondaTest #test17_GanadorComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 19:49:14'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:49:44'!
test18_GanadorPieComienzaElSiguienteEnfrentamiento

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda manoJuega: (CartaDeTruco oroCon: 5).
	ronda pieJuega: (CartaDeTruco oroCon: 2).
	
	self assert: #Pie equals: ronda turno.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:49:49'!
test17_GanadorManoComienzaElSiguienteEnfrentamiento

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda manoJuega: (CartaDeTruco oroCon: 1).
	ronda pieJuega: (CartaDeTruco oroCon: 4).
	
	self assert: #Mano equals: ronda turno.! !

!methodRemoval: RondaTest #test17_GanadorComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 19:49:49'!
test17_GanadorComienzaElSiguienteEnfrentamiento

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda manoJuega: (CartaDeTruco oroCon: 1).
	ronda pieJuega: (CartaDeTruco oroCon: 4).
	
	self assert: #Mano equals: ronda turno.!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 19:49:50'!
PASSED!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:49:50'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:49:50'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 19:49:50'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 19:49:50'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 19:49:50'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 19:49:50'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:49:50'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 19:49:50'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 19:49:50'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:49:50'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:49:50'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:49:50'!
PASSED!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 19:49:50'!
PASSED!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 19:49:50'!
PASSED!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 19:49:50'!
PASSED!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 19:49:55'!
PASSED!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:49:55'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:49:55'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 19:49:55'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 19:49:55'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 19:49:55'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 19:49:55'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:49:55'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 19:49:55'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 19:49:55'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:49:55'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:49:55'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:49:55'!
PASSED!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 19:49:55'!
PASSED!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 19:49:55'!
PASSED!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 19:49:55'!
PASSED!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:50:44' prior: 50862364!
pieJuega: cartaDeTruco 
	(turno = #Pie) ifFalse: [^self error: self class noEsTuTurnoErrorDescription ].
	(pie includes: cartaDeTruco) ifFalse: [^self error: self class cartaInvalidaErrorDescription].
	cartasJugadas add: cartaDeTruco.
	
	self checkFinDeEnfrentamiento.
	
	! !

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:50:45'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:50:45'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 19:50:45'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 19:50:45'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 19:50:45'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 19:50:45'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:50:45'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 19:50:45'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 19:50:45'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:50:45'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:50:45'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:50:45'!
PASSED!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 19:50:45'!
PASSED!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 19:50:45'!
FAILURE!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 19:50:45'!
PASSED!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 19:50:45'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:51:07' prior: 50862455!
checkGanador
	((self mesa at: 1) mataA: (self mesa at: 2)) ifTrue: [turno := #Mano].
	((self mesa at: 2) mataA: (self mesa at: 1)) ifTrue: [turno := #Pie].! !

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:51:08'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:51:08'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 19:51:08'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 19:51:08'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 19:51:08'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 19:51:08'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:51:08'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 19:51:08'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 19:51:08'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:51:08'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:51:08'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:51:08'!
PASSED!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 19:51:08'!
PASSED!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 19:51:08'!
PASSED!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 19:51:08'!
PASSED!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 19:51:19'!
PASSED!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:51:19'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:51:19'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 19:51:19'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 19:51:19'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 19:51:19'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 19:51:19'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:51:19'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 19:51:19'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 19:51:19'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:51:19'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:51:19'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:51:19'!
PASSED!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 19:51:19'!
PASSED!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 19:51:19'!
PASSED!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 19:51:19'!
PASSED!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:51:49' prior: 50862297!
initializeWithMano: jugadorMano pie: jugadorPie.
	mano := jugadorMano.
	pie := jugadorPie.
	cartasJugadas := Dictionary new.
	enfrentamiento := 1.
	turno := #Mano.! !

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:51:58'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:51:58'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 19:51:58'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 19:51:58'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 19:51:58'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 19:51:58'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:51:58'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 19:51:58'!
ERROR!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 19:51:58'!
ERROR!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:51:58'!
ERROR!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:51:58'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:51:58'!
ERROR!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 19:51:58'!
ERROR!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 19:51:58'!
ERROR!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 19:51:58'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:52:39' prior: 50861430!
test10_RondaConoceLaCartaJugada

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda manoJuega: (CartaDeTruco oroCon: 1).
	
	self assert: (ronda mesaAt: #Pie) equals: (CartaDeTruco oroCon: 1).
	self assert: 1 equals: ronda mesa size.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:53:12' prior: 50862266!
manoJuega: cartaDeTruco 
	(turno = #Mano) ifFalse: [^self error: self class noEsTuTurnoErrorDescription ].
	(mano includes: cartaDeTruco) ifFalse: [^self error: self class cartaInvalidaErrorDescription].
	cartasJugadas at: #Mano put: cartaDeTruco.
	turno := #Pie.
	
	self checkFinDeEnfrentamiento.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:53:21' prior: 50862752!
pieJuega: cartaDeTruco 
	(turno = #Pie) ifFalse: [^self error: self class noEsTuTurnoErrorDescription ].
	(pie includes: cartaDeTruco) ifFalse: [^self error: self class cartaInvalidaErrorDescription].
	cartasJugadas at: #Pie put: cartaDeTruco.
	
	self checkFinDeEnfrentamiento.
	
	! !

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:53:22'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:53:22'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 19:53:22'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 19:53:22'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 19:53:22'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 19:53:22'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:53:22'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 19:53:22'!
ERROR!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 19:53:22'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:53:22'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:53:22'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:53:22'!
PASSED!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 19:53:22'!
ERROR!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 19:53:22'!
ERROR!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 19:53:22'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:53:50'!
mesaAt: jugador
	^cartasJugadas at: jugador.

	! !

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:53:51'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:53:51'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 19:53:51'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 19:53:51'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 19:53:51'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 19:53:51'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:53:51'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 19:53:51'!
ERROR!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 19:53:51'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:53:51'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:53:51'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:53:51'!
PASSED!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 19:53:51'!
ERROR!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 19:53:51'!
ERROR!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 19:53:51'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:54:01' prior: 50862982!
test10_RondaConoceLaCartaJugada

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda manoJuega: (CartaDeTruco oroCon: 1).
	
	self assert: (ronda mesaAt: #Mano) equals: (CartaDeTruco oroCon: 1).
	self assert: 1 equals: ronda mesa size.! !

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 19:54:01'!
PASSED!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:54:01'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:54:01'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 19:54:01'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 19:54:01'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 19:54:01'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 19:54:01'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:54:01'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 19:54:01'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 19:54:01'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:54:01'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:54:01'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:54:01'!
PASSED!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 19:54:01'!
ERROR!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 19:54:01'!
ERROR!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 19:54:01'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:54:25' prior: 50862816!
checkGanador
	((self mesa at: #Mano) mataA: (self mesa at: #Pie)) ifTrue: [turno := #Mano].
	((self mesa at: #Pie) mataA: (self mesa at: #Mano)) ifTrue: [turno := #Pie].! !

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:54:26'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:54:26'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 19:54:26'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 19:54:26'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 19:54:26'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 19:54:26'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:54:26'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 19:54:26'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 19:54:26'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:54:26'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:54:26'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:54:26'!
PASSED!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 19:54:26'!
PASSED!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 19:54:26'!
PASSED!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 19:54:26'!
PASSED!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 19:54:59'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:56:04'!
test19_GanadorDeEnfrentamientoGana1Punto

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda manoJuega: (CartaDeTruco oroCon: 1).
	ronda pieJuega: (CartaDeTruco oroCon: 4).
	
	self assert: 0 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	
	ronda pieJuega: (CartaDeTruco oroCon: 2).
	ronda manoJuega: (CartaDeTruco oroCon: 5).
	
	self assert: 1 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.! !

!testRun: #RondaTest #test19_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 19:56:08'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:56:12'!
puntosPie
	self shouldBeImplemented.! !

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'LB 7/5/2021 19:56:29'!
Object subclass: #Ronda
	instanceVariableNames: 'mano pie cartasJugadas turno enfrentamiento puntosPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:56:27' prior: 50863285!
puntosPie
	^puntosPie! !

!testRun: #RondaTest #test19_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 19:56:31'!
FAILURE!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'LB 7/5/2021 19:56:44'!
Object subclass: #Ronda
	instanceVariableNames: 'mano pie cartasJugadas turno enfrentamiento puntosPie puntosMano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:56:43'!
puntosMano
	^puntosMano! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:56:55' prior: 50862925!
initializeWithMano: jugadorMano pie: jugadorPie.
	mano := jugadorMano.
	pie := jugadorPie.
	cartasJugadas := Dictionary new.
	enfrentamiento := 1.
	turno := #Mano.
	puntosPie := 0.
	puntosMano := 0.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:57:15' prior: 50863197!
checkGanador
	((self mesa at: #Mano) mataA: (self mesa at: #Pie)) ifTrue: [turno := #Mano. puntosMano := puntosMano +1].
	((self mesa at: #Pie) mataA: (self mesa at: #Mano)) ifTrue: [turno := #Pie. puntosPie := puntosPie +1].! !

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:57:16'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:57:16'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 19:57:16'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 19:57:16'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 19:57:16'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 19:57:16'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:57:16'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 19:57:16'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 19:57:16'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:57:16'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:57:16'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:57:16'!
PASSED!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 19:57:16'!
PASSED!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 19:57:16'!
PASSED!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 19:57:16'!
PASSED!

!testRun: #RondaTest #test19_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 19:57:16'!
ERROR!

!testRun: #RondaTest #test19_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 19:57:16'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:57:35' prior: 50863257!
test19_GanadorDeEnfrentamientoGana1Punto

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda manoJuega: (CartaDeTruco oroCon: 1).
	ronda pieJuega: (CartaDeTruco oroCon: 4).
	
	self assert: 0 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	
	ronda manoJuega: (CartaDeTruco oroCon: 5).
	ronda pieJuega: (CartaDeTruco oroCon: 2).
	
	self assert: 1 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.! !

!testRun: #RondaTest #test19_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 19:57:35'!
PASSED!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:57:35'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 19:57:35'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 19:57:35'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 19:57:35'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 19:57:35'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 19:57:35'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:57:35'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 19:57:35'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 19:57:35'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:57:35'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 19:57:35'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 19:57:35'!
PASSED!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 19:57:35'!
PASSED!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 19:57:35'!
PASSED!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 19:57:35'!
PASSED!

!testRun: #RondaTest #test19_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 19:57:35'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 19:59:52'!
test20_ManoGanaLaRondaAlSumar2Puntos

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda manoJuega: (CartaDeTruco oroCon: 1).
	ronda pieJuega: (CartaDeTruco oroCon: 4).
	
	self assert: 0 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	
	ronda manoJuega: (CartaDeTruco oroCon: 3).
	ronda pieJuega: (CartaDeTruco oroCon: 6).
	
	self assert: 0 equals: ronda puntosPie.
	self assert: 2 equals: ronda puntosMano.
	self assert: #Mano equals: ronda ganador.! !

!testRun: #RondaTest #test20_ManoGanaLaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 19:59:56'!
ERROR!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:00:00'!
ganador
	self shouldBeImplemented.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:00:53' prior: 50863502!
ganador
	^(puntosMano = 2) ifTrue: [^#Mano]! !

!testRun: #RondaTest #test20_ManoGanaLaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:00:54'!
PASSED!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:00:54'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:00:54'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 20:00:54'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:00:54'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:00:54'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 20:00:54'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:00:54'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:00:54'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 20:00:54'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:00:54'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:00:54'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:00:54'!
PASSED!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:00:54'!
PASSED!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:00:54'!
PASSED!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:00:54'!
PASSED!

!testRun: #RondaTest #test19_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:00:54'!
PASSED!

!testRun: #RondaTest #test20_ManoGanaLaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:00:54'!
PASSED!

!methodRemoval: Ronda #mano stamp: 'LB 7/5/2021 20:01:19'!
mano
	^mano!

!methodRemoval: Ronda #pie stamp: 'LB 7/5/2021 20:01:25'!
pie
	^pie!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:01:26'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:01:26'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 20:01:26'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:01:26'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:01:26'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 20:01:26'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:01:26'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:01:26'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 20:01:26'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:01:26'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:01:26'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:01:26'!
PASSED!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:01:26'!
PASSED!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:01:26'!
PASSED!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:01:26'!
PASSED!

!testRun: #RondaTest #test19_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:01:26'!
PASSED!

!testRun: #RondaTest #test20_ManoGanaLaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:01:26'!
PASSED!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:03:04'!
juega: unJugador carta: unaCarta! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:03:48' prior: 50863627!
juega: unJugador carta: unaCarta

	(turno = unJugador) ifFalse: [^self error: self class noEsTuTurnoErrorDescription ].
	(mano includes: unaCarta) ifFalse: [^self error: self class cartaInvalidaErrorDescription].
	cartasJugadas at: unJugador put: unaCarta.
	turno := #Pie.
	
	self checkFinDeEnfrentamiento.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:05:12' prior: 50862448!
checkFinDeEnfrentamiento
	(self mesa size = 2) ifTrue: [
		enfrentamiento := enfrentamiento + 1.
		self checkGanador.
		cartasJugadas removeAll.
	] ifFalse: [
		turno := self jugadorOpuesto: self turno.
	]! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:06:32'!
jugadorOpuesto: unJugador
	(unJugador = #Pie) ifTrue: [^#Mano].
	(unJugador = #Mano) ifTrue: [^#Pie].! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:06:43' prior: 50863631!
juega: unJugador carta: unaCarta

	(turno = unJugador) ifFalse: [^self error: self class noEsTuTurnoErrorDescription ].
	(mano includes: unaCarta) ifFalse: [^self error: self class cartaInvalidaErrorDescription].
	cartasJugadas at: unJugador put: unaCarta.
	
	self checkFinDeEnfrentamiento.! !

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:07:00'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:07:00'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 20:07:00'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:07:00'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:07:00'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 20:07:00'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:07:00'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:07:00'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 20:07:00'!
FAILURE!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:07:00'!
FAILURE!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:07:00'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:07:00'!
FAILURE!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:07:00'!
ERROR!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:07:00'!
ERROR!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:07:00'!
ERROR!

!testRun: #RondaTest #test19_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:07:00'!
ERROR!

!testRun: #RondaTest #test20_ManoGanaLaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:07:00'!
ERROR!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:07:19'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:07:19'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 20:07:19'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:07:19'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:07:19'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 20:07:19'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:07:19'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:07:19'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 20:07:19'!
FAILURE!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:07:19'!
FAILURE!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:07:19'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:07:19'!
FAILURE!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:07:19'!
ERROR!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:07:19'!
ERROR!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:07:19'!
ERROR!

!testRun: #RondaTest #test19_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:07:19'!
ERROR!

!testRun: #RondaTest #test20_ManoGanaLaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:07:19'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:07:43' prior: 50862230!
test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores
	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 1).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 4).
	
	self assert: 2 equals: ronda enfrentamiento.
	self assert: 0 equals: ronda mesa size.! !

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:07:44'!
ERROR!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'LB 7/5/2021 20:08:13'!
Object subclass: #Ronda
	instanceVariableNames: 'mano pie cartasJugadas turno enfrentamiento puntosPie puntosMano cartas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:08:10' prior: 50863660!
juega: unJugador carta: unaCarta

	(turno = unJugador) ifFalse: [^self error: self class noEsTuTurnoErrorDescription ].
	((cartas at: unJugador) includes: unaCarta) ifFalse: [^self error: self class cartaInvalidaErrorDescription].
	cartasJugadas at: unJugador put: unaCarta.
	
	self checkFinDeEnfrentamiento.! !
!Ronda methodsFor: 'inicialization' stamp: 'LB 7/5/2021 20:09:03' prior: 50863318!
initializeWithMano: jugadorMano pie: jugadorPie.
	mano := jugadorMano.
	pie := jugadorPie.
	cartas := Dictionary new.
	cartas at: #Mano put: jugadorMano.
	cartas at: #Pie put: jugadorPie.
	cartasJugadas := Dictionary new.
	enfrentamiento := 1.
	turno := #Mano.
	puntosPie := 0.
	puntosMano := 0.! !

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:09:07'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:09:07'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 20:09:07'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:09:07'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:09:07'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 20:09:07'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:09:07'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:09:07'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 20:09:07'!
FAILURE!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:09:07'!
FAILURE!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:09:07'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:09:07'!
FAILURE!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:09:07'!
PASSED!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:09:07'!
ERROR!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:09:07'!
ERROR!

!testRun: #RondaTest #test19_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:09:07'!
ERROR!

!testRun: #RondaTest #test20_ManoGanaLaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:09:07'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:09:27' prior: 50862611!
test17_GanadorManoComienzaElSiguienteEnfrentamiento

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 1).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 4).
	
	self assert: #Mano equals: ronda turno.! !

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:09:28'!
PASSED!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:09:28'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:09:28'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 20:09:28'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:09:28'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:09:28'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 20:09:28'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:09:28'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:09:28'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 20:09:28'!
FAILURE!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:09:28'!
FAILURE!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:09:28'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:09:28'!
FAILURE!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:09:28'!
PASSED!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:09:28'!
PASSED!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:09:28'!
ERROR!

!testRun: #RondaTest #test19_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:09:28'!
ERROR!

!testRun: #RondaTest #test20_ManoGanaLaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:09:28'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:09:41' prior: 50862593!
test18_GanadorPieComienzaElSiguienteEnfrentamiento

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 5).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 2).
	
	self assert: #Pie equals: ronda turno.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:09:54' prior: 50863393!
test19_GanadorDeEnfrentamientoGana1Punto

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 1).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 4).
	
	self assert: 0 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 5).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 2).
	
	self assert: 1 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:10:08' prior: 50863473!
test20_ManoGanaLaRondaAlSumar2Puntos

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 1).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 4).
	
	self assert: 0 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 3).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 6).
	
	self assert: 0 equals: ronda puntosPie.
	self assert: 2 equals: ronda puntosMano.
	self assert: #Mano equals: ronda ganador.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:10:18' prior: 50861498!
test11_LuegoDeJugarManoEsTurnoDePie

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 1).
	
	self assert: #Pie equals: ronda turno.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:10:35' prior: 50861648!
test12_ManoSoloPuedeTirarEnSuTurno

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 1).
	
	self should: [ronda juega: #Mano carta: (CartaDeTruco oroCon: 2).]
		raise: Error - MessageNotUnderstood
		withMessageText: Ronda noEsTuTurnoErrorDescription.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:10:53' prior: 50861916!
test14_PieSoloPuedeJugarUnaCartaSuya
	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 1).
	
	self should: [ronda juega: #Pie carta: (CartaDeTruco oroCon: 2)..]
		raise: Error - MessageNotUnderstood
		withMessageText: Ronda cartaInvalidaErrorDescription.! !

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:10:54'!
PASSED!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:10:54'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:10:54'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 20:10:54'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:10:54'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:10:54'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 20:10:54'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:10:54'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:10:54'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 20:10:54'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:10:54'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:10:54'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:10:54'!
PASSED!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:10:54'!
PASSED!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:10:54'!
PASSED!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:10:54'!
PASSED!

!testRun: #RondaTest #test19_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:10:54'!
PASSED!

!testRun: #RondaTest #test20_ManoGanaLaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:10:54'!
PASSED!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:10:58'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:10:58'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 20:10:58'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:10:58'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:10:58'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 20:10:58'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:10:58'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:10:58'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 20:10:58'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:10:58'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:10:58'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:10:58'!
PASSED!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:10:58'!
PASSED!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:10:58'!
PASSED!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:10:58'!
PASSED!

!testRun: #RondaTest #test19_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:10:58'!
PASSED!

!testRun: #RondaTest #test20_ManoGanaLaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:10:58'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:11:14' prior: 50861006!
test09_ManoSoloPuedeJugarUnaCartaSuya

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	self should: [ronda juega: #Mano carta: (CartaDeTruco oroCon: 4).]
		raise: Error - MessageNotUnderstood
		withMessageText: Ronda cartaInvalidaErrorDescription.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:11:20' prior: 50863127!
test10_RondaConoceLaCartaJugada

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 1).
	
	self assert: (ronda mesaAt: #Mano) equals: (CartaDeTruco oroCon: 1).
	self assert: 1 equals: ronda mesa size.! !

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:11:21'!
PASSED!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:11:21'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:11:21'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 20:11:21'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:11:21'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:11:21'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 20:11:21'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:11:21'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:11:21'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 20:11:21'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:11:21'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:11:21'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:11:21'!
PASSED!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:11:21'!
PASSED!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:11:21'!
PASSED!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:11:21'!
PASSED!

!testRun: #RondaTest #test19_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:11:21'!
PASSED!

!testRun: #RondaTest #test20_ManoGanaLaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:11:21'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:11:42' prior: 50861793!
test13_PieSoloPuedeTirarEnSuTurno

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	self should: [ronda juega: #Pie carta: (CartaDeTruco oroCon: 4).]
		raise: Error - MessageNotUnderstood
		withMessageText: Ronda noEsTuTurnoErrorDescription.! !

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:11:43'!
PASSED!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:11:43'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:11:43'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 20:11:43'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:11:43'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:11:43'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 20:11:43'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:11:43'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:11:43'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 20:11:43'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:11:43'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:11:43'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:11:43'!
PASSED!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:11:43'!
PASSED!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:11:43'!
PASSED!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:11:43'!
PASSED!

!testRun: #RondaTest #test19_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:11:43'!
PASSED!

!testRun: #RondaTest #test20_ManoGanaLaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:11:43'!
PASSED!

!methodRemoval: Ronda #pieJuega: stamp: 'LB 7/5/2021 20:11:46'!
pieJuega: cartaDeTruco 
	(turno = #Pie) ifFalse: [^self error: self class noEsTuTurnoErrorDescription ].
	(pie includes: cartaDeTruco) ifFalse: [^self error: self class cartaInvalidaErrorDescription].
	cartasJugadas at: #Pie put: cartaDeTruco.
	
	self checkFinDeEnfrentamiento.
	
	!

!methodRemoval: Ronda #manoJuega: stamp: 'LB 7/5/2021 20:11:48'!
manoJuega: cartaDeTruco 
	(turno = #Mano) ifFalse: [^self error: self class noEsTuTurnoErrorDescription ].
	(mano includes: cartaDeTruco) ifFalse: [^self error: self class cartaInvalidaErrorDescription].
	cartasJugadas at: #Mano put: cartaDeTruco.
	turno := #Pie.
	
	self checkFinDeEnfrentamiento.!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:11:49'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:11:49'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 20:11:49'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:11:49'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:11:49'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 20:11:49'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:11:49'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:11:49'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 20:11:49'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:11:49'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:11:49'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:11:49'!
PASSED!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:11:49'!
PASSED!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:11:49'!
PASSED!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:11:49'!
PASSED!

!testRun: #RondaTest #test19_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:11:49'!
PASSED!

!testRun: #RondaTest #test20_ManoGanaLaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:11:49'!
PASSED!

Object subclass: #Ronda
	instanceVariableNames: 'cartasJugadas turno enfrentamiento puntosPie puntosMano cartas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'LB 7/5/2021 20:12:12'!
Object subclass: #Ronda
	instanceVariableNames: 'cartasJugadas turno enfrentamiento puntosPie puntosMano cartas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'inicialization' stamp: 'LB 7/5/2021 20:12:18' prior: 50863829!
initializeWithMano: jugadorMano pie: jugadorPie.
	cartas := Dictionary new.
	cartas at: #Mano put: jugadorMano.
	cartas at: #Pie put: jugadorPie.
	cartasJugadas := Dictionary new.
	enfrentamiento := 1.
	turno := #Mano.
	puntosPie := 0.
	puntosMano := 0.! !

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:12:19'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:12:19'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 20:12:19'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:12:19'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:12:19'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 20:12:19'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:12:19'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:12:19'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 20:12:19'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:12:19'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:12:19'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:12:19'!
PASSED!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:12:19'!
PASSED!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:12:19'!
PASSED!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:12:19'!
PASSED!

!testRun: #RondaTest #test19_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:12:19'!
PASSED!

!testRun: #RondaTest #test20_ManoGanaLaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:12:19'!
PASSED!
!Ronda methodsFor: 'inicialization' stamp: 'LB 7/5/2021 20:12:43' prior: 50864484!
initializeWithMano: jugadorMano pie: jugadorPie.

	cartas := Dictionary new.
	cartas at: #Mano put: jugadorMano.
	cartas at: #Pie put: jugadorPie.
	
	cartasJugadas := Dictionary new.
	enfrentamiento := 1.
	turno := #Mano.
	puntosPie := 0.
	puntosMano := 0.! !

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'LB 7/5/2021 20:13:30'!
Object subclass: #Ronda
	instanceVariableNames: 'cartasJugadas turno enfrentamiento puntosPie puntosMano cartas puntos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'inicialization' stamp: 'LB 7/5/2021 20:13:28' prior: 50864550!
initializeWithMano: jugadorMano pie: jugadorPie.

	cartas := Dictionary new.
	cartas at: #Mano put: jugadorMano.
	cartas at: #Pie put: jugadorPie.
	
	cartasJugadas := Dictionary new.
	enfrentamiento := 1.
	turno := #Mano.
	puntosPie := 0.
	puntosMano := 0.
	
	puntos := Dictionary new.
	puntos at: #Mano put: 0.
	puntos at: #Pie put: 0.! !
!Ronda methodsFor: 'inicialization' stamp: 'LB 7/5/2021 20:14:46' prior: 50864570!
initializeWithMano: jugadorMano pie: jugadorPie.

	cartas := Dictionary new.
	cartas at: #Mano put: jugadorMano.
	cartas at: #Pie put: jugadorPie.
	
	cartasJugadas := Dictionary new.
	enfrentamiento := 1.
	turno := #Mano.
	puntosPie := 0.
	puntosMano := 0.! !

Object subclass: #Ronda
	instanceVariableNames: 'cartasJugadas turno enfrentamiento puntosPie puntosMano cartas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'LB 7/5/2021 20:14:51'!
Object subclass: #Ronda
	instanceVariableNames: 'cartasJugadas turno enfrentamiento puntosPie puntosMano cartas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:14:53'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:14:53'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 20:14:53'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:14:53'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:14:53'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 20:14:53'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:14:53'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:14:53'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 20:14:53'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:14:53'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:14:53'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:14:53'!
PASSED!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:14:53'!
PASSED!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:14:53'!
PASSED!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:14:53'!
PASSED!

!testRun: #RondaTest #test19_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:14:53'!
PASSED!

!testRun: #RondaTest #test20_ManoGanaLaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:14:53'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:15:38'!
test21_PieGanaLaRondaAlSumar2Puntos

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 1).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 4).
	
	self assert: 0 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 3).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 6).
	
	self assert: 0 equals: ronda puntosPie.
	self assert: 2 equals: ronda puntosMano.
	self assert: #Pie equals: ronda ganador.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:16:21' prior: 50864665!
test21_PieGanaLaRondaAlSumar2Puntos

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 1).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 4).
	
	self assert: 0 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 5).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 2).
	
	self assert: 1 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 3).
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 6).
	
	self assert: 2 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	self assert: #Pie equals: ronda ganador.! !

!testRun: #RondaTest #test21_PieGanaLaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:16:22'!
FAILURE!
!Ronda methodsFor: 'testing' stamp: 'LB 7/5/2021 20:16:49' prior: 50863506!
ganador
	(puntosMano = 2) ifTrue: [^#Mano].
	(puntosPie = 2) ifTrue: [^#Pie]! !

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:16:50'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:16:50'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 20:16:50'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:16:50'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:16:50'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 20:16:50'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:16:50'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:16:50'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 20:16:50'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:16:50'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:16:50'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:16:50'!
PASSED!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:16:50'!
PASSED!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:16:50'!
PASSED!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:16:50'!
PASSED!

!testRun: #RondaTest #test19_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:16:50'!
PASSED!

!testRun: #RondaTest #test20_ManoGanaLaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:16:50'!
PASSED!

!testRun: #RondaTest #test21_PieGanaLaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:16:50'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:18:09'!
test22_NoSePuedeVolverAJugarLaMismaCarta

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 1).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 4).

	
	self should: [ronda juega: #Mano carta: (CartaDeTruco oroCon: 1)]
		raise: Error - MessageNotUnderstood 
		withMessageText: Ronda cartaInvalidaErrorDescription.
! !

!testRun: #RondaTest #test22_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 20:18:10'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:18:52' prior: 50863816!
juega: unJugador carta: unaCarta

	(turno = unJugador) ifFalse: [^self error: self class noEsTuTurnoErrorDescription ].
	((cartas at: unJugador) includes: unaCarta) ifFalse: [^self error: self class cartaInvalidaErrorDescription].
	cartasJugadas at: unJugador put: unaCarta.
	(cartas at: unJugador) remove: unaCarta.
	
	self checkFinDeEnfrentamiento.! !

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:18:53'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:18:53'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 20:18:53'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:18:53'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:18:53'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 20:18:53'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:18:53'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:18:53'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 20:18:53'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:18:53'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:18:53'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:18:53'!
PASSED!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:18:53'!
PASSED!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:18:53'!
PASSED!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:18:53'!
PASSED!

!testRun: #RondaTest #test19_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:18:53'!
PASSED!

!testRun: #RondaTest #test20_ManoGanaLaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:18:53'!
PASSED!

!testRun: #RondaTest #test21_PieGanaLaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:18:53'!
PASSED!

!testRun: #RondaTest #test22_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 20:18:53'!
PASSED!

!testRun: #RondaTest #test22_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 20:19:00'!
PASSED!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:19:00'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:19:00'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 20:19:00'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:19:00'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:19:00'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 20:19:00'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:19:00'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:19:00'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 20:19:00'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:19:00'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:19:00'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:19:00'!
PASSED!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:19:00'!
PASSED!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:19:00'!
PASSED!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:19:00'!
PASSED!

!testRun: #RondaTest #test19_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:19:00'!
PASSED!

!testRun: #RondaTest #test20_ManoGanaLaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:19:00'!
PASSED!

!testRun: #RondaTest #test21_PieGanaLaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:19:00'!
PASSED!

!testRun: #RondaTest #test22_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 20:19:00'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:19:12'!
test20_ManoGanaEnSegundaLaRondaAlSumar2Puntos

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 1).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 4).
	
	self assert: 0 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 3).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 6).
	
	self assert: 0 equals: ronda puntosPie.
	self assert: 2 equals: ronda puntosMano.
	self assert: #Mano equals: ronda ganador.! !

!methodRemoval: RondaTest #test20_ManoGanaLaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:19:15'!
test20_ManoGanaLaRondaAlSumar2Puntos

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 1).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 4).
	
	self assert: 0 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 3).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 6).
	
	self assert: 0 equals: ronda puntosPie.
	self assert: 2 equals: ronda puntosMano.
	self assert: #Mano equals: ronda ganador.!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:19:24'!
test21_PieGanaenTercerLaRondaAlSumar2Puntos

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 1).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 4).
	
	self assert: 0 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 5).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 2).
	
	self assert: 1 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 3).
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 6).
	
	self assert: 2 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	self assert: #Pie equals: ronda ganador.! !

!methodRemoval: RondaTest #test21_PieGanaLaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:19:24'!
test21_PieGanaLaRondaAlSumar2Puntos

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 1).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 4).
	
	self assert: 0 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 5).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 2).
	
	self assert: 1 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 3).
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 6).
	
	self assert: 2 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	self assert: #Pie equals: ronda ganador.!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:19:38'!
test21_PieGanaEnTercerRondaAlSumar2Puntos

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 1).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 4).
	
	self assert: 0 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 5).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 2).
	
	self assert: 1 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 3).
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 6).
	
	self assert: 2 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	self assert: #Pie equals: ronda ganador.! !

!methodRemoval: RondaTest #test21_PieGanaenTercerLaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:19:38'!
test21_PieGanaenTercerLaRondaAlSumar2Puntos

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 1).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 4).
	
	self assert: 0 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 5).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 2).
	
	self assert: 1 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 3).
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 6).
	
	self assert: 2 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	self assert: #Pie equals: ronda ganador.!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:19:42'!
test20_ManoGanaEnSegundaRondaAlSumar2Puntos

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 1).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 4).
	
	self assert: 0 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 3).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 6).
	
	self assert: 0 equals: ronda puntosPie.
	self assert: 2 equals: ronda puntosMano.
	self assert: #Mano equals: ronda ganador.! !

!methodRemoval: RondaTest #test20_ManoGanaEnSegundaLaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:19:42'!
test20_ManoGanaEnSegundaLaRondaAlSumar2Puntos

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 1).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 4).
	
	self assert: 0 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 3).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 6).
	
	self assert: 0 equals: ronda puntosPie.
	self assert: 2 equals: ronda puntosMano.
	self assert: #Mano equals: ronda ganador.!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:21:35'!
test23_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco espadaCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco espadaCon: 4).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 4).

	
	self assert: 	1 equals: ronda puntosMano.
	self assert: 	1 equals: ronda puntosPie.
	self assert: #Mano equals: ronda turno.! !

!testRun: #RondaTest #test23_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 20:21:37'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:22:24' prior: 50863328!
checkGanador
	((self mesa at: #Mano) mataA: (self mesa at: #Pie)) ifTrue: [turno := #Mano. puntosMano := puntosMano +1].
	((self mesa at: #Pie) mataA: (self mesa at: #Mano)) ifTrue: [turno := #Pie. puntosPie := puntosPie +1].
	((self mesa at: #Pie) = (self mesa at: #Mano)) ifTrue: [turno := #Mano. puntosPie := puntosPie +1. puntosMano := puntosMano +1].! !

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:22:25'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:22:25'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 20:22:25'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:22:25'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:22:25'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 20:22:25'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:22:25'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:22:25'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 20:22:25'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:22:25'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:22:25'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:22:25'!
PASSED!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:22:25'!
PASSED!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:22:25'!
PASSED!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:22:25'!
PASSED!

!testRun: #RondaTest #test19_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:22:25'!
PASSED!

!testRun: #RondaTest #test20_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:22:25'!
PASSED!

!testRun: #RondaTest #test21_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:22:25'!
PASSED!

!testRun: #RondaTest #test22_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 20:22:25'!
PASSED!

!testRun: #RondaTest #test23_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 20:22:25'!
FAILURE!

!testRun: #RondaTest #test23_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 20:22:25'!
FAILURE!

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:22:32'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:22:32'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 20:22:32'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:22:32'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:22:32'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 20:22:32'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:22:32'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:22:32'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 20:22:32'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:22:32'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:22:32'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:22:32'!
PASSED!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:22:32'!
PASSED!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:22:32'!
PASSED!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:22:32'!
PASSED!

!testRun: #RondaTest #test19_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:22:32'!
PASSED!

!testRun: #RondaTest #test20_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:22:32'!
PASSED!

!testRun: #RondaTest #test21_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:22:32'!
PASSED!

!testRun: #RondaTest #test22_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 20:22:32'!
PASSED!

!testRun: #RondaTest #test23_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 20:22:32'!
FAILURE!

!testRun: #RondaTest #test23_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 20:22:32'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:22:51' prior: 50865225!
checkGanador
	((self mesa at: #Pie) = (self mesa at: #Mano)) ifTrue: [turno := #Mano. puntosPie := puntosPie +1. puntosMano := puntosMano +1].
	((self mesa at: #Mano) mataA: (self mesa at: #Pie)) ifTrue: [turno := #Mano. puntosMano := puntosMano +1].
	((self mesa at: #Pie) mataA: (self mesa at: #Mano)) ifTrue: [turno := #Pie. puntosPie := puntosPie +1].
	! !

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:22:51'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:22:51'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 20:22:51'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:22:51'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:22:52'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 20:22:52'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:22:52'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:22:52'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 20:22:52'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:22:52'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:22:52'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:22:52'!
PASSED!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:22:52'!
PASSED!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:22:52'!
PASSED!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:22:52'!
PASSED!

!testRun: #RondaTest #test19_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:22:52'!
PASSED!

!testRun: #RondaTest #test20_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:22:52'!
PASSED!

!testRun: #RondaTest #test21_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:22:52'!
PASSED!

!testRun: #RondaTest #test22_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 20:22:52'!
PASSED!

!testRun: #RondaTest #test23_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 20:22:52'!
FAILURE!

!testRun: #RondaTest #test23_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 20:22:52'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:23:07' prior: 50865379!
checkGanador
	((self mesa at: #Pie) empardaCon: (self mesa at: #Mano)) ifTrue: [turno := #Mano. puntosPie := puntosPie +1. puntosMano := puntosMano +1].
	((self mesa at: #Mano) mataA: (self mesa at: #Pie)) ifTrue: [turno := #Mano. puntosMano := puntosMano +1].
	((self mesa at: #Pie) mataA: (self mesa at: #Mano)) ifTrue: [turno := #Pie. puntosPie := puntosPie +1].
	! !

!testRun: #RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:23:08'!
PASSED!

!testRun: #RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:23:08'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 20:23:08'!
PASSED!

!testRun: #RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:23:08'!
PASSED!

!testRun: #RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:23:08'!
PASSED!

!testRun: #RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 20:23:08'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:23:08'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:23:08'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 20:23:08'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:23:08'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:23:08'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:23:08'!
PASSED!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:23:08'!
PASSED!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:23:08'!
PASSED!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:23:08'!
PASSED!

!testRun: #RondaTest #test19_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:23:08'!
PASSED!

!testRun: #RondaTest #test20_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:23:08'!
PASSED!

!testRun: #RondaTest #test21_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:23:08'!
PASSED!

!testRun: #RondaTest #test22_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 20:23:08'!
PASSED!

!testRun: #RondaTest #test23_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 20:23:08'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:23:18' prior: 50865198!
test23_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco espadaCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco espadaCon: 4).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 4).

	self assert: 	1 equals: ronda puntosMano.
	self assert: 	1 equals: ronda puntosPie.
	self assert: #Mano equals: ronda turno.! !

!classDefinition: #RondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'LB 7/5/2021 20:25:00'!
TestCase subclass: #RondaTest
	instanceVariableNames: 'cartasMano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'LB 7/5/2021 20:25:01'!
TestCase subclass: #RondaTest
	instanceVariableNames: 'cartasMano cartasPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaTest methodsFor: 'nil' stamp: 'LB 7/5/2021 20:24:59' overrides: 16927572!
setUp
	cartasMano := OrderedCollection with: (CartaDeTruco espadaCon: 4) with: 	(CartaDeTruco espadaCon: 5) with: (CartaDeTruco espadaCon: 6).
	cartasPie := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:25:29' prior: 50860385!
test02_ManoIniciaCon3CartasDeTrucoDistintas	

	| mano |
	mano := OrderedCollection with: CartaDeTruco anchoDeBasto with: 	CartaDeTruco anchoDeBasto with: CartaDeTruco anchoDeEspada.
	
	self should: [Ronda withMano: mano pie: cartasPie]
		raise: Error - MessageNotUnderstood 
		withMessageText: Ronda cartasRepetidasErrorDescription.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:25:36'!
test01_ManoIniciaCon3CartasDeTrucoDistintas	

	| mano |
	mano := OrderedCollection with: CartaDeTruco anchoDeBasto with: 	CartaDeTruco anchoDeBasto with: CartaDeTruco anchoDeEspada.
	
	self should: [Ronda withMano: mano pie: cartasPie]
		raise: Error - MessageNotUnderstood 
		withMessageText: Ronda cartasRepetidasErrorDescription.! !

!methodRemoval: RondaTest #test02_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:25:37'!
test02_ManoIniciaCon3CartasDeTrucoDistintas	

	| mano |
	mano := OrderedCollection with: CartaDeTruco anchoDeBasto with: 	CartaDeTruco anchoDeBasto with: CartaDeTruco anchoDeEspada.
	
	self should: [Ronda withMano: mano pie: cartasPie]
		raise: Error - MessageNotUnderstood 
		withMessageText: Ronda cartasRepetidasErrorDescription.!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:25:40'!
test02_PieIniciaCon3CartasDeTrucoDistintas	

	| mano pie |
	mano := OrderedCollection with: CartaDeTruco anchoDeBasto with: 	CartaDeTruco sieteDeEspada with: CartaDeTruco anchoDeEspada.
	pie := OrderedCollection with: CartaDeTruco anchoDeBasto with: 	CartaDeTruco anchoDeBasto with: CartaDeTruco anchoDeEspada.
	
	self should: [Ronda withMano: mano pie: pie]
		raise: Error - MessageNotUnderstood 
		withMessageText: Ronda cartasRepetidasErrorDescription.! !

!methodRemoval: RondaTest #test03_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:25:40'!
test03_PieIniciaCon3CartasDeTrucoDistintas	

	| mano pie |
	mano := OrderedCollection with: CartaDeTruco anchoDeBasto with: 	CartaDeTruco sieteDeEspada with: CartaDeTruco anchoDeEspada.
	pie := OrderedCollection with: CartaDeTruco anchoDeBasto with: 	CartaDeTruco anchoDeBasto with: CartaDeTruco anchoDeEspada.
	
	self should: [Ronda withMano: mano pie: pie]
		raise: Error - MessageNotUnderstood 
		withMessageText: Ronda cartasRepetidasErrorDescription.!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:25:49'!
test03_ManoyPieDebenTenerCartasDistintas

	| mano pie |
	mano := OrderedCollection with: CartaDeTruco anchoDeBasto with: 	CartaDeTruco sieteDeEspada with: CartaDeTruco anchoDeEspada.
	pie := OrderedCollection with: CartaDeTruco anchoDeBasto with: 	CartaDeTruco sieteDeEspada with: CartaDeTruco anchoDeEspada.
	
	self should: [Ronda withMano: mano pie: pie]
		raise: Error - MessageNotUnderstood 
		withMessageText: Ronda cartasRepetidasErrorDescription.! !

!methodRemoval: RondaTest #test04_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 20:25:49'!
test04_ManoyPieDebenTenerCartasDistintas

	| mano pie |
	mano := OrderedCollection with: CartaDeTruco anchoDeBasto with: 	CartaDeTruco sieteDeEspada with: CartaDeTruco anchoDeEspada.
	pie := OrderedCollection with: CartaDeTruco anchoDeBasto with: 	CartaDeTruco sieteDeEspada with: CartaDeTruco anchoDeEspada.
	
	self should: [Ronda withMano: mano pie: pie]
		raise: Error - MessageNotUnderstood 
		withMessageText: Ronda cartasRepetidasErrorDescription.!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:25:59'!
test04_ManoyPieDebenTenerCartasDeTruco

	| mano pie |
	mano := OrderedCollection with: 1 with: 	2 with: 3.
	pie := OrderedCollection with: 4 with: 	5 with: 6.
	
	self should: [Ronda withMano: mano pie: pie]
		raise: Error - MessageNotUnderstood 
		withMessageText: Ronda cartasInvalidasErrorDescription.! !

!methodRemoval: RondaTest #test05_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:25:59'!
test05_ManoyPieDebenTenerCartasDeTruco

	| mano pie |
	mano := OrderedCollection with: 1 with: 	2 with: 3.
	pie := OrderedCollection with: 4 with: 	5 with: 6.
	
	self should: [Ronda withMano: mano pie: pie]
		raise: Error - MessageNotUnderstood 
		withMessageText: Ronda cartasInvalidasErrorDescription.!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:26:09'!
test05_RondaIniciaEnEnfrentamiento1ySinCartasJugadas

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	self assert: 1 equals: ronda enfrentamiento.
	self assert: 0 equals: ronda mesa size.! !

!methodRemoval: RondaTest #test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:26:10'!
test07_RondaIniciaEnEnfrentamiento1ySinCartasJugadas

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	self assert: 1 equals: ronda enfrentamiento.
	self assert: 0 equals: ronda mesa size.!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:26:16'!
test06_ManoTiraPrimero

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	self assert: #Mano equals: ronda turno.! !

!methodRemoval: RondaTest #test08_ManoTiraPrimero stamp: 'LB 7/5/2021 20:26:16'!
test08_ManoTiraPrimero

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	self assert: #Mano equals: ronda turno.!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:26:32' prior: 50865762!
test06_ManoTiraPrimero

	| ronda |
	ronda := Ronda withMano: cartasMano pie: cartasPie.
	
	self assert: #Mano equals: ronda turno.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:26:49' prior: 50865728!
test05_RondaIniciaEnEnfrentamiento1ySinCartasJugadas

	| ronda |
	ronda := Ronda withMano: cartasMano pie: cartasPie.
	
	self assert: 1 equals: ronda enfrentamiento.
	self assert: 0 equals: ronda mesa size.! !

!testRun: #RondaTest #test05_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:26:52'!
PASSED!

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:26:52'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:26:52'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 20:26:52'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:26:52'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:26:52'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 20:26:52'!
PASSED!

!testRun: #RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:26:52'!
PASSED!

!testRun: #RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:26:52'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 20:26:52'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:26:52'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:26:52'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:26:52'!
PASSED!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:26:52'!
PASSED!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:26:52'!
PASSED!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:26:52'!
PASSED!

!testRun: #RondaTest #test19_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:26:52'!
PASSED!

!testRun: #RondaTest #test20_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:26:52'!
PASSED!

!testRun: #RondaTest #test21_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:26:52'!
PASSED!

!testRun: #RondaTest #test22_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 20:26:52'!
PASSED!

!testRun: #RondaTest #test23_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 20:26:52'!
PASSED!

----SNAPSHOT----(5 July 2021 20:27:18) CuisUniversity-4532.image priorSource: 16977424!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:28:31'!
test07_ManoSoloPuedeJugarUnaCartaSuya

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	self should: [ronda juega: #Mano carta: (CartaDeTruco oroCon: 4).]
		raise: Error - MessageNotUnderstood
		withMessageText: Ronda cartaInvalidaErrorDescription.! !

!methodRemoval: RondaTest #test09_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:28:31'!
test09_ManoSoloPuedeJugarUnaCartaSuya

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	self should: [ronda juega: #Mano carta: (CartaDeTruco oroCon: 4).]
		raise: Error - MessageNotUnderstood
		withMessageText: Ronda cartaInvalidaErrorDescription.!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:29:00' prior: 50865880!
test07_ManoSoloPuedeJugarUnaCartaSuya

	| ronda |
	ronda := Ronda withMano: cartasMano pie: cartasPie.
	
	self should: [ronda juega: #Mano carta: (CartaDeTruco oroCon: 4).]
		raise: Error - MessageNotUnderstood
		withMessageText: Ronda cartaInvalidaErrorDescription.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:29:08'!
test08_RondaConoceLaCartaJugada

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 1).
	
	self assert: (ronda mesaAt: #Mano) equals: (CartaDeTruco oroCon: 1).
	self assert: 1 equals: ronda mesa size.! !

!methodRemoval: RondaTest #test10_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:29:08'!
test10_RondaConoceLaCartaJugada

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 1).
	
	self assert: (ronda mesaAt: #Mano) equals: (CartaDeTruco oroCon: 1).
	self assert: 1 equals: ronda mesa size.!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:30:53' prior: 50865929!
test08_RondaConoceLaCartaJugada

	| ronda |
	ronda := Ronda withMano: cartasMano pie: cartasPie.
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 1).
	
	self assert: (ronda mesaAt: #Mano) equals: (CartaDeTruco oroCon: 1).
	self assert: 1 equals: ronda mesa size.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:31:46' prior: 50865967!
test08_RondaConoceLaCartaJugada

	| ronda |
	ronda := Ronda withMano: cartasMano pie: cartasPie.
	ronda juega: #Mano carta: (cartasMano at: 1).
	
	self assert: (ronda mesaAt: #Mano) equals: (cartasMano at: 1).
	self assert: 1 equals: ronda mesa size.! !

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:31:48'!
FAILURE!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:32:05'!
FAILURE!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:34:07'!
FAILURE!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:34:07'!
FAILURE!
!RondaTest methodsFor: 'initialization' stamp: 'LB 7/5/2021 20:35:57'!
cartasMano 
	^OrderedCollection with: (CartaDeTruco espadaCon: 4) with: 	(CartaDeTruco espadaCon: 5) with: (CartaDeTruco espadaCon: 6).
	! !
!RondaTest methodsFor: 'initialization' stamp: 'LB 7/5/2021 20:36:03'!
cartasPie 
	^OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).! !

!methodRemoval: RondaTest #setUp stamp: 'LB 7/5/2021 20:36:06'!
setUp
	cartasMano := OrderedCollection with: (CartaDeTruco espadaCon: 4) with: 	(CartaDeTruco espadaCon: 5) with: (CartaDeTruco espadaCon: 6).
	cartasPie := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).!
!RondaTest methodsFor: 'tests - incio ronda' stamp: 'LB 7/5/2021 20:36:13' prior: 50865607!
test01_ManoIniciaCon3CartasDeTrucoDistintas	

	| mano |
	mano := OrderedCollection with: CartaDeTruco anchoDeBasto with: 	CartaDeTruco anchoDeBasto with: CartaDeTruco anchoDeEspada.
	
	self should: [Ronda withMano: mano pie: self cartasPie]
		raise: Error - MessageNotUnderstood 
		withMessageText: Ronda cartasRepetidasErrorDescription.! !
!RondaTest methodsFor: 'tests - incio ronda' stamp: 'LB 7/5/2021 20:36:25' prior: 50865799!
test05_RondaIniciaEnEnfrentamiento1ySinCartasJugadas

	| ronda |
	ronda := Ronda withMano: self cartasMano pie: self cartasPie.
	
	self assert: 1 equals: ronda enfrentamiento.
	self assert: 0 equals: ronda mesa size.! !
!RondaTest methodsFor: 'tests - incio ronda' stamp: 'LB 7/5/2021 20:36:31' prior: 50865791!
test06_ManoTiraPrimero

	| ronda |
	ronda := Ronda withMano: self cartasMano pie: self cartasPie.
	
	self assert: #Mano equals: ronda turno.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:36:37' prior: 50865918!
test07_ManoSoloPuedeJugarUnaCartaSuya

	| ronda |
	ronda := Ronda withMano: self cartasMano pie: self cartasPie.
	
	self should: [ronda juega: #Mano carta: (CartaDeTruco oroCon: 4).]
		raise: Error - MessageNotUnderstood
		withMessageText: Ronda cartaInvalidaErrorDescription.! !

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:36:38'!
PASSED!

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:36:38'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:36:38'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 20:36:38'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:36:38'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:36:38'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 20:36:38'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:36:38'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:36:38'!
ERROR!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 20:36:38'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:36:38'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:36:38'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:36:38'!
PASSED!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:36:38'!
PASSED!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:36:38'!
PASSED!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:36:38'!
PASSED!

!testRun: #RondaTest #test19_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:36:38'!
PASSED!

!testRun: #RondaTest #test20_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:36:38'!
PASSED!

!testRun: #RondaTest #test21_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:36:38'!
PASSED!

!testRun: #RondaTest #test22_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 20:36:38'!
PASSED!

!testRun: #RondaTest #test23_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 20:36:38'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:36:38'!
ERROR!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:36:52' prior: 50865979!
test08_RondaConoceLaCartaJugada

	| ronda |
	ronda := Ronda withMano: self cartasMano pie: self cartasPie.
	ronda juega: #Mano carta: (self cartasMano at: 1).
	
	self assert: (ronda mesaAt: #Mano) equals: (self cartasMano at: 1).
	self assert: 1 equals: ronda mesa size.! !

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:36:53'!
PASSED!

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:36:53'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:36:53'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 20:36:53'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:36:53'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:36:53'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 20:36:53'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:36:53'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:36:53'!
PASSED!

!testRun: #RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 20:36:53'!
PASSED!

!testRun: #RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:36:53'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:36:53'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:36:53'!
PASSED!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:36:53'!
PASSED!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:36:53'!
PASSED!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:36:53'!
PASSED!

!testRun: #RondaTest #test19_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:36:53'!
PASSED!

!testRun: #RondaTest #test20_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:36:53'!
PASSED!

!testRun: #RondaTest #test21_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:36:53'!
PASSED!

!testRun: #RondaTest #test22_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 20:36:53'!
PASSED!

!testRun: #RondaTest #test23_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 20:36:53'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:37:28' prior: 50864047!
test11_LuegoDeJugarManoEsTurnoDePie

	| ronda |
	ronda := Ronda withMano: self cartasMano pie: self cartasPie.
	
	ronda juega: #Mano carta: (self cartasMano at: 1).
	
	self assert: #Pie equals: ronda turno.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:37:36'!
test09_LuegoDeJugarManoEsTurnoDePie

	| ronda |
	ronda := Ronda withMano: self cartasMano pie: self cartasPie.
	
	ronda juega: #Mano carta: (self cartasMano at: 1).
	
	self assert: #Pie equals: ronda turno.! !

!methodRemoval: RondaTest #test11_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 20:37:36'!
test11_LuegoDeJugarManoEsTurnoDePie

	| ronda |
	ronda := Ronda withMano: self cartasMano pie: self cartasPie.
	
	ronda juega: #Mano carta: (self cartasMano at: 1).
	
	self assert: #Pie equals: ronda turno.!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:37:44'!
test10_ManoSoloPuedeTirarEnSuTurno

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 1).
	
	self should: [ronda juega: #Mano carta: (CartaDeTruco oroCon: 2).]
		raise: Error - MessageNotUnderstood
		withMessageText: Ronda noEsTuTurnoErrorDescription.! !

!methodRemoval: RondaTest #test12_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:37:44'!
test12_ManoSoloPuedeTirarEnSuTurno

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 1).
	
	self should: [ronda juega: #Mano carta: (CartaDeTruco oroCon: 2).]
		raise: Error - MessageNotUnderstood
		withMessageText: Ronda noEsTuTurnoErrorDescription.!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:38:26' prior: 50866251!
test10_ManoSoloPuedeTirarEnSuTurno

	| ronda |
	ronda := Ronda withMano: self cartasMano pie: self cartasPie.
	
	ronda juega: #Mano carta: (self cartasMano at: 1).
	
	self should: [ronda juega: #Mano carta: (self cartasMano at: 2).]
		raise: Error - MessageNotUnderstood
		withMessageText: Ronda noEsTuTurnoErrorDescription.! !

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:38:27'!
PASSED!

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:38:27'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:38:27'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 20:38:27'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:38:27'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:38:27'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 20:38:27'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:38:27'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:38:27'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 20:38:27'!
PASSED!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:38:27'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:38:27'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:38:27'!
PASSED!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:38:27'!
PASSED!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:38:27'!
PASSED!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:38:27'!
PASSED!

!testRun: #RondaTest #test19_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:38:27'!
PASSED!

!testRun: #RondaTest #test20_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:38:27'!
PASSED!

!testRun: #RondaTest #test21_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:38:27'!
PASSED!

!testRun: #RondaTest #test22_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 20:38:27'!
PASSED!

!testRun: #RondaTest #test23_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 20:38:27'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:38:53' prior: 50864315!
test13_PieSoloPuedeTirarEnSuTurno

	| ronda |
	ronda := Ronda withMano: self cartasMano pie: self cartasPie.
	
	self should: [ronda juega: #Pie carta: (self cartasPie at: 1).]
		raise: Error - MessageNotUnderstood
		withMessageText: Ronda noEsTuTurnoErrorDescription.! !

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:38:53'!
PASSED!

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:38:54'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:38:54'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 20:38:54'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:38:54'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:38:54'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 20:38:54'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:38:54'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:38:54'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 20:38:54'!
PASSED!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:38:54'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:38:54'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:38:54'!
PASSED!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:38:54'!
PASSED!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:38:54'!
PASSED!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:38:54'!
PASSED!

!testRun: #RondaTest #test19_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:38:54'!
PASSED!

!testRun: #RondaTest #test20_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:38:54'!
PASSED!

!testRun: #RondaTest #test21_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:38:54'!
PASSED!

!testRun: #RondaTest #test22_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 20:38:54'!
PASSED!

!testRun: #RondaTest #test23_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 20:38:54'!
PASSED!
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:39:37' prior: 50864085!
test14_PieSoloPuedeJugarUnaCartaSuya
	
	| ronda |
	ronda := Ronda withMano: self cartasMano pie: self cartasPie.
	ronda juega: #Mano carta: (self cartasMano at: 1).
	
	self should: [ronda juega: #Pie carta: (self cartasMano at: 1).]
		raise: Error - MessageNotUnderstood
		withMessageText: Ronda cartaInvalidaErrorDescription.! !
!RondaTest methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:40:01' prior: 50863782!
test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores
	| ronda |
	ronda := Ronda withMano: self cartasMano pie: self cartasPie.
	ronda juega: #Mano carta: (self cartasMano at: 1).
	ronda juega: #Pie carta: (self cartasPie at: 1).
	
	self assert: 2 equals: ronda enfrentamiento.
	self assert: 0 equals: ronda mesa size.! !

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:40:02'!
PASSED!

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:40:02'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:40:02'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 20:40:02'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:40:02'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:40:02'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 20:40:02'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:40:02'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:40:02'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 20:40:02'!
PASSED!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:40:02'!
PASSED!

!testRun: #RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:40:02'!
PASSED!

!testRun: #RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:40:02'!
PASSED!

!testRun: #RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:40:02'!
PASSED!

!testRun: #RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:40:02'!
PASSED!

!testRun: #RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:40:02'!
PASSED!

!testRun: #RondaTest #test19_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:40:02'!
PASSED!

!testRun: #RondaTest #test20_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:40:02'!
PASSED!

!testRun: #RondaTest #test21_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:40:02'!
PASSED!

!testRun: #RondaTest #test22_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 20:40:02'!
PASSED!

!testRun: #RondaTest #test23_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 20:40:02'!
PASSED!
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 20:40:35'!
test11_PieSoloPuedeTirarEnSuTurno

	| ronda |
	ronda := Ronda withMano: self cartasMano pie: self cartasPie.
	
	self should: [ronda juega: #Pie carta: (self cartasPie at: 1).]
		raise: Error - MessageNotUnderstood
		withMessageText: Ronda noEsTuTurnoErrorDescription.! !

!methodRemoval: RondaTest #test13_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:40:35'!
test13_PieSoloPuedeTirarEnSuTurno

	| ronda |
	ronda := Ronda withMano: self cartasMano pie: self cartasPie.
	
	self should: [ronda juega: #Pie carta: (self cartasPie at: 1).]
		raise: Error - MessageNotUnderstood
		withMessageText: Ronda noEsTuTurnoErrorDescription.!
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 20:40:38'!
test12_PieSoloPuedeJugarUnaCartaSuya
	
	| ronda |
	ronda := Ronda withMano: self cartasMano pie: self cartasPie.
	ronda juega: #Mano carta: (self cartasMano at: 1).
	
	self should: [ronda juega: #Pie carta: (self cartasMano at: 1).]
		raise: Error - MessageNotUnderstood
		withMessageText: Ronda cartaInvalidaErrorDescription.! !

!methodRemoval: RondaTest #test14_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:40:38'!
test14_PieSoloPuedeJugarUnaCartaSuya
	
	| ronda |
	ronda := Ronda withMano: self cartasMano pie: self cartasPie.
	ronda juega: #Mano carta: (self cartasMano at: 1).
	
	self should: [ronda juega: #Pie carta: (self cartasMano at: 1).]
		raise: Error - MessageNotUnderstood
		withMessageText: Ronda cartaInvalidaErrorDescription.!
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 20:40:41'!
test13_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores
	| ronda |
	ronda := Ronda withMano: self cartasMano pie: self cartasPie.
	ronda juega: #Mano carta: (self cartasMano at: 1).
	ronda juega: #Pie carta: (self cartasPie at: 1).
	
	self assert: 2 equals: ronda enfrentamiento.
	self assert: 0 equals: ronda mesa size.! !

!methodRemoval: RondaTest #test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:40:41'!
test16_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores
	| ronda |
	ronda := Ronda withMano: self cartasMano pie: self cartasPie.
	ronda juega: #Mano carta: (self cartasMano at: 1).
	ronda juega: #Pie carta: (self cartasPie at: 1).
	
	self assert: 2 equals: ronda enfrentamiento.
	self assert: 0 equals: ronda mesa size.!
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 20:40:44'!
test14_GanadorManoComienzaElSiguienteEnfrentamiento

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 1).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 4).
	
	self assert: #Mano equals: ronda turno.! !

!methodRemoval: RondaTest #test17_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:40:44'!
test17_GanadorManoComienzaElSiguienteEnfrentamiento

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 1).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 4).
	
	self assert: #Mano equals: ronda turno.!
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 20:40:47'!
test15_GanadorPieComienzaElSiguienteEnfrentamiento

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 5).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 2).
	
	self assert: #Pie equals: ronda turno.! !

!methodRemoval: RondaTest #test18_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:40:47'!
test18_GanadorPieComienzaElSiguienteEnfrentamiento

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 5).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 2).
	
	self assert: #Pie equals: ronda turno.!
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 20:40:50'!
test16_GanadorDeEnfrentamientoGana1Punto

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 1).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 4).
	
	self assert: 0 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 5).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 2).
	
	self assert: 1 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.! !

!methodRemoval: RondaTest #test19_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:40:50'!
test19_GanadorDeEnfrentamientoGana1Punto

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 1).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 4).
	
	self assert: 0 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 5).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 2).
	
	self assert: 1 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.!
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 20:40:54'!
test17_ManoGanaEnSegundaRondaAlSumar2Puntos

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 1).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 4).
	
	self assert: 0 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 3).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 6).
	
	self assert: 0 equals: ronda puntosPie.
	self assert: 2 equals: ronda puntosMano.
	self assert: #Mano equals: ronda ganador.! !

!methodRemoval: RondaTest #test20_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:40:54'!
test20_ManoGanaEnSegundaRondaAlSumar2Puntos

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 1).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 4).
	
	self assert: 0 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 3).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 6).
	
	self assert: 0 equals: ronda puntosPie.
	self assert: 2 equals: ronda puntosMano.
	self assert: #Mano equals: ronda ganador.!
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 20:40:57'!
test18_PieGanaEnTercerRondaAlSumar2Puntos

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 1).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 4).
	
	self assert: 0 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 5).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 2).
	
	self assert: 1 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 3).
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 6).
	
	self assert: 2 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	self assert: #Pie equals: ronda ganador.! !

!methodRemoval: RondaTest #test21_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:40:57'!
test21_PieGanaEnTercerRondaAlSumar2Puntos

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 1).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 4).
	
	self assert: 0 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 5).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 2).
	
	self assert: 1 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 3).
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 6).
	
	self assert: 2 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	self assert: #Pie equals: ronda ganador.!
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 20:41:01'!
test19_NoSePuedeVolverAJugarLaMismaCarta

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 1).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 4).

	
	self should: [ronda juega: #Mano carta: (CartaDeTruco oroCon: 1)]
		raise: Error - MessageNotUnderstood 
		withMessageText: Ronda cartaInvalidaErrorDescription.
! !

!methodRemoval: RondaTest #test22_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 20:41:01'!
test22_NoSePuedeVolverAJugarLaMismaCarta

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 1).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 4).

	
	self should: [ronda juega: #Mano carta: (CartaDeTruco oroCon: 1)]
		raise: Error - MessageNotUnderstood 
		withMessageText: Ronda cartaInvalidaErrorDescription.
!
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 20:41:05'!
test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco espadaCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco espadaCon: 4).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 4).

	self assert: 	1 equals: ronda puntosMano.
	self assert: 	1 equals: ronda puntosPie.
	self assert: #Mano equals: ronda turno.! !

!methodRemoval: RondaTest #test23_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 20:41:05'!
test23_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco espadaCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco espadaCon: 4).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 4).

	self assert: 	1 equals: ronda puntosMano.
	self assert: 	1 equals: ronda puntosPie.
	self assert: #Mano equals: ronda turno.!
!RondaTest methodsFor: 'initialization' stamp: 'LB 7/5/2021 20:41:58' prior: 50866002!
cartasMano 
	^OrderedCollection with: (CartaDeTruco espadaCon: 4) with: 	(CartaDeTruco espadaCon: 3) with: (CartaDeTruco espadaCon: 6).
	! !
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 20:43:04' prior: 50866629!
test14_GanadorManoComienzaElSiguienteEnfrentamiento

	| ronda |
	ronda := Ronda withMano: self cartasMano pie: self cartasPie.
	ronda juega: #Mano carta: (self cartasMano at: 2). "3 de espada"
	ronda juega: #Pie carta: (self cartasPie at: 1). "1 de oro"
	
	self assert: #Mano equals: ronda turno.! !

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:43:05'!
PASSED!

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:43:05'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:43:05'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 20:43:05'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:43:05'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:43:05'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 20:43:05'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:43:05'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:43:05'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 20:43:05'!
PASSED!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:43:05'!
PASSED!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:43:05'!
PASSED!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:43:05'!
PASSED!

!testRun: #RondaTest #test13_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:43:05'!
PASSED!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:43:05'!
PASSED!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:43:05'!
PASSED!

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:43:05'!
PASSED!

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:43:05'!
PASSED!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:43:05'!
PASSED!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 20:43:05'!
PASSED!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 20:43:05'!
PASSED!
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 20:43:24' prior: 50866667!
test15_GanadorPieComienzaElSiguienteEnfrentamiento

	| ronda |
	ronda := Ronda withMano: self cartasMano pie: self cartasPie.
	ronda juega: #Mano carta: (self cartasMano at: 1). "3 de espada"
	ronda juega: #Pie carta: (self cartasPie at: 1). "1 de oro"
	
	self assert: #Pie equals: ronda turno.! !

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:43:25'!
PASSED!

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:43:25'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:43:25'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 20:43:25'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:43:25'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:43:25'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 20:43:25'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:43:25'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:43:25'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 20:43:25'!
PASSED!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:43:25'!
PASSED!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:43:25'!
PASSED!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:43:25'!
PASSED!

!testRun: #RondaTest #test13_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:43:25'!
PASSED!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:43:25'!
PASSED!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:43:25'!
PASSED!

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:43:25'!
PASSED!

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:43:25'!
PASSED!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:43:25'!
PASSED!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 20:43:25'!
PASSED!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 20:43:25'!
PASSED!
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 20:43:33' prior: 50867060!
test15_GanadorPieComienzaElSiguienteEnfrentamiento

	| ronda |
	ronda := Ronda withMano: self cartasMano pie: self cartasPie.
	ronda juega: #Mano carta: (self cartasMano at: 1). "4 de espada"
	ronda juega: #Pie carta: (self cartasPie at: 1). "1 de oro"
	
	self assert: #Pie equals: ronda turno.! !
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 20:44:29' prior: 50866705!
test16_GanadorDeEnfrentamientoGana1Punto

	| ronda |
	ronda := Ronda withMano: self cartasMano pie: self cartasPie.
	ronda juega: #Mano carta: (self cartasMano at: 2). "3 de espada"
	ronda juega: #Pie carta: (self cartasPie at: 1). "1 de oro"
	
	self assert: 0 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	
	ronda juega: #Mano carta: (self cartasMano at: 1). "4 de espada"
	ronda juega: #Pie carta: (self cartasPie at: 2). "2 de espada"
	
	self assert: 1 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.! !

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:44:40'!
PASSED!

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:44:40'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:44:40'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 20:44:40'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:44:40'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:44:40'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 20:44:40'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:44:40'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:44:40'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 20:44:40'!
PASSED!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:44:40'!
PASSED!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:44:40'!
PASSED!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:44:40'!
PASSED!

!testRun: #RondaTest #test13_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:44:40'!
PASSED!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:44:40'!
PASSED!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:44:40'!
PASSED!

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:44:40'!
PASSED!

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:44:40'!
PASSED!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:44:40'!
PASSED!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 20:44:40'!
PASSED!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 20:44:40'!
PASSED!
!Behavior method!
anchoDeBasto
	^ [
	(self coverAll:
		{18 to: 21}) bastoCon:
		(1 coverAll:
			{32 to: 33}) ] valueCoveringAll:
		{23 to: 31}.! !
!Behavior method!
bastoCon: unNumero
	^ [
	(self coverAll:
		{23 to: 26})
		palo:
			([
			(self coverAll:
				{34 to: 37}) basto ] valueCoveringAll:
				{39 to: 43})
		numero:
			(unNumero
				cover: (53 to: 60)
				declaredAt: (11 to: 18)) ] valueCoveringAll:
		{28 to: 32. 45 to: 51}.! !
!Behavior method!
basto
	^ #basto coverAll:
		{11 to: 16}.! !
!Behavior method!
palo: unPalo numero: unNumero
	[
	(self coverAll:
		{35 to: 38}) assertNúmeroEsVálido:
		(unNumero
			cover: (62 to: 69)
			declaredAt: (22 to: 29)) ] valueCoveringAll:
		{40 to: 60}.
	[
	(self coverAll:
		{73 to: 76}) assertPaloEsVálido:
		(unPalo
			cover: (98 to: 103)
			declaredAt: (7 to: 12)) ] valueCoveringAll:
		{78 to: 96}.
	^ [
	([
	(self coverAll:
		{110 to: 113}) new ] valueCoveringAll:
		{115 to: 117})
		initializePalo:
			(unPalo
				cover: (135 to: 140)
				declaredAt: (7 to: 12))
		numero:
			(unNumero
				cover: (150 to: 157)
				declaredAt: (22 to: 29)) ] valueCoveringAll:
		{119 to: 133. 142 to: 148}.! !
!Behavior method!
assertNúmeroEsVálido: unNumero
	[
	([
	(unNumero
		cover: (34 to: 41)
		declaredAt: (23 to: 30)) <
		(1 coverAll:
			{45 to: 45}) ] valueCoveringAll:
		{43 to: 43}) ifTrue: [
		[
		(self coverAll:
			{57 to: 60}) error:
			([
			(self coverAll:
				{69 to: 72}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{74 to: 110}) ] valueCoveringAll:
			{62 to: 67} ]] valueCoveringAll:
		{47 to: 53}.
	[
	([
	(unNumero
		cover: (116 to: 123)
		declaredAt: (23 to: 30)) >
		(12 coverAll:
			{127 to: 128}) ] valueCoveringAll:
		{125 to: 125}) ifTrue: [
		[
		(self coverAll:
			{140 to: 143}) error:
			([
			(self coverAll:
				{152 to: 155}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{157 to: 193}) ] valueCoveringAll:
			{145 to: 150} ]] valueCoveringAll:
		{130 to: 136}.
	[
	([
	(unNumero
		cover: (200 to: 207)
		declaredAt: (23 to: 30))
		between:
			(8 coverAll:
				{218 to: 218})
		and:
			(9 coverAll:
				{225 to: 225}) ] valueCoveringAll:
		{209 to: 216. 220 to: 223}) ifTrue: [
		[
		(self coverAll:
			{238 to: 241}) error:
			([
			(self coverAll:
				{250 to: 253}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{255 to: 291}) ] valueCoveringAll:
			{243 to: 248} ]] valueCoveringAll:
		{228 to: 234}.
	[
	([
	(unNumero
		cover: (297 to: 304)
		declaredAt: (23 to: 30)) isInteger ] valueCoveringAll:
		{306 to: 314}) ifFalse: [
		[
		(self coverAll:
			{327 to: 330}) error:
			([
			(self coverAll:
				{339 to: 342}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{344 to: 380}) ] valueCoveringAll:
			{332 to: 337} ]] valueCoveringAll:
		{316 to: 323}.! !
!Behavior method!
assertPaloEsVálido: unPalo
	^ [
	([
	([
	(self coverAll:
		{33 to: 36}) palos ] valueCoveringAll:
		{38 to: 42}) includes:
		(unPalo
			cover: (54 to: 59)
			declaredAt: (21 to: 26)) ] valueCoveringAll:
		{44 to: 52}) ifFalse: [
		[
		(self coverAll:
			{73 to: 76}) error:
			([
			(self coverAll:
				{85 to: 88}) paloInvalidoErrorDescription ] valueCoveringAll:
				{90 to: 117}) ] valueCoveringAll:
			{78 to: 83} ]] valueCoveringAll:
		{62 to: 69}.! !
!Behavior method!
espada
	^ #espada coverAll:
		{12 to: 18}.! !
!Behavior method!
oro
	^ #oro coverAll:
		{9 to: 12}.! !
!Behavior method!
copa
	^ #copa coverAll:
		{10 to: 14}.! !
!Behavior method!
palos
	"No se puede acceder a self en backtick, por eso se usa CartaDeTruco como receiver - Hernan"
	^ `{CartaDeTruco espada. CartaDeTruco basto. CartaDeTruco oro. CartaDeTruco copa}` coverAll:
		{105 to: 185}.! !
!Behavior method!
initializePalo: unPalo numero: unNumero
	(palo _ unPalo
		cover: (53 to: 58)
		declaredAt: (17 to: 22))
		cover: (45 to: 48)
		declaredAt: (45 to: 48).
	(numero _ unNumero
		cover: (72 to: 79)
		declaredAt: (32 to: 39))
		cover: (62 to: 67)
		declaredAt: (62 to: 67).! !
!Behavior method!
anchoDeEspada
	^ [
	(self coverAll:
		{19 to: 22}) espadaCon:
		(1 coverAll:
			{34 to: 35}) ] valueCoveringAll:
		{24 to: 33}.! !
!Behavior method!
espadaCon: unNumero
	^ [
	(self coverAll:
		{24 to: 27})
		palo:
			([
			(self coverAll:
				{35 to: 38}) espada ] valueCoveringAll:
				{40 to: 45})
		numero:
			(unNumero
				cover: (55 to: 62)
				declaredAt: (12 to: 19)) ] valueCoveringAll:
		{29 to: 33. 47 to: 53}.! !
!Behavior method!
cartasRepetidasErrorDescription
	^ 'error las cartas no pueden repetirse' coverAll:
		{35 to: 72}.! !
!Behavior method!
oroCon: unNumero
	^ [
	(self coverAll:
		{21 to: 24})
		palo:
			([
			(self coverAll:
				{32 to: 35}) oro ] valueCoveringAll:
				{37 to: 39})
		numero:
			(unNumero
				cover: (49 to: 56)
				declaredAt: (9 to: 16)) ] valueCoveringAll:
		{26 to: 30. 41 to: 47}.! !
!Behavior method!
withMano: mano pie: pie
	[
	([
	(mano
		cover: (29 to: 32)
		declaredAt: (11 to: 14)) anySatisfy: [ :carta |
		[
		([
		(mano
			cover: (57 to: 60)
			declaredAt: (11 to: 14)) occurrencesOf:
			(carta
				cover: (77 to: 81)
				declaredAt: (48 to: 52)) ] valueCoveringAll:
			{62 to: 75}) >
			(1 coverAll:
				{86 to: 86}) ] valueCoveringAll:
			{84 to: 84} ]] valueCoveringAll:
		{34 to: 44}) ifTrue: [ ^ [
		(self coverAll:
			{100 to: 103}) error:
			([
			(self coverAll:
				{112 to: 115}) cartasRepetidasErrorDescription ] valueCoveringAll:
				{117 to: 147}) ] valueCoveringAll:
			{105 to: 110} ]] valueCoveringAll:
		{90 to: 96}.
	[
	([
	(pie
		cover: (153 to: 155)
		declaredAt: (21 to: 23)) anySatisfy: [ :carta |
		[
		([
		(pie
			cover: (180 to: 182)
			declaredAt: (21 to: 23)) occurrencesOf:
			(carta
				cover: (199 to: 203)
				declaredAt: (171 to: 175)) ] valueCoveringAll:
			{184 to: 197}) >
			(1 coverAll:
				{208 to: 208}) ] valueCoveringAll:
			{206 to: 206} ]] valueCoveringAll:
		{157 to: 167}) ifTrue: [ ^ [
		(self coverAll:
			{222 to: 225}) error:
			([
			(self coverAll:
				{234 to: 237}) cartasRepetidasErrorDescription ] valueCoveringAll:
				{239 to: 269}) ] valueCoveringAll:
			{227 to: 232} ]] valueCoveringAll:
		{212 to: 218}.
	[
	([
	(pie
		cover: (275 to: 277)
		declaredAt: (21 to: 23)) anySatisfy: [ :carta |
		[
		(mano
			cover: (301 to: 304)
			declaredAt: (11 to: 14)) includes:
			(carta
				cover: (316 to: 320)
				declaredAt: (293 to: 297)) ] valueCoveringAll:
			{306 to: 314} ]] valueCoveringAll:
		{279 to: 289}) ifTrue: [ ^ [
		(self coverAll:
			{334 to: 337}) error:
			([
			(self coverAll:
				{346 to: 349}) cartasRepetidasErrorDescription ] valueCoveringAll:
				{351 to: 381}) ] valueCoveringAll:
			{339 to: 344} ]] valueCoveringAll:
		{324 to: 330}.
	[
	([
	(mano
		cover: (387 to: 390)
		declaredAt: (11 to: 14)) anySatisfy: [ :carta |
		[
		([
		(carta
			cover: (414 to: 418)
			declaredAt: (406 to: 410)) class ] valueCoveringAll:
			{420 to: 424}) ~=
			(CartaDeTruco
				cover: (429 to: 440)
				declaredAt: (429 to: 440)) ] valueCoveringAll:
			{426 to: 427} ]] valueCoveringAll:
		{392 to: 402}) ifTrue: [ ^ [
		(self coverAll:
			{454 to: 457}) error:
			([
			(self coverAll:
				{466 to: 469}) cartasInvalidasErrorDescription ] valueCoveringAll:
				{471 to: 501}) ] valueCoveringAll:
			{459 to: 464} ]] valueCoveringAll:
		{444 to: 450}.
	[
	([
	(pie
		cover: (508 to: 510)
		declaredAt: (21 to: 23)) anySatisfy: [ :carta |
		[
		([
		(carta
			cover: (534 to: 538)
			declaredAt: (526 to: 530)) class ] valueCoveringAll:
			{540 to: 544}) ~=
			(CartaDeTruco
				cover: (549 to: 560)
				declaredAt: (429 to: 440)) ] valueCoveringAll:
			{546 to: 547} ]] valueCoveringAll:
		{512 to: 522}) ifTrue: [ ^ [
		(self coverAll:
			{574 to: 577}) error:
			([
			(self coverAll:
				{586 to: 589}) cartasInvalidasErrorDescription ] valueCoveringAll:
				{591 to: 621}) ] valueCoveringAll:
			{579 to: 584} ]] valueCoveringAll:
		{564 to: 570}.
	^ [
	([
	(self coverAll:
		{628 to: 631}) new ] valueCoveringAll:
		{633 to: 635})
		initializeWithMano:
			(mano
				cover: (657 to: 660)
				declaredAt: (11 to: 14))
		pie:
			(pie
				cover: (667 to: 669)
				declaredAt: (21 to: 23)) ] valueCoveringAll:
		{637 to: 655. 662 to: 665}.! !
!Behavior method!
= unaCarta
	^ [
	([
	(unaCarta
		cover: (18 to: 25)
		declaredAt: (3 to: 10)) isKindOf:
		([
		(self coverAll:
			{37 to: 40}) class ] valueCoveringAll:
			{42 to: 46}) ] valueCoveringAll:
		{27 to: 35}) and: [
		[
		([
		(unaCarta
			cover: (56 to: 63)
			declaredAt: (3 to: 10)) paloEs:
			(palo
				cover: (73 to: 76)
				declaredAt: (73 to: 76)) ] valueCoveringAll:
			{65 to: 71}) and: [
			[
			(unaCarta
				cover: (86 to: 93)
				declaredAt: (3 to: 10)) numeroEs:
				(numero
					cover: (105 to: 110)
					declaredAt: (105 to: 110)) ] valueCoveringAll:
				{95 to: 103} ]] valueCoveringAll:
			{79 to: 82} ]] valueCoveringAll:
		{49 to: 52}.! !
!Behavior method!
paloEs: unPalo
	^ [
	(palo
		cover: (19 to: 22)
		declaredAt: (19 to: 22)) =
		(unPalo
			cover: (26 to: 31)
			declaredAt: (9 to: 14)) ] valueCoveringAll:
		{24 to: 24}.! !
!Behavior method!
numeroEs: unNumero
	^ [
	(numero
		cover: (23 to: 28)
		declaredAt: (23 to: 28)) =
		(unNumero
			cover: (32 to: 39)
			declaredAt: (11 to: 18)) ] valueCoveringAll:
		{30 to: 30}.! !

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:45:37'!
PASSED!
!Behavior method!
sieteDeEspada
	^ [
	(self coverAll:
		{19 to: 22}) espadaCon:
		(7 coverAll:
			{34 to: 35}) ] valueCoveringAll:
		{24 to: 33}.! !

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:45:37'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 20:45:37'!
PASSED!
!Behavior method!
cartasInvalidasErrorDescription
	^ 'Cartas invalidas' coverAll:
		{35 to: 52}.! !

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:45:37'!
PASSED!
!Behavior method!
initializeWithMano: jugadorMano pie: jugadorPie
	self.
	(cartas _ [
	(Dictionary
		cover: (62 to: 71)
		declaredAt: (62 to: 71)) new ] valueCoveringAll:
		{73 to: 75})
		cover: (52 to: 57)
		declaredAt: (52 to: 57).
	[
	(cartas
		cover: (79 to: 84)
		declaredAt: (52 to: 57))
		at:
			(#Mano coverAll:
				{90 to: 94})
		put:
			(jugadorMano
				cover: (101 to: 111)
				declaredAt: (21 to: 31)) ] valueCoveringAll:
		{86 to: 88. 96 to: 99}.
	[
	(cartas
		cover: (115 to: 120)
		declaredAt: (52 to: 57))
		at:
			(#Pie coverAll:
				{126 to: 129})
		put:
			(jugadorPie
				cover: (136 to: 145)
				declaredAt: (38 to: 47)) ] valueCoveringAll:
		{122 to: 124. 131 to: 134}.
	(cartasJugadas _ [
	(Dictionary
		cover: (168 to: 177)
		declaredAt: (62 to: 71)) new ] valueCoveringAll:
		{179 to: 181})
		cover: (151 to: 163)
		declaredAt: (151 to: 163).
	(enfrentamiento _ 1 coverAll:
		{203 to: 203})
		cover: (185 to: 198)
		declaredAt: (185 to: 198).
	(turno _ #Mano coverAll:
		{216 to: 220})
		cover: (207 to: 211)
		declaredAt: (207 to: 211).
	(puntosPie _ 0 coverAll:
		{237 to: 237})
		cover: (224 to: 232)
		declaredAt: (224 to: 232).
	(puntosMano _ 0 coverAll:
		{255 to: 255})
		cover: (241 to: 250)
		declaredAt: (241 to: 250).! !
!Behavior method!
enfrentamiento
	^ enfrentamiento
		cover: (18 to: 31)
		declaredAt: (18 to: 31).! !
!Behavior method!
mesa
	^ cartasJugadas
		cover: (8 to: 20)
		declaredAt: (8 to: 20).! !

!testRun: #RondaTest #test05_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:45:37'!
PASSED!
!Behavior method!
turno
	^ turno
		cover: (9 to: 13)
		declaredAt: (9 to: 13).! !

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 20:45:37'!
PASSED!
!Behavior method!
cartaInvalidaErrorDescription
	^ 'No tienes esa carta' coverAll:
		{33 to: 53}.! !
!Behavior method!
juega: unJugador carta: unaCarta
	[
	([
	(turno
		cover: (37 to: 41)
		declaredAt: (37 to: 41)) =
		(unJugador
			cover: (45 to: 53)
			declaredAt: (8 to: 16)) ] valueCoveringAll:
		{43 to: 43}) ifFalse: [ ^ [
		(self coverAll:
			{67 to: 70}) error:
			([
			([
			(self coverAll:
				{79 to: 82}) class ] valueCoveringAll:
				{84 to: 88}) noEsTuTurnoErrorDescription ] valueCoveringAll:
				{90 to: 116}) ] valueCoveringAll:
			{72 to: 77} ]] valueCoveringAll:
		{56 to: 63}.
	[
	([
	([
	(cartas
		cover: (124 to: 129)
		declaredAt: (124 to: 129)) at:
		(unJugador
			cover: (135 to: 143)
			declaredAt: (8 to: 16)) ] valueCoveringAll:
		{131 to: 133}) includes:
		(unaCarta
			cover: (156 to: 163)
			declaredAt: (25 to: 32)) ] valueCoveringAll:
		{146 to: 154}) ifFalse: [ ^ [
		(self coverAll:
			{177 to: 180}) error:
			([
			([
			(self coverAll:
				{189 to: 192}) class ] valueCoveringAll:
				{194 to: 198}) cartaInvalidaErrorDescription ] valueCoveringAll:
				{200 to: 228}) ] valueCoveringAll:
			{182 to: 187} ]] valueCoveringAll:
		{166 to: 173}.
	[
	(cartasJugadas
		cover: (233 to: 245)
		declaredAt: (233 to: 245))
		at:
			(unJugador
				cover: (251 to: 259)
				declaredAt: (8 to: 16))
		put:
			(unaCarta
				cover: (266 to: 273)
				declaredAt: (25 to: 32)) ] valueCoveringAll:
		{247 to: 249. 261 to: 264}.
	[
	([
	(cartas
		cover: (278 to: 283)
		declaredAt: (124 to: 129)) at:
		(unJugador
			cover: (289 to: 297)
			declaredAt: (8 to: 16)) ] valueCoveringAll:
		{285 to: 287}) remove:
		(unaCarta
			cover: (308 to: 315)
			declaredAt: (25 to: 32)) ] valueCoveringAll:
		{300 to: 306}.
	[
	(self coverAll:
		{321 to: 324}) checkFinDeEnfrentamiento ] valueCoveringAll:
		{326 to: 349}.! !

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:45:37'!
PASSED!
!Behavior method!
checkFinDeEnfrentamiento
	[
	([
	([
	([
	(self coverAll:
		{28 to: 31}) mesa ] valueCoveringAll:
		{33 to: 36}) size ] valueCoveringAll:
		{38 to: 41}) =
		(2 coverAll:
			{45 to: 45}) ] valueCoveringAll:
		{43 to: 43})
		ifTrue: [
			(enfrentamiento _ [
			(enfrentamiento
				cover: (60 to: 73)
				declaredAt: (60 to: 73)) +
				(1 coverAll:
					{95 to: 95}) ] valueCoveringAll:
				{93 to: 93})
				cover: (78 to: 91)
				declaredAt: (60 to: 73).
			[
			(self coverAll:
				{100 to: 103}) checkGanador ] valueCoveringAll:
				{105 to: 116}.
			[
			(cartasJugadas
				cover: (121 to: 133)
				declaredAt: (121 to: 133)) removeAll ] valueCoveringAll:
				{135 to: 143} ]
		ifFalse: [
			(turno _ [
			(self coverAll:
				{171 to: 174}) jugadorOpuesto:
				([
				(self coverAll:
					{192 to: 195}) turno ] valueCoveringAll:
					{197 to: 201}) ] valueCoveringAll:
				{176 to: 190})
				cover: (162 to: 166)
				declaredAt: (162 to: 166) ]] valueCoveringAll:
		{48 to: 54. 149 to: 156}.! !
!Behavior method!
jugadorOpuesto: unJugador
	[
	([
	(unJugador
		cover: (29 to: 37)
		declaredAt: (17 to: 25)) =
		(#Pie coverAll:
			{41 to: 44}) ] valueCoveringAll:
		{39 to: 39}) ifTrue: [ ^ #Mano coverAll:
			{57 to: 61} ]] valueCoveringAll:
		{47 to: 53}.
	[
	([
	(unJugador
		cover: (67 to: 75)
		declaredAt: (17 to: 25)) =
		(#Mano coverAll:
			{79 to: 83}) ] valueCoveringAll:
		{77 to: 77}) ifTrue: [ ^ #Pie coverAll:
			{96 to: 99} ]] valueCoveringAll:
		{86 to: 92}.! !
!Behavior method!
mesaAt: jugador
	^ [
	(cartasJugadas
		cover: (19 to: 31)
		declaredAt: (19 to: 31)) at:
		(jugador
			cover: (37 to: 43)
			declaredAt: (9 to: 15)) ] valueCoveringAll:
		{33 to: 35}.! !

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:45:37'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 20:45:38'!
PASSED!
!Behavior method!
noEsTuTurnoErrorDescription
	^ 'Error es el turno del otro jugador' coverAll:
		{31 to: 66}.! !

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:45:38'!
PASSED!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:45:38'!
PASSED!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:45:38'!
PASSED!
!Behavior method!
checkGanador
	[
	([
	([
	([
	(self coverAll:
		{17 to: 20}) mesa ] valueCoveringAll:
		{22 to: 25}) at:
		(#Pie coverAll:
			{31 to: 34}) ] valueCoveringAll:
		{27 to: 29}) empardaCon:
		([
		([
		(self coverAll:
			{50 to: 53}) mesa ] valueCoveringAll:
			{55 to: 58}) at:
			(#Mano coverAll:
				{64 to: 68}) ] valueCoveringAll:
			{60 to: 62}) ] valueCoveringAll:
		{37 to: 47}) ifTrue: [
		(turno _ #Mano coverAll:
			{90 to: 94})
			cover: (81 to: 85)
			declaredAt: (81 to: 85).
		(puntosPie _ [
		(puntosPie
			cover: (97 to: 105)
			declaredAt: (97 to: 105)) +
			(1 coverAll:
				{121 to: 121}) ] valueCoveringAll:
			{120 to: 120})
			cover: (110 to: 118)
			declaredAt: (97 to: 105).
		(puntosMano _ [
		(puntosMano
			cover: (124 to: 133)
			declaredAt: (124 to: 133)) +
			(1 coverAll:
				{150 to: 150}) ] valueCoveringAll:
			{149 to: 149})
			cover: (138 to: 147)
			declaredAt: (124 to: 133) ]] valueCoveringAll:
		{72 to: 78}.
	[
	([
	([
	([
	(self coverAll:
		{157 to: 160}) mesa ] valueCoveringAll:
		{162 to: 165}) at:
		(#Mano coverAll:
			{171 to: 175}) ] valueCoveringAll:
		{167 to: 169}) mataA:
		([
		([
		(self coverAll:
			{186 to: 189}) mesa ] valueCoveringAll:
			{191 to: 194}) at:
			(#Pie coverAll:
				{200 to: 203}) ] valueCoveringAll:
			{196 to: 198}) ] valueCoveringAll:
		{178 to: 183}) ifTrue: [
		(turno _ #Mano coverAll:
			{225 to: 229})
			cover: (216 to: 220)
			declaredAt: (81 to: 85).
		(puntosMano _ [
		(puntosMano
			cover: (232 to: 241)
			declaredAt: (124 to: 133)) +
			(1 coverAll:
				{258 to: 258}) ] valueCoveringAll:
			{257 to: 257})
			cover: (246 to: 255)
			declaredAt: (124 to: 133) ]] valueCoveringAll:
		{207 to: 213}.
	[
	([
	([
	([
	(self coverAll:
		{265 to: 268}) mesa ] valueCoveringAll:
		{270 to: 273}) at:
		(#Pie coverAll:
			{279 to: 282}) ] valueCoveringAll:
		{275 to: 277}) mataA:
		([
		([
		(self coverAll:
			{293 to: 296}) mesa ] valueCoveringAll:
			{298 to: 301}) at:
			(#Mano coverAll:
				{307 to: 311}) ] valueCoveringAll:
			{303 to: 305}) ] valueCoveringAll:
		{285 to: 290}) ifTrue: [
		(turno _ #Pie coverAll:
			{333 to: 336})
			cover: (324 to: 328)
			declaredAt: (81 to: 85).
		(puntosPie _ [
		(puntosPie
			cover: (339 to: 347)
			declaredAt: (97 to: 105)) +
			(1 coverAll:
				{363 to: 363}) ] valueCoveringAll:
			{362 to: 362})
			cover: (352 to: 360)
			declaredAt: (97 to: 105) ]] valueCoveringAll:
		{315 to: 321}.! !
!Behavior method!
empardaCon: cartaParda
	^ [
	([
	(self coverAll:
		{27 to: 30}) valor ] valueCoveringAll:
		{32 to: 36}) =
		([
		(cartaParda
			cover: (40 to: 49)
			declaredAt: (13 to: 22)) valor ] valueCoveringAll:
			{51 to: 55}) ] valueCoveringAll:
		{38 to: 38}.! !
!Behavior method!
valor
	^ [
	([
	(self coverAll:
		{11 to: 14}) class ] valueCoveringAll:
		{16 to: 20}) valorDe:
		(self coverAll:
			{31 to: 34}) ] valueCoveringAll:
		{22 to: 29}.! !
!Behavior method!
valorDe: unaCarta
	[
	([
	(self coverAll:
		{23 to: 26}) ordenDePrioridad ] valueCoveringAll:
		{28 to: 43}) withIndexDo: [ :bloqueDeVerificacion :index |
		[
		([
		(bloqueDeVerificacion
			cover: (94 to: 113)
			declaredAt: (61 to: 80)) value:
			(unaCarta
				cover: (122 to: 129)
				declaredAt: (10 to: 17)) ] valueCoveringAll:
			{115 to: 120}) ifTrue: [ ^ index
				cover: (143 to: 147)
				declaredAt: (83 to: 87) ]] valueCoveringAll:
			{132 to: 138} ]] valueCoveringAll:
		{45 to: 56}.
	[
	(self coverAll:
		{156 to: 159}) error:
		([
		(self coverAll:
			{168 to: 171}) tablaDeValoresIncorrectaOCartaInvalidaErrorDescription ] valueCoveringAll:
			{173 to: 226}) ] valueCoveringAll:
		{161 to: 166}.! !
!Behavior method!
ordenDePrioridad
	^ [
	(ordenDePrioridad
		cover: (22 to: 37)
		declaredAt: (22 to: 37)) ifNil: [
		[
		(self coverAll:
			{48 to: 51}) initializeOrdenDePrioridad ] valueCoveringAll:
			{53 to: 78} ]] valueCoveringAll:
		{39 to: 44}.! !
!Behavior method!
esAnchoDeEspada
	^ [
	([
	(self coverAll:
		{21 to: 24}) esAncho ] valueCoveringAll:
		{26 to: 32}) and: [
		[
		(self coverAll:
			{41 to: 44}) esDeEspada ] valueCoveringAll:
			{46 to: 55} ]] valueCoveringAll:
		{34 to: 37}.! !
!Behavior method!
esAncho
	^ [
	(self coverAll:
		{13 to: 16}) numeroEs:
		(1 coverAll:
			{27 to: 28}) ] valueCoveringAll:
		{18 to: 26}.! !
!Behavior method!
esDeEspada
	^ [
	(self coverAll:
		{16 to: 19}) paloEs:
		([
		(self coverAll:
			{29 to: 32}) espada ] valueCoveringAll:
			{34 to: 39}) ] valueCoveringAll:
		{21 to: 27}.! !
!Behavior method!
espada
	^ [
	([
	(self coverAll:
		{12 to: 15}) class ] valueCoveringAll:
		{17 to: 21}) espada ] valueCoveringAll:
		{23 to: 28}.! !
!Behavior method!
esAnchoDeBasto
	^ [
	([
	(self coverAll:
		{20 to: 23}) esAncho ] valueCoveringAll:
		{25 to: 31}) and: [
		[
		(self coverAll:
			{40 to: 43}) esDeBasto ] valueCoveringAll:
			{45 to: 53} ]] valueCoveringAll:
		{33 to: 36}.! !
!Behavior method!
esDeBasto
	^ [
	(self coverAll:
		{15 to: 18}) paloEs:
		([
		(self coverAll:
			{28 to: 31}) basto ] valueCoveringAll:
			{33 to: 37}) ] valueCoveringAll:
		{20 to: 26}.! !
!Behavior method!
basto
	^ [
	([
	(self coverAll:
		{11 to: 14}) class ] valueCoveringAll:
		{16 to: 20}) basto ] valueCoveringAll:
		{22 to: 26}.! !
!Behavior method!
esSieteDeEspadas
	^ [
	([
	(self coverAll:
		{22 to: 25}) esSiete ] valueCoveringAll:
		{27 to: 33}) and: [
		[
		(self coverAll:
			{42 to: 45}) esDeEspada ] valueCoveringAll:
			{47 to: 56} ]] valueCoveringAll:
		{35 to: 38}.! !
!Behavior method!
esSiete
	^ [
	(self coverAll:
		{13 to: 16}) numeroEs:
		(7 coverAll:
			{27 to: 28}) ] valueCoveringAll:
		{18 to: 26}.! !
!Behavior method!
esSieteDeOro
	^ [
	([
	(self coverAll:
		{18 to: 21}) esSiete ] valueCoveringAll:
		{23 to: 29}) and: [
		[
		(self coverAll:
			{38 to: 41}) esDeOro ] valueCoveringAll:
			{43 to: 49} ]] valueCoveringAll:
		{31 to: 34}.! !
!Behavior method!
esAnchoFalso
	^ [
	([
	(self coverAll:
		{18 to: 21}) esAncho ] valueCoveringAll:
		{23 to: 29}) and: [
		[
		([
		(self coverAll:
			{38 to: 41}) esDeOro ] valueCoveringAll:
			{43 to: 49}) or: [
			[
			(self coverAll:
				{57 to: 60}) esDeCopa ] valueCoveringAll:
				{62 to: 69} ]] valueCoveringAll:
			{51 to: 53} ]] valueCoveringAll:
		{31 to: 34}.! !
!Behavior method!
esDeOro
	^ [
	(self coverAll:
		{13 to: 16}) paloEs:
		([
		(self coverAll:
			{26 to: 29}) oro ] valueCoveringAll:
			{31 to: 33}) ] valueCoveringAll:
		{18 to: 24}.! !
!Behavior method!
oro
	^ [
	([
	(self coverAll:
		{9 to: 12}) class ] valueCoveringAll:
		{14 to: 18}) oro ] valueCoveringAll:
		{20 to: 22}.! !
!Behavior method!
esRey
	^ [
	(self coverAll:
		{11 to: 14}) numeroEs:
		(12 coverAll:
			{26 to: 27}) ] valueCoveringAll:
		{16 to: 24}.! !
!Behavior method!
esCaballo
	^ [
	(self coverAll:
		{15 to: 18}) numeroEs:
		(11 coverAll:
			{30 to: 31}) ] valueCoveringAll:
		{20 to: 28}.! !
!Behavior method!
esSota
	^ [
	(self coverAll:
		{12 to: 15}) numeroEs:
		(10 coverAll:
			{27 to: 28}) ] valueCoveringAll:
		{17 to: 25}.! !
!Behavior method!
esSieteFalso
	^ [
	([
	(self coverAll:
		{18 to: 21}) esSiete ] valueCoveringAll:
		{23 to: 29}) and: [
		[
		([
		(self coverAll:
			{38 to: 41}) esDeCopa ] valueCoveringAll:
			{43 to: 50}) or: [
			[
			(self coverAll:
				{58 to: 61}) esDeBasto ] valueCoveringAll:
				{63 to: 71} ]] valueCoveringAll:
			{52 to: 54} ]] valueCoveringAll:
		{31 to: 34}.! !
!Behavior method!
mataA: cartaPerdedora
	^ [
	([
	(self coverAll:
		{26 to: 29}) valor ] valueCoveringAll:
		{31 to: 35}) <
		([
		(cartaPerdedora
			cover: (39 to: 52)
			declaredAt: (8 to: 21)) valor ] valueCoveringAll:
			{54 to: 58}) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #RondaTest #test13_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:45:38'!
PASSED!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:45:38'!
PASSED!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:45:38'!
PASSED!
!Behavior method!
puntosPie
	^ puntosPie
		cover: (13 to: 21)
		declaredAt: (13 to: 21).! !
!Behavior method!
puntosMano
	^ puntosMano
		cover: (14 to: 23)
		declaredAt: (14 to: 23).! !

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:45:38'!
PASSED!
!Behavior method!
ganador
	[
	([
	(puntosMano
		cover: (11 to: 20)
		declaredAt: (11 to: 20)) =
		(2 coverAll:
			{24 to: 24}) ] valueCoveringAll:
		{22 to: 22}) ifTrue: [ ^ #Mano coverAll:
			{37 to: 41} ]] valueCoveringAll:
		{27 to: 33}.
	[
	([
	(puntosPie
		cover: (47 to: 55)
		declaredAt: (47 to: 55)) =
		(2 coverAll:
			{59 to: 59}) ] valueCoveringAll:
		{57 to: 57}) ifTrue: [ ^ #Pie coverAll:
			{72 to: 75} ]] valueCoveringAll:
		{62 to: 68}.! !

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:45:38'!
PASSED!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:45:38'!
PASSED!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 20:45:38'!
PASSED!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 20:45:38'!
PASSED!
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 20:48:01'!
test21_JugadorInvalidoDebeLevantarError

	| ronda |
	ronda := Ronda withMano: self cartasMano pie: self cartasPie.
	
	self should: [ronda juega: #Mano carta: (self cartasMano at: 1)]
		raise: Error - MessageNotUnderstood
		withMessageText: Ronda jugadorInvalidoErrorMessage.! !

!methodRemoval: RondaTest #test21_JugadorInvalidoDebeLevantarError stamp: 'LB 7/5/2021 20:48:29'!
test21_JugadorInvalidoDebeLevantarError

	| ronda |
	ronda := Ronda withMano: self cartasMano pie: self cartasPie.
	
	self should: [ronda juega: #Mano carta: (self cartasMano at: 1)]
		raise: Error - MessageNotUnderstood
		withMessageText: Ronda jugadorInvalidoErrorMessage.!
!Behavior method!
anchoDeBasto
	^ [
	(self coverAll:
		{18 to: 21}) bastoCon:
		(1 coverAll:
			{32 to: 33}) ] valueCoveringAll:
		{23 to: 31}.! !
!Behavior method!
bastoCon: unNumero
	^ [
	(self coverAll:
		{23 to: 26})
		palo:
			([
			(self coverAll:
				{34 to: 37}) basto ] valueCoveringAll:
				{39 to: 43})
		numero:
			(unNumero
				cover: (53 to: 60)
				declaredAt: (11 to: 18)) ] valueCoveringAll:
		{28 to: 32. 45 to: 51}.! !
!Behavior method!
basto
	^ #basto coverAll:
		{11 to: 16}.! !
!Behavior method!
palo: unPalo numero: unNumero
	[
	(self coverAll:
		{35 to: 38}) assertNúmeroEsVálido:
		(unNumero
			cover: (62 to: 69)
			declaredAt: (22 to: 29)) ] valueCoveringAll:
		{40 to: 60}.
	[
	(self coverAll:
		{73 to: 76}) assertPaloEsVálido:
		(unPalo
			cover: (98 to: 103)
			declaredAt: (7 to: 12)) ] valueCoveringAll:
		{78 to: 96}.
	^ [
	([
	(self coverAll:
		{110 to: 113}) new ] valueCoveringAll:
		{115 to: 117})
		initializePalo:
			(unPalo
				cover: (135 to: 140)
				declaredAt: (7 to: 12))
		numero:
			(unNumero
				cover: (150 to: 157)
				declaredAt: (22 to: 29)) ] valueCoveringAll:
		{119 to: 133. 142 to: 148}.! !
!Behavior method!
assertNúmeroEsVálido: unNumero
	[
	([
	(unNumero
		cover: (34 to: 41)
		declaredAt: (23 to: 30)) <
		(1 coverAll:
			{45 to: 45}) ] valueCoveringAll:
		{43 to: 43}) ifTrue: [
		[
		(self coverAll:
			{57 to: 60}) error:
			([
			(self coverAll:
				{69 to: 72}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{74 to: 110}) ] valueCoveringAll:
			{62 to: 67} ]] valueCoveringAll:
		{47 to: 53}.
	[
	([
	(unNumero
		cover: (116 to: 123)
		declaredAt: (23 to: 30)) >
		(12 coverAll:
			{127 to: 128}) ] valueCoveringAll:
		{125 to: 125}) ifTrue: [
		[
		(self coverAll:
			{140 to: 143}) error:
			([
			(self coverAll:
				{152 to: 155}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{157 to: 193}) ] valueCoveringAll:
			{145 to: 150} ]] valueCoveringAll:
		{130 to: 136}.
	[
	([
	(unNumero
		cover: (200 to: 207)
		declaredAt: (23 to: 30))
		between:
			(8 coverAll:
				{218 to: 218})
		and:
			(9 coverAll:
				{225 to: 225}) ] valueCoveringAll:
		{209 to: 216. 220 to: 223}) ifTrue: [
		[
		(self coverAll:
			{238 to: 241}) error:
			([
			(self coverAll:
				{250 to: 253}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{255 to: 291}) ] valueCoveringAll:
			{243 to: 248} ]] valueCoveringAll:
		{228 to: 234}.
	[
	([
	(unNumero
		cover: (297 to: 304)
		declaredAt: (23 to: 30)) isInteger ] valueCoveringAll:
		{306 to: 314}) ifFalse: [
		[
		(self coverAll:
			{327 to: 330}) error:
			([
			(self coverAll:
				{339 to: 342}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{344 to: 380}) ] valueCoveringAll:
			{332 to: 337} ]] valueCoveringAll:
		{316 to: 323}.! !
!Behavior method!
assertPaloEsVálido: unPalo
	^ [
	([
	([
	(self coverAll:
		{33 to: 36}) palos ] valueCoveringAll:
		{38 to: 42}) includes:
		(unPalo
			cover: (54 to: 59)
			declaredAt: (21 to: 26)) ] valueCoveringAll:
		{44 to: 52}) ifFalse: [
		[
		(self coverAll:
			{73 to: 76}) error:
			([
			(self coverAll:
				{85 to: 88}) paloInvalidoErrorDescription ] valueCoveringAll:
				{90 to: 117}) ] valueCoveringAll:
			{78 to: 83} ]] valueCoveringAll:
		{62 to: 69}.! !
!Behavior method!
espada
	^ #espada coverAll:
		{12 to: 18}.! !
!Behavior method!
oro
	^ #oro coverAll:
		{9 to: 12}.! !
!Behavior method!
copa
	^ #copa coverAll:
		{10 to: 14}.! !
!Behavior method!
palos
	"No se puede acceder a self en backtick, por eso se usa CartaDeTruco como receiver - Hernan"
	^ `{CartaDeTruco espada. CartaDeTruco basto. CartaDeTruco oro. CartaDeTruco copa}` coverAll:
		{105 to: 185}.! !
!Behavior method!
initializePalo: unPalo numero: unNumero
	(palo _ unPalo
		cover: (53 to: 58)
		declaredAt: (17 to: 22))
		cover: (45 to: 48)
		declaredAt: (45 to: 48).
	(numero _ unNumero
		cover: (72 to: 79)
		declaredAt: (32 to: 39))
		cover: (62 to: 67)
		declaredAt: (62 to: 67).! !
!Behavior method!
anchoDeEspada
	^ [
	(self coverAll:
		{19 to: 22}) espadaCon:
		(1 coverAll:
			{34 to: 35}) ] valueCoveringAll:
		{24 to: 33}.! !
!Behavior method!
espadaCon: unNumero
	^ [
	(self coverAll:
		{24 to: 27})
		palo:
			([
			(self coverAll:
				{35 to: 38}) espada ] valueCoveringAll:
				{40 to: 45})
		numero:
			(unNumero
				cover: (55 to: 62)
				declaredAt: (12 to: 19)) ] valueCoveringAll:
		{29 to: 33. 47 to: 53}.! !
!Behavior method!
cartasRepetidasErrorDescription
	^ 'error las cartas no pueden repetirse' coverAll:
		{35 to: 72}.! !
!Behavior method!
oroCon: unNumero
	^ [
	(self coverAll:
		{21 to: 24})
		palo:
			([
			(self coverAll:
				{32 to: 35}) oro ] valueCoveringAll:
				{37 to: 39})
		numero:
			(unNumero
				cover: (49 to: 56)
				declaredAt: (9 to: 16)) ] valueCoveringAll:
		{26 to: 30. 41 to: 47}.! !
!Behavior method!
withMano: mano pie: pie
	[
	([
	(mano
		cover: (29 to: 32)
		declaredAt: (11 to: 14)) anySatisfy: [ :carta |
		[
		([
		(mano
			cover: (57 to: 60)
			declaredAt: (11 to: 14)) occurrencesOf:
			(carta
				cover: (77 to: 81)
				declaredAt: (48 to: 52)) ] valueCoveringAll:
			{62 to: 75}) >
			(1 coverAll:
				{86 to: 86}) ] valueCoveringAll:
			{84 to: 84} ]] valueCoveringAll:
		{34 to: 44}) ifTrue: [ ^ [
		(self coverAll:
			{100 to: 103}) error:
			([
			(self coverAll:
				{112 to: 115}) cartasRepetidasErrorDescription ] valueCoveringAll:
				{117 to: 147}) ] valueCoveringAll:
			{105 to: 110} ]] valueCoveringAll:
		{90 to: 96}.
	[
	([
	(pie
		cover: (153 to: 155)
		declaredAt: (21 to: 23)) anySatisfy: [ :carta |
		[
		([
		(pie
			cover: (180 to: 182)
			declaredAt: (21 to: 23)) occurrencesOf:
			(carta
				cover: (199 to: 203)
				declaredAt: (171 to: 175)) ] valueCoveringAll:
			{184 to: 197}) >
			(1 coverAll:
				{208 to: 208}) ] valueCoveringAll:
			{206 to: 206} ]] valueCoveringAll:
		{157 to: 167}) ifTrue: [ ^ [
		(self coverAll:
			{222 to: 225}) error:
			([
			(self coverAll:
				{234 to: 237}) cartasRepetidasErrorDescription ] valueCoveringAll:
				{239 to: 269}) ] valueCoveringAll:
			{227 to: 232} ]] valueCoveringAll:
		{212 to: 218}.
	[
	([
	(pie
		cover: (275 to: 277)
		declaredAt: (21 to: 23)) anySatisfy: [ :carta |
		[
		(mano
			cover: (301 to: 304)
			declaredAt: (11 to: 14)) includes:
			(carta
				cover: (316 to: 320)
				declaredAt: (293 to: 297)) ] valueCoveringAll:
			{306 to: 314} ]] valueCoveringAll:
		{279 to: 289}) ifTrue: [ ^ [
		(self coverAll:
			{334 to: 337}) error:
			([
			(self coverAll:
				{346 to: 349}) cartasRepetidasErrorDescription ] valueCoveringAll:
				{351 to: 381}) ] valueCoveringAll:
			{339 to: 344} ]] valueCoveringAll:
		{324 to: 330}.
	[
	([
	(mano
		cover: (387 to: 390)
		declaredAt: (11 to: 14)) anySatisfy: [ :carta |
		[
		([
		(carta
			cover: (414 to: 418)
			declaredAt: (406 to: 410)) class ] valueCoveringAll:
			{420 to: 424}) ~=
			(CartaDeTruco
				cover: (429 to: 440)
				declaredAt: (429 to: 440)) ] valueCoveringAll:
			{426 to: 427} ]] valueCoveringAll:
		{392 to: 402}) ifTrue: [ ^ [
		(self coverAll:
			{454 to: 457}) error:
			([
			(self coverAll:
				{466 to: 469}) cartasInvalidasErrorDescription ] valueCoveringAll:
				{471 to: 501}) ] valueCoveringAll:
			{459 to: 464} ]] valueCoveringAll:
		{444 to: 450}.
	[
	([
	(pie
		cover: (508 to: 510)
		declaredAt: (21 to: 23)) anySatisfy: [ :carta |
		[
		([
		(carta
			cover: (534 to: 538)
			declaredAt: (526 to: 530)) class ] valueCoveringAll:
			{540 to: 544}) ~=
			(CartaDeTruco
				cover: (549 to: 560)
				declaredAt: (429 to: 440)) ] valueCoveringAll:
			{546 to: 547} ]] valueCoveringAll:
		{512 to: 522}) ifTrue: [ ^ [
		(self coverAll:
			{574 to: 577}) error:
			([
			(self coverAll:
				{586 to: 589}) cartasInvalidasErrorDescription ] valueCoveringAll:
				{591 to: 621}) ] valueCoveringAll:
			{579 to: 584} ]] valueCoveringAll:
		{564 to: 570}.
	^ [
	([
	(self coverAll:
		{628 to: 631}) new ] valueCoveringAll:
		{633 to: 635})
		initializeWithMano:
			(mano
				cover: (657 to: 660)
				declaredAt: (11 to: 14))
		pie:
			(pie
				cover: (667 to: 669)
				declaredAt: (21 to: 23)) ] valueCoveringAll:
		{637 to: 655. 662 to: 665}.! !
!Behavior method!
= unaCarta
	^ [
	([
	(unaCarta
		cover: (18 to: 25)
		declaredAt: (3 to: 10)) isKindOf:
		([
		(self coverAll:
			{37 to: 40}) class ] valueCoveringAll:
			{42 to: 46}) ] valueCoveringAll:
		{27 to: 35}) and: [
		[
		([
		(unaCarta
			cover: (56 to: 63)
			declaredAt: (3 to: 10)) paloEs:
			(palo
				cover: (73 to: 76)
				declaredAt: (73 to: 76)) ] valueCoveringAll:
			{65 to: 71}) and: [
			[
			(unaCarta
				cover: (86 to: 93)
				declaredAt: (3 to: 10)) numeroEs:
				(numero
					cover: (105 to: 110)
					declaredAt: (105 to: 110)) ] valueCoveringAll:
				{95 to: 103} ]] valueCoveringAll:
			{79 to: 82} ]] valueCoveringAll:
		{49 to: 52}.! !
!Behavior method!
paloEs: unPalo
	^ [
	(palo
		cover: (19 to: 22)
		declaredAt: (19 to: 22)) =
		(unPalo
			cover: (26 to: 31)
			declaredAt: (9 to: 14)) ] valueCoveringAll:
		{24 to: 24}.! !
!Behavior method!
numeroEs: unNumero
	^ [
	(numero
		cover: (23 to: 28)
		declaredAt: (23 to: 28)) =
		(unNumero
			cover: (32 to: 39)
			declaredAt: (11 to: 18)) ] valueCoveringAll:
		{30 to: 30}.! !

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:48:40'!
PASSED!
!Behavior method!
sieteDeEspada
	^ [
	(self coverAll:
		{19 to: 22}) espadaCon:
		(7 coverAll:
			{34 to: 35}) ] valueCoveringAll:
		{24 to: 33}.! !

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:48:40'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 20:48:40'!
PASSED!
!Behavior method!
cartasInvalidasErrorDescription
	^ 'Cartas invalidas' coverAll:
		{35 to: 52}.! !

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:48:40'!
PASSED!
!Behavior method!
initializeWithMano: jugadorMano pie: jugadorPie
	self.
	(cartas _ [
	(Dictionary
		cover: (62 to: 71)
		declaredAt: (62 to: 71)) new ] valueCoveringAll:
		{73 to: 75})
		cover: (52 to: 57)
		declaredAt: (52 to: 57).
	[
	(cartas
		cover: (79 to: 84)
		declaredAt: (52 to: 57))
		at:
			(#Mano coverAll:
				{90 to: 94})
		put:
			(jugadorMano
				cover: (101 to: 111)
				declaredAt: (21 to: 31)) ] valueCoveringAll:
		{86 to: 88. 96 to: 99}.
	[
	(cartas
		cover: (115 to: 120)
		declaredAt: (52 to: 57))
		at:
			(#Pie coverAll:
				{126 to: 129})
		put:
			(jugadorPie
				cover: (136 to: 145)
				declaredAt: (38 to: 47)) ] valueCoveringAll:
		{122 to: 124. 131 to: 134}.
	(cartasJugadas _ [
	(Dictionary
		cover: (168 to: 177)
		declaredAt: (62 to: 71)) new ] valueCoveringAll:
		{179 to: 181})
		cover: (151 to: 163)
		declaredAt: (151 to: 163).
	(enfrentamiento _ 1 coverAll:
		{203 to: 203})
		cover: (185 to: 198)
		declaredAt: (185 to: 198).
	(turno _ #Mano coverAll:
		{216 to: 220})
		cover: (207 to: 211)
		declaredAt: (207 to: 211).
	(puntosPie _ 0 coverAll:
		{237 to: 237})
		cover: (224 to: 232)
		declaredAt: (224 to: 232).
	(puntosMano _ 0 coverAll:
		{255 to: 255})
		cover: (241 to: 250)
		declaredAt: (241 to: 250).! !
!Behavior method!
enfrentamiento
	^ enfrentamiento
		cover: (18 to: 31)
		declaredAt: (18 to: 31).! !
!Behavior method!
mesa
	^ cartasJugadas
		cover: (8 to: 20)
		declaredAt: (8 to: 20).! !

!testRun: #RondaTest #test05_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:48:40'!
PASSED!
!Behavior method!
turno
	^ turno
		cover: (9 to: 13)
		declaredAt: (9 to: 13).! !

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 20:48:40'!
PASSED!
!Behavior method!
cartaInvalidaErrorDescription
	^ 'No tienes esa carta' coverAll:
		{33 to: 53}.! !
!Behavior method!
juega: unJugador carta: unaCarta
	[
	([
	(turno
		cover: (37 to: 41)
		declaredAt: (37 to: 41)) =
		(unJugador
			cover: (45 to: 53)
			declaredAt: (8 to: 16)) ] valueCoveringAll:
		{43 to: 43}) ifFalse: [ ^ [
		(self coverAll:
			{67 to: 70}) error:
			([
			([
			(self coverAll:
				{79 to: 82}) class ] valueCoveringAll:
				{84 to: 88}) noEsTuTurnoErrorDescription ] valueCoveringAll:
				{90 to: 116}) ] valueCoveringAll:
			{72 to: 77} ]] valueCoveringAll:
		{56 to: 63}.
	[
	([
	([
	(cartas
		cover: (124 to: 129)
		declaredAt: (124 to: 129)) at:
		(unJugador
			cover: (135 to: 143)
			declaredAt: (8 to: 16)) ] valueCoveringAll:
		{131 to: 133}) includes:
		(unaCarta
			cover: (156 to: 163)
			declaredAt: (25 to: 32)) ] valueCoveringAll:
		{146 to: 154}) ifFalse: [ ^ [
		(self coverAll:
			{177 to: 180}) error:
			([
			([
			(self coverAll:
				{189 to: 192}) class ] valueCoveringAll:
				{194 to: 198}) cartaInvalidaErrorDescription ] valueCoveringAll:
				{200 to: 228}) ] valueCoveringAll:
			{182 to: 187} ]] valueCoveringAll:
		{166 to: 173}.
	[
	(cartasJugadas
		cover: (233 to: 245)
		declaredAt: (233 to: 245))
		at:
			(unJugador
				cover: (251 to: 259)
				declaredAt: (8 to: 16))
		put:
			(unaCarta
				cover: (266 to: 273)
				declaredAt: (25 to: 32)) ] valueCoveringAll:
		{247 to: 249. 261 to: 264}.
	[
	([
	(cartas
		cover: (278 to: 283)
		declaredAt: (124 to: 129)) at:
		(unJugador
			cover: (289 to: 297)
			declaredAt: (8 to: 16)) ] valueCoveringAll:
		{285 to: 287}) remove:
		(unaCarta
			cover: (308 to: 315)
			declaredAt: (25 to: 32)) ] valueCoveringAll:
		{300 to: 306}.
	[
	(self coverAll:
		{321 to: 324}) checkFinDeEnfrentamiento ] valueCoveringAll:
		{326 to: 349}.! !

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:48:40'!
PASSED!
!Behavior method!
checkFinDeEnfrentamiento
	[
	([
	([
	([
	(self coverAll:
		{28 to: 31}) mesa ] valueCoveringAll:
		{33 to: 36}) size ] valueCoveringAll:
		{38 to: 41}) =
		(2 coverAll:
			{45 to: 45}) ] valueCoveringAll:
		{43 to: 43})
		ifTrue: [
			(enfrentamiento _ [
			(enfrentamiento
				cover: (60 to: 73)
				declaredAt: (60 to: 73)) +
				(1 coverAll:
					{95 to: 95}) ] valueCoveringAll:
				{93 to: 93})
				cover: (78 to: 91)
				declaredAt: (60 to: 73).
			[
			(self coverAll:
				{100 to: 103}) checkGanador ] valueCoveringAll:
				{105 to: 116}.
			[
			(cartasJugadas
				cover: (121 to: 133)
				declaredAt: (121 to: 133)) removeAll ] valueCoveringAll:
				{135 to: 143} ]
		ifFalse: [
			(turno _ [
			(self coverAll:
				{171 to: 174}) jugadorOpuesto:
				([
				(self coverAll:
					{192 to: 195}) turno ] valueCoveringAll:
					{197 to: 201}) ] valueCoveringAll:
				{176 to: 190})
				cover: (162 to: 166)
				declaredAt: (162 to: 166) ]] valueCoveringAll:
		{48 to: 54. 149 to: 156}.! !
!Behavior method!
jugadorOpuesto: unJugador
	[
	([
	(unJugador
		cover: (29 to: 37)
		declaredAt: (17 to: 25)) =
		(#Pie coverAll:
			{41 to: 44}) ] valueCoveringAll:
		{39 to: 39}) ifTrue: [ ^ #Mano coverAll:
			{57 to: 61} ]] valueCoveringAll:
		{47 to: 53}.
	[
	([
	(unJugador
		cover: (67 to: 75)
		declaredAt: (17 to: 25)) =
		(#Mano coverAll:
			{79 to: 83}) ] valueCoveringAll:
		{77 to: 77}) ifTrue: [ ^ #Pie coverAll:
			{96 to: 99} ]] valueCoveringAll:
		{86 to: 92}.! !
!Behavior method!
mesaAt: jugador
	^ [
	(cartasJugadas
		cover: (19 to: 31)
		declaredAt: (19 to: 31)) at:
		(jugador
			cover: (37 to: 43)
			declaredAt: (9 to: 15)) ] valueCoveringAll:
		{33 to: 35}.! !

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:48:40'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 20:48:40'!
PASSED!
!Behavior method!
noEsTuTurnoErrorDescription
	^ 'Error es el turno del otro jugador' coverAll:
		{31 to: 66}.! !

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:48:40'!
PASSED!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:48:40'!
PASSED!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:48:40'!
PASSED!
!Behavior method!
checkGanador
	[
	([
	([
	([
	(self coverAll:
		{17 to: 20}) mesa ] valueCoveringAll:
		{22 to: 25}) at:
		(#Pie coverAll:
			{31 to: 34}) ] valueCoveringAll:
		{27 to: 29}) empardaCon:
		([
		([
		(self coverAll:
			{50 to: 53}) mesa ] valueCoveringAll:
			{55 to: 58}) at:
			(#Mano coverAll:
				{64 to: 68}) ] valueCoveringAll:
			{60 to: 62}) ] valueCoveringAll:
		{37 to: 47}) ifTrue: [
		(turno _ #Mano coverAll:
			{90 to: 94})
			cover: (81 to: 85)
			declaredAt: (81 to: 85).
		(puntosPie _ [
		(puntosPie
			cover: (97 to: 105)
			declaredAt: (97 to: 105)) +
			(1 coverAll:
				{121 to: 121}) ] valueCoveringAll:
			{120 to: 120})
			cover: (110 to: 118)
			declaredAt: (97 to: 105).
		(puntosMano _ [
		(puntosMano
			cover: (124 to: 133)
			declaredAt: (124 to: 133)) +
			(1 coverAll:
				{150 to: 150}) ] valueCoveringAll:
			{149 to: 149})
			cover: (138 to: 147)
			declaredAt: (124 to: 133) ]] valueCoveringAll:
		{72 to: 78}.
	[
	([
	([
	([
	(self coverAll:
		{157 to: 160}) mesa ] valueCoveringAll:
		{162 to: 165}) at:
		(#Mano coverAll:
			{171 to: 175}) ] valueCoveringAll:
		{167 to: 169}) mataA:
		([
		([
		(self coverAll:
			{186 to: 189}) mesa ] valueCoveringAll:
			{191 to: 194}) at:
			(#Pie coverAll:
				{200 to: 203}) ] valueCoveringAll:
			{196 to: 198}) ] valueCoveringAll:
		{178 to: 183}) ifTrue: [
		(turno _ #Mano coverAll:
			{225 to: 229})
			cover: (216 to: 220)
			declaredAt: (81 to: 85).
		(puntosMano _ [
		(puntosMano
			cover: (232 to: 241)
			declaredAt: (124 to: 133)) +
			(1 coverAll:
				{258 to: 258}) ] valueCoveringAll:
			{257 to: 257})
			cover: (246 to: 255)
			declaredAt: (124 to: 133) ]] valueCoveringAll:
		{207 to: 213}.
	[
	([
	([
	([
	(self coverAll:
		{265 to: 268}) mesa ] valueCoveringAll:
		{270 to: 273}) at:
		(#Pie coverAll:
			{279 to: 282}) ] valueCoveringAll:
		{275 to: 277}) mataA:
		([
		([
		(self coverAll:
			{293 to: 296}) mesa ] valueCoveringAll:
			{298 to: 301}) at:
			(#Mano coverAll:
				{307 to: 311}) ] valueCoveringAll:
			{303 to: 305}) ] valueCoveringAll:
		{285 to: 290}) ifTrue: [
		(turno _ #Pie coverAll:
			{333 to: 336})
			cover: (324 to: 328)
			declaredAt: (81 to: 85).
		(puntosPie _ [
		(puntosPie
			cover: (339 to: 347)
			declaredAt: (97 to: 105)) +
			(1 coverAll:
				{363 to: 363}) ] valueCoveringAll:
			{362 to: 362})
			cover: (352 to: 360)
			declaredAt: (97 to: 105) ]] valueCoveringAll:
		{315 to: 321}.! !
!Behavior method!
empardaCon: cartaParda
	^ [
	([
	(self coverAll:
		{27 to: 30}) valor ] valueCoveringAll:
		{32 to: 36}) =
		([
		(cartaParda
			cover: (40 to: 49)
			declaredAt: (13 to: 22)) valor ] valueCoveringAll:
			{51 to: 55}) ] valueCoveringAll:
		{38 to: 38}.! !
!Behavior method!
valor
	^ [
	([
	(self coverAll:
		{11 to: 14}) class ] valueCoveringAll:
		{16 to: 20}) valorDe:
		(self coverAll:
			{31 to: 34}) ] valueCoveringAll:
		{22 to: 29}.! !
!Behavior method!
valorDe: unaCarta
	[
	([
	(self coverAll:
		{23 to: 26}) ordenDePrioridad ] valueCoveringAll:
		{28 to: 43}) withIndexDo: [ :bloqueDeVerificacion :index |
		[
		([
		(bloqueDeVerificacion
			cover: (94 to: 113)
			declaredAt: (61 to: 80)) value:
			(unaCarta
				cover: (122 to: 129)
				declaredAt: (10 to: 17)) ] valueCoveringAll:
			{115 to: 120}) ifTrue: [ ^ index
				cover: (143 to: 147)
				declaredAt: (83 to: 87) ]] valueCoveringAll:
			{132 to: 138} ]] valueCoveringAll:
		{45 to: 56}.
	[
	(self coverAll:
		{156 to: 159}) error:
		([
		(self coverAll:
			{168 to: 171}) tablaDeValoresIncorrectaOCartaInvalidaErrorDescription ] valueCoveringAll:
			{173 to: 226}) ] valueCoveringAll:
		{161 to: 166}.! !
!Behavior method!
ordenDePrioridad
	^ [
	(ordenDePrioridad
		cover: (22 to: 37)
		declaredAt: (22 to: 37)) ifNil: [
		[
		(self coverAll:
			{48 to: 51}) initializeOrdenDePrioridad ] valueCoveringAll:
			{53 to: 78} ]] valueCoveringAll:
		{39 to: 44}.! !
!Behavior method!
esAnchoDeEspada
	^ [
	([
	(self coverAll:
		{21 to: 24}) esAncho ] valueCoveringAll:
		{26 to: 32}) and: [
		[
		(self coverAll:
			{41 to: 44}) esDeEspada ] valueCoveringAll:
			{46 to: 55} ]] valueCoveringAll:
		{34 to: 37}.! !
!Behavior method!
esAncho
	^ [
	(self coverAll:
		{13 to: 16}) numeroEs:
		(1 coverAll:
			{27 to: 28}) ] valueCoveringAll:
		{18 to: 26}.! !
!Behavior method!
esDeEspada
	^ [
	(self coverAll:
		{16 to: 19}) paloEs:
		([
		(self coverAll:
			{29 to: 32}) espada ] valueCoveringAll:
			{34 to: 39}) ] valueCoveringAll:
		{21 to: 27}.! !
!Behavior method!
espada
	^ [
	([
	(self coverAll:
		{12 to: 15}) class ] valueCoveringAll:
		{17 to: 21}) espada ] valueCoveringAll:
		{23 to: 28}.! !
!Behavior method!
esAnchoDeBasto
	^ [
	([
	(self coverAll:
		{20 to: 23}) esAncho ] valueCoveringAll:
		{25 to: 31}) and: [
		[
		(self coverAll:
			{40 to: 43}) esDeBasto ] valueCoveringAll:
			{45 to: 53} ]] valueCoveringAll:
		{33 to: 36}.! !
!Behavior method!
esDeBasto
	^ [
	(self coverAll:
		{15 to: 18}) paloEs:
		([
		(self coverAll:
			{28 to: 31}) basto ] valueCoveringAll:
			{33 to: 37}) ] valueCoveringAll:
		{20 to: 26}.! !
!Behavior method!
basto
	^ [
	([
	(self coverAll:
		{11 to: 14}) class ] valueCoveringAll:
		{16 to: 20}) basto ] valueCoveringAll:
		{22 to: 26}.! !
!Behavior method!
esSieteDeEspadas
	^ [
	([
	(self coverAll:
		{22 to: 25}) esSiete ] valueCoveringAll:
		{27 to: 33}) and: [
		[
		(self coverAll:
			{42 to: 45}) esDeEspada ] valueCoveringAll:
			{47 to: 56} ]] valueCoveringAll:
		{35 to: 38}.! !
!Behavior method!
esSiete
	^ [
	(self coverAll:
		{13 to: 16}) numeroEs:
		(7 coverAll:
			{27 to: 28}) ] valueCoveringAll:
		{18 to: 26}.! !
!Behavior method!
esSieteDeOro
	^ [
	([
	(self coverAll:
		{18 to: 21}) esSiete ] valueCoveringAll:
		{23 to: 29}) and: [
		[
		(self coverAll:
			{38 to: 41}) esDeOro ] valueCoveringAll:
			{43 to: 49} ]] valueCoveringAll:
		{31 to: 34}.! !
!Behavior method!
esAnchoFalso
	^ [
	([
	(self coverAll:
		{18 to: 21}) esAncho ] valueCoveringAll:
		{23 to: 29}) and: [
		[
		([
		(self coverAll:
			{38 to: 41}) esDeOro ] valueCoveringAll:
			{43 to: 49}) or: [
			[
			(self coverAll:
				{57 to: 60}) esDeCopa ] valueCoveringAll:
				{62 to: 69} ]] valueCoveringAll:
			{51 to: 53} ]] valueCoveringAll:
		{31 to: 34}.! !
!Behavior method!
esDeOro
	^ [
	(self coverAll:
		{13 to: 16}) paloEs:
		([
		(self coverAll:
			{26 to: 29}) oro ] valueCoveringAll:
			{31 to: 33}) ] valueCoveringAll:
		{18 to: 24}.! !
!Behavior method!
oro
	^ [
	([
	(self coverAll:
		{9 to: 12}) class ] valueCoveringAll:
		{14 to: 18}) oro ] valueCoveringAll:
		{20 to: 22}.! !
!Behavior method!
esRey
	^ [
	(self coverAll:
		{11 to: 14}) numeroEs:
		(12 coverAll:
			{26 to: 27}) ] valueCoveringAll:
		{16 to: 24}.! !
!Behavior method!
esCaballo
	^ [
	(self coverAll:
		{15 to: 18}) numeroEs:
		(11 coverAll:
			{30 to: 31}) ] valueCoveringAll:
		{20 to: 28}.! !
!Behavior method!
esSota
	^ [
	(self coverAll:
		{12 to: 15}) numeroEs:
		(10 coverAll:
			{27 to: 28}) ] valueCoveringAll:
		{17 to: 25}.! !
!Behavior method!
esSieteFalso
	^ [
	([
	(self coverAll:
		{18 to: 21}) esSiete ] valueCoveringAll:
		{23 to: 29}) and: [
		[
		([
		(self coverAll:
			{38 to: 41}) esDeCopa ] valueCoveringAll:
			{43 to: 50}) or: [
			[
			(self coverAll:
				{58 to: 61}) esDeBasto ] valueCoveringAll:
				{63 to: 71} ]] valueCoveringAll:
			{52 to: 54} ]] valueCoveringAll:
		{31 to: 34}.! !
!Behavior method!
mataA: cartaPerdedora
	^ [
	([
	(self coverAll:
		{26 to: 29}) valor ] valueCoveringAll:
		{31 to: 35}) <
		([
		(cartaPerdedora
			cover: (39 to: 52)
			declaredAt: (8 to: 21)) valor ] valueCoveringAll:
			{54 to: 58}) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #RondaTest #test13_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:48:40'!
PASSED!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:48:40'!
PASSED!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:48:40'!
PASSED!
!Behavior method!
puntosPie
	^ puntosPie
		cover: (13 to: 21)
		declaredAt: (13 to: 21).! !
!Behavior method!
puntosMano
	^ puntosMano
		cover: (14 to: 23)
		declaredAt: (14 to: 23).! !

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:48:40'!
PASSED!
!Behavior method!
ganador
	[
	([
	(puntosMano
		cover: (11 to: 20)
		declaredAt: (11 to: 20)) =
		(2 coverAll:
			{24 to: 24}) ] valueCoveringAll:
		{22 to: 22}) ifTrue: [ ^ #Mano coverAll:
			{37 to: 41} ]] valueCoveringAll:
		{27 to: 33}.
	[
	([
	(puntosPie
		cover: (47 to: 55)
		declaredAt: (47 to: 55)) =
		(2 coverAll:
			{59 to: 59}) ] valueCoveringAll:
		{57 to: 57}) ifTrue: [ ^ #Pie coverAll:
			{72 to: 75} ]] valueCoveringAll:
		{62 to: 68}.! !

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:48:40'!
PASSED!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:48:40'!
PASSED!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 20:48:40'!
PASSED!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 20:48:41'!
PASSED!
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 20:51:12'!
test21_NoExisteGanadorAntesDeFinalizarRonda

	| ronda |
	ronda := Ronda withMano: self cartasMano pie: self cartasPie.
	ronda juega: #Mano carta: (self cartasMano at: 2). "3 de espada"
	ronda juega: #Pie carta: (self cartasPie at: 1). "1 de oro"
	
	self assert: Ronda aunNoHayGanador equals: ronda ganador.! !

!testRun: #RondaTest #test21_NoExisteGanadorAntesDeFinalizarRonda stamp: 'LB 7/5/2021 20:51:16'!
ERROR!
!Ronda class methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:51:19'!
aunNoHayGanador
	self shouldBeImplemented.! !
!Ronda class methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:51:32' prior: 50868899!
aunNoHayGanador
	^'Aun no hay ganador'! !

!testRun: #RondaTest #test21_NoExisteGanadorAntesDeFinalizarRonda stamp: 'LB 7/5/2021 20:51:32'!
FAILURE!
!Ronda methodsFor: 'testing' stamp: 'LB 7/5/2021 20:51:47' prior: 50864728!
ganador
	(puntosMano = 2) ifTrue: [^#Mano].
	(puntosPie = 2) ifTrue: [^#Pie].
	^ self class aunNoHayGanador.! !

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:51:49'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:51:49'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 20:51:49'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:51:49'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:51:49'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 20:51:49'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:51:49'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:51:49'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 20:51:49'!
PASSED!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:51:49'!
PASSED!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:51:49'!
PASSED!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:51:49'!
PASSED!

!testRun: #RondaTest #test13_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:51:49'!
PASSED!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:51:49'!
PASSED!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:51:49'!
PASSED!

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:51:49'!
PASSED!

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:51:49'!
PASSED!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:51:49'!
PASSED!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 20:51:49'!
PASSED!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 20:51:49'!
PASSED!

!testRun: #RondaTest #test21_NoExisteGanadorAntesDeFinalizarRonda stamp: 'LB 7/5/2021 20:51:49'!
PASSED!
!RondaTest methodsFor: 'tests - incio ronda' stamp: 'LB 7/5/2021 20:52:35' prior: 50865703!
test04_ManoyPieDebenTenerCartasDeTruco

	| mano pie |
	mano := OrderedCollection with: 1 with: 	2 with: 3.
	pie := OrderedCollection with: 4 with: 	5 with: 6.
	
	self should: [Ronda withMano: mano pie: self cartasPie]
		raise: Error - MessageNotUnderstood 
		withMessageText: Ronda cartasInvalidasErrorDescription.
		
	self should: [Ronda withMano: self cartasMano pie: pie]
		raise: Error - MessageNotUnderstood 
		withMessageText: Ronda cartasInvalidasErrorDescription.! !

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:52:38'!
PASSED!

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:52:38'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:52:38'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 20:52:38'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:52:38'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:52:38'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 20:52:38'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:52:38'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:52:38'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 20:52:38'!
PASSED!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:52:38'!
PASSED!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:52:38'!
PASSED!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:52:38'!
PASSED!

!testRun: #RondaTest #test13_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:52:38'!
PASSED!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:52:38'!
PASSED!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:52:38'!
PASSED!

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:52:38'!
PASSED!

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:52:38'!
PASSED!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:52:38'!
PASSED!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 20:52:38'!
PASSED!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 20:52:38'!
PASSED!

!testRun: #RondaTest #test21_NoExisteGanadorAntesDeFinalizarRonda stamp: 'LB 7/5/2021 20:52:38'!
PASSED!
!Behavior method!
anchoDeBasto
	^ [
	(self coverAll:
		{18 to: 21}) bastoCon:
		(1 coverAll:
			{32 to: 33}) ] valueCoveringAll:
		{23 to: 31}.! !
!Behavior method!
bastoCon: unNumero
	^ [
	(self coverAll:
		{23 to: 26})
		palo:
			([
			(self coverAll:
				{34 to: 37}) basto ] valueCoveringAll:
				{39 to: 43})
		numero:
			(unNumero
				cover: (53 to: 60)
				declaredAt: (11 to: 18)) ] valueCoveringAll:
		{28 to: 32. 45 to: 51}.! !
!Behavior method!
basto
	^ #basto coverAll:
		{11 to: 16}.! !
!Behavior method!
palo: unPalo numero: unNumero
	[
	(self coverAll:
		{35 to: 38}) assertNúmeroEsVálido:
		(unNumero
			cover: (62 to: 69)
			declaredAt: (22 to: 29)) ] valueCoveringAll:
		{40 to: 60}.
	[
	(self coverAll:
		{73 to: 76}) assertPaloEsVálido:
		(unPalo
			cover: (98 to: 103)
			declaredAt: (7 to: 12)) ] valueCoveringAll:
		{78 to: 96}.
	^ [
	([
	(self coverAll:
		{110 to: 113}) new ] valueCoveringAll:
		{115 to: 117})
		initializePalo:
			(unPalo
				cover: (135 to: 140)
				declaredAt: (7 to: 12))
		numero:
			(unNumero
				cover: (150 to: 157)
				declaredAt: (22 to: 29)) ] valueCoveringAll:
		{119 to: 133. 142 to: 148}.! !
!Behavior method!
assertNúmeroEsVálido: unNumero
	[
	([
	(unNumero
		cover: (34 to: 41)
		declaredAt: (23 to: 30)) <
		(1 coverAll:
			{45 to: 45}) ] valueCoveringAll:
		{43 to: 43}) ifTrue: [
		[
		(self coverAll:
			{57 to: 60}) error:
			([
			(self coverAll:
				{69 to: 72}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{74 to: 110}) ] valueCoveringAll:
			{62 to: 67} ]] valueCoveringAll:
		{47 to: 53}.
	[
	([
	(unNumero
		cover: (116 to: 123)
		declaredAt: (23 to: 30)) >
		(12 coverAll:
			{127 to: 128}) ] valueCoveringAll:
		{125 to: 125}) ifTrue: [
		[
		(self coverAll:
			{140 to: 143}) error:
			([
			(self coverAll:
				{152 to: 155}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{157 to: 193}) ] valueCoveringAll:
			{145 to: 150} ]] valueCoveringAll:
		{130 to: 136}.
	[
	([
	(unNumero
		cover: (200 to: 207)
		declaredAt: (23 to: 30))
		between:
			(8 coverAll:
				{218 to: 218})
		and:
			(9 coverAll:
				{225 to: 225}) ] valueCoveringAll:
		{209 to: 216. 220 to: 223}) ifTrue: [
		[
		(self coverAll:
			{238 to: 241}) error:
			([
			(self coverAll:
				{250 to: 253}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{255 to: 291}) ] valueCoveringAll:
			{243 to: 248} ]] valueCoveringAll:
		{228 to: 234}.
	[
	([
	(unNumero
		cover: (297 to: 304)
		declaredAt: (23 to: 30)) isInteger ] valueCoveringAll:
		{306 to: 314}) ifFalse: [
		[
		(self coverAll:
			{327 to: 330}) error:
			([
			(self coverAll:
				{339 to: 342}) numeroDeCartaInvalidoErrorDescription ] valueCoveringAll:
				{344 to: 380}) ] valueCoveringAll:
			{332 to: 337} ]] valueCoveringAll:
		{316 to: 323}.! !
!Behavior method!
assertPaloEsVálido: unPalo
	^ [
	([
	([
	(self coverAll:
		{33 to: 36}) palos ] valueCoveringAll:
		{38 to: 42}) includes:
		(unPalo
			cover: (54 to: 59)
			declaredAt: (21 to: 26)) ] valueCoveringAll:
		{44 to: 52}) ifFalse: [
		[
		(self coverAll:
			{73 to: 76}) error:
			([
			(self coverAll:
				{85 to: 88}) paloInvalidoErrorDescription ] valueCoveringAll:
				{90 to: 117}) ] valueCoveringAll:
			{78 to: 83} ]] valueCoveringAll:
		{62 to: 69}.! !
!Behavior method!
espada
	^ #espada coverAll:
		{12 to: 18}.! !
!Behavior method!
oro
	^ #oro coverAll:
		{9 to: 12}.! !
!Behavior method!
copa
	^ #copa coverAll:
		{10 to: 14}.! !
!Behavior method!
palos
	"No se puede acceder a self en backtick, por eso se usa CartaDeTruco como receiver - Hernan"
	^ `{CartaDeTruco espada. CartaDeTruco basto. CartaDeTruco oro. CartaDeTruco copa}` coverAll:
		{105 to: 185}.! !
!Behavior method!
initializePalo: unPalo numero: unNumero
	(palo _ unPalo
		cover: (53 to: 58)
		declaredAt: (17 to: 22))
		cover: (45 to: 48)
		declaredAt: (45 to: 48).
	(numero _ unNumero
		cover: (72 to: 79)
		declaredAt: (32 to: 39))
		cover: (62 to: 67)
		declaredAt: (62 to: 67).! !
!Behavior method!
anchoDeEspada
	^ [
	(self coverAll:
		{19 to: 22}) espadaCon:
		(1 coverAll:
			{34 to: 35}) ] valueCoveringAll:
		{24 to: 33}.! !
!Behavior method!
espadaCon: unNumero
	^ [
	(self coverAll:
		{24 to: 27})
		palo:
			([
			(self coverAll:
				{35 to: 38}) espada ] valueCoveringAll:
				{40 to: 45})
		numero:
			(unNumero
				cover: (55 to: 62)
				declaredAt: (12 to: 19)) ] valueCoveringAll:
		{29 to: 33. 47 to: 53}.! !
!Behavior method!
cartasRepetidasErrorDescription
	^ 'error las cartas no pueden repetirse' coverAll:
		{35 to: 72}.! !
!Behavior method!
oroCon: unNumero
	^ [
	(self coverAll:
		{21 to: 24})
		palo:
			([
			(self coverAll:
				{32 to: 35}) oro ] valueCoveringAll:
				{37 to: 39})
		numero:
			(unNumero
				cover: (49 to: 56)
				declaredAt: (9 to: 16)) ] valueCoveringAll:
		{26 to: 30. 41 to: 47}.! !
!Behavior method!
withMano: mano pie: pie
	[
	([
	(mano
		cover: (29 to: 32)
		declaredAt: (11 to: 14)) anySatisfy: [ :carta |
		[
		([
		(mano
			cover: (57 to: 60)
			declaredAt: (11 to: 14)) occurrencesOf:
			(carta
				cover: (77 to: 81)
				declaredAt: (48 to: 52)) ] valueCoveringAll:
			{62 to: 75}) >
			(1 coverAll:
				{86 to: 86}) ] valueCoveringAll:
			{84 to: 84} ]] valueCoveringAll:
		{34 to: 44}) ifTrue: [ ^ [
		(self coverAll:
			{100 to: 103}) error:
			([
			(self coverAll:
				{112 to: 115}) cartasRepetidasErrorDescription ] valueCoveringAll:
				{117 to: 147}) ] valueCoveringAll:
			{105 to: 110} ]] valueCoveringAll:
		{90 to: 96}.
	[
	([
	(pie
		cover: (153 to: 155)
		declaredAt: (21 to: 23)) anySatisfy: [ :carta |
		[
		([
		(pie
			cover: (180 to: 182)
			declaredAt: (21 to: 23)) occurrencesOf:
			(carta
				cover: (199 to: 203)
				declaredAt: (171 to: 175)) ] valueCoveringAll:
			{184 to: 197}) >
			(1 coverAll:
				{208 to: 208}) ] valueCoveringAll:
			{206 to: 206} ]] valueCoveringAll:
		{157 to: 167}) ifTrue: [ ^ [
		(self coverAll:
			{222 to: 225}) error:
			([
			(self coverAll:
				{234 to: 237}) cartasRepetidasErrorDescription ] valueCoveringAll:
				{239 to: 269}) ] valueCoveringAll:
			{227 to: 232} ]] valueCoveringAll:
		{212 to: 218}.
	[
	([
	(pie
		cover: (275 to: 277)
		declaredAt: (21 to: 23)) anySatisfy: [ :carta |
		[
		(mano
			cover: (301 to: 304)
			declaredAt: (11 to: 14)) includes:
			(carta
				cover: (316 to: 320)
				declaredAt: (293 to: 297)) ] valueCoveringAll:
			{306 to: 314} ]] valueCoveringAll:
		{279 to: 289}) ifTrue: [ ^ [
		(self coverAll:
			{334 to: 337}) error:
			([
			(self coverAll:
				{346 to: 349}) cartasRepetidasErrorDescription ] valueCoveringAll:
				{351 to: 381}) ] valueCoveringAll:
			{339 to: 344} ]] valueCoveringAll:
		{324 to: 330}.
	[
	([
	(mano
		cover: (387 to: 390)
		declaredAt: (11 to: 14)) anySatisfy: [ :carta |
		[
		([
		(carta
			cover: (414 to: 418)
			declaredAt: (406 to: 410)) class ] valueCoveringAll:
			{420 to: 424}) ~=
			(CartaDeTruco
				cover: (429 to: 440)
				declaredAt: (429 to: 440)) ] valueCoveringAll:
			{426 to: 427} ]] valueCoveringAll:
		{392 to: 402}) ifTrue: [ ^ [
		(self coverAll:
			{454 to: 457}) error:
			([
			(self coverAll:
				{466 to: 469}) cartasInvalidasErrorDescription ] valueCoveringAll:
				{471 to: 501}) ] valueCoveringAll:
			{459 to: 464} ]] valueCoveringAll:
		{444 to: 450}.
	[
	([
	(pie
		cover: (508 to: 510)
		declaredAt: (21 to: 23)) anySatisfy: [ :carta |
		[
		([
		(carta
			cover: (534 to: 538)
			declaredAt: (526 to: 530)) class ] valueCoveringAll:
			{540 to: 544}) ~=
			(CartaDeTruco
				cover: (549 to: 560)
				declaredAt: (429 to: 440)) ] valueCoveringAll:
			{546 to: 547} ]] valueCoveringAll:
		{512 to: 522}) ifTrue: [ ^ [
		(self coverAll:
			{574 to: 577}) error:
			([
			(self coverAll:
				{586 to: 589}) cartasInvalidasErrorDescription ] valueCoveringAll:
				{591 to: 621}) ] valueCoveringAll:
			{579 to: 584} ]] valueCoveringAll:
		{564 to: 570}.
	^ [
	([
	(self coverAll:
		{628 to: 631}) new ] valueCoveringAll:
		{633 to: 635})
		initializeWithMano:
			(mano
				cover: (657 to: 660)
				declaredAt: (11 to: 14))
		pie:
			(pie
				cover: (667 to: 669)
				declaredAt: (21 to: 23)) ] valueCoveringAll:
		{637 to: 655. 662 to: 665}.! !
!Behavior method!
= unaCarta
	^ [
	([
	(unaCarta
		cover: (18 to: 25)
		declaredAt: (3 to: 10)) isKindOf:
		([
		(self coverAll:
			{37 to: 40}) class ] valueCoveringAll:
			{42 to: 46}) ] valueCoveringAll:
		{27 to: 35}) and: [
		[
		([
		(unaCarta
			cover: (56 to: 63)
			declaredAt: (3 to: 10)) paloEs:
			(palo
				cover: (73 to: 76)
				declaredAt: (73 to: 76)) ] valueCoveringAll:
			{65 to: 71}) and: [
			[
			(unaCarta
				cover: (86 to: 93)
				declaredAt: (3 to: 10)) numeroEs:
				(numero
					cover: (105 to: 110)
					declaredAt: (105 to: 110)) ] valueCoveringAll:
				{95 to: 103} ]] valueCoveringAll:
			{79 to: 82} ]] valueCoveringAll:
		{49 to: 52}.! !
!Behavior method!
paloEs: unPalo
	^ [
	(palo
		cover: (19 to: 22)
		declaredAt: (19 to: 22)) =
		(unPalo
			cover: (26 to: 31)
			declaredAt: (9 to: 14)) ] valueCoveringAll:
		{24 to: 24}.! !
!Behavior method!
numeroEs: unNumero
	^ [
	(numero
		cover: (23 to: 28)
		declaredAt: (23 to: 28)) =
		(unNumero
			cover: (32 to: 39)
			declaredAt: (11 to: 18)) ] valueCoveringAll:
		{30 to: 30}.! !

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:52:43'!
PASSED!
!Behavior method!
sieteDeEspada
	^ [
	(self coverAll:
		{19 to: 22}) espadaCon:
		(7 coverAll:
			{34 to: 35}) ] valueCoveringAll:
		{24 to: 33}.! !

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:52:43'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 20:52:43'!
PASSED!
!Behavior method!
cartasInvalidasErrorDescription
	^ 'Cartas invalidas' coverAll:
		{35 to: 52}.! !

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:52:43'!
PASSED!
!Behavior method!
initializeWithMano: jugadorMano pie: jugadorPie
	self.
	(cartas _ [
	(Dictionary
		cover: (62 to: 71)
		declaredAt: (62 to: 71)) new ] valueCoveringAll:
		{73 to: 75})
		cover: (52 to: 57)
		declaredAt: (52 to: 57).
	[
	(cartas
		cover: (79 to: 84)
		declaredAt: (52 to: 57))
		at:
			(#Mano coverAll:
				{90 to: 94})
		put:
			(jugadorMano
				cover: (101 to: 111)
				declaredAt: (21 to: 31)) ] valueCoveringAll:
		{86 to: 88. 96 to: 99}.
	[
	(cartas
		cover: (115 to: 120)
		declaredAt: (52 to: 57))
		at:
			(#Pie coverAll:
				{126 to: 129})
		put:
			(jugadorPie
				cover: (136 to: 145)
				declaredAt: (38 to: 47)) ] valueCoveringAll:
		{122 to: 124. 131 to: 134}.
	(cartasJugadas _ [
	(Dictionary
		cover: (168 to: 177)
		declaredAt: (62 to: 71)) new ] valueCoveringAll:
		{179 to: 181})
		cover: (151 to: 163)
		declaredAt: (151 to: 163).
	(enfrentamiento _ 1 coverAll:
		{203 to: 203})
		cover: (185 to: 198)
		declaredAt: (185 to: 198).
	(turno _ #Mano coverAll:
		{216 to: 220})
		cover: (207 to: 211)
		declaredAt: (207 to: 211).
	(puntosPie _ 0 coverAll:
		{237 to: 237})
		cover: (224 to: 232)
		declaredAt: (224 to: 232).
	(puntosMano _ 0 coverAll:
		{255 to: 255})
		cover: (241 to: 250)
		declaredAt: (241 to: 250).! !
!Behavior method!
enfrentamiento
	^ enfrentamiento
		cover: (18 to: 31)
		declaredAt: (18 to: 31).! !
!Behavior method!
mesa
	^ cartasJugadas
		cover: (8 to: 20)
		declaredAt: (8 to: 20).! !

!testRun: #RondaTest #test05_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:52:43'!
PASSED!
!Behavior method!
turno
	^ turno
		cover: (9 to: 13)
		declaredAt: (9 to: 13).! !

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 20:52:43'!
PASSED!
!Behavior method!
cartaInvalidaErrorDescription
	^ 'No tienes esa carta' coverAll:
		{33 to: 53}.! !
!Behavior method!
juega: unJugador carta: unaCarta
	[
	([
	(turno
		cover: (37 to: 41)
		declaredAt: (37 to: 41)) =
		(unJugador
			cover: (45 to: 53)
			declaredAt: (8 to: 16)) ] valueCoveringAll:
		{43 to: 43}) ifFalse: [ ^ [
		(self coverAll:
			{67 to: 70}) error:
			([
			([
			(self coverAll:
				{79 to: 82}) class ] valueCoveringAll:
				{84 to: 88}) noEsTuTurnoErrorDescription ] valueCoveringAll:
				{90 to: 116}) ] valueCoveringAll:
			{72 to: 77} ]] valueCoveringAll:
		{56 to: 63}.
	[
	([
	([
	(cartas
		cover: (124 to: 129)
		declaredAt: (124 to: 129)) at:
		(unJugador
			cover: (135 to: 143)
			declaredAt: (8 to: 16)) ] valueCoveringAll:
		{131 to: 133}) includes:
		(unaCarta
			cover: (156 to: 163)
			declaredAt: (25 to: 32)) ] valueCoveringAll:
		{146 to: 154}) ifFalse: [ ^ [
		(self coverAll:
			{177 to: 180}) error:
			([
			([
			(self coverAll:
				{189 to: 192}) class ] valueCoveringAll:
				{194 to: 198}) cartaInvalidaErrorDescription ] valueCoveringAll:
				{200 to: 228}) ] valueCoveringAll:
			{182 to: 187} ]] valueCoveringAll:
		{166 to: 173}.
	[
	(cartasJugadas
		cover: (233 to: 245)
		declaredAt: (233 to: 245))
		at:
			(unJugador
				cover: (251 to: 259)
				declaredAt: (8 to: 16))
		put:
			(unaCarta
				cover: (266 to: 273)
				declaredAt: (25 to: 32)) ] valueCoveringAll:
		{247 to: 249. 261 to: 264}.
	[
	([
	(cartas
		cover: (278 to: 283)
		declaredAt: (124 to: 129)) at:
		(unJugador
			cover: (289 to: 297)
			declaredAt: (8 to: 16)) ] valueCoveringAll:
		{285 to: 287}) remove:
		(unaCarta
			cover: (308 to: 315)
			declaredAt: (25 to: 32)) ] valueCoveringAll:
		{300 to: 306}.
	[
	(self coverAll:
		{321 to: 324}) checkFinDeEnfrentamiento ] valueCoveringAll:
		{326 to: 349}.! !

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:52:43'!
PASSED!
!Behavior method!
checkFinDeEnfrentamiento
	[
	([
	([
	([
	(self coverAll:
		{28 to: 31}) mesa ] valueCoveringAll:
		{33 to: 36}) size ] valueCoveringAll:
		{38 to: 41}) =
		(2 coverAll:
			{45 to: 45}) ] valueCoveringAll:
		{43 to: 43})
		ifTrue: [
			(enfrentamiento _ [
			(enfrentamiento
				cover: (60 to: 73)
				declaredAt: (60 to: 73)) +
				(1 coverAll:
					{95 to: 95}) ] valueCoveringAll:
				{93 to: 93})
				cover: (78 to: 91)
				declaredAt: (60 to: 73).
			[
			(self coverAll:
				{100 to: 103}) checkGanador ] valueCoveringAll:
				{105 to: 116}.
			[
			(cartasJugadas
				cover: (121 to: 133)
				declaredAt: (121 to: 133)) removeAll ] valueCoveringAll:
				{135 to: 143} ]
		ifFalse: [
			(turno _ [
			(self coverAll:
				{171 to: 174}) jugadorOpuesto:
				([
				(self coverAll:
					{192 to: 195}) turno ] valueCoveringAll:
					{197 to: 201}) ] valueCoveringAll:
				{176 to: 190})
				cover: (162 to: 166)
				declaredAt: (162 to: 166) ]] valueCoveringAll:
		{48 to: 54. 149 to: 156}.! !
!Behavior method!
jugadorOpuesto: unJugador
	[
	([
	(unJugador
		cover: (29 to: 37)
		declaredAt: (17 to: 25)) =
		(#Pie coverAll:
			{41 to: 44}) ] valueCoveringAll:
		{39 to: 39}) ifTrue: [ ^ #Mano coverAll:
			{57 to: 61} ]] valueCoveringAll:
		{47 to: 53}.
	[
	([
	(unJugador
		cover: (67 to: 75)
		declaredAt: (17 to: 25)) =
		(#Mano coverAll:
			{79 to: 83}) ] valueCoveringAll:
		{77 to: 77}) ifTrue: [ ^ #Pie coverAll:
			{96 to: 99} ]] valueCoveringAll:
		{86 to: 92}.! !
!Behavior method!
mesaAt: jugador
	^ [
	(cartasJugadas
		cover: (19 to: 31)
		declaredAt: (19 to: 31)) at:
		(jugador
			cover: (37 to: 43)
			declaredAt: (9 to: 15)) ] valueCoveringAll:
		{33 to: 35}.! !

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:52:44'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 20:52:44'!
PASSED!
!Behavior method!
noEsTuTurnoErrorDescription
	^ 'Error es el turno del otro jugador' coverAll:
		{31 to: 66}.! !

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:52:44'!
PASSED!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:52:44'!
PASSED!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:52:44'!
PASSED!
!Behavior method!
checkGanador
	[
	([
	([
	([
	(self coverAll:
		{17 to: 20}) mesa ] valueCoveringAll:
		{22 to: 25}) at:
		(#Pie coverAll:
			{31 to: 34}) ] valueCoveringAll:
		{27 to: 29}) empardaCon:
		([
		([
		(self coverAll:
			{50 to: 53}) mesa ] valueCoveringAll:
			{55 to: 58}) at:
			(#Mano coverAll:
				{64 to: 68}) ] valueCoveringAll:
			{60 to: 62}) ] valueCoveringAll:
		{37 to: 47}) ifTrue: [
		(turno _ #Mano coverAll:
			{90 to: 94})
			cover: (81 to: 85)
			declaredAt: (81 to: 85).
		(puntosPie _ [
		(puntosPie
			cover: (97 to: 105)
			declaredAt: (97 to: 105)) +
			(1 coverAll:
				{121 to: 121}) ] valueCoveringAll:
			{120 to: 120})
			cover: (110 to: 118)
			declaredAt: (97 to: 105).
		(puntosMano _ [
		(puntosMano
			cover: (124 to: 133)
			declaredAt: (124 to: 133)) +
			(1 coverAll:
				{150 to: 150}) ] valueCoveringAll:
			{149 to: 149})
			cover: (138 to: 147)
			declaredAt: (124 to: 133) ]] valueCoveringAll:
		{72 to: 78}.
	[
	([
	([
	([
	(self coverAll:
		{157 to: 160}) mesa ] valueCoveringAll:
		{162 to: 165}) at:
		(#Mano coverAll:
			{171 to: 175}) ] valueCoveringAll:
		{167 to: 169}) mataA:
		([
		([
		(self coverAll:
			{186 to: 189}) mesa ] valueCoveringAll:
			{191 to: 194}) at:
			(#Pie coverAll:
				{200 to: 203}) ] valueCoveringAll:
			{196 to: 198}) ] valueCoveringAll:
		{178 to: 183}) ifTrue: [
		(turno _ #Mano coverAll:
			{225 to: 229})
			cover: (216 to: 220)
			declaredAt: (81 to: 85).
		(puntosMano _ [
		(puntosMano
			cover: (232 to: 241)
			declaredAt: (124 to: 133)) +
			(1 coverAll:
				{258 to: 258}) ] valueCoveringAll:
			{257 to: 257})
			cover: (246 to: 255)
			declaredAt: (124 to: 133) ]] valueCoveringAll:
		{207 to: 213}.
	[
	([
	([
	([
	(self coverAll:
		{265 to: 268}) mesa ] valueCoveringAll:
		{270 to: 273}) at:
		(#Pie coverAll:
			{279 to: 282}) ] valueCoveringAll:
		{275 to: 277}) mataA:
		([
		([
		(self coverAll:
			{293 to: 296}) mesa ] valueCoveringAll:
			{298 to: 301}) at:
			(#Mano coverAll:
				{307 to: 311}) ] valueCoveringAll:
			{303 to: 305}) ] valueCoveringAll:
		{285 to: 290}) ifTrue: [
		(turno _ #Pie coverAll:
			{333 to: 336})
			cover: (324 to: 328)
			declaredAt: (81 to: 85).
		(puntosPie _ [
		(puntosPie
			cover: (339 to: 347)
			declaredAt: (97 to: 105)) +
			(1 coverAll:
				{363 to: 363}) ] valueCoveringAll:
			{362 to: 362})
			cover: (352 to: 360)
			declaredAt: (97 to: 105) ]] valueCoveringAll:
		{315 to: 321}.! !
!Behavior method!
empardaCon: cartaParda
	^ [
	([
	(self coverAll:
		{27 to: 30}) valor ] valueCoveringAll:
		{32 to: 36}) =
		([
		(cartaParda
			cover: (40 to: 49)
			declaredAt: (13 to: 22)) valor ] valueCoveringAll:
			{51 to: 55}) ] valueCoveringAll:
		{38 to: 38}.! !
!Behavior method!
valor
	^ [
	([
	(self coverAll:
		{11 to: 14}) class ] valueCoveringAll:
		{16 to: 20}) valorDe:
		(self coverAll:
			{31 to: 34}) ] valueCoveringAll:
		{22 to: 29}.! !
!Behavior method!
valorDe: unaCarta
	[
	([
	(self coverAll:
		{23 to: 26}) ordenDePrioridad ] valueCoveringAll:
		{28 to: 43}) withIndexDo: [ :bloqueDeVerificacion :index |
		[
		([
		(bloqueDeVerificacion
			cover: (94 to: 113)
			declaredAt: (61 to: 80)) value:
			(unaCarta
				cover: (122 to: 129)
				declaredAt: (10 to: 17)) ] valueCoveringAll:
			{115 to: 120}) ifTrue: [ ^ index
				cover: (143 to: 147)
				declaredAt: (83 to: 87) ]] valueCoveringAll:
			{132 to: 138} ]] valueCoveringAll:
		{45 to: 56}.
	[
	(self coverAll:
		{156 to: 159}) error:
		([
		(self coverAll:
			{168 to: 171}) tablaDeValoresIncorrectaOCartaInvalidaErrorDescription ] valueCoveringAll:
			{173 to: 226}) ] valueCoveringAll:
		{161 to: 166}.! !
!Behavior method!
ordenDePrioridad
	^ [
	(ordenDePrioridad
		cover: (22 to: 37)
		declaredAt: (22 to: 37)) ifNil: [
		[
		(self coverAll:
			{48 to: 51}) initializeOrdenDePrioridad ] valueCoveringAll:
			{53 to: 78} ]] valueCoveringAll:
		{39 to: 44}.! !
!Behavior method!
esAnchoDeEspada
	^ [
	([
	(self coverAll:
		{21 to: 24}) esAncho ] valueCoveringAll:
		{26 to: 32}) and: [
		[
		(self coverAll:
			{41 to: 44}) esDeEspada ] valueCoveringAll:
			{46 to: 55} ]] valueCoveringAll:
		{34 to: 37}.! !
!Behavior method!
esAncho
	^ [
	(self coverAll:
		{13 to: 16}) numeroEs:
		(1 coverAll:
			{27 to: 28}) ] valueCoveringAll:
		{18 to: 26}.! !
!Behavior method!
esDeEspada
	^ [
	(self coverAll:
		{16 to: 19}) paloEs:
		([
		(self coverAll:
			{29 to: 32}) espada ] valueCoveringAll:
			{34 to: 39}) ] valueCoveringAll:
		{21 to: 27}.! !
!Behavior method!
espada
	^ [
	([
	(self coverAll:
		{12 to: 15}) class ] valueCoveringAll:
		{17 to: 21}) espada ] valueCoveringAll:
		{23 to: 28}.! !
!Behavior method!
esAnchoDeBasto
	^ [
	([
	(self coverAll:
		{20 to: 23}) esAncho ] valueCoveringAll:
		{25 to: 31}) and: [
		[
		(self coverAll:
			{40 to: 43}) esDeBasto ] valueCoveringAll:
			{45 to: 53} ]] valueCoveringAll:
		{33 to: 36}.! !
!Behavior method!
esDeBasto
	^ [
	(self coverAll:
		{15 to: 18}) paloEs:
		([
		(self coverAll:
			{28 to: 31}) basto ] valueCoveringAll:
			{33 to: 37}) ] valueCoveringAll:
		{20 to: 26}.! !
!Behavior method!
basto
	^ [
	([
	(self coverAll:
		{11 to: 14}) class ] valueCoveringAll:
		{16 to: 20}) basto ] valueCoveringAll:
		{22 to: 26}.! !
!Behavior method!
esSieteDeEspadas
	^ [
	([
	(self coverAll:
		{22 to: 25}) esSiete ] valueCoveringAll:
		{27 to: 33}) and: [
		[
		(self coverAll:
			{42 to: 45}) esDeEspada ] valueCoveringAll:
			{47 to: 56} ]] valueCoveringAll:
		{35 to: 38}.! !
!Behavior method!
esSiete
	^ [
	(self coverAll:
		{13 to: 16}) numeroEs:
		(7 coverAll:
			{27 to: 28}) ] valueCoveringAll:
		{18 to: 26}.! !
!Behavior method!
esSieteDeOro
	^ [
	([
	(self coverAll:
		{18 to: 21}) esSiete ] valueCoveringAll:
		{23 to: 29}) and: [
		[
		(self coverAll:
			{38 to: 41}) esDeOro ] valueCoveringAll:
			{43 to: 49} ]] valueCoveringAll:
		{31 to: 34}.! !
!Behavior method!
esAnchoFalso
	^ [
	([
	(self coverAll:
		{18 to: 21}) esAncho ] valueCoveringAll:
		{23 to: 29}) and: [
		[
		([
		(self coverAll:
			{38 to: 41}) esDeOro ] valueCoveringAll:
			{43 to: 49}) or: [
			[
			(self coverAll:
				{57 to: 60}) esDeCopa ] valueCoveringAll:
				{62 to: 69} ]] valueCoveringAll:
			{51 to: 53} ]] valueCoveringAll:
		{31 to: 34}.! !
!Behavior method!
esDeOro
	^ [
	(self coverAll:
		{13 to: 16}) paloEs:
		([
		(self coverAll:
			{26 to: 29}) oro ] valueCoveringAll:
			{31 to: 33}) ] valueCoveringAll:
		{18 to: 24}.! !
!Behavior method!
oro
	^ [
	([
	(self coverAll:
		{9 to: 12}) class ] valueCoveringAll:
		{14 to: 18}) oro ] valueCoveringAll:
		{20 to: 22}.! !
!Behavior method!
esRey
	^ [
	(self coverAll:
		{11 to: 14}) numeroEs:
		(12 coverAll:
			{26 to: 27}) ] valueCoveringAll:
		{16 to: 24}.! !
!Behavior method!
esCaballo
	^ [
	(self coverAll:
		{15 to: 18}) numeroEs:
		(11 coverAll:
			{30 to: 31}) ] valueCoveringAll:
		{20 to: 28}.! !
!Behavior method!
esSota
	^ [
	(self coverAll:
		{12 to: 15}) numeroEs:
		(10 coverAll:
			{27 to: 28}) ] valueCoveringAll:
		{17 to: 25}.! !
!Behavior method!
esSieteFalso
	^ [
	([
	(self coverAll:
		{18 to: 21}) esSiete ] valueCoveringAll:
		{23 to: 29}) and: [
		[
		([
		(self coverAll:
			{38 to: 41}) esDeCopa ] valueCoveringAll:
			{43 to: 50}) or: [
			[
			(self coverAll:
				{58 to: 61}) esDeBasto ] valueCoveringAll:
				{63 to: 71} ]] valueCoveringAll:
			{52 to: 54} ]] valueCoveringAll:
		{31 to: 34}.! !
!Behavior method!
mataA: cartaPerdedora
	^ [
	([
	(self coverAll:
		{26 to: 29}) valor ] valueCoveringAll:
		{31 to: 35}) <
		([
		(cartaPerdedora
			cover: (39 to: 52)
			declaredAt: (8 to: 21)) valor ] valueCoveringAll:
			{54 to: 58}) ] valueCoveringAll:
		{37 to: 37}.! !

!testRun: #RondaTest #test13_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:52:44'!
PASSED!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:52:44'!
PASSED!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:52:44'!
PASSED!
!Behavior method!
puntosPie
	^ puntosPie
		cover: (13 to: 21)
		declaredAt: (13 to: 21).! !
!Behavior method!
puntosMano
	^ puntosMano
		cover: (14 to: 23)
		declaredAt: (14 to: 23).! !

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:52:44'!
PASSED!
!Behavior method!
ganador
	[
	([
	(puntosMano
		cover: (11 to: 20)
		declaredAt: (11 to: 20)) =
		(2 coverAll:
			{24 to: 24}) ] valueCoveringAll:
		{22 to: 22}) ifTrue: [ ^ #Mano coverAll:
			{37 to: 41} ]] valueCoveringAll:
		{27 to: 33}.
	[
	([
	(puntosPie
		cover: (47 to: 55)
		declaredAt: (47 to: 55)) =
		(2 coverAll:
			{59 to: 59}) ] valueCoveringAll:
		{57 to: 57}) ifTrue: [ ^ #Pie coverAll:
			{72 to: 75} ]] valueCoveringAll:
		{62 to: 68}.
	^ [
	([
	(self coverAll:
		{82 to: 85}) class ] valueCoveringAll:
		{87 to: 91}) aunNoHayGanador ] valueCoveringAll:
		{93 to: 107}.! !

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:52:44'!
PASSED!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:52:44'!
PASSED!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 20:52:44'!
PASSED!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 20:52:44'!
PASSED!
!Behavior method!
aunNoHayGanador
	^ 'Aun no hay ganador' coverAll:
		{19 to: 38}.! !

!testRun: #RondaTest #test21_NoExisteGanadorAntesDeFinalizarRonda stamp: 'LB 7/5/2021 20:52:44'!
PASSED!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 20:53:43' prior: 50863644!
checkFinDeEnfrentamiento
	(self mesa size = 2) ifTrue: [
		self checkGanador.
		cartasJugadas removeAll.
	] ifFalse: [
		turno := self jugadorOpuesto: self turno.
	]! !
!Ronda methodsFor: 'inicialization' stamp: 'LB 7/5/2021 20:53:46' prior: 50864584!
initializeWithMano: jugadorMano pie: jugadorPie.

	cartas := Dictionary new.
	cartas at: #Mano put: jugadorMano.
	cartas at: #Pie put: jugadorPie.
	
	cartasJugadas := Dictionary new.
	turno := #Mano.
	puntosPie := 0.
	puntosMano := 0.! !
!RondaTest methodsFor: 'tests - incio ronda' stamp: 'LB 7/5/2021 20:54:22'!
test05_RondaIniciaSinCartasJugadas

	| ronda |
	ronda := Ronda withMano: self cartasMano pie: self cartasPie.
	self assert: 0 equals: ronda mesa size.! !
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 20:54:33' prior: 50866601!
test13_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores
	| ronda |
	ronda := Ronda withMano: self cartasMano pie: self cartasPie.
	ronda juega: #Mano carta: (self cartasMano at: 1).
	ronda juega: #Pie carta: (self cartasPie at: 1).

	self assert: 0 equals: ronda mesa size.! !

!methodRemoval: Ronda #enfrentamiento stamp: 'LB 7/5/2021 20:54:37'!
enfrentamiento
	^enfrentamiento!

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:54:39'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:54:39'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 20:54:39'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:54:39'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:54:39'!
ERROR!

!testRun: #RondaTest #test05_RondaIniciaSinCartasJugadas stamp: 'LB 7/5/2021 20:54:39'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 20:54:39'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:54:39'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:54:39'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 20:54:39'!
PASSED!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:54:39'!
PASSED!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:54:39'!
PASSED!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:54:39'!
PASSED!

!testRun: #RondaTest #test13_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:54:39'!
PASSED!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:54:39'!
PASSED!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:54:39'!
PASSED!

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:54:39'!
PASSED!

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:54:39'!
PASSED!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:54:39'!
PASSED!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 20:54:39'!
PASSED!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 20:54:39'!
PASSED!

!testRun: #RondaTest #test21_NoExisteGanadorAntesDeFinalizarRonda stamp: 'LB 7/5/2021 20:54:39'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:54:39'!
ERROR!
!RondaTest methodsFor: 'tests - incio ronda' stamp: 'LB 7/5/2021 20:54:44' prior: 50866041!
test05_RondaIniciaEnEnfrentamiento1ySinCartasJugadas

	| ronda |
	ronda := Ronda withMano: self cartasMano pie: self cartasPie.

	self assert: 0 equals: ronda mesa size.! !

!testRun: #RondaTest #test05_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:54:45'!
PASSED!

Object subclass: #Ronda
	instanceVariableNames: 'cartasJugadas turno puntosPie puntosMano cartas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'LB 7/5/2021 20:54:51'!
Object subclass: #Ronda
	instanceVariableNames: 'cartasJugadas turno puntosPie puntosMano cartas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

TestCase subclass: #RondaTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaTest category: 'ISW1-2021-1C-2doParcial' stamp: 'LB 7/5/2021 20:54:56'!
TestCase subclass: #RondaTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'inicialization' stamp: 'LB 7/5/2021 20:55:34' prior: 50869905!
initializeWithMano: mano pie: pie.

	cartas := Dictionary new.
	cartas at: #Mano put: mano.
	cartas at: #Pie put: pie.
	
	cartasJugadas := Dictionary new.
	turno := #Mano.
	puntosPie := 0.
	puntosMano := 0.! !

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:55:35'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:55:35'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 20:55:35'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:55:35'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:55:35'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaSinCartasJugadas stamp: 'LB 7/5/2021 20:55:35'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 20:55:35'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:55:35'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:55:35'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 20:55:35'!
PASSED!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:55:35'!
PASSED!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:55:35'!
PASSED!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:55:35'!
PASSED!

!testRun: #RondaTest #test13_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:55:35'!
PASSED!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:55:35'!
PASSED!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:55:35'!
PASSED!

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:55:35'!
PASSED!

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:55:35'!
PASSED!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:55:35'!
PASSED!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 20:55:35'!
PASSED!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 20:55:35'!
PASSED!

!testRun: #RondaTest #test21_NoExisteGanadorAntesDeFinalizarRonda stamp: 'LB 7/5/2021 20:55:35'!
PASSED!
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 20:56:53' prior: 50866143!
test08_RondaConoceLaCartaJugada

	| ronda |
	ronda := Ronda withMano: self cartasMano pie: self cartasPie.
	ronda juega: #Mano carta: (self cartasMano at: 1).
	
	self assert: (ronda mesa at: #Mano) equals: (self cartasMano at: 1).
	self assert: 1 equals: ronda mesa size.! !

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:56:54'!
PASSED!

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:56:54'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:56:54'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 20:56:54'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:56:54'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:56:54'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaSinCartasJugadas stamp: 'LB 7/5/2021 20:56:54'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 20:56:54'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:56:54'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:56:54'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 20:56:54'!
PASSED!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:56:54'!
PASSED!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:56:54'!
PASSED!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:56:54'!
PASSED!

!testRun: #RondaTest #test13_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:56:54'!
PASSED!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:56:54'!
PASSED!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:56:54'!
PASSED!

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:56:54'!
PASSED!

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:56:54'!
PASSED!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:56:54'!
PASSED!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 20:56:54'!
PASSED!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 20:56:54'!
PASSED!

!testRun: #RondaTest #test21_NoExisteGanadorAntesDeFinalizarRonda stamp: 'LB 7/5/2021 20:56:54'!
PASSED!

!methodRemoval: Ronda #mesaAt: stamp: 'LB 7/5/2021 20:56:57'!
mesaAt: jugador
	^cartasJugadas at: jugador.

	!

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:56:59'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 20:56:59'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 20:56:59'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 20:56:59'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:56:59'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaSinCartasJugadas stamp: 'LB 7/5/2021 20:56:59'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 20:56:59'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:56:59'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 20:56:59'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 20:56:59'!
PASSED!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:56:59'!
PASSED!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 20:56:59'!
PASSED!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 20:56:59'!
PASSED!

!testRun: #RondaTest #test13_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:56:59'!
PASSED!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:56:59'!
PASSED!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 20:56:59'!
PASSED!

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 20:56:59'!
PASSED!

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:56:59'!
PASSED!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 20:56:59'!
PASSED!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 20:56:59'!
PASSED!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 20:56:59'!
PASSED!

!testRun: #RondaTest #test21_NoExisteGanadorAntesDeFinalizarRonda stamp: 'LB 7/5/2021 20:56:59'!
PASSED!

!methodRemoval: RondaTest #test05_RondaIniciaEnEnfrentamiento1ySinCartasJugadas stamp: 'LB 7/5/2021 20:57:37'!
test05_RondaIniciaEnEnfrentamiento1ySinCartasJugadas

	| ronda |
	ronda := Ronda withMano: self cartasMano pie: self cartasPie.

	self assert: 0 equals: ronda mesa size.!
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 20:58:36'!
test13_SeLimpiaLaMesaAlFinalizarElEnfrentamiento
	| ronda |
	ronda := Ronda withMano: self cartasMano pie: self cartasPie.
	ronda juega: #Mano carta: (self cartasMano at: 1).
	ronda juega: #Pie carta: (self cartasPie at: 1).

	self assert: 0 equals: ronda mesa size.! !

!methodRemoval: RondaTest #test13_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores stamp: 'LB 7/5/2021 20:58:36'!
test13_FinalizaElEnfrentamientoAlTerminarElTurnoDeAmbosJugadores
	| ronda |
	ronda := Ronda withMano: self cartasMano pie: self cartasPie.
	ronda juega: #Mano carta: (self cartasMano at: 1).
	ronda juega: #Pie carta: (self cartasPie at: 1).

	self assert: 0 equals: ronda mesa size.!

----SNAPSHOT----(5 July 2021 20:58:49) CuisUniversity-4532.image priorSource: 17095254!
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 21:00:38'!
test22_NoSePuedeSeguirJugandoUnaVezFinalizadaLaRonda

	| ronda |
	ronda := Ronda withMano: self cartasMano pie: self cartasPie.
	ronda juega: #Mano carta: (self cartasMano at: 2). "3 de espada"
	ronda juega: #Pie carta: (self cartasPie at: 1). "1 de oro"
	
	self assert: Ronda aunNoHayGanador equals: ronda ganador.! !
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 21:02:23' prior: 50870332!
test22_NoSePuedeSeguirJugandoUnaVezFinalizadaLaRonda

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 3).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 6).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 1).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 4).
	
	ronda juega: #Mano carta: (CartaDeTruco oroCon: 3).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 6).
	
	self should: [ronda juega: #Mano carta: (CartaDeTruco oroCon: 3)]
		raise: Error - MessageNotUnderstood 
		withMessageText: Ronda haFinalizadoLaRondaErrorDescription.! !

!testRun: #RondaTest #test22_NoSePuedeSeguirJugandoUnaVezFinalizadaLaRonda stamp: 'LB 7/5/2021 21:02:26'!
ERROR!
!Ronda class methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 21:02:30'!
haFinalizadoLaRondaErrorDescription
	self shouldBeImplemented.! !
!Ronda class methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 21:02:40' prior: 50870375!
haFinalizadoLaRondaErrorDescription
	^'Error la ronda ya ha finalizado.'! !

!testRun: #RondaTest #test22_NoSePuedeSeguirJugandoUnaVezFinalizadaLaRonda stamp: 'LB 7/5/2021 21:02:41'!
FAILURE!
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 21:03:48' prior: 50864817!
juega: unJugador carta: unaCarta
	self checkFinRonda.
	(turno = unJugador) ifFalse: [^self error: self class noEsTuTurnoErrorDescription ].
	((cartas at: unJugador) includes: unaCarta) ifFalse: [^self error: self class cartaInvalidaErrorDescription].
	cartasJugadas at: unJugador put: unaCarta.
	(cartas at: unJugador) remove: unaCarta.
	
	self checkFinDeEnfrentamiento.! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 21:04:59'!
checkFinRonda
	((self ganador = #Pie) or: [self ganador = #Mano]) ifTrue: [^self error: self class haFinalizadoLaRondaErrorDescription ].! !

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:05:00'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:05:00'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 21:05:00'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 21:05:00'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaSinCartasJugadas stamp: 'LB 7/5/2021 21:05:00'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 21:05:00'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:05:00'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 21:05:00'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 21:05:00'!
PASSED!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:05:00'!
PASSED!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:05:00'!
PASSED!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:05:00'!
PASSED!

!testRun: #RondaTest #test13_SeLimpiaLaMesaAlFinalizarElEnfrentamiento stamp: 'LB 7/5/2021 21:05:00'!
PASSED!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:05:00'!
PASSED!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:05:00'!
PASSED!

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 21:05:00'!
PASSED!

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:05:00'!
PASSED!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:05:00'!
PASSED!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 21:05:00'!
PASSED!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 21:05:00'!
PASSED!

!testRun: #RondaTest #test21_NoExisteGanadorAntesDeFinalizarRonda stamp: 'LB 7/5/2021 21:05:00'!
PASSED!

!testRun: #RondaTest #test22_NoSePuedeSeguirJugandoUnaVezFinalizadaLaRonda stamp: 'LB 7/5/2021 21:05:00'!
PASSED!
!RondaTest methodsFor: 'initialization' stamp: 'LB 7/5/2021 21:05:59'!
defaultRonda 
	^Ronda withMano: self cartasMano pie: self cartasPie.
	! !
!RondaTest methodsFor: 'tests - incio ronda' stamp: 'LB 7/5/2021 21:06:21' prior: 50869915!
test05_RondaIniciaSinCartasJugadas

	| ronda |
	ronda := self defaultRonda.
	self assert: 0 equals: ronda mesa size.! !
!RondaTest methodsFor: 'tests - incio ronda' stamp: 'LB 7/5/2021 21:06:32' prior: 50866051!
test06_ManoTiraPrimero

	| ronda |
	ronda := self defaultRonda.
	
	self assert: #Mano equals: ronda turno.! !
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 21:06:36' prior: 50866059!
test07_ManoSoloPuedeJugarUnaCartaSuya

	| ronda |
	ronda := self defaultRonda.
	
	self should: [ronda juega: #Mano carta: (CartaDeTruco oroCon: 4).]
		raise: Error - MessageNotUnderstood
		withMessageText: Ronda cartaInvalidaErrorDescription.! !
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 21:06:40' prior: 50870134!
test08_RondaConoceLaCartaJugada

	| ronda |
	ronda := self defaultRonda.
	ronda juega: #Mano carta: (self cartasMano at: 1).
	
	self assert: (ronda mesa at: #Mano) equals: (self cartasMano at: 1).
	self assert: 1 equals: ronda mesa size.! !
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 21:06:42' prior: 50866232!
test09_LuegoDeJugarManoEsTurnoDePie

	| ronda |
	ronda := self defaultRonda.
	
	ronda juega: #Mano carta: (self cartasMano at: 1).
	
	self assert: #Pie equals: ronda turno.! !
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 21:06:46' prior: 50866292!
test10_ManoSoloPuedeTirarEnSuTurno

	| ronda |
	ronda := self defaultRonda.
	
	ronda juega: #Mano carta: (self cartasMano at: 1).
	
	self should: [ronda juega: #Mano carta: (self cartasMano at: 2).]
		raise: Error - MessageNotUnderstood
		withMessageText: Ronda noEsTuTurnoErrorDescription.! !
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 21:06:49' prior: 50866551!
test11_PieSoloPuedeTirarEnSuTurno

	| ronda |
	ronda := self defaultRonda.
	
	self should: [ronda juega: #Pie carta: (self cartasPie at: 1).]
		raise: Error - MessageNotUnderstood
		withMessageText: Ronda noEsTuTurnoErrorDescription.! !
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 21:06:53' prior: 50866574!
test12_PieSoloPuedeJugarUnaCartaSuya
	
	| ronda |
	ronda := self defaultRonda.
	ronda juega: #Mano carta: (self cartasMano at: 1).
	
	self should: [ronda juega: #Pie carta: (self cartasMano at: 1).]
		raise: Error - MessageNotUnderstood
		withMessageText: Ronda cartaInvalidaErrorDescription.! !
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 21:06:57' prior: 50870305!
test13_SeLimpiaLaMesaAlFinalizarElEnfrentamiento
	| ronda |
	ronda := self defaultRonda.
	ronda juega: #Mano carta: (self cartasMano at: 1).
	ronda juega: #Pie carta: (self cartasPie at: 1).

	self assert: 0 equals: ronda mesa size.! !
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 21:07:00' prior: 50866978!
test14_GanadorManoComienzaElSiguienteEnfrentamiento

	| ronda |
	ronda := self defaultRonda.
	ronda juega: #Mano carta: (self cartasMano at: 2). "3 de espada"
	ronda juega: #Pie carta: (self cartasPie at: 1). "1 de oro"
	
	self assert: #Mano equals: ronda turno.! !
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 21:07:03' prior: 50867142!
test15_GanadorPieComienzaElSiguienteEnfrentamiento

	| ronda |
	ronda := self defaultRonda.
	ronda juega: #Mano carta: (self cartasMano at: 1). "4 de espada"
	ronda juega: #Pie carta: (self cartasPie at: 1). "1 de oro"
	
	self assert: #Pie equals: ronda turno.! !
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 21:07:07' prior: 50867155!
test16_GanadorDeEnfrentamientoGana1Punto

	| ronda |
	ronda := self defaultRonda.
	ronda juega: #Mano carta: (self cartasMano at: 2). "3 de espada"
	ronda juega: #Pie carta: (self cartasPie at: 1). "1 de oro"
	
	self assert: 0 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	
	ronda juega: #Mano carta: (self cartasMano at: 1). "4 de espada"
	ronda juega: #Pie carta: (self cartasPie at: 2). "2 de espada"
	
	self assert: 1 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.! !

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 21:07:12'!
PASSED!

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:07:15'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:07:15'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 21:07:15'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 21:07:15'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaSinCartasJugadas stamp: 'LB 7/5/2021 21:07:15'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 21:07:15'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:07:15'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 21:07:15'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 21:07:15'!
PASSED!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:07:15'!
PASSED!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:07:15'!
PASSED!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:07:15'!
PASSED!

!testRun: #RondaTest #test13_SeLimpiaLaMesaAlFinalizarElEnfrentamiento stamp: 'LB 7/5/2021 21:07:15'!
PASSED!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:07:15'!
PASSED!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:07:15'!
PASSED!

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 21:07:15'!
PASSED!

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:07:15'!
PASSED!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:07:15'!
PASSED!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 21:07:15'!
PASSED!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 21:07:15'!
PASSED!

!testRun: #RondaTest #test21_NoExisteGanadorAntesDeFinalizarRonda stamp: 'LB 7/5/2021 21:07:15'!
PASSED!

!testRun: #RondaTest #test22_NoSePuedeSeguirJugandoUnaVezFinalizadaLaRonda stamp: 'LB 7/5/2021 21:07:15'!
PASSED!
!RondaTest methodsFor: 'initialization' stamp: 'LB 7/5/2021 21:07:43' prior: 50866009!
cartasPie 
	^OrderedCollection with: (CartaDeTruco oroCon: 1) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 5).! !

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:07:46'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:07:46'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 21:07:46'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 21:07:46'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaSinCartasJugadas stamp: 'LB 7/5/2021 21:07:46'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 21:07:46'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:07:46'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 21:07:46'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 21:07:46'!
PASSED!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:07:46'!
PASSED!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:07:46'!
PASSED!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:07:46'!
PASSED!

!testRun: #RondaTest #test13_SeLimpiaLaMesaAlFinalizarElEnfrentamiento stamp: 'LB 7/5/2021 21:07:46'!
PASSED!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:07:46'!
PASSED!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:07:46'!
PASSED!

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 21:07:46'!
PASSED!

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:07:46'!
PASSED!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:07:46'!
PASSED!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 21:07:46'!
PASSED!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 21:07:46'!
PASSED!

!testRun: #RondaTest #test21_NoExisteGanadorAntesDeFinalizarRonda stamp: 'LB 7/5/2021 21:07:46'!
PASSED!

!testRun: #RondaTest #test22_NoSePuedeSeguirJugandoUnaVezFinalizadaLaRonda stamp: 'LB 7/5/2021 21:07:46'!
PASSED!
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 21:08:39' prior: 50866757!
test17_ManoGanaEnSegundaRondaAlSumar2Puntos
	
	| ronda |
	ronda := self defaultRonda.
	ronda juega: #Mano carta: (self cartasMano at: 2). "3 de espada"
	ronda juega: #Pie carta: (self cartasPie at: 1). "1 de oro"
	
	self assert: 0 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	
	ronda juega: #Mano carta: (self cartasMano at: 3). "6 de espada"
	ronda juega: #Pie carta: (self cartasPie at: 3). "5 de oro"
	
	self assert: 0 equals: ronda puntosPie.
	self assert: 2 equals: ronda puntosMano.! !

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:08:40'!
PASSED!

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:08:40'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:08:40'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 21:08:40'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 21:08:40'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaSinCartasJugadas stamp: 'LB 7/5/2021 21:08:40'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 21:08:40'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:08:40'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 21:08:40'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 21:08:40'!
PASSED!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:08:40'!
PASSED!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:08:40'!
PASSED!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:08:40'!
PASSED!

!testRun: #RondaTest #test13_SeLimpiaLaMesaAlFinalizarElEnfrentamiento stamp: 'LB 7/5/2021 21:08:40'!
PASSED!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:08:40'!
PASSED!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:08:40'!
PASSED!

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 21:08:40'!
PASSED!

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:08:40'!
PASSED!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:08:40'!
PASSED!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 21:08:40'!
PASSED!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 21:08:40'!
PASSED!

!testRun: #RondaTest #test21_NoExisteGanadorAntesDeFinalizarRonda stamp: 'LB 7/5/2021 21:08:40'!
PASSED!

!testRun: #RondaTest #test22_NoSePuedeSeguirJugandoUnaVezFinalizadaLaRonda stamp: 'LB 7/5/2021 21:08:40'!
PASSED!
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 21:09:53' prior: 50870778!
test17_ManoGanaEnSegundaRondaAlSumar2Puntos
	
	| ronda |
	ronda := self defaultRonda.
	ronda juega: #Mano carta: (self cartasMano at: 2). "3 de espada"
	ronda juega: #Pie carta: (self cartasPie at: 1). "1 de oro"
	ronda juega: #Mano carta: (self cartasMano at: 3). "6 de espada"
	ronda juega: #Pie carta: (self cartasPie at: 3). "5 de oro"
	
	self assert: 0 equals: ronda puntosPie.
	self assert: 2 equals: ronda puntosMano.! !

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:09:54'!
PASSED!

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:09:54'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:09:54'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 21:09:54'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 21:09:54'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaSinCartasJugadas stamp: 'LB 7/5/2021 21:09:54'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 21:09:54'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:09:54'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 21:09:54'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 21:09:54'!
PASSED!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:09:54'!
PASSED!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:09:54'!
PASSED!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:09:54'!
PASSED!

!testRun: #RondaTest #test13_SeLimpiaLaMesaAlFinalizarElEnfrentamiento stamp: 'LB 7/5/2021 21:09:54'!
PASSED!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:09:54'!
PASSED!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:09:54'!
PASSED!

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 21:09:54'!
PASSED!

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:09:54'!
PASSED!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:09:54'!
PASSED!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 21:09:54'!
PASSED!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 21:09:54'!
PASSED!

!testRun: #RondaTest #test21_NoExisteGanadorAntesDeFinalizarRonda stamp: 'LB 7/5/2021 21:09:54'!
PASSED!

!testRun: #RondaTest #test22_NoSePuedeSeguirJugandoUnaVezFinalizadaLaRonda stamp: 'LB 7/5/2021 21:09:54'!
PASSED!
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 21:11:19' prior: 50866812!
test18_PieGanaEnTercerRondaAlSumar2Puntos
	
	| ronda |
	ronda := self defaultRonda.
	ronda juega: #Mano carta: (self cartasMano at: 2). "3 de espada"
	ronda juega: #Pie carta: (self cartasPie at: 3). "5 de oro"
	ronda juega: #Mano carta: (self cartasMano at: 3). "6 de espada"
	ronda juega: #Pie carta: (self cartasPie at: 1). "1 de oro"
	ronda juega: #Mano carta: (self cartasMano at: 1). "4 de espada"
	ronda juega: #Pie carta: (self cartasPie at: 2). "3 de oro"
	
	self assert: 2 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	self assert: #Pie equals: ronda ganador.! !

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:11:21'!
ERROR!
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 21:12:28' prior: 50870964!
test18_PieGanaEnTercerRondaAlSumar2Puntos
	
	| ronda |
	ronda := self defaultRonda.
	ronda juega: #Mano carta: (self cartasMano at: 2). "3 de espada"
	ronda juega: #Pie carta: (self cartasPie at: 3). "5 de oro"
	ronda juega: #Mano carta: (self cartasMano at: 3). "6 de espada"
	ronda juega: #Pie carta: (self cartasPie at: 1). "1 de oro"
	ronda juega: #Mano carta: (self cartasMano at: 1). "4 de espada"
	ronda juega: #Pie carta: (self cartasPie at: 2). "2 de oro"
	
	self assert: 2 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	self assert: #Pie equals: ronda ganador.! !

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:12:30'!
ERROR!
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 21:12:41' prior: 50870989!
test18_PieGanaEnTercerRondaAlSumar2Puntos
	
	| ronda |
	ronda := self defaultRonda.
	ronda juega: #Mano carta: (self cartasMano at: 2). "3 de espada"
	ronda juega: #Pie carta: (self cartasPie at: 3). "5 de oro"
	ronda juega: #Mano carta: (self cartasMano at: 3). "6 de espada"
	ronda juega: #Pie carta: (self cartasPie at: 1). "1 de oro"
	ronda juega: #Pie carta: (self cartasPie at: 2). "2 de oro"
	ronda juega: #Mano carta: (self cartasMano at: 1). "4 de espada"
	
	self assert: 2 equals: ronda puntosPie.
	self assert: 1 equals: ronda puntosMano.
	self assert: #Pie equals: ronda ganador.! !

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:12:41'!
PASSED!

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:12:41'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:12:41'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 21:12:41'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 21:12:41'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaSinCartasJugadas stamp: 'LB 7/5/2021 21:12:41'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 21:12:41'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:12:41'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 21:12:41'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 21:12:41'!
PASSED!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:12:41'!
PASSED!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:12:41'!
PASSED!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:12:41'!
PASSED!

!testRun: #RondaTest #test13_SeLimpiaLaMesaAlFinalizarElEnfrentamiento stamp: 'LB 7/5/2021 21:12:41'!
PASSED!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:12:41'!
PASSED!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:12:41'!
PASSED!

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 21:12:41'!
PASSED!

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:12:41'!
PASSED!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:12:41'!
PASSED!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 21:12:41'!
PASSED!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 21:12:41'!
PASSED!

!testRun: #RondaTest #test21_NoExisteGanadorAntesDeFinalizarRonda stamp: 'LB 7/5/2021 21:12:41'!
PASSED!

!testRun: #RondaTest #test22_NoSePuedeSeguirJugandoUnaVezFinalizadaLaRonda stamp: 'LB 7/5/2021 21:12:41'!
PASSED!
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 21:13:18' prior: 50866879!
test19_NoSePuedeVolverAJugarLaMismaCarta

	| ronda |
	ronda := self defaultRonda.
	ronda juega: #Mano carta: (self cartasMano at: 2). "3 de espada"
	ronda juega: #Pie carta: (self cartasPie at: 3). "5 de oro"

	
	self should: [ronda juega: #Mano carta: (self cartasMano at: 2)]
		raise: Error - MessageNotUnderstood 
		withMessageText: Ronda cartaInvalidaErrorDescription.
! !

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 21:13:19'!
PASSED!

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:13:19'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:13:19'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 21:13:19'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 21:13:19'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaSinCartasJugadas stamp: 'LB 7/5/2021 21:13:19'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 21:13:19'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:13:19'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 21:13:19'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 21:13:19'!
PASSED!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:13:19'!
PASSED!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:13:19'!
PASSED!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:13:19'!
PASSED!

!testRun: #RondaTest #test13_SeLimpiaLaMesaAlFinalizarElEnfrentamiento stamp: 'LB 7/5/2021 21:13:19'!
PASSED!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:13:19'!
PASSED!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:13:19'!
PASSED!

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 21:13:19'!
PASSED!

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:13:19'!
PASSED!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:13:19'!
PASSED!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 21:13:19'!
PASSED!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 21:13:19'!
PASSED!

!testRun: #RondaTest #test21_NoExisteGanadorAntesDeFinalizarRonda stamp: 'LB 7/5/2021 21:13:19'!
PASSED!

!testRun: #RondaTest #test22_NoSePuedeSeguirJugandoUnaVezFinalizadaLaRonda stamp: 'LB 7/5/2021 21:13:19'!
PASSED!
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 21:14:00' prior: 50870345!
test22_NoSePuedeSeguirJugandoUnaVezFinalizadaLaRonda

	| ronda |
	ronda := self defaultRonda.
	ronda juega: #Mano carta: (self cartasMano at: 2). "3 de espada"
	ronda juega: #Pie carta: (self cartasPie at: 1). "1 de oro"
	ronda juega: #Mano carta: (self cartasMano at: 3). "6 de espada"
	ronda juega: #Pie carta: (self cartasPie at: 3). "5 de oro"
	
	"gana mano"
	
	self should: [ronda juega: #Mano carta: (CartaDeTruco oroCon: 3)]
		raise: Error - MessageNotUnderstood 
		withMessageText: Ronda haFinalizadoLaRondaErrorDescription.! !

!testRun: #RondaTest #test22_NoSePuedeSeguirJugandoUnaVezFinalizadaLaRonda stamp: 'LB 7/5/2021 21:14:02'!
PASSED!

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:14:02'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:14:02'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 21:14:02'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 21:14:02'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaSinCartasJugadas stamp: 'LB 7/5/2021 21:14:02'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 21:14:02'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:14:02'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 21:14:02'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 21:14:02'!
PASSED!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:14:02'!
PASSED!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:14:02'!
PASSED!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:14:02'!
PASSED!

!testRun: #RondaTest #test13_SeLimpiaLaMesaAlFinalizarElEnfrentamiento stamp: 'LB 7/5/2021 21:14:02'!
PASSED!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:14:02'!
PASSED!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:14:02'!
PASSED!

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 21:14:02'!
PASSED!

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:14:02'!
PASSED!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:14:02'!
PASSED!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 21:14:02'!
PASSED!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 21:14:02'!
PASSED!

!testRun: #RondaTest #test21_NoExisteGanadorAntesDeFinalizarRonda stamp: 'LB 7/5/2021 21:14:02'!
PASSED!

!testRun: #RondaTest #test22_NoSePuedeSeguirJugandoUnaVezFinalizadaLaRonda stamp: 'LB 7/5/2021 21:14:02'!
PASSED!

----SNAPSHOT----(5 July 2021 21:15:14) CuisUniversity-4532.image priorSource: 17237701!
!Ronda methodsFor: 'play' stamp: 'LB 7/5/2021 21:16:34'!
assertEsTurnoDe: unJugador
	(turno = unJugador) ifFalse: [^self error: self class noEsTuTurnoErrorDescription ].! !
!Ronda methodsFor: 'play' stamp: 'LB 7/5/2021 21:17:20' prior: 50870389!
juega: unJugador carta: unaCarta
	self checkFinRonda.
	self assertEsTurnoDe: unJugador.
	
	((cartas at: unJugador) includes: unaCarta) ifFalse: [^self error: self class cartaInvalidaErrorDescription].
	cartasJugadas at: unJugador put: unaCarta.
	(cartas at: unJugador) remove: unaCarta.
	
	self checkFinDeEnfrentamiento.! !
!Ronda methodsFor: 'checks' stamp: 'LB 7/5/2021 21:17:58'!
checkGanadorEnfrentamiento
	((self mesa at: #Pie) empardaCon: (self mesa at: #Mano)) ifTrue: [turno := #Mano. puntosPie := puntosPie +1. puntosMano := puntosMano +1].
	((self mesa at: #Mano) mataA: (self mesa at: #Pie)) ifTrue: [turno := #Mano. puntosMano := puntosMano +1].
	((self mesa at: #Pie) mataA: (self mesa at: #Mano)) ifTrue: [turno := #Pie. puntosPie := puntosPie +1].
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 21:17:58' prior: 50869897!
checkFinDeEnfrentamiento
	(self mesa size = 2) ifTrue: [
		self checkGanadorEnfrentamiento.
		cartasJugadas removeAll.
	] ifFalse: [
		turno := self jugadorOpuesto: self turno.
	]! !

!methodRemoval: Ronda #checkGanador stamp: 'LB 7/5/2021 21:17:58'!
checkGanador
	((self mesa at: #Pie) empardaCon: (self mesa at: #Mano)) ifTrue: [turno := #Mano. puntosPie := puntosPie +1. puntosMano := puntosMano +1].
	((self mesa at: #Mano) mataA: (self mesa at: #Pie)) ifTrue: [turno := #Mano. puntosMano := puntosMano +1].
	((self mesa at: #Pie) mataA: (self mesa at: #Mano)) ifTrue: [turno := #Pie. puntosPie := puntosPie +1].
	!
!Ronda methodsFor: 'checks' stamp: 'LB 7/5/2021 21:18:14'!
sumarPuntos
	((self mesa at: #Pie) empardaCon: (self mesa at: #Mano)) ifTrue: [turno := #Mano. puntosPie := puntosPie +1. puntosMano := puntosMano +1].
	((self mesa at: #Mano) mataA: (self mesa at: #Pie)) ifTrue: [turno := #Mano. puntosMano := puntosMano +1].
	((self mesa at: #Pie) mataA: (self mesa at: #Mano)) ifTrue: [turno := #Pie. puntosPie := puntosPie +1].
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 21:18:14' prior: 50871331!
checkFinDeEnfrentamiento
	(self mesa size = 2) ifTrue: [
		self sumarPuntos.
		cartasJugadas removeAll.
	] ifFalse: [
		turno := self jugadorOpuesto: self turno.
	]! !

!methodRemoval: Ronda #checkGanadorEnfrentamiento stamp: 'LB 7/5/2021 21:18:14'!
checkGanadorEnfrentamiento
	((self mesa at: #Pie) empardaCon: (self mesa at: #Mano)) ifTrue: [turno := #Mano. puntosPie := puntosPie +1. puntosMano := puntosMano +1].
	((self mesa at: #Mano) mataA: (self mesa at: #Pie)) ifTrue: [turno := #Mano. puntosMano := puntosMano +1].
	((self mesa at: #Pie) mataA: (self mesa at: #Mano)) ifTrue: [turno := #Pie. puntosPie := puntosPie +1].
	!
!Ronda methodsFor: 'checks' stamp: 'LB 7/5/2021 21:19:25'!
sumarPuntosMano
	puntosMano := puntosMano +1.
	! !
!Ronda methodsFor: 'checks' stamp: 'LB 7/5/2021 21:19:32'!
sumarPuntosPie
	puntosPie := puntosPie +1.
	! !
!Ronda methodsFor: 'checks' stamp: 'LB 7/5/2021 21:20:22' prior: 50871353!
sumarPuntos
	((self mesa at: #Pie) empardaCon: (self mesa at: #Mano)) ifTrue: [
		turno := #Mano. 
		self sumarPuntosPie. 
		self sumarPuntosMano.
		].
	
	((self mesa at: #Mano) mataA: (self mesa at: #Pie)) ifTrue: [turno := #Mano. self sumarPuntosMano].
	((self mesa at: #Pie) mataA: (self mesa at: #Mano)) ifTrue: [turno := #Pie. puntosPie := puntosPie +1].
	! !
!Ronda methodsFor: 'checks' stamp: 'LB 7/5/2021 21:20:34' prior: 50871398!
sumarPuntos
	((self mesa at: #Pie) empardaCon: (self mesa at: #Mano)) ifTrue: [
		turno := #Mano. 
		self sumarPuntosPie. 
		self sumarPuntosMano.
		].
	
	((self mesa at: #Mano) mataA: (self mesa at: #Pie)) ifTrue: [turno := #Mano. self sumarPuntosMano].
	((self mesa at: #Pie) mataA: (self mesa at: #Mano)) ifTrue: [turno := #Pie. self sumarPuntosPie].
	! !
!Ronda methodsFor: 'checks' stamp: 'LB 7/5/2021 21:21:18' prior: 50871412!
sumarPuntos
	((self mesa at: #Pie) empardaCon: (self mesa at: #Mano)) ifTrue: [
		self turnoSiguiente: #Mano. 
		self sumarPuntosPie. 
		self sumarPuntosMano.
		].
	
	((self mesa at: #Mano) mataA: (self mesa at: #Pie)) ifTrue: [self turnoSiguiente: #Mano.  self sumarPuntosMano].
	((self mesa at: #Pie) mataA: (self mesa at: #Mano)) ifTrue: [self turnoSiguiente: #Pie. self sumarPuntosPie].
	! !
!Ronda methodsFor: 'checks' stamp: 'LB 7/5/2021 21:21:33'!
turnoSiguiente: unJugador
	turno := unJugador! !

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:21:37'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:21:37'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 21:21:37'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 21:21:37'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaSinCartasJugadas stamp: 'LB 7/5/2021 21:21:37'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 21:21:37'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:21:37'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 21:21:37'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 21:21:37'!
PASSED!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:21:37'!
PASSED!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:21:37'!
PASSED!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:21:37'!
PASSED!

!testRun: #RondaTest #test13_SeLimpiaLaMesaAlFinalizarElEnfrentamiento stamp: 'LB 7/5/2021 21:21:37'!
PASSED!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:21:37'!
PASSED!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:21:37'!
PASSED!

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 21:21:37'!
PASSED!

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:21:37'!
PASSED!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:21:37'!
PASSED!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 21:21:37'!
PASSED!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 21:21:37'!
PASSED!

!testRun: #RondaTest #test21_NoExisteGanadorAntesDeFinalizarRonda stamp: 'LB 7/5/2021 21:21:37'!
PASSED!

!testRun: #RondaTest #test22_NoSePuedeSeguirJugandoUnaVezFinalizadaLaRonda stamp: 'LB 7/5/2021 21:21:37'!
PASSED!
!Ronda methodsFor: 'checks' stamp: 'LB 7/5/2021 21:22:02' prior: 50871426!
sumarPuntos
	((self mesa at: #Pie) empardaCon: (self mesa at: #Mano)) ifTrue: [
		self turnoSiguiente: #Mano. 
		self sumarPuntosPie. 
		self sumarPuntosMano.
		].
	
	((self mesa at: #Mano) mataA: (self mesa at: #Pie)) ifTrue: [
		self turnoSiguiente: #Mano.  
		self sumarPuntosMano
		].
	
	((self mesa at: #Pie) mataA: (self mesa at: #Mano)) ifTrue: [
		self turnoSiguiente: #Pie. 
		self sumarPuntosPie
		].
	! !
!Ronda methodsFor: 'checks' stamp: 'LB 7/5/2021 21:23:37' prior: 50871368!
checkFinDeEnfrentamiento
	self turnoSiguiente: (self jugadorOpuesto: self turno).
	
	(self mesa size = 2) ifTrue: [
		self sumarPuntos.
		cartasJugadas removeAll.
	]! !

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:23:38'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:23:38'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 21:23:38'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 21:23:38'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaSinCartasJugadas stamp: 'LB 7/5/2021 21:23:38'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 21:23:38'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:23:38'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 21:23:38'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 21:23:38'!
PASSED!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:23:38'!
PASSED!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:23:38'!
PASSED!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:23:38'!
PASSED!

!testRun: #RondaTest #test13_SeLimpiaLaMesaAlFinalizarElEnfrentamiento stamp: 'LB 7/5/2021 21:23:38'!
PASSED!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:23:38'!
PASSED!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:23:38'!
PASSED!

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 21:23:38'!
PASSED!

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:23:38'!
PASSED!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:23:38'!
PASSED!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 21:23:38'!
PASSED!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 21:23:38'!
PASSED!

!testRun: #RondaTest #test21_NoExisteGanadorAntesDeFinalizarRonda stamp: 'LB 7/5/2021 21:23:38'!
PASSED!

!testRun: #RondaTest #test22_NoSePuedeSeguirJugandoUnaVezFinalizadaLaRonda stamp: 'LB 7/5/2021 21:23:38'!
PASSED!
!Ronda methodsFor: 'checks' stamp: 'LB 7/5/2021 21:23:59' prior: 50871533!
checkFinDeEnfrentamiento
	
	(self mesa size = 2) ifTrue: [
		self sumarPuntos.
		cartasJugadas removeAll.
	]! !
!Ronda methodsFor: 'play' stamp: 'LB 7/5/2021 21:24:05' prior: 50871304!
juega: unJugador carta: unaCarta
	self checkFinRonda.
	self assertEsTurnoDe: unJugador.
	
	((cartas at: unJugador) includes: unaCarta) ifFalse: [^self error: self class cartaInvalidaErrorDescription].
	cartasJugadas at: unJugador put: unaCarta.
	(cartas at: unJugador) remove: unaCarta.
	
	self turnoSiguiente: (self jugadorOpuesto: self turno).
	self checkFinDeEnfrentamiento.! !

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:24:06'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:24:06'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 21:24:06'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 21:24:06'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaSinCartasJugadas stamp: 'LB 7/5/2021 21:24:06'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 21:24:06'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:24:06'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 21:24:06'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 21:24:06'!
PASSED!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:24:06'!
PASSED!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:24:06'!
PASSED!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:24:06'!
PASSED!

!testRun: #RondaTest #test13_SeLimpiaLaMesaAlFinalizarElEnfrentamiento stamp: 'LB 7/5/2021 21:24:06'!
PASSED!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:24:06'!
PASSED!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:24:06'!
PASSED!

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 21:24:06'!
PASSED!

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:24:06'!
PASSED!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:24:06'!
PASSED!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 21:24:06'!
PASSED!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 21:24:06'!
PASSED!

!testRun: #RondaTest #test21_NoExisteGanadorAntesDeFinalizarRonda stamp: 'LB 7/5/2021 21:24:06'!
PASSED!

!testRun: #RondaTest #test22_NoSePuedeSeguirJugandoUnaVezFinalizadaLaRonda stamp: 'LB 7/5/2021 21:24:06'!
PASSED!
!Ronda methodsFor: 'play' stamp: 'LB 7/5/2021 21:24:13' prior: 50871619!
juega: unJugador carta: unaCarta
	self checkFinRonda.
	self assertEsTurnoDe: unJugador.
	
	((cartas at: unJugador) includes: unaCarta) ifFalse: [^self error: self class cartaInvalidaErrorDescription].
	cartasJugadas at: unJugador put: unaCarta.
	(cartas at: unJugador) remove: unaCarta.
	
	self turnoSiguiente: (self jugadorOpuesto: unJugador).
	self checkFinDeEnfrentamiento.! !

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:24:14'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:24:14'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 21:24:14'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 21:24:14'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaSinCartasJugadas stamp: 'LB 7/5/2021 21:24:14'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 21:24:14'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:24:14'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 21:24:14'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 21:24:14'!
PASSED!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:24:14'!
PASSED!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:24:14'!
PASSED!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:24:14'!
PASSED!

!testRun: #RondaTest #test13_SeLimpiaLaMesaAlFinalizarElEnfrentamiento stamp: 'LB 7/5/2021 21:24:14'!
PASSED!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:24:14'!
PASSED!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:24:14'!
PASSED!

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 21:24:14'!
PASSED!

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:24:14'!
PASSED!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:24:14'!
PASSED!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 21:24:14'!
PASSED!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 21:24:14'!
PASSED!

!testRun: #RondaTest #test21_NoExisteGanadorAntesDeFinalizarRonda stamp: 'LB 7/5/2021 21:24:14'!
PASSED!

!testRun: #RondaTest #test22_NoSePuedeSeguirJugandoUnaVezFinalizadaLaRonda stamp: 'LB 7/5/2021 21:24:14'!
PASSED!

!classDefinition: #Ronda category: 'ISW1-2021-1C-2doParcial' stamp: 'LB 7/5/2021 21:25:06'!
Object subclass: #Ronda
	instanceVariableNames: 'cartasJugadas turno puntosPie puntosMano cartas puntos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!Ronda methodsFor: 'inicialization' stamp: 'LB 7/5/2021 21:25:04' prior: 50870052!
initializeWithMano: mano pie: pie.

	cartas := Dictionary new.
	cartas at: #Mano put: mano.
	cartas at: #Pie put: pie.
	
	cartasJugadas := Dictionary new.
	turno := #Mano.
	
	puntos := Dictionary new.
	puntos at: #Mano put: 0.
	puntos at: #Pie put: 0.
	puntosPie := 0.
	puntosMano := 0.! !
!Ronda methodsFor: 'checks' stamp: 'LB 7/5/2021 21:25:54'!
sumarPuntos: unJugador
	puntos at: unJugador put: (puntos at: unJugador) + 1.
	! !
!Ronda methodsFor: 'testing' stamp: 'LB 7/5/2021 21:26:15'!
puntos: unJugador
	^puntos at: unJugador! !
!Ronda methodsFor: 'checks' stamp: 'LB 7/5/2021 21:26:44' prior: 50871517!
sumarPuntos
	((self mesa at: #Pie) empardaCon: (self mesa at: #Mano)) ifTrue: [
		self turnoSiguiente: #Mano. 
		self sumarPuntos: #Pie.
		self sumarPuntos: #Mano
		].
	
	((self mesa at: #Mano) mataA: (self mesa at: #Pie)) ifTrue: [
		self turnoSiguiente: #Mano.  
		self sumarPuntos: #Mano
		].
	
	((self mesa at: #Pie) mataA: (self mesa at: #Mano)) ifTrue: [
		self turnoSiguiente: #Pie. 
		self sumarPuntos: #Pie.
		].
	! !

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:26:46'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:26:46'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 21:26:46'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 21:26:46'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaSinCartasJugadas stamp: 'LB 7/5/2021 21:26:46'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 21:26:46'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:26:46'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 21:26:46'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 21:26:46'!
PASSED!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:26:46'!
PASSED!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:26:46'!
PASSED!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:26:46'!
PASSED!

!testRun: #RondaTest #test13_SeLimpiaLaMesaAlFinalizarElEnfrentamiento stamp: 'LB 7/5/2021 21:26:46'!
PASSED!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:26:46'!
PASSED!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:26:46'!
PASSED!

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 21:26:46'!
FAILURE!

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:26:46'!
FAILURE!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:26:46'!
FAILURE!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 21:26:46'!
PASSED!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 21:26:46'!
FAILURE!

!testRun: #RondaTest #test21_NoExisteGanadorAntesDeFinalizarRonda stamp: 'LB 7/5/2021 21:26:46'!
PASSED!

!testRun: #RondaTest #test22_NoSePuedeSeguirJugandoUnaVezFinalizadaLaRonda stamp: 'LB 7/5/2021 21:26:46'!
FAILURE!
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 21:27:26' prior: 50870605!
test16_GanadorDeEnfrentamientoGana1Punto

	| ronda |
	ronda := self defaultRonda.
	ronda juega: #Mano carta: (self cartasMano at: 2). "3 de espada"
	ronda juega: #Pie carta: (self cartasPie at: 1). "1 de oro"
	
	self assert: 0 equals: (ronda puntos: #Pie).
	self assert: 1 equals: (ronda puntos: #Mano).
	
	ronda juega: #Mano carta: (self cartasMano at: 1). "4 de espada"
	ronda juega: #Pie carta: (self cartasPie at: 2). "2 de espada"
	
	self assert: 1 equals: (ronda puntos: #Pie).
	self assert: 1 equals: (ronda puntos: #Mano).! !

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 21:27:28'!
PASSED!

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:27:28'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:27:28'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 21:27:28'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 21:27:28'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaSinCartasJugadas stamp: 'LB 7/5/2021 21:27:28'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 21:27:28'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:27:28'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 21:27:28'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 21:27:28'!
PASSED!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:27:28'!
PASSED!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:27:28'!
PASSED!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:27:28'!
PASSED!

!testRun: #RondaTest #test13_SeLimpiaLaMesaAlFinalizarElEnfrentamiento stamp: 'LB 7/5/2021 21:27:28'!
PASSED!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:27:28'!
PASSED!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:27:28'!
PASSED!

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 21:27:28'!
PASSED!

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:27:28'!
FAILURE!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:27:28'!
FAILURE!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 21:27:28'!
PASSED!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 21:27:28'!
FAILURE!

!testRun: #RondaTest #test21_NoExisteGanadorAntesDeFinalizarRonda stamp: 'LB 7/5/2021 21:27:28'!
PASSED!

!testRun: #RondaTest #test22_NoSePuedeSeguirJugandoUnaVezFinalizadaLaRonda stamp: 'LB 7/5/2021 21:27:28'!
FAILURE!
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 21:27:39' prior: 50870872!
test17_ManoGanaEnSegundaRondaAlSumar2Puntos
	
	| ronda |
	ronda := self defaultRonda.
	ronda juega: #Mano carta: (self cartasMano at: 2). "3 de espada"
	ronda juega: #Pie carta: (self cartasPie at: 1). "1 de oro"
	ronda juega: #Mano carta: (self cartasMano at: 3). "6 de espada"
	ronda juega: #Pie carta: (self cartasPie at: 3). "5 de oro"
	
	self assert: 0 equals: (ronda puntos: #Pie).
	self assert: 2 equals: (ronda puntos: #Mano).! !
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 21:27:56' prior: 50871014!
test18_PieGanaEnTercerRondaAlSumar2Puntos
	
	| ronda |
	ronda := self defaultRonda.
	ronda juega: #Mano carta: (self cartasMano at: 2). "3 de espada"
	ronda juega: #Pie carta: (self cartasPie at: 3). "5 de oro"
	ronda juega: #Mano carta: (self cartasMano at: 3). "6 de espada"
	ronda juega: #Pie carta: (self cartasPie at: 1). "1 de oro"
	ronda juega: #Pie carta: (self cartasPie at: 2). "2 de oro"
	ronda juega: #Mano carta: (self cartasMano at: 1). "4 de espada"
	
	self assert: 2 equals: (ronda puntos: #Pie).
	self assert: 1 equals: (ronda puntos: #Mano).
	self assert: #Pie equals: ronda ganador.! !
!RondaTest methodsFor: 'tests - enfrentamientos' stamp: 'LB 7/5/2021 21:28:01' prior: 50866924!
test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano

	| mano pie ronda |
	mano := OrderedCollection with: (CartaDeTruco espadaCon: 4) with: 	(CartaDeTruco oroCon: 5) with: (CartaDeTruco oroCon: 6).
	pie := OrderedCollection with: (CartaDeTruco oroCon: 4) with: 	(CartaDeTruco oroCon: 2) with: (CartaDeTruco oroCon: 3).
	ronda := Ronda withMano: mano pie: pie.
	
	ronda juega: #Mano carta: (CartaDeTruco espadaCon: 4).
	ronda juega: #Pie carta: (CartaDeTruco oroCon: 4).

	self assert: 1 equals: (ronda puntos: #Pie).
	self assert: 1 equals: (ronda puntos: #Mano).
	self assert: #Mano equals: ronda turno.! !

!testRun: #RondaTest #test22_NoSePuedeSeguirJugandoUnaVezFinalizadaLaRonda stamp: 'LB 7/5/2021 21:28:10'!
FAILURE!

!testRun: #RondaTest #test22_NoSePuedeSeguirJugandoUnaVezFinalizadaLaRonda stamp: 'LB 7/5/2021 21:28:10'!
FAILURE!

!methodRemoval: Ronda #puntosMano stamp: 'LB 7/5/2021 21:28:27'!
puntosMano
	^puntosMano!

!methodRemoval: Ronda #puntosPie stamp: 'LB 7/5/2021 21:28:28'!
puntosPie
	^puntosPie!

!methodRemoval: Ronda #sumarPuntosMano stamp: 'LB 7/5/2021 21:28:35'!
sumarPuntosMano
	puntosMano := puntosMano +1.
	!

!methodRemoval: Ronda #sumarPuntosPie stamp: 'LB 7/5/2021 21:28:36'!
sumarPuntosPie
	puntosPie := puntosPie +1.
	!
!Ronda methodsFor: 'testing' stamp: 'LB 7/5/2021 21:29:04' prior: 50868912!
ganador
	(puntos at: #Mano = 2) ifTrue: [^#Mano].
	(puntos at: #Pie = 2) ifTrue: [^#Pie].
	^ self class aunNoHayGanador.! !

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:29:05'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:29:05'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 21:29:05'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 21:29:05'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaSinCartasJugadas stamp: 'LB 7/5/2021 21:29:05'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 21:29:05'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:29:05'!
FAILURE!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 21:29:05'!
ERROR!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 21:29:05'!
ERROR!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:29:05'!
ERROR!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:29:05'!
FAILURE!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:29:05'!
ERROR!

!testRun: #RondaTest #test13_SeLimpiaLaMesaAlFinalizarElEnfrentamiento stamp: 'LB 7/5/2021 21:29:05'!
ERROR!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:29:05'!
ERROR!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:29:05'!
ERROR!

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 21:29:05'!
ERROR!

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:29:05'!
ERROR!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:29:05'!
ERROR!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 21:29:05'!
ERROR!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 21:29:05'!
ERROR!

!testRun: #RondaTest #test21_NoExisteGanadorAntesDeFinalizarRonda stamp: 'LB 7/5/2021 21:29:05'!
ERROR!

!testRun: #RondaTest #test22_NoSePuedeSeguirJugandoUnaVezFinalizadaLaRonda stamp: 'LB 7/5/2021 21:29:05'!
ERROR!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 21:29:20'!
ERROR!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 21:29:20'!
ERROR!
!Ronda methodsFor: 'inicialization' stamp: 'LB 7/5/2021 21:29:33' prior: 50871800!
initializeWithMano: mano pie: pie.

	cartas := Dictionary new.
	cartas at: #Mano put: mano.
	cartas at: #Pie put: pie.
	
	cartasJugadas := Dictionary new.
	turno := #Mano.
	
	puntos := Dictionary new.
	puntos at: #Mano put: 0.
	puntos at: #Pie put: 0.! !

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:29:34'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:29:34'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 21:29:34'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 21:29:34'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaSinCartasJugadas stamp: 'LB 7/5/2021 21:29:34'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 21:29:34'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:29:34'!
FAILURE!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 21:29:34'!
ERROR!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 21:29:34'!
ERROR!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:29:34'!
ERROR!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:29:34'!
FAILURE!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:29:34'!
ERROR!

!testRun: #RondaTest #test13_SeLimpiaLaMesaAlFinalizarElEnfrentamiento stamp: 'LB 7/5/2021 21:29:34'!
ERROR!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:29:34'!
ERROR!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:29:34'!
ERROR!

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 21:29:34'!
ERROR!

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:29:34'!
ERROR!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:29:34'!
ERROR!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 21:29:34'!
ERROR!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 21:29:34'!
ERROR!

!testRun: #RondaTest #test21_NoExisteGanadorAntesDeFinalizarRonda stamp: 'LB 7/5/2021 21:29:34'!
ERROR!

!testRun: #RondaTest #test22_NoSePuedeSeguirJugandoUnaVezFinalizadaLaRonda stamp: 'LB 7/5/2021 21:29:34'!
ERROR!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:29:39'!
FAILURE!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:29:39'!
FAILURE!
!Ronda methodsFor: 'testing' stamp: 'LB 7/5/2021 21:30:38' prior: 50872085!
ganador
	((puntos at: #Mano) = 2) ifTrue: [^#Mano].
	((puntos at: #Pie) = 2) ifTrue: [^#Pie].
	^ self class aunNoHayGanador.! !

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:30:38'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:30:38'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 21:30:38'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 21:30:38'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaSinCartasJugadas stamp: 'LB 7/5/2021 21:30:38'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 21:30:38'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:30:38'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 21:30:38'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 21:30:38'!
PASSED!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:30:38'!
PASSED!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:30:38'!
PASSED!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:30:38'!
PASSED!

!testRun: #RondaTest #test13_SeLimpiaLaMesaAlFinalizarElEnfrentamiento stamp: 'LB 7/5/2021 21:30:38'!
PASSED!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:30:38'!
PASSED!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:30:38'!
PASSED!

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 21:30:38'!
PASSED!

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:30:38'!
PASSED!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:30:38'!
PASSED!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 21:30:38'!
PASSED!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 21:30:38'!
PASSED!

!testRun: #RondaTest #test21_NoExisteGanadorAntesDeFinalizarRonda stamp: 'LB 7/5/2021 21:30:38'!
PASSED!

!testRun: #RondaTest #test22_NoSePuedeSeguirJugandoUnaVezFinalizadaLaRonda stamp: 'LB 7/5/2021 21:30:38'!
PASSED!

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:30:42'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:30:42'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 21:30:42'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 21:30:42'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaSinCartasJugadas stamp: 'LB 7/5/2021 21:30:42'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 21:30:42'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:30:42'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 21:30:42'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 21:30:42'!
PASSED!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:30:42'!
PASSED!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:30:42'!
PASSED!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:30:42'!
PASSED!

!testRun: #RondaTest #test13_SeLimpiaLaMesaAlFinalizarElEnfrentamiento stamp: 'LB 7/5/2021 21:30:42'!
PASSED!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:30:42'!
PASSED!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:30:42'!
PASSED!

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 21:30:42'!
PASSED!

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:30:42'!
PASSED!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:30:42'!
PASSED!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 21:30:42'!
PASSED!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 21:30:42'!
PASSED!

!testRun: #RondaTest #test21_NoExisteGanadorAntesDeFinalizarRonda stamp: 'LB 7/5/2021 21:30:42'!
PASSED!

!testRun: #RondaTest #test22_NoSePuedeSeguirJugandoUnaVezFinalizadaLaRonda stamp: 'LB 7/5/2021 21:30:42'!
PASSED!
!Ronda methodsFor: 'testing' stamp: 'LB 7/5/2021 21:31:12'!
gano: unJugador
	^(puntos at: unJugador) = 2! !
!Ronda methodsFor: 'testing' stamp: 'LB 7/5/2021 21:31:41' prior: 50872257!
ganador
	(self gano: #Mano) ifTrue: [^#Mano].
	(self gano: #Pie) ifTrue: [^#Pie].
	^ self class aunNoHayGanador.! !

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:31:43'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:31:43'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 21:31:43'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 21:31:43'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaSinCartasJugadas stamp: 'LB 7/5/2021 21:31:43'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 21:31:43'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:31:43'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 21:31:43'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 21:31:43'!
PASSED!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:31:43'!
PASSED!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:31:43'!
PASSED!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:31:43'!
PASSED!

!testRun: #RondaTest #test13_SeLimpiaLaMesaAlFinalizarElEnfrentamiento stamp: 'LB 7/5/2021 21:31:43'!
PASSED!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:31:43'!
PASSED!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:31:43'!
PASSED!

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 21:31:43'!
PASSED!

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:31:43'!
PASSED!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:31:43'!
PASSED!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 21:31:43'!
PASSED!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 21:31:43'!
PASSED!

!testRun: #RondaTest #test21_NoExisteGanadorAntesDeFinalizarRonda stamp: 'LB 7/5/2021 21:31:43'!
PASSED!

!testRun: #RondaTest #test22_NoSePuedeSeguirJugandoUnaVezFinalizadaLaRonda stamp: 'LB 7/5/2021 21:31:43'!
PASSED!
!Ronda methodsFor: 'checks' stamp: 'LB 7/5/2021 21:34:40'!
assertFinRonda
	((self ganador = #Pie) or: [self ganador = #Mano]) ifTrue: [^self error: self class haFinalizadoLaRondaErrorDescription ].! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 21:34:40' prior: 50871705!
juega: unJugador carta: unaCarta
	self assertFinRonda.
	self assertEsTurnoDe: unJugador.
	
	((cartas at: unJugador) includes: unaCarta) ifFalse: [^self error: self class cartaInvalidaErrorDescription].
	cartasJugadas at: unJugador put: unaCarta.
	(cartas at: unJugador) remove: unaCarta.
	
	self turnoSiguiente: (self jugadorOpuesto: unJugador).
	self checkFinDeEnfrentamiento.! !

!methodRemoval: Ronda #checkFinRonda stamp: 'LB 7/5/2021 21:34:40'!
checkFinRonda
	((self ganador = #Pie) or: [self ganador = #Mano]) ifTrue: [^self error: self class haFinalizadoLaRondaErrorDescription ].!
!Ronda methodsFor: 'checks' stamp: 'LB 7/5/2021 21:35:16'!
assertAunNoFinalizoLaRonda
	((self ganador = #Pie) or: [self ganador = #Mano]) ifTrue: [^self error: self class haFinalizadoLaRondaErrorDescription ].! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 21:35:16' prior: 50872495!
juega: unJugador carta: unaCarta
	self assertAunNoFinalizoLaRonda.
	self assertEsTurnoDe: unJugador.
	
	((cartas at: unJugador) includes: unaCarta) ifFalse: [^self error: self class cartaInvalidaErrorDescription].
	cartasJugadas at: unJugador put: unaCarta.
	(cartas at: unJugador) remove: unaCarta.
	
	self turnoSiguiente: (self jugadorOpuesto: unJugador).
	self checkFinDeEnfrentamiento.! !

!methodRemoval: Ronda #assertFinRonda stamp: 'LB 7/5/2021 21:35:16'!
assertFinRonda
	((self ganador = #Pie) or: [self ganador = #Mano]) ifTrue: [^self error: self class haFinalizadoLaRondaErrorDescription ].!
!Ronda methodsFor: 'puntos' stamp: 'LB 7/5/2021 21:36:36'!
enfrentamientoEmparda
		self turnoSiguiente: #Mano. 
		self sumarPuntos: #Pie.
		self sumarPuntos: #Mano! !
!Ronda methodsFor: 'puntos' stamp: 'LB 7/5/2021 21:37:03'!
ganaEnfrentamiento: unJugador
	self turnoSiguiente: unJugador.  
	self sumarPuntos: unJugador! !
!Ronda methodsFor: 'puntos' stamp: 'LB 7/5/2021 21:37:08' prior: 50872545!
enfrentamientoEmparda
	self turnoSiguiente: #Mano. 
	self sumarPuntos: #Pie.
	self sumarPuntos: #Mano! !
!Ronda methodsFor: 'puntos' stamp: 'LB 7/5/2021 21:38:24' prior: 50871820!
sumarPuntos
	((self mesa at: #Pie) empardaCon: (self mesa at: #Mano)) ifTrue: [^self enfrentamientoEmparda].
	
	((self mesa at: #Mano) mataA: (self mesa at: #Pie)) ifTrue: [^self ganaEnfrentamiento: #Mano].
	
	((self mesa at: #Pie) mataA: (self mesa at: #Mano)) ifTrue: [^self ganaEnfrentamiento: #Pie].
	! !

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:38:26'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:38:26'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 21:38:26'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 21:38:26'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaSinCartasJugadas stamp: 'LB 7/5/2021 21:38:26'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 21:38:26'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:38:26'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 21:38:26'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 21:38:26'!
PASSED!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:38:26'!
PASSED!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:38:26'!
PASSED!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:38:26'!
PASSED!

!testRun: #RondaTest #test13_SeLimpiaLaMesaAlFinalizarElEnfrentamiento stamp: 'LB 7/5/2021 21:38:26'!
PASSED!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:38:26'!
PASSED!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:38:26'!
PASSED!

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 21:38:26'!
PASSED!

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:38:26'!
PASSED!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:38:26'!
PASSED!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 21:38:26'!
PASSED!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 21:38:26'!
PASSED!

!testRun: #RondaTest #test21_NoExisteGanadorAntesDeFinalizarRonda stamp: 'LB 7/5/2021 21:38:26'!
PASSED!

!testRun: #RondaTest #test22_NoSePuedeSeguirJugandoUnaVezFinalizadaLaRonda stamp: 'LB 7/5/2021 21:38:26'!
PASSED!
!Ronda methodsFor: 'puntos' stamp: 'LB 7/5/2021 21:38:36' prior: 50872563!
sumarPuntos
	
	((self mesa at: #Mano) mataA: (self mesa at: #Pie)) ifTrue: [^self ganaEnfrentamiento: #Mano].
	
	((self mesa at: #Pie) mataA: (self mesa at: #Mano)) ifTrue: [^self ganaEnfrentamiento: #Pie].
	
	^self enfrentamientoEmparda
	! !

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:38:36'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:38:36'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 21:38:36'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 21:38:36'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaSinCartasJugadas stamp: 'LB 7/5/2021 21:38:36'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 21:38:36'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:38:36'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 21:38:36'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 21:38:36'!
PASSED!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:38:36'!
PASSED!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:38:36'!
PASSED!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:38:36'!
PASSED!

!testRun: #RondaTest #test13_SeLimpiaLaMesaAlFinalizarElEnfrentamiento stamp: 'LB 7/5/2021 21:38:36'!
PASSED!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:38:36'!
PASSED!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:38:36'!
PASSED!

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 21:38:36'!
PASSED!

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:38:36'!
PASSED!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:38:36'!
PASSED!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 21:38:36'!
PASSED!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 21:38:36'!
PASSED!

!testRun: #RondaTest #test21_NoExisteGanadorAntesDeFinalizarRonda stamp: 'LB 7/5/2021 21:38:36'!
PASSED!

!testRun: #RondaTest #test22_NoSePuedeSeguirJugandoUnaVezFinalizadaLaRonda stamp: 'LB 7/5/2021 21:38:36'!
PASSED!
!Ronda methodsFor: 'puntos' stamp: 'LB 7/5/2021 21:38:43' prior: 50872647!
sumarPuntos
	
	((self mesa at: #Mano) mataA: (self mesa at: #Pie)) ifTrue: [^self ganaEnfrentamiento: #Mano].
	((self mesa at: #Pie) mataA: (self mesa at: #Mano)) ifTrue: [^self ganaEnfrentamiento: #Pie].
	^self enfrentamientoEmparda
	! !

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:38:44'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:38:44'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 21:38:44'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 21:38:44'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaSinCartasJugadas stamp: 'LB 7/5/2021 21:38:44'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 21:38:44'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:38:44'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 21:38:44'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 21:38:44'!
PASSED!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:38:44'!
PASSED!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:38:44'!
PASSED!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:38:44'!
PASSED!

!testRun: #RondaTest #test13_SeLimpiaLaMesaAlFinalizarElEnfrentamiento stamp: 'LB 7/5/2021 21:38:44'!
PASSED!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:38:44'!
PASSED!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:38:44'!
PASSED!

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 21:38:44'!
PASSED!

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:38:44'!
PASSED!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:38:44'!
PASSED!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 21:38:44'!
PASSED!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 21:38:44'!
PASSED!

!testRun: #RondaTest #test21_NoExisteGanadorAntesDeFinalizarRonda stamp: 'LB 7/5/2021 21:38:44'!
PASSED!

!testRun: #RondaTest #test22_NoSePuedeSeguirJugandoUnaVezFinalizadaLaRonda stamp: 'LB 7/5/2021 21:38:44'!
PASSED!

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:39:53'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:39:53'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 21:39:53'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 21:39:53'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaSinCartasJugadas stamp: 'LB 7/5/2021 21:39:53'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 21:39:53'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:39:53'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 21:39:53'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 21:39:53'!
PASSED!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:39:53'!
PASSED!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:39:53'!
PASSED!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:39:53'!
PASSED!

!testRun: #RondaTest #test13_SeLimpiaLaMesaAlFinalizarElEnfrentamiento stamp: 'LB 7/5/2021 21:39:53'!
PASSED!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:39:53'!
PASSED!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:39:53'!
PASSED!

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 21:39:53'!
PASSED!

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:39:53'!
PASSED!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:39:53'!
PASSED!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 21:39:53'!
PASSED!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 21:39:53'!
PASSED!

!testRun: #RondaTest #test21_NoExisteGanadorAntesDeFinalizarRonda stamp: 'LB 7/5/2021 21:39:53'!
PASSED!

!testRun: #RondaTest #test22_NoSePuedeSeguirJugandoUnaVezFinalizadaLaRonda stamp: 'LB 7/5/2021 21:39:53'!
PASSED!

----SNAPSHOT----(5 July 2021 21:39:58) CuisUniversity-4532.image priorSource: 17268631!
!Ronda methodsFor: 'enfrentamiento' stamp: 'LB 7/5/2021 21:40:38'!
sumarPuntosAlGanador
	
	((self mesa at: #Mano) mataA: (self mesa at: #Pie)) ifTrue: [^self ganaEnfrentamiento: #Mano].
	((self mesa at: #Pie) mataA: (self mesa at: #Mano)) ifTrue: [^self ganaEnfrentamiento: #Pie].
	^self enfrentamientoEmparda
	! !
!Ronda methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 21:40:38' prior: 50871613!
checkFinDeEnfrentamiento
	
	(self mesa size = 2) ifTrue: [
		self sumarPuntosAlGanador.
		cartasJugadas removeAll.
	]! !

!methodRemoval: Ronda #sumarPuntos stamp: 'LB 7/5/2021 21:40:38'!
sumarPuntos
	
	((self mesa at: #Mano) mataA: (self mesa at: #Pie)) ifTrue: [^self ganaEnfrentamiento: #Mano].
	((self mesa at: #Pie) mataA: (self mesa at: #Mano)) ifTrue: [^self ganaEnfrentamiento: #Pie].
	^self enfrentamientoEmparda
	!

----SNAPSHOT----(5 July 2021 21:42:55) CuisUniversity-4532.image priorSource: 17319400!

----SNAPSHOT----(5 July 2021 21:43:02) CuisUniversity-4532.image priorSource: 17320360!

----SNAPSHOT----(5 July 2021 21:43:16) CuisUniversity-4532.image priorSource: 17320449!

c := OrderedCollection with: 1 with: 2 with: 3.
c addAll: (OrderedCollection with: 1 with: 2 with: 3).
c!
!Ronda class methodsFor: 'instance creation' stamp: 'LB 7/5/2021 21:45:48'!
assertNoHayCartasRepetidasMano: mano Pie: pie
	|cartas|
	cartas := OrderedCollection new.
	cartas addAll: mano.
	cartas addAll: pie.
	
	(cartas anySatisfy: [:carta | (cartas occurrencesOf: carta) > 1]) ifTrue: [^self error: self cartasRepetidasErrorDescription].! !
!Ronda class methodsFor: 'instance creation' stamp: 'LB 7/5/2021 21:46:03'!
assertNoHayCartasRepetidasEn: mano y: pie
	|cartas|
	cartas := OrderedCollection new.
	cartas addAll: mano.
	cartas addAll: pie.
	
	(cartas anySatisfy: [:carta | (cartas occurrencesOf: carta) > 1]) ifTrue: [^self error: self cartasRepetidasErrorDescription].! !

!methodRemoval: Ronda class #assertNoHayCartasRepetidasMano:Pie: stamp: 'LB 7/5/2021 21:46:03'!
assertNoHayCartasRepetidasMano: mano Pie: pie
	|cartas|
	cartas := OrderedCollection new.
	cartas addAll: mano.
	cartas addAll: pie.
	
	(cartas anySatisfy: [:carta | (cartas occurrencesOf: carta) > 1]) ifTrue: [^self error: self cartasRepetidasErrorDescription].!
!Ronda class methodsFor: 'instance creation' stamp: 'LB 7/5/2021 21:46:16' prior: 50860708!
withMano: mano pie: pie
	
	self assertNoHayCartasRepetidasEn: mano y: pie.
	"(mano anySatisfy: [:carta | (mano occurrencesOf: carta) > 1]) ifTrue: [^self error: self cartasRepetidasErrorDescription].
	(pie anySatisfy: [:carta | (pie occurrencesOf: carta) > 1]) ifTrue: [^self error: self cartasRepetidasErrorDescription].
	(pie anySatisfy: [:carta | mano includes: carta]) ifTrue: [^self error: self cartasRepetidasErrorDescription]."
	(mano anySatisfy: [:carta | carta class ~= CartaDeTruco]) ifTrue: [^self error: self cartasInvalidasErrorDescription ].
	(pie anySatisfy: [:carta | carta class ~= CartaDeTruco]) ifTrue: [^self error: self cartasInvalidasErrorDescription].
	^ self new initializeWithMano: mano pie: pie.! !

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:46:16'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:46:16'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 21:46:16'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 21:46:16'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaSinCartasJugadas stamp: 'LB 7/5/2021 21:46:16'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 21:46:16'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:46:16'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 21:46:16'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 21:46:16'!
PASSED!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:46:16'!
PASSED!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:46:16'!
PASSED!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:46:16'!
PASSED!

!testRun: #RondaTest #test13_SeLimpiaLaMesaAlFinalizarElEnfrentamiento stamp: 'LB 7/5/2021 21:46:16'!
PASSED!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:46:16'!
PASSED!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:46:16'!
PASSED!

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 21:46:16'!
PASSED!

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:46:16'!
PASSED!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:46:16'!
PASSED!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 21:46:16'!
PASSED!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 21:46:16'!
PASSED!

!testRun: #RondaTest #test21_NoExisteGanadorAntesDeFinalizarRonda stamp: 'LB 7/5/2021 21:46:16'!
PASSED!

!testRun: #RondaTest #test22_NoSePuedeSeguirJugandoUnaVezFinalizadaLaRonda stamp: 'LB 7/5/2021 21:46:16'!
PASSED!
!Ronda class methodsFor: 'instance creation' stamp: 'LB 7/5/2021 21:46:21' prior: 50872958!
withMano: mano pie: pie
	
	self assertNoHayCartasRepetidasEn: mano y: pie.

	(mano anySatisfy: [:carta | carta class ~= CartaDeTruco]) ifTrue: [^self error: self cartasInvalidasErrorDescription ].
	(pie anySatisfy: [:carta | carta class ~= CartaDeTruco]) ifTrue: [^self error: self cartasInvalidasErrorDescription].
	^ self new initializeWithMano: mano pie: pie.! !

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:46:22'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:46:22'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 21:46:22'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 21:46:22'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaSinCartasJugadas stamp: 'LB 7/5/2021 21:46:22'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 21:46:22'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:46:22'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 21:46:22'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 21:46:22'!
PASSED!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:46:22'!
PASSED!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:46:22'!
PASSED!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:46:22'!
PASSED!

!testRun: #RondaTest #test13_SeLimpiaLaMesaAlFinalizarElEnfrentamiento stamp: 'LB 7/5/2021 21:46:22'!
PASSED!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:46:22'!
PASSED!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:46:22'!
PASSED!

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 21:46:22'!
PASSED!

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:46:22'!
PASSED!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:46:22'!
PASSED!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 21:46:22'!
PASSED!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 21:46:22'!
PASSED!

!testRun: #RondaTest #test21_NoExisteGanadorAntesDeFinalizarRonda stamp: 'LB 7/5/2021 21:46:22'!
PASSED!

!testRun: #RondaTest #test22_NoSePuedeSeguirJugandoUnaVezFinalizadaLaRonda stamp: 'LB 7/5/2021 21:46:22'!
PASSED!
!Ronda class methodsFor: 'instance creation' stamp: 'LB 7/5/2021 21:46:35' prior: 50873055!
withMano: mano pie: pie
	
	self assertNoHayCartasRepetidasEn: mano y: pie.
	self assertNoHayCartasInvalidasEn: mano y: pie.
	(mano anySatisfy: [:carta | carta class ~= CartaDeTruco]) ifTrue: [^self error: self cartasInvalidasErrorDescription ].
	(pie anySatisfy: [:carta | carta class ~= CartaDeTruco]) ifTrue: [^self error: self cartasInvalidasErrorDescription].
	^ self new initializeWithMano: mano pie: pie.! !
!Ronda class methodsFor: 'instance creation' stamp: 'LB 7/5/2021 21:46:42' prior: 50873141!
withMano: mano pie: pie
	
	self assertNoHayCartasRepetidasEn: mano y: pie.
	self assertNoHayCartasInvalidasEn: mano y: pie.
	"(mano anySatisfy: [:carta | carta class ~= CartaDeTruco]) ifTrue: [^self error: self cartasInvalidasErrorDescription ].
	(pie anySatisfy: [:carta | carta class ~= CartaDeTruco]) ifTrue: [^self error: self cartasInvalidasErrorDescription]."
	^ self new initializeWithMano: mano pie: pie.! !
!Ronda class methodsFor: 'instance creation' stamp: 'LB 7/5/2021 21:47:34'!
assertNoHayCartasInvalidasEn: cartas
	(cartas anySatisfy: [:carta | carta class ~= CartaDeTruco]) ifTrue: [^self error: self cartasInvalidasErrorDescription ].! !
!Ronda class methodsFor: 'instance creation' stamp: 'LB 7/5/2021 21:47:47'!
assertNoHayCartasRepetidasEn: cartas
	
	(cartas anySatisfy: [:carta | (cartas occurrencesOf: carta) > 1]) ifTrue: [^self error: self cartasRepetidasErrorDescription].! !
!Ronda class methodsFor: 'instance creation' stamp: 'LB 7/5/2021 21:48:12' prior: 50872935!
assertNoHayCartasRepetidasEn: mano y: pie
	|cartas|
	cartas := OrderedCollection new.
	cartas addAll: mano.
	cartas addAll: pie.
	
	self assertNoHayCartasRepetidasEn: cartas.
	self assertNoHayCartasInvalidasEn: cartas.
	
	! !
!Ronda class methodsFor: 'instance creation' stamp: 'LB 7/5/2021 21:48:24'!
assertCartasValidasEn: mano y: pie
	|cartas|
	cartas := OrderedCollection new.
	cartas addAll: mano.
	cartas addAll: pie.
	
	self assertNoHayCartasRepetidasEn: cartas.
	self assertNoHayCartasInvalidasEn: cartas.
	
	! !
!Ronda class methodsFor: 'as yet unclassified' stamp: 'LB 7/5/2021 21:48:24' prior: 50873157!
withMano: mano pie: pie
	
	self assertCartasValidasEn: mano y: pie.
	self assertNoHayCartasInvalidasEn: mano y: pie.
	"(mano anySatisfy: [:carta | carta class ~= CartaDeTruco]) ifTrue: [^self error: self cartasInvalidasErrorDescription ].
	(pie anySatisfy: [:carta | carta class ~= CartaDeTruco]) ifTrue: [^self error: self cartasInvalidasErrorDescription]."
	^ self new initializeWithMano: mano pie: pie.! !

!methodRemoval: Ronda class #assertNoHayCartasRepetidasEn:y: stamp: 'LB 7/5/2021 21:48:24'!
assertNoHayCartasRepetidasEn: mano y: pie
	|cartas|
	cartas := OrderedCollection new.
	cartas addAll: mano.
	cartas addAll: pie.
	
	self assertNoHayCartasRepetidasEn: cartas.
	self assertNoHayCartasInvalidasEn: cartas.
	
	!
!Ronda class methodsFor: 'instance creation' stamp: 'LB 7/5/2021 21:48:35' prior: 50873210!
withMano: mano pie: pie
	
	self assertCartasValidasEn: mano y: pie.
	"(mano anySatisfy: [:carta | carta class ~= CartaDeTruco]) ifTrue: [^self error: self cartasInvalidasErrorDescription ].
	(pie anySatisfy: [:carta | carta class ~= CartaDeTruco]) ifTrue: [^self error: self cartasInvalidasErrorDescription]."
	^ self new initializeWithMano: mano pie: pie.! !

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:48:35'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:48:35'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 21:48:35'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 21:48:35'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaSinCartasJugadas stamp: 'LB 7/5/2021 21:48:35'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 21:48:35'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:48:35'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 21:48:35'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 21:48:35'!
PASSED!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:48:35'!
PASSED!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:48:35'!
PASSED!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:48:35'!
PASSED!

!testRun: #RondaTest #test13_SeLimpiaLaMesaAlFinalizarElEnfrentamiento stamp: 'LB 7/5/2021 21:48:35'!
PASSED!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:48:35'!
PASSED!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:48:35'!
PASSED!

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 21:48:35'!
PASSED!

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:48:35'!
PASSED!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:48:35'!
PASSED!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 21:48:35'!
PASSED!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 21:48:35'!
PASSED!

!testRun: #RondaTest #test21_NoExisteGanadorAntesDeFinalizarRonda stamp: 'LB 7/5/2021 21:48:35'!
PASSED!

!testRun: #RondaTest #test22_NoSePuedeSeguirJugandoUnaVezFinalizadaLaRonda stamp: 'LB 7/5/2021 21:48:35'!
PASSED!
!Ronda class methodsFor: 'instance creation' stamp: 'LB 7/5/2021 21:48:38' prior: 50873236!
withMano: mano pie: pie
	
	self assertCartasValidasEn: mano y: pie.

	^ self new initializeWithMano: mano pie: pie.! !

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:48:39'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:48:39'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 21:48:39'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 21:48:39'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaSinCartasJugadas stamp: 'LB 7/5/2021 21:48:39'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 21:48:39'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:48:39'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 21:48:39'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 21:48:39'!
PASSED!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:48:39'!
PASSED!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:48:39'!
PASSED!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:48:39'!
PASSED!

!testRun: #RondaTest #test13_SeLimpiaLaMesaAlFinalizarElEnfrentamiento stamp: 'LB 7/5/2021 21:48:39'!
PASSED!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:48:39'!
PASSED!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:48:39'!
PASSED!

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 21:48:39'!
PASSED!

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:48:39'!
PASSED!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:48:39'!
PASSED!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 21:48:39'!
PASSED!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 21:48:39'!
PASSED!

!testRun: #RondaTest #test21_NoExisteGanadorAntesDeFinalizarRonda stamp: 'LB 7/5/2021 21:48:39'!
PASSED!

!testRun: #RondaTest #test22_NoSePuedeSeguirJugandoUnaVezFinalizadaLaRonda stamp: 'LB 7/5/2021 21:48:39'!
PASSED!

!testRun: #RondaTest #test01_ManoIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:49:04'!
PASSED!

!testRun: #RondaTest #test02_PieIniciaCon3CartasDeTrucoDistintas stamp: 'LB 7/5/2021 21:49:04'!
PASSED!

!testRun: #RondaTest #test03_ManoyPieDebenTenerCartasDistintas stamp: 'LB 7/5/2021 21:49:04'!
PASSED!

!testRun: #RondaTest #test04_ManoyPieDebenTenerCartasDeTruco stamp: 'LB 7/5/2021 21:49:04'!
PASSED!

!testRun: #RondaTest #test05_RondaIniciaSinCartasJugadas stamp: 'LB 7/5/2021 21:49:04'!
PASSED!

!testRun: #RondaTest #test06_ManoTiraPrimero stamp: 'LB 7/5/2021 21:49:04'!
PASSED!

!testRun: #RondaTest #test07_ManoSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:49:04'!
PASSED!

!testRun: #RondaTest #test08_RondaConoceLaCartaJugada stamp: 'LB 7/5/2021 21:49:04'!
PASSED!

!testRun: #RondaTest #test09_LuegoDeJugarManoEsTurnoDePie stamp: 'LB 7/5/2021 21:49:04'!
PASSED!

!testRun: #RondaTest #test10_ManoSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:49:04'!
PASSED!

!testRun: #RondaTest #test11_PieSoloPuedeTirarEnSuTurno stamp: 'LB 7/5/2021 21:49:04'!
PASSED!

!testRun: #RondaTest #test12_PieSoloPuedeJugarUnaCartaSuya stamp: 'LB 7/5/2021 21:49:04'!
PASSED!

!testRun: #RondaTest #test13_SeLimpiaLaMesaAlFinalizarElEnfrentamiento stamp: 'LB 7/5/2021 21:49:04'!
PASSED!

!testRun: #RondaTest #test14_GanadorManoComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:49:04'!
PASSED!

!testRun: #RondaTest #test15_GanadorPieComienzaElSiguienteEnfrentamiento stamp: 'LB 7/5/2021 21:49:04'!
PASSED!

!testRun: #RondaTest #test16_GanadorDeEnfrentamientoGana1Punto stamp: 'LB 7/5/2021 21:49:04'!
PASSED!

!testRun: #RondaTest #test17_ManoGanaEnSegundaRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:49:04'!
PASSED!

!testRun: #RondaTest #test18_PieGanaEnTercerRondaAlSumar2Puntos stamp: 'LB 7/5/2021 21:49:04'!
PASSED!

!testRun: #RondaTest #test19_NoSePuedeVolverAJugarLaMismaCarta stamp: 'LB 7/5/2021 21:49:04'!
PASSED!

!testRun: #RondaTest #test20_CartasDelMismoValorDefinenPardaYElTurnoSiguienteLoTieneMano stamp: 'LB 7/5/2021 21:49:04'!
PASSED!

!testRun: #RondaTest #test21_NoExisteGanadorAntesDeFinalizarRonda stamp: 'LB 7/5/2021 21:49:04'!
PASSED!

!testRun: #RondaTest #test22_NoSePuedeSeguirJugandoUnaVezFinalizadaLaRonda stamp: 'LB 7/5/2021 21:49:04'!
PASSED!

----QUIT----(5 July 2021 21:49:17) CuisUniversity-4532.image priorSource: 17320538!