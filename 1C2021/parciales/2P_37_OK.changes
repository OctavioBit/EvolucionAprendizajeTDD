

----STARTUP---- (5 July 2021 17:03:40) as /home/victoria/Documents/smalltalk/CuisUniversity-4532.image!


----End fileIn of /home/victoria/Desktop/parcial/ISW1-2021-1C-2doParcial.st----!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInválida stamp: 'VIM 7/5/2021 17:11:29'!
FAILURE!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInválida stamp: 'VIM 7/5/2021 17:27:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'VIM 7/5/2021 17:27:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'VIM 7/5/2021 17:27:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'VIM 7/5/2021 17:27:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'VIM 7/5/2021 17:27:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'VIM 7/5/2021 17:27:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'VIM 7/5/2021 17:27:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'VIM 7/5/2021 17:27:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'VIM 7/5/2021 17:27:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'VIM 7/5/2021 17:27:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'VIM 7/5/2021 17:27:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'VIM 7/5/2021 17:27:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'VIM 7/5/2021 17:27:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'VIM 7/5/2021 17:27:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'VIM 7/5/2021 17:27:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'VIM 7/5/2021 17:27:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'VIM 7/5/2021 17:27:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'VIM 7/5/2021 17:27:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'VIM 7/5/2021 17:27:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInválida stamp: 'VIM 7/5/2021 17:27:30'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInválida stamp: 'VIM 7/5/2021 17:27:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'VIM 7/5/2021 17:27:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'VIM 7/5/2021 17:27:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'VIM 7/5/2021 17:27:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'VIM 7/5/2021 17:27:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'VIM 7/5/2021 17:27:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'VIM 7/5/2021 17:27:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'VIM 7/5/2021 17:27:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'VIM 7/5/2021 17:27:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'VIM 7/5/2021 17:27:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'VIM 7/5/2021 17:27:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'VIM 7/5/2021 17:27:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'VIM 7/5/2021 17:27:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'VIM 7/5/2021 17:27:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'VIM 7/5/2021 17:27:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'VIM 7/5/2021 17:27:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'VIM 7/5/2021 17:27:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'VIM 7/5/2021 17:27:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'VIM 7/5/2021 17:27:35'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInválida stamp: 'VIM 7/5/2021 17:27:35'!
PASSED!

TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTrucoTest category: 'ISW1-2021-1C-2doParcial' stamp: 'VIM 7/5/2021 17:39:02'!
TestCase subclass: #RondaDeTrucoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'VIM 7/5/2021 17:44:47'!
Object subclass: #RondaDeTruco
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTrucoTest methodsFor: 'no messages' stamp: 'VIM 7/5/2021 17:44:58'!
test1

	| aMano aPie |
	RondaDeTruco para: aMano versus: aPie ! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 17:48:02' prior: 51004315!
test1

	| aMano aPie aCartasParaMano aCartasParaPie |
	RondaDeTruco para: aMano jugandoCon: aCartasParaMano versus: aPie jugandoCon: aCartasParaPie! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 17:49:15' prior: 51004321!
test1

	| aMano aPie ronda |
	ronda := RondaDeTruco para: aMano versus: aPie.
	
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 17:54:14' prior: 51004329!
test1

	| aMano aPie ronda |
	ronda := RondaDeTruco para: aMano versus: aPie.
	
	self deny: ronda tieneCartasRepetidas.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 17:58:16' prior: 51004335!
test1

	| aMano aPie ronda aCartasParaMano aCartasParaPie |
	ronda := RondaDeTruco para: aMano jugandoCon: aCartasParaMano versus: aPie jugandoCon: aCartasParaPie
	
	self deny: ronda tieneCartasRepetidas.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 17:58:48' prior: 51004342!
test1

	| aMano aPie ronda aCartasParaMano aCartasParaPie |
	ronda := RondaDeTruco para: aMano jugandoCon: aCartasParaMano versus: aPie jugandoCon: aCartasParaPie.
	
	self deny: ronda tieneCartasRepetidas.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 17:58:53' prior: 51004352!
test1

	| aMano aPie ronda aCartasParaMano aCartasParaPie |
	ronda := RondaDeTruco para: aMano jugandoCon: aCartasParaMano versus: aPie jugandoCon: aCartasParaPie.
	
	self deny: ronda tieneCartasRepetidas.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 18:00:52' prior: 51004362!
test1

	| aMano aPie ronda aCartasParaMano aCartasParaPie |
	
	
	
	ronda := RondaDeTruco para: aMano jugandoCon: aCartasParaMano versus: aPie jugandoCon: aCartasParaPie.
	
	self assert: ronda ganador equals: aMano.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 18:01:18' prior: 51004372!
test1

	| ronda aCartasParaMano aCartasParaPie |
	
	
	
	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	self assert: ronda ganador equals: aCartasParaMano.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 18:04:52' prior: 51004382!
test1

	| ronda aCartasParaMano aCartasParaPie |
	
	aCartasParaMano := OrderedCollection new.
	
	"falta agregar las cartas pero primero tengo que ver quién le gana a quién"
		
	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	self assert: ronda ganador equals: aCartasParaMano.
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 17:58:53' prior: 51004391!
test1

	| aMano aPie ronda aCartasParaMano aCartasParaPie |
	ronda := RondaDeTruco para: aMano jugandoCon: aCartasParaMano versus: aPie jugandoCon: aCartasParaPie.
	
	self deny: ronda tieneCartasRepetidas.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 18:11:54' prior: 51004404!
test1

	| ronda aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	self assert: ronda tieneTresCartasParaCadaJugador.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 18:13:25' prior: 51004414!
test1

	| ronda aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	self
		should: [ ronda ganador ]
		raise: Error
		withMessageText: RondaDeTruco noTieneTresCartasParaCadaJugador.! !

!testRun: #RondaDeTrucoTest #test1 stamp: 'VIM 7/5/2021 18:13:31'!
ERROR!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'VIM 7/5/2021 18:13:44'!
para: anOrderedCollection versus: anOrderedCollection2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializePara: anOrderedCollection versus: anOrderedCollection2 ! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'VIM 7/5/2021 18:14:20' prior: 51004442!
para: aCartasParaMano versus: aCartasParaPie

	^self new initializePara: aCartasParaMano versus: aCartasParaPie ! !

!testRun: #RondaDeTrucoTest #test1 stamp: 'VIM 7/5/2021 18:14:22'!
ERROR!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'VIM 7/5/2021 18:14:40'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasParaMano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'VIM 7/5/2021 18:14:40'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasParaMano cartasParaPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'initialization' stamp: 'VIM 7/5/2021 18:14:40'!
initializePara: aCartasParaMano versus: aCartasParaPie 
	self shouldBeImplemented.
	cartasParaMano := aCartasParaMano.
	cartasParaPie := aCartasParaPie.! !
!RondaDeTruco methodsFor: 'initialization' stamp: 'VIM 7/5/2021 18:14:49' prior: 51004478!
initializePara: aCartasParaMano versus: aCartasParaPie 
	cartasParaMano := aCartasParaMano.
	cartasParaPie := aCartasParaPie.! !

!testRun: #RondaDeTrucoTest #test1 stamp: 'VIM 7/5/2021 18:14:52'!
ERROR!
!RondaDeTruco class methodsFor: 'error handling' stamp: 'VIM 7/5/2021 18:15:17'!
noTieneTresCartasParaCadaJugador
	self shouldBeImplemented.! !
!RondaDeTruco class methodsFor: 'error handling' stamp: 'VIM 7/5/2021 18:15:21' prior: 51004495!
noTieneTresCartasParaCadaJugador
	! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 18:16:40' prior: 51004426!
test1

	| ronda aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	self
		should: [ ronda ganador ]
		raise: Error
		withMessageText: RondaDeTruco noTieneTresCartasParaCadaJugadorDescripcionDeError.! !

!methodRemoval: RondaDeTruco class #noTieneTresCartasParaCadaJugador stamp: 'VIM 7/5/2021 18:16:48'!
noTieneTresCartasParaCadaJugador
	!

!testRun: #RondaDeTrucoTest #test1 stamp: 'VIM 7/5/2021 18:16:54'!
ERROR!
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 18:17:16'!
noTieneTresCartasParaCadaJugadorDescripcionDeError
	self shouldBeImplemented.! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 18:17:38' prior: 51004526!
noTieneTresCartasParaCadaJugadorDescripcionDeError
	
	^'Cada jugador debe tener exactamente tres cartas!!'! !

!testRun: #RondaDeTrucoTest #test1 stamp: 'VIM 7/5/2021 18:17:41'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 18:18:30' prior: 51004505!
test1

	| aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	self
		should: [RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.]
		raise: Error
		withMessageText: RondaDeTruco noTieneTresCartasParaCadaJugadorDescripcionDeError.! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'VIM 7/5/2021 18:19:52' prior: 51004453!
para: aCartasParaMano versus: aCartasParaPie

	aCartasParaMano tieneTresCartas ifFalse: [self signalNoTieneTresCartas].
	aCartasParaPie tieneTresCartas ifFalse: [self signalNoTieneTresCartas].

	^self new initializePara: aCartasParaMano versus: aCartasParaPie ! !

!testRun: #RondaDeTrucoTest #test1 stamp: 'VIM 7/5/2021 18:20:21'!
FAILURE!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'VIM 7/5/2021 18:22:05' prior: 51004554!
para: aCartasParaMano versus: aCartasParaPie

	(aCartasParaMano size = 3) ifFalse: [self signalNoTieneTresCartas].
	(aCartasParaPie size = 3) ifFalse: [self signalNoTieneTresCartas].

	^self new initializePara: aCartasParaMano versus: aCartasParaPie ! !

!testRun: #RondaDeTrucoTest #test1 stamp: 'VIM 7/5/2021 18:22:12'!
FAILURE!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'VIM 7/5/2021 18:22:52'!
signalNoTieneTresCartas

	^self error: self noTieneTresCartasParaCadaJugadorDescripcionDeError .! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'VIM 7/5/2021 18:22:54' prior: 51004581!
signalNoTieneTresCartas

	^self error: self noTieneTresCartasParaCadaJugadorDescripcionDeError.! !

!testRun: #RondaDeTrucoTest #test1 stamp: 'VIM 7/5/2021 18:23:01'!
PASSED!

!testRun: #RondaDeTrucoTest #test1 stamp: 'VIM 7/5/2021 18:23:01'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 18:23:12'!
test1CadaJugadorTieneTresCartas

	| aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	self
		should: [RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.]
		raise: Error
		withMessageText: RondaDeTruco noTieneTresCartasParaCadaJugadorDescripcionDeError.! !

!methodRemoval: RondaDeTrucoTest #test1 stamp: 'VIM 7/5/2021 18:23:17'!
test1

	| aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	self
		should: [RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.]
		raise: Error
		withMessageText: RondaDeTruco noTieneTresCartasParaCadaJugadorDescripcionDeError.!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 18:23:40'!
test2NoHayCartasRepetidas

	| aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	self
		should: [RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.]
		raise: Error
		withMessageText: RondaDeTruco hayCartasRepetidasDescripcionDeError.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 18:24:49'!
test2NoHayCartasRepetidasEnUnMismoJugador

	| aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	self
		should: [RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.]
		raise: Error
		withMessageText: RondaDeTruco hayCartasRepetidasDescripcionDeError.! !

!methodRemoval: RondaDeTrucoTest #test2NoHayCartasRepetidas stamp: 'VIM 7/5/2021 18:24:49'!
test2NoHayCartasRepetidas

	| aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	self
		should: [RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.]
		raise: Error
		withMessageText: RondaDeTruco hayCartasRepetidasDescripcionDeError.!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 18:25:53'!
test2NoHayCartasRepetidas

	| aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: CartaDeTruco anchoDeEspada add: CartaDeTruco anchoDeEspada add: CartaDeTruco anchoDeBasto.
	aCartasParaPie add: CartaDeTruco espadaCon: 1 add: CartaDeTruco espadaCon: 2 add: CartaDeTruco espadaCon: 3.
	
	self
		should: [RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.]
		raise: Error
		withMessageText: RondaDeTruco hayCartasRepetidasDescripcionDeError.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 18:27:00' prior: 51004664!
test2NoHayCartasRepetidas

	| aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	((aCartasParaMano add: CartaDeTruco anchoDeEspada) add: CartaDeTruco anchoDeEspada) add: CartaDeTruco anchoDeBasto.
	((aCartasParaPie add: (CartaDeTruco espadaCon: 1)) add: (CartaDeTruco espadaCon: 2)) add: (CartaDeTruco espadaCon: 3).
	
	self
		should: [RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.]
		raise: Error
		withMessageText: RondaDeTruco hayCartasRepetidasDescripcionDeError.! !

!testRun: #RondaDeTrucoTest #test2NoHayCartasRepetidas stamp: 'VIM 7/5/2021 18:27:05'!
ERROR!

!testRun: #RondaDeTrucoTest #test2NoHayCartasRepetidas stamp: 'VIM 7/5/2021 18:27:22'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 18:28:03' prior: 51004685!
test2NoHayCartasRepetidas

	| aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	((aCartasParaMano add: (CartaDeTruco anchoDeEspada)) add: (CartaDeTruco anchoDeEspada)) add: (CartaDeTruco anchoDeBasto).
	((aCartasParaPie add: (CartaDeTruco espadaCon: 1)) add: (CartaDeTruco espadaCon: 2)) add: (CartaDeTruco espadaCon: 3).
	
	self
		should: [RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.]
		raise: Error
		withMessageText: RondaDeTruco hayCartasRepetidasDescripcionDeError.! !

!testRun: #RondaDeTrucoTest #test2NoHayCartasRepetidas stamp: 'VIM 7/5/2021 18:28:04'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 18:29:20' prior: 51004712!
test2NoHayCartasRepetidas

	| aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	(aCartasParaMano add: (CartaDeTruco anchoDeEspada)) 
	
	"add: (CartaDeTruco anchoDeEspada)) add: (CartaDeTruco anchoDeBasto).
	((aCartasParaPie add: (CartaDeTruco espadaCon: 1)) add: (CartaDeTruco espadaCon: 2)) add: (CartaDeTruco espadaCon: 3)."
	
	self
		should: [RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.]
		raise: Error
		withMessageText: RondaDeTruco hayCartasRepetidasDescripcionDeError.! !

!testRun: #RondaDeTrucoTest #test2NoHayCartasRepetidas stamp: 'VIM 7/5/2021 18:29:21'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 18:29:51' prior: 51004736!
test2NoHayCartasRepetidas

	| aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	(aCartasParaMano add: (CartaDeTruco anchoDeEspada)).
	
	"add: (CartaDeTruco anchoDeEspada)) add: (CartaDeTruco anchoDeBasto).
	((aCartasParaPie add: (CartaDeTruco espadaCon: 1)) add: (CartaDeTruco espadaCon: 2)) add: (CartaDeTruco espadaCon: 3)."
	
	self
		should: [RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.]
		raise: Error
		withMessageText: RondaDeTruco hayCartasRepetidasDescripcionDeError.! !

!testRun: #RondaDeTrucoTest #test2NoHayCartasRepetidas stamp: 'VIM 7/5/2021 18:29:52'!
ERROR!
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 18:30:06'!
hayCartasRepetidasDescripcionDeError
	self shouldBeImplemented.! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 18:30:32' prior: 51004784!
hayCartasRepetidasDescripcionDeError
	
	^'Hay cartas repetidas en la mano de uno de los jugadores.'! !

!testRun: #RondaDeTrucoTest #test2NoHayCartasRepetidas stamp: 'VIM 7/5/2021 18:30:43'!
FAILURE!
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 18:31:16'!
hayCartasRepetidasEnLaManoDeUnJugadorDescripcionDeError
	
	^'Hay cartas repetidas en la mano de uno de los jugadores.'! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 18:31:16' prior: 51004760!
test2NoHayCartasRepetidas

	| aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	(aCartasParaMano add: (CartaDeTruco anchoDeEspada)).
	
	"add: (CartaDeTruco anchoDeEspada)) add: (CartaDeTruco anchoDeBasto).
	((aCartasParaPie add: (CartaDeTruco espadaCon: 1)) add: (CartaDeTruco espadaCon: 2)) add: (CartaDeTruco espadaCon: 3)."
	
	self
		should: [RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.]
		raise: Error
		withMessageText: RondaDeTruco hayCartasRepetidasEnLaManoDeUnJugadorDescripcionDeError.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 18:31:16' prior: 51004638!
test2NoHayCartasRepetidasEnUnMismoJugador

	| aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	self
		should: [RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.]
		raise: Error
		withMessageText: RondaDeTruco hayCartasRepetidasEnLaManoDeUnJugadorDescripcionDeError.! !

!methodRemoval: RondaDeTruco class #hayCartasRepetidasDescripcionDeError stamp: 'VIM 7/5/2021 18:31:16'!
hayCartasRepetidasDescripcionDeError
	
	^'Hay cartas repetidas en la mano de uno de los jugadores.'!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 18:32:46' prior: 51004806!
test2NoHayCartasRepetidas

	| aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	((aCartasParaMano add: (CartaDeTruco anchoDeEspada)) add: (CartaDeTruco anchoDeEspada)) add: (CartaDeTruco anchoDeBasto).
	
	"add: (CartaDeTruco anchoDeEspada)) add: (CartaDeTruco anchoDeBasto).
	((aCartasParaPie add: (CartaDeTruco espadaCon: 1)) add: (CartaDeTruco espadaCon: 2)) add: (CartaDeTruco espadaCon: 3)."
	
	self
		should: [RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.]
		raise: Error
		withMessageText: RondaDeTruco hayCartasRepetidasEnLaManoDeUnJugadorDescripcionDeError.! !

!testRun: #RondaDeTrucoTest #test2NoHayCartasRepetidas stamp: 'VIM 7/5/2021 18:32:47'!
ERROR!

!testRun: #RondaDeTrucoTest #test2NoHayCartasRepetidas stamp: 'VIM 7/5/2021 18:33:25'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 18:35:11' prior: 51004849!
test2NoHayCartasRepetidas

	| aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco anchoDeEspada).
	aCartasParaMano add: (CartaDeTruco anchoDeEspada).
	aCartasParaMano add: (CartaDeTruco anchoDeBasto).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 1).
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).

	self
		should: [RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.]
		raise: Error
		withMessageText: RondaDeTruco hayCartasRepetidasEnLaManoDeUnJugadorDescripcionDeError.! !

!testRun: #RondaDeTrucoTest #test2NoHayCartasRepetidas stamp: 'VIM 7/5/2021 18:35:12'!
FAILURE!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'VIM 7/5/2021 18:37:29' prior: 51004568!
para: aCartasParaMano versus: aCartasParaPie

	(aCartasParaMano size = 3) ifFalse: [self signalNoTieneTresCartas].
	(aCartasParaPie size = 3) ifFalse: [self signalNoTieneTresCartas].
	
	(self noTieneCartasRepetidas: aCartasParaMano ) ifFalse: [self signalHayCartasRepetidasEnLaManoDeUnJugador].
	(self noTieneCartasRepetidas: aCartasParaPie) ifFalse: [self signalHayCartasRepetidasEnLaManoDeUnJugador].

	^self new initializePara: aCartasParaMano versus: aCartasParaPie ! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'VIM 7/5/2021 18:39:10'!
signalHayCartasRepetidasEnLaManoDeUnJugador

	^self error: self noTieneTresCartasParaCadaJugadorDescripcionDeError.! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'VIM 7/5/2021 18:39:32' prior: 51004924!
signalHayCartasRepetidasEnLaManoDeUnJugador

	^self error: self hayCartasRepetidasEnLaManoDeUnJugadorDescripcionDeError.! !
!RondaDeTruco class methodsFor: 'error handling' stamp: 'VIM 7/5/2021 18:40:26'!
signalHayCartasRepetidasEntreAmbosJugadores

	^self error: self hayCartasRepetidasEntreAmbosJugadoresDescripcionDeError.! !
!RondaDeTruco class methodsFor: 'error handling' stamp: 'VIM 7/5/2021 18:40:59'!
hayCartasRepetidasEntreAmbosJugadoresDescripcionDeError
	
	^'Hay cartas repetidas (en común) entre las manos de ambos jugadores.'! !
!RondaDeTruco class methodsFor: 'error handling' stamp: 'VIM 7/5/2021 18:41:38'!
noHayTresCartasParaCadaJugadorDescripcionDeError
	
	^'Cada jugador debe tener exactamente tres cartas!!'! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 18:41:38' prior: 51004599!
test1CadaJugadorTieneTresCartas

	| aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	self
		should: [RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.]
		raise: Error
		withMessageText: RondaDeTruco noHayTresCartasParaCadaJugadorDescripcionDeError.! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 18:41:38' prior: 51004588!
signalNoTieneTresCartas

	^self error: self noHayTresCartasParaCadaJugadorDescripcionDeError.! !

!methodRemoval: RondaDeTruco class #noTieneTresCartasParaCadaJugadorDescripcionDeError stamp: 'VIM 7/5/2021 18:41:38'!
noTieneTresCartasParaCadaJugadorDescripcionDeError
	
	^'Cada jugador debe tener exactamente tres cartas!!'!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'VIM 7/5/2021 18:42:33' prior: 51004906!
para: aCartasParaMano versus: aCartasParaPie

	(aCartasParaMano size = 3) ifFalse: [self signalNoTieneTresCartas].
	(aCartasParaPie size = 3) ifFalse: [self signalNoTieneTresCartas].
	
	(self assertNoTieneCartasRepetidas: aCartasParaMano ) ifFalse: [self signalHayCartasRepetidasEnLaManoDeUnJugador].
	(self assertNoTieneCartasRepetidas: aCartasParaPie) ifFalse: [self signalHayCartasRepetidasEnLaManoDeUnJugador].

	^self new initializePara: aCartasParaMano versus: aCartasParaPie ! !

!testRun: #RondaDeTrucoTest #test1CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 18:42:35'!
PASSED!

!testRun: #RondaDeTrucoTest #test2NoHayCartasRepetidas stamp: 'VIM 7/5/2021 18:42:35'!
FAILURE!

!testRun: #RondaDeTrucoTest #test2NoHayCartasRepetidasEnUnMismoJugador stamp: 'VIM 7/5/2021 18:42:35'!
FAILURE!

!testRun: #RondaDeTrucoTest #test2NoHayCartasRepetidas stamp: 'VIM 7/5/2021 18:42:37'!
FAILURE!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'VIM 7/5/2021 18:44:09'!
assertNoTieneCartasRepetidas: aManoDeCartasParaUnJugador
	
	aManoDeCartasParaUnJugador do: [:aCarta | ]! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'VIM 7/5/2021 18:47:38' prior: 51005018!
assertNoTieneCartasRepetidas: aManoDeCartasParaUnJugador
	
	aManoDeCartasParaUnJugador do: [:aCarta | aManoDeCartasParaUnJugador allSatisfy: [:aCartaParaComparar | aCartaParaComparar isNotEqualTo: aCarta]]! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'VIM 7/5/2021 18:48:14' prior: 51005025!
assertNoTieneCartasRepetidas: aManoDeCartasParaUnJugador
	
	(aManoDeCartasParaUnJugador do: [:aCarta | aManoDeCartasParaUnJugador allSatisfy: [:aCartaParaComparar | aCartaParaComparar isNotEqualTo: aCarta]]) ifFalse: [^self signalHayCartasRepetidasEnLaManoDeUnJugador ]! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'VIM 7/5/2021 18:48:30' prior: 51004987!
para: aCartasParaMano versus: aCartasParaPie

	(aCartasParaMano size = 3) ifFalse: [self signalNoTieneTresCartas].
	(aCartasParaPie size = 3) ifFalse: [self signalNoTieneTresCartas].
	
	self assertNoTieneCartasRepetidas: aCartasParaMano.
	self assertNoTieneCartasRepetidas: aCartasParaPie.

	^self new initializePara: aCartasParaMano versus: aCartasParaPie ! !

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'VIM 7/5/2021 18:48:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'VIM 7/5/2021 18:48:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'VIM 7/5/2021 18:48:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'VIM 7/5/2021 18:48:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'VIM 7/5/2021 18:48:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'VIM 7/5/2021 18:48:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'VIM 7/5/2021 18:48:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'VIM 7/5/2021 18:48:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'VIM 7/5/2021 18:48:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'VIM 7/5/2021 18:48:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'VIM 7/5/2021 18:48:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'VIM 7/5/2021 18:48:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'VIM 7/5/2021 18:48:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'VIM 7/5/2021 18:48:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'VIM 7/5/2021 18:48:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'VIM 7/5/2021 18:48:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'VIM 7/5/2021 18:48:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'VIM 7/5/2021 18:48:32'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInválida stamp: 'VIM 7/5/2021 18:48:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test1CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 18:48:32'!
PASSED!

!testRun: #RondaDeTrucoTest #test2NoHayCartasRepetidas stamp: 'VIM 7/5/2021 18:48:32'!
FAILURE!

!testRun: #RondaDeTrucoTest #test2NoHayCartasRepetidasEnUnMismoJugador stamp: 'VIM 7/5/2021 18:48:32'!
FAILURE!

!testRun: #RondaDeTrucoTest #test2NoHayCartasRepetidas stamp: 'VIM 7/5/2021 18:48:34'!
FAILURE!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'VIM 7/5/2021 18:49:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'VIM 7/5/2021 18:49:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'VIM 7/5/2021 18:49:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'VIM 7/5/2021 18:49:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'VIM 7/5/2021 18:49:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'VIM 7/5/2021 18:49:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'VIM 7/5/2021 18:49:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'VIM 7/5/2021 18:49:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'VIM 7/5/2021 18:49:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'VIM 7/5/2021 18:49:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'VIM 7/5/2021 18:49:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'VIM 7/5/2021 18:49:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'VIM 7/5/2021 18:49:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'VIM 7/5/2021 18:49:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'VIM 7/5/2021 18:49:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'VIM 7/5/2021 18:49:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'VIM 7/5/2021 18:49:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'VIM 7/5/2021 18:49:04'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInválida stamp: 'VIM 7/5/2021 18:49:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test1CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 18:49:04'!
PASSED!

!testRun: #RondaDeTrucoTest #test2NoHayCartasRepetidas stamp: 'VIM 7/5/2021 18:49:04'!
FAILURE!

!testRun: #RondaDeTrucoTest #test2NoHayCartasRepetidasEnUnMismoJugador stamp: 'VIM 7/5/2021 18:49:04'!
FAILURE!

!testRun: #RondaDeTrucoTest #test2NoHayCartasRepetidasEnUnMismoJugador stamp: 'VIM 7/5/2021 18:49:11'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 18:50:22'!
borrar

	| aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	self
		should: [RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.]
		raise: Error
		withMessageText: RondaDeTruco hayCartasRepetidasEnLaManoDeUnJugadorDescripcionDeError.! !

!methodRemoval: RondaDeTrucoTest #test2NoHayCartasRepetidasEnUnMismoJugador stamp: 'VIM 7/5/2021 18:50:22'!
test2NoHayCartasRepetidasEnUnMismoJugador

	| aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	self
		should: [RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.]
		raise: Error
		withMessageText: RondaDeTruco hayCartasRepetidasEnLaManoDeUnJugadorDescripcionDeError.!

!methodRemoval: RondaDeTrucoTest #borrar stamp: 'VIM 7/5/2021 18:50:29'!
borrar

	| aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	self
		should: [RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.]
		raise: Error
		withMessageText: RondaDeTruco hayCartasRepetidasEnLaManoDeUnJugadorDescripcionDeError.!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 18:50:34'!
test2NoHayCartasRepetidasEnUnMismoJugador

	| aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco anchoDeEspada).
	aCartasParaMano add: (CartaDeTruco anchoDeEspada).
	aCartasParaMano add: (CartaDeTruco anchoDeBasto).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 1).
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).

	self
		should: [RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.]
		raise: Error
		withMessageText: RondaDeTruco hayCartasRepetidasEnLaManoDeUnJugadorDescripcionDeError.! !

!methodRemoval: RondaDeTrucoTest #test2NoHayCartasRepetidas stamp: 'VIM 7/5/2021 18:50:34'!
test2NoHayCartasRepetidas

	| aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco anchoDeEspada).
	aCartasParaMano add: (CartaDeTruco anchoDeEspada).
	aCartasParaMano add: (CartaDeTruco anchoDeBasto).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 1).
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).

	self
		should: [RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.]
		raise: Error
		withMessageText: RondaDeTruco hayCartasRepetidasEnLaManoDeUnJugadorDescripcionDeError.!

!testRun: #RondaDeTrucoTest #test2NoHayCartasRepetidasEnUnMismoJugador stamp: 'VIM 7/5/2021 18:50:37'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 18:51:33' prior: 51005257!
test2NoHayCartasRepetidasEnUnMismoJugador

	| aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco anchoDeEspada).
	aCartasParaMano add: (CartaDeTruco anchoDeEspada).
	aCartasParaMano add: (CartaDeTruco anchoDeBasto).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	self
		should: [RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.]
		raise: Error
		withMessageText: RondaDeTruco hayCartasRepetidasEnLaManoDeUnJugadorDescripcionDeError.! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'VIM 7/5/2021 18:52:57' prior: 51005035!
assertNoTieneCartasRepetidas: aManoDeCartasParaUnJugador
	
	"(aManoDeCartasParaUnJugador do: [:aCarta | aManoDeCartasParaUnJugador allSatisfy: [:aCartaParaComparar | aCartaParaComparar isNotEqualTo: aCarta]]) ifFalse: [^self signalHayCartasRepetidasEnLaManoDeUnJugador ]"
	! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'VIM 7/5/2021 18:53:11' prior: 51005332!
assertNoTieneCartasRepetidas: aManoDeCartasParaUnJugador
	
	"(aManoDeCartasParaUnJugador do: [:aCarta | aManoDeCartasParaUnJugador allSatisfy: [:aCartaParaComparar | aCartaParaComparar isNotEqualTo: aCarta]]) ifFalse: [^self signalHayCartasRepetidasEnLaManoDeUnJugador ]"
	
	"Falta Implementar"
	! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'VIM 7/5/2021 18:53:55' prior: 51005047!
para: aCartasParaMano versus: aCartasParaPie

	(aCartasParaMano size = 3) ifFalse: [self signalNoTieneTresCartas].
	(aCartasParaPie size = 3) ifFalse: [self signalNoTieneTresCartas].
	
	self assertNoTieneCartasRepetidas: aCartasParaMano.
	self assertNoTieneCartasRepetidas: aCartasParaPie.
	self assertNoTienenCartasRepetidas: aCartasParaMano y: aCartasParaPie.

	^self new initializePara: aCartasParaMano versus: aCartasParaPie ! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'VIM 7/5/2021 18:54:10'!
assertNoTienenCartasRepetidas: aCartasParaMano y: aCartasParaPie.

	! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'VIM 7/5/2021 18:56:49' prior: 51005374!
assertNoTienenCartasRepetidas: aCartasParaMano y: aCartasParaPie.

	((aCartasParaMano difference: aCartasParaPie ) isEmpty) ifFalse: [self signalHayCartasRepetidasEntreAmbosJugadores.].! !

!testRun: #RondaDeTrucoTest #test1CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 18:56:51'!
PASSED!

!testRun: #RondaDeTrucoTest #test2NoHayCartasRepetidasEnUnMismoJugador stamp: 'VIM 7/5/2021 18:56:51'!
FAILURE!

!testRun: #RondaDeTrucoTest #test2NoHayCartasRepetidasEnUnMismoJugador stamp: 'VIM 7/5/2021 18:56:51'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 18:57:54'!
test3NoHayCartasRepetidasEntreLosJugadores

	| aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	self
		should: [RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.]
		raise: Error
		withMessageText: RondaDeTruco hayCartasRepetidasEnLaManoDeUnJugadorDescripcionDeError.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 18:58:02' prior: 51005399!
test3NoHayCartasRepetidasEntreLosJugadores

	| aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	self
		should: [RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.]
		raise: Error
		withMessageText: RondaDeTruco hayCartasRepetidasEntreAmbosJugadoresDescripcionDeError ! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 18:58:15'!
xtest2NoHayCartasRepetidasEnUnMismoJugador

	| aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco anchoDeEspada).
	aCartasParaMano add: (CartaDeTruco anchoDeEspada).
	aCartasParaMano add: (CartaDeTruco anchoDeBasto).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	self
		should: [RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.]
		raise: Error
		withMessageText: RondaDeTruco hayCartasRepetidasEnLaManoDeUnJugadorDescripcionDeError.! !

!methodRemoval: RondaDeTrucoTest #test2NoHayCartasRepetidasEnUnMismoJugador stamp: 'VIM 7/5/2021 18:58:15'!
test2NoHayCartasRepetidasEnUnMismoJugador

	| aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco anchoDeEspada).
	aCartasParaMano add: (CartaDeTruco anchoDeEspada).
	aCartasParaMano add: (CartaDeTruco anchoDeBasto).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	self
		should: [RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.]
		raise: Error
		withMessageText: RondaDeTruco hayCartasRepetidasEnLaManoDeUnJugadorDescripcionDeError.!

!testRun: #RondaDeTrucoTest #test1CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 18:58:16'!
PASSED!

!testRun: #RondaDeTrucoTest #test3NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 18:58:16'!
PASSED!

aCartasParaMano difference: aCartasParaPie !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'VIM 7/5/2021 18:59:31' prior: 51005380!
assertNoTienenCartasRepetidas: aCartasParaMano y: aCartasParaPie.

	((aCartasParaMano difference: aCartasParaPie) size = 3) ifFalse: [self signalHayCartasRepetidasEntreAmbosJugadores.].! !

!testRun: #RondaDeTrucoTest #test3NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 18:59:47'!
PASSED!

!testRun: #RondaDeTrucoTest #test1CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 18:59:47'!
PASSED!

!testRun: #RondaDeTrucoTest #test3NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 18:59:47'!
PASSED!

aCartasParaMano difference: aCartasParaPie!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'VIM 7/5/2021 19:00:47' prior: 51005502!
assertNoTienenCartasRepetidas: aCartasParaMano y: aCartasParaPie.

	((aCartasParaMano intersection: aCartasParaPie) size = 3) ifFalse: [self signalHayCartasRepetidasEntreAmbosJugadores.].! !

aCartasParaMano intersection: aCartasParaPie!
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'VIM 7/5/2021 19:00:58' prior: 51005523!
assertNoTienenCartasRepetidas: aCartasParaMano y: aCartasParaPie.

	((aCartasParaMano intersection: aCartasParaPie) isEmpty ) ifFalse: [self signalHayCartasRepetidasEntreAmbosJugadores.].! !

!testRun: #RondaDeTrucoTest #test3NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 19:01:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test1CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 19:01:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test3NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 19:01:07'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:02:28' prior: 51005423!
test3NoHayCartasRepetidasEntreLosJugadores

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.

	self
		should: [RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.]
		raise: Error
		withMessageText: RondaDeTruco hayCartasRepetidasEntreAmbosJugadoresDescripcionDeError ! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:05:44' prior: 51005554!
test3NoHayCartasRepetidasEntreLosJugadores

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 1).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.

! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 18:58:02' prior: 51005580!
test3NoHayCartasRepetidasEntreLosJugadores

	| aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	self
		should: [RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.]
		raise: Error
		withMessageText: RondaDeTruco hayCartasRepetidasEntreAmbosJugadoresDescripcionDeError ! !

!testRun: #RondaDeTrucoTest #test3NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 19:06:41'!
PASSED!

!testRun: #RondaDeTrucoTest #test1CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 19:06:41'!
PASSED!

!testRun: #RondaDeTrucoTest #test3NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 19:06:41'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:07:19'!
test4LaManoJuegaPrimeroEnLaPrimeraRonda

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 1).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.

! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:08:31' prior: 51005635!
test4LaManoJuegaPrimeroEnLaPrimeraRonda

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 1).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.

	self assert: (ronda primeroEnJugarEnElEnfrentamiento: 1) equals: aCartasParaMano.! !

!testRun: #RondaDeTrucoTest #test4LaManoJuegaPrimeroEnLaPrimeraRonda stamp: 'VIM 7/5/2021 19:08:36'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:08:52' prior: 51005656!
test4LaManoJuegaPrimeroEnLaPrimeraRonda

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 1).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda primeroEnJugarEnElEnfrentamiento: 1) equals: aCartasParaMano.! !

!testRun: #RondaDeTrucoTest #test4LaManoJuegaPrimeroEnLaPrimeraRonda stamp: 'VIM 7/5/2021 19:08:54'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:09:14'!
jugar
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:10:42' prior: 51005710!
jugar
	cartasParaMano enfrentarseCon: cartasParaPie.! !

!testRun: #RondaDeTrucoTest #test4LaManoJuegaPrimeroEnLaPrimeraRonda stamp: 'VIM 7/5/2021 19:10:46'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:11:30' prior: 51005715!
jugar
	self enfrentamientoEntre: cartasParaMano versus: cartasParaPie.! !

!testRun: #RondaDeTrucoTest #test4LaManoJuegaPrimeroEnLaPrimeraRonda stamp: 'VIM 7/5/2021 19:11:38'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:11:46'!
enfrentamientoEntre: anOrderedCollection versus: anOrderedCollection2 
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:13:07' prior: 51005733!
enfrentamientoEntre: aCartasParaMano versus: aCartasParaPie 
	(aCartasParaMano at: 1) mataA: (aCartasParaPie at: 1).! !

(aCartasParaMano at: 1) mataA: (aCartasParaPie at: 1).!

Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasParaMano cartasParaPie enfrentamientos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'VIM 7/5/2021 19:15:29'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasParaMano cartasParaPie enfrentamientos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'initialization' stamp: 'VIM 7/5/2021 19:15:52' prior: 51004486!
initializePara: aCartasParaMano versus: aCartasParaPie 
	cartasParaMano := aCartasParaMano.
	cartasParaPie := aCartasParaPie.
	enfrentamientos := OrderedCollection new.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:16:42' prior: 51005724!
jugar
	enfrentamientos add: (self enfrentamientoEntre: cartasParaMano versus: cartasParaPie).! !

!classDefinition: #EnfrentamientoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'VIM 7/5/2021 19:19:11'!
Object subclass: #EnfrentamientoDeTruco
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:19:08' prior: 51005773!
jugar
	enfrentamientos add: (EnfrentamientoDeTruco entre: (cartasParaMano at: 1) versus: (cartasParaPie at: 1)).! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:19:53' prior: 51005788!
jugar
	enfrentamientos add: (EnfrentamientoDeTruco entre: (cartasParaMano at: 1) versus: (cartasParaPie at: 1) jugandoPrimero: cartasParaMano ).! !

!testRun: #RondaDeTrucoTest #test1CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 19:19:56'!
PASSED!

!testRun: #RondaDeTrucoTest #test3NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 19:19:56'!
PASSED!

!testRun: #RondaDeTrucoTest #test4LaManoJuegaPrimeroEnLaPrimeraRonda stamp: 'VIM 7/5/2021 19:19:56'!
ERROR!

!testRun: #RondaDeTrucoTest #test4LaManoJuegaPrimeroEnLaPrimeraRonda stamp: 'VIM 7/5/2021 19:19:56'!
ERROR!
!EnfrentamientoDeTruco class methodsFor: 'initialization' stamp: 'VIM 7/5/2021 19:20:09'!
entre: aCartaDeTruco versus: aCartaDeTruco2 jugandoPrimero: anOrderedCollection 
	self shouldBeImplemented.! !

!methodRemoval: EnfrentamientoDeTruco class #entre:versus:jugandoPrimero: stamp: 'VIM 7/5/2021 19:20:30'!
entre: aCartaDeTruco versus: aCartaDeTruco2 jugandoPrimero: anOrderedCollection 
	self shouldBeImplemented.!

!testRun: #RondaDeTrucoTest #test1CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 19:20:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test3NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 19:20:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test4LaManoJuegaPrimeroEnLaPrimeraRonda stamp: 'VIM 7/5/2021 19:20:40'!
ERROR!

!testRun: #RondaDeTrucoTest #test4LaManoJuegaPrimeroEnLaPrimeraRonda stamp: 'VIM 7/5/2021 19:20:40'!
ERROR!
!EnfrentamientoDeTruco class methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:20:44'!
entre: aCartaDeTruco versus: aCartaDeTruco2 jugandoPrimero: anOrderedCollection 
	self shouldBeImplemented.! !
!EnfrentamientoDeTruco class methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:21:10' prior: 51005843!
entre: aCartaDeMano versus: aCartaDePie jugandoPrimero: aCartasParaJugador
	 
	! !
!EnfrentamientoDeTruco class methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:22:19' prior: 51005850!
entre: aCartaDeMano versus: aCartaDePie jugandoPrimero: aCartasParaJugador
	 
	^self new initializeEntre: aCartaDeMano versus: aCartaDePie jugandoPrimero: aCartasParaJugador.! !

!testRun: #RondaDeTrucoTest #test4LaManoJuegaPrimeroEnLaPrimeraRonda stamp: 'VIM 7/5/2021 19:22:22'!
ERROR!

!classDefinition: #EnfrentamientoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'VIM 7/5/2021 19:22:29'!
Object subclass: #EnfrentamientoDeTruco
	instanceVariableNames: 'cartaDeMano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #EnfrentamientoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'VIM 7/5/2021 19:22:29'!
Object subclass: #EnfrentamientoDeTruco
	instanceVariableNames: 'cartaDeMano cartaDePie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #EnfrentamientoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'VIM 7/5/2021 19:22:29'!
Object subclass: #EnfrentamientoDeTruco
	instanceVariableNames: 'cartaDeMano cartaDePie cartasParaJugador'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!EnfrentamientoDeTruco methodsFor: 'initialization' stamp: 'VIM 7/5/2021 19:22:29'!
initializeEntre: aCartaDeMano versus: aCartaDePie jugandoPrimero: aCartasParaJugador 
	self shouldBeImplemented.
	cartaDeMano := aCartaDeMano.
	cartaDePie := aCartaDePie.
	cartasParaJugador := aCartasParaJugador.! !

!classDefinition: #EnfrentamientoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'VIM 7/5/2021 19:22:48'!
Object subclass: #EnfrentamientoDeTruco
	instanceVariableNames: 'cartaDeMano cartaDePie cartasParaJugador juegaPrimero'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!EnfrentamientoDeTruco methodsFor: 'initialization' stamp: 'VIM 7/5/2021 19:22:45' prior: 51005896!
initializeEntre: aCartaDeMano versus: aCartaDePie jugandoPrimero: aCartasParaJugador 

	cartaDeMano := aCartaDeMano.
	cartaDePie := aCartaDePie.
	juegaPrimero := aCartasParaJugador.! !

!testRun: #RondaDeTrucoTest #test4LaManoJuegaPrimeroEnLaPrimeraRonda stamp: 'VIM 7/5/2021 19:22:52'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:23:00'!
primeroEnJugarEnElEnfrentamiento: aSmallInteger 
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:23:43' prior: 51005928!
primeroEnJugarEnElEnfrentamiento: anEnfrentamiento

	^(enfrentamientos at: anEnfrentamiento) primeroEnJugar.! !

!testRun: #RondaDeTrucoTest #test4LaManoJuegaPrimeroEnLaPrimeraRonda stamp: 'VIM 7/5/2021 19:23:45'!
ERROR!
!EnfrentamientoDeTruco methodsFor: 'accessing' stamp: 'VIM 7/5/2021 19:23:52'!
primeroEnJugar
	self shouldBeImplemented.! !
!EnfrentamientoDeTruco methodsFor: 'accessing' stamp: 'VIM 7/5/2021 19:23:58' prior: 51005944!
primeroEnJugar
	^juegaPrimero.! !

!testRun: #RondaDeTrucoTest #test4LaManoJuegaPrimeroEnLaPrimeraRonda stamp: 'VIM 7/5/2021 19:24:01'!
PASSED!

!testRun: #RondaDeTrucoTest #test1CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 19:24:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test3NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 19:24:05'!
PASSED!

!testRun: #RondaDeTrucoTest #test4LaManoJuegaPrimeroEnLaPrimeraRonda stamp: 'VIM 7/5/2021 19:24:05'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:25:45'!
test5EnElPrimerEnfrentamientoGanaLaMejorCarta

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 1).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda ganadorDelEnfrentamiento: 1) equals: aCartasParaMano.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:25:58'!
test4LaManoJuegaPrimeroEnElPrimerEnfrentamiento

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 1).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda primeroEnJugarEnElEnfrentamiento: 1) equals: aCartasParaMano.! !

!methodRemoval: RondaDeTrucoTest #test4LaManoJuegaPrimeroEnLaPrimeraRonda stamp: 'VIM 7/5/2021 19:25:58'!
test4LaManoJuegaPrimeroEnLaPrimeraRonda

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 1).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda primeroEnJugarEnElEnfrentamiento: 1) equals: aCartasParaMano.!

!testRun: #RondaDeTrucoTest #test5EnElPrimerEnfrentamientoGanaLaMejorCarta stamp: 'VIM 7/5/2021 19:26:04'!
ERROR!
!RondaDeTruco methodsFor: 'accessing' stamp: 'VIM 7/5/2021 19:26:13'!
ganadorDelEnfrentamiento: aSmallInteger 
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'accessing' stamp: 'VIM 7/5/2021 19:26:34' prior: 51006040!
ganadorDelEnfrentamiento: aSmallInteger 
	
	^(enfrentamientos at: 1) ganador.! !

!testRun: #RondaDeTrucoTest #test5EnElPrimerEnfrentamientoGanaLaMejorCarta stamp: 'VIM 7/5/2021 19:26:36'!
ERROR!
!EnfrentamientoDeTruco methodsFor: '*DenotativeObject' stamp: 'VIM 7/5/2021 19:26:42'!
ganador
	self shouldBeImplemented.! !

!classDefinition: #EnfrentamientoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'VIM 7/5/2021 19:27:32'!
Object subclass: #EnfrentamientoDeTruco
	instanceVariableNames: 'cartaDeMano cartaDePie cartasParaJugador juegaPrimero ganador'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!EnfrentamientoDeTruco methodsFor: '*DenotativeObject' stamp: 'VIM 7/5/2021 19:27:30' prior: 51006054!
ganador
	^ganador! !

!testRun: #RondaDeTrucoTest #test5EnElPrimerEnfrentamientoGanaLaMejorCarta stamp: 'VIM 7/5/2021 19:27:35'!
FAILURE!

!methodRemoval: EnfrentamientoDeTruco #ganador stamp: 'VIM 7/5/2021 19:28:07'!
ganador
	^ganador!

!testRun: #RondaDeTrucoTest #test5EnElPrimerEnfrentamientoGanaLaMejorCarta stamp: 'VIM 7/5/2021 19:29:27'!
ERROR!
!EnfrentamientoDeTruco methodsFor: 'accessing' stamp: 'VIM 7/5/2021 19:29:36'!
ganador
	self shouldBeImplemented.
	^ganador! !
!EnfrentamientoDeTruco methodsFor: 'accessing' stamp: 'VIM 7/5/2021 19:29:52' prior: 51006083!
ganador
	^cartaDeMano ! !

!testRun: #RondaDeTrucoTest #test5EnElPrimerEnfrentamientoGanaLaMejorCarta stamp: 'VIM 7/5/2021 19:29:54'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:31:51' prior: 51005795!
jugar
	enfrentamientos add: (EnfrentamientoDeTruco entre: (cartasParaMano at: 1) versus: (cartasParaPie at: 1) jugandoPrimero: cartasParaMano).! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:32:48' prior: 51006096!
jugar
	enfrentamientos jugar: (EnfrentamientoDeTruco entre: (cartasParaMano at: 1) versus: (cartasParaPie at: 1) jugandoPrimero: cartasParaMano).! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:33:27' prior: 51006104!
jugar
	enfrentamientos add: (self jugar: (EnfrentamientoDeTruco entre: (cartasParaMano at: 1) versus: (cartasParaPie at: 1) jugandoPrimero: cartasParaMano)).! !

!testRun: #RondaDeTrucoTest #test1CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 19:33:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test3NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 19:33:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test4LaManoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'VIM 7/5/2021 19:33:36'!
ERROR!

!testRun: #RondaDeTrucoTest #test5EnElPrimerEnfrentamientoGanaLaMejorCarta stamp: 'VIM 7/5/2021 19:33:36'!
ERROR!

!testRun: #RondaDeTrucoTest #test4LaManoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'VIM 7/5/2021 19:33:39'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:34:29' prior: 51006112!
jugar
	enfrentamientos add: (self enfrentarseEntre: (cartasParaMano at: 1) versus: (cartasParaPie at: 1) jugandoPrimero: cartasParaMano).! !

!testRun: #RondaDeTrucoTest #test1CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 19:34:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test3NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 19:34:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test4LaManoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'VIM 7/5/2021 19:34:36'!
ERROR!

!testRun: #RondaDeTrucoTest #test5EnElPrimerEnfrentamientoGanaLaMejorCarta stamp: 'VIM 7/5/2021 19:34:36'!
ERROR!

!testRun: #RondaDeTrucoTest #test4LaManoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'VIM 7/5/2021 19:34:37'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:34:45'!
enfrentarseEntre: aCartaDeTruco versus: aCartaDeTruco2 jugandoPrimero: anOrderedCollection 
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:35:59' prior: 51006163!
enfrentarseEntre: aCartaDeTruco versus: aCartaDeTruco2 jugandoPrimero: anOrderedCollection 
	
	| enfrentamiento |
	enfrentamiento := EnfrentamientoDeTruco entre: (cartasParaMano at: 1) versus: (cartasParaPie at: 1) jugandoPrimero: cartasParaMano.
	
	enfrentamiento enfrentar.
	
	^enfrentamiento.! !

!testRun: #RondaDeTrucoTest #test4LaManoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'VIM 7/5/2021 19:36:09'!
ERROR!
!EnfrentamientoDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:36:16'!
enfrentar
	self shouldBeImplemented.! !
!EnfrentamientoDeTruco class methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:38:23'!
entre: aCartasDeMano versus: aCartasDePie numeroDeEnfrentamiento: aNumeroDeEnfrentamiento
	 
	^self new initializeEntre: aCartasDeMano versus: aCartasDePie numeroDeEnfrentamiento: aNumeroDeEnfrentamiento.! !

!methodRemoval: EnfrentamientoDeTruco class #entre:versus:jugandoPrimero: stamp: 'VIM 7/5/2021 19:38:31'!
entre: aCartaDeMano versus: aCartaDePie jugandoPrimero: aCartasParaJugador
	 
	^self new initializeEntre: aCartaDeMano versus: aCartaDePie jugandoPrimero: aCartasParaJugador.!

!classDefinition: #EnfrentamientoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'VIM 7/5/2021 19:39:47'!
Object subclass: #EnfrentamientoDeTruco
	instanceVariableNames: 'cartaDeMano cartaDePie cartasParaJugador juegaPrimero ganador primerjugador'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #EnfrentamientoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'VIM 7/5/2021 19:39:48'!
Object subclass: #EnfrentamientoDeTruco
	instanceVariableNames: 'cartaDeMano cartaDePie cartasParaJugador juegaPrimero ganador primerjugador segundoJugador'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #EnfrentamientoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'VIM 7/5/2021 19:39:49'!
Object subclass: #EnfrentamientoDeTruco
	instanceVariableNames: 'cartaDeMano cartaDePie cartasParaJugador juegaPrimero ganador primerjugador segundoJugador numeroDeEnfrentamiento'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!EnfrentamientoDeTruco methodsFor: 'initialization' stamp: 'VIM 7/5/2021 19:39:45' prior: 51005916!
initializeEntre: aCartasDeMano versus: aCartasDePie jugandoPrimero: aNumeroDeEnfrentamiento 

	primerjugador := aCartasDeMano.
	segundoJugador := aCartasDePie.
	numeroDeEnfrentamiento := aNumeroDeEnfrentamiento.! !
!EnfrentamientoDeTruco methodsFor: 'initialization' stamp: 'VIM 7/5/2021 19:40:19'!
initializeEntrePrimerJugador: aCartasDeMano versusSegundoJugador: aCartasDePie numeroDeEnfrentamiento: aNumeroDeEnfrentamiento 

	primerjugador := aCartasDeMano.
	segundoJugador := aCartasDePie.
	numeroDeEnfrentamiento := aNumeroDeEnfrentamiento.! !

!methodRemoval: EnfrentamientoDeTruco #initializeEntre:versus:jugandoPrimero: stamp: 'VIM 7/5/2021 19:40:19'!
initializeEntre: aCartasDeMano versus: aCartasDePie jugandoPrimero: aNumeroDeEnfrentamiento 

	primerjugador := aCartasDeMano.
	segundoJugador := aCartasDePie.
	numeroDeEnfrentamiento := aNumeroDeEnfrentamiento.!
!EnfrentamientoDeTruco methodsFor: 'initialization' stamp: 'VIM 7/5/2021 19:40:56' prior: 51006253!
initializeEntrePrimerJugador: aCartasDePrimerJugador versusSegundoJugador: aCartasDeSegundoJugador numeroDeEnfrentamiento: aNumeroDeEnfrentamiento 

	primerjugador := aCartasDePrimerJugador.
	segundoJugador := aCartasDeSegundoJugador.
	numeroDeEnfrentamiento := aNumeroDeEnfrentamiento.! !

Object subclass: #EnfrentamientoDeTruco
	instanceVariableNames: 'ganador primerjugador segundoJugador numeroDeEnfrentamiento'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #EnfrentamientoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'VIM 7/5/2021 19:41:07'!
Object subclass: #EnfrentamientoDeTruco
	instanceVariableNames: 'ganador primerjugador segundoJugador numeroDeEnfrentamiento'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!EnfrentamientoDeTruco methodsFor: 'accessing' stamp: 'VIM 7/5/2021 19:41:16' prior: 51005949!
primeroEnJugar
	^primerjugador .! !

!methodRemoval: EnfrentamientoDeTruco #enfrentar stamp: 'VIM 7/5/2021 19:41:25'!
enfrentar
	self shouldBeImplemented.!
!EnfrentamientoDeTruco methodsFor: 'accessing' stamp: 'VIM 7/5/2021 19:41:41' prior: 51006088!
ganador
	^ganador ! !

!methodRemoval: RondaDeTruco #enfrentarseEntre:versus:jugandoPrimero: stamp: 'VIM 7/5/2021 19:41:54'!
enfrentarseEntre: aCartaDeTruco versus: aCartaDeTruco2 jugandoPrimero: anOrderedCollection 
	
	| enfrentamiento |
	enfrentamiento := EnfrentamientoDeTruco entre: (cartasParaMano at: 1) versus: (cartasParaPie at: 1) jugandoPrimero: cartasParaMano.
	
	enfrentamiento enfrentar.
	
	^enfrentamiento.!

!methodRemoval: RondaDeTruco #enfrentamientoEntre:versus: stamp: 'VIM 7/5/2021 19:41:57'!
enfrentamientoEntre: aCartasParaMano versus: aCartasParaPie 
	(aCartasParaMano at: 1) mataA: (aCartasParaPie at: 1).!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:42:16' prior: 51006045!
ganadorDelEnfrentamiento: aNumeroDeEnfrentamiento
	
	^(enfrentamientos at: aNumeroDeEnfrentamiento) ganador.! !

!testRun: #RondaDeTrucoTest #test5EnElPrimerEnfrentamientoGanaLaMejorCarta stamp: 'VIM 7/5/2021 19:42:42'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:45:38' prior: 51006138!
jugar
	enfrentamientos add: (self ).! !
!EnfrentamientoDeTruco class methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:46:09' prior: 51006191!
entre: aPrimerJugador versus: aSegundoJugador numeroDeEnfrentamiento: aNumeroDeEnfrentamiento
	 
	^self new initializeEntre: aPrimerJugador versus: aSegundoJugador numeroDeEnfrentamiento: aNumeroDeEnfrentamiento.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:46:52' prior: 51006346!
jugar
	enfrentamientos add: (self enfrentarseEntre: cartasParaMano versus: cartasParaPie numeroDeEnfrentamiento: 1).! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:47:37'!
enfrentarseEntre: aPrimerJugador versus: aSegundoJugador numeroDeEnfrentamiento: aNumeroDeEnfrentamiento! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:50:47' prior: 51006368!
enfrentarseEntre: aPrimerJugador versus: aSegundoJugador numeroDeEnfrentamiento: aNumeroDeEnfrentamiento
	EnfrentamientoDeTruco ! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:51:33' prior: 51006375!
enfrentarseEntre: aPrimerJugador versus: aSegundoJugador numeroDeEnfrentamiento: aNumeroDeEnfrentamiento
	
	| enfrentamiento |
	enfrentamiento := EnfrentamientoDeTruco entre: aPrimerJugador versus: aSegundoJugador numeroDeEnfrentamiento: aNumeroDeEnfrentamiento
	
	efrentamiento enfrentarse.
	
	^enfrentamiento.! !
!EnfrentamientoDeTruco methodsFor: 'accessing' stamp: 'VIM 7/5/2021 19:52:27'!
enfrentarse
	ganador := primerjugador ! !

!testRun: #RondaDeTrucoTest #test5EnElPrimerEnfrentamientoGanaLaMejorCarta stamp: 'VIM 7/5/2021 19:52:38'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:53:06' prior: 51006383!
enfrentarseEntre: aPrimerJugador versus: aSegundoJugador numeroDeEnfrentamiento: aNumeroDeEnfrentamiento
	
	| enfrentamiento |
	enfrentamiento := EnfrentamientoDeTruco entre: aPrimerJugador versus: aSegundoJugador numeroDeEnfrentamiento: aNumeroDeEnfrentamiento.
	
	enfrentamiento enfrentarse.
	
	^enfrentamiento.! !

!testRun: #RondaDeTrucoTest #test1CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 19:53:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test3NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 19:53:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test4LaManoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'VIM 7/5/2021 19:53:07'!
ERROR!

!testRun: #RondaDeTrucoTest #test5EnElPrimerEnfrentamientoGanaLaMejorCarta stamp: 'VIM 7/5/2021 19:53:07'!
ERROR!

!testRun: #RondaDeTrucoTest #test4LaManoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'VIM 7/5/2021 19:53:12'!
ERROR!
!EnfrentamientoDeTruco class methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:54:02' prior: 51006351!
entre: aCartasDePrimerJugador versus: aCartasDeSegundoJugador numeroDeEnfrentamiento: aNumeroDeEnfrentamiento
	 
	^self new initializeEntrePrimerJugador: aCartasDePrimerJugador versusSegundoJugador: aCartasDeSegundoJugador numeroDeEnfrentamiento: aNumeroDeEnfrentamiento! !

!testRun: #RondaDeTrucoTest #test5EnElPrimerEnfrentamientoGanaLaMejorCarta stamp: 'VIM 7/5/2021 19:54:10'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'VIM 7/5/2021 19:54:10'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'VIM 7/5/2021 19:54:10'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'VIM 7/5/2021 19:54:10'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'VIM 7/5/2021 19:54:10'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'VIM 7/5/2021 19:54:10'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'VIM 7/5/2021 19:54:10'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'VIM 7/5/2021 19:54:10'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'VIM 7/5/2021 19:54:10'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'VIM 7/5/2021 19:54:10'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'VIM 7/5/2021 19:54:10'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'VIM 7/5/2021 19:54:10'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'VIM 7/5/2021 19:54:10'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'VIM 7/5/2021 19:54:10'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'VIM 7/5/2021 19:54:10'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'VIM 7/5/2021 19:54:10'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'VIM 7/5/2021 19:54:10'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'VIM 7/5/2021 19:54:10'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'VIM 7/5/2021 19:54:10'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInválida stamp: 'VIM 7/5/2021 19:54:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test1CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 19:54:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test3NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 19:54:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test4LaManoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'VIM 7/5/2021 19:54:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test5EnElPrimerEnfrentamientoGanaLaMejorCarta stamp: 'VIM 7/5/2021 19:54:10'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:54:55'!
test6EnElSegundoEnfrentamientoJuegaPrimeroElGanadorS

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 1).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda ganadorDelEnfrentamiento: 1) equals: aCartasParaMano.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:55:03'!
test6EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 1).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda ganadorDelEnfrentamiento: 1) equals: aCartasParaMano.! !

!methodRemoval: RondaDeTrucoTest #test6EnElSegundoEnfrentamientoJuegaPrimeroElGanadorS stamp: 'VIM 7/5/2021 19:55:07'!
test6EnElSegundoEnfrentamientoJuegaPrimeroElGanadorS

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 1).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda ganadorDelEnfrentamiento: 1) equals: aCartasParaMano.!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:55:27' prior: 51006553!
test6EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 1).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda primeroEnJugarEnElEnfrentamiento: 2) equals: aCartasParaMano.! !

!testRun: #RondaDeTrucoTest #test6EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero stamp: 'VIM 7/5/2021 19:55:30'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:56:58' prior: 51006361!
jugar
	enfrentamientos add: (self enfrentarseEntre: cartasParaMano versus: cartasParaPie numeroDeEnfrentamiento: 1).
	enfrentamientos add: (self enfrentarseEntre: ((enfrentamientos at: 1) ganador) versus: ((enfrentamientos at: 1) perdedor) numeroDeEnfrentamiento: 2).! !

!classDefinition: #EnfrentamientoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'VIM 7/5/2021 19:57:17'!
Object subclass: #EnfrentamientoDeTruco
	instanceVariableNames: 'ganador primerjugador segundoJugador numeroDeEnfrentamiento perdedor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!EnfrentamientoDeTruco methodsFor: 'accessing' stamp: 'VIM 7/5/2021 19:57:14'!
perdedor
	^perdedor! !
!EnfrentamientoDeTruco methodsFor: 'accessing' stamp: 'VIM 7/5/2021 19:57:41' prior: 51006396!
enfrentarse
	ganador := primerjugador.
	perdedor := segundoJugador ! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 19:58:10' prior: 51006629!
jugar
	enfrentamientos add: (self enfrentarseEntre: cartasParaMano versus: cartasParaPie numeroDeEnfrentamiento: 1).
	enfrentamientos add: (self enfrentarseEntre: ((enfrentamientos at: 1) ganador) versus: ((enfrentamientos at: 1) perdedor) numeroDeEnfrentamiento: 2).
	enfrentamientos add: (self enfrentarseEntre: ((enfrentamientos at: 2) ganador) versus: ((enfrentamientos at: 2) perdedor) numeroDeEnfrentamiento: 3).! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:01:14'!
test5EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 1).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda ganadorDelEnfrentamiento: 1) equals: aCartasParaMano.! !

!methodRemoval: RondaDeTrucoTest #test5EnElPrimerEnfrentamientoGanaLaMejorCarta stamp: 'VIM 7/5/2021 20:01:14'!
test5EnElPrimerEnfrentamientoGanaLaMejorCarta

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 1).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda ganadorDelEnfrentamiento: 1) equals: aCartasParaMano.!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:01:29'!
test7EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 1).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda primeroEnJugarEnElEnfrentamiento: 2) equals: aCartasParaMano.! !

!methodRemoval: RondaDeTrucoTest #test6EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero stamp: 'VIM 7/5/2021 20:01:29'!
test6EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 1).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda primeroEnJugarEnElEnfrentamiento: 2) equals: aCartasParaMano.!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:01:52'!
test6EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDelPie

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 1).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda ganadorDelEnfrentamiento: 1) equals: aCartasParaPie.! !

!testRun: #RondaDeTrucoTest #test6EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 20:01:53'!
FAILURE!
!EnfrentamientoDeTruco methodsFor: 'accessing' stamp: 'VIM 7/5/2021 20:04:08' prior: 51006655!
enfrentarse
	((primerjugador at: numeroDeEnfrentamiento) mataA: (segundoJugador at: numeroDeEnfrentamiento )) ifTrue: [self ganaElPrimero] ifFalse: [self ganaElSegundo].! !

!testRun: #RondaDeTrucoTest #test7EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero stamp: 'VIM 7/5/2021 20:04:17'!
ERROR!
!EnfrentamientoDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:04:23'!
ganaElPrimero
	self shouldBeImplemented.! !
!EnfrentamientoDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:04:47' prior: 51006814!
ganaElPrimero
	ganador := primerjugador.
	perdedor := segundoJugador.! !

!testRun: #RondaDeTrucoTest #test7EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero stamp: 'VIM 7/5/2021 20:04:49'!
ERROR!
!EnfrentamientoDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:04:55'!
ganaElSegundo
	self shouldBeImplemented.! !
!EnfrentamientoDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:05:12' prior: 51006829!
ganaElSegundo
	ganador := primerjugador .
	perdedor := segundoJugador .! !

!testRun: #RondaDeTrucoTest #test7EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero stamp: 'VIM 7/5/2021 20:05:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'VIM 7/5/2021 20:05:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'VIM 7/5/2021 20:05:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'VIM 7/5/2021 20:05:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'VIM 7/5/2021 20:05:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'VIM 7/5/2021 20:05:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'VIM 7/5/2021 20:05:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'VIM 7/5/2021 20:05:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'VIM 7/5/2021 20:05:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'VIM 7/5/2021 20:05:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'VIM 7/5/2021 20:05:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'VIM 7/5/2021 20:05:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'VIM 7/5/2021 20:05:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'VIM 7/5/2021 20:05:13'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'VIM 7/5/2021 20:05:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'VIM 7/5/2021 20:05:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'VIM 7/5/2021 20:05:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'VIM 7/5/2021 20:05:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'VIM 7/5/2021 20:05:14'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInválida stamp: 'VIM 7/5/2021 20:05:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test1CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 20:05:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test3NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 20:05:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test4LaManoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'VIM 7/5/2021 20:05:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test5EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 20:05:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test6EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 20:05:14'!
FAILURE!

!testRun: #RondaDeTrucoTest #test7EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero stamp: 'VIM 7/5/2021 20:05:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test6EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 20:05:14'!
FAILURE!

!testRun: #RondaDeTrucoTest #test7EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero stamp: 'VIM 7/5/2021 20:05:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test1CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 20:05:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test3NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 20:05:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test4LaManoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'VIM 7/5/2021 20:05:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test5EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 20:05:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test6EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 20:05:29'!
FAILURE!

!testRun: #RondaDeTrucoTest #test7EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero stamp: 'VIM 7/5/2021 20:05:29'!
PASSED!

!testRun: #RondaDeTrucoTest #test6EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 20:05:29'!
FAILURE!

(primerjugador at: numeroDeEnfrentamiento) mataA: (segundoJugador at: numeroDeEnfrentamiento )!
!EnfrentamientoDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:07:16' prior: 51006834!
ganaElSegundo
	ganador := segundoJugador  .
	perdedor :=  primerjugador.! !

!testRun: #RondaDeTrucoTest #test6EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 20:07:17'!
FAILURE!

!testRun: #RondaDeTrucoTest #test6EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 20:08:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test1CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 20:08:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test3NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 20:08:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test4LaManoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'VIM 7/5/2021 20:08:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test5EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 20:08:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test6EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 20:08:36'!
PASSED!

!testRun: #RondaDeTrucoTest #test7EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero stamp: 'VIM 7/5/2021 20:08:36'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:11:10'!
test8EnElSegundoEnfrentamientoJuegaPrimeroLaManoSiHuboEmpate

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco bastoCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco copaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda primeroEnJugarEnElEnfrentamiento: 2) equals: aCartasParaMano.! !

!testRun: #RondaDeTrucoTest #test8EnElSegundoEnfrentamientoJuegaPrimeroLaManoSiHuboEmpate stamp: 'VIM 7/5/2021 20:11:12'!
FAILURE!
!EnfrentamientoDeTruco methodsFor: 'accessing' stamp: 'VIM 7/5/2021 20:12:31' prior: 51006801!
enfrentarse
	((primerjugador at: numeroDeEnfrentamiento) empardaCon: (segundoJugador at: numeroDeEnfrentamiento )) ifTrue: [self huboEmpate].
	((primerjugador at: numeroDeEnfrentamiento) mataA: (segundoJugador at: numeroDeEnfrentamiento )) ifTrue: [self ganaElPrimero] ifFalse: [self ganaElSegundo].! !

!testRun: #RondaDeTrucoTest #test8EnElSegundoEnfrentamientoJuegaPrimeroLaManoSiHuboEmpate stamp: 'VIM 7/5/2021 20:12:38'!
ERROR!
!EnfrentamientoDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:12:45'!
huboEmpate
	self shouldBeImplemented.! !
!EnfrentamientoDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:12:57' prior: 51007051!
huboEmpate! !

!testRun: #RondaDeTrucoTest #test8EnElSegundoEnfrentamientoJuegaPrimeroLaManoSiHuboEmpate stamp: 'VIM 7/5/2021 20:12:59'!
FAILURE!

!classDefinition: #EnfrentamientoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'VIM 7/5/2021 20:14:19'!
Object subclass: #EnfrentamientoDeTruco
	instanceVariableNames: 'ganador primerjugador segundoJugador numeroDeEnfrentamiento perdedor jugadorMano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!

!classDefinition: #EnfrentamientoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'VIM 7/5/2021 20:14:23'!
Object subclass: #EnfrentamientoDeTruco
	instanceVariableNames: 'ganador primerjugador segundoJugador numeroDeEnfrentamiento perdedor jugadorMano jugadorNoMano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!EnfrentamientoDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:14:21' prior: 51007056!
huboEmpate
	ganador := jugadorMano.
	perdedor := jugadorNoMano.! !
!EnfrentamientoDeTruco methodsFor: 'initialization' stamp: 'VIM 7/5/2021 20:15:19'!
initializeEntrePrimerJugador: aCartasDePrimerJugador versusSegundoJugador: aCartasDeSegundoJugador conJugadorMano: aJugadorMano numeroDeEnfrentamiento: aNumeroDeEnfrentamiento 

	primerjugador := aCartasDePrimerJugador.
	segundoJugador := aCartasDeSegundoJugador.
	numeroDeEnfrentamiento := aNumeroDeEnfrentamiento.! !
!EnfrentamientoDeTruco class methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:15:19' prior: 51006435!
entre: aCartasDePrimerJugador versus: aCartasDeSegundoJugador numeroDeEnfrentamiento: aNumeroDeEnfrentamiento
	 
	^self new initializeEntrePrimerJugador: aCartasDePrimerJugador versusSegundoJugador: aCartasDeSegundoJugador conJugadorMano: self halt numeroDeEnfrentamiento: aNumeroDeEnfrentamiento! !

!methodRemoval: EnfrentamientoDeTruco #initializeEntrePrimerJugador:versusSegundoJugador:numeroDeEnfrentamiento: stamp: 'VIM 7/5/2021 20:15:19'!
initializeEntrePrimerJugador: aCartasDePrimerJugador versusSegundoJugador: aCartasDeSegundoJugador numeroDeEnfrentamiento: aNumeroDeEnfrentamiento 

	primerjugador := aCartasDePrimerJugador.
	segundoJugador := aCartasDeSegundoJugador.
	numeroDeEnfrentamiento := aNumeroDeEnfrentamiento.!
!EnfrentamientoDeTruco methodsFor: 'initialization' stamp: 'VIM 7/5/2021 20:15:54'!
initializeEntrePrimerJugador: aCartasDePrimerJugador versusSegundoJugador: aCartasDeSegundoJugador conJugadorMano: aJugadorMano conJugadorPie: aJugadorPie numeroDeEnfrentamiento: aNumeroDeEnfrentamiento 

	primerjugador := aCartasDePrimerJugador.
	segundoJugador := aCartasDeSegundoJugador.
	numeroDeEnfrentamiento := aNumeroDeEnfrentamiento.! !
!EnfrentamientoDeTruco class methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:15:54' prior: 51007105!
entre: aCartasDePrimerJugador versus: aCartasDeSegundoJugador numeroDeEnfrentamiento: aNumeroDeEnfrentamiento
	 
	^self new initializeEntrePrimerJugador: aCartasDePrimerJugador versusSegundoJugador: aCartasDeSegundoJugador conJugadorMano: self halt conJugadorPie: self halt numeroDeEnfrentamiento: aNumeroDeEnfrentamiento! !

!methodRemoval: EnfrentamientoDeTruco #initializeEntrePrimerJugador:versusSegundoJugador:conJugadorMano:numeroDeEnfrentamiento: stamp: 'VIM 7/5/2021 20:15:54'!
initializeEntrePrimerJugador: aCartasDePrimerJugador versusSegundoJugador: aCartasDeSegundoJugador conJugadorMano: aJugadorMano numeroDeEnfrentamiento: aNumeroDeEnfrentamiento 

	primerjugador := aCartasDePrimerJugador.
	segundoJugador := aCartasDeSegundoJugador.
	numeroDeEnfrentamiento := aNumeroDeEnfrentamiento.!
!EnfrentamientoDeTruco class methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:16:30'!
entre: aCartasDePrimerJugador versus: aCartasDeSegundoJugador conJugadorMano: aJugadorMano numeroDeEnfrentamiento: aNumeroDeEnfrentamiento
	 
	^self new initializeEntrePrimerJugador: aCartasDePrimerJugador versusSegundoJugador: aCartasDeSegundoJugador conJugadorMano: self halt conJugadorPie: self halt numeroDeEnfrentamiento: aNumeroDeEnfrentamiento! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:16:30' prior: 51006404!
enfrentarseEntre: aPrimerJugador versus: aSegundoJugador numeroDeEnfrentamiento: aNumeroDeEnfrentamiento
	
	| enfrentamiento |
	enfrentamiento := EnfrentamientoDeTruco entre: aPrimerJugador versus: aSegundoJugador conJugadorMano: self halt numeroDeEnfrentamiento: aNumeroDeEnfrentamiento.
	
	enfrentamiento enfrentarse.
	
	^enfrentamiento.! !

!methodRemoval: EnfrentamientoDeTruco class #entre:versus:numeroDeEnfrentamiento: stamp: 'VIM 7/5/2021 20:16:30'!
entre: aCartasDePrimerJugador versus: aCartasDeSegundoJugador numeroDeEnfrentamiento: aNumeroDeEnfrentamiento
	 
	^self new initializeEntrePrimerJugador: aCartasDePrimerJugador versusSegundoJugador: aCartasDeSegundoJugador conJugadorMano: self halt conJugadorPie: self halt numeroDeEnfrentamiento: aNumeroDeEnfrentamiento!
!EnfrentamientoDeTruco class methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:17:00'!
entre: aCartasDePrimerJugador versus: aCartasDeSegundoJugador conJugadorMano: aJugadorMano conJugadorPie: aJugadorPie numeroDeEnfrentamiento: aNumeroDeEnfrentamiento
	 
	^self new initializeEntrePrimerJugador: aCartasDePrimerJugador versusSegundoJugador: aCartasDeSegundoJugador conJugadorMano: self halt conJugadorPie: self halt numeroDeEnfrentamiento: aNumeroDeEnfrentamiento! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:17:00' prior: 51007190!
enfrentarseEntre: aPrimerJugador versus: aSegundoJugador numeroDeEnfrentamiento: aNumeroDeEnfrentamiento
	
	| enfrentamiento |
	enfrentamiento := EnfrentamientoDeTruco entre: aPrimerJugador versus: aSegundoJugador conJugadorMano: self halt conJugadorPie: self halt numeroDeEnfrentamiento: aNumeroDeEnfrentamiento.
	
	enfrentamiento enfrentarse.
	
	^enfrentamiento.! !

!methodRemoval: EnfrentamientoDeTruco class #entre:versus:conJugadorMano:numeroDeEnfrentamiento: stamp: 'VIM 7/5/2021 20:17:00'!
entre: aCartasDePrimerJugador versus: aCartasDeSegundoJugador conJugadorMano: aJugadorMano numeroDeEnfrentamiento: aNumeroDeEnfrentamiento
	 
	^self new initializeEntrePrimerJugador: aCartasDePrimerJugador versusSegundoJugador: aCartasDeSegundoJugador conJugadorMano: self halt conJugadorPie: self halt numeroDeEnfrentamiento: aNumeroDeEnfrentamiento!
!EnfrentamientoDeTruco class methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:17:34' prior: 51007218!
entre: aCartasDePrimerJugador versus: aCartasDeSegundoJugador conJugadorMano: aJugadorMano conJugadorPie: aJugadorPie numeroDeEnfrentamiento: aNumeroDeEnfrentamiento
	 
	^self new initializeEntrePrimerJugador: aCartasDePrimerJugador versusSegundoJugador: aCartasDeSegundoJugador conJugadorMano: aJugadorMano conJugadorPie: aJugadorPie numeroDeEnfrentamiento: aNumeroDeEnfrentamiento.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:18:36'!
enfrentarseEntre: aPrimerJugador versus: aSegundoJugador conJugadorMano: aJugadorMano numeroDeEnfrentamiento: aNumeroDeEnfrentamiento
	
	| enfrentamiento |
	enfrentamiento := EnfrentamientoDeTruco entre: aPrimerJugador versus: aSegundoJugador conJugadorMano: self halt conJugadorPie: self halt numeroDeEnfrentamiento: aNumeroDeEnfrentamiento.
	
	enfrentamiento enfrentarse.
	
	^enfrentamiento.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:18:36' prior: 51006661!
jugar
	enfrentamientos add: (self enfrentarseEntre: cartasParaMano versus: cartasParaPie conJugadorMano: self halt numeroDeEnfrentamiento: 1).
	enfrentamientos add: (self enfrentarseEntre: ((enfrentamientos at: 1) ganador) versus: ((enfrentamientos at: 1) perdedor) conJugadorMano: self halt numeroDeEnfrentamiento: 2).
	enfrentamientos add: (self enfrentarseEntre: ((enfrentamientos at: 2) ganador) versus: ((enfrentamientos at: 2) perdedor) conJugadorMano: self halt numeroDeEnfrentamiento: 3).! !

!methodRemoval: RondaDeTruco #enfrentarseEntre:versus:numeroDeEnfrentamiento: stamp: 'VIM 7/5/2021 20:18:36'!
enfrentarseEntre: aPrimerJugador versus: aSegundoJugador numeroDeEnfrentamiento: aNumeroDeEnfrentamiento
	
	| enfrentamiento |
	enfrentamiento := EnfrentamientoDeTruco entre: aPrimerJugador versus: aSegundoJugador conJugadorMano: self halt conJugadorPie: self halt numeroDeEnfrentamiento: aNumeroDeEnfrentamiento.
	
	enfrentamiento enfrentarse.
	
	^enfrentamiento.!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:19:07'!
enfrentarseEntre: aPrimerJugador versus: aSegundoJugador conJugadorMano: aJugadorMano conJugadorPie: aJugadorPie numeroDeEnfrentamiento: aNumeroDeEnfrentamiento
	
	| enfrentamiento |
	enfrentamiento := EnfrentamientoDeTruco entre: aPrimerJugador versus: aSegundoJugador conJugadorMano: self halt conJugadorPie: self halt numeroDeEnfrentamiento: aNumeroDeEnfrentamiento.
	
	enfrentamiento enfrentarse.
	
	^enfrentamiento.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:19:07' prior: 51007295!
jugar
	enfrentamientos add: (self enfrentarseEntre: cartasParaMano versus: cartasParaPie conJugadorMano: self halt conJugadorPie: self halt numeroDeEnfrentamiento: 1).
	enfrentamientos add: (self enfrentarseEntre: ((enfrentamientos at: 1) ganador) versus: ((enfrentamientos at: 1) perdedor) conJugadorMano: self halt conJugadorPie: self halt numeroDeEnfrentamiento: 2).
	enfrentamientos add: (self enfrentarseEntre: ((enfrentamientos at: 2) ganador) versus: ((enfrentamientos at: 2) perdedor) conJugadorMano: self halt conJugadorPie: self halt numeroDeEnfrentamiento: 3).! !

!methodRemoval: RondaDeTruco #enfrentarseEntre:versus:conJugadorMano:numeroDeEnfrentamiento: stamp: 'VIM 7/5/2021 20:19:07'!
enfrentarseEntre: aPrimerJugador versus: aSegundoJugador conJugadorMano: aJugadorMano numeroDeEnfrentamiento: aNumeroDeEnfrentamiento
	
	| enfrentamiento |
	enfrentamiento := EnfrentamientoDeTruco entre: aPrimerJugador versus: aSegundoJugador conJugadorMano: self halt conJugadorPie: self halt numeroDeEnfrentamiento: aNumeroDeEnfrentamiento.
	
	enfrentamiento enfrentarse.
	
	^enfrentamiento.!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:19:33' prior: 51007329!
enfrentarseEntre: aPrimerJugador versus: aSegundoJugador conJugadorMano: aJugadorMano conJugadorPie: aJugadorPie numeroDeEnfrentamiento: aNumeroDeEnfrentamiento
	
	| enfrentamiento |
	enfrentamiento := EnfrentamientoDeTruco entre: aPrimerJugador versus: aSegundoJugador conJugadorMano: aJugadorMano conJugadorPie: aJugadorPie numeroDeEnfrentamiento: aNumeroDeEnfrentamiento.
	
	enfrentamiento enfrentarse.
	
	^enfrentamiento.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:20:24' prior: 51007384!
enfrentarseEntre: aPrimerJugador versus: aSegundoJugador conJugadorMano: aJugadorMano conJugadorPie: aJugadorPie numeroDeEnfrentamiento: aNumeroDeEnfrentamiento
	
	| enfrentamiento |
	enfrentamiento := EnfrentamientoDeTruco entre: aPrimerJugador versus: aSegundoJugador conJugadorMano: cartasParaMano conJugadorPie: cartasParaPie numeroDeEnfrentamiento: aNumeroDeEnfrentamiento.
	
	enfrentamiento enfrentarse.
	
	^enfrentamiento.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:20:34'!
enfrentarseEntre: aPrimerJugador versus: aSegundoJugador conJugadorPie: aJugadorPie numeroDeEnfrentamiento: aNumeroDeEnfrentamiento
	
	| enfrentamiento |
	enfrentamiento := EnfrentamientoDeTruco entre: aPrimerJugador versus: aSegundoJugador conJugadorMano: cartasParaMano conJugadorPie: cartasParaPie numeroDeEnfrentamiento: aNumeroDeEnfrentamiento.
	
	enfrentamiento enfrentarse.
	
	^enfrentamiento.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:20:34' prior: 51007346!
jugar
	enfrentamientos add: (self enfrentarseEntre: cartasParaMano versus: cartasParaPie conJugadorPie: self halt numeroDeEnfrentamiento: 1).
	enfrentamientos add: (self enfrentarseEntre: ((enfrentamientos at: 1) ganador) versus: ((enfrentamientos at: 1) perdedor) conJugadorPie: self halt numeroDeEnfrentamiento: 2).
	enfrentamientos add: (self enfrentarseEntre: ((enfrentamientos at: 2) ganador) versus: ((enfrentamientos at: 2) perdedor) conJugadorPie: self halt numeroDeEnfrentamiento: 3).! !

!methodRemoval: RondaDeTruco #enfrentarseEntre:versus:conJugadorMano:conJugadorPie:numeroDeEnfrentamiento: stamp: 'VIM 7/5/2021 20:20:34'!
enfrentarseEntre: aPrimerJugador versus: aSegundoJugador conJugadorMano: aJugadorMano conJugadorPie: aJugadorPie numeroDeEnfrentamiento: aNumeroDeEnfrentamiento
	
	| enfrentamiento |
	enfrentamiento := EnfrentamientoDeTruco entre: aPrimerJugador versus: aSegundoJugador conJugadorMano: cartasParaMano conJugadorPie: cartasParaPie numeroDeEnfrentamiento: aNumeroDeEnfrentamiento.
	
	enfrentamiento enfrentarse.
	
	^enfrentamiento.!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:20:47'!
enfrentarseEntre: aPrimerJugador versus: aSegundoJugador numeroDeEnfrentamiento: aNumeroDeEnfrentamiento
	
	| enfrentamiento |
	enfrentamiento := EnfrentamientoDeTruco entre: aPrimerJugador versus: aSegundoJugador conJugadorMano: cartasParaMano conJugadorPie: cartasParaPie numeroDeEnfrentamiento: aNumeroDeEnfrentamiento.
	
	enfrentamiento enfrentarse.
	
	^enfrentamiento.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:20:47' prior: 51007434!
jugar
	enfrentamientos add: (self enfrentarseEntre: cartasParaMano versus: cartasParaPie numeroDeEnfrentamiento: 1).
	enfrentamientos add: (self enfrentarseEntre: ((enfrentamientos at: 1) ganador) versus: ((enfrentamientos at: 1) perdedor) numeroDeEnfrentamiento: 2).
	enfrentamientos add: (self enfrentarseEntre: ((enfrentamientos at: 2) ganador) versus: ((enfrentamientos at: 2) perdedor) numeroDeEnfrentamiento: 3).! !

!methodRemoval: RondaDeTruco #enfrentarseEntre:versus:conJugadorPie:numeroDeEnfrentamiento: stamp: 'VIM 7/5/2021 20:20:47'!
enfrentarseEntre: aPrimerJugador versus: aSegundoJugador conJugadorPie: aJugadorPie numeroDeEnfrentamiento: aNumeroDeEnfrentamiento
	
	| enfrentamiento |
	enfrentamiento := EnfrentamientoDeTruco entre: aPrimerJugador versus: aSegundoJugador conJugadorMano: cartasParaMano conJugadorPie: cartasParaPie numeroDeEnfrentamiento: aNumeroDeEnfrentamiento.
	
	enfrentamiento enfrentarse.
	
	^enfrentamiento.!
!EnfrentamientoDeTruco methodsFor: 'initialization' stamp: 'VIM 7/5/2021 20:21:28' prior: 51007131!
initializeEntrePrimerJugador: aCartasDePrimerJugador versusSegundoJugador: aCartasDeSegundoJugador conJugadorMano: aJugadorMano conJugadorPie: aJugadorPie numeroDeEnfrentamiento: aNumeroDeEnfrentamiento 

	primerjugador := aCartasDePrimerJugador.
	segundoJugador := aCartasDeSegundoJugador.
	numeroDeEnfrentamiento := aNumeroDeEnfrentamiento.
	jugadorMano := aJugadorMano.
	jugadorNoMano := aJugadorPie.! !

!classDefinition: #EnfrentamientoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'VIM 7/5/2021 20:21:39'!
Object subclass: #EnfrentamientoDeTruco
	instanceVariableNames: 'ganador primerjugador segundoJugador numeroDeEnfrentamiento perdedor jugadorMano jugadorPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!EnfrentamientoDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:21:39' prior: 51007518!
initializeEntrePrimerJugador: aCartasDePrimerJugador versusSegundoJugador: aCartasDeSegundoJugador conJugadorMano: aJugadorMano conJugadorPie: aJugadorPie numeroDeEnfrentamiento: aNumeroDeEnfrentamiento 

	primerjugador := aCartasDePrimerJugador.
	segundoJugador := aCartasDeSegundoJugador.
	numeroDeEnfrentamiento := aNumeroDeEnfrentamiento.
	jugadorMano := aJugadorMano.
	jugadorPie := aJugadorPie.! !
!EnfrentamientoDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:21:39' prior: 51007086!
huboEmpate
	ganador := jugadorMano.
	perdedor := jugadorPie.! !

!classDefinition: #EnfrentamientoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'VIM 7/5/2021 20:21:46'!
Object subclass: #EnfrentamientoDeTruco
	instanceVariableNames: 'ganador primerJugador segundoJugador numeroDeEnfrentamiento perdedor jugadorMano jugadorPie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!EnfrentamientoDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:21:46' prior: 51007545!
initializeEntrePrimerJugador: aCartasDePrimerJugador versusSegundoJugador: aCartasDeSegundoJugador conJugadorMano: aJugadorMano conJugadorPie: aJugadorPie numeroDeEnfrentamiento: aNumeroDeEnfrentamiento 

	primerJugador := aCartasDePrimerJugador.
	segundoJugador := aCartasDeSegundoJugador.
	numeroDeEnfrentamiento := aNumeroDeEnfrentamiento.
	jugadorMano := aJugadorMano.
	jugadorPie := aJugadorPie.! !
!EnfrentamientoDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:21:46' prior: 51006304!
primeroEnJugar
	^primerJugador .! !
!EnfrentamientoDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:21:46' prior: 51007034!
enfrentarse
	((primerJugador at: numeroDeEnfrentamiento) empardaCon: (segundoJugador at: numeroDeEnfrentamiento )) ifTrue: [self huboEmpate].
	((primerJugador at: numeroDeEnfrentamiento) mataA: (segundoJugador at: numeroDeEnfrentamiento )) ifTrue: [self ganaElPrimero] ifFalse: [self ganaElSegundo].! !
!EnfrentamientoDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:21:46' prior: 51006819!
ganaElPrimero
	ganador := primerJugador.
	perdedor := segundoJugador.! !
!EnfrentamientoDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:21:46' prior: 51006970!
ganaElSegundo
	ganador := segundoJugador  .
	perdedor :=  primerJugador.! !

!testRun: #RondaDeTrucoTest #test8EnElSegundoEnfrentamientoJuegaPrimeroLaManoSiHuboEmpate stamp: 'VIM 7/5/2021 20:21:55'!
FAILURE!
!EnfrentamientoDeTruco methodsFor: 'accessing' stamp: 'VIM 7/5/2021 20:23:15' prior: 51007599!
enfrentarse
	((primerJugador at: numeroDeEnfrentamiento) empardaCon: (segundoJugador at: numeroDeEnfrentamiento )) ifTrue: [self huboEmpate] ifFalse: [	((primerJugador at: numeroDeEnfrentamiento) mataA: (segundoJugador at: numeroDeEnfrentamiento )) ifTrue: [self ganaElPrimero] ifFalse: [self ganaElSegundo]].! !

!testRun: #RondaDeTrucoTest #test8EnElSegundoEnfrentamientoJuegaPrimeroLaManoSiHuboEmpate stamp: 'VIM 7/5/2021 20:23:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test1CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 20:23:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test3NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 20:23:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test4LaManoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'VIM 7/5/2021 20:23:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test5EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 20:23:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test6EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 20:23:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test7EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero stamp: 'VIM 7/5/2021 20:23:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test8EnElSegundoEnfrentamientoJuegaPrimeroLaManoSiHuboEmpate stamp: 'VIM 7/5/2021 20:23:28'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:24:39'!
test7EnElTercerEnfrentamientoJuegaPrimeroElGanadorDelSegundo

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco espadaCon: 1).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda primeroEnJugarEnElEnfrentamiento: 2) equals: aCartasParaMano.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:25:05' prior: 51007672!
test7EnElTercerEnfrentamientoJuegaPrimeroElGanadorDelSegundo

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 1).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda primeroEnJugarEnElEnfrentamiento: 3) equals: aCartasParaPie.! !

!testRun: #RondaDeTrucoTest #test7EnElTercerEnfrentamientoJuegaPrimeroElGanadorDelSegundo stamp: 'VIM 7/5/2021 20:25:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test1CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 20:25:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test3NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 20:25:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test4LaManoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'VIM 7/5/2021 20:25:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test5EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 20:25:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test6EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 20:25:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test7EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero stamp: 'VIM 7/5/2021 20:25:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test7EnElTercerEnfrentamientoJuegaPrimeroElGanadorDelSegundo stamp: 'VIM 7/5/2021 20:25:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test8EnElSegundoEnfrentamientoJuegaPrimeroLaManoSiHuboEmpate stamp: 'VIM 7/5/2021 20:25:07'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:25:36'!
test9EnElTercerEnfrentamientoJuegaPrimeroElGanadorDelSegundo

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 1).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda primeroEnJugarEnElEnfrentamiento: 3) equals: aCartasParaPie.! !

!methodRemoval: RondaDeTrucoTest #test7EnElTercerEnfrentamientoJuegaPrimeroElGanadorDelSegundo stamp: 'VIM 7/5/2021 20:25:36'!
test7EnElTercerEnfrentamientoJuegaPrimeroElGanadorDelSegundo

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 1).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda primeroEnJugarEnElEnfrentamiento: 3) equals: aCartasParaPie.!

!testRun: #RondaDeTrucoTest #test9EnElTercerEnfrentamientoJuegaPrimeroElGanadorDelSegundo stamp: 'VIM 7/5/2021 20:25:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test1CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 20:25:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test3NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 20:25:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test4LaManoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'VIM 7/5/2021 20:25:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test5EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 20:25:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test6EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 20:25:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test7EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero stamp: 'VIM 7/5/2021 20:25:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test8EnElSegundoEnfrentamientoJuegaPrimeroLaManoSiHuboEmpate stamp: 'VIM 7/5/2021 20:25:38'!
PASSED!

!testRun: #RondaDeTrucoTest #test9EnElTercerEnfrentamientoJuegaPrimeroElGanadorDelSegundo stamp: 'VIM 7/5/2021 20:25:38'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:27:12' prior: 51007006!
test8EnElSegundoEnfrentamientoJuegaPrimeroLaManoSiHuboEmpate

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco bastoCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco copaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda primeroEnJugarEnElEnfrentamiento: 2) equals: aCartasParaMano.
	
	"Esto lo chequeo solo para el segundo enfrentamiento y hardcodeo la mano por lo aclarado en el momento del examen."! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:27:58'!
test11EnElTercerEnfrentamientoJuegaPrimeroElGanadorDelSegundo

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 1).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda primeroEnJugarEnElEnfrentamiento: 3) equals: aCartasParaPie.! !

!methodRemoval: RondaDeTrucoTest #test9EnElTercerEnfrentamientoJuegaPrimeroElGanadorDelSegundo stamp: 'VIM 7/5/2021 20:27:58'!
test9EnElTercerEnfrentamientoJuegaPrimeroElGanadorDelSegundo

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 1).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda primeroEnJugarEnElEnfrentamiento: 3) equals: aCartasParaPie.!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:28:14'!
test01CadaJugadorTieneTresCartas

	| aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	self
		should: [RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.]
		raise: Error
		withMessageText: RondaDeTruco noHayTresCartasParaCadaJugadorDescripcionDeError.! !

!methodRemoval: RondaDeTrucoTest #test1CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 20:28:14'!
test1CadaJugadorTieneTresCartas

	| aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	self
		should: [RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.]
		raise: Error
		withMessageText: RondaDeTruco noHayTresCartasParaCadaJugadorDescripcionDeError.!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:28:20'!
tes0t3NoHayCartasRepetidasEntreLosJugadores

	| aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	self
		should: [RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.]
		raise: Error
		withMessageText: RondaDeTruco hayCartasRepetidasEntreAmbosJugadoresDescripcionDeError ! !

!methodRemoval: RondaDeTrucoTest #test3NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 20:28:20'!
test3NoHayCartasRepetidasEntreLosJugadores

	| aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	self
		should: [RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.]
		raise: Error
		withMessageText: RondaDeTruco hayCartasRepetidasEntreAmbosJugadoresDescripcionDeError !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:28:27'!
test03NoHayCartasRepetidasEntreLosJugadores

	| aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	self
		should: [RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.]
		raise: Error
		withMessageText: RondaDeTruco hayCartasRepetidasEntreAmbosJugadoresDescripcionDeError ! !

!methodRemoval: RondaDeTrucoTest #tes0t3NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 20:28:27'!
tes0t3NoHayCartasRepetidasEntreLosJugadores

	| aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	self
		should: [RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.]
		raise: Error
		withMessageText: RondaDeTruco hayCartasRepetidasEntreAmbosJugadoresDescripcionDeError !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:28:42'!
test04LaManoJuegaPrimeroEnElPrimerEnfrentamiento

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 1).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda primeroEnJugarEnElEnfrentamiento: 1) equals: aCartasParaMano.! !

!methodRemoval: RondaDeTrucoTest #test4LaManoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'VIM 7/5/2021 20:28:42'!
test4LaManoJuegaPrimeroEnElPrimerEnfrentamiento

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 1).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda primeroEnJugarEnElEnfrentamiento: 1) equals: aCartasParaMano.!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:28:49'!
test05EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 1).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda ganadorDelEnfrentamiento: 1) equals: aCartasParaMano.! !

!methodRemoval: RondaDeTrucoTest #test5EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 20:28:49'!
test5EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 1).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda ganadorDelEnfrentamiento: 1) equals: aCartasParaMano.!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:29:00'!
test06EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDelPie

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 1).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda ganadorDelEnfrentamiento: 1) equals: aCartasParaPie.! !

!methodRemoval: RondaDeTrucoTest #test6EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 20:29:00'!
test6EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDelPie

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 1).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda ganadorDelEnfrentamiento: 1) equals: aCartasParaPie.!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:29:05'!
test07EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 1).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda primeroEnJugarEnElEnfrentamiento: 2) equals: aCartasParaMano.! !

!methodRemoval: RondaDeTrucoTest #test7EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero stamp: 'VIM 7/5/2021 20:29:05'!
test7EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 1).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda primeroEnJugarEnElEnfrentamiento: 2) equals: aCartasParaMano.!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:29:12'!
test08EnElSegundoEnfrentamientoJuegaPrimeroLaManoSiHuboEmpate

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco bastoCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco copaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda primeroEnJugarEnElEnfrentamiento: 2) equals: aCartasParaMano.
	
	"Esto lo chequeo solo para el segundo enfrentamiento y hardcodeo la mano por lo aclarado en el momento del examen."! !

!methodRemoval: RondaDeTrucoTest #test8EnElSegundoEnfrentamientoJuegaPrimeroLaManoSiHuboEmpate stamp: 'VIM 7/5/2021 20:29:12'!
test8EnElSegundoEnfrentamientoJuegaPrimeroLaManoSiHuboEmpate

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco bastoCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco copaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda primeroEnJugarEnElEnfrentamiento: 2) equals: aCartasParaMano.
	
	"Esto lo chequeo solo para el segundo enfrentamiento y hardcodeo la mano por lo aclarado en el momento del examen."!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:29:50'!
test09EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDeLaMano

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 1).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda ganadorDelEnfrentamiento: 1) equals: aCartasParaMano.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:30:09' prior: 51008285!
test09EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDeLaMano

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco espadaCon: 1).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda ganadorDelEnfrentamiento: 1) equals: aCartasParaMano.! !

!testRun: #RondaDeTrucoTest #test09EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 20:30:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 20:30:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 20:30:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'VIM 7/5/2021 20:30:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test05EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 20:30:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 20:30:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero stamp: 'VIM 7/5/2021 20:30:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnElSegundoEnfrentamientoJuegaPrimeroLaManoSiHuboEmpate stamp: 'VIM 7/5/2021 20:30:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 20:30:14'!
PASSED!

!testRun: #RondaDeTrucoTest #test11EnElTercerEnfrentamientoJuegaPrimeroElGanadorDelSegundo stamp: 'VIM 7/5/2021 20:30:14'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:30:54'!
test10EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDelPie

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 1).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda ganadorDelEnfrentamiento: 1) equals: aCartasParaPie.! !

!testRun: #RondaDeTrucoTest #test10EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 20:30:57'!
FAILURE!

!testRun: #RondaDeTrucoTest #test10EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 20:31:07'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:32:19' prior: 51008372!
test10EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDelPie

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 1).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda ganadorDelEnfrentamiento: 2) equals: aCartasParaPie.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:32:56'!
test12EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco oroCon: 5).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 1).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda ganadorDelEnfrentamiento: 2) equals: aCartasParaMano .! !

!testRun: #RondaDeTrucoTest #test12EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 20:32:58'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:34:01' prior: 51008428!
test12EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco oroCon: 5).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 1).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda ganadorDelEnfrentamiento: 3) equals: aCartasParaMano .! !

!testRun: #RondaDeTrucoTest #test12EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 20:34:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 20:34:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 20:34:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'VIM 7/5/2021 20:34:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test05EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 20:34:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 20:34:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero stamp: 'VIM 7/5/2021 20:34:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnElSegundoEnfrentamientoJuegaPrimeroLaManoSiHuboEmpate stamp: 'VIM 7/5/2021 20:34:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 20:34:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 20:34:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test11EnElTercerEnfrentamientoJuegaPrimeroElGanadorDelSegundo stamp: 'VIM 7/5/2021 20:34:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test12EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 20:34:02'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:34:25'!
test13EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDelPie

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 1).
	aCartasParaPie add: (CartaDeTruco espadaCon: 5).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda ganadorDelEnfrentamiento: 3) equals: aCartasParaPie .! !

!testRun: #RondaDeTrucoTest #test13EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 20:34:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 20:34:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 20:34:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'VIM 7/5/2021 20:34:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test05EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 20:34:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 20:34:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero stamp: 'VIM 7/5/2021 20:34:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnElSegundoEnfrentamientoJuegaPrimeroLaManoSiHuboEmpate stamp: 'VIM 7/5/2021 20:34:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 20:34:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 20:34:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test11EnElTercerEnfrentamientoJuegaPrimeroElGanadorDelSegundo stamp: 'VIM 7/5/2021 20:34:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test12EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 20:34:26'!
PASSED!

!testRun: #RondaDeTrucoTest #test13EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 20:34:26'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:34:46'!
test14

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 1).
	aCartasParaPie add: (CartaDeTruco espadaCon: 5).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda ganadorDelEnfrentamiento: 3) equals: aCartasParaPie .! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:36:28'!
test14ElQueGanaLosUltimosDosEnfrentamientosGanaLaRonda

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 1).
	aCartasParaPie add: (CartaDeTruco espadaCon: 5).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda ganadorDeLaRonda) equals: aCartasParaPie .! !

!methodRemoval: RondaDeTrucoTest #test14 stamp: 'VIM 7/5/2021 20:36:34'!
test14

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 1).
	aCartasParaPie add: (CartaDeTruco espadaCon: 5).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda ganadorDelEnfrentamiento: 3) equals: aCartasParaPie .!

!testRun: #RondaDeTrucoTest #test14ElQueGanaLosUltimosDosEnfrentamientosGanaLaRonda stamp: 'VIM 7/5/2021 20:36:41'!
ERROR!
!RondaDeTruco methodsFor: 'accessing' stamp: 'VIM 7/5/2021 20:36:49'!
ganadorDeLaRonda
	self shouldBeImplemented.! !

!classDefinition: #RondaDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'VIM 7/5/2021 20:37:11'!
Object subclass: #RondaDeTruco
	instanceVariableNames: 'cartasParaMano cartasParaPie enfrentamientos ganadorDeLaRonda'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!RondaDeTruco methodsFor: 'accessing' stamp: 'VIM 7/5/2021 20:37:09' prior: 51008672!
ganadorDeLaRonda

	^ganadorDeLaRonda.! !

!testRun: #RondaDeTrucoTest #test14ElQueGanaLosUltimosDosEnfrentamientosGanaLaRonda stamp: 'VIM 7/5/2021 20:37:16'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:38:48' prior: 51008084!
test05EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 1).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert:  aCartasParaMano equals: (ronda ganadorDelEnfrentamiento: 1).! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:39:05' prior: 51008624!
test14ElQueGanaLosUltimosDosEnfrentamientosGanaLaRonda

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 1).
	aCartasParaPie add: (CartaDeTruco espadaCon: 5).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: aCartasParaPie equals: (ronda ganadorDeLaRonda) .! !

!testRun: #RondaDeTrucoTest #test14ElQueGanaLosUltimosDosEnfrentamientosGanaLaRonda stamp: 'VIM 7/5/2021 20:39:08'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:40:12' prior: 51007485!
jugar
	enfrentamientos add: (self enfrentarseEntre: cartasParaMano versus: cartasParaPie numeroDeEnfrentamiento: 1).
	enfrentamientos add: (self enfrentarseEntre: ((enfrentamientos at: 1) ganador) versus: ((enfrentamientos at: 1) perdedor) numeroDeEnfrentamiento: 2).
	enfrentamientos add: (self enfrentarseEntre: ((enfrentamientos at: 2) ganador) versus: ((enfrentamientos at: 2) perdedor) numeroDeEnfrentamiento: 3).
	
	ganadorDeLaRonda := enfrentamientos jugadorQueGanoMasEnfrentamientos.! !

!testRun: #RondaDeTrucoTest #test14ElQueGanaLosUltimosDosEnfrentamientosGanaLaRonda stamp: 'VIM 7/5/2021 20:40:17'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:40:53' prior: 51008746!
jugar
	enfrentamientos add: (self enfrentarseEntre: cartasParaMano versus: cartasParaPie numeroDeEnfrentamiento: 1).
	enfrentamientos add: (self enfrentarseEntre: ((enfrentamientos at: 1) ganador) versus: ((enfrentamientos at: 1) perdedor) numeroDeEnfrentamiento: 2).
	enfrentamientos add: (self enfrentarseEntre: ((enfrentamientos at: 2) ganador) versus: ((enfrentamientos at: 2) perdedor) numeroDeEnfrentamiento: 3).
	
	ganadorDeLaRonda := self jugadorQueGanoMasEnfrentamientos: enfrentamientos.! !

!testRun: #RondaDeTrucoTest #test14ElQueGanaLosUltimosDosEnfrentamientosGanaLaRonda stamp: 'VIM 7/5/2021 20:40:57'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:41:03'!
jugadorQueGanoMasEnfrentamientos: anOrderedCollection 
	self shouldBeImplemented.! !

(enfrentamientos at: 1) ganador!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:43:56' prior: 51008792!
jugadorQueGanoMasEnfrentamientos: anEnfrentamientos
	(((enfrentamientos at: 2) ganador) = ((enfrentamientos at: 3) ganador)) ifTrue: [^ (enfrentamientos at: 2) ganador].
	! !

!testRun: #RondaDeTrucoTest #test14ElQueGanaLosUltimosDosEnfrentamientosGanaLaRonda stamp: 'VIM 7/5/2021 20:43:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 20:43:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 20:43:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'VIM 7/5/2021 20:43:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test05EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 20:43:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 20:43:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero stamp: 'VIM 7/5/2021 20:43:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnElSegundoEnfrentamientoJuegaPrimeroLaManoSiHuboEmpate stamp: 'VIM 7/5/2021 20:43:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 20:43:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 20:43:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test11EnElTercerEnfrentamientoJuegaPrimeroElGanadorDelSegundo stamp: 'VIM 7/5/2021 20:43:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test12EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 20:43:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test13EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 20:43:57'!
PASSED!

!testRun: #RondaDeTrucoTest #test14ElQueGanaLosUltimosDosEnfrentamientosGanaLaRonda stamp: 'VIM 7/5/2021 20:43:57'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:44:21'!
test15ElQueGanaElPrimerYTercerEnfrentamientoGanaLaRonda

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 1).
	aCartasParaPie add: (CartaDeTruco espadaCon: 5).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: aCartasParaPie equals: (ronda ganadorDeLaRonda) .! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:45:32' prior: 51008863!
test15ElQueGanaElPrimerYTercerEnfrentamientoGanaLaRonda

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 1).
	aCartasParaMano add: (CartaDeTruco espadaCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 5).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco oroCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: aCartasParaPie equals: (ronda ganadorDeLaRonda) .! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:45:37' prior: 51008887!
test15ElQueGanaElPrimerYTercerEnfrentamientoGanaLaRonda

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 1).
	aCartasParaMano add: (CartaDeTruco espadaCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 5).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco oroCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: aCartasParaMano equals: (ronda ganadorDeLaRonda) .! !

!testRun: #RondaDeTrucoTest #test15ElQueGanaElPrimerYTercerEnfrentamientoGanaLaRonda stamp: 'VIM 7/5/2021 20:45:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 20:45:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 20:45:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'VIM 7/5/2021 20:45:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test05EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 20:45:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 20:45:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero stamp: 'VIM 7/5/2021 20:45:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnElSegundoEnfrentamientoJuegaPrimeroLaManoSiHuboEmpate stamp: 'VIM 7/5/2021 20:45:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 20:45:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 20:45:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test11EnElTercerEnfrentamientoJuegaPrimeroElGanadorDelSegundo stamp: 'VIM 7/5/2021 20:45:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test12EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 20:45:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test13EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 20:45:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test14ElQueGanaLosUltimosDosEnfrentamientosGanaLaRonda stamp: 'VIM 7/5/2021 20:45:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ElQueGanaElPrimerYTercerEnfrentamientoGanaLaRonda stamp: 'VIM 7/5/2021 20:45:39'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:46:49' prior: 51008911!
test15ElQueGanaElPrimerYTercerEnfrentamientoGanaLaRonda

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco espadaCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 1).
	aCartasParaPie add: (CartaDeTruco oroCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 5).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: aCartasParaMano equals: (ronda ganadorDeLaRonda) .! !

!classDefinition: #EnfrentamientoDeTruco category: 'ISW1-2021-1C-2doParcial' stamp: 'VIM 7/5/2021 20:47:30'!
Object subclass: #EnfrentamientoDeTruco
	instanceVariableNames: 'ganador primerJugador segundoJugador numeroDeEnfrentamiento perdedor jugadorMano jugadorPie resultado'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-2doParcial'!
!EnfrentamientoDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:47:28' prior: 51007612!
ganaElPrimero
	ganador := primerJugador.
	perdedor := segundoJugador.
	resultado := #NoEmpate! !
!EnfrentamientoDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:47:40' prior: 51007618!
ganaElSegundo
	ganador := segundoJugador  .
	perdedor :=  primerJugador.
	resultado := #NoEmpate.! !
!EnfrentamientoDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:47:48' prior: 51007561!
huboEmpate
	ganador := jugadorMano.
	perdedor := jugadorPie.
	resultado := #Empate! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:49:02' prior: 51008994!
test15ElQueGanaElPrimerYTercerEnfrentamientoGanaLaRonda

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco espadaCon: 3).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 1).
	aCartasParaPie add: (CartaDeTruco oroCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 5).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: aCartasParaPie equals: (ronda ganadorDeLaRonda) .! !

!testRun: #RondaDeTrucoTest #test15ElQueGanaElPrimerYTercerEnfrentamientoGanaLaRonda stamp: 'VIM 7/5/2021 20:49:04'!
FAILURE!
!EnfrentamientoDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:50:22' prior: 51009029!
ganaElPrimero
	ganador := primerJugador.
	perdedor := segundoJugador.
	resultado := #NoEmpate! !
!EnfrentamientoDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:50:31' prior: 51009077!
ganaElPrimero
	ganador := primerJugador.
	perdedor := segundoJugador.! !
!EnfrentamientoDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:50:35' prior: 51009036!
ganaElSegundo
	ganador := segundoJugador  .
	perdedor :=  primerJugador..! !
!EnfrentamientoDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:50:36' prior: 51009090!
ganaElSegundo
	ganador := segundoJugador  .
	perdedor :=  primerJugador.! !
!EnfrentamientoDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:50:40' prior: 51009043!
huboEmpate
	ganador := jugadorMano.
	perdedor := jugadorPie.! !
!EnfrentamientoDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:51:29' prior: 51009084!
ganaElPrimero
	ganador := primerJugador.
	perdedor := segundoJugador.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:55:31' prior: 51008799!
jugadorQueGanoMasEnfrentamientos: anEnfrentamientos
	
	enfrentamientos select: [:anEnfrentamiento | (anEnfrentamiento ganador) = cartasParaMano.] size.
	enfrentamientos select: [:anEnfrentamiento | (anEnfrentamiento ganador) = cartasParaPie.] size.
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:55:51' prior: 51009114!
jugadorQueGanoMasEnfrentamientos: anEnfrentamientos
	
	| puntosParaMano puntosParaPie |
	puntosParaMano := enfrentamientos select: [:anEnfrentamiento | (anEnfrentamiento ganador) = cartasParaMano.] size.
	puntosParaPie := enfrentamientos select: [:anEnfrentamiento | (anEnfrentamiento ganador) = cartasParaPie.] size.
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:55:59' prior: 51009125!
jugadorQueGanoMasEnfrentamientos: anEnfrentamientos
	
	| puntosParaMano puntosParaPie |
	
	puntosParaMano := enfrentamientos select: [:anEnfrentamiento | (anEnfrentamiento ganador) = cartasParaMano.] size.
	puntosParaPie := enfrentamientos select: [:anEnfrentamiento | (anEnfrentamiento ganador) = cartasParaPie.] size.
	! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:56:53' prior: 51009139!
jugadorQueGanoMasEnfrentamientos: anEnfrentamientos
	
	| puntosParaMano puntosParaPie |
	
	puntosParaMano := enfrentamientos select: [:anEnfrentamiento | (anEnfrentamiento ganador) = cartasParaMano.] size.
	puntosParaPie := enfrentamientos select: [:anEnfrentamiento | (anEnfrentamiento ganador) = cartasParaPie.] size.
	
	(puntosParaMano < puntosParaPie ) ifTrue: [^cartasParaMano ] ifFalse: [(puntosParaMano > puntosParaPie ) ifTrue: [^cartasParaPie ] ifFalse: []]! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:57:06' prior: 51009153!
jugadorQueGanoMasEnfrentamientos: anEnfrentamientos
	
	| puntosParaMano puntosParaPie |
	
	puntosParaMano := enfrentamientos select: [:anEnfrentamiento | (anEnfrentamiento ganador) = cartasParaMano.] size.
	puntosParaPie := enfrentamientos select: [:anEnfrentamiento | (anEnfrentamiento ganador) = cartasParaPie.] size.
	
	(puntosParaMano < puntosParaPie ) ifTrue: [^cartasParaMano ] ifFalse: [(puntosParaMano > puntosParaPie ) ifTrue: [^cartasParaPie ]].! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:57:56'!
calcularPuntajeJugadorMano

	^ enfrentamientos select: [:anEnfrentamiento | (anEnfrentamiento ganador) = cartasParaMano.] size! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:57:56' prior: 51009171!
jugadorQueGanoMasEnfrentamientos: anEnfrentamientos
	
	| puntosParaMano puntosParaPie |
	
	puntosParaMano := self calcularPuntajeJugadorMano.
	puntosParaPie := enfrentamientos select: [:anEnfrentamiento | (anEnfrentamiento ganador) = cartasParaPie.] size.
	
	(puntosParaMano < puntosParaPie ) ifTrue: [^cartasParaMano ] ifFalse: [(puntosParaMano > puntosParaPie ) ifTrue: [^cartasParaPie ]].! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:58:08'!
calcularPuntajeJugadorPie

	^ enfrentamientos select: [:anEnfrentamiento | (anEnfrentamiento ganador) = cartasParaPie.] size! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:58:08' prior: 51009196!
jugadorQueGanoMasEnfrentamientos: anEnfrentamientos
	
	| puntosParaMano puntosParaPie |
	
	puntosParaMano := self calcularPuntajeJugadorMano.
	puntosParaPie := self calcularPuntajeJugadorPie.
	
	(puntosParaMano < puntosParaPie ) ifTrue: [^cartasParaMano ] ifFalse: [(puntosParaMano > puntosParaPie ) ifTrue: [^cartasParaPie ]].! !

!testRun: #RondaDeTrucoTest #test14ElQueGanaLosUltimosDosEnfrentamientosGanaLaRonda stamp: 'VIM 7/5/2021 20:58:53'!
ERROR!

!testRun: #RondaDeTrucoTest #test14ElQueGanaLosUltimosDosEnfrentamientosGanaLaRonda stamp: 'VIM 7/5/2021 20:59:18'!
ERROR!

!testRun: #RondaDeTrucoTest #test14ElQueGanaLosUltimosDosEnfrentamientosGanaLaRonda stamp: 'VIM 7/5/2021 20:59:29'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:59:41' prior: 51009188!
calcularPuntajeJugadorMano

	^ (enfrentamientos select: [:anEnfrentamiento | (anEnfrentamiento ganador) = cartasParaMano.]) size! !

!testRun: #RondaDeTrucoTest #test14ElQueGanaLosUltimosDosEnfrentamientosGanaLaRonda stamp: 'VIM 7/5/2021 20:59:43'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 20:59:51' prior: 51009211!
calcularPuntajeJugadorPie

	^ (enfrentamientos select: [:anEnfrentamiento | (anEnfrentamiento ganador) = cartasParaPie.]) size! !

!testRun: #RondaDeTrucoTest #test14ElQueGanaLosUltimosDosEnfrentamientosGanaLaRonda stamp: 'VIM 7/5/2021 20:59:53'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:01:03' prior: 51009218!
jugadorQueGanoMasEnfrentamientos: anEnfrentamientos
	
	| puntosParaMano puntosParaPie |
	
	puntosParaMano := self calcularPuntajeJugadorMano.
	puntosParaPie := self calcularPuntajeJugadorPie.
	
	(puntosParaMano > puntosParaPie ) ifTrue: [^cartasParaMano ] ifFalse: [(puntosParaMano < puntosParaPie ) ifTrue: [^cartasParaPie ]].! !

!testRun: #RondaDeTrucoTest #test14ElQueGanaLosUltimosDosEnfrentamientosGanaLaRonda stamp: 'VIM 7/5/2021 21:01:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 21:01:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 21:01:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'VIM 7/5/2021 21:01:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test05EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:01:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:01:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero stamp: 'VIM 7/5/2021 21:01:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnElSegundoEnfrentamientoJuegaPrimeroLaManoSiHuboEmpate stamp: 'VIM 7/5/2021 21:01:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:01:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:01:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test11EnElTercerEnfrentamientoJuegaPrimeroElGanadorDelSegundo stamp: 'VIM 7/5/2021 21:01:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test12EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:01:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test13EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:01:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test14ElQueGanaLosUltimosDosEnfrentamientosGanaLaRonda stamp: 'VIM 7/5/2021 21:01:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ElQueGanaElPrimerYTercerEnfrentamientoGanaLaRonda stamp: 'VIM 7/5/2021 21:01:06'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:01:51'!
test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRonda

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco espadaCon: 5).
	aCartasParaMano add: (CartaDeTruco oroCon: 5).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 1).
	aCartasParaPie add: (CartaDeTruco oroCon: 4).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: aCartasParaPie equals: (ronda ganadorDeLaRonda) .! !

!testRun: #RondaDeTrucoTest #test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRonda stamp: 'VIM 7/5/2021 21:01:53'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:02:52' prior: 51009337!
test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRonda

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco espadaCon: 4).
	aCartasParaMano add: (CartaDeTruco oroCon: 5).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 1).
	aCartasParaPie add: (CartaDeTruco oroCon: 5).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: aCartasParaPie equals: (ronda ganadorDeLaRonda) .! !

!testRun: #RondaDeTrucoTest #test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRonda stamp: 'VIM 7/5/2021 21:02:54'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:03:06' prior: 51009364!
test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRonda

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco espadaCon: 4).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 1).
	aCartasParaPie add: (CartaDeTruco oroCon: 5).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: aCartasParaPie equals: (ronda ganadorDeLaRonda) .! !

!testRun: #RondaDeTrucoTest #test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRonda stamp: 'VIM 7/5/2021 21:03:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 21:03:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 21:03:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'VIM 7/5/2021 21:03:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test05EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:03:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:03:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero stamp: 'VIM 7/5/2021 21:03:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnElSegundoEnfrentamientoJuegaPrimeroLaManoSiHuboEmpate stamp: 'VIM 7/5/2021 21:03:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:03:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:03:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test11EnElTercerEnfrentamientoJuegaPrimeroElGanadorDelSegundo stamp: 'VIM 7/5/2021 21:03:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test12EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:03:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test13EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:03:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test14ElQueGanaLosUltimosDosEnfrentamientosGanaLaRonda stamp: 'VIM 7/5/2021 21:03:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ElQueGanaElPrimerYTercerEnfrentamientoGanaLaRonda stamp: 'VIM 7/5/2021 21:03:08'!
PASSED!

!testRun: #RondaDeTrucoTest #test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRonda stamp: 'VIM 7/5/2021 21:03:08'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:03:25'!
test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRondaYTerminaLaRonda

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco espadaCon: 4).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 1).
	aCartasParaPie add: (CartaDeTruco oroCon: 5).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: aCartasParaPie equals: (ronda ganadorDeLaRonda) .! !

!methodRemoval: RondaDeTrucoTest #test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRonda stamp: 'VIM 7/5/2021 21:03:30'!
test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRonda

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco espadaCon: 4).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 1).
	aCartasParaPie add: (CartaDeTruco oroCon: 5).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: aCartasParaPie equals: (ronda ganadorDeLaRonda) .!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:04:10' prior: 51009477!
test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRondaYTerminaLaRonda

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco espadaCon: 4).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 1).
	aCartasParaPie add: (CartaDeTruco oroCon: 5).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: aCartasParaPie equals: (ronda ganadorDeLaRonda) .
	self assert: (ronda )! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:04:43' prior: 51009525!
test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRondaYTerminaLaRonda

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco espadaCon: 4).
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 1).
	aCartasParaPie add: (CartaDeTruco oroCon: 5).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: aCartasParaPie equals: (ronda ganadorDeLaRonda) .
	self assert: (ronda ganadorDelEnfrentamiento: 3) isNil .! !

!testRun: #RondaDeTrucoTest #test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRondaYTerminaLaRonda stamp: 'VIM 7/5/2021 21:04:45'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:06:37' prior: 51008769!
jugar
	enfrentamientos add: (self enfrentarseEntre: cartasParaMano versus: cartasParaPie numeroDeEnfrentamiento: 1).
	enfrentamientos add: (self enfrentarseEntre: ((enfrentamientos at: 1) ganador) versus: ((enfrentamientos at: 1) perdedor) numeroDeEnfrentamiento: 2).
	((enfrentamientos at: 2) ganador) = ((enfrentamientos at: 1) ganador)ifTrue: [^(enfrentamientos at: 1) ganador].
	enfrentamientos add: (self enfrentarseEntre: ((enfrentamientos at: 2) ganador) versus: ((enfrentamientos at: 2) perdedor) numeroDeEnfrentamiento: 3).
	
	ganadorDeLaRonda := self jugadorQueGanoMasEnfrentamientos: enfrentamientos.
	^ ganadorDeLaRonda ! !

!testRun: #RondaDeTrucoTest #test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRondaYTerminaLaRonda stamp: 'VIM 7/5/2021 21:06:45'!
FAILURE!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:08:11' prior: 51009580!
jugar
	enfrentamientos add: (self enfrentarseEntre: cartasParaMano versus: cartasParaPie numeroDeEnfrentamiento: 1).
	enfrentamientos add: (self enfrentarseEntre: ((enfrentamientos at: 1) ganador) versus: ((enfrentamientos at: 1) perdedor) numeroDeEnfrentamiento: 2).
	((enfrentamientos at: 2) ganador) = ((enfrentamientos at: 1) ganador)ifTrue: [^self ganarRondaEnDosEnfrentamientos: ((enfrentamientos at: 1) ganador)].
	enfrentamientos add: (self enfrentarseEntre: ((enfrentamientos at: 2) ganador) versus: ((enfrentamientos at: 2) perdedor) numeroDeEnfrentamiento: 3).
	
	ganadorDeLaRonda := self jugadorQueGanoMasEnfrentamientos: enfrentamientos.
	^ ganadorDeLaRonda ! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:08:39'!
ganarRondaEnDosEnfrentamientos: aGanadorDeLaRonda
	ganadorDeLaRonda := aGanadorDeLaRonda
	^ ganadorDeLaRonda ! !

!testRun: #RondaDeTrucoTest #test12EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:08:43'!
PASSED!

!testRun: #CartaDeTrucoTest #test01SonIgualesConMismoPaloYNumero stamp: 'VIM 7/5/2021 21:08:43'!
PASSED!

!testRun: #CartaDeTrucoTest #test02SonDistintasConDistintoPalo stamp: 'VIM 7/5/2021 21:08:43'!
PASSED!

!testRun: #CartaDeTrucoTest #test03SonDistintasConNumeroAunqueIgualPalo stamp: 'VIM 7/5/2021 21:08:43'!
PASSED!

!testRun: #CartaDeTrucoTest #test04CartasIgualesTienenElMismoHash stamp: 'VIM 7/5/2021 21:08:43'!
PASSED!

!testRun: #CartaDeTrucoTest #test05UnaCartaEsDistintaACualquierObjetoQueNoSeaCarta stamp: 'VIM 7/5/2021 21:08:43'!
PASSED!

!testRun: #CartaDeTrucoTest #test07NoHayCartaDeTrucoConNumeroOcho stamp: 'VIM 7/5/2021 21:08:43'!
PASSED!

!testRun: #CartaDeTrucoTest #test08NoHayCartaDeTrucoConNumeroNueve stamp: 'VIM 7/5/2021 21:08:43'!
PASSED!

!testRun: #CartaDeTrucoTest #test09LosPalosDeLaCartaDeTrucoSonBastoOroEspadaYCopa stamp: 'VIM 7/5/2021 21:08:43'!
PASSED!

!testRun: #CartaDeTrucoTest #test10NoSePuedeCrearCartaConNumeroMenorAUno stamp: 'VIM 7/5/2021 21:08:43'!
PASSED!

!testRun: #CartaDeTrucoTest #test11NoSePuedeCrearCartaConNumeroMayorADoce stamp: 'VIM 7/5/2021 21:08:43'!
PASSED!

!testRun: #CartaDeTrucoTest #test12ElNumeroDeLaCartaDebeSerEntero stamp: 'VIM 7/5/2021 21:08:43'!
PASSED!

!testRun: #CartaDeTrucoTest #test13LaTablaDeValoresEsCorrecta stamp: 'VIM 7/5/2021 21:08:43'!
PASSED!

!testRun: #CartaDeTrucoTest #test14HayCartasQueNoSonPardas stamp: 'VIM 7/5/2021 21:08:43'!
PASSED!

!testRun: #CartaDeTrucoTest #test15HayCartasQuePierdenConOtras stamp: 'VIM 7/5/2021 21:08:43'!
PASSED!

!testRun: #CartaDeTrucoTest #test16SieteDeCopasYDeBastoEsSieteFalso stamp: 'VIM 7/5/2021 21:08:43'!
PASSED!

!testRun: #CartaDeTrucoTest #test17SieteDeOroYDeEspadaNoSonSieteFalso stamp: 'VIM 7/5/2021 21:08:43'!
PASSED!

!testRun: #CartaDeTrucoTest #test18AnchoDeOroYDeCopaSonAnchoFalsos stamp: 'VIM 7/5/2021 21:08:43'!
PASSED!

!testRun: #CartaDeTrucoTest #test19AnchoDeEspadaYDeBastosNoSonAnchoFalsos stamp: 'VIM 7/5/2021 21:08:43'!
PASSED!

!testRun: #CartaDeTrucoTest #test20FallaBuscandoValorDeCartaInválida stamp: 'VIM 7/5/2021 21:08:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 21:08:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 21:08:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'VIM 7/5/2021 21:08:43'!
ERROR!

!testRun: #RondaDeTrucoTest #test05EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:08:43'!
ERROR!

!testRun: #RondaDeTrucoTest #test06EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:08:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero stamp: 'VIM 7/5/2021 21:08:43'!
ERROR!

!testRun: #RondaDeTrucoTest #test08EnElSegundoEnfrentamientoJuegaPrimeroLaManoSiHuboEmpate stamp: 'VIM 7/5/2021 21:08:43'!
ERROR!

!testRun: #RondaDeTrucoTest #test09EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:08:43'!
ERROR!

!testRun: #RondaDeTrucoTest #test10EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:08:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test11EnElTercerEnfrentamientoJuegaPrimeroElGanadorDelSegundo stamp: 'VIM 7/5/2021 21:08:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test12EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:08:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test13EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:08:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test14ElQueGanaLosUltimosDosEnfrentamientosGanaLaRonda stamp: 'VIM 7/5/2021 21:08:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ElQueGanaElPrimerYTercerEnfrentamientoGanaLaRonda stamp: 'VIM 7/5/2021 21:08:43'!
PASSED!

!testRun: #RondaDeTrucoTest #test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRondaYTerminaLaRonda stamp: 'VIM 7/5/2021 21:08:43'!
ERROR!

!testRun: #RondaDeTrucoTest #test04LaManoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'VIM 7/5/2021 21:08:49'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:08:59' prior: 51009632!
ganarRondaEnDosEnfrentamientos: aGanadorDeLaRonda
	ganadorDeLaRonda := aGanadorDeLaRonda.
	^ganadorDeLaRonda ! !

!testRun: #RondaDeTrucoTest #test12EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:09:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 21:09:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 21:09:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'VIM 7/5/2021 21:09:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test05EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:09:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:09:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero stamp: 'VIM 7/5/2021 21:09:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnElSegundoEnfrentamientoJuegaPrimeroLaManoSiHuboEmpate stamp: 'VIM 7/5/2021 21:09:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:09:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:09:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test11EnElTercerEnfrentamientoJuegaPrimeroElGanadorDelSegundo stamp: 'VIM 7/5/2021 21:09:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test12EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:09:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test13EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:09:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test14ElQueGanaLosUltimosDosEnfrentamientosGanaLaRonda stamp: 'VIM 7/5/2021 21:09:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ElQueGanaElPrimerYTercerEnfrentamientoGanaLaRonda stamp: 'VIM 7/5/2021 21:09:06'!
PASSED!

!testRun: #RondaDeTrucoTest #test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRondaYTerminaLaRonda stamp: 'VIM 7/5/2021 21:09:06'!
ERROR!

!testRun: #RondaDeTrucoTest #test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRondaYTerminaLaRonda stamp: 'VIM 7/5/2021 21:09:06'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:11:09' prior: 51008695!
test05EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := self cartasParaGanarLosUltimosDosEfrentamientos.
	aCartasParaPie := self cartasParaPerderLosUltimosDosEnfrentamientos.

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert:  aCartasParaMano equals: (ronda ganadorDelEnfrentamiento: 1).! !

!testRun: #RondaDeTrucoTest #test05EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:11:12'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:11:19'!
cartasParaGanarLosUltimosDosEfrentamientos
	self shouldBeImplemented.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:12:41' prior: 51009866!
cartasParaGanarLosUltimosDosEfrentamientos
	| cartas |
	cartas := OrderedCollection new.
	
	cartas add: (CartaDeTruco espadaCon: 4).
	cartas add: (CartaDeTruco espadaCon:1).
	cartas add: (CartaDeTruco espadaCon: 7).
	! !

!testRun: #RondaDeTrucoTest #test05EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:12:45'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:12:51'!
cartasParaPerderLosUltimosDosEnfrentamientos
	self shouldBeImplemented.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:13:06' prior: 51009872!
cartasParaGanarLosUltimosDosEfrentamientos
	| cartas |
	cartas := OrderedCollection new.
	
	cartas add: (CartaDeTruco espadaCon: 4).
	cartas add: (CartaDeTruco espadaCon:1).
	cartas add: (CartaDeTruco espadaCon: 7).
	^cartas! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:13:58' prior: 51009886!
cartasParaPerderLosUltimosDosEnfrentamientos
		| cartas |
	cartas := OrderedCollection new.
	
	cartas add: (CartaDeTruco oroCon: 7).
	cartas add: (CartaDeTruco oroCon:4).
	cartas add: (CartaDeTruco oroCon: 5).
	
	^cartas! !

!testRun: #RondaDeTrucoTest #test05EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:14:00'!
ERROR!

!testRun: #RondaDeTrucoTest #test05EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:14:17'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:14:42' prior: 51009846!
test05EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := self cartasParaPerderLosUltimosDosEnfrentamientos.
	aCartasParaPie := self cartasParaGanarLosUltimosDosEfrentamientos .

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert:  aCartasParaMano equals: (ronda ganadorDelEnfrentamiento: 1).! !

!testRun: #RondaDeTrucoTest #test05EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:14:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 21:14:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 21:14:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'VIM 7/5/2021 21:14:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test05EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:14:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:14:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero stamp: 'VIM 7/5/2021 21:14:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnElSegundoEnfrentamientoJuegaPrimeroLaManoSiHuboEmpate stamp: 'VIM 7/5/2021 21:14:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:14:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:14:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test11EnElTercerEnfrentamientoJuegaPrimeroElGanadorDelSegundo stamp: 'VIM 7/5/2021 21:14:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test12EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:14:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test13EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:14:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test14ElQueGanaLosUltimosDosEnfrentamientosGanaLaRonda stamp: 'VIM 7/5/2021 21:14:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ElQueGanaElPrimerYTercerEnfrentamientoGanaLaRonda stamp: 'VIM 7/5/2021 21:14:48'!
PASSED!

!testRun: #RondaDeTrucoTest #test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRondaYTerminaLaRonda stamp: 'VIM 7/5/2021 21:14:48'!
ERROR!

!testRun: #RondaDeTrucoTest #test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRondaYTerminaLaRonda stamp: 'VIM 7/5/2021 21:14:48'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:15:27' prior: 51008132!
test06EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDelPie

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := self  cartasParaGanarLosUltimosDosEfrentamientos .
	aCartasParaPie := self cartasParaPerderLosUltimosDosEnfrentamientos .

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda ganadorDelEnfrentamiento: 1) equals: aCartasParaPie.! !

!testRun: #RondaDeTrucoTest #test06EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:15:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 21:15:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 21:15:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'VIM 7/5/2021 21:15:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test05EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:15:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:15:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero stamp: 'VIM 7/5/2021 21:15:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnElSegundoEnfrentamientoJuegaPrimeroLaManoSiHuboEmpate stamp: 'VIM 7/5/2021 21:15:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:15:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:15:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test11EnElTercerEnfrentamientoJuegaPrimeroElGanadorDelSegundo stamp: 'VIM 7/5/2021 21:15:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test12EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:15:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test13EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:15:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test14ElQueGanaLosUltimosDosEnfrentamientosGanaLaRonda stamp: 'VIM 7/5/2021 21:15:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ElQueGanaElPrimerYTercerEnfrentamientoGanaLaRonda stamp: 'VIM 7/5/2021 21:15:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRondaYTerminaLaRonda stamp: 'VIM 7/5/2021 21:15:28'!
ERROR!

!testRun: #RondaDeTrucoTest #test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRondaYTerminaLaRonda stamp: 'VIM 7/5/2021 21:15:28'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:15:56' prior: 51008180!
test07EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := self cartasParaPerderLosUltimosDosEnfrentamientos .
	aCartasParaPie := self cartasParaGanarLosUltimosDosEfrentamientos .

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda primeroEnJugarEnElEnfrentamiento: 2) equals: aCartasParaMano.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:16:27' prior: 51008719!
test14ElQueGanaLosUltimosDosEnfrentamientosGanaLaRonda

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := self cartasParaPerderLosUltimosDosEnfrentamientos .
	aCartasParaPie := self cartasParaGanarLosUltimosDosEfrentamientos .

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: aCartasParaPie equals: (ronda ganadorDeLaRonda) .! !

!testRun: #RondaDeTrucoTest #test14ElQueGanaLosUltimosDosEnfrentamientosGanaLaRonda stamp: 'VIM 7/5/2021 21:16:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 21:16:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 21:16:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'VIM 7/5/2021 21:16:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test05EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:16:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:16:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero stamp: 'VIM 7/5/2021 21:16:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnElSegundoEnfrentamientoJuegaPrimeroLaManoSiHuboEmpate stamp: 'VIM 7/5/2021 21:16:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:16:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:16:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test11EnElTercerEnfrentamientoJuegaPrimeroElGanadorDelSegundo stamp: 'VIM 7/5/2021 21:16:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test12EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:16:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test13EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:16:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test14ElQueGanaLosUltimosDosEnfrentamientosGanaLaRonda stamp: 'VIM 7/5/2021 21:16:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ElQueGanaElPrimerYTercerEnfrentamientoGanaLaRonda stamp: 'VIM 7/5/2021 21:16:34'!
PASSED!

!testRun: #RondaDeTrucoTest #test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRondaYTerminaLaRonda stamp: 'VIM 7/5/2021 21:16:34'!
ERROR!

!testRun: #RondaDeTrucoTest #test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRondaYTerminaLaRonda stamp: 'VIM 7/5/2021 21:16:34'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:17:40' prior: 51008229!
test08EnElSegundoEnfrentamientoJuegaPrimeroLaManoSiHuboEmpate

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := self cartasParaEmpatarElPrimerEnfrentamientoYGanarLosUltimos.
	aCartasParaPie := self cartasParaEmpatarElPrimerEnfrentamientoYPerderLosUltimos.

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda primeroEnJugarEnElEnfrentamiento: 2) equals: aCartasParaMano.
	
	"Esto lo chequeo solo para el segundo enfrentamiento y hardcodeo la mano por lo aclarado en el momento del examen."! !

!testRun: #RondaDeTrucoTest #test08EnElSegundoEnfrentamientoJuegaPrimeroLaManoSiHuboEmpate stamp: 'VIM 7/5/2021 21:17:43'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:17:48'!
cartasParaEmpatarElPrimerEnfrentamientoYGanarLosUltimos
	self shouldBeImplemented.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:18:45' prior: 51010215!
cartasParaEmpatarElPrimerEnfrentamientoYGanarLosUltimos
	| cartas |
	cartas := OrderedCollection new.
	
	cartas add: (CartaDeTruco espadaCon: 6).
	cartas add: (CartaDeTruco espadaCon:1).
	cartas add: (CartaDeTruco espadaCon: 7).
	^cartas! !

!testRun: #RondaDeTrucoTest #test08EnElSegundoEnfrentamientoJuegaPrimeroLaManoSiHuboEmpate stamp: 'VIM 7/5/2021 21:18:47'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:18:51'!
cartasParaEmpatarElPrimerEnfrentamientoYPerderLosUltimos
	self shouldBeImplemented.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:19:05' prior: 51010236!
cartasParaEmpatarElPrimerEnfrentamientoYPerderLosUltimos
			| cartas |
	cartas := OrderedCollection new.
	
	cartas add: (CartaDeTruco oroCon: 6).
	cartas add: (CartaDeTruco oroCon:4).
	cartas add: (CartaDeTruco oroCon: 5).
	
	^cartas! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:19:08' prior: 51010242!
cartasParaEmpatarElPrimerEnfrentamientoYPerderLosUltimos
	| cartas |
	cartas := OrderedCollection new.
	
	cartas add: (CartaDeTruco oroCon: 6).
	cartas add: (CartaDeTruco oroCon:4).
	cartas add: (CartaDeTruco oroCon: 5).
	
	^cartas! !

!testRun: #RondaDeTrucoTest #test08EnElSegundoEnfrentamientoJuegaPrimeroLaManoSiHuboEmpate stamp: 'VIM 7/5/2021 21:19:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 21:19:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 21:19:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'VIM 7/5/2021 21:19:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test05EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:19:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:19:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero stamp: 'VIM 7/5/2021 21:19:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnElSegundoEnfrentamientoJuegaPrimeroLaManoSiHuboEmpate stamp: 'VIM 7/5/2021 21:19:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:19:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:19:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test11EnElTercerEnfrentamientoJuegaPrimeroElGanadorDelSegundo stamp: 'VIM 7/5/2021 21:19:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test12EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:19:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test13EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:19:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test14ElQueGanaLosUltimosDosEnfrentamientosGanaLaRonda stamp: 'VIM 7/5/2021 21:19:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ElQueGanaElPrimerYTercerEnfrentamientoGanaLaRonda stamp: 'VIM 7/5/2021 21:19:10'!
PASSED!

!testRun: #RondaDeTrucoTest #test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRondaYTerminaLaRonda stamp: 'VIM 7/5/2021 21:19:10'!
ERROR!

!testRun: #RondaDeTrucoTest #test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRondaYTerminaLaRonda stamp: 'VIM 7/5/2021 21:19:10'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:19:15' prior: 51009903!
cartasParaPerderLosUltimosDosEnfrentamientos
	| cartas |
	cartas := OrderedCollection new.
	
	cartas add: (CartaDeTruco oroCon: 7).
	cartas add: (CartaDeTruco oroCon:4).
	cartas add: (CartaDeTruco oroCon: 5).
	
	^cartas! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:19:42' prior: 51008309!
test09EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDeLaMano

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := self cartasParaGanarLosUltimosDosEfrentamientos.
	aCartasParaPie := self cartasParaPerderLosUltimosDosEnfrentamientos .

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda ganadorDelEnfrentamiento: 1) equals: aCartasParaMano.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:20:00' prior: 51008404!
test10EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDelPie

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := self cartasParaPerderLosUltimosDosEnfrentamientos.
	aCartasParaPie := self cartasParaGanarLosUltimosDosEfrentamientos .

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: (ronda ganadorDelEnfrentamiento: 2) equals: aCartasParaPie.! !

!testRun: #RondaDeTrucoTest #test10EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:20:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 21:20:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 21:20:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'VIM 7/5/2021 21:20:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test05EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:20:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:20:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero stamp: 'VIM 7/5/2021 21:20:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnElSegundoEnfrentamientoJuegaPrimeroLaManoSiHuboEmpate stamp: 'VIM 7/5/2021 21:20:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:20:02'!
FAILURE!

!testRun: #RondaDeTrucoTest #test10EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:20:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test11EnElTercerEnfrentamientoJuegaPrimeroElGanadorDelSegundo stamp: 'VIM 7/5/2021 21:20:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test12EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:20:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test13EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:20:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test14ElQueGanaLosUltimosDosEnfrentamientosGanaLaRonda stamp: 'VIM 7/5/2021 21:20:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ElQueGanaElPrimerYTercerEnfrentamientoGanaLaRonda stamp: 'VIM 7/5/2021 21:20:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRondaYTerminaLaRonda stamp: 'VIM 7/5/2021 21:20:02'!
ERROR!

!testRun: #RondaDeTrucoTest #test09EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:20:06'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:20:30' prior: 51010343!
test09EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDeLaMano

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := self cartasParaGanarLosUltimosDosEfrentamientos.
	aCartasParaPie := self cartasParaPerderLosUltimosDosEnfrentamientos .

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: aCartasParaMano equals: (ronda ganadorDelEnfrentamiento: 1).! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:20:42' prior: 51010443!
test09EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDeLaMano

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := self cartasParaGanarLosUltimosDosEfrentamientos.
	aCartasParaPie := self cartasParaPerderLosUltimosDosEnfrentamientos .

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: aCartasParaMano equals: (ronda ganadorDelEnfrentamiento: 2).! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:21:03' prior: 51010006!
test06EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDelPie

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := self  cartasParaGanarLosUltimosDosEfrentamientos .
	aCartasParaPie := self cartasParaPerderLosUltimosDosEnfrentamientos .

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: aCartasParaPie equals: (ronda ganadorDelEnfrentamiento: 1) .! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:21:18' prior: 51010090!
test07EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := self cartasParaPerderLosUltimosDosEnfrentamientos .
	aCartasParaPie := self cartasParaGanarLosUltimosDosEfrentamientos .

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: aCartasParaMano equals: (ronda primeroEnJugarEnElEnfrentamiento: 2).! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:21:46' prior: 51010190!
test08EnElSegundoEnfrentamientoJuegaPrimeroLaManoSiHuboEmpate

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := self cartasParaEmpatarElPrimerEnfrentamientoYGanarLosUltimos.
	aCartasParaPie := self cartasParaEmpatarElPrimerEnfrentamientoYPerderLosUltimos.

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: aCartasParaMano equals: (ronda primeroEnJugarEnElEnfrentamiento: 2).
	
	"Esto lo chequeo solo para el segundo enfrentamiento y hardcodeo la mano por lo aclarado en el momento del examen."! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:22:12' prior: 51010359!
test10EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDelPie

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := self cartasParaPerderLosUltimosDosEnfrentamientos.
	aCartasParaPie := self cartasParaGanarLosUltimosDosEfrentamientos .

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: aCartasParaPie equals: (ronda ganadorDelEnfrentamiento: 2) .! !

!testRun: #RondaDeTrucoTest #test11EnElTercerEnfrentamientoJuegaPrimeroElGanadorDelSegundo stamp: 'VIM 7/5/2021 21:22:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 21:22:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 21:22:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'VIM 7/5/2021 21:22:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test05EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:22:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:22:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero stamp: 'VIM 7/5/2021 21:22:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnElSegundoEnfrentamientoJuegaPrimeroLaManoSiHuboEmpate stamp: 'VIM 7/5/2021 21:22:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:22:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:22:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test11EnElTercerEnfrentamientoJuegaPrimeroElGanadorDelSegundo stamp: 'VIM 7/5/2021 21:22:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test12EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:22:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test13EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:22:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test14ElQueGanaLosUltimosDosEnfrentamientosGanaLaRonda stamp: 'VIM 7/5/2021 21:22:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ElQueGanaElPrimerYTercerEnfrentamientoGanaLaRonda stamp: 'VIM 7/5/2021 21:22:17'!
PASSED!

!testRun: #RondaDeTrucoTest #test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRondaYTerminaLaRonda stamp: 'VIM 7/5/2021 21:22:17'!
ERROR!

!testRun: #RondaDeTrucoTest #test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRondaYTerminaLaRonda stamp: 'VIM 7/5/2021 21:22:17'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:22:30' prior: 51007867!
test11EnElTercerEnfrentamientoJuegaPrimeroElGanadorDelSegundo

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 1).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: aCartasParaPie equals: (ronda primeroEnJugarEnElEnfrentamiento: 3) .! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:22:50' prior: 51010613!
test11EnElTercerEnfrentamientoJuegaPrimeroElGanadorDelSegundo

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := self cartasParaPerderLosUltimosDosEnfrentamientos .
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 1).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: aCartasParaPie equals: (ronda primeroEnJugarEnElEnfrentamiento: 3) .! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:22:57' prior: 51010637!
test11EnElTercerEnfrentamientoJuegaPrimeroElGanadorDelSegundo

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := self cartasParaPerderLosUltimosDosEnfrentamientos .
	aCartasParaPie := self cartasParaGanarLosUltimosDosEfrentamientos .
	
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 1).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: aCartasParaPie equals: (ronda primeroEnJugarEnElEnfrentamiento: 3) .! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:23:01' prior: 51010662!
test11EnElTercerEnfrentamientoJuegaPrimeroElGanadorDelSegundo

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := self cartasParaPerderLosUltimosDosEnfrentamientos .
	aCartasParaPie := self cartasParaGanarLosUltimosDosEfrentamientos .

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: aCartasParaPie equals: (ronda primeroEnJugarEnElEnfrentamiento: 3) .! !

!testRun: #RondaDeTrucoTest #test11EnElTercerEnfrentamientoJuegaPrimeroElGanadorDelSegundo stamp: 'VIM 7/5/2021 21:23:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 21:23:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 21:23:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'VIM 7/5/2021 21:23:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test05EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:23:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:23:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero stamp: 'VIM 7/5/2021 21:23:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnElSegundoEnfrentamientoJuegaPrimeroLaManoSiHuboEmpate stamp: 'VIM 7/5/2021 21:23:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:23:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:23:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test11EnElTercerEnfrentamientoJuegaPrimeroElGanadorDelSegundo stamp: 'VIM 7/5/2021 21:23:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test12EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:23:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test13EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:23:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test14ElQueGanaLosUltimosDosEnfrentamientosGanaLaRonda stamp: 'VIM 7/5/2021 21:23:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ElQueGanaElPrimerYTercerEnfrentamientoGanaLaRonda stamp: 'VIM 7/5/2021 21:23:02'!
PASSED!

!testRun: #RondaDeTrucoTest #test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRondaYTerminaLaRonda stamp: 'VIM 7/5/2021 21:23:02'!
ERROR!

!testRun: #RondaDeTrucoTest #test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRondaYTerminaLaRonda stamp: 'VIM 7/5/2021 21:23:02'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:23:22' prior: 51008456!
test12EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco oroCon: 5).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 1).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: aCartasParaMano  equals: (ronda ganadorDelEnfrentamiento: 3) .! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:23:48' prior: 51010772!
test12EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := self cartasParaGanarLosUltimosDosEfrentamientos .
	aCartasParaPie := self cartasParaPerderLosUltimosDosEnfrentamientos.

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: aCartasParaMano  equals: (ronda ganadorDelEnfrentamiento: 3) .! !

!testRun: #RondaDeTrucoTest #test12EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:23:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 21:23:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 21:23:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'VIM 7/5/2021 21:23:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test05EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:23:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:23:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero stamp: 'VIM 7/5/2021 21:23:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnElSegundoEnfrentamientoJuegaPrimeroLaManoSiHuboEmpate stamp: 'VIM 7/5/2021 21:23:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:23:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:23:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test11EnElTercerEnfrentamientoJuegaPrimeroElGanadorDelSegundo stamp: 'VIM 7/5/2021 21:23:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test12EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:23:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test13EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:23:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test14ElQueGanaLosUltimosDosEnfrentamientosGanaLaRonda stamp: 'VIM 7/5/2021 21:23:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ElQueGanaElPrimerYTercerEnfrentamientoGanaLaRonda stamp: 'VIM 7/5/2021 21:23:49'!
PASSED!

!testRun: #RondaDeTrucoTest #test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRondaYTerminaLaRonda stamp: 'VIM 7/5/2021 21:23:49'!
ERROR!

!testRun: #RondaDeTrucoTest #test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRondaYTerminaLaRonda stamp: 'VIM 7/5/2021 21:23:49'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:24:13' prior: 51008527!
test13EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDelPie

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco oroCon: 3).
	aCartasParaMano add: (CartaDeTruco espadaCon: 2).
	aCartasParaMano add: (CartaDeTruco oroCon: 4).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 1).
	aCartasParaPie add: (CartaDeTruco espadaCon: 5).

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: aCartasParaPie equals: (ronda ganadorDelEnfrentamiento: 3)  .! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:24:26' prior: 51010880!
test13EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDelPie

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := self cartasParaPerderLosUltimosDosEnfrentamientos .
	aCartasParaPie := self cartasParaGanarLosUltimosDosEfrentamientos .

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: aCartasParaPie equals: (ronda ganadorDelEnfrentamiento: 3)  .! !

!testRun: #RondaDeTrucoTest #test13EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:24:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 21:24:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 21:24:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'VIM 7/5/2021 21:24:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test05EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:24:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:24:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero stamp: 'VIM 7/5/2021 21:24:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnElSegundoEnfrentamientoJuegaPrimeroLaManoSiHuboEmpate stamp: 'VIM 7/5/2021 21:24:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:24:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:24:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test11EnElTercerEnfrentamientoJuegaPrimeroElGanadorDelSegundo stamp: 'VIM 7/5/2021 21:24:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test12EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:24:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test13EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:24:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test14ElQueGanaLosUltimosDosEnfrentamientosGanaLaRonda stamp: 'VIM 7/5/2021 21:24:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ElQueGanaElPrimerYTercerEnfrentamientoGanaLaRonda stamp: 'VIM 7/5/2021 21:24:28'!
PASSED!

!testRun: #RondaDeTrucoTest #test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRondaYTerminaLaRonda stamp: 'VIM 7/5/2021 21:24:28'!
ERROR!

!testRun: #RondaDeTrucoTest #test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRondaYTerminaLaRonda stamp: 'VIM 7/5/2021 21:24:28'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:25:21' prior: 51009049!
test15ElQueGanaElPrimerYTercerEnfrentamientoGanaLaRonda

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := self cartasParaGanarPrimerYUltimoEfrentamientos .
	aCartasParaPie := self cartasParaPerderPrimerYUltimoEfrentamientos.

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: aCartasParaPie equals: (ronda ganadorDeLaRonda) .! !

!testRun: #RondaDeTrucoTest #test15ElQueGanaElPrimerYTercerEnfrentamientoGanaLaRonda stamp: 'VIM 7/5/2021 21:25:22'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:25:28'!
cartasParaGanarPrimerYUltimoEfrentamientos
	self shouldBeImplemented.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:25:55' prior: 51011007!
cartasParaGanarPrimerYUltimoEfrentamientos

	| cartas |
	cartas := OrderedCollection new.
	
	cartas add: (CartaDeTruco espadaCon: 1).
	cartas add: (CartaDeTruco espadaCon:4).
	cartas add: (CartaDeTruco espadaCon: 7).
	^cartas! !

!testRun: #RondaDeTrucoTest #test15ElQueGanaElPrimerYTercerEnfrentamientoGanaLaRonda stamp: 'VIM 7/5/2021 21:26:10'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:26:15'!
cartasParaPerderPrimerYUltimoEfrentamientos
	self shouldBeImplemented.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:26:27' prior: 51011027!
cartasParaPerderPrimerYUltimoEfrentamientos
	| cartas |
	cartas := OrderedCollection new.
	
	cartas add: (CartaDeTruco oroCon: 4).
	cartas add: (CartaDeTruco oroCon:7).
	cartas add: (CartaDeTruco oroCon: 5).
	
	^cartas! !

!testRun: #RondaDeTrucoTest #test15ElQueGanaElPrimerYTercerEnfrentamientoGanaLaRonda stamp: 'VIM 7/5/2021 21:26:29'!
FAILURE!

!testRun: #RondaDeTrucoTest #test15ElQueGanaElPrimerYTercerEnfrentamientoGanaLaRonda stamp: 'VIM 7/5/2021 21:26:42'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:27:38' prior: 51010332!
cartasParaPerderLosUltimosDosEnfrentamientos
	| cartas |
	cartas := OrderedCollection new.
	
	cartas add: (CartaDeTruco oroCon: 7).
	cartas add: (CartaDeTruco oroCon:6).
	cartas add: (CartaDeTruco oroCon: 5).
	
	^cartas! !

!testRun: #RondaDeTrucoTest #test01CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 21:27:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 21:27:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'VIM 7/5/2021 21:27:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test05EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:27:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:27:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero stamp: 'VIM 7/5/2021 21:27:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnElSegundoEnfrentamientoJuegaPrimeroLaManoSiHuboEmpate stamp: 'VIM 7/5/2021 21:27:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:27:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:27:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test11EnElTercerEnfrentamientoJuegaPrimeroElGanadorDelSegundo stamp: 'VIM 7/5/2021 21:27:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test12EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:27:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test13EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:27:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test14ElQueGanaLosUltimosDosEnfrentamientosGanaLaRonda stamp: 'VIM 7/5/2021 21:27:40'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ElQueGanaElPrimerYTercerEnfrentamientoGanaLaRonda stamp: 'VIM 7/5/2021 21:27:40'!
FAILURE!

!testRun: #RondaDeTrucoTest #test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRondaYTerminaLaRonda stamp: 'VIM 7/5/2021 21:27:40'!
ERROR!

!testRun: #RondaDeTrucoTest #test15ElQueGanaElPrimerYTercerEnfrentamientoGanaLaRonda stamp: 'VIM 7/5/2021 21:27:43'!
FAILURE!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:28:01' prior: 51010988!
test15ElQueGanaElPrimerYTercerEnfrentamientoGanaLaRonda

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := self cartasParaPerderPrimerYUltimoEfrentamientos .
	aCartasParaPie := self cartasParaGanarPrimerYUltimoEfrentamientos.

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: aCartasParaPie equals: (ronda ganadorDeLaRonda) .! !

!testRun: #RondaDeTrucoTest #test15ElQueGanaElPrimerYTercerEnfrentamientoGanaLaRonda stamp: 'VIM 7/5/2021 21:28:02'!
PASSED!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:28:38' prior: 51009550!
test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRondaYTerminaLaRonda

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := self cartasParaPerderLosPrimerosDosEnfrentamientos .
	aCartasParaPie := self cartasParaGanarLosPrimerosDosEnfrentamientos .

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: aCartasParaPie equals: (ronda ganadorDeLaRonda) .
	self assert: (ronda ganadorDelEnfrentamiento: 3) isNil .! !

!testRun: #RondaDeTrucoTest #test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRondaYTerminaLaRonda stamp: 'VIM 7/5/2021 21:28:42'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:28:47'!
cartasParaPerderLosPrimerosDosEnfrentamientos
	self shouldBeImplemented.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:29:13' prior: 51011167!
cartasParaPerderLosPrimerosDosEnfrentamientos
	| cartas |
	cartas := OrderedCollection new.
	
	cartas add: (CartaDeTruco oroCon: 5).
	cartas add: (CartaDeTruco oroCon:6).
	cartas add: (CartaDeTruco oroCon: 7).
	
	^cartas! !

!testRun: #RondaDeTrucoTest #test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRondaYTerminaLaRonda stamp: 'VIM 7/5/2021 21:29:14'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:29:18'!
cartasParaGanarLosPrimerosDosEnfrentamientos
	self shouldBeImplemented.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:29:34' prior: 51011187!
cartasParaGanarLosPrimerosDosEnfrentamientos
	| cartas |
	cartas := OrderedCollection new.
	
	cartas add: (CartaDeTruco espadaCon: 7).
	cartas add: (CartaDeTruco espadaCon:1).
	cartas add: (CartaDeTruco espadaCon: 4).
	^cartas! !

!testRun: #RondaDeTrucoTest #test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRondaYTerminaLaRonda stamp: 'VIM 7/5/2021 21:29:35'!
ERROR!

!testRun: #RondaDeTrucoTest #test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRondaYTerminaLaRonda stamp: 'VIM 7/5/2021 21:30:00'!
ERROR!
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:31:24' prior: 51011145!
test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRondaYTerminaLaRonda

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := self cartasParaPerderLosPrimerosDosEnfrentamientos .
	aCartasParaPie := self cartasParaGanarLosPrimerosDosEnfrentamientos .

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: aCartasParaPie equals: (ronda ganadorDeLaRonda) .
	self assert: (ronda enfrentamientos) size = 2.! !
!RondaDeTrucoTest methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:31:41' prior: 51011212!
test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRondaYTerminaLaRonda

	| aCartasParaMano aCartasParaPie ronda |

	aCartasParaMano := self cartasParaPerderLosPrimerosDosEnfrentamientos .
	aCartasParaPie := self cartasParaGanarLosPrimerosDosEnfrentamientos .

	ronda := RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.
	
	ronda jugar.
	
	self assert: aCartasParaPie equals: (ronda ganadorDeLaRonda) .
	self assert: (ronda noHuboTercerEnfrentamiento).! !

!testRun: #RondaDeTrucoTest #test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRondaYTerminaLaRonda stamp: 'VIM 7/5/2021 21:31:44'!
ERROR!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:31:49'!
noHuboTercerEnfrentamiento
	self shouldBeImplemented.! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:32:05' prior: 51011252!
noHuboTercerEnfrentamiento
	^enfrentamientos size = 2.! !

!testRun: #RondaDeTrucoTest #test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRondaYTerminaLaRonda stamp: 'VIM 7/5/2021 21:32:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 21:32:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 21:32:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'VIM 7/5/2021 21:32:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test05EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:32:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:32:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero stamp: 'VIM 7/5/2021 21:32:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnElSegundoEnfrentamientoJuegaPrimeroLaManoSiHuboEmpate stamp: 'VIM 7/5/2021 21:32:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:32:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:32:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test11EnElTercerEnfrentamientoJuegaPrimeroElGanadorDelSegundo stamp: 'VIM 7/5/2021 21:32:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test12EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:32:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test13EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:32:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test14ElQueGanaLosUltimosDosEnfrentamientosGanaLaRonda stamp: 'VIM 7/5/2021 21:32:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ElQueGanaElPrimerYTercerEnfrentamientoGanaLaRonda stamp: 'VIM 7/5/2021 21:32:07'!
PASSED!

!testRun: #RondaDeTrucoTest #test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRondaYTerminaLaRonda stamp: 'VIM 7/5/2021 21:32:07'!
PASSED!
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:34:15'!
terminarEnDosEnfrentamientos

	^ self ganarRondaEnDosEnfrentamientos: ((enfrentamientos at: 1) ganador)! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:34:15' prior: 51009608!
jugar
	enfrentamientos add: (self enfrentarseEntre: cartasParaMano versus: cartasParaPie numeroDeEnfrentamiento: 1).
	enfrentamientos add: (self enfrentarseEntre: ((enfrentamientos at: 1) ganador) versus: ((enfrentamientos at: 1) perdedor) numeroDeEnfrentamiento: 2).
	((enfrentamientos at: 2) ganador) = ((enfrentamientos at: 1) ganador)ifTrue: [^self terminarEnDosEnfrentamientos].
	enfrentamientos add: (self enfrentarseEntre: ((enfrentamientos at: 2) ganador) versus: ((enfrentamientos at: 2) perdedor) numeroDeEnfrentamiento: 3).
	
	ganadorDeLaRonda := self jugadorQueGanoMasEnfrentamientos: enfrentamientos.
	^ ganadorDeLaRonda ! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:34:38' prior: 51011332!
jugar
	enfrentamientos add: (self enfrentarseEntre: cartasParaMano versus: cartasParaPie numeroDeEnfrentamiento: 1).
	enfrentamientos add: (self enfrentarseEntre: ((enfrentamientos at: 1) ganador) versus: ((enfrentamientos at: 1) perdedor) numeroDeEnfrentamiento: 2).
	((enfrentamientos at: 2) ganador) = ((enfrentamientos at: 1) ganador) ifTrue: [^self terminarEnDosEnfrentamientos].
	enfrentamientos add: (self enfrentarseEntre: ((enfrentamientos at: 2) ganador) versus: ((enfrentamientos at: 2) perdedor) numeroDeEnfrentamiento: 3).
	
	ganadorDeLaRonda := self jugadorQueGanoMasEnfrentamientos: enfrentamientos.
	^ ganadorDeLaRonda ! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:35:09' prior: 51011355!
jugar
	enfrentamientos add: (self enfrentarseEntre: cartasParaMano versus: cartasParaPie numeroDeEnfrentamiento: 1).
	enfrentamientos add: (self enfrentarseEntre: ((enfrentamientos at: 1) ganador) versus: ((enfrentamientos at: 1) perdedor) numeroDeEnfrentamiento: 2).
	
	((enfrentamientos at: 2) ganador) = ((enfrentamientos at: 1) ganador) ifTrue: [^self terminarEnDosEnfrentamientos].
	
	enfrentamientos add: (self enfrentarseEntre: ((enfrentamientos at: 2) ganador) versus: ((enfrentamientos at: 2) perdedor) numeroDeEnfrentamiento: 3).
	
	ganadorDeLaRonda := self jugadorQueGanoMasEnfrentamientos: enfrentamientos.
	^ ganadorDeLaRonda ! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:35:27'!
jugarPrimerEnfrentamiento

	^ enfrentamientos add: (self enfrentarseEntre: cartasParaMano versus: cartasParaPie numeroDeEnfrentamiento: 1)! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:35:27' prior: 51011378!
jugar
	self jugarPrimerEnfrentamiento.
	enfrentamientos add: (self enfrentarseEntre: ((enfrentamientos at: 1) ganador) versus: ((enfrentamientos at: 1) perdedor) numeroDeEnfrentamiento: 2).
	
	((enfrentamientos at: 2) ganador) = ((enfrentamientos at: 1) ganador) ifTrue: [^self terminarEnDosEnfrentamientos].
	
	enfrentamientos add: (self enfrentarseEntre: ((enfrentamientos at: 2) ganador) versus: ((enfrentamientos at: 2) perdedor) numeroDeEnfrentamiento: 3).
	
	ganadorDeLaRonda := self jugadorQueGanoMasEnfrentamientos: enfrentamientos.
	^ ganadorDeLaRonda ! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:35:37'!
jugarSegundoEnfrentamiento

	^ enfrentamientos add: (self enfrentarseEntre: ((enfrentamientos at: 1) ganador) versus: ((enfrentamientos at: 1) perdedor) numeroDeEnfrentamiento: 2)! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:35:37' prior: 51011409!
jugar
	self jugarPrimerEnfrentamiento.
	self jugarSegundoEnfrentamiento.
	
	((enfrentamientos at: 2) ganador) = ((enfrentamientos at: 1) ganador) ifTrue: [^self terminarEnDosEnfrentamientos].
	
	enfrentamientos add: (self enfrentarseEntre: ((enfrentamientos at: 2) ganador) versus: ((enfrentamientos at: 2) perdedor) numeroDeEnfrentamiento: 3).
	
	ganadorDeLaRonda := self jugadorQueGanoMasEnfrentamientos: enfrentamientos.
	^ ganadorDeLaRonda ! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:35:51'!
jugarTercerEnfrentamiento

	^ enfrentamientos add: (self enfrentarseEntre: ((enfrentamientos at: 2) ganador) versus: ((enfrentamientos at: 2) perdedor) numeroDeEnfrentamiento: 3)! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:35:51' prior: 51011439!
jugar
	self jugarPrimerEnfrentamiento.
	self jugarSegundoEnfrentamiento.
	
	((enfrentamientos at: 2) ganador) = ((enfrentamientos at: 1) ganador) ifTrue: [^self terminarEnDosEnfrentamientos].
	
	self jugarTercerEnfrentamiento.
	
	ganadorDeLaRonda := self jugadorQueGanoMasEnfrentamientos: enfrentamientos.
	^ ganadorDeLaRonda ! !
!RondaDeTruco methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:36:30' prior: 51011465!
jugar
	self jugarPrimerEnfrentamiento.
	self jugarSegundoEnfrentamiento.
	((enfrentamientos at: 2) ganador) = ((enfrentamientos at: 1) ganador) ifTrue: [^self terminarEnDosEnfrentamientos].
	self jugarTercerEnfrentamiento.
	
	ganadorDeLaRonda := self jugadorQueGanoMasEnfrentamientos: enfrentamientos.
	^ ganadorDeLaRonda ! !
!RondaDeTruco class methodsFor: 'instance creation' stamp: 'VIM 7/5/2021 21:39:30'!
assertNoTienenCartasRepetidasEntre: aCartasParaMano y: aCartasParaPie.

	((aCartasParaMano intersection: aCartasParaPie) isEmpty ) ifFalse: [self signalHayCartasRepetidasEntreAmbosJugadores.].! !
!RondaDeTruco class methodsFor: 'as yet unclassified' stamp: 'VIM 7/5/2021 21:39:30' prior: 51005357!
para: aCartasParaMano versus: aCartasParaPie

	(aCartasParaMano size = 3) ifFalse: [self signalNoTieneTresCartas].
	(aCartasParaPie size = 3) ifFalse: [self signalNoTieneTresCartas].
	
	self assertNoTieneCartasRepetidas: aCartasParaMano.
	self assertNoTieneCartasRepetidas: aCartasParaPie.
	self assertNoTienenCartasRepetidasEntre: aCartasParaMano y: aCartasParaPie.

	^self new initializePara: aCartasParaMano versus: aCartasParaPie ! !

!methodRemoval: RondaDeTruco class #assertNoTienenCartasRepetidas:y: stamp: 'VIM 7/5/2021 21:39:30'!
assertNoTienenCartasRepetidas: aCartasParaMano y: aCartasParaPie.

	((aCartasParaMano intersection: aCartasParaPie) isEmpty ) ifFalse: [self signalHayCartasRepetidasEntreAmbosJugadores.].!
!RondaDeTruco class methodsFor: 'assertions' stamp: 'VIM 7/5/2021 21:43:22' prior: 51005344!
assertNoTieneCartasRepetidas: aManoDeCartasParaUnJugador
	
	(aManoDeCartasParaUnJugador intersection: aManoDeCartasParaUnJugador) ifFalse: [^self signalHayCartasRepetidasEnLaManoDeUnJugador ]
	
	"Falta Implementar"
	! !
!RondaDeTruco class methodsFor: 'assertions' stamp: 'VIM 7/5/2021 21:45:47' prior: 51011528!
assertNoTieneCartasRepetidas: aManoDeCartasParaUnJugador
	
	(aManoDeCartasParaUnJugador difference: aManoDeCartasParaUnJugador) ifFalse: [^self signalHayCartasRepetidasEnLaManoDeUnJugador ]
	
	"Falta Implementar"
	! !
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'VIM 7/5/2021 21:45:56'!
test2NoHayCartasRepetidasEnUnMismoJugador

	| aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco anchoDeEspada).
	aCartasParaMano add: (CartaDeTruco anchoDeEspada).
	aCartasParaMano add: (CartaDeTruco anchoDeBasto).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	self
		should: [RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.]
		raise: Error
		withMessageText: RondaDeTruco hayCartasRepetidasEnLaManoDeUnJugadorDescripcionDeError.! !

!methodRemoval: RondaDeTrucoTest #xtest2NoHayCartasRepetidasEnUnMismoJugador stamp: 'VIM 7/5/2021 21:45:56'!
xtest2NoHayCartasRepetidasEnUnMismoJugador

	| aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco anchoDeEspada).
	aCartasParaMano add: (CartaDeTruco anchoDeEspada).
	aCartasParaMano add: (CartaDeTruco anchoDeBasto).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	self
		should: [RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.]
		raise: Error
		withMessageText: RondaDeTruco hayCartasRepetidasEnLaManoDeUnJugadorDescripcionDeError.!
!RondaDeTrucoTest methodsFor: 'tests' stamp: 'VIM 7/5/2021 21:46:08'!
test02NoHayCartasRepetidasEnUnMismoJugador

	| aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco anchoDeEspada).
	aCartasParaMano add: (CartaDeTruco anchoDeEspada).
	aCartasParaMano add: (CartaDeTruco anchoDeBasto).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	self
		should: [RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.]
		raise: Error
		withMessageText: RondaDeTruco hayCartasRepetidasEnLaManoDeUnJugadorDescripcionDeError.! !

!methodRemoval: RondaDeTrucoTest #test2NoHayCartasRepetidasEnUnMismoJugador stamp: 'VIM 7/5/2021 21:46:08'!
test2NoHayCartasRepetidasEnUnMismoJugador

	| aCartasParaMano aCartasParaPie |

	aCartasParaMano := OrderedCollection new.
	aCartasParaPie := OrderedCollection new.
	
	aCartasParaMano add: (CartaDeTruco anchoDeEspada).
	aCartasParaMano add: (CartaDeTruco anchoDeEspada).
	aCartasParaMano add: (CartaDeTruco anchoDeBasto).
	
	aCartasParaPie add: (CartaDeTruco espadaCon: 2).
	aCartasParaPie add: (CartaDeTruco espadaCon: 3).
	aCartasParaPie add: (CartaDeTruco espadaCon: 4).

	self
		should: [RondaDeTruco para: aCartasParaMano versus: aCartasParaPie.]
		raise: Error
		withMessageText: RondaDeTruco hayCartasRepetidasEnLaManoDeUnJugadorDescripcionDeError.!

!testRun: #RondaDeTrucoTest #test02NoHayCartasRepetidasEnUnMismoJugador stamp: 'VIM 7/5/2021 21:46:42'!
FAILURE!

!testRun: #RondaDeTrucoTest #test02NoHayCartasRepetidasEnUnMismoJugador stamp: 'VIM 7/5/2021 21:47:07'!
FAILURE!

(aManoDeCartasParaUnJugador difference: aManoDeCartasParaUnJugador)!

(aManoDeCartasParaUnJugador intersection: aManoDeCartasParaUnJugador)!
!RondaDeTruco class methodsFor: 'assertions' stamp: 'VIM 7/5/2021 21:50:13' prior: 51011538!
assertNoTieneCartasRepetidas: aManoDeCartasParaUnJugador
	
	(aManoDeCartasParaUnJugador collect: [:aCarta | aManoDeCartasParaUnJugador select: [:aCartaParaComparar | aCartaParaComparar = aCarta ]]) ifFalse: [^self signalHayCartasRepetidasEnLaManoDeUnJugador ]
	
	"Falta Implementar"
	! !

!testRun: #RondaDeTrucoTest #test02NoHayCartasRepetidasEnUnMismoJugador stamp: 'VIM 7/5/2021 21:50:31'!
FAILURE!

!testRun: #RondaDeTrucoTest #test02NoHayCartasRepetidasEnUnMismoJugador stamp: 'VIM 7/5/2021 21:51:17'!
FAILURE!
!RondaDeTruco class methodsFor: 'assertions' stamp: 'VIM 7/5/2021 21:51:51' prior: 51011654!
assertNoTieneCartasRepetidas: aManoDeCartasParaUnJugador
	
	(aManoDeCartasParaUnJugador collect: [:aCarta | aManoDeCartasParaUnJugador select: [:aCartaParaComparar | aCartaParaComparar = aCarta ]]) isEmpty ifFalse: [^self signalHayCartasRepetidasEnLaManoDeUnJugador ]
	
	"Falta Implementar"
	! !

(aManoDeCartasParaUnJugador collect: [:aCarta | aManoDeCartasParaUnJugador select: [:aCartaParaComparar | aCartaParaComparar = aCarta ]])!

(aManoDeCartasParaUnJugador collect: [:aCarta | aManoDeCartasParaUnJugador select: [:aCartaParaComparar | aCartaParaComparar = aCarta ]])!
!RondaDeTruco class methodsFor: 'assertions' stamp: 'VIM 7/5/2021 21:53:17' prior: 51011674!
assertNoTieneCartasRepetidas: aManoDeCartasParaUnJugador
	
	(aManoDeCartasParaUnJugador collect: [:aCarta | aManoDeCartasParaUnJugador select: [:aCartaParaComparar | aCartaParaComparar = aCarta ]]) isEmpty ifFalse: [^self signalHayCartasRepetidasEnLaManoDeUnJugador ]
! !
!RondaDeTruco class methodsFor: 'assertions' stamp: 'VIM 7/5/2021 21:57:05' prior: 51011695!
assertNoTieneCartasRepetidas: aManoDeCartasParaUnJugador
	
	[((aManoDeCartasParaUnJugador at: 1) = 	(aManoDeCartasParaUnJugador at: 2))or: ((aManoDeCartasParaUnJugador at: 1) = 	(aManoDeCartasParaUnJugador at: 3))or: ((aManoDeCartasParaUnJugador at: 3) = 	(aManoDeCartasParaUnJugador at: 2))] ifTrue: [^self signalHayCartasRepetidasEnLaManoDeUnJugador ]
! !
!RondaDeTruco class methodsFor: 'assertions' stamp: 'VIM 7/5/2021 21:57:17' prior: 51011707!
assertNoTieneCartasRepetidas: aManoDeCartasParaUnJugador
	
	[((aManoDeCartasParaUnJugador at: 1) = 	(aManoDeCartasParaUnJugador at: 2))or: ((aManoDeCartasParaUnJugador at: 1) = 	(aManoDeCartasParaUnJugador at: 3))or: ((aManoDeCartasParaUnJugador at: 3) = 	(aManoDeCartasParaUnJugador at: 2))] ifTrue: [^self signalHayCartasRepetidasEnLaManoDeUnJugador ]
! !
!RondaDeTruco class methodsFor: 'assertions' stamp: 'VIM 7/5/2021 21:57:38' prior: 51011722!
assertNoTieneCartasRepetidas: aManoDeCartasParaUnJugador
	
	[((aManoDeCartasParaUnJugador at: 1) = 	(aManoDeCartasParaUnJugador at: 2))or: [((aManoDeCartasParaUnJugador at: 1) = 	(aManoDeCartasParaUnJugador at: 3))]or: [((aManoDeCartasParaUnJugador at: 3) = 	(aManoDeCartasParaUnJugador at: 2))]] ifTrue: [^self signalHayCartasRepetidasEnLaManoDeUnJugador ]
! !

((aManoDeCartasParaUnJugador at: 1) = 	(aManoDeCartasParaUnJugador at: 2))!
!RondaDeTruco class methodsFor: 'assertions' stamp: 'VIM 7/5/2021 21:58:35' prior: 51011737!
assertNoTieneCartasRepetidas: aManoDeCartasParaUnJugador
	
	((aManoDeCartasParaUnJugador at: 1) = 	(aManoDeCartasParaUnJugador at: 2)) ifTrue: [^self signalHayCartasRepetidasEnLaManoDeUnJugador ].	
	((aManoDeCartasParaUnJugador at: 1) = 	(aManoDeCartasParaUnJugador at: 3)) ifTrue: [^self signalHayCartasRepetidasEnLaManoDeUnJugador ].
	((aManoDeCartasParaUnJugador at: 3) = 	(aManoDeCartasParaUnJugador at: 2)) ifTrue: [^self signalHayCartasRepetidasEnLaManoDeUnJugador ].
! !

!testRun: #RondaDeTrucoTest #test02NoHayCartasRepetidasEnUnMismoJugador stamp: 'VIM 7/5/2021 21:58:37'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoHayCartasRepetidasEnUnMismoJugador stamp: 'VIM 7/5/2021 21:58:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test01CadaJugadorTieneTresCartas stamp: 'VIM 7/5/2021 21:58:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test02NoHayCartasRepetidasEnUnMismoJugador stamp: 'VIM 7/5/2021 21:58:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test03NoHayCartasRepetidasEntreLosJugadores stamp: 'VIM 7/5/2021 21:58:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test04LaManoJuegaPrimeroEnElPrimerEnfrentamiento stamp: 'VIM 7/5/2021 21:58:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test05EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:58:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test06EnElPrimerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:58:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test07EnElSegundoEnfrentamientoJuegaPrimeroElGanadorDelPrimero stamp: 'VIM 7/5/2021 21:58:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test08EnElSegundoEnfrentamientoJuegaPrimeroLaManoSiHuboEmpate stamp: 'VIM 7/5/2021 21:58:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test09EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:58:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test10EnElSegundoEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:58:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test11EnElTercerEnfrentamientoJuegaPrimeroElGanadorDelSegundo stamp: 'VIM 7/5/2021 21:58:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test12EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDeLaMano stamp: 'VIM 7/5/2021 21:58:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test13EnElTercerEnfrentamientoGanaLaMejorCartaQueEsDelPie stamp: 'VIM 7/5/2021 21:58:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test14ElQueGanaLosUltimosDosEnfrentamientosGanaLaRonda stamp: 'VIM 7/5/2021 21:58:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test15ElQueGanaElPrimerYTercerEnfrentamientoGanaLaRonda stamp: 'VIM 7/5/2021 21:58:39'!
PASSED!

!testRun: #RondaDeTrucoTest #test16ElQueGanaPrimerosDosEnfrentamientosGanaLaRondaYTerminaLaRonda stamp: 'VIM 7/5/2021 21:58:39'!
PASSED!

----QUIT----(5 July 2021 22:00:59) CuisUniversity-4532.image priorSource: 21503388!